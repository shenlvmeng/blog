<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Shenlvmeng&#39;s Blog • Posts by &#34;笔记&#34; tag</title>
        <link>http://shenlvmeng.github.com/blog</link>
        <description>Be sharp, my friend.</description>
        <language>zh-CN</language>
        <pubDate>Thu, 13 Sep 2018 23:35:11 +0800</pubDate>
        <lastBuildDate>Thu, 13 Sep 2018 23:35:11 +0800</lastBuildDate>
        <category>总结</category>
        <category>制度</category>
        <category>道德</category>
        <category>文官</category>
        <category>万历</category>
        <category>明朝</category>
        <category>读书笔记</category>
        <category>展望</category>
        <category>2018</category>
        <category>2019</category>
        <category>flag</category>
        <category>2020</category>
        <category>2021</category>
        <category>2022</category>
        <category>2023</category>
        <category>面试</category>
        <category>前端</category>
        <category>FAQ</category>
        <category>HTML</category>
        <category>CSS</category>
        <category>style guide</category>
        <category>编程</category>
        <category>范式</category>
        <category>设计</category>
        <category>艺术</category>
        <category>质量</category>
        <category>async_hooks</category>
        <category>cls-hooked</category>
        <category>logId</category>
        <category>录音</category>
        <category>getUserMedia</category>
        <category>AudioContext</category>
        <category>PCM</category>
        <category>WAVE</category>
        <category>二叉搜索树</category>
        <category>算法</category>
        <category>回忆</category>
        <category>老朋友</category>
        <category>C</category>
        <category>Hash</category>
        <category>布隆过滤器</category>
        <category>字符串检索</category>
        <category>canvas</category>
        <category>流程图</category>
        <category>d3</category>
        <category>g6</category>
        <category>zrender</category>
        <category>processOn</category>
        <category>SDN</category>
        <category>cbench</category>
        <category>安装说明</category>
        <category>绘图</category>
        <category>动画</category>
        <category>攻略</category>
        <category>流水账</category>
        <category>成都</category>
        <category>重庆</category>
        <category>武汉</category>
        <category>重构</category>
        <category>代码</category>
        <category>代码风格</category>
        <category>数据可视化</category>
        <category>爬虫</category>
        <category>chrome</category>
        <category>crx</category>
        <category>扩展</category>
        <category>CORS</category>
        <category>跨域</category>
        <category>盒模型</category>
        <category>浮动</category>
        <category>Reactive Programming</category>
        <category>JavaScript</category>
        <category>Cycle.js</category>
        <category>Dart</category>
        <category>最佳实践</category>
        <category>引流</category>
        <category>universal-link</category>
        <category>app-link</category>
        <category>脚手架</category>
        <category>degit</category>
        <category>git</category>
        <category>设计模式</category>
        <category>类</category>
        <category>接口</category>
        <category>抽象类</category>
        <category>DOM</category>
        <category>Docker</category>
        <category>ONOS</category>
        <category>控制器</category>
        <category>虚拟化</category>
        <category>笔记</category>
        <category>UX</category>
        <category>UED</category>
        <category>准则</category>
        <category>Java</category>
        <category>Ruby</category>
        <category>反射</category>
        <category>编程范式</category>
        <category>鸭子类型</category>
        <category>管理</category>
        <category>效率</category>
        <category>知识工作者</category>
        <category>卓有成效</category>
        <category>Elm</category>
        <category>框架</category>
        <category>函数式编程</category>
        <category>虚网映射</category>
        <category>Javascript</category>
        <category>并发</category>
        <category>event loop</category>
        <category>覆盖率</category>
        <category>端到端测试</category>
        <category>istanbul</category>
        <category>istanbuljs</category>
        <category>JavaSript</category>
        <category>Express</category>
        <category>源码</category>
        <category>代码覆盖率</category>
        <category>istanbul-middleware</category>
        <category>代码插桩</category>
        <category>require钩子</category>
        <category>babel-plugin-istanbul</category>
        <category>css</category>
        <category>html5</category>
        <category>flex</category>
        <category>javascript</category>
        <category>roadmap</category>
        <category>闭包</category>
        <category>Haskell</category>
        <category>monad</category>
        <category>后端</category>
        <category>管理后台</category>
        <category>egg.js</category>
        <category>工作流</category>
        <category>pull request</category>
        <category>golang</category>
        <category>语言学习</category>
        <category>黑客与画家</category>
        <category>创业</category>
        <category>骑行</category>
        <category>海南</category>
        <category>图文</category>
        <category>reflow</category>
        <category>repaint</category>
        <category>命名法</category>
        <category>成功学</category>
        <category>自我建设</category>
        <category>HTTP</category>
        <category>HTTP/2</category>
        <category>SPDY</category>
        <category>QUIC</category>
        <category>HTTPS</category>
        <category>状态码</category>
        <category>网络攻击</category>
        <category>介绍</category>
        <category>图片渲染</category>
        <category>html2canvas</category>
        <category>dom-to-image</category>
        <category>electron</category>
        <category>indexedDB</category>
        <category>异步</category>
        <category>Generator</category>
        <category>thunk</category>
        <category>async</category>
        <category>函数表达式</category>
        <category>对象</category>
        <category>继承</category>
        <category>类型转换</category>
        <category>==</category>
        <category>类型判断</category>
        <category>猫</category>
        <category>杀手</category>
        <category>管理学</category>
        <category>领导力</category>
        <category>梯队</category>
        <category>移动端</category>
        <category>UI</category>
        <category>自适应</category>
        <category>rem</category>
        <category>Electron</category>
        <category>GUI</category>
        <category>gpx</category>
        <category>template</category>
        <category>Electron Builder</category>
        <category>PWA</category>
        <category>方法论</category>
        <category>夜话</category>
        <category>多线</category>
        <category>生活</category>
        <category>密码</category>
        <category>密钥</category>
        <category>技改</category>
        <category>Vue</category>
        <category>gulp</category>
        <category>瀑布流</category>
        <category>电影</category>
        <category>PHP</category>
        <category>参考</category>
        <category>思维</category>
        <category>学习能力</category>
        <category>右脑</category>
        <category>经济学</category>
        <category>宏观经济学</category>
        <category>术语</category>
        <category>GDP</category>
        <category>CPI</category>
        <category>储蓄</category>
        <category>投资</category>
        <category>金融市场</category>
        <category>股票</category>
        <category>债券</category>
        <category>美联储</category>
        <category>失业</category>
        <category>货币</category>
        <category>现值</category>
        <category>准备金</category>
        <category>货币中性</category>
        <category>通货膨胀</category>
        <category>汇率</category>
        <category>购买力</category>
        <category>净出口</category>
        <category>资产净流出</category>
        <category>总需求</category>
        <category>总供给</category>
        <category>流动性偏好</category>
        <category>乘数效应</category>
        <category>菲利普斯曲线</category>
        <category>微观经济学</category>
        <category>供求</category>
        <category>贸易</category>
        <category>市场</category>
        <category>税</category>
        <category>剩余</category>
        <category>外部性</category>
        <category>公共物品</category>
        <category>公共资源</category>
        <category>生产成本</category>
        <category>利润</category>
        <category>垄断</category>
        <category>价格歧视</category>
        <category>寡头</category>
        <category>垄断竞争</category>
        <category>生产要素市场</category>
        <category>贫困</category>
        <category>消费者选择理论</category>
        <category>不对称信息</category>
        <category>政治经济学</category>
        <category>行为经济学</category>
        <category>VSCode</category>
        <category>编辑器</category>
        <category>IDE</category>
        <category>hybrid</category>
        <category>JSBridge</category>
        <category>Web Worker</category>
        <category>Service Worker</category>
        <category>习惯</category>
        <category>lint</category>
        <category>editorconfig</category>
        <category>commit message</category>
        <category>量子物理</category>
        <category>史话</category>
        <category>埋点</category>
        <category>raven.js</category>
        <category>前端监控</category>
        <category>文本编辑器</category>
        <category>quill</category>
        <category>结构化数据</category>
        <category>React</category>
        <category>Hooks</category>
        <category>函数组件</category>
        <category>复用</category>
        <category>状态管理</category>
        <category>redux</category>
        <category>MobX</category>
        <category>代码质量</category>
        <category>重来</category>
        <category>requestAnimationFrame</category>
        <category>TypeScript</category>
        <category>路书</category>
        <category>gpx解析</category>
        <category>EXIF</category>
        <category>人类</category>
        <category>生存</category>
        <category>基因</category>
        <category>响应式编程</category>
        <category>RxJS</category>
        <category>成长</category>
        <category>业务</category>
        <category>思想</category>
        <category>程序设计</category>
        <category>心理学</category>
        <category>自我</category>
        <category>社会思维</category>
        <category>社会影响</category>
        <category>文化</category>
        <category>性别</category>
        <category>从众</category>
        <category>说服</category>
        <category>临床诊断</category>
        <category>陪审团</category>
        <category>司法</category>
        <category>物质主义</category>
        <category>健康</category>
        <category>社会关系</category>
        <category>偏见</category>
        <category>攻击行为</category>
        <category>亲密关系</category>
        <category>友谊</category>
        <category>爱情</category>
        <category>利他</category>
        <category>冲突</category>
        <category>和解</category>
        <category>软技能</category>
        <category>理财</category>
        <category>健身</category>
        <category>自我营销</category>
        <category>学习</category>
        <category>商业模式</category>
        <category>产品</category>
        <category>校园网</category>
        <category>互联网</category>
        <category>技术</category>
        <category>web开发</category>
        <category>哲思</category>
        <category>择偶观</category>
        <category>validator</category>
        <category>大文件</category>
        <category>visibilityChange</category>
        <category>IntersectionObserver</category>
        <category>图种</category>
        <category>draggable</category>
        <category>webpack</category>
        <category>z-index</category>
        <category>git submodule</category>
        <category>object-fit</category>
        <category>object-position</category>
        <category>BroadcastChannel</category>
        <category>extract-text-webpack-plugin</category>
        <category>lottie</category>
        <category>backface-visibility</category>
        <category>egret</category>
        <category>mock</category>
        <category>SSO</category>
        <category>autoprefixer</category>
        <category>polyfill</category>
        <category>Android</category>
        <category>ffmpeg</category>
        <category>React Hooks</category>
        <category>rollup</category>
        <category>CDN</category>
        <category>DNS</category>
        <category>CNAME</category>
        <category>架构</category>
        <category>组件</category>
        <category>ssh</category>
        <category>fis-receiver</category>
        <category>tmux</category>
        <category>origami</category>
        <category>promise</category>
        <category>encodeURI</category>
        <category>encodeURIComponent</category>
        <category>axios</category>
        <category>charles</category>
        <category>黑色幽默</category>
        <category>朋友</category>
        <category>梦</category>
        <category>濒死</category>
        <category>江南</category>
        <category>苏州</category>
        <category>无锡</category>
        <category>宜兴</category>
        <category>湖州</category>
        <category>南浔</category>
        <category>游记</category>
        <category>随笔</category>
        <category>群众</category>
        <category>理论</category>
        <category>实效</category>
        <category>测试</category>
        <category>长沙</category>
        <category>杭州</category>
        <category>湖南</category>
        <category>核酸</category>
        <category>美食</category>
        <category>云南</category>
        <category>丽江</category>
        <category>大理</category>
        <category>青岛</category>
        <category>济南</category>
        <category>山东</category>
        <category>西北</category>
        <category>银川</category>
        <category>西宁</category>
        <category>青海湖</category>
        <category>西海镇</category>
        <category>茶卡盐湖</category>
        <category>厦门</category>
        <category>感受</category>
        <category>C语言</category>
        <category>树</category>
        <category>主干开发</category>
        <category>GitFlow</category>
        <category>GithubFlow</category>
        <category>typescript</category>
        <category>类型系统</category>
        <category>webrtc</category>
        <category>RTMP</category>
        <category>首屏时间</category>
        <category>性能优化</category>
        <category>公司</category>
        <category>个人发展</category>
        <category>战略</category>
        <category>晋升</category>
        <category>哲学</category>
        <category>幸福</category>
        <category>人生</category>
        <category>叔本华</category>
        <category>Unix</category>
        <category>Rollup</category>
        <category>mouseout</category>
        <category>mouseleave</category>
        <category>lint-staged</category>
        <category>吸顶</category>
        <category>图片组件</category>
        <category>形式系统</category>
        <category>不完全性</category>
        <category>隐喻</category>
        <category>哥德尔</category>
        <category>巴赫</category>
        <category>埃舍尔</category>
        <category>济州</category>
        <category>西归浦</category>
        <category>城山</category>
        <category>咸德</category>
        <category>人工智能</category>
        <category>心智</category>
        <category>自指</category>
        <category>图灵</category>
        <category>马列主义</category>
        <category>恩格斯</category>
        <category>家庭</category>
        <category>国家</category>
        <category>阶级</category>
        <category>氏族</category>
        <category>哲学史</category>
        <category>孔子</category>
        <category>老子</category>
        <category>儒家</category>
        <category>道家</category>
        <category>佛教</category>
        <category>禅宗</category>
        <category>理学</category>
        <category>心学</category>
        <category>计算机</category>
        <category>微机原理</category>
        <category>门</category>
        <category>操作系统</category>
        <category>数字电路</category>
        <category>2024</category>
        <category>政府</category>
        <category>经济</category>
        <category>消费</category>
        <category>土地金融</category>
        <category>饮食</category>
        <category>蛋白质</category>
        <category>碳水</category>
        <category>慢性病</category>
        <category>三高</category>
        <category>肿瘤</category>
        <item>
            <guid isPermalink="true">http://shenlvmeng.github.com/blog/2018/09/13/http-intro-note/</guid>
            <title>《图解HTTP》整理</title>
            <link>http://shenlvmeng.github.com/blog/2018/09/13/http-intro-note/</link>
            <category>笔记</category>
            <category>HTTP</category>
            <category>HTTPS</category>
            <category>状态码</category>
            <category>网络攻击</category>
            <category>介绍</category>
            <pubDate>Thu, 13 Sep 2018 23:35:11 +0800</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;读完了《图解HTTP》，就算是对计算机网络和HTTP部分内容做了个温习吧。同步做了整理，以便加强记忆和后面回顾。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;概述&#34;&gt;&lt;a href=&#34;#概述&#34; class=&#34;headerlink&#34; title=&#34;概述&#34;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;请求报文构成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方法&lt;/li&gt;
&lt;li&gt;URI（绝对或是相对）&lt;/li&gt;
&lt;li&gt;HTTP版本&lt;/li&gt;
&lt;li&gt;请求首部&lt;/li&gt;
&lt;li&gt;内容实体&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;响应报文构成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP版本号&lt;/li&gt;
&lt;li&gt;状态码&lt;/li&gt;
&lt;li&gt;状态码原语&lt;/li&gt;
&lt;li&gt;响应头部&lt;/li&gt;
&lt;li&gt;响应主体&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;请求URI是服务器本身时，可以用&lt;code&gt;*&lt;/code&gt;代替URI。&lt;/p&gt;
&lt;p&gt;可用的方法列表：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GET 获取资源&lt;/li&gt;
&lt;li&gt;POST 传输信息&lt;/li&gt;
&lt;li&gt;PUT 传输文件，&lt;strong&gt;没有用户验证机制&lt;/strong&gt;，很少用到&lt;/li&gt;
&lt;li&gt;DELETE 删除文件，同上，很少用到&lt;/li&gt;
&lt;li&gt;HEAD 获得响应头部，不返回主体&lt;/li&gt;
&lt;li&gt;OPTIONS 询问支持方法&lt;/li&gt;
&lt;li&gt;CONNECT 用来建立HTTPS连接的隧道&lt;/li&gt;
&lt;li&gt;TRACE 追踪路径上的所有服务器节点，很少用到&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中后面三个是HTTP1.1才开始支持的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;持久化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在HTTP1.1后，HTTP建立的TCP连接默认是长连接（&lt;code&gt;keep-alive&lt;/code&gt;），避免不必要的多次TCP握手和挥手。在此基础上，客户端可以同时向服务端发起多个资源请求。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;状态化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HTTP本身是无状态的。通过cookie实现状态化，cookie通过服务端在响应头部的&lt;code&gt;set-cookie&lt;/code&gt;字段下发，设置信息、使用范围、过期时间等内容。客户端在使用范围内的请求默认会携带上cookie信息。&lt;/p&gt;
&lt;h2 id=&#34;HTTP报文结构&#34;&gt;&lt;a href=&#34;#HTTP报文结构&#34; class=&#34;headerlink&#34; title=&#34;HTTP报文结构&#34;&gt;&lt;/a&gt;HTTP报文结构&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;请求首部和主体通过CR+LF分割开来&lt;/li&gt;
&lt;li&gt;报文编码&lt;ul&gt;
&lt;li&gt;编码压缩&lt;ul&gt;
&lt;li&gt;gzip （GNU zip）&lt;/li&gt;
&lt;li&gt;compress（UNIX compress）&lt;/li&gt;
&lt;li&gt;deflate（zlib）&lt;/li&gt;
&lt;li&gt;indentity（不压缩）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分块发送&lt;/li&gt;
&lt;li&gt;多部分发送（multipart）&lt;ul&gt;
&lt;li&gt;multipart&amp;#x2F;form-data 表单文件上传，用boundary字符&lt;code&gt;--&lt;/code&gt;表示新的part的开始&lt;/li&gt;
&lt;li&gt;multipart&amp;#x2F;byterange 配合206响应只包含了部分数据时使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;部分发送&lt;ul&gt;
&lt;li&gt;Range指定字节范围&lt;/li&gt;
&lt;li&gt;206响应状态码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内容协商&lt;ul&gt;
&lt;li&gt;双方就合适的语言、字符集、编码方式、过期时间进行协商&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;HTTP状态码&#34;&gt;&lt;a href=&#34;#HTTP状态码&#34; class=&#34;headerlink&#34; title=&#34;HTTP状态码&#34;&gt;&lt;/a&gt;HTTP状态码&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1xx 这一类型的状态码，代表请求已被接受，需要继续处理&lt;ul&gt;
&lt;li&gt;100 Continue：客户端应当继续发送请求。&lt;/li&gt;
&lt;li&gt;101 Switching Protocals：将通过Upgrade消息头通知客户端采用不同的协议来完成这个请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2xx 成功：这一类型的状态码，代表请求已成功被服务器接收、理解、并接受。&lt;ul&gt;
&lt;li&gt;200 OK：请求已成功，在方法时HEAD时不返回响应主体&lt;/li&gt;
&lt;li&gt;204 No Content：服务器成功处理了请求，但不需要返回任何实体内容，&lt;strong&gt;用户浏览器应保留发送了该请求的页面&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;205 Reset Content：和204的唯一不同是返回此状态码的响应要求请求者重置文档视图&lt;/li&gt;
&lt;li&gt;206 Partial Content：服务器已经成功处理了部分GET请求。请求必须包含Range头信息来指示客户端希望得到的内容范围，返回使用&lt;code&gt;Content-Range&lt;/code&gt;多用于下载工具&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;3xx 重定向：这类状态码代表需要客户端采取进一步的操作才能完成请求。通常，这些状态码用来重定向，后续的请求地址在本次响应的Location域中指明。&lt;ul&gt;
&lt;li&gt;300 Multiple Choices：被请求的资源有一系列可供选择的回馈信息，每个都有自己特定的地址和浏览器驱动的商议信息。用户或浏览器能够自行选择一个首选的地址进行重定向。&lt;/li&gt;
&lt;li&gt;301 Moved Permanently：被请求的资源已永久移动到新位置，建议使用Location中的新地址&lt;/li&gt;
&lt;li&gt;302 Found：请求的资源现在临时从不同的URI响应请求&lt;/li&gt;
&lt;li&gt;303 See Other：和302的区别是，客户端&lt;strong&gt;应当采用GET的方式&lt;/strong&gt;访问新的资源&lt;/li&gt;
&lt;li&gt;304 Not Modified：如果客户端发送了一个带条件（包括缓存相关的请求头部）的GET请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变&lt;/li&gt;
&lt;li&gt;305 Use Proxy：被请求的资源必须通过指定的代理才能被访问&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;4xx 客户端错误：客户端发生了错误&lt;ul&gt;
&lt;li&gt;400 Bad Request：由于包含语法错误，当前请求无法被服务器理解&lt;/li&gt;
&lt;li&gt;401 Unauthorized：当前请求需要用户验证，或用户未通过验证。&lt;/li&gt;
&lt;li&gt;403 Forbidden：服务器已经理解请求，但是拒绝执行它&lt;/li&gt;
&lt;li&gt;404 Not Found：资源未被在服务器上发现&lt;/li&gt;
&lt;li&gt;405 Method Not Allowed：请求行中指定的请求方法不能被用于请求相应的资源，响应中必须返回一个Allow头信息用以表示出当前资源能够接受的请求方法的列表&lt;/li&gt;
&lt;li&gt;406 Not Acceptable：请求的资源的内容特性无法满足请求头中的条件&lt;/li&gt;
&lt;li&gt;413 Request Entity Too Large&lt;/li&gt;
&lt;li&gt;414 Request-URI Too Long&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;5xx 服务器错误：服务器在处理请求的过程中有错误发生&lt;ul&gt;
&lt;li&gt;500 Internal Server Error：这个问题会在服务器的代码出错时出现&lt;/li&gt;
&lt;li&gt;501 Not Implemented：服务器不支持当前请求所需要的某个功能&lt;/li&gt;
&lt;li&gt;502 Bad GateWay：作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应&lt;/li&gt;
&lt;li&gt;503 Service Unavailable：临时的服务器维护或者过载。这个状况是临时的，并且将在一段时间以后恢复。&lt;/li&gt;
&lt;li&gt;504 Gateway Timeout：作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器或者辅助服务器收到响应&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;协作机制&#34;&gt;&lt;a href=&#34;#协作机制&#34; class=&#34;headerlink&#34; title=&#34;协作机制&#34;&gt;&lt;/a&gt;协作机制&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;代理（Proxy），单纯转发HTTP请求，会在响应头部的&lt;code&gt;Via&lt;/code&gt;字段留下痕迹&lt;/li&gt;
&lt;li&gt;网关（Gateway），隔绝服务器和客户端，有安全、计费等逻辑&lt;/li&gt;
&lt;li&gt;隧道（tunnel），基于协议搭建，保证传输安全，对用户侧透明&lt;/li&gt;
&lt;li&gt;缓存（Cache），本地、服务端二级缓存，加快响应时间，有过期时间&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;报文头部&#34;&gt;&lt;a href=&#34;#报文头部&#34; class=&#34;headerlink&#34; title=&#34;报文头部&#34;&gt;&lt;/a&gt;报文头部&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;首部用来进行连接的各种信息描述。每个首部的字段用字段名和值组成，两者用&lt;code&gt;:&lt;/code&gt;隔开。&lt;/li&gt;
&lt;li&gt;首部分为端到端和逐跳两类，前者在报文转发的整个过程都保留，后者在转发后就会丢弃。典型的逐条首部有&lt;code&gt;Connection&lt;/code&gt;, &lt;code&gt;Keep-Alive&lt;/code&gt;, &lt;code&gt;Transfer-Encoding&lt;/code&gt;, &lt;code&gt;Upgrade&lt;/code&gt;等&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;通用首部&#34;&gt;&lt;a href=&#34;#通用首部&#34; class=&#34;headerlink&#34; title=&#34;通用首部&#34;&gt;&lt;/a&gt;通用首部&lt;/h3&gt;&lt;h4 id=&#34;Cache-Control&#34;&gt;&lt;a href=&#34;#Cache-Control&#34; class=&#34;headerlink&#34; title=&#34;Cache-Control&#34;&gt;&lt;/a&gt;Cache-Control&lt;/h4&gt;&lt;p&gt;客户端和服务端协商缓存机制。配合下面一些首部字段使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Etag&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Last-Modified&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Expires&lt;/code&gt;（HTTP1.0）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Pragma&lt;/code&gt;（HTTP1.0）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Age&lt;/code&gt;（HTTP1.0）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;If-None-Match&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;If-Not-Modified-Since&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Cache-Control&lt;/code&gt;有下面一些可配置项。&lt;/p&gt;
&lt;p&gt;缓冲能力上，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private，缓存只针对当前用户而言&lt;/li&gt;
&lt;li&gt;public，缓存对所有用户生效&lt;/li&gt;
&lt;li&gt;no-cache，始终对缓存进行过期验证&lt;/li&gt;
&lt;li&gt;no-store，不允许缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;过期时间上，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;min-fresh，返回指定时间范围内的非过期资源&lt;/li&gt;
&lt;li&gt;max-stale，返回指定时间范围内过期、非过期资源&lt;/li&gt;
&lt;li&gt;max-age，单位：秒，最大缓存时间&lt;/li&gt;
&lt;li&gt;s-max-age，同上，只用于CDN缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;二次验证上，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;only-if-cached，强制从缓存服务器中获取内容&lt;/li&gt;
&lt;li&gt;immutable，一旦缓存不可更改&lt;/li&gt;
&lt;li&gt;must-revalidate，即使本地已缓存，仍要求检查CDN缓存&lt;/li&gt;
&lt;li&gt;proxy-revalidate，缓存服务器必须检查源内容是否改变&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Connection&#34;&gt;&lt;a href=&#34;#Connection&#34; class=&#34;headerlink&#34; title=&#34;Connection&#34;&gt;&lt;/a&gt;Connection&lt;/h4&gt;&lt;p&gt;管理连接，主要有两个用途。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指定不希望转发给代理的字段&lt;/li&gt;
&lt;li&gt;管理持久连接。使用&lt;code&gt;Connection: Keep-Alive&lt;/code&gt;建立连接（HTTP1.1默认行为），使用&lt;code&gt;Connection: Close&lt;/code&gt;终止连接&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Date&#34;&gt;&lt;a href=&#34;#Date&#34; class=&#34;headerlink&#34; title=&#34;Date&#34;&gt;&lt;/a&gt;Date&lt;/h4&gt;&lt;p&gt;报文创建时间。行如“Date: Tue, 03 Jul 2012 04:31:12 GMT”&lt;/p&gt;
&lt;h4 id=&#34;Pragma&#34;&gt;&lt;a href=&#34;#Pragma&#34; class=&#34;headerlink&#34; title=&#34;Pragma&#34;&gt;&lt;/a&gt;Pragma&lt;/h4&gt;&lt;p&gt;历史遗留字段。&lt;code&gt;Pragma: no-cache&lt;/code&gt;等同于&lt;code&gt;Cache-Control: no-cache&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;除此外还有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Trailer，说明报文主体中记录的首部字段&lt;/li&gt;
&lt;li&gt;Transfer-Encoding，分段传输的主体编码&lt;/li&gt;
&lt;li&gt;Upgrade，切换协议，&lt;strong&gt;配合&lt;code&gt;Connection: Upgrade&lt;/code&gt;使用&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Via，标明沿途的整条路径&lt;/li&gt;
&lt;li&gt;Warning，缓存相关警告&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;请求首部&#34;&gt;&lt;a href=&#34;#请求首部&#34; class=&#34;headerlink&#34; title=&#34;请求首部&#34;&gt;&lt;/a&gt;请求首部&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Accept 接受文件的类型，类型间可以指定&lt;code&gt;q=x&lt;/code&gt;表示权重值，x的取值在0到1之间。下同&lt;/li&gt;
&lt;li&gt;Accept-Charset 可以接受的文件字符集&lt;/li&gt;
&lt;li&gt;Accept-Encoding 可以接受的文件编码，有gzip，compress，deflate，indentity几种&lt;/li&gt;
&lt;li&gt;Accept-Language 可接受的语言&lt;/li&gt;
&lt;li&gt;Authorization 服务端需要的用户验证信息&lt;/li&gt;
&lt;li&gt;Age 从缓存实体产生到现在经历的时间&lt;/li&gt;
&lt;li&gt;Expect 期望的服务端返回状态码，服务端无法满足时返回417状态码，客户端等待服务端100响应时发送的请求都要带上该字段&lt;/li&gt;
&lt;li&gt;Host 服务器的主机名，通常是请求资源的URL&lt;/li&gt;
&lt;li&gt;If-Match 需要匹配的Etag，不满足时返回412，表示不满足条件&lt;/li&gt;
&lt;li&gt;If-Modified-Since 返回指定日期后的新内容，否则返回304&lt;/li&gt;
&lt;li&gt;If-Unmodified-Since 类似上&lt;/li&gt;
&lt;li&gt;If-Range 类似If-Match不过是范围匹配&lt;/li&gt;
&lt;li&gt;Max-Forwards 报文最多转发次数，通常配合TRACE方法使用&lt;/li&gt;
&lt;li&gt;Proxy-Authorization 代理服务端需要的用户验证信息&lt;/li&gt;
&lt;li&gt;Range 请求资源的部分内容，一般用在多线程下载（客户端发起）&lt;/li&gt;
&lt;li&gt;Referer 当前请求从哪个地址发起&lt;/li&gt;
&lt;li&gt;User-Agent 请求发起终端信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;响应首部&#34;&gt;&lt;a href=&#34;#响应首部&#34; class=&#34;headerlink&#34; title=&#34;响应首部&#34;&gt;&lt;/a&gt;响应首部&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Accept-Ranges，表示服务器是否支持Range请求，支持时值为bytes，否则是none&lt;/li&gt;
&lt;li&gt;Age，表示缓存到目前为止过了多久（HTTP1.0）&lt;/li&gt;
&lt;li&gt;Etag，资源的唯一标识，分为强Etag和弱Etag&lt;/li&gt;
&lt;li&gt;Location，用在3xx的请求中，表示客户端需要重定向到的新地址&lt;/li&gt;
&lt;li&gt;WWW-Authentication&amp;#x2F;Proxy-Authentication，服务器、代理使用的认证类型&lt;/li&gt;
&lt;li&gt;Server，服务器信息&lt;/li&gt;
&lt;li&gt;Vary，与Vary指定首部字段同名的请求才会命中缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;实体首部&#34;&gt;&lt;a href=&#34;#实体首部&#34; class=&#34;headerlink&#34; title=&#34;实体首部&#34;&gt;&lt;/a&gt;实体首部&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Allow 允许的访问方法&lt;/li&gt;
&lt;li&gt;Content-Encoding&amp;#x2F;Content-Language&amp;#x2F;Content-Length&amp;#x2F; 内容的编码、语言、长度、类型&lt;/li&gt;
&lt;li&gt;Content-Location 内容的位置，通常在和访问URI时会用到&lt;/li&gt;
&lt;li&gt;Content-MD5 内容MD5编码，便于和客户端编码后进行对比，防止内容篡改&lt;/li&gt;
&lt;li&gt;Content-Range 用于部分请求&lt;/li&gt;
&lt;li&gt;Content-Type 文件类型，包括MIME type和字符集&lt;/li&gt;
&lt;li&gt;Expires&amp;#x2F;Last-Modified 文件的过期时间和上次修改时间，用户判断缓存是否过期&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除此之外，还有和Cookie相关的两个头部，它们来自网景公司对于Cookie的设计。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Set-Cookie，服务端下发设置Cookie信息。包含下列信息&lt;ul&gt;
&lt;li&gt;expires，过期时间&lt;/li&gt;
&lt;li&gt;path，适用路径&lt;/li&gt;
&lt;li&gt;domain，适用域名&lt;/li&gt;
&lt;li&gt;secure，限制https才会携带Cookie&lt;/li&gt;
&lt;li&gt;HttpOnly，限制JS脚本访问Cookie&lt;/li&gt;
&lt;li&gt;下发的cookie内容&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cookie，客户端期望的cookie内容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外还有一些常用的首部字段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;X-Frame-Options，规定页面在iframe中的呈现方式&lt;ul&gt;
&lt;li&gt;DENY 禁止访问&lt;/li&gt;
&lt;li&gt;SAMEORIGIN 仅允许同源访问&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;X-XSS-Protection，为1时开启XSS防御&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;不建议使用”X-“开头的方式拓展非标准首部&lt;/strong&gt;。 &lt;/p&gt;
&lt;h2 id=&#34;HTTPS简介&#34;&gt;&lt;a href=&#34;#HTTPS简介&#34; class=&#34;headerlink&#34; title=&#34;HTTPS简介&#34;&gt;&lt;/a&gt;HTTPS简介&lt;/h2&gt;&lt;p&gt;HTTP缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用明文 -&amp;gt; 通信内容可以被窃听 –HTTPS–&amp;gt; 加密通信内容&lt;/li&gt;
&lt;li&gt;不能验证身份 -&amp;gt; DDoS攻击和伪装服务器、客户端身份 –HTTPS–&amp;gt; 证书证明身份&lt;/li&gt;
&lt;li&gt;不能验证内容完整性 -&amp;gt; 中间人攻击 –HTTPS–&amp;gt; HTTPS保证完整性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;HTTPS特征：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加密内容&lt;/li&gt;
&lt;li&gt;证书&lt;/li&gt;
&lt;li&gt;完整性保护&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;HTTPS建立在SSL连接之上，SSL建立在TCP连接上。SSL使用共享秘钥和公开秘钥加密两种方式混合加密。在秘钥确保安全的情况下，使用共享秘钥对称加密，优化速度；否则使用公开秘钥确保安全性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;共享秘钥，双方使用同一秘钥加密和解密，秘钥被监听后加密就失去了意义&lt;/li&gt;
&lt;li&gt;公开秘钥，使用公开秘钥加密，使用私有秘钥解密&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然而公开密钥本身并不能确保完整性，需要证书机构（CA）颁发证书认证，确保秘钥和端的有效以及合法性。服务端也可以使用OpenSSL为自己颁发自认证证书，但是一般会在浏览器上弹出警告。&lt;/p&gt;
&lt;p&gt;HTTPS建立连接的过程包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;协商决定秘钥组件&lt;/li&gt;
&lt;li&gt;服务端发送公开密钥、证书&lt;/li&gt;
&lt;li&gt;客户端检查证书合法性，以确认服务端身份，并拿到公钥&lt;/li&gt;
&lt;li&gt;客户端发送pre-master secret随机字符串&lt;/li&gt;
&lt;li&gt;服务端使用私钥加密pre-master secret hash值，返回加密的hash值（避免黑客尝试破解私钥）&lt;/li&gt;
&lt;li&gt;客户端使用公钥解密hash，对比自己之前生成的pre-master secret字符串hash，若一致，及证明服务端身份的合法性&lt;/li&gt;
&lt;li&gt;客户端生成一个对称加密算法和秘钥master-secret，使用公钥加密，发送给服务端&lt;/li&gt;
&lt;li&gt;双方使用master-secret进行通信&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通信的完整性可以通过将报文内容生成hash交由客户端验证来实现。&lt;/p&gt;
&lt;p&gt;SSL最初由网景开发，1.0和2.0版本被发现存在问题已被废弃。3.0后由IETF接手。目前可用的协议版本有SSL3.0和TLS1.0、TLS1.1、TLS1.2，其中最常用的是SSL3.0和TLS1.0。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;证书&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;证书包含：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发布机构（CA）&lt;/li&gt;
&lt;li&gt;有效期&lt;/li&gt;
&lt;li&gt;持有者（由CA担保证明持有者身份）&lt;/li&gt;
&lt;li&gt;公钥&lt;/li&gt;
&lt;li&gt;数字签名算法&lt;/li&gt;
&lt;li&gt;指纹算法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了保证安全，在证书的发布机构发布证书时，证书的指纹和指纹算法，都会用自己的私钥加密后再和证书放到一起发布。使用者在打开证书时，根据加密算法，系统使用自带的公钥解密指纹和指纹算法，使用指纹算法计算证书的hash值和指纹对比，如果对的上就代表证书没问题。系统使用的公钥和证书一般由证书发布机构自己生成，内嵌在操作系统中。&lt;/p&gt;
&lt;p&gt;证书颁发机构（CA）通常会去做很多工作确保持有者的合法性，信任CA代表着信任CA颁发证书中的所有信息。所以一般系统只选择信誉较好的CA机构。公司内部使用或自生成的证书就只能被在指定范围内被信任。&lt;/p&gt;
&lt;h2 id=&#34;身份验证&#34;&gt;&lt;a href=&#34;#身份验证&#34; class=&#34;headerlink&#34; title=&#34;身份验证&#34;&gt;&lt;/a&gt;身份验证&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;BASIC 使用用户名密码验证，明文传输&lt;/li&gt;
&lt;li&gt;DIGEST 质询响应，防止密码被拦截，安全度和便利性都较差&lt;/li&gt;
&lt;li&gt;SSL 客户端证书 + HTTPS传输，成本高&lt;/li&gt;
&lt;li&gt;HTTP表单 + Cookie&amp;#x2F;Session验证&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;功能追加协议&#34;&gt;&lt;a href=&#34;#功能追加协议&#34; class=&#34;headerlink&#34; title=&#34;功能追加协议&#34;&gt;&lt;/a&gt;功能追加协议&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;WebSocket&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;全双工，解决Ajax，长短轮询的局限。握手过程很简单：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请求方添加&lt;code&gt;Upgrade&lt;/code&gt;首部字段，声明升级到websocket。包含Sec-WebSocket-Key，Sec-WebSocket-Protocol，Sec-WebSocket-Verison等必要字段&lt;/li&gt;
&lt;li&gt;响应方回复101状态码，包含Sec-WebSocket-Accept（是根据Sec-WebSocket-Key生成的），Sec-WebSocket-Protocol&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;连接建立后，双方使用WebSocket的方式进行通信&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WebDAV&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;基于Web的文件属性管理。新增了一些方法和状态码，允许客户端远程修改服务器上的文件。&lt;/p&gt;
&lt;h2 id=&#34;Web应用&#34;&gt;&lt;a href=&#34;#Web应用&#34; class=&#34;headerlink&#34; title=&#34;Web应用&#34;&gt;&lt;/a&gt;Web应用&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;RSS&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;RDF Site Summary，简易内容聚合。和Atom一样，使用XML的形式发布信息，通过特定的RSS阅读器阅读。&lt;/p&gt;
&lt;h2 id=&#34;常见Web攻击方式&#34;&gt;&lt;a href=&#34;#常见Web攻击方式&#34; class=&#34;headerlink&#34; title=&#34;常见Web攻击方式&#34;&gt;&lt;/a&gt;常见Web攻击方式&lt;/h2&gt;&lt;p&gt;根本原因：HTTP本身没有必要的安全机制。&lt;/p&gt;
&lt;h3 id=&#34;输出值转义相关攻击方式&#34;&gt;&lt;a href=&#34;#输出值转义相关攻击方式&#34; class=&#34;headerlink&#34; title=&#34;输出值转义相关攻击方式&#34;&gt;&lt;/a&gt;输出值转义相关攻击方式&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;XSS，跨站脚本攻击，主要出现在&lt;strong&gt;动态拼接HTML&lt;/strong&gt;的场景中，用户恶意注入的script代码段埋下陷阱，诱导用户误操作触发。盗取用户密码或Cookie信息&lt;/li&gt;
&lt;li&gt;SQL注入，通过URL注入的方式，制造恶意SQL语句，出现在&lt;strong&gt;动态拼接SQL语句&lt;/strong&gt;的场景下。可以绕过认证、甚至破坏整个数据库&lt;/li&gt;
&lt;li&gt;OS命令注入，类似SQL注入，出现在&lt;strong&gt;动态拼接OS语句&lt;/strong&gt;的场景下。&lt;/li&gt;
&lt;li&gt;HTTP首部攻击，出现在服务端响应头部使用了用户侧输入场景下，比如302响应中的Location头部可能存在的query部分。攻击者可以通过添加换行符，恶意添加新的首部字段，甚至篡改原有的响应主体&lt;/li&gt;
&lt;li&gt;邮箱首部注入攻击，类似HTTP首部攻击&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;类似地还有目录遍历漏洞、远程文件引用漏洞。&lt;/p&gt;
&lt;p&gt;通过上面几种攻击方式，可以看到，&lt;strong&gt;永远不要信任用户侧输入&lt;/strong&gt;，&lt;strong&gt;使用白名单机制，禁止动态拼接用户输入的语句&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;设计缺陷相关攻击方式&#34;&gt;&lt;a href=&#34;#设计缺陷相关攻击方式&#34; class=&#34;headerlink&#34; title=&#34;设计缺陷相关攻击方式&#34;&gt;&lt;/a&gt;设计缺陷相关攻击方式&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;强制浏览，在服务器公开目录下，浏览开发者本非自愿公开的文件。&lt;/li&gt;
&lt;li&gt;不正确的系统错误处理方式，数据库等内部系统抛出的错误，对用户毫无帮助，反倒能让攻击者看到服务背后的一些细节。包括，数据库错误、PHP等脚本错误、Web服务器的错误&lt;/li&gt;
&lt;li&gt;开放重定向，网站有诸如&lt;code&gt;?redirect=xxx&lt;/code&gt;的path可以重定向时，一定要对redirect后的网址进行白名单控制，防止成为钓鱼攻击的跳板&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;session相关&#34;&gt;&lt;a href=&#34;#session相关&#34; class=&#34;headerlink&#34; title=&#34;session相关&#34;&gt;&lt;/a&gt;session相关&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;XSS盗取cookie，伪装用户登录&lt;/li&gt;
&lt;li&gt;发送恶意链接，强制用户使用攻击者指定的session ID&lt;/li&gt;
&lt;li&gt;CSRF，跨站信息伪造，在带有用户信息的domain里留下恶意的网络请求，伪造用户发起请求，伪造请求可以通过&lt;code&gt;&amp;lt;img src=&amp;quot;xx&amp;quot; /&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;video src=&amp;quot;xxx&amp;gt;&amp;lt;/video&amp;gt;&lt;/code&gt;等多种形式&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;其他&#34;&gt;&lt;a href=&#34;#其他&#34; class=&#34;headerlink&#34; title=&#34;其他&#34;&gt;&lt;/a&gt;其他&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;穷举法破解密码，暴力破解。使用图片验证码、手机验证码、机器检测等方式限制同IP的访问频率。&lt;ul&gt;
&lt;li&gt;彩虹表。使用salt，增加破解难度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;撞库。建议用户在不同域内使用不一样的密码&lt;/li&gt;
&lt;li&gt;点击劫持，使用透明元素覆盖在目标网页上。在18+网页中最常出现（😂）。&lt;/li&gt;
&lt;li&gt;DoS（Denial of Service）拒绝服务攻击，构造大量合法的网络请求，导致服务器超负荷。通常都是DDoS（Distributed Denial of Service）的形式。需要在IP层去过滤攻击的IP。&lt;/li&gt;
&lt;li&gt;后门程序&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://shenlvmeng.github.com/blog/2018/09/02/dont-make-me-think-note/</guid>
            <title>《Don&#39;t make me think》 笔记</title>
            <link>http://shenlvmeng.github.com/blog/2018/09/02/dont-make-me-think-note/</link>
            <category>笔记</category>
            <category>UX</category>
            <category>UED</category>
            <category>准则</category>
            <pubDate>Sun, 02 Sep 2018 23:46:37 +0800</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;原版链接: &lt;a href=&#34;https://book.douban.com/subject/25820714/&#34;&gt;https://book.douban.com/subject/25820714/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;准则&#34;&gt;&lt;a href=&#34;#准则&#34; class=&#34;headerlink&#34; title=&#34;准则&#34;&gt;&lt;/a&gt;准则&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;减少用户思考&lt;/li&gt;
&lt;li&gt;减少用户心理负担&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原因： 用户时间有限，界面必须易于理解&lt;/p&gt;
&lt;h2 id=&#34;用户的使用方法&#34;&gt;&lt;a href=&#34;#用户的使用方法&#34; class=&#34;headerlink&#34; title=&#34;用户的使用方法&#34;&gt;&lt;/a&gt;用户的使用方法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;82原则，只扫描感兴趣的&lt;/li&gt;
&lt;li&gt;用户只寻求一个可行而非最优的答案&lt;/li&gt;
&lt;li&gt;用户并不关心产品如何运作，会按照某个可用的方式一直使用下去&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;方法论&#34;&gt;&lt;a href=&#34;#方法论&#34; class=&#34;headerlink&#34; title=&#34;方法论&#34;&gt;&lt;/a&gt;方法论&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;利用习惯性思维，包括页面位置、使用方法、元素外观这些被培养起来的习惯。如无必要，勿增实体。&lt;/li&gt;
&lt;li&gt;层次分明，逻辑上的关联能从视觉上直接体现；能够划分区域&lt;/li&gt;
&lt;li&gt;明确标识可交互元素；提高信噪比，减少不必要视觉干扰&lt;/li&gt;
&lt;li&gt;标题更靠近关联的内容，突出关键词汇&lt;/li&gt;
&lt;li&gt;减少冗余文本，包括欢迎语、指示文字&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Web导航&#34;&gt;&lt;a href=&#34;#Web导航&#34; class=&#34;headerlink&#34; title=&#34;Web导航&#34;&gt;&lt;/a&gt;Web导航&lt;/h2&gt;&lt;p&gt;重要性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户在web中感受不到方位&lt;/li&gt;
&lt;li&gt;用户需要更快地达成目标&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;习惯用法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;导航部分（或是某些公用部分）固定出现在页面同样位置，会让用户能&lt;strong&gt;立即确认&lt;/strong&gt;自己还处在这个网站里&lt;ul&gt;
&lt;li&gt;在&lt;strong&gt;市场类应用&lt;/strong&gt;里，包括站点ID、栏目、实用工具、搜索&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;站点ID需要有独特可区分的设计&lt;/li&gt;
&lt;li&gt;一个返回首页的导航链接&lt;/li&gt;
&lt;li&gt;简洁明了的搜索框&lt;ul&gt;
&lt;li&gt;简单的按钮文案&lt;/li&gt;
&lt;li&gt;减少无用的提示文字&lt;/li&gt;
&lt;li&gt;明确可能的搜索选项（如果有的话）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;每个页面需要有个名字（保留意见）&lt;ul&gt;
&lt;li&gt;合适位置&lt;/li&gt;
&lt;li&gt;引人注目&lt;/li&gt;
&lt;li&gt;和链接保持尽量一致&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;明确告诉用户“我在哪儿”&lt;ul&gt;
&lt;li&gt;面包屑&lt;/li&gt;
&lt;li&gt;tab&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;上述元素主要的原因：&lt;strong&gt;现实生活中，用户并不会按照设计师规划好的路径访问网页，可能会来自分享链接、搜索引擎，并不能保证从入口进入。要能让用户在任意一个页面都可以清楚明白它要完成某项任务的话，应该如何使用当前这个网页。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;吸引用户时需要注意的地方&#34;&gt;&lt;a href=&#34;#吸引用户时需要注意的地方&#34; class=&#34;headerlink&#34; title=&#34;吸引用户时需要注意的地方&#34;&gt;&lt;/a&gt;吸引用户时需要注意的地方&lt;/h2&gt;&lt;p&gt;主页要能传达整体印象。必须能显而易见地直截了当地明白：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这是什么网站&lt;/li&gt;
&lt;li&gt;我能在里面做什么&lt;/li&gt;
&lt;li&gt;网站里有什么&lt;/li&gt;
&lt;li&gt;为什么选择这个网站&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在用户弄清楚这些问题的最初几秒甚至是最初几毫秒，是决定你能否留住他的关键（晕轮效应）。而且因为上面加粗字体的原因，你可能要在主页外的其他页面也保证这一点。&lt;/p&gt;
&lt;p&gt;一些手段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;靠近站点ID的简洁的slogan&lt;/li&gt;
&lt;li&gt;一些推介语&lt;/li&gt;
&lt;li&gt;以明确主张为目标占用空间&lt;/li&gt;
&lt;li&gt;在描述使命时保证坦诚&lt;/li&gt;
&lt;li&gt;ab test和数据说话&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;好口号和好的站点ID一样，是非常重要的。它需要至少有下面几点特征：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;清晰简洁、言之有物&lt;/li&gt;
&lt;li&gt;明确产品特色与优势，最好是只有你能适用，别的产品都用不了的那种&lt;/li&gt;
&lt;li&gt;最好能再个性、俏皮一点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然你们公司足够出名的话，上面这些就当不存在就行。&lt;/p&gt;
&lt;p&gt;接下来的任务就是，告诉用户该&lt;strong&gt;从哪里开始&lt;/strong&gt;和避免滥用首页推介。&lt;/p&gt;
&lt;h2 id=&#34;怎样减少信仰讨论&#34;&gt;&lt;a href=&#34;#怎样减少信仰讨论&#34; class=&#34;headerlink&#34; title=&#34;怎样减少信仰讨论&#34;&gt;&lt;/a&gt;怎样减少信仰讨论&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;避免关于个人喜好的讨论（如：“我不喜欢下拉框”）&lt;/li&gt;
&lt;li&gt;针对场景，根据经验选择（如：“我认为这种场景下不适合下拉框”）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;充分测试，数据说话反哺经验&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;如何进行可用性测试&#34;&gt;&lt;a href=&#34;#如何进行可用性测试&#34; class=&#34;headerlink&#34; title=&#34;如何进行可用性测试&#34;&gt;&lt;/a&gt;如何进行可用性测试&lt;/h2&gt;&lt;p&gt;&lt;em&gt;当下的互联网公司迭代速度之快，可能并没有时间做这方面的研究。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;区分开焦点测试（类似于种子用户，听取他们的使用感受和反馈）和可用性测试。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;焦点测试在早期阶段&lt;/li&gt;
&lt;li&gt;可用性测试持续进行&lt;/li&gt;
&lt;li&gt;周期性（比如一个月）进行可行性测试&lt;/li&gt;
&lt;li&gt;暴露严重问题，因为团队可能并没有资源解决所有问题&lt;/li&gt;
&lt;li&gt;应该有个主持人&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最有可能的测试流程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;介绍部分&lt;/li&gt;
&lt;li&gt;简单的提问部分，了解测试者的背景&lt;/li&gt;
&lt;li&gt;简单的主页浏览，询问感受&lt;/li&gt;
&lt;li&gt;完成测试任务&lt;/li&gt;
&lt;li&gt;问题询问&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;典型的问题:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户不清楚概念&lt;/li&gt;
&lt;li&gt;用户找不到想要的字眼&lt;/li&gt;
&lt;li&gt;内容太多了&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;移动时代带来的挑战&#34;&gt;&lt;a href=&#34;#移动时代带来的挑战&#34; class=&#34;headerlink&#34; title=&#34;移动时代带来的挑战&#34;&gt;&lt;/a&gt;移动时代带来的挑战&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;狭小空间的约束&lt;ul&gt;
&lt;li&gt;用户需要立即完成或经常重复的工作应该一样就能看到&lt;/li&gt;
&lt;li&gt;其他的事情应该轻点几下就能完成，而且有显而易见的路径到达&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;兼容多平台的UI解决银弹是很难的&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;在UI上给用户足够的按钮，比如一个有着三维样式闪着光的按钮&lt;/li&gt;
&lt;li&gt;意识到没有光标了&lt;/li&gt;
&lt;li&gt;应用最好能“让人快乐”&lt;/li&gt;
&lt;li&gt;移动应用尤其需要&lt;strong&gt;可学习&lt;/strong&gt;，然后是&lt;strong&gt;可记忆&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;用户的好感度&#34;&gt;&lt;a href=&#34;#用户的好感度&#34; class=&#34;headerlink&#34; title=&#34;用户的好感度&#34;&gt;&lt;/a&gt;用户的好感度&lt;/h2&gt;&lt;p&gt;降低好感度的几种方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;隐藏用户想要的信息&lt;/li&gt;
&lt;li&gt;对用户交互不宽容&lt;/li&gt;
&lt;li&gt;询问用户过多信息&lt;/li&gt;
&lt;li&gt;敷衍用户&lt;/li&gt;
&lt;li&gt;看上去不专业&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如何提升好感度&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;知道用户想要什么&lt;/li&gt;
&lt;li&gt;简明易懂&lt;/li&gt;
&lt;li&gt;看上去花了心思&lt;/li&gt;
&lt;li&gt;知道用户的可能问题，并给予解释&lt;/li&gt;
&lt;li&gt;提高鲁棒性&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;如何说服你的老板推进可用性&#34;&gt;&lt;a href=&#34;#如何说服你的老板推进可用性&#34; class=&#34;headerlink&#34; title=&#34;如何说服你的老板推进可用性&#34;&gt;&lt;/a&gt;如何说服你的老板推进可用性&lt;/h2&gt;&lt;p&gt;略&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://shenlvmeng.github.com/blog/2017/03/20/domevent-elementsize-mediatag/</guid>
            <title>【笔记】JavaScript事件处理机制，元素大小判断与H5的媒体标签</title>
            <link>http://shenlvmeng.github.com/blog/2017/03/20/domevent-elementsize-mediatag/</link>
            <category>HTML</category>
            <category>JavaScript</category>
            <category>DOM</category>
            <category>笔记</category>
            <pubDate>Mon, 20 Mar 2017 20:45:30 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;前一阵舍友去面试，被问到JavaScript中的事件处理机制。暗自思忖，发现自己也没有深入的了解过。顺带连同常用的HTML元素大小和实际中用到的HTML5中的媒体元素简单整理在下面，方便之后回顾。&lt;/p&gt;
&lt;h2 id=&#34;事件&#34;&gt;&lt;a href=&#34;#事件&#34; class=&#34;headerlink&#34; title=&#34;事件&#34;&gt;&lt;/a&gt;事件&lt;/h2&gt;&lt;p&gt;JavaScript和HTML的交互是通过&lt;strong&gt;事件&lt;/strong&gt;实现的。可以通过监听器订阅文档或窗口中的事件，在事件发生时执行特定的代码。这种属于设计模式中的观察者模式。&lt;/p&gt;
&lt;p&gt;事件相关的API最早出现在IE4和NetScape Nivagator4（后面简称为网景）中。两种浏览器提供了相似却不同的API。在之后的DOM2级标准中对DOM事件进行了标准化。&lt;/p&gt;
&lt;h3 id=&#34;事件流&#34;&gt;&lt;a href=&#34;#事件流&#34; class=&#34;headerlink&#34; title=&#34;事件流&#34;&gt;&lt;/a&gt;事件流&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;事件流&lt;/strong&gt;描述的是页面中接受时间的顺序。在这点上IE和网景采用了完全相反的两种处理思路。IE采用的是&lt;strong&gt;事件冒泡流&lt;/strong&gt;，网景采用的是&lt;strong&gt;事件捕获流&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;事件冒泡（event bubbling）指从事件开始的最具体的元素接收，再逐步向上传递到最外层的节点，直到&lt;code&gt;document&lt;/code&gt;。如下图（来自红宝书）展示的过程，在下面的文档中：&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;!DOCTYPE &lt;span class=&#34;keyword&#34;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Event bubbling&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;Click me&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;如果div标签被点击，&lt;code&gt;click&lt;/code&gt;事件会这样依次传递：&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; -&amp;gt; &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; -&amp;gt; &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; -&amp;gt; &lt;code&gt;document&lt;/code&gt;。（不同浏览器实现细节上会有不同）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/blog/images/event-bubbling.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;事件捕获（event capturing）则认为应该从父节点开始捕获事件直到事件目标。因此，同样的上面的例子，顺序将是：&lt;code&gt;document&lt;/code&gt; -&amp;gt; &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; -&amp;gt; &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; -&amp;gt;  &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/blog/images/event-capturing.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;目前很少有人使用事件捕获这种方式作为事件流。&lt;/p&gt;
&lt;h4 id=&#34;DOM-事件流&#34;&gt;&lt;a href=&#34;#DOM-事件流&#34; class=&#34;headerlink&#34; title=&#34;DOM 事件流&#34;&gt;&lt;/a&gt;DOM 事件流&lt;/h4&gt;&lt;p&gt;“DOM2级标准”中规定事件流包括三个阶段，&lt;strong&gt;事件捕获&lt;/strong&gt;、&lt;strong&gt;处于目标&lt;/strong&gt;、&lt;strong&gt;时间冒泡&lt;/strong&gt;。在实际的DOM事件流中，实际目标不会接受到事件。因此如下图展示的那样，捕获阶段停止在父目标&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;上，之后事件发生在目标上，&lt;strong&gt;并作为事件冒泡的一部分&lt;/strong&gt;。然后，冒泡阶段发生，事件传回到文档。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/blog/images/DOM2-event-flow.jpg&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;事件处理程序&#34;&gt;&lt;a href=&#34;#事件处理程序&#34; class=&#34;headerlink&#34; title=&#34;事件处理程序&#34;&gt;&lt;/a&gt;事件处理程序&lt;/h3&gt;&lt;p&gt;事件处理程序指用户指定响应事件的某种动作。它们都以’on’开头。HTML元素本身都可以使用与之同名的HTML特性。&lt;/p&gt;
&lt;h4 id=&#34;DOM0级事件处理程序&#34;&gt;&lt;a href=&#34;#DOM0级事件处理程序&#34; class=&#34;headerlink&#34; title=&#34;DOM0级事件处理程序&#34;&gt;&lt;/a&gt;DOM0级事件处理程序&lt;/h4&gt;&lt;p&gt;DOM0级事件处理程序就是将一个函数直接赋值给一个事件处理程序属性。使用这种方法指定的事件处理程序被认为是元素的一种方法，从而其作用域为元素本身，即&lt;code&gt;this&lt;/code&gt;指向引用元素。可以通过直接为事件处理程序属性赋值为null删除。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; btn = &lt;span class=&#34;variable language_&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;getElementById&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;button&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;btn.&lt;span class=&#34;property&#34;&gt;onclick&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;alert&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;id&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;// &amp;quot;button&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//删除&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;btn.&lt;span class=&#34;property&#34;&gt;onclick&lt;/span&gt; = &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;所有浏览器都支持DOM0级事件处理程序。这么做的好处是可以保证浏览器兼容性，缺点是使得HTML和JavaScript紧密耦合，不利用后期维护。&lt;/p&gt;
&lt;h4 id=&#34;DOM2级事件处理程序&#34;&gt;&lt;a href=&#34;#DOM2级事件处理程序&#34; class=&#34;headerlink&#34; title=&#34;DOM2级事件处理程序&#34;&gt;&lt;/a&gt;DOM2级事件处理程序&lt;/h4&gt;&lt;p&gt;伴随DOM2级标准提出，“DOM2级事件”提出了两种方法，用于绑定和解除事件处理程序：&lt;code&gt;addEventListener()&lt;/code&gt;和&lt;code&gt;removeEventListener()&lt;/code&gt;。它接受3个参数：&lt;strong&gt;事件名&lt;/strong&gt;、&lt;strong&gt;事件处理程序对应的函数&lt;/strong&gt;、&lt;strong&gt;表示捕获阶段的布尔值&lt;/strong&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; btn = &lt;span class=&#34;variable language_&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;getElementById&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;button&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;btn.&lt;span class=&#34;title function_&#34;&gt;addEventListener&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;click&amp;quot;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;alert&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;id&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;, &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;btn.&lt;span class=&#34;title function_&#34;&gt;addEventListener&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;click&amp;quot;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;alert&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;id&lt;/span&gt; + &lt;span class=&#34;string&#34;&gt;&amp;quot; again.&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;, &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;使用DOM2级方法绑定事件处理程序的一个优点是，&lt;strong&gt;可以添加多个程序到同一个标签上&lt;/strong&gt;。使用DOM0级方法时则会覆盖上一次的事件处理程序。IE9及以上版本都支持DOM2级事件处理程序。&lt;/p&gt;
&lt;p&gt;由于IE事件处理程序在IE8之前，是通过类似的&lt;code&gt;attachEvent()&lt;/code&gt;和&lt;code&gt;detachEvent()&lt;/code&gt;方法。它的第一个参数是事件名（&lt;strong&gt;需要带上on&lt;/strong&gt;），第二个参数是事件处理程序。通过这种方法绑定的处理程序都添加在冒泡阶段，且需要注意的是其中的&lt;code&gt;this&lt;/code&gt;等于&lt;code&gt;window&lt;/code&gt;对象。支持这种方式有IE和Opera。&lt;/p&gt;
&lt;p&gt;因此，一个跨浏览器兼容的事件绑定和解绑应该是下面这样的：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;EventUtil&lt;/span&gt; = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;addHandler&lt;/span&gt;: &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;element, type, handler&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (element.&lt;span class=&#34;property&#34;&gt;addEventListener&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            element.&lt;span class=&#34;title function_&#34;&gt;addEventListener&lt;/span&gt;(type, handler, &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (element.&lt;span class=&#34;property&#34;&gt;attachEvent&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            element.&lt;span class=&#34;title function_&#34;&gt;attachEvent&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;on&amp;quot;&lt;/span&gt; + type, handler);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            element[&lt;span class=&#34;string&#34;&gt;&amp;quot;on&amp;quot;&lt;/span&gt; + type] = handler;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;removeHandler&lt;/span&gt;: &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;element, type, handler&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (element.&lt;span class=&#34;property&#34;&gt;removeEventListener&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            element.&lt;span class=&#34;title function_&#34;&gt;removeEventListener&lt;/span&gt;(type, handler, &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (element.&lt;span class=&#34;property&#34;&gt;detachEvent&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            element.&lt;span class=&#34;title function_&#34;&gt;detachEvent&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;on&amp;quot;&lt;/span&gt; + type, handler);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            element[&lt;span class=&#34;string&#34;&gt;&amp;quot;on&amp;quot;&lt;/span&gt; + type] = &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&amp;#x3D;&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;h2 id=&#34;元素大小与位置&#34;&gt;&lt;a href=&#34;#元素大小与位置&#34; class=&#34;headerlink&#34; title=&#34;元素大小与位置&#34;&gt;&lt;/a&gt;元素大小与位置&lt;/h2&gt;&lt;p&gt;这些属性方法并不属于“DOM2级样式”，但是却经常得到使用。目前所有主流浏览器都支持这些属性。它们大多都是只读的。&lt;/p&gt;
&lt;h3 id=&#34;偏移量&#34;&gt;&lt;a href=&#34;#偏移量&#34; class=&#34;headerlink&#34; title=&#34;偏移量&#34;&gt;&lt;/a&gt;偏移量&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;偏移量&lt;/strong&gt;描述元素在屏幕中占用的可用空间，由其宽高决定，包括内边距、滚动条和边框（不包括外边距）。有下面4个属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;offsetHeight&lt;/code&gt; 元素垂直方向上的占用空间&lt;/li&gt;
&lt;li&gt;&lt;code&gt;offsetWidth&lt;/code&gt; 元素水平方向上的占用空间&lt;/li&gt;
&lt;li&gt;&lt;code&gt;offsetLeft&lt;/code&gt; 元素左边框距&lt;code&gt;offsetParent&lt;/code&gt;元素左内边框的像素距离&lt;/li&gt;
&lt;li&gt;&lt;code&gt;offsetTop&lt;/code&gt; 元素上边框距&lt;code&gt;offsetParent&lt;/code&gt;元素上内边框的像素距离&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以利用元素的&lt;code&gt;offsetLeft&lt;/code&gt;或&lt;code&gt;offsetLeft&lt;/code&gt;与其&lt;code&gt;offsetParent&lt;/code&gt;对应属性相加直到根元素，获取到元素相对于页面的左偏移值或上偏移值。&lt;/p&gt;
&lt;h3 id=&#34;客户区大小&#34;&gt;&lt;a href=&#34;#客户区大小&#34; class=&#34;headerlink&#34; title=&#34;客户区大小&#34;&gt;&lt;/a&gt;客户区大小&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;客户区大小&lt;/strong&gt;指元素内容和内边距占据的空间大小，不包括滚动条。&lt;code&gt;clientWidth&lt;/code&gt;是元素内容宽度加左右内边距的宽度，&lt;code&gt;clientHeight&lt;/code&gt;是元素内容高度加上下内边距的高度。&lt;/p&gt;
&lt;p&gt;可以通过对&lt;code&gt;body&lt;/code&gt;元素取值来获取当前浏览器视口的大小。&lt;/p&gt;
&lt;h3 id=&#34;滚动大小&#34;&gt;&lt;a href=&#34;#滚动大小&#34; class=&#34;headerlink&#34; title=&#34;滚动大小&#34;&gt;&lt;/a&gt;滚动大小&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;滚动大小&lt;/strong&gt;包含滚动内容的元素大小。它有下面4个相关属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;scrollHeight&lt;/code&gt; 没有滚动条时，元素内容的高度&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scrollWidth&lt;/code&gt; 没有滚动条时，元素内容的宽度&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scrollLeft&lt;/code&gt; 被隐藏在内容区域左侧的像素数，可以设置从而改变元素滚动位置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scrollTop&lt;/code&gt; 被隐藏在内容区域上侧的像素数，可以设置从而改变元素滚动位置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;scrollHeight/scrollWidth&lt;/code&gt;和&lt;code&gt;clientHeight/clientWidth&lt;/code&gt;在不同浏览器下的表现行为并不相同，有的表示视口大小，有的表示元素内容区域大小。使用时可以&lt;strong&gt;取较大值&lt;/strong&gt;。而另外两个属性&lt;code&gt;scrollLeft&lt;/code&gt;和&lt;code&gt;scrollTop&lt;/code&gt;则通常用在&lt;code&gt;document&lt;/code&gt;中，获取和滚动相关的属性。&lt;/p&gt;
&lt;h3 id=&#34;确定元素大小&#34;&gt;&lt;a href=&#34;#确定元素大小&#34; class=&#34;headerlink&#34; title=&#34;确定元素大小&#34;&gt;&lt;/a&gt;确定元素大小&lt;/h3&gt;&lt;p&gt;大多数主流浏览器为元素提供了&lt;code&gt;getBoundingClientRect()&lt;/code&gt;方法，返回一个对象，包含&lt;code&gt;left&lt;/code&gt;，&lt;code&gt;right&lt;/code&gt;，&lt;code&gt;top&lt;/code&gt;，&lt;code&gt;bottom&lt;/code&gt;四个属性。给出了元素相对于视口的位置。&lt;/p&gt;
&lt;p&gt;对不支持这个方法的浏览器，可以通过偏移量的相关属性获取。&lt;/p&gt;
&lt;p&gt;&amp;#x3D;&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;h2 id=&#34;媒体元素&#34;&gt;&lt;a href=&#34;#媒体元素&#34; class=&#34;headerlink&#34; title=&#34;媒体元素&#34;&gt;&lt;/a&gt;媒体元素&lt;/h2&gt;&lt;p&gt;HTML5出现前，提供富媒体内容的网站多采用Flash的方式保证浏览器兼容性。HTML5新增了两个标签&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio&#34;&gt;&lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt;&lt;/a&gt;和&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/video&#34;&gt;&lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt;&lt;/a&gt;。用于方便地嵌入音频和视频内容。同时，这两个标签也提供了实现常用功能的JavaScript API。允许为媒体创建自定义控件。&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;video&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;src&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;demo.mpg&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Video player is not available.&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;video&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;audio&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;src&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;song.mp3&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Audio player is not available.&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;audio&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;其中元素的&lt;code&gt;src&lt;/code&gt;属性指定了加载的媒体文件，还可以通过&lt;code&gt;width&lt;/code&gt;和&lt;code&gt;height&lt;/code&gt;属性指定播放器大小。&lt;code&gt;controls&lt;/code&gt;属性意味浏览器应该显示UI控件用于操作媒体。标签中的内容用于在不支持时显示后备内容。&lt;/p&gt;
&lt;p&gt;因为不同浏览器支持的媒体格式集并不完全相同，可以在标签下指定&lt;strong&gt;一或多个&lt;/strong&gt;&lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt;元素，通过&lt;code&gt;src&lt;/code&gt;和&lt;code&gt;type&lt;/code&gt;属性指定来源和格式，视频标签下&lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt;的&lt;code&gt;type&lt;/code&gt;中甚至可以指定&lt;code&gt;codecs&lt;/code&gt;表示解码器。目前现代浏览器（IE9+，对IE说的就是你）都支持这两个标签。&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;video&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;myVideo&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;source&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;src&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;foo.mpg&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;source&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;src&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;foo.webm&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;video/webm; codecs=vp8, vorbis&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;video&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;audio&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;source&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;src&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;song.ogg&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;audio/ogg&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;source&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;src&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;song.mp3&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;audio/mpeg&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;audio&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;属性&#34;&gt;&lt;a href=&#34;#属性&#34; class=&#34;headerlink&#34; title=&#34;属性&#34;&gt;&lt;/a&gt;属性&lt;/h3&gt;&lt;p&gt;&lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt;和&lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt;提供了完善的JavaScript接口，下面是一些可能会用到的它们的属性。其中很多可以直接在标签元素上设置。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;autoplay&lt;/code&gt; 取消或设置当前&lt;code&gt;autoplay&lt;/code&gt;标识&lt;/li&gt;
&lt;li&gt;&lt;code&gt;controls&lt;/code&gt; 取消或设置当前&lt;code&gt;controls&lt;/code&gt;标识，用于显示和隐藏浏览器内置控件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;currentTime&lt;/code&gt; 获取已经播放的秒数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;duration&lt;/code&gt; 获取媒体的总长度（秒数）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ended&lt;/code&gt; 获取媒体是否播放完成&lt;/li&gt;
&lt;li&gt;&lt;code&gt;loop&lt;/code&gt;  取消或设置媒体文件是否循环播放&lt;/li&gt;
&lt;li&gt;&lt;code&gt;muted&lt;/code&gt; 取消或设置媒体文件是否静音&lt;/li&gt;
&lt;li&gt;&lt;code&gt;paused&lt;/code&gt; 标识播放器是否暂停&lt;/li&gt;
&lt;li&gt;&lt;code&gt;playbackRate&lt;/code&gt; 取消或设置当前播放速度&lt;/li&gt;
&lt;li&gt;&lt;code&gt;readyState&lt;/code&gt; 标识媒体是否就绪，有0，1，2，3四种情况，表示不可用、可以播放当前帧、可以播放、加载完毕&lt;/li&gt;
&lt;li&gt;&lt;code&gt;src&lt;/code&gt; 媒体文件来源，可重写&lt;/li&gt;
&lt;li&gt;&lt;code&gt;volume&lt;/code&gt; 取消或设置当前音量，值为0.0到1.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;事件-1&#34;&gt;&lt;a href=&#34;#事件-1&#34; class=&#34;headerlink&#34; title=&#34;事件&#34;&gt;&lt;/a&gt;事件&lt;/h3&gt;&lt;p&gt;这两个媒体元素还有许多事件，有的是媒体播放的结果，有的是用户操作的结果。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;abort&lt;/code&gt; 下载中断&lt;/li&gt;
&lt;li&gt;&lt;code&gt;canplay&lt;/code&gt; 对应着&lt;code&gt;readyState&lt;/code&gt;为2&lt;/li&gt;
&lt;li&gt;&lt;code&gt;canplaythrough&lt;/code&gt; 对应着&lt;code&gt;readyState&lt;/code&gt;为3&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ended&lt;/code&gt; 媒体播放完毕&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error&lt;/code&gt; 下载过程网络错误&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pause&lt;/code&gt; 播放暂停&lt;/li&gt;
&lt;li&gt;&lt;code&gt;play&lt;/code&gt;  媒体收到播放指令&lt;/li&gt;
&lt;li&gt;&lt;code&gt;playing&lt;/code&gt; 媒体开始播放&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ratechange&lt;/code&gt; 播放速度改变&lt;/li&gt;
&lt;li&gt;&lt;code&gt;seeked&lt;/code&gt; 移动到新位置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;seeking&lt;/code&gt; 正在移动进度条&lt;/li&gt;
&lt;li&gt;&lt;code&gt;volumnchange&lt;/code&gt; &lt;code&gt;volumn&lt;/code&gt;和&lt;code&gt;muted&lt;/code&gt;属性值改变&lt;/li&gt;
&lt;li&gt;&lt;code&gt;waiting&lt;/code&gt; 播放因下载未完成暂停&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在如此丰富的属性和事件的帮助下，结合&lt;code&gt;play()&lt;/code&gt;和&lt;code&gt;pause()&lt;/code&gt;方法，我们可以很容易构建一个自定义的媒体播放器。&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;player&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;player__content&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;video&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;video&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;src&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;movie.mov&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;poster&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;movie.jpg&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;width&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;400&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;height&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;200&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      Video is not supported.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;video&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;player__control&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;button&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;Play!&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;video-play&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;span&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;curtime&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;0&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;/&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;span&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;duration&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;0&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; player = &lt;span class=&#34;variable language_&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;getElementById&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;video&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    btn = &lt;span class=&#34;variable language_&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;getElementById&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;video-play&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    curtime = &lt;span class=&#34;variable language_&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;getElementById&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;curtime&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    duration = &lt;span class=&#34;variable language_&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;getElementById&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;duration&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//更新播放时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;duration.&lt;span class=&#34;property&#34;&gt;innerHTML&lt;/span&gt; = player.&lt;span class=&#34;property&#34;&gt;duration&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//为按钮添加处理事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;EventUtil&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;addHandler&lt;/span&gt;(btn, &lt;span class=&#34;string&#34;&gt;&amp;quot;click&amp;quot;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;e&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (player.&lt;span class=&#34;property&#34;&gt;paused&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        player.&lt;span class=&#34;title function_&#34;&gt;play&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        btn.&lt;span class=&#34;property&#34;&gt;value&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;quot;Pause!&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        player.&lt;span class=&#34;title function_&#34;&gt;pause&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        btn.&lt;span class=&#34;property&#34;&gt;value&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;quot;Play!&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//定时更新时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;setInterval&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    curtime.&lt;span class=&#34;property&#34;&gt;innerHTML&lt;/span&gt; = player.&lt;span class=&#34;property&#34;&gt;currentTime&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;, &lt;span class=&#34;number&#34;&gt;250&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;最后，不是所有浏览器都支持这两个标签的所有解码器，因此有一个API来检测浏览器是否支持某种解码器。通过&lt;code&gt;canPlayType()&lt;/code&gt;方法，该方法接收格式&amp;#x2F;编解码器（如”&lt;code&gt;audio/wav&lt;/code&gt;“）字符串，返回”probably”, “maybe”或是空字符串””。像下面这样：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (audio.&lt;span class=&#34;title function_&#34;&gt;canPlayType&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;audio/mpeg&amp;quot;&lt;/span&gt;))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//进一步处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
    </channel>
</rss>
