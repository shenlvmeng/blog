{
    "version": "https://jsonfeed.org/version/1",
    "title": "Shenlvmeng's Blog • All posts by \"javascript\" tag",
    "description": "Be sharp, my friend.",
    "home_page_url": "http://shenlvmeng.github.com/blog",
    "items": [
        {
            "id": "http://shenlvmeng.github.com/blog/2018/02/06/my-first-electron-demo/",
            "url": "http://shenlvmeng.github.com/blog/2018/02/06/my-first-electron-demo/",
            "title": "我的第一个Electron应用",
            "date_published": "2018-02-06T07:58:11.000Z",
            "content_html": "<blockquote>\n<p>前一阵突发奇想，想写一个汇总所有骑行数据的网页。又想到最近看了下Electron，干脆写一个能够生产这样网页的工具，造福自己，造福他人。</p>\n</blockquote>\n<p><img src=\"https://s2.ax1x.com/2019/04/07/Ahbsc6.png\" alt=\"Ahbsc6.png\"></p>\n<h2 id=\"Electron是啥\"><a href=\"#Electron是啥\" class=\"headerlink\" title=\"Electron是啥\"></a>Electron是啥</h2><p><a href=\"(https://electronjs.org/)\">Electron</a>一套由Github开发的开源库，基于<a href=\"https://www.chromium.org/Home\">Chromium</a>和<a href=\"https://nodejs.org/en/\">Node.js</a>，支持通过HTML、JavaScript、CSS来构建跨平台（Mac、Windows、Linux）应用。Electron起初是为文本编辑器<a href=\"https://atom.io/\">Atom</a>而开发的一套开发框架，名为Atom Shell。现如今已经为<a href=\"https://electronjs.org/apps\">众多应用</a>所用。</p>\n<p>从开发者角度看，Electron分为<code>main</code>和<code>renderer</code>两部分。前者运行在主进程中，以创建web页面的方式显示一个GUI；后者是渲染进程，每个Electron的web页面运行在其中。通常的浏览器内，网页通常运行在一个沙盒的环境不能够进行原生操作。 在Electron中，可以在渲染进程使用Node.js的API和Electron提供的众多API（GUI相关除外），和操作系统进行一些低级别的交互。主进程和渲染进程通过<a href=\"https://electronjs.org/docs/api/ipc-main\"><code>ipcMain</code></a>和<a href=\"https://electronjs.org/docs/api/ipc-renderer\"><code>ipcRenderer</code></a>相互沟通；也可以通过<a href=\"https://electronjs.org/docs/api/remote\"><code>remote</code></a>的方式发起，后者要更简洁些。</p>\n<p>在项目结构上，官网并没有限制，<a href=\"https://github.com/electron-userland/electron-webpack\">electron-webpack</a>的<a href=\"https://webpack.electron.build/project-structure\">project-structure</a>可以参考，安全性上，可以参考官网的<a href=\"https://electronjs.org/docs/tutorial/security\">介绍</a>。要想获得对Electron概念的快速认识，可以看看<a href=\"https://electronjs.org/docs/tutorial/about\">关于Electron</a>和<a href=\"https://electronjs.org/docs/tutorial/quick-start\">快速入门</a>，再去<a href=\"https://www.zhihu.com/topic/20038727/top-answers\">知乎Electron精华话题</a>看看，或者看看<a href=\"https://github.com/sindresorhus/awesome-electron\">awesome list</a>也是极好的。</p>\n<h2 id=\"调研准备\"><a href=\"#调研准备\" class=\"headerlink\" title=\"调研准备\"></a>调研准备</h2><p>地图考虑还是使用百度地图API（因为<a href=\"https://shenlvmeng.github.io/blog/2018/01/27/my-first-pwa-app/\">上个小项目</a>用的就是百度地图，好上手），根据<a href=\"http://lbsyun.baidu.com/jsdemo.htm#c1_25\">demo演示</a>来看，根据数据点画个折线是没什么问题的。地图的part没问题了。</p>\n<p>下面就是数据的part。去确认了下我骑行常用的APP<a href=\"https://www.imxingzhe.com/\">行者</a>，网页和APP都有导出功能。导出格式为<code>.gpx</code>的gps数据文件。OK，数据的来源也有了。</p>\n<p>至于怎么把这些点连线搁在地图上，就是我要干的活了。</p>\n<h2 id=\"功能设计\"><a href=\"#功能设计\" class=\"headerlink\" title=\"功能设计\"></a>功能设计</h2><p>但是事情没那么简单，既然选择<a href=\"https://electronjs.org/\">Electron</a>来练手，光做个展示的网页出来就很没意思了。这也不是Electron的用武之地。于是能够想到的就是，做一个<strong>可以生成上面那个网页的工具</strong>，一方面减轻我的负担，让我在日后维护时省心省力；另一方面也能造福他人嘛。</p>\n<p>现在整理一下，我拿在手里的是一堆<code>.gpx</code>的文件，产出是可以画图的网页。稍微分解一下：</p>\n<ul>\n<li>网页是需要独立存在，不需要用户配置的，这些gps数据必须单独存储，可以使用前端友好的JSON文件。这个<strong>转译</strong>过程需要在Electron应用中完成</li>\n<li>网页需要能够配置生成，不需要用户手写，因此在应用里需要填充<strong>HTML模板</strong>，生产HTML文件。</li>\n<li>页面并不复杂，不需要使用Vue、React甚至webpack的加持，作为我的第一个Electron应用，把握整体感受要紧</li>\n</ul>\n<h2 id=\"开写\"><a href=\"#开写\" class=\"headerlink\" title=\"开写\"></a>开写</h2><h3 id=\"相关环境\"><a href=\"#相关环境\" class=\"headerlink\" title=\"相关环境\"></a>相关环境</h3><p>安装Electron过程中，报错node版本过低。只能重新安转新版本的node，windows下只有<a href=\"https://github.com/coreybutler/nvm-windows\">nvm-windows</a>这个选择。安装完成后，之前全局安装的npm包只能重头再安一遍。先安装<a href=\"https://www.npmjs.com/package/nrm\">nrm</a>再说。</p>\n<p><strong>注意：安装nvm-windows前，强烈建议卸载已有的Node.js</strong></p>\n<h3 id=\"boilerplate\"><a href=\"#boilerplate\" class=\"headerlink\" title=\"boilerplate\"></a>boilerplate</h3><p>boilerplate即骨架。现在前端的环境里，一门成熟的开源库是一定有一堆boilerplate的，毕竟程序猿懒人多。Electron也不能免俗。可以从<a href=\"https://github.com/sindresorhus/awesome-electron#boilerplates\">awesome list</a>中挑一个看上眼的。如果项目比较大，可以直接用<a href=\"https://github.com/SimulatedGREG/electron-vue\">electron-vue</a>这种省心省力，一键式配置，开发打包工具一应齐全。这里我从官网提到的<a href=\"https://github.com/electron/electron-quick-start\">quick start</a>，除了一些样例代码，啥都没有，正合我意。</p>\n<p><em>（我曾经尝试使用<a href=\"https://github.com/electron/electron-quick-start\">electron-webpack-quick-start</a>，想着顺便打包了<a href=\"https://github.com/electron-userland/electron-builder\">electron-builder</a>，还有webpack、热加载，岂不美哉。不过根据<a href=\"https://webpack.electron.build/development#use-of-html-webpack-plugin\">这里</a>所说，是没有index.html暴露给你的，这几乎就意味着必须要用Vue、React这样的解决方案，但是<a href=\"https://github.com/electron-userland/electron-webpack\">electron-webpack</a>这个库并没有包括，需要自己add-on，但是按照<a href=\"https://webpack.electron.build/add-ons#vuejs\">文档</a>所说的操作后，并不能识别<code>.vue</code>文件，而且也没有vue-devtool。这是<strong>坑之一</strong>）</em></p>\n<h3 id=\"转译\"><a href=\"#转译\" class=\"headerlink\" title=\"转译\"></a>转译</h3><p>转译过程是在<code>renderer.js</code>中完成的。实际上，项目里<a href=\"https://zhuanlan.zhihu.com/p/24275216\">大多数业务逻辑也是在渲染进程中完成的</a>。核心在把gpx文件里的信息解析出来，除了<code>&lt;desc&gt;&lt;/desc&gt;</code>中的meta信息之外，其余的点结构大致像下面这样;</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">trkpt</span> <span class=\"attr\">lat</span>=<span class=\"string\">&quot;40.106419&quot;</span> <span class=\"attr\">lon</span>=<span class=\"string\">&quot;116.369812&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ele</span>&gt;</span>40.6<span class=\"tag\">&lt;/<span class=\"name\">ele</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">time</span>&gt;</span>2017-03-04T16:52:36Z<span class=\"tag\">&lt;/<span class=\"name\">time</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">trkpt</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">trkpt</span> <span class=\"attr\">lat</span>=<span class=\"string\">&quot;40.106531&quot;</span> <span class=\"attr\">lon</span>=<span class=\"string\">&quot;116.369916&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ele</span>&gt;</span>59.8<span class=\"tag\">&lt;/<span class=\"name\">ele</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">time</span>&gt;</span>2017-03-04T16:52:39Z<span class=\"tag\">&lt;/<span class=\"name\">time</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">trkpt</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>幸运的是，npm上早就有gpx的parser。<a href=\"https://www.npmjs.com/package/gpx-parse\">gpx-parse</a>的功能足够满足我们需要了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gpxParse = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;gpx-parse&quot;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//from file </span></span><br><span class=\"line\">gpxParse.<span class=\"title function_\">parseGpxFromFile</span>(<span class=\"string\">&quot;/path/to/gpxFile&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">error, data</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//do stuff </span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//or from string </span></span><br><span class=\"line\">gpxParse.<span class=\"title function_\">parseGpx</span>(<span class=\"string\">&quot;&lt;gpx&gt;&lt;/gpx&gt;&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">error, data</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//do stuff </span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// or an external file via HTTP(S) </span></span><br><span class=\"line\">gpxParse.<span class=\"title function_\">parseRemoteGpxFile</span>(<span class=\"string\">&quot;http://host.tld/my.gpx&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">error, data</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//do stuff </span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>顺带写几个input框（包括<code>&lt;input type=&quot;file&quot;&gt;</code>），测试一下，没啥问题（排除掉中间处理<a href=\"https://yarnpkg.com/zh-Hans/\">yarn</a>和npm冲突问题的话）。观察一下，返回值是一个<code>GpxResult</code>类型，里面有<code>metadata</code>，<code>routes</code>，<code>tracks</code>等字段，只有tracks中记录着点的信息。考虑到<code>tracks</code>和里面<code>segments</code>字段是数组的情况，要进行一下flatten的处理。最后，整个转译过程大概如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">serialize</span>(<span class=\"params\">file, index</span>) &#123;</span><br><span class=\"line\">  gpxParse.<span class=\"title function_\">parseGpxFromFile</span>(file.<span class=\"property\">path</span>, <span class=\"keyword\">function</span>(<span class=\"params\">error, data</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (error || !data.<span class=\"property\">tracks</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;文件内容错误&#x27;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> track = data.<span class=\"property\">tracks</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 扁平化处理</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> flattenTrack = track.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">acc, cur</span>) =&gt;</span> (cur.<span class=\"property\">segments</span>.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">acc, cur</span>) =&gt;</span> acc.<span class=\"title function_\">concat</span>(cur), []).<span class=\"title function_\">concat</span>(acc)), [])</span><br><span class=\"line\">    <span class=\"keyword\">const</span> points = flattenTrack.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">&#123;lat, lon&#125;</span>) =&gt;</span> (&#123;lat, <span class=\"attr\">lng</span>: lon&#125;))</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> jsonData = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(points)</span><br><span class=\"line\">      <span class=\"keyword\">const</span> pathStr = path.<span class=\"title function_\">join</span>(<span class=\"variable constant_\">OUTPUT_PATH</span>, <span class=\"string\">`<span class=\"subst\">$&#123;index&#125;</span>.json`</span>)</span><br><span class=\"line\">      remote.<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>).<span class=\"title function_\">writeFile</span>(pathStr, jsonData,<span class=\"string\">&#x27;utf8&#x27;</span>, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">warn</span>(e)</span><br><span class=\"line\">      <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;文件序列化失败&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"写一个示例网页\"><a href=\"#写一个示例网页\" class=\"headerlink\" title=\"写一个示例网页\"></a>写一个示例网页</h3><p>既然最后的网页是生成出来的，就有第一个能够成功工作起来的网页作为模子，好抽离范本出来。先搭一个最简单的HTML架子，插入百度地图的script标签。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0, user-scalable=no&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-tag\">body</span>, <span class=\"selector-tag\">html</span>, <span class=\"selector-id\">#map</span> &#123;<span class=\"attribute\">width</span>: <span class=\"number\">100%</span>; <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>; <span class=\"attribute\">overflow</span>: hidden; <span class=\"attribute\">margin</span>:<span class=\"number\">0</span>;&#125;</span></span><br><span class=\"line\"><span class=\"language-css\">  </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>我的骑行轨迹<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;map&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://api.map.baidu.com/api?v=2.0&amp;ak=你的秘钥&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>下面我们把工作稍微分析一下：</p>\n<ul>\n<li>从本地读取JSON文件，意味着<strong>自己实现一个ajax</strong>，考虑兼容性（毕竟没了<a href=\"http://babeljs.io/\">babel</a>和webpack）,使用XMLHttpRequest</li>\n<li>读取当然得是<strong>异步</strong>的，JSON文件很有可能很多，需要依次进行</li>\n<li>地图配置和画图就很简单了，参考API就行了</li>\n</ul>\n<p>第一个工作不难：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getJSON</span>(<span class=\"params\">path, callback</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> request = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">  request.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;GET&#x27;</span>, path, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  request.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (request.<span class=\"property\">readyState</span> === <span class=\"number\">4</span> &amp;&amp; request.<span class=\"property\">status</span> === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">callback</span>(request.<span class=\"property\">response</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  request.<span class=\"title function_\">send</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第二个工作也不难，在递归函数的外面设置控制递归的变量就可以了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pool = <span class=\"title class_\">Array</span>.<span class=\"title function_\">apply</span>(<span class=\"literal\">null</span>, <span class=\"title class_\">Array</span>(length)).<span class=\"title function_\">map</span>(<span class=\"keyword\">function</span>(<span class=\"params\">v, i</span>)&#123;<span class=\"keyword\">return</span> i+<span class=\"string\">&#x27;.json&#x27;</span>;&#125;);</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">paint</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!pool.<span class=\"property\">length</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"title function_\">getJSON</span>(pool.<span class=\"title function_\">shift</span>(), <span class=\"keyword\">function</span>(<span class=\"params\">res</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res) <span class=\"title function_\">paint</span>();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> pois = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(res).<span class=\"title function_\">map</span>(<span class=\"keyword\">function</span>(<span class=\"params\">point</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BMap</span>.<span class=\"title class_\">Point</span>(point.<span class=\"property\">lng</span>, point.<span class=\"property\">lat</span>);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">var</span> polyline = <span class=\"keyword\">new</span> <span class=\"title class_\">BMap</span>.<span class=\"title class_\">Polyline</span>(pois);</span><br><span class=\"line\">      map.<span class=\"title function_\">addOverlay</span>(polyline);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">warn</span>(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>OK，大功告成（排除其余逻辑bug之后），赶紧接上<code>renderer.js</code>那边转译好的JSON文件看看骑行轨迹吧！</p>\n<p>你以为事情会这么简单么？</p>\n<p>当然不。</p>\n<h3 id=\"坐标换算\"><a href=\"#坐标换算\" class=\"headerlink\" title=\"坐标换算\"></a>坐标换算</h3><p>图是出来了，但是路线有偏差，发现明显有所平移。这是怎么回事，搜索过后才发现，百度所采用的坐标并不是gps数据中的真实大地坐标，而是在火星坐标基础上再次加密的百度坐标（<a href=\"http://blog.csdn.net/flygoa/article/details/69258648\">更多</a>）。<a href=\"http://lbsyun.baidu.com/jsdemo.htm#a5_3\">官网示例</a>上也给出了gps坐标转成百度坐标的API。</p>\n<p>得，那就在转译成JSON数据前多map一段呗。仔细一看，<a href=\"http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference.html#a7b49\"><code>Convertor</code></a>的介绍里赫然写着<strong>“一次最多10个点”</strong>，居然还限流（其实不只是限流的问题，递归的写法也要变化）。一条路线至少上千个点呢，算了先试试看速度吧。</p>\n<p>两条路线用了30s才显示出来，果然很慢……</p>\n<p>只能自己实现转译过程了，网上倒是有一些例子，都差不多。尝试了一下，发现有点效果，但是路线还是有偏移。试了半个多小时后，总算找到了一个完美的<a href=\"http://www.oschina.net/code/snippet_260395_39205\">JS转译代码</a>，感谢原作者。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">delta</span>(<span class=\"params\">lat, lon</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Krasovsky 1940</span></span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\">  <span class=\"comment\">// a = 6378245.0, 1/f = 298.3</span></span><br><span class=\"line\">  <span class=\"comment\">// b = a * (1 - f)</span></span><br><span class=\"line\">  <span class=\"comment\">// ee = (a^2 - b^2) / a^2;</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> a = <span class=\"number\">6378245.0</span>; <span class=\"comment\">//  a: 卫星椭球坐标投影到平面地图坐标系的投影因子。</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> ee = <span class=\"number\">0.00669342162296594323</span>; <span class=\"comment\">//  ee: 椭球的偏心率。</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> dLat = <span class=\"title function_\">transformLat</span>(lon - <span class=\"number\">105.0</span>, lat - <span class=\"number\">35.0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dLon = <span class=\"title function_\">transformLon</span>(lon - <span class=\"number\">105.0</span>, lat - <span class=\"number\">35.0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> radLat = lat / <span class=\"number\">180.0</span> * <span class=\"variable constant_\">PI</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> magic = <span class=\"title class_\">Math</span>.<span class=\"title function_\">sin</span>(radLat);</span><br><span class=\"line\">  magic = <span class=\"number\">1</span> - ee * magic * magic;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> sqrtMagic = <span class=\"title class_\">Math</span>.<span class=\"title function_\">sqrt</span>(magic);</span><br><span class=\"line\">  dLat = (dLat * <span class=\"number\">180.0</span>) / ((a * (<span class=\"number\">1</span> - ee)) / (magic * sqrtMagic) * <span class=\"variable constant_\">PI</span>);</span><br><span class=\"line\">  dLon = (dLon * <span class=\"number\">180.0</span>) / (a / sqrtMagic * <span class=\"title class_\">Math</span>.<span class=\"title function_\">cos</span>(radLat) * <span class=\"variable constant_\">PI</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;<span class=\"attr\">lat</span>: dLat, <span class=\"attr\">lon</span>: dLon&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">transformLat</span> (x, y) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ret = -<span class=\"number\">100.0</span> + <span class=\"number\">2.0</span> * x + <span class=\"number\">3.0</span> * y + <span class=\"number\">0.2</span> * y * y + <span class=\"number\">0.1</span> * x * y + <span class=\"number\">0.2</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">sqrt</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(x));</span><br><span class=\"line\">    ret += (<span class=\"number\">20.0</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">sin</span>(<span class=\"number\">6.0</span> * x * <span class=\"variable constant_\">PI</span>) + <span class=\"number\">20.0</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">sin</span>(<span class=\"number\">2.0</span> * x * <span class=\"variable constant_\">PI</span>)) * <span class=\"number\">2.0</span> / <span class=\"number\">3.0</span>;</span><br><span class=\"line\">    ret += (<span class=\"number\">20.0</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">sin</span>(y * <span class=\"variable constant_\">PI</span>) + <span class=\"number\">40.0</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">sin</span>(y / <span class=\"number\">3.0</span> * <span class=\"variable constant_\">PI</span>)) * <span class=\"number\">2.0</span> / <span class=\"number\">3.0</span>;</span><br><span class=\"line\">    ret += (<span class=\"number\">160.0</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">sin</span>(y / <span class=\"number\">12.0</span> * <span class=\"variable constant_\">PI</span>) + <span class=\"number\">320</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">sin</span>(y * <span class=\"variable constant_\">PI</span> / <span class=\"number\">30.0</span>)) * <span class=\"number\">2.0</span> / <span class=\"number\">3.0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">transformLon</span> (x, y) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ret = <span class=\"number\">300.0</span> + x + <span class=\"number\">2.0</span> * y + <span class=\"number\">0.1</span> * x * x + <span class=\"number\">0.1</span> * x * y + <span class=\"number\">0.1</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">sqrt</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(x));</span><br><span class=\"line\">    ret += (<span class=\"number\">20.0</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">sin</span>(<span class=\"number\">6.0</span> * x * <span class=\"variable constant_\">PI</span>) + <span class=\"number\">20.0</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">sin</span>(<span class=\"number\">2.0</span> * x * <span class=\"variable constant_\">PI</span>)) * <span class=\"number\">2.0</span> / <span class=\"number\">3.0</span>;</span><br><span class=\"line\">    ret += (<span class=\"number\">20.0</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">sin</span>(x * <span class=\"variable constant_\">PI</span>) + <span class=\"number\">40.0</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">sin</span>(x / <span class=\"number\">3.0</span> * <span class=\"variable constant_\">PI</span>)) * <span class=\"number\">2.0</span> / <span class=\"number\">3.0</span>;</span><br><span class=\"line\">    ret += (<span class=\"number\">150.0</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">sin</span>(x / <span class=\"number\">12.0</span> * <span class=\"variable constant_\">PI</span>) + <span class=\"number\">300.0</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">sin</span>(x / <span class=\"number\">30.0</span> * <span class=\"variable constant_\">PI</span>)) * <span class=\"number\">2.0</span> / <span class=\"number\">3.0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n\n<p>这转译过程，要不是有先行者，我怕是要倒在这里了。</p>\n<h3 id=\"HTML模板\"><a href=\"#HTML模板\" class=\"headerlink\" title=\"HTML模板\"></a>HTML模板</h3><p>示例HTML已经工作起来了，现在就是抽出模子的过程。网页并不复杂，可以用简单的HTML template解决问题。John Resig的方案如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Simple JavaScript Templating</span></span><br><span class=\"line\"><span class=\"comment\">// John Resig - https://johnresig.com/ - MIT Licensed</span></span><br><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> cache = &#123;&#125;;</span><br><span class=\"line\">   </span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">tmpl</span> = <span class=\"keyword\">function</span> <span class=\"title function_\">tmpl</span>(<span class=\"params\">str, data</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Figure out if we&#x27;re getting a template, or if we need to</span></span><br><span class=\"line\">    <span class=\"comment\">// load the template - and be sure to cache the result.</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> fn = !<span class=\"regexp\">/\\W/</span>.<span class=\"title function_\">test</span>(str) ?</span><br><span class=\"line\">      cache[str] = cache[str] ||</span><br><span class=\"line\">        <span class=\"title function_\">tmpl</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(str).<span class=\"property\">innerHTML</span>) :</span><br><span class=\"line\">       </span><br><span class=\"line\">      <span class=\"comment\">// Generate a reusable function that will serve as a template</span></span><br><span class=\"line\">      <span class=\"comment\">// generator (and which will be cached).</span></span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"title class_\">Function</span>(<span class=\"string\">&quot;obj&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;var p=[],print=function()&#123;p.push.apply(p,arguments);&#125;;&quot;</span> +</span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"comment\">// Introduce the data as local variables using with()&#123;&#125;</span></span><br><span class=\"line\">        <span class=\"string\">&quot;with(obj)&#123;p.push(&#x27;&quot;</span> +</span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"comment\">// Convert the template into pure JavaScript</span></span><br><span class=\"line\">        str</span><br><span class=\"line\">          .<span class=\"title function_\">replace</span>(<span class=\"regexp\">/[\\r\\t\\n]/g</span>, <span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">split</span>(<span class=\"string\">&quot;&lt;%&quot;</span>).<span class=\"title function_\">join</span>(<span class=\"string\">&quot;\\t&quot;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">replace</span>(<span class=\"regexp\">/((^|%&gt;)[^\\t]*)&#x27;/g</span>, <span class=\"string\">&quot;$1\\r&quot;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\t=(.*?)%&gt;/g</span>, <span class=\"string\">&quot;&#x27;,$1,&#x27;&quot;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">split</span>(<span class=\"string\">&quot;\\t&quot;</span>).<span class=\"title function_\">join</span>(<span class=\"string\">&quot;&#x27;);&quot;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">split</span>(<span class=\"string\">&quot;%&gt;&quot;</span>).<span class=\"title function_\">join</span>(<span class=\"string\">&quot;p.push(&#x27;&quot;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">split</span>(<span class=\"string\">&quot;\\r&quot;</span>).<span class=\"title function_\">join</span>(<span class=\"string\">&quot;\\\\&#x27;&quot;</span>)</span><br><span class=\"line\">      + <span class=\"string\">&quot;&#x27;);&#125;return p.join(&#x27;&#x27;);&quot;</span>);</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"comment\">// Provide some basic currying to the user</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> data ? <span class=\"title function_\">fn</span>( data ) : fn;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<p>看上去很眼熟，以前的项目似乎见到过。</p>\n<p>把之前的示例HTML放在<code>index.html</code>的<code>&lt;script type=&quot;text/template&quot;&gt;&lt;/script&gt;</code>中，在渲染进程里加上代码看看？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">tmpl</span>(<span class=\"string\">&#x27;template&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<p>嗯……报错了。提示“<code>Missing &#39;)&#39; after argument list </code>”。加断点调试发现是标签里的<code>&quot;</code>打断了<code>new Function</code>的语句。尝试了多种方法无效后，索性使用<code>encodeURIComponent</code>想处理掉麻烦的特殊符号，但是这么做之后就无法匹配<code>&lt;%=%&gt;</code>了。</p>\n<p>于是最后选择<a href=\"http://underscorejs.org/\">underscore</a>的template方法。再试试……</p>\n<p>没问题了。之后把允许用户填写的部分抽出来，就可以把<code>index.html</code>的生成放在转译代码身旁了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> template = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;template&#x27;</span>).<span class=\"property\">innerHTML</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">remote.<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>).<span class=\"title function_\">writeFile</span>(path.<span class=\"title function_\">join</span>(<span class=\"variable constant_\">OUTPUT_PATH</span>, <span class=\"string\">&#x27;index.html&#x27;</span>), <span class=\"title function_\">tmpl</span>(template)(data).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/&amp;lt;/g</span>, <span class=\"string\">&#x27;&lt;&#x27;</span>),<span class=\"string\">&#x27;utf8&#x27;</span>, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;生成完毕！\\n将output文件夹下所有文件上传到服务器即可查看效果！&#x27;</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>再次运行，测试生成的网页能否工作？答案当然是可以。</p>\n<h3 id=\"苦力活\"><a href=\"#苦力活\" class=\"headerlink\" title=\"苦力活\"></a>苦力活</h3><p>技术上的问题解决了，现在从用户填写信息到最后生成能用的展示页面也没有问题了。初版下面的问题就是美化了。</p>\n<ul>\n<li>CSS修饰样式</li>\n<li>将模板HTML文件压缩（包括JS和CSS），因为反正用户不会修改内容，不需要考虑可读性</li>\n<li>一些保护性编程和边缘情况兜底</li>\n</ul>\n<p>最后测试结果如下：</p>\n<p><img src=\"https://s2.ax1x.com/2019/04/07/AhbD91.png\" alt=\"AhbD91.png\"></p>\n<p>生成效果如上。</p>\n<h3 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h3><p>初版开发已经完成了，只剩发布出来给别人用了，考虑到<a href=\"https://electronjs.org/docs/tutorial/application-distribution\">官网文档</a>讲得实在不清不楚，不如用一个好工具帮我们完成。</p>\n<p>这里使用<a href=\"https://github.com/electron-userland/electron-builder\">electron-builder</a>。跟着介绍里一步步完善<code>package.json</code>和项目结构。加上依赖后，执行<code>yarn dist</code>生成可分发的文件。</p>\n<p>嗯……果然失败了。原因很简单，网络错误，Electron镜像文件下载失败。还好淘宝有electron镜像。通过设置ELECTRON_MIRROR环境变量，可以大大加快速度。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export ELECTRON_MIRROR=https://npm.taobao.org/mirrors/electron/</span><br></pre></td></tr></table></figure>\n\n<p>然后，再次执行<code>yarn dist</code>，在从Github下载其他相关文件的时候，仍然会网络错误。于是我机智的从网页上下载下来，直接放在了目标目录下。再次执行任务，居然不能识别出来。好吧……</p>\n<p>故事的最后，打包还是完成了。不过由于生成文件的目录写成了相对目录，生成的文件得通过搜索才能找到，考虑后面生成在桌面。</p>\n<p><em>–END–</em></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://www.jianshu.com/p/28bca6529150\">在windows下用nvm 安装node</a></li>\n<li><a href=\"http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference.html\">百度地图JavaScript API v2.0类参考</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/24275216\">Electron 应用实战 (架构篇)</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/GPS_Exchange_Format\">GPS Exchange Format</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest\">XMLHttpRequest | MDN</a></li>\n<li><a href=\"https://skalman.github.io/UglifyJS-online/\">UglifyJS 3: Online JavaScript minifier</a></li>\n<li><a href=\"https://cssminifier.com/\">CSS Minifier</a></li>\n<li><a href=\"https://github.com/pfan123/electron-docs\">pfan123&#x2F;electron-docs electron-docs学习文档</a></li>\n</ul>\n",
            "tags": [
                "JavaScript",
                "Electron",
                "GUI",
                "gpx",
                "template",
                "Electron Builder"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2018/01/27/my-first-pwa-app/",
            "url": "http://shenlvmeng.github.com/blog/2018/01/27/my-first-pwa-app/",
            "title": "我的第一个PWA开发记录",
            "date_published": "2018-01-27T08:14:11.000Z",
            "content_html": "<blockquote>\n<p>注：本文主要记录了创建一个PWA应用的过程，方便日后再次开发类似应用时参考。<br>github链接：<a href=\"https://github.com/shenlvmeng/Distance\">shenlvmeng&#x2F;Distance: 一次PWA的尝试</a></p>\n</blockquote>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p>安装<a href=\"https://www.npmjs.com/package/http-server\">http-server</a>方便本地测试。</p>\n<p>本地开辟文件夹，加入<code>.editorconfig</code>和<code>.gitignore</code>（根据<a href=\"https://raw.github.com/github/gitignore/abad92dac5a4306f72242dae3bca6e277bce3615/Node.gitignore\">样例</a>适当修改）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># http://editorconfig.org</span><br><span class=\"line\"></span><br><span class=\"line\">root = true</span><br><span class=\"line\"></span><br><span class=\"line\">[*]</span><br><span class=\"line\">charset = utf-8</span><br><span class=\"line\">indent_style = space</span><br><span class=\"line\">indent_size = 2</span><br><span class=\"line\">end_of_line = lf</span><br><span class=\"line\">insert_final_newline = true</span><br><span class=\"line\">trim_trailing_whitespace = true</span><br></pre></td></tr></table></figure>\n\n<p>创建<code>index.html</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width,initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Away from home<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;./main.css&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>My first PWA Application<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>See console for more!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在目标文件夹路径下执行<code>http-server</code>，bingo！第一步完成</p>\n<h2 id=\"清单文件\"><a href=\"#清单文件\" class=\"headerlink\" title=\"清单文件\"></a>清单文件</h2><p>创建清单文件<code>manifest.json</code>，描述应用添加到主屏幕需要的信息。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Distance from Home&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;short_name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Distance&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;display&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;standalone&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;start_url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;theme_color&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;#8888ff&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;background_color&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;#aaaaff&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;icons&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;src&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;compass.png&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;sizes&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;144x144&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;image/png&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>并在<code>index.html</code>中引入：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;manifest&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;manifest.json&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加Service-Worker\"><a href=\"#添加Service-Worker\" class=\"headerlink\" title=\"添加Service Worker\"></a>添加Service Worker</h2><p><a href=\"https://shenlvmeng.github.io/blog/2017/09/04/pwa-and-hybrid-brief/\">Service Worker</a>这个东西可以实现页面的缓存和离线访问，让应用逼近app的体验。</p>\n<p>可以在HTML里插入<code>&lt;script&gt;</code>标签引入，这里单独定义一个app.js。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Registering ServiceWorker</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ( <span class=\"string\">&#x27;serviceWorker&#x27;</span> <span class=\"keyword\">in</span> navigator ) &#123;</span><br><span class=\"line\">  navigator.<span class=\"property\">serviceWorker</span>.<span class=\"title function_\">register</span>( <span class=\"string\">&#x27;sw.js&#x27;</span> ).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\">registration</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Registration was successful</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( <span class=\"string\">&#x27;ServiceWorker registration successful. Scope: &#x27;</span> + registration.<span class=\"property\">scope</span> )</span><br><span class=\"line\">  &#125;).<span class=\"title function_\">catch</span>(<span class=\"keyword\">function</span>(<span class=\"params\">err</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Registration failed with error</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( <span class=\"string\">&#x27;ServiceWorker registration failed&#x27;</span> + err);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>index.html</code>中引用。</p>\n<p>下面实现service worker。主要是三个时机：</p>\n<ul>\n<li>脚本<strong>安装</strong>时，写入缓存</li>\n<li>脚本<strong>获取数据</strong>时，先查找缓存</li>\n<li>缓存<strong>更新版本</strong>时，删除原先版本的缓存</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 脚本安装时</span></span><br><span class=\"line\">self.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;install&#x27;</span>, <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">  event.<span class=\"title function_\">waitUntil</span>(</span><br><span class=\"line\">    caches.<span class=\"title function_\">open</span>(cacheStorageKey)</span><br><span class=\"line\">      .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">cache</span> =&gt;</span> cache.<span class=\"title function_\">addAll</span>(cacheList))</span><br><span class=\"line\">      <span class=\"comment\">// 保证在页面更新过程中，新的Service Worker脚本能立即激活生效</span></span><br><span class=\"line\">      .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> self.<span class=\"title function_\">skipWaiting</span>())</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过脚本fetch数据</span></span><br><span class=\"line\">self.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;fetch&#x27;</span>, <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">  event.<span class=\"title function_\">respondWith</span>(</span><br><span class=\"line\">    <span class=\"comment\">// 先在cache中找</span></span><br><span class=\"line\">    caches.<span class=\"title function_\">match</span>(event.<span class=\"property\">request</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// cache中没有再使用fetch</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> res || <span class=\"title function_\">fetch</span>(event.<span class=\"property\">request</span>.<span class=\"property\">url</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 更新静态资源</span></span><br><span class=\"line\">self.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;activate&#x27;</span>, <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">  event.<span class=\"title function_\">waitUntil</span>(</span><br><span class=\"line\">    caches.<span class=\"title function_\">keys</span>().<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">cacheNames</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>(cacheNames.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">name</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (name !== cacheStorageKey) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> caches.<span class=\"title function_\">delete</span>(name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;));</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>其中，有下面一些名词：</p>\n<ul>\n<li><code>self</code>: Service Worker作用域, 也是全局变量</li>\n<li><code>caches</code>: 缓存接口</li>\n<li><code>waitUntil</code>，<code>ExtendableEvent.waitUntil()</code>方法——这会确保Service Worker 不会在<code>waitUntil()</code>里面的代码执行完毕之前安装完成。</li>\n<li><code>skipWait</code>，表示强制当前处在waiting状态的脚本进入activate状态</li>\n</ul>\n<p>在浏览器中打开<code>localhost:8080/</code>即可，注意PWA<strong>必须运行在HTTPS的环境下</strong>。</p>\n<h2 id=\"加入百度地图支持\"><a href=\"#加入百度地图支持\" class=\"headerlink\" title=\"加入百度地图支持\"></a>加入百度地图支持</h2><p>参考<a href=\"http://lbsyun.baidu.com/index.php?title=jspopular\">官方API接入支持</a>。</p>\n<p>添加文件<code>index.js</code>，写入如下内容：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> url4PC = <span class=\"string\">&#x27;https://api.map.baidu.com/api?v=2.0&amp;ak=你的秘钥&amp;callback=init&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> init = <span class=\"variable language_\">window</span>.<span class=\"property\">init</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> map = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 为了能成功调用到callback</span></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">init</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  map = <span class=\"keyword\">new</span> <span class=\"title class_\">BMap</span>.<span class=\"title class_\">Map</span>(<span class=\"string\">&#x27;map&#x27;</span>);</span><br><span class=\"line\">  map.<span class=\"title function_\">centerAndZoom</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">BMap</span>.<span class=\"title class_\">Point</span>(<span class=\"number\">121.491</span>, <span class=\"number\">31.233</span>), <span class=\"number\">11</span>);</span><br><span class=\"line\">  map.<span class=\"title function_\">enableScrollWheelZoom</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">window</span>.<span class=\"property\">init</span> = init;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">loadMap</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> script = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;script&#x27;</span>);</span><br><span class=\"line\">  script.<span class=\"property\">src</span> = url4PC;</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(script);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">onload</span> = loadMap;</span><br></pre></td></tr></table></figure>\n\n<p>当然需要添加一点CSS，这里从略。</p>\n<h2 id=\"Service-Worker支持跨域\"><a href=\"#Service-Worker支持跨域\" class=\"headerlink\" title=\"Service Worker支持跨域\"></a>Service Worker支持跨域</h2><p>接下来问题来了，打开网页测试，页面刷新时Service Worker会抛出跨域相关的错误。</p>\n<p><img src=\"https://s2.ax1x.com/2019/04/07/Ahb0hR.png\" alt=\"Ahb0hR.png\"></p>\n<p>再正常不过了，未经配置的情况下，fetch是不允许跨域的。注意<code>sw.js</code>中的一段：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">caches.<span class=\"title function_\">match</span>(event.<span class=\"property\">request</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// cache中没有再使用fetch</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res || <span class=\"title function_\">fetch</span>(event.<span class=\"property\">request</span>.<span class=\"property\">url</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>这里我们不仅有跨域请求，还使用着JSONP的方式。后续地图数据和地图图片的展示请求也比较复杂。再经过多次加入<code>respondWith()</code>响应块失败后，干脆跳过这部分跨域的处理。不过还是留下了一个函数，方便后面拓展。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isCORSRequest</span>(<span class=\"params\">url</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> url.<span class=\"title function_\">search</span>(host) === -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 并存该函数为日后拓展所用</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">handleFetchRequest</span>(<span class=\"params\">req</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> request = <span class=\"title function_\">isCORSRequest</span>(req.<span class=\"property\">url</span>) ?</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Request</span>(req.<span class=\"property\">url</span>, &#123; <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;cors&#x27;</span> &#125;)</span><br><span class=\"line\">    : req;</span><br><span class=\"line\">  <span class=\"title function_\">fetch</span>(req);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过脚本fetch数据</span></span><br><span class=\"line\">self.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;fetch&#x27;</span>, <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title function_\">isCORSRequest</span>(event.<span class=\"property\">request</span>.<span class=\"property\">url</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  event.<span class=\"title function_\">respondWith</span>(</span><br><span class=\"line\">    <span class=\"comment\">// 先在cache中找</span></span><br><span class=\"line\">    caches.<span class=\"title function_\">match</span>(event.<span class=\"property\">request</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// cache中没有再使用fetch</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> res || <span class=\"title function_\">handleFetchRequest</span>(event.<span class=\"property\">request</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"目标点管理\"><a href=\"#目标点管理\" class=\"headerlink\" title=\"目标点管理\"></a>目标点管理</h2><p>核心功能之一是，可以新增计算距离的目标点。在我的设计里，有两种用户友好的添加方式：</p>\n<ul>\n<li>找不到地点时，可以搜索出地点，通过搜索结果设置</li>\n<li>明确地图上位置时，直接通过鼠标操作设置</li>\n</ul>\n<p>前面的利用AutoComplete类，完成自动补全和搜索功能。值得注意的一个坑是，在初次设置好map对象后，每次的搜索结果都会以第一次初始化地点为中心搜索结果。解决方案是，每次<code>&lt;input&gt;</code>框聚焦时，重新构造一个AutoComplete类。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;search&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;searchbox&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;position&quot;</span> <span class=\"attr\">size</span>=<span class=\"string\">&quot;20&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;输入地点或在地图上双击点选&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;searchBtn&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;searchBtn&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">initSearchLocation</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 工厂方法，每次聚焦时新创建一个AutoComplete对象</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">setAutoComplete</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> lastVal = doc.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;position&#x27;</span>).<span class=\"property\">value</span>.<span class=\"title function_\">trim</span>();</span><br><span class=\"line\">      <span class=\"comment\">// 建立一个自动完成的对象</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> searchBox = <span class=\"keyword\">new</span> <span class=\"title class_\">BMap</span>.<span class=\"title class_\">Autocomplete</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">input</span>: <span class=\"string\">&quot;position&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">location</span>: map</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      doc.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;position&#x27;</span>).<span class=\"property\">value</span> = lastVal;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 鼠标点击下拉列表后的事件</span></span><br><span class=\"line\">      searchBox.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;onconfirm&quot;</span>, <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> value = event.<span class=\"property\">item</span>.<span class=\"property\">value</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> searchWord = <span class=\"string\">`<span class=\"subst\">$&#123;value.province&#125;</span><span class=\"subst\">$&#123;value.city&#125;</span><span class=\"subst\">$&#123;value.district&#125;</span><span class=\"subst\">$&#123;value.street&#125;</span><span class=\"subst\">$&#123;value.business&#125;</span>`</span>;</span><br><span class=\"line\">        <span class=\"title function_\">setPlace</span>(searchWord);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">setPlace</span>(<span class=\"params\">searchWord</span>)&#123;</span><br><span class=\"line\">      map.<span class=\"title function_\">clearOverlays</span>();</span><br><span class=\"line\">      <span class=\"comment\">// 搜索</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> cleverSearch = <span class=\"keyword\">new</span> <span class=\"title class_\">BMap</span>.<span class=\"title class_\">LocalSearch</span>(map, &#123;</span><br><span class=\"line\">        <span class=\"attr\">onSearchComplete</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">pauseUpdate</span>();</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!cleverSearch.<span class=\"title function_\">getResults</span>().<span class=\"title function_\">getPoi</span>(<span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;未找到指定地点，换个关键词试试？&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"comment\">// 获取第一个智能搜索的结果</span></span><br><span class=\"line\">          <span class=\"keyword\">const</span> res = cleverSearch.<span class=\"title function_\">getResults</span>().<span class=\"title function_\">getPoi</span>(<span class=\"number\">0</span>).<span class=\"property\">point</span>;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> marker = <span class=\"keyword\">new</span> <span class=\"title class_\">BMap</span>.<span class=\"title class_\">Marker</span>(res);</span><br><span class=\"line\">          map.<span class=\"title function_\">centerAndZoom</span>(res, <span class=\"number\">18</span>);</span><br><span class=\"line\">          map.<span class=\"title function_\">addOverlay</span>(marker);</span><br><span class=\"line\">          <span class=\"title function_\">addToBeacons</span>(marker);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      cleverSearch.<span class=\"title function_\">search</span>(searchWord);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 不使用自动补全，直接回车或点击图标</span></span><br><span class=\"line\">    doc.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;position&quot;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;focus&quot;</span>, <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">setAutoComplete</span>();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// 省略了其他的绑定事件</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>下一步是支持标记点（BeaconNodes）的管理，离线持久化采用<code>localStorage</code>，技术上倒没有什么难度。用户交互上，考虑用右键点击（for PC）和长按操作（PC Mobile）添加，点击标记删除。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 从页面新增目标点</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">addToBeacons</span>(<span class=\"params\">point</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> tag = win.<span class=\"title function_\">prompt</span>(<span class=\"string\">&quot;给Beacon点起个名字吧&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (tag === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  tag = tag.<span class=\"title function_\">trim</span>().<span class=\"title function_\">substr</span>(<span class=\"number\">0</span>, <span class=\"number\">20</span>) || <span class=\"string\">`未知地点#<span class=\"subst\">$&#123;seq&#125;</span>`</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 第一个点默认活跃</span></span><br><span class=\"line\">  beaconNodes.<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">id</span>: seq,</span><br><span class=\"line\">    point,</span><br><span class=\"line\">    tag,</span><br><span class=\"line\">    <span class=\"attr\">isActive</span>: !beaconNodes.<span class=\"property\">length</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"title function_\">addBeacon</span>(seq, point, tag, beaconNodes.<span class=\"property\">length</span> === <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"title function_\">paintDropdown</span>();</span><br><span class=\"line\">  <span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">setItem</span>(<span class=\"variable constant_\">STORAGE_KEY</span>, <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(beaconNodes));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">removeFromBeacon</span>(<span class=\"params\">id</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!beaconNodes.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  beaconNodes.<span class=\"title function_\">splice</span>(beaconNodes.<span class=\"title function_\">findIndex</span>(<span class=\"function\"><span class=\"params\">node</span> =&gt;</span> node.<span class=\"property\">id</span> == id), <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"title function_\">paintDropdown</span>();</span><br><span class=\"line\">  <span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">setItem</span>(<span class=\"variable constant_\">STORAGE_KEY</span>, <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(beaconNodes));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在地图上新增目标点，方便复用</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">addBeacon</span>(<span class=\"params\">id, point, tag, isActive</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> icon = <span class=\"keyword\">new</span> <span class=\"title class_\">BMap</span>.<span class=\"title class_\">Icon</span>(<span class=\"string\">`imgs/location-<span class=\"subst\">$&#123;<span class=\"number\">2</span>-isActive&#125;</span>.png`</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">BMap</span>.<span class=\"title class_\">Size</span>(<span class=\"number\">50</span>, <span class=\"number\">50</span>));</span><br><span class=\"line\">  <span class=\"keyword\">const</span> mark = <span class=\"keyword\">new</span> <span class=\"title class_\">BMap</span>.<span class=\"title class_\">Marker</span>(point, &#123; icon, <span class=\"attr\">enableMassClear</span>: <span class=\"literal\">false</span> &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> label = <span class=\"keyword\">new</span> <span class=\"title class_\">BMap</span>.<span class=\"title class_\">Label</span>(tag,&#123; <span class=\"attr\">offset</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">BMap</span>.<span class=\"title class_\">Size</span>(<span class=\"number\">32</span>, <span class=\"number\">2</span>) &#125;);</span><br><span class=\"line\">  label.<span class=\"title function_\">setStyle</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">border</span>: <span class=\"string\">&quot;#dedede&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">padding</span>: <span class=\"string\">&quot;3px 5px&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;font-size&quot;</span>: <span class=\"string\">&quot;14px&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;font-weight&quot;</span>: <span class=\"string\">&quot;bold&quot;</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  mark.<span class=\"title function_\">setLabel</span>(label); </span><br><span class=\"line\">  mark.<span class=\"title function_\">getLabel</span>().<span class=\"title function_\">setTitle</span>(tag);</span><br><span class=\"line\">  mark.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (win.<span class=\"title function_\">confirm</span>(<span class=\"string\">`确认要删除Beacon:<span class=\"subst\">$&#123;mark.getLabel().getTitle()&#125;</span>`</span>)) &#123;</span><br><span class=\"line\">      map.<span class=\"title function_\">removeOverlay</span>(mark);</span><br><span class=\"line\">      <span class=\"title function_\">removeFromBeacon</span>(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  map.<span class=\"title function_\">addOverlay</span>(mark);</span><br><span class=\"line\">  seq = id + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">initMap</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 根据storage填充地图</span></span><br><span class=\"line\">  <span class=\"comment\">// 注意这里必须使用Point类</span></span><br><span class=\"line\">  beaconNodes.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">node</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">addBeacon</span>(node.<span class=\"property\">id</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">BMap</span>.<span class=\"title class_\">Point</span>(node.<span class=\"property\">point</span>.<span class=\"property\">lng</span>, node.<span class=\"property\">point</span>.<span class=\"property\">lat</span>), node.<span class=\"property\">tag</span>, node.<span class=\"property\">isActive</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 避免和其他事件冲突，使用暂无占用的右键点击</span></span><br><span class=\"line\">  map.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;rightclick&quot;</span>, <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">addToBeacons</span>(event.<span class=\"property\">point</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"comment\">// 支持移动设备，长按</span></span><br><span class=\"line\">  map.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;longpress&quot;</span>, <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">addToBeacons</span>(event.<span class=\"property\">point</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在管理上，新增了下拉菜单管理当前所有节点，这里需要将离线的BeaconNodes映射成DOM结构，考虑到文件已略大，且这一部分比较繁琐，和业务关系不大，故单独抽出一个文件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dom.js</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 无状态，与业务弱相关</span></span><br><span class=\"line\"><span class=\"comment\"> * 只渲染下拉菜单</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">renderDropdown</span>(<span class=\"params\">obj, dom, isInit</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!obj) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  dom.<span class=\"property\">innerText</span> = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">  <span class=\"comment\">// render过程</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> fragment = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createDocumentFragment</span>();</span><br><span class=\"line\">  obj.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">node</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> div = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;DIV&#x27;</span>);</span><br><span class=\"line\">    div.<span class=\"property\">className</span> = <span class=\"string\">`node_wrapper<span class=\"subst\">$&#123;node.isActive ? <span class=\"string\">&quot; active&quot;</span> : <span class=\"string\">&quot;&quot;</span>&#125;</span>`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> innerHTML = <span class=\"string\">`&lt;span&gt;#<span class=\"subst\">$&#123;node.id&#125;</span>&lt;/span&gt;&lt;span class=&quot;node-tag&quot;&gt;<span class=\"subst\">$&#123;node.tag&#125;</span>&lt;/span&gt;`</span>;</span><br><span class=\"line\">    div.<span class=\"property\">innerHTML</span> = innerHTML;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> operateBtn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;DIV&#x27;</span>);</span><br><span class=\"line\">    operateBtn.<span class=\"property\">className</span> = <span class=\"string\">&quot;operateBtn&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.<span class=\"property\">isActive</span>) &#123;</span><br><span class=\"line\">      operateBtn.<span class=\"property\">className</span> += <span class=\"string\">&quot; active&quot;</span></span><br><span class=\"line\">      operateBtn.<span class=\"property\">innerText</span> = <span class=\"string\">&quot;Deactive!&quot;</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      operateBtn.<span class=\"property\">innerText</span> = <span class=\"string\">&quot;Active!&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    div.<span class=\"title function_\">appendChild</span>(operateBtn);</span><br><span class=\"line\">    <span class=\"comment\">// 方便统一事件绑定</span></span><br><span class=\"line\">    div.<span class=\"property\">dataset</span>.<span class=\"property\">nid</span> = node.<span class=\"property\">id</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> div;</span><br><span class=\"line\">  &#125;).<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">div</span> =&gt;</span> &#123;</span><br><span class=\"line\">    fragment.<span class=\"title function_\">appendChild</span>(div);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  dom.<span class=\"title function_\">appendChild</span>(fragment);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 多次调用只监听一次</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isInit) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 下拉事件</span></span><br><span class=\"line\">    dom.<span class=\"property\">parentNode</span>.<span class=\"property\">children</span>[<span class=\"number\">0</span>].<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (dom.<span class=\"property\">parentNode</span>.<span class=\"property\">className</span>.<span class=\"title function_\">search</span>(<span class=\"string\">&quot;hide&quot;</span>) !== -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        dom.<span class=\"property\">parentNode</span>.<span class=\"property\">className</span> = <span class=\"string\">&quot;dropdown dropdown_container&quot;</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        dom.<span class=\"property\">parentNode</span>.<span class=\"property\">className</span> += <span class=\"string\">&quot; hide&quot;</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>HTML和CSS部分就不再赘述了。</p>\n<p>在下拉菜单下，可以点击条目跳转到相应位置，以及点击按钮切换当前活动的BeaconNode。这部分实现如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">initDropdown</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">paintDropdown</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 事件监听</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> dropdown = doc.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;dropdown&quot;</span>);</span><br><span class=\"line\">  dropdown.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> nid = event.<span class=\"property\">target</span>.<span class=\"property\">parentNode</span>.<span class=\"property\">dataset</span>.<span class=\"property\">nid</span> || event.<span class=\"property\">target</span>.<span class=\"property\">dataset</span>.<span class=\"property\">nid</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> node = beaconNodes.<span class=\"title function_\">find</span>(<span class=\"function\"><span class=\"params\">node</span> =&gt;</span> node.<span class=\"property\">id</span> == nid);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (event.<span class=\"property\">target</span>.<span class=\"property\">tagName</span>.<span class=\"title function_\">toLowerCase</span>() === <span class=\"string\">&quot;div&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> prev = beaconNodes.<span class=\"title function_\">find</span>(<span class=\"function\"><span class=\"params\">node</span> =&gt;</span> node.<span class=\"property\">isActive</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (prev) &#123;</span><br><span class=\"line\">          prev.<span class=\"property\">isActive</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">          beaconMarkers[prev.<span class=\"property\">id</span>].<span class=\"title function_\">setIcon</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">BMap</span>.<span class=\"title class_\">Icon</span>(<span class=\"string\">&quot;imgs/location-2.png&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">BMap</span>.<span class=\"title class_\">Size</span>(<span class=\"number\">40</span>, <span class=\"number\">40</span>)));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        node.<span class=\"property\">isActive</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"title function_\">paintDropdown</span>();</span><br><span class=\"line\">        beaconMarkers[nid].<span class=\"title function_\">setIcon</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">BMap</span>.<span class=\"title class_\">Icon</span>(<span class=\"string\">&quot;imgs/location-1.png&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">BMap</span>.<span class=\"title class_\">Size</span>(<span class=\"number\">40</span>, <span class=\"number\">40</span>)));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      node &amp;&amp; map.<span class=\"title function_\">panTo</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">BMap</span>.<span class=\"title class_\">Point</span>(node.<span class=\"property\">point</span>.<span class=\"property\">lng</span>, node.<span class=\"property\">point</span>.<span class=\"property\">lat</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然了，标记点的增删改查还剩下改没有实现，目前来看，和“改”相关的业务是能拖动标记点，方便用户随时更改标记点位置。在<code>addBeacon()</code>函数中新增相关代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mark.<span class=\"title function_\">enableDragging</span>();</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">mark.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;dragend&#x27;</span>, <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">editToBeacons</span>(id, &#123; <span class=\"attr\">point</span>: event.<span class=\"property\">point</span> &#125;);</span><br><span class=\"line\">  <span class=\"title function_\">paintDistance</span>(lastPoint);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>而<code>editToBeacons()</code>函数设计如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">editToBeacons</span>(<span class=\"params\">id, newProps</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> index = beaconNodes.<span class=\"title function_\">findIndex</span>(<span class=\"function\"><span class=\"params\">node</span> =&gt;</span> node.<span class=\"property\">id</span> == id);</span><br><span class=\"line\">  <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(beaconNodes[index], newProps);</span><br><span class=\"line\">  <span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">setItem</span>(<span class=\"variable constant_\">STORAGE_KEY</span>, <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(beaconNodes));</span><br><span class=\"line\">  <span class=\"comment\">// 不是所有的属性更改都有重绘，交给调用者处理重绘</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"计算距离\"><a href=\"#计算距离\" class=\"headerlink\" title=\"计算距离\"></a>计算距离</h2><p>计算距离包括距离和方向两部分，既然能拿到两点的经纬度信息，这两个值肯定可以计算出来。计算距离上利用百度地图的API，计算角度上，通过<code>Math.atan2</code>换算得到。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">paintDistance</span>(<span class=\"params\">currentPoint</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> info;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> target = beaconNodes.<span class=\"title function_\">find</span>(<span class=\"function\"><span class=\"params\">node</span> =&gt;</span> node.<span class=\"property\">isActive</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!target || !currentPoint) &#123;</span><br><span class=\"line\">    info = <span class=\"string\">&quot;N/A , 未知方向&quot;</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> distance = map.<span class=\"title function_\">getDistance</span>(currentPoint, target.<span class=\"property\">point</span>) || <span class=\"string\">&quot;N/A&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (distance &gt; <span class=\"number\">10000</span>) &#123;</span><br><span class=\"line\">      distance = <span class=\"string\">`<span class=\"subst\">$&#123;(distance / <span class=\"number\">1000</span>).toFixed(<span class=\"number\">2</span>)&#125;</span>km`</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (distance &gt; <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">      distance = <span class=\"string\">`<span class=\"subst\">$&#123;distance.toFixed(<span class=\"number\">0</span>)&#125;</span>m`</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      distance = <span class=\"string\">`就在附近...`</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 工具函数位于utils.js</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> deg = <span class=\"title function_\">getDirection</span>(target.<span class=\"property\">point</span>, currentPoint);</span><br><span class=\"line\">    info = <span class=\"string\">`<span class=\"subst\">$&#123;distance&#125;</span> , <span class=\"subst\">$&#123;deg&#125;</span>点钟方向`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getDirection</span>(<span class=\"params\">p1, p2</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> pi = <span class=\"title class_\">Math</span>.<span class=\"property\">PI</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [x2, y2, x1, y1] = [p1.<span class=\"property\">lng</span>, p1.<span class=\"property\">lat</span>, p2.<span class=\"property\">lng</span>, p2.<span class=\"property\">lat</span>];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> rad = <span class=\"title class_\">Math</span>.<span class=\"title function_\">atan2</span>(y2 - y1, x2 - x1);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> absRad = <span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(rad);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> clockPointer;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (absRad &lt; pi / <span class=\"number\">12</span>) &#123;</span><br><span class=\"line\">    clockPointer = <span class=\"number\">3</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (absRad &lt; pi / <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">    clockPointer = rad &gt; <span class=\"number\">0</span> ? <span class=\"number\">2</span> : <span class=\"number\">4</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (absRad &lt; pi * <span class=\"number\">5</span> / <span class=\"number\">12</span>) &#123;</span><br><span class=\"line\">    clockPointer = rad &gt; <span class=\"number\">0</span> ? <span class=\"number\">1</span> : <span class=\"number\">5</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (absRad &lt; pi * <span class=\"number\">7</span> / <span class=\"number\">12</span>) &#123;</span><br><span class=\"line\">    clockPointer = rad &gt; <span class=\"number\">0</span> ? <span class=\"number\">12</span> : <span class=\"number\">6</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (absRad &lt; pi * <span class=\"number\">3</span> / <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">    clockPointer = rad &gt; <span class=\"number\">0</span> ? <span class=\"number\">11</span> : <span class=\"number\">7</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (absRad &lt; pi * <span class=\"number\">11</span> / <span class=\"number\">12</span>) &#123;</span><br><span class=\"line\">    clockPointer = rad &gt; <span class=\"number\">0</span> ? <span class=\"number\">10</span> : <span class=\"number\">8</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    clockPointer = <span class=\"number\">9</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> clockPointer;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/25459319\">PWA 入门: 写个非常简单的 PWA 页面</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/29570875\">轻松把你的项目升级到PWA</a></li>\n<li><a href=\"https://sii.im/playground/notes/\">Notes</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Manifest\">Web App Manifest</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers\">使用 Service Workers</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000008491458\">Service Workers 与离线缓存</a></li>\n<li><a href=\"http://lbsyun.baidu.com/jsdemo.htm\">地图API示例</a></li>\n<li><a href=\"http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference.html\">百度地图JSAPIv2.0类参考</a></li>\n</ul>\n",
            "tags": [
                "JavaScript",
                "PWA",
                "方法论"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2018/01/22/design-pattern-note/",
            "url": "http://shenlvmeng.github.com/blog/2018/01/22/design-pattern-note/",
            "title": "设计模式学习",
            "date_published": "2018-01-22T09:28:45.000Z",
            "content_html": "<blockquote>\n<p>全文参考<a href=\"https://book.douban.com/subject/4260618/\">《设计模式之禅》</a>，<a href=\"https://book.douban.com/subject/1400656/\">Head First Design Pattern</a>这本也不错。</p>\n</blockquote>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p>JavaScript学久了，在看设计原则时，顺带温习了下OOP中的一些传统概念。</p>\n<p><strong>类图</strong></p>\n<ul>\n<li><code>一&gt;</code>: 关联，类定义中的相互引用，通常使用类的属性表达。 比如客户类和订单类</li>\n<li><code>--&gt;</code>: 依赖，最弱的关系，对象间的临时关联，用函数参数、局部变量、返回值等表达</li>\n<li><code>一▷</code>: 继承</li>\n<li><code>--▷</code>: 实现</li>\n<li><code>一◇</code>: has-a关系，表示整体与局部，但不稳定。比如公司类和雇员类</li>\n<li><code>一◆</code>: contains-a关系，表示整体与局部，部分不能脱离整体而存在。</li>\n</ul>\n<p><strong>override和overload</strong></p>\n<table>\n<thead>\n<tr>\n<th>区别</th>\n<th>覆写</th>\n<th>重载</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>单词</td>\n<td>OverLoading</td>\n<td>Override</td>\n</tr>\n<tr>\n<td>概念</td>\n<td>方法名称相同，参数的类型或个数不同</td>\n<td>方法名称相同，参数的类型或个数相同，返回值类型相同</td>\n</tr>\n<tr>\n<td>范围</td>\n<td>发生在一个类之中</td>\n<td>发生在类的继承关系中</td>\n</tr>\n<tr>\n<td>权限</td>\n<td>一个类中所重载多个方法可以不同的权限</td>\n<td>被子类所覆写的方法不能拥有比父类更严格的访问控制权限</td>\n</tr>\n</tbody></table>\n<p><strong>接口和抽象类的不同</strong></p>\n<p>两者都为“面向契约编程”而存在。总体来说，接口是对能力的抽象，抽象类是对事物的抽象。从而有着下面的不同：</p>\n<ul>\n<li>接口被类实现，抽象类被子类继承。</li>\n<li>接口只做方法声明，抽象类中可以做方法声明，也可以做方法实现。</li>\n<li>接口里定义的变量只能是公共静态常量，抽象类中的变量可以是普通变量。</li>\n<li>抽象类里可以没有抽象方法，接口是设计的结果，抽象类是重构的结果。</li>\n<li>Java中接口可继承接口，并可多继承接口，但类只能单继承。</li>\n</ul>\n<p>它们还有以下特点：</p>\n<ul>\n<li>在实现时必须全部实现，否则仍是接口&#x2F;抽象类</li>\n<li>抽象类中可以没有抽象方法</li>\n</ul>\n<h2 id=\"设计6原则\"><a href=\"#设计6原则\" class=\"headerlink\" title=\"设计6原则\"></a>设计6原则</h2><p>SOLID原则：</p>\n<ul>\n<li>单一职责（接口细分到单一业务）</li>\n<li>里氏替换（实现都按接口来）</li>\n<li>依赖倒置（多使用抽象概念）</li>\n<li>接口隔离原则（接口尽量细分）</li>\n<li>迪米特法则（低耦合）</li>\n<li>开闭原则（高内聚，低耦合）</li>\n</ul>\n<p>总结来说，就是<strong>好好设计、合理拆分接口，一旦确定，避免更改；减少接口耦合；面向接口编程；使用中间层应对需求变更</strong>。</p>\n<h2 id=\"常见设计模式\"><a href=\"#常见设计模式\" class=\"headerlink\" title=\"常见设计模式\"></a>常见设计模式</h2><h3 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h3><p>单例模式是最简单的设计模式。即一个类只有一个实例，或一个构造函数只能初始化一次（JS版本），且<strong>自行实例化</strong>，并像整个系统提供整个实例。常用在下面这些场景下，解决特定的问题：</p>\n<ul>\n<li>整个项目需要一个<strong>共享</strong>访问点或共享数据</li>\n<li>包含了大量静态常量（通常是配置数据）和静态方法的<strong>工具类</strong></li>\n<li>创建一个对象需要消耗的资源过多</li>\n</ul>\n<p>实现上，分懒汉型和饿汉型。它们的主要区别在初始化单一实例的时机在类创建时还是访问时。懒汉型需要注意<strong>线程安全</strong>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 饿汉型</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Singleton</span> <span class=\"variable\">singleton</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 限制外部访问</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 暴露的public方法</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> singleton;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 其他方法</span></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 懒汉型</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">Singleton</span> <span class=\"variable\">singleton</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 限制外部访问</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 暴露的public方法</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> sychronized Singleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (singleton == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      singleton = <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> singleton;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>JavaScript中就灵活多了。最常用的字面量变量就是最简单的单例，强行使用构造函数，也可以借助闭包的特点实现。另外，JavaScript是单线程，不需要考虑线程安全的问题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 字面量变量</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> singleton = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 一些属性</span></span><br><span class=\"line\">  <span class=\"attr\">foo</span>: <span class=\"string\">&#x27;bar&#x27;</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 一些方法</span></span><br><span class=\"line\">  <span class=\"title function_\">baz</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Hello world!&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 闭包</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Singleton</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> singleton = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">foo</span> = <span class=\"string\">&#x27;bar&#x27;</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">baz</span> = <span class=\"function\">() =&gt;</span> &#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Hello world!&#x27;</span>); &#125;;</span><br><span class=\"line\">  <span class=\"title class_\">Singleton</span> = <span class=\"function\">() =&gt;</span> singleton;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h4><p>当放开单例限制，编程多例模式时，可以通过加入计数器来限制。但不常用，下面给出JavaScript版本例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Singleton</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> singleton = <span class=\"variable language_\">this</span> = [];</span><br><span class=\"line\">  <span class=\"comment\">// 比如限制为3</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> limit = <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 一些初始化工作</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; limit; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    [].<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title class_\">Singleton</span> = <span class=\"function\">() =&gt;</span> singleton;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h3><p>工厂模式意思是，将创建对象的过程封装起来，在OOP语言中体现在定义一个创建一类对象的接口，让实例化过程在子类中完成。浅显的来讲，就是让工厂类将具有共性、创建过程复杂的一类对象的创建过程封装起来，便于业务类使用，同时也便于日后拓展。业务类只需要交给工厂类需要的对象类名（Java）或别的标志就可以得到所需对象。</p>\n<p>使用场景上，它是new模式的替代品，在任何需要对象的场景下都可以使用，但是只有下面这些情况下是比较合适的：</p>\n<ul>\n<li>需要灵活解耦的框架</li>\n<li>产品类创建过程复杂、有差异性且有共性。比如连接邮箱客户端的三种协议POP3、IMAP、HTTP的构造过程抽象成一个<code>IConnectMail</code>接口，再设计各自的工厂类。在日后有新的连接邮箱客户端协议时，只需新增一个工厂类即可。</li>\n</ul>\n<p>Java中工厂类可以使用反射等方法创建新对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 产品类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">abstractProduct</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 共有方法</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\">// 抽象方法</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">abstractMethod</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">product1</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">abstractProduct</span>() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">abstractMethod</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 差异化方法</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">product2</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">abstractProduct</span>() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">abstractMethod</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 差异化方法</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Factory</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 入参根据场景调整</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> &lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">abstractProduct</span>&gt; T <span class=\"title function_\">createProduct</span><span class=\"params\">(Class&lt;T&gt; c)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Factory1</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Factory</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> &lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">Product</span>&gt; T <span class=\"title function_\">createProduct</span><span class=\"params\">(Class&lt;T&gt; c)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Product</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      p = (Product)Class.forName(c.getName()).newInstance();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>JavaScript中，工厂模式的实现更加轻量级，因为构造对象的方式更加简单，使用函数将多个产品类间的共性抽出来就行了。样例略。</p>\n<h3 id=\"抽象工厂模式\"><a href=\"#抽象工厂模式\" class=\"headerlink\" title=\"抽象工厂模式\"></a>抽象工厂模式</h3><p>抽象模式在工厂模式的基础上又抽象了一层，产品类接口下是多个<strong>产品族</strong>抽象类，产品族下才是明确的产品类。相对应的，工厂接口下的多个工厂方法根据最细节的产品类生产对象。它的优势在：</p>\n<ul>\n<li>可以不公开地控制产品族间的约束</li>\n<li>更好地组织多维度（更多是2维）上多个产品间的生产</li>\n</ul>\n<p>缺点也很明显，产品族的修改将会直接影响工厂接口和产品抽象类，这是开闭原则的大忌。因此，在<strong>产品维度固定，且有必要从多维度上划分产品</strong>时，才会使用抽象工厂模式。比如Windows、Linux、Mac OS上的文本编辑器与图像处理程序就是两个维度的多个产品。</p>\n<p>样例略。</p>\n<h3 id=\"模板方法模式\"><a href=\"#模板方法模式\" class=\"headerlink\" title=\"模板方法模式\"></a>模板方法模式</h3><p>模板方法模式比较好理解，就是将子类中共有的<strong>算法框架</strong>抽象到抽象类中实现，注意是框架，而不是具体的步骤。子类可以根据自己的需要，在不改变框架的基础上，重定义算法的某些步骤，得到不同的结果。下面举个例子就能更方便地看明白了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> student = &#123;</span><br><span class=\"line\">  <span class=\"title function_\">study</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">gotoPrimarySchool</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">gotoMiddleSchool</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">gotoUniversity</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> stu1 = <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"title class_\">Student</span>), &#123;</span><br><span class=\"line\">  <span class=\"title function_\">gotoPrimarySchool</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;子弟学校 &quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">gotoMiddleSchool</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;人大附中 &quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">gotoUniversity</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;清华大学 &quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> stu2 = <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"title class_\">Student</span>), &#123;</span><br><span class=\"line\">  <span class=\"title function_\">gotoPrimarySchool</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;子弟学校 &quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">gotoMiddleSchool</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;华师一附中 &quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">gotoUniversity</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;中科大 &quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">stu1.<span class=\"title function_\">study</span>(); <span class=\"comment\">//子弟学校 人大附中 清华大学 </span></span><br><span class=\"line\">stu2.<span class=\"title function_\">study</span>(); <span class=\"comment\">//子弟学校 华师一附中 中科大 </span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到，同样是调用学习方法<code>study</code>，<code>stu1</code>和<code>stu2</code>可以再不影响公用算法流程下，定义自己的算法步骤。使用Java实现是一样的思路：</p>\n<ul>\n<li>定义抽象类，声明可以差异化的基本方法，实现模板方法，在模板方法中调用可以差异化的基本方法</li>\n<li>子类根据需要，实现自己的基本方法</li>\n</ul>\n<p>模板方法模式核心就在于<strong>封装不变部分，开放可变部分</strong>，共有的算法步骤也较容易维护。因此，使用在下面的场景里：</p>\n<ul>\n<li>子类共有相同算法流程</li>\n<li>将核心算法设计为模板方法，细节功能由子类补充</li>\n</ul>\n<h3 id=\"建造者模式\"><a href=\"#建造者模式\" class=\"headerlink\" title=\"建造者模式\"></a>建造者模式</h3><p>建造者模式和工厂模式类似，意思是，讲一个复杂对象的<strong>构建</strong>和<strong>表示</strong>分离，使同样的构建过程可以有不同的表示。其中的<strong>构建</strong>强调的是不同基本方法的调用顺序安排，而不是基本方法的实现（这也是它和工厂方法的最大区别）；<strong>表示</strong>是指产品子类对于基本方法的差异性实现。</p>\n<p>对比上面模板方法模式来看，就是<code>study</code>的顺序对于不同人不一样，这个顺序有另外的建造类描述并实现。可以看到，建造者模式主要的使用场景是：</p>\n<ul>\n<li>相同的执行方法，不同的执行顺序，产生不同的结果</li>\n<li>产品类中，不同的构建顺序会有不同的结果</li>\n<li>用户希望执行次序可控</li>\n</ul>\n<p>在实现时，建造类通过传入新状态或其他方式影响产品类的模板方式执行次序。在建造类和产品类之上，使用导演类可以起到封装的作用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 产品类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Product</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 差异化业务</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 抽象建造类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Builder</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 设置构建的次序，以获得不同的结果</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setSequence</span><span class=\"params\">()</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 建造</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Product <span class=\"title function_\">build</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 具体建造类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Builder1</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Builder</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">Product</span> <span class=\"variable\">product</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Product</span>();</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setSequence</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 差异化逻辑</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> Product <span class=\"title function_\">buildProduct</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> product;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 导演类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Director</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">Builder</span> <span class=\"variable\">builder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Builder1</span>();</span><br><span class=\"line\">  <span class=\"keyword\">public</span> Product <span class=\"title function_\">getProductA</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    builder.setSequence();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> builder.build();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h3><p>代理模式即为其他对象提供一个代理来控制对这个对象的访问，浅显易懂。利用代理模式还可以拦截原始请求，做额外的事情。应用很广泛。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Object</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 作为示例的一个方法</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">request</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RealObject</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Object</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">request</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 业务逻辑</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Object</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 代理的对象</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">Object</span> <span class=\"variable\">object</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">Proxy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.subject = <span class=\"keyword\">new</span> <span class=\"title class_\">Proxy</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 传递代理者</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">Proxy</span><span class=\"params\">(Object o)</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">request</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.before();</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.object.request();</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.after();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 预处理</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">before</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 善后处理</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">after</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>除了普通代理，还有强制代理即只能通过被代理对象对象访问到代理。另外，AOP（Aspect Oriented Progarmming）模式也是建立在代理模式的基础上的。ES6中的proxy和ES7中的装饰器就是AOP概念下的产物。</p>\n<h3 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h3><p>原型模式即不通过<code>new</code>而是通过对象复制生产同类对象。非常好理解。在Java中，一个实现了<code>cloneable</code>接口的对象即使用了原型模式。而JavaScript更是<a href=\"https://shenlvmeng.github.io/blog/2017/12/13/you-dont-know-js-part1/#%E5%8E%9F%E5%9E%8B%E7%BB%A7%E6%89%BF\">天生使用原型模式</a>实现对象的继承和拓展。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"keyword\">class</span> <span class=\"title class_\">PrototypeClass</span> implements <span class=\"title class_\">Cloneable</span> &#123;</span><br><span class=\"line\">  @<span class=\"title class_\">Override</span></span><br><span class=\"line\">  public <span class=\"title class_\">PrototypeClass</span> <span class=\"title function_\">clone</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">PrototypeClass</span> p = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      p = (<span class=\"title class_\">PrototypeClass</span>)<span class=\"variable language_\">super</span>.<span class=\"title function_\">clone</span>();</span><br><span class=\"line\">      <span class=\"comment\">// 其他操作</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(<span class=\"title class_\">CloneNotSupportedException</span> e) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>它的优势在于更加轻量级，避免了构造函数的约束。问题在于，第一会跳过构造函数（这个JavaScript没有），第二是深浅拷贝的问题，第三在Java中，clone带有final成员的类会抛出异常。</p>\n<h3 id=\"中介者模式\"><a href=\"#中介者模式\" class=\"headerlink\" title=\"中介者模式\"></a>中介者模式</h3><p>中介者模式主要用在多个对象那个间有比较复杂的交互场景下，用一个中介对象封装对象间的一系列交互，中介往往与各对象都有交互，从而使其耦合松散，符合迪米特法则。从类图上看，它把原先的蛛网状结构简化为了星型结构。</p>\n<p>它的优点是减少了类间依赖，缺点是有些时候中介者会膨胀的很大。使用场景上，在有协调概念出现的场景都有它的发挥空间：</p>\n<ul>\n<li>机场调度中心</li>\n<li>MVC框架中的Controller</li>\n<li>媒体网关，中介服务</li>\n</ul>\n<p>因为应用场景广泛，这里不举样例。</p>\n<h3 id=\"命令模式\"><a href=\"#命令模式\" class=\"headerlink\" title=\"命令模式\"></a>命令模式</h3><p>命令模式即将一个用对象组织每一个请求，从而允许使用请求完成一系列操作，同时还可以对请求排队或记录日志或<strong>撤销以及恢复</strong>。模式主要包括三个角色：</p>\n<ul>\n<li><strong>接受者</strong>，完成请求内操作的角色</li>\n<li><strong>命令</strong>，封装好的系列操作</li>\n<li><strong>调用者</strong>，接受、执行命令的角色</li>\n</ul>\n<p>这种设计模式在存在上面三种角色的场景很适用，易于封装常用的命令，且很容易拓展，当命令间共同点较多时，还可以结合模板方法模式进行改进。</p>\n<p>例子如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Receiver</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 定义所有接受者必须完成的业务</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">work</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Receiver1</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Receiver</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">work</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 差异化业务</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">otherWork1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Receiver2</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Receiver</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">work</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 差异化业务</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">otherWork2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Command</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">exec</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Command1</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Command</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 对特定接受者命令</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> Receiver receiver;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">Command1</span><span class=\"params\">(Receiver _receiver)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.receiver = _receiver;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">exec</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.receiver.work();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Command2</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Command</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 对特定接受者命令</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> Receiver receiver;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">Command2</span><span class=\"params\">(Receiver _receiver)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.receiver = _receiver;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">exec</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.receiver.work();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用者</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Invoker</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Command command;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setCommand</span><span class=\"params\">(Command _command)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.command = _command;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">react</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.command.exec();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"责任链模式\"><a href=\"#责任链模式\" class=\"headerlink\" title=\"责任链模式\"></a>责任链模式</h3><p>责任链模式重点在“链”，将有机会处理请求的所有对象组成链，沿着这条链传递请求直到有对象处理它为止。它和Express和Redux中的<strong>中间件</strong>的概念有相似之处，区别在于责任链上一般只会有一个或部分对象处理请求。它替换了场景代码中的大堆<code>if else</code>与<code>switch</code>语句。</p>\n<p>一个狭义的抽象处理者像下面这样。使用模板方法模式，将抽象的业务逻辑外的处理流程实现在抽象类，细节的业务逻辑放在子类里完成。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Handler</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 下一个处理者</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> Handler next;</span><br><span class=\"line\">  <span class=\"comment\">// 处理逻辑</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Response <span class=\"title function_\">handle</span><span class=\"params\">(Request req)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Response</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.getLevel().equals(req.getLevel())) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 只处理属于自己的level</span></span><br><span class=\"line\">      res = <span class=\"built_in\">this</span>.exec(req);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果有下一个处理者，交给它</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.next != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        res = <span class=\"built_in\">this</span>.next.handle(req);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 自行处理</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 设置下一个处理者</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setNext</span><span class=\"params\">(Handler _handler)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.next = _handler;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 处理者有自己的处理级别</span></span><br><span class=\"line\">  <span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> Level <span class=\"title function_\">getLevel</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 处理者有自己的处理逻辑</span></span><br><span class=\"line\">  <span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> Response <span class=\"title function_\">exec</span><span class=\"params\">(Request req)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子类示例</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> classHandler1 <span class=\"keyword\">extends</span> <span class=\"title class_\">Handler</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 自己的处理逻辑</span></span><br><span class=\"line\">  <span class=\"keyword\">protected</span> Response <span class=\"title function_\">exec</span><span class=\"params\">(Request req)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 自己的处理级别</span></span><br><span class=\"line\">  <span class=\"keyword\">protected</span> Level <span class=\"title function_\">getHandlerLevel</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Level</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 定义一个请求和处理等级</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Request</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取请求等级</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> Level <span class=\"title function_\">getRequestLevel</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Response</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 定义返回的数据</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>它的优点在解耦了请求与处理者，使系统更加灵活。问题在责任链比较长时，遍历整个责任链会带来性能问题。Express中类似的中间件则不会，因为处理后可以决定是否执行<code>next()</code>，跳到下一个中间件。</p>\n<p>上面Java的实现通过<code>next</code>属性连接所有的处理者（类似链表），在JavaScript的工程实现上，一般在上层又有一层封装，用数组保存所有处理者，再建立之间的连接。这种动态的连接支持动态增删处理者，甚至改变他们的处理顺序。</p>\n<h3 id=\"装饰模式\"><a href=\"#装饰模式\" class=\"headerlink\" title=\"装饰模式\"></a>装饰模式</h3><p>装饰模式也是一种比较常见的模式，它可以动态地为一个对象增加一些额外的功能，使用装饰器类返回对象比定义子类继承要来得更加灵活。在设计上，有下面几个角色：</p>\n<ul>\n<li>抽象构件，即被修饰的对象抽象</li>\n<li>具体构件，被修饰的客体</li>\n<li>装饰器，一般是一个抽象类，将具体装饰器的共性抽出来，<strong>其必有一个private属性指向原始的抽象构件</strong>。</li>\n<li>具体装饰器，装饰具体构件的原有方法，一般来说需要有所有与具体构件public方法同名的方法，<strong>且在方法内会使用到而非单纯替换原同名方法</strong>（类似滚雪球的过程）。</li>\n</ul>\n<p>它的使用类似下面：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 场景类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Scene</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Component</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Component</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 装饰</span></span><br><span class=\"line\">    c = <span class=\"keyword\">new</span> <span class=\"title class_\">Decorator1</span>(c);</span><br><span class=\"line\">    <span class=\"comment\">// 再次装饰</span></span><br><span class=\"line\">    c = <span class=\"keyword\">new</span> <span class=\"title class_\">Decorator2</span>(c);</span><br><span class=\"line\">    <span class=\"comment\">// 执行</span></span><br><span class=\"line\">    c.exec();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>JavaScript中的<code>Object.create()</code>和<code>Object.assign()</code>和装饰模式有几分相似。</p>\n<p>它的优势在于装饰类间不相互耦合，且装饰次序可以灵活修改，可以很好地重构、替换继承关系。劣势在于包装层次过多时，不利于调试时发现错误。装饰模式一般用于：</p>\n<ul>\n<li>动态增强一个类、对象的功能</li>\n<li>批量为一批对象或类改装或增加功能</li>\n</ul>\n<p>总之就是使用继承总感觉小题大做的场合下（OOP语言中）。JS下扩展功能要容易很多。</p>\n<h3 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h3><p>策略模式意为定义一组算法，将每个算法单独封装为可以相互替换的模块。在使用时，有三个主要角色：</p>\n<ul>\n<li>策略模块，被封装好的算法策略，屏蔽了高层逻辑对策略的直接访问（<strong>高内聚</strong>）</li>\n<li>抽象策略，抽出策略共性的接口，如下面的</li>\n<li>具体策略，具体的算法策略，包含具体的算法</li>\n</ul>\n<p>在算法间可以自由切换、最好屏蔽算法细节时常用，比如Web编程中常见的<strong>表格验证</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> strategy = &#123;</span><br><span class=\"line\">  <span class=\"attr\">notEmpty</span>: <span class=\"function\"><span class=\"params\">val</span> =&gt;</span> val.<span class=\"property\">length</span> &gt; <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"function\"><span class=\"params\">val</span> =&gt;</span> val.<span class=\"property\">length</span> &gt; <span class=\"number\">1</span> &amp;&amp; val.<span class=\"property\">length</span> &lt; <span class=\"number\">10</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"function\"><span class=\"params\">val</span> =&gt;</span> +val &gt; <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"attr\">password</span>: <span class=\"function\"><span class=\"params\">val</span> =&gt;</span> val.<span class=\"title function_\">match</span>(<span class=\"regexp\">/\\d+&#123;6,&#125;/g</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> validator = &#123;</span><br><span class=\"line\">  <span class=\"attr\">rules</span>: strategy,</span><br><span class=\"line\">  <span class=\"attr\">verify</span>: <span class=\"function\">(<span class=\"params\">rule, val</span>) =&gt;</span> <span class=\"variable language_\">this</span>.<span class=\"property\">rules</span>[rule](val)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">formValidate</span>(<span class=\"params\">formData</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; name, age, password, introduction &#125; = formData;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> validator.<span class=\"title function_\">verify</span>(<span class=\"string\">&#x27;name&#x27;</span>, name) &amp;&amp;</span><br><span class=\"line\">      validator.<span class=\"title function_\">verify</span>(<span class=\"string\">&#x27;age&#x27;</span>, age) &amp;&amp;</span><br><span class=\"line\">      validator.<span class=\"title function_\">verify</span>(<span class=\"string\">&#x27;password&#x27;</span>, password) &amp;&amp;</span><br><span class=\"line\">      validator.<span class=\"title function_\">verify</span>(<span class=\"string\">&#x27;notEmpty&#x27;</span>, introduction);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>策略模式的优势在扩展性良好，同时避免了<code>if else</code>以及<code>switch</code>语句。它的问题也很明显，策略类增多时，会不好维护，同时所有策略类都需要对外暴露。当策略类数目膨胀时需要考虑到这些问题。同时，现在在哪些时机如何组合策略并没有严格定义，实际实现时，会参考建造者模式里一样，定义一个<strong>导演类</strong>，把常用的组合方式定义出来。减少策略类的暴露。</p>\n<h3 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h3><p>适配器模式即，把一个类的接口变成客户端期待的另一个接口，从而使原先不匹配的两个类能够一起工作。简单点说，就是加了一个中间层做翻译工作。这种模式下有三种角色：</p>\n<ul>\n<li>目标角色，即期望接口</li>\n<li>源角色，即原始接口</li>\n<li>适配器角色，即转换类</li>\n</ul>\n<p>在实现上，通常使用一个同时继承两个类的类作为中转。因为对象很轻量级，JS中就更容易实现了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Target</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">request</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Target1</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Target</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">request</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 目标逻辑</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Adaptee</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 原有逻辑</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">foo</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Adapter</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Adaptee</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Target</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">request</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>.foo();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>它的优点在可以将两个不相关的类在一起运行，提高了类的复用程度，它通常用来救火，完成拓展。由于实际工程中，业务变更较常出现，适配器模式也很常用。</p>\n<h4 id=\"拓展-1\"><a href=\"#拓展-1\" class=\"headerlink\" title=\"拓展\"></a>拓展</h4><p>如需要多适配一的场景，此时无法多继承（Java），在适配类中引用多个类即可。</p>\n<h3 id=\"迭代器模式\"><a href=\"#迭代器模式\" class=\"headerlink\" title=\"迭代器模式\"></a>迭代器模式</h3><p>迭代器模式，顾名思义是提供一种方法按顺序访问容器中的每个元素，而<strong>无需暴露容器的细节</strong>。在实现时，通常要自己实现一个迭代器。Java中通过拓展<code>java.util.Iterator</code>实现，JavaScript中，则通过封装数组实现。实现时，要考虑下面几个方法：</p>\n<ul>\n<li>判断是否到达尾部</li>\n<li>返回下一个元素</li>\n<li>删除当前元素</li>\n</ul>\n<p>像下面这样</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 迭代器</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Iterator</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> Object <span class=\"title function_\">next</span><span class=\"params\">()</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasNext</span><span class=\"params\">()</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">remove</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 容器</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(Object o)</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">remove</span><span class=\"params\">(Object o)</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> Iterator <span class=\"title function_\">iterator</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在所有高级语言基本都有这个接口或基础实现。这个模式已经很少用到。</p>\n<h3 id=\"组合模式\"><a href=\"#组合模式\" class=\"headerlink\" title=\"组合模式\"></a>组合模式</h3><p>组合模式用在表示<strong>树状结构的数据</strong>中，使用户对单个对象和组合对象使用具有一致性。组合模式下有三种角色：</p>\n<ul>\n<li>Component，节点抽象角色，参与组合对象的共有方法和属性</li>\n<li>Leaf，叶子对象，遍历的最小单位</li>\n<li>Composite，树枝节点</li>\n</ul>\n<p>用JavaScript表示，就像下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> node = &#123;</span><br><span class=\"line\">  <span class=\"title function_\">commonMethod</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> branchNode = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(node);</span><br><span class=\"line\"><span class=\"keyword\">const</span> leafNode = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(node);</span><br><span class=\"line\"></span><br><span class=\"line\">branchNode = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(branch, &#123;</span><br><span class=\"line\">  <span class=\"attr\">children</span>: [],</span><br><span class=\"line\">  <span class=\"title function_\">add</span>(<span class=\"params\">node</span>) &#123;</span><br><span class=\"line\">    children.<span class=\"title function_\">push</span>(node);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">remove</span>(<span class=\"params\">index</span>) &#123;</span><br><span class=\"line\">    children.<span class=\"title function_\">splice</span>(index,<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">print</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    children.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">child</span> =&gt;</span> &#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(child); &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">leafNode = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(leafNode, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...重写node的同名方法</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>组合模式在表示整合局部的关系时很有用，但是由于树枝节点和叶子节点的使用方式不同，在使用两种节点时，需要直接调用接口的实现类，这一点违背了依赖导致原则（面向接口编程）。使用上分为透明模式和安全模式，后者就像上面一样，在实现类上区分开树枝和叶子节点，透明模式下，所有的方法均抽象到抽象类中实现，而在叶子节点调用不合法方法时抛出异常。</p>\n<p>综上来看，组合模式即使用用数据结构描述一颗多叉树。</p>\n<h3 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h3><p>观察者模式，也叫发布订阅模式，可以说是前端最熟悉也是最常见的一种设计模式了。小到页面事件监听，大到Vue的设计原理都能看到观察者模式的影子。它的内涵在将信息流从原来的<strong>pull变成push</strong>。从而不需要使用<code>while</code>，<code>setInterval</code>这种很消耗资源的方式。代价是，需要硬编码到被监听者中，在状态改变时，push信息到监听者那里。通常实现时，这个过程可以抽象到很底层完成，如Vue使用<code>Object.defineProperty</code>，并不影响整体实现。另外，为了实现多对多的监听，往往需要在被监听者和监听者之间增加spy（或者叫probe）这样的角色进行中转和广播通知。</p>\n<p>这时候可以定义<code>Observable</code>接口，当然了，它需要可以增删监听者和在发生事件后提醒监听者。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Observable</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(Observer o)</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">delete</span><span class=\"params\">(Observer o)</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">notify</span><span class=\"params\">(String text)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">IFoo</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">work</span><span class=\"params\">()</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sleep</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Observer</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">update</span><span class=\"params\">(String text)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Victim</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Observable</span>, IFoo &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> ArrayList&lt;Observer&gt; oList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Observer&gt;();</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(Observer o)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.oList.add(o);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">delete</span><span class=\"params\">(Observer o)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.oList.remove(o);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">notify</span><span class=\"params\">(String text)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Observer o: oList) &#123;</span><br><span class=\"line\">      o.update(text);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">work</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.notify(<span class=\"string\">&quot;Working...&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sleep</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.notify(<span class=\"string\">&quot;Sleeping...&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一个简单的JavaScript实现如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">EventUtil</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 全局事件管理</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> events = &#123;&#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 注册事件</span></span><br><span class=\"line\">    on = <span class=\"keyword\">function</span> (<span class=\"params\">type, handler</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (events[type]) &#123;</span><br><span class=\"line\">        events[type].<span class=\"title function_\">push</span>(handler);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        events[type] = [handler];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 触发事件</span></span><br><span class=\"line\">    emit = <span class=\"keyword\">function</span> (<span class=\"params\">type</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!events[type]) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = events[type].<span class=\"property\">length</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        events[type][i];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>观察者模式的优势在于在两个对象有<strong>频繁信息交互或希望监听特定时机</strong>时很有用，当信息很多时，可以考虑增加中间层，设计消息队列处理。Java本身也提供<code>java.util.Observer</code>和<code>java.util.Observable</code>用来实现这种模式。</p>\n<p>建立在观察者模式的基础上，有响应式编程这样新的编程范式出现，<a href=\"http://reactivex.io/\">ReactiveX</a>就是在这种范式基础上推出的多语言框架。JavaScript版本的叫做<a href=\"http://reactivex.io/rxjs/manual/overview.html\">RxJS</a>，相信看完这个简介对你会非常有帮助。</p>\n<h3 id=\"门面模式\"><a href=\"#门面模式\" class=\"headerlink\" title=\"门面模式\"></a>门面模式</h3><p>门面模式又叫外观模式，它要求所有子系统与外部通信时必须使用统一的对象进行，提供高层的接口，尽量掩盖不必要的业务细节，使得子系统更易用。因为实现起来重点在于统一通信数据格式和封装业务细节。这种模式也非常常用。比如在通常的前后端协调时，后端回传前端请求的数据通常都是统一的格式，避免错误同时减少前端工作量。比如下面这样。同样，有时后端也会要求前端在请求时使用统一的数据格式（不常见）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> successRet = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 错误码</span></span><br><span class=\"line\">  <span class=\"attr\">code</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 返回数据</span></span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">userInfo</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">id</span>: <span class=\"number\">0000001</span>,</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> errorRet = &#123;</span><br><span class=\"line\">  <span class=\"attr\">code</span>: <span class=\"number\">0002</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 错误原因</span></span><br><span class=\"line\">  <span class=\"attr\">message</span>: <span class=\"string\">&quot;请求过于频繁！&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>门面模式可以极大地提升封装性，增加系统的高内聚，同时也减少了系统内外的耦合，提高了灵活度和安全性。劣势在于对扩展不利，所有的改动几乎都要对应到门面（Facade）类的硬编码。因此门面模式的使用场景是：</p>\n<ul>\n<li>为一个复杂的系统或模块提供对外接口</li>\n<li>子系统间相对独立</li>\n</ul>\n<p>通常情况下，门面类只负责聚合，不参与具体的子系统逻辑。另外，在系统庞大时，很可能有不止一个门面入口。后端接口微服务化的趋势下，在系统内，拆分原来庞大的接口，同时面向前端不同设备，设计不同的服务汇合接入点正是门面模式的体现。</p>\n<h3 id=\"备忘录模式\"><a href=\"#备忘录模式\" class=\"headerlink\" title=\"备忘录模式\"></a>备忘录模式</h3><p>备忘录模式即，在不破坏封装性的前提下，捕获一个对象的内部状态，在对象外保存，并在合适的时候可以将对象恢复到保存的状态。这个概念很简单，涉及到三个角色：</p>\n<ul>\n<li>发起人，需要记录状态的对象</li>\n<li>备忘录， 用来储存状态</li>\n<li>备忘录管理者，对备忘录进行管理，保存和恢复</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Memorial</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">state</span>: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">memorize</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Memento</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">state</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">restore</span>(<span class=\"params\">memento</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = memento.<span class=\"property\">state</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Memento</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">state</span>: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">state</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = state;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Manager</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">memento</span>: <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> m = <span class=\"keyword\">new</span> <span class=\"title class_\">Memorial</span>();</span><br><span class=\"line\"><span class=\"title class_\">Manager</span>.<span class=\"property\">memento</span> = <span class=\"title class_\">Memorial</span>.<span class=\"title function_\">memorize</span>();</span><br><span class=\"line\"><span class=\"title class_\">Memorize</span>.<span class=\"title function_\">restore</span>(<span class=\"title class_\">Manager</span>.<span class=\"property\">memento</span>);</span><br></pre></td></tr></table></figure>\n\n<p>它的优点很明显，可以保存和回复状态，支持回滚事务。但在使用时，通常是结合了别的设计模式的变种。</p>\n<h4 id=\"拓展-2\"><a href=\"#拓展-2\" class=\"headerlink\" title=\"拓展\"></a>拓展</h4><p>结合原型模式，可以直接用clone对象的方式保存状态。这么做问题是当状态对象较大时，会有时间和空间的开销，优势是可以直接将状态存储在类内部，避免了其余类的定义。</p>\n<p>在多状态存储上，Java可以借用BeanUtil工具类（书中所说），JavaScript中就灵活很多了（还是因为轻量级的对象）。同样的多备忘录模式就不再赘述。另外，需要保证备忘录的保密性时，封装成业务类的内置类，设置权限为<code>private</code>即可，JS中同理。</p>\n<h3 id=\"访问者模式\"><a href=\"#访问者模式\" class=\"headerlink\" title=\"访问者模式\"></a>访问者模式</h3><p>访问者模式指，封装作用在数据结构上各元素的操作，它可以在不改变数据的前提下定义新的对于元素的操作。实现原理上，</p>\n<ul>\n<li>被访问类新增访问方法（如<code>accept</code>），注入访问类，同时将自己交给访问类</li>\n<li>访问类根据得到的被访问类对象，执行想要的操作</li>\n<li>场景类中通过调用访问方法访问被访问类</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Element</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">accept</span><span class=\"params\">(IVisitor v)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Element</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">foo</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 注入访问类</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">accept</span><span class=\"params\">(IVisitor v)</span> &#123;</span><br><span class=\"line\">    visitor.visit(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">IVisitor</span>() &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 通过重载对不同元素定义不同的访问方式</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">visit</span><span class=\"params\">(Element e)</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">visit</span><span class=\"params\">(OtherElement e)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然，为了保证依赖倒置原则，被访问类和访问类都可以再抽象出抽象类和接口。另外，访问者模式通常和组合模式、迭代器模式一同出现。访问者模式的优点：</p>\n<ul>\n<li>符合单一职责原则</li>\n<li>拓展性优秀</li>\n</ul>\n<p>缺点在于，被访问者要暴露细节给访问者，通常会增加很多约定，使代码不稳定。另外重载中依赖的是具体元素违背了依赖倒置原则。</p>\n<p>访问器模式的应用场景<strong>通常是使用迭代器模式已经不能满足的场合</strong>。比如对不同的元素有不同的遍历操作，甚至涉及到元素内部的逻辑。使用访问器模式可以封装和掩盖这种差异性。</p>\n<h4 id=\"拓展-3\"><a href=\"#拓展-3\" class=\"headerlink\" title=\"拓展\"></a>拓展</h4><p>在访问器模式和迭代器模式一同出现时，可以增加统计功能，在每次访问元素时收集统计信息。在往深处拓展，甚至可以抽象访问器为接口，从而拓展不同类型的访问器，如用来展示数据和用来统计数据的。</p>\n<h3 id=\"状态模式\"><a href=\"#状态模式\" class=\"headerlink\" title=\"状态模式\"></a>状态模式</h3><p>这种模式就很好理解了。即将客体抽象成一个<strong>有限状态机</strong>，客体有一个初始状态，在某特定时机下会跃迁到另一状态，且状态间的跳转是有规律可循的。这种模式在编程中非常常见，自然语言分析、所有可以用马尔科夫过程描述的事物变化都可以抽象成状态模式实现。在实现时，主要要完成三方面工作：</p>\n<ul>\n<li>定义<strong>所有状态</strong>，根据状态的薄厚程度，用常量或类定义</li>\n<li>定义修改状态的行为，在方法内往往要根据上一时刻状态做判断，这些行为定义在状态内部</li>\n<li>在上下文中调用这些行为</li>\n</ul>\n<p>在实现时，为了避免<code>switch</code>语句，会使用一个上下文类，托管当前状态，在状态切换时，先调用状态类中的行为，再通知上下文类更换托管的状态。两者相互注入。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">State</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 注入上下文对象</span></span><br><span class=\"line\">  <span class=\"keyword\">protected</span> Context c;</span><br><span class=\"line\">  <span class=\"comment\">// 设置上下文</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setContext</span><span class=\"params\">(Context c)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.context = c;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 行为</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"title function_\">action1</span><span class=\"params\">()</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"title function_\">action2</span><span class=\"params\">()</span>;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">State1</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">action1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">action2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>.context.setState(Context.STATE2);</span><br><span class=\"line\">    <span class=\"comment\">// 切换到state2</span></span><br><span class=\"line\">    <span class=\"built_in\">super</span>.context.handleAction2();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Context</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 注入所有状态</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">state</span> <span class=\"variable\">STATE1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">State1</span>();</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">state</span> <span class=\"variable\">STATE2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">State2</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> State CurrState;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> State <span class=\"title function_\">getState</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.CurrState;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 设置当前状态</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setState</span><span class=\"params\">(State currState)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.currState = currState;</span><br><span class=\"line\">    <span class=\"comment\">// 切换当前状态</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.CurrState.setContext(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 行为委托</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleAction1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.CurrState.action1();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleAction2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.CurrState.action2();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>增加了上下文类Context后，避免了大量的<code>switch</code>语句，问题是，状态较多时，定义的类也会较多。状态模式在工作流开发中很常用。</p>\n<h3 id=\"解释器模式\"><a href=\"#解释器模式\" class=\"headerlink\" title=\"解释器模式\"></a>解释器模式</h3><p>解释器模式顾名思义，即定义一个解释器，去按文法解释一种语言中的句子。当然这个语言以科学运算和编程语句居多。它的应用场景比较特殊，即需要语句解析介入的场景，比如自然语言分析、或者真的编写一个语言的解释器。通常开发解释器工程量和难度都较大，且会遇到效率问题。一般应用较少。</p>\n<p>在这个模式下。主要有下面这些角色；</p>\n<ul>\n<li>抽象解释器，用来派生具体的表达式解释器</li>\n<li>终结符解释器，即不需要解释的，字面意义的符号，比如<code>1</code>或<code>a</code>等</li>\n<li>非终结符解释器，和两边表达式相关联的符号解释器，比如<code>+</code>或<code>*</code>等</li>\n<li>上下文角色</li>\n</ul>\n<h3 id=\"享元模式\"><a href=\"#享元模式\" class=\"headerlink\" title=\"享元模式\"></a>享元模式</h3><p>享元模式是一种重要的池技术，原理上指使用共享对象支持大量的细粒度的对象。我们可以将这些对象内的状态拆分成可共享状态和不可共享状态。对象往往可以按可共享状态拆分为细粒度较大的若干部分，放在共享对象池中，再贴上自己的不可共享状态。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 享元</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SharedObject</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String intrinsic;</span><br><span class=\"line\">  <span class=\"comment\">// 共享的状态作为享元的key</span></span><br><span class=\"line\">  <span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> String Extrinsic;</span><br><span class=\"line\">  <span class=\"comment\">// 共享的状态需要可以设置</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">SharedObject</span><span class=\"params\">(String E)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.Extrinsic = E;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 业务方法</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"title function_\">foo</span><span class=\"params\">()</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 不可共享状态的getter/setter</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> String <span class=\"title function_\">getIntrinsic</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> intrinsic;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setIntrinsic</span><span class=\"params\">(String intrinsic)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.intrinsic = intrinsic;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 享元工厂</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SharedObjectFactory</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 共享池</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> HashMap&lt;String, SharedObject&gt; pool = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;String, SharedObject&gt;();</span><br><span class=\"line\">  <span class=\"comment\">// 工厂方法</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SharedObject <span class=\"title function_\">getSharedObject</span><span class=\"params\">(String Extrinsic)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">SharedObject</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 从池中寻找</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pool.containsKey(Extrinsic)) &#123;</span><br><span class=\"line\">      o = pool.get(Extrinsic);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      o = <span class=\"keyword\">new</span> <span class=\"title class_\">SharedObject1</span>(Extrinsic);</span><br><span class=\"line\">      <span class=\"comment\">// 放到池中</span></span><br><span class=\"line\">      pool.put(Extrinsic, o);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在共享对象池中，建议使用可共享状态的简单组合构成池内元素的key值（最好是基本类型），一方面减少编程负担，另一方面还可以提高工作效率。享元模式主要使用在下面场景下：</p>\n<ul>\n<li>系统中存在大量相似对象</li>\n<li>对象具备相近的外部状态和与环境无关的内部状态</li>\n</ul>\n<h3 id=\"桥梁模式\"><a href=\"#桥梁模式\" class=\"headerlink\" title=\"桥梁模式\"></a>桥梁模式</h3><p>桥梁模式又叫桥接模式，是比较轻量级的一种设计模式，意为将抽象和实现解耦，使两者可以独立变化。角色上，桥梁模式分为主体和客体，在主体内注入客体的接口&#x2F;抽象类，并在主体的方法内使用，提供setter或构造函数方法。这样继承自主体的类就可以根据传入setter&#x2F;构造函数的客体实现类的不同得到不同的实现结果。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Object</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 基本方法</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">foo</span><span class=\"params\">()</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Object1</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Object</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">foo</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 自己的逻辑</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Object2</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Object</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">foo</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 自己的逻辑</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Subject</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 必须有一个注入的客体</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> Object o;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 必须可以通过构造函数/setter注入</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">Subject</span><span class=\"params\">(Object o)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.o = o;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 获得客体行为</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">bar</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.o.foo();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 获得客体</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> Object <span class=\"title function_\">getObject</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Subject1</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Subject</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 覆写构造函数</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">Subject1</span><span class=\"params\">(Object o)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>(o);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 自身业务</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">bar</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>.bar();</span><br><span class=\"line\">    <span class=\"comment\">// ... 其余业务</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Scene</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Object</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object1</span>();</span><br><span class=\"line\">    <span class=\"type\">Subject</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Subject1</span>(o);</span><br><span class=\"line\">    s.bar();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>桥梁模式的扩展能力很强，它是<strong>对普通的继承的一种灵活的补充</strong>，避免了父类对子类的强侵入，可以将父类可能会变化的部分抽出去，通过注入的方式引入，方便子类随时更换。</p>\n<h2 id=\"设计模式的比较\"><a href=\"#设计模式的比较\" class=\"headerlink\" title=\"设计模式的比较\"></a>设计模式的比较</h2><h3 id=\"创建类\"><a href=\"#创建类\" class=\"headerlink\" title=\"创建类\"></a>创建类</h3><p>和创建类相关的模式：</p>\n<ul>\n<li>工厂模式</li>\n<li>抽象工厂模式</li>\n<li>建造者模式</li>\n<li>单例模式</li>\n<li>原型模式</li>\n</ul>\n<p>后两者容易理解。重点对比上面三个模式：</p>\n<ul>\n<li>工厂模式注重<strong>整体的构建过程</strong>，成产出的对象具有很强的<strong>相似性</strong></li>\n<li>建造者模式注重<strong>建造的过程</strong>，希望在每一步最好都可定制，根据步骤的不同生产出差异化的对象，<strong>通常伴生导演类</strong>。</li>\n<li>抽象工厂模式通常和<strong>产品族</strong>关系密切，尤其是一组事物有很明显的两个或多个划分方法时使用，其余等同工厂模式</li>\n</ul>\n<h3 id=\"结构类\"><a href=\"#结构类\" class=\"headerlink\" title=\"结构类\"></a>结构类</h3><p>结构类指调整或组合类产生更大结构来适应更高层次逻辑需求，大多通过增加中间层解决问题，有下面的相关模式：</p>\n<ul>\n<li>适配器模式</li>\n<li>桥梁模式</li>\n<li>组合模式</li>\n<li>装饰模式</li>\n<li>门面模式</li>\n<li>享元模式</li>\n<li>代理模式</li>\n</ul>\n<p>其中简单明了的有桥梁模式、组合模式、门面模式、享元模式，下面对比下其他的几种模式：</p>\n<ul>\n<li>代理模式即在原对象和用户间增加了一个中间层，在不改变原接口的情况下，<strong>增加准入和限定操作</strong></li>\n<li>装饰模式是代理模式的加强，装饰类并不起中间层的作用，不做准入判断，它<strong>单纯地在原接口上增强或削弱功能</strong></li>\n<li>适配器模式和它们差别较大，它也起包装作用，作用于两个不同的对象，重点在<strong>伪装和转换</strong></li>\n</ul>\n<h3 id=\"行为类\"><a href=\"#行为类\" class=\"headerlink\" title=\"行为类\"></a>行为类</h3><p>这一批模式重点在修饰类的行为：</p>\n<ul>\n<li>责任链模式</li>\n<li>命令模式</li>\n<li>解释器模式</li>\n<li>迭代器模式</li>\n<li>中介者模式</li>\n<li>备忘录模式</li>\n<li>观察者模式</li>\n<li>状态模式</li>\n<li>策略模式</li>\n<li>模板方法模式</li>\n<li>访问者模式</li>\n</ul>\n<p>下面比较一些类似的模式</p>\n<ul>\n<li>命令模式强调把<strong>动作解耦</strong>，将其分为<strong>执行对象和执行行为</strong>，在行为类内部注入执行对象，使用执行者操作命令</li>\n<li>策略模式强调包装<strong>对等的可替换的多个算法</strong>，通常有一个上下文类，封装所有的算法</li>\n</ul>\n<p>比如在表单验证时，策略模式会将所有的验证规则对等地定义出来，再由一个表单验证上下文对象包裹起来；命令模式下，首先要明确所有验证规则的接受者（Receiver），再定义所有的验证“命令”，最后由执行者（Invoker）操作命令完成工作，具体工作是在接受者那里完成的，命令只负责组织。</p>\n<p>关于策略模式和状态模式，</p>\n<ul>\n<li>策略模式没有状态的概念，虽然有上下文类<code>Context</code>，但是切换的状态只是不同的算法而已</li>\n<li>状态模式重点关注状态，它同样有上下文类<code>Context</code>，但<strong>相同的行为在不同的状态下产生的结果不同</strong>。在实现上体现在，上下文类内保存了当前状态，虽然状态间都有相同方法，但实现不同。</li>\n</ul>\n<p>至于观察者模式和责任链模式，</p>\n<ul>\n<li>观察者模式重点在<strong>观察和被观察的关系</strong>（想想事件监听），被观察者中需要注入监听者（Observable），再由监听者告知观察者（Observer），整条链是有回调的，链上传递的信息可以自由变化，即最后返回给用户数据的总是第一个被观察者</li>\n<li>责任链模式重点在<strong>事务链条化处理</strong>的过程（想想中间件），每个处理者都必须通过<code>next</code>属性明确指定下一个目标，整条链是责任链，链上角色相互平等，传递的信息一般不会改变结构，最终由最后一个角色返回结果</li>\n</ul>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>首先先来比较策略模式和桥梁模式。它俩的共同点在都有一个注入依赖关系。策略模式中算法封装被注入到上下文类<code>Context</code>中，桥梁模式中差异化继承的部分被单独抽出再注入父类里。它们的区别主要在：</p>\n<ul>\n<li>策略模式着重于封装一系列不同的行为</li>\n<li>桥梁模式在不破坏封装的情况下将差异化的实现部分从抽象部分抽取出来，因此必然有抽象化角色和实现化角色</li>\n</ul>\n<p>门面模式和中介者模式就比较好区分了，它们的应用场景有很大不同;</p>\n<ul>\n<li>门面模式用来掩盖下面复杂的子系统，提供统一的高层接口（“金玉其外”），它并不管下面的子系统间怎样耦合（“败絮其中”）</li>\n<li>中介者模式要用在同事对象间（通常至少3个）复杂交互时，化网状结构为星型结构，减少耦合</li>\n</ul>\n<p>最后，代理模式、装饰模式、适配器模式（不严格）、桥梁模式、门面模式都可以总结为<strong>包装模式</strong>，它们并没有为原来的类增加新的功能，只是增加了新的包装或插件。</p>\n<h2 id=\"设计模式的组合\"><a href=\"#设计模式的组合\" class=\"headerlink\" title=\"设计模式的组合\"></a>设计模式的组合</h2><h3 id=\"shell命令解释demo\"><a href=\"#shell命令解释demo\" class=\"headerlink\" title=\"shell命令解释demo\"></a>shell命令解释demo</h3><p>主要采用命令模式、责任链模式、模板方法模式。</p>\n<h3 id=\"银行扣款demo\"><a href=\"#银行扣款demo\" class=\"headerlink\" title=\"银行扣款demo\"></a>银行扣款demo</h3><p>主要采用策略模式、工厂方法模式、门面模式</p>\n<h3 id=\"产品消费事件demo\"><a href=\"#产品消费事件demo\" class=\"headerlink\" title=\"产品消费事件demo\"></a>产品消费事件demo</h3><p>产品创建时摄影工厂模式，保证产品和工厂的紧耦合，避免创建事件不触发的可能性</p>\n<h2 id=\"新模式\"><a href=\"#新模式\" class=\"headerlink\" title=\"新模式\"></a>新模式</h2><h3 id=\"MVC\"><a href=\"#MVC\" class=\"headerlink\" title=\"MVC\"></a>MVC</h3><p>MVC其实算不上一种新模式，但是从上世纪90年代起到现在实在是太流行了。它的目的是通过C（Controller）将模型M（Model）和视图V（View）分离开。书中具体在讲MVC在Java Web开发中的实现，这里从略。</p>\n<h3 id=\"规格书模式\"><a href=\"#规格书模式\" class=\"headerlink\" title=\"规格书模式\"></a>规格书模式</h3><p>规格书模式多用在描述一个规范或条件的场合下，比如“性别男年龄大于20且位于北京”。通过定义抽象类以及<code>AND</code>，<code>OR</code>，<code>NOT</code>等的组合，可以得到更复杂的规格书对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ISpec</span>() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isSatisfied</span><span class=\"params\">(Object o)</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> ISpec <span class=\"title function_\">and</span><span class=\"params\">(ISpec s)</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> ISpec <span class=\"title function_\">or</span><span class=\"params\">(ISpec s)</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> ISpec <span class=\"title function_\">not</span><span class=\"params\">(ISpec s)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Spec <span class=\"keyword\">implements</span> <span class=\"title class_\">ISpec</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"title function_\">isSatisfied</span><span class=\"params\">(Object o)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> ISpec <span class=\"title function_\">and</span><span class=\"params\">(ISpec s)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AndSpec</span>(<span class=\"built_in\">this</span>, spec);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> ISpec <span class=\"title function_\">or</span><span class=\"params\">(ISpec s)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newOrSpec(<span class=\"built_in\">this</span>, spec);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> ISpec <span class=\"title function_\">not</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> notSpec(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AndSpec</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Spec</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> ISpec left;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> ISpec right;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">AndSpec</span><span class=\"params\">(ISpec left, ISpec right)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.left = left;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.right = right;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isSatisfied</span><span class=\"params\">(Object o)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> left.isSatisfied(o) &amp;&amp; right.isSatisfied(o);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OrSpec</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Spec</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> ISpec left;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> ISpec right;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">OrSpec</span><span class=\"params\">(ISpec left, ISpec right)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.left = left;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.right = right;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isSatisfied</span><span class=\"params\">(Object o)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> left.isSatisfied(o) || right.isSatisfied(o);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NotSpec</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Spec</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> ISpec spec;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">NotSpec</span><span class=\"params\">(ISpec s)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.spec = s;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isSatisfied</span><span class=\"params\">(Object o)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !<span class=\"built_in\">this</span>.spec.isSatisfied(o);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">bizSpec</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Spec</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Object obj;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">bizSpec</span><span class=\"params\">(Object o)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.obj = o;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isSatisfied</span><span class=\"params\">(Object o)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 根据业务逻辑决定真值判断</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>规格模式应用场景比较局限，在LINQ（Language INtegrated Query，语言集成查询）中常见，用来构造WHERE子句。</p>\n<h3 id=\"对象池模式\"><a href=\"#对象池模式\" class=\"headerlink\" title=\"对象池模式\"></a>对象池模式</h3><p>对象池模式和享元模式相似，都是循环使用对象，但是对象池模式是整个直接取出到池中，避免初始化和释放资源时的消耗。如连接池和线程池就是常见的例子。</p>\n<h3 id=\"雇工模式\"><a href=\"#雇工模式\" class=\"headerlink\" title=\"雇工模式\"></a>雇工模式</h3><p>雇工模式是常见的“接口-实现”的倒转实现。比如，小学老师教小学学生，中学老师教中学学生，大学老师教大学学生。在实现时，我们先定义学习接口，再实现所有的学生类。再实现老师时，直接调用学生接口的学习方法就完成了教学的实现。雇工模式为一组类提供通用的功能，不需要类实现这些功能，而在客体上实现功能。它和命令模式有相似之处。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">IService</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">serving</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Object</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IService</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">serving</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 服务完成</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Servant</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">service</span><span class=\"params\">(IService s)</span> &#123;</span><br><span class=\"line\">    s.serving();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"黑板模式\"><a href=\"#黑板模式\" class=\"headerlink\" title=\"黑板模式\"></a>黑板模式</h3><p>黑板模式是观察者模式的拓展，它允许消息有多个读写者，且同时进行。消息生产者通过“黑板”这个总线，将消息传递给对应的消息消费者。这可以是一种宏观的设计理念，使用数据库或者消息队列当做“黑板”都是可以的。</p>\n<h3 id=\"空对象模式\"><a href=\"#空对象模式\" class=\"headerlink\" title=\"空对象模式\"></a>空对象模式</h3><p>空对象通过实现一个无意义的默认类避免程序出现null值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">NullAnimal</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> makeSound &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 什么都不写</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>–END–</em></p>\n",
            "tags": [
                "JavaScript",
                "设计模式",
                "类",
                "接口",
                "抽象类"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2017/12/15/you-dont-know-js-part2/",
            "url": "http://shenlvmeng.github.com/blog/2017/12/15/you-dont-know-js-part2/",
            "title": "《You don't know JS》 下（类型文法&异步&ES6与未来）",
            "date_published": "2017-12-15T12:59:38.000Z",
            "content_html": "<blockquote>\n<p>原作：<a href=\"https://github.com/getify/You-Dont-Know-JS\">You-Dont-Know-JS</a><br>本文的99.9%的内容都来自《You dont know JS》的<a href=\"https://github.com/getify/You-Dont-Know-JS/tree/1ed-zh-CN\">电子中文版</a></p>\n<p>传送门：<a href=\"https://shenlvmeng.github.io/blog/2017/12/13/you-dont-know-js-part1/\">《You don’t know JS》 上（入门&amp;作用域&amp;对象）</a></p>\n</blockquote>\n<h2 id=\"类型和文法\"><a href=\"#类型和文法\" class=\"headerlink\" title=\"类型和文法\"></a>类型和文法</h2><h3 id=\"内建类型\"><a href=\"#内建类型\" class=\"headerlink\" title=\"内建类型\"></a>内建类型</h3><ul>\n<li>7种类型</li>\n<li>值才有类型，变量没有</li>\n<li><code>undefined</code> ≠ is not defined（undeclared）。<code>undefined</code>表示定义却没有赋值的变量类型。然而<code>typeof</code>一个未声明的变量也会返回<code>undefined</code>，这是<code>typeof</code>的安全机制，它给了我们更多空间检查变量是否可用。</li>\n</ul>\n<h3 id=\"值\"><a href=\"#值\" class=\"headerlink\" title=\"值\"></a>值</h3><p>由于JS里String的只读性，所有String的相关方法都是返回一个新字符串。</p>\n<p>使用二进制浮点数的最出名（臭名昭著）的副作用是（记住，这是对 所有 使用 IEEE 754 的语言都成立的 —— 不是许多人认为&#x2F;假装 仅 在 JavaScript 中存在的问题）：<code>0.1 + 0.2 === 0.3 // false</code>。不过可以用<code>Number.EPSILON</code>做最小误差得到足够精确的近似结果。ES6下已经可以用<code>Number.isInteger()</code>和<code>Number.isSafeInteger()</code>检查数字是不是整数&#x2F;安全整数。</p>\n<h4 id=\"特殊值\"><a href=\"#特殊值\" class=\"headerlink\" title=\"特殊值\"></a>特殊值</h4><p><code>undefined</code>和<code>null</code>是JS里比较特殊的两类值，它们既是类型又是唯一的值。更加不幸的是，在非strict模式下，<code>undefined</code>还可以作为标识符，像下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">undefined</span> = <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n\n<p>另外，在特别需要<code>undefined</code>时，<code>void</code>操作符会变得很有用。</p>\n<p>Infinity &#x2F; Infinity &#x3D;&#x3D; undefined。</p>\n<p>针对一些特殊的等价情况（NaN和-0），ES6使用<code>Object.is()</code>判断其相等性。</p>\n<h4 id=\"值与引用\"><a href=\"#值与引用\" class=\"headerlink\" title=\"值与引用\"></a>值与引用</h4><p>在JS中没有指针，只有引用，同时页没有语法上的提示可以控制值和引用的赋值&#x2F;传递。取而代之的是，值的类型用来唯一控制值是通过值拷贝，还是引用拷贝来赋予（复合值）。引用指向的是值本身而不是变量，不能使用一个引用来改变另一个引用所指向的值。</p>\n<p>底层的基本标量值是不可变的（String和Boolean也一样）。比如一个Number对象持有一个基本标量值2，那么这个Number对象就永远不能再持有另一个值；你只能用一个不同的值创建一个全新的Number对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">x</span>) &#123;</span><br><span class=\"line\">    x = x + <span class=\"number\">1</span>;</span><br><span class=\"line\">    x; <span class=\"comment\">// 3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> <span class=\"title class_\">Number</span>( a ); <span class=\"comment\">// 或等价的 `Object(a)`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>( b );</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( b ); <span class=\"comment\">// 2, 不是 3</span></span><br></pre></td></tr></table></figure>\n\n<p>在其中<code>x = x + 1</code>这一步，包装值内的x被取出+1后，赋值给x，将其从一个引用变成一个基本标量值3。</p>\n<h3 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h3><p>对于最简单的值，JSON字符串化行为基本上和<code>toString()</code>转换是相同的，在对String字符串化时，结果也会包含<code>&quot;&quot;</code>，如<code>JSON.stringify(&quot;11&quot;) // &quot;&quot;11&quot;&quot;</code>。另外，对于JSON不安全值（即不能移植到消费JSON的语言中），有下面的处理：</p>\n<ul>\n<li>忽略<code>undefined</code>，<code>function</code>，<code>symbol</code></li>\n<li>在<code>Array</code>中遇到这种类型的值，会被替换为null（避免修改位置信息）</li>\n<li>在<code>Object</code>的属性中遇到时，属性会被简单的忽略掉</li>\n<li>带有循环引用时，<code>JSON.stringify()</code>会报错</li>\n</ul>\n<p>另外，对于有<code>toJSON()</code>方法的对象，JSON字符串化会优先使用该方法。<code>JSON.stringify()</code>的第二个参数可以指定Array或Function说明可以编辑的对象属性。第三个参数是填充符，填充在各级开头，用来友好展示结果，最多取入参的前10个字符。</p>\n<p>在对象上使用<code>toNumber</code>和<code>toString</code>方法，首先会找到其原始类型（<code>toPrimitives()</code>），即使用其<code>valueOf()</code>或<code>toString()</code>方法（也会在<code>[[prototype]]</code>上寻找）。</p>\n<h4 id=\"gt-Number\"><a href=\"#gt-Number\" class=\"headerlink\" title=\"-&gt; Number\"></a>-&gt; Number</h4><p>可以用<code>Date.now()</code>代替<code>+new Date()</code>获取更好的语义。</p>\n<p><code>~</code>除了可以用来检查<code>-1</code>这个特殊的值，还可以通过<code>~~</code>对小数取整，因为执行位操作时会先将数字转为Int32类型。</p>\n<p><strong><code>parseInt</code>以及<code>parseFloat</code>和<code>+</code>或<code>Number()</code>强制类型转换存在区别。</strong>它们的作用是，从字符串中解析出一个<code>number</code>出来。两者是不能相互替换的。后者是不能<em>容忍</em>非数字字符的。另外，**请在字符串上使用<code>parseInt</code>和<code>parseFloat</code>**，这也是它们的设计目的。对非字符串类型使用它们可能得到意外的结果：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseInt</span>( <span class=\"number\">1</span>/<span class=\"number\">0</span>, <span class=\"number\">19</span> ); <span class=\"comment\">// 18，惊不惊喜，意不意外</span></span><br></pre></td></tr></table></figure>\n\n<p>原因是，parseInt会把第一个参数<code>toString</code>（这不能责怪它，因为它本来就是设计对String使用的）。类似的例子还能举出很多：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseInt</span>( <span class=\"number\">0.000008</span> );       <span class=\"comment\">// 0   (&quot;0&quot; from &quot;0.000008&quot;)</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>( <span class=\"number\">0.0000008</span> );      <span class=\"comment\">// 8   (&quot;8&quot; from &quot;8e-7&quot;)</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>( <span class=\"literal\">false</span>, <span class=\"number\">16</span> );      <span class=\"comment\">// 250 (&quot;fa&quot; from &quot;false&quot;)</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>( <span class=\"built_in\">parseInt</span>, <span class=\"number\">16</span> );   <span class=\"comment\">// 15  (&quot;f&quot; from &quot;function..&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>( <span class=\"string\">&quot;0x10&quot;</span> );         <span class=\"comment\">// 16</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>( <span class=\"string\">&quot;103&quot;</span>, <span class=\"number\">2</span> );       <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<p>另外，<code>parseInt</code>会通过前缀试图猜测数字进制，默认是10进制。以<code>0x</code>开头表示16进制，以<code>0b</code>开头表示2进制，以<code>0o</code>开头表示8进制。</p>\n<h4 id=\"gt-Boolean\"><a href=\"#gt-Boolean\" class=\"headerlink\" title=\"-&gt; Boolean\"></a>-&gt; Boolean</h4><p>使用<code>!!</code>强制转换类型。</p>\n<p><code>&amp;&amp;</code>与<code>||</code>在JS中的逻辑和C++以及Java中的不大一样，它并不一定返回boolean类型的值，而是根据比较的两个数判断返回哪一个。其中<code>&amp;&amp;</code>可以用来进行短路操作。</p>\n<p>另外，对于Symbol来说，只能通过<code>String()</code>的形式转为String类型，却不能转为Boolean类型。</p>\n<h4 id=\"等价\"><a href=\"#等价\" class=\"headerlink\" title=\"等价\"></a>等价</h4><p>等价分为<code>==</code>和<code>===</code>。</p>\n<p>在<code>String</code>和<code>Number</code>进行比较时，会对<code>String</code>使用强制类型转换（类似<code>+</code>和<code>Number()</code>）；</p>\n<p>在和<code>Boolean</code>比较时，<strong>会首先把Boolean类型转为Number类型，再进行比较</strong>。这会产生下面这样比较迷惑的情况：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;42&quot;</span> == <span class=\"literal\">true</span>  <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"string\">&quot;42&quot;</span> == <span class=\"literal\">false</span> <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<p>在<code>Object</code>和非<code>Object</code>比较时，会先对<code>Object</code>进行<code>toPrimtives</code>，即先使用<code>valueOf()</code>看能否转成基本类型，再使用<code>toString()</code>。</p>\n<p>下面有一些疯狂的例子，但却可以由上面的规则解释：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;0&quot;</span> == <span class=\"literal\">false</span>    <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"literal\">false</span> == []     <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"number\">0</span> == []         <span class=\"comment\">// true</span></span><br><span class=\"line\">[] == ![];      <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"number\">2</span> == [<span class=\"number\">2</span>];       <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;</span> == []        <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;</span> == [<span class=\"literal\">null</span>];   <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"number\">0</span> == <span class=\"string\">&quot;\\n&quot;</span>       <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>通过上面的坑可以看到，等号的两边总有<code>[]</code>或<code>&quot;&quot;</code>或<code>false</code>或<code>0</code>。建议在这些情况使用<code>===</code>。</p>\n<p>下面是由Alex Dorey(@dorey on GitHub)制作的一个方便的表格，将各种比较进行了可视化：</p>\n<p><img src=\"https://github.com/getify/You-Dont-Know-JS/raw/1ed-zh-CN/types%20%26%20grammar/fig1.png\"></p>\n<h4 id=\"大小关系比较\"><a href=\"#大小关系比较\" class=\"headerlink\" title=\"大小关系比较\"></a>大小关系比较</h4><p>首先对值进行<code>toPrimitives</code>转换，如果有一个不是String，则使用<code>Number</code>类型比较。见下面的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// toNumber</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [ <span class=\"number\">42</span> ];</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = [ <span class=\"string\">&quot;43&quot;</span> ];</span><br><span class=\"line\"></span><br><span class=\"line\">a &lt; b;  <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// toString</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123; <span class=\"attr\">b</span>: <span class=\"number\">42</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = &#123; <span class=\"attr\">b</span>: <span class=\"number\">43</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">a &lt; b;  <span class=\"comment\">// false</span></span><br><span class=\"line\">a == b; <span class=\"comment\">// false</span></span><br><span class=\"line\">a &gt; b;  <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\">a &lt;= b; <span class=\"comment\">// true</span></span><br><span class=\"line\">a &gt;= b; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>在下面的例子里，a和b在比较时，都会转成”[object Object]”。而等价比较上会比较引用是否相同。因此都返回false，而JS中的<code>&lt;=</code>和<code>&gt;=</code>操作会去对应计算<code>&gt;</code>和<code>&lt;</code>的结果再取反，从而会得到两个<code>true</code>。</p>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><h4 id=\"语句和表达式\"><a href=\"#语句和表达式\" class=\"headerlink\" title=\"语句和表达式\"></a>语句和表达式</h4><p>JS中的表达式都有一个隐式的返回值，但是它只会打印在控制台中，并不会真实返回。块语句的返回值是块中最后一个语句的返回值。ES7中可能会引入do语句显式地使用这个返回值。</p>\n<p>JS中的<code>++</code>和C风格类似，表示自增，有前后之分。但是<code>++a++</code>这种用法是不合法的。</p>\n<p>赋值表达式的返回是赋予的值，这在链式赋值时很好用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a, b, c;</span><br><span class=\"line\">a = b = c = <span class=\"number\">42</span>;</span><br></pre></td></tr></table></figure>\n\n<p>这里，<code>c = 42</code>被求值得出42（带有将42赋值给c的副作用），然后<code>b = 42</code>被求值得出42（带有将42赋值给b的副作用），而最后<code>a = 42</code>被求值（带有将42赋值给a的副作用）。</p>\n<p>另一种用法是直接将之放在<code>&amp;&amp;</code>和<code>||</code>的前后，检查赋值语句的真值。</p>\n<h4 id=\"上下文\"><a href=\"#上下文\" class=\"headerlink\" title=\"上下文\"></a>上下文</h4><p><code>&#123;&#125;</code>包裹的内容作为表达式结果可以直接赋值给变量，但是直接声明时会被当做代码块，但是可能仍然是合法的，如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">foo</span>: <span class=\"title function_\">bar</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为，JS中允许使用语句标签，便于<code>break</code>和<code>continue</code>跳转（JS中没有<code>goto</code>）。而JSON中带有<code>&quot;&quot;</code>的键则不会被这么解释，因为语句标签不允许出现引号。</p>\n<p>我们现在来解决下面的问题：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[] + &#123;&#125;; <span class=\"comment\">// &quot;[object Object]&quot;</span></span><br><span class=\"line\">&#123;&#125; + []; <span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure>\n\n<p>为什么交换顺序会对<code>+</code>的规则有影响？在第一个式子里一切都是正常的，<code>[]</code>转换成<code>&quot;&quot;</code>，<code>&#123;&#125;</code>转换成<code>[object Object]</code>；在第二个式子里，<code>&#123;&#125;</code>被理解成一个空代码块儿，<code>[]</code>被强制转换为0。</p>\n<h4 id=\"操作符优先级\"><a href=\"#操作符优先级\" class=\"headerlink\" title=\"操作符优先级\"></a>操作符优先级</h4><ul>\n<li><code>&amp;&amp;</code>优先于<code>||</code>。<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\">这里</a>有完整的表格。</li>\n<li><code>&amp;&amp;</code>和<code>||</code>有短接的特点，即当第一个表达式为true或false时直接返回结果。</li>\n<li>赋值表达式和三元表达式<code>? : </code>一样是从右向左结合的</li>\n</ul>\n<h4 id=\"ASI（自动分号）\"><a href=\"#ASI（自动分号）\" class=\"headerlink\" title=\"ASI（自动分号）\"></a>ASI（自动分号）</h4><p>尽量避免ASI，只在确认没有歧义的地方依赖ASI。</p>\n<h4 id=\"错误\"><a href=\"#错误\" class=\"headerlink\" title=\"错误\"></a>错误</h4><ul>\n<li>JS有早期错误一说，即运行前编译期间的错误</li>\n<li><code>let</code>会造成块域内的TDZ（Temporal Dead Zone，时间死区），<code>typeof</code>在此时会报错，而不会返回<code>undefined</code>。TDZ是指变量还没到能使用它的时候，还需要初始化。下面还有一个例子：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"> a = <span class=\"number\">42</span>, b = a + b + <span class=\"number\">5</span> </span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ..</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>ES6提供了剩余参数来代替原有的<code>arguments</code>对象，这更加安全。</li>\n</ul>\n<p><strong><code>finally</code>子句</strong></p>\n<p><code>try catch</code>在和<code>finally</code>一起使用时，<code>finally</code>的语句一定会被执行，而且一定会在<code>try</code>语句执行完后立即执行，即使<code>try</code>中有<code>return</code>或者<code>throw</code>、<code>continue</code>等控制语句。可以在<code>finally</code>中修改<code>try</code>中的结果，但是最后不要这么做，因为会影响程序可读性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"number\">42</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( <span class=\"string\">&quot;Hello&quot;</span> );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( <span class=\"string\">&quot;never runs&quot;</span> );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( <span class=\"title function_\">foo</span>() );</span><br><span class=\"line\"><span class=\"comment\">// Hello</span></span><br><span class=\"line\"><span class=\"comment\">// Uncaught Exception: 42</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"宿主环境\"><a href=\"#宿主环境\" class=\"headerlink\" title=\"宿主环境\"></a>宿主环境</h4><p>由于浏览器的遗留行为，使用id属性创建DOM元素会创建同名的全局变量。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;foo&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> foo == <span class=\"string\">&quot;undefined&quot;</span>) &#123;</span><br><span class=\"line\">    foo = <span class=\"number\">42</span>;       <span class=\"comment\">// 永远不会运行</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( foo ); <span class=\"comment\">// HTML元素</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>永远不要修改内建类型。</li>\n<li>JS的函数和变量声明提升只在同一<code>&lt;script&gt;</code>标签内</li>\n</ul>\n<h4 id=\"保留字\"><a href=\"#保留字\" class=\"headerlink\" title=\"保留字\"></a>保留字</h4><blockquote>\n<p>Let this long package float, Goto private class if short. While protected with debugger case, Continue volatile interface. Instanceof super synchronized throw, Extends final export throws.</p>\n<p>Try import double enum?</p>\n<p>False, boolean, abstract function, Implements typeof transient break! Void static, default do, Switch int native new. Else, delete null public var In return for const, true, char …Finally catch byte.</p>\n</blockquote>\n<p>来自StackOverflow用户“art4theSould”创造性的一首<a href=\"http://stackoverflow.com/questions/26255/reserved-keywords-in-javascript/12114140#12114140\">小诗</a>。</p>\n<p>另外，在ES6+中，可以使用保留字作为对象字面量中的属性名或键。</p>\n<h2 id=\"异步与性能\"><a href=\"#异步与性能\" class=\"headerlink\" title=\"异步与性能\"></a>异步与性能</h2><p>JS引擎对时间没有天生的感觉，只是一个任意JS代码段的按需执行环境。是周围的宿主环境在不停地安排“事件”（JS代码的执行）。举例来说，当你的JS程序发起一个从服务器取得数据的Ajax请求时，你在一个函数（通常称为回调）中建立好“应答”代码，然后JS引擎就会告诉宿主环境，“嘿，我就要暂时停止执行了，但不管你什么时候完成了这个网络请求，而且你还得到一些数据的话，请<em>回来调</em>这个函数。”</p>\n<p>然后浏览器就会为网络的应答设置一个监听器，当它有东西要交给你的时候，它会通过将回调函数插入<strong>事件轮询</strong>来安排它的执行。</p>\n<p>关于事件轮询队列，<a href=\"https://shenlvmeng.github.io/blog/2017/02/27/event-loop/\">之前</a>也有过一些介绍。</p>\n<h3 id=\"异步概览\"><a href=\"#异步概览\" class=\"headerlink\" title=\"异步概览\"></a>异步概览</h3><p>异步≠并行。异步本质上还是串行的。工作依然有先后之分，没有线程、线程池的概念。从而，在JS中的函数都是原子的，即不会与别的函数的代码<strong>相互穿插</strong>（除非使用<code>Generator</code>）。</p>\n<h4 id=\"并发\"><a href=\"#并发\" class=\"headerlink\" title=\"并发\"></a>并发</h4><p>并发是当两个或多个“进程”（或任务）在同一时间段内同时执行，而不管构成它们的每个操作是不是同时进行的。在JS中，单线程事件轮询是并发的一种表达。</p>\n<p><strong>不互动</strong></p>\n<p>当程序中运行多个“进程”（或任务），如果它们之间没有逻辑联系，那么不互动是完全可以接受的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> res = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">results</span>) &#123;</span><br><span class=\"line\">    res.<span class=\"property\">foo</span> = results;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">bar</span>(<span class=\"params\">results</span>) &#123;</span><br><span class=\"line\">    res.<span class=\"property\">bar</span> = results;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ajax(..) 是某个包中任意的Ajax函数</span></span><br><span class=\"line\"><span class=\"title function_\">ajax</span>( <span class=\"string\">&quot;http://some.url.1&quot;</span>, foo );</span><br><span class=\"line\"><span class=\"title function_\">ajax</span>( <span class=\"string\">&quot;http://some.url.2&quot;</span>, bar );</span><br></pre></td></tr></table></figure>\n\n<p><strong>互动</strong></p>\n<p>相反，如果它们之间有依赖关系，或者前后次序而产生互动时，<code>let it alone</code>就会出事。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> res = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">response</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">push</span>( data );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ajax(..) 是某个包中任意的Ajax函数</span></span><br><span class=\"line\"><span class=\"title function_\">ajax</span>( <span class=\"string\">&quot;http://some.url.1&quot;</span>, response );</span><br><span class=\"line\"><span class=\"title function_\">ajax</span>( <span class=\"string\">&quot;http://some.url.2&quot;</span>, response );</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"协调\"><a href=\"#协调\" class=\"headerlink\" title=\"协调\"></a>协调</h4><p>跳过使用全局变量等丑陋的协作手段，有一种方法，将长时间处理的任务打断成多个小段的请求外加setTimeout，以便将任务穿插完成。</p>\n<h4 id=\"Jobs\"><a href=\"#Jobs\" class=\"headerlink\" title=\"Jobs\"></a>Jobs</h4><p>ES6在事件轮询队列之上引入了一层新概念，称为“工作队列（Job queue）”。它和轮询队列的关系类似于Macrotask和Microtask。</p>\n<h3 id=\"回调\"><a href=\"#回调\" class=\"headerlink\" title=\"回调\"></a>回调</h3><h4 id=\"顺序的大脑\"><a href=\"#顺序的大脑\" class=\"headerlink\" title=\"顺序的大脑\"></a>顺序的大脑</h4><p>回调不符合正常思维逻辑顺序 &amp; 回调地狱。</p>\n<h4 id=\"信任问题\"><a href=\"#信任问题\" class=\"headerlink\" title=\"信任问题\"></a>信任问题</h4><p><em>（本人并不完全赞同）</em>回调遭受着<em>控制反转</em>的蹂躏，它们隐含地将控制权交给第三方（通常第三方工具不受你控制！）来调用你程序的延续。</p>\n<h3 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h3><p>Promise的<code>then</code>和<code>catch</code>。</p>\n<h4 id=\"可靠的Promise\"><a href=\"#可靠的Promise\" class=\"headerlink\" title=\"可靠的Promise\"></a>可靠的Promise</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p3 = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>( <span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)&#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>( <span class=\"string\">&quot;B&quot;</span> );</span><br><span class=\"line\">&#125; );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>( <span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)&#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>( p3 );</span><br><span class=\"line\">&#125; );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>( <span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)&#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>( <span class=\"string\">&quot;A&quot;</span> );</span><br><span class=\"line\">&#125; );</span><br><span class=\"line\"></span><br><span class=\"line\">p1.<span class=\"title function_\">then</span>( <span class=\"keyword\">function</span>(<span class=\"params\">v</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( v );</span><br><span class=\"line\">&#125; );</span><br><span class=\"line\"></span><br><span class=\"line\">p2.<span class=\"title function_\">then</span>( <span class=\"keyword\">function</span>(<span class=\"params\">v</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( v );</span><br><span class=\"line\">&#125; );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// A B  &lt;-- 不是你可能期望的 B A</span></span><br></pre></td></tr></table></figure>\n\n<p>这是因为p1由p3解析的结果所解析，这个过程是异步地。</p>\n<p>作者认为Promise在很大程度上，解决了下面的问题：</p>\n<ul>\n<li>调的太早&#x2F;太晚（本人并不赞同）</li>\n<li>根本不调回调（勉强成立），Promise通知状态改变是由编程者自己代码控制的，用<code>resolve</code>或<code>reject</code>（用户只能借助外部环境API发起异步操作，resolve一样要么放在传统的回调，要么转交给第三方完成）。</li>\n<li>调太少或太多次（成立），一个Promise一旦resolve或者reject，状态就不再发生变化</li>\n<li>没能传入任何参数&#x2F;环境（勉强成立），原因与第二条相同</li>\n<li>吞掉所有错误和异常（勉强成立），Promise中在catch字句里捕获异常。</li>\n</ul>\n<p><code>Promise.resolve(p)</code>会把thenable的入参<code>p</code>转换为合法的Promise。这里猜测下这个<code>resolve(p)</code>的实现（个人猜想）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"property\">resolve</span> = <span class=\"function\"><span class=\"params\">thenable</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// if `thenable` is a promise, just return it</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// if `thenable` is plain, just resolve</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> thenable.<span class=\"property\">then</span> != <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">resolve</span>(thenable);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        thenable.<span class=\"title function_\">then</span>(resolve, reject);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 一个thenable的例子</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> p = &#123;</span><br><span class=\"line\">    <span class=\"title function_\">then</span>(<span class=\"params\">cb, err</span>) &#123;</span><br><span class=\"line\">        <span class=\"title class_\">Math</span>.<span class=\"property\">random</span> &lt; <span class=\"number\">0.5</span> ? <span class=\"title function_\">cb</span>(<span class=\"number\">42</span>) : <span class=\"title function_\">err</span>(<span class=\"string\">&quot;oops! Something bad happens.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"链式调用\"><a href=\"#链式调用\" class=\"headerlink\" title=\"链式调用\"></a>链式调用</h4><p>看看RxJS的<a href=\"http://reactivex.io/rxjs/manual/overview.html\">Introduction</a>。就可以很轻松地理解Promise的流程和链式过程了。</p>\n<h4 id=\"Promise模式\"><a href=\"#Promise模式\" class=\"headerlink\" title=\"Promise模式\"></a>Promise模式</h4><p><code>Promise.all()</code>和<code>Promise.race()</code>。除了这两个官方钦定的方法外，其他的Promise库还实现了像是<code>any()</code>，<code>none()</code>，<code>first()</code>，<code>last()</code>这样的方法，看看RxJS的<a href=\"http://reactivex.io/rxjs/manual/overview.html#categories-of-operators\">operators</a>会有更多选择。</p>\n<h4 id=\"Promise的限制\"><a href=\"#Promise的限制\" class=\"headerlink\" title=\"Promise的限制\"></a>Promise的限制</h4><ul>\n<li>顺序的错误处理</li>\n<li>只能传单一的值（其实就是状态改变不可逆）</li>\n<li>单次解析（同上），文章也在<a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1ed-zh-CN/async%20%26%20performance/ch3.md#%E6%83%B0%E6%80%A7\">惰性</a>的上方提到了观察者模式的RxJS，的确在设计时间概念的领域，RxJS要厉害多了</li>\n<li>惰性（生产生产Promise函数的工厂函数）</li>\n<li>不可反悔（即不能中途撤销）</li>\n<li>性能</li>\n</ul>\n<h3 id=\"Generator\"><a href=\"#Generator\" class=\"headerlink\" title=\"Generator\"></a>Generator</h3><p>使用同步风格书写异步代码的基础在Generator。关于这部分的更详细介绍见本人之前参考阮一峰大神写的<a href=\"https://shenlvmeng.github.io/blog/2017/03/29/javascript-async-programming-2/\">博文</a></p>\n<h4 id=\"打破运行至完成\"><a href=\"#打破运行至完成\" class=\"headerlink\" title=\"打破运行至完成\"></a>打破运行至完成</h4><p>generator（生成器）是一个可以和别的代码穿插执行的非原子的特殊函数。使用<code>new</code>构造generator得到的只是一个迭代器，迭代器在执行到<code>yield</code>时会让出执行权。真正执行这个迭代器需要用调用或者执行器的方式。</p>\n<p>yield和next是generator可以和外部甚至是其他generator双向通信。但是generator只是声明了自己将要以什么样的形式去执行。还需要一个下面这样的帮助函数去推动它执行：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">step</span>(<span class=\"params\">gen</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> it = <span class=\"title function_\">gen</span>();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> last;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 不论`yield`出什么，只管在下一次时直接把它塞回去！</span></span><br><span class=\"line\">        last = it.<span class=\"title function_\">next</span>( last ).<span class=\"property\">value</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"生成器\"><a href=\"#生成器\" class=\"headerlink\" title=\"生成器\"></a>生成器</h4><ul>\n<li>可以把generator像状态机一样使用。</li>\n<li><code>for of</code>需要迭代器的实现</li>\n<li>可以在generator上使用<code>for of</code></li>\n<li>使用<code>return</code>而非<code>next</code>可以终止生成器执行</li>\n</ul>\n<h4 id=\"在异步流程中使用generator\"><a href=\"#在异步流程中使用generator\" class=\"headerlink\" title=\"在异步流程中使用generator\"></a>在异步流程中使用generator</h4><p>generator的yield暂停特性不仅意味着我们可以从异步的函数调用那里得到<em>看起来</em>同步的return值。</p>\n<h4 id=\"带有promise的generator\"><a href=\"#带有promise的generator\" class=\"headerlink\" title=\"带有promise的generator\"></a>带有promise的generator</h4><p>在ES6的世界中最棒的就是将generator（看似同步的异步代码）与Promise（可靠性和可组合性）组合起来。</p>\n<p>co与koa。</p>\n<p><strong>ES7中的await和async</strong></p>\n<p>像下面这样，没有<code>run</code>函数，没有生成器函数的<code>*</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">x,y</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">request</span>(</span><br><span class=\"line\">        <span class=\"string\">&quot;http://some.url.1/?x=&quot;</span> + x + <span class=\"string\">&quot;&amp;y=&quot;</span> + y</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">main</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> text = <span class=\"keyword\">await</span> <span class=\"title function_\">foo</span>( <span class=\"number\">11</span>, <span class=\"number\">31</span> );</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( text );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>( err );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">main</span>();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"yield委托\"><a href=\"#yield委托\" class=\"headerlink\" title=\"yield委托\"></a>yield委托</h4><p>使用<code>yield * foo</code>可以把其他的生成器函数整合进当前生成器中。除了生成器外，还可以委托一个非generator的iterator。错误可以委托，promise可以委托，委托还可以递归。</p>\n<p>结合yield可以很方便地协调多个generator</p>\n<h4 id=\"thunk\"><a href=\"#thunk\" class=\"headerlink\" title=\"thunk\"></a>thunk</h4><p>同步的thunk即包装了所有预设形参的函数执行的函数。异步thunk指需要指定callback的包装所有其他预设形参异步函数的函数。像下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 同步thunk</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">x,y</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fooThunk</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">foo</span>( <span class=\"number\">3</span>, <span class=\"number\">4</span> );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 异步thunk</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">x,y,cb</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>( <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">cb</span>( x + y );</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span> );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fooThunk</span>(<span class=\"params\">cb</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">foo</span>( <span class=\"number\">3</span>, <span class=\"number\">4</span>, cb );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一旦来说会有一个工具thunkify帮你完成制造函数thunk的工作（放心，总会有人这么做的）。它的用法是下面这样的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fooThunkory = <span class=\"title function_\">thunkify</span>( foo );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fooThunk1 = <span class=\"title function_\">fooThunkory</span>( <span class=\"number\">3</span>, <span class=\"number\">4</span> );</span><br><span class=\"line\"><span class=\"keyword\">var</span> fooThunk2 = <span class=\"title function_\">fooThunkory</span>( <span class=\"number\">5</span>, <span class=\"number\">6</span> );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 稍后</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fooThunk1</span>( <span class=\"keyword\">function</span>(<span class=\"params\">sum</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( sum );     <span class=\"comment\">// 7</span></span><br><span class=\"line\">&#125; );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fooThunk2</span>( <span class=\"keyword\">function</span>(<span class=\"params\">sum</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( sum );     <span class=\"comment\">// 11</span></span><br><span class=\"line\">&#125; );</span><br></pre></td></tr></table></figure>\n\n<p>包装函数生产一个thunkory，之后指定除cb以外的其他参数得到thunk函数。</p>\n<p>thunk和Promise本质上其实是等价的。只不过是回调所在的为之不一样罢了。所以使用Promise.wrap包装得到的promise还是thunkify包装得到的thunk函数其实都可以yield出来。因为，它们都能通过指定回调来让generator进一步推动下去。</p>\n<p>当然了无论是在可组合性还是错误处理上，Promise都有更胜一筹。所以，thunk通常作为替代性的前ES6方案。</p>\n<h4 id=\"前ES6的Generator\"><a href=\"#前ES6的Generator\" class=\"headerlink\" title=\"前ES6的Generator\"></a>前ES6的Generator</h4><p>当然了Generator也是可以通过其他方式<a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1ed-zh-CN/async%20%26%20performance/ch4.md#%E5%89%8Des6%E6%97%B6%E4%BB%A3%E7%9A%84generator\">实现</a>的。</p>\n<h3 id=\"性能\"><a href=\"#性能\" class=\"headerlink\" title=\"性能\"></a>性能</h3><h4 id=\"Web-Worker\"><a href=\"#Web-Worker\" class=\"headerlink\" title=\"Web Worker\"></a>Web Worker</h4><p>近HTML5时代被加入web平台的特性，称为“Web Worker”。这是一个浏览器（也就是宿主环境）特性，而且几乎和JS语言本身没有任何关系。<a href=\"https://shenlvmeng.github.io/blog/2017/09/04/pwa-and-hybrid-brief/\">这里</a>简单说了下它和Service Worker的区别。</p>\n<h4 id=\"asm-js\"><a href=\"#asm-js\" class=\"headerlink\" title=\"asm.js\"></a>asm.js</h4><p>“<a href=\"http://asmjs.org/\">asm.js</a>”是可以被高度优化的JavaScript语言子集的标志。通过小心地回避那些特定的很难优化的（垃圾回收，强制转换，等等）机制和模式，asm.js风格的代码可以被JS引擎识别，而且用主动地底层优化进行特殊的处理。</p>\n<h3 id=\"基准分析（BenchMark）和调优\"><a href=\"#基准分析（BenchMark）和调优\" class=\"headerlink\" title=\"基准分析（BenchMark）和调优\"></a>基准分析（BenchMark）和调优</h3><ul>\n<li><a href=\"http://benchmarkjs.com/\">Benchmark.js</a>用统计学的方式避免时间戳测量语句性能时的不准确</li>\n<li><a href=\"http://jsperf.com/\">jsPerf.com</a>基于Benchmark.js的代码性能测试平台</li>\n</ul>\n<h4 id=\"编写好的测试\"><a href=\"#编写好的测试\" class=\"headerlink\" title=\"编写好的测试\"></a>编写好的测试</h4><ul>\n<li>注意上下文的影响</li>\n<li>“过早的优化是万恶之源”</li>\n<li>尾部调用优化</li>\n</ul>\n<h2 id=\"ES6与未来\"><a href=\"#ES6与未来\" class=\"headerlink\" title=\"ES6与未来\"></a>ES6与未来</h2><h3 id=\"ES？现在与未来\"><a href=\"#ES？现在与未来\" class=\"headerlink\" title=\"ES？现在与未来\"></a>ES？现在与未来</h3><ul>\n<li>polyfill与转译</li>\n</ul>\n<h3 id=\"语法-1\"><a href=\"#语法-1\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p>尽管ES6算是JS最新的官方特性，下面说的大部分特性已经被很经常地使用了。</p>\n<ul>\n<li>块作用域（之前的部分已经提到过了）</li>\n<li>扩散、剩余，<code>...</code>操作符，用在函数入参，数组和对象中</li>\n<li>函数默认参数值（是不是很神奇），默认参数值可以是合理的表达式甚至是函数调用</li>\n<li>解构赋值，也可以有默认参数值</li>\n<li>对象字面量拓展，简约声明&#x2F;简约方法&#x2F;getter，setter&#x2F;计算型属性名&#x2F;<code>__proto__</code>&#x2F;<code>super</code></li>\n<li><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1ed-zh-CN/es6%20%26%20beyond/ch2.md#%E6%A8%A1%E6%9D%BF%E5%AD%97%E9%9D%A2%E9%87%8F\">模板字面量</a></li>\n<li>箭头函数，词法<code>this</code></li>\n<li><code>for of</code>和iterator</li>\n<li>正则表达式拓展<ul>\n<li>Unicode标识</li>\n<li>粘性标志</li>\n</ul>\n</li>\n<li>数字，八进制</li>\n<li>Unicode<ul>\n<li>合理的string长度，<code>String.prototype.normalize()</code></li>\n<li><code>charCodeAt</code> &#x3D;&gt; <code>codePointAt</code></li>\n<li><code>fromCharCode</code> &#x3D;&gt; <code>fromCodePoint</code></li>\n<li>Unicode标识符名称</li>\n</ul>\n</li>\n<li>Symbol，新的基本类型，它是一个新的包装器对象，可以认为每个<code>EVT_LOGIN</code>持有一个不能被其他任何值所（有意或无意地）重复的值。<ul>\n<li><code>Symbol.for()</code>先查询是否有一个同名的Symbol，如果有就返回，没有就创建一个</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"组织\"><a href=\"#组织\" class=\"headerlink\" title=\"组织\"></a>组织</h3><h4 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h4><p>迭代器<code>Iterator</code>接口有一个必选接口<code>next()</code>，和两个可选接口<code>return()</code>和<code>throw()</code>，它的result被规定为包括属性<code>value</code>和<code>done</code>，下面是一个数组的迭代：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> it = arr[<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>]();</span><br><span class=\"line\"></span><br><span class=\"line\">it.<span class=\"title function_\">next</span>();      <span class=\"comment\">// &#123; value: 1, done: false &#125;</span></span><br><span class=\"line\">it.<span class=\"title function_\">next</span>();      <span class=\"comment\">// &#123; value: 2, done: false &#125;</span></span><br><span class=\"line\">it.<span class=\"title function_\">next</span>();      <span class=\"comment\">// &#123; value: 3, done: false &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">it.<span class=\"title function_\">next</span>();      <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>但通常使用<code>for of</code>就足够了。我们可以依照这个接口，定义一个自己的迭代器：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Fib</span> = &#123;</span><br><span class=\"line\">    [<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>]() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> n1 = <span class=\"number\">1</span>, n2 = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 使迭代器成为一个可迭代对象</span></span><br><span class=\"line\">            [<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>]() &#123; <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>; &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"title function_\">next</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> current = n2;</span><br><span class=\"line\">                n2 = n1;</span><br><span class=\"line\">                n1 = n1 + current;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> &#123; <span class=\"attr\">value</span>: current, <span class=\"attr\">done</span>: <span class=\"literal\">false</span> &#125;;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span>(v) &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(</span><br><span class=\"line\">                    <span class=\"string\">&quot;Fibonacci sequence abandoned.&quot;</span></span><br><span class=\"line\">                );</span><br><span class=\"line\">                <span class=\"keyword\">return</span> &#123; <span class=\"attr\">value</span>: v, <span class=\"attr\">done</span>: <span class=\"literal\">true</span> &#125;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Generator-1\"><a href=\"#Generator-1\" class=\"headerlink\" title=\"Generator\"></a>Generator</h4><p>这个上一章已经提到了。它可以用来：</p>\n<ul>\n<li>生产一系列值，即状态机</li>\n<li>串行执行的任务队列，化<em>异步</em>为<em>同步</em></li>\n</ul>\n<h4 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h4><p><code>import</code>和<code>export</code></p>\n<h4 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h4><ul>\n<li>ES6引入了元属性的概念，用<code>new.target</code>表示。在任意的构造器中，<code>new.target</code>总是指向<code>new</code>实际直接调用的构造器。</li>\n</ul>\n<h3 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h3><p><strong>ArrayBuffer</strong></p>\n<p>它表示一组比特位，但是这些比特的实际意义是由结构化数组控制的，由它表示这些比特上的“视图”究竟是8位有符号整数还是字符串。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> buf = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayBuffer</span>( <span class=\"number\">32</span> );</span><br><span class=\"line\">buf.<span class=\"property\">byteLength</span>;                     <span class=\"comment\">// 32字节</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> <span class=\"title class_\">Uint16Array</span>( buf );</span><br><span class=\"line\">arr.<span class=\"property\">length</span>;                         <span class=\"comment\">// 16</span></span><br></pre></td></tr></table></figure>\n\n<p>一个单独的缓冲可以连接多个视图</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> buf = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayBuffer</span>( <span class=\"number\">2</span> );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> view8 = <span class=\"keyword\">new</span> <span class=\"title class_\">Uint8Array</span>( buf );</span><br><span class=\"line\"><span class=\"keyword\">var</span> view16 = <span class=\"keyword\">new</span> <span class=\"title class_\">Uint16Array</span>( buf );</span><br><span class=\"line\"></span><br><span class=\"line\">view16[<span class=\"number\">0</span>] = <span class=\"number\">3085</span>;</span><br><span class=\"line\">view8[<span class=\"number\">0</span>];                       <span class=\"comment\">// 13</span></span><br><span class=\"line\">view8[<span class=\"number\">1</span>];                       <span class=\"comment\">// 12</span></span><br></pre></td></tr></table></figure>\n\n<p>在ES6中可以使用下面的类型化数组构造器：</p>\n<ul>\n<li>Int8Array（8位有符号整数），Uint8Array（8位无符号整数）</li>\n<li>Uint8ClampedArray（8位无符号整数，每个值都被卡在0 - 255范围内）</li>\n<li>Int16Array（16位有符号整数），Uint16Array（16位无符号整数）</li>\n<li>Int32Array（32位有符号整数），Uint32Array（32位无符号整数）</li>\n<li>Float32Array（32位浮点数，IEEE-754）</li>\n<li>Float64Array（64位浮点数，IEEE-754）</li>\n</ul>\n<p><strong>Maps</strong></p>\n<p>摆脱对象只能使用字符串做键值的限制。有<code>get</code>、<code>set</code>、<code>delete</code>、<code>has</code>、<code>clear</code>等方法。类似地还有WeakMap，不过它只能使用对象做键。</p>\n<p><strong>Sets</strong></p>\n<p>一个集合。类似Map，不过<code>set</code>换成了<code>add</code>，且没有<code>get</code>。Set和Map都有自己的迭代器。也可以通过<code>keys</code>，<code>values</code>，<code>entries</code>来访问里面的内容。</p>\n<h3 id=\"新增API-amp-元编程\"><a href=\"#新增API-amp-元编程\" class=\"headerlink\" title=\"新增API &amp; 元编程\"></a>新增API &amp; 元编程</h3><p>略，参考<a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1ed-zh-CN/es6%20%26%20beyond/ch6.md\">原文</a></p>\n<h3 id=\"ES6以后\"><a href=\"#ES6以后\" class=\"headerlink\" title=\"ES6以后\"></a>ES6以后</h3><ul>\n<li>asnyc function</li>\n<li><code>Object.observe</code></li>\n<li>指数运算符<code>**</code></li>\n<li><code>Array#includes</code>替代<code>~Array.indexOf(value)</code></li>\n<li>SIMD（多个数据），用于多个元素的并行数学操作，参考下面<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> v1 = <span class=\"variable constant_\">SIMD</span>.<span class=\"title function_\">float32x4</span>( <span class=\"number\">3.14159</span>, <span class=\"number\">21.0</span>, <span class=\"number\">32.3</span>, <span class=\"number\">55.55</span> );</span><br><span class=\"line\"><span class=\"keyword\">var</span> v2 = <span class=\"variable constant_\">SIMD</span>.<span class=\"title function_\">float32x4</span>( <span class=\"number\">2.1</span>, <span class=\"number\">3.2</span>, <span class=\"number\">4.3</span>, <span class=\"number\">5.4</span> );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable constant_\">SIMD</span>.<span class=\"property\">float32x4</span>.<span class=\"title function_\">mul</span>( v1, v2 );</span><br><span class=\"line\"><span class=\"comment\">// [ 6.597339, 67.2, 138.89, 299.97 ]</span></span><br></pre></td></tr></table></figure></li>\n<li>WASM（Web Assembly）</li>\n</ul>\n<p><em>-END-</em></p>\n",
            "tags": [
                "读书笔记",
                "JavaScript"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2017/12/13/you-dont-know-js-part1/",
            "url": "http://shenlvmeng.github.com/blog/2017/12/13/you-dont-know-js-part1/",
            "title": "《You don't know JS》 上（入门&作用域&对象）",
            "date_published": "2017-12-13T12:54:12.000Z",
            "content_html": "<blockquote>\n<p>原作：<a href=\"https://github.com/getify/You-Dont-Know-JS\">You-Dont-Know-JS</a><br>本文的99.9%的内容都来自《You dont know JS》的<a href=\"https://github.com/getify/You-Dont-Know-JS/tree/1ed-zh-CN\">电子中文版</a></p>\n<p>传送门：<a href=\"https://shenlvmeng.github.io/blog/2017/12/15/you-dont-know-js-part2/\">《You don’t know JS》 下（类型文法&amp;异步&amp;ES6与未来）</a></p>\n</blockquote>\n<h2 id=\"入门与进阶\"><a href=\"#入门与进阶\" class=\"headerlink\" title=\"入门与进阶\"></a>入门与进阶</h2><h3 id=\"值和类型\"><a href=\"#值和类型\" class=\"headerlink\" title=\"值和类型\"></a>值和类型</h3><p>JavaScript只有带类型的值，没有带类型的变量。大家都知道JS的基本类型共6类：</p>\n<ul>\n<li>undefined</li>\n<li>null</li>\n<li>boolean</li>\n<li>number</li>\n<li>string</li>\n<li>object</li>\n</ul>\n<p>但是在ES6之后，需要新增一类<code>symbol</code>。另外，对null使用<code>typeof</code>将得到“object”的结果。</p>\n<p>JavaScript中对“falsy”的定义包括：</p>\n<ul>\n<li>“”</li>\n<li>0, -0, NaN</li>\n<li>null, undefined</li>\n<li>false</li>\n</ul>\n<p>除此之外的值都是truthy。</p>\n<p>关于JavaScript中的<code>==</code>和<code>===</code>，作者的看法是在必要的时候<code>==</code>会很好地改善程序。然而<code>==</code>的<a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3\">判断规则</a>比较复杂，可以总结出一些情况便于我们选择是否使用<code>==</code>：</p>\n<ul>\n<li>如果一个比较的两个值之一可能是<code>true</code>或<code>false</code>，避免&#x3D;&#x3D;而使用&#x3D;&#x3D;&#x3D;。</li>\n<li>如果一个比较的两个值之一可能是<code>0</code>&#x2F;<code>&quot;&quot;</code>&#x2F;<code>[]</code>，避免&#x3D;&#x3D;而使用&#x3D;&#x3D;&#x3D;。</li>\n<li>其他情况下，放心使用<code>==</code>。不仅安全，在许多情况下它可以简化你的代码并改善可读性。</li>\n</ul>\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>一个变量标识符必须以a-z，A-Z，$，或<code>_</code>开头。它可以包含任意这些字符外加数字0-9，但不能使用保留字。</p>\n<p>变量作用域提升（var定义）和嵌套就不多说了。</p>\n<h3 id=\"Strict模式\"><a href=\"#Strict模式\" class=\"headerlink\" title=\"Strict模式\"></a>Strict模式</h3><p>让代码更严谨，同样可以选择用在全局或是函数中。</p>\n<h3 id=\"函数作为值\"><a href=\"#函数作为值\" class=\"headerlink\" title=\"函数作为值\"></a>函数作为值</h3><p><strong>IIFE</strong>（立即执行函数）和<strong>闭包</strong>是JS中值得玩味的特性。除了使用<code>()</code>包裹，还可以用<code>void</code>打头开始一个IIFE。</p>\n<p>闭包经常用来包装模块。</p>\n<h3 id=\"this指代和prototype\"><a href=\"#this指代和prototype\" class=\"headerlink\" title=\"this指代和prototype\"></a>this指代和prototype</h3><p>略</p>\n<h3 id=\"新的特性\"><a href=\"#新的特性\" class=\"headerlink\" title=\"新的特性\"></a>新的特性</h3><p>填充（polyfill）和转译（transpile）</p>\n<h2 id=\"作用域与闭包\"><a href=\"#作用域与闭包\" class=\"headerlink\" title=\"作用域与闭包\"></a>作用域与闭包</h2><h3 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h3><p>作用域与LHS，RHS。在非Strict模式下，如果到全局作用域还找不到变量，会在作用域内创建一个新的同名变量。在Strict模式下，不允许这种行为（意外地创建全局变量），此时会抛出ReferenceError，即找不到变量。如果找到了值，但是并不能对它做一些事情，就会抛出TypeError。</p>\n<h3 id=\"词法作用域\"><a href=\"#词法作用域\" class=\"headerlink\" title=\"词法作用域\"></a>词法作用域</h3><p>JavaScript使用词法作用域，即变量和作用域在编写代码阶段已经确定。JS引擎也可以在这个阶段针对作用域和变量对代码进行优化，但是<code>eval()</code>和<code>with()</code>会在代码中动态改变作用域，从而使得引擎无法进行优化，使代码运行得更慢。在strict模式下，<code>eval()</code>的不安全用法（修改作用域）以及<code>with()</code>都是不允许使用的。</p>\n<p>词法作用域是编写时的，而动态作用域（和this）是运行时的。词法作用域关心的是函数<strong>在何处被声明</strong>，但是动态作用域关心的是函数<strong>从何处被调用</strong>。</p>\n<p><code>this</code>在JS中始终是运行时的，即根据运行时的调用情况有不同的值。在<strong>箭头函数</strong>中则是词法this的，即声明时决定。</p>\n<h3 id=\"块作用域\"><a href=\"#块作用域\" class=\"headerlink\" title=\"块作用域\"></a>块作用域</h3><p>封装、匿名函数、IIFE。</p>\n<p>for循环、if、while、switch等流程控制语句的<code>&#123;&#125;</code>，都是<em>假的</em>块作用域，其中的内容都依附于外部的函数作用域。with（不建议使用），try catch，let，const可以形成新的块作用域。</p>\n<p>在ES6到ES5的转译时，具有块作用域的代码，会采用<code>try catch</code>来实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES6</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES5</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(a) &#123;</span><br><span class=\"line\">    a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"提升\"><a href=\"#提升\" class=\"headerlink\" title=\"提升\"></a>提升</h3><ul>\n<li>在代码被执行前，所有的声明，变量和函数，都会首先被处理。处理的只有“声明”，而没有“赋值”。</li>\n<li>函数提升优先于变量的提升</li>\n<li>后续的提升会覆盖此前的同名提升</li>\n</ul>\n<h3 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h3><blockquote>\n<p>闭包就是函数能够记住并访问它的词法作用域，即使当这个函数在它的词法作用域之外执行时。</p>\n</blockquote>\n<p>循环加闭包会出现面试中的经典问题：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>; i&lt;=<span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>( <span class=\"keyword\">function</span> <span class=\"title function_\">timer</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( i );</span><br><span class=\"line\">    &#125;, i*<span class=\"number\">1000</span> );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码为啥不好用？</p>\n<p>从之前关于作用域的讨论来看，每次setTimeout只是完成了函数声明，并丢进队列里而已。当定时器函数在其词法作用域外执行时，因为闭包的特点会保留有父级的作用域。而这5个函数都定义在同一个父级函数作用域内，对变量i的引用自然是同一个了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>; i&lt;=<span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    (<span class=\"keyword\">function</span>(<span class=\"params\">j</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>( <span class=\"keyword\">function</span> <span class=\"title function_\">timer</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( j );</span><br><span class=\"line\">        &#125;, j*<span class=\"number\">1000</span> );</span><br><span class=\"line\">    &#125;)( i );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>有IIFE的加持，父级作用域现在变成了每个IIFE而非for循环所在的作用域。即每个变量i来自不同的独立作用域，自然就可以得到理想的效果了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i=<span class=\"number\">1</span>; i&lt;=<span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>( <span class=\"keyword\">function</span> <span class=\"title function_\">timer</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( i );</span><br><span class=\"line\">    &#125;, i*<span class=\"number\">1000</span> );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不就是想要个块作用域嘛，使用<code>let</code>关键字后变量将不是只为循环声明一次，而是为每次迭代声明一次。每次都能得到一个新的块作用域，自然得到和IIFE一样的效果。</p>\n<h2 id=\"this与对象\"><a href=\"#this与对象\" class=\"headerlink\" title=\"this与对象\"></a><code>this</code>与对象</h2><h3 id=\"this是什么\"><a href=\"#this是什么\" class=\"headerlink\" title=\"this是什么\"></a><code>this</code>是什么</h3><p>也许JS已经入门的前端程序员们早就对this在不同环境下的不同值烂熟在心。但可能没有想过这种情况的本质：上一部分提到的<strong>JS中的this是运行时的</strong>，和作用域完全不一样。</p>\n<p>对比一下按照传统OOP理解下的JS代码，从不同的角度看，能进一步得到对this的认识：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">bar</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">bar</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( <span class=\"variable language_\">this</span>.<span class=\"property\">a</span> );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>(); <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( <span class=\"string\">&quot;foo: &quot;</span> + num );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 追踪 `foo` 被调用了多少次</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">count</span>++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo.<span class=\"property\">count</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">foo</span>( i );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// foo: 6</span></span><br><span class=\"line\"><span class=\"comment\">// foo: 7</span></span><br><span class=\"line\"><span class=\"comment\">// foo: 8</span></span><br><span class=\"line\"><span class=\"comment\">// foo: 9</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// `foo` 被调用了多少次？</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( foo.<span class=\"property\">count</span> ); <span class=\"comment\">// 0 -- 这他妈怎么回事……？</span></span><br></pre></td></tr></table></figure>\n\n<p>虽然看上去很愚蠢，但是从词法作用域的角度去理解，是不是能更清楚看到JS中<code>this</code>的特殊之处。</p>\n<h3 id=\"this豁然开朗\"><a href=\"#this豁然开朗\" class=\"headerlink\" title=\"this豁然开朗\"></a><code>this</code>豁然开朗</h3><p>根据上面的描述，<code>this</code>是根据调用点确定含义的。下面的4个规则，在准备JS面试的时候肯定都见过：</p>\n<ul>\n<li>默认绑定，独立函数调用。可以认为这种this规则是在没有其他规则适用时的默认规则。此时<code>this</code>指向全局对象，在strict mode下，<code>this</code>指向undefined。</li>\n<li>隐含绑定，调用点有一个环境对象，即作为函数方法，但是下面的情况下会回退到默认绑定，因为调用点实际位于独立函数内<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( <span class=\"variable language_\">this</span>.<span class=\"property\">a</span> );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"attr\">foo</span>: foo</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = obj.<span class=\"property\">foo</span>; <span class=\"comment\">// 函数引用！</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&quot;oops, global&quot;</span>; <span class=\"comment\">// `a`也是一个全局对象的属性</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">bar</span>(); <span class=\"comment\">// &quot;oops, global&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( <span class=\"variable language_\">this</span>.<span class=\"property\">a</span> );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">========</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">doFoo</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// `fn` 只不过 `foo` 的另一个引用</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">fn</span>(); <span class=\"comment\">// &lt;-- 调用点!</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"attr\">foo</span>: foo</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&quot;oops, global&quot;</span>; <span class=\"comment\">// `a`也是一个全局对象的属性</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">doFoo</span>( obj.<span class=\"property\">foo</span> ); <span class=\"comment\">// &quot;oops, global&quot;</span></span><br></pre></td></tr></table></figure></li>\n<li>显式绑定，<code>call</code>与<code>apply</code>可以显式attach context到函数上，使用<code>bind</code>可以避免前面那种<code>this</code>丢失的情况。</li>\n<li>new绑定，函数作为构造函数调用时，<code>this</code>指向即将返回的新对象。</li>\n</ul>\n<p>从优先级上看，new &gt; 硬绑定 &gt; 隐含绑定 &gt; 默认绑定。其中“new &gt; 硬绑定”有趣的一点是，使用<code>bind</code>在第一个后的参数实际上会作为函数的默认入参（类似于函数柯里化），如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">p1,p2</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">val</span> = p1 + p2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在这里使用 `null` 是因为在这种场景下我们不关心 `this` 的硬绑定</span></span><br><span class=\"line\"><span class=\"comment\">// 而且反正它将会被 `new` 调用覆盖掉！</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = foo.<span class=\"title function_\">bind</span>( <span class=\"literal\">null</span>, <span class=\"string\">&quot;p1&quot;</span> );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> baz = <span class=\"keyword\">new</span> <span class=\"title function_\">bar</span>( <span class=\"string\">&quot;p2&quot;</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">baz.<span class=\"property\">val</span>; <span class=\"comment\">// p1p2</span></span><br></pre></td></tr></table></figure>\n\n<p>除了上面的规则，还有一些特例：</p>\n<p>传递<code>null</code>或<code>undefined</code>给<code>call</code>，<code>apply</code>或<code>bind</code>时，那么这些值会被忽略掉，取而代之的是<strong>默认绑定</strong>规则将适用于这个调用。单纯使用apply数组化输入参数（现在已经可以用<code>[...foo]</code>了）和bind柯里化函数时常用到。</p>\n<p>不过，这么做还是有风险，建议用<code>Object.create(null)</code>创建的对象替代<code>null</code>，既能表示无意义的值，又能避免<strong>默认绑定</strong>的行为。</p>\n<p>作者给出了软绑定的工具方法，提高了硬绑定的灵活性，又避免了<strong>默认绑定</strong>的问题。逻辑是在绑定时检查<code>this</code>是否是全局对象，如果是才使用输入的<code>this</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">softBind</span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">softBind</span> = <span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> fn = <span class=\"variable language_\">this</span>,</span><br><span class=\"line\">            curried = [].<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>( <span class=\"variable language_\">arguments</span>, <span class=\"number\">1</span> ),</span><br><span class=\"line\">            bound = <span class=\"keyword\">function</span> <span class=\"title function_\">bound</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> fn.<span class=\"title function_\">apply</span>(</span><br><span class=\"line\">                    (!<span class=\"variable language_\">this</span> ||</span><br><span class=\"line\">                        (<span class=\"keyword\">typeof</span> <span class=\"variable language_\">window</span> !== <span class=\"string\">&quot;undefined&quot;</span> &amp;&amp;</span><br><span class=\"line\">                            <span class=\"variable language_\">this</span> === <span class=\"variable language_\">window</span>) ||</span><br><span class=\"line\">                        (<span class=\"keyword\">typeof</span> <span class=\"variable language_\">global</span> !== <span class=\"string\">&quot;undefined&quot;</span> &amp;&amp;</span><br><span class=\"line\">                            <span class=\"variable language_\">this</span> === <span class=\"variable language_\">global</span>)</span><br><span class=\"line\">                    ) ? obj : <span class=\"variable language_\">this</span>,</span><br><span class=\"line\">                    curried.<span class=\"property\">concat</span>.<span class=\"title function_\">apply</span>( curried, <span class=\"variable language_\">arguments</span> )</span><br><span class=\"line\">                );</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        bound.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>( fn.<span class=\"property\"><span class=\"keyword\">prototype</span></span> );</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bound;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>另外，前面提到的箭头函数具有词法<code>this</code>，等同在调用前声明<code>self = this</code>，再把<code>self</code>传入的效果。</p>\n<h3 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h3><p>内建对象中，只有<code>Date()</code>是必须要使用<code>new</code>创建的。</p>\n<p>对象的属性有两种访问方法：<code>.</code>操作符或<code>[ ]</code>操作符。不同的是<code>.</code>操作符后只能使用标识符兼容的属性名，<code>[...]</code>操作符后可以使用任何合理的UTF-8的字符串。另外，对象的属性名总是字符串，如果使用了其他类型值，会进行强制转换：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myObject = &#123; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">myObject[<span class=\"literal\">true</span>] = <span class=\"string\">&quot;foo&quot;</span>;</span><br><span class=\"line\">myObject[<span class=\"number\">3</span>] = <span class=\"string\">&quot;bar&quot;</span>;</span><br><span class=\"line\">myObject[myObject] = <span class=\"string\">&quot;baz&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">myObject[<span class=\"string\">&quot;true&quot;</span>];               <span class=\"comment\">// &quot;foo&quot;</span></span><br><span class=\"line\">myObject[<span class=\"string\">&quot;3&quot;</span>];                  <span class=\"comment\">// &quot;bar&quot;</span></span><br><span class=\"line\">myObject[<span class=\"string\">&quot;[object Object]&quot;</span>];    <span class=\"comment\">// &quot;baz&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"计算型属性名\"><a href=\"#计算型属性名\" class=\"headerlink\" title=\"计算型属性名\"></a>计算型属性名</h4><p>ES6中新增了<em>计算型属性名</em>，允许使用表达式作为一个键名称，表达式用<code>[ ]</code>括起来。像下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> prefix = <span class=\"string\">&quot;foo&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> myObject = &#123;</span><br><span class=\"line\">    [prefix + <span class=\"string\">&quot;bar&quot;</span>]: <span class=\"string\">&quot;hello&quot;</span>,</span><br><span class=\"line\">    [prefix + <span class=\"string\">&quot;baz&quot;</span>]: <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">myObject[<span class=\"string\">&quot;foobar&quot;</span>]; <span class=\"comment\">// hello</span></span><br><span class=\"line\">myObject[<span class=\"string\">&quot;foobaz&quot;</span>]; <span class=\"comment\">// world</span></span><br></pre></td></tr></table></figure>\n\n<p>深、浅复制与对象属性描述符（description），<code>writable</code>和<code>configurable</code>，<code>getOwnPropertyDescriptor()</code>与<code>defineProperty()</code>。在JS中，<code>delete</code>仅用于直接从目标对象移除该对象的（可以被移除的）属性，与释放内存并无直接关系。</p>\n<h4 id=\"Immutability\"><a href=\"#Immutability\" class=\"headerlink\" title=\"Immutability\"></a>Immutability</h4><p><strong>注意：所有这些方法创建的都是浅不可变性。也就是，它们仅影响对象和它的直属属性的性质。如果对象拥有对其他对象（数组、对象、函数等）的引用，那个对象的内容不会受影响，任然保持可变</strong>。</p>\n<p>属性描述符里的<code>writable</code>和<code>configuratable</code>限制了对属性和属性值的修改。<code>preventExtensions()</code>方法可以防止对象被添加新属性。</p>\n<ul>\n<li><code>seal()</code> &#x3D; <code>configuratable: false</code> + <code>preventExtensions()</code></li>\n<li><code>freeze()</code> &#x3D; <code>seal()</code> + <code>writable: false</code></li>\n</ul>\n<h4 id=\"getter与setter\"><a href=\"#getter与setter\" class=\"headerlink\" title=\"getter与setter\"></a>getter与setter</h4><p>除了使用<code>defineProperty</code>外，可以直接用字面量的形式，通过<code>get prop1()</code>或<code>set prop1(val)</code>的形式设置getter和setter。</p>\n<p><code>for in</code>和<code>for of</code>。</p>\n<h3 id=\"混合（淆）“类”的对象\"><a href=\"#混合（淆）“类”的对象\" class=\"headerlink\" title=\"混合（淆）“类”的对象\"></a>混合（淆）“类”的对象</h3><blockquote>\n<p>有些语言（比如Java）不给你选择，所以这根本没什么 选择性 —— 一切都是类。其他语言如C&#x2F;C++或PHP同时给你过程式和面向类的语法，在使用哪种风格合适或混合风格上，留给开发者更多选择。</p>\n</blockquote>\n<p><strong>类意味着拷贝。</strong></p>\n<p>当一个传统的类被实例化时，就发生了类的行为向实例中拷贝。当类被继承时，也发生父类的行为向子类的拷贝。多态也是拷贝行为的结果。</p>\n<p>但是：</p>\n<ul>\n<li>第一，JavaScript并<strong>不会</strong>自动地 （像类那样）在对象间创建拷贝；</li>\n<li>第二，显式mixin只能复制函数或对象的<strong>引用</strong>，而不是自身。</li>\n</ul>\n<blockquote>\n<p>正如我们在第四章讲解的，在 JavaScript 中，对于对象来说没有抽象模式&#x2F;蓝图，即没有面向类的语言中那样的称为类的东西。JavaScript 只有 对象。</p>\n<p>实际上，在所有语言中，JavaScript 几乎是独一无二的，也许是唯一的可以被称为“面向对象”的语言，因为可以根本没有类而直接创建对象的语言很少，而 JavaScript 就是其中之一。</p>\n<p>在 JavaScript 中，类不能（因为根本不存在）描述对象可以做什么。对象直接定义它自己的行为。这里 仅有 对象。</p>\n<p>总之，JavaScript中面向对象的部分和大多数OOP语言不完全一样。这使得在JS中模拟类编程将既累又会埋下很多坑。</p>\n</blockquote>\n<h3 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a>原型</h3><p>使用<code>[[get]]</code>查询属性时，也会在<code>[[prototype]]</code>链上寻找，因此修改对象属性的时候，应该注意<strong>属性遮蔽</strong>（即在<code>[[prototype]]</code>中找到）的情况。它会增加代码的复杂度和可读性，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> anotherObject = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">2</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> myObject = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>( anotherObject );</span><br><span class=\"line\"></span><br><span class=\"line\">anotherObject.<span class=\"property\">a</span>; <span class=\"comment\">// 2</span></span><br><span class=\"line\">myObject.<span class=\"property\">a</span>; <span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\">anotherObject.<span class=\"title function_\">hasOwnProperty</span>( <span class=\"string\">&quot;a&quot;</span> ); <span class=\"comment\">// true</span></span><br><span class=\"line\">myObject.<span class=\"title function_\">hasOwnProperty</span>( <span class=\"string\">&quot;a&quot;</span> ); <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\">myObject.<span class=\"property\">a</span>++; <span class=\"comment\">// 噢，隐式遮蔽！</span></span><br><span class=\"line\"></span><br><span class=\"line\">anotherObject.<span class=\"property\">a</span>; <span class=\"comment\">// 2</span></span><br><span class=\"line\">myObject.<span class=\"property\">a</span>; <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\">myObject.<span class=\"title function_\">hasOwnProperty</span>( <span class=\"string\">&quot;a&quot;</span> ); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>在<code>for in</code>循环中，同样注意用<code>hasOwnProperty()</code>排除<code>[[prototype]]</code>上的属性。</p>\n<p>所有用<code>constructor</code>构建的对象都有所指向的prototype，而在prototype中的<code>.constructor</code>又会指回<code>constructor</code>。但是这个关系是可以被覆盖的。</p>\n<h3 id=\"原型继承\"><a href=\"#原型继承\" class=\"headerlink\" title=\"原型继承\"></a>原型继承</h3><p>作者认为，JS中的对象是通过链接组织起来的。说是原型继承，实际上就是在两个原型间建立了<code>[[prototype]]</code>的关系。这个关系的建立方法很多，各有优劣。最简单的还是用ES5提供的<code>Object.create()</code>方法，对<code>__proto__</code>和<code>constructor</code>等视而不见。它的polyfill像下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"title class_\">Object</span>.<span class=\"property\">create</span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"property\">create</span> = <span class=\"keyword\">function</span>(<span class=\"params\">o</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">function</span> <span class=\"title function_\">F</span>(<span class=\"params\"></span>)&#123;&#125;</span><br><span class=\"line\">        F.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = o;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title function_\">F</span>();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>另外，<code>Object.create()</code>第一个后面的参数可以用来声明对象属性描述符，不过用得不多。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><blockquote>\n<p>虽然这些JavaScript机制看起来和传统面向类语言的“初始化类”和“类继承”类似，而在JavaScript中的关键区别是，没有拷贝发生。取而代之的是对象最终通过<code>[[Prototype]]</code>链链接在一起。</p>\n<p>相反，“委托”是一个更确切的术语，因为这些关系不是拷贝而是委托链接。</p>\n</blockquote>\n<p>从这个角度去看<code>new Foo()</code>过程中发生的事，除了返回一个新的对象外，<code>Foo()</code>还会将这个对象和<code>Foo.prototype</code>链接起来（通过指定<code>[[prototype]]</code>），<code>Foo.prototype</code>和别的对象并没有本质区别。</p>\n<h3 id=\"行为委托\"><a href=\"#行为委托\" class=\"headerlink\" title=\"行为委托\"></a>行为委托</h3><p>在上面一章提到，<code>[[prototype]]</code>是存在于对象内部的引用另一个对象的内部连接。当一个属性&#x2F;方法引用在一个对象上发生，而这样的属性&#x2F;方法又不存在时，这个链接就会被使用。在这种情况下，<code>[[Prototype]]</code>链接告诉引擎去那个被链接的对象上寻找该属性&#x2F;方法。接下来，如果那个对象也不能满足查询，就沿着它的<code>[[Prototype]]</code>查询，如此继续。这种对象间的一系列链接构成了所谓的“原形链”。</p>\n<p>其重要的实质<strong>全部在于被连接到其他对象的对象</strong>。</p>\n<p>下面是一段OLOO（链接到其他对象的对象）风格的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Task</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">setID</span>: <span class=\"keyword\">function</span>(<span class=\"params\">ID</span>) &#123; <span class=\"variable language_\">this</span>.<span class=\"property\">id</span> = <span class=\"variable constant_\">ID</span>; &#125;,</span><br><span class=\"line\">    <span class=\"attr\">outputID</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( <span class=\"variable language_\">this</span>.<span class=\"property\">id</span> ); &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使 `XYZ` 委托到 `Task`</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"variable constant_\">XYZ</span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>( <span class=\"title class_\">Task</span> );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable constant_\">XYZ</span>.<span class=\"property\">prepareTask</span> = <span class=\"keyword\">function</span>(<span class=\"params\">ID,Label</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setID</span>( <span class=\"variable constant_\">ID</span> );</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">label</span> = <span class=\"title class_\">Label</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable constant_\">XYZ</span>.<span class=\"property\">outputTaskDetails</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">outputID</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( <span class=\"variable language_\">this</span>.<span class=\"property\">label</span> );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n\n<p>它的特点在于：</p>\n<ul>\n<li>状态保留在委托者上</li>\n<li>避免<code>[[prototype]]</code>链上的重复命名</li>\n<li>行为委托用在内部实现，避免暴露在API的设计上</li>\n</ul>\n<p><strong>思维的转变</strong></p>\n<p>放弃传统OO思路在JS中的蹩脚实现（像下面这样），抓住<code>[[prototype]]</code>链接对象以及“原型链”的特殊性，可以让思路更加自然且符合JS的特点（像下面的下面那样）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Foo</span>(<span class=\"params\">who</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">me</span> = who;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Foo</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">identify</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;I am &quot;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">me</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Bar</span>(<span class=\"params\">who</span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Foo</span>.<span class=\"title function_\">call</span>( <span class=\"variable language_\">this</span>, who );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Bar</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>( <span class=\"title class_\">Foo</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Bar</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">speak</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>( <span class=\"string\">&quot;Hello, &quot;</span> + <span class=\"variable language_\">this</span>.<span class=\"title function_\">identify</span>() + <span class=\"string\">&quot;.&quot;</span> );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Bar</span>( <span class=\"string\">&quot;b1&quot;</span> );</span><br><span class=\"line\"><span class=\"keyword\">var</span> b2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Bar</span>( <span class=\"string\">&quot;b2&quot;</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">b1.<span class=\"title function_\">speak</span>();</span><br><span class=\"line\">b2.<span class=\"title function_\">speak</span>();</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Foo</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">init</span>: <span class=\"keyword\">function</span>(<span class=\"params\">who</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">me</span> = who;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">identify</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;I am &quot;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">me</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Bar</span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>( <span class=\"title class_\">Foo</span> );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Bar</span>.<span class=\"property\">speak</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>( <span class=\"string\">&quot;Hello, &quot;</span> + <span class=\"variable language_\">this</span>.<span class=\"title function_\">identify</span>() + <span class=\"string\">&quot;.&quot;</span> );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b1 = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>( <span class=\"title class_\">Bar</span> );</span><br><span class=\"line\">b1.<span class=\"title function_\">init</span>( <span class=\"string\">&quot;b1&quot;</span> );</span><br><span class=\"line\"><span class=\"keyword\">var</span> b2 = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>( <span class=\"title class_\">Bar</span> );</span><br><span class=\"line\">b2.<span class=\"title function_\">init</span>( <span class=\"string\">&quot;b2&quot;</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">b1.<span class=\"title function_\">speak</span>();</span><br><span class=\"line\">b2.<span class=\"title function_\">speak</span>();</span><br></pre></td></tr></table></figure>\n\n<p>在这种委托的思路下，不存在严格的父子关系，甚至不存在继承和类的说法。全程通过<code>Object.create()</code>建立起对象和对象的联系，连<code>new</code>也是不建议使用的。</p>\n<p>但是这种思路也有个明显的问题，“子类”没法定义“父类”的同名方法，因为整个程序建立在<code>[[prototype]]</code>联系的基础上，重复命名将会隔断连接。</p>\n<p>作者并不推荐匿名函数的使用，认为：1，追踪调试栈困难；2，难以自引用；3，代码变得不好理解。这点上我是保留意见的。</p>\n<h3 id=\"类型自省\"><a href=\"#类型自省\" class=\"headerlink\" title=\"类型自省\"></a>类型自省</h3><p>类型自省即<code>instanceof</code>，而这个操作符是依赖于<code>[[prototype]]</code>中的constructor属性的，这个属性除了不可枚举外，相较其他属性并没有特别之处。重写或者<code>[[prototype]]</code>的改变就可以改变它。因此，<code>instanceof</code>在很多情况下可能并不会那么可靠。</p>\n<p>使用鸭子类型的类型自省就更加不可靠了。</p>\n<p>在作者提出的OLOO范式中，采取<code>isPrototypeOf()</code>和<code>Object.getPrototypeOf()</code>进行类型自省。</p>\n<h3 id=\"新的class关键字\"><a href=\"#新的class关键字\" class=\"headerlink\" title=\"新的class关键字\"></a>新的<code>class</code>关键字</h3><p>为了便于“类”思维编程者，<code>class</code>可以说是一大福音。</p>\n<ul>\n<li>不再有<code>.prototype</code>的困扰</li>\n<li><code>extends</code>一键式继承</li>\n<li><code>super</code>对多态的支持</li>\n<li>语法上使用更加贴近OOP语言</li>\n</ul>\n<p>但实际上，这里的<code>class</code>只是语法糖，它还是没实现从类（“蓝图”）到实例（“建筑”）以及从父类到子类的复制，还建立在<code>[[prototype]]</code>的基础上。<a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1ed-zh-CN/this%20%26%20object%20prototypes/apA.md\">原文</a>给出了很多例子说明这点。</p>\n<blockquote>\n<p>在传统面向类的语言中，你从不会在晚些时候调整类的定义，所以类设计模式不提供这样的能力。但是JS的一个最强大的部分就是它是动态的，而且任何对象的定义都是（除非你将它设定为不可变）不固定的可变的东西。</p>\n</blockquote>\n<blockquote>\n<p>换句话说，class 好像在告诉你：“动态太坏了，所以这可能不是一个好主意。这里有看似静态语法，把你的东西静态编码。”</p>\n<p>关于 JavaScript 的评论是多么悲伤啊：动态太难了，让我们假装成（但实际上不是！）静态吧。</p>\n</blockquote>\n",
            "tags": [
                "读书笔记",
                "JavaScript"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2017/10/15/cycle-js-introduction/",
            "url": "http://shenlvmeng.github.com/blog/2017/10/15/cycle-js-introduction/",
            "title": "cycle.js介绍",
            "date_published": "2017-10-15T07:29:52.000Z",
            "content_html": "<blockquote>\n<p>下面的内容主要来自<a href=\"https://egghead.io/courses/cycle-js-fundamentals\">作者André Staltz的egghead.io</a></p>\n</blockquote>\n<div style=\"width: 50%;margin: 0 auto;\">![cycle-flow](http://ow5o14n5d.bkt.clouddn.com/blogcycle-flow.svg)</div>\n\n<h2 id=\"设计\"><a href=\"#设计\" class=\"headerlink\" title=\"设计\"></a>设计</h2><p>cycle.js设计上有三个特点：</p>\n<ul>\n<li>万物都是Stream（collections + <strong>时间</strong>）</li>\n<li>Logic和Effect分离（借助<code>main</code>和<code>drivers</code>）</li>\n<li>app是纯数据流（data flow）</li>\n</ul>\n<p>第一部分正如<a href=\"https://shenlvmeng.github.io/blog/2017/08/14/rxjs-brief/\">RxJS中介绍</a>的一样，可以用Observable建模。</p>\n<p>第二部分中，logic是数学相关的东西，是抽象的。effects则是影响实际世界的效应（如DOM、HTTP等），是实际的。将两者更好地分离开来是Cycle.js的设计初衷。而logic纯函数的特点优势也是很明显的（无副作用）。</p>\n<p>上面的两部分在Cycle.js中，借助xstream, RxJS等Reactive Programming的库，以main和driver函数来实现。其中<code>main</code>实现逻辑、生产数据，<code>driver</code>订阅消费数据，交由cycle.js制造Effect。<a href=\"http://lmatteis.github.io/cyclejs-slides/keynote/assets/player/KeynoteDHTMLPlayer.html#60\">这里</a>有一个浅显易懂的例子。</p>\n<p>除了简单的DOM Effect外，还有HTTP请求等。交给不同的drivers完成就行了。这一点上和<a href=\"https://shenlvmeng.github.io/blog/2017/06/19/elm-introduction/#Effects\">Elm设计</a>很像。</p>\n<p>对比流行的React、Angular、Vue，组件化的设计模式当然也涉及到。文档的<a href=\"https://cycle.js.org/components.html\">Components</a>部分讲得很清楚：</p>\n<blockquote>\n<p>Any Cycle.js app can be reused as a component in a larger Cycle.js app.</p>\n</blockquote>\n<p>即任何一个Cycle.js的应用都可以直接重用成更大应用的一个组件，无需额外的操作。原因很简单，任何一个logic都是在<code>main</code>函数中完成的，这也是开发者唯一需要做的事。而这个函数接收的<code>sources</code>以及返回给Cycle.js的<code>sinks</code>都是一个包含DOM、HTTP等stream的对象，且键值对都一样，可以看下面这张图更好理解：</p>\n<div style=\"width: 50%;margin: 0 auto;\">![cycle.js component](https://cycle.js.org/img/dataflow-component.svg)</div>\n\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>完全可以在main中生产多种数据，作为对象返回，交给不同driver的得到不一样的effects。将main中数据交给driver的过程抽象在run函数中，完成数据生产和订阅的过程。这个过程并不复杂。下面是一个简陋的实现。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">run</span>(<span class=\"params\">mainFn, drivers</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> sinks = <span class=\"title function_\">mainFn</span>();</span><br><span class=\"line\">  <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(drivers).<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span> (sinks[key]) &#123;</span><br><span class=\"line\">  \t  drivers[key](sinks[key]);</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">run</span>(main, &#123;</span><br><span class=\"line\">  <span class=\"attr\">DOM</span>: domDriver,</span><br><span class=\"line\">  <span class=\"attr\">other</span>: otherDriver</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>上面的实现手法只实现了单向的从逻辑到Effects的映射过程，要完成相反的从实际世界到逻辑的过程，需要读取外界的事件。要这么做，不仅main函数需要可以接受入参<code>sources</code>，生产Effects的drivers也要能够返回main需要的<code>sources</code>。类似地，sources的类型可以是DOM或者其他的合法input。同时，连接两者的<code>run</code>函数会遇到循环的问题，driver的入参和出参正好是main的出参和入参，这也是<strong>Cycle</strong>一词的来源。解决办法是先fake一个的初始数据流，得到Effects后，再用Effects初始化main，最后用main替换fake的数据流即可。</p>\n<p>继续改造<code>run</code>函数，考虑到driver有多种类型，需要事先为所有driver都使用fakeSinks。在构造好drivers后，使用drivers的返回，构造main。最后用<code>imitate</code>替代掉fakeSinks即可。这就是Cycle.js核心部分run的设计思路，实际上，run部分的代码也只有一百余行。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">run</span>(<span class=\"params\">mainFn, drivers</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fakeSinks = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(drivers).<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">    fakeSinks[key] = xs.<span class=\"title function_\">create</span>();</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> sources = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(drivers).<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">    sources[key] = drivers[key](fakeSinks[key]);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> sinks = <span class=\"title function_\">mainFn</span>(sources);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(sinks).<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">    fakeSinks[key].<span class=\"title function_\">imitate</span>(sinks[key];)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>除了run，drivers也是Cycle.js设计的重要部分。它需要能够根据main逻辑的描述灵活地生成对应的Effects。如DOM，在main逻辑中声明所需的DOM结构，对应地，在domDriver中，根据结构生成实际的DOM元素（不论是使用createElement还是vDOM）。</p>\n<p>不过仅仅在main逻辑中描述DOM结构是不够的，逻辑上还应该包括如何响应Effects的输入。类似地，这部分应该从driver中的hardcode抽离出来，由main声明，driver实现。类似下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">main</span>(<span class=\"params\">sources</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> events$ = sources.<span class=\"property\">DOM</span>.<span class=\"title function_\">selectEvents</span>(<span class=\"string\">&#x27;span&#x27;</span>, <span class=\"string\">&#x27;click&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">DOM</span>: events$.<span class=\"title function_\">startWith</span>(<span class=\"literal\">null</span>).<span class=\"title function_\">map</span>(</span><br><span class=\"line\">      xs.<span class=\"title function_\">periodic</span>(<span class=\"number\">1000</span>)</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    ).<span class=\"title function_\">flatten</span>()</span><br><span class=\"line\">    .<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">i</span> =&gt;</span> (&#123;</span><br><span class=\"line\">      <span class=\"attr\">tagName</span>: <span class=\"string\">&#x27;H1&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">children</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"attr\">tagName</span>: <span class=\"string\">&#x27;SPAN&#x27;</span>,</span><br><span class=\"line\">          <span class=\"attr\">children</span>:[<span class=\"string\">`Seconds elapsed: <span class=\"subst\">$&#123;i&#125;</span>`</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的DOM结构可以进一步抽象函数，便于代码书写。另外，Cycle.js中使用makeDOMDriver的方式是为了显示声明DOM容器名，避免hardcode在driver中。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">h</span>(<span class=\"params\">tagName, children</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    tagName,</span><br><span class=\"line\">    children</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">h1</span>(<span class=\"params\">children</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">tagName</span>: <span class=\"string\">&#x27;H1&#x27;</span>,</span><br><span class=\"line\">    children</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">span</span>(<span class=\"params\">children</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">tagName</span>: <span class=\"string\">&#x27;SPAN&#x27;</span>,</span><br><span class=\"line\">    children</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">.<span class=\"title function_\">map</span>(</span><br><span class=\"line\">  <span class=\"title function_\">h1</span>([</span><br><span class=\"line\">    <span class=\"title function_\">span</span>([<span class=\"string\">`Seconds elapsed: <span class=\"subst\">$&#123;i&#125;</span>`</span>])</span><br><span class=\"line\">  ])</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>习惯了上面的思考方式后，可以考虑如何使用Cycle.js的问题了。通常情况下，一个空白的Cycle.js的脚手架像下面这样（使用UMD方案时）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; makeDOMDriver &#125; = <span class=\"title class_\">CycleDOM</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">main</span>(<span class=\"params\">sources</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// TODO</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> drivers = &#123;</span><br><span class=\"line\">  <span class=\"attr\">DOM</span>: <span class=\"title function_\">makeDOMDriver</span>(<span class=\"string\">&#x27;#app&#x27;</span>),</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Cycle</span>.<span class=\"title function_\">run</span>(main, drivers);</span><br></pre></td></tr></table></figure>\n\n<p>结合HTML内容的声明和用户输入事件的读取，可以得到下面的结果：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; div, label, input, hr, h1, makeDOMDriver &#125; = <span class=\"title class_\">CycleDOM</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">main</span>(<span class=\"params\">sources</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// &#x27;&#x27;---------------&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">// div--------------&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> input$ = sources.<span class=\"property\">DOM</span>.<span class=\"title function_\">select</span>(<span class=\"string\">&#x27;.name&#x27;</span>).<span class=\"title function_\">events</span>(<span class=\"string\">&#x27;change&#x27;</span>)；</span><br><span class=\"line\">  <span class=\"keyword\">const</span> name$ = input$.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">ev</span> =&gt;</span> ev.<span class=\"property\">target</span>.<span class=\"property\">value</span>).<span class=\"title function_\">startWidth</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">  \t<span class=\"attr\">DOM</span>: name$.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">name</span> =&gt;</span></span><br><span class=\"line\">  \t  <span class=\"title function_\">div</span>([</span><br><span class=\"line\">  \t  \t<span class=\"title function_\">label</span>([<span class=\"string\">&#x27;Name: &#x27;</span>]),</span><br><span class=\"line\">  \t  \t<span class=\"title function_\">input</span>(<span class=\"string\">&#x27;.name&#x27;</span>, &#123;<span class=\"attr\">attrs</span>: &#123;<span class=\"attr\">type</span>: <span class=\"string\">&#x27;text&#x27;</span>&#125;&#125;),</span><br><span class=\"line\">  \t  \t<span class=\"title function_\">hr</span>(),</span><br><span class=\"line\">  \t  \t<span class=\"title function_\">h1</span>(<span class=\"string\">`Hello <span class=\"subst\">$&#123;name&#125;</span>!`</span>)</span><br><span class=\"line\">  \t  ])</span><br><span class=\"line\">  \t)</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> drivers = &#123;</span><br><span class=\"line\">  <span class=\"attr\">DOM</span>: <span class=\"title function_\">makeDOMDriver</span>(<span class=\"string\">&#x27;#app&#x27;</span>),</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Cycle</span>.<span class=\"title function_\">run</span>(main, drivers);</span><br></pre></td></tr></table></figure>\n\n<p>其中要格外注意的是，<code>name$</code>需要有<code>startWith</code>才能有流的起始数据，从而初始化真实DOM。</p>\n<p>结合灵活的流操作符，如<code>merge</code>, <code>fold</code>等，可以实现更加复杂点的应用，如官网给出的<a href=\"https://cycle.js.org/basic-examples.html#basic-examples-increment-a-counter\">计数器</a></p>\n<p>除了DOMDriver，HTTPDriver也是很常用的一种Driver，可以借助它实现HTTP的request和response的响应。如官网给的<a href=\"https://cycle.js.org/basic-examples.html#basic-examples-http-requests\">样例</a></p>\n<h3 id=\"MVI\"><a href=\"#MVI\" class=\"headerlink\" title=\"MVI\"></a>MVI</h3><div style=\"width:70%;margin: 0 auto;\">![MVI模型](http://ow5o14n5d.bkt.clouddn.com/cycle-mvi.svg)</div>\n\n<p>MVI（Model-View-Intent）是Cycle.js提出的编程范式，可以将main的内容拆分成三部分，</p>\n<ul>\n<li>第一部分Intent将Effects传递过来的事件转换成Model逻辑可以接受的类型，</li>\n<li>第二部分Model实现具体逻辑，即state的改动</li>\n<li>最终由View部分将逻辑转换成DOMDriver可以接受的数据流传递到最后的vdom。</li>\n</ul>\n<p>使用这种方式拆分后的代码实际上类似<code>view(model(intent(sources.DOM)))</code>。如文档中<a href=\"https://cycle.js.org/model-view-intent.html\">介绍</a>的那样。</p>\n<p>关于组件拆分和<strong>isolate</strong>，可以参看文档的<a href=\"https://cycle.js.org/components.html#components-isolating-multiple-instances\">Components</a>部分。另外，在Cycle.js的状态管理工具<a href=\"https://github.com/staltz/cycle-onionify\">cycle-onionify</a>中也用到了<code>isolate</code>，使用<code>isolate</code>可以保证组件间的stream、状态相互独立。</p>\n<h2 id=\"xstream\"><a href=\"#xstream\" class=\"headerlink\" title=\"xstream\"></a>xstream</h2><p>万物皆Stream的概念是需要额外的库支持的。因此没有接触过RxJS的建议先学习一下这种思路。</p>\n<p>Cycle.js允许使用RxJS等多种Reactive Programming库构造响应式的流结构，不过推荐针对Cycle.js定制的<a href=\"https://staltz.com/xstream/\">xstream</a>。xstream学习成本简单，API仅有26个，此外文件体积小，速度适中。熟悉RxJS后，学习xstream就更简单了。</p>\n<p>xstream的API分为<strong>Factories</strong>和<strong>Operators</strong>。前者通过Producer或合并等方式生产新的Stream，后者是Stream的相关方法。</p>\n<p>学习xstream了解4个概念就足够了（如果你已经熟悉RxJS的思想后），<strong>Stream</strong>, <strong>Listener</strong>, <strong>Producer</strong>, <strong>MemoryStream</strong>。</p>\n<ul>\n<li><strong>Stream</strong>，类似EventEmitter和RxJS中的Subject，一个Stream可以注册多个Listener，Stream上有event出现时，所有Listener都会收到通知。除此之外，Stream可以通过<strong>operators</strong>生产新的Stream，如<code>fold</code>, <code>map</code>等。可以使用<code>shamefullySend*</code>手动触发event，但是应避免使用这种方式</li>\n<li><strong>Listener</strong>，和RxJS中的Observer类似，是有<code>next</code>, <code>error</code>, <code>complete</code>三种状态的对象，用来处理stream的三种event。通过<code>addListener</code>和<code>removeListener</code>和Stream建立联系。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> listener = &#123;</span><br><span class=\"line\">  <span class=\"attr\">next</span>: <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;The Stream gave me a value: &#x27;</span>, value);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">error</span>: <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;The Stream gave me an error: &#x27;</span>, err);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">complete</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;The Stream told me it is done.&#x27;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><strong>Producer</strong>，生产Stream所需的event。xstream使用<code>create(producer)</code>等方法生产Stream。一个Producer只能绑定一个Stream。Producer本身拥有<code>start</code>和<code>stop</code>便于在没有Listener监听时停止工作。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">var</span> producer = &#123;</span><br><span class=\"line\">  <span class=\"attr\">start</span>: <span class=\"keyword\">function</span> (<span class=\"params\">listener</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">id</span> = <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> listener.<span class=\"title function_\">next</span>(<span class=\"string\">&#x27;yo&#x27;</span>), <span class=\"number\">1000</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">stop</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">clearInterval</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">id</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><strong>MemoryStream</strong>，和Stream不同的是会记录最后一次的event信息。类似RxJS里的BehaviorSubject。</li>\n</ul>\n<p>生产Stream的函数有下面这些：</p>\n<ul>\n<li><code>create(producer)</code>和<code>createWithMemory(producer)</code></li>\n<li><code>never()</code> 生产不产生event的Stream</li>\n<li><code>empty()</code> 生产立即结束的Stream</li>\n<li><code>error(error)</code> 生产立即错误的Stream</li>\n<li><code>from(input)</code> 通过数组、Promise、Observable等生产Stream</li>\n<li><code>of(a1,a2,a3)</code> 生产根据输入产生的一系列event</li>\n<li><code>fromArray(array)</code>, <code>fromPromise(promise)</code>, <code>fromObservable(observable)</code></li>\n<li><code>periodic(period)</code> 周期性产生递增的数</li>\n<li><code>merge(s1, s2)</code> 合并两个流</li>\n<li><code>combine(s1, s2)</code> 合并两个流中的值</li>\n</ul>\n<p>Stream的相关方法有：</p>\n<ul>\n<li><code>addListener(listener)</code>和<code>removeListener(listener)</code></li>\n<li><code>subscribe(listener)</code>注册listener返回remove的函数</li>\n<li><code>map(project)</code>和<code>mapTo(projectedValue)</code> 映射event中的值</li>\n<li><code>filter(passes)</code> 过滤</li>\n<li><code>take(amount)</code> 限制Stream的event数目</li>\n<li><code>drop(amount)</code> 忽略前<code>amount</code>次的event数目</li>\n<li><code>last()</code> 只释放最后一次event</li>\n<li><code>startWith(initialValue)</code> 以给定值开始</li>\n<li><code>endWhen(other)</code> 使用其他Stream决定是否完成当前Stream</li>\n<li><code>fold(accumulate, seed)</code> 以给定值开始累加</li>\n<li><code>replaceError(replace)</code> 取代一个流中的所有error</li>\n<li><code>flatten()</code> 将streams的Stream压缩为一个Stream，输出流中的数据只来自于当前Stream</li>\n<li><code>compose(operator)</code></li>\n<li><code>remember()</code> 缓存最后一个值</li>\n<li><code>debug(labelOrSpy)</code> 不修改流，便于debug</li>\n<li><code>imitate(target)</code> 使用给定流替换原有Stream</li>\n<li><code>shamefullySendNext/Error/Complete</code></li>\n</ul>\n<p>另外一些实用的Stream相关方法，在extra部分中引入，包括如下</p>\n<ul>\n<li><code>buffer(separator)</code> 缓存部分内容一同输出，输出时机由输入的Stream决定</li>\n<li><code>concat(s1, s2, ..., sn)</code> 将Stream按照参数顺序从前到后连接起来</li>\n<li><code>debounce(period)</code>和<code>throttle(period)</code> 防抖和节流</li>\n<li><code>delay(period)</code> 时延</li>\n<li><code>dropRepeats(isEquals)</code> 丢掉邻接的重复数据</li>\n<li><code>dropUntil(other)</code> 根据其他Stream决定该Stream的开始时机</li>\n<li><code>flattenConcurrently()</code> 类似<code>flatten()</code>，不过流中的数据根据时间merge，<code>flattenSequentially()</code>类似，将Stream先后连接</li>\n<li><code>fromDiagram(diagram, options)</code> 通过图表创建Stream</li>\n<li><code>fromEvent(element, eventName, useCapture)</code> 通过DOM事件创建Stream</li>\n<li><code>pairwise()</code> 和上一个值成对组成event的值</li>\n<li><code>sampleCombine(streams)</code> source流和其他发生时间最近的流event相组合</li>\n<li><code>split(separator)</code> 类似<code>buffer</code>，将stream拆分为释放streams的Stream</li>\n<li><code>tween(config)</code> 根据配置创建缓动函数，用于制作动画</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://github.com/cyclejs-community/awesome-cyclejs\">cyclejs-community&#x2F;awesome-cyclejs: A curated list of awesome Cycle.js resources</a></li>\n</ul>\n",
            "tags": [
                "Reactive Programming",
                "JavaScript",
                "Cycle.js"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2017/08/14/rxjs-brief/",
            "url": "http://shenlvmeng.github.com/blog/2017/08/14/rxjs-brief/",
            "title": "RxJS 真·简介",
            "date_published": "2017-08-14T12:32:18.000Z",
            "content_html": "<blockquote>\n<p>本文来自RxJS文档的<a href=\"http://reactivex.io/rxjs/manual/overview.html\">Overview</a>。</p>\n</blockquote>\n<p>RxJS是Reactive系列的JS版本。它有着下面一些概念。对它们有所理解将让你能得心应手地使用RxJS。</p>\n<h2 id=\"Observable\"><a href=\"#Observable\" class=\"headerlink\" title=\"Observable\"></a>Observable</h2><ul>\n<li>Observable类似函数定义（回调），Observer类似调用函数</li>\n<li>Observable可以同步或是异步返回值</li>\n<li>Observable在生命周期里可以返回多个值</li>\n</ul>\n<p>Observable有创建（create）、订阅（subscribe）、执行（execute）、析构（dispose）四步。在订阅后，通过<code>create</code>方法创建的Observable体会立即得到执行（不论是同步或是异步内容），同时，传入<code>create</code>的回调函数中可以向Observer调用<code>next</code>，<code>error</code>，<code>complete</code>方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"title function_\">create</span>(<span class=\"keyword\">function</span> (<span class=\"params\">observer</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Hello&#x27;</span>);</span><br><span class=\"line\">  observer.<span class=\"title function_\">next</span>(<span class=\"number\">42</span>);</span><br><span class=\"line\">  observer.<span class=\"title function_\">next</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\">  observer.<span class=\"title function_\">next</span>(<span class=\"number\">200</span>);</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    observer.<span class=\"title function_\">next</span>(<span class=\"number\">300</span>); <span class=\"comment\">// happens asynchronously</span></span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;before&#x27;</span>);</span><br><span class=\"line\">foo.<span class=\"title function_\">subscribe</span>(<span class=\"keyword\">function</span> (<span class=\"params\">x</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;after&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Observer\"><a href=\"#Observer\" class=\"headerlink\" title=\"Observer\"></a>Observer</h2><blockquote>\n<p>Observers只是有<code>next</code>,<code>error</code>,<code>complete</code>三个回调的对象，这三个回调分别用来处理Observable传递的三种不同的状态</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> observer = &#123;</span><br><span class=\"line\">  <span class=\"attr\">next</span>: <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Observer got a next value: &#x27;</span> + x),</span><br><span class=\"line\">  <span class=\"attr\">error</span>: <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;Observer got an error: &#x27;</span> + err),</span><br><span class=\"line\">  <span class=\"attr\">complete</span>: <span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Observer got a complete notification&#x27;</span>),</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Subscription\"><a href=\"#Subscription\" class=\"headerlink\" title=\"Subscription\"></a>Subscription</h2><blockquote>\n<p>Subscription表述了Observable的执行过程。但是主要提供<code>unsubscribe()</code>方法取消Observable执行</p>\n</blockquote>\n<p>主要由<code>Observable</code>的<code>subscribe</code>方法创建，当然还有<code>add()</code>和<code>remove()</code>方法组合subscription。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> observable1 = <span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"title function_\">interval</span>(<span class=\"number\">400</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> observable2 = <span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"title function_\">interval</span>(<span class=\"number\">300</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> subscription = observable1.<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;first: &#x27;</span> + x));</span><br><span class=\"line\"><span class=\"keyword\">var</span> childSubscription = observable2.<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;second: &#x27;</span> + x));</span><br><span class=\"line\"></span><br><span class=\"line\">subscription.<span class=\"title function_\">add</span>(childSubscription);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Unsubscribes BOTH subscription and childSubscription</span></span><br><span class=\"line\">  subscription.<span class=\"title function_\">unsubscribe</span>();</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Subject\"><a href=\"#Subject\" class=\"headerlink\" title=\"Subject\"></a>Subject</h2><blockquote>\n<p>Subject是一个广播的Observable（类似<strong>EventEmitter</strong>），它既是Observable又是Observer，既有next方法，又有处理next的回调。</p>\n</blockquote>\n<p>和<code>Observable</code>本质的不同是，</p>\n<ul>\n<li><code>Subject</code><strong>注册多个</strong>回调，<code>Observable</code><strong>指定一个</strong>回调</li>\n<li>回调触发时机上，<code>Subject</code>通过特定时机触发（即<code>Subject.next</code>），<code>Observable</code>在回调定义后立即触发（即<code>subscribe</code>后）</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> subject = <span class=\"keyword\">new</span> <span class=\"title class_\">Rx</span>.<span class=\"title class_\">Subject</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">subject.<span class=\"title function_\">subscribe</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">next</span>: <span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;observerA: &#x27;</span> + v)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">subject.<span class=\"title function_\">subscribe</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">next</span>: <span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;observerB: &#x27;</span> + v)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">subject.<span class=\"title function_\">next</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">subject.<span class=\"title function_\">next</span>(<span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n\n<p>Subject又可细分成<code>BehaviorSubject</code>, <code>ReplaySubject</code>, <code>AsyncSubject</code></p>\n<ul>\n<li>使用<code>refCount()</code>替代<code>connect()</code>完成multicasted Observable的自动绑定</li>\n</ul>\n<h3 id=\"BehaviorSubject\"><a href=\"#BehaviorSubject\" class=\"headerlink\" title=\"BehaviorSubject\"></a>BehaviorSubject</h3><p>存储了释放给消费者的最后一个值。在新消费者订阅时会自动下发。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> subject = <span class=\"keyword\">new</span> <span class=\"title class_\">Rx</span>.<span class=\"title class_\">BehaviorSubject</span>(<span class=\"number\">0</span>); <span class=\"comment\">// 0 is the initial value</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ReplaySubject\"><a href=\"#ReplaySubject\" class=\"headerlink\" title=\"ReplaySubject\"></a>ReplaySubject</h3><p>存储之前释放给消费者的一组值。在新消费者订阅时会自动下发。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> subject = <span class=\"keyword\">new</span> <span class=\"title class_\">Rx</span>.<span class=\"title class_\">ReplaySubject</span>(<span class=\"number\">100</span>, <span class=\"number\">500</span> <span class=\"comment\">/* windowTime */</span>);</span><br></pre></td></tr></table></figure>\n\n<p>第二个参数描述数据的过期时间</p>\n<h3 id=\"AsyncSubject\"><a href=\"#AsyncSubject\" class=\"headerlink\" title=\"AsyncSubject\"></a>AsyncSubject</h3><p><strong>只存储</strong>最后一次释放的值，并<strong>在<code>complete</code>状态后</strong>下发给消费者</p>\n<h2 id=\"Operator\"><a href=\"#Operator\" class=\"headerlink\" title=\"Operator\"></a>Operator</h2><blockquote>\n<p>RxJS的核心概念，读入一个Observable返回一个全新的Observable，是<strong>纯函数</strong></p>\n</blockquote>\n<p>Operator分为两类：</p>\n<ul>\n<li>instance operator 用来对已有Operator链式调用进行改造，是纯函数，如<code>.map()</code></li>\n<li>static operator 用来从JS原始值中构造Observable，如<code>.of()</code>，<code>.from()</code>等</li>\n</ul>\n<p>RxJS提供的Operator非常多，以至于文档写了个<a href=\"http://reactivex.io/rxjs/manual/overview.html#choose-an-operator\">小程序</a>帮助你选择你想要的Operator。借助宝石图(marble diagram)，可以更好理解各operator。</p>\n<h2 id=\"Scheduler\"><a href=\"#Scheduler\" class=\"headerlink\" title=\"Scheduler\"></a>Scheduler</h2><blockquote>\n<p>Scheduler允许你定义Observable发布消息给Observer的执行环境，具体来说如存储tasks，执行任务的时机和顺序，同步&#x2F;异步等。</p>\n</blockquote>\n<p>选择上，有<code>Rx.Scheduler.queue</code>（当前事件帧）, <code>Rx.Scheduler.asap</code>（microtasks queue）, <code>Rx.Scheduler.async</code>（setInterval）。static operator通常使用Scheduler，通过<code>observeOn</code>和<code>subscribeOn</code>两种方法指定。instance operator可以使用一个Scheduler。</p>\n<p>现在可以跟着<a href=\"http://reactivex.io/rxjs/manual/tutorial.html\">Tutorial</a>使用起RxJS了。Enjoy~</p>\n",
            "tags": [
                "JavaScript",
                "响应式编程",
                "RxJS"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2017/07/27/interview-algorithm-md/",
            "url": "http://shenlvmeng.github.com/blog/2017/07/27/interview-algorithm-md/",
            "title": "《剑指Offer》JavaScript版解决方案",
            "date_published": "2017-07-27T11:52:57.000Z",
            "content_html": "<p>问题全部来自《剑指Offer》，顺序一致。</p>\n<h2 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h2><p>1.使用字面量声明对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Singleton</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">prop1</span>: <span class=\"string\">&quot;prop1&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">prop2</span>: <span class=\"string\">&quot;prop2&quot;</span></span><br><span class=\"line\">  <span class=\"title function_\">method1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;I am a method.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或者通过闭包封装自己的私有变量和方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Singleton</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> privateProp = <span class=\"string\">&quot;You can&#x27;t see me&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">privateMethod</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;You can&#x27;t see me either.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">publicProp</span>: <span class=\"string\">`<span class=\"subst\">$&#123;privateProp&#125;</span>!`</span>,</span><br><span class=\"line\">    <span class=\"title function_\">publicMethod</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"title function_\">privateMethod</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.利用闭包</p>\n<p>本质上和上面的方法类似</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Singleton</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> instance;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">init</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">prop</span>: <span class=\"string\">&quot;prop&quot;</span>,</span><br><span class=\"line\">      <span class=\"title function_\">method</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;I am a method.&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">getInstance</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// JS单线程，不考虑锁的问题</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!instance) &#123;</span><br><span class=\"line\">        instance = <span class=\"title function_\">init</span>();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>还有一个酷炫的变种，不过是上面的构造函数写法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Singleton</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> instance = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">prop</span> = <span class=\"string\">&quot;prop&quot;</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">method</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;I am a method.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">Singleton</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.借助构造函数和JS中函数也是对象的特点</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Singleton</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 这里不取名为instance也可以</span></span><br><span class=\"line\">  <span class=\"comment\">// 显式返回this</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"title class_\">Singleton</span>.<span class=\"property\">instance</span> === <span class=\"string\">&quot;object&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Singleton</span>.<span class=\"property\">instance</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 成员和方法</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">prop</span> = <span class=\"string\">&quot;prop&quot;</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">method</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;I am a method.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">Singleton</span>.<span class=\"property\">instance</span> = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//隐式返回this</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"http://www.cnblogs.com/TomXu/archive/2012/02/20/2352817.html\">参考</a></p>\n<h2 id=\"找出数组中重复的数字\"><a href=\"#找出数组中重复的数字\" class=\"headerlink\" title=\"找出数组中重复的数字\"></a>找出数组中重复的数字</h2><p><strong>Set</strong>，使用ES6内建的数据结构。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mySet = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>();</span><br><span class=\"line\">arr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">val, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (mySet.<span class=\"title function_\">has</span>(val)) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(val);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    mySet.<span class=\"title function_\">add</span>(val);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>Object</strong>或<strong>Array</strong>（空间复杂度O(n)），换汤不换药，略。</p>\n<p><strong>传统方法</strong>，时间复杂度O(n)，空间复杂度O(1)。交换当前元素和当前索引对应的元素，直到两者相等。（请参考原书中的前提，数字都在0~n-1之间）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">findDuplicate</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 边界检测</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!arr || arr.<span class=\"property\">length</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, len = arr.<span class=\"property\">length</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 循环交换元素直到arr[i] == i</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (arr[i] != i) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arr[i] === arr[arr[i]]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr[i];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 交换</span></span><br><span class=\"line\">      [arr[i], arr[arr[i]]] = [arr[arr[i]], arr[i]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>传统方法，且不修改数组</strong>，利用折半查找，递归寻找重复的元素。时间复杂度O(nlogn)，空间复杂度O(1)。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">findDuplicate</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 边界检测</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!arr || arr.<span class=\"property\">length</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">countRange</span> (arr, start, end) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &gt; end) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (start === end) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> start;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> split = (start + end) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> count = arr.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">last, val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> last + +(val &gt;= start &amp;&amp; val &lt;= split);</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (count &gt; split - start + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">countRange</span>(arr, start, split);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">countRange</span>(arr, split + <span class=\"number\">1</span>, end);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">countRange</span>(arr, <span class=\"number\">0</span>, arr.<span class=\"property\">length</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二维数组中的查找\"><a href=\"#二维数组中的查找\" class=\"headerlink\" title=\"二维数组中的查找\"></a>二维数组中的查找</h2><p><strong>前提</strong>：数组的每一行和每一列都递增</p>\n<p>贪婪算法，从右上角开始。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">find</span>(<span class=\"params\">arr, val</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!arr || !arr.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> [rows, columns] = [arr.<span class=\"property\">length</span>, arr[<span class=\"number\">0</span>].<span class=\"property\">length</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!rows || !columns) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> [x, y] = [columns-<span class=\"number\">1</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(x &gt; <span class=\"number\">0</span> &amp;&amp; y &lt; rows) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[y][x] === val) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr[y][x] &gt; val) &#123;</span><br><span class=\"line\">      x--;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      y++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"替换字符串中的空格\"><a href=\"#替换字符串中的空格\" class=\"headerlink\" title=\"替换字符串中的空格\"></a>替换字符串中的空格</h2><p>JavaScript中很好实现，可以直接使用库函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">replace</span>(<span class=\"params\">str</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str.<span class=\"title function_\">replace</span>(<span class=\"string\">&quot; &quot;</span>, <span class=\"string\">&quot;%20&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用传统方法，思路是先从前到后找到空格数，扩展出足够空间。再使用两个指针，从后到前，P1指向旧字符串的末尾，P2指向新字符串的末尾。碰到空格时，P2插入”%20”。碰到其他字符时，挨个复制即可。</p>\n<p>这种双指针从后向前的思维还可以用在两有序数组合并。从尾到头比较A1和A2数字。</p>\n<h2 id=\"链表设计\"><a href=\"#链表设计\" class=\"headerlink\" title=\"链表设计\"></a>链表设计</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 单向链表</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">LinkedList2</span> = (<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">element</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">element</span> = element;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">next</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">LinkedList</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">length</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">append</span>(<span class=\"params\">element</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> node = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(element);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">head</span> === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = node;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> curr = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(curr.<span class=\"property\">next</span>) &#123;</span><br><span class=\"line\">          curr = curr.<span class=\"property\">next</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        curr.<span class=\"property\">next</span> = node;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">length</span>++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">insert</span>(<span class=\"params\">pos, element</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (pos &lt; <span class=\"number\">0</span> || pos &gt; <span class=\"variable language_\">this</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> curr = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>,</span><br><span class=\"line\">          node = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(element);</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(--pos &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        curr = curr.<span class=\"property\">next</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      node.<span class=\"property\">next</span> = curr.<span class=\"property\">next</span>;</span><br><span class=\"line\">      curr.<span class=\"property\">next</span> = node;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">length</span>++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">remove</span>(<span class=\"params\">pos</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (pos &lt; <span class=\"number\">0</span> || pos &gt; <span class=\"variable language_\">this</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> curr = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>;</span><br><span class=\"line\">          prev;</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(--pos &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        prev = curr;</span><br><span class=\"line\">        curr = curr.<span class=\"property\">next</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"title function_\">isUndefined</span>(prev)) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        prev.<span class=\"property\">next</span> = curr.<span class=\"property\">next</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">length</span>--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">indexOf</span>(<span class=\"params\">element</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> curr = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>,</span><br><span class=\"line\">          index = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (curr) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (element === curr.<span class=\"property\">element</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> index;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        index++;</span><br><span class=\"line\">        curr = curr.<span class=\"property\">next</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 双向链表</span></span><br><span class=\"line\"><span class=\"comment\">// 略</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"从尾到头打印链表\"><a href=\"#从尾到头打印链表\" class=\"headerlink\" title=\"从尾到头打印链表\"></a>从尾到头打印链表</h2><p><strong>前提</strong>：单向链表。使用递归</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">recursivePrint</span>(<span class=\"params\">node</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (node &amp;&amp; node.<span class=\"property\">next</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">recursivePrint</span>(node.<span class=\"property\">next</span>));</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(node.<span class=\"property\">element</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"重建二叉树\"><a href=\"#重建二叉树\" class=\"headerlink\" title=\"重建二叉树\"></a>重建二叉树</h2><p><strong>前提</strong>：根据前序和中序遍历的结果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BinaryTreeNode</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">element, left, right</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">element</span> = element;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">left</span> = left;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">right</span> = right;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过前序遍历找到根节点，结合中序遍历找到左右子树，之后递归构建左右子树。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">constructTree</span>(<span class=\"params\">preorder, inorder</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (preorder.<span class=\"property\">length</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">construct</span>(<span class=\"params\">preorder, inorder</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 找到根节点元素</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> root = preorder[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 确定左右子树</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> index = inorder.<span class=\"title function_\">indexOf</span>(root),</span><br><span class=\"line\">        left = (index === <span class=\"number\">0</span> ? <span class=\"literal\">null</span> : <span class=\"title function_\">construct</span>(preorder.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, index), inorder.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, index)));</span><br><span class=\"line\">        right = (index === inorder.<span class=\"property\">length</span>-<span class=\"number\">1</span> ? <span class=\"literal\">null</span> : <span class=\"title function_\">construct</span>(preorder.<span class=\"title function_\">slice</span>(index+<span class=\"number\">1</span>), inorder.<span class=\"title function_\">slice</span>(index+<span class=\"number\">1</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BinaryTreeNode</span>(root, left, right);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">construct</span>(preorder, inorder);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二叉树的下一个节点\"><a href=\"#二叉树的下一个节点\" class=\"headerlink\" title=\"二叉树的下一个节点\"></a>二叉树的下一个节点</h2><p><strong>前提</strong>：树的每个节点除了有两个子节点的指针，还有一个指向父节点的指针。寻找中序遍历的下一个节点。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BinaryTreeNode</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">element, left, right, parent</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">element</span> = element;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">left</span> = left;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">right</span> = right;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">parent</span> = parent;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>二叉树中的节点和周围节点可能有四种关系（画图出来更直观）</p>\n<ol>\n<li>左子树的父节点</li>\n<li>右子树的父节点</li>\n<li>父节点的左子树</li>\n<li>父节点的右子树</li>\n</ol>\n<p>从而有下面的流程：</p>\n<ol>\n<li>关系2存在时，返回右子树的最左节点，否则到步骤2</li>\n<li>关系3存在时，返回父节点，否则到步骤3</li>\n<li>关系4存在时，向上回溯，对父节点使用步骤2，否则到步骤4</li>\n<li>（节点是根节点）返回null</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">findNextNode</span>(<span class=\"params\">node</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> curr;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (node.<span class=\"property\">right</span>) &#123;</span><br><span class=\"line\">    curr = node.<span class=\"property\">right</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(curr = curr.<span class=\"property\">left</span>) &#123;</span><br><span class=\"line\">      ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> curr;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (node.<span class=\"property\">parent</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.<span class=\"property\">parent</span>.<span class=\"property\">left</span> === node) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> node.<span class=\"property\">parent</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (node.<span class=\"property\">parent</span>.<span class=\"property\">right</span> === node) &#123;</span><br><span class=\"line\">      curr = node.<span class=\"property\">parent</span>;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (curr.<span class=\"property\">parent</span> &amp;&amp; curr.<span class=\"property\">parent</span>.<span class=\"property\">right</span> === curr) &#123;</span><br><span class=\"line\">        curr = node.<span class=\"property\">parent</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (curr.<span class=\"property\">parent</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> curr.<span class=\"property\">parent</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"用两个栈实现队列\"><a href=\"#用两个栈实现队列\" class=\"headerlink\" title=\"用两个栈实现队列\"></a>用两个栈实现队列</h2><p><strong>前提</strong>，实现append和delete功能，完成在队尾插入和队首删除。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Stack</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span> = []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> <span class=\"title function_\">size</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">push</span>(<span class=\"params\">element</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>.<span class=\"title function_\">push</span>(element);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">pop</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>思路</strong>，栈1只允许正序存放，栈2只允许倒序存放，由于栈2的内容始终较老，因此插入总发生在栈1。删除总发生在栈2（栈2为空时除外）。JS中没有泛型的概念，所以无需考虑栈中的数据类型。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Queue</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">inverseStack</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">append</span>(<span class=\"params\">element</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>.<span class=\"title function_\">push</span>(element);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>.<span class=\"property\">size</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">inverseStack</span>.<span class=\"property\">size</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">delete</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">inverseStack</span>.<span class=\"property\">size</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>.<span class=\"property\">size</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">inverseStack</span>.<span class=\"title function_\">push</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>.<span class=\"title function_\">pop</span>());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判断是否为空</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">inverseStack</span>.<span class=\"property\">size</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">inverseStack</span>.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">warn</span>(<span class=\"string\">&quot;Empty queue!&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"用两个队列实现栈\"><a href=\"#用两个队列实现栈\" class=\"headerlink\" title=\"用两个队列实现栈\"></a>用两个队列实现栈</h2><p>前提同上。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Queue</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">queue</span> = []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> <span class=\"title function_\">size</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">in</span>(<span class=\"params\">element</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>.<span class=\"title function_\">push</span>(element);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">out</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>思路和上面类似，但不大一样。每次元素出队时，所有元素一定会转移到另一个队列中。因此，插入和删除一定发生在有元素的队列。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Stack</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">queue</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Queue</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">backupQueue</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Queue</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">append</span>(<span class=\"params\">element</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (queue.<span class=\"property\">size</span>) &#123;</span><br><span class=\"line\">      queue.<span class=\"title function_\">in</span>(element);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> queue.<span class=\"property\">size</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      backupQueue.<span class=\"title function_\">in</span>(element);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> backupQueue.<span class=\"property\">size</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">delete</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (queue.<span class=\"property\">size</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> element;</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(queue.<span class=\"property\">size</span> &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        element = queue.<span class=\"title function_\">out</span>();</span><br><span class=\"line\">        backupQueue.<span class=\"title function_\">in</span>(element);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> queue.<span class=\"title function_\">out</span>();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(backQueue.<span class=\"property\">size</span> &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> element;</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(backupQueue.<span class=\"property\">size</span>) &#123;</span><br><span class=\"line\">        element = backupQueue.<span class=\"title function_\">out</span>();</span><br><span class=\"line\">        queue.<span class=\"title function_\">in</span>(element);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> backupQueue.<span class=\"title function_\">out</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">warn</span>(<span class=\"string\">&quot;Empty stack!&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"斐波那契数列\"><a href=\"#斐波那契数列\" class=\"headerlink\" title=\"斐波那契数列\"></a>斐波那契数列</h2><p>使用递归的代码好写，但是效率低；使用循环更好。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fibonacci</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">0</span>,</span><br><span class=\"line\">      b = <span class=\"number\">1</span>,</span><br><span class=\"line\">      res = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">2</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">    [res, a, b] = [a + b, b, res];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>变种还有“青蛙跳台阶”等类最优子问题的问题。</p>\n<h2 id=\"旋转数组的最小数字\"><a href=\"#旋转数组的最小数字\" class=\"headerlink\" title=\"旋转数组的最小数字\"></a>旋转数组的最小数字</h2><p><strong>前提</strong>，将数组开头的部分元素搬运到数组的末尾，寻找最小的元素。</p>\n<p>使用二分查找，右半边递增时，最小元素在左半边。左半边递增时，最小元素在右半边。注意下面两种情况：</p>\n<ul>\n<li>数组未做旋转</li>\n<li>旋转后，头尾元素相等</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">findMin</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!arr || !.<span class=\"property\">arr</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> lindex = <span class=\"number\">0</span>,</span><br><span class=\"line\">      rindex = arr.<span class=\"property\">length</span> - <span class=\"number\">1</span>,</span><br><span class=\"line\">      res = lindex;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (arr[lindex] &gt;= arr[rindex]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rindex - lindex === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      res = rindex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    res = (lindex + rindex) / <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 特殊情况</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[res] == arr[lindex] &amp;&amp; arr[res] == arr[rindex]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> arr.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">min, val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">min</span>(min, val);</span><br><span class=\"line\">      &#125;, arr[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[res] &gt;= arr[lindex]) &#123;</span><br><span class=\"line\">      lindex = res;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr[res] &lt;= arr[rindex]) &#123;</span><br><span class=\"line\">      rindex = res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr[res];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"回溯法\"><a href=\"#回溯法\" class=\"headerlink\" title=\"回溯法\"></a>回溯法</h2><p>通常适合用递归法实现，到达某个节点时，尝试所有可能，并在满足条件时递归到下一节点。</p>\n<h3 id=\"矩阵中的路径\"><a href=\"#矩阵中的路径\" class=\"headerlink\" title=\"矩阵中的路径\"></a>矩阵中的路径</h3><p><strong>前提</strong>，判断矩阵中有无一条不交叉路径能够返回指定字符串</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">hasPath</span>(<span class=\"params\">arr, str</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!arr || !arr.<span class=\"property\">length</span> || !str) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 使用数组记录历史数据，防止交叉</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> occupied = arr.<span class=\"title function_\">map</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr[<span class=\"number\">0</span>].<span class=\"title function_\">map</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> pathMath = <span class=\"keyword\">function</span>(<span class=\"params\">i, j, str</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!str) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span> || i &gt;= arr.<span class=\"property\">length</span> || j &lt; <span class=\"number\">0</span> || i &gt;= arr[<span class=\"number\">0</span>].<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str.<span class=\"title function_\">substr</span>(<span class=\"number\">0</span>, <span class=\"number\">1</span>) == arr[i][j]) &#123;</span><br><span class=\"line\">      occupied[i][j] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> newStr = str.<span class=\"title function_\">substr</span>(<span class=\"number\">1</span>),</span><br><span class=\"line\">          res = <span class=\"title function_\">pathMath</span>(i-<span class=\"number\">1</span>, j, newStr) || <span class=\"title function_\">pathMath</span>(i+<span class=\"number\">1</span>, j, newStr) || <span class=\"title function_\">pathMath</span>(i, j-<span class=\"number\">1</span>, newStr) || <span class=\"title function_\">pathMath</span>(i, j+<span class=\"number\">1</span>, newStr);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 回溯</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!res) &#123;</span><br><span class=\"line\">        occupied[i][j] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  arr.<span class=\"title function_\">foreach</span>(<span class=\"function\">(<span class=\"params\">val, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    val.<span class=\"title function_\">foreach</span>(<span class=\"function\">(<span class=\"params\">val, j</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title function_\">pathMatch</span>(i, j, str)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"机器人的运动范围\"><a href=\"#机器人的运动范围\" class=\"headerlink\" title=\"机器人的运动范围\"></a>机器人的运动范围</h3><p><strong>前提</strong>，m行n列的矩阵，机器人从(0,0)出发不能进入数位和大于k的格子，求能到的格子个数。</p>\n<p>思路同上甚至更简单。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">gridCount</span>(<span class=\"params\">rowCount, colCount, limit</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (limit &lt; <span class=\"number\">0</span> || rowCount &lt;= <span class=\"number\">0</span> || colCount &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 使用数组记录历史数据，减少冗余查询</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> walked = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"keyword\">function</span>(<span class=\"params\">row, col</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">check</span>(row, col)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 不必还原，减少重复查询</span></span><br><span class=\"line\">      walked[row * rowCount + col] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      cnt = <span class=\"number\">1</span> + <span class=\"title function_\">count</span>(row-<span class=\"number\">1</span>, col) + <span class=\"title function_\">count</span>(row+<span class=\"number\">1</span>, col) + <span class=\"title function_\">count</span>(row, col-<span class=\"number\">1</span>) + <span class=\"title function_\">count</span>(row, col+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cnt;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">    check = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> row &gt;= <span class=\"number\">0</span> &amp;&amp; col &gt;= <span class=\"number\">0</span> &amp;&amp; !walked[row * rowCount + col] &amp;&amp; <span class=\"title function_\">digitSum</span>(row) + <span class=\"title function_\">digitSum</span>(col) &lt;= limit;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">    digitSum = <span class=\"keyword\">function</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(num &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      sum += num % <span class=\"number\">10</span>;</span><br><span class=\"line\">      num /= <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">count</span>(row, col)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"剪绳子\"><a href=\"#剪绳子\" class=\"headerlink\" title=\"剪绳子\"></a>剪绳子</h2><p><strong>前提</strong>，绳长为整数，切成若干段，使得绳长乘积最大。</p>\n<p>类似于《算法导论》里的裁切钢管。首先可以用<strong>动态规划</strong>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">cutRope</span>(<span class=\"params\">len</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (len &lt; <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> len - <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> cut = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">4</span>; i &lt;= len; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> max = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">1</span>; j &lt;= i / <span class=\"number\">2</span>; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> mul = cut[j-<span class=\"number\">1</span>] * cut[i-j-<span class=\"number\">1</span>];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (max &lt; mul) &#123;</span><br><span class=\"line\">        max = mul;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cut.<span class=\"title function_\">push</span>(max);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> cut[len-<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>经过数学推导，<code>n&gt;=5</code>时，<code>2(n-2)&gt;n</code>且<code>3(n-3)&gt;n</code>且<code>2(n-2)&gt;=3(n-3)</code>，因此有最优子问题的解法。根据<strong>贪婪算法</strong>，应该尽量多切长度为3的绳子段。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">cutRope</span>(<span class=\"params\">len</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (len &lt; <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> len - <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 多切长度为3的绳子段</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> cntOf3 = len / <span class=\"number\">3</span>,</span><br><span class=\"line\">      cntOf2 = <span class=\"number\">1</span>,</span><br><span class=\"line\">      remain = len % <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 长度为4时，应该切成两个2</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (remain === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    cntOf3--;</span><br><span class=\"line\">    cntOf2 = <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">3</span>, cntOf3) * cntOf2</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"位运算\"><a href=\"#位运算\" class=\"headerlink\" title=\"位运算\"></a>位运算</h2><p>经常用于奇技淫巧。在C风格的解法中常用。JS中应该不常出现。</p>\n<h3 id=\"二进制中1的数目\"><a href=\"#二进制中1的数目\" class=\"headerlink\" title=\"二进制中1的数目\"></a>二进制中1的数目</h3><p>通过移位操作，需要注意的是，对入参移位容易出现死循环，可以对1进行移位并比较。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">numOf1</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> cnt = <span class=\"number\">0</span>,</span><br><span class=\"line\">      flag = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(flag) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &amp; flag) &#123;</span><br><span class=\"line\">      cnt++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    flag &lt;&lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> cnt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>二进制整数减1相当于右侧0值变成1，最右侧1变成0，<strong>此时和原数做按位与，可以消掉最右侧0</strong>。利用这个特点可以进一步提高效率。这种思路可以用来解决很多二进制问题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">numOf1</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(n) &#123;</span><br><span class=\"line\">    ++cnt;</span><br><span class=\"line\">    n = (n-<span class=\"number\">1</span>) &amp; n;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> cnt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数值的整数次方\"><a href=\"#数值的整数次方\" class=\"headerlink\" title=\"数值的整数次方\"></a>数值的整数次方</h2><p><strong>前提</strong>，不得使用库函数，需要考虑大数问题</p>\n<p>用类似二分法的思想，由2到4，由4到8，由8到16。时间复杂度O(logn)。同时注意边界情况。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">pow</span>(<span class=\"params\">base, exp</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> isNeg = exp &gt; <span class=\"number\">0</span>,</span><br><span class=\"line\">      res = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (exp == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (base == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">unsignedPow</span>(<span class=\"params\">base, exp</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (exp === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (exp === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> base;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"title function_\">unsigned</span>(base, exp &gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">    res *= res;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (exp &amp; <span class=\"number\">0x1</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      res *= base;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  res = <span class=\"title function_\">unsignedPow</span>(base, <span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(exp));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isNeg) &#123;</span><br><span class=\"line\">    res = <span class=\"number\">1</span> / res;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"按顺序打印从0到最大的n位数字\"><a href=\"#按顺序打印从0到最大的n位数字\" class=\"headerlink\" title=\"按顺序打印从0到最大的n位数字\"></a>按顺序打印从0到最大的n位数字</h2><p>大数问题。自定义数据结构实现整数+1操作，或者通过递归for循环依次打印每一位数字，像下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">printNums</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">print</span>(<span class=\"params\">str, n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">1</span> === n) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str + i);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      n--;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"number\">0</span> === i) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">print</span>(str, n);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">print</span>(str + i, n);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">print</span>(<span class=\"string\">&#x27;&#x27;</span>, n);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除链表节点\"><a href=\"#删除链表节点\" class=\"headerlink\" title=\"删除链表节点\"></a>删除链表节点</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LinkedListNode</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">value, next</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">next</span> = next</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"O-1-时间删除单向链表中某节点\"><a href=\"#O-1-时间删除单向链表中某节点\" class=\"headerlink\" title=\"O(1)时间删除单向链表中某节点\"></a>O(1)时间删除单向链表中某节点</h3><p>通常思路，需要从头结点循环找到节点的上一个节点，将它的<code>next</code>属性设置删除节点的<code>next</code>。但是这么做是O(n)的复杂度。更好的方法是，借尸还魂，覆盖当前节点的<code>next</code>节点，然后重设<code>next</code>节点跳过下一节点。</p>\n<p><em>（因为JS中没有指针一说，这种模拟不能完全还原原题的问题）</em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">removeNode</span>(<span class=\"params\">head, node</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!head || !node) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!node.<span class=\"property\">next</span>) &#123; <span class=\"comment\">// 不是尾节点</span></span><br><span class=\"line\">    node.<span class=\"property\">next</span> = node.<span class=\"property\">next</span>.<span class=\"property\">next</span>;</span><br><span class=\"line\">    node.<span class=\"property\">value</span> = node.<span class=\"property\">value</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (node == head) &#123; <span class=\"comment\">// 链表只有一个节点</span></span><br><span class=\"line\">    head = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 是尾节点，只能循环</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> n = head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n.<span class=\"property\">next</span> !== node) &#123;</span><br><span class=\"line\">      n = n.<span class=\"property\">next</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    n.<span class=\"property\">next</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"表示数值的字符串\"><a href=\"#表示数值的字符串\" class=\"headerlink\" title=\"表示数值的字符串\"></a>表示数值的字符串</h2><p>考察思维的全面性。包括正数负数、小数、科学技术法都要考虑。格式遵循<code>[+|-]?(\\d+)(\\.\\d+)?([e|E][+|-]?\\d+)?</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 正则表达式</span></span><br><span class=\"line\">/\\d/.<span class=\"title function_\">test</span>(str);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 类型转换</span></span><br><span class=\"line\">!<span class=\"built_in\">isNaN</span>(+str);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>JS下解决问题并不如C++自然。下面是C++风格的解法</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">judgeUnsignedInt</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> ** str)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"type\">const</span> <span class=\"type\">char</span> * start = *str;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(**str != \\<span class=\"number\">0</span> &amp;&amp; **str &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; **str &lt;= <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">    ++(*str);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> *str &gt; start;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">judgeInt</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> ** str)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (**str === <span class=\"string\">&#x27;+&#x27;</span> || **str === <span class=\"string\">&#x27;-&#x27;</span>) &#123;</span><br><span class=\"line\">    ++(*str);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">judgeUnisignedInt</span>(str);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isNumber</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> * str)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (str == null) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 先扫描整数部分</span></span><br><span class=\"line\">  <span class=\"type\">bool</span> res = <span class=\"built_in\">judgeInt</span>(&amp;str);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (*str == <span class=\"string\">&#x27;.&#x27;</span>) &#123;</span><br><span class=\"line\">    ++str;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 扫描小数部分</span></span><br><span class=\"line\">    res = <span class=\"built_in\">judgeUnsignedInt</span>(&amp;str) || res;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (*str == <span class=\"string\">&#x27;e&#x27;</span> || *str == <span class=\"string\">&#x27;E&#x27;</span>) &#123;</span><br><span class=\"line\">    ++str;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 扫描指数部分</span></span><br><span class=\"line\">    res = <span class=\"built_in\">judgeInt</span>(&amp;str) &amp;&amp; res;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res &amp;&amp; *str == <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"调整整数数组中奇数和偶数的位置\"><a href=\"#调整整数数组中奇数和偶数的位置\" class=\"headerlink\" title=\"调整整数数组中奇数和偶数的位置\"></a>调整整数数组中奇数和偶数的位置</h2><p><strong>前提</strong>，使得奇数都位于前边，偶数都位于后边。</p>\n<p>考虑拓展性，用一个函数作为衡量指标，判断元素应该在前还是在后。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">adjustArr</span>(<span class=\"params\">arr, standard</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!arr || !arr.<span class=\"property\">length</span> || arr.<span class=\"property\">length</span> &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> start = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> end = arr.<span class=\"property\">length</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (start &lt; end) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start &lt; end &amp;&amp; !<span class=\"title function_\">standard</span>(arr[start])) &#123;</span><br><span class=\"line\">      start++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start &lt; end &amp;&amp; <span class=\"title function_\">standard</span>(arr[end])) &#123;</span><br><span class=\"line\">      end--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &lt; end) &#123;</span><br><span class=\"line\">      [arr[start], arr[end]] = [arr[end], arr[start]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在后面的标准</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">standard</span> (num) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num / <span class=\"number\">2</span> == <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"鲁棒性\"><a href=\"#鲁棒性\" class=\"headerlink\" title=\"鲁棒性\"></a>鲁棒性</h1><h2 id=\"链表的倒数第K的节点\"><a href=\"#链表的倒数第K的节点\" class=\"headerlink\" title=\"链表的倒数第K的节点\"></a>链表的倒数第K的节点</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LinkedList</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">head</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = head;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">next</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">next</span> = next;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>考虑鲁棒性：</p>\n<ul>\n<li>空数组</li>\n<li>k超过数组长度</li>\n<li>k&#x3D;0</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">findLastK</span>(<span class=\"params\">head, k</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!head || k === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> flag = head;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (--k &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (head.<span class=\"property\">next</span>) &#123;</span><br><span class=\"line\">      head = head.<span class=\"property\">next</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = head;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(flag = flag.<span class=\"property\">next</span>) &#123;</span><br><span class=\"line\">    res = res.<span class=\"property\">next</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"tip\">当一个指针不足以解决链表的问题时，通常两个指针就可以解决问题</div>\n\n<h2 id=\"链表中环的入口节点\"><a href=\"#链表中环的入口节点\" class=\"headerlink\" title=\"链表中环的入口节点\"></a>链表中环的入口节点</h2><p>思路：</p>\n<ol>\n<li>链表中有环存在时，走得快的指针将会追上走得慢的指针。</li>\n<li>确定环的长度k后，让两个指针同速，一个领先k位出发，相遇的位置即是入口</li>\n</ol>\n<p>考虑鲁棒性：</p>\n<ul>\n<li>无环时</li>\n<li>寻找相遇点的时候注意next属性是否存在</li>\n<li>头结点为环入口时</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">entryOfLoop</span>(<span class=\"params\">list</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!list || !list.<span class=\"property\">length</span> || !list.<span class=\"property\">length</span> &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 找到相遇位置</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> slow, fast, meet;</span><br><span class=\"line\">  slow = fast = list.<span class=\"property\">head</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!!fast &amp;&amp; !!slow) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fast === slow) &#123;</span><br><span class=\"line\">      meet = fast;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    slow = slow.<span class=\"property\">next</span>;</span><br><span class=\"line\">    fast = fast.<span class=\"property\">next</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!!fast) &#123;</span><br><span class=\"line\">      fast = fast.<span class=\"property\">next</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 无环存在时跳出</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!!meet) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 确定环的长度</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> length = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> tmpNode = meet.<span class=\"property\">next</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (tmpNode !== meet) &#123;</span><br><span class=\"line\">    tmpNode = tmpNode.<span class=\"property\">next</span>;</span><br><span class=\"line\">    length++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 先移动一个指针</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> first = list.<span class=\"property\">head</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    first = first.<span class=\"property\">next</span>;</span><br><span class=\"line\">    length--;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 再移动第二个指针</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> next = list.<span class=\"property\">head</span>；</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (next !== first) &#123;</span><br><span class=\"line\">    first = first.<span class=\"property\">next</span>;</span><br><span class=\"line\">    next = next.<span class=\"property\">next</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> first;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"反转链表\"><a href=\"#反转链表\" class=\"headerlink\" title=\"反转链表\"></a>反转链表</h2><p><strong>前提</strong>：反转链表并输出反转后的头节点。</p>\n<p>考虑鲁棒性：</p>\n<ul>\n<li>边界情况，如空链表或长度为1的链表</li>\n<li>反转过程中链表断裂</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverseList</span>(<span class=\"params\">list</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> node = list.<span class=\"property\">head</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> prev = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(!!node) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!node.<span class=\"property\">next</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    node.<span class=\"property\">next</span> = prev;</span><br><span class=\"line\">    prev = node;</span><br><span class=\"line\">    node = node.<span class=\"property\">next</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"合并两个排序的链表\"><a href=\"#合并两个排序的链表\" class=\"headerlink\" title=\"合并两个排序的链表\"></a>合并两个排序的链表</h2><p>类似归并排序。</p>\n<p>考虑鲁棒性：</p>\n<ul>\n<li>空链表</li>\n<li>链表长度为1</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">merge</span>(<span class=\"params\">list1, list2</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!list1) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list2;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!list2) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list1;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> node = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>();</span><br><span class=\"line\">  <span class=\"keyword\">let</span> list = <span class=\"keyword\">new</span> <span class=\"title class_\">List</span>(node);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> h1 = list1.<span class=\"property\">head</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> h2 = list2.<span class=\"property\">head</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (!!h1 || !!h2) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> next;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!!h1 &amp;&amp; !h2 || h1.<span class=\"property\">value</span> &lt; h2.<span class=\"property\">value</span>) &#123;</span><br><span class=\"line\">      next = h1.<span class=\"property\">value</span>;</span><br><span class=\"line\">      node = node.<span class=\"property\">next</span>;</span><br><span class=\"line\">      h1 = h1.<span class=\"property\">next</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      next = h2.<span class=\"property\">value</span>;</span><br><span class=\"line\">      h2 = h2.<span class=\"property\">next</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    node.<span class=\"property\">next</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(next);</span><br><span class=\"line\">    node = node.<span class=\"property\">next</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  list.<span class=\"property\">head</span> = list.<span class=\"property\">head</span>.<span class=\"property\">next</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"树的子结构\"><a href=\"#树的子结构\" class=\"headerlink\" title=\"树的子结构\"></a>树的子结构</h2><p><strong>前提</strong>：判断树A中是否能找到和树B结构一样的子树。</p>\n<p>使用递归思路更简单。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">hasSubTree</span>(<span class=\"params\">heap, needle</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">match</span>(<span class=\"params\">root1, root2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!root2) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!root1) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">match</span>(root1.<span class=\"property\">left</span>, root2.<span class=\"property\">left</span>) &amp;&amp; <span class=\"title function_\">match</span>(root1.<span class=\"property\">right</span>, root2.<span class=\"property\">right</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> root1 = heap.<span class=\"property\">root</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> root2 = needle.<span class=\"property\">root</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!root1 &amp;&amp; !root2) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root1.<span class=\"property\">value</span> === root2.<span class=\"property\">value</span>) &#123;</span><br><span class=\"line\">      res = <span class=\"title function_\">match</span>(root1, root2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!res) &#123;</span><br><span class=\"line\">      res = <span class=\"title function_\">hasSubTree</span>(root1.<span class=\"property\">left</span>, root2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!res) &#123;</span><br><span class=\"line\">      res = <span class=\"title function_\">hasSubTree</span>(root1.<span class=\"property\">right</span>, root2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"形象化\"><a href=\"#形象化\" class=\"headerlink\" title=\"形象化\"></a>形象化</h1><h2 id=\"二叉树的镜像\"><a href=\"#二叉树的镜像\" class=\"headerlink\" title=\"二叉树的镜像\"></a>二叉树的镜像</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mirrorBinaryTree</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!root) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 跳过叶子节点</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!root.<span class=\"property\">left</span> &amp;&amp; !root.<span class=\"property\">right</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  [root.<span class=\"property\">left</span>, root.<span class=\"property\">right</span>] = [root.<span class=\"property\">right</span>, root.<span class=\"property\">left</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!!root.<span class=\"property\">left</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">mirrotBinaryTree</span>(root.<span class=\"property\">left</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!!root.<span class=\"property\">right</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">mirrotBinaryTree</span>(root.<span class=\"property\">right</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对称的二叉树\"><a href=\"#对称的二叉树\" class=\"headerlink\" title=\"对称的二叉树\"></a>对称的二叉树</h2><p>即前序和对称遍历结果一致。和上面类似。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isSymmetrical</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">judge</span>(<span class=\"params\">root1, root2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root1 === <span class=\"literal\">null</span> &amp;&amp; root2 === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root1 === <span class=\"literal\">null</span> || root2 === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root1.<span class=\"property\">value</span> !== root2.<span class=\"property\">value2</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">judge</span>(root1.<span class=\"property\">left</span>, root2.<span class=\"property\">right</span>) &amp;&amp; <span class=\"title function_\">judge</span>(root1.<span class=\"property\">right</span>, root2.<span class=\"property\">left</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">judge</span>(root, root);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"顺时针打印矩阵\"><a href=\"#顺时针打印矩阵\" class=\"headerlink\" title=\"顺时针打印矩阵\"></a>顺时针打印矩阵</h2><ul>\n<li>打印一行“删去”一行，打印一列“删去”一列。</li>\n<li>最后一圈先向右再向下再向上再向左，根据顺序共有4种可能，通过if语句区分</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">printMatrix</span>(<span class=\"params\">matrix</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!matrix || !matrix.<span class=\"property\">length</span> || !matrix[<span class=\"number\">0</span>].<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> top = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> bottom = matrix.<span class=\"property\">length</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> right = (matrix[<span class=\"number\">0</span>].<span class=\"property\">length</span> ? matrix[<span class=\"number\">0</span>].<span class=\"property\">length</span> - <span class=\"number\">1</span> : <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (left &lt;= right &amp;&amp; top &lt;= bottom) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 向右</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = left; i &lt;= right; i++) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(matrix[top][i] + <span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    top++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 向下</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (top &lt;= bottom) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = top; i &lt;= bottom; i++) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(matrix[i][right] + <span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      right--;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 向左</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left &lt;= right) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = right; i &gt;= left; i--) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(matrix[bottom][i] + <span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      bottom--;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 向上</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (top &lt;= bottom) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = bottom; i &gt;= top; i--) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(matrix[i][left] + <span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      left++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>剑指offer上的思路是利用每圈的起始x和y坐标相等，判断循环终止条件，再根据条件决定一圈打印几行。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">printMatrix</span>(<span class=\"params\">matrix</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!matrix || !matrix.<span class=\"property\">length</span> || !matrix[<span class=\"number\">0</span>].<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">print</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> width = column - start - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> height = rows - start - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = start; i &lt;= width; i++) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(matrix[start][i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &lt; height) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt;= height; i++) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(matrix[i][width]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &lt; width &amp;&amp; start &lt; height) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = width-<span class=\"number\">1</span>; i &gt;= start; i--) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(matrix[height][i]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &lt; width &amp;&amp; start &lt; height - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = height-<span class=\"number\">1</span>; i &lt; start+<span class=\"number\">1</span>; i--) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(matrix[i][start]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> start = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> rows = matrix.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> column = matrix[<span class=\"number\">0</span>].<span class=\"property\">length</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (column &gt; <span class=\"number\">2</span> * start &amp;&amp; rows &gt; <span class=\"number\">2</span> * start) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">print</span>();</span><br><span class=\"line\">    ++start;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"包含min函数的栈\"><a href=\"#包含min函数的栈\" class=\"headerlink\" title=\"包含min函数的栈\"></a>包含min函数的栈</h2><p><strong>前提</strong>，设计栈的数据结构，使min、push和pop的时间复杂度都是O(1)。</p>\n<p>注意：若使用变量保存最小元素，那么在最小元素出栈后会找不到次小元素。可见只使用一个变量是不够的，为配合原始栈的结构，需要有一个辅助栈记录最小元素的位置。（画图可以很容易理解）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Stack</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span> = [];</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">minStack</span> = [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> <span class=\"title function_\">min</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> len = <span class=\"variable language_\">this</span>.<span class=\"property\">minStack</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (len ? <span class=\"variable language_\">this</span>.<span class=\"property\">minStack</span>[len-<span class=\"number\">1</span>] : <span class=\"title class_\">Infinity</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">push</span>(<span class=\"params\">element</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>.<span class=\"title function_\">push</span>(element);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">minStack</span>.<span class=\"title function_\">push</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">min</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">min</span>, element));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">pop</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">minStack</span>.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">top</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>.<span class=\"property\">length</span> ? <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>.<span class=\"property\">length</span>-<span class=\"number\">1</span>] : <span class=\"literal\">null</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"栈的压入、弹出序列\"><a href=\"#栈的压入、弹出序列\" class=\"headerlink\" title=\"栈的压入、弹出序列\"></a>栈的压入、弹出序列</h2><p><strong>前提</strong>：给定栈的压入顺序，判断某个出栈顺序是否可能</p>\n<p>通过举例具象化思考。如入栈顺序为[1, 2, 3, 4, 5]，[4, 3, 5, 2, 1]就是一个可能的例子。首先，4是第一个出栈元素，则[1,2,3]此时已经入栈，4出栈后，3位栈顶，出栈后，5不在栈内，将5入栈。剩下的5，2，1同理。因此，可以发现下面规律。</p>\n<ol>\n<li>第一个出栈元素前的入栈序列此时正在栈内</li>\n<li>之后所有的出栈元素，先在栈顶寻找，若有，则出栈；若没有，在栈外元素中寻找</li>\n<li>若找到，将其入栈，若找不到，则返回false</li>\n<li>如此循环直到栈空</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isPopOrder</span>(<span class=\"params\">push, pop</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (push.<span class=\"property\">length</span> !== pop.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!push.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 寻找当前栈内元素</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> first = pop[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> index = push.<span class=\"title function_\">indexOf</span>(first);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> stack = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (index === -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt;= index-<span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">    stack.<span class=\"title function_\">push</span>(push[i]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> rest = push.<span class=\"title function_\">slice</span>(index);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">2</span>, len = pop.<span class=\"property\">length</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = pop[i];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!push.<span class=\"property\">length</span> || push[push.<span class=\"property\">length</span>-<span class=\"number\">1</span>] !== value) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> index = rest.<span class=\"title function_\">indexOf</span>(value);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (index === -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      push.<span class=\"title function_\">push</span>(value);</span><br><span class=\"line\">      rest.<span class=\"title function_\">splice</span>(index, <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      push.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"从上到下打印二叉树\"><a href=\"#从上到下打印二叉树\" class=\"headerlink\" title=\"从上到下打印二叉树\"></a>从上到下打印二叉树</h2><p>使用队列保证先后顺序。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Queue</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">queue</span> = []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> <span class=\"title function_\">length</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">queue</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">in</span>(<span class=\"params\">element</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">queue</span>.<span class=\"title function_\">push</span>(element);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">queue</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">out</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">queue</span>.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">printTreeByTier</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!root) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> q = <span class=\"keyword\">new</span> <span class=\"title class_\">Queue</span>();</span><br><span class=\"line\">  q.<span class=\"title function_\">in</span>(root);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(q.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> node = q.<span class=\"title function_\">out</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(node.<span class=\"property\">value</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.<span class=\"property\">left</span>) &#123;</span><br><span class=\"line\">      q.<span class=\"title function_\">in</span>(node.<span class=\"property\">left</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.<span class=\"property\">right</span>) &#123;</span><br><span class=\"line\">      q.<span class=\"title function_\">in</span>(node.<span class=\"property\">right</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"进阶：分行从上到下打印二叉树\"><a href=\"#进阶：分行从上到下打印二叉树\" class=\"headerlink\" title=\"进阶：分行从上到下打印二叉树\"></a>进阶：分行从上到下打印二叉树</h3><p>和上面类似，区别在入队时需要携带层数信息。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Queue</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">queue</span> = []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> <span class=\"title function_\">length</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">queue</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">in</span>(<span class=\"params\">element</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">queue</span>.<span class=\"title function_\">push</span>(element);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">queue</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">out</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">queue</span>.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">printTreeByTier</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!root) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> tier = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> q = <span class=\"keyword\">new</span> <span class=\"title class_\">Queue</span>();</span><br><span class=\"line\">  q.<span class=\"title function_\">in</span>(&#123;</span><br><span class=\"line\">    root,</span><br><span class=\"line\">    tier,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (q.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> node = q.<span class=\"title function_\">out</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.<span class=\"property\">tier</span> !== tier) &#123;</span><br><span class=\"line\">      tier = node.<span class=\"property\">tier</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;换行&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (q.<span class=\"property\">root</span>.<span class=\"property\">left</span>) &#123;</span><br><span class=\"line\">      q.<span class=\"title function_\">in</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">root</span>: q.<span class=\"property\">root</span>.<span class=\"property\">left</span>,</span><br><span class=\"line\">        <span class=\"attr\">tier</span>: tier+<span class=\"number\">1</span>,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (q.<span class=\"property\">root</span>.<span class=\"property\">right</span>) &#123;</span><br><span class=\"line\">      q.<span class=\"title function_\">in</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">root</span>: q.<span class=\"property\">root</span>.<span class=\"property\">right</span>,</span><br><span class=\"line\">        <span class=\"attr\">tier</span>: tier+<span class=\"number\">1</span>,</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"进阶2：之字形打印二叉树\"><a href=\"#进阶2：之字形打印二叉树\" class=\"headerlink\" title=\"进阶2：之字形打印二叉树\"></a>进阶2：之字形打印二叉树</h3><p><strong>前提</strong>：第一行从左到右打印，第二行从右到左打印，以此类推。</p>\n<p>因为每层的顺序都相反，很适合栈存储。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 栈的数据结构实现略</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">printTreeByZ</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!root) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> stack1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>();</span><br><span class=\"line\">  <span class=\"keyword\">let</span> stack2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>();</span><br><span class=\"line\">  <span class=\"comment\">// 当前在哪个栈内</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> curr = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  stack1.<span class=\"title function_\">push</span>(root);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!stack1.<span class=\"title function_\">empty</span>() || !stack2.<span class=\"title function_\">empty</span>()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (curr == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> node = stack1.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(node.<span class=\"property\">value</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node.<span class=\"property\">left</span>) &#123;</span><br><span class=\"line\">        stack2.<span class=\"title function_\">push</span>(node.<span class=\"property\">left</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node.<span class=\"property\">right</span>) &#123;</span><br><span class=\"line\">        stack2.<span class=\"title function_\">push</span>(node.<span class=\"property\">right</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (stack1.<span class=\"title function_\">empty</span>()) &#123;</span><br><span class=\"line\">        curr = <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;换行&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> node = stack2.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(node.<span class=\"property\">value</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node.<span class=\"property\">right</span>) &#123;</span><br><span class=\"line\">        stack1.<span class=\"title function_\">push</span>(node.<span class=\"property\">right</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node.<span class=\"property\">left</span>) &#123;</span><br><span class=\"line\">        stack1.<span class=\"title function_\">push</span>(node.<span class=\"property\">left</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (stack2.<span class=\"title function_\">emtpy</span>()) &#123;</span><br><span class=\"line\">        curr = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;换行&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二叉搜索树的后序遍历序列\"><a href=\"#二叉搜索树的后序遍历序列\" class=\"headerlink\" title=\"二叉搜索树的后序遍历序列\"></a>二叉搜索树的后序遍历序列</h2><p><strong>前提</strong>：判断整数序列是否是某个二叉搜索树的后序遍历序列，并假设所有数字都不相同</p>\n<p>利用二叉搜索树的特点，结合后序遍历时尾元素为根节点，递归判断。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">verifySeqOfBST</span>(<span class=\"params\">seq</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!seq || seq.<span class=\"property\">length</span> &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = seq.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> root = seq[len-<span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"comment\">// 找到右子树的起点</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> rightIndex = seq.<span class=\"title function_\">findIndex</span>(<span class=\"function\">(<span class=\"params\">element</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> element &gt; root;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 右子树的节点需要都大于左节点</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (rightIndex == -<span class=\"number\">1</span> || seq.<span class=\"title function_\">slice</span>(rightIndex).<span class=\"title function_\">every</span>(<span class=\"function\">(<span class=\"params\">element</span>)=&gt;</span>&#123; <span class=\"keyword\">return</span> element &gt; root; &#125;)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 递归判断左右子树</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = rightIndex &lt;= <span class=\"number\">0</span> || <span class=\"title function_\">verifySeqOfBST</span>(seq.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, rightIndex));</span><br><span class=\"line\">  <span class=\"keyword\">let</span> right = rightIndex == -<span class=\"number\">1</span> || <span class=\"title function_\">verifySeqOfBST</span>(seq.<span class=\"title function_\">slice</span>(rightIndex));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> left &amp;&amp; right;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二叉树中和为某值的路径\"><a href=\"#二叉树中和为某值的路径\" class=\"headerlink\" title=\"二叉树中和为某值的路径\"></a>二叉树中和为某值的路径</h2><p><strong>前提</strong>：找到所有满足要求的路径</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">findPaths</span>(<span class=\"params\">root, target</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> path = [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> node = root;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 利用闭包共享变量</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"title function_\">find</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    path.<span class=\"title function_\">push</span>(node);</span><br><span class=\"line\">    sum += node.<span class=\"property\">value</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sum === target) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(path)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.<span class=\"property\">left</span>) &#123;</span><br><span class=\"line\">      node = node.<span class=\"property\">left</span>;</span><br><span class=\"line\">      <span class=\"title function_\">find</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.<span class=\"property\">right</span>) &#123;</span><br><span class=\"line\">      node = node.<span class=\"property\">right</span>;</span><br><span class=\"line\">      <span class=\"title function_\">find</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 不要忘了弹出栈顶元素</span></span><br><span class=\"line\">    path.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">find</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"分解\"><a href=\"#分解\" class=\"headerlink\" title=\"分解\"></a>分解</h1><h2 id=\"复杂链表的复制\"><a href=\"#复杂链表的复制\" class=\"headerlink\" title=\"复杂链表的复制\"></a>复杂链表的复制</h2><p><strong>前提</strong>：复杂链表中每个节点除了一个指向下个节点的指针外，还有一个指向任意节点的指针</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ComplexLinkedListNode</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">&#123;value, next, extra&#125;</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">next</span> = next;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">extra</span> = extra;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>困难在extra属性的复制，在O(n)的时间复杂度，O(1)的空间复杂度的要求下，问题可以分解成3步</p>\n<ol>\n<li>在每个原始节点后接上复制节点</li>\n<li>原样复制extra属性</li>\n<li>将复制的链表拆出来</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">copyLinkedList</span>(<span class=\"params\">head</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!head) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> node = head;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Step1: 在每个节点后添加一个复制节点</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (node) &#123;</span><br><span class=\"line\">    node.<span class=\"property\">next</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">ComplexLinkedListNode</span>()(&#123;</span><br><span class=\"line\">      <span class=\"attr\">value</span>: node.<span class=\"property\">value</span>,</span><br><span class=\"line\">      <span class=\"attr\">next</span>: node.<span class=\"property\">next</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    node = node.<span class=\"property\">next</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Step2: 复制每个节点的extra属性</span></span><br><span class=\"line\">  node = head;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (node) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这一步大大减少了时间复杂度</span></span><br><span class=\"line\">    node.<span class=\"property\">next</span>.<span class=\"property\">extra</span> = node.<span class=\"property\">extra</span>.<span class=\"property\">next</span>;</span><br><span class=\"line\">    node = node.<span class=\"property\">next</span>.<span class=\"property\">next</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Step3: 拆开两条链</span></span><br><span class=\"line\">  node = head</span><br><span class=\"line\">  <span class=\"keyword\">let</span> newNode = <span class=\"keyword\">new</span> <span class=\"title class_\">ComplexLinkedListNode</span>();</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (node) &#123;</span><br><span class=\"line\">    newNode.<span class=\"property\">next</span> = node.<span class=\"property\">next</span>;</span><br><span class=\"line\">    node.<span class=\"property\">next</span> = node.<span class=\"property\">next</span>.<span class=\"property\">next</span>;</span><br><span class=\"line\">    node = node.<span class=\"property\">next</span>;</span><br><span class=\"line\">    newNode = newNode.<span class=\"property\">next</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> newNode.<span class=\"property\">next</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二叉搜索树和双向链表\"><a href=\"#二叉搜索树和双向链表\" class=\"headerlink\" title=\"二叉搜索树和双向链表\"></a>二叉搜索树和双向链表</h2><p><strong>前提</strong>：将一个二叉搜索树转换成一个排序的双向链表，不允许新建节点。</p>\n<p>一般涉及到树结构的问题，使用递归都要更直观方便。本题中，可以把问题拆解成，将根节点和已组装好的左右双向链表组装。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">transBSTToBilink</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!root) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"title function_\">split</span> = (<span class=\"params\">root, type</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> node = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(root.<span class=\"property\">value</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = node;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> right = node;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.<span class=\"property\">left</span>) &#123;</span><br><span class=\"line\">      left = <span class=\"title function_\">split</span>(root.<span class=\"property\">left</span>, <span class=\"string\">&#x27;left&#x27;</span>);</span><br><span class=\"line\">      left.<span class=\"property\">next</span> = node;</span><br><span class=\"line\">      node.<span class=\"property\">next</span> = left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.<span class=\"property\">right</span>) &#123;</span><br><span class=\"line\">      right = <span class=\"title function_\">split</span>(root.<span class=\"property\">right</span>, <span class=\"string\">&#x27;right&#x27;</span>)</span><br><span class=\"line\">      node.<span class=\"property\">next</span> = right;</span><br><span class=\"line\">      right.<span class=\"property\">next</span> = node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 通过type区分当前是左子树还是右子树，从而返回最大点或最小点</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (type === <span class=\"string\">&#x27;left&#x27;</span> ? right : left);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">split</span>(root);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"序列化二叉树\"><a href=\"#序列化二叉树\" class=\"headerlink\" title=\"序列化二叉树\"></a>序列化二叉树</h2><p><strong>要求</strong>：实习序列化和反序列化函数</p>\n<p>通常情况需要两种遍历序列才能还原二叉树，这是因为二叉树非完全。对空缺的节点使用特殊字符，即可消除二义性，使用单一遍历序列还原二叉树。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BinaryTree</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">BinaryTree</span>.<span class=\"property\">serialize</span> = <span class=\"function\">(<span class=\"params\">root</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> str = [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"title function_\">serialize</span> = (<span class=\"params\">root</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!root) &#123;</span><br><span class=\"line\">      str.<span class=\"title function_\">push</span>(<span class=\"string\">&#x27;$&#x27;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    str.<span class=\"title function_\">push</span>(root.<span class=\"property\">value</span>);</span><br><span class=\"line\">    <span class=\"title function_\">serialize</span>(root.<span class=\"property\">left</span>);</span><br><span class=\"line\">    <span class=\"title function_\">serialize</span>(root.<span class=\"property\">right</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"title function_\">serialize</span>(root);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">BinaryTree</span>.<span class=\"property\">parse</span> = <span class=\"function\">(<span class=\"params\">str</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!str) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = str.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"title function_\">parse</span> = (<span class=\"params\">str</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str[i] === <span class=\"string\">&#x27;$&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> root = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(+str[i]);</span><br><span class=\"line\">    <span class=\"comment\">// 最后一个节点必是叶节点</span></span><br><span class=\"line\">    ++i, root.<span class=\"property\">left</span> = <span class=\"title function_\">parse</span>(str);</span><br><span class=\"line\">    ++i, root.<span class=\"property\">right</span> = <span class=\"title function_\">parse</span>(str);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">parse</span>(str);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符串的排列\"><a href=\"#字符串的排列\" class=\"headerlink\" title=\"字符串的排列\"></a>字符串的排列</h2><p><strong>前提</strong>：不考虑重复字符的问题<br><strong>要求</strong>：输入一个字符串，输出字符串中字符的所有排列</p>\n<p>此题可以用递归，《剑指offer》上的解法简单易行。JS中对字符串的限制（只读）使得代码和C风格有别。这里我们考虑输入是一个字符数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">combinations</span>(<span class=\"params\">str</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!str.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = str.<span class=\"property\">length</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">combine</span>(<span class=\"params\">comb, strs, start</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start === len - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(comb + strs[start]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = start; i &lt; len; i++) &#123;</span><br><span class=\"line\">      [strs[start], strs[i]] = [strs[i], strs[start]];</span><br><span class=\"line\">      <span class=\"comment\">// 需要通过slice方法传递复制</span></span><br><span class=\"line\">      <span class=\"title function_\">combine</span>(comb + strs[start], strs.<span class=\"title function_\">slice</span>(), start+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">combine</span>(<span class=\"string\">&#x27;&#x27;</span>, str, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"求字符串的组合（也可以叫求子集）\"><a href=\"#求字符串的组合（也可以叫求子集）\" class=\"headerlink\" title=\"求字符串的组合（也可以叫求子集）\"></a>求字符串的组合（也可以叫求子集）</h3><p>总共的解数目为$2^n$。从最低位开始，向上寻找时，有两种可能：新字符不出现，新字符出现。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">subsets</span>(<span class=\"params\">str</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!str.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">reduce</span>(<span class=\"params\">res, i</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i === str.<span class=\"property\">length</span>-<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res + str[i]);</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">reduce</span>(res+str[i], i+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"title function_\">reduce</span>(res, i+<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">reduce</span>(<span class=\"string\">&#x27;&#x27;</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输入8个数字的数组放在正方体的8个顶点，有无可能每对面对应的4个顶点和相等\"><a href=\"#输入8个数字的数组放在正方体的8个顶点，有无可能每对面对应的4个顶点和相等\" class=\"headerlink\" title=\"输入8个数字的数组放在正方体的8个顶点，有无可能每对面对应的4个顶点和相等\"></a>输入8个数字的数组放在正方体的8个顶点，有无可能每对面对应的4个顶点和相等</h3><p>相等于寻找全排列，使得a1+a2+a3+a4&#x3D;a5+a6+a7+a8，且a1+a3+a5+a7&#x3D;a2+a4+a6+a8，且a1+a2+a5+a6&#x3D;a3+a4+a7+a8。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">findComb</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = nums.<span class=\"property\">length</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">combine</span>(<span class=\"params\">nums, start</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start === len-<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"title function_\">test</span>(nums)) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(nums);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = start; i &lt; len; i++) &#123;</span><br><span class=\"line\">      [nums[start], nums[i]] = [nums[i], nums[start]];</span><br><span class=\"line\">      <span class=\"title function_\">combine</span>(nums.<span class=\"title function_\">slice</span>(), start + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums[<span class=\"number\">0</span>] + nums[<span class=\"number\">1</span>] + nums[<span class=\"number\">2</span>] + nums[<span class=\"number\">3</span>] == nums[<span class=\"number\">4</span>] + nums[<span class=\"number\">5</span>] + nums[<span class=\"number\">6</span>] + nums[<span class=\"number\">7</span>] &amp;&amp;</span><br><span class=\"line\">        nums[<span class=\"number\">0</span>] + nums[<span class=\"number\">2</span>] + nums[<span class=\"number\">4</span>] + nums[<span class=\"number\">5</span>] == nums[<span class=\"number\">1</span>] + nums[<span class=\"number\">3</span>] + nums[<span class=\"number\">5</span>] + nums[<span class=\"number\">7</span>] &amp;&amp;</span><br><span class=\"line\">        nums[<span class=\"number\">0</span>] + nums[<span class=\"number\">1</span>] + nums[<span class=\"number\">6</span>] + nums[<span class=\"number\">7</span>] == nums[<span class=\"number\">2</span>] + nums[<span class=\"number\">3</span>] + nums[<span class=\"number\">4</span>] + nums[<span class=\"number\">5</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">combine</span>(nums, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8皇后问题\"><a href=\"#8皇后问题\" class=\"headerlink\" title=\"8皇后问题\"></a>8皇后问题</h3><p>8皇后的限制条件在，不得同行同列，不得位于同一对角线。因此，为长度为8的数组初始化填入1~8，代表行数。填入的数代表列数，因为每行每列都只有一个皇后。所以全排列中，只需要删除满足下面条件的排列即可：</p>\n<ul>\n<li><code>i-j != columns[i] - columns[j]</code>且<code>j-i != columns[i] - columns[j]</code>，即不在一个对角线上</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">eightQueens</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">combine</span>(<span class=\"params\">queens, start</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start === <span class=\"number\">7</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(queens);</span><br><span class=\"line\">      count++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = start; i &lt; <span class=\"number\">8</span>; i++) &#123;</span><br><span class=\"line\">      [queens[start], queens[i]] = [queens[i], queens[start]];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title function_\">test</span>(queens, start)) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">combine</span>(queens.<span class=\"title function_\">slice</span>(), start+<span class=\"number\">1</span>);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        [queens[start], queens[i]] = [queens[i], queens[start]];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\">queens, end</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; end; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> diff = queens[end] - queens[i];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (diff == end - i || -diff == end - i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">combine</span>([<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>], <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(count);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种思路会带来重复的解，按照<a href=\"http://www.matrix67.com/blog/archives/266\">Matrix67的思路</a>，可以通过位运算求解。使用row（列占用情况），ld（左下右上对角线占用），rd（右下左上对角线占用）三个变量存储当前列的禁用情况。使用“1”表示禁用，“0”表示可用。解决n皇后的问题代码仅在10行左右。详细解释见链接。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">nQueens</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!n || n &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> limit = (<span class=\"number\">1</span> &lt;&lt; n) - <span class=\"number\">1</span>, sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">queen</span>(<span class=\"params\">row, ld, rd</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (row !== limit) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> pos = limit &amp; ~(row | ld | rd);</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (pos) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> p = pos &amp; -pos; <span class=\"comment\">// 得到最右侧可放子的位置</span></span><br><span class=\"line\">        pos -= p; <span class=\"comment\">// 除去这个位置</span></span><br><span class=\"line\">        <span class=\"title function_\">queen</span>(row|p, (ld|p) &lt;&lt; <span class=\"number\">1</span>, (rd|p) &gt;&gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> sum++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">queen</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"时间效率\"><a href=\"#时间效率\" class=\"headerlink\" title=\"时间效率\"></a>时间效率</h1><h2 id=\"数组中出现次数超过一半的数字\"><a href=\"#数组中出现次数超过一半的数字\" class=\"headerlink\" title=\"数组中出现次数超过一半的数字\"></a>数组中出现次数超过一半的数字</h2><p>思路1：超过一半的数组一定出现在中位数的位置，结合快排的思想，找到中位数<br>思路2：遍历所有数字，遇到与major相同的元素时，计数器+1，反之-1。计数器为0时，更换major。返回最后的major</p>\n<p>注意：最后需要检查数组是否有满足条件的元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">findMajor</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!nums.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> major;</span><br><span class=\"line\">  times = <span class=\"number\">0</span>;</span><br><span class=\"line\">  nums.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">num</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (times === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      major = num;</span><br><span class=\"line\">      times = <span class=\"number\">1</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (num === major) &#123;</span><br><span class=\"line\">      times++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      times--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (nums.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">sum, num</span>) =&gt;</span> &#123; <span class=\"keyword\">return</span> sum + (num === major); &#125;, <span class=\"number\">0</span>) * <span class=\"number\">2</span> &gt; nums.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> major;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"最小的k个数\"><a href=\"#最小的k个数\" class=\"headerlink\" title=\"最小的k个数\"></a>最小的k个数</h2><p>同样的两种思路：</p>\n<ol>\n<li>利用快排的中的partition，找到前k个数，时间复杂度O(n)，但是会修改数组<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">partition</span>(<span class=\"params\">arr, start, end</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (start &gt;= end) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> index = start -<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> split = arr[end];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = start; i &lt; end; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[i] &lt; split) &#123;</span><br><span class=\"line\">      index++;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (i != index) &#123;</span><br><span class=\"line\">        [arr[i], arr[index]] = [arr[index], arr[i]];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  index++;</span><br><span class=\"line\">  arr[end] = arr[index];</span><br><span class=\"line\">  arr[index] = split;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> index;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">minKNums</span>(<span class=\"params\">nums, k</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!nums || k &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (k &gt;= nums.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> start = <span class=\"number\">0</span>,</span><br><span class=\"line\">      end = nums.<span class=\"property\">length</span> - <span class=\"number\">1</span>,</span><br><span class=\"line\">      index = <span class=\"title function_\">partition</span>(nums, start, end);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(index != k-<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index &gt; k-<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      end = index - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      start = index + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    index = <span class=\"title function_\">partition</span>(nums, start, end);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(nums.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, k));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>维护一个排序的长度为k的数据容器，当容器满时，根据容器最大值更新容器，时间复杂度O(nlogk)，空间复杂度O(k)，但是在k较小时，性能很接近</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MinSet</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> <span class=\"title function_\">max</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> <span class=\"title function_\">len</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">input</span>(<span class=\"params\">element</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">remove</span>(<span class=\"params\">element</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">toString</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">minKNums</span>(<span class=\"params\">nums, k</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!nums || k &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (k &gt;= nums.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> set = <span class=\"keyword\">new</span> <span class=\"title class_\">MinSet</span>();</span><br><span class=\"line\">  nums.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">num</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (set.<span class=\"property\">len</span> === k) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (set.<span class=\"property\">max</span>.<span class=\"property\">value</span> &gt; num) &#123;</span><br><span class=\"line\">        set.<span class=\"title function_\">remove</span>(set.<span class=\"property\">max</span>);</span><br><span class=\"line\">        set.<span class=\"title function_\">input</span>(num);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      set.<span class=\"title function_\">input</span>(num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  set.<span class=\"title function_\">toString</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数据流的中位数\"><a href=\"#数据流的中位数\" class=\"headerlink\" title=\"数据流的中位数\"></a>数据流的中位数</h2><p>使用二叉树、最大堆最小堆完成。保证最大堆和最小堆的数目差不超过1即可。当然，首先要实现最大和最小堆</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">inherit</span>(<span class=\"params\">son, father</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> prototype = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(father.<span class=\"property\"><span class=\"keyword\">prototype</span></span>);</span><br><span class=\"line\">  prototype.<span class=\"property\">constructor</span> = son;</span><br><span class=\"line\">  son.<span class=\"property\">constructor</span> = prototype;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Heap</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">heap</span> = [];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Heap</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">parent</span> = <span class=\"keyword\">function</span>(<span class=\"params\">i</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (i+<span class=\"number\">1</span>) / <span class=\"number\">2</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Heap</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">left</span> = <span class=\"keyword\">function</span>(<span class=\"params\">i</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">2</span> * i + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Heap</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">right</span> = <span class=\"keyword\">function</span>(<span class=\"params\">i</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">2</span> * i + <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Heap</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">size</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">heap</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">MinHeap</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Heap</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">minify</span>(<span class=\"params\">index</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> l = <span class=\"variable language_\">this</span>.<span class=\"title function_\">left</span>(index),</span><br><span class=\"line\">        r = <span class=\"variable language_\">this</span>.<span class=\"title function_\">right</span>(index),</span><br><span class=\"line\">        size = <span class=\"variable language_\">this</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l &lt; size &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">heap</span>[l] &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">heap</span>[index]) &#123;</span><br><span class=\"line\">      i = l;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      i = index;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r &lt; size &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">heap</span>[r] &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">heap</span>[i]) &#123;</span><br><span class=\"line\">      i = r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i != index) &#123;</span><br><span class=\"line\">      [<span class=\"variable language_\">this</span>.<span class=\"property\">heap</span>[index], <span class=\"variable language_\">this</span>.<span class=\"property\">heap</span>[i]] = [<span class=\"variable language_\">this</span>.<span class=\"property\">heap</span>[i], <span class=\"variable language_\">this</span>.<span class=\"property\">heap</span>[index]];</span><br><span class=\"line\">      <span class=\"title function_\">minify</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">add</span> = <span class=\"keyword\">function</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">heap</span>.<span class=\"title function_\">push</span>(num);</span><br><span class=\"line\">    <span class=\"title function_\">minify</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">heap</span>.<span class=\"property\">length</span> / <span class=\"number\">2</span> - <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">shift</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> num = <span class=\"variable language_\">this</span>.<span class=\"property\">heap</span>.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\">    <span class=\"title function_\">minify</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">heap</span>.<span class=\"property\">length</span> / <span class=\"number\">2</span> - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">top</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">heap</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">inherit</span>(<span class=\"title class_\">MinHeap</span>, <span class=\"title class_\">Heap</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">MaxHeap</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Heap</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">maxify</span>(<span class=\"params\">index</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//... 同上</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">add</span> = <span class=\"keyword\">function</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//... 同上</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">shift</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> num = <span class=\"variable language_\">this</span>.<span class=\"property\">heap</span>.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\">    <span class=\"title function_\">maxify</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">heap</span>.<span class=\"property\">length</span> / <span class=\"number\">2</span> - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">top</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">   <span class=\"comment\">//... 同上</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 借助上面的MinHeap和MaxHeap实现 */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">DynamicArray</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">min</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">MinHeap</span>();</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">max</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">MaxHeap</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">DynamicArray</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">insert</span> = <span class=\"keyword\">function</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> minSize = <span class=\"variable language_\">this</span>.<span class=\"property\">min</span>.<span class=\"title function_\">size</span>(),</span><br><span class=\"line\">      maxSize = <span class=\"variable language_\">this</span>.<span class=\"property\">max</span>.<span class=\"title function_\">size</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (minSize === maxSize) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">min</span>.<span class=\"title function_\">add</span>(num);</span><br><span class=\"line\">    <span class=\"comment\">// 插入在最小堆，但是数字在最大堆的范围</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (maxSize &gt; <span class=\"number\">0</span> &amp;&amp; num &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">max</span>.<span class=\"title function_\">top</span>()) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">max</span>.<span class=\"title function_\">add</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">min</span>.<span class=\"title function_\">shift</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">max</span>.<span class=\"title function_\">add</span>(num);</span><br><span class=\"line\">    <span class=\"comment\">// 同理，插入在最大堆，但是数字在最小堆的范围</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (minSize &gt; <span class=\"number\">0</span> &amp;&amp; num &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">min</span>.<span class=\"title function_\">top</span>()) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">min</span>.<span class=\"title function_\">add</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">max</span>.<span class=\"title function_\">shift</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">DynamicArray</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">getMedian</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> size = <span class=\"variable language_\">this</span>.<span class=\"property\">min</span>.<span class=\"title function_\">size</span>() + <span class=\"variable language_\">this</span>.<span class=\"property\">max</span>.<span class=\"title function_\">size</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!size) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">warn</span>(<span class=\"string\">&#x27;Empty array.&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (size &amp; <span class=\"number\">0x01</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">min</span>.<span class=\"title function_\">top</span>();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">min</span>.<span class=\"title function_\">top</span>() + <span class=\"variable language_\">this</span>.<span class=\"property\">max</span>.<span class=\"title function_\">top</span>()) / <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"连续子数组的最大和\"><a href=\"#连续子数组的最大和\" class=\"headerlink\" title=\"连续子数组的最大和\"></a>连续子数组的最大和</h2><p><strong>前提</strong>：数组由正负数组成。</p>\n<p>经典的动态规划问题。用双指针的方法，采用贪婪算法，用<code>f[i]</code>表示以第i位结尾的最大和，当<code>f[i-1]&lt;=0</code>时，可以抛弃之前的和，以当前元素为<code>f[i]</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">maxSum</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!nums.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = nums.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      res = nums[i];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      res += nums[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-n整数中1出现的次数\"><a href=\"#1-n整数中1出现的次数\" class=\"headerlink\" title=\"1~n整数中1出现的次数\"></a>1~n整数中1出现的次数</h2><p>这种数学题，多半会有找规律的简单方法。普通的方法是，逐个寻找每个数字中1出现的次数，时间复杂度O(nlogn)。逐位寻找1出现的次数，再累加，时间复杂度可以降至O(logn)。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">numOf1</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">count</span>(<span class=\"params\">str</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> first = str[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> len = str.<span class=\"property\">length</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str.<span class=\"property\">length</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> first &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 第一位中1出现的次数</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> firstCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (first &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      firstCount = <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">10</span>, len-<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (first == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      firstCount = +str.<span class=\"title function_\">substr</span>(<span class=\"number\">1</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 剩下的位数可以通过排列组合计算</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> otherCount = first * (len - <span class=\"number\">1</span>) * <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">10</span>, len-<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> firstCount + otherCount + <span class=\"title function_\">count</span>(str.<span class=\"title function_\">substr</span>(<span class=\"number\">1</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> numStr = <span class=\"string\">`<span class=\"subst\">$&#123;num&#125;</span>`</span>;</span><br><span class=\"line\">  <span class=\"title function_\">count</span>(numStr);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数字序列中某一位的数字\"><a href=\"#数字序列中某一位的数字\" class=\"headerlink\" title=\"数字序列中某一位的数字\"></a>数字序列中某一位的数字</h2><p><strong>前提</strong>：数字以<code>0123456789101112131415...</code>的格式序列化</p>\n<p>需要找到规律。1位数占用10位，2位数占用180位，3位数占用2700位，……，n位数占用9 * (10 ^ n)位。通过循环确定位数后，对n取余，能知道是n位数第几个数的第几位。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">findKthDigit</span>(<span class=\"params\">k</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">countInDigits</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (n === <span class=\"number\">1</span> ? <span class=\"number\">10</span> : <span class=\"number\">9</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">10</span>, n-<span class=\"number\">1</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 第m个n位数的第k位</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">find</span>(<span class=\"params\">n, m, k</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 找到n位数的起始</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> start = <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">10</span>, n - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> num = start + m;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num / <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">10</span>, n - k - <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (k &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> digits = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (k &gt;= <span class=\"title function_\">countInDigits</span>(digits)) &#123;</span><br><span class=\"line\">    k -= <span class=\"title function_\">countInDigits</span>(digits++);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">find</span>(digits, k / digits, k % digits);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"把数组排成最小的数\"><a href=\"#把数组排成最小的数\" class=\"headerlink\" title=\"把数组排成最小的数\"></a>把数组排成最小的数</h2><p><strong>要求</strong>：拼接数组中的数，使之最小</p>\n<p>此题的思路在拓展排序的规则。当组合<code>mn &lt; nm</code>时，说明m应该在前，即元素间的比较准则是mn和nm的大小关系。注意大数问题，应该比较字符串。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">minComb</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  nums.<span class=\"title function_\">sort</span>(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"string\">&#x27;&#x27;</span> + a + b &gt; <span class=\"string\">&#x27;&#x27;</span> + b + a ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"把数字翻译成字符串\"><a href=\"#把数字翻译成字符串\" class=\"headerlink\" title=\"把数字翻译成字符串\"></a>把数字翻译成字符串</h2><p><strong>前提</strong>：0翻译成‘a’，1翻译成‘b’，逐位进行翻译，有时会有多种结果<br><strong>要求</strong>：求可能的结果数目</p>\n<p>动态规划，避免重复解决子问题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">translateCount</span>(<span class=\"params\">numStr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!numStr || +numStr &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> count;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> counts = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = numStr.<span class=\"property\">length</span> - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i === numStr.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      count[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    count = count[i+<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> comb = +(count[i] + count[i+<span class=\"number\">1</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (comb &lt;= <span class=\"number\">25</span> &amp;&amp; comb &gt;= <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">      count += (i &lt; numStr.<span class=\"property\">length</span> - <span class=\"number\">2</span> ? counts[i+<span class=\"number\">2</span>] : <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    count[i] = count;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> count[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"礼物的最大价值\"><a href=\"#礼物的最大价值\" class=\"headerlink\" title=\"礼物的最大价值\"></a>礼物的最大价值</h2><p><strong>前提</strong>：从m*n的格子中拿礼物，从左上角开始，每次向下或向右取一格，直到右下角<br><strong>要求</strong>：礼物价值总和最大</p>\n<p>和上面的思路很类似，通过循环替代递归。比带有备忘录的递归更省时间和空间。坐标是(i, j)的格子最大总和只取决于(i-1, j)和(i, j-1)。因此可以用一维数组代替二维数组，减少空间使用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getMaxValue</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!nums.<span class=\"property\">length</span> || !nums[<span class=\"number\">0</span>].<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> row = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> rows = nums.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> columns = nums[<span class=\"number\">0</span>].<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; rows; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; columns; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> up = (i &gt; <span class=\"number\">0</span> ? row[j] : <span class=\"number\">0</span>)</span><br><span class=\"line\">      <span class=\"keyword\">let</span> left = (j &gt; <span class=\"number\">0</span> ? row[j-<span class=\"number\">1</span>] : <span class=\"number\">0</span>);</span><br><span class=\"line\">      row[j] = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(left, up) + nums[i][j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> row[columns - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"最长的不包括重复字符的子字符串\"><a href=\"#最长的不包括重复字符的子字符串\" class=\"headerlink\" title=\"最长的不包括重复字符的子字符串\"></a>最长的不包括重复字符的子字符串</h2><p><strong>要求</strong>：返回字符串的长度</p>\n<p>用类似动态规划的思路，借助之前的结果递推。同时，使用Object存储对应字符上次出现的位置，可以保证O(n)的时间复杂度。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">longestSubStrWithDup</span>(<span class=\"params\">str</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!str.<span class=\"property\">length</span> || str.<span class=\"property\">length</span> &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str.<span class=\"property\">length</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> pos = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> strArr = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(str);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> maxLen = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> curLen = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  strArr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">char, num</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 此前未出现过或出现在当前最长子字符串之外</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> position = pos[char];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> position !== <span class=\"string\">&#x27;undefined&#x27;</span> || position + curLen &lt; i) &#123;</span><br><span class=\"line\">      curLen++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 出现在此前的最长子字符串中时，需要更新长度值</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (curLen &gt; maxLen) &#123;</span><br><span class=\"line\">        maxLen = curLen;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      curLen = i - position;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 更新位置</span></span><br><span class=\"line\">    pos[char] = i;</span><br><span class=\"line\">  &#125;)；</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (curLen &gt; maxLen) &#123;</span><br><span class=\"line\">    maxLen = curLen;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> maxLen;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"丑数\"><a href=\"#丑数\" class=\"headerlink\" title=\"丑数\"></a>丑数</h2><p><strong>前提</strong>：丑数是指只包含因子2、3、5的数。求给定位置的丑数</p>\n<p>普通的思路是通过循环依次判断数字是否为丑数直到找到。在允许空间消耗时，我们用数组去存储所有的丑数，并不断更新数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">uglyNum</span>(<span class=\"params\">k</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (k &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ugly = [<span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ugly2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ugly3 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ugly5 = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(count &lt; k) &#123;</span><br><span class=\"line\">    uglynums.<span class=\"title function_\">push</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">min</span>(ugly[ugly2]*<span class=\"number\">2</span>, ugly[ugly3]*<span class=\"number\">3</span>, ugly[ugly5]*<span class=\"number\">5</span>));</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ugly[ugly2]*<span class=\"number\">2</span> &lt;= ugly[count]) &#123;</span><br><span class=\"line\">      ugly2++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ugly[ugly3]*<span class=\"number\">3</span> &lt;= ugly[count]) &#123;</span><br><span class=\"line\">      ugly3++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ugly[ugly5]*<span class=\"number\">5</span> &lt;= ugly[count]) &#123;</span><br><span class=\"line\">      ugly5++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    count++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ugly.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第一个只出现一次的字符\"><a href=\"#第一个只出现一次的字符\" class=\"headerlink\" title=\"第一个只出现一次的字符\"></a>第一个只出现一次的字符</h2><p>哈希表，JavaScript中使用Object即可。第一次扫描时去除所有重复元素，第二次扫描时，打印第一个字符。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">firstUniqueChar</span>(<span class=\"params\">str</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> strArr = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(str);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> chars = &#123;&#125;;</span><br><span class=\"line\">  strArr.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">char</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!chars[char]) &#123;</span><br><span class=\"line\">      chars[char] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      chars[char]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  strArr.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">char</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (chars[char] === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> char;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>类似问题都可以用哈希表解决。</p>\n<h2 id=\"数组中的逆序对\"><a href=\"#数组中的逆序对\" class=\"headerlink\" title=\"数组中的逆序对\"></a>数组中的逆序对</h2><p>逆序对的存在是数组未排序的结果。因此使用排序算法得到交换元素的次数即可。最直观的使用冒泡排序，时间复杂度为O(n^2)。使用归并和快排可以达到O(nlogn)的时间复杂度。</p>\n<p>略。</p>\n<h2 id=\"两个链表的第一个公共节点\"><a href=\"#两个链表的第一个公共节点\" class=\"headerlink\" title=\"两个链表的第一个公共节点\"></a>两个链表的第一个公共节点</h2><p>因为链表从交汇节点后拥有相同的节点，所以，从后向前回溯，直到节点不同为止即可。时间复杂度O(m+n)，空间复杂度O(m+n)。若不使用辅助栈，空间复杂度还可降至O(1)。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">findFirstCommonNode</span>(<span class=\"params\">list1, list2</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!list1 || !list2) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 遍历list1和list2到尾节点</span></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 向前回溯直到节点不同</span></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"排序数组中查找数字（二分查找）\"><a href=\"#排序数组中查找数字（二分查找）\" class=\"headerlink\" title=\"排序数组中查找数字（二分查找）\"></a>排序数组中查找数字（二分查找）</h2><h3 id=\"排序数组中数字出现的次数\"><a href=\"#排序数组中数字出现的次数\" class=\"headerlink\" title=\"排序数组中数字出现的次数\"></a>排序数组中数字出现的次数</h3><p>思路是，查找到数字第一次出现的地方和最后一次出现的地方。通过二分法查找，数字较小时，在右半边；较大时，在左半边；相等时判断左&#x2F;右是否还有该元素。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">numOfK</span>(<span class=\"params\">arr, k</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!arr.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">findFirst</span>(<span class=\"params\">start, end</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &gt; end) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> middle = (start + end) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> median = arr[middle];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (median &lt; k) &#123;</span><br><span class=\"line\">      start = middle + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (median &gt; k) &#123;</span><br><span class=\"line\">      end = middle - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (middle &gt; <span class=\"number\">0</span> &amp;&amp; arr[middle-<span class=\"number\">1</span>] === median) &#123;</span><br><span class=\"line\">        end = middle - <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> middle;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">findFirst</span>(start, end);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">findLast</span>(<span class=\"params\">start, end</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &gt; end) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> middle = (start + end) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> median = arr[middle];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (median &lt; k) &#123;</span><br><span class=\"line\">      start = middle + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (median &gt; k) &#123;</span><br><span class=\"line\">      end = middle - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (middle &lt; arr.<span class=\"property\">length</span>-<span class=\"number\">1</span> &amp;&amp; arr[middle+<span class=\"number\">1</span>] === median) &#123;</span><br><span class=\"line\">        start = middle + <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> middle;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">findLast</span>(start, end);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> first = <span class=\"title function_\">findFirst</span>(<span class=\"number\">0</span>, arr.<span class=\"property\">length</span>-<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> last = <span class=\"title function_\">findLast</span>(<span class=\"number\">0</span>, arr.<span class=\"property\">length</span>-<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title function_\">findFirst</span>() === -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> last - first + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"寻找从0-n-1中缺少的数字\"><a href=\"#寻找从0-n-1中缺少的数字\" class=\"headerlink\" title=\"寻找从0~n-1中缺少的数字\"></a>寻找从0~n-1中缺少的数字</h3><p>数组事先排序时，借助二分法查找，时间复杂度O(logn)；未排序时，通过求和和<code>n(n-1)/2</code>求差得出（不考虑大数问题的话）。中间元素和下标相等时，在右半边寻找；不相等时，若左侧元素相等，则返回该元素，左侧元素不等时，在左半边寻找。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">findLeftNum</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = arr.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!len || len &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> right = len - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> middle = (left + right) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[middle] === middle) &#123;</span><br><span class=\"line\">      left = middle + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (middle &gt; <span class=\"number\">0</span> &amp;&amp; arr[middle-<span class=\"number\">1</span>] !== middle-<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        right = middle - <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> middle;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (left &gt; right) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> len;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数组中和下标相等的元素\"><a href=\"#数组中和下标相等的元素\" class=\"headerlink\" title=\"数组中和下标相等的元素\"></a>数组中和下标相等的元素</h3><p><strong>前提</strong>：数组元素都为整数，且单调递增。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">numsEqualsToIndex</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!nums.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>,</span><br><span class=\"line\">      right = nums.<span class=\"property\">length</span>-<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> mid = (left + right) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums[mid] === mid) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums[mid] &gt; mid) &#123;</span><br><span class=\"line\">      right = middle - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      left = middle + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二叉搜索树的第k大的节点（遍历）\"><a href=\"#二叉搜索树的第k大的节点（遍历）\" class=\"headerlink\" title=\"二叉搜索树的第k大的节点（遍历）\"></a>二叉搜索树的第k大的节点（遍历）</h2><p>利用二叉搜索树的中序遍历的特点，找到第k大的节点。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">findKthNode</span>(<span class=\"params\">root, k</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (k &lt; <span class=\"number\">1</span> || !root) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (root.<span class=\"property\">left</span>) &#123;</span><br><span class=\"line\">    res = <span class=\"title function_\">findKthNode</span>(root.<span class=\"property\">left</span>, k);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      res = root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    k--;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (root.<span class=\"property\">right</span>) &#123;</span><br><span class=\"line\">    res = <span class=\"title function_\">findKthNode</span>(root.<span class=\"property\">right</span>, k);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二叉树的深度\"><a href=\"#二叉树的深度\" class=\"headerlink\" title=\"二叉树的深度\"></a>二叉树的深度</h2><p>使用递归，比较左右子树的深度，取较大值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">treeDepth</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!root) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = <span class=\"title function_\">treeDepth</span>(root.<span class=\"property\">left</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> right = <span class=\"title function_\">treeDepth</span>(root.<span class=\"property\">right</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(left, right) + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"判断一棵树是否是平衡二叉树\"><a href=\"#判断一棵树是否是平衡二叉树\" class=\"headerlink\" title=\"判断一棵树是否是平衡二叉树\"></a>判断一棵树是否是平衡二叉树</h3><p>可以使用上面的思路，递归判断除叶节点外每个节点的左右子树深度。但是这样会重复遍历节点。但是如果使用后序遍历，就可以先遍历左右子树，再回到根节点。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isBalanceTree</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">tree</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!root) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">depth</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"attr\">flag</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = <span class=\"title function_\">tree</span>(root.<span class=\"property\">left</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> right = <span class=\"title function_\">tree</span>(root.<span class=\"property\">right</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left.<span class=\"property\">flag</span> &amp;&amp; right.<span class=\"property\">flag</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> diff = left.<span class=\"property\">depth</span> - right.<span class=\"property\">depth</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (diff &lt;= <span class=\"number\">1</span> &amp;&amp; diff &gt;= -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">          <span class=\"attr\">depth</span>: <span class=\"number\">1</span> + <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(left.<span class=\"property\">depth</span>, right.<span class=\"property\">depth</span>),</span><br><span class=\"line\">          <span class=\"attr\">flag</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">flag</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">tree</span>(root);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组中数字出现的次数（位运算）\"><a href=\"#数组中数字出现的次数（位运算）\" class=\"headerlink\" title=\"数组中数字出现的次数（位运算）\"></a>数组中数字出现的次数（位运算）</h2><h3 id=\"在数组中找到唯二两个只出现一次的元素\"><a href=\"#在数组中找到唯二两个只出现一次的元素\" class=\"headerlink\" title=\"在数组中找到唯二两个只出现一次的元素\"></a>在数组中找到唯二两个只出现一次的元素</h3><p><strong>前提</strong>：数组中其他元素都出现两次。</p>\n<p>还是使用异或，不过这次异或的结果是两个数组的异或结果。找到结果中第一位1，说明这一位两个数不同，据此将数组分成两部分，分别异或，得到最终结果。时间复杂度O(n)，空间复杂度O(1)。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">find2UniqueNums</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sum = nums.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">sum, cur</span>) =&gt;</span> sum ^ cur);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> index = sum &amp; -sum;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> nums1 = nums.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">num</span> =&gt;</span> num &amp; index);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> nums2 = nums.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">num</span> =&gt;</span> !num &amp; index);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">unique1</span>: nums1.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">sum, cur</span>) =&gt;</span> sum ^ cur);</span><br><span class=\"line\">    <span class=\"attr\">unique2</span>: nums2.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">sum, cur</span>) =&gt;</span> sum ^ cur);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在数组中找到唯一一个出现一次的数字\"><a href=\"#在数组中找到唯一一个出现一次的数字\" class=\"headerlink\" title=\"在数组中找到唯一一个出现一次的数字\"></a>在数组中找到唯一一个出现一次的数字</h3><p><strong>前提</strong>：其余数字都出现3次。</p>\n<p>使用和上面类似的思路，使用二进制表示每一个数，用数组存储各位1出现的和，累加后，将每一位数字对3取余，得到的数字就是结果的二进制表示。</p>\n<p>略</p>\n<h2 id=\"和为s的若干数字（双指针）\"><a href=\"#和为s的若干数字（双指针）\" class=\"headerlink\" title=\"和为s的若干数字（双指针）\"></a>和为s的若干数字（双指针）</h2><h3 id=\"2个数\"><a href=\"#2个数\" class=\"headerlink\" title=\"2个数\"></a>2个数</h3><p><strong>前提</strong>：数组是单调递增的。因此可以在头尾放两个指针，向中间靠拢，逼近最终结果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sumS</span>(<span class=\"params\">nums, s</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = nums.<span class=\"property\">length</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!len || len &lt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> right = len - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum = nums[left] + nums[right];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sum === s) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> [nums[left], nums[right]];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sum &lt; s) &#123;</span><br><span class=\"line\">      left++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      right--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"正数序列\"><a href=\"#正数序列\" class=\"headerlink\" title=\"正数序列\"></a>正数序列</h3><p><strong>前提</strong>：打印出和为s的<strong>连续正数序列</strong>，长度最少为1。</p>\n<p>若使用双指针，需要先确定上下界。这里的序列起始的上界为<code>n/2</code>，下界是1。然后使用类似的方法，确定起始后，后移后界求序列。时间复杂度O(n^2)。然而，实际上，确定下界后，连续正数序列和与序列长度满足函数关系<code>f(m, n) = (m + n)(n - m + 1) / 2</code>（其中m为起始值，n为截止值）。问题变成了检验后界是否满足一元二次方程组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sumSSeq</span>(<span class=\"params\">s</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (s &lt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">print</span>(<span class=\"params\">i, j</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = i; index &lt;= j; index++) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(index);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>, limit = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(s/<span class=\"number\">2</span>); i &lt;= limit; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> j = i+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (j &lt;= limit+<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> sum = (i + j) * (j - i + <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (sum &gt;= s) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sum === s) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">print</span>(i, j);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      j++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"翻转字符串（多次翻转）\"><a href=\"#翻转字符串（多次翻转）\" class=\"headerlink\" title=\"翻转字符串（多次翻转）\"></a>翻转字符串（多次翻转）</h2><h3 id=\"翻转单词的顺序\"><a href=\"#翻转单词的顺序\" class=\"headerlink\" title=\"翻转单词的顺序\"></a>翻转单词的顺序</h3><p><strong>要求</strong>：翻转一句话中所有单词的顺序。</p>\n<p>此题可以先翻转所有字符，再翻转每个单词内的字符顺序。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverseByWord</span>(<span class=\"params\">sentence</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sentence.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27; &#x27;</span>).<span class=\"title function_\">reverse</span>().<span class=\"title function_\">join</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"左旋转字符串\"><a href=\"#左旋转字符串\" class=\"headerlink\" title=\"左旋转字符串\"></a>左旋转字符串</h3><p><strong>要求</strong>：将字符串头部的若干字符转移到字符尾部。</p>\n<p>使用类似上面的思路，可以不用<code>substring</code>方法，用翻转也可实现，不过在JS中无法对字符串自由写入，法2反而不如法1。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 法1，使用substring</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">leftReverse</span>(<span class=\"params\">str, n</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!str || n &gt;= str.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> str.<span class=\"title function_\">substring</span>(n) + str.<span class=\"title function_\">substring</span>(<span class=\"number\">0</span>, n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 法2，使用reverse</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">leftReverse</span>(<span class=\"params\">str, n</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!str || n &gt;= str.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> strArr = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(str);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> strArr.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, n).<span class=\"title function_\">reverse</span>().<span class=\"title function_\">concat</span>(strArr.<span class=\"title function_\">slice</span>(n).<span class=\"title function_\">reverse</span>()).<span class=\"title function_\">reverse</span>().<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"队列的最大值（队列）\"><a href=\"#队列的最大值（队列）\" class=\"headerlink\" title=\"队列的最大值（队列）\"></a>队列的最大值（队列）</h2><h3 id=\"滑动窗口的最大值\"><a href=\"#滑动窗口的最大值\" class=\"headerlink\" title=\"滑动窗口的最大值\"></a>滑动窗口的最大值</h3><p><strong>前提</strong>：固定滑动窗口的宽度<br><strong>要求</strong>：返回窗口内的最大值组成的数组</p>\n<p>使用双端队列去维护滑动窗口内的最大值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">maxInWindow</span>(<span class=\"params\">nums, k</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!nums.<span class=\"property\">length</span> || k &gt; nums.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> queue = [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; k; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(nums[queue[queue.<span class=\"property\">length</span>-<span class=\"number\">1</span>]] &lt; nums[i]) &#123;</span><br><span class=\"line\">      queue.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    queue.<span class=\"title function_\">push</span>(i);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = k; i &lt; nums.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">push</span>(nums[queue[<span class=\"number\">0</span>]]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(nums[i] &gt;= nums[queue[queue.<span class=\"property\">length</span>-<span class=\"number\">1</span>]]) &#123;</span><br><span class=\"line\">      queue.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 出界的大值要移出</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (queue[<span class=\"number\">0</span>] &lt;= i - k) &#123;</span><br><span class=\"line\">      queue.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    queue.<span class=\"title function_\">push</span>(i);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  res.<span class=\"title function_\">push</span>(nums[queue[<span class=\"number\">0</span>]]);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"队列的最大值\"><a href=\"#队列的最大值\" class=\"headerlink\" title=\"队列的最大值\"></a>队列的最大值</h3><p><strong>要求</strong>：设计队列，使max，shift和push的时间复杂度为1。</p>\n<p>因为在push和shift操作时，队列就像上面的滑动窗口，可以用相同方法实现max。</p>\n<p>略。</p>\n<hr>\n<h1 id=\"建模能力\"><a href=\"#建模能力\" class=\"headerlink\" title=\"建模能力\"></a>建模能力</h1><h2 id=\"n个骰子的点数（化递归为循环）\"><a href=\"#n个骰子的点数（化递归为循环）\" class=\"headerlink\" title=\"n个骰子的点数（化递归为循环）\"></a>n个骰子的点数（化递归为循环）</h2><p><strong>要求</strong>：输入n，返回n个骰子朝上一面的点数之和的概率分布。</p>\n<p>使用循环的角度考虑，骰子递增时，点数和为k的可能性为k-6，k-5，k-4，……，k-1的可能性之和。因此我们可以得到下面的结果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">posibilities</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">2</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">6</span> * n; j &gt; <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">      res[j] = res.<span class=\"title function_\">slice</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(<span class=\"number\">0</span>, j-<span class=\"number\">6</span>), j).<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">sum, cur</span>) =&gt;</span> sum + (cur || <span class=\"number\">0</span>), <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>).<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">num</span> =&gt;</span> num / <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">6</span>, n));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"扑克牌中的顺子\"><a href=\"#扑克牌中的顺子\" class=\"headerlink\" title=\"扑克牌中的顺子\"></a>扑克牌中的顺子</h2><p><strong>前提</strong>：从扑克牌中随机取5张，大小王可以当做任意数字，判断是否为顺子</p>\n<p>这里我们假设传入的数组已经按照扑克牌中的大小对牌进行了排序。整体分3步，首先向数组的指定项插入数字，然后判断0的数目，最后看0的数目是否能填满<code>undefined</code>的个数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isSeq</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!nums.<span class=\"property\">length</span> || nums.<span class=\"property\">length</span> &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> numbers = [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> zeros = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> index = -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  nums.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">num</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      zeros++;</span><br><span class=\"line\">      <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!numbers[num]) &#123;</span><br><span class=\"line\">      numbers[num] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 有对子就不是顺子</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  numbers.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">num, idx</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> num !== <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">        zeros--;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (zeros-- &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          index = idx;</span><br><span class=\"line\">          <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> num !== <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">        flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> numbers.<span class=\"title function_\">slice</span>(index).<span class=\"title function_\">every</span>(<span class=\"function\"><span class=\"params\">num</span> =&gt;</span> <span class=\"keyword\">typeof</span> num === <span class=\"string\">&#x27;undefined&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"约瑟夫问题\"><a href=\"#约瑟夫问题\" class=\"headerlink\" title=\"约瑟夫问题\"></a>约瑟夫问题</h2><p>字面意义的解法就不说了。根据《剑指offer》上的递推公式，可以得到<code>f(n,m)=[f(n-1,m)+m]%n</code>。因此，可以用循环实现。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">joseph</span>(<span class=\"params\">n, m</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span> || m &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> remains = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">    remains = (remains + m) % i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> remains;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"股票的最大利润\"><a href=\"#股票的最大利润\" class=\"headerlink\" title=\"股票的最大利润\"></a>股票的最大利润</h2><p>也即起始、末尾数对最大差值区间。当遍历到<code>f[i]</code>时，寻找之前的最小值，即可得到利润，遍历整个数组即可得到最大利润，时间复杂度为O(n)。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">maxBenifit</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = nums.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!len || len &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> min = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> benifit = nums[i] - min;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> res === <span class=\"string\">&#x27;undefined&#x27;</span> || res &lt; benifit) &#123;</span><br><span class=\"line\">      res = benifit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (benifit &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      min = nums[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"不使用控制结构语句求解1-2-3-…-n\"><a href=\"#不使用控制结构语句求解1-2-3-…-n\" class=\"headerlink\" title=\"不使用控制结构语句求解1+2+3+…+n\"></a>不使用控制结构语句求解1+2+3+…+n</h2><p>使用递归等等价形式即可。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Array</span>(n).<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">sum, i</span>) =&gt;</span> sum + i, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"不用加减乘除做加法\"><a href=\"#不用加减乘除做加法\" class=\"headerlink\" title=\"不用加减乘除做加法\"></a>不用加减乘除做加法</h2><p>使用异或可以得到没有进位的结果。可以通过位与运算得到都是1的位。和异或结果异或，直到位与结果都为0为止。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sum = a ^ b,</span><br><span class=\"line\">      extra = a &amp; b;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!extra) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tmp = sum &amp; extra;</span><br><span class=\"line\">    sum = sum ^ (extra &lt;&lt; <span class=\"number\">1</span>);</span><br><span class=\"line\">    extra = tmp;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"构建乘积数组\"><a href=\"#构建乘积数组\" class=\"headerlink\" title=\"构建乘积数组\"></a>构建乘积数组</h2><p><strong>要求</strong>：给定数组A，构建数组B，其中每个元素是A中缺少对应位元素的总乘积。不能使用除法。</p>\n<p>使用两个辅助数组分别存储数组从前到后和从后到前两段元素的乘积。空间复杂度O(n)的情况下，可以在O(n)时间上得到结果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">multiArr</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!nums.<span class=\"property\">length</span> || nums.<span class=\"property\">length</span> &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> m1 = <span class=\"number\">1</span>,</span><br><span class=\"line\">      m2 = <span class=\"number\">1</span>,</span><br><span class=\"line\">      mArr1 = [],</span><br><span class=\"line\">      mArr2 = [],</span><br><span class=\"line\">      res = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">    m1 *= nums[i];</span><br><span class=\"line\">    m2 *= nums[n - i - <span class=\"number\">1</span>];</span><br><span class=\"line\">    mArr1.<span class=\"title function_\">push</span>(m1);</span><br><span class=\"line\">    mArr2.<span class=\"title function_\">unshift</span>(m2);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">push</span>(mArr1[i] * mArr2[i]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "面试",
                "JavaScript"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2017/04/05/vue-reactive-sourcecode/",
            "url": "http://shenlvmeng.github.com/blog/2017/04/05/vue-reactive-sourcecode/",
            "title": "Vue2.0的响应式设计原理",
            "date_published": "2017-04-05T07:12:20.000Z",
            "content_html": "<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>上周抽空看了看Vue的源码，设计的精巧让我这个鶸一时吸收不来。如果想写篇既大又全的文章，一劳永逸地介绍Vue2.0的源码，以我的水平显然是做不到的。于是就只取一瓢饮地，简单记录下Vue2.0在响应式原理上的设计。其他的部分等我功力深厚了（其实就是懒）再做总结吧。</p>\n<h3 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h3><p>这一部分是Vue响应式原理的基础。包含Observer类，Watcher类，Dep类，事件订阅模式，还有最关键的<code>Object.defineProperty</code>方法。</p>\n<h4 id=\"Object-defineProperty\"><a href=\"#Object-defineProperty\" class=\"headerlink\" title=\"Object.defineProperty\"></a>Object.defineProperty</h4><p>Vue实现数据绑定的方式和其他的MVVM同侪不同，React和backbone（这货不是MVVM）采用的是典型的发布订阅模式，Angular则采用的脏值检测。</p>\n<p>Vue使用了更为隐蔽和magical的<code>Object.defineProperty</code>设置对象访问器属性（这也意味着Vue只支持到IE9+）。</p>\n<blockquote><p>把一个普通 Javascript 对象传给 Vue 实例的 data 选项，Vue 将遍历此对象所有的属性，并使用 Object.defineProperty 把这些属性全部转为 getter&#x2F;setter。Object.defineProperty 是仅 ES5 支持，且无法 shim 的特性，这也就是为什么 Vue 不支持 IE8 以及更低版本浏览器的原因。</p>\n</blockquote>\n\n<p><code>Object.defineProperty()</code>可以定义对象的访问器属性，关于访问器属性的更多介绍可以看<a href=\"https://shenlvmeng.github.io/blog/2017/03/13/js-object/\">这里</a>。其中<code>get</code>和<code>set</code>方法分别用来指定属性的getter和setter。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">_name</span>: <span class=\"string\">&#x27;&#x27;</span>,  <span class=\"comment\">//`_`表示只能通过方法访问</span></span><br><span class=\"line\">  <span class=\"attr\">nickname</span>: <span class=\"string\">&#x27;酱&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(person, <span class=\"string\">&#x27;name&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"attr\">get</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_name</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">set</span>: <span class=\"keyword\">function</span> (<span class=\"params\">newValue</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">nickname</span> = newValue + <span class=\"string\">&#x27;酱&#x27;</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_name</span> = newValue;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>通过getter和setter实现数据劫持是Vue数据绑定的基础。</p>\n<h4 id=\"发布订阅\"><a href=\"#发布订阅\" class=\"headerlink\" title=\"发布订阅\"></a>发布订阅</h4><p><a href=\"https://zh.wikipedia.org/wiki/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F\">发布订阅</a>是JavaScript中事件机制的实现方式，也是<a href=\"https://shenlvmeng.github.io/blog/2017/03/29/javascript-async-programming-1/\">JavaScript异步编程</a>的实现方式之一。</p>\n<p>发布订阅模式中的角色主要有发布者、事件对象、订阅者。发布者和事件对象是一对多的关系，事件对象和订阅者又是一对多的关系。当发布者的状态改变触发事件对象时，相关的订阅者就会收到通知。实现起来就像下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">EventUtil</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 全局事件管理</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> events = &#123;&#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 注册事件</span></span><br><span class=\"line\">    on = <span class=\"keyword\">function</span> (<span class=\"params\">type, handler</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (events[type]) &#123;</span><br><span class=\"line\">        events[type].<span class=\"title function_\">push</span>(handler);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        events[type] = [handler];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 触发事件</span></span><br><span class=\"line\">    emit = <span class=\"keyword\">function</span> (<span class=\"params\">type</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!events[type]) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = events[type].<span class=\"property\">length</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">          events[type][i];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>Vue实现视图自动更新的原理也是如此，当然细节上就复杂多了。</p>\n<h4 id=\"Observer，Watcher，Dep\"><a href=\"#Observer，Watcher，Dep\" class=\"headerlink\" title=\"Observer，Watcher，Dep\"></a>Observer，Watcher，Dep</h4><p>这三个是相辅相成实现Vue数据绑定的组件。</p>\n<h5 id=\"Observer\"><a href=\"#Observer\" class=\"headerlink\" title=\"Observer\"></a>Observer</h5><p>Vue在组件(Component)初始化过程中，会将数据对象封装为Observer对象，便于监听数据的改变，并绑定依赖在上面。我们来看下<a href=\"https://github.com/vuejs/vue/blob/v2.1.10/src/core/observer/index.js#L39-L53\">源码</a>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">constructor</span> (<span class=\"attr\">value</span>: any) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">dep</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Dep</span>()  <span class=\"comment\">//一个 Dep对象实例，Watcher 和 Observer 之间的纽带</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">vmCount</span> = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"title function_\">def</span>(value, <span class=\"string\">&#x27;__ob__&#x27;</span>, <span class=\"variable language_\">this</span>)  <span class=\"comment\">//把自身 this 添加到 value 的 __ob__ 属性上</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(value)) &#123; <span class=\"comment\">//对 value 的类型进行判断</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> augment = hasProto</span><br><span class=\"line\">      ? protoAugment</span><br><span class=\"line\">      : copyAugment</span><br><span class=\"line\">    <span class=\"title function_\">augment</span>(value, arrayMethods, arrayKeys) <span class=\"comment\">// 数组增强方法</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">observeArray</span>(value) <span class=\"comment\">//如果是数组则观察数组</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">walk</span>(value) <span class=\"comment\">//否则观察单个元素。</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Observer对象储存在 <strong>ob</strong> 这个属性，这个属性保存了 Observer 对象自己本身。对象在转化为 Observer 对象的过程中是一个递归的过程，对象的子元素如果是对象或数组的话，也会转化为 Observer 对象。</p>\n<p>由于JavaScript本身的原因，Vue不能监测数组的变化，Vue采用的折中方法是增强数组的原生方法<code>push</code>, <code>pop</code>, <code>shift</code>, <code>unshift</code>, <code>splice</code>, <code>sort</code>, <code>reverse</code>，以及建议使用者通过Vue.set的方式显示调用。通过其他方式对数组进行的修改将无法被监听到。</p>\n<h5 id=\"Watcher\"><a href=\"#Watcher\" class=\"headerlink\" title=\"Watcher\"></a>Watcher</h5><p>Vue中，Watcher和模板渲染紧密相连，它将Observer发生的改变反映到模板内容上。它关键部分的<a href=\"https://github.com/vuejs/vue/blob/v2.1.10/src/core/observer/watcher.js#L39-L85\">源码</a>是这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">constructor</span> (</span><br><span class=\"line\">  <span class=\"attr\">vm</span>: <span class=\"title class_\">Component</span>,</span><br><span class=\"line\">  <span class=\"attr\">expOrFn</span>: string | <span class=\"title class_\">Function</span>,</span><br><span class=\"line\">  <span class=\"attr\">cb</span>: <span class=\"title class_\">Function</span>,</span><br><span class=\"line\">  options?: <span class=\"title class_\">Object</span></span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">vm</span> = vm</span><br><span class=\"line\">  vm.<span class=\"property\">_watchers</span>.<span class=\"title function_\">push</span>(<span class=\"variable language_\">this</span>)<span class=\"comment\">// 将当前 Watcher 类推送到对应的 Vue 实例中</span></span><br><span class=\"line\">  ......</span><br><span class=\"line\">  <span class=\"comment\">// parse expression for getter</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> expOrFn === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果是函数，相当于指定了当前订阅者获取数据的方法，每次订阅者通过这个方法获取数据然后与之前的值进行对比</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">getter</span> = expOrFn</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">getter</span> = <span class=\"title function_\">parsePath</span>(expOrFn)<span class=\"comment\">// 否则的话将表达式解析为可执行的函数</span></span><br><span class=\"line\">    ......</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">lazy</span></span><br><span class=\"line\">    ? <span class=\"literal\">undefined</span></span><br><span class=\"line\">    : <span class=\"variable language_\">this</span>.<span class=\"title function_\">get</span>()   <span class=\"comment\">//如果 lazy 不为 true，则执行 get 函数进行依赖收集</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中输入参数<code>vm</code>是监听的组件，<code>expOrFn</code>最终将交给<code>getter</code>属性，<code>cb</code>是更新时的回调函数。最后一句中的<code>this.get()</code>完成了依赖的收集工作。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Evaluate the getter, and re-collect dependencies.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">get () &#123;</span><br><span class=\"line\">  <span class=\"title function_\">pushTarget</span>(<span class=\"variable language_\">this</span>)  <span class=\"comment\">// 设置全局变量 Dep.target，将 Watcher 保存在这个全局变量中</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> value = <span class=\"variable language_\">this</span>.<span class=\"property\">getter</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">vm</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">vm</span>) <span class=\"comment\">// 调用 getter 函数，进入 get 方法进行依赖收集操作</span></span><br><span class=\"line\">  <span class=\"comment\">// &quot;touch&quot; every property so they are all tracked as</span></span><br><span class=\"line\">  <span class=\"comment\">// dependencies for deep watching</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">deep</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">traverse</span>(value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">popTarget</span>()  <span class=\"comment\">// 将全局变量 Dep.target 置为 null</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">cleanupDeps</span>()</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第一句的<code>pushTarget(this)</code>设置了<code>Dep.target</code>，getter函数正是通过<code>Dep.target</code>是否为<code>null</code>，判断当前处于依赖收集阶段还是普通数据读取。后面的两句去<code>touch``expOrFn</code>涉及到的每个数据项。从而将<code>expOrFn</code>的依赖收集起来。最后将dep中的内容清空，为下次收集依赖做准备。</p>\n<h5 id=\"Dep\"><a href=\"#Dep\" class=\"headerlink\" title=\"Dep\"></a>Dep</h5><p>Dep类用于连接Watcher类和Observer类，每个Observer对象中都有一个Dep实例，其中存储了订阅者Watcher。<a href=\"https://github.com/vuejs/vue/blob/v2.1.10/src/core/observer/dep.js#L17-L20\">源码</a>如下: </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span> () &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">id</span> = uid++</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">subs</span> = [] <span class=\"comment\">//存储 Watcher 实例的数组</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\">  depend () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Dep</span>.<span class=\"property\">target</span>) &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Dep</span>.<span class=\"property\">target</span>.<span class=\"title function_\">addDep</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  notify () &#123;</span><br><span class=\"line\">    <span class=\"comment\">// stablize the subscriber list first</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> subs = <span class=\"variable language_\">this</span>.<span class=\"property\">subs</span>.<span class=\"title function_\">slice</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, l = subs.<span class=\"property\">length</span>; i &lt; l; i++) &#123;   <span class=\"comment\">//遍历 Watcher 列表，调用 update 方法进行更新操作</span></span><br><span class=\"line\">      subs[i].<span class=\"title function_\">update</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>Dep类比较简单，主要是一个存储Watcher实例的数组<code>this.subs</code>。<code>depend()</code>方法用于向Watcher对象中添加这个Dep。<code>notify()</code>方法将遍历Watcher列表，通知订阅者更新视图。</p>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>下面从源码角度上看看Vue实现数据绑定的设计。</p>\n<h4 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h4><p>Vue核心部分的代码放在<code>src</code>目录。路径下还有下面这些子文件夹：</p>\n<ul>\n<li><code>entries</code> 入口文件，根据编译环境的不同，更改一些配置</li>\n<li><code>compiler</code> 编译模板，<code>render</code>函数的实现</li>\n<li><code>core</code> 关键部分代码</li>\n<li><code>core/observer</code> 响应式设计中的Observer对象实现</li>\n<li><code>core/vdom</code> 虚拟DOM，diff算法，patch函数实现</li>\n<li><code>core/instance</code> 组件实例生命周期实现，组件初始化入口</li>\n<li><code>core/components</code> 全局组件</li>\n<li><code>core/global-api</code> 全局API</li>\n<li><code>server</code> 服务端渲染</li>\n<li><code>platform</code> 平台特定代码，分为<code>web</code>和<code>weex</code></li>\n<li><code>sfc</code> 处理单文件组件 解析.vue文件</li>\n<li><code>share</code> 工具函数</li>\n</ul>\n<h4 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h4><p>关于Vue的<a href=\"https://vuejs.org/v2/guide/instance.html#Lifecycle-Diagram\">生命周期</a>，这里假设你已经熟悉，就不做介绍了。了解它也将帮助你了解Vue的工作流程。</p>\n<p>源码的入口从下面一行<a href=\"https://github.com/vuejs/vue/blob/v2.1.10/src/core/instance/index.js#L8-L14\">代码</a>开始：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Vue</span> (options) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp;</span><br><span class=\"line\">    !(<span class=\"variable language_\">this</span> <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Vue</span>)) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">warn</span>(<span class=\"string\">&#x27;Vue is a constructor and should be called with the `new` keyword&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">_init</span>(options) <span class=\"comment\">//开始初始化步骤</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">initMixin</span>(<span class=\"title class_\">Vue</span>) <span class=\"comment\">//插入初始化代码</span></span><br><span class=\"line\"><span class=\"title function_\">stateMixin</span>(<span class=\"title class_\">Vue</span>) <span class=\"comment\">//插入数据绑定代码</span></span><br><span class=\"line\"><span class=\"title function_\">eventsMixin</span>(<span class=\"title class_\">Vue</span>) <span class=\"comment\">//插入事件相关代码</span></span><br><span class=\"line\"><span class=\"title function_\">lifecycleMixin</span>(<span class=\"title class_\">Vue</span>) <span class=\"comment\">//插入生命周期代码</span></span><br><span class=\"line\"><span class=\"title function_\">renderMixin</span>(<span class=\"title class_\">Vue</span>) <span class=\"comment\">//插入模板渲染代码</span></span><br></pre></td></tr></table></figure>\n\n<p>文件为<code>src/core/instance/index.js</code>，关键在于最后一句，通过调用<code>init.js</code>中定义的<code>_init(options)</code>方法初始化Vue实例。这个方法是在下面的<code>initMixin(Vue)</code>中导入的。这种mixin的方式不同于Vue1.x版本，更具模块化适合拓展（同时也增加了寻找代码的难度）。</p>\n<p>初始化相关的主要<a href=\"https://github.com/vuejs/vue/blob/v2.1.10/src/core/instance/init.js#L40-L48\">代码</a>如下；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">initMixin</span> (<span class=\"title class_\">Vue</span>: <span class=\"title class_\">Class</span>&lt;<span class=\"title class_\">Component</span>&gt;) &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Vue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">_init</span> = <span class=\"keyword\">function</span> (<span class=\"params\">options?: <span class=\"built_in\">Object</span></span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\">    <span class=\"title function_\">initLifecycle</span>(vm)   <span class=\"comment\">//vm 的生命周期相关变量初始化</span></span><br><span class=\"line\">    <span class=\"title function_\">initEvents</span>(vm)    <span class=\"comment\">// vm 的事件监控初始化</span></span><br><span class=\"line\">    <span class=\"title function_\">initRender</span>(vm)  <span class=\"comment\">// 模板解析</span></span><br><span class=\"line\">    <span class=\"title function_\">callHook</span>(vm, <span class=\"string\">&#x27;beforeCreate&#x27;</span>)</span><br><span class=\"line\">    <span class=\"title function_\">initState</span>(vm) <span class=\"comment\">//vm 的状态初始化，prop/data/computed/method/watch 都在这里完成初始化</span></span><br><span class=\"line\">    <span class=\"title function_\">callHook</span>(vm, <span class=\"string\">&#x27;created&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (vm.<span class=\"property\">$options</span>.<span class=\"property\">el</span>) &#123;</span><br><span class=\"line\">\t  vm.$mount(vm.<span class=\"property\">$options</span>.<span class=\"property\">el</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>initLifecycle</code>主要是初始化vm实例上的一些参数；<code>initEvents</code>是事件监控的初始化；<code>initRender</code>是模板解析，2.0的版本中这一块有很大的改动，1.0的版本中Vue使用的是<code>DocumentFragment</code>来进行模板解析，而 2.0 中作者采用的John Resig的HTML Parser将模板解析成可直接执行的<code>render</code>函数。<code>initState</code>是数据绑定的主战场，我们下一节会详细讲到。<code>callHook</code>执行生命周期的钩子函数。</p>\n<h4 id=\"initState\"><a href=\"#initState\" class=\"headerlink\" title=\"initState\"></a>initState</h4><p>在初始化中，<code>initState</code>函数承担了数据绑定中的最主要的脏活累活。它的<a href=\"https://github.com/vuejs/vue/blob/v2.1.10/src/core/instance/state.js#L24-L36\">源码</a>像下面这样:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">initState</span> (<span class=\"attr\">vm</span>: <span class=\"title class_\">Component</span>) &#123;</span><br><span class=\"line\">  vm.<span class=\"property\">_watchers</span> = []  <span class=\"comment\">//新建一个订阅者列表</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> opts = vm.<span class=\"property\">$options</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.<span class=\"property\">props</span>) <span class=\"title function_\">initProps</span>(vm, opts.<span class=\"property\">props</span>)  <span class=\"comment\">// 初始化 Props，与 initData 差不多</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.<span class=\"property\">methods</span>) <span class=\"title function_\">initMethods</span>(vm, opts.<span class=\"property\">methods</span>)  <span class=\"comment\">// 初始化 Methods，Methods 的初始化比较简单，就是作用域的重新绑定。</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.<span class=\"property\">data</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">initData</span>(vm) <span class=\"comment\">// 初始化 Data，响应式关键步</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">observe</span>(vm.<span class=\"property\">_data</span> = &#123;&#125;, <span class=\"literal\">true</span> <span class=\"comment\">/* asRootData */</span>) <span class=\"comment\">//如果没有 data，则观察一个空对象</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.<span class=\"property\">computed</span>) <span class=\"title function_\">initComputed</span>(vm, opts.<span class=\"property\">computed</span>)<span class=\"comment\">// 初始化 computed，这部分会涉及 Watcher 类以及依赖收集，computed 其实本身也是一种特殊的 Watcher</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.<span class=\"property\">watch</span>) <span class=\"title function_\">initWatch</span>(vm, opts.<span class=\"property\">watch</span>)<span class=\"comment\">// 初始化 watch，这部分会涉及 Watcher 类以及依赖收集</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，<code>initState</code>将工作拆解成观察<code>props</code>, <code>data</code>, <code>methods</code>, <code>computed</code>, <code>watch</code>几个关键部分。</p>\n<h4 id=\"initData\"><a href=\"#initData\" class=\"headerlink\" title=\"initData\"></a>initData</h4><p>以<code>initData</code>方法为例，它是如何使用上面提到的Observer, Dep, Watcher类的呢，我们看看<a href=\"https://github.com/vuejs/vue/blob/v2.1.10/src/core/instance/state.js#L74-L104\">源码</a>: </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">initData</span> (<span class=\"attr\">vm</span>: <span class=\"title class_\">Component</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> data = vm.<span class=\"property\">$options</span>.<span class=\"property\">data</span></span><br><span class=\"line\">  data = vm.<span class=\"property\">_data</span> = <span class=\"keyword\">typeof</span> data === <span class=\"string\">&#x27;function&#x27;</span></span><br><span class=\"line\">    ? data.<span class=\"title function_\">call</span>(vm)</span><br><span class=\"line\">    : data || &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"title function_\">isPlainObject</span>(data)) &#123;<span class=\"comment\">// 保证data必须为纯对象</span></span><br><span class=\"line\">    ......</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// proxy data on instance</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> keys = <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(data)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> props = vm.<span class=\"property\">$options</span>.<span class=\"property\">props</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = keys.<span class=\"property\">length</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i--) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (props &amp;&amp; <span class=\"title function_\">hasOwn</span>(props, keys[i])) &#123;<span class=\"comment\">// 是props，则不代理</span></span><br><span class=\"line\">      ...... <span class=\"comment\">//如果和 props 里面的变量重了，则抛出 Warning</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;<span class=\"comment\">// 否则将属性代理的 vm 上，这样就可以通过 vm.xx 访问到 vm._data.xx</span></span><br><span class=\"line\">      <span class=\"title function_\">proxy</span>(vm, keys[i]) <span class=\"comment\">//proxy方法遍历 data 的 key，把 data 上的属性代理到 vm 实例上</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// observe data</span></span><br><span class=\"line\">  <span class=\"title function_\">observe</span>(data, <span class=\"literal\">true</span> <span class=\"comment\">/* asRootData */</span>)  <span class=\"comment\">//关键一步，observe(data, this)方法来对 data 做监控</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，这个函数做了下面的工作：</p>\n<ul>\n<li>保证data为纯对象</li>\n<li>检查是否与<code>props</code>中属性有重复</li>\n<li>进行数据代理，便于我们直接通过vm.xxx的形式访问原本位于vm._data.xxx的属性。</li>\n<li>调用<code>observe</code>方法对<code>data</code>进行包装，使之具有响应式的特点。</li>\n</ul>\n<p>那我们看看<a href=\"https://github.com/vuejs/vue/blob/v2.1.10/src/core/observer/index.js#L101-L126\">observe</a>方法是怎么写的吧</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Attempt to create an observer instance for a value,</span></span><br><span class=\"line\"><span class=\"comment\"> * returns the new observer if successfully observed,</span></span><br><span class=\"line\"><span class=\"comment\"> * or the existing observer if the value already has one.</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回一个 Observer 对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">observe</span> (<span class=\"attr\">value</span>: any, <span class=\"attr\">asRootData</span>: ?boolean): <span class=\"title class_\">Observer</span> | <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"title function_\">isObject</span>(value)) &#123;  <span class=\"comment\">//如果不是对象和数组则不监控，直接返回</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"attr\">ob</span>: <span class=\"title class_\">Observer</span> | <span class=\"keyword\">void</span></span><br><span class=\"line\">  <span class=\"comment\">//判断 value 是否已经添加了 __ob__ 属性，并且属性值是 Observer 对象的实例。避免重复引用导致的死循环</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title function_\">hasOwn</span>(value, <span class=\"string\">&#x27;__ob__&#x27;</span>) &amp;&amp; value.<span class=\"property\">__ob__</span> <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Observer</span>) &#123;    <span class=\"comment\">//如果是就直接用</span></span><br><span class=\"line\">    ob = value.<span class=\"property\">__ob__</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (</span><br><span class=\"line\">    observerState.<span class=\"property\">shouldConvert</span> &amp;&amp; <span class=\"comment\">//只有 root instance props 需要创建 Observer 对象</span></span><br><span class=\"line\">    !<span class=\"title function_\">isServerRendering</span>() &amp;&amp; <span class=\"comment\">//不是服务端渲染</span></span><br><span class=\"line\">    (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(value) || <span class=\"title function_\">isPlainObject</span>(value)) &amp;&amp; <span class=\"comment\">//数组或者普通对象</span></span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"title function_\">isExtensible</span>(value) &amp;&amp; <span class=\"comment\">//可扩展对象</span></span><br><span class=\"line\">    !value.<span class=\"property\">_isVue</span> <span class=\"comment\">// 非 Vue 组件</span></span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    ob = <span class=\"keyword\">new</span> <span class=\"title class_\">Observer</span>(value)  <span class=\"comment\">//关键步！在 value 满足上述条件的情况下创建一个 Observer 对象</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (asRootData &amp;&amp; ob) &#123;</span><br><span class=\"line\">    ob.<span class=\"property\">vmCount</span>++</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ob <span class=\"comment\">// 返回一个 Observer 对象</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>observe方法主要就是判断value是否满足一些预设条件，并将这个对象转化为Observer对象。</p>\n<p>关于Observer类我们上面已经提到，它的构造函数做了下面几个工作：</p>\n<ul>\n<li>首先创建了一个Dep对象实例；</li>\n<li>然后把自身this添加到value的<code>__ob__</code>属性上；</li>\n<li>最后对value的类型进行判断，如果是数组则观察数组，否则观察单个元素（要理解这一步是个递归过程，即value的元素如果符合条件也需要转化为Observer对象）。</li>\n</ul>\n<p>不论是基础类型还是数组或对象，最终都会走入到<a href=\"https://github.com/vuejs/vue/blob/v2.1.10/src/core/observer/index.js#L55-L65\">walk</a>方法，方法定义在<code>src/core/observer/index.js</code>中。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">walk (<span class=\"attr\">obj</span>: <span class=\"title class_\">Object</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> keys = <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(obj)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; keys.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">defineReactive</span>(obj, keys[i], obj[keys[i]]) <span class=\"comment\">//遍历对象，结合defineReactive方法地柜将属性转化为getter和setter</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"defineReactive\"><a href=\"#defineReactive\" class=\"headerlink\" title=\"defineReactive\"></a>defineReactive</h4><p>在经过一系列的准备工作和铺垫后，终于可以接触到数据绑定最核心部分的<code>defineReactive</code>函数。方法也定义在<code>src/core/observer/index.js</code>中，<a href=\"https://github.com/vuejs/vue/blob/v2.1.10/src/core/observer/index.js#L128-L184\">源码</a>如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Define a reactive property on an Object.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">defineReactive</span> (</span><br><span class=\"line\">  <span class=\"attr\">obj</span>: <span class=\"title class_\">Object</span>,</span><br><span class=\"line\">  <span class=\"attr\">key</span>: string,</span><br><span class=\"line\">  <span class=\"attr\">val</span>: any,</span><br><span class=\"line\">  customSetter?: <span class=\"title class_\">Function</span></span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dep = <span class=\"keyword\">new</span> <span class=\"title class_\">Dep</span>()  <span class=\"comment\">//每个对象都会有一个 Dep 实例，用来保存依赖 (Watcher 对象)</span></span><br><span class=\"line\">  ......</span><br><span class=\"line\">  <span class=\"keyword\">let</span> childOb = <span class=\"title function_\">observe</span>(val)   <span class=\"comment\">//结合 observe 函数进行将对象的对象也变成监控对象</span></span><br><span class=\"line\">  <span class=\"comment\">// 最重点、基石、核心的部分：通过调用 Object.defineProperty 给 data 的每个属性添加 getter 和 setter 方法。</span></span><br><span class=\"line\">  <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(obj, key, &#123;</span><br><span class=\"line\">    <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">get</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">reactiveGetter</span> () &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> value = getter ? getter.<span class=\"title function_\">call</span>(obj) : val</span><br><span class=\"line\">      <span class=\"comment\">// 依赖收集的重要步骤</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title class_\">Dep</span>.<span class=\"property\">target</span>) &#123;<span class=\"comment\">//如果存在Dep.target这个全局变量不为空，表示是在新建Watcher的时候调用的，代码已经保证</span></span><br><span class=\"line\">        dep.<span class=\"title function_\">depend</span>()    <span class=\"comment\">// 依赖收集</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (childOb) &#123;</span><br><span class=\"line\">          childOb.<span class=\"property\">dep</span>.<span class=\"title function_\">depend</span>() <span class=\"comment\">// 处理好子元素的依赖 watcher</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(value)) &#123; <span class=\"comment\">// 如果是数组，进一步处理</span></span><br><span class=\"line\">          <span class=\"title function_\">dependArray</span>(value)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> value</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">set</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">reactiveSetter</span> (newVal) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> value = getter ? getter.<span class=\"title function_\">call</span>(obj) : val</span><br><span class=\"line\">      ......</span><br><span class=\"line\">      childOb = <span class=\"title function_\">observe</span>(newVal)    <span class=\"comment\">// 对新数据重新 observe，更新数据的依赖关系</span></span><br><span class=\"line\">      dep.<span class=\"title function_\">notify</span>()   <span class=\"comment\">// 通知dep进行数据更新，这个方法在前面的 Dep 类中讲过</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>defineReactive是对Object.defineProperty方法的包装，结合observe方法对数据项进行深入遍历，最终将所有的属性就转化为getter和setter。其中对于Dep的处理用于收集依赖<code>data</code>的Watcher对象。</p>\n<h4 id=\"依赖收集\"><a href=\"#依赖收集\" class=\"headerlink\" title=\"依赖收集\"></a>依赖收集</h4><p><img src=\"/blog/blog/images/vue-reactive.jpg\"></p>\n<p><code>data</code>的依赖收集是在getter函数中完成的。Observer和Dep是一对一的关系，Dep用来存储依赖Observer的Watcher。Dep和Watcher是多对多的关系，一个Dep中存储了若干Watcher，一个Watcher可能同时依赖于多个Observer。</p>\n<p>可以看到Dep是连接Observer（生产者）和Watcher（消费者）的关键纽带。Watcher通过getter函数建立起和Observer中Dep的关联。在Observer的setter函数中会触发<code>dep.notify()</code>方法，根据上文对该方法的讲解，它实际上对数组中每个Watcher执行了<code>update</code>方法。在方法中根据是否同步去执行<code>run</code>方法，这个方法中通过<a href=\"https://github.com/vuejs/vue/blob/v2.1.10/src/core/observer/watcher.js#L157-#L191\">源码</a>可以看到实际上正是通过<code>const value = this.get()</code>获取最新的value。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">update () &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* istanbul ignore else */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">lazy</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">dirty</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">sync</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">run</span>()</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">queueWatcher</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ol>\n<li>模板编译过程中的指令和数据绑定都会生成 Watcher实例，watch函数中的对象也会生成 Watcher实例，在实例化的过程中，会调用watcher.js中的get函数touch这个Watcher的表达式或函数涉及的所有属性；</li>\n<li>touch开始之前Watcher会设置Dep的静态属性Dep.target指向其自身，然后开始依赖收集；</li>\n<li>touch属性的过程中，属性的getter函数会被访问；</li>\n<li>属性gette 函数中会判断Dep.target（target中保存的是第2步中设置的Watcher实例）是否存在，若存在则将 getter函数所在的Observer 实例的Dep实例保存到Watcher的列表中，并在此Dep实例中添加Watcher为订阅者；</li>\n<li>重复上述过程直至Watcher的表达式或函数涉及的所有属性均touch结束（即表达式或函数中所有的数据的getter函数都已被触发），Dep.target被置为null，依赖收集完成；</li>\n</ol>\n</blockquote>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>上面尝试从源码角度对Vue2.0的响应式设计做了浅析。总结一下就是下面几点：</p>\n<ul>\n<li>在生命周期的initState方法中对<code>data</code>, <code>prop</code>, <code>method</code>, <code>computed</code>, <code>watch</code>方法中的数据进行劫持，通过<code>defineReactive</code>和<code>observe</code>将之转换为Observer对象</li>\n<li><code>initRender</code>函数中解析模板，新建Watcher对象通过Dep对象和对应数据建立了依赖关系，通过<code>Dep.target</code>这个全局对象判断是否是依赖收集阶段。</li>\n<li>数据变化时，通过<code>setter</code>函数中的<code>dep.notify</code>方法执行Watcher的<code>update</code>方法更新视图</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://www.zybuluo.com/zhouweicsu/note/682813\">Vue2.0 源码阅读：响应式原理</a></p>\n",
            "tags": [
                "JavaScript",
                "源码",
                "Vue"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2017/03/29/javascript-async-programming-1/",
            "url": "http://shenlvmeng.github.com/blog/2017/03/29/javascript-async-programming-1/",
            "title": "JavaScript中的异步编程 上",
            "date_published": "2017-03-29T06:28:06.000Z",
            "content_html": "<blockquote>\n<p>本文启发于阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2015/04/generator.html\">深入掌握 ECMAScript 6 异步编程</a></p>\n</blockquote>\n<p><span></span></p>\n<blockquote>\n<p>下篇传送门<a href=\"https://shenlvmeng.github.io/blog/2017/03/29/javascript-async-programming-2/\">JavaScript中的异步编程 下</a></p>\n</blockquote>\n<p>JavaScript是一门<strong>单线程</strong>的语言。这样的设计减少了线程间同步和统筹的代价。但是，这也意味着，同一时刻只能完成一项工作，不能“<em>多面手</em>”。多个任务出现时，后一个任务需要等待前一个任务完成才可执行。</p>\n<p>当一项任务耗时较长时，后继者往往需要等待很久。直观体现在浏览器白屏，假死等。异步执行模式便因此而生。</p>\n<h3 id=\"异步和回调\"><a href=\"#异步和回调\" class=\"headerlink\" title=\"异步和回调\"></a>异步和回调</h3><p>异步模式区分于同步模式，任务的执行顺序和排列顺序并不完全一致。在前一个任务开始执行时，将之交给环境中其他辅助线程处理，之后立即执行下一个任务。当任务完成后，再以回调的形式执行回调函数。这种执行方式实际上正是<a href=\"https://shenlvmeng.github.io/blog/2017/02/27/event-loop/\">Event Loop</a> 的体现。</p>\n<p>在<a href=\"http://www.ruanyifeng.com/blog/2012/12/asynchronous%EF%BC%BFjavascript.html\">阮老师博客</a>中提到的<strong>回调函数</strong>，<strong>事件驱动</strong>，<strong>发布订阅</strong>都能很直观的看到回调的概念。</p>\n<h4 id=\"回调函数\"><a href=\"#回调函数\" class=\"headerlink\" title=\"回调函数\"></a>回调函数</h4><p>这是最常见的实现异步编程的方式。它的大体形式是将回调函数作为输入参数传入到需要异步完成的任务中。在任务体函数内利用全局环境下内建的异步函数实现异步的目的。</p>\n<p>大概是这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//这里是一个需要异步完成的函数asy和回调函数cal</span></span><br><span class=\"line\"><span class=\"title function_\">asy</span>(), <span class=\"title function_\">cal</span>();</span><br><span class=\"line\"><span class=\"comment\">//它们的定义和使用像下面这样</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">asy</span> (callback) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//异步工作代码</span></span><br><span class=\"line\">        <span class=\"title function_\">callback</span>();</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">cal</span> () &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Hello!&#x27;</span>); <span class=\"comment\">//或其它什么</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">asy</span>(cal);</span><br></pre></td></tr></table></figure>\n\n<p><code>asy()</code>函数会在完成自己工作后自动调用回调函数<code>cal()</code>。而这个过程是异步完成的。</p>\n<h4 id=\"事件驱动\"><a href=\"#事件驱动\" class=\"headerlink\" title=\"事件驱动\"></a>事件驱动</h4><p>严格来说，事件驱动是一种异步编程思想。通过事件的触发来执行特定任务的代码。使得代码的执行并不按照顺序来。</p>\n<p>使用时，最典型的用法就是DOM2级事件绑定。为DOM元素绑定监听函数，在事件触发时，执行特定代码。推广开来，可以实现JavaScript中自定义事件的监听。</p>\n<p>大概是这样</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;someevent&#x27;</span>, handler); <span class=\"comment\">// 注册事件</span></span><br><span class=\"line\">target.<span class=\"title function_\">emit</span>(<span class=\"string\">&#x27;someevent&#x27;</span>); <span class=\"comment\">//触发事件</span></span><br></pre></td></tr></table></figure>\n\n<p>在实现时，<code>target</code>实现了（或继承）类似于下图中EventUtil类的定义。内部维护一个对象，存储事件和回调函数数组的键值对对象。在使用on，emit时，向管理器中写入事件和读取事件对应的回调数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">EventUtil</span> = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 全局事件管理</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> events = &#123;&#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 注册事件</span></span><br><span class=\"line\">        on = <span class=\"keyword\">function</span> (<span class=\"params\">type, handler</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (events[type]) &#123;</span><br><span class=\"line\">                events[type].<span class=\"title function_\">push</span>(handler);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                events[type] = [handler];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 触发事件</span></span><br><span class=\"line\">        emit = <span class=\"keyword\">function</span> (<span class=\"params\">type</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!events[type]) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = events[type].<span class=\"property\">length</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">                events[type][i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"发布订阅模式\"><a href=\"#发布订阅模式\" class=\"headerlink\" title=\"发布订阅模式\"></a>发布订阅模式</h4><p>上面这种事件驱动的方式在React和Vue等MVVM框架中经常用来在组件间传递信息。当组件关系复杂时，发布订阅模式会更有利于管理信息和将信息集中化管理。</p>\n<p>也就是<a href=\"http://redux.js.org/\">Redux</a>和<a href=\"https://vuex.vuejs.org/\">Vuex</a>所做的事情。任务状态改变时，向中心传递信号，其他订阅这个信号的任务函数都会受到这个信号。</p>\n<h3 id=\"promise\"><a href=\"#promise\" class=\"headerlink\" title=\"promise\"></a>promise</h3><p>异步回调好是好，很好理解。但是处理错误的“<a href=\"http://callbackhell.com/\">回调地狱</a>”也为人诟病。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">async</span>(<span class=\"params\">request, callback</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Do something.</span></span><br><span class=\"line\">    <span class=\"title function_\">asyncA</span>(request, <span class=\"keyword\">function</span> (<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Do something</span></span><br><span class=\"line\">        <span class=\"title function_\">asyncB</span>(request, <span class=\"keyword\">function</span> (<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Do something</span></span><br><span class=\"line\">            <span class=\"title function_\">asyncC</span>(request, <span class=\"keyword\">function</span> (<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Do something</span></span><br><span class=\"line\">                <span class=\"title function_\">callback</span>(data);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种在回调中嵌套其他异步函数的场景下，错误的捕获变得异常头痛。代码也会变得难以阅读和维护。</p>\n<p>ES6中的<a href=\"http://wiki.commonjs.org/wiki/Promises/A\">Promise</a>对象优雅地解决了回调地狱的问题。它由CommonJS工作组提出，通过<code>then</code>和<code>catch</code>方法指定回调函数和错误的捕获函数，<strong>同时返回一个<code>Promise</code>对象</strong>。</p>\n<p>它的使用方法像下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"comment\">/* 异步操作成功 */</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(val);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">reject</span>(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">promise.<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\">val</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//success handler</span></span><br><span class=\"line\">&#125;, <span class=\"keyword\">function</span> (<span class=\"params\">val</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//failure handler</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 或是</span></span><br><span class=\"line\">promise.<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\">val</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//success handler</span></span><br><span class=\"line\">&#125;).<span class=\"title function_\">catch</span>(<span class=\"params\">err</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//error handler</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 处理一批次的异步任务</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>([p1, p2, p3]),</span><br><span class=\"line\">    q = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">race</span>([p1, p2, p3]);</span><br></pre></td></tr></table></figure>\n\n<p>在实现上，<code>Promise</code>其实和事件订阅模式类似。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//constructor</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Promise</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">callbacks</span> = [];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">construct</span>: <span class=\"title class_\">Promise</span>,</span><br><span class=\"line\">    <span class=\"attr\">resolve</span>: <span class=\"keyword\">function</span>(<span class=\"params\">result</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">complete</span>(<span class=\"string\">&quot;resolve&quot;</span>, result);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">reject</span>: <span class=\"keyword\">function</span>(<span class=\"params\">result</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">complete</span>(<span class=\"string\">&quot;reject&quot;</span>, result);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">complete</span>: <span class=\"keyword\">function</span>(<span class=\"params\">type, result</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">callbacks</span>[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">callbacks</span>.<span class=\"title function_\">shift</span>()[type](result);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">then</span>: <span class=\"keyword\">function</span>(<span class=\"params\">successHandler, failedHandler</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">callbacks</span>.<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">resolve</span>: successHandler,</span><br><span class=\"line\">            <span class=\"attr\">reject</span>: failedHandler</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Promise在回调函数较少时，<code>then</code>方法的链式调用无伤大雅。当出现较多异步回调场景下，如异步<strong>陆续</strong>加载100张图片，<code>then</code>方法的使用仍显得不那么自然。</p>\n<p>有自然的使用方法么？答案是有的。下篇中介绍的Generator和async将实现异步编程的更高境界。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://segmentfault.com/a/1190000003028634\">异步编程 promise模式 的简单实现</a></p>\n",
            "tags": [
                "JavaScript",
                "异步"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2017/03/29/javascript-async-programming-2/",
            "url": "http://shenlvmeng.github.com/blog/2017/03/29/javascript-async-programming-2/",
            "title": "JavaScript中的异步编程 下",
            "date_published": "2017-03-29T06:28:06.000Z",
            "content_html": "<blockquote>\n<p>本文启发于阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2015/04/generator.html\">深入掌握 ECMAScript 6 异步编程</a></p>\n</blockquote>\n<p><span></span></p>\n<blockquote>\n<p>上篇传送门<a href=\"https://shenlvmeng.github.io/blog/2017/03/29/javascript-async-programming-1/\">JavaScript中的异步编程 上</a></p>\n</blockquote>\n<p>上篇说到了使用回调的思路解决JavaScript中异步编程的难题。可不论是显式的指定回调函数，通过事件绑定响应还是通过事件订阅、promise.then，都和逃不出回调的思路。写起来仍不够自然，且在批次回调任务时难以解决。</p>\n<p>有没有办法能使我们像平时写同步代码那样，来书写异步代码呢？ES6出现后，Generator对象给了我们这个机会。</p>\n<h3 id=\"生成器函数\"><a href=\"#生成器函数\" class=\"headerlink\" title=\"生成器函数\"></a>生成器函数</h3><p>提到生成器函数前，需要提到<a href=\"https://en.wikipedia.org/wiki/Coroutine\">协程</a>(coroutine)这个概念。协程是轻量级用户态的线程。用户可以手动控制协程的暂停和继续，配合线程实现异步任务。协程间通过<code>yield</code>方式切换执行权，并交换信息。就像下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">asyncFunc</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 执行someFunc后交出执行权</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> t = <span class=\"keyword\">yield</span> <span class=\"title function_\">someFunc</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>协程在遇到<code>yield</code>关键字时交出自己的执行权，直到执行权返回。这里<code>someFunc</code>方法可以是一个异步操作。</p>\n<p>ES6中协程体现在Generator函数中。函数在<code>function</code>关键字后添加星号<code>*</code>以示和普通函数的区分。Generator函数是可以通过<code>yield</code>暂停执行的。比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* gen () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> g = <span class=\"title function_\">gen</span>(); </span><br><span class=\"line\">g.<span class=\"title function_\">next</span>(); <span class=\"comment\">// 1</span></span><br><span class=\"line\">g.<span class=\"title function_\">next</span>(); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<p>Generator函数的调用通过<code>next</code>方法完成。每次调用后会将函数流程移动到下一个yield语句处。yield的返回包含两个属性<code>value</code>和<code>done</code>。前者代表yield的返回值，后者代表生成器函数是否已经执行完毕。</p>\n<p>同时，每次调用<code>next</code>方法时，可以输入参数作为上个异步任务的返回值。调用<code>throw</code>方法可以向生成器函数内抛出错误。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* gen () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> x;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> g = <span class=\"title function_\">gen</span>(); </span><br><span class=\"line\">g.<span class=\"title function_\">next</span>(); <span class=\"comment\">// 1</span></span><br><span class=\"line\">g.<span class=\"title function_\">next</span>(<span class=\"number\">2</span>); <span class=\"comment\">// 2</span></span><br><span class=\"line\">g.<span class=\"keyword\">throw</span>(<span class=\"string\">&#x27;some error&#x27;</span>) <span class=\"comment\">// &#x27;some error&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>使用Generator函数封装一个异步操作，再通过执行器管理函数内部的异步流程。通过这种方式，在Generator函数中可以很方便地书写异步操作。例如，利用<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\">fetch API</a>发起一次跨域请求。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">gen</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> text = <span class=\"keyword\">yield</span> <span class=\"title function_\">fetch</span>(<span class=\"string\">&#x27;http://www.example.org/data.json&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(text);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> g = <span class=\"title function_\">gen</span>();</span><br><span class=\"line\">g.<span class=\"title function_\">next</span>().<span class=\"property\">value</span>.<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data.<span class=\"title function_\">json</span>();</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">    g.<span class=\"title function_\">next</span>(data);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>fetch API返回一个promise对象，通过为之指定<code>then</code>，处理fetch成功后的返回值。</p>\n<h3 id=\"co和koa\"><a href=\"#co和koa\" class=\"headerlink\" title=\"co和koa\"></a>co和koa</h3><p>我们上面提到了使用Generator还缺少的一样东西——执行器。使用Generator函数在其中通过yield返回Promise，但是外层还是需要在promise的then方法中书写<code>g.next(data)</code>来通知协程继续操作。<a href=\"https://github.com/tj/co\">co</a>函数库帮助我们<strong>完成了执行器的工作</strong>。</p>\n<p>以回调函数中完成读文件操作为例（注意：其中的readFile先被改写成返回thunk函数的格式，即只接收callback作为唯一的输入参数）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> co = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;co&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">readFile</span>(<span class=\"params\">path</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">callback</span>) &#123;</span><br><span class=\"line\">        fs.<span class=\"title function_\">readFile</span>(path, &#123;<span class=\"attr\">encoding</span>: <span class=\"string\">&#x27;utf-8&#x27;</span>&#125;, cb);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">gen</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> d1 = <span class=\"keyword\">yield</span> <span class=\"title function_\">readFile</span>(<span class=\"string\">&#x27;file1.js&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(d1);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> d2 = <span class=\"keyword\">yield</span> <span class=\"title function_\">readFile</span>(<span class=\"string\">&#x27;file2.js&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(d2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">co</span>(gen);</span><br></pre></td></tr></table></figure>\n<p>上面的代码里，为<code>co</code>函数传入Generator函数，就会自动依次执行其中的异步任务，并在返回一个Promise对象。因此，可以给<code>co</code>函数通过<code>then</code>的方式添加回调函数。</p>\n<h4 id=\"co\"><a href=\"#co\" class=\"headerlink\" title=\"co\"></a>co</h4><p>co的代码并不复杂，核心代码只有数十行。摘录如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">co</span>(<span class=\"params\">gen</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> ctx = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> args = slice.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> gen === <span class=\"string\">&#x27;function&#x27;</span>) gen = gen.<span class=\"title function_\">apply</span>(ctx, args);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!gen || <span class=\"keyword\">typeof</span> gen.<span class=\"property\">next</span> !== <span class=\"string\">&#x27;function&#x27;</span>) <span class=\"keyword\">return</span> <span class=\"title function_\">resolve</span>(gen);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">onFulfilled</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">onFulfilled</span>(<span class=\"params\">res</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> ret;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        ret = gen.<span class=\"title function_\">next</span>(res);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">reject</span>(e);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"title function_\">next</span>(ret);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">onRejected</span>(<span class=\"params\">err</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> ret;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        ret = gen.<span class=\"keyword\">throw</span>(err);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">reject</span>(e);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"title function_\">next</span>(ret);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">next</span>(<span class=\"params\">ret</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (ret.<span class=\"property\">done</span>) <span class=\"keyword\">return</span> <span class=\"title function_\">resolve</span>(ret.<span class=\"property\">value</span>);</span><br><span class=\"line\">      <span class=\"keyword\">var</span> value = toPromise.<span class=\"title function_\">call</span>(ctx, ret.<span class=\"property\">value</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (value &amp;&amp; <span class=\"title function_\">isPromise</span>(value)) <span class=\"keyword\">return</span> value.<span class=\"title function_\">then</span>(onFulfilled, onRejected);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"title function_\">onRejected</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">&#x27;You may only yield a function, promise, generator, array, or object, &#x27;</span></span><br><span class=\"line\">        + <span class=\"string\">&#x27;but the following object was passed: &quot;&#x27;</span> + <span class=\"title class_\">String</span>(ret.<span class=\"property\">value</span>) + <span class=\"string\">&#x27;&quot;&#x27;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在看co的代码前，我们不妨先想一下它的原理。Generator 函数只是一个异步操作的容器，它的流程和控制是由外部机制完成的。而<strong>thunk函数（这个在下面介绍）和Promise对象恰恰可以方便得在回调函数和then方法中交还执行权给Generator函数</strong>。</p>\n<p>这么来看就简单了，<strong>co函数库针对thunk函数和Promise对象封装了执行器</strong>。以比较好理解的Promise对象为例（co在内部也会将thunk函数转为Promise对象）。</p>\n<p>首先将readFile的thunk函数转为Promise对象。其中ctx绑定到co函数体内。（co函数库的thunkToPromise函数）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> readFile = <span class=\"keyword\">function</span> (<span class=\"params\">path</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ctx = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span> (<span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>)&#123;</span><br><span class=\"line\">        readFile.<span class=\"title function_\">call</span>(ctx, <span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (err) <span class=\"title function_\">reject</span>(err);</span><br><span class=\"line\">            <span class=\"title function_\">resolve</span>(data);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>之后同样使用上节中的生成器函数<code>gen()</code>，并手动执行下一步操作。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">gen</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> d1 = <span class=\"keyword\">yield</span> <span class=\"title function_\">readFile</span>(<span class=\"string\">&#x27;file1.js&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(d1);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> d2 = <span class=\"keyword\">yield</span> <span class=\"title function_\">readFile</span>(<span class=\"string\">&#x27;file2.js&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(d2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> g = <span class=\"title function_\">gen</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">g.<span class=\"title function_\">next</span>().<span class=\"property\">value</span>.<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">    g.<span class=\"title function_\">next</span>(data).<span class=\"property\">value</span>.<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">        g.<span class=\"title function_\">next</span>(data);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>发现规律了么？<strong>自动执行器实际上就是在<code>g.done == false</code>时，不断地在then方法中嵌套添加回调函数</strong>。结果呼之欲出。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行器</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">run</span> (gen) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> g = gen;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">next</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> res = g.<span class=\"title function_\">next</span>(data);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (res.<span class=\"property\">done</span>) <span class=\"keyword\">return</span> res.<span class=\"property\">value</span>;</span><br><span class=\"line\">        res.<span class=\"property\">value</span>.<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">next</span>(data);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">next</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">run</span>(gen);</span><br></pre></td></tr></table></figure>\n\n<p>每执行一次next，检查<code>done</code>的状态，若未结束则在then方法继续指定next方法，等待下一次返回结果。这也是co函数库的基本原理。</p>\n<h5 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h5><p>理解了原理后，回头看co的源码，就比较好理解了。前6行对传入的<code>gen</code>检测是否为Generator类型。<code>onFulfilled</code>函数和<code>onRejected</code>函数对Generator函数原有的<code>next</code>和<code>throw</code>函数进行了封装，便于错误捕获和处理。</p>\n<p>在<code>next</code>方法中，主要做了下面的4步微小的工作：</p>\n<ol>\n<li>查是否已经到Generator函数的最后一步，如果是则返回</li>\n<li>确保每次<code>yield</code>返回值都是Promise对象</li>\n<li>通过<code>then</code>方法，为返回值添加回调函数，并在回调中再次调用自身</li>\n<li>对于类型不合适的<code>gen</code>，将状态修改为<code>rejected</code></li>\n</ol>\n<p>co能接收的yield返回值类型是有限的（尽管Generator函数中的yield后不限制返回值类型），有thunk函数，array，object，Promise对象。其中array和object使co可以胜任并发的操作，即可以在yield中返回多个异步操作任务。</p>\n<h4 id=\"koa\"><a href=\"#koa\" class=\"headerlink\" title=\"koa\"></a>koa</h4><p>koa是建立在generator和co之上的中间件框架，由Express开发人员打造。它通过组合不同的生成器函数，避免了繁杂易出错的回调函数嵌套。koa中没有绑定任何中间件，仅仅提供了一个轻量级函数库。</p>\n<blockquote>\n<p>Koa 中间件以一种更加传统的方式级联起来, 跟你在其他系统或工具中碰到的方式非常相似。 然而在以往的 Node 开发中, 级联是通过回调实现的, 想要开发用户友好的代码是非常困难的, Koa 借助 generators 实现了真正的中间件架构, 与 Connect 实现中间件的方法相对比，Koa 的做法不是简单的将控制权依次移交给一个又一个的方法直到某个结束，Koa 执行代码的方式有点像回形针，用户请求通过中间件，遇到 yield next 关键字时，会被传递到下游中间件（downstream），在 yield next 捕获不到下一个中间件时，逆序返回继续执行代码（upstream）。</p>\n</blockquote>\n<h3 id=\"thunk\"><a href=\"#thunk\" class=\"headerlink\" title=\"thunk\"></a>thunk</h3><p>上文中提到的thunk函数实际上由来已久，它是函数传名调用的一种实现方式，不同于函数的传值调用。就像下面的例子一样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行器</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">f</span>(x * <span class=\"number\">3</span> + <span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 可以写成下面这样</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">thunk</span> () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * <span class=\"number\">3</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\">thunk, <span class=\"number\">1</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">thunk</span>() + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>JavaScript中的thunk函数有着另外的意思，它替换的不是一个输入参数，而是<strong>将多参数的函数替换成单参数的版本，且只接受回调函数作为输入参数</strong>，正如之前写到的例子一样。</p>\n<p>一个简单的thunk函数转换器写起来并不复杂，像下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> thunk = <span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> args = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">done</span>) &#123;</span><br><span class=\"line\">            args.<span class=\"title function_\">push</span>(done);</span><br><span class=\"line\">            fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/tj/node-thunkify\">node-thunkify</a>模块对此又多了一些监测，如在最内层的function添加called变量确保回调函数只执行一次。Thunkify的源码相比co就更短了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">thunkify</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">assert</span>(<span class=\"string\">&#x27;function&#x27;</span> == <span class=\"keyword\">typeof</span> fn, <span class=\"string\">&#x27;function required&#x27;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 返回一个包含thunk函数的函数，返回的thunk函数用于执行yield，而外围这个函数用于给thunk函数传递参数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> args = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 缓存当前上下文环境，给fn提供执行环境</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> ctx = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">// 将参数类数组转化为数组（实现方式略显臃肿，可直接用Array.prototype.slice.call(arguments)实现）</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; args.<span class=\"property\">length</span>; ++i) &#123;</span><br><span class=\"line\">            args[i] = <span class=\"variable language_\">arguments</span>[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">// 真正的thunk函数（有且只有一个参数是callback的函数，且callback的第一个参数为error）</span></span><br><span class=\"line\">        <span class=\"comment\">// 类似于：</span></span><br><span class=\"line\">        <span class=\"comment\">// function(cb) &#123;fs.readFile(path, &#123;encoding: &#x27;utf8&#125;, cb)&#125;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">done</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> called;</span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"comment\">// 将回调函数再包裹一层，避免重复调用；同时，将包裹了的真正的回调函数push进参数数组</span></span><br><span class=\"line\">            args.<span class=\"title function_\">push</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (called) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                called = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                done.<span class=\"title function_\">apply</span>(<span class=\"literal\">null</span>, <span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 在ctx上下文执行fn（一般是异步函数，如：fs.readFile）</span></span><br><span class=\"line\">                <span class=\"comment\">// 并将执行thunkify之后返回的函数的参数（含done回调）传入，类似于执行：</span></span><br><span class=\"line\">                <span class=\"comment\">// fs.readFile(path, &#123;encoding: &#x27;utf8&#125;, done)</span></span><br><span class=\"line\">                <span class=\"comment\">// 关于done是做什么用，则是在co库内</span></span><br><span class=\"line\">                fn.<span class=\"title function_\">apply</span>(ctx, args);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">done</span>(err);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>thunk函数的特点和Promise对象类似，就是将回调函数的绑定单独抽离出来，thunk函数结合Generator函数实现自动流程管理方法和Promise一样。</p>\n<h3 id=\"async\"><a href=\"#async\" class=\"headerlink\" title=\"async\"></a>async</h3><p>从Promise对象到Generator函数，JavaScript中的异步编程越来越简单，但是还是有戴着镣铐跳舞的感觉，async函数的提出即将把这个镣铐摘掉。</p>\n<p>async函数的使用和Generator函数很像，我们改写之前的那个读取文件函数如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">readFile</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> d1 = <span class=\"keyword\">await</span> <span class=\"title function_\">readFile</span>(<span class=\"string\">&#x27;file1.js&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(d1);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> d2 = <span class=\"keyword\">await</span> <span class=\"title function_\">readFile</span>(<span class=\"string\">&#x27;file2.js&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(d2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>虽然和Generator函数很像，但是它有着更清晰易懂的语法，更广的适用性（<code>await</code>后可以跟任何类型，在原始类型时等同于同步操作）。最关键的是，<strong>async函数自带执行器！！！</strong></p>\n<p>在实现上，async函数和Generator函数是一样的，不过是将执行器放在自身内部而已。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">args</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">spawn</span>(<span class=\"keyword\">function</span>* () &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">spawn</span> (genF, self) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> gen = genF.<span class=\"title function_\">call</span>(self);</span><br><span class=\"line\">    <span class=\"title function_\">step</span>(<span class=\"function\">() =&gt;</span> gen.<span class=\"title function_\">next</span>(<span class=\"literal\">undefined</span>));</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">step</span> (nextF) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> next;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        next = <span class=\"title function_\">nextF</span>();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// finished with failure, reject the promise</span></span><br><span class=\"line\">        <span class=\"title function_\">reject</span>(e);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (next.<span class=\"property\">done</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// finished with success, resolve the promise</span></span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(next.<span class=\"property\">value</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// not finished, chain off the yielded promise and `step` again</span></span><br><span class=\"line\">      <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(next.<span class=\"property\">value</span>).<span class=\"title function_\">then</span>(</span><br><span class=\"line\">        <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"title function_\">step</span>(<span class=\"function\">() =&gt;</span> gen.<span class=\"title function_\">next</span>(v)),</span><br><span class=\"line\">        <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"title function_\">step</span>(<span class=\"function\">() =&gt;</span> gen.<span class=\"keyword\">throw</span>(e))</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在使用上，async函数返回一个Promise对象。可以使用then方法添加回调函数。当遇到<code>await</code>时先返回，等待异步操作完成后再执行函数体后的语句。<code>await</code>只能用在async函数中，在普通函数中使用会报错。同时，async函数目前是ES7的标准，需要通过Babel转码使用。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://hacks.mozilla.org/2015/03/this-api-is-so-fetching/\">This API is so Fetching!</a><br><a href=\"https://github.com/tj/co\">co</a><br><a href=\"https://nswbmw.github.io/N-club/1/1.3.html\">co和koa</a><br><a href=\"https://ponyfoo.com/articles/understanding-javascript-async-await\">Understanding JavaScript’s async await</a></p>\n",
            "tags": [
                "JavaScript",
                "异步",
                "Generator",
                "thunk",
                "async"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2017/03/20/domevent-elementsize-mediatag/",
            "url": "http://shenlvmeng.github.com/blog/2017/03/20/domevent-elementsize-mediatag/",
            "title": "【笔记】JavaScript事件处理机制，元素大小判断与H5的媒体标签",
            "date_published": "2017-03-20T12:45:30.000Z",
            "content_html": "<p>前一阵舍友去面试，被问到JavaScript中的事件处理机制。暗自思忖，发现自己也没有深入的了解过。顺带连同常用的HTML元素大小和实际中用到的HTML5中的媒体元素简单整理在下面，方便之后回顾。</p>\n<h2 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h2><p>JavaScript和HTML的交互是通过<strong>事件</strong>实现的。可以通过监听器订阅文档或窗口中的事件，在事件发生时执行特定的代码。这种属于设计模式中的观察者模式。</p>\n<p>事件相关的API最早出现在IE4和NetScape Nivagator4（后面简称为网景）中。两种浏览器提供了相似却不同的API。在之后的DOM2级标准中对DOM事件进行了标准化。</p>\n<h3 id=\"事件流\"><a href=\"#事件流\" class=\"headerlink\" title=\"事件流\"></a>事件流</h3><p><strong>事件流</strong>描述的是页面中接受时间的顺序。在这点上IE和网景采用了完全相反的两种处理思路。IE采用的是<strong>事件冒泡流</strong>，网景采用的是<strong>事件捕获流</strong>。</p>\n<p>事件冒泡（event bubbling）指从事件开始的最具体的元素接收，再逐步向上传递到最外层的节点，直到<code>document</code>。如下图（来自红宝书）展示的过程，在下面的文档中：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Event bubbling<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Click me<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果div标签被点击，<code>click</code>事件会这样依次传递：<code>&lt;div&gt;</code> -&gt; <code>&lt;body&gt;</code> -&gt; <code>&lt;html&gt;</code> -&gt; <code>document</code>。（不同浏览器实现细节上会有不同）</p>\n<p><img src=\"/blog/blog/images/event-bubbling.jpg\"></p>\n<p>事件捕获（event capturing）则认为应该从父节点开始捕获事件直到事件目标。因此，同样的上面的例子，顺序将是：<code>document</code> -&gt; <code>&lt;html&gt;</code> -&gt; <code>&lt;body&gt;</code> -&gt;  <code>&lt;div&gt;</code>。</p>\n<p><img src=\"/blog/blog/images/event-capturing.jpg\"></p>\n<p>目前很少有人使用事件捕获这种方式作为事件流。</p>\n<h4 id=\"DOM-事件流\"><a href=\"#DOM-事件流\" class=\"headerlink\" title=\"DOM 事件流\"></a>DOM 事件流</h4><p>“DOM2级标准”中规定事件流包括三个阶段，<strong>事件捕获</strong>、<strong>处于目标</strong>、<strong>时间冒泡</strong>。在实际的DOM事件流中，实际目标不会接受到事件。因此如下图展示的那样，捕获阶段停止在父目标<code>&lt;body&gt;</code>上，之后事件发生在目标上，<strong>并作为事件冒泡的一部分</strong>。然后，冒泡阶段发生，事件传回到文档。</p>\n<p><img src=\"/blog/blog/images/DOM2-event-flow.jpg\"></p>\n<h3 id=\"事件处理程序\"><a href=\"#事件处理程序\" class=\"headerlink\" title=\"事件处理程序\"></a>事件处理程序</h3><p>事件处理程序指用户指定响应事件的某种动作。它们都以’on’开头。HTML元素本身都可以使用与之同名的HTML特性。</p>\n<h4 id=\"DOM0级事件处理程序\"><a href=\"#DOM0级事件处理程序\" class=\"headerlink\" title=\"DOM0级事件处理程序\"></a>DOM0级事件处理程序</h4><p>DOM0级事件处理程序就是将一个函数直接赋值给一个事件处理程序属性。使用这种方法指定的事件处理程序被认为是元素的一种方法，从而其作用域为元素本身，即<code>this</code>指向引用元素。可以通过直接为事件处理程序属性赋值为null删除。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;button&#x27;</span>);</span><br><span class=\"line\">btn.<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">id</span>); <span class=\"comment\">// &quot;button&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//删除</span></span><br><span class=\"line\">btn.<span class=\"property\">onclick</span> = <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure>\n\n<p>所有浏览器都支持DOM0级事件处理程序。这么做的好处是可以保证浏览器兼容性，缺点是使得HTML和JavaScript紧密耦合，不利用后期维护。</p>\n<h4 id=\"DOM2级事件处理程序\"><a href=\"#DOM2级事件处理程序\" class=\"headerlink\" title=\"DOM2级事件处理程序\"></a>DOM2级事件处理程序</h4><p>伴随DOM2级标准提出，“DOM2级事件”提出了两种方法，用于绑定和解除事件处理程序：<code>addEventListener()</code>和<code>removeEventListener()</code>。它接受3个参数：<strong>事件名</strong>、<strong>事件处理程序对应的函数</strong>、<strong>表示捕获阶段的布尔值</strong>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;button&#x27;</span>);</span><br><span class=\"line\">btn.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;click&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">id</span>);</span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br><span class=\"line\">btn.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;click&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">id</span> + <span class=\"string\">&quot; again.&quot;</span>);</span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n\n<p>使用DOM2级方法绑定事件处理程序的一个优点是，<strong>可以添加多个程序到同一个标签上</strong>。使用DOM0级方法时则会覆盖上一次的事件处理程序。IE9及以上版本都支持DOM2级事件处理程序。</p>\n<p>由于IE事件处理程序在IE8之前，是通过类似的<code>attachEvent()</code>和<code>detachEvent()</code>方法。它的第一个参数是事件名（<strong>需要带上on</strong>），第二个参数是事件处理程序。通过这种方法绑定的处理程序都添加在冒泡阶段，且需要注意的是其中的<code>this</code>等于<code>window</code>对象。支持这种方式有IE和Opera。</p>\n<p>因此，一个跨浏览器兼容的事件绑定和解绑应该是下面这样的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">EventUtil</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">addHandler</span>: <span class=\"keyword\">function</span>(<span class=\"params\">element, type, handler</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (element.<span class=\"property\">addEventListener</span>) &#123;</span><br><span class=\"line\">            element.<span class=\"title function_\">addEventListener</span>(type, handler, <span class=\"literal\">false</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (element.<span class=\"property\">attachEvent</span>) &#123;</span><br><span class=\"line\">            element.<span class=\"title function_\">attachEvent</span>(<span class=\"string\">&quot;on&quot;</span> + type, handler);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            element[<span class=\"string\">&quot;on&quot;</span> + type] = handler;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">removeHandler</span>: <span class=\"keyword\">function</span>(<span class=\"params\">element, type, handler</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (element.<span class=\"property\">removeEventListener</span>) &#123;</span><br><span class=\"line\">            element.<span class=\"title function_\">removeEventListener</span>(type, handler, <span class=\"literal\">false</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (element.<span class=\"property\">detachEvent</span>) &#123;</span><br><span class=\"line\">            element.<span class=\"title function_\">detachEvent</span>(<span class=\"string\">&quot;on&quot;</span> + type, handler);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            element[<span class=\"string\">&quot;on&quot;</span> + type] = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>&#x3D;&#x3D;&#x3D;</p>\n<h2 id=\"元素大小与位置\"><a href=\"#元素大小与位置\" class=\"headerlink\" title=\"元素大小与位置\"></a>元素大小与位置</h2><p>这些属性方法并不属于“DOM2级样式”，但是却经常得到使用。目前所有主流浏览器都支持这些属性。它们大多都是只读的。</p>\n<h3 id=\"偏移量\"><a href=\"#偏移量\" class=\"headerlink\" title=\"偏移量\"></a>偏移量</h3><p><strong>偏移量</strong>描述元素在屏幕中占用的可用空间，由其宽高决定，包括内边距、滚动条和边框（不包括外边距）。有下面4个属性：</p>\n<ul>\n<li><code>offsetHeight</code> 元素垂直方向上的占用空间</li>\n<li><code>offsetWidth</code> 元素水平方向上的占用空间</li>\n<li><code>offsetLeft</code> 元素左边框距<code>offsetParent</code>元素左内边框的像素距离</li>\n<li><code>offsetTop</code> 元素上边框距<code>offsetParent</code>元素上内边框的像素距离</li>\n</ul>\n<p>可以利用元素的<code>offsetLeft</code>或<code>offsetLeft</code>与其<code>offsetParent</code>对应属性相加直到根元素，获取到元素相对于页面的左偏移值或上偏移值。</p>\n<h3 id=\"客户区大小\"><a href=\"#客户区大小\" class=\"headerlink\" title=\"客户区大小\"></a>客户区大小</h3><p><strong>客户区大小</strong>指元素内容和内边距占据的空间大小，不包括滚动条。<code>clientWidth</code>是元素内容宽度加左右内边距的宽度，<code>clientHeight</code>是元素内容高度加上下内边距的高度。</p>\n<p>可以通过对<code>body</code>元素取值来获取当前浏览器视口的大小。</p>\n<h3 id=\"滚动大小\"><a href=\"#滚动大小\" class=\"headerlink\" title=\"滚动大小\"></a>滚动大小</h3><p><strong>滚动大小</strong>包含滚动内容的元素大小。它有下面4个相关属性：</p>\n<ul>\n<li><code>scrollHeight</code> 没有滚动条时，元素内容的高度</li>\n<li><code>scrollWidth</code> 没有滚动条时，元素内容的宽度</li>\n<li><code>scrollLeft</code> 被隐藏在内容区域左侧的像素数，可以设置从而改变元素滚动位置</li>\n<li><code>scrollTop</code> 被隐藏在内容区域上侧的像素数，可以设置从而改变元素滚动位置</li>\n</ul>\n<p><code>scrollHeight/scrollWidth</code>和<code>clientHeight/clientWidth</code>在不同浏览器下的表现行为并不相同，有的表示视口大小，有的表示元素内容区域大小。使用时可以<strong>取较大值</strong>。而另外两个属性<code>scrollLeft</code>和<code>scrollTop</code>则通常用在<code>document</code>中，获取和滚动相关的属性。</p>\n<h3 id=\"确定元素大小\"><a href=\"#确定元素大小\" class=\"headerlink\" title=\"确定元素大小\"></a>确定元素大小</h3><p>大多数主流浏览器为元素提供了<code>getBoundingClientRect()</code>方法，返回一个对象，包含<code>left</code>，<code>right</code>，<code>top</code>，<code>bottom</code>四个属性。给出了元素相对于视口的位置。</p>\n<p>对不支持这个方法的浏览器，可以通过偏移量的相关属性获取。</p>\n<p>&#x3D;&#x3D;&#x3D;</p>\n<h2 id=\"媒体元素\"><a href=\"#媒体元素\" class=\"headerlink\" title=\"媒体元素\"></a>媒体元素</h2><p>HTML5出现前，提供富媒体内容的网站多采用Flash的方式保证浏览器兼容性。HTML5新增了两个标签<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio\"><code>&lt;audio&gt;</code></a>和<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/video\"><code>&lt;video&gt;</code></a>。用于方便地嵌入音频和视频内容。同时，这两个标签也提供了实现常用功能的JavaScript API。允许为媒体创建自定义控件。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;demo.mpg&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;foo&quot;</span>&gt;</span>Video player is not available.<span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">audio</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;song.mp3&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;bar&quot;</span>&gt;</span>Audio player is not available.<span class=\"tag\">&lt;/<span class=\"name\">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>其中元素的<code>src</code>属性指定了加载的媒体文件，还可以通过<code>width</code>和<code>height</code>属性指定播放器大小。<code>controls</code>属性意味浏览器应该显示UI控件用于操作媒体。标签中的内容用于在不支持时显示后备内容。</p>\n<p>因为不同浏览器支持的媒体格式集并不完全相同，可以在标签下指定<strong>一或多个</strong><code>&lt;source&gt;</code>元素，通过<code>src</code>和<code>type</code>属性指定来源和格式，视频标签下<code>&lt;source&gt;</code>的<code>type</code>中甚至可以指定<code>codecs</code>表示解码器。目前现代浏览器（IE9+，对IE说的就是你）都支持这两个标签。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myVideo&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;foo.mpg&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;foo.webm&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;video/webm; codecs=vp8, vorbis&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">audio</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;song.ogg&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;audio/ogg&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;song.mp3&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;audio/mpeg&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><p><code>&lt;video&gt;</code>和<code>&lt;audio&gt;</code>提供了完善的JavaScript接口，下面是一些可能会用到的它们的属性。其中很多可以直接在标签元素上设置。</p>\n<ul>\n<li><code>autoplay</code> 取消或设置当前<code>autoplay</code>标识</li>\n<li><code>controls</code> 取消或设置当前<code>controls</code>标识，用于显示和隐藏浏览器内置控件</li>\n<li><code>currentTime</code> 获取已经播放的秒数</li>\n<li><code>duration</code> 获取媒体的总长度（秒数）</li>\n<li><code>ended</code> 获取媒体是否播放完成</li>\n<li><code>loop</code>  取消或设置媒体文件是否循环播放</li>\n<li><code>muted</code> 取消或设置媒体文件是否静音</li>\n<li><code>paused</code> 标识播放器是否暂停</li>\n<li><code>playbackRate</code> 取消或设置当前播放速度</li>\n<li><code>readyState</code> 标识媒体是否就绪，有0，1，2，3四种情况，表示不可用、可以播放当前帧、可以播放、加载完毕</li>\n<li><code>src</code> 媒体文件来源，可重写</li>\n<li><code>volume</code> 取消或设置当前音量，值为0.0到1.0</li>\n</ul>\n<h3 id=\"事件-1\"><a href=\"#事件-1\" class=\"headerlink\" title=\"事件\"></a>事件</h3><p>这两个媒体元素还有许多事件，有的是媒体播放的结果，有的是用户操作的结果。</p>\n<ul>\n<li><code>abort</code> 下载中断</li>\n<li><code>canplay</code> 对应着<code>readyState</code>为2</li>\n<li><code>canplaythrough</code> 对应着<code>readyState</code>为3</li>\n<li><code>ended</code> 媒体播放完毕</li>\n<li><code>error</code> 下载过程网络错误</li>\n<li><code>pause</code> 播放暂停</li>\n<li><code>play</code>  媒体收到播放指令</li>\n<li><code>playing</code> 媒体开始播放</li>\n<li><code>ratechange</code> 播放速度改变</li>\n<li><code>seeked</code> 移动到新位置</li>\n<li><code>seeking</code> 正在移动进度条</li>\n<li><code>volumnchange</code> <code>volumn</code>和<code>muted</code>属性值改变</li>\n<li><code>waiting</code> 播放因下载未完成暂停</li>\n</ul>\n<p>在如此丰富的属性和事件的帮助下，结合<code>play()</code>和<code>pause()</code>方法，我们可以很容易构建一个自定义的媒体播放器。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;player&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;player__content&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;video&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;movie.mov&quot;</span> <span class=\"attr\">poster</span>=<span class=\"string\">&quot;movie.jpg&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;400&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;200&quot;</span>&gt;</span></span><br><span class=\"line\">      Video is not supported.</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;player__control&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Play!&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;video-play&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;curtime&quot;</span>&gt;</span>0<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>/<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;duration&quot;</span>&gt;</span>0<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> player = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;video&quot;</span>),</span><br><span class=\"line\">    btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;video-play&quot;</span>),</span><br><span class=\"line\">    curtime = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;curtime&quot;</span>),</span><br><span class=\"line\">    duration = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;duration&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//更新播放时间</span></span><br><span class=\"line\">duration.<span class=\"property\">innerHTML</span> = player.<span class=\"property\">duration</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//为按钮添加处理事件</span></span><br><span class=\"line\"><span class=\"title class_\">EventUtil</span>.<span class=\"title function_\">addHandler</span>(btn, <span class=\"string\">&quot;click&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (player.<span class=\"property\">paused</span>) &#123;</span><br><span class=\"line\">        player.<span class=\"title function_\">play</span>();</span><br><span class=\"line\">        btn.<span class=\"property\">value</span> = <span class=\"string\">&quot;Pause!&quot;</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        player.<span class=\"title function_\">pause</span>();</span><br><span class=\"line\">        btn.<span class=\"property\">value</span> = <span class=\"string\">&quot;Play!&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定时更新时间</span></span><br><span class=\"line\"><span class=\"built_in\">setInterval</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    curtime.<span class=\"property\">innerHTML</span> = player.<span class=\"property\">currentTime</span>;</span><br><span class=\"line\">&#125;, <span class=\"number\">250</span>);</span><br></pre></td></tr></table></figure>\n\n<p>最后，不是所有浏览器都支持这两个标签的所有解码器，因此有一个API来检测浏览器是否支持某种解码器。通过<code>canPlayType()</code>方法，该方法接收格式&#x2F;编解码器（如”<code>audio/wav</code>“）字符串，返回”probably”, “maybe”或是空字符串””。像下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (audio.<span class=\"title function_\">canPlayType</span>(<span class=\"string\">&quot;audio/mpeg&quot;</span>))&#123;</span><br><span class=\"line\">    <span class=\"comment\">//进一步处理</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "HTML",
                "JavaScript",
                "DOM",
                "笔记"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2017/03/13/js-object/",
            "url": "http://shenlvmeng.github.com/blog/2017/03/13/js-object/",
            "title": "JavaScript中的对象和继承",
            "date_published": "2017-03-13T08:53:39.000Z",
            "content_html": "<h2 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h2><blockquote><p>对象：无序属性的集合，其属性可以包含基本值、对象或者函数</p>\n<footer><strong>ECMA-262</strong></footer></blockquote>\n\n<p>JavaScript中的<strong>对象</strong>和其他OO（Object-Oriented，面向对象）语言不大相同。它没有类的概念。所以根据ECMAScript的定义，对象无非就是一组键值对，类似于散列（Hash）表的概念，其中的值可以是基本类型也可以是对象或函数。</p>\n<p>一个常见的对象像下面这样</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Stu</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\"><span class=\"title class_\">Stu</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;shenlvmeng&#x27;</span>;</span><br><span class=\"line\"><span class=\"title class_\">Stu</span>.<span class=\"property\">age</span>  = <span class=\"number\">23</span>;</span><br><span class=\"line\"><span class=\"title class_\">Stu</span>.<span class=\"property\">school</span> = <span class=\"string\">&#x27;BUPT&#x27;</span>;</span><br><span class=\"line\"><span class=\"title class_\">Stu</span>.<span class=\"property\">sayHi</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;Hi&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//或者直接使用字面量</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Stu</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;shenlvmeng&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">23</span>,</span><br><span class=\"line\">    <span class=\"attr\">school</span>: <span class=\"string\">&#x27;BUPT&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">sayHi</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;Hi&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"对象属性\"><a href=\"#对象属性\" class=\"headerlink\" title=\"对象属性\"></a>对象属性</h3><p>对象<strong>属性（property）</strong>是实现JavaScript引擎用的，由两对方括号包裹，表示是内部值，如[[Enumerable]]。ECMAScript中目前分两种属性：<em>数据属性</em>和<em>访问器属性</em>。</p>\n<h4 id=\"数据属性\"><a href=\"#数据属性\" class=\"headerlink\" title=\"数据属性\"></a>数据属性</h4><ul>\n<li><code>[[Configurable]]</code>: 表示能否通过<code>delete</code>删除属性，能否修改属性。默认为true。</li>\n<li><code>[[Enumerable]]</code>: 能否通过<code>for-in</code>语句循环返回属性。默认为true。</li>\n<li><code>[[Writable]]</code>: 如同字面意思，能否修改属性的值。</li>\n<li><code>[[Value]]</code>: 属性的数据值。</li>\n</ul>\n<p>数据属性可以直接通过字面量来定义。可以通过ECMAScript 5中<code>Object.defineProperty()</code>方法修改对象默认属性。方法接受三个参数：属性所在对象，属性名，和一个描述符对象。其中描述符对象的属性必须是上述4个属性的子集。值得注意的是，<em>修改<code>configurable</code>为false后，将无法将其变为true。</em>此时，只能修改<code>writable</code>和<code>value</code>。</p>\n<p>在使用<code>Object.defineProperty()</code>创建新属性时，若不指定，前三项的属性默认均为<strong>false</strong>。</p>\n<h4 id=\"访问器属性\"><a href=\"#访问器属性\" class=\"headerlink\" title=\"访问器属性\"></a>访问器属性</h4><p>访问器属性不包含数据值（即<code>value</code>），<strong>取而代之</strong>的是getter和setter两个函数。不过它们也不是必须的。</p>\n<ul>\n<li><code>[[Configurable]]</code>: 表示能否通过<code>delete</code>删除属性，能否修改属性。默认为true。</li>\n<li><code>[[Enumerable]]</code>: 能否通过<code>for-in</code>语句循环返回属性。默认为true。</li>\n<li><code>[[Get]]</code>: 读取属性时调用的函数，默认为undefined</li>\n<li><code>[[Set]]</code>: 写入属性时调用的函数，默认为undefined</li>\n</ul>\n<p>访问器属性不能直接定义。必须使用<code>Object.defineProperty()</code>方法定义。未指定getter或setter时，<strong>意味着属性不可读或不可写</strong>。强制读写时，在严格模式下会抛出错误，非严格模式下会返回undefined。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">    <span class=\"attr\">_name</span>: <span class=\"string\">&#x27;&#x27;</span>,  <span class=\"comment\">//`_`表示只能通过方法访问</span></span><br><span class=\"line\">    <span class=\"attr\">nickname</span>: <span class=\"string\">&#x27;酱&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(person, <span class=\"string\">&#x27;name&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"attr\">get</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_name</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">set</span>: <span class=\"keyword\">function</span> (<span class=\"params\">newValue</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">nickname</span> = newValue + <span class=\"string\">&#x27;酱&#x27;</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">_name</span> = newValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>访问器属性实际上使得<strong>数据劫持</strong>得以实现，即在存取属性值时执行预定义的操作。Vue的数据绑定就是这么来实现的（具体的实现方式见另外的博文）。不过支持<code>Object.defineProperty()</code>方法的浏览器需要IE9+，Firefox4+，Safari5+，Opera12+，Chrome。在这个方法前，通常使用两个非规范的方法<code>__defineGetter__()</code>和<code>__defineSetter__()</code>，它们是对象的prototype中的的方法。</p>\n<div class=\"tip\">IE8其实也实现了`Object.defineProperty()`方法，不过存在诸多限制，只能对DOM对象使用。\n</div>\n\n<p>ECMAScript 5还定义了一个<code>Object.defineProperties()</code>方法，用于为对象定义多个属性。用法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;&#125;;</span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperties</span>(person, &#123;</span><br><span class=\"line\">    <span class=\"attr\">_name</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">writable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">value</span>: <span class=\"string\">&#x27;shenlvmeng&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">nickname</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">writable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">value</span>: <span class=\"string\">&#x27;shenlvmeng酱&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">name</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">get</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_name</span>; &#125;,</span><br><span class=\"line\">        <span class=\"attr\">set</span>: <span class=\"keyword\">function</span> (<span class=\"params\">newName</span>) &#123; <span class=\"variable language_\">this</span>.<span class=\"property\">_name</span> = newName; <span class=\"variable language_\">this</span>.<span class=\"property\">nickname</span> = newName + <span class=\"string\">&#x27;酱&#x27;</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"读取属性的特性\"><a href=\"#读取属性的特性\" class=\"headerlink\" title=\"读取属性的特性\"></a>读取属性的特性</h4><p><code>Object.getOwnPropertyDescriptor()</code>方法可以读取指定对象属性的描述符。如果属性是数据属性，则返回对象包含configurable, enumerable, writable, value；如果属性是访问器属性，则返回对象包括configurable, enumerable, get, set。支持这个方法的浏览器包括IE9+，Firefox4+，Safari5+，Opera12+，Chrome。</p>\n<h2 id=\"创建对象\"><a href=\"#创建对象\" class=\"headerlink\" title=\"创建对象\"></a>创建对象</h2><p>最简单的创建方法是通过Object构造函数和字面量的形式，如第一段代码里展示的那样。不过很显然，这么做有点蠢。在创建大量对象的时候，会产生成吨的重复代码。于是就产生了下面这些工程手段。</p>\n<h3 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h3><p>既然会产生重复代码，那么将这些重复代码封装成函数不就行了么。工厂模式就这么出现了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createPerson</span> (name, age, school) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>(); <span class=\"comment\">//用字面量的形式亦可</span></span><br><span class=\"line\">    o.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    o.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">    o.<span class=\"property\">school</span> = school;</span><br><span class=\"line\">    o.<span class=\"property\">sayHi</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> + <span class=\"string\">&#x27; say hi.&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"title function_\">createPerson</span>(<span class=\"string\">&#x27;shenlvmeng&#x27;</span>, <span class=\"number\">23</span>, <span class=\"string\">&#x27;BUPT&#x27;</span>);</span><br><span class=\"line\">p1.<span class=\"title function_\">sayHi</span>();</span><br></pre></td></tr></table></figure>\n\n<p>这么做解决了创建相似对象的问题，不过并没解决对象识别的问题。而且可以复用的函数创建了很多次。</p>\n<h3 id=\"构造函数模式\"><a href=\"#构造函数模式\" class=\"headerlink\" title=\"构造函数模式\"></a>构造函数模式</h3><p>ECMAScript中的构造函数可用来创建特定类型的对象，从而解决了对象识别的问题。上面的例子用构造函数模式重写如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span> (name, age, school) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">school</span> = school;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">sayHi</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> + <span class=\"string\">&#x27; say hi.&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;shenlvmeng&#x27;</span>, <span class=\"number\">23</span>, <span class=\"string\">&#x27;BUPT&#x27;</span>);</span><br><span class=\"line\">p1.<span class=\"title function_\">sayHi</span>();</span><br></pre></td></tr></table></figure>\n\n<p>通过构造函数创建实例时，需要使用<code>new</code>操作符。创建的步骤如下：</p>\n<ol>\n<li>创建一个空对象</li>\n<li>将构造函数的作用域(this)赋给空对象</li>\n<li>执行函数代码</li>\n<li>返回这个对象</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p1.<span class=\"property\">constructor</span> == <span class=\"title class_\">Person</span> <span class=\"comment\">//true</span></span><br><span class=\"line\">p1 <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Person</span>     <span class=\"comment\">//true</span></span><br><span class=\"line\">p2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;weii&#x27;</span>, <span class=\"number\">23</span>, <span class=\"string\">&#x27;BUPT&#x27;</span>);</span><br><span class=\"line\">p1.<span class=\"property\">constructor</span> == p2.<span class=\"property\">constructor</span> <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<p>返回对象会自带constructor属性，指向构造函数本身。可以用来区分对象类型。不过使用instanceof操作符要更可靠些。因为构造函数本身也是函数，只是用来构造对象而已。为了和其他函数区分开，<strong>通常命名首字母使用大写字母</strong>。这么做是为了避免一个问题：当不使用<code>new</code>操作符调用构造函数时，函数作用域并不会指向新创建的函数，因此this实际上是进入函数时的全局作用域，从而会污染全局作用域。</p>\n<p>可以看到一个问题，使用构造函数模式并未解决函数复用的目标，同样的函数创建了许多次，通过<code>p1.sayHi == p2.sayHi //false</code>即可发现。为了复用函数，可以把函数放在构造函数外。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span> (name, age, school) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">school</span> = school;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">sayHi</span> = sayHi;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sayHi</span> () &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> + <span class=\"string\">&#x27; say hi.&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这么做却又带来了副作用，全局作用域中定义的函数，实际上只能被函数调用。且不同对象的方法作为全局函数混杂在一起，封装性很差劲。</p>\n<h3 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h3><p>原型（prototype）的设计解决了这个大问题。每个函数都有一个<code>prototype</code>属性。<strong>这个属性是一个指针，指向一个对象，包含由该函数构造对象共享的属性和方法</strong>。从而，不必在构造函数中定义所有实例共有的属性和方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span> () &#123;&#125;;</span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;shenlvmeng&#x27;</span>;</span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">age</span> = <span class=\"number\">23</span>;</span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">school</span> = <span class=\"string\">&#x27;BUPT&#x27;</span>;</span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">sayHi</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> + <span class=\"string\">&#x27; say hi.&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"原型对象\"><a href=\"#原型对象\" class=\"headerlink\" title=\"原型对象\"></a>原型对象</h4><p><strong>无论何时</strong>，只要创建了一个新函数，就会相应的为该函数创建一个<code>prototype</code>属性，指向该函数的原型对象。默认情况下，所有原型对象都会有一个<code>constructor</code>属性指向<code>prototype</code>属性所在函数。</p>\n<p>创建自定义的构造函数时，原型对象默认只会有<code>constructor</code>属性，其他的方法都继承自<code>Object</code>。在调用构造函数创建对象实例后，实例的内部都有一个指针<code>[[prototype]]</code>指向构造函数的原型对象。这个指针是内部的，但在FF，Safari，Chrome中，有<code>__proto__</code>属性可以访问。</p>\n<p>是不是听起来有点晕，下面的图（来自红宝书）形象地说明了上面这些关系。</p>\n<p><img src=\"/blog/blog/images/prototype-1.jpg\"></p>\n<p>虽然无法访问到<code>[[prototype]]</code>属性，但是可以通过prototype的<code>isPrototypeOf()</code>方法确认对象和原型的对应关系，或ES5中的<code>Object.prototype()</code>得到<code>[[prototype]]</code>的值。</p>\n<p>代码在尝试读取对象属性的时候，会先从实例本身属性开始，若找到同名属性，则返回值；如果没有找到，则继续搜索指针指向的原型对象。例如，因为原型对象中包含<code>constructor</code>属性，所以实际上对象实例也都可以访问到constructor这个属性。在为对象实例添加属性时，这个属性会<strong>屏蔽</strong>（不是<strong>覆盖</strong>）原型对象中的同名属性。通过对象的<code>hasOwnProperty()</code>方法，可以检测属性来自实例还是原型对象。</p>\n<h4 id=\"in-操作符\"><a href=\"#in-操作符\" class=\"headerlink\" title=\"in 操作符\"></a>in 操作符</h4><p><code>in</code>操作有两种使用方法，单独使用和配合<code>for-in</code>循环使用。前者在对象可以访问给定属性时返回<code>true</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">alert</span>(p1.<span class=\"title function_\">hasOwnProperty</span>(<span class=\"string\">&#x27;name&#x27;</span>)); <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;name&#x27;</span> <span class=\"keyword\">in</span> p1); <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> p1.<span class=\"property\">name</span>;</span><br><span class=\"line\"><span class=\"title function_\">alert</span>(p1.<span class=\"title function_\">hasOwnProperty</span>(<span class=\"string\">&#x27;name&#x27;</span>)) <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;name&#x27;</span> <span class=\"keyword\">in</span> p1); <span class=\"comment\">//true name属性来自原型</span></span><br></pre></td></tr></table></figure>\n\n<p>for-in循环可以访问所有对象可以访问的、可枚举（enumerable）的属性。既包含实例自身属性，也包含原型中的属性。下面是个简单的例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> body = <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">attributes</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> prop <span class=\"keyword\">in</span> body) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(prop + <span class=\"string\">&#x27;: &#x27;</span> + body[prop]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用最新的<code>Object.keys()</code>可以获取所有键名，使用<code>Object.getOwnPropertyNames()</code>方法可以返回所有实例属性，而不论是否可枚举。</p>\n<h4 id=\"重写prototype\"><a href=\"#重写prototype\" class=\"headerlink\" title=\"重写prototype\"></a>重写prototype</h4><p>上面原型模式里一个一个属性为<code>prototype</code>赋值的方法略显重复，可以直接通过对象字面量的形式重写整个原型对象。但是需要注意的是，重写后的原型对象中的<code>constructor</code>属性继承自Object。此时只能通过<code>instanceof</code>操作符确定对象类型了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span> () &#123;&#125;;</span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;shenlvmeng&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">23</span>,</span><br><span class=\"line\">    <span class=\"attr\">school</span>: <span class=\"string\">&#x27;BUPT&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">sayHi</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> + <span class=\"string\">&#x27; says hi.&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(<span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>, <span class=\"string\">&#x27;constructor&#x27;</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">enumerable</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">value</span>: <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>因为在原型中查找值是一次搜索的过程，我们对原型对象所做的修改都会立即在对象中体现出来。</p>\n<h4 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h4><p>原型对象中的所有属性和方法都在实例中共享，这在某些场景下可能并不是我们想要的。比如，不同的<code>Person</code>间应该总有些自己的属性。这些应该在构造函数中体现出来。</p>\n<h3 id=\"组合使用构造函数和原型模式\"><a href=\"#组合使用构造函数和原型模式\" class=\"headerlink\" title=\"组合使用构造函数和原型模式\"></a>组合使用构造函数和原型模式</h3><p>如上面所说，将实例的属性放在构造函数中，将共有属性和方法放在原型对象中，可以最大程度减少无谓的内存占用。因此，这也是目前使用最多的创建自定义类型的方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span> (name, age, school) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">school</span> = school;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">constructor</span>: <span class=\"title class_\">Person</span>,</span><br><span class=\"line\">    <span class=\"attr\">sayHi</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">p1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;shenlvmeng&#x27;</span>, <span class=\"number\">23</span>, <span class=\"string\">&#x27;BUPT&#x27;</span>);</span><br><span class=\"line\">p2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;weii&#x27;</span>, <span class=\"number\">29</span>, <span class=\"string\">&#x27;BUPT&#x27;</span>);</span><br><span class=\"line\"><span class=\"title function_\">alert</span>(p1.<span class=\"property\">sayHi</span> == p2.<span class=\"property\">sayHi</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>寄生构造函数和稳妥构造函数在有些时候也用来构造对象。前者仅仅将创建对象的代码封装起来，通过<code>new</code>操作符调用，内部不使用<code>this</code>。这种情况下，对象和构造函数实际上没有关系，因此不能使用instanceof操作符确定类型。</p>\n<p>稳妥构造函数有Douglas Crockford提出，利用了闭包的特点，保证了内部数据的安全性和封装性。函数内部没有公共属性，也不引用this对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span> (name, age, school) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">    o.<span class=\"property\">sayHi</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">alert</span>(name + <span class=\"string\">&#x27; says hi.&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;shenlvmeng&#x27;</span>, <span class=\"number\">23</span>, <span class=\"string\">&#x27;BUPT&#x27;</span>);</span><br><span class=\"line\">p1.<span class=\"title function_\">sayHi</span>();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><p>传统面向对象语言支持继承接口和继承实现。前者只继承签名，实现接口；后者继承实现的方法。ECMAScript只支持后者（ECMAScript中没有函数签名）。其实现主要利用原型链。</p>\n<h3 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h3><p>ECMAScript中最基本的继承方式，它的思想在于通过原型让一个自定义类型用于另一个类型的属性和方法。具体实现上，只用将一个对象实例作为另一个对象的原型对象即可。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//父类</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">SuperType</span> (name) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">SuperType</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">sayName</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//子类</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Subtype</span> (age) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//实现继承</span></span><br><span class=\"line\"><span class=\"title class_\">SubType</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"keyword\">new</span> <span class=\"title class_\">SuperType</span>(<span class=\"string\">&#x27;shenlvmeng&#x27;</span>);</span><br><span class=\"line\"><span class=\"title class_\">SubType</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">sayAge</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">age</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"title class_\">Subtype</span>(<span class=\"number\">23</span>);</span><br><span class=\"line\">o.<span class=\"title function_\">sayAge</span>();</span><br></pre></td></tr></table></figure>\n\n<p>上面的关键一步就是将父类的实例赋给子类的<code>prototype</code>，从而子类的所有实例可以共享父类的所有属性和方法。在上面的步骤中，<code>SubType</code>默认的原型被替换为<code>SuperType</code>的实例，所以实际上，<code>SubType</code>的<code>constructor</code>属性成为了<code>SuperType</code>。这是因为，再找不到属性或方法时，搜索过程会一步一步向原型链末端前进，直到Object。</p>\n<p>下面是SuperType和SubType构造函数以及原型对象间的关系。</p>\n<p><img src=\"/blog/blog/images/prototype-2.jpg\"></p>\n<p>可以发现，使用原型链的一个问题是，父类的实例属性变成了子类的原型属性，分享在子类所有实例间。很显然是不合理的。第二，创建子类型时，为超类构造函数传递的参数将作为原型对象影响整个子类对象实例。</p>\n<h3 id=\"借用构造函数\"><a href=\"#借用构造函数\" class=\"headerlink\" title=\"借用构造函数\"></a>借用构造函数</h3><p>这种方法的思路是，在子类构造函数调用父类的构造函数，并将执行环境绑定在子类环境中。这样可以方便地向父类构造函数中添加自己的参数而不影响其他的子类实例。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">SuperType</span> (newFriend) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">friends</span> = [<span class=\"string\">&#x27;Alice&#x27;</span>, <span class=\"string\">&#x27;Bob&#x27;</span>, <span class=\"string\">&#x27;Caley&#x27;</span>].<span class=\"title function_\">push</span>(newFriend);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">SubType</span> (newFriend) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">SuperType</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, newFriend);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">newFriend</span> = newFriend;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"title class_\">SubType</span>(<span class=\"string\">&#x27;Dude&#x27;</span>);</span><br><span class=\"line\"><span class=\"title function_\">alert</span>(o.<span class=\"property\">friends</span>);    <span class=\"comment\">//[Alice, Bob, Caley, Dude]</span></span><br><span class=\"line\"><span class=\"title function_\">alert</span>(o.<span class=\"property\">newFriend</span>);  <span class=\"comment\">//Dude</span></span><br></pre></td></tr></table></figure>\n<p>这么做的缺点也很明显，函数的定义都需要在构造函数中重新写一遍。因此，这种技术很少单独使用。</p>\n<h3 id=\"组合继承\"><a href=\"#组合继承\" class=\"headerlink\" title=\"组合继承\"></a>组合继承</h3><p>组合继承发挥了上面两者的长处，通过原型链继承了原型属性和方法，通过构造函数实现对父类实例属性的继承。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">SuperType</span> (newFriend) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">friends</span> = [<span class=\"string\">&#x27;Alice&#x27;</span>, <span class=\"string\">&#x27;Bob&#x27;</span>, <span class=\"string\">&#x27;Caley&#x27;</span>].<span class=\"title function_\">push</span>(newFriend);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">SubType</span> (newFriend) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//继承属性</span></span><br><span class=\"line\">    <span class=\"title class_\">SuperType</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, newFriend);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">newFriend</span> = newFriend;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//继承方法</span></span><br><span class=\"line\"><span class=\"title class_\">SubType</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"keyword\">new</span> <span class=\"title class_\">SuperType</span>();</span><br><span class=\"line\"><span class=\"comment\">//修改构造函数，新添新方法</span></span><br><span class=\"line\"><span class=\"title class_\">SubType</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">constructor</span> = <span class=\"title class_\">SubType</span>;</span><br><span class=\"line\"><span class=\"title class_\">SubType</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">sayHi</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">newFriend</span> + <span class=\"string\">&#x27; says hi.&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>组合继承是JavaScript中最常用的集成模式。不过它实际上调用了两次父类的构造函数，因此后面介绍的寄生组合式继承方法又对此进行了优化。</p>\n<h3 id=\"原型式继承\"><a href=\"#原型式继承\" class=\"headerlink\" title=\"原型式继承\"></a>原型式继承</h3><p>Douglas CrockFord在2006年提出可以通过原型基于已有对象创建新对象，还不必创建自定义类型。函数大概像下面这样</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">object</span>(<span class=\"params\">o</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">F</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">    F.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = o;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title function_\">F</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到，本质上，<code>object</code>函数只是对传入的对象<code>o</code>进行了一层<em>浅复制</em>。从而其中的引用类型将会在返回的对象间共享。ECMAScript 5对这种通过对象创建对象的原型式继承方式进行了规范，新增了<code>Object.create()</code>方法。方法接受两个参数，一个作为新对象原型，一个作为新对象新增的额外属性。</p>\n<p>寄生式继承模式和原型式继承很类似。它将创建一个仅用来封装继承过程的函数，在函数内部处理增强对象的过程。功能和<code>Object.create()</code>类似。但是这么做不能做到函数复用，从而效率会降低，用在简单的场景下。</p>\n<h3 id=\"寄生组合式继承\"><a href=\"#寄生组合式继承\" class=\"headerlink\" title=\"寄生组合式继承\"></a>寄生组合式继承</h3><p>这种模式解决了组合式继承的弊端——调用两次父类构造函数。其中<code>SubType</code>构造函数中的调用作为实例的属性将覆盖原型中的同名属性。寄生组合式继承的关键在于：<strong>不必为了指定子类型的原型而调用父类的构造函数</strong>，我们不过是要一个父类原型的副本而已。因此，可以得到下面这样的基本模式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">inheritPrototype</span> (subtype, supertype) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> prototype = <span class=\"title function_\">object</span>(superType.<span class=\"property\"><span class=\"keyword\">prototype</span></span>) <span class=\"comment\">//或Object.create(superType.prototype)</span></span><br><span class=\"line\">    prototype.<span class=\"property\">constructor</span> = subtype;</span><br><span class=\"line\">    subType.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = prototype;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的三步分别是创建对象，添加<code>constructor</code>属性，替换子类原型。从而在继承的过程中只调用了1次<code>SuperType</code>函数。同时原型链保持了不变。因此insanceof和isPrototypeOf()可以正常使用。寄生组合式继承是最理想的继承模式。就像下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">SuperType</span> (newFriend) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">friends</span> = [<span class=\"string\">&#x27;Alice&#x27;</span>, <span class=\"string\">&#x27;Bob&#x27;</span>, <span class=\"string\">&#x27;Caley&#x27;</span>].<span class=\"title function_\">push</span>(newFriend);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">SubType</span> (newFriend) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//继承属性</span></span><br><span class=\"line\">    <span class=\"title class_\">SuperType</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, newFriend);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">newFriend</span> = newFriend;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//继承方法</span></span><br><span class=\"line\"><span class=\"title function_\">inheritPrototype</span>(<span class=\"title class_\">SubType</span>, <span class=\"title class_\">SuperType</span>);</span><br><span class=\"line\"><span class=\"comment\">//新增新方法</span></span><br><span class=\"line\"><span class=\"title class_\">SubType</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">sayHi</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">newFriend</span> + <span class=\"string\">&#x27; says hi.&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>总结一下，ECMAScript支持面向对象编程，但没有类和接口的概念。对象和原型的定义和关系比较松散。</p>\n<p>在创建对象上，有<strong>工厂模式</strong>、<strong>原型对象</strong>、<strong>构造函数</strong>、<strong>利用闭包</strong>几种方式可选，它们也可以组合使用。</p>\n<p>在实现继承上，可以借助原型链、构造函数和寄生组合式的模式实现比较严格的继承，原型式和寄生式模式用于不那么严格的对象间继承。</p>\n",
            "tags": [
                "JavaScript",
                "对象",
                "继承"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2017/03/09/js-function/",
            "url": "http://shenlvmeng.github.com/blog/2017/03/09/js-function/",
            "title": "JavaScript中的函数表达式与闭包",
            "date_published": "2017-03-09T12:43:41.000Z",
            "content_html": "<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><p>函数是JavaScript中最有特色同时又容易让人困扰的特性。定义函数的方式有两种：函数声明和函数表达式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数声明</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span> (arg0, arg1) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//函数体</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//函数表达式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//函数体</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在非IE浏览器中，function都有非标准的name属性，属性值为function后的标识符或表达式的接收变量名。在<strong>函数声明</strong>里有一个重要特征——<strong>函数声明提升（function declaration hoisting）</strong>。这意味着函数声明可以放在调用它的语句后。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">sayHi</span>();</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sayHi</span> () &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;Hi!&quot;</span>); <span class=\"comment\">// &quot;Hi!&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而函数表达式则不能这样使用，因为<strong>变量声明提升</strong>会将函数名提升，下面的代码将导致错误。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">sayHi</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> sayHi = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;Hi!&quot;</span>); <span class=\"comment\">// Error！</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>正确理解函数声明提升将会避免很多潜在的错误，<em>或者干脆养成好习惯——定义在前，调用在后</em>。</p>\n<h3 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h3><p>递归函数是一个函数通过调用自身得到的。如</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">factorial</span> (num) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num * <span class=\"title function_\">factorial</span>(num-<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是一个经典的递归阶乘函数。不过当我们不知道函数名或者函数是匿名函数时，可以通过<code>arguments.callee</code>来调用自身。<br><code>argument.callee</code>是一个指向正在执行的函数的指针。</p>\n<div class=\"tip\">在ES5的严格模式下，`arguments.callee`特性是禁止使用的。它将影响解释器的优化和运行效率。\n</div>\n\n<h3 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h3><p><strong>闭包</strong>几乎是前端面试必考的一个知识点。它的存在是JavaScript中作用域链带来的特性。<strong>闭包</strong>是指有权访问另一个函数<br>作用域中变量的函数。创建闭包最常用的方式就是在函数内部创建另一个函数。就像下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fatherFunction</span> (propertyName, value) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sum = value;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">object1, object2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> a = object1[propertyName],</span><br><span class=\"line\">            b = object2[propertyName];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a + b &gt; value) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到，在返回的函数中引用了外部函数的变量<code>propertyName</code>和<code>sum</code>。即使这个函数已经返回，只要内部函数还存在，那么这两个变量就仍然可以访问。这就是闭包的直观体现。</p>\n<p>解释闭包就要先理解JS中的<em>作用域链</em>。执行环境是JS中的一个关键概念。它定义了变量或函数可以访问的数据。全局执行环境是最外层的执行环境。根据ECMAScript实现宿主的不同，全局执行环境也各不相同。某个执行环境中的代码执行完毕后，环境被销毁，包括其中的所有变量和函数定义。<strong>JS中的每个函数都有自己的执行环境</strong>。执行流进入一个函数时，函数环境就被推入到环境栈中，待执行完毕后出栈。在执行环境中的代码时，会创建变量对象的作用域链，由当前的活动对象到外部环境变量对象一直到全局执行环境中的变量对象。内部环境可以通过作用域链访问所有外部环境，但是外部环境不能访问内部环境中的变量和函数。</p>\n<p>现在回过头看闭包。在函数执行过程中，为了读取和写入变量值，需要保存整个作用域链。因此，在<code>fatherFunction</code>中创建的匿名函数的作用域链实际上包含了<code>fantherFunction()</code>的活动对象（输入参数和变量）以及全局变量对象。在<code>fatherFunction()</code>返回时，匿名函数的作用域链仍然引用着它的活动对象，使其并不会被销毁，直到匿名函数被销毁。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建函数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> compare = <span class=\"title function_\">fatherFunction</span>(<span class=\"string\">&quot;value&quot;</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">// 调用函数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> res = <span class=\"title function_\">compare</span>(&#123;<span class=\"attr\">value</span>: <span class=\"number\">2</span>&#125;, &#123;<span class=\"attr\">value</span>: -<span class=\"number\">1</span>&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 解除匿名函数的引用，释放内存</span></span><br><span class=\"line\">compare = <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure>\n\n<div class=\"tip\">由于闭包会携带包含它的函数作用域，过度使用闭包会导致内存占用过多。忘记解除匿名函数引用还会导致内存泄漏。\n</div>\n\n<h3 id=\"闭包与变量\"><a href=\"#闭包与变量\" class=\"headerlink\" title=\"闭包与变量\"></a>闭包与变量</h3><p>闭包可以取得父级函数的变量的<em>最终值</em>，因此配合for循环这样的结构就容易发生意外，就像下面的函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">bindClickFunctions</span> () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> buttons = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&#x27;button&#x27;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 让我们假设length是20</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = buttons.<span class=\"property\">length</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        buttons[i].<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">alert</span>(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的函数会为所有的按钮绑定点击事件，不过效果却并不像预想中那样，不同的button弹出不同的值。结果是所有的button在点击后弹出的都是20。这是因为所有的匿名函数都使用着同一个外部函数的活动对象。可以通过在创建一层闭包来达到预期的目的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">bindClickFunctions</span> () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> buttons = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&#x27;button&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = buttons.<span class=\"property\">length</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        buttons[i].<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span> (<span class=\"params\">i</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">alert</span>(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们在每层循环中创建了一个匿名函数，匿名函数包含一个输入参数<code>i</code>，再分别保存在内部函数的作用域链中，就可以使闭包间引用的i互不干扰了。</p>\n<h3 id=\"块级作用域\"><a href=\"#块级作用域\" class=\"headerlink\" title=\"块级作用域\"></a>块级作用域</h3><p>JavaScript中是没有块级作用域的。不过可以利用匿名函数的作用域模拟一个块级作用域出来。在其中定义的私有变量也不必担心与其他作用域的变量名相冲突。这种用法很常用于最外层的封装，用于隐藏代码中的变量，在一定程度上保证安全。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> foo = <span class=\"string\">&quot;You can see me, but you cannot touch me.&quot;</span></span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(foo);</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"私有变量\"><a href=\"#私有变量\" class=\"headerlink\" title=\"私有变量\"></a>私有变量</h3><p>同样的，JavaScript中是没有私有成员的概念的。但是，利用闭包可以制造出私有变量。原理是，利用函数作用域隐藏其中的变量甚至输入参数，通过返回的闭包操作这些“私有”变量。如下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Stu</span> (name) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">getName</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">setName</span> = <span class=\"keyword\">function</span> (<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">        name = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> stu = <span class=\"keyword\">new</span> <span class=\"title class_\">Stu</span>(<span class=\"string\">&quot;Shenlvmeng&quot;</span>);</span><br><span class=\"line\"><span class=\"title function_\">alert</span>(stu.<span class=\"title function_\">getName</span>());</span><br><span class=\"line\">stu.<span class=\"title function_\">setName</span>(<span class=\"string\">&quot;Weii&quot;</span>);</span><br><span class=\"line\"><span class=\"title function_\">alert</span>(stu.<span class=\"title function_\">getName</span>());</span><br></pre></td></tr></table></figure>\n<p>这里只是一个很简单的展示，红宝书中还介绍了模块模式和增强模块模式，利用闭包的特点实现了单例的构造和特权方法。下面对上面的<code>Stu</code>函数进行改造，可以使得所有通过<code>Stu()</code>构造的对象都有相同的公有变量。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title class_\">Stu</span> = <span class=\"keyword\">function</span> (<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">        name = value;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title class_\">Stu</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">getName</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title class_\">Stu</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">setName</span> = <span class=\"keyword\">function</span> (<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">        name = value;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> stu1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Stu</span>(<span class=\"string\">&#x27;shenlvmeng&#x27;</span>);</span><br><span class=\"line\"><span class=\"title function_\">alert</span>(stu1.<span class=\"title function_\">getName</span>());</span><br><span class=\"line\"><span class=\"keyword\">var</span> stu2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Stu</span>(<span class=\"string\">&#x27;weii&#x27;</span>);</span><br><span class=\"line\"><span class=\"title function_\">alert</span>(stu2.<span class=\"title function_\">getName</span>());\t\t<span class=\"comment\">// &quot;weii&quot;</span></span><br><span class=\"line\"><span class=\"title function_\">alert</span>(stu1.<span class=\"title function_\">getName</span>());\t\t<span class=\"comment\">// &quot;weii&quot;</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "JavaScript",
                "闭包",
                "函数表达式"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2017/03/06/dom-1/",
            "url": "http://shenlvmeng.github.com/blog/2017/03/06/dom-1/",
            "title": "HTML中的DOM 1级模型",
            "date_published": "2017-03-06T03:26:29.000Z",
            "content_html": "<h2 id=\"DOM\"><a href=\"#DOM\" class=\"headerlink\" title=\"DOM\"></a>DOM</h2><p><strong>DOM（文档对象模型）</strong>是针对HTML和XML文档的一个API，描绘了层次化的节点树。开发者可以借助DOM对页面的某一部分进行添加、移除、修改。DOM来源于网景和微软提出的<a href=\"https://en.wikipedia.org/wiki/Dynamic_HTML\">DHTML</a>。1998年10月，DOM 1级规范称为W3C的标准，为文档查询和改动提供了接口。各大主流浏览器都完善地实现了DOM。</p>\n<hr>\n<p>DOM把HTML和XML文档描述成一个多层节点构成的结构。每个节点有都有自己的特点、数据和方法。</p>\n<p><strong>文档节点</strong>是每个文档的根节点。HTML中<code>&lt;html&gt;</code>元素是文档节点<em>唯一</em>的子节点，又称为<strong>文档元素</strong>。每一个标签都通过树中的一个节点表示，HTML元素表示为元素节点，特性通过特性节点表示，文档表示为文档节点，如此这样，总共有12中节点类型。</p>\n<h3 id=\"Node\"><a href=\"#Node\" class=\"headerlink\" title=\"Node\"></a>Node</h3><p>DOM 1级中定义了Node类型。JavaScript中的所有节点类型都继承于Node类型。每个节点都有一个<strong>nodeType</strong>属性。常用的取值如下：</p>\n<ul>\n<li>Node.ELEMENT_NODE(1)</li>\n<li>Node.ATTRIBUTE_NODE(2)</li>\n<li>Node.TEXT_NODE(3)</li>\n<li>Node.COMMENT_NODE(8)</li>\n<li>Node.DOCUMENT_NODE(9)</li>\n<li>Node.DOCUMENT_TYPE_NODE(10)</li>\n<li>Node.DOCUMENT_FRAGMENT_NODE(11)</li>\n</ul>\n<p>为了确保浏览器兼容性，建议还是将nodeType属性和数字值进行比较，减少使用常量。因为IE没有公开Node类型的构造函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (someNode.<span class=\"property\">nodeType</span> == <span class=\"number\">1</span>) &#123; <span class=\"comment\">// 元素节点</span></span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;This is an element node.&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>除了nodeType，节点类型还有<strong>nodeName</strong>和<strong>nodeValue</strong>两个属性。它们的取值取决于节点的类型。后面的介绍中也会提到。</p>\n<h4 id=\"节点关系\"><a href=\"#节点关系\" class=\"headerlink\" title=\"节点关系\"></a>节点关系</h4><p>在父子关系上，每个节点有一个<code>childNodes</code>属性，保存着<code>NodeList</code>对象。这个对象有<code>length</code>属性，也可以通过方括号访问其中的值，也可以通过<code>item()</code>方法访问，但它并不是Array的实例。且DOM结构的变化会实时地反映到这个<code>NodeList</code>对象中。<em>减少使用NodeList可以避免它带来的时延</em>。</p>\n<p>使用<code>firstChild</code>和<code>lastChild</code>属性可以分别访问到列表中第一个和最后一个节点。同时，每个节点都有一个parentNode属性，指向文档树的父节点。</p>\n<p>在兄弟关系上，使用<code>nextSibling</code>和<code>previousSibling</code>分别可以访问到下一个和上一个兄弟节点。<code>hasChildNodes()</code>在节点包含多个子节点时返回true。</p>\n<p>最后，所有节点都有<code>ownerDocument</code>属性，指向整个文档的文档节点。</p>\n<h4 id=\"节点操作\"><a href=\"#节点操作\" class=\"headerlink\" title=\"节点操作\"></a>节点操作</h4><p><code>appendChild</code>和<code>insertBefore</code>分别用于在childNodes末尾和某位前插入节点。并返回插入的DOM节点。需要注意的是，<em>如果插入的节点来自于DOM中，则节点会从原来的位置删除</em>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> returnedNode = someNode.<span class=\"title function_\">appendChild</span>(newNode);</span><br><span class=\"line\"><span class=\"keyword\">var</span> anotherNode  = someNode.<span class=\"title function_\">insertBefore</span>(newNode, <span class=\"literal\">null</span>); <span class=\"comment\">// 插入到最后一位</span></span><br><span class=\"line\">anotherNode = someNode.<span class=\"title function_\">insertBefore</span>(newNode, someNode.<span class=\"property\">firstChild</span>); <span class=\"comment\">// 插入到第二位</span></span><br></pre></td></tr></table></figure>\n<p><code>replaceChild</code>用于替换节点，<code>cloneChild</code>用于复制节点，cloneChild方法接受一个布尔值参数，表示是否执行深复制。在参数为true时执行深复制，否则执行浅复制。</p>\n<div class=\"tip\">需要留意的是，`cloneChild`不会复制DOM节点中的JavaScript属性，如事件处理程序。IE则会复制事件处理程序。为了保证一致性，建议在复制前移除事件处理程序。\n</div>\n\n<p>最后，节点的<code>normalize</code>方法可以删除节点后代中的空文本节点，合并相邻的文本节点。</p>\n<h3 id=\"Document\"><a href=\"#Document\" class=\"headerlink\" title=\"Document\"></a>Document</h3><p>JavaScript中用<code>Document</code>类型表示文档，浏览器中的<code>document</code>表示整个页面。它是<code>window</code>对象的一个属性。因此可以作为全局对象来访问。</p>\n<p>它的nodeType为9，nodeName为<code>&quot;#document&quot;</code>，子节点可以是一个DocumentType或Element类型的节点。在HTML中可以通过<code>documentElement</code>属性便捷地得到子节点<code>&lt;html&gt;</code>。所有浏览器都支持这个属性。<code>document.body</code>属性也都被支持。</p>\n<p>除了<code>&lt;html&gt;</code>，另一个可能的子节点是<code>DocumentType</code>，即<code>&lt;!DOCTYPE&gt;</code>标签。浏览器对它的支持差异很大。同样的还有<code>&lt;html&gt;</code>元素外的注释。</p>\n<p>document还有下面4个独特的HTML属性：</p>\n<ul>\n<li><code>title</code>包含网页的标题，属性的修改直接对应<code>&lt;title&gt;</code>元素</li>\n<li><code>URL</code>表示页面的URL，<strong>只读</strong></li>\n<li><code>domain</code>表示页面的域名，可修改</li>\n<li><code>referer</code>保存链接到当前页面的URL，<strong>只读</strong></li>\n</ul>\n<p>其中修改domain可以用来访问同一父级域名下的iframe中的资源。</p>\n<div class=\"tip\">为了保证安全，域名修改只能由“紧绷”变“松散”，而不能反过来。\n</div>\n\n<h4 id=\"查找元素\"><a href=\"#查找元素\" class=\"headerlink\" title=\"查找元素\"></a>查找元素</h4><p>DOM 1级标准只有<code>getElementById()</code>，<code>getElementsByTagName()</code>和<code>getElementsByName()</code>三种方法。具体功能不必再提。它们返回的是一个<code>HTMLCollection</code>对象。这个对象和<code>NodeList</code>很类似。同样可以通过方括号访问其中的子元素。不过<code>HTMLCollection</code>额外提供<code>namedItem()</code>方法，通过<code>name</code>属性值访问其中的子元素。</p>\n<p>除此以外，<code>document</code>对象还有一个特殊的集合，它们也都是<code>HTMLCollection</code>对象。如<code>document.anchors</code>，<code>document.forms</code>，<code>document.imgs</code>，<code>document.links</code>。</p>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><p><code>document.implementation</code>属性用来检测浏览器对DOM实现的程度，它有一个<code>hasFeature()</code>。</p>\n<p><code>write()</code>、<code>writeln()</code>、<code>open()</code>、<code>close()</code>方法可以将输出流写入到网页中。</p>\n<h3 id=\"Element\"><a href=\"#Element\" class=\"headerlink\" title=\"Element\"></a>Element</h3><p>除了<code>document</code>外，Element类型应该是HTML中最常用的类型了。它的nodeType为1，nodeName为元素的标签名，<code>tagName</code>属性也可以用来访问元素标签名。</p>\n<p>所有HTML元素都由HTMLElement的子类型表示。所有的HTML元素都具有下面的一些标准特性：</p>\n<ul>\n<li><code>id</code>：元素的唯一标识符</li>\n<li><code>title</code>：有关元素的附加说明信息</li>\n<li><code>lang</code>：元素的语言代码</li>\n<li><code>dir</code>：语言的方向</li>\n<li><code>className</code>：与元素的class对应</li>\n</ul>\n<p>这些都可以通过访问元素的属性得到。如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myDiv&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;foo&quot;</span> <span class=\"attr\">title</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span> <span class=\"attr\">dir</span>=<span class=\"string\">&quot;ltr&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>元素的信息可以通过下面的方式得到，同样，这些属性可以直接赋予新值来修改。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;myDiv&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(div.<span class=\"property\">id</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(div.<span class=\"property\">class</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(div.<span class=\"property\">title</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(div.<span class=\"property\">lang</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(div.<span class=\"property\">dir</span>);</span><br></pre></td></tr></table></figure>\n\n<p><em>未完待续</em></p>\n",
            "tags": [
                "HTML",
                "JavaScript",
                "DOM"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2017/03/01/js-type-and-equal-judgement/",
            "url": "http://shenlvmeng.github.com/blog/2017/03/01/js-type-and-equal-judgement/",
            "title": "JavaScript类型与类型转换",
            "date_published": "2017-03-01T04:06:13.000Z",
            "content_html": "<h2 id=\"引子\"><a href=\"#引子\" class=\"headerlink\" title=\"引子\"></a>引子</h2><blockquote><p>ECMAScript的变量是松散类型的，所谓松散类型就是可以用来保存任何类型的数据。换句话说，每个变量仅仅是一个用于保存值的占位符而已。</p>\n<footer><strong>Nicolas C.Zakas </strong><cite>--JavaScript高级程序设计</cite></footer></blockquote>\n<p>由于JavaScript是一种松散类型的语言，即变量在使用时，并不需要事先知道它的类型。因此不同变量间的比较往往要作类型转换，这也是一些常见quiz的由来。<br>比如下面的一道面试题：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//请写出下面语句的输出结果</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ([]) <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>);               <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (&#123;&#125;) <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>);               <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ([] == <span class=\"literal\">true</span>) <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>);       <span class=\"comment\">// 无</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (&#123;&#125; == <span class=\"literal\">true</span>) <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">4</span>)；      <span class=\"comment\">// 无</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">null</span> == <span class=\"literal\">undefined</span>) <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">5</span>) <span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"title class_\">NaN</span> == <span class=\"title class_\">NaN</span>) <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">6</span>)        <span class=\"comment\">// 无</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">&quot;5&quot;</span> == <span class=\"number\">5</span>) <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">7</span>)          <span class=\"comment\">// 7</span></span><br><span class=\"line\"><span class=\"comment\">//下面的结果你能写出来么</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>([] + &#123;&#125;); <span class=\"comment\">// &quot;[object Object]&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(&#123;&#125; + []); <span class=\"comment\">// &quot;[object Object]&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(&#123;&#125; - []); <span class=\"comment\">// -0</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>([] - &#123;&#125;); <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>([] + []); <span class=\"comment\">// &quot;&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>([] - []); <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(&#123;&#125; + &#123;&#125;); <span class=\"comment\">// &quot;[object Object][object Object]&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(&#123;&#125; - &#123;&#125;); <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"comment\">//下面的呢</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">null</span>           <span class=\"comment\">// &quot;object&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;&#125; <span class=\"comment\">// &quot;function&quot;</span></span><br><span class=\"line\">[] <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span>   <span class=\"comment\">// &quot;true&quot;</span></span><br><span class=\"line\">&#123;&#125; <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Object</span>  <span class=\"comment\">// &quot;true&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>怎么样？是不是有点晕，下面我们一部分一部分地来解释JavaScript中一些类型和相等相关的“潜规则”。</p>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><p>让我们先从JavaScript的数据类型开始。JavaScript中<em>只有</em>5种基本类型和引用类型。其中5种基本类型分别是：</p>\n<ul>\n<li>Undefined</li>\n<li>Null</li>\n<li>Number</li>\n<li>Boolean</li>\n<li>String</li>\n</ul>\n<p>除此之外只有1种引用类型——Object，Object本质上是由一组无序的键值对组成。5种基本类型是按值访问的，引用类型Object是按引用访问的。</p>\n<p>可以使用typeof操作符监测变量的基本类型。*它可以判断变量是否为除null的其他5种基本类型以及function类型。除此之外都会返回”object”*。之所以null的typeof结果也为”object”，是因为null实际上表示引用指向空对象。</p>\n<p>使用instanceof可以判断引用类型的具体值。使用方法类似于A instanceof B的形式。当B为“Object”时，表达式永远返回true。因为根据规定，所有引用类型的值都是Object的实例。</p>\n<p>下面是几个例子。通过instanceof操作符可以很方便地区分空数组和空对象（当然还有Object.prototype.toString.call()和[].concat()两种方法。）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>([] <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"regexp\">/w+/g</span> <span class=\"keyword\">instanceof</span> <span class=\"title class_\">RegExp</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h2><h3 id=\"to-Boolean类型\"><a href=\"#to-Boolean类型\" class=\"headerlink\" title=\"to Boolean类型\"></a>to Boolean类型</h3><p>Boolean类型是ECMAScript中使用最多的类型之一。类型只有true和false两个字面量。<b>true不一定等于1，false也不一定等于0</b>.可以通过调用Boolean()函数将其他类型转型为Boolean类型。规则如下：</p>\n<ul>\n<li>String类型：非空字符串&#x3D;&gt;true，空字符串&#x3D;&gt;false</li>\n<li>Number类型：非零数字（包括Inifity）&#x3D;&gt;true, 0和NaN&#x3D;&gt;false</li>\n<li>Object类型：任何对象&#x3D;&gt;true, null&#x3D;&gt;false</li>\n<li>Undefined：false</li>\n</ul>\n<p>在使用if()语句或三元操作符等情况要求Boolean类型时，括号内的表达式将会自动使用Boolean()函数转换为布尔类型。</p>\n<h3 id=\"to-String类型\"><a href=\"#to-String类型\" class=\"headerlink\" title=\"to String类型\"></a>to String类型</h3><p>有两种方法可以将值转为字符串，一种是使用几乎所有值都有的toString方法，对于null和undefined使用另一种——String()函数。</p>\n<p>前者适用于除null和undefined外的所有值，甚至String本身（返回一个自身的副本）。有些toString()方法接收一个基数作为参数（如Number）对Object使用toString方法时，会根据对象内toString的定义决定。</p>\n<ul>\n<li>Array返回逗号隔开的不包括外侧中括号的字符串</li>\n<li>Function返回Function定义的字符串</li>\n<li>普通Object返回”[object Object]”</li>\n<li>null和undefined分别返回”null”和”undefined”</li>\n</ul>\n<h3 id=\"to-Number类型\"><a href=\"#to-Number类型\" class=\"headerlink\" title=\"to Number类型\"></a>to Number类型</h3><p>可以使用Number(), parseInt()和parseFloat()三个函数做强制转换。转换到Number类型的规则要更好理解些。</p>\n<ul>\n<li>是Boolean类型时，true和false分别转换到1和0</li>\n<li>数字类型时，返回本身</li>\n<li>null时返回0</li>\n<li>undefined时返回NaN</li>\n<li>对字符串使用类似于parseInt和parseFloat类似的方法（可以识别0x这样的进制前缀<b>甚至Infinity这样的字符串</b>）</li>\n<li>对象使用valueOf()方法，再使用之前的规则；如果结果是NaN，再使用toString()方法作转换</li>\n</ul>\n<h2 id=\"类型转换场景\"><a href=\"#类型转换场景\" class=\"headerlink\" title=\"类型转换场景\"></a>类型转换场景</h2><h3 id=\"一元加减\"><a href=\"#一元加减\" class=\"headerlink\" title=\"一元加减\"></a>一元加减</h3><p>一元加减只需对操作数强制转换到Number类型。向下面这样的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"string\">&quot;01&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> s2 = <span class=\"string\">&quot;1.1&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> s3 = <span class=\"string\">&quot;z&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"number\">1.1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;</span><br><span class=\"line\">    <span class=\"attr\">valueOf</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">s1 = +s1; <span class=\"comment\">// 1</span></span><br><span class=\"line\">s2 = +s2; <span class=\"comment\">// 1.1</span></span><br><span class=\"line\">s3 = -s3; <span class=\"comment\">// NaN</span></span><br><span class=\"line\">b = +b;   <span class=\"comment\">// 0</span></span><br><span class=\"line\">f = +f;\t  <span class=\"comment\">// 1.1</span></span><br><span class=\"line\">o = -o;\t  <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"加性操作符\"><a href=\"#加性操作符\" class=\"headerlink\" title=\"加性操作符\"></a>加性操作符</h3><p>ECMAScript中规定的加减法这两个操作符有一些特殊行为，不仅处理数值的加减，还处理字符串的加减。因此转换规则还有些复杂。</p>\n<h4 id=\"加法\"><a href=\"#加法\" class=\"headerlink\" title=\"加法\"></a>加法</h4><p>优先做数值加减，无法完成时做字符串拼接。两个操作数都是<b>数值</b>时，执行常规的加法计算。</p>\n<ul>\n<li>一个操作数为NaN时，返回NaN</li>\n<li>Inifity + -Inifity，返回NaN</li>\n<li>+0 加 -0，返回+0</li>\n</ul>\n<p>只要有一个操作数为<b>字符串</b>类型，应用下面规则：</p>\n<ul>\n<li>两个都是字符串时，则将它们拼接起来。</li>\n<li>一个是字符串时，先将另一个转换为字符串</li>\n</ul>\n<p>布尔值和null以及undefined在另一个操作数是数值类型时转换为<b>数值类型</b>，反之转换为<b>字符串类型</b>。<br>一个操作数为对象时，转换为<b>字符串类型</b>。</p>\n<h4 id=\"减法\"><a href=\"#减法\" class=\"headerlink\" title=\"减法\"></a>减法</h4><p>与加法类似，除了数值相减减法也需要做一些类型转换。但是和加法不一样的是，<em>减法返回的一定是Number类型</em>。</p>\n<ul>\n<li>一个数值为NaN时，结果为NaN</li>\n<li>同号的Infinity相减返回NaN（如Infinity - Infinity），异号的Infinity相减等于第一个操作数</li>\n<li>除了-0减+0返回-0，其余0间相减均返回+0</li>\n<li>操作数出现字符串、布尔值、null、undefined时，做Number转换再进行数值减法</li>\n<li>对象先尝试用valueOf方法获得对象数值，若无此方法则调用toString方法，并转换得到的字符串。</li>\n</ul>\n<h3 id=\"关系操作符\"><a href=\"#关系操作符\" class=\"headerlink\" title=\"关系操作符\"></a>关系操作符</h3><p>关系操作符即大于（&gt;）、小于（&lt;）、大于等于（&gt;&#x3D;）和小于等于（&lt;&#x3D;）。在操作数并非纯数值时，ECMAScript也会进行数据转换或一些奇怪的操作。</p>\n<ul>\n<li>两个操作数都是数值时，进行数值比较</li>\n<li>两个操作数都是字符串时，按照对应字符编码顺序比较</li>\n<li>一个操作数是数值时，转换另一个为数值再比较</li>\n<li>一个操作数是对象时，优先使用valueOf方法比较数值，没有该方法时再使用toString方法</li>\n<li>任何数和NaN比较都会返回false</li>\n</ul>\n<h2 id=\"相等和全等\"><a href=\"#相等和全等\" class=\"headerlink\" title=\"相等和全等\"></a>相等和全等</h2><p>相等和全等用于确认两个变量是否相等。对此ECMAScript提供两组操作符：-相等-和-全等-。相等先转换类型后比较，全等仅比较不转换类型。由于情况较多较复杂，这里单独列一节。</p>\n<p>ECMAScript中相等操作符为&#x3D;&#x3D;。不相等操作符为!&#x3D;。它们都会先强制转型变量再相互比较。转换规则如下：</p>\n<ul>\n<li>先将<b>布尔值</b>转换为数值，false转换为0，true转换为1</li>\n<li><b>字符串</b>和<b>数值</b>比较时，将字符串转换为数值</li>\n<li>两个操作数都是<b>对象</b>时，判断它们是否指向同一个对象（只比较引用）</li>\n<li>只有一个操作数是<b>对象</b>时，调用valueOf()或toString()方法获得基本类型值</li>\n<li><b>null</b>和<b>undefined</b>是相等的</li>\n<li><b>null</b>和<b>undefined</b>在比较时不会被转换</li>\n<li>NaN出现时，相等操作符返回false</li>\n</ul>\n<p>全等操作符为&#x3D;&#x3D;&#x3D;，对象的不全等操作符为!&#x3D;&#x3D;。它们不会转换变量类型，相比较类型后比较值。因此行为更容易预测。</p>\n",
            "tags": [
                "JavaScript",
                "类型转换",
                "==",
                "类型判断"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2017/02/28/request-animation-frame/",
            "url": "http://shenlvmeng.github.com/blog/2017/02/28/request-animation-frame/",
            "title": "JS动画之requestAnimationFrame",
            "date_published": "2017-02-28T09:06:47.000Z",
            "content_html": "<p>CSS3中提供了animation的特性，用来通过指定关键帧（@kenframe）来实现动画效果。这么做方便高效。但是浏览器的兼容效果则比较捉急，且不能实现高级的缓动函数，更别说暂停、回放、倒放等功能了。所以大部分炫酷的动画还是采用JS动画来完成。</p>\n<p>传统的JS动画无非是通过setInterval或是setTimeout定时器函数实现。这在对动画实时性以及流畅性要求不高时没有什么问题。不过当<a href=\"https://shenlvmeng.github.io/blog/2017/02/27/event-loop/\">消息队列</a>较拥挤时，定时效果不能得到保障。同时不同浏览器的UI渲染频率各不相同，很可能与用户设置的时间间隔相冲突。如，相当一部分浏览器的显示频率是16.7ms，此时如果我们设置的时延是10ms就会出现丢帧的情况。为了解决这个问题，requestAnimationFrame千呼万唤始出来。</p>\n<p>requestAnimationFrame是window对象在HTML5中的新API。它的使用方法与setTimeout类似，不同的是，requestAnimationFrame()方法将告诉浏览器您希望执行动画，并请求浏览器调用指定的函数在下一次重绘之前调用回调函数更新动画。从而，不同的动画有了一个统一的刷新机制，可以提升系统性能，节省了CPU、GPU和电池等（CSS中的<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/will-change\">will-change</a>也发挥着类似功能）。</p>\n<p>那么requestAnimationFrame的兼容性如何呢？</p>\n<p><img src=\"/blog/blog/images/request-animation-frame-graph-1.png\"></p>\n<p>好像还不错。在老版本的浏览器上，也有shim方法来实现同样的效果，借助了setTimeout函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;use strict&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> lastTime = <span class=\"number\">0</span>,</span><br><span class=\"line\">        vendors = [<span class=\"string\">&#x27;ms&#x27;</span>, <span class=\"string\">&#x27;moz&#x27;</span>, <span class=\"string\">&#x27;webkit&#x27;</span>, <span class=\"string\">&#x27;o&#x27;</span>],</span><br><span class=\"line\">        x;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (x = <span class=\"number\">0</span>; x &lt; vendors.<span class=\"property\">length</span> &amp;&amp; !<span class=\"variable language_\">window</span>.<span class=\"property\">requestAnimationFrame</span>; ++x) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">window</span>.<span class=\"property\">requestAnimationFrame</span> = <span class=\"variable language_\">window</span>[vendors[x] + <span class=\"string\">&#x27;RequestAnimationFrame&#x27;</span>];</span><br><span class=\"line\">        <span class=\"variable language_\">window</span>.<span class=\"property\">cancelAnimationFrame</span>  = <span class=\"variable language_\">window</span>[vendors[x] + <span class=\"string\">&#x27;CancelAnimationFrame&#x27;</span>]</span><br><span class=\"line\">                                   || <span class=\"variable language_\">window</span>[vendors[x] + <span class=\"string\">&#x27;CancelRequestAnimationFrame&#x27;</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">window</span>.<span class=\"property\">requestAnimationFrame</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">window</span>.<span class=\"property\">requestAnimationFrame</span> = <span class=\"keyword\">function</span> (<span class=\"params\">callback</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> currTime = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>(),</span><br><span class=\"line\">                timeToCall = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(<span class=\"number\">0</span>, <span class=\"number\">16</span> - (currTime - lastTime)),</span><br><span class=\"line\">                id = <span class=\"variable language_\">window</span>.<span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                    <span class=\"title function_\">callback</span>(currTime + timeToCall);</span><br><span class=\"line\">                &#125;, timeToCall);</span><br><span class=\"line\">            lastTime = currTime + timeToCall;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">window</span>.<span class=\"property\">cancelAnimationFrame</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">window</span>.<span class=\"property\">cancelAnimationFrame</span> = <span class=\"keyword\">function</span> (<span class=\"params\">id</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">window</span>.<span class=\"built_in\">clearTimeout</span>(id);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;());</span><br></pre></td></tr></table></figure>\n\n<p>那么requestAnimationFrame怎么用呢。语法像下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">requestID = <span class=\"variable language_\">window</span>.<span class=\"title function_\">requestAnimationFrame</span>(callback);               <span class=\"comment\">// Firefox 23 / IE10 / Chrome / Safari 7 (incl. iOS)</span></span><br><span class=\"line\">requestID = <span class=\"variable language_\">window</span>.<span class=\"title function_\">mozRequestAnimationFrame</span>(callback);                <span class=\"comment\">// Firefox &lt; 23</span></span><br><span class=\"line\">requestID = <span class=\"variable language_\">window</span>.<span class=\"title function_\">webkitRequestAnimationFrame</span>(callback); <span class=\"comment\">// Older versions Chrome/Webkit</span></span><br></pre></td></tr></table></figure>\n\n<p>注意它只接受回调函数作为参数，不需要指定延时哦。同样的，相对应的还有一个<code>cancelAnimationFrame(requestID)</code>方法取消重绘。最常见的用法是在一个动画函数里通过requestAnimationFrame循环调用自身。就像下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">funFall = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> start = <span class=\"number\">0</span>, during = <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _run = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        start++;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> top = <span class=\"title class_\">Tween</span>.<span class=\"property\">Bounce</span>.<span class=\"title function_\">easeOut</span>(start, objBall.<span class=\"property\">top</span>, <span class=\"number\">500</span> - objBall.<span class=\"property\">top</span>, during);</span><br><span class=\"line\">        ball.<span class=\"title function_\">css</span>(<span class=\"string\">&quot;top&quot;</span>, top);</span><br><span class=\"line\">        <span class=\"title function_\">shadowWithBall</span>(top);    <span class=\"comment\">// 投影跟随小球的动</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (start &lt; during) <span class=\"title function_\">requestAnimationFrame</span>(_run);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"title function_\">_run</span>();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "动画",
                "JavaScript",
                "requestAnimationFrame"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2017/02/27/event-loop/",
            "url": "http://shenlvmeng.github.com/blog/2017/02/27/event-loop/",
            "title": "Javascript事件并发与Event Loop浅析",
            "date_published": "2017-02-27T07:12:38.000Z",
            "content_html": "<h2 id=\"引子\"><a href=\"#引子\" class=\"headerlink\" title=\"引子\"></a>引子</h2><p>首先我们先来看下面一段代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">8</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    (<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">6</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">7</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;result&#x27;</span>;</span><br><span class=\"line\">&#125;());</span><br></pre></td></tr></table></figure>\n\n<p>尽管结构复杂，但是只要对JavaScript的异步和回调有点了解，就能知道它的输出结果是’1 2 3 4 “result” 5 6 7 8’。</p>\n<h2 id=\"并发模型\"><a href=\"#并发模型\" class=\"headerlink\" title=\"并发模型\"></a>并发模型</h2><p>JavaScript中的异步和回调是语言本身的一种特色。包括上文中的setTimeout函数，Promise对象以及node.js的<a href=\"https://nodejs.org/api/fs.html#fs_fs_readfile_file_options_callback\">fs.readFile</a>等。将耗时的操作非阻塞地完成，可以大大提高程序的执行效率。而这些都和JavaScript的并发模型密切相关。与C++, Java多线程处理方式不同，<b>JavaScript中的并发是基于事件循环（<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop\">Event Loop</a>）的</b>。</p>\n<blockquote><p>Event loop is a programming construct that waits for and dispatches events or messages in a program.</p>\n</blockquote>\n\n<h3 id=\"执行图\"><a href=\"#执行图\" class=\"headerlink\" title=\"执行图\"></a>执行图</h3><p><img src=\"/blog/blog/images/event-loop-graph-1.png\"></p>\n<h4 id=\"Stack\"><a href=\"#Stack\" class=\"headerlink\" title=\"Stack\"></a>Stack</h4><p>函数调用时所用的执行环境栈。当函数被调用时，会进入一个执行环境（execution context）。当在函数内部调用其他函数（或自身调用）时，会进入新的执行环境，并在函数返回时回到原来的执行环境，并将原先的执行环境销毁。根据ECMA定义的概念，代码在执行环境中，还会创建变量对象的作用域链，以确保当前执行环境的有序性。最外层执行环境是全局环境（如<code>window</code>）。具体作用域链和执行环境的介绍，将放在其他文章中进行。</p>\n<p>函数执行过程中的执行环境栈即Stack。如下面的代码中，调用g时，形成第一个堆栈帧，包括参数21和局部变量m等。g调用f后，会创建第二个堆栈帧，置于其上，包含f的参数84和局部变量12等。f返回后，第二层栈帧出栈，g返回后，栈就空了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\">b</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">12</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a+b+<span class=\"number\">35</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">g</span>(<span class=\"params\">x</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> m = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">f</span>(m*x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">g</span>(<span class=\"number\">21</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Heap\"><a href=\"#Heap\" class=\"headerlink\" title=\"Heap\"></a>Heap</h4><p>存放JS中引用类型的堆，JS的引用类型通过类似于图的形式存储，方便进行垃圾回收。具体介绍可以参考红宝书，这里从略。</p>\n<h4 id=\"Queue\"><a href=\"#Queue\" class=\"headerlink\" title=\"Queue\"></a>Queue</h4><p>JavaScript运行时的待处理消息队列，其中的每个消息都与对应的回调函数绑定（未绑定的消息不会进入队列）。当栈空时，会从栈中取出消息进行处理，这个过程包括调用回调函数，形成调用栈等。当栈在此为空时，代表这个消息处理完成。</p>\n<p>首先我们要明确一点，<b>JavaScript的并发是单线程的</b>。在程序中（如浏览器）运行时，JS引擎跑着两个线程。一个负责运行本身的程序，叫做主线程。另一个负责主线程与其他线程的的通信，即Event Loop。当遇到异步的任务时，主线程将交由其他线程处理，并根据情况将对应的消息入队到信息队列（Message Queue）等待处理，如果消息未绑定回调函数，则不入队。</p>\n<p><b>当调用栈清空后，队首消息依次出队，并调用绑定的回调函数，产生函数执行环境和调用栈等。直到消息队列清空为止</b>。以上就是JavaScript中的事件循环。</p>\n<p>不同的web worker或跨域的iframe都有各自的栈、堆以及消息队列。不同的环境通过<a href=\"https://developer.mozilla.org/en-US/docs/DOM/window.postMessage\">postMessage</a>方法进行通信（需要双方监听message事件）。</p>\n<h3 id=\"setTimeout和setInterval\"><a href=\"#setTimeout和setInterval\" class=\"headerlink\" title=\"setTimeout和setInterval\"></a>setTimeout和setInterval</h3><p>在明白什么是时间循环后，setTimeout和setInterval这两个定时器函数就比较容易理解了。由于JavaScript运行在单线程的环境里，setTimeout和setInterval的定时时机实际上并不能得到保障。</p>\n<p><em>定时器对队列的工作方式是，在在当前时间过去特定的时间后将代码插入，这并不意味着之后会立即执行，而只能保证尽早执行。</em>。如下面的代码中，设定的250ms延时并不代表在onclick事件触发后的250ms立即执行。实际上，如果onclick的事件处理程序执行超过了250ms，定时器的设置将不再有意义（因为匿名函数的执行时机由onclick事件处理程序何时结束决定）。由此可见，setTimeout的时间间隔往往会比设计时长。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;my-btn&quot;</span>);</span><br><span class=\"line\">btn.<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;message&quot;</span>).<span class=\"property\">style</span>.<span class=\"property\">visibility</span> = <span class=\"string\">&quot;visible&quot;</span>;</span><br><span class=\"line\">    &#125;, <span class=\"number\">250</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>setInterval道理类似，和setTimeout不同的是，setInterval函数会将回调函数定时地插入消息队列的末端。为了避免定时器代码在执行完成前就有新的相同代码插入，造成严重性能问题，聪明的JavaScript引擎<b>仅在队列中没有其他定时器实例时才会插入新的定时器代码</b>。</p>\n<p>但是这么做却也带来了一个问题，那就是</p>\n<ol>\n<li>某些间隔会被跳过</li>\n<li>多个定时器间的间隔会比预期的要小。</li>\n</ol>\n<p>后者可以通过循环调用setTimeout来避免。</p>\n<p>另外，微软在IE 10中实现了<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/setImmediate\">setImmediate</a>方法，来实现真正的回调函数“立即执行”，而在实际运行中似乎和setTimeout的时间类似。</p>\n<h2 id=\"Macrotask-和-Microtask\"><a href=\"#Macrotask-和-Microtask\" class=\"headerlink\" title=\"Macrotask 和 Microtask\"></a>Macrotask 和 Microtask</h2><p>首先我们还是先来看一段代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">setImmediate</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;,<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;,<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">6</span>);</span><br><span class=\"line\">process.<span class=\"title function_\">nextTick</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">7</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">8</span>);</span><br></pre></td></tr></table></figure>\n\n<p>它的结果是什么呢。这里我们就要知道setTimeout, setImmediate, Promise.then, process.nextTick这些异步操作的优先级了。回答这个问题之前，我们先了解一下<a href=\"https://html.spec.whatwg.org/multipage/webappapis.html#task-queue\">Macrotask和Microtask两个概念</a>。</p>\n<p>Macrotask又叫task，是消息队列中一个个的message，一次event loop里面可能会有多个task，task有自己的task source，比如说setTimeout来自于timer task source，又或者和用户交互相关的来自user interaction task source。</p>\n<p>Microtask和Macrotask类似，区别在于它更轻量级，并非每次都在task末尾才执行，只要函数栈为空掉，Microtask就会执行。由此可见它的优先级要更高些。</p>\n<p>总结一下，它们的特点如下：</p>\n<ul>\n<li>一个事件循环(event loop)会有一个或多个任务队列(task queue) task queue 就是 macrotask queue</li>\n<li>每一个 event loop 都有一个 microtask queue</li>\n<li>task queue &#x3D;&#x3D; macrotask queue !&#x3D; microtask queue</li>\n<li>一个任务 task 可以放入 macrotask queue 也可以放入 microtask queue 中</li>\n<li>当一个 task 被放入队列 queue(macro或micro) 那这个 task 就可以被立即执行了</li>\n</ul>\n<p>简单点总结事件循环就是</p>\n<ol>\n<li>在 macrotask 队列中执行最早的那个 task ，执行浏览器渲染，然后移出</li>\n<li>执行 microtask 队列中所有可用的任务，然后移出</li>\n<li>下一个循环，执行下一个 macrotask 中的任务 (再跳到第2步，直到没有task和microtask)</li>\n</ol>\n<p>在实现上，macrotask主要有setTimeout setInterval setImmediate I&#x2F;O UI渲染；microtask主要有Promise process.nextTick Object.observe MutationObserver。由于microtask会耽误task的执行，尤其是在较多时甚至无法执行消息队列中的task，包括UI刷新。因此process.nextTick默认上限为1000，避免上述情况的出现。当调用次数过多时，会抛出栈溢出错误。</p>\n<p>所以，上面的执行结果将是<span style=\"background-color: #333; color: #333;\">3 4 6 8 7 5 2 1</span></p>\n",
            "tags": [
                "Javascript",
                "并发",
                "event loop"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2016/04/03/front-end-note-2/",
            "url": "http://shenlvmeng.github.com/blog/2016/04/03/front-end-note-2/",
            "title": "前端学习小计-CSS3和Flex",
            "date_published": "2016-04-03T12:57:26.000Z",
            "content_html": "<p>此篇承接上篇CSS和html5标签。写一些CSS3的新特性，flex布局和JS的基础知识。</p>\n<h2 id=\"CSS3\"><a href=\"#CSS3\" class=\"headerlink\" title=\"CSS3\"></a>CSS3</h2><p>CSS3是较新的层叠样式表的规范，其中的一些特性并未得到现行浏览器的支持。需要在样式前面加上-ms-, -moz-或是-webkit-，才可获得最好的浏览器支持。</p>\n<p>边框：CSS3支持设置圆角矩形（border-radius），边框阴影（box-shadow）甚至边框图片（border-image）.</p>\n<p>背景：设置背景大小和重复方式（background-size，background-repeat），设置背景所属范围和绘制区域（background-origin，background-clip）</p>\n<p>文本效果：文本阴影（text-shadow），断词方式（word-wrap），断句方式（word-break）</p>\n<p>字体：支持从外部导入字体（font-face）</p>\n<p>2D，3D变换：transform，有rotate，translate，scale，skew，translateX，translateY，rotateX，rotateY等属性。</p>\n<p>渐变：transition，选择属性，时间和变换函数。一般结合伪类（如:hover）使用。</p>\n<p>动画：keyframe（设置关键帧）+animation（决定动画的名称，持续时间，周期，方向等等）</p>\n<p>多列：column-count，column-gap，column-rule，column-span等属性</p>\n<p>用户界面：resize支持用户自己调整元素大小等等。</p>\n<p>更多内容可以参考<a href=\"http://www.w3school.com.cn/css3/index.asp\">W3scool的CSS3讲解</a>。</p>\n<h2 id=\"Flex布局\"><a href=\"#Flex布局\" class=\"headerlink\" title=\"Flex布局\"></a>Flex布局</h2><p>Flex是一种十分方面的布局方式，可以轻松实现居中对其等需求和响应式布局。目前在较新的浏览器中有支持。Flex需要在display属性中指定为flex。从而使得这个容器有了flex的特点。</p>\n<p>flex-direction：指定伸缩容器的主轴方向，即子元素伸缩的方向。有row，row-reverse，column，column-reverse等值。其中row是常用且默认的。</p>\n<p>flex-wrap：控制伸缩容器是单行或是多行，即侧轴新行的堆放方向。有no-wrap，wrap，wrap-reverse等值。默认值为no-wrap。</p>\n<p>flex-flow：通常将flex-direction和flex-wrap结合起来用flex-flow统一表示。</p>\n<p>align-items：控制容器内伸缩项目的侧轴对齐方式。有flex-start，flex-end，center，stretch，baseline等值。</p>\n<p>justify-content：主轴上伸缩项目的对齐方式。有flex-start，flex-end，center，space-between，space-around等值。</p>\n<p>align-content：多行间在伸缩容器里的对齐方式，有flex-start，flex-end，center，space-between，space-around，stretch等值。</p>\n<p>order：通过css动态更改子元素的排列顺序。默认为0，值越大顺序越靠前，可以取负值。</p>\n<p>flex-grow，flex-basis，flex-shrink等是更加复杂的用法。这里从略。结合@media screen and (max-width: xxxpx or min-width: xxxpx){ css code}会有很好的响应式布局效果。</p>\n<p>更多内容和展示效果，可以在<a href=\"http://www.w3cplus.com/css3/flexbox-basics.html\">w3plus的flex</a>讲解中找到。</p>\n<h2 id=\"JS与html经验小结\"><a href=\"#JS与html经验小结\" class=\"headerlink\" title=\"JS与html经验小结\"></a>JS与html经验小结</h2><p>不成篇幅，这里用列表的形式给出。</p>\n<ol>\n<li>alert()弹出对话框，无返回值；confirm()弹出确认框，返回boolean；prompt()弹出信息框，返回用户输入。</li>\n<li>document，window，element等是html的js接口中的常用对象，具体可以<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API\">MDN的技术文档</a>。</li>\n<li>element代表了页面DOM结构的节点，有文本节点和元素节点的区别。</li>\n<li>document中的常用函数包括getElementById，getElementsByTagName， getElementsByClassName，createElement等，element中有innerHtml，style，classname等属性值。</li>\n<li>添加元素，appendChild，insertBefore，都需要父元素调用，通过parentNode获得。反之，可以通过firstChild，lastChild，nextSibling等获知子元素情况。删除元素使用removeChild。</li>\n<li>parseInt()是JS的内建函数，用来将字符串转换为整型数，须开头为数字且遇到非数字为止。JS默认均用浮点数存储所有数据，通过isNaN判断是否为数字，isFinite判断是否为无穷。</li>\n<li>array是JS的基础数据类型之一，以键值对的形式存储，和hashtable很像，有push, reverse, sort, shift, unshift, push, pop, join，reduce等用法。</li>\n<li>有foreach的用法</li>\n<li>函数也是对象，有诸如arguments，length等属性。可以作为返回值或是输入值。甚至有制造函数的函数。</li>\n</ol>\n<p>更多内容可见<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript\">MDN的技术文档</a>。</p>\n",
            "tags": [
                "css",
                "flex",
                "javascript"
            ]
        }
    ]
}