{
    "version": "https://jsonfeed.org/version/1",
    "title": "Shenlvmeng's Blog • All posts by \"hash\" tag",
    "description": "Be sharp, my friend.",
    "home_page_url": "http://shenlvmeng.github.com/blog",
    "items": [
        {
            "id": "http://shenlvmeng.github.com/blog/2015/11/03/bloom-filter/",
            "url": "http://shenlvmeng.github.com/blog/2015/11/03/bloom-filter/",
            "title": "海量字符串检索之二 布隆过滤器",
            "date_published": "2015-11-03T10:57:54.000Z",
            "content_html": "<p>海量字符串检索是很考验算法效率的工作。Trie树和PAT树常用，但是内存占用严重。在垃圾邮件过滤或网络爬虫这种不要求检索结果完全正确的场景下，布隆过滤器是个很好的选择。</p>\n<h2 id=\"Hash函数\"><a href=\"#Hash函数\" class=\"headerlink\" title=\"Hash函数\"></a>Hash函数</h2><p>Hash（中译为哈希，或者散列）函数在计算机领域，尤其是数据快速查找领域，加密领域用的极广。其作用是将一个大的数据集映射到一个小的数据集上面（这些小的数据集叫做哈希值，或者散列值）。Hash table（散列表，也叫哈希表），是根据哈希值(Key value)而直接进行访问的数据结构。也就是说，它通过把哈希值映射到表中一个位置来访问记录，以加快查找的速度。时间复杂度只有O(1).</p>\n<p>哈希函数有以下两个特点：</p>\n<ul>\n<li>如果两个散列值是不相同的（根据同一函数），那么这两个散列值的原始输入也是不相同的。</li>\n<li>散列函数的输入和输出不是唯一对应关系的，如果两个散列值相同，两个输入值很可能是相同的。但也可能不同，这种情况称为“散列碰撞”（或者“散列冲突”）。<br>解决冲突的方法有许多，如向左或向右移位，拉链法等等。在数据量不大的情况下，Hash函数作为查找的解决方法看上去是很美好的。然而，数据量大了之后呢。不妨设想下面的应用场景。</li>\n</ul>\n<p>假设要你写一个网络蜘蛛（web crawler）。由于网络间的链接错综复杂，蜘蛛在网络间爬行很可能会形成“环”。为了避免形成“环”，就需要知道蜘蛛已经访问过那些URL。给一个URL，怎样知道蜘蛛是否已经访问过呢？稍微想想，就会有如下几种方案：</p>\n<ol>\n<li>将访问过的URL保存到数据库。</li>\n<li>用HashSet将访问过的URL保存起来。那只需接近O(1)的代价就可以查到一个URL是否被访问过了。</li>\n<li>URL经过MD5或SHA-1等单向哈希后再保存到HashSet或数据库。</li>\n<li>Bit-Map方法。建立一个BitSet，将每个URL经过一个哈希函数映射到某一位。</li>\n</ol>\n<p>以上方法在数据量较小的情况下都能完美解决问题，但是当数据量变得非常庞大时问题就来了。</p>\n<p>方法1的缺点：数据量变得非常庞大后关系型数据库查询的效率会变得很低。而且每来一个URL就启动一次数据库查询是不是太小题大做了？</p>\n<p>方法2的缺点：太消耗内存。随着URL的增多，占用的内存会越来越多。就算只有1亿个URL，每个URL只算50个字符，就需要5GB内存。</p>\n<p>方法3：由于字符串经过MD5处理后的信息摘要长度只有128Bit，SHA-1处理后也只有160Bit，因此方法3比方法2节省了好几倍的内存。</p>\n<p>方法4消耗内存是相对较少的，但缺点是单一哈希函数发生冲突的概率太高。还记得数据结构课上学过的Hash表冲突的各种解决方法么？若要降低冲突发生的概率到1%，就要将BitSet的长度设置为URL个数的100倍</p>\n<p>实质上上面的算法都忽略了一个重要的隐含条件：允许小概率的出错，不一定要100%准确！也就是说少量url实际上没有没网络蜘蛛访问，而将它们错判为已访问的代价是很小的——大不了少抓几个网页呗。</p>\n<p>上面所举的爬虫只是一个例子，在允许少量错误的情况下，布隆过滤器将是最好的选择。</p>\n<h2 id=\"布隆过滤器（Bloom-Filter）\"><a href=\"#布隆过滤器（Bloom-Filter）\" class=\"headerlink\" title=\"布隆过滤器（Bloom Filter）\"></a>布隆过滤器（Bloom Filter）</h2><p><img src=\"/blog/blog/images/bloom-filter-1.png\"></p>\n<p>布隆过滤器（Bloom Filter）是由布隆（Burton Howard Bloom）在1970年提出的。它实际上是由一个很长的二进制向量和一系列随机映射函数组成，布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率（假正例False positives，即Bloom Filter报告某一元素存在于某集合中，但是实际上该元素并不在集合中）和删除困难，但是没有识别错误的情形（即假反例False negatives，如果某个元素确实没有在该集合中，那么Bloom Filter 是不会报告该元素存在于集合中的，所以不会漏报）。</p>\n<h3 id=\"基本思想\"><a href=\"#基本思想\" class=\"headerlink\" title=\"基本思想\"></a>基本思想</h3><p>如果想判断一个元素是不是在一个集合里，一般想到的是将所有元素保存起来，然后通过比较确定。链表，树等等数据结构都是这种思路. 但是随着集合中元素的增加，我们需要的存储空间越来越大，检索速度也越来越慢。不过世界上还有一种叫作散列表（又叫哈希表，Hash table）的数据结构。它可以通过一个Hash函数将一个元素映射成一个位阵列（Bit Array）中的一个点。这样一来，我们只要看看这个点是不是 1 就知道可以集合中有没有它了。这就是布隆过滤器的基本思想。</p>\n<h3 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h3><ul>\n<li>优点——相比于其它的数据结构，布隆过滤器在空间和时间方面都有巨大的优势。布隆过滤器存储空间和插入&#x2F;查询时间都是常数。另外, Hash 函数相互之间没有关系，方便由硬件并行实现。布隆过滤器不需要存储元素本身，在某些对保密要求非常严格的场合有优势。</li>\n<li>缺点——误算率（False Positive）是其中之一。随着存入的元素数量增加，误算率随之增加。但是如果元素数量太少，则使用散列表足矣。另外，一般情况下不能从布隆过滤器中删除元素. 我们很容易想到把位列阵变成整数数组，每插入一个元素相应的计数器加1, 这样删除元素时将计数器减掉就可以了。然而要保证安全的删除元素并非如此简单。</li>\n</ul>\n<h3 id=\"误算率（False-Positive）分析\"><a href=\"#误算率（False-Positive）分析\" class=\"headerlink\" title=\"误算率（False Positive）分析\"></a>误算率（False Positive）分析</h3><p>一个Bloom Filter有以下参数：</p>\n<p>m | bit数组的宽度（bit数）<br>n | 加入其中的key的数量<br>k | 使用的hash函数的个数<br>f | False Positive的比率</p>\n<p>假设 Hash 函数以等概率条件选择并设置 Bit Array 中的某一位，m 是该位数组的大小，k 是 Hash 函数的个数，那么位数组中某一特定的位在进行元素插入时的 Hash 操作中没有被置位的概率是：1 - 1&#x2F;m</p>\n<p>那么在所有 k 次 Hash 操作后该位都没有被置 “1” 的概率是：(1 - 1 &#x2F; m)^k</p>\n<p>如果我们插入了 n 个元素，那么某一位仍然为 “0” 的概率是：(1 - 1 &#x2F; m) ^ k*n</p>\n<p>因而该位为 “1”的概率是：1 - (1 - 1 &#x2F; m) ^ k*n</p>\n<p>现在检测某一元素是否在该集合中。标明某个元素是否在集合中所需的 k 个位置都按照如上的方法设置为 “1”，但是该方法可能会使算法错误的认为某一原本不在集合中的元素却被检测为在该集合中（False Positives），该概率由以下公式确定：</p>\n<p>1 - (1 - 1 &#x2F; m) ^ k*n ≈ (1 - e ^ (-k * n &#x2F; m)) ^ k</p>\n<p>其实上述结果是在假定由每个 Hash 计算出需要设置的位（bit） 的位置是相互独立为前提计算出来的，不难看出，随着 m （位数组大小）的增加，假正例（False Positives）的概率会下降，同时随着插入元素个数 n 的增加，False Positives的概率又会上升，对于给定的m，n，如何选择Hash函数个数 k 由以下公式确定：</p>\n<p>m &#x2F; n * ln2 ≈ 0.7 * m &#x2F; n</p>\n<p>此时False Positives的概率为：2 ^ -k ≈ 0.6185 ^ (m &#x2F; n)</p>\n<p>而对于给定的False Positives概率 p，如何选择最优的位数组大小 m 呢，</p>\n<p>m &#x3D; -n * lnp &#x2F; (ln2) ^ 2</p>\n<p>上式表明，位数组的大小最好与插入元素的个数成线性关系，对于给定的 m，n，k，假正例概率最大为：(1 - e ^ (-k * (n + 0.5)&#x2F;(m - 1))) ^ k</p>\n<p>值得注意的是，k值并非越大越好。可以证明，当 k &#x3D; ln(2) * m&#x2F;n 时出错的概率是最小的。</p>\n<h3 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h3><h4 id=\"1-加入字符串\"><a href=\"#1-加入字符串\" class=\"headerlink\" title=\"1.加入字符串\"></a>1.加入字符串</h4><p><img src=\"/blog/blog/images/bloom-filter-2.jpg\"></p>\n<p>为了表达S&#x3D;{x1, x2,…,xn}这样一个n个元素的集合，Bloom Filter使用k个相互独立的哈希函数（Hash Function），它们分别将集合中的每个元素映射到{1,…,m}的范围中。</p>\n<p>当我们往Bloom Filter中增加任意一个元素x时候，我们使用k个哈希函数得到k个哈希值，然后将数组中对应的比特位设置为1。即第i个哈希函数映射的位置hash<sub>i</sub>(x)就会被置为1（1≤i≤k）。</p>\n<p><strong>注意：</strong>如果一个位置多次被置为1，那么只有第一次会起作用，后面几次将没有任何效果。在下图中，k&#x3D;3，且有两个哈希函数选中同一个位置（从左边数第五位，即第二个”1”处）。</p>\n<h4 id=\"2-检查字符串是否在集合中\"><a href=\"#2-检查字符串是否在集合中\" class=\"headerlink\" title=\"2. 检查字符串是否在集合中\"></a>2. 检查字符串是否在集合中</h4><p><img src=\"/blog/blog/images/bloom-filter-3.jpg\"></p>\n<p>在判断y是否属于这个集合时，我们只需要对y使用k个哈希函数得到k个哈希值，如果所有hash<sub>i</sub>(y)的位置都是1（1≤i≤k），即k个位置都被设置为1了，那么我们就认为y是集合中的元素，否则就认为y不是集合中的元素。下图中y<sub>1</sub>就不是集合中的元素（因为y1有一处指向了“0”位）。y<sub>2</sub>或者属于这个集合，或者刚好是一个false positive。</p>\n<h4 id=\"3-删除字符串\"><a href=\"#3-删除字符串\" class=\"headerlink\" title=\"3. 删除字符串\"></a>3. 删除字符串</h4><p><strong>通常</strong>，字符串加入了就被不能删除了，因为删除会影响到其他字符串，且无法判断删除字符串是否真在集合内。实在需要删除字符串的可以使用Counting bloomfilter(CBF)，这是一种基本Bloom Filter的变体，CBF将基本Bloom Filter每一个Bit改为一个计数器，这样就可以实现删除字符串的功能了。</p>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>C语言内，并没有定义Bitmap这个容器，所以需要自己实现。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAX 268435456</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*init bitmap*/</span></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">char</span> * <span class=\"title function_\">bitmap_init</span><span class=\"params\">(<span class=\"type\">int</span> size)</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> bytes;</span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">char</span> * p = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(size % <span class=\"number\">8</span> == <span class=\"number\">0</span>) </span><br><span class=\"line\">\t\tbytes = size / <span class=\"number\">8</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> </span><br><span class=\"line\">\t\tbytes = size / <span class=\"number\">8</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">\tp = (<span class=\"type\">unsigned</span> <span class=\"type\">char</span> *)<span class=\"built_in\">malloc</span>(bytes);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"literal\">NULL</span> == p)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(p, <span class=\"number\">0</span>, bytes);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*set flag on a certain index bit*/</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">bitmap_set</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">char</span> * bitmap, <span class=\"type\">int</span> index, <span class=\"type\">int</span> flag)</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//index range should have been checked outside!</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> seg = index / <span class=\"number\">8</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> off = index % <span class=\"number\">8</span>;</span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">char</span> p =  <span class=\"number\">0x1</span>&lt;&lt; off;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(flag == <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\tbitmap[seg] |= p;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(flag == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\tbitmap[seg] &amp;= ~p;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*get flag on a certain index bit*/</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">bitmap_get</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">char</span> * bitmap, <span class=\"type\">int</span> index)</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">///check index range outside first!</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> seg = index / <span class=\"number\">8</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> off = index % <span class=\"number\">8</span>;</span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">char</span> p = <span class=\"number\">0x1</span> &lt;&lt; off; \t<span class=\"type\">int</span> tmp = bitmap[seg] &amp; p; \t<span class=\"keyword\">return</span> tmp &gt; <span class=\"number\">0</span> ? <span class=\"number\">1</span> :<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*free bitmap*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">bitmap_free</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">char</span> * bitmap)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(bitmap);</span><br><span class=\"line\">\t*bitmap = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>之后，通过位图的置位和取位即可完成Bloom Filter的插入和检测操作。Hash函数选取如下（实际上，可以通过一个函数生成k个独立的哈希函数，存在优化空间）</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> <span class=\"title function_\">RSHash</span><span class=\"params\">(<span class=\"type\">char</span>* str, <span class=\"type\">unsigned</span> <span class=\"type\">int</span> len)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> b    = <span class=\"number\">378551</span>;</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> a    = <span class=\"number\">63689</span>;</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> hash = <span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> i    = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; str++, i++)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      hash = hash * a + (*str);</span><br><span class=\"line\">      a = a * b;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> hash;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* End Of RS Hash Function */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> <span class=\"title function_\">JSHash</span><span class=\"params\">(<span class=\"type\">char</span>* str, <span class=\"type\">unsigned</span> <span class=\"type\">int</span> len)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> hash = <span class=\"number\">1315423911</span>;</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> i    = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   fo <span class=\"title function_\">r</span><span class=\"params\">(i = <span class=\"number\">0</span>; i &lt; len; str++, i++)</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      hash ^= ((hash &lt;&lt; <span class=\"number\">5</span>) + (*str) + (hash &gt;&gt; <span class=\"number\">2</span>));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> hash;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* End Of JS Hash Function */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> <span class=\"title function_\">PJWHash</span><span class=\"params\">(<span class=\"type\">char</span>* str, <span class=\"type\">unsigned</span> <span class=\"type\">int</span> len)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">int</span> BitsInUnsignedInt = (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)(<span class=\"keyword\">sizeof</span>(<span class=\"type\">unsigned</span> <span class=\"type\">int</span>) * <span class=\"number\">8</span>);</span><br><span class=\"line\">   <span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">int</span> ThreeQuarters     = (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)((BitsInUnsignedInt  * <span class=\"number\">3</span>) / <span class=\"number\">4</span>);</span><br><span class=\"line\">   <span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">int</span> OneEighth         = (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)(BitsInUnsignedInt / <span class=\"number\">8</span>);</span><br><span class=\"line\">   <span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">int</span> HighBits          = (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)(<span class=\"number\">0xFFFFFFFF</span>) &lt;&lt; (BitsInUnsignedInt - OneEighth);</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> hash = <span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> test = <span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> i    = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; len; str++, i++) &#123;</span><br><span class=\"line\">      hash = (hash &lt;&lt; OneEighth) + (*str);</span><br><span class=\"line\">      <span class=\"keyword\">if</span>((test = hash &amp; HighBits) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">         hash = (( hash ^ (test &gt;&gt; ThreeQuarters)) &amp; (~HighBits));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> hash;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* End Of  P. J. Weinberger Hash Function */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> <span class=\"title function_\">ELFHash</span><span class=\"params\">(<span class=\"type\">char</span>* str, <span class=\"type\">unsigned</span> <span class=\"type\">int</span> len)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> hash = <span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> x    = <span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> i    = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; str++, i++) &#123;</span><br><span class=\"line\">      hash = (hash &lt;&lt; <span class=\"number\">4</span>) + (*str);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ((x = hash &amp; <span class=\"number\">0xF0000000</span>L) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">         hash ^= (x &gt;&gt; <span class=\"number\">24</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      hash &amp;= ~x;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> hash;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* End Of ELF Hash Function */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> <span class=\"title function_\">BKDRHash</span><span class=\"params\">(<span class=\"type\">char</span>* str, <span class=\"type\">unsigned</span> <span class=\"type\">int</span> len)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> seed = <span class=\"number\">131</span>; <span class=\"comment\">/* 31 131 1313 13131 131313 etc.. */</span></span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> hash = <span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> i    = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; len; str++, i++) &#123;</span><br><span class=\"line\">      hash = (hash * seed) + (*str);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> hash;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* End Of BKDR Hash Function */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> <span class=\"title function_\">SDBMHash</span><span class=\"params\">(<span class=\"type\">char</span>* str, <span class=\"type\">unsigned</span> <span class=\"type\">int</span> len)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> hash = <span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> i    = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; len; str++, i++) &#123;</span><br><span class=\"line\">      hash = (*str) + (hash &lt;&lt; <span class=\"number\">6</span>) + (hash &lt;&lt; <span class=\"number\">16</span>) - hash;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> hash;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* End Of SDBM Hash Function */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> <span class=\"title function_\">DJBHash</span><span class=\"params\">(<span class=\"type\">char</span>* str, <span class=\"type\">unsigned</span> <span class=\"type\">int</span> len)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> hash = <span class=\"number\">5381</span>;</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> i    = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; len; str++, i++)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      hash = ((hash &lt;&lt; <span class=\"number\">5</span>) + hash) + (*str);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> hash;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* End Of DJB Hash Function */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> <span class=\"title function_\">DEKHash</span><span class=\"params\">(<span class=\"type\">char</span>* str, <span class=\"type\">unsigned</span> <span class=\"type\">int</span> len)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> hash = len;</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> i    = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; len; str++, i++)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      hash = ((hash &lt;&lt; <span class=\"number\">5</span>) ^ (hash &gt;&gt; <span class=\"number\">27</span>)) ^ (*str);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> hash;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* End Of DEK Hash Function */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> <span class=\"title function_\">BPHash</span><span class=\"params\">(<span class=\"type\">char</span>* str, <span class=\"type\">unsigned</span> <span class=\"type\">int</span> len)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> hash = <span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> i    = <span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; len; str++, i++)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      hash = hash &lt;&lt; <span class=\"number\">7</span> ^ (*str);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> hash;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* End Of BP Hash Function */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> <span class=\"title function_\">FNVHash</span><span class=\"params\">(<span class=\"type\">char</span>* str, <span class=\"type\">unsigned</span> <span class=\"type\">int</span> len)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">int</span> fnv_prime = <span class=\"number\">0x811C9DC5</span>;</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> hash      = <span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> i         = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; len; str++, i++)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      hash *= fnv_prime;</span><br><span class=\"line\">      hash ^= (*str);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> hash;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* End Of FNV Hash Function */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> <span class=\"title function_\">APHash</span><span class=\"params\">(<span class=\"type\">char</span>* str, <span class=\"type\">unsigned</span> <span class=\"type\">int</span> len)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> hash = <span class=\"number\">0xAAAAAAAA</span>;</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> i    = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; len; str++, i++)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      hash ^= ((i &amp; <span class=\"number\">1</span>) == <span class=\"number\">0</span>)</span><br><span class=\"line\">         ? (  (hash &lt;&lt;  <span class=\"number\">7</span>) ^ (*str) * (hash &gt;&gt; <span class=\"number\">3</span>))</span><br><span class=\"line\">         : (~((hash &lt;&lt; <span class=\"number\">11</span>) + ((*str) ^ (hash &gt;&gt; <span class=\"number\">5</span>))));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> hash;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* End Of AP Hash Function */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*Hash string with 11 different hash function(flag = 0)</span></span><br><span class=\"line\"><span class=\"comment\">Or Search string in a maked bloom filter(flag = 1)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">bloomfilter_insert</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">char</span> * bitmap, <span class=\"type\">char</span>* emailstring, <span class=\"type\">int</span> flag)</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">int</span> index;</span><br><span class=\"line\"></span><br><span class=\"line\">\tindex = RSHash(emailstring,<span class=\"built_in\">strlen</span>(emailstring)) % MAX;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(flag == <span class=\"number\">1</span>)&#123;<span class=\"keyword\">if</span>(bitmap_get(bitmap,index) == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> bitmap_set(bitmap,index,<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tindex = JSHash(emailstring,<span class=\"built_in\">strlen</span>(emailstring)) % MAX;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(flag == <span class=\"number\">1</span>)&#123;<span class=\"keyword\">if</span>(bitmap_get(bitmap,index) == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> bitmap_set(bitmap,index,<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tindex = PJWHash(emailstring,<span class=\"built_in\">strlen</span>(emailstring)) % MAX;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(flag == <span class=\"number\">1</span>)&#123;<span class=\"keyword\">if</span>(bitmap_get(bitmap,index) == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> bitmap_set(bitmap,index,<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tindex = ELFHash(emailstring,<span class=\"built_in\">strlen</span>(emailstring)) % MAX;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(flag == <span class=\"number\">1</span>)&#123;<span class=\"keyword\">if</span>(bitmap_get(bitmap,index) == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> bitmap_set(bitmap,index,<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tindex = BKDRHash(emailstring,<span class=\"built_in\">strlen</span>(emailstring)) % MAX;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(flag == <span class=\"number\">1</span>)&#123;<span class=\"keyword\">if</span>(bitmap_get(bitmap,index) == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> bitmap_set(bitmap,index,<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tindex = SDBMHash(emailstring,<span class=\"built_in\">strlen</span>(emailstring)) % MAX;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(flag == <span class=\"number\">1</span>)&#123;<span class=\"keyword\">if</span>(bitmap_get(bitmap,index) == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> bitmap_set(bitmap,index,<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tindex = DJBHash(emailstring,<span class=\"built_in\">strlen</span>(emailstring)) % MAX;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(flag == <span class=\"number\">1</span>)&#123;<span class=\"keyword\">if</span>(bitmap_get(bitmap,index) == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> bitmap_set(bitmap,index,<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tindex = DEKHash(emailstring,<span class=\"built_in\">strlen</span>(emailstring)) % MAX;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(flag == <span class=\"number\">1</span>)&#123;<span class=\"keyword\">if</span>(bitmap_get(bitmap,index) == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> bitmap_set(bitmap,index,<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tindex = BPHash(emailstring,<span class=\"built_in\">strlen</span>(emailstring)) % MAX;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(flag == <span class=\"number\">1</span>)&#123;<span class=\"keyword\">if</span>(bitmap_get(bitmap,index) == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> bitmap_set(bitmap,index,<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tindex = FNVHash(emailstring,<span class=\"built_in\">strlen</span>(emailstring)) % MAX;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(flag == <span class=\"number\">1</span>)&#123;<span class=\"keyword\">if</span>(bitmap_get(bitmap,index) == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> bitmap_set(bitmap,index,<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tindex = APHash(emailstring,<span class=\"built_in\">strlen</span>(emailstring)) % MAX;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(flag == <span class=\"number\">1</span>)&#123;<span class=\"keyword\">if</span>(bitmap_get(bitmap,index) == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> bitmap_set(bitmap,index,<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试部分略。</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>实际操作中，Bloom Filter达到了和Trie一样的效果，且时间短，占用内存少。可见其效率。实际上，Bloom Filter已有诸多应用：</p>\n<ul>\n<li>Google 著名的分布式数据库 Bigtable 使用了布隆过滤器来查找不存在的行或列，以减少磁盘查找的IO次数。</li>\n<li>Squid 网页代理缓存服务器在 <a href=\"http://wiki.squid-cache.org/SquidFaq/CacheDigests\">cache digests</a>中使用了也布隆过滤器。</li>\n<li>Venti 文档存储系统也采用布隆过滤器来检测先前存储的数据。</li>\n<li>SPIN 模型检测器也使用布隆过滤器在大规模验证问题时跟踪可达状态空间。</li>\n<li>Google Chrome浏览器使用了布隆过滤器加速安全浏览服务。</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ol>\n<li><a href=\"http://zh.wikipedia.org/zh/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8\">维基百科：布隆过滤器</a></li>\n<li><a href=\"http://www.google.com.hk/ggblog/googlechinablog/2007/07/bloom-filter_7469.html\">数学之美二十一：布隆过滤器（Bloom Filter）</a></li>\n<li><a href=\"http://www.cnblogs.com/haippy/archive/2012/07/13/2590351.html\">布隆过滤器(Bloom Filter)详解 - Haippy - 博客园</a></li>\n<li><a href=\"http://blog.csdn.net/hguisu/article/details/7866173\">海量数据处理算法—Bloom Filter</a></li>\n<li><a href=\"http://www.cnblogs.com/heaad/archive/2011/01/02/1924195.html\">那些优雅的数据结构(1) : BloomFilter——大规模数据处理利器</a></li>\n<li><a href=\"http://blog.csdn.net/lmh12506/article/details/7575651\">Bloom Filter算法详解及实例</a></li>\n<li><a href=\"http://blog.chinaunix.net/uid-22663647-id-1771837.html\">bitmap应用及C语言实现</a></li>\n<li><a href=\"http://www.oschina.net/code/snippet_1178986_47569\">bitmap C语言实现</a></li>\n<li><a href=\"http://www.partow.net/programming/hashfunctions/\">General Purpose Hash Function Algorithms</a></li>\n</ol>\n",
            "tags": [
                "C",
                "Hash",
                "布隆过滤器",
                "字符串检索"
            ]
        }
    ]
}