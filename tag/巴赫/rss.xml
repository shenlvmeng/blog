<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Shenlvmeng&#39;s Blog • Posts by &#34;巴赫&#34; tag</title>
        <link>http://shenlvmeng.github.com/blog</link>
        <description>Be sharp, my friend.</description>
        <language>zh-CN</language>
        <pubDate>Thu, 28 Sep 2023 19:43:09 +0800</pubDate>
        <lastBuildDate>Thu, 28 Sep 2023 19:43:09 +0800</lastBuildDate>
        <category>总结</category>
        <category>制度</category>
        <category>道德</category>
        <category>文官</category>
        <category>万历</category>
        <category>明朝</category>
        <category>读书笔记</category>
        <category>展望</category>
        <category>2018</category>
        <category>2019</category>
        <category>flag</category>
        <category>2020</category>
        <category>2021</category>
        <category>2022</category>
        <category>2023</category>
        <category>面试</category>
        <category>前端</category>
        <category>FAQ</category>
        <category>HTML</category>
        <category>CSS</category>
        <category>style guide</category>
        <category>编程</category>
        <category>范式</category>
        <category>设计</category>
        <category>艺术</category>
        <category>质量</category>
        <category>async_hooks</category>
        <category>cls-hooked</category>
        <category>logId</category>
        <category>录音</category>
        <category>getUserMedia</category>
        <category>AudioContext</category>
        <category>PCM</category>
        <category>WAVE</category>
        <category>二叉搜索树</category>
        <category>算法</category>
        <category>回忆</category>
        <category>老朋友</category>
        <category>C</category>
        <category>Hash</category>
        <category>布隆过滤器</category>
        <category>字符串检索</category>
        <category>canvas</category>
        <category>流程图</category>
        <category>d3</category>
        <category>g6</category>
        <category>zrender</category>
        <category>processOn</category>
        <category>SDN</category>
        <category>cbench</category>
        <category>安装说明</category>
        <category>绘图</category>
        <category>动画</category>
        <category>攻略</category>
        <category>流水账</category>
        <category>成都</category>
        <category>重庆</category>
        <category>武汉</category>
        <category>重构</category>
        <category>代码</category>
        <category>代码风格</category>
        <category>数据可视化</category>
        <category>爬虫</category>
        <category>chrome</category>
        <category>crx</category>
        <category>扩展</category>
        <category>CORS</category>
        <category>跨域</category>
        <category>盒模型</category>
        <category>浮动</category>
        <category>Reactive Programming</category>
        <category>JavaScript</category>
        <category>Cycle.js</category>
        <category>Dart</category>
        <category>最佳实践</category>
        <category>引流</category>
        <category>universal-link</category>
        <category>app-link</category>
        <category>脚手架</category>
        <category>degit</category>
        <category>git</category>
        <category>设计模式</category>
        <category>类</category>
        <category>接口</category>
        <category>抽象类</category>
        <category>DOM</category>
        <category>Docker</category>
        <category>ONOS</category>
        <category>控制器</category>
        <category>虚拟化</category>
        <category>笔记</category>
        <category>UX</category>
        <category>UED</category>
        <category>准则</category>
        <category>Java</category>
        <category>Ruby</category>
        <category>反射</category>
        <category>编程范式</category>
        <category>鸭子类型</category>
        <category>管理</category>
        <category>效率</category>
        <category>知识工作者</category>
        <category>卓有成效</category>
        <category>Elm</category>
        <category>框架</category>
        <category>函数式编程</category>
        <category>虚网映射</category>
        <category>Javascript</category>
        <category>并发</category>
        <category>event loop</category>
        <category>覆盖率</category>
        <category>端到端测试</category>
        <category>istanbul</category>
        <category>istanbuljs</category>
        <category>JavaSript</category>
        <category>Express</category>
        <category>源码</category>
        <category>代码覆盖率</category>
        <category>istanbul-middleware</category>
        <category>代码插桩</category>
        <category>require钩子</category>
        <category>babel-plugin-istanbul</category>
        <category>css</category>
        <category>html5</category>
        <category>flex</category>
        <category>javascript</category>
        <category>roadmap</category>
        <category>闭包</category>
        <category>Haskell</category>
        <category>monad</category>
        <category>后端</category>
        <category>管理后台</category>
        <category>egg.js</category>
        <category>工作流</category>
        <category>pull request</category>
        <category>golang</category>
        <category>语言学习</category>
        <category>黑客与画家</category>
        <category>创业</category>
        <category>骑行</category>
        <category>海南</category>
        <category>图文</category>
        <category>reflow</category>
        <category>repaint</category>
        <category>命名法</category>
        <category>成功学</category>
        <category>自我建设</category>
        <category>HTTP</category>
        <category>HTTP/2</category>
        <category>SPDY</category>
        <category>QUIC</category>
        <category>HTTPS</category>
        <category>状态码</category>
        <category>网络攻击</category>
        <category>介绍</category>
        <category>图片渲染</category>
        <category>html2canvas</category>
        <category>dom-to-image</category>
        <category>electron</category>
        <category>indexedDB</category>
        <category>异步</category>
        <category>Generator</category>
        <category>thunk</category>
        <category>async</category>
        <category>函数表达式</category>
        <category>对象</category>
        <category>继承</category>
        <category>类型转换</category>
        <category>==</category>
        <category>类型判断</category>
        <category>猫</category>
        <category>杀手</category>
        <category>管理学</category>
        <category>领导力</category>
        <category>梯队</category>
        <category>移动端</category>
        <category>UI</category>
        <category>自适应</category>
        <category>rem</category>
        <category>Electron</category>
        <category>GUI</category>
        <category>gpx</category>
        <category>template</category>
        <category>Electron Builder</category>
        <category>PWA</category>
        <category>方法论</category>
        <category>夜话</category>
        <category>多线</category>
        <category>生活</category>
        <category>密码</category>
        <category>密钥</category>
        <category>技改</category>
        <category>Vue</category>
        <category>gulp</category>
        <category>瀑布流</category>
        <category>电影</category>
        <category>PHP</category>
        <category>参考</category>
        <category>思维</category>
        <category>学习能力</category>
        <category>右脑</category>
        <category>经济学</category>
        <category>宏观经济学</category>
        <category>术语</category>
        <category>GDP</category>
        <category>CPI</category>
        <category>储蓄</category>
        <category>投资</category>
        <category>金融市场</category>
        <category>股票</category>
        <category>债券</category>
        <category>美联储</category>
        <category>失业</category>
        <category>货币</category>
        <category>现值</category>
        <category>准备金</category>
        <category>货币中性</category>
        <category>通货膨胀</category>
        <category>汇率</category>
        <category>购买力</category>
        <category>净出口</category>
        <category>资产净流出</category>
        <category>总需求</category>
        <category>总供给</category>
        <category>流动性偏好</category>
        <category>乘数效应</category>
        <category>菲利普斯曲线</category>
        <category>微观经济学</category>
        <category>供求</category>
        <category>贸易</category>
        <category>市场</category>
        <category>税</category>
        <category>剩余</category>
        <category>外部性</category>
        <category>公共物品</category>
        <category>公共资源</category>
        <category>生产成本</category>
        <category>利润</category>
        <category>垄断</category>
        <category>价格歧视</category>
        <category>寡头</category>
        <category>垄断竞争</category>
        <category>生产要素市场</category>
        <category>贫困</category>
        <category>消费者选择理论</category>
        <category>不对称信息</category>
        <category>政治经济学</category>
        <category>行为经济学</category>
        <category>VSCode</category>
        <category>编辑器</category>
        <category>IDE</category>
        <category>hybrid</category>
        <category>JSBridge</category>
        <category>Web Worker</category>
        <category>Service Worker</category>
        <category>习惯</category>
        <category>lint</category>
        <category>editorconfig</category>
        <category>commit message</category>
        <category>量子物理</category>
        <category>史话</category>
        <category>埋点</category>
        <category>raven.js</category>
        <category>前端监控</category>
        <category>文本编辑器</category>
        <category>quill</category>
        <category>结构化数据</category>
        <category>React</category>
        <category>Hooks</category>
        <category>函数组件</category>
        <category>复用</category>
        <category>状态管理</category>
        <category>redux</category>
        <category>MobX</category>
        <category>代码质量</category>
        <category>重来</category>
        <category>requestAnimationFrame</category>
        <category>TypeScript</category>
        <category>路书</category>
        <category>gpx解析</category>
        <category>EXIF</category>
        <category>人类</category>
        <category>生存</category>
        <category>基因</category>
        <category>响应式编程</category>
        <category>RxJS</category>
        <category>成长</category>
        <category>业务</category>
        <category>思想</category>
        <category>程序设计</category>
        <category>心理学</category>
        <category>自我</category>
        <category>社会思维</category>
        <category>社会影响</category>
        <category>文化</category>
        <category>性别</category>
        <category>从众</category>
        <category>说服</category>
        <category>临床诊断</category>
        <category>陪审团</category>
        <category>司法</category>
        <category>物质主义</category>
        <category>健康</category>
        <category>社会关系</category>
        <category>偏见</category>
        <category>攻击行为</category>
        <category>亲密关系</category>
        <category>友谊</category>
        <category>爱情</category>
        <category>利他</category>
        <category>冲突</category>
        <category>和解</category>
        <category>软技能</category>
        <category>理财</category>
        <category>健身</category>
        <category>自我营销</category>
        <category>学习</category>
        <category>商业模式</category>
        <category>产品</category>
        <category>校园网</category>
        <category>互联网</category>
        <category>技术</category>
        <category>web开发</category>
        <category>哲思</category>
        <category>择偶观</category>
        <category>validator</category>
        <category>大文件</category>
        <category>visibilityChange</category>
        <category>IntersectionObserver</category>
        <category>图种</category>
        <category>draggable</category>
        <category>webpack</category>
        <category>z-index</category>
        <category>git submodule</category>
        <category>object-fit</category>
        <category>object-position</category>
        <category>BroadcastChannel</category>
        <category>extract-text-webpack-plugin</category>
        <category>lottie</category>
        <category>backface-visibility</category>
        <category>egret</category>
        <category>mock</category>
        <category>SSO</category>
        <category>autoprefixer</category>
        <category>polyfill</category>
        <category>Android</category>
        <category>ffmpeg</category>
        <category>React Hooks</category>
        <category>rollup</category>
        <category>CDN</category>
        <category>DNS</category>
        <category>CNAME</category>
        <category>架构</category>
        <category>组件</category>
        <category>ssh</category>
        <category>fis-receiver</category>
        <category>tmux</category>
        <category>origami</category>
        <category>promise</category>
        <category>encodeURI</category>
        <category>encodeURIComponent</category>
        <category>axios</category>
        <category>charles</category>
        <category>黑色幽默</category>
        <category>朋友</category>
        <category>梦</category>
        <category>濒死</category>
        <category>江南</category>
        <category>苏州</category>
        <category>无锡</category>
        <category>宜兴</category>
        <category>湖州</category>
        <category>南浔</category>
        <category>游记</category>
        <category>随笔</category>
        <category>群众</category>
        <category>理论</category>
        <category>实效</category>
        <category>测试</category>
        <category>长沙</category>
        <category>杭州</category>
        <category>湖南</category>
        <category>核酸</category>
        <category>美食</category>
        <category>云南</category>
        <category>丽江</category>
        <category>大理</category>
        <category>青岛</category>
        <category>济南</category>
        <category>山东</category>
        <category>西北</category>
        <category>银川</category>
        <category>西宁</category>
        <category>青海湖</category>
        <category>西海镇</category>
        <category>茶卡盐湖</category>
        <category>厦门</category>
        <category>感受</category>
        <category>C语言</category>
        <category>树</category>
        <category>主干开发</category>
        <category>GitFlow</category>
        <category>GithubFlow</category>
        <category>typescript</category>
        <category>类型系统</category>
        <category>webrtc</category>
        <category>RTMP</category>
        <category>首屏时间</category>
        <category>性能优化</category>
        <category>公司</category>
        <category>个人发展</category>
        <category>战略</category>
        <category>晋升</category>
        <category>哲学</category>
        <category>幸福</category>
        <category>人生</category>
        <category>叔本华</category>
        <category>Unix</category>
        <category>Rollup</category>
        <category>mouseout</category>
        <category>mouseleave</category>
        <category>lint-staged</category>
        <category>吸顶</category>
        <category>图片组件</category>
        <category>形式系统</category>
        <category>不完全性</category>
        <category>隐喻</category>
        <category>哥德尔</category>
        <category>巴赫</category>
        <category>埃舍尔</category>
        <category>济州</category>
        <category>西归浦</category>
        <category>城山</category>
        <category>咸德</category>
        <category>人工智能</category>
        <category>心智</category>
        <category>自指</category>
        <category>图灵</category>
        <category>马列主义</category>
        <category>恩格斯</category>
        <category>家庭</category>
        <category>国家</category>
        <category>阶级</category>
        <category>氏族</category>
        <category>哲学史</category>
        <category>孔子</category>
        <category>老子</category>
        <category>儒家</category>
        <category>道家</category>
        <category>佛教</category>
        <category>禅宗</category>
        <category>理学</category>
        <category>心学</category>
        <category>计算机</category>
        <category>微机原理</category>
        <category>门</category>
        <category>操作系统</category>
        <category>数字电路</category>
        <category>2024</category>
        <category>政府</category>
        <category>经济</category>
        <category>消费</category>
        <category>土地金融</category>
        <category>饮食</category>
        <category>蛋白质</category>
        <category>碳水</category>
        <category>慢性病</category>
        <category>三高</category>
        <category>肿瘤</category>
        <item>
            <guid isPermalink="true">http://shenlvmeng.github.com/blog/2023/09/28/g-e-b-2/</guid>
            <title>GEB —— 集异璧之大成 下</title>
            <link>http://shenlvmeng.github.com/blog/2023/09/28/g-e-b-2/</link>
            <category>基因</category>
            <category>隐喻</category>
            <category>哥德尔</category>
            <category>巴赫</category>
            <category>埃舍尔</category>
            <category>人工智能</category>
            <category>心智</category>
            <category>自指</category>
            <category>图灵</category>
            <pubDate>Thu, 28 Sep 2023 19:43:09 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;下半部分对人工智能、计算机的探讨和前半部分有相通之处。&lt;/p&gt;
&lt;h2 id=&#34;描述的层次和计算机系统&#34;&gt;描述的层次和计算机系统&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;描述、组块化、旁效现象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上半部分对WJ谜题的讨论以及对哥德尔、巴赫的赏析中，就出现过不同的层次，日常中&lt;strong&gt;描述是有层次的&lt;/strong&gt;。人由几十万亿个细胞组成，但日常行为却根本没法描述到每个细胞的层级。人工智能里也有和层次相关的追求，即如何构造一个系统，接收一个层次的描述，去生成另一个层级的描述。关于这方面的研究很久前就开始了，荷兰心理学家阿德里安·德·格鲁特发现大师对于棋局的感知是&lt;strong&gt;组块化的&lt;/strong&gt;。他感知的是整个棋局的战略态势（很类似《程序员思维修炼》里的&lt;a
href=&#34;https://shenlvmeng.github.io/blog/2020/05/31/pragmatic-thinking-and-learning/#%E6%91%98%E5%BD%95-2&#34;&gt;R型思维&lt;/a&gt;）。大师在对局期间，会识别棋局的&lt;strong&gt;模式&lt;/strong&gt;，对庞大可能性的树状结构做修剪。从而嗅出更大获胜可能的选择，这种直觉是涌现的。&lt;/p&gt;
&lt;p&gt;计算机系统其实很类似，也有层次的概念。庞大复杂的计算机系统也是基于模块化思路一层层构成的。从最底层的存储器、CPU、字，到有限的机器指令、机器语言，再到编译语言、解释语言、算法，层次一点点提高。运行着的程序也有着上面每个层面上的描述，层次越靠下，需要的描述就越多。计算机为了减少用户的负担，掩盖了绝大多数的低层的复杂度，只暴露最高的几个层次。其他系统也是如此，飞机的乘客并不需要知道当前的风速、油箱还有多少燃料。&lt;/p&gt;
&lt;p&gt;计算机这些年的发展里，涌现出更多的高级语言，向人工智能做着努力；不过&lt;strong&gt;计算机的全部潜能已经存在于它所有的机器指令集中&lt;/strong&gt;，指令集就是它的原子能力集合。每种高层次语言都使用着“能力空间”里的不同区域，语言并没有强迫程序员编写某类特定程序，但为他做某些事提供了便利。用不同的语言编程，就像使用不同的调式编曲，每种调式都有自己的感情色彩。人工智能要求的计算机层级可能比我们想象的还多不少。&lt;/p&gt;
&lt;p&gt;软件和硬件也是不同层级的一种表达，就像脑细胞是硬件，想象是软件，我们无法使我们的神经元更快或者更慢些，或控制它们重连。但我们仍然可以控制自己的思维方式。软件是无法超越硬件存在的，我们自己也能意识到。本书意在两者间需要一些调和途径。&lt;/p&gt;
&lt;p&gt;在低层和高层间还有一些中间层次，就像空气分子和气候间还有局部风暴这种描述。我们日常感知的这样的中间层次可能也只是高层的一部分。从最底层的夸克向上，原子物理学家有原子核的图景，化学家有通过电子构成的小分子图景，分子生物学家又可以构成大分子相互作用领域，细胞生物学家基于大分子组块化说明细胞的作用方式。科学间临近的层次间可能没那么“隔离”，不过两个相距较远的层次就没有太大关系了。人们相互沟通交往，可不需要了解夸克、原子理论、化学键、蛋白质、细胞、器官生理学等知识。当然，这种组块化&lt;strong&gt;牺牲了确定性来获得简单性&lt;/strong&gt;。让我们可以&lt;strong&gt;或然地估计&lt;/strong&gt;他人的感觉。一般来说也够用了。这种掩盖了复杂性的高层组块化描述，让低层像是黑盒。你甚至根本不知道低层做了什么。不过还好，稳定的低层子系统可以得出“可靠地”独立于自身系统的结论。这种结论是无法用低层词汇表描述的。&lt;/p&gt;
&lt;p&gt;本章最后抛出来一个“旁效现象”的说法，一个高层系统从不同的角度看有很多的“旁效现象”，这些现象往往是系统内各个层次成千上万因素相互作用的结果，不可能从某个低层找到一个答案。就像一个短跑运动员100米成绩10秒5，不代表身体的某处存着这个数字；一个人上当受骗也不代表他大脑某处有个“上当中枢”。&lt;/p&gt;
&lt;h3 id=&#34;蚂蚁赋格&#34;&gt;蚂蚁赋格&lt;/h3&gt;
&lt;p&gt;这篇很长的小品，借食蚁兽、螃蟹、阿基里斯围绕蚂蚁群体和个体关系的讨论，类比人的心智，借由符号、信号等概念，给读者心智模型的感性印象。在意识系统中，我们只能从符号层次感受自己，而无法在更低的层次感受到意识。要理解整个结构，就需要忽略组成结构的基本单元。&lt;/p&gt;
&lt;h2 id=&#34;大脑和思维&#34;&gt;大脑和思维&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;符号、信号、过程性知识、描述性知识&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本章对人类大脑的思维的运行方式做了艰深难懂的探讨，首先，&lt;strong&gt;人的思维一定是依赖于大脑硬件中的客观存在的&lt;/strong&gt;，而且我们也能发现特定的记忆也是和局部区域的功能相关的。然而从神经元的底层生物反应到高层思维间的领域，却没人能说得清楚。以视觉为例，视觉细胞可以分为三层：简单的、复杂的、超复杂的。我们看到祖母出现在眼前当然也不会是有一个“祖母细胞”在发挥作用。不过正如刚才所说，没有人知道复杂细胞和超复杂细胞的输出在哪里或如何转换成对祖母形状、位置、图形、面容这些有意义的识别。&lt;/p&gt;
&lt;p&gt;视觉的形成会有一个汇集的过程，在光线射在视网膜上时，你可以感觉到有什么东西在脑海中&lt;strong&gt;结晶&lt;/strong&gt;了，这个过程是在视网膜作用的稍迟一些。为了更好描述思维过程，书里用“符号”这种抽象概念掩盖了底层神经元的作用过程。这里的&lt;strong&gt;符号&lt;/strong&gt;比较像是日常生活中可以用一个词或者一个固定短语描述出来的事物。&lt;/p&gt;
&lt;p&gt;在人的思维里，也有&lt;strong&gt;类&lt;/strong&gt;和&lt;strong&gt;例&lt;/strong&gt;的区分，思维善于从已有的类中制造新的例，如听到“乒乓球运动员张三”时，脑海里会想象出运动员的形象和乒乓球的场景，这也是人类想象力的基础，让人可以创造自己的人工宇宙；另外，思维也可以将一个实例作为一个新生类的范例，在补充更多的上下文和真实世界有更多相互作用后，从这个例（孩童状态）中创造新的类（成人状态），如听到“乒乓球运动员张三”的声音，知道他的历史成绩，看了他的比赛，甚至有了他的签名。之后，“张三”脱胎成为新的类。思维中激活张三便不需要其他类的帮助。在昆虫的世界里，书中以黄蜂为例，可能只有孤立的例，而没有类存在。&lt;/p&gt;
&lt;p&gt;在符号的激活通讯上，符号在大脑神经元中的存储可能是重叠而并非独立的，激活通讯同时在许多神经元上发生，就像水波可以同时承载多个波源一样。符号的唤醒也是交织在一起同时又能彼此区分的。单个符号并不能被隔离出来，它的个性体现在和其他符号的彼此联系上。我们目前没法用更精确的语言去描述这种彼此联系，而这种可以基于抽象符号描述的思维方式，是思维软件性的证明，也是智能“可抽取性”的基础。因为符号本身是可以做到移植性的。&lt;/p&gt;
&lt;p&gt;在人工智能的研究里，有过程性知识和描述性知识两种区分，前者是显式贮存地址读取的，后者是演绎式的。举个例子，“广州市有多少人”的问题会触发你读取知识点答出；而“房间里有多少人”则会触发你一个过程化方法被调用。我们日常感知的物理学和其他学科常识通常是过程性的，而有些问题则在这两种类型之间，如“唱一首生日快乐歌”。&lt;/p&gt;
&lt;h3 id=&#34;英法德中组曲&#34;&gt;英法德中组曲&lt;/h3&gt;
&lt;p&gt;小品中的诗中掺杂了很多自创字和短语，为下文介绍思维中的映射准备了例子。&lt;/p&gt;
&lt;h2 id=&#34;心智和思维&#34;&gt;心智和思维&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;自想国、自我意识、子系统&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上一章中，对大脑和思维用符号进行了模拟化的描述。不同大脑间存在着一些重构，即对于可选符号的对应和符号触发模式的对应。书中以上篇小品的翻译为例，自创字的含义会通过其偏旁去猜测其意思，在英法德的翻译中也有类似的猜测。而这种猜测也意味着不同国家的读者在读这篇小品的过程中，大脑里也有粗略的同构。&lt;/p&gt;
&lt;p&gt;在之后，作者又用自想国为例，描述了一个事实——你所想象出的地图轮廓或多或少来自真实世界的地图（这里暗示人无法想象出没有经历过的东西）。以自想国作比喻，作者用意有双关。除了上面提到的引申之外，也借由自想国中的都市、城镇和公路类比思维中的符号和触发通路。人在自想国中旅游也是因为，当外界环境类似时，类似的触发通路也会触发同样的符号。当然，不同的人身上也会存在细微的差别。&lt;/p&gt;
&lt;p&gt;之后，书中话锋一转，开始讨论语言文化对母语者思维的影响。之后聊到在翻译外文作品的时候，保留文字原意意味着不完全忠于原文的本土化改造。就像本书尤其这几节所做的一样。作者借由威佛尔对翻译的理解，认为翻译应该像是解码文字中描述的客观意义，而不只是做字面的转译。在程序语言领域，不同语言写成的程序，可以在高层次上抽象出“概念骨架”。那么大脑可以这么做么？&lt;/p&gt;
&lt;p&gt;作者认为可以，因为我们可以用组块化去描述我们的意识活动，即虽然对于一个给定的符号，可能存在不止一条合理的触发通道，但在特定环境下，只会选择其中一条。人类往往是矛盾的混合体，在统一起来后，在某个特定时刻只表现出其中一个方面。&lt;/p&gt;
&lt;p&gt;上面的讨论和上一章可以说别无二致，但聊到&lt;strong&gt;自我意识&lt;/strong&gt;后，问题复杂了起来。人们是如何觉察到符号的触发过程，即自我意识呢？这是个自指的过程。作者认为意识是系统的一种性质，每当系统有触发模式的符号时，这种性质就会出现。这个描述很显然过于简单。之后文中提出&lt;strong&gt;子系统&lt;/strong&gt;的概念试图解释，子系统是过度生长的符号，可以翻译一种思维模式，从而可以自己产生符号。子系统不仅可以体现自我意识，和可以借助自己的符号去&lt;strong&gt;尽量模拟&lt;/strong&gt;他人的意识，有点像换位思考。这样的子系统一旦触发，几乎是自主的，就像有灵魂一样。不过我认为这段描述仍不够，解释不了这样的子系统是如何自生产符号的，以及它无限递归地意识到它自己存在时，符号和触发链路是如何工作的。&lt;/p&gt;
&lt;p&gt;本章最后用稍显明晰的卢卡斯文章材料收尾，文章里也提到，意识物可以无限递归地认识到它认识到什么事物，更关键的是，在思想无限进行下去的同时它还能自我运作起来。这意味着它能处理哥德尔式的自指问题，而机器却不行。也许机器的复杂度存在&lt;strong&gt;临界点&lt;/strong&gt;，就像核裂变一样。超出这个临界点，机器就可以形成心智，而我们无法预测它将如何运转。对于这种可以回答哥德尔式问题的东西，我们也许已不能用机器去叫它们。&lt;/p&gt;
&lt;h3 id=&#34;咏叹调及其种种变奏&#34;&gt;咏叹调及其种种变奏&lt;/h3&gt;
&lt;p&gt;这篇小品从巴赫创作哥德堡变奏曲的年份1742年引入了哥德巴赫猜想和乌龟猜想，讨论了命题证明中判定的有限和无限两种情况。Cantor在小品前后的前后呼应，以及金币被偷的前后呼应也很有趣。其中Cantor作为数学家名字出现在皮包上多个数学家名字的对角线里也是很绝。&lt;/p&gt;
&lt;h2 id=&#34;bloop和floop和gloop&#34;&gt;BlooP和FlooP和GlooP&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;算法、对角线法、停机问题、丘奇-图灵论题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在两章对于人类意识的讨论后，又回到对于递归可验证和计算机算法的探讨。从TNT中我们可以发现，一个&lt;strong&gt;充分复杂到可以反映自身的有序系统是不可能有序的&lt;/strong&gt;。换句话说，一个足够强力到可以验证“全部原始递归真理”的系统总会遇到一个它无法验证的命题。&lt;/p&gt;
&lt;p&gt;接着，书里带着探索事件背后规律的想法继续展开。为了讨论自然数，接着把&lt;strong&gt;数论和计算机算法关联起来&lt;/strong&gt;，首先BlooP（Bounded
loop）语言被发明出来，它的控制结构包含分支、&lt;strong&gt;有界&lt;/strong&gt;循环（for
loop），以及退出循环的QUIT、退出过程的ABORT。这样写出的BlooP过程（procedure）即BlooP函数，另外我们约定接受一个唯一的参数N且输出YES或NO的BlooP函数被称为&lt;strong&gt;测试&lt;/strong&gt;，它可以用来验证一些命题。像计算机编程里一样，之前定义过的每个BlooP过程都可以直接被拿来当做一个组块（模块化）。&lt;/p&gt;
&lt;p&gt;在这样的BlooP语言里，我们可以写一个定义质数的BlooP测试PRIME?，伪代码像下面这样&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;DEFINE PROCEDURE&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;PRIME?&amp;quot;[N]:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;BLOCK 0:BEGIN&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  IF N=0,THEN:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  QUIT BLOCK 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  CELL(0)&amp;lt;-2 # 把CELL(0)置为2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  LOOP AT MOST MINUS[N,2] TIMES:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  BLOCK 1:BEGIN&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    IF REMAINDER[N, CELL(0)]=0,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    THEN:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    QUIT BLOCK 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CELL(0)&amp;lt;-CELL(0)+1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  BLOCK 1:END;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  OUTPUT&amp;lt;-YES;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;BLOCK 0:END.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以用BlooP定义出来的过程都可以预知终止结果，这样的函数叫做&lt;strong&gt;原始递归函数&lt;/strong&gt;，而可以这么验证的性质被称为&lt;strong&gt;原始递归谓词&lt;/strong&gt;。哥德巴赫猜想也可以很轻松写出一个BlooP测试，另一方面，也可以用BlooP函数写一些计算自然数的功能，如阶乘、求余数、斐波那契数列，甚至是用哥德尔配数法表示的定理。&lt;/p&gt;
&lt;p&gt;在讨论FlooP之前，有必要再次赘述下&lt;strong&gt;可表示性&lt;/strong&gt;和&lt;strong&gt;可表现性&lt;/strong&gt;，前者是指能否将一个自然语言的性质形式化表述出来，比如可以轻易用TNT串表示出，一个数b具有“乌龟性质”（作者在上节小品里提的哥德巴赫猜想的2-1=1版本）。但是可表现性意味着，该谓词的全部为真的实例皆为定理，全部为假的实例均为非定理。这也是TNT作为一个公理系统到底有多强力的体现。虽然这种完全性在后面将被发现不存在，但TNT对于&lt;strong&gt;原始递归谓词&lt;/strong&gt;来说还是完全的，即如果数论中某个陈述的真假可以在可预知时间段内判定，那在TNT中一定也是可判定的。&lt;/p&gt;
&lt;p&gt;那么存在非原始递归么？我们可以设想一个存放所有BlooP程序的库，&lt;strong&gt;B库&lt;/strong&gt;。它必然是无穷大的。之后，我们在库里筛选出满足下面条件的过程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只接受1个参数&lt;/li&gt;
&lt;li&gt;返回数字&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;之后将筛选过后的特殊程序称作蓝程序（Bloo发音近似blue，P指代Program），由于蓝程序由有限的字符集组成，我们可以按照程序代码在ASCII码中的字典序来排列，这样每一个蓝程序都可以有一个唯一的索引编号。从而用&lt;code&gt;蓝程序&amp;#123;k&amp;#125;[N]&lt;/code&gt;来表示第k个蓝程序。&lt;/p&gt;
&lt;p&gt;之后用康托尔使用的&lt;strong&gt;对角线法&lt;/strong&gt;，可以制造一些不能在BlooP中编程的函数。我们不妨称之为蓝对角，定义如下：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;蓝对角[N] = 1 + 蓝程序&amp;#123;#N&amp;#125;[N]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样的蓝对角不能存在于蓝程序中，因为假如存在，它一定有一个编号，假设为X。那么根据蓝程序的定义&lt;code&gt;蓝对角[N] = 蓝程序&amp;#123;X&amp;#125;[N]&lt;/code&gt;，代入X可以得到&lt;code&gt;蓝对角[X] = 蓝程序&amp;#123;X&amp;#125;[X]&lt;/code&gt;；同时根据蓝对角的定义，代入X可以得到&lt;code&gt;蓝对角[X] = 1 + 蓝程序&amp;#123;X&amp;#125;[X]&lt;/code&gt;，两者相互矛盾。从而意味着一定存在&lt;strong&gt;非原始递归函数&lt;/strong&gt;，映射到数论中，一定存在某个数论中的函数没法在可预测的步数内被算出来。实际上，对于每个给定的N，蓝对角可以转化到蓝程序从而步数可预测，但每个N的步数预测不能结合成一个朴实的方法去预测&lt;code&gt;蓝对角[N]&lt;/code&gt;的计算步数。&lt;/p&gt;
&lt;p&gt;对角线论证源于康托尔论证如果建立一个实数登记表，那么会不可避免的排除一些实数。论证过程上，构造了一个这样的表然后按&lt;strong&gt;对角线的形式&lt;/strong&gt;取第n行第n列，之后将每个数都减1，这样得到的数总有一位和每一行都不一样，从而排除于表之外。这个证明过程实质上用了&lt;strong&gt;两种方式使用了同一个整数&lt;/strong&gt;（横向和纵向索引），在蓝对角里也是如此（程序索引序号和输入参数）。&lt;/p&gt;
&lt;p&gt;看到了BlooP的局限性，我们可以发明一个FlooP（Free
Loop）语言。它的μ算子可以包括一个无穷的循环。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;MU-LOOP&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;BLOCK n:BEGIN&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;BLOCK n:END&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;假设用它来验证妙极性（角谷猜想最后的1-4-2-1-4-2循环），那么，如果输入的N是妙极的，那么程序会返回YES，如果是非妙极的，那么要么程序返回非1-4-2的循环，要么干脆没有返回永不停歇。后面这种情况就是个&lt;strong&gt;无终止过程&lt;/strong&gt;。对于FlooP多出来的无终止过程，可以和有终止过程分成两类。那么对于每个FlooP程序，我们是否可以通过一个复杂的&lt;strong&gt;有终止过程&lt;/strong&gt;的检测可以得到它是否无终止过程呢？如果存在这种检测，我们就可以通过它的返回验证妙极性和乌龟猜想了。&lt;/p&gt;
&lt;p&gt;首先我们需要改造BlooP，让它可以接受程序而非数字。哥德尔配数可以帮我们完成。将程序的字符映射成数字即可。阿兰·图灵使用对角线法类似的思路（往这种终止检验程序中输入它自己的哥德尔数）证明不存在这样的BlooP函数。书中用另外的方法做了证明。&lt;/p&gt;
&lt;p&gt;类似蓝对角，我们构造同样的&lt;strong&gt;绿对角&lt;/strong&gt;（绿灯和free对应）：&lt;code&gt;绿对角[N]=1+绿程序&amp;#123;N&amp;#125;[N]&lt;/code&gt;。现在问题来了，由于F库中还存在无终止过程，我们需要把它们剔除。刚才提到的“终止检测器”可以帮我们实现，经过它的过滤得到的绿程序我们可以叫做红程序（总会遇到红灯停下）。之后红对角会面临和蓝对角一样的困境。&lt;/p&gt;
&lt;p&gt;要么我们用GlooP表示一个比FlooP更强大的存在，要么接受不存在这样的终止检测器。但实际上，我们现在的计算机语言只能做到FlooP的地步。阿兰·图灵和阿朗佐·丘奇定理独立论证了不存在这样的GlooP：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;人能计算的就是机器能计算的&lt;/li&gt;
&lt;li&gt;机器能计算的就是FlooP能计算的&lt;/li&gt;
&lt;li&gt;人能计算的也就是FlooP能计算的&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;g弦上的咏叹调&#34;&gt;G弦上的咏叹调&lt;/h3&gt;
&lt;p&gt;小品里对使用-引用做了讨论，提出了自引用的说法，如“‘放在其引文形式后面得到假句子’放在其引文形式后面得到假句子”。&lt;/p&gt;
&lt;h2
id=&#34;论tnt及有关系统中形式不可判定的命题&#34;&gt;论TNT及有关系统中形式不可判定的命题&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;证明对、㧟摁、算术㧟摁、哥德尔第二定理、ω不完全性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在上面的小品引导下，本章逐步用自引用和反例构成悖论，体现TNT的ω不完全性。首先，在前面的章节里能看到，通过&lt;strong&gt;哥德尔配数法&lt;/strong&gt;，TNT有自省能力，即可以表述自身。再结合上一章中的&lt;strong&gt;对角线方法&lt;/strong&gt;，两个关键概念已经集齐。&lt;/p&gt;
&lt;p&gt;为了制造自我指涉，首先引入&lt;strong&gt;证明对&lt;/strong&gt;的概念——&lt;strong&gt;两个自然数（m和n）形成一个证明对，当且仅当m是TNT推导的哥德尔数，n是推导最后一行（即结论）的哥德尔数&lt;/strong&gt;。例如：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;WJ&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;WJJ&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;WJJJJ&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;WUJ&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;从而m=3131131111301和n=301时构成证明对。TNT也是一个道理。要证明一对mn是证明对是很简单的，观察m代表的推导过程有无问题，以及n是不是最后一行的结论。从而&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“是证明对”这个性质是原始递归的，即可以用一个BlooP程序测试；进一步地，&lt;strong&gt;可以被一个有两个自由变元的公式在TNT中体现&lt;/strong&gt;（这一步很关键）&lt;/li&gt;
&lt;li&gt;要断定n是一个&lt;strong&gt;定理数&lt;/strong&gt;，就是要找到一个m和n构成证明对&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面提到的BlooP测试程序写成TNT的形式，用WJU系统可以叫做&lt;code&gt;WJU-PROOF-PAIR&amp;#123;a,a&#39;&amp;#125;&lt;/code&gt;，自由变元&lt;code&gt;a&lt;/code&gt;和&lt;code&gt;a&#39;&lt;/code&gt;可以接受2个WJU形式系统的哥德尔数，检测它们是否构成证明对。同样的，在TNT系统里叫做&lt;code&gt;TNT-PROOF-PAIR&amp;#123;a,a&#39;&amp;#125;&lt;/code&gt;。假设我们要表示&lt;code&gt;0=0&lt;/code&gt;是TNT定理，那么TNT公式可以写成&lt;span
class=&#34;math inline&#34;&gt;\(∃a:TNT-PROOF-PAIR\{a,
SSS...SSS0/a&amp;#39;\}\)&lt;/span&gt;，其中有a’的值666,111,666（&lt;code&gt;0=0&lt;/code&gt;）个S。OK，目前为止，我们已经将是TNT定理数&lt;strong&gt;表示&lt;/strong&gt;出来了&lt;/p&gt;
&lt;p&gt;&lt;span
class=&#34;math display&#34;&gt;\[∃a:TNT-PROOF-PAIR\{a,a&amp;#39;\}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;但并未担保这个性质原始递归。之后，让我们将&lt;strong&gt;代入&lt;/strong&gt;引入到哥德尔数里，代入即将所有自由变元都用数字替换。同样的，哥德尔数表示后也可以做这个替换，例如将&lt;span
class=&#34;math inline&#34;&gt;\(a=a\)&lt;/span&gt;替换为&lt;span
class=&#34;math inline&#34;&gt;\(SS0=SS0\)&lt;/span&gt;，对应的哥德尔数就从262,111,262替换为123,123,666,111,123,123,666。容易看到这个&lt;code&gt;哥德尔数&amp;lt;-&amp;gt;插入的具体数字&amp;lt;-&amp;gt;结果哥德尔数&lt;/code&gt;的关系是&lt;strong&gt;原始递归&lt;/strong&gt;的，即可以写一个BlooP测试，验证给的3个数字是否满足这个关系（都翻译回TNT表示，再观察即可）。从而，可以用一个有三个自由变元的TNT公式来体现。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[SUB\{a,a&amp;#39;,a&amp;#39;&amp;#39;\}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;将满足上面关系的3个数代入公式，就可以得到一个TNT定理。例如&lt;span
class=&#34;math inline&#34;&gt;\(SUB\{SSS...SSS0/a,SS0/a&amp;#39;,SSS...SSS0/a&amp;#39;&amp;#39;\}\)&lt;/span&gt;，其中第一个参数有262,111,262个S，第三参数有123,123,666,111,123,123,666个S。&lt;/p&gt;
&lt;p&gt;接下来引入“&lt;strong&gt;算术㧟摁&lt;/strong&gt;”（自引用）的概念，试图把&lt;code&gt;TNT-PROOF-PAIR&lt;/code&gt;和&lt;code&gt;SUB&lt;/code&gt;合成一个单一的TNT句子。我们定义将&lt;strong&gt;公式自身的哥德尔数代入公式&lt;/strong&gt;称为㧟摁，得到一种谈论自身的公式的感觉。首先需要一个至少一个自由变元的公式如&lt;span
class=&#34;math inline&#34;&gt;\(a=S0\)&lt;/span&gt;，接入代入它的哥德尔数262,111,123,666得到&lt;span
class=&#34;math inline&#34;&gt;\(SSS...SSS(262,111,123,666个S)0=S0\)&lt;/span&gt;。既然是代入，&lt;strong&gt;算术㧟摁&lt;/strong&gt;就可以用&lt;span
class=&#34;math inline&#34;&gt;\(SUB\{a&amp;#39;&amp;#39;,a&amp;#39;&amp;#39;,a&amp;#39;\}\)&lt;/span&gt;来表示，里面前两个参数是相同的，可以观察到对角线法的影子，这里数&lt;code&gt;a&#39;&#39;&lt;/code&gt;既作为公式的哥德尔数，又作为代入的数字。为了便于使用，我们简记为&lt;/p&gt;
&lt;p&gt;&lt;span
class=&#34;math display&#34;&gt;\[ARITHMOQUINE\{a&amp;#39;&amp;#39;,a\}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;用汉语说就是，&lt;code&gt;a&#39;&lt;/code&gt;是哥德尔数为&lt;code&gt;a&#39;&#39;&lt;/code&gt;的公式做算术㧟摁（即代入&lt;code&gt;a&#39;&#39;&lt;/code&gt;）所得公式的哥德尔数，换句话说，&lt;strong&gt;a&#39;是a&#39;&#39;的算术㧟摁化&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;现在为止，两个组件都有了。现在给出那个&lt;strong&gt;㧟摁一个提及㧟摁的句子&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;span
class=&#34;math display&#34;&gt;\[~∃a:∃a&amp;#39;:&amp;lt;TNT-PROOF-PAIR\{a,a&amp;#39;\}&amp;gt;∧ARITHMOQUINE&amp;lt;a&amp;#39;&amp;#39;,a&amp;#39;&amp;gt;\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这个符号串当然有一个哥德尔数，叫它&lt;code&gt;u&lt;/code&gt;吧。我们现在要㧟摁这个符号串，即把唯一的自由变元&lt;code&gt;a&#39;&#39;&lt;/code&gt;替换成u。得到&lt;span
class=&#34;math inline&#34;&gt;\(~∃a:∃a&amp;#39;:&amp;lt;TNT-PROOF-PAIR\{a,a&amp;#39;\}&amp;gt;∧ARITHMOQUINE&amp;lt;SSS...SSS(u个S)/a&amp;#39;&amp;#39;,a&amp;#39;&amp;gt;\)&lt;/span&gt;。考虑到它和哥德尔的用法接近，我们叫它&lt;code&gt;G&lt;/code&gt;。好的，现在问题来了&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;G的哥德尔数是什么？&lt;/li&gt;
&lt;li&gt;G怎么解释？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;首先，既然G是对原符号串的㧟摁化，那么&lt;strong&gt;G的哥德尔数自然是u的算术㧟摁化&lt;/strong&gt;。好，看第二个问题，从字面意义翻译可以得到“不存在数a和a’使得（1）它们形成TNT证明对，同时（2）a&#39;是u的算术㧟摁化”。根据刚才的加粗，G的哥德尔数就是u的算术㧟摁化。那么肯定是a出了问题。现在可以简化翻译成“没有一个数a能与u的算术㧟摁化形成TNT证明对”，换句话说，“以u的算术㧟摁化为哥德尔数的&lt;strong&gt;公式G不是TNT定理&lt;/strong&gt;”。那么这句话本身是谁呢？就是&lt;code&gt;G&lt;/code&gt;。因此，我们可以得到最终翻译：&lt;/p&gt;
&lt;p&gt;“G不是TNT定理”（G是这句话本身）&lt;/p&gt;
&lt;p&gt;我们构造出了一个TNT元语言句子。这句看着就有悖论意味的话可以很容易找到矛盾。如果G这句话是定理，那么G就是TNT中的真理，这和G在说的矛盾。如果G不是定理，那么就存在一个不是TNT定理的真理，也有矛盾。这个定理在TNT系统中&lt;strong&gt;无法判断真假&lt;/strong&gt;。上面这段过程用TNT和数论的语言结合自引用的思路构造出了悖论。&lt;/p&gt;
&lt;p&gt;哥德尔在论文中，对于在可以“自我反映的元数学”中证明TNT的一致性做了探讨。但最终通过类似上面的构造证明只要TNT一致——用TNT符号写出的一致性语句不是个TNT定理。可见纵然TNT在&lt;strong&gt;表示&lt;/strong&gt;事物时，反省能力很强，但要&lt;strong&gt;证明&lt;/strong&gt;这些事物，反省能力就比较差了。&lt;/p&gt;
&lt;p&gt;本书在第8章第一次介绍印符数论的的时候提到过ω不完全性，即无法从特例到规律。上面找到的G就是一个例子。将里面a&#39;&#39;替换成每个具体的数，都可以验证为真，但对G就无法判断。可以用第8章的方法，人为定义G的真假，来朝非欧几何一样的方向发展，但无论怎么加都会和我们对自然数的认识抵触。书里发明了超自然数和广义自然数的概念来解释，它们和自然数的性质没什么区别，但可以兼容&lt;span
class=&#34;math inline&#34;&gt;\(G\)&lt;/span&gt;或者&lt;span
class=&#34;math inline&#34;&gt;\(~G\)&lt;/span&gt;。G和~G的证明需要无穷步，因此不会干扰正常的自然数性质，对正常生活没有影响，但对元数学家有很重要。在本章最后，作者又将丢番图方程是否有整数解和数论中的G关联了起来。&lt;/p&gt;
&lt;h3 id=&#34;生日大合唱哇哇哇呜啊呜啊呜啊&#34;&gt;生日大合唱哇哇哇呜啊呜啊呜啊&lt;/h3&gt;
&lt;p&gt;小品里乌龟用近乎无理取闹的方式给了ω答案模式和之后的各种迭代，只为证明阿基里斯生日的事实，同时为下章试图跳出系统的构造方法设好铺垫。&lt;/p&gt;
&lt;h2 id=&#34;跳出系统&#34;&gt;跳出系统&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;多重分叉，本质不完全性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在上一章里，我们发现在TNT里存在一个“漏洞”——存在一个不可判定的句子G。那如果把这个漏洞补上呢，构造一个TNT+G的形式系统。对于TNT+G也可以同样&lt;span
class=&#34;math inline&#34;&gt;\((TNT+G)-PROOF_PAIR{a,a&amp;#39;}\)&lt;/span&gt;的思路构造一个G&#39;（用TNT+G的字符串表示我在形式系统TNT+G中不可证）来制造矛盾。这种不断给漏洞打正反命题的方式（G，~G）在TNT下形成了多重分叉的树。&lt;/p&gt;
&lt;p&gt;然而，加入补丁后的形式系统仍可以找到“我在形式系统X中不可证”的字符串。所有这些“漏洞”构造方式相似，似乎可以找到一条公理模式&lt;span
class=&#34;math inline&#34;&gt;\(G_{ω}\)&lt;/span&gt;来表示所有这些G、G&#39;、G&#39;&#39;。那么我们把&lt;span
class=&#34;math inline&#34;&gt;\(G_{ω}\)&lt;/span&gt;加入到TNT中呢，能否补全这个漏洞。但既然有一个模子&lt;span
class=&#34;math inline&#34;&gt;\(G_{ω}\)&lt;/span&gt;来刻画G，也会有一种方法用算术模子来描述其对应的哥德尔数。用公式&lt;span
class=&#34;math inline&#34;&gt;\(OMEGA-AXIOM{a}\)&lt;/span&gt;描述，它的解释是&lt;strong&gt;a是出自&lt;span
class=&#34;math inline&#34;&gt;\(G_{ω}\)&lt;/span&gt;一条公理的哥德尔数&lt;/strong&gt;。借助这个公式，就可以在&lt;span
class=&#34;math inline&#34;&gt;\(TNT+G_{ω}\)&lt;/span&gt;内部体现&lt;strong&gt;&lt;span
class=&#34;math inline&#34;&gt;\(TNT+G_{ω}\)&lt;/span&gt;证明对&lt;/strong&gt;的更复杂的概念。从而可以用一模一样的套路构造一个用来算术㧟摁的字符串，之后继续不可判定。我们叫它&lt;span
class=&#34;math inline&#34;&gt;\(TNT+G_{ω+1}\)&lt;/span&gt;。为什么&lt;span
class=&#34;math inline&#34;&gt;\(G_{ω}\)&lt;/span&gt;没法生成出&lt;span
class=&#34;math inline&#34;&gt;\(G_{ω+1}\)&lt;/span&gt;呢？答案是它自身还没有“聪明”到意识这一点。就像乌龟制造“不能播放的唱片”一样。&lt;/p&gt;
&lt;p&gt;依照哥德尔的手段，一个系统本身的性质在证明对概念之内得到反映，然后再针对它使用这些性质，就可以“以子之矛，攻子之盾”。一个系统不论多复杂，都能进行哥德尔配数，因而就能定义证明对。这其实和康托尔的对角线法类似——&lt;strong&gt;明确地排列&lt;/strong&gt;一组实体。在康托尔的办法里，实数们的“详细梳理完毕”导致了无法自圆其说。在构造出不在列表里的数L后，把它添加进去试图弥补漏洞，只会得到一个新的漏洞L&#39;。一旦&lt;strong&gt;确定了唱机的“体系结构”&lt;/strong&gt;，唱机就必然会被找到弱点。因此TNT患上的是&lt;strong&gt;本质不完全性&lt;/strong&gt;——这种不完全性就是TNT的基础组成部分。事实上，在一个系统里，能否利用哥德尔的自指办法构造不可判定的字符串，只依赖下面三个条件：&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;系统要做足够丰富，以便容纳所有关于数的描述，不管是真是假（能构造命题）&lt;/li&gt;
&lt;li&gt;所有一般递归关系都可以用系统公式体现（能进行推导）&lt;/li&gt;
&lt;li&gt;公理和根据系统规则得到的印符模式，都能通过&lt;strong&gt;有限过程&lt;/strong&gt;来辨识（能形式化证明）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;任何这样的系统在内部存在“黑洞”，这种系统强得能有自指句子，也因此自我崩塌。&lt;/p&gt;
&lt;p&gt;书中后面引用了卢卡斯的观点——由于哥德尔式论证的存在，人类思想具有某种难以捉摸、不可名状的特点，这使得“机械自动机”——计算机无法达到人工智能的高度。看起来很显而易见，毕竟人们总能跳出系统，在机器身上实施哥德尔手段（思路类似于计算机依赖刻板的内部编码-&amp;gt;同构于形式系统-&amp;gt;可以完成原始递归算术-&amp;gt;上了哥德尔的“圈套”），所以我们总是知道的更多。作者并不赞同这种观点，本质在于我们总是&lt;strong&gt;处于系统之外&lt;/strong&gt;，但机器不是，就像二维生物无法想象三维生物的细节一样。看起来我们在写出哥德尔方法的公式，但我们写出哥德尔方法的过程也是机械式的从ω到ω+1，再到&lt;span
class=&#34;math inline&#34;&gt;\(ω_{ω}\)&lt;/span&gt;，&lt;span
class=&#34;math inline&#34;&gt;\(ω_{ω+1}\)&lt;/span&gt;，而无法跳出系统之外。&lt;/p&gt;
&lt;p&gt;更直观一点，人本身也无法很好处理哥德尔手段的文字圈套，即&lt;strong&gt;悖论&lt;/strong&gt;，如“我这句话是假话”、“只给不给自己理发的人理发的理发师”。人的大脑也没法做到前后一致的理解。人类无法超越自身就像计算机无法跳出自身一样。TNT可以讨论自身，却不能跳出自身——一个计算机程序可以修改自己，但不能违背自己的指令。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;跳出自身，化身观察者&lt;/strong&gt;成为了后面的论题。书里从文学作品说到禅宗。禅宗顿悟的过程也是这样的过程——&lt;strong&gt;逐步加深一个人的自我意识，逐步扩展“系统”的范围，最终感到和整个宇宙一致，突破自己达成顿悟&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;一个烟民富于启发性的思想&#34;&gt;一个烟民富于启发性的思想&lt;/h3&gt;
&lt;p&gt;小品里讨论了自我复制的病毒、尝试拍摄自身的摄影机和显示器、自我指代的马格利特的画作。&lt;/p&gt;
&lt;h2 id=&#34;自指和自复制&#34;&gt;自指和自复制&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;自复制、副本、印符遗传学、串、基、酶、氨基酸、核糖体、翻译、转录、DNA、mRNA、tRNA、蛋白质、中心法则、反馈、分化&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在上章借助自指构造矛盾后，这一章开头给出了很多自指或者自复制的例子，包括但不限于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本句子有七个字这种自我描述的句子&lt;/li&gt;
&lt;li&gt;可以打印自身函数体的程序&lt;/li&gt;
&lt;li&gt;打印自身哥德尔数的程序&lt;/li&gt;
&lt;li&gt;凯姆式自复制（输入一条会导致打印自身的错误信息）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在对原件和复件做了不同层级的探讨后，引入了本章的主要内容：作者发明的印符遗传学，和遗传学相似但又有些改造的模型，在分子生物学之上、遗传学之下。印符遗传学有着和遗传学一样的&lt;strong&gt;基&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A（腺嘌呤）&lt;/li&gt;
&lt;li&gt;C（胞嘧啶）&lt;/li&gt;
&lt;li&gt;G（鸟嘌呤）&lt;/li&gt;
&lt;li&gt;T（胸腺嘧啶）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在前面的章节我们已经发现了这四个字母碰巧也可以代表A（阿基里斯，Achilles），C（螃蟹，Crab），G（基因，Gene），T（乌龟，Tortoise）把这些符号连一起可以构成&lt;strong&gt;串&lt;/strong&gt;，串可以被印符酶（简称为&lt;strong&gt;酶&lt;/strong&gt;）操作，移动、插入、删除等等。另外，嘌呤（A、G）和嘧啶（C、T）可以相互配对，其中A和T、C和G。酶可以使用的指令有15种，它们都有一个3个字母的代号，就像机器语言里一样，如cut、mov、rpy等，这样一个指令称为&lt;strong&gt;氨基酸&lt;/strong&gt;，酶正是由氨基酸构成的。因此，一个串会按照氨基酸的指令逐步被处理，最终得到新串。&lt;/p&gt;
&lt;p&gt;那么串和酶还有什么关系呢？刚刚得到的新串，可以按照一个新的规则（书中叫做印符遗传密码）在核糖体里“翻译”成一个个氨基酸，并最终构成酶。例如，AC可以翻译为cut。具体可以参见下面的表格。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;A&lt;/th&gt;
&lt;th&gt;C&lt;/th&gt;
&lt;th&gt;G&lt;/th&gt;
&lt;th&gt;T&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;cut(s)&lt;/td&gt;
&lt;td&gt;del(s)&lt;/td&gt;
&lt;td&gt;swi(r)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;mvr(s)&lt;/td&gt;
&lt;td&gt;mvl(s)&lt;/td&gt;
&lt;td&gt;cop(r)&lt;/td&gt;
&lt;td&gt;off(l)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;G&lt;/td&gt;
&lt;td&gt;ina(s)&lt;/td&gt;
&lt;td&gt;inc(r)&lt;/td&gt;
&lt;td&gt;ing(r)&lt;/td&gt;
&lt;td&gt;int(l)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;rpy(r)&lt;/td&gt;
&lt;td&gt;rpu(l)&lt;/td&gt;
&lt;td&gt;lpy(l)&lt;/td&gt;
&lt;td&gt;lpu(u)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;注意到表格单元格的最后，括号里的符号表示了氨基酸的前进方向，这也形成了酶的三级结构，s代表straight，l代表left、r代表right。之后我们把第一段氨基酸调整到指向右边，那么根据最后一段的指向，分别代表酶初始化挂载的基是A还是C、G、T。可以发现，在确定酶的三级结构上，所有氨基酸都发挥了作用。另外，AA代表标点符号，标识一段串的结尾。&lt;/p&gt;
&lt;p&gt;读串并生成新的酶的过程，实际上由核糖体完成。至此，我们就可以从最初的串生成新的酶，新的酶又可以继续作用在串上形成新的酶，如此不断往复。在印符遗传学里，中心法则就是&lt;strong&gt;酶-印符操作-&amp;gt;串-核糖体翻译-&amp;gt;酶&lt;/strong&gt;。在这个循环里，串既充当了程序的作用，又充当了数据的作用。到这里，又和TNT有点像了。&lt;/p&gt;
&lt;p&gt;生物学里的情况和这里很像。DNA就是“串”，蛋白质就是“酶”。DNA由核苷酸长链组成，核苷酸上的基标识了不同的核苷酸，正是A、C、G、T。核苷酸间通过共价键紧密连接，DNA双链间互补的核苷酸通过弱得多的氢键相连。在细胞核内部，DNA的一条链通过RNA聚合酶&lt;strong&gt;转录&lt;/strong&gt;得到信使RNA（mRNA）。RNA和DNA的不同在于U（尿嘧啶）取代了T和A配对。核糖体其实不止制造酶，而是所有蛋白质。同时氨基酸共有20多种。mRNA在核糖体上的&lt;strong&gt;翻译&lt;/strong&gt;过程和印符遗传密码类似，不过是以三个基为单位，如CAU产生组氨酸（his）。氨基酸间通过更强的共价键（肽键）组成蛋白质，蛋白质的三级结构比印符遗传学复杂得多，最终的结构和每个酶的关系目前也没有结论。在翻译过程中，需要的氨基酸，由对应的转运RNA（tRNA）运送过来。最后，UAA、UAG、UGA发挥着印符遗传学里AA的标点作用，表示一段翻译的结束。从DNA到蛋白质的过程便是如此。蛋白质和音乐有着一些相似，氨基酸就像印符，其连接起来组成的二级和三级结构就像旋律、乐章给人的乐曲感。并行工作的RNA聚合酶和核糖体产出多个蛋白质就像卡农的多个声部一样。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RNA聚合酶和核糖体（由蛋白质和rRNA组成）外加DNA就组成了一个自复制的最小支撑系统&lt;/strong&gt;，DNA在其中既作为待复制的“数据”，又作为需要执行什么操作的“指令”。从DNA到蛋白质的过程称为&lt;strong&gt;基因表达&lt;/strong&gt;。蛋白质再往上若干个我们无法把握的层次从遗传型跃升到表现型，从而决定人的精神、心智、物理表现。遗传学的中心法则和TNT的中心法则一一映射，其中DNA即TNT串，mRNA即数论描述，蛋白质即元TNT的陈述，遗传密码即哥德尔编码。有意思的是，数理逻辑在嘌呤一方（算术化（Arithemetization）、哥德尔（Godel）），分子生物学在嘧啶一方（翻译（Translation），克里克（Crick）），同时A和T构成基对，C和G构成基对。&lt;/p&gt;
&lt;p&gt;那么问题来了？按这个映射，哥德尔不完全定理对应什么？借《对位藏头诗》小品里的唱机和唱片，得到这样的描述&lt;/p&gt;
&lt;p&gt;&lt;em&gt;总可以设计一个DNA串，如果把它注入到细胞中，在被转录时它将促使一些将会毁掉这个细胞的蛋白质或DNA生成出来&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;当然这在分子生物学家那里看来有些诡异。不过和噬菌体摧毁大肠杆菌有点像。噬菌体的DNA通过伪装绕过了大肠杆菌细胞内的酶的检查，使之可以被核糖体翻译出来。有趣的是噬菌体（T方）和细胞（Cell）的TC之争就像乌龟（Tortoise）和螃蟹（Crab）之争。&lt;strong&gt;对于能否在特定的细胞内形成的“噬菌体句子”，在数理逻辑里有对应的描述——汉肯句子&lt;/strong&gt;。隐式汉肯句子在说“存在某个符号串序列是我的推导”，显示汉肯句子是说“这里描述的符号串序列...就是我的推导”。前者就像只给DNA病毒组成编码的自组装病毒，可以自行利用化学亲和力链接，后者还加上了组装需要的酶。&lt;/p&gt;
&lt;p&gt;细胞分化形成不同功能的细胞，最终形成不同形态。这个过程是通过阻遏让基因不被表达实现的，诱导物又可以和阻遏蛋白结合，阻止阻遏的发生。整体来看，细胞里发生的这一切的机制比人为设计出来的形式系统都要深奥的多。在这各种过程里，DNA、蛋白质、核糖体、tRNA分子它们即可以作为“数据”、也可以作为“程序”、也可以作为“解释程序”或者“处理机”。巧合的是，人工智能研究里也有着把看上去不同的所有方面混为一谈的趋势。&lt;/p&gt;
&lt;h3 id=&#34;的确该赞美螃蟹&#34;&gt;的确该赞美螃蟹&lt;/h3&gt;
&lt;p&gt;小品里把TNT命题类比乐曲，命题的真假类比乐曲是否悦耳。&lt;/p&gt;
&lt;h2 id=&#34;丘奇图灵塔斯基和别的人&#34;&gt;丘奇、图灵、塔斯基和别的人&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;丘奇定理、塔斯基-丘奇-图灵定理、拉马努金、真理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在上一章把话题引向生物学后，这一章又回到对于思维的讨论。书中在“大脑与思维”一章里实际上已经做了很多探讨，思维有无数层面，它还有一个形式化的硬件层级（可以叫它基底）。在从下到上的不断“组块化”下，每一步都会损失严格性，直到顶层复杂到我们找不到词汇去思考规律。&lt;/p&gt;
&lt;p&gt;在小品里螃蟹似乎有一种&lt;strong&gt;直觉&lt;/strong&gt;可以区分出音乐是不是优美。然而这违背了丘奇定理：&lt;strong&gt;没有切实可靠的方法来区分TNT的定理和非定理&lt;/strong&gt;。类似地还有塔斯基-丘奇-图灵的描述：没有切实可靠的方法来区分真的数论语句和假的数论语句。它还有许多表述形式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;标准形式：把数分成两类的任何一个心智过程都可以用FlooP程序来描述&lt;/li&gt;
&lt;li&gt;大众过程形式：把数分成两类的任何一个可以用语言完美传达的心智过程都可以用FlooP程序来描述&lt;/li&gt;
&lt;li&gt;同构形式：把数分成两类的任何一个可以用语言完美传达的心智过程都可以用FlooP程序来描述，且&lt;strong&gt;心智过程和FlooP在下面意义上同构：某个层次上，计算机和大脑执行的步骤间存在对应&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;拉马努金和一些神童似乎有神谕一般突破这种限制的能力，似乎能绕过数学、分析的方法解决问题，不过这只是因为这些人的中间步骤完成的十分迅速而已，他们也不是通过某种顿悟式的闪念来得到答案。有一个简单的证据是，当数字变大时，答案出来的就慢了。&lt;/p&gt;
&lt;p&gt;大脑的神经元活动作为基质，本身并没有意义，它之上各种符号的意义是在进化环境中作为后效出现的。因此计算机在模拟神经元网络时，原则上可以用可执行的计算来描述。可以因此给出丘奇-图灵命题的另外2种形式:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;微观形式：生物体各组成部分的行为可以用计算机来模拟，也就是说，任何元素的行为都可以用一个FlooP程序来计算到任意精确的程度&lt;/li&gt;
&lt;li&gt;简化论形式：&lt;strong&gt;全部的大脑过程可以用一个可计算的基质导出&lt;/strong&gt;，这也是人工智能可行性的理论基础；人工智能的一个意义在于可能会有一些意义重大的智能特征是漂浮在这种生物大脑基质以外的基质之上的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然，人工智能绝不只是简单的大脑模拟。&lt;/p&gt;
&lt;p&gt;回到螃蟹的问题，美感是不是大脑过程；对此，作者认为大脑能做的某些事情都可以用计算机来模拟，但计算机不能代替灵魂。尽管美感是个非理性过程，但不代表它和计算机就不相容。因为，&lt;strong&gt;低层次的理性不妨碍高层次的非理性&lt;/strong&gt;。大脑都是由简单的神经元组成，但也会想出悖论，换句话说，&lt;strong&gt;大脑是理性的，但心智不是&lt;/strong&gt;。书里用类似的说法，驳斥了卢卡斯机器不如心智的观点，然后给出了丘奇-图灵论题的最后一种形式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;人工智能形式：任何种类的四年制过程都可以用计算机程序模拟，而程序语言和FlooP一样强，也可以说递归函数都可以用这种语言程序化。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;美来源于形式，形式通过共鸣来传达，无法语言传递。字面意义的“句法性质”很好表述，但是形式的&lt;strong&gt;语义&lt;/strong&gt;方面则需要无尽头的检验，它是经验编码的，和无数客体存在联系，且在不同人心里都可能引起不同解释器的反应。&lt;/p&gt;
&lt;h3 id=&#34;施德鲁人设计的玩具&#34;&gt;施德鲁，人设计的玩具&lt;/h3&gt;
&lt;p&gt;小品展示了“施德鲁”这个新的AI模型对语言的理解。&lt;/p&gt;
&lt;h2 id=&#34;人工智能回顾&#34;&gt;人工智能：回顾&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;图灵测试、人工智能、知识表示&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;图灵在自己对计算机和智能的研究中，提出过图灵测验的过程，即机器能否在交谈中向人隐藏自己是机器的能力，图灵对于机器是否能有思维的讨论在那个年代遇到了许多反对意见。在作者的年代，人工智能很显然进步了许多，后面的篇幅对于人工智能的发展现状做了简单的综述式的介绍。&lt;/p&gt;
&lt;p&gt;人工智能的起步很早，在19世纪，布尔和德·摩根就提出了“思维定律”——本质上是命题演算——因此迈出人工智能软件的第一步。随着时代的服战，越来越多“智能”的成果涌现出来。似乎&lt;strong&gt;某个心智功能被程序化之后，人们一旦习惯这种存在便不再把它当做“真正的思维”本质成分&lt;/strong&gt;。换句话说，目前为止，&lt;strong&gt;人工智能是尚未做到的部分&lt;/strong&gt;。书里列出了人工智能的下面一些领域：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;机器翻译&lt;/li&gt;
&lt;li&gt;博弈
&lt;ul&gt;
&lt;li&gt;象棋&lt;/li&gt;
&lt;li&gt;跳棋&lt;/li&gt;
&lt;li&gt;围棋&lt;/li&gt;
&lt;li&gt;五子棋&lt;/li&gt;
&lt;li&gt;扑克&lt;/li&gt;
&lt;li&gt;桥牌&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;数学定理证明&lt;/li&gt;
&lt;li&gt;数学符号处理
&lt;ul&gt;
&lt;li&gt;积分&lt;/li&gt;
&lt;li&gt;化简&lt;/li&gt;
&lt;li&gt;级数求和&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;视觉
&lt;ul&gt;
&lt;li&gt;文本识别&lt;/li&gt;
&lt;li&gt;图像识别&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;听觉
&lt;ul&gt;
&lt;li&gt;词汇识别&lt;/li&gt;
&lt;li&gt;语句时别&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;自然语言理解
&lt;ul&gt;
&lt;li&gt;特定领域回答问题&lt;/li&gt;
&lt;li&gt;复杂句的语法分析&lt;/li&gt;
&lt;li&gt;基于现实世界理解一段话&lt;/li&gt;
&lt;li&gt;解决有歧义的指代关系&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;自然语言生成
&lt;ul&gt;
&lt;li&gt;抽象的诗&lt;/li&gt;
&lt;li&gt;随机的语段&lt;/li&gt;
&lt;li&gt;输出内部知识表示&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;创造艺术
&lt;ul&gt;
&lt;li&gt;写诗&lt;/li&gt;
&lt;li&gt;写小说&lt;/li&gt;
&lt;li&gt;计算机绘画（AIGC）&lt;/li&gt;
&lt;li&gt;音乐创作&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;类比思维
&lt;ul&gt;
&lt;li&gt;启发式数学证明&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;学习
&lt;ul&gt;
&lt;li&gt;形成概念&lt;/li&gt;
&lt;li&gt;参数调整&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;后面的章节里，对各领域做了简单的介绍，在机器翻译、棋类策略、数学证明、音乐创作里都能看到，机器似乎只是把编程者的思维具体展现了出来，它本身还是做的机械式的事情。在定理证明里，人工智能使用了问题分解的手段，把一个总目标分解成要推导的局部目标，然后在不断递归，最终到可以明确看到路径的地步。不过问题分解的路径也是有讲究的，有些看似“绕远路”的路径实际上在全局上确实更近的解法。而发现这一点需要一些&lt;strong&gt;直觉&lt;/strong&gt;，也许这种直觉就是智能的灵光一闪。这也像在之前讨论过的W方式和J方式，需要W方式跳出系统观察才能发现捷径。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;知识表示&lt;/strong&gt;在人工智能李也是重要的命题，它可以以描述性（死记硬背）的也可以是过程性（需要推导）的，前者像是DNA，存储体积更小，像是“&lt;strong&gt;数据&lt;/strong&gt;”一样；后者像是蛋白质，体积更大但有可操作性，就像“&lt;strong&gt;程序&lt;/strong&gt;”一样。组块化的知识之间也可能存在着相互联系。知识的表示和加工有&lt;strong&gt;演绎式&lt;/strong&gt;和&lt;strong&gt;类比式&lt;/strong&gt;。前者更像数理逻辑里的推导过程，后者则通过同构的思路唤起知识。当一个人在遗忘的时候，往往是指&lt;strong&gt;失去了通往相关信息的通路，而不是物理上删除或损坏了&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在本章的后半段，书中对自然语言和音乐的语法做了探讨。最后对“施德鲁”里使用的高级Planner语言做了介绍，自然语言里&lt;strong&gt;句法&lt;/strong&gt;和&lt;strong&gt;语义&lt;/strong&gt;的混杂让语句的理解变得困难，一个解决办法就是通过设计Planner这样的高级语言去提供更靠近自然语言的可能性。&lt;/p&gt;
&lt;h3 id=&#34;对实&#34;&gt;对实&lt;/h3&gt;
&lt;p&gt;小品里，借由阿基里斯和螃蟹邀请乌龟和树懒来家里做客看橄榄球赛，展示了一个可以展现不同假设反应到实际的电视机，小品和电视机里都出现了矛盾的画面，比如两只左手。&lt;/p&gt;
&lt;h2 id=&#34;人工智能展望&#34;&gt;人工智能：展望&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;框架、邦加德问题、模板、同一性检测器、概念网络、元描述、酶、裂变、聚变、受迫匹配&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在小品里，能看到一些偏离现实的虚拟场景，就像是“差一点儿”或者“万一……，那么”的这种想象。人类似乎很容易很容易在固定一些不变的场景下，想象可变部分变化后的样子。这也许这是创造力和洞察力来源的根本。同时，人们很容易区分出三种符号：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有的符号是常量，我们默认它们不变，作为大背景出现，例如三维的世界，或者是看足球赛时候的规则&lt;/li&gt;
&lt;li&gt;有的符号是参量，在需要的时候变化，作为动态背景出现，例如天气、球赛的场地&lt;/li&gt;
&lt;li&gt;有的符号是变量，就是在心智里面最容易“滑来滑去”的部分&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在人工智能研究中，存在&lt;strong&gt;框架&lt;/strong&gt;的概念，框架可以理解成一套上下文，在不提供更多信息时它带有默认值，如夜晚的框架就会有一个月亮，框架之间也可以相互插入。后面作者用邦加德问题来谈论了模式识别里的一些方法论，并类比人类从基因里集成的难以捉摸的性质。如&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;预处理成原子微词汇表，如三角形，原型&lt;/li&gt;
&lt;li&gt;更高层一点的描述，如上、下、大、小、平行、靠近&lt;/li&gt;
&lt;li&gt;使用&lt;strong&gt;模板&lt;/strong&gt;试图构造描述，利用&lt;strong&gt;同一性检测器&lt;/strong&gt;概括模式规律。其中模板通过微词汇关联得到的&lt;strong&gt;概念网络&lt;/strong&gt;来启发式生成，而同一性检测器则去检查模板的正确性&lt;/li&gt;
&lt;li&gt;有的模式可能需要在更高层总结，这时需要用&lt;strong&gt;滑动&lt;/strong&gt;来尝试，从而“发明”一些概念&lt;/li&gt;
&lt;li&gt;更进一步的，可以在得到的模板里发现共性，从而得到&lt;strong&gt;元描述&lt;/strong&gt;，譬如，某个模板里的槽都会被填入“三次”&lt;/li&gt;
&lt;li&gt;有时还需要用集聚和过滤的办法来忽略一些细节抑或关注一些系列&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;之后，书里将邦加德问题里的思路联系到科学研究和人类思维中，甚至是和酶做了类比，进入提出符号聚变和裂变的概念。这段意在将好几个不同领域的概念放到一起找相同点，但写得有点神神叨叨了。之后对于概念骨架（比喻对象间的共同点）和多重表示（一个概念的多种理解来跟比喻对象匹配上）的介绍也是有点陶醉在自己的世界里。&lt;/p&gt;
&lt;p&gt;在之后，书里提出了“出入口”的概念，即脑海里的意象——事件、对象、思想——都有一个“把柄”，譬如收音机的把柄可以是“音乐产生器”或者“烦恼解除器”，在这些把柄间存在精神隔板，避免人在自由联想时过于自由。但这种隔板也不百分百牢靠，就像懂得多种语言的翻译在翻译某个词的时候，就可能想到另外一种语言上的答案。&lt;/p&gt;
&lt;p&gt;在艺术作品里，&lt;strong&gt;受迫匹配&lt;/strong&gt;经常出现。即强行寻找意象和本质的深刻同构，事物的各种细节是如此之多，以至于这种同构基本都能成功。譬如在政治漫画里画了一个政治家和一头大象，观者总有办法将他们关联起来。当然受迫匹配也有优劣之分，要不能太浅显也不能太牵强才是最妙的。就像和弦一样，离得太近太远都不好听，得是恰好的距离。&lt;/p&gt;
&lt;p&gt;本章最后，作者用设问的方式抛出了10个和人工智能未来有关的问题，里面比较有意思的观点有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;程序在有人类一样复杂的情感前，只能谱写机械式的乐曲，缺失灵魂&lt;/li&gt;
&lt;li&gt;情感无法在机器中模拟，机器只能做到哭这件事情，但没法体会到哭代表的情绪&lt;/li&gt;
&lt;li&gt;人工智能的终点做加法可能比现在的机械计算机还慢&lt;/li&gt;
&lt;li&gt;当人工智能足够智能时，人将无法精准控制它，就像人无法精准控制另一个人一样&lt;/li&gt;
&lt;li&gt;终极人工智能可能和我们想象的很不同，人看待终极人工智能时也许并不能理解，就像人无法理解另一颗星球上拥有智能的外星人一样&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;树懒卡农&#34;&gt;树懒卡农&lt;/h3&gt;
&lt;p&gt;这则小品用树懒、阿基里斯、乌龟同构了巴赫的《音乐的奉献》中一首卡农，并命名树懒卡农。&lt;/p&gt;
&lt;h2 id=&#34;怪圈或缠结的层次结构&#34;&gt;怪圈。或缠结的层次结构&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;缠结、怪圈、证据、心智、符号-对象、主义、无限升高的卡农&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本章作为全书最后一章，试图在上面所有章节谈论的事情间寻找一种共性。在开头，作者引入了塞缪尔的机器不具有创造性的观点——“机器所表现出来的‘意向’是实现已明确化的人类程序员的意向，或是依照程序员所指定的规则从这些意向中导出的子意向”，因此对意愿的任何机械化都需要一种无穷回归，因为机器在得到指令前不会做任何事。但其实像人一样，有些最底层的规则——它们不需要依赖“元规则”——是嵌入在硬件中的。就像人的动机都来自遗传的物理基质。&lt;/p&gt;
&lt;p&gt;在之后，梳理给出了可以自我表示的跳棋、作者三角形、艾舍尔的《画手》三个例子，它们都涉及自我指代的缠结层次，但也都有一个独立在缠结层次外的“不受影响”的观察层次，就像W方式一样。自我表示的跳棋里是不变的规则，作者三角形里是看书的读者，艾舍尔的《画手》里则是画作的欣赏者。在人类大脑心智中，缠结的符号层次下也有独立的神经元层次。&lt;/p&gt;
&lt;p&gt;现实生活也有能发现这种怪圈，比如政府里相互的信用背书，又或者伪科学证伪中对于证据的无穷递归证明，最终都可以通过更低层次的限制解决争议。不过要把哥德尔映射到其他学科上时，也不能迷信的&lt;strong&gt;逐字逐句翻译&lt;/strong&gt;。它带来的只是启发价值，譬如&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们人类在认识自己的心智和大脑时，是否也存在某种模糊的哥德尔式循环，限制个人认识自己心灵时所能达到的程度。&lt;/li&gt;
&lt;li&gt;所有元数学和计算理论中的限制性定理都说明：&lt;strong&gt;一旦表示自身结构的能力达到某个临界点，那就无法完整地表示自己&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;任何人都无法摆脱自我的神秘性，你可以幻想但没法跳出自己之外&lt;/li&gt;
&lt;li&gt;在科学领域经常被批评偏向主体-客体“二元论”，之前研究被观察对象很多，现在也开始更多研究观察者了，譬如量子力学里观察者相关研究和人工智能&lt;/li&gt;
&lt;li&gt;艺术中也有符号-对象二分法，符号即想表达的内容，对象即意象。在现代艺术中，也开始刻意混淆“使用”和“谈论”。譬如一些语义错觉画里赤裸地突出体现对象（马格利特作品里画之外的水果，烟斗）、Cage著名的《4分33秒》直接将空白作为符号。艺术作品本身的&lt;strong&gt;框架效应&lt;/strong&gt;会让欣赏者试图寻找里面的意义，而艺术家本意则仅仅只是对象本身，这种禅宗式的艺术对象传达了缠结的层次结构，这也是现代艺术难懂的原因&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么哥德尔定理会限制我们的心智吗？看起来是不会的。&lt;strong&gt;我们从神经元到符号中间的层次模糊和对心智的不可捉摸背后并非一定有某种哥德尔式的缠结。这可能仅仅是命运的一个偶然结果&lt;/strong&gt;。我们大脑的进化碰巧未能强到理解它自己。但就像我们用W方式从更高角度去解释G的非定理性，也可能存在某个解释心智的高层方式，只是我们还没发现或发现不了而已。&lt;/p&gt;
&lt;p&gt;我们的意识和思想归根到底还是基于底层的&lt;strong&gt;物理因果关系&lt;/strong&gt;，不过是不同层次的“共鸣”形成了几乎不可分析的高层符号。&lt;strong&gt;也只有到符号这个层次，我们才能谈论自我意志的存在&lt;/strong&gt;，它在更下的层次只是无情的自然规律，而并非出自任何深切渴望。但这种符号并不能控制在它之下的所有内部过程，使得它的工作过程看起来是一种“直觉”，而缺乏完全的理解。&lt;/p&gt;
&lt;p&gt;本章的最后，又回到艾舍尔的《画廊》和巴赫《无限升高的卡农》，这两个作品里都有着自指的缠结。而在《无限升高的卡农》里，借助了&lt;strong&gt;谢泼德音调&lt;/strong&gt;看起来在不断升高，但最后又回到原声调，就像本书一样，以巴赫《音乐的奉献》开始，又以它做结。&lt;/p&gt;
&lt;h3 id=&#34;六部无插入赋格&#34;&gt;六部无插入赋格&lt;/h3&gt;
&lt;p&gt;最后一个小品借用阿基里斯、螃蟹、乌龟、“作者”、巴比奇、图灵6个角色，类比《六部无插入赋格》中的6个声部，最终引出本书和巴赫的《六部无插入赋格》和全书开头形成回环，实在是妙极。不仅如此，其中的内容设计也尽显精妙：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;阿基里斯开头在收音机里听到的讨论自由意志和决定论的6个学者类比小品里的6个角色&lt;/li&gt;
&lt;li&gt;“没有这种噪音我照样行”共出现6次，就像6个声部，最后一次是变奏的“有这种噪音我照样行”&lt;/li&gt;
&lt;li&gt;作者直接进入小品里作为角色出场，和书中的角色对话，打破了第四面墙，形成了神奇的缠结结构&lt;/li&gt;
&lt;li&gt;“无插入赋格”在小品里通过插在句子中10次出现，其中有1次3连出现和1次倒序连带正序出现&lt;/li&gt;
&lt;li&gt;“甭提多棒了”在小品里5次出现&lt;/li&gt;
&lt;li&gt;巴比奇和图灵相互编程实现对方实现了一种缠结&lt;/li&gt;
&lt;li&gt;“作者”和乌龟的交流介绍了本小品用人物模拟声部的思路，达成了自指&lt;/li&gt;
&lt;li&gt;螃蟹主题的音符是C-Eb-G-Ab-B-B-A-B，倒过来正是Babbage,C，即巴比奇&lt;/li&gt;
&lt;li&gt;“作者”、螃蟹、巴比奇三人用几乎一样的语段类比螃蟹主题里的波音&lt;/li&gt;
&lt;li&gt;乌龟、巴比奇、图灵三人用几乎一样的语段类比三和弦&lt;/li&gt;
&lt;li&gt;在小品后半段通过拆字的方式在语段中嵌入了“侯世达”，类比了巴赫在六部无插入赋格里的最高两个声部嵌入了自己的名字[BACH]&lt;/li&gt;
&lt;li&gt;小品的最后，大家在开始阅读本书之前，准备演奏《音乐的奉献》中《六部无插入赋格》，就像全书的开头一样，所以这个小品其实也是序章的引子，就像最后一句写的那样&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;“&lt;strong&gt;无插入赋格&lt;/strong&gt;”之后&lt;strong&gt;插入&lt;/strong&gt;导言将&lt;strong&gt;赋&lt;/strong&gt;有“无穷升高的卡农”的风&lt;strong&gt;格&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;--END--&lt;/em&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://shenlvmeng.github.com/blog/2023/04/23/g-e-b-1/</guid>
            <title>GEB —— 集异璧之大成 上</title>
            <link>http://shenlvmeng.github.com/blog/2023/04/23/g-e-b-1/</link>
            <category>形式系统</category>
            <category>不完全性</category>
            <category>隐喻</category>
            <category>哥德尔</category>
            <category>巴赫</category>
            <category>埃舍尔</category>
            <pubDate>Sun, 23 Apr 2023 22:23:22 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;19年得知通过豆瓣得知GEB一书时，该书初版已许多年，求之不得。幸而在21年该书再次印刷，且准备再版。于21年底果断购入。读之甚欢，虽有些艰深，但远不止镇柜神书那么简单。这一点和《失控》相比显得高下立判。&lt;/p&gt;
&lt;h2 id=&#34;引子：《逻辑的奉献》&#34;&gt;&lt;a href=&#34;#引子：《逻辑的奉献》&#34; class=&#34;headerlink&#34; title=&#34;引子：《逻辑的奉献》&#34;&gt;&lt;/a&gt;引子：《逻辑的奉献》&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;自指、怪圈、哥德尔定理、人工智能&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从巴赫的《音乐的奉献》谈起，由&lt;strong&gt;卡农&lt;/strong&gt;和&lt;strong&gt;赋格&lt;/strong&gt;这种带有自指音乐形式转述至艾舍尔自指矛盾的画，并发现这种形式和&lt;strong&gt;哥德尔不完全定理&lt;/strong&gt;中构造自指怪圈有着异曲同工的感觉。这种怪圈似乎是固有的，&lt;strong&gt;系统禀赋&lt;/strong&gt;的。不论是康托集合论里的悖论还是逻辑学里的罗素悖论，都是自指在数理逻辑中“搞破坏式”的表现。在哥德尔发表他的定理之后，图灵和丘奇从不同的角度提出不完全定理在计算机领域的应用——可计算性。&lt;/p&gt;
&lt;h3 id=&#34;三部创意曲&#34;&gt;&lt;a href=&#34;#三部创意曲&#34; class=&#34;headerlink&#34; title=&#34;三部创意曲&#34;&gt;&lt;/a&gt;三部创意曲&lt;/h3&gt;&lt;p&gt;这里用小品的方式引出阿基里斯，乌龟两位主角，还顺带介绍了芝诺悖论和艾舍尔画的莫比乌斯环。&lt;/p&gt;
&lt;h2 id=&#34;WU谜题&#34;&gt;&lt;a href=&#34;#WU谜题&#34; class=&#34;headerlink&#34; title=&#34;WU谜题&#34;&gt;&lt;/a&gt;WU谜题&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;形式系统、系统内外、判定过程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这一节以一个预设的WJU形式系统开始，用字符串替代公理、定理，让读者对形式系统有一个初步的感性认识。作者给出了一个题目，以WJ字符串为系统的起始，基于以下4条推导规则，是否能得出WU。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;规则1：WJ后可以跟上U&lt;/li&gt;
&lt;li&gt;规则2：Wx可以替换为Wxx，其中x为任意字符串&lt;/li&gt;
&lt;li&gt;规则3：每处JJJ可以替换为U&lt;/li&gt;
&lt;li&gt;规则4：每处UU可以被直接去掉&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;形式系统内的变换类似上面这样的字符变换。以此聊开去，对比人和机器，人在做一段时间运算后，会发现其中的&lt;strong&gt;性质&lt;/strong&gt;，通过&lt;strong&gt;洞察力&lt;/strong&gt;可以理解这里面的&lt;strong&gt;模式&lt;/strong&gt;，可以灵活地跳出&lt;strong&gt;系统&lt;/strong&gt;的边界之外。而对于机器，除非你告诉它这么做，它会不厌其烦地，从WJ开始，一直往下&lt;strong&gt;机械地&lt;/strong&gt;计算出所有的字符串组合，完全不会意识到自己在做什么。人类在做事时，不需要刻意去区分系统内外，就可以很自然做到意识到系统的存在。而这也是机器做不到的一点。&lt;/p&gt;
&lt;p&gt;回到这个WJU形式系统，你可以用机器的方式推导（J方式），也可以用人类的形式思考（W方式），譬如发现规则1和2增大字符串长度，3和4则是缩短字符串长度。最后的U形式对应禅宗的处事态度。判定过程意味着，在WJU这样的形式系统中，可以在有限时间内给出定理的判定结果。然而两条缩短规则让某条定理（如WU）的证明变得困难甚至不能完成。&lt;/p&gt;
&lt;h3 id=&#34;二部创意曲&#34;&gt;&lt;a href=&#34;#二部创意曲&#34; class=&#34;headerlink&#34; title=&#34;二部创意曲&#34;&gt;&lt;/a&gt;二部创意曲&lt;/h3&gt;&lt;p&gt;用循环嵌套命题的形式引出下一周即将提到的形式系统、&lt;/p&gt;
&lt;h2 id=&#34;数学中的意义和形式&#34;&gt;&lt;a href=&#34;#数学中的意义和形式&#34; class=&#34;headerlink&#34; title=&#34;数学中的意义和形式&#34;&gt;&lt;/a&gt;数学中的意义和形式&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;形式系统、公理模式、同构&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在上一节WU谜题的之外，用另一个pq系统来介绍形式系统。pq系统有无数个公理。但这些公理可以用一个共同的模式生成，即x-qxp-，其中x只由横杠-组成，在公理以外，有着一条简洁的推导规则，得到所有的定理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若xqypz是一条定理，那么x-qypz-也是一条定理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在这么一个形式系统下，经过观察可以发现其中的&lt;strong&gt;模式&lt;/strong&gt;：加法的遗传特性。且这个系统只有简单的一条增长规则，即在定理不断枚举的同时，也在不断变长，这使得pq系统不同于WJU系统，可以通过从顶向下的回溯或从底向上的生成来判定每一条定理是否属于系统。&lt;/p&gt;
&lt;p&gt;实际上，作者发明的pq系统是和现实世界的加法法则是&lt;strong&gt;同构&lt;/strong&gt;的，q即equals，p即plus，-即1，在这个映射下，pq系统即一个描述加法的形式系统。这种同构也是对形式系统的一种“&lt;strong&gt;解释&lt;/strong&gt;”。在高层次存在一个真理和定理的对应，这种对应在你选取对于p、q、-符号的解释前不容易发现。对于形式系统的&lt;strong&gt;解释&lt;/strong&gt;选取也是很有讲究的，存在着能类比到现实世界的有意义的解释和无意义的解释。&lt;/p&gt;
&lt;p&gt;形式系统本无意义，需要解读者赋予意义，这和语言中的意义就不一样。语言中的意义是&lt;strong&gt;主动的&lt;/strong&gt;，围绕符号的意义可以让我们创建新的规则，譬如—-q-p-p-p，代表4&amp;#x3D;1+1+1+1；形式系统里的意义是&lt;strong&gt;被动的&lt;/strong&gt;，你可以根据意义去解读字符串，但是只能在给定规则里行动，不能创造新的。对于逐字符解读可以产生合语法句子的字符串，就可以称为&lt;strong&gt;良构字符串&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;现实和形式系统是&lt;strong&gt;相互独立&lt;/strong&gt;的，并不依赖于两者间的同构关系。除了简单的加法法则，几乎整个现实世界也都可以用形式系统来抽象。这里仅以数学为例，我们所熟知的算术规则也是形式系统里的定理，映射到现实世界里，仅通过有穷情况下的验证是不够的。借助一些推导规则，可以应用到所有的数上。关于数的定理，对于“两个整数的和”这种，我们还能通过计数去同构现实世界，但对于“有无穷个素数”这种，就需要借助符号的推理。这个证明过程由许多滴水不漏的步骤联系在一起，这也暗示着存在一个&lt;strong&gt;结构模式&lt;/strong&gt;可以把这些陈述串起来，这个模式可以用特定风格的词汇或符号来展示。浓缩之后，看起来平滑过渡的每一句话里包含了许多“原子化”的推理过程。&lt;/p&gt;
&lt;h3 id=&#34;无伴奏阿基里斯奏鸣曲&#34;&gt;&lt;a href=&#34;#无伴奏阿基里斯奏鸣曲&#34; class=&#34;headerlink&#34; title=&#34;无伴奏阿基里斯奏鸣曲&#34;&gt;&lt;/a&gt;无伴奏阿基里斯奏鸣曲&lt;/h3&gt;&lt;p&gt;借字谜和艾舍尔的镶嵌画，讨论图案和衬底，引出下节的话题。&lt;/p&gt;
&lt;h2 id=&#34;图形和衬底&#34;&gt;&lt;a href=&#34;#图形和衬底&#34; class=&#34;headerlink&#34; title=&#34;图形和衬底&#34;&gt;&lt;/a&gt;图形和衬底&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;印符规则、非定理、图形、衬底、递归可枚举集&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在上节pq系统的基础上，让我们设想一个Px的定理，其中x代表素数长度的横杠。首先回归WJU系统和pq系统，里面生成代表定理的字符串时，用到下面这样的&lt;strong&gt;印符规则&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读入并识别有限字符集中任意一个符号&lt;/li&gt;
&lt;li&gt;写入任意一个符号&lt;/li&gt;
&lt;li&gt;把任意&lt;strong&gt;一些&lt;/strong&gt;符号从一处搬到另一处&lt;/li&gt;
&lt;li&gt;删除任意一些符号&lt;/li&gt;
&lt;li&gt;检查一个符号是否和另一个相同&lt;/li&gt;
&lt;li&gt;保存并使用之前得到的定理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用和加法规则相同的思路，可以制造一个tq系统，同样地，用一个&lt;strong&gt;公理模式&lt;/strong&gt;开始：对于任意x，xqxt-，其中x仅由-组成；再加上一个推理规则：对于任意x、y、z，如果xqytz，那么可以得到xyqytz-，其中x、y、z仅由-组成。随便选取几个例子，站在“系统”外面观察下模式就能看出乘法的模式了。如果看了pq系统一节，可以很容易做到。在tq系统基础上，也可以定义能够刻画合数的定理：x、y、z仅由短杠-组成，如果xqy-tz-是定理，那么Cx是定理。使用W方式就能看到，&lt;code&gt;x = (y+1) * (z+1)&lt;/code&gt;的模式，x的短杠数目即是合数。另外，使用J方式，不考虑短杠背后的含义，可以机械式验证一个Cx是不是定理。&lt;/p&gt;
&lt;p&gt;现在，我们考虑如何定义一个刻画素数的定理。一个最简单的想法就是给出上面的否定形式，即x仅由-组成，如果Cx&lt;strong&gt;不是&lt;/strong&gt;一个定理，那么Px是一个定理。但是其中Cx是否是一个定理并不在我们的印符规则中。印符规则只能让你看到定理是否在之前得出的定理集中，并没有一个“&lt;strong&gt;非定理集&lt;/strong&gt;”给你查询。到目前为止，刻画素数的定理还只是作为Cx系统的“空洞”出现，并不能看到其中的形式。&lt;/p&gt;
&lt;p&gt;作者在这里举了艾舍尔的一些绘画例子，有些图案在构成图形的同时，其衬底也可以作为一种图形存在。当然了，大多数情况下，可识别的形状外，其&lt;strong&gt;负空间&lt;/strong&gt;不可识别。类比到作者提出的印符数论（TNT），既有所有定理集合的负空间，也有定理空间的变形副本（通过否定每个定理得到）。这两者是否能等价呢？结果先预告下，不可以。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;非定理集中存在真理&lt;/li&gt;
&lt;li&gt;否定每个定理得到的集合之外存在假理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然，在素数这个具体case下，是可以用一个“正空间”等价到“负空间”上的。不过更普遍的情况下，&lt;strong&gt;存在一个形式系统，其负空间（非定理集）不是任何一个形式系统的正空间（定理集）&lt;/strong&gt;。换句话说，&lt;strong&gt;存在非递归的递归可枚举集&lt;/strong&gt;。其中递归即指艾舍尔画中那种相呼应特性，递归可枚举即可以发现其中的模式。其实以自然数为例，我们以固定模式抠出其中的元素，剩余元素构成的空洞就像一幅画的负空间，大概率很难找到一种显而易见的模式来定义。&lt;/p&gt;
&lt;p&gt;回过头来说素数，实际上是可以找到这么样的定理的。首先我们正面定义出刻画&lt;strong&gt;不可整除&lt;/strong&gt;的定理。给出起始的公理模式，x、y仅由-组成，xyBZCx为公理；再给出推理规则，如果xBZCy是定理，那么xBZCxy也是定理。其中BZC就代表不整除的性质。使用W方式就能理解了。在BZC的基础上，定义素数，素数不能被1和自身以外的数整除，所以从2开始，公理模式：如果–BZCz，那么zMY–是个定理；再给出推理规则：如果zMYx和x-BZCz都是定理，那么zMYx-也是定理。这两步已经构造出了无因子性。再补充一个规则，如果z-MYz是定理，那么Pz-是个定理；同时设置一个公理P–。之后的素数就可以一个个向后推广。素数的情况还比较简单，形式系统的复杂性，有向前向后推导的各种情况，导致了哥德尔定理、图灵的停机问题出现。&lt;/p&gt;
&lt;h3 id=&#34;对位藏头诗&#34;&gt;&lt;a href=&#34;#对位藏头诗&#34; class=&#34;headerlink&#34; title=&#34;对位藏头诗&#34;&gt;&lt;/a&gt;对位藏头诗&lt;/h3&gt;&lt;p&gt;用藏头的对话致敬了巴赫将BACH嵌入《赋格的艺术》的尾巴。同时阿基里斯和乌龟关于所有唱机总有播放不了的唱片的讨论，同构暗示哥德尔不完全定理。&lt;/p&gt;
&lt;h2 id=&#34;一致性、完全性和几何学&#34;&gt;&lt;a href=&#34;#一致性、完全性和几何学&#34; class=&#34;headerlink&#34; title=&#34;一致性、完全性和几何学&#34;&gt;&lt;/a&gt;一致性、完全性和几何学&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;完全性、一致性、非欧几何、未定义项&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在第三章的末尾，作者从龟的角色给出了唱片和唱机的小品。在这个小品上，对于任何一种唱机都有自己播放不了的唱片，播放会导致自己的摧毁。这个故事用同构的方式给哥德尔不完备定理一个感性的秒描绘。哥德尔的定理说明不存在这么一个形式系统：任何一个真陈述都可以作为系统中的定理。这段陈述涉及对&lt;strong&gt;一致性&lt;/strong&gt;和&lt;strong&gt;完全性&lt;/strong&gt;的描述。为了解释这两种属性，我们还是从pq系统来看，我们为最初的pq系统增加一种公理模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;xqxp-，其中x由-组成&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;之前的加法解释在现在的pq系统下出现了错位的现象，–q-p-和-q-p-都是定理，在加法解释下，系统有不一致性。我们可以调整一下解释，把q解释为小于等于，挽回之前的同构，使系统重新具有一致性。&lt;/p&gt;
&lt;p&gt;几何学里也有类似的情形。在欧几里得的《几何原理》中，从最基本的概念和定义开始，构建了庞大的严格的欧几里得几何体系。不过欧几里得对其中最基本的“点”，“线”，“圆”下的定义，没有办法和现实世界里的“点”，“线”，“圆”区分出来。因此一些下意识就潜入了他的证明。当然这只是经典著作里的些微瑕疵。欧几里得在公设上的缺乏严格也导致后续非欧几何的出现。《几何原理》的前4个公设简洁和优美：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直线段可以连接两个点&lt;/li&gt;
&lt;li&gt;直线上的任意直线段可以任意眼神&lt;/li&gt;
&lt;li&gt;任意直线段可以以一个端点为圆心，自己为半径做一个圆&lt;/li&gt;
&lt;li&gt;一切直角彼此相等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而第5条公设相比之下就显得格格不入的“丑陋”：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;两条直线和第三条直线相交时，在第三条直线的一侧，三条直线所夹成的内角和如果小于两个直角的和，那么在这一侧，那两条直线延长足够远后一定会相交&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用更好懂的说法，即给定一条直线，和直线外一点，过该点有且只有一条直线和给定直线平行。欧几里得本人在几何证明中也尽量避免使用第5条公设。他之后的许多数学家尝试用前4条公设去推理第5条公设失败后，转换思路去否定第5条公设，之后试图寻找系统内的矛盾。最终导致非欧几何的诞生，实际上，当你摆脱现实世界中“直线”的先入为主的理解后，就能获得非欧几何的新视角。例如，在椭圆几何中，过直线外一点，没有直线与该线平行。椭圆几何中的点和线，分别可以理解为一个球上的一对&lt;strong&gt;对径点&lt;/strong&gt;（球内直径的两个点）和球上的一个&lt;strong&gt;大圆&lt;/strong&gt;。像这样，赋予“点”，“线”新的解释，我们就朝着几何的形式化又进了一步。这种抽离日常意义的词，就叫做&lt;strong&gt;未定义项&lt;/strong&gt;。他们的意义是我们另外灌注进去的。&lt;/p&gt;
&lt;p&gt;几何的完全形式化，需要我们把每个词都抽离成上面那样的未定义项。形式系统中这些符号的被动意义，需要人们观察者寻找一套可以同构联系符号的概念。符号可能有很多有意义的解释，例如pq系统中，将p解释成“等于”，q解释成“减”。回头来看形式系统（在某个解释下）的&lt;strong&gt;一致性&lt;/strong&gt;，这里可以给一个严格的定义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其中&lt;strong&gt;每个&lt;/strong&gt;定理经过解释后，都是一个真陈述&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一致性也分&lt;strong&gt;内部一致性&lt;/strong&gt;，和&lt;strong&gt;外部一致性&lt;/strong&gt;。前者是说所有定理经过解释后，是彼此相容没有相互矛盾；后者是说每个定理解释后，是&lt;strong&gt;真的&lt;/strong&gt;，那么系统加上解释是与外部世界一致的。当然这个“外部世界”不一定是我们生活的这个世界，可以是任何想象的世界，在其中的文学规则、生物规则、物理规则、数学规则甚至逻辑规则都可以和现实世界不一样。通常我们会尽量保留数学规则、逻辑规则和现实一样。&lt;/p&gt;
&lt;p&gt;回头看非欧几何的启示，我们在构造几何学的时候，有些词具有不变的意义，作为&lt;strong&gt;骨骼&lt;/strong&gt;；另一些则可以调整，即未定义项，作为血肉。调整未定义项添加新的规则公理，就可以在固定符号意义的形式系统A的基础上，构造一个形式系统B、C、D……。&lt;strong&gt;我们获得新知识、新词汇、感知不熟悉的事物时，也是以类似这种分层的形式进行的&lt;/strong&gt;。在看到艾舍尔那些视错觉的画时，这种分层的认识遇到了困境，局部的认识没法凑成一个一致性的完整解释。但其实，这时还有一种办法，就是放弃每层对符号的解释，让画面里的每一处线条都是无意义的符号。这种彻底的&lt;strong&gt;逃避&lt;/strong&gt;途径，有点像禅宗式的&lt;strong&gt;U方式&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;那么数论是不是也和欧几里得几何一样，对未定义项给出不同解释，就可以得到不同分支。实际上，我们还是需要保留一些最基本的不可变的部分，和逻辑一起构成“核心数论”（类似前四条公设组成的“核心几何学”），这也被称为皮亚诺算术。在这个基础上，数论也是分叉的理论，有标准和非标准的，且有无穷多个。当然在实际应用中，无需感知它们。&lt;/p&gt;
&lt;p&gt;如果一致性是符号获得被动意义的&lt;strong&gt;最低条件&lt;/strong&gt;，那么&lt;strong&gt;完全性&lt;/strong&gt;就是最高条件。一致性在说“系统中的每个东西都是真的”，完全性则是倒过来“所有由系统中的符号构成的真陈述（良构字符串）都可以由系统产生”。最初的pq系统在解释下，是一个只有两数加法的想象世界，具备完全性和一致性。增加了一个公设解释后，我们给出的小于等于解释就是一致但不完全的，尽管定理产生的都是真陈述，但-q–p—这种真陈述，就没有办法在系统里生产出来。这里我们有2种解决办法，&lt;strong&gt;往系统增加规则&lt;/strong&gt;让系统更“强”或&lt;strong&gt;紧缩解释&lt;/strong&gt;。这里我们选择后者——把小于等于解释中的q改成“等于或加1后等于”，此时系统重新恢复完全性。可以看到，&lt;strong&gt;解释会改变系统的完全性和一致性&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在形式化数论中，也会面临不完全性，在那里我们会被迫采用增加规则的手段来让系统完全。哥德尔不完全定理就在说任何&lt;strong&gt;强有力&lt;/strong&gt;的系统，由于能力较强，反而是不完全的。&lt;/p&gt;
&lt;h3 id=&#34;和声小迷宫&#34;&gt;&lt;a href=&#34;#和声小迷宫&#34; class=&#34;headerlink&#34; title=&#34;和声小迷宫&#34;&gt;&lt;/a&gt;和声小迷宫&lt;/h3&gt;&lt;p&gt;小品中用推入露、弹出锅酥、煮调饮等印象模拟程序中的入栈、出栈。同时糅合了艾舍尔的凸和凹作品，引出鬼神、元鬼神、元元鬼神关于无限递归的场景。在鬼神部分的故事中，有两点最是妙趣至极：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于造物神的递归定义（造物神——物色的——神怪）&lt;/li&gt;
&lt;li&gt;向鬼神给出的悖论愿望（我这个愿望不被实现）导致系统停机&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;递归结构和递归过程&#34;&gt;&lt;a href=&#34;#递归结构和递归过程&#34; class=&#34;headerlink&#34; title=&#34;递归结构和递归过程&#34;&gt;&lt;/a&gt;递归结构和递归过程&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;递归、RTN、人工智能、不可预知性、侯世达定律&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;递归是计算机领域里很常用的一个概念，每次递归&lt;strong&gt;进栈&lt;/strong&gt;（push）后，新的工作是低一个层次的更简单的原工作，在完成新工作后&lt;strong&gt;出栈&lt;/strong&gt;（pop）回到原来的上下文。堆栈在这个过程中会记录打断当前工作的位置还有所处的环境。在音乐中也有相同的应用，每一次的变调都相当于把一个新的调式推入堆栈，在回到主调时，会有种“如释重负”的感觉（栈空）。&lt;strong&gt;紧张和解决是音乐的核心&lt;/strong&gt;。然而对于普通的音乐听众，并没有一个非常可靠和很深的堆栈。在巴赫的《和声小迷宫》中，听众就很容易在急剧变化的调子中迷失方向。&lt;/p&gt;
&lt;p&gt;语言中也存在递归，我们在理解语言时，大脑也在维护着一个心理堆栈。作者这里给出了一个递归迁移网（RTN)的例子，展示构造自然语言时也有递归过程。递归可以是自己调用自身，或者借助两个过程相互调用，但一定有一个&lt;strong&gt;终结条件&lt;/strong&gt;，避免递归进入无限循环。&lt;/p&gt;
&lt;p&gt;之后，作者由用递归的图像模式给出了和斐波那契数列的联系&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;图像的递归模式：G(n) &amp;#x3D; n - G(G(n-1)), G(0)) &amp;#x3D; 0&lt;/li&gt;
&lt;li&gt;斐波那契数列：F(n) &amp;#x3D; F(n-1) + F(n-2)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在递归的规则复杂起来之后，就不再能那么明显地感受到斐波那契这样明显的模式。比如Q(n) &amp;#x3D; Q(n-Q(n-1))+Q(n-Q(n-2))这种。从磁场强度和粒子变换中也能看到同样的递归规律。我们在重温下递归的意义——&lt;strong&gt;递归是在不同层次上出现“同一”事物，但它们又不是完全相同的&lt;/strong&gt;。这些事物有着映射关系，虽然它们不完全相同，但有着相同的功能关系让每次递归看起来“&lt;strong&gt;风格&lt;/strong&gt;”相同，就像艾舍尔的画一样。&lt;/p&gt;
&lt;p&gt;在弈棋程序的超前搜索树中，也有着递归的过程，AI在计算下一步的时候，要站在对方的角度考虑走一步之后如何计算，这个递归足够复杂时，就像上面的Q(n)序列，AI变得难以找到一种模式，体现出&lt;strong&gt;智能&lt;/strong&gt;的特点。程序甚至可以设计成可以修改自身，或者修复、扩展自身。递归的神奇特点在&lt;strong&gt;侯世达定律&lt;/strong&gt;中也有体现：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;做事花费的时间总比预期要长，即使你在预期时考虑了侯世达定律&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;音程增长的卡农&#34;&gt;&lt;a href=&#34;#音程增长的卡农&#34; class=&#34;headerlink&#34; title=&#34;音程增长的卡农&#34;&gt;&lt;/a&gt;音程增长的卡农&lt;/h3&gt;&lt;p&gt;小品以俳句为引子，找到了BACH音程和CAGE音程的联系，巧合的是Bach和Cage也是两个音乐家的名字。&lt;/p&gt;
&lt;h2 id=&#34;意义位于何处&#34;&gt;&lt;a href=&#34;#意义位于何处&#34; class=&#34;headerlink&#34; title=&#34;意义位于何处&#34;&gt;&lt;/a&gt;意义位于何处&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;信息、意义、遗传型、表现型、自动唱机、外在消息、内在消息&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这章主要聊了&lt;strong&gt;意义是一条消息所固有的，还是智能或是机器和消息交互后产生的&lt;/strong&gt;。首先，意义被提取的过程一定有一个信息携带者，等待信息揭示者发现某种同构关系来提取或解释消息。就像唱片的槽纹模式和声音的同构被唱机提取出来一样。DNA的遗传型和表现型也是相似但又不完全一样的例子。相对唱机演绎声音，DNA表现遗传特征要复杂了太多太多，以至于没有人能讲明白之间的关系。因此唱片和声音的同构可以叫做&lt;strong&gt;平凡同构&lt;/strong&gt;，DNA的遗传型和表现型间的同构可以称作&lt;strong&gt;异常同构&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;我们先看唱片，音乐并没有隐藏在唱机中，而且我们也能以任意精确程度去匹配唱片的片段和输出的音乐，唱片和唱机也能很好地分离开。这么看，消息的意义似乎是固有的，唱片所蕴含的意义不随唱机转移。再看DNA，情况不一样了起来，DNA必然也包含了遗传信息，但是它依赖必须的化学环境来表现这些遗传信息，缺少了环境，DNA的意义就不能被揭示出来。&lt;/p&gt;
&lt;p&gt;唱片的意义在于播放时，声音激活大脑中的适当结构，激发听者的一些情感。似乎对于唱片的释读早就&lt;strong&gt;内置&lt;/strong&gt;在我们的大脑里。如果信息在本质上具有足够的内在逻辑，一旦遇到足够智能的生物，环境就能自动的建立起来。这样的话，我们就可以说消息的意义是一种固有性质。在这个假设下，信息可以分为3层：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;内在消息&lt;/strong&gt;：理解内在消息就是抽取发送人要传递的意义&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;框架消息&lt;/strong&gt;：就是确认需要一种解码机制&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;外在消息&lt;/strong&gt;：理解外在消息就是建造或知道如何建造能够解译内在消息的解码机制&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;消息必须具有某种&lt;strong&gt;触发器&lt;/strong&gt;一样的东西，传递出它包含有意义，就像罗塞塔石碑上的重复符号一样。从某个角度看，欣赏音乐、艺术作品也是一个解译内在消息的过程。其中作品传递的&lt;strong&gt;风格&lt;/strong&gt;和外在消息以及解码技术表述的是一件事情。外在消息的“触发器”能否被人发现是无法预知的，在消息内写上“这是一条需要破译的消息”也是不行的。外在消息的本性就决定了它们无法被任何显式语言所传达，解码过程是个启发式的，就像是涌现出来的一样。&lt;/p&gt;
&lt;p&gt;这么看来，消息内的意义能否被发现，和解读它的智能关系甚密，譬如发现唱片内的螺线型沟槽又或者发现图案上使用了日文字母。&lt;strong&gt;智能似乎自带发现外在消息触发器的能力，并且一旦发现就可以对这些消息进行解码&lt;/strong&gt;。在这个基础上，如果我们承认意义是消息所固有的，只等着智能去发现，就是在承认消息的释读机制是具有普遍性、自然界中的基本形式。然而，这样的话分布在宇宙各处的智能生物对于消息处理也要具有不变性。这显然有些&lt;strong&gt;人类沙文主义&lt;/strong&gt;或是&lt;strong&gt;地球沙文主义&lt;/strong&gt;。我们无从知道其他智能会不会像人类智能一样解读我们看起来很显然的消息。&lt;/p&gt;
&lt;p&gt;如果我们要像外星智能传达消息表达斐波那契数列的规律信息，仅仅在金属板上蚀刻2个星号，肯定不如刻上前n项更容易暴露触发器。后者的长遗传型传送的外在消息更多，这就使内在消息得以被读出。再举个例子，我们往外星发送巴赫和Cage的唱片，Cage的曲子就难理解了许多，因为能够欣赏Cage作品需要熟知固定音乐在近几十年的发展轨迹，这样的听众本身就内赋了作品的独立反叛意义，唱片只是简单起个触发作用。而这仅限于地球。相反，讽刺的是，欣赏巴赫的作品就远不需要那么多文化知识。这也体现出了奇妙的一点：&lt;strong&gt;智能喜好模式化，厌恶随机性&lt;/strong&gt;。回到DNA的例子里，要恢复遗传型蕴含的信息，需要极大程度地理解DNA需要的环境，才能完好地表现出表现型。那么，在恢复的过程，什么时候才能说已经达到或者隐含了表现型呢？这在某些国家是个高度敏感的话题（堕胎）。&lt;/p&gt;
&lt;h3 id=&#34;半音阶幻想曲，及互格&#34;&gt;&lt;a href=&#34;#半音阶幻想曲，及互格&#34; class=&#34;headerlink&#34; title=&#34;半音阶幻想曲，及互格&#34;&gt;&lt;/a&gt;半音阶幻想曲，及互格&lt;/h3&gt;&lt;p&gt;小品里阿基里斯尝试用命题演算证明乌龟所说自己的壳是&amp;#x2F;不是绿色的矛盾，这也引出了下章的讨论内容。&lt;/p&gt;
&lt;h2 id=&#34;命题演算&#34;&gt;&lt;a href=&#34;#命题演算&#34; class=&#34;headerlink&#34; title=&#34;命题演算&#34;&gt;&lt;/a&gt;命题演算&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;命题演算、形式化、半解释、元理论&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;小品里阿基里斯朴素的命题演算并没有说服乌龟，这章用符号化的形式系统来模拟命题演算。我们用P、Q、R这样的符号表标识一个原子，将由&lt;code&gt;~&lt;/code&gt;、&lt;code&gt;∧&lt;/code&gt;、&lt;code&gt;∨&lt;/code&gt;、&lt;code&gt;&amp;lt;&lt;/code&gt;、&lt;code&gt;&amp;gt;&lt;/code&gt;、&lt;code&gt;→&lt;/code&gt;符号和原子按指定规则组成的串成为良构串（即命题）。同时给出&lt;strong&gt;合并&lt;/strong&gt;（&lt;code&gt;P∧Q&lt;/code&gt;是定理可以得到&lt;code&gt;P&lt;/code&gt;和&lt;code&gt;Q&lt;/code&gt;都是定理）、&lt;strong&gt;分隔&lt;/strong&gt;（&lt;code&gt;P&lt;/code&gt;和&lt;code&gt;Q&lt;/code&gt;都是定理可以得到&lt;code&gt;P∧Q&lt;/code&gt;是定理）、&lt;strong&gt;双重反转&lt;/strong&gt;规则作为串生成的基本规则来产生更多良构串（命题）。对于包含&lt;code&gt;→&lt;/code&gt;符号的串，也有一个&lt;strong&gt;幻想规则&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;预设一个良构串X，把它当成定理，根据已有规则推导，生成另一个良构串Y，那么可以说X就是Y的前提，Y就是X的结果。记作&lt;code&gt;&amp;lt;x-&amp;gt;y&amp;gt;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在这个基础上，借助双重反转规则，可以很容易得到&lt;code&gt;&amp;lt;P→~~P&amp;gt;&lt;/code&gt;这样的定理。在幻想规则的层级不止一层时，还有一个&lt;strong&gt;搬入规则&lt;/strong&gt;，即在一个“幻想”中，更高层级“幻想”里的定理都可以拿来并使用，借助这个规则，又可以生成&lt;code&gt;&amp;lt;P→&amp;lt;Q→&amp;lt;P∧Q&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;这样的定理（可以发现，这正是分隔规则的符号化，幻想规则就是命题演算的符号化过程）。&lt;/p&gt;
&lt;p&gt;当然，除了上面这些规则，还有很多别的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;分离规则&lt;/strong&gt;：如果&lt;code&gt;x&lt;/code&gt;和&lt;code&gt;&amp;lt;x→y&amp;gt;&lt;/code&gt;都是定理，那么&lt;code&gt;y&lt;/code&gt;也是定理&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;异位规则&lt;/strong&gt;：&lt;code&gt;&amp;lt;x→y&amp;gt;&lt;/code&gt;和&lt;code&gt;&amp;lt;~y→~x&amp;gt;&lt;/code&gt;是可以互换的&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;德摩根规则&lt;/strong&gt;：&lt;code&gt;&amp;lt;~x∧~y&amp;gt;&lt;/code&gt;和&lt;code&gt;~&amp;lt;x∨y&amp;gt;&lt;/code&gt;是可以互换的&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;思维陀螺规则&lt;/strong&gt;：&lt;code&gt;&amp;lt;x∨y&amp;gt;&lt;/code&gt;和&lt;code&gt;&amp;lt;~x→y&amp;gt;&lt;/code&gt;是可以互换的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以很容易发现，&lt;code&gt;~&lt;/code&gt;、&lt;code&gt;∧&lt;/code&gt;、&lt;code&gt;∨&lt;/code&gt;、&lt;code&gt;&amp;lt;&lt;/code&gt;、&lt;code&gt;&amp;gt;&lt;/code&gt;、&lt;code&gt;→&lt;/code&gt;这些符号和逻辑符号的关系。从上面规则生成出来的定理也可以轻松对应现实世界中的逻辑命题。当一个人解释命题演算里的定理，&lt;strong&gt;而不解释其中的原子&lt;/strong&gt;时，作者称之为&lt;strong&gt;半解释&lt;/strong&gt;。例如&lt;code&gt;P∨~P&lt;/code&gt;可以半解释为P或者非P。可以发现，命题演算中生成的定理被半解释时，会被人们视作普遍为真的句子。&lt;/p&gt;
&lt;p&gt;在命题演算的帮助下，可以用印符规则生成普遍为真的语句，这些宇宙里的核心真理似乎是有规律的。在上面的解释下，命题演算里的定理都是真语句。那么我们能证明这一点吗？又或者说，我们知道系统是否一致吗？是否有可能有一个定理&lt;code&gt;x&lt;/code&gt;按照规则推导可以得到&lt;code&gt;~x&lt;/code&gt;。这个问题的证明等效去证明上面那些规则，可以想到，随之而来的还会有证明的证明，证明的证明的证明……最外层系统总是需要一个未经证明的假设，是凭我们的信仰接受的。就像阿基里斯和乌龟谈话里，要从&lt;code&gt;&amp;lt;&amp;lt;A∧B&amp;gt;→Z&amp;gt;&lt;/code&gt;和&lt;code&gt;&amp;lt;A∧B&amp;gt;&lt;/code&gt;证明到&lt;code&gt;Z&lt;/code&gt;，需要先证明符号化的&lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;A∧B&amp;gt;→Z&amp;gt;∧&amp;lt;A∧B&amp;gt;&amp;gt;→Z&amp;gt;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;让我们再回头审视那些规则，我们在用推导出来的&lt;strong&gt;定理图式&lt;/strong&gt;作为导出规则生成其他定理时，使用的是&lt;strong&gt;W方式&lt;/strong&gt;，这种关于命题演算的理论可以叫做“元定理”，即关于定理（可导出的串）的定理（被证明的结果）。在使用W方式时实际上已经失去的系统的形式性，W方式是在系统之外的。只有J方式是在系统里的。然后要生成更多的定理，必然需要这种“捷径”。即使把元理论抽象成形式系统，也依然会有元元理论去加快命题演算中的定理推导。&lt;/p&gt;
&lt;p&gt;那么一个推理理论能否包含自己的元理论呢？事情并不简单，因为系统“对自身思考”时，实际上也是运用了W方式站在&lt;strong&gt;系统外边&lt;/strong&gt;做的观察。然而后面的章节里会提出一个系统可以达成这样的目标，当然，在推演时也是要十分小心J方式和W方式的不同的。&lt;/p&gt;
&lt;p&gt;命题演算很像以某种方式进行的推理，但是推理的规则和人的思维是不一样的。一个证明是非形式化的东西，是思维的产物，本身包含了思维各种复杂的特点，最终“感觉是对的”。而推导是证明的人造对应物，用意是去使用逻辑结构形式化达到同样的目标。&lt;strong&gt;任何一种简单性都会带来一种特殊类型的复杂性&lt;/strong&gt;。就像证明就依赖了人思维语言的复杂性。书中在这里使用了&lt;code&gt;&amp;lt;P∧~P&amp;gt;&lt;/code&gt;构造出&lt;code&gt;&amp;lt;&amp;lt;P∧~P&amp;gt;→Q&amp;gt;&lt;/code&gt;这样一个矛盾。在数学中，人们通常通过修正系统来应对矛盾。譬如在这里可以通过限制幻想规则使用要求新增命题的关联性来限制Q的加入。后一章中通过构造一个更大的系统，来将这种不完全或不一致从子系统的命题演算错误转移为较大系统的毛病。&lt;/p&gt;
&lt;h3 id=&#34;螃蟹卡农&#34;&gt;&lt;a href=&#34;#螃蟹卡农&#34; class=&#34;headerlink&#34; title=&#34;螃蟹卡农&#34;&gt;&lt;/a&gt;螃蟹卡农&lt;/h3&gt;&lt;p&gt;小品借互文的形式（即全文对称）致敬的巴赫的螃蟹卡农作品，同时螃蟹提到的DNA双螺旋结构也和互文有呼应。此外引入DNA里的CGTA碱基对，和螃蟹（Crab）、基因（Gene）、乌龟（Tortoise）、阿基里斯（Achilles）的首字母一一对应，实在妙绝。&lt;/p&gt;
&lt;h2 id=&#34;印符数论&#34;&gt;&lt;a href=&#34;#印符数论&#34; class=&#34;headerlink&#34; title=&#34;印符数论&#34;&gt;&lt;/a&gt;印符数论&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;TNT、自由变元、量化变元、ω不完全系统、形式推理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;印符数论（TNT，Typographical Number Theory）预期把数论形式化在印刷符号中。在TNT中先要定义一些原子；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数字：0、S0、SS0、SSS0，其中S标识是它后面那个东西的后继&lt;/li&gt;
&lt;li&gt;变元和术语：用a、b、c、d、e这样的小写字母表示不确定的数，+和·标识加和乘，&amp;#x3D;表示相等&lt;/li&gt;
&lt;li&gt;上一章命题演算中的&lt;strong&gt;符号&lt;/strong&gt;也可以拿来使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样我们就能构成一些基本的句子了，句子一般都有真假。但像$(b+S0)&amp;#x3D;SS0$这样的则不具有，因为其中有&lt;strong&gt;自由变元&lt;/strong&gt;b，这样的公式也被称为&lt;strong&gt;开公式&lt;/strong&gt;。使用&lt;code&gt;∃&lt;/code&gt;和&lt;code&gt;∀&lt;/code&gt;&lt;strong&gt;量词&lt;/strong&gt;可以将开公式转化为可以判断真假的&lt;strong&gt;闭公式&lt;/strong&gt;。譬如$∃b:(b+S0)&amp;#x3D;SS0$这样的存在断言和$∀b:(b+S0)&amp;#x3D;SS0$这样的全称断言。在量词管辖下的变元称为&lt;strong&gt;量化变元&lt;/strong&gt;。结合上量词，我们可以表示更加丰富的数论命题。譬如，“5是素数”可以表示为：&lt;/p&gt;
&lt;p&gt;$$~∃a:∃b:SSSS0&amp;#x3D;(SSa·SSa)$$&lt;/p&gt;
&lt;p&gt;现在我们已经能&lt;strong&gt;形式化&lt;/strong&gt;地给出命题的串描述了，我们怎么判断他们的真假性呢，即给出一个&lt;strong&gt;良构串&lt;/strong&gt;的形式。首先看良构串的部件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数字：0和前面加上了S的0&lt;/li&gt;
&lt;li&gt;变元：a、b、c、d、e或者字母上面加&lt;code&gt;&amp;#39;&lt;/code&gt;的形式&lt;/li&gt;
&lt;li&gt;项：数字或变元或前面加了S的项，如$SSa’$、$S(Sa·(Sb·Sc))$，根据是否有变元，项可以分为确定项和非确定项&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用上面的部件，下面是一些组成规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原子：如果s和t是项，那么$s&amp;#x3D;t$是原子&lt;/li&gt;
&lt;li&gt;否定：前面加了&lt;code&gt;~&lt;/code&gt;的良构公式也是良构的&lt;/li&gt;
&lt;li&gt;复合：x和y是良构公式的话，那么&lt;code&gt;&amp;lt;x∨y&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;x∧y&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;x→y&amp;gt;&lt;/code&gt;也是良构&lt;/li&gt;
&lt;li&gt;量化：如果u是变元，x是一个包含自由变元u的良构公式，那么$∃u:x$和$∀u:x$也是良构公式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样我们就得到了可以判断真假的TNT良构公式形成规则表，举例：不同的自然数有不同的后继可以表示为$&amp;lt;∀a:∀b:&amp;lt;a≠b→Sa≠Sb&amp;gt;&amp;gt;$。当然，用这样原始的形式表述“b是2的某次方”这样的命题时还是很吃力的。不过最起码现在已经有了一个基础。在这个基础上，我们要补充公理和推理规则，首先，我们将命题演算中所有规则接纳进来，之后给出下面5条公理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公理1：$∀a:~Sa&amp;#x3D;0$&lt;/li&gt;
&lt;li&gt;公理2：$∀a:(a+0)&amp;#x3D;0$&lt;/li&gt;
&lt;li&gt;公理3：$∀a:∀b:(a+Sb)&amp;#x3D;S(a+b)$&lt;/li&gt;
&lt;li&gt;公理4：$∀a:(a·0)&amp;#x3D;0$&lt;/li&gt;
&lt;li&gt;公理5：$∀a:∀b:(a·Sb)&amp;#x3D;((a·b)+a)$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1是关于0的性质，2、3关于加法、4、5关于乘法。看起来和皮亚诺公设很像，但并不一样，作者用鬼神的比喻给了出来：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;怪物是一个神怪（0是一个自然数）&lt;/li&gt;
&lt;li&gt;每一个神怪都有一个元（所有自然数都有后继）&lt;/li&gt;
&lt;li&gt;怪物不是任何神怪的元（0不是任何自然数的后继）&lt;/li&gt;
&lt;li&gt;不同的神怪有不同的元（不同自然数的后继不同）&lt;/li&gt;
&lt;li&gt;如果怪物有X，并且每个神怪都把X传给它的元，那么所有神怪都得到X（数学归纳法）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;之后，我们可以继续给出一些可以操作TNT元素的规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;特称规则：如果u是串x中的一个变元，且$∀u&amp;#x3D;x$是一个定理，那么x也是定理，而且任意替换x中的u为其他串也都是定理，但要保证替换规则一样，且替换u的项不能包含在x中被量化的变元&lt;/li&gt;
&lt;li&gt;概括规则：和特称规则相反，我们可以把全程量词放回到定理中，即x是定理u是串x中的一个变元，那么$∀u&amp;#x3D;x$是一个定理，当然，在幻想规则中，不允许对自由出现在幻想中的变元应用概括&lt;/li&gt;
&lt;li&gt;互换规则：如果u是一个变元，那么$∀u:&lt;del&gt;$和$&lt;/del&gt;∃u:$在定理中任意位置都可以互换&lt;/li&gt;
&lt;li&gt;存在规则：一个项如果在定理中出现任何次，那么可以用一个&lt;strong&gt;还未出现&lt;/strong&gt;在定理中的变元替代，之后在最前面补充上它的存在量词&lt;code&gt;∃&lt;/code&gt;，例如$∀a:&lt;del&gt;Sa&amp;#x3D;0$可以把里面的0替换成$∃b:∀a:&lt;/del&gt;Sa&amp;#x3D;b$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;围绕&lt;code&gt;=&lt;/code&gt;还有下面这些规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对称：如果$r&amp;#x3D;s$是一个定理，那么$s&amp;#x3D;r$也是一个定理&lt;/li&gt;
&lt;li&gt;传递：如果$r&amp;#x3D;s$和$s&amp;#x3D;t$都是定理，那么$r&amp;#x3D;t$也是定理&lt;/li&gt;
&lt;li&gt;后继：如果$r&amp;#x3D;t$是一个定理，那么$Sr&amp;#x3D;St$是一个定理；相反如果$Sr&amp;#x3D;St$是一个定理，那么$r&amp;#x3D;t$是一个定理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在上面这些基础上已经可以推导出很多基础但丰富的定理了，不过一些尝试发现，这个体系还缺少了&lt;strong&gt;概括&lt;/strong&gt;的能力。例如，我们可以从0+0&amp;#x3D;0，推出0+S0&amp;#x3D;S0，再继续往后推，但却没法得到$∀a:(0+a)&amp;#x3D;0$。这时我们急需一个规则：如果这样一个金字塔的所有串都是定理，那么用来概括它们的全称量化的串也是定理。然而这没法在J方式下使用，它是在系统外思考的W方式。这种系统的缺陷被称为&lt;strong&gt;ω不完全性&lt;/strong&gt;。一个看起来很显然的定理却没法在ω不完全系统中证明。就像非欧几何里面也是对未完全定义的“点”和“线”不补全了定义一样。&lt;/p&gt;
&lt;p&gt;我们补上一条归纳规则：设u是一个变元，X{u}是一个u在其中自由出现的良构公式，如果$∀u:&amp;lt;X{u}→X{Su&amp;#x2F;u}&amp;gt;$以及X{0&amp;#x2F;u}二者都是定理，那么$∀u:X{u}$也是一个定理。这样整个形式推理似乎补全了。我们可以用彻底形式化的方式来推理，当然这么做是十分费力的，结合W方式会让它更好用。那么要证明TNT系统的一致性，有没有可能有比TNT系统更简单的方式呢？结果是没有。最起码要和TNT一样完全。&lt;/p&gt;
&lt;h3 id=&#34;一首无的奉献&#34;&gt;&lt;a href=&#34;#一首无的奉献&#34; class=&#34;headerlink&#34; title=&#34;一首无的奉献&#34;&gt;&lt;/a&gt;一首无的奉献&lt;/h3&gt;&lt;p&gt;小品借由禅宗的探讨，对系统完全性和一致性上做了探讨。禅宗中的无门和和对佛性的追求和围绕系统一致性和完全性的追求也有共同之处。&lt;/p&gt;
&lt;h2 id=&#34;无门和哥德尔&#34;&gt;&lt;a href=&#34;#无门和哥德尔&#34; class=&#34;headerlink&#34; title=&#34;无门和哥德尔&#34;&gt;&lt;/a&gt;无门和哥德尔&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;无门、整体论、WU谜题、哥德尔配数、编码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;禅宗的基本教条就是：没有任何方法能刻画禅宗是什么。词语和真理是不相通的，至少词语无法捕捉到真理。文中对于禅宗公案的展示，表现出禅宗对二元论的反对，推崇整体论。而对词语的普通使用，甚至包括自己的知觉都表示你把自己当做世界&lt;strong&gt;当中&lt;/strong&gt;的一个客体，从而远离了“道”。然而禅宗也是一个系统，不可能成为自己的元系统，总有东西处在禅宗之外，是无法用禅宗完全了解或说清楚的。&lt;/p&gt;
&lt;p&gt;这时，我们回头看WU谜题，我们把WJU中的J看成1个&lt;strong&gt;洞&lt;/strong&gt;，起始定理是1个洞，要判断是否有没有洞的情况。WJU系统中的4条规则分别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;规则1：不改变洞的数目&lt;/li&gt;
&lt;li&gt;规则2：让洞的数目翻倍&lt;/li&gt;
&lt;li&gt;规则3：让洞减少3&lt;/li&gt;
&lt;li&gt;规则4：不改变洞的数目&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由此看到，仅借助规则2和3没有办法让洞从1个变为3的倍数，自然无法推导出WU的答案。然而并非所有谜题都像WU这么好解。借助&lt;strong&gt;哥德尔配数&lt;/strong&gt;，我们可以把所有形式系统的问题都转为数论描述，从而可以使用更为强大的数论。以WJU系统为例，我们可以把每个符号映射为1个数字，按照形状相似分别可以：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;W &amp;lt;-&amp;gt; 3&lt;/li&gt;
&lt;li&gt;J &amp;lt;-&amp;gt; 1&lt;/li&gt;
&lt;li&gt;U &amp;lt;-&amp;gt; 0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么，31就是起始的公理，规则1、2、3、4也分别可以用数字规则描述，譬如规则1可以表示为31后可以追加1，即31 -&amp;gt; 31 * 10 + 1。这样用哥德尔配数表示出来的形式系统就具有&lt;strong&gt;二重性&lt;/strong&gt;，一重是印符规则的理解，一重的数字背后的数论理解。印符和算术规则是可以等价的。&lt;/p&gt;
&lt;p&gt;再联想我们上节中的TNT系统。「30是一个WJU数」也可以翻译成TNT记号（尽管它极其复杂）。同样地，这个TNT符号也有印符和数论的两重意义。有人可能会说理解哥德尔配数后的编码需要额外知道编码的知识，但只要是无损编码，现实中不存在什么未编码的消息，只有我们熟悉和不熟悉的编码。&lt;/p&gt;
&lt;p&gt;形式化表述数论的TNT系统本身也可以哥德尔配数，将TNT中用到的原子符号都使用数字组成的密码子表述，类似$(S0+S0)&amp;#x3D;SS0$也可以用数字表述出来。从而&lt;strong&gt;一串数字是不是一个TNT数的另一层含义就是一个数论语句是不是一个TNT定理&lt;/strong&gt;。这也导致了一个结论：TNT的一个串有一个数论中的解释，而数论中的一个陈述的第二意义是TNT的一个陈述。&lt;/p&gt;
&lt;p&gt;那么我们现在要找到一个TNT串，称之为G，它是关于它自己的，具体来说G的被动含义是「G不是TNT的定理」（当然G也有哥德尔配数的数论含义）。那么我们只要创造出这么一个G，根据TNT的完备性，G是一个真理，则「G不是一个定理」，反之亦然。这个TNT串反应的某个自然数的算属性值无法被TNT确定既真又假。从而违背了一致性。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;上篇结&lt;/em&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
