{
    "version": "https://jsonfeed.org/version/1",
    "title": "Shenlvmeng's Blog • All posts by \"动画\" tag",
    "description": "Be sharp, my friend.",
    "home_page_url": "http://shenlvmeng.github.com/blog",
    "items": [
        {
            "id": "http://shenlvmeng.github.com/blog/2018/05/14/canvas-introduction/",
            "url": "http://shenlvmeng.github.com/blog/2018/05/14/canvas-introduction/",
            "title": "canvas相关介绍",
            "date_published": "2018-05-14T13:28:01.000Z",
            "content_html": "<p>canvas由Apple首先提出，现在已经有非常好的浏览器支持度。它和<code>&lt;img&gt;</code>标签很像，但是只有<code>width</code>和<code>height</code>两个属性，在未设置时，为300px和150px。canvas类似<code>&lt;video&gt;</code>和<code>&lt;audio&gt;</code>可以设置替换内容，应对标签本身不被支持的情况。另外，canvas不同于<code>&lt;img&gt;</code>，它必须要有一个<code>&lt;/canvas&gt;</code>作为闭合标志。</p>\n<p>canvas是一个2D渲染上下文环境（就像webGL是3D渲染上下文环境），在获取到<code>&lt;canvas&gt;</code>元素后，可以通过其<code>getContext</code>方法得到渲染上下文和相关功能，通常传入<code>2d</code>，用来绘制2D图案。</p>\n<h2 id=\"形状\"><a href=\"#形状\" class=\"headerlink\" title=\"形状\"></a>形状</h2><p><code>canvas.getContext(&#39;2d&#39;)</code>得到一个CanvasRenderingContext2D对象。剩下的绘制操作都通过调用对象上的API实现。</p>\n<p>canvas的坐标系系统和svg一样，从左上角开始，向右和向下为正，坐标轴单位为像素。下面列出最常见的绘制图形API。</p>\n<ul>\n<li><code>fillRect(x, y, width, height)</code> 绘制矩形</li>\n<li><code>strokeRect(x, y, width, height)</code> 绘制矩形边框</li>\n<li><code>clearRect(x, y, width, height)</code> 擦除矩形范围</li>\n</ul>\n<p>path被用来绘制通用曲线，注意<strong>path都是封闭的</strong>。绘制路径有4步：</p>\n<ul>\n<li><code>beginPath()</code> 新建一条路径，生成之后，图形绘制命令被指向到路径上生成路径。</li>\n<li>使用画图命令去画出路径</li>\n<li><code>closePath()</code> 闭合路径</li>\n<li><em>可选</em> <code>fill()</code> 通过填充路径的内容区域生成实心的图形，使用<code>fill()</code>时可以不手动闭合路径</li>\n<li><code>stroke()</code>，为路径添加描边</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 样例</span></span><br><span class=\"line\">ctx.<span class=\"title function_\">beginPath</span>();</span><br><span class=\"line\">ctx.<span class=\"title function_\">moveTo</span>(<span class=\"number\">75</span>,<span class=\"number\">50</span>);</span><br><span class=\"line\">ctx.<span class=\"title function_\">lineTo</span>(<span class=\"number\">100</span>,<span class=\"number\">75</span>);</span><br><span class=\"line\">ctx.<span class=\"title function_\">lineTo</span>(<span class=\"number\">100</span>,<span class=\"number\">25</span>);</span><br><span class=\"line\">ctx.<span class=\"title function_\">fill</span>();</span><br></pre></td></tr></table></figure>\n\n<div class=\"tip\">所有的路径通过`stroke()`和`fill()`才能体现效果。</div>\n\n<p>里面包含了常见的<code>moveTo</code>和<code>lineTo</code>，表示移动画笔&#x2F;画直线到(x,y)处。画曲线时可以选择：</p>\n<ul>\n<li><code>arc(x, y, radius, startAngle, endAngle, anticlockwise)</code><br>画一个以（x,y）为圆心的以radius为半径的圆弧（圆），从startAngle开始到endAngle结束，按照anticlockwise给定的方向（默认为顺时针）来生成。</li>\n<li><code>arcTo(x1, y1, x2, y2, radius)</code> 根据给定的控制点和半径画一段圆弧，再以直线连接两个控制点。</li>\n<li><code>quadraticCurveTo(cp1x, cp1y, x, y)</code> 绘制二次贝塞尔曲线，cp1x,cp1y为一个控制点，x,y为结束点。</li>\n<li><code>bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y)</code> 绘制三次贝塞尔曲线，cp1x,cp1y为控制点一，cp2x,cp2y为控制点二，x,y为结束点。</li>\n</ul>\n<p><strong>path2D</strong></p>\n<p>通过<code>new path2D()</code>用path2D声明子路径，允许你保留和重用路径对象。除了CanvasRenderingContext2D对象的API外，还可以用<code>addPath</code>新增路径到path2D对象中，它还支持通过SVG格式的字符串导入为路径。</p>\n<h2 id=\"样式\"><a href=\"#样式\" class=\"headerlink\" title=\"样式\"></a>样式</h2><p>通过修改<code>fillStyle</code>和<code>strokeStyle</code>改变当前填充和描边的默认颜色。支持的颜色格式有</p>\n<ul>\n<li>颜色名</li>\n<li>hex</li>\n<li>rgb</li>\n<li>rgba</li>\n</ul>\n<p>通过<code>globalAlpha</code>修改画布里的所有图形的透明度，取值在0到1之间。</p>\n<p>线型样式选择有：</p>\n<ul>\n<li>lineWidth &#x3D; value 设置线条宽度。</li>\n<li>lineCap &#x3D; type 设置线条末端样式。默认为butt，还有round、square可选。</li>\n<li>lineJoin &#x3D; type 设定线条与线条间接合处的样式。round, bevel 和 miter三种可选，miter时，miterLimit可以限制尖角的高度。</li>\n<li>miterLimit &#x3D; value 限制当两条线相交时交接处最大长度；所谓交接处长度（斜接长度）是指线条交接处内角顶点到外角顶点的长度</li>\n</ul>\n<p>设置虚线时，<code>setLineDash(segments)</code>设置当前虚线样式。<code>lineDashOffset = value</code>设置虚线样式的起始偏移量。<code>getLineDash()</code>返回一个包含当前虚线样式，长度为非负偶数的数组。</p>\n<p><strong>渐变</strong></p>\n<p>渐变需要先指定类型和覆盖范围：</p>\n<ul>\n<li><code>createLinearGradient(x1, y1, x2, y2)</code> 方法接受4个参数，表示渐变的起点 (x1,y1) 与终点 (x2,y2)。</li>\n<li><code>createRadialGradient(x1, y1, r1, x2, y2, r2)</code> 方法接受6个参数，前三个定义一个以 (x1,y1) 为原点，半径为r1的圆，后三个参数则定义另一个以 (x2,y2) 为原点，半径为r2的圆。</li>\n</ul>\n<p>创建的渐变通过<code>addColorStop(position, color)</code>添加多个color stop。position参数是一个0.0与1.0之间的数值，表示渐变中颜色所在的相对位置。<strong>渐变是一种样式，通过指定给fillStyle或是strokeStyle发挥作用</strong>。</p>\n<p><strong>模式</strong></p>\n<p>通过<code>createPattern(image, type)</code>创建pattern，Image可以是一个Image对象的引用，或者另一个canvas对象。Type描述重复的格式，是下面的字符串值之一：repeat，repeat-x，repeat-y 和 no-repeat。</p>\n<p>同样，通过指定给<code>fillStyle</code>和<code>strokeStyle</code>使用。</p>\n<p><strong>阴影</strong></p>\n<ul>\n<li>shadowOffsetX &#x3D; float</li>\n<li>shadowOffsetY &#x3D; float<br>shadowOffsetX和shadowOffsetY用来设定阴影在X和Y轴的延伸距离，它们是不受变换矩阵所影响的。负值表示阴影会往上或左延伸，正值则表示会往下或右延伸，它们默认都为0。</li>\n<li>shadowBlur &#x3D; float shadowBlur 用于设定阴影的模糊程度，默认为 0。</li>\n<li>shadowColor &#x3D; color，默认为黑色</li>\n</ul>\n<p>canvas有两种填充规则<a href=\"https://en.wikipedia.org/wiki/Nonzero-rule\"><code>non-zero</code></a>和<code>even-odd</code>，默认为前者。</p>\n<h2 id=\"文字\"><a href=\"#文字\" class=\"headerlink\" title=\"文字\"></a>文字</h2><ul>\n<li><code>fillText(text, x, y [, maxWidth])</code> 在指定的(x,y)位置填充指定的文本，绘制的最大宽度是可选的</li>\n<li><code>strokeText(text, x, y [, maxWidth])</code> 在指定的(x,y)位置绘制文本边框，绘制的最大宽度是可选的</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.<span class=\"property\">font</span> = <span class=\"string\">&quot;48px PingFangSC&quot;</span>;</span><br><span class=\"line\">ctx.<span class=\"title function_\">strokeText</span>(<span class=\"string\">&quot;Hello world&quot;</span>, <span class=\"number\">10</span>, <span class=\"number\">50</span>);</span><br></pre></td></tr></table></figure>\n\n<p>除了<code>font</code>（语法和CSS的font相同）外，还有下面的选择：</p>\n<ul>\n<li>textAlign &#x3D; value 文本对齐选项. 可选的值包括：start, end, left, right or center. 默认值是 start。</li>\n<li>textBaseline &#x3D; value 基线对齐选项. 可选的值包括：top, hanging, middle, alphabetic, ideographic, bottom。默认值是 alphabetic。</li>\n<li>direction &#x3D; value 文本方向</li>\n</ul>\n<p>另外，可以通过<code>measureText()</code>，得到文本绘制的宽度。</p>\n<h2 id=\"使用图片\"><a href=\"#使用图片\" class=\"headerlink\" title=\"使用图片\"></a>使用图片</h2><p>canvas里可以引入Image对象或其他canvas元素，或者通过URL方式使用图片。</p>\n<ul>\n<li>使用相同页面内的图片，使用正常地获取元素的方式获取即可</li>\n<li>使用其它域名下的图片，在HTMLImageElement上使用<code>crossOrigin</code>属性，可以请求加载其它域名上的图片。若服务器不允许跨域加载，则会污染canvas，即不能导出数据</li>\n<li>使用canvas，按获取元素的方式获取即可</li>\n</ul>\n<p>image可以指定<code>src</code>属性为URL或<code>data:url</code>的形式。甚至引入<code>&lt;video&gt;</code>使用视频帧作为image。绘制图片时，使用：</p>\n<ul>\n<li><code>drawImage(image, x, y)</code> 其中image是image或者canvas对象，x和y是其在目标canvas里的起始坐标。</li>\n<li><code>drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight)</code>是包含了缩放和切片后完整的<code>drawImage</code>用法</li>\n</ul>\n<h2 id=\"变形和裁剪\"><a href=\"#变形和裁剪\" class=\"headerlink\" title=\"变形和裁剪\"></a>变形和裁剪</h2><p><strong>save</strong>和<strong>restore</strong>用来保存和恢复canvas状态。每当<code>save()</code>方法被调用后，当前的状态就被推送到栈中保存。状态包括所有变形、样式信息。每次<code>restore</code>时会弹出栈顶的状态。<strong>建议在做变形和裁剪前保存状态</strong>。</p>\n<p>变形用到的属性和CSS很像：</p>\n<ul>\n<li><code>translate(x,y)</code>改变当前原点位置，</li>\n<li><code>rotate(angle)</code>以当前原点为圆心旋转画布，angle为弧度值。</li>\n<li><code>scale(x, y)</code>缩放当前canvas中的图形大小，x和y分别表示两轴上的缩放因子</li>\n<li><code>transform(m11, m12, m21, m22, dx, dy)</code>通过变形矩阵进行变换</li>\n<li><code>setTransform(m11, m12, m21, m22, dx, dy)</code>先还原为单位矩阵，再按入参的矩阵变换</li>\n<li><code>resetTransform</code>重置变形为单位矩阵</li>\n</ul>\n<p><code>globalCompositeOperation</code>定义了图形相互重叠时的处理策略，类似PS中图层的混合模式，默认为<code>darker</code>，还有很多<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation\">别的选项</a>。</p>\n<p><code>clip()</code>即裁剪方法，和<code>fill</code>以及<code>stroke</code>类似，不过<code>clip</code>将路径对应的部分裁剪出指定区域。</p>\n<h2 id=\"动画\"><a href=\"#动画\" class=\"headerlink\" title=\"动画\"></a>动画</h2><p>canvas只是一个画布，画出的东西都会保持原样。制作动画只能采取重绘，逐帧绘制，而每一帧包括下面几步：</p>\n<ul>\n<li>清空canvas，可以使用<code>clearRect</code>方法</li>\n<li><em>可选</em>，保存当前状态</li>\n<li>使用上面提过的种种方法绘制下一帧</li>\n<li><em>可选</em>，恢复状态</li>\n</ul>\n<p>绘制动画通常要结合用户交互以及<code>setTimeout</code>，<code>setInterval</code>，<code>requestAnimationFrame</code>。</p>\n<p>MDN给个一个<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial/Advanced_animations\">小球的组合动画</a>可以参考。</p>\n<h2 id=\"像素级操作\"><a href=\"#像素级操作\" class=\"headerlink\" title=\"像素级操作\"></a>像素级操作</h2><p><code>ImageData</code>接口描述<code>&lt;canvas&gt;</code>元素的一个包含像素数据的区域。它包含<code>width</code>, <code>height</code>, <code>data</code>单个只读属性。<code>ImageData</code>可以通过<code>ctx.createImageData(width, height)</code>或者从已有对象中创建，除此创建的所有像素都是透明黑。</p>\n<p>可以用<code>getImageData(left, top, width, height)</code>方法获取指定范围的<code>ImageData</code>信息，当<code>width</code>和<code>height</code>都为1时，取得当前像素信息。</p>\n<p>使用<code>putImageData(imageData, dx, dy)</code>可以在当前画布(dx, dy)处绘制imageData像素数据。<code>imageSmoothingEnabled</code>默认开启，关闭后可以在图片缩放时看到清楚颗粒化的细节。</p>\n<h2 id=\"导出\"><a href=\"#导出\" class=\"headerlink\" title=\"导出\"></a>导出</h2><p>主要有三种用法：</p>\n<ul>\n<li><code>canvas.toDataURL(&#39;image/png&#39;)</code>，默认将canvas导出成png文件</li>\n<li><code>canvas.toDataURL(&#39;image/jpeg&#39;, quality)</code>，quality指定在0到1之间，默认为0.92。</li>\n<li><code>canvas.toBlob(callback, type, encoderOptions)</code>，这个创建了一个在画布中的代表图片的Blob对像</li>\n</ul>\n<p><code>toDataURL</code>除了上面两种导出格式还有别的选择。</p>\n<h2 id=\"交互\"><a href=\"#交互\" class=\"headerlink\" title=\"交互\"></a>交互</h2><p><code>&lt;canvas&gt;</code>标签只是一个位图，它并不提供任何已经绘制在上面的对象的信息。canvas的内容不能像语义化的HTML一样暴露给一些协助工具。一般来说，你应该避免在交互型的网站或者App上使用canvas。</p>\n<p><code>addHitRegion(options)</code>可以将添加一个点击区域，options可以参考<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/addHitRegion\">MDN文档</a>，鼠标事件如果触发在点击区域中，会带上region用于定位点击区域。</p>\n<p>另外<code>drawFocusIfNeeded()</code>和<code>scrollPathIntoView()</code>方法还可以绘制焦点圈。</p>\n<h2 id=\"性能问题\"><a href=\"#性能问题\" class=\"headerlink\" title=\"性能问题\"></a>性能问题</h2><ul>\n<li>预渲染相似或重复对象</li>\n<li>为了避免抗锯齿带来的额外运算，减少使用浮点数</li>\n<li>在离屏canvas中缓存图片的不同尺寸，不要用<code>drawImage()</code>去缩放它们</li>\n<li>使用多层画布去画一个复杂的场景，比如使用多层画布，描绘不同层级的内容。  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">&quot;stage&quot;</span>&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;ui-layer&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;480&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;320&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;game-layer&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;480&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;320&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;background-layer&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;480&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;320&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span></span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li>\n<li>用CSS画大的背景图</li>\n<li>用CSS transforms特性缩放画布，建议不要将小画布放大，而是去将大画布缩小</li>\n<li>尽可能避免text rendering</li>\n<li>尽可能避免 shadowBlur</li>\n<li><code>window.requestAnimationFrame()</code>性能优于<code>window.setInterval()</code></li>\n</ul>\n",
            "tags": [
                "canvas",
                "绘图",
                "动画"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2017/02/28/request-animation-frame/",
            "url": "http://shenlvmeng.github.com/blog/2017/02/28/request-animation-frame/",
            "title": "JS动画之requestAnimationFrame",
            "date_published": "2017-02-28T09:06:47.000Z",
            "content_html": "<p>CSS3中提供了animation的特性，用来通过指定关键帧（@kenframe）来实现动画效果。这么做方便高效。但是浏览器的兼容效果则比较捉急，且不能实现高级的缓动函数，更别说暂停、回放、倒放等功能了。所以大部分炫酷的动画还是采用JS动画来完成。</p>\n<p>传统的JS动画无非是通过setInterval或是setTimeout定时器函数实现。这在对动画实时性以及流畅性要求不高时没有什么问题。不过当<a href=\"https://shenlvmeng.github.io/blog/2017/02/27/event-loop/\">消息队列</a>较拥挤时，定时效果不能得到保障。同时不同浏览器的UI渲染频率各不相同，很可能与用户设置的时间间隔相冲突。如，相当一部分浏览器的显示频率是16.7ms，此时如果我们设置的时延是10ms就会出现丢帧的情况。为了解决这个问题，requestAnimationFrame千呼万唤始出来。</p>\n<p>requestAnimationFrame是window对象在HTML5中的新API。它的使用方法与setTimeout类似，不同的是，requestAnimationFrame()方法将告诉浏览器您希望执行动画，并请求浏览器调用指定的函数在下一次重绘之前调用回调函数更新动画。从而，不同的动画有了一个统一的刷新机制，可以提升系统性能，节省了CPU、GPU和电池等（CSS中的<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/will-change\">will-change</a>也发挥着类似功能）。</p>\n<p>那么requestAnimationFrame的兼容性如何呢？</p>\n<p><img src=\"/blog/images/request-animation-frame-graph-1.png\"></p>\n<p>好像还不错。在老版本的浏览器上，也有shim方法来实现同样的效果，借助了setTimeout函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;use strict&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> lastTime = <span class=\"number\">0</span>,</span><br><span class=\"line\">        vendors = [<span class=\"string\">&#x27;ms&#x27;</span>, <span class=\"string\">&#x27;moz&#x27;</span>, <span class=\"string\">&#x27;webkit&#x27;</span>, <span class=\"string\">&#x27;o&#x27;</span>],</span><br><span class=\"line\">        x;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (x = <span class=\"number\">0</span>; x &lt; vendors.<span class=\"property\">length</span> &amp;&amp; !<span class=\"variable language_\">window</span>.<span class=\"property\">requestAnimationFrame</span>; ++x) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">window</span>.<span class=\"property\">requestAnimationFrame</span> = <span class=\"variable language_\">window</span>[vendors[x] + <span class=\"string\">&#x27;RequestAnimationFrame&#x27;</span>];</span><br><span class=\"line\">        <span class=\"variable language_\">window</span>.<span class=\"property\">cancelAnimationFrame</span>  = <span class=\"variable language_\">window</span>[vendors[x] + <span class=\"string\">&#x27;CancelAnimationFrame&#x27;</span>]</span><br><span class=\"line\">                                   || <span class=\"variable language_\">window</span>[vendors[x] + <span class=\"string\">&#x27;CancelRequestAnimationFrame&#x27;</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">window</span>.<span class=\"property\">requestAnimationFrame</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">window</span>.<span class=\"property\">requestAnimationFrame</span> = <span class=\"keyword\">function</span> (<span class=\"params\">callback</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> currTime = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>(),</span><br><span class=\"line\">                timeToCall = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(<span class=\"number\">0</span>, <span class=\"number\">16</span> - (currTime - lastTime)),</span><br><span class=\"line\">                id = <span class=\"variable language_\">window</span>.<span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                    <span class=\"title function_\">callback</span>(currTime + timeToCall);</span><br><span class=\"line\">                &#125;, timeToCall);</span><br><span class=\"line\">            lastTime = currTime + timeToCall;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">window</span>.<span class=\"property\">cancelAnimationFrame</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">window</span>.<span class=\"property\">cancelAnimationFrame</span> = <span class=\"keyword\">function</span> (<span class=\"params\">id</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">window</span>.<span class=\"built_in\">clearTimeout</span>(id);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;());</span><br></pre></td></tr></table></figure>\n\n<p>那么requestAnimationFrame怎么用呢。语法像下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">requestID = <span class=\"variable language_\">window</span>.<span class=\"title function_\">requestAnimationFrame</span>(callback);               <span class=\"comment\">// Firefox 23 / IE10 / Chrome / Safari 7 (incl. iOS)</span></span><br><span class=\"line\">requestID = <span class=\"variable language_\">window</span>.<span class=\"title function_\">mozRequestAnimationFrame</span>(callback);                <span class=\"comment\">// Firefox &lt; 23</span></span><br><span class=\"line\">requestID = <span class=\"variable language_\">window</span>.<span class=\"title function_\">webkitRequestAnimationFrame</span>(callback); <span class=\"comment\">// Older versions Chrome/Webkit</span></span><br></pre></td></tr></table></figure>\n\n<p>注意它只接受回调函数作为参数，不需要指定延时哦。同样的，相对应的还有一个<code>cancelAnimationFrame(requestID)</code>方法取消重绘。最常见的用法是在一个动画函数里通过requestAnimationFrame循环调用自身。就像下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">funFall = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> start = <span class=\"number\">0</span>, during = <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _run = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        start++;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> top = <span class=\"title class_\">Tween</span>.<span class=\"property\">Bounce</span>.<span class=\"title function_\">easeOut</span>(start, objBall.<span class=\"property\">top</span>, <span class=\"number\">500</span> - objBall.<span class=\"property\">top</span>, during);</span><br><span class=\"line\">        ball.<span class=\"title function_\">css</span>(<span class=\"string\">&quot;top&quot;</span>, top);</span><br><span class=\"line\">        <span class=\"title function_\">shadowWithBall</span>(top);    <span class=\"comment\">// 投影跟随小球的动</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (start &lt; during) <span class=\"title function_\">requestAnimationFrame</span>(_run);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"title function_\">_run</span>();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "动画",
                "JavaScript",
                "requestAnimationFrame"
            ]
        }
    ]
}