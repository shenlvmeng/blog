<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://shenlvmeng.github.com/blog</id>
    <title>Shenlvmeng&#39;s Blog • Posts by &#34;动画&#34; tag</title>
    <link href="http://shenlvmeng.github.com/blog" />
    <updated>2018-05-14T13:28:01.000Z</updated>
    <category term="总结" />
    <category term="制度" />
    <category term="道德" />
    <category term="文官" />
    <category term="万历" />
    <category term="明朝" />
    <category term="读书笔记" />
    <category term="展望" />
    <category term="2018" />
    <category term="2019" />
    <category term="flag" />
    <category term="2020" />
    <category term="2021" />
    <category term="2022" />
    <category term="2023" />
    <category term="面试" />
    <category term="前端" />
    <category term="FAQ" />
    <category term="HTML" />
    <category term="CSS" />
    <category term="style guide" />
    <category term="编程" />
    <category term="范式" />
    <category term="设计" />
    <category term="艺术" />
    <category term="质量" />
    <category term="async_hooks" />
    <category term="cls-hooked" />
    <category term="logId" />
    <category term="录音" />
    <category term="getUserMedia" />
    <category term="AudioContext" />
    <category term="PCM" />
    <category term="WAVE" />
    <category term="二叉搜索树" />
    <category term="算法" />
    <category term="回忆" />
    <category term="老朋友" />
    <category term="C" />
    <category term="Hash" />
    <category term="布隆过滤器" />
    <category term="字符串检索" />
    <category term="canvas" />
    <category term="流程图" />
    <category term="d3" />
    <category term="g6" />
    <category term="zrender" />
    <category term="processOn" />
    <category term="SDN" />
    <category term="cbench" />
    <category term="安装说明" />
    <category term="绘图" />
    <category term="动画" />
    <category term="攻略" />
    <category term="流水账" />
    <category term="成都" />
    <category term="重庆" />
    <category term="武汉" />
    <category term="重构" />
    <category term="代码" />
    <category term="代码风格" />
    <category term="数据可视化" />
    <category term="爬虫" />
    <category term="chrome" />
    <category term="crx" />
    <category term="扩展" />
    <category term="CORS" />
    <category term="跨域" />
    <category term="盒模型" />
    <category term="浮动" />
    <category term="Reactive Programming" />
    <category term="JavaScript" />
    <category term="Cycle.js" />
    <category term="Dart" />
    <category term="最佳实践" />
    <category term="引流" />
    <category term="universal-link" />
    <category term="app-link" />
    <category term="脚手架" />
    <category term="degit" />
    <category term="git" />
    <category term="设计模式" />
    <category term="类" />
    <category term="接口" />
    <category term="抽象类" />
    <category term="DOM" />
    <category term="Docker" />
    <category term="ONOS" />
    <category term="控制器" />
    <category term="虚拟化" />
    <category term="笔记" />
    <category term="UX" />
    <category term="UED" />
    <category term="准则" />
    <category term="Java" />
    <category term="Ruby" />
    <category term="反射" />
    <category term="编程范式" />
    <category term="鸭子类型" />
    <category term="管理" />
    <category term="效率" />
    <category term="知识工作者" />
    <category term="卓有成效" />
    <category term="Elm" />
    <category term="框架" />
    <category term="函数式编程" />
    <category term="虚网映射" />
    <category term="Javascript" />
    <category term="并发" />
    <category term="event loop" />
    <category term="覆盖率" />
    <category term="端到端测试" />
    <category term="istanbul" />
    <category term="istanbuljs" />
    <category term="JavaSript" />
    <category term="Express" />
    <category term="源码" />
    <category term="代码覆盖率" />
    <category term="istanbul-middleware" />
    <category term="代码插桩" />
    <category term="require钩子" />
    <category term="babel-plugin-istanbul" />
    <category term="css" />
    <category term="html5" />
    <category term="flex" />
    <category term="javascript" />
    <category term="roadmap" />
    <category term="闭包" />
    <category term="Haskell" />
    <category term="monad" />
    <category term="后端" />
    <category term="管理后台" />
    <category term="egg.js" />
    <category term="工作流" />
    <category term="pull request" />
    <category term="golang" />
    <category term="语言学习" />
    <category term="黑客与画家" />
    <category term="创业" />
    <category term="骑行" />
    <category term="海南" />
    <category term="图文" />
    <category term="reflow" />
    <category term="repaint" />
    <category term="命名法" />
    <category term="成功学" />
    <category term="自我建设" />
    <category term="HTTP" />
    <category term="HTTP/2" />
    <category term="SPDY" />
    <category term="QUIC" />
    <category term="HTTPS" />
    <category term="状态码" />
    <category term="网络攻击" />
    <category term="介绍" />
    <category term="图片渲染" />
    <category term="html2canvas" />
    <category term="dom-to-image" />
    <category term="electron" />
    <category term="indexedDB" />
    <category term="异步" />
    <category term="Generator" />
    <category term="thunk" />
    <category term="async" />
    <category term="函数表达式" />
    <category term="对象" />
    <category term="继承" />
    <category term="类型转换" />
    <category term="==" />
    <category term="类型判断" />
    <category term="猫" />
    <category term="杀手" />
    <category term="管理学" />
    <category term="领导力" />
    <category term="梯队" />
    <category term="移动端" />
    <category term="UI" />
    <category term="自适应" />
    <category term="rem" />
    <category term="Electron" />
    <category term="GUI" />
    <category term="gpx" />
    <category term="template" />
    <category term="Electron Builder" />
    <category term="PWA" />
    <category term="方法论" />
    <category term="夜话" />
    <category term="多线" />
    <category term="生活" />
    <category term="密码" />
    <category term="密钥" />
    <category term="技改" />
    <category term="Vue" />
    <category term="gulp" />
    <category term="瀑布流" />
    <category term="电影" />
    <category term="PHP" />
    <category term="参考" />
    <category term="思维" />
    <category term="学习能力" />
    <category term="右脑" />
    <category term="经济学" />
    <category term="宏观经济学" />
    <category term="术语" />
    <category term="GDP" />
    <category term="CPI" />
    <category term="储蓄" />
    <category term="投资" />
    <category term="金融市场" />
    <category term="股票" />
    <category term="债券" />
    <category term="美联储" />
    <category term="失业" />
    <category term="货币" />
    <category term="现值" />
    <category term="准备金" />
    <category term="货币中性" />
    <category term="通货膨胀" />
    <category term="汇率" />
    <category term="购买力" />
    <category term="净出口" />
    <category term="资产净流出" />
    <category term="总需求" />
    <category term="总供给" />
    <category term="流动性偏好" />
    <category term="乘数效应" />
    <category term="菲利普斯曲线" />
    <category term="微观经济学" />
    <category term="供求" />
    <category term="贸易" />
    <category term="市场" />
    <category term="税" />
    <category term="剩余" />
    <category term="外部性" />
    <category term="公共物品" />
    <category term="公共资源" />
    <category term="生产成本" />
    <category term="利润" />
    <category term="垄断" />
    <category term="价格歧视" />
    <category term="寡头" />
    <category term="垄断竞争" />
    <category term="生产要素市场" />
    <category term="贫困" />
    <category term="消费者选择理论" />
    <category term="不对称信息" />
    <category term="政治经济学" />
    <category term="行为经济学" />
    <category term="VSCode" />
    <category term="编辑器" />
    <category term="IDE" />
    <category term="hybrid" />
    <category term="JSBridge" />
    <category term="Web Worker" />
    <category term="Service Worker" />
    <category term="习惯" />
    <category term="lint" />
    <category term="editorconfig" />
    <category term="commit message" />
    <category term="量子物理" />
    <category term="史话" />
    <category term="埋点" />
    <category term="raven.js" />
    <category term="前端监控" />
    <category term="文本编辑器" />
    <category term="quill" />
    <category term="结构化数据" />
    <category term="React" />
    <category term="Hooks" />
    <category term="函数组件" />
    <category term="复用" />
    <category term="状态管理" />
    <category term="redux" />
    <category term="MobX" />
    <category term="代码质量" />
    <category term="重来" />
    <category term="requestAnimationFrame" />
    <category term="TypeScript" />
    <category term="路书" />
    <category term="gpx解析" />
    <category term="EXIF" />
    <category term="人类" />
    <category term="生存" />
    <category term="基因" />
    <category term="响应式编程" />
    <category term="RxJS" />
    <category term="成长" />
    <category term="业务" />
    <category term="思想" />
    <category term="程序设计" />
    <category term="心理学" />
    <category term="自我" />
    <category term="社会思维" />
    <category term="社会影响" />
    <category term="文化" />
    <category term="性别" />
    <category term="从众" />
    <category term="说服" />
    <category term="临床诊断" />
    <category term="陪审团" />
    <category term="司法" />
    <category term="物质主义" />
    <category term="健康" />
    <category term="社会关系" />
    <category term="偏见" />
    <category term="攻击行为" />
    <category term="亲密关系" />
    <category term="友谊" />
    <category term="爱情" />
    <category term="利他" />
    <category term="冲突" />
    <category term="和解" />
    <category term="软技能" />
    <category term="理财" />
    <category term="健身" />
    <category term="自我营销" />
    <category term="学习" />
    <category term="商业模式" />
    <category term="产品" />
    <category term="校园网" />
    <category term="互联网" />
    <category term="技术" />
    <category term="web开发" />
    <category term="哲思" />
    <category term="择偶观" />
    <category term="validator" />
    <category term="大文件" />
    <category term="visibilityChange" />
    <category term="IntersectionObserver" />
    <category term="图种" />
    <category term="draggable" />
    <category term="webpack" />
    <category term="z-index" />
    <category term="git submodule" />
    <category term="object-fit" />
    <category term="object-position" />
    <category term="BroadcastChannel" />
    <category term="extract-text-webpack-plugin" />
    <category term="lottie" />
    <category term="backface-visibility" />
    <category term="egret" />
    <category term="mock" />
    <category term="SSO" />
    <category term="autoprefixer" />
    <category term="polyfill" />
    <category term="Android" />
    <category term="ffmpeg" />
    <category term="React Hooks" />
    <category term="rollup" />
    <category term="CDN" />
    <category term="DNS" />
    <category term="CNAME" />
    <category term="架构" />
    <category term="组件" />
    <category term="ssh" />
    <category term="fis-receiver" />
    <category term="tmux" />
    <category term="origami" />
    <category term="promise" />
    <category term="encodeURI" />
    <category term="encodeURIComponent" />
    <category term="axios" />
    <category term="charles" />
    <category term="黑色幽默" />
    <category term="朋友" />
    <category term="梦" />
    <category term="濒死" />
    <category term="江南" />
    <category term="苏州" />
    <category term="无锡" />
    <category term="宜兴" />
    <category term="湖州" />
    <category term="南浔" />
    <category term="游记" />
    <category term="随笔" />
    <category term="群众" />
    <category term="理论" />
    <category term="实效" />
    <category term="测试" />
    <category term="长沙" />
    <category term="杭州" />
    <category term="湖南" />
    <category term="核酸" />
    <category term="美食" />
    <category term="云南" />
    <category term="丽江" />
    <category term="大理" />
    <category term="青岛" />
    <category term="济南" />
    <category term="山东" />
    <category term="西北" />
    <category term="银川" />
    <category term="西宁" />
    <category term="青海湖" />
    <category term="西海镇" />
    <category term="茶卡盐湖" />
    <category term="厦门" />
    <category term="感受" />
    <category term="C语言" />
    <category term="树" />
    <category term="主干开发" />
    <category term="GitFlow" />
    <category term="GithubFlow" />
    <category term="typescript" />
    <category term="类型系统" />
    <category term="webrtc" />
    <category term="RTMP" />
    <category term="首屏时间" />
    <category term="性能优化" />
    <category term="公司" />
    <category term="个人发展" />
    <category term="战略" />
    <category term="晋升" />
    <category term="哲学" />
    <category term="幸福" />
    <category term="人生" />
    <category term="叔本华" />
    <category term="Unix" />
    <category term="Rollup" />
    <category term="mouseout" />
    <category term="mouseleave" />
    <category term="lint-staged" />
    <category term="吸顶" />
    <category term="图片组件" />
    <category term="形式系统" />
    <category term="不完全性" />
    <category term="隐喻" />
    <category term="哥德尔" />
    <category term="巴赫" />
    <category term="埃舍尔" />
    <category term="济州" />
    <category term="西归浦" />
    <category term="城山" />
    <category term="咸德" />
    <category term="人工智能" />
    <category term="心智" />
    <category term="自指" />
    <category term="图灵" />
    <category term="马列主义" />
    <category term="恩格斯" />
    <category term="家庭" />
    <category term="国家" />
    <category term="阶级" />
    <category term="氏族" />
    <category term="哲学史" />
    <category term="孔子" />
    <category term="老子" />
    <category term="儒家" />
    <category term="道家" />
    <category term="佛教" />
    <category term="禅宗" />
    <category term="理学" />
    <category term="心学" />
    <category term="计算机" />
    <category term="微机原理" />
    <category term="门" />
    <category term="操作系统" />
    <category term="数字电路" />
    <category term="2024" />
    <category term="政府" />
    <category term="经济" />
    <category term="消费" />
    <category term="土地金融" />
    <entry>
        <id>http://shenlvmeng.github.com/blog/2018/05/14/canvas-introduction/</id>
        <title>canvas相关介绍</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2018/05/14/canvas-introduction/"/>
        <content type="html">&lt;p&gt;canvas由Apple首先提出，现在已经有非常好的浏览器支持度。它和&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;标签很像，但是只有&lt;code&gt;width&lt;/code&gt;和&lt;code&gt;height&lt;/code&gt;两个属性，在未设置时，为300px和150px。canvas类似&lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt;和&lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt;可以设置替换内容，应对标签本身不被支持的情况。另外，canvas不同于&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;，它必须要有一个&lt;code&gt;&amp;lt;/canvas&amp;gt;&lt;/code&gt;作为闭合标志。&lt;/p&gt;
&lt;p&gt;canvas是一个2D渲染上下文环境（就像webGL是3D渲染上下文环境），在获取到&lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;元素后，可以通过其&lt;code&gt;getContext&lt;/code&gt;方法得到渲染上下文和相关功能，通常传入&lt;code&gt;2d&lt;/code&gt;，用来绘制2D图案。&lt;/p&gt;
&lt;h2 id=&#34;形状&#34;&gt;&lt;a href=&#34;#形状&#34; class=&#34;headerlink&#34; title=&#34;形状&#34;&gt;&lt;/a&gt;形状&lt;/h2&gt;&lt;p&gt;&lt;code&gt;canvas.getContext(&amp;#39;2d&amp;#39;)&lt;/code&gt;得到一个CanvasRenderingContext2D对象。剩下的绘制操作都通过调用对象上的API实现。&lt;/p&gt;
&lt;p&gt;canvas的坐标系系统和svg一样，从左上角开始，向右和向下为正，坐标轴单位为像素。下面列出最常见的绘制图形API。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fillRect(x, y, width, height)&lt;/code&gt; 绘制矩形&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strokeRect(x, y, width, height)&lt;/code&gt; 绘制矩形边框&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clearRect(x, y, width, height)&lt;/code&gt; 擦除矩形范围&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;path被用来绘制通用曲线，注意&lt;strong&gt;path都是封闭的&lt;/strong&gt;。绘制路径有4步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;beginPath()&lt;/code&gt; 新建一条路径，生成之后，图形绘制命令被指向到路径上生成路径。&lt;/li&gt;
&lt;li&gt;使用画图命令去画出路径&lt;/li&gt;
&lt;li&gt;&lt;code&gt;closePath()&lt;/code&gt; 闭合路径&lt;/li&gt;
&lt;li&gt;&lt;em&gt;可选&lt;/em&gt; &lt;code&gt;fill()&lt;/code&gt; 通过填充路径的内容区域生成实心的图形，使用&lt;code&gt;fill()&lt;/code&gt;时可以不手动闭合路径&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stroke()&lt;/code&gt;，为路径添加描边&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 样例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ctx.&lt;span class=&#34;title function_&#34;&gt;beginPath&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ctx.&lt;span class=&#34;title function_&#34;&gt;moveTo&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;75&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ctx.&lt;span class=&#34;title function_&#34;&gt;lineTo&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;75&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ctx.&lt;span class=&#34;title function_&#34;&gt;lineTo&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;25&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ctx.&lt;span class=&#34;title function_&#34;&gt;fill&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;div class=&#34;tip&#34;&gt;所有的路径通过`stroke()`和`fill()`才能体现效果。&lt;/div&gt;

&lt;p&gt;里面包含了常见的&lt;code&gt;moveTo&lt;/code&gt;和&lt;code&gt;lineTo&lt;/code&gt;，表示移动画笔&amp;#x2F;画直线到(x,y)处。画曲线时可以选择：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;arc(x, y, radius, startAngle, endAngle, anticlockwise)&lt;/code&gt;&lt;br&gt;画一个以（x,y）为圆心的以radius为半径的圆弧（圆），从startAngle开始到endAngle结束，按照anticlockwise给定的方向（默认为顺时针）来生成。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;arcTo(x1, y1, x2, y2, radius)&lt;/code&gt; 根据给定的控制点和半径画一段圆弧，再以直线连接两个控制点。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;quadraticCurveTo(cp1x, cp1y, x, y)&lt;/code&gt; 绘制二次贝塞尔曲线，cp1x,cp1y为一个控制点，x,y为结束点。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y)&lt;/code&gt; 绘制三次贝塞尔曲线，cp1x,cp1y为控制点一，cp2x,cp2y为控制点二，x,y为结束点。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;path2D&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过&lt;code&gt;new path2D()&lt;/code&gt;用path2D声明子路径，允许你保留和重用路径对象。除了CanvasRenderingContext2D对象的API外，还可以用&lt;code&gt;addPath&lt;/code&gt;新增路径到path2D对象中，它还支持通过SVG格式的字符串导入为路径。&lt;/p&gt;
&lt;h2 id=&#34;样式&#34;&gt;&lt;a href=&#34;#样式&#34; class=&#34;headerlink&#34; title=&#34;样式&#34;&gt;&lt;/a&gt;样式&lt;/h2&gt;&lt;p&gt;通过修改&lt;code&gt;fillStyle&lt;/code&gt;和&lt;code&gt;strokeStyle&lt;/code&gt;改变当前填充和描边的默认颜色。支持的颜色格式有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;颜色名&lt;/li&gt;
&lt;li&gt;hex&lt;/li&gt;
&lt;li&gt;rgb&lt;/li&gt;
&lt;li&gt;rgba&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过&lt;code&gt;globalAlpha&lt;/code&gt;修改画布里的所有图形的透明度，取值在0到1之间。&lt;/p&gt;
&lt;p&gt;线型样式选择有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lineWidth &amp;#x3D; value 设置线条宽度。&lt;/li&gt;
&lt;li&gt;lineCap &amp;#x3D; type 设置线条末端样式。默认为butt，还有round、square可选。&lt;/li&gt;
&lt;li&gt;lineJoin &amp;#x3D; type 设定线条与线条间接合处的样式。round, bevel 和 miter三种可选，miter时，miterLimit可以限制尖角的高度。&lt;/li&gt;
&lt;li&gt;miterLimit &amp;#x3D; value 限制当两条线相交时交接处最大长度；所谓交接处长度（斜接长度）是指线条交接处内角顶点到外角顶点的长度&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;设置虚线时，&lt;code&gt;setLineDash(segments)&lt;/code&gt;设置当前虚线样式。&lt;code&gt;lineDashOffset = value&lt;/code&gt;设置虚线样式的起始偏移量。&lt;code&gt;getLineDash()&lt;/code&gt;返回一个包含当前虚线样式，长度为非负偶数的数组。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;渐变&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;渐变需要先指定类型和覆盖范围：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;createLinearGradient(x1, y1, x2, y2)&lt;/code&gt; 方法接受4个参数，表示渐变的起点 (x1,y1) 与终点 (x2,y2)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;createRadialGradient(x1, y1, r1, x2, y2, r2)&lt;/code&gt; 方法接受6个参数，前三个定义一个以 (x1,y1) 为原点，半径为r1的圆，后三个参数则定义另一个以 (x2,y2) 为原点，半径为r2的圆。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;创建的渐变通过&lt;code&gt;addColorStop(position, color)&lt;/code&gt;添加多个color stop。position参数是一个0.0与1.0之间的数值，表示渐变中颜色所在的相对位置。&lt;strong&gt;渐变是一种样式，通过指定给fillStyle或是strokeStyle发挥作用&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;模式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过&lt;code&gt;createPattern(image, type)&lt;/code&gt;创建pattern，Image可以是一个Image对象的引用，或者另一个canvas对象。Type描述重复的格式，是下面的字符串值之一：repeat，repeat-x，repeat-y 和 no-repeat。&lt;/p&gt;
&lt;p&gt;同样，通过指定给&lt;code&gt;fillStyle&lt;/code&gt;和&lt;code&gt;strokeStyle&lt;/code&gt;使用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;阴影&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;shadowOffsetX &amp;#x3D; float&lt;/li&gt;
&lt;li&gt;shadowOffsetY &amp;#x3D; float&lt;br&gt;shadowOffsetX和shadowOffsetY用来设定阴影在X和Y轴的延伸距离，它们是不受变换矩阵所影响的。负值表示阴影会往上或左延伸，正值则表示会往下或右延伸，它们默认都为0。&lt;/li&gt;
&lt;li&gt;shadowBlur &amp;#x3D; float shadowBlur 用于设定阴影的模糊程度，默认为 0。&lt;/li&gt;
&lt;li&gt;shadowColor &amp;#x3D; color，默认为黑色&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;canvas有两种填充规则&lt;a href=&#34;https://en.wikipedia.org/wiki/Nonzero-rule&#34;&gt;&lt;code&gt;non-zero&lt;/code&gt;&lt;/a&gt;和&lt;code&gt;even-odd&lt;/code&gt;，默认为前者。&lt;/p&gt;
&lt;h2 id=&#34;文字&#34;&gt;&lt;a href=&#34;#文字&#34; class=&#34;headerlink&#34; title=&#34;文字&#34;&gt;&lt;/a&gt;文字&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fillText(text, x, y [, maxWidth])&lt;/code&gt; 在指定的(x,y)位置填充指定的文本，绘制的最大宽度是可选的&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strokeText(text, x, y [, maxWidth])&lt;/code&gt; 在指定的(x,y)位置绘制文本边框，绘制的最大宽度是可选的&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ctx.&lt;span class=&#34;property&#34;&gt;font&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;quot;48px PingFangSC&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ctx.&lt;span class=&#34;title function_&#34;&gt;strokeText&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Hello world&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;除了&lt;code&gt;font&lt;/code&gt;（语法和CSS的font相同）外，还有下面的选择：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;textAlign &amp;#x3D; value 文本对齐选项. 可选的值包括：start, end, left, right or center. 默认值是 start。&lt;/li&gt;
&lt;li&gt;textBaseline &amp;#x3D; value 基线对齐选项. 可选的值包括：top, hanging, middle, alphabetic, ideographic, bottom。默认值是 alphabetic。&lt;/li&gt;
&lt;li&gt;direction &amp;#x3D; value 文本方向&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，可以通过&lt;code&gt;measureText()&lt;/code&gt;，得到文本绘制的宽度。&lt;/p&gt;
&lt;h2 id=&#34;使用图片&#34;&gt;&lt;a href=&#34;#使用图片&#34; class=&#34;headerlink&#34; title=&#34;使用图片&#34;&gt;&lt;/a&gt;使用图片&lt;/h2&gt;&lt;p&gt;canvas里可以引入Image对象或其他canvas元素，或者通过URL方式使用图片。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用相同页面内的图片，使用正常地获取元素的方式获取即可&lt;/li&gt;
&lt;li&gt;使用其它域名下的图片，在HTMLImageElement上使用&lt;code&gt;crossOrigin&lt;/code&gt;属性，可以请求加载其它域名上的图片。若服务器不允许跨域加载，则会污染canvas，即不能导出数据&lt;/li&gt;
&lt;li&gt;使用canvas，按获取元素的方式获取即可&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;image可以指定&lt;code&gt;src&lt;/code&gt;属性为URL或&lt;code&gt;data:url&lt;/code&gt;的形式。甚至引入&lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt;使用视频帧作为image。绘制图片时，使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;drawImage(image, x, y)&lt;/code&gt; 其中image是image或者canvas对象，x和y是其在目标canvas里的起始坐标。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight)&lt;/code&gt;是包含了缩放和切片后完整的&lt;code&gt;drawImage&lt;/code&gt;用法&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;变形和裁剪&#34;&gt;&lt;a href=&#34;#变形和裁剪&#34; class=&#34;headerlink&#34; title=&#34;变形和裁剪&#34;&gt;&lt;/a&gt;变形和裁剪&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;save&lt;/strong&gt;和&lt;strong&gt;restore&lt;/strong&gt;用来保存和恢复canvas状态。每当&lt;code&gt;save()&lt;/code&gt;方法被调用后，当前的状态就被推送到栈中保存。状态包括所有变形、样式信息。每次&lt;code&gt;restore&lt;/code&gt;时会弹出栈顶的状态。&lt;strong&gt;建议在做变形和裁剪前保存状态&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;变形用到的属性和CSS很像：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;translate(x,y)&lt;/code&gt;改变当前原点位置，&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rotate(angle)&lt;/code&gt;以当前原点为圆心旋转画布，angle为弧度值。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scale(x, y)&lt;/code&gt;缩放当前canvas中的图形大小，x和y分别表示两轴上的缩放因子&lt;/li&gt;
&lt;li&gt;&lt;code&gt;transform(m11, m12, m21, m22, dx, dy)&lt;/code&gt;通过变形矩阵进行变换&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setTransform(m11, m12, m21, m22, dx, dy)&lt;/code&gt;先还原为单位矩阵，再按入参的矩阵变换&lt;/li&gt;
&lt;li&gt;&lt;code&gt;resetTransform&lt;/code&gt;重置变形为单位矩阵&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;globalCompositeOperation&lt;/code&gt;定义了图形相互重叠时的处理策略，类似PS中图层的混合模式，默认为&lt;code&gt;darker&lt;/code&gt;，还有很多&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation&#34;&gt;别的选项&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;clip()&lt;/code&gt;即裁剪方法，和&lt;code&gt;fill&lt;/code&gt;以及&lt;code&gt;stroke&lt;/code&gt;类似，不过&lt;code&gt;clip&lt;/code&gt;将路径对应的部分裁剪出指定区域。&lt;/p&gt;
&lt;h2 id=&#34;动画&#34;&gt;&lt;a href=&#34;#动画&#34; class=&#34;headerlink&#34; title=&#34;动画&#34;&gt;&lt;/a&gt;动画&lt;/h2&gt;&lt;p&gt;canvas只是一个画布，画出的东西都会保持原样。制作动画只能采取重绘，逐帧绘制，而每一帧包括下面几步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;清空canvas，可以使用&lt;code&gt;clearRect&lt;/code&gt;方法&lt;/li&gt;
&lt;li&gt;&lt;em&gt;可选&lt;/em&gt;，保存当前状态&lt;/li&gt;
&lt;li&gt;使用上面提过的种种方法绘制下一帧&lt;/li&gt;
&lt;li&gt;&lt;em&gt;可选&lt;/em&gt;，恢复状态&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;绘制动画通常要结合用户交互以及&lt;code&gt;setTimeout&lt;/code&gt;，&lt;code&gt;setInterval&lt;/code&gt;，&lt;code&gt;requestAnimationFrame&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;MDN给个一个&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial/Advanced_animations&#34;&gt;小球的组合动画&lt;/a&gt;可以参考。&lt;/p&gt;
&lt;h2 id=&#34;像素级操作&#34;&gt;&lt;a href=&#34;#像素级操作&#34; class=&#34;headerlink&#34; title=&#34;像素级操作&#34;&gt;&lt;/a&gt;像素级操作&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ImageData&lt;/code&gt;接口描述&lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;元素的一个包含像素数据的区域。它包含&lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;, &lt;code&gt;data&lt;/code&gt;单个只读属性。&lt;code&gt;ImageData&lt;/code&gt;可以通过&lt;code&gt;ctx.createImageData(width, height)&lt;/code&gt;或者从已有对象中创建，除此创建的所有像素都是透明黑。&lt;/p&gt;
&lt;p&gt;可以用&lt;code&gt;getImageData(left, top, width, height)&lt;/code&gt;方法获取指定范围的&lt;code&gt;ImageData&lt;/code&gt;信息，当&lt;code&gt;width&lt;/code&gt;和&lt;code&gt;height&lt;/code&gt;都为1时，取得当前像素信息。&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;putImageData(imageData, dx, dy)&lt;/code&gt;可以在当前画布(dx, dy)处绘制imageData像素数据。&lt;code&gt;imageSmoothingEnabled&lt;/code&gt;默认开启，关闭后可以在图片缩放时看到清楚颗粒化的细节。&lt;/p&gt;
&lt;h2 id=&#34;导出&#34;&gt;&lt;a href=&#34;#导出&#34; class=&#34;headerlink&#34; title=&#34;导出&#34;&gt;&lt;/a&gt;导出&lt;/h2&gt;&lt;p&gt;主要有三种用法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;canvas.toDataURL(&amp;#39;image/png&amp;#39;)&lt;/code&gt;，默认将canvas导出成png文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;canvas.toDataURL(&amp;#39;image/jpeg&amp;#39;, quality)&lt;/code&gt;，quality指定在0到1之间，默认为0.92。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;canvas.toBlob(callback, type, encoderOptions)&lt;/code&gt;，这个创建了一个在画布中的代表图片的Blob对像&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;toDataURL&lt;/code&gt;除了上面两种导出格式还有别的选择。&lt;/p&gt;
&lt;h2 id=&#34;交互&#34;&gt;&lt;a href=&#34;#交互&#34; class=&#34;headerlink&#34; title=&#34;交互&#34;&gt;&lt;/a&gt;交互&lt;/h2&gt;&lt;p&gt;&lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;标签只是一个位图，它并不提供任何已经绘制在上面的对象的信息。canvas的内容不能像语义化的HTML一样暴露给一些协助工具。一般来说，你应该避免在交互型的网站或者App上使用canvas。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;addHitRegion(options)&lt;/code&gt;可以将添加一个点击区域，options可以参考&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/addHitRegion&#34;&gt;MDN文档&lt;/a&gt;，鼠标事件如果触发在点击区域中，会带上region用于定位点击区域。&lt;/p&gt;
&lt;p&gt;另外&lt;code&gt;drawFocusIfNeeded()&lt;/code&gt;和&lt;code&gt;scrollPathIntoView()&lt;/code&gt;方法还可以绘制焦点圈。&lt;/p&gt;
&lt;h2 id=&#34;性能问题&#34;&gt;&lt;a href=&#34;#性能问题&#34; class=&#34;headerlink&#34; title=&#34;性能问题&#34;&gt;&lt;/a&gt;性能问题&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;预渲染相似或重复对象&lt;/li&gt;
&lt;li&gt;为了避免抗锯齿带来的额外运算，减少使用浮点数&lt;/li&gt;
&lt;li&gt;在离屏canvas中缓存图片的不同尺寸，不要用&lt;code&gt;drawImage()&lt;/code&gt;去缩放它们&lt;/li&gt;
&lt;li&gt;使用多层画布去画一个复杂的场景，比如使用多层画布，描绘不同层级的内容。  &lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;div id=&lt;span class=&#34;string&#34;&gt;&amp;quot;stage&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;language-xml&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;canvas&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;ui-layer&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;width&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;480&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;height&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;320&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;canvas&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;language-xml&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;canvas&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;game-layer&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;width&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;480&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;height&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;320&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;canvas&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;language-xml&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;canvas&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;background-layer&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;width&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;480&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;height&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;320&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;canvas&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;用CSS画大的背景图&lt;/li&gt;
&lt;li&gt;用CSS transforms特性缩放画布，建议不要将小画布放大，而是去将大画布缩小&lt;/li&gt;
&lt;li&gt;尽可能避免text rendering&lt;/li&gt;
&lt;li&gt;尽可能避免 shadowBlur&lt;/li&gt;
&lt;li&gt;&lt;code&gt;window.requestAnimationFrame()&lt;/code&gt;性能优于&lt;code&gt;window.setInterval()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="canvas" />
        <category term="绘图" />
        <category term="动画" />
        <updated>2018-05-14T13:28:01.000Z</updated>
    </entry>
    <entry>
        <id>http://shenlvmeng.github.com/blog/2017/02/28/request-animation-frame/</id>
        <title>JS动画之requestAnimationFrame</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2017/02/28/request-animation-frame/"/>
        <content type="html">&lt;p&gt;CSS3中提供了animation的特性，用来通过指定关键帧（@kenframe）来实现动画效果。这么做方便高效。但是浏览器的兼容效果则比较捉急，且不能实现高级的缓动函数，更别说暂停、回放、倒放等功能了。所以大部分炫酷的动画还是采用JS动画来完成。&lt;/p&gt;
&lt;p&gt;传统的JS动画无非是通过setInterval或是setTimeout定时器函数实现。这在对动画实时性以及流畅性要求不高时没有什么问题。不过当&lt;a href=&#34;https://shenlvmeng.github.io/blog/2017/02/27/event-loop/&#34;&gt;消息队列&lt;/a&gt;较拥挤时，定时效果不能得到保障。同时不同浏览器的UI渲染频率各不相同，很可能与用户设置的时间间隔相冲突。如，相当一部分浏览器的显示频率是16.7ms，此时如果我们设置的时延是10ms就会出现丢帧的情况。为了解决这个问题，requestAnimationFrame千呼万唤始出来。&lt;/p&gt;
&lt;p&gt;requestAnimationFrame是window对象在HTML5中的新API。它的使用方法与setTimeout类似，不同的是，requestAnimationFrame()方法将告诉浏览器您希望执行动画，并请求浏览器调用指定的函数在下一次重绘之前调用回调函数更新动画。从而，不同的动画有了一个统一的刷新机制，可以提升系统性能，节省了CPU、GPU和电池等（CSS中的&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/will-change&#34;&gt;will-change&lt;/a&gt;也发挥着类似功能）。&lt;/p&gt;
&lt;p&gt;那么requestAnimationFrame的兼容性如何呢？&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/blog/images/request-animation-frame-graph-1.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;好像还不错。在老版本的浏览器上，也有shim方法来实现同样的效果，借助了setTimeout函数。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;use strict&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; lastTime = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        vendors = [&lt;span class=&#34;string&#34;&gt;&amp;#x27;ms&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;moz&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;webkit&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;o&amp;#x27;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (x = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; x &amp;lt; vendors.&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt; &amp;amp;&amp;amp; !&lt;span class=&#34;variable language_&#34;&gt;window&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;requestAnimationFrame&lt;/span&gt;; ++x) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;window&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;requestAnimationFrame&lt;/span&gt; = &lt;span class=&#34;variable language_&#34;&gt;window&lt;/span&gt;[vendors[x] + &lt;span class=&#34;string&#34;&gt;&amp;#x27;RequestAnimationFrame&amp;#x27;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;window&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;cancelAnimationFrame&lt;/span&gt;  = &lt;span class=&#34;variable language_&#34;&gt;window&lt;/span&gt;[vendors[x] + &lt;span class=&#34;string&#34;&gt;&amp;#x27;CancelAnimationFrame&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                   || &lt;span class=&#34;variable language_&#34;&gt;window&lt;/span&gt;[vendors[x] + &lt;span class=&#34;string&#34;&gt;&amp;#x27;CancelRequestAnimationFrame&amp;#x27;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!&lt;span class=&#34;variable language_&#34;&gt;window&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;requestAnimationFrame&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;window&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;requestAnimationFrame&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;callback&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; currTime = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Date&lt;/span&gt;().&lt;span class=&#34;title function_&#34;&gt;getTime&lt;/span&gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                timeToCall = &lt;span class=&#34;title class_&#34;&gt;Math&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;max&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt; - (currTime - lastTime)),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                id = &lt;span class=&#34;variable language_&#34;&gt;window&lt;/span&gt;.&lt;span class=&#34;built_in&#34;&gt;setTimeout&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;title function_&#34;&gt;callback&lt;/span&gt;(currTime + timeToCall);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;, timeToCall);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            lastTime = currTime + timeToCall;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; id;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!&lt;span class=&#34;variable language_&#34;&gt;window&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;cancelAnimationFrame&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;window&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;cancelAnimationFrame&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;id&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;variable language_&#34;&gt;window&lt;/span&gt;.&lt;span class=&#34;built_in&#34;&gt;clearTimeout&lt;/span&gt;(id);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;那么requestAnimationFrame怎么用呢。语法像下面这样。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;requestID = &lt;span class=&#34;variable language_&#34;&gt;window&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;requestAnimationFrame&lt;/span&gt;(callback);               &lt;span class=&#34;comment&#34;&gt;// Firefox 23 / IE10 / Chrome / Safari 7 (incl. iOS)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;requestID = &lt;span class=&#34;variable language_&#34;&gt;window&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;mozRequestAnimationFrame&lt;/span&gt;(callback);                &lt;span class=&#34;comment&#34;&gt;// Firefox &amp;lt; 23&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;requestID = &lt;span class=&#34;variable language_&#34;&gt;window&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;webkitRequestAnimationFrame&lt;/span&gt;(callback); &lt;span class=&#34;comment&#34;&gt;// Older versions Chrome/Webkit&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;注意它只接受回调函数作为参数，不需要指定延时哦。同样的，相对应的还有一个&lt;code&gt;cancelAnimationFrame(requestID)&lt;/code&gt;方法取消重绘。最常见的用法是在一个动画函数里通过requestAnimationFrame循环调用自身。就像下面这样。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;funFall = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; start = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, during = &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; _run = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        start++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; top = &lt;span class=&#34;title class_&#34;&gt;Tween&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;Bounce&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;easeOut&lt;/span&gt;(start, objBall.&lt;span class=&#34;property&#34;&gt;top&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;500&lt;/span&gt; - objBall.&lt;span class=&#34;property&#34;&gt;top&lt;/span&gt;, during);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ball.&lt;span class=&#34;title function_&#34;&gt;css&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;top&amp;quot;&lt;/span&gt;, top);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;shadowWithBall&lt;/span&gt;(top);    &lt;span class=&#34;comment&#34;&gt;// 投影跟随小球的动&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (start &amp;lt; during) &lt;span class=&#34;title function_&#34;&gt;requestAnimationFrame&lt;/span&gt;(_run);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;_run&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <category term="动画" />
        <category term="JavaScript" />
        <category term="requestAnimationFrame" />
        <updated>2017-02-28T09:06:47.000Z</updated>
    </entry>
</feed>
