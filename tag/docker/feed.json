{
    "version": "https://jsonfeed.org/version/1",
    "title": "Shenlvmeng's Blog • All posts by \"docker\" tag",
    "description": "Be sharp, my friend.",
    "home_page_url": "http://shenlvmeng.github.com/blog",
    "items": [
        {
            "id": "http://shenlvmeng.github.com/blog/2015/03/11/docker-install-onos-environment/",
            "url": "http://shenlvmeng.github.com/blog/2015/03/11/docker-install-onos-environment/",
            "title": "Docker安装与ONOS实验环境搭建",
            "date_published": "2015-03-11T12:57:15.000Z",
            "content_html": "<p><img src=\"/blog/docker-logo.jpg\" alt=\"Docker\"></p>\n<h2 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h2><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的Linux机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。总之就是轻便型的虚拟环境。</p>\n<p>考虑到ONOS的实验环境搭建不易，Docker有助于我们移植搭建好的环境。</p>\n<h3 id=\"Docker安装\"><a href=\"#Docker安装\" class=\"headerlink\" title=\"Docker安装\"></a>Docker安装</h3><p>1、安装软件包apt-transport-https，使APT系统能够被https解析</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install apt-transport-https</span><br></pre></td></tr></table></figure>\n<p>2、添加Docker repository key到本地keychain</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9</span><br></pre></td></tr></table></figure>\n<p>3、添加docker软件仓库到软件源，升级软件源，安装lxc-docker包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo sh -c <span class=\"string\">&quot;echo deb https://get.docker.com/ubuntu docker main &amp;gt; /etc/apt/sources.list.d/docker.list&quot;</span></span><br><span class=\"line\">$ sudo apt - get update</span><br><span class=\"line\">$ sudo apt-get install lxc-docker</span><br></pre></td></tr></table></figure>\n<p>注：上述操作可以使用下面的脚本完成。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -sSL https://get.docker.com/ubuntu/ | sudo sh</span><br></pre></td></tr></table></figure>\n<p>4、验证docker安装完成，可以使用下面命令测试</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo docker run -i -t ubuntu /bin/bash</span><br></pre></td></tr></table></figure>\n<p>-i interactive， -t tty， -p port可以多次使用指定多个Port映射， -P端口映射随机分配</p>\n<h2 id=\"ONOS（Open-Network-Operation-System）\"><a href=\"#ONOS（Open-Network-Operation-System）\" class=\"headerlink\" title=\"ONOS（Open Network Operation System）\"></a>ONOS（Open Network Operation System）</h2><p>ONOS是首款开源的SDN网络操作系统，主要面向服务提供商和企业骨干网。ONOS的设计宗旨是满足网络需求实现可靠性强、性能好、灵活度高。此外，ONOS的北向接口抽象层和API支持简单的应用开发，而通过南向接口抽象层和接口则可以管控OpenFlow或者传统设备。总体来说，ONOS将会实现以下功能：</p>\n<ul>\n<li>SDN控制层面实现电信级特征（可靠性强，性能好，灵活度高）；</li>\n<li>提供网络敏捷性强有力保证；</li>\n<li>帮助服务提供商从现有网络迁移到白牌设备；</li>\n<li>减少服务提供商的资本开支和运营开支。<br>下面介绍ONOS安装<strong>（Ubuntu源码安装）</strong></li>\n</ul>\n<h3 id=\"1-系统要求\"><a href=\"#1-系统要求\" class=\"headerlink\" title=\"1 系统要求\"></a>1 系统要求</h3><p>安装ONOS对操作系统有如下要求</p>\n<ul>\n<li>Ubuntu Server 14.04 LTS 64-bit</li>\n<li>2GB or more RAM</li>\n<li>2 or more processors</li>\n</ul>\n<p>需要安装如下软件，如果不用git获取源码，GIT可以不需要安装。</p>\n<ul>\n<li>Java 8 JDK (Oracle Java recommended; OpenJDK is not as thoroughly tested)</li>\n<li>Apache Maven (3.0 and later)</li>\n<li>git</li>\n<li>bash (for packaging &amp; testing)</li>\n<li>Apache Karaf (3.0.2 and later)</li>\n</ul>\n<h3 id=\"2-安装依赖\"><a href=\"#2-安装依赖\" class=\"headerlink\" title=\"2 安装依赖\"></a>2 安装依赖</h3><h4 id=\"安装apache-karaf和apache-maven\"><a href=\"#安装apache-karaf和apache-maven\" class=\"headerlink\" title=\"安装apache-karaf和apache-maven\"></a>安装apache-karaf和apache-maven</h4><p>apache-karaf的版本为3.0.2或以上版本，apache-maven的版本至少为3.0，这里使用版本3.2.2。创建<del>&#x2F;Applications目录。之所以要安装到这个目录，是因为onos源码中已经设置将apache-karaf、apache-maven放到</del>&#x2F;Applications目录。这个目录也可以通过更改~&#x2F;onos&#x2F;tools&#x2F;dev&#x2F;bash_profile修改，但是为了避免不必要的操作，这里按照默认创建文件夹。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span>; <span class=\"built_in\">mkdir</span> Downloads Applications</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> Downloads</span><br><span class=\"line\">$ wget http://download.nextag.com/apache/karaf/3.0.2/apache-karaf-3.0.2.tar.gz</span><br><span class=\"line\">$ wget http://www.apache.org/dist/maven/binaries/apache-maven-3.2.2-bin.tar.gz</span><br><span class=\"line\">$ tar -zxvf apache-karaf-3.0.2.tar.gz -C ../Applications/</span><br><span class=\"line\">$ tar -zxvf apache-maven-3.2.2-bin.tar.gz -C ../Applications/ </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装java8\"><a href=\"#安装java8\" class=\"headerlink\" title=\"安装java8\"></a>安装java8</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install software-properties-common -y</span><br><span class=\"line\">$ sudo add-apt-repository ppa:webupd8team/java -y</span><br><span class=\"line\">$ sudo apt-get update</span><br><span class=\"line\">$ sudo apt-get install oracle-java8-installer oracle-java8-set-default -y</span><br></pre></td></tr></table></figure>\n<p>正确安装后，java -version和mvn –version打印的java版本应该一致。</p>\n<h3 id=\"3-安装-ONOS\"><a href=\"#3-安装-ONOS\" class=\"headerlink\" title=\"3 安装 ONOS\"></a>3 安装 ONOS</h3><h4 id=\"下载ONOS源码\"><a href=\"#下载ONOS源码\" class=\"headerlink\" title=\"下载ONOS源码\"></a>下载ONOS源码</h4><p>将ONOS源码下载到合适的目录（笔者放在&#x2F;home目录下），切换到1.0.0分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://gerrit.onosproject.org/onos -b 1.0.0</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"环境设置\"><a href=\"#环境设置\" class=\"headerlink\" title=\"环境设置\"></a>环境设置</h4><p>安装ONOS之前，需要设置ONOS_ROOT和KARAF_ROOT等路径，切换到root权限用户，在&#x2F;etc&#x2F;profile文件的最后添加如下设置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export ONOS_ROOT=/home/onos/onos-onos-1.0</span><br><span class=\"line\">export KARAF_ROOT=/root/Applications/apache-karaf-3.0.2</span><br><span class=\"line\">export JAVA_HOME=/usr/lib/jvm/java-8-oracle</span><br><span class=\"line\">export M2_HOME=/usr/local/apache-maven</span><br><span class=\"line\">export PATH=$PATH:$M2_HOME/bin </span><br></pre></td></tr></table></figure>\n<p>保存后执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">source</span> /etc/profile</span><br><span class=\"line\">$ <span class=\"built_in\">source</span> <span class=\"variable\">$ONOS_ROOT</span>/tools/dev/bash_profile</span><br></pre></td></tr></table></figure>\n<p>如果没有报错，则表示执行成功<br>可能的错误有：</p>\n<ul>\n<li>No such file or directory</li>\n<li>No such cell: local</li>\n</ul>\n<h4 id=\"构建ONOS\"><a href=\"#构建ONOS\" class=\"headerlink\" title=\"构建ONOS\"></a>构建ONOS</h4><p>以上的步骤一切顺利后，可以开始构建ONOS，执行下列命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> onos/ //目录可能因人而异</span><br><span class=\"line\">$ mvn clean install</span><br></pre></td></tr></table></figure>\n<p>安装需要5~10分钟不等.</p>\n<h4 id=\"运行ONOS\"><a href=\"#运行ONOS\" class=\"headerlink\" title=\"运行ONOS\"></a>运行ONOS</h4><p>需要编辑$KARAF_ROOT&#x2F;etc&#x2F;org.apache.karaf.features.cfg文件</p>\n<p>添加下面的内容到 featuresRepositories：<br>mvn:org.onosproject&#x2F;onos-features&#x2F;1.0.0&#x2F;xml&#x2F;features</p>\n<p>接着添加下面的内容到featuresBoot：<br>onos-api,onos-core-trivial,onos-cli,onos-openflow,onos-app-fwd,onos-app-mobility,onos-gui</p>\n<p>之后就可以启动ONOS了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ karaf clean</span><br></pre></td></tr></table></figure>\n<p>启动时间较长，请耐心等待。</p>\n<p>但是，Ubuntu源码安装并不总是能够成功的。在执行ONOS_ROOT&#x2F;tools&#x2F;dev&#x2F;bash_profile和构建ONOS时，很容易出错。Docker在这时能发挥它应有的作用。</p>\n<h2 id=\"Docker搭建ONOS环境\"><a href=\"#Docker搭建ONOS环境\" class=\"headerlink\" title=\"Docker搭建ONOS环境\"></a>Docker搭建ONOS环境</h2><p>声明：建议使用root用户做以下操作，可以省去sudo的麻烦</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo -s</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-获取ONOS镜像\"><a href=\"#1-获取ONOS镜像\" class=\"headerlink\" title=\"1 获取ONOS镜像\"></a>1 获取ONOS镜像</h3><h4 id=\"搜索镜像\"><a href=\"#搜索镜像\" class=\"headerlink\" title=\"搜索镜像\"></a>搜索镜像</h4><p>执行“docker search onos”来搜索相关的镜像，可以从STARS来确定资源的好坏。因为ONOS刚出来不久，还没有最完美的镜像。这里我们选择“ywang1007&#x2F;onos-buildenv”镜像。</p>\n<h4 id=\"下载镜像\"><a href=\"#下载镜像\" class=\"headerlink\" title=\"下载镜像\"></a>下载镜像</h4><p>下载选择的ONOS镜像到本地机器，这里需要花费一段时间。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker pull ywang1007/onos-buildenv</span></span><br></pre></td></tr></table></figure>\n<p>pull 后面加上 -a可以下载该镜像的所有版本</p>\n<h4 id=\"查看镜像\"><a href=\"#查看镜像\" class=\"headerlink\" title=\"查看镜像\"></a>查看镜像</h4><p>查看已经下载好的镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker images</span></span><br></pre></td></tr></table></figure>\n<p>里面已经包含了下载好的镜像</p>\n<h4 id=\"创建容器\"><a href=\"#创建容器\" class=\"headerlink\" title=\"创建容器\"></a>创建容器</h4><p>为了展开实验，我们需要创建一个容器，进行镜像内的实验。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker run -i -t -p 0.0.0.0:6633:6633  -p 0.0.0.0:8181:8181 --name ONOS ywang1007/onos-buildenv /bin/bash</span></span><br></pre></td></tr></table></figure>\n<p>值得说的是，ONOS有web界面，端口是8181，为了可以页面访问ONOS，要做两个端口绑定。容器的6633端口绑定到主机的6633端口，容器的8181端口绑定到主机的8181端口。之后宿主机器访问“<a href=\"http://your/\">http://your</a> ip address:8181&#x2F;onos&#x2F;ui&#x2F;index.html”即可查看ONOS状态。</p>\n<p>创建好后，可以使用“docker ps -a”来查看当前容器情况。</p>\n<p>-a 全部 -l 最新<br>和Docker容器相关的命令有</p>\n<ul>\n<li>docker start 启动某个容器</li>\n<li>docker stop 关闭某个容器</li>\n<li>docker attach 连接到某个正在运行的容器</li>\n<li>docker rm 移除某个停止运行的容器</li>\n</ul>\n<p>docker的相关命令可以通过docker –help来得到</p>\n<p>之后的操作类似于上一节介绍的，搭建环境，建构运行ONOS。在宿主机器上运行mininet，使用pingall命令，可以证明onos已经在工作。过程略。</p>\n<p>好不容易搭建好的onos环境最好用新镜像的方式存储起来，方便下次直接使用。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker commit xxx onos-1.0.0 //提交一个新的镜像</span></span><br><span class=\"line\"><span class=\"comment\"># docker save onos-1.0.0 &amp;gt; /home/zinc-fnl/onos-1.0.0.tar //将新镜像保存起来</span></span><br><span class=\"line\"><span class=\"comment\"># docker load &amp;lt; /hoe/zinc-fnl/onos-1.0.0.tar</span></span><br></pre></td></tr></table></figure>\n<p>此时再次查看本机的镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker images</span></span><br></pre></td></tr></table></figure>\n<p>就会发现刚才保存的新的镜像。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>本文主要介绍了docker的安装与简单使用以及ONOS的环境搭建。从中可以看到docker对于快速搭建实验环境有很大帮助，相信未来会有长远的发展。另外，这里对ONOS的性能并未做详细分析，笔者将在日后通过实验对ONOS进行考察。</p>\n<h3 id=\"副产品\"><a href=\"#副产品\" class=\"headerlink\" title=\"副产品\"></a>副产品</h3><p>实验过程中，因为对profile文件做过修改，曾出现过开机无法登陆的情况。orz..</p>\n<p>问题：登录成功后，自动跳转回登陆页面</p>\n<p>解决方法：</p>\n<ol>\n<li>Ctrl+Alt_F1切换到文本模式</li>\n<li>将在profile和bash_profile做过的修改撤销掉</li>\n<li>find Xauthor* 将查到的所有文件要么sudo chmod 777 要么rm掉</li>\n<li>startx切换回来重新登录即可</li>\n</ol>\n",
            "tags": [
                "Docker",
                "ONOS",
                "控制器",
                "虚拟化"
            ]
        }
    ]
}