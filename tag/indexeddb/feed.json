{
    "version": "https://jsonfeed.org/version/1",
    "title": "Shenlvmeng's Blog • All posts by \"indexeddb\" tag",
    "description": "Be sharp, my friend.",
    "home_page_url": "http://shenlvmeng.github.com/blog",
    "items": [
        {
            "id": "http://shenlvmeng.github.com/blog/2019/03/12/indexeddb-introduction/",
            "url": "http://shenlvmeng.github.com/blog/2019/03/12/indexeddb-introduction/",
            "title": "Electron应用数据库选型暨indexedDB扫盲",
            "date_published": "2019-03-11T16:01:59.000Z",
            "content_html": "<blockquote>\n<p>名谓扫盲，实则扫自己的盲</p>\n</blockquote>\n<h2 id=\"选型\"><a href=\"#选型\" class=\"headerlink\" title=\"选型\"></a>选型</h2><p>要说到最近的一个个人项目<a href=\"https://github.com/shenlvmeng/calendone\">calendone</a>，它是一个普通的Electron日历应用，有每日记录，定计划等功能，需要做数据持久化。数据量不大，不需要考虑性能问题。简单看了些方案。</p>\n<h3 id=\"SQLite\"><a href=\"#SQLite\" class=\"headerlink\" title=\"SQLite\"></a>SQLite</h3><ul>\n<li><strong>关系型数据库</strong>，具有关系型数据库的一切特性，事务遵循ACID属性。小巧轻便，有knex这样的库做ORM。</li>\n<li>是node原生模块，需要重新编译，而且有坑</li>\n</ul>\n<h3 id=\"NeDB\"><a href=\"#NeDB\" class=\"headerlink\" title=\"NeDB\"></a>NeDB</h3><ul>\n<li><strong>NoSQL类型数据库</strong>，可以实现本地存储，也可以作为内存存储</li>\n<li><strong>API是MongoDB的一个子集</strong></li>\n<li>纯js实现，一个文件对应一张表</li>\n</ul>\n<h3 id=\"Leveldb\"><a href=\"#Leveldb\" class=\"headerlink\" title=\"Leveldb\"></a>Leveldb</h3><ul>\n<li><strong>NoSQL类型数据库</strong>，支持内存和持久化存储</li>\n<li><strong>没有事务机制</strong>，默认按key查询，没有索引</li>\n<li>默认保存的不是js对象，而是字符串。如果要保存为对象，可以在level函数第二个参数加入<code>&#123; valueEncoding: &quot;json&quot; &#125;</code>来让保存的js对象以json的形式读取</li>\n</ul>\n<h3 id=\"Lowdb\"><a href=\"#Lowdb\" class=\"headerlink\" title=\"Lowdb\"></a>Lowdb</h3><ul>\n<li>基于Loadsh的<strong>纯JSON文件数据库</strong>，速度较慢</li>\n<li>不支持索引&#x2F;事务&#x2F;批量操作等数据库功能</li>\n</ul>\n<h3 id=\"indexedDB\"><a href=\"#indexedDB\" class=\"headerlink\" title=\"indexedDB\"></a>indexedDB</h3><ul>\n<li><strong>NoSQL数据库</strong>，浏览器自带，可以储存大量数据，容量为250MB以上</li>\n<li>支持事务，有版本号的概念。</li>\n<li>支持较多的字段类型</li>\n</ul>\n<p>综上考虑，最后采用浏览器自带的indexedDB，足够满足要求，漫游接入成本，升级方便，调试方便。</p>\n<h2 id=\"indexedDB介绍\"><a href=\"#indexedDB介绍\" class=\"headerlink\" title=\"indexedDB介绍\"></a>indexedDB介绍</h2><p>indexedDB脱胎于HTML本地存储。</p>\n<h3 id=\"HTML本地存储\"><a href=\"#HTML本地存储\" class=\"headerlink\" title=\"HTML本地存储\"></a>HTML本地存储</h3><p>上古时代中，HTML中持久化数据只有几种方法[1]：</p>\n<ul>\n<li>cookie。cookie的缺点很明显，最多只能存储4KB的数据，且会携带在同域名下每个HTTP请求的头部，明文传输（除非你使用SSL）。</li>\n<li>IE userData。微软在上世纪90年代的浏览器大战时推出的本地存储方案，允许每个页面最多存储64K数据，每个站点最多640K数据，它不是Web标准的一部分</li>\n<li>Flash cookie。它实际上和HTTP cookie并不是一回事，它的名字可能叫做”Flash本地存储”更为合适。考虑到Flash已经是要被淘汰的技术……</li>\n</ul>\n<p>本地存储出现后，有了下面一些标准化的更简单的方法：</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API\">Web Storage接口</a>，即localStorage和sessionStorage</li>\n<li>Web SQL，这是一个<strong>已经废弃</strong>的规范。就跟它的名字一样，它就是浏览器端的一个SQL数据库，可以执行SQL语句。由于语法和SQLite绑定过紧，后被标准组织废弃</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/IndexedDB_API\">indexedDB</a>，Web SQL的替代品，也是浏览器端的数据库，但他是No SQL的。有MongoDB使用体验的，对它就不会感到陌生。</li>\n</ul>\n<h3 id=\"indexedDB-1\"><a href=\"#indexedDB-1\" class=\"headerlink\" title=\"indexedDB\"></a>indexedDB</h3><p>indexedDB是浏览器提供的本地数据库，目标是持久化存储大量数据，提供类No SQL的增删改查体验。因此它有以下几点特色：</p>\n<ul>\n<li><strong>键值对存储</strong>，采用对象仓库（object store）存放数据，所有类型的数据都可以直接存入，包括 JavaScript 对象。</li>\n<li><strong>支持索引</strong>，indexedDB没有表列的概念，但可以建立索引，查询数据时使用id或索引搜索</li>\n<li><strong>支持事务</strong>，保证操作的原子性，事务中的任意一步失败，数据库都会回滚到操作事务前的状态</li>\n<li><strong>异步操作</strong>，indexedDB操作都是异步的，在执行数据增删改查时，不会影响界面性能。</li>\n<li><strong>同源限制</strong>，每一个数据库会关联创建它的域名。网页只能访问自身域名下的数据库，不能跨域访问数据库。</li>\n<li><strong>其他</strong>，包括存储空间大、支持二进制存储等…</li>\n</ul>\n<h4 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h4><ul>\n<li><strong>数据库</strong>，IDBDatabase对象类型，每个域名（协议 + 域名 + 端口）可以新建任意多个数据库。</li>\n<li><strong>对象仓库</strong>，IDBObjectStore对象类型，一个数据库包含若干个对象仓库，类似于关系型数据库中的表</li>\n<li><strong>数据记录</strong>，类型于关系型数据库中的行，但是只有主键和数据体两部分。<strong>数据体可以是任意数据类型，不限于对象</strong>。</li>\n<li><strong>索引</strong>，IDBIndex对象类型，数据记录里除了主键以外的搜索参照</li>\n<li><strong>事务</strong>，IDBTransaction数据类型，对数据库的增删改查都需要通过事务进行，执行结果通过<code>error</code>，<code>success</code>，<code>abort</code>事件回调拿到</li>\n</ul>\n<p>indexedDB定义了许多对象接口，即API，除了上面介绍的一些，更完善的接口介绍可以参考MDN的介绍。</p>\n<h4 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h4><p>indexedDB 鼓励使用的基本模式如下所示：</p>\n<ol>\n<li>打开数据库。</li>\n<li>在数据库中创建一个对象仓库（object store）。</li>\n<li>启动一个事务，并发送一个请求来执行一些数据库操作，像增加或提取数据等。</li>\n<li>通过监听正确类型的DOM事件以等待操作完成。</li>\n<li>在操作结果上进行一些操作（可以在request对象中找到）</li>\n</ol>\n<p><strong>打开数据库</strong></p>\n<p>使用 IndexedDB 的第一步是打开数据库，使用indexedDB.open()方法如下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> request = <span class=\"variable language_\">window</span>.<span class=\"property\">indexedDB</span>.<span class=\"title function_\">open</span>(databaseName, version);</span><br></pre></td></tr></table></figure>\n\n<p>其中第一个参数为数据库名，第二个参数是数据库版本号。<code>indexedDB.open()</code>方法返回一个<code>IDBRequest</code>对象。这个对象通过三种事件error、success、upgradeneeded，处理打开数据库的操作结果。</p>\n<p>如果数据库不存在，open操作会创建该数据库，然后<code>onupgradeneeded</code>事件被触发，需要在该事件的处理函数中创建数据库模式。如果数据库已经存在，但指定了一个更高的数据库版本，会直接触发 <code>onupgradeneeded</code>事件，允许你在处理函数中更新数据库模式。</p>\n<p><strong>注意：这里的版本号是一个unsigned long long数字，使用浮点数是会被转化到最近的整数</strong></p>\n<p><strong>绑定处理函数</strong></p>\n<p>几乎所有我们产生的请求我们在处理的时候首先要做的就是添加成功和失败处理函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request.<span class=\"property\">onerror</span> = <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Do something with request.errorCode!</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">request.<span class=\"property\">onsuccess</span> = <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Do something with request.result!</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>如果一切顺利的话，相关request的<code>onsuccess()</code>处理函数就会被触发。如果不是所有事情都成功的话，<code>error </code>事件会在request上被触发。</p>\n<p><strong>新建数据库</strong></p>\n<p>新建数据库与打开数据库是同一个操作。不同之处在于，后续的操作主要在<code>upgradeneeded</code>事件的监听函数里面完成。通常新建数据库后，第一件事是新建对象仓库，即下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request.<span class=\"property\">onupgradeneeded</span> = <span class=\"keyword\">function</span> (<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  db = event.<span class=\"property\">target</span>.<span class=\"property\">result</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> objectStore;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!db.<span class=\"property\">objectStoreNames</span>.<span class=\"title function_\">contains</span>(<span class=\"string\">&#x27;person&#x27;</span>)) &#123;</span><br><span class=\"line\">    objectStore = db.<span class=\"title function_\">createObjectStore</span>(<span class=\"string\">&#x27;person&#x27;</span>, &#123; <span class=\"attr\">keyPath</span>: <span class=\"string\">&#x27;id&#x27;</span> &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面这段语句使用id作为对象仓库的主键，如果没有合适作为主键的属性，可以让indexedDB自动生成主键。为了便于查询，可以在数据仓库中建立索引。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> objectStore = db.<span class=\"title function_\">createObjectStore</span>(</span><br><span class=\"line\">  <span class=\"string\">&#x27;person&#x27;</span>,</span><br><span class=\"line\">  &#123; <span class=\"attr\">autoIncrement</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\">objectStore.<span class=\"title function_\">createIndex</span>(<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;name&#x27;</span>, &#123; <span class=\"attr\">unique</span>: <span class=\"literal\">false</span> &#125;);</span><br><span class=\"line\">objectStore.<span class=\"title function_\">createIndex</span>(<span class=\"string\">&#x27;email&#x27;</span>, <span class=\"string\">&#x27;email&#x27;</span>, &#123; <span class=\"attr\">unique</span>: <span class=\"literal\">true</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>增删改查</strong></p>\n<p>增删改查都通过事务进行。事务来自于数据库对象，必须指定你想让这个事务跨越哪些对象仓库。事务中有三种模式，表示你想对数据库进行的操作类型：</p>\n<ul>\n<li><code>readonly</code> <strong>默认</strong>，只读</li>\n<li><code>readwrite</code> 读写操作</li>\n<li><code>versionchange</code> 修改数据库模式或结构</li>\n</ul>\n<p>只在必要时指定 readwrite 事务。你可以同时执行多个readonly事务，哪怕它们的作用域有重叠；但对于在一个对象仓库上只能运行一个readwrite事务。</p>\n<p>增加一条数据的语句如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> transaction = db.<span class=\"title function_\">transaction</span>([<span class=\"string\">&quot;person&quot;</span>], <span class=\"string\">&quot;readwrite&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在所有数据添加完毕后的处理</span></span><br><span class=\"line\">transaction.<span class=\"property\">oncomplete</span> = <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;成功&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">transaction.<span class=\"property\">onerror</span> = <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;失败&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> objectStore = transaction.<span class=\"title function_\">objectStore</span>(<span class=\"string\">&quot;person&quot;</span>);</span><br><span class=\"line\">    .<span class=\"title function_\">add</span>(&#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;foo&#x27;</span>, <span class=\"attr\">email</span>: <span class=\"string\">&#x27;foo@bar.com&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>在有了数据后，可以通过几种方法对它进行提取。首先是简单的 <code>get()</code>，通过键获得值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> transaction = db.<span class=\"title function_\">transaction</span>([<span class=\"string\">&quot;person&quot;</span>]);</span><br><span class=\"line\"><span class=\"keyword\">var</span> objectStore = transaction.<span class=\"title function_\">objectStore</span>(<span class=\"string\">&quot;person&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> request = objectStore.<span class=\"title function_\">get</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">request.<span class=\"property\">onsuccess</span> = <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 对 request.result 做些操作！</span></span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(request.<span class=\"property\">result</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">request.<span class=\"property\">onerror</span> = <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;出错了&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在很多场景下你并不知道数据的键，这时可以用索引找到你要的数据。例子中的<code>name</code>属性可能并不是唯一的，在这种情况下，你总是得到键值最小的那个。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 前提是你已经建立了name索引</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> index = objectStore.<span class=\"title function_\">index</span>(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">index.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;foo&#x27;</span>).<span class=\"property\">onsuccess</span> = <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;foo&#x27;s id is &quot;</span> + event.<span class=\"property\">target</span>.<span class=\"property\">result</span>.<span class=\"property\">id</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在需要遍历某一范围的数据集合时，也可以使用<strong>游标</strong>，这里要用到<code>openCursor</code>方法。比如查询整个数据对象存储。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objectStore.<span class=\"title function_\">openCursor</span>().<span class=\"property\">onsuccess</span> = <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> cursor = event.<span class=\"property\">target</span>.<span class=\"property\">result</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (cursor) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(cursor.<span class=\"property\">value</span>);</span><br><span class=\"line\">    cursor.<span class=\"title function_\">continue</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;遍历结束&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><em>上面的功能也可以通过<code>getAll</code>完成，但是由于数据对象是懒生成的，<code>getAll</code>性能会有消耗。当然你如果想直接拿到整个数据组成的数组，还是<code>getAll</code>好点</em></p>\n<p>结合索引（IDBIndex）和游标（IDBCursor）可以查询指定索引的所有记录，方法<code>openCursor</code>和<code>openKeyCursor</code>分别返回不同的数据结构。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index.<span class=\"title function_\">openCursor</span>().<span class=\"property\">onsuccess</span> = <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> cursor = event.<span class=\"property\">target</span>.<span class=\"property\">result</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (cursor) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// cursor.key 是一个 name, 就像 &quot;Bill&quot;, 然后 cursor.value 是整个对象。</span></span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;Name: &quot;</span> + cursor.<span class=\"property\">key</span> + <span class=\"string\">&quot;, email: &quot;</span> + cursor.<span class=\"property\">value</span>.<span class=\"property\">email</span>);</span><br><span class=\"line\">    cursor.<span class=\"title function_\">continue</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">index.<span class=\"title function_\">openKeyCursor</span>().<span class=\"property\">onsuccess</span> = <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> cursor = event.<span class=\"property\">target</span>.<span class=\"property\">result</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (cursor) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// cursor.key 是一个 name, 就像 &quot;Bill&quot;, 然后 cursor.value是主键的值。</span></span><br><span class=\"line\">    <span class=\"comment\">// 没办法得到存储对象的其余部分。</span></span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;Name: &quot;</span> + cursor.<span class=\"property\">key</span> + <span class=\"string\">&quot;, id: &quot;</span> + cursor.<span class=\"property\">value</span>);</span><br><span class=\"line\">    cursor.<span class=\"title function_\">continue</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>更多游标设置参考<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/IndexedDB_API/Using_IndexedDB#%E6%8C%87%E5%AE%9A%E6%B8%B8%E6%A0%87%E7%9A%84%E8%8C%83%E5%9B%B4%E5%92%8C%E6%96%B9%E5%90%91\">mdn</a>的介绍。</p>\n<p>更新和删除数据，分别使用<code>put</code>和<code>delete</code>方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> request = db.<span class=\"title function_\">transaction</span>([<span class=\"string\">&#x27;person&#x27;</span>], <span class=\"string\">&#x27;readwrite&#x27;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">objectStore</span>(<span class=\"string\">&#x27;person&#x27;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">put</span>(&#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;李四&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">35</span>, <span class=\"attr\">email</span>: <span class=\"string\">&#x27;lisi@example.com&#x27;</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">request.<span class=\"property\">onsuccess</span> = <span class=\"keyword\">function</span> (<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;数据更新成功&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">request.<span class=\"property\">onerror</span> = <span class=\"keyword\">function</span> (<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;数据更新失败&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> request = db.<span class=\"title function_\">transaction</span>([<span class=\"string\">&#x27;person&#x27;</span>], <span class=\"string\">&#x27;readwrite&#x27;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">objectStore</span>(<span class=\"string\">&#x27;person&#x27;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">delete</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">request.<span class=\"property\">onsuccess</span> = <span class=\"keyword\">function</span> (<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;数据删除成功&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>其中put的数据为全量替换，可以通过get方法拿到数据后，修改特定值再交给put完成增量替换。</p>\n<h2 id=\"indexedDB封装库\"><a href=\"#indexedDB封装库\" class=\"headerlink\" title=\"indexedDB封装库\"></a>indexedDB封装库</h2><p>indexedDB虽然强大，但是有些API对于用户来说还是不够方便，下面是几个indexedDB的封装库：</p>\n<ul>\n<li><a href=\"https://localforage.github.io/localForage/\">localForage</a>，支持类Storage API语法的客户端数据存储polyfill，支持回退到Storage和Web SQL</li>\n<li><a href=\"https://dexie.org/\">dexie.js</a>，提供更友好和简单的语法便于快速的编码开发，<strong>有Typescript支持</strong>。</li>\n<li><a href=\"https://github.com/erikolson186/zangodb\">ZangoDB</a>，提供类MongoDB的接口实现，提供了许多MangoDB的特性实现</li>\n<li><a href=\"http://jsstore.net/\">JsStore</a>，提供基于indexedDB的类SQL的语法实现。</li>\n</ul>\n<p>综上，考虑到dexie.js的语法更加友善，文档页较完善。最终选择它作为客户端存储的实现。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://jiangzhenghua.iteye.com/blog/1225201\">HTML5本地存储不完全指南</a></li>\n<li><a href=\"https://wangdoc.com/javascript/bom/indexeddb.html\">IndexedDB API</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/IndexedDB_API/Using_IndexedDB\">使用 IndexedDB - Web API接口参考 | MDN</a></li>\n<li><a href=\"https://dexie.org/docs/API-Reference\">Dexie.js API Reference</a></li>\n</ul>\n",
            "tags": [
                "electron",
                "indexedDB"
            ]
        }
    ]
}