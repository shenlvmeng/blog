<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://shenlvmeng.github.com/blog</id>
    <title>Shenlvmeng&#39;s Blog • Posts by &#34;indexeddb&#34; tag</title>
    <link href="http://shenlvmeng.github.com/blog" />
    <updated>2019-03-11T16:01:59.000Z</updated>
    <category term="总结" />
    <category term="制度" />
    <category term="道德" />
    <category term="文官" />
    <category term="万历" />
    <category term="明朝" />
    <category term="读书笔记" />
    <category term="展望" />
    <category term="2018" />
    <category term="2019" />
    <category term="flag" />
    <category term="2020" />
    <category term="2021" />
    <category term="2022" />
    <category term="2023" />
    <category term="面试" />
    <category term="前端" />
    <category term="FAQ" />
    <category term="HTML" />
    <category term="CSS" />
    <category term="style guide" />
    <category term="编程" />
    <category term="范式" />
    <category term="设计" />
    <category term="艺术" />
    <category term="质量" />
    <category term="async_hooks" />
    <category term="cls-hooked" />
    <category term="logId" />
    <category term="录音" />
    <category term="getUserMedia" />
    <category term="AudioContext" />
    <category term="PCM" />
    <category term="WAVE" />
    <category term="二叉搜索树" />
    <category term="算法" />
    <category term="回忆" />
    <category term="老朋友" />
    <category term="C" />
    <category term="Hash" />
    <category term="布隆过滤器" />
    <category term="字符串检索" />
    <category term="canvas" />
    <category term="流程图" />
    <category term="d3" />
    <category term="g6" />
    <category term="zrender" />
    <category term="processOn" />
    <category term="SDN" />
    <category term="cbench" />
    <category term="安装说明" />
    <category term="绘图" />
    <category term="动画" />
    <category term="攻略" />
    <category term="流水账" />
    <category term="成都" />
    <category term="重庆" />
    <category term="武汉" />
    <category term="重构" />
    <category term="代码" />
    <category term="代码风格" />
    <category term="数据可视化" />
    <category term="爬虫" />
    <category term="chrome" />
    <category term="crx" />
    <category term="扩展" />
    <category term="CORS" />
    <category term="跨域" />
    <category term="盒模型" />
    <category term="浮动" />
    <category term="Reactive Programming" />
    <category term="JavaScript" />
    <category term="Cycle.js" />
    <category term="Dart" />
    <category term="最佳实践" />
    <category term="引流" />
    <category term="universal-link" />
    <category term="app-link" />
    <category term="脚手架" />
    <category term="degit" />
    <category term="git" />
    <category term="设计模式" />
    <category term="类" />
    <category term="接口" />
    <category term="抽象类" />
    <category term="DOM" />
    <category term="Docker" />
    <category term="ONOS" />
    <category term="控制器" />
    <category term="虚拟化" />
    <category term="笔记" />
    <category term="UX" />
    <category term="UED" />
    <category term="准则" />
    <category term="Java" />
    <category term="Ruby" />
    <category term="反射" />
    <category term="编程范式" />
    <category term="鸭子类型" />
    <category term="管理" />
    <category term="效率" />
    <category term="知识工作者" />
    <category term="卓有成效" />
    <category term="Elm" />
    <category term="框架" />
    <category term="函数式编程" />
    <category term="虚网映射" />
    <category term="Javascript" />
    <category term="并发" />
    <category term="event loop" />
    <category term="覆盖率" />
    <category term="端到端测试" />
    <category term="istanbul" />
    <category term="istanbuljs" />
    <category term="JavaSript" />
    <category term="Express" />
    <category term="源码" />
    <category term="代码覆盖率" />
    <category term="istanbul-middleware" />
    <category term="代码插桩" />
    <category term="require钩子" />
    <category term="babel-plugin-istanbul" />
    <category term="css" />
    <category term="html5" />
    <category term="flex" />
    <category term="javascript" />
    <category term="roadmap" />
    <category term="闭包" />
    <category term="Haskell" />
    <category term="monad" />
    <category term="后端" />
    <category term="管理后台" />
    <category term="egg.js" />
    <category term="工作流" />
    <category term="pull request" />
    <category term="golang" />
    <category term="语言学习" />
    <category term="黑客与画家" />
    <category term="创业" />
    <category term="骑行" />
    <category term="海南" />
    <category term="图文" />
    <category term="reflow" />
    <category term="repaint" />
    <category term="命名法" />
    <category term="成功学" />
    <category term="自我建设" />
    <category term="HTTP" />
    <category term="HTTP/2" />
    <category term="SPDY" />
    <category term="QUIC" />
    <category term="HTTPS" />
    <category term="状态码" />
    <category term="网络攻击" />
    <category term="介绍" />
    <category term="图片渲染" />
    <category term="html2canvas" />
    <category term="dom-to-image" />
    <category term="electron" />
    <category term="indexedDB" />
    <category term="异步" />
    <category term="Generator" />
    <category term="thunk" />
    <category term="async" />
    <category term="函数表达式" />
    <category term="对象" />
    <category term="继承" />
    <category term="类型转换" />
    <category term="==" />
    <category term="类型判断" />
    <category term="猫" />
    <category term="杀手" />
    <category term="管理学" />
    <category term="领导力" />
    <category term="梯队" />
    <category term="移动端" />
    <category term="UI" />
    <category term="自适应" />
    <category term="rem" />
    <category term="Electron" />
    <category term="GUI" />
    <category term="gpx" />
    <category term="template" />
    <category term="Electron Builder" />
    <category term="PWA" />
    <category term="方法论" />
    <category term="夜话" />
    <category term="多线" />
    <category term="生活" />
    <category term="密码" />
    <category term="密钥" />
    <category term="技改" />
    <category term="Vue" />
    <category term="gulp" />
    <category term="瀑布流" />
    <category term="电影" />
    <category term="PHP" />
    <category term="参考" />
    <category term="思维" />
    <category term="学习能力" />
    <category term="右脑" />
    <category term="经济学" />
    <category term="宏观经济学" />
    <category term="术语" />
    <category term="GDP" />
    <category term="CPI" />
    <category term="储蓄" />
    <category term="投资" />
    <category term="金融市场" />
    <category term="股票" />
    <category term="债券" />
    <category term="美联储" />
    <category term="失业" />
    <category term="货币" />
    <category term="现值" />
    <category term="准备金" />
    <category term="货币中性" />
    <category term="通货膨胀" />
    <category term="汇率" />
    <category term="购买力" />
    <category term="净出口" />
    <category term="资产净流出" />
    <category term="总需求" />
    <category term="总供给" />
    <category term="流动性偏好" />
    <category term="乘数效应" />
    <category term="菲利普斯曲线" />
    <category term="微观经济学" />
    <category term="供求" />
    <category term="贸易" />
    <category term="市场" />
    <category term="税" />
    <category term="剩余" />
    <category term="外部性" />
    <category term="公共物品" />
    <category term="公共资源" />
    <category term="生产成本" />
    <category term="利润" />
    <category term="垄断" />
    <category term="价格歧视" />
    <category term="寡头" />
    <category term="垄断竞争" />
    <category term="生产要素市场" />
    <category term="贫困" />
    <category term="消费者选择理论" />
    <category term="不对称信息" />
    <category term="政治经济学" />
    <category term="行为经济学" />
    <category term="VSCode" />
    <category term="编辑器" />
    <category term="IDE" />
    <category term="hybrid" />
    <category term="JSBridge" />
    <category term="Web Worker" />
    <category term="Service Worker" />
    <category term="习惯" />
    <category term="lint" />
    <category term="editorconfig" />
    <category term="commit message" />
    <category term="量子物理" />
    <category term="史话" />
    <category term="埋点" />
    <category term="raven.js" />
    <category term="前端监控" />
    <category term="文本编辑器" />
    <category term="quill" />
    <category term="结构化数据" />
    <category term="React" />
    <category term="Hooks" />
    <category term="函数组件" />
    <category term="复用" />
    <category term="状态管理" />
    <category term="redux" />
    <category term="MobX" />
    <category term="代码质量" />
    <category term="重来" />
    <category term="requestAnimationFrame" />
    <category term="TypeScript" />
    <category term="路书" />
    <category term="gpx解析" />
    <category term="EXIF" />
    <category term="人类" />
    <category term="生存" />
    <category term="基因" />
    <category term="响应式编程" />
    <category term="RxJS" />
    <category term="成长" />
    <category term="业务" />
    <category term="思想" />
    <category term="程序设计" />
    <category term="心理学" />
    <category term="自我" />
    <category term="社会思维" />
    <category term="社会影响" />
    <category term="文化" />
    <category term="性别" />
    <category term="从众" />
    <category term="说服" />
    <category term="临床诊断" />
    <category term="陪审团" />
    <category term="司法" />
    <category term="物质主义" />
    <category term="健康" />
    <category term="社会关系" />
    <category term="偏见" />
    <category term="攻击行为" />
    <category term="亲密关系" />
    <category term="友谊" />
    <category term="爱情" />
    <category term="利他" />
    <category term="冲突" />
    <category term="和解" />
    <category term="软技能" />
    <category term="理财" />
    <category term="健身" />
    <category term="自我营销" />
    <category term="学习" />
    <category term="商业模式" />
    <category term="产品" />
    <category term="校园网" />
    <category term="互联网" />
    <category term="技术" />
    <category term="web开发" />
    <category term="哲思" />
    <category term="择偶观" />
    <category term="validator" />
    <category term="大文件" />
    <category term="visibilityChange" />
    <category term="IntersectionObserver" />
    <category term="图种" />
    <category term="draggable" />
    <category term="webpack" />
    <category term="z-index" />
    <category term="git submodule" />
    <category term="object-fit" />
    <category term="object-position" />
    <category term="BroadcastChannel" />
    <category term="extract-text-webpack-plugin" />
    <category term="lottie" />
    <category term="backface-visibility" />
    <category term="egret" />
    <category term="mock" />
    <category term="SSO" />
    <category term="autoprefixer" />
    <category term="polyfill" />
    <category term="Android" />
    <category term="ffmpeg" />
    <category term="React Hooks" />
    <category term="rollup" />
    <category term="CDN" />
    <category term="DNS" />
    <category term="CNAME" />
    <category term="架构" />
    <category term="组件" />
    <category term="ssh" />
    <category term="fis-receiver" />
    <category term="tmux" />
    <category term="origami" />
    <category term="promise" />
    <category term="encodeURI" />
    <category term="encodeURIComponent" />
    <category term="axios" />
    <category term="charles" />
    <category term="黑色幽默" />
    <category term="朋友" />
    <category term="梦" />
    <category term="濒死" />
    <category term="江南" />
    <category term="苏州" />
    <category term="无锡" />
    <category term="宜兴" />
    <category term="湖州" />
    <category term="南浔" />
    <category term="游记" />
    <category term="随笔" />
    <category term="群众" />
    <category term="理论" />
    <category term="实效" />
    <category term="测试" />
    <category term="长沙" />
    <category term="杭州" />
    <category term="湖南" />
    <category term="核酸" />
    <category term="美食" />
    <category term="云南" />
    <category term="丽江" />
    <category term="大理" />
    <category term="青岛" />
    <category term="济南" />
    <category term="山东" />
    <category term="西北" />
    <category term="银川" />
    <category term="西宁" />
    <category term="青海湖" />
    <category term="西海镇" />
    <category term="茶卡盐湖" />
    <category term="厦门" />
    <category term="感受" />
    <category term="C语言" />
    <category term="树" />
    <category term="主干开发" />
    <category term="GitFlow" />
    <category term="GithubFlow" />
    <category term="typescript" />
    <category term="类型系统" />
    <category term="webrtc" />
    <category term="RTMP" />
    <category term="首屏时间" />
    <category term="性能优化" />
    <category term="公司" />
    <category term="个人发展" />
    <category term="战略" />
    <category term="晋升" />
    <category term="哲学" />
    <category term="幸福" />
    <category term="人生" />
    <category term="叔本华" />
    <category term="Unix" />
    <category term="Rollup" />
    <category term="mouseout" />
    <category term="mouseleave" />
    <category term="lint-staged" />
    <category term="吸顶" />
    <category term="图片组件" />
    <category term="形式系统" />
    <category term="不完全性" />
    <category term="隐喻" />
    <category term="哥德尔" />
    <category term="巴赫" />
    <category term="埃舍尔" />
    <category term="济州" />
    <category term="西归浦" />
    <category term="城山" />
    <category term="咸德" />
    <category term="人工智能" />
    <category term="心智" />
    <category term="自指" />
    <category term="图灵" />
    <category term="马列主义" />
    <category term="恩格斯" />
    <category term="家庭" />
    <category term="国家" />
    <category term="阶级" />
    <category term="氏族" />
    <category term="哲学史" />
    <category term="孔子" />
    <category term="老子" />
    <category term="儒家" />
    <category term="道家" />
    <category term="佛教" />
    <category term="禅宗" />
    <category term="理学" />
    <category term="心学" />
    <category term="计算机" />
    <category term="微机原理" />
    <category term="门" />
    <category term="操作系统" />
    <category term="数字电路" />
    <category term="2024" />
    <entry>
        <id>http://shenlvmeng.github.com/blog/2019/03/12/indexeddb-introduction/</id>
        <title>Electron应用数据库选型暨indexedDB扫盲</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2019/03/12/indexeddb-introduction/"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;名谓扫盲，实则扫自己的盲&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;选型&#34;&gt;&lt;a href=&#34;#选型&#34; class=&#34;headerlink&#34; title=&#34;选型&#34;&gt;&lt;/a&gt;选型&lt;/h2&gt;&lt;p&gt;要说到最近的一个个人项目&lt;a href=&#34;https://github.com/shenlvmeng/calendone&#34;&gt;calendone&lt;/a&gt;，它是一个普通的Electron日历应用，有每日记录，定计划等功能，需要做数据持久化。数据量不大，不需要考虑性能问题。简单看了些方案。&lt;/p&gt;
&lt;h3 id=&#34;SQLite&#34;&gt;&lt;a href=&#34;#SQLite&#34; class=&#34;headerlink&#34; title=&#34;SQLite&#34;&gt;&lt;/a&gt;SQLite&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;关系型数据库&lt;/strong&gt;，具有关系型数据库的一切特性，事务遵循ACID属性。小巧轻便，有knex这样的库做ORM。&lt;/li&gt;
&lt;li&gt;是node原生模块，需要重新编译，而且有坑&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;NeDB&#34;&gt;&lt;a href=&#34;#NeDB&#34; class=&#34;headerlink&#34; title=&#34;NeDB&#34;&gt;&lt;/a&gt;NeDB&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;NoSQL类型数据库&lt;/strong&gt;，可以实现本地存储，也可以作为内存存储&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;API是MongoDB的一个子集&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;纯js实现，一个文件对应一张表&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Leveldb&#34;&gt;&lt;a href=&#34;#Leveldb&#34; class=&#34;headerlink&#34; title=&#34;Leveldb&#34;&gt;&lt;/a&gt;Leveldb&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;NoSQL类型数据库&lt;/strong&gt;，支持内存和持久化存储&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;没有事务机制&lt;/strong&gt;，默认按key查询，没有索引&lt;/li&gt;
&lt;li&gt;默认保存的不是js对象，而是字符串。如果要保存为对象，可以在level函数第二个参数加入&lt;code&gt;&amp;#123; valueEncoding: &amp;quot;json&amp;quot; &amp;#125;&lt;/code&gt;来让保存的js对象以json的形式读取&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Lowdb&#34;&gt;&lt;a href=&#34;#Lowdb&#34; class=&#34;headerlink&#34; title=&#34;Lowdb&#34;&gt;&lt;/a&gt;Lowdb&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;基于Loadsh的&lt;strong&gt;纯JSON文件数据库&lt;/strong&gt;，速度较慢&lt;/li&gt;
&lt;li&gt;不支持索引&amp;#x2F;事务&amp;#x2F;批量操作等数据库功能&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;indexedDB&#34;&gt;&lt;a href=&#34;#indexedDB&#34; class=&#34;headerlink&#34; title=&#34;indexedDB&#34;&gt;&lt;/a&gt;indexedDB&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;NoSQL数据库&lt;/strong&gt;，浏览器自带，可以储存大量数据，容量为250MB以上&lt;/li&gt;
&lt;li&gt;支持事务，有版本号的概念。&lt;/li&gt;
&lt;li&gt;支持较多的字段类型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;综上考虑，最后采用浏览器自带的indexedDB，足够满足要求，漫游接入成本，升级方便，调试方便。&lt;/p&gt;
&lt;h2 id=&#34;indexedDB介绍&#34;&gt;&lt;a href=&#34;#indexedDB介绍&#34; class=&#34;headerlink&#34; title=&#34;indexedDB介绍&#34;&gt;&lt;/a&gt;indexedDB介绍&lt;/h2&gt;&lt;p&gt;indexedDB脱胎于HTML本地存储。&lt;/p&gt;
&lt;h3 id=&#34;HTML本地存储&#34;&gt;&lt;a href=&#34;#HTML本地存储&#34; class=&#34;headerlink&#34; title=&#34;HTML本地存储&#34;&gt;&lt;/a&gt;HTML本地存储&lt;/h3&gt;&lt;p&gt;上古时代中，HTML中持久化数据只有几种方法[1]：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cookie。cookie的缺点很明显，最多只能存储4KB的数据，且会携带在同域名下每个HTTP请求的头部，明文传输（除非你使用SSL）。&lt;/li&gt;
&lt;li&gt;IE userData。微软在上世纪90年代的浏览器大战时推出的本地存储方案，允许每个页面最多存储64K数据，每个站点最多640K数据，它不是Web标准的一部分&lt;/li&gt;
&lt;li&gt;Flash cookie。它实际上和HTTP cookie并不是一回事，它的名字可能叫做”Flash本地存储”更为合适。考虑到Flash已经是要被淘汰的技术……&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本地存储出现后，有了下面一些标准化的更简单的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API&#34;&gt;Web Storage接口&lt;/a&gt;，即localStorage和sessionStorage&lt;/li&gt;
&lt;li&gt;Web SQL，这是一个&lt;strong&gt;已经废弃&lt;/strong&gt;的规范。就跟它的名字一样，它就是浏览器端的一个SQL数据库，可以执行SQL语句。由于语法和SQLite绑定过紧，后被标准组织废弃&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/API/IndexedDB_API&#34;&gt;indexedDB&lt;/a&gt;，Web SQL的替代品，也是浏览器端的数据库，但他是No SQL的。有MongoDB使用体验的，对它就不会感到陌生。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;indexedDB-1&#34;&gt;&lt;a href=&#34;#indexedDB-1&#34; class=&#34;headerlink&#34; title=&#34;indexedDB&#34;&gt;&lt;/a&gt;indexedDB&lt;/h3&gt;&lt;p&gt;indexedDB是浏览器提供的本地数据库，目标是持久化存储大量数据，提供类No SQL的增删改查体验。因此它有以下几点特色：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;键值对存储&lt;/strong&gt;，采用对象仓库（object store）存放数据，所有类型的数据都可以直接存入，包括 JavaScript 对象。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持索引&lt;/strong&gt;，indexedDB没有表列的概念，但可以建立索引，查询数据时使用id或索引搜索&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持事务&lt;/strong&gt;，保证操作的原子性，事务中的任意一步失败，数据库都会回滚到操作事务前的状态&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;异步操作&lt;/strong&gt;，indexedDB操作都是异步的，在执行数据增删改查时，不会影响界面性能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;同源限制&lt;/strong&gt;，每一个数据库会关联创建它的域名。网页只能访问自身域名下的数据库，不能跨域访问数据库。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;其他&lt;/strong&gt;，包括存储空间大、支持二进制存储等…&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;基本概念&#34;&gt;&lt;a href=&#34;#基本概念&#34; class=&#34;headerlink&#34; title=&#34;基本概念&#34;&gt;&lt;/a&gt;基本概念&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数据库&lt;/strong&gt;，IDBDatabase对象类型，每个域名（协议 + 域名 + 端口）可以新建任意多个数据库。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对象仓库&lt;/strong&gt;，IDBObjectStore对象类型，一个数据库包含若干个对象仓库，类似于关系型数据库中的表&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据记录&lt;/strong&gt;，类型于关系型数据库中的行，但是只有主键和数据体两部分。&lt;strong&gt;数据体可以是任意数据类型，不限于对象&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;索引&lt;/strong&gt;，IDBIndex对象类型，数据记录里除了主键以外的搜索参照&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事务&lt;/strong&gt;，IDBTransaction数据类型，对数据库的增删改查都需要通过事务进行，执行结果通过&lt;code&gt;error&lt;/code&gt;，&lt;code&gt;success&lt;/code&gt;，&lt;code&gt;abort&lt;/code&gt;事件回调拿到&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;indexedDB定义了许多对象接口，即API，除了上面介绍的一些，更完善的接口介绍可以参考MDN的介绍。&lt;/p&gt;
&lt;h4 id=&#34;操作&#34;&gt;&lt;a href=&#34;#操作&#34; class=&#34;headerlink&#34; title=&#34;操作&#34;&gt;&lt;/a&gt;操作&lt;/h4&gt;&lt;p&gt;indexedDB 鼓励使用的基本模式如下所示：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开数据库。&lt;/li&gt;
&lt;li&gt;在数据库中创建一个对象仓库（object store）。&lt;/li&gt;
&lt;li&gt;启动一个事务，并发送一个请求来执行一些数据库操作，像增加或提取数据等。&lt;/li&gt;
&lt;li&gt;通过监听正确类型的DOM事件以等待操作完成。&lt;/li&gt;
&lt;li&gt;在操作结果上进行一些操作（可以在request对象中找到）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;打开数据库&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用 IndexedDB 的第一步是打开数据库，使用indexedDB.open()方法如下。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; request = &lt;span class=&#34;variable language_&#34;&gt;window&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;indexedDB&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;open&lt;/span&gt;(databaseName, version);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;其中第一个参数为数据库名，第二个参数是数据库版本号。&lt;code&gt;indexedDB.open()&lt;/code&gt;方法返回一个&lt;code&gt;IDBRequest&lt;/code&gt;对象。这个对象通过三种事件error、success、upgradeneeded，处理打开数据库的操作结果。&lt;/p&gt;
&lt;p&gt;如果数据库不存在，open操作会创建该数据库，然后&lt;code&gt;onupgradeneeded&lt;/code&gt;事件被触发，需要在该事件的处理函数中创建数据库模式。如果数据库已经存在，但指定了一个更高的数据库版本，会直接触发 &lt;code&gt;onupgradeneeded&lt;/code&gt;事件，允许你在处理函数中更新数据库模式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：这里的版本号是一个unsigned long long数字，使用浮点数是会被转化到最近的整数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;绑定处理函数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;几乎所有我们产生的请求我们在处理的时候首先要做的就是添加成功和失败处理函数。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;request.&lt;span class=&#34;property&#34;&gt;onerror&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;event&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// Do something with request.errorCode!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;request.&lt;span class=&#34;property&#34;&gt;onsuccess&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;event&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// Do something with request.result!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;如果一切顺利的话，相关request的&lt;code&gt;onsuccess()&lt;/code&gt;处理函数就会被触发。如果不是所有事情都成功的话，&lt;code&gt;error &lt;/code&gt;事件会在request上被触发。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;新建数据库&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;新建数据库与打开数据库是同一个操作。不同之处在于，后续的操作主要在&lt;code&gt;upgradeneeded&lt;/code&gt;事件的监听函数里面完成。通常新建数据库后，第一件事是新建对象仓库，即下面这样：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;request.&lt;span class=&#34;property&#34;&gt;onupgradeneeded&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;event&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  db = event.&lt;span class=&#34;property&#34;&gt;target&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;result&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; objectStore;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!db.&lt;span class=&#34;property&#34;&gt;objectStoreNames&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;contains&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;person&amp;#x27;&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    objectStore = db.&lt;span class=&#34;title function_&#34;&gt;createObjectStore&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;person&amp;#x27;&lt;/span&gt;, &amp;#123; &lt;span class=&#34;attr&#34;&gt;keyPath&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;id&amp;#x27;&lt;/span&gt; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上面这段语句使用id作为对象仓库的主键，如果没有合适作为主键的属性，可以让indexedDB自动生成主键。为了便于查询，可以在数据仓库中建立索引。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; objectStore = db.&lt;span class=&#34;title function_&#34;&gt;createObjectStore&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;#x27;person&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#123; &lt;span class=&#34;attr&#34;&gt;autoIncrement&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;objectStore.&lt;span class=&#34;title function_&#34;&gt;createIndex&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;name&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;name&amp;#x27;&lt;/span&gt;, &amp;#123; &lt;span class=&#34;attr&#34;&gt;unique&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;objectStore.&lt;span class=&#34;title function_&#34;&gt;createIndex&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;email&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;email&amp;#x27;&lt;/span&gt;, &amp;#123; &lt;span class=&#34;attr&#34;&gt;unique&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;增删改查&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;增删改查都通过事务进行。事务来自于数据库对象，必须指定你想让这个事务跨越哪些对象仓库。事务中有三种模式，表示你想对数据库进行的操作类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;readonly&lt;/code&gt; &lt;strong&gt;默认&lt;/strong&gt;，只读&lt;/li&gt;
&lt;li&gt;&lt;code&gt;readwrite&lt;/code&gt; 读写操作&lt;/li&gt;
&lt;li&gt;&lt;code&gt;versionchange&lt;/code&gt; 修改数据库模式或结构&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只在必要时指定 readwrite 事务。你可以同时执行多个readonly事务，哪怕它们的作用域有重叠；但对于在一个对象仓库上只能运行一个readwrite事务。&lt;/p&gt;
&lt;p&gt;增加一条数据的语句如下：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; transaction = db.&lt;span class=&#34;title function_&#34;&gt;transaction&lt;/span&gt;([&lt;span class=&#34;string&#34;&gt;&amp;quot;person&amp;quot;&lt;/span&gt;], &lt;span class=&#34;string&#34;&gt;&amp;quot;readwrite&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 在所有数据添加完毕后的处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;transaction.&lt;span class=&#34;property&#34;&gt;oncomplete&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;event&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;alert&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;成功&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;transaction.&lt;span class=&#34;property&#34;&gt;onerror&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;event&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;alert&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;失败&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; objectStore = transaction.&lt;span class=&#34;title function_&#34;&gt;objectStore&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;person&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .&lt;span class=&#34;title function_&#34;&gt;add&lt;/span&gt;(&amp;#123; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;name&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;foo&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;email&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;foo@bar.com&amp;#x27;&lt;/span&gt; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在有了数据后，可以通过几种方法对它进行提取。首先是简单的 &lt;code&gt;get()&lt;/code&gt;，通过键获得值。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; transaction = db.&lt;span class=&#34;title function_&#34;&gt;transaction&lt;/span&gt;([&lt;span class=&#34;string&#34;&gt;&amp;quot;person&amp;quot;&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; objectStore = transaction.&lt;span class=&#34;title function_&#34;&gt;objectStore&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;person&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; request = objectStore.&lt;span class=&#34;title function_&#34;&gt;get&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;request.&lt;span class=&#34;property&#34;&gt;onsuccess&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;event&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 对 request.result 做些操作！&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;alert&lt;/span&gt;(request.&lt;span class=&#34;property&#34;&gt;result&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;name&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;request.&lt;span class=&#34;property&#34;&gt;onerror&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;event&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;alert&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;出错了&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在很多场景下你并不知道数据的键，这时可以用索引找到你要的数据。例子中的&lt;code&gt;name&lt;/code&gt;属性可能并不是唯一的，在这种情况下，你总是得到键值最小的那个。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 前提是你已经建立了name索引&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; index = objectStore.&lt;span class=&#34;title function_&#34;&gt;index&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;index.&lt;span class=&#34;title function_&#34;&gt;get&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;foo&amp;#x27;&lt;/span&gt;).&lt;span class=&#34;property&#34;&gt;onsuccess&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;event&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;alert&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;foo&amp;#x27;s id is &amp;quot;&lt;/span&gt; + event.&lt;span class=&#34;property&#34;&gt;target&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;result&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;id&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在需要遍历某一范围的数据集合时，也可以使用&lt;strong&gt;游标&lt;/strong&gt;，这里要用到&lt;code&gt;openCursor&lt;/code&gt;方法。比如查询整个数据对象存储。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;objectStore.&lt;span class=&#34;title function_&#34;&gt;openCursor&lt;/span&gt;().&lt;span class=&#34;property&#34;&gt;onsuccess&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;event&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; cursor = event.&lt;span class=&#34;property&#34;&gt;target&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;result&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (cursor) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(cursor.&lt;span class=&#34;property&#34;&gt;value&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cursor.&lt;span class=&#34;title function_&#34;&gt;continue&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;alert&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;遍历结束&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;上面的功能也可以通过&lt;code&gt;getAll&lt;/code&gt;完成，但是由于数据对象是懒生成的，&lt;code&gt;getAll&lt;/code&gt;性能会有消耗。当然你如果想直接拿到整个数据组成的数组，还是&lt;code&gt;getAll&lt;/code&gt;好点&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;结合索引（IDBIndex）和游标（IDBCursor）可以查询指定索引的所有记录，方法&lt;code&gt;openCursor&lt;/code&gt;和&lt;code&gt;openKeyCursor&lt;/code&gt;分别返回不同的数据结构。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;index.&lt;span class=&#34;title function_&#34;&gt;openCursor&lt;/span&gt;().&lt;span class=&#34;property&#34;&gt;onsuccess&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;event&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; cursor = event.&lt;span class=&#34;property&#34;&gt;target&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;result&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (cursor) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// cursor.key 是一个 name, 就像 &amp;quot;Bill&amp;quot;, 然后 cursor.value 是整个对象。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;alert&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Name: &amp;quot;&lt;/span&gt; + cursor.&lt;span class=&#34;property&#34;&gt;key&lt;/span&gt; + &lt;span class=&#34;string&#34;&gt;&amp;quot;, email: &amp;quot;&lt;/span&gt; + cursor.&lt;span class=&#34;property&#34;&gt;value&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;email&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cursor.&lt;span class=&#34;title function_&#34;&gt;continue&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;index.&lt;span class=&#34;title function_&#34;&gt;openKeyCursor&lt;/span&gt;().&lt;span class=&#34;property&#34;&gt;onsuccess&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;event&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; cursor = event.&lt;span class=&#34;property&#34;&gt;target&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;result&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (cursor) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// cursor.key 是一个 name, 就像 &amp;quot;Bill&amp;quot;, 然后 cursor.value是主键的值。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 没办法得到存储对象的其余部分。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;alert&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Name: &amp;quot;&lt;/span&gt; + cursor.&lt;span class=&#34;property&#34;&gt;key&lt;/span&gt; + &lt;span class=&#34;string&#34;&gt;&amp;quot;, id: &amp;quot;&lt;/span&gt; + cursor.&lt;span class=&#34;property&#34;&gt;value&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cursor.&lt;span class=&#34;title function_&#34;&gt;continue&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;更多游标设置参考&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/API/IndexedDB_API/Using_IndexedDB#%E6%8C%87%E5%AE%9A%E6%B8%B8%E6%A0%87%E7%9A%84%E8%8C%83%E5%9B%B4%E5%92%8C%E6%96%B9%E5%90%91&#34;&gt;mdn&lt;/a&gt;的介绍。&lt;/p&gt;
&lt;p&gt;更新和删除数据，分别使用&lt;code&gt;put&lt;/code&gt;和&lt;code&gt;delete&lt;/code&gt;方法。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; request = db.&lt;span class=&#34;title function_&#34;&gt;transaction&lt;/span&gt;([&lt;span class=&#34;string&#34;&gt;&amp;#x27;person&amp;#x27;&lt;/span&gt;], &lt;span class=&#34;string&#34;&gt;&amp;#x27;readwrite&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .&lt;span class=&#34;title function_&#34;&gt;objectStore&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;person&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .&lt;span class=&#34;title function_&#34;&gt;put&lt;/span&gt;(&amp;#123; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;name&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;李四&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;age&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;35&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;email&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;lisi@example.com&amp;#x27;&lt;/span&gt; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;request.&lt;span class=&#34;property&#34;&gt;onsuccess&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;event&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;数据更新成功&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;request.&lt;span class=&#34;property&#34;&gt;onerror&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;event&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;数据更新失败&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; request = db.&lt;span class=&#34;title function_&#34;&gt;transaction&lt;/span&gt;([&lt;span class=&#34;string&#34;&gt;&amp;#x27;person&amp;#x27;&lt;/span&gt;], &lt;span class=&#34;string&#34;&gt;&amp;#x27;readwrite&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .&lt;span class=&#34;title function_&#34;&gt;objectStore&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;person&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .&lt;span class=&#34;title function_&#34;&gt;delete&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;request.&lt;span class=&#34;property&#34;&gt;onsuccess&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;event&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;数据删除成功&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;其中put的数据为全量替换，可以通过get方法拿到数据后，修改特定值再交给put完成增量替换。&lt;/p&gt;
&lt;h2 id=&#34;indexedDB封装库&#34;&gt;&lt;a href=&#34;#indexedDB封装库&#34; class=&#34;headerlink&#34; title=&#34;indexedDB封装库&#34;&gt;&lt;/a&gt;indexedDB封装库&lt;/h2&gt;&lt;p&gt;indexedDB虽然强大，但是有些API对于用户来说还是不够方便，下面是几个indexedDB的封装库：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://localforage.github.io/localForage/&#34;&gt;localForage&lt;/a&gt;，支持类Storage API语法的客户端数据存储polyfill，支持回退到Storage和Web SQL&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dexie.org/&#34;&gt;dexie.js&lt;/a&gt;，提供更友好和简单的语法便于快速的编码开发，&lt;strong&gt;有Typescript支持&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/erikolson186/zangodb&#34;&gt;ZangoDB&lt;/a&gt;，提供类MongoDB的接口实现，提供了许多MangoDB的特性实现&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jsstore.net/&#34;&gt;JsStore&lt;/a&gt;，提供基于indexedDB的类SQL的语法实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;综上，考虑到dexie.js的语法更加友善，文档页较完善。最终选择它作为客户端存储的实现。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;&lt;a href=&#34;#参考&#34; class=&#34;headerlink&#34; title=&#34;参考&#34;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jiangzhenghua.iteye.com/blog/1225201&#34;&gt;HTML5本地存储不完全指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wangdoc.com/javascript/bom/indexeddb.html&#34;&gt;IndexedDB API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/API/IndexedDB_API/Using_IndexedDB&#34;&gt;使用 IndexedDB - Web API接口参考 | MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dexie.org/docs/API-Reference&#34;&gt;Dexie.js API Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="electron" />
        <category term="indexedDB" />
        <updated>2019-03-11T16:01:59.000Z</updated>
    </entry>
</feed>
