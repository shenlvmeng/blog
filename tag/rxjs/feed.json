{
    "version": "https://jsonfeed.org/version/1",
    "title": "Shenlvmeng's Blog • All posts by \"rxjs\" tag",
    "description": "Be sharp, my friend.",
    "home_page_url": "http://shenlvmeng.github.com/blog",
    "items": [
        {
            "id": "http://shenlvmeng.github.com/blog/2017/08/14/rxjs-brief/",
            "url": "http://shenlvmeng.github.com/blog/2017/08/14/rxjs-brief/",
            "title": "RxJS 真·简介",
            "date_published": "2017-08-14T12:32:18.000Z",
            "content_html": "<blockquote>\n<p>本文来自RxJS文档的<a href=\"http://reactivex.io/rxjs/manual/overview.html\">Overview</a>。</p>\n</blockquote>\n<p>RxJS是Reactive系列的JS版本。它有着下面一些概念。对它们有所理解将让你能得心应手地使用RxJS。</p>\n<h2 id=\"Observable\"><a href=\"#Observable\" class=\"headerlink\" title=\"Observable\"></a>Observable</h2><ul>\n<li>Observable类似函数定义（回调），Observer类似调用函数</li>\n<li>Observable可以同步或是异步返回值</li>\n<li>Observable在生命周期里可以返回多个值</li>\n</ul>\n<p>Observable有创建（create）、订阅（subscribe）、执行（execute）、析构（dispose）四步。在订阅后，通过<code>create</code>方法创建的Observable体会立即得到执行（不论是同步或是异步内容），同时，传入<code>create</code>的回调函数中可以向Observer调用<code>next</code>，<code>error</code>，<code>complete</code>方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"title function_\">create</span>(<span class=\"keyword\">function</span> (<span class=\"params\">observer</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Hello&#x27;</span>);</span><br><span class=\"line\">  observer.<span class=\"title function_\">next</span>(<span class=\"number\">42</span>);</span><br><span class=\"line\">  observer.<span class=\"title function_\">next</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\">  observer.<span class=\"title function_\">next</span>(<span class=\"number\">200</span>);</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    observer.<span class=\"title function_\">next</span>(<span class=\"number\">300</span>); <span class=\"comment\">// happens asynchronously</span></span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;before&#x27;</span>);</span><br><span class=\"line\">foo.<span class=\"title function_\">subscribe</span>(<span class=\"keyword\">function</span> (<span class=\"params\">x</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;after&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Observer\"><a href=\"#Observer\" class=\"headerlink\" title=\"Observer\"></a>Observer</h2><blockquote>\n<p>Observers只是有<code>next</code>,<code>error</code>,<code>complete</code>三个回调的对象，这三个回调分别用来处理Observable传递的三种不同的状态</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> observer = &#123;</span><br><span class=\"line\">  <span class=\"attr\">next</span>: <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Observer got a next value: &#x27;</span> + x),</span><br><span class=\"line\">  <span class=\"attr\">error</span>: <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;Observer got an error: &#x27;</span> + err),</span><br><span class=\"line\">  <span class=\"attr\">complete</span>: <span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Observer got a complete notification&#x27;</span>),</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Subscription\"><a href=\"#Subscription\" class=\"headerlink\" title=\"Subscription\"></a>Subscription</h2><blockquote>\n<p>Subscription表述了Observable的执行过程。但是主要提供<code>unsubscribe()</code>方法取消Observable执行</p>\n</blockquote>\n<p>主要由<code>Observable</code>的<code>subscribe</code>方法创建，当然还有<code>add()</code>和<code>remove()</code>方法组合subscription。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> observable1 = <span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"title function_\">interval</span>(<span class=\"number\">400</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> observable2 = <span class=\"title class_\">Rx</span>.<span class=\"property\">Observable</span>.<span class=\"title function_\">interval</span>(<span class=\"number\">300</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> subscription = observable1.<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;first: &#x27;</span> + x));</span><br><span class=\"line\"><span class=\"keyword\">var</span> childSubscription = observable2.<span class=\"title function_\">subscribe</span>(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;second: &#x27;</span> + x));</span><br><span class=\"line\"></span><br><span class=\"line\">subscription.<span class=\"title function_\">add</span>(childSubscription);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Unsubscribes BOTH subscription and childSubscription</span></span><br><span class=\"line\">  subscription.<span class=\"title function_\">unsubscribe</span>();</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Subject\"><a href=\"#Subject\" class=\"headerlink\" title=\"Subject\"></a>Subject</h2><blockquote>\n<p>Subject是一个广播的Observable（类似<strong>EventEmitter</strong>），它既是Observable又是Observer，既有next方法，又有处理next的回调。</p>\n</blockquote>\n<p>和<code>Observable</code>本质的不同是，</p>\n<ul>\n<li><code>Subject</code><strong>注册多个</strong>回调，<code>Observable</code><strong>指定一个</strong>回调</li>\n<li>回调触发时机上，<code>Subject</code>通过特定时机触发（即<code>Subject.next</code>），<code>Observable</code>在回调定义后立即触发（即<code>subscribe</code>后）</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> subject = <span class=\"keyword\">new</span> <span class=\"title class_\">Rx</span>.<span class=\"title class_\">Subject</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">subject.<span class=\"title function_\">subscribe</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">next</span>: <span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;observerA: &#x27;</span> + v)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">subject.<span class=\"title function_\">subscribe</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">next</span>: <span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;observerB: &#x27;</span> + v)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">subject.<span class=\"title function_\">next</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">subject.<span class=\"title function_\">next</span>(<span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n\n<p>Subject又可细分成<code>BehaviorSubject</code>, <code>ReplaySubject</code>, <code>AsyncSubject</code></p>\n<ul>\n<li>使用<code>refCount()</code>替代<code>connect()</code>完成multicasted Observable的自动绑定</li>\n</ul>\n<h3 id=\"BehaviorSubject\"><a href=\"#BehaviorSubject\" class=\"headerlink\" title=\"BehaviorSubject\"></a>BehaviorSubject</h3><p>存储了释放给消费者的最后一个值。在新消费者订阅时会自动下发。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> subject = <span class=\"keyword\">new</span> <span class=\"title class_\">Rx</span>.<span class=\"title class_\">BehaviorSubject</span>(<span class=\"number\">0</span>); <span class=\"comment\">// 0 is the initial value</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ReplaySubject\"><a href=\"#ReplaySubject\" class=\"headerlink\" title=\"ReplaySubject\"></a>ReplaySubject</h3><p>存储之前释放给消费者的一组值。在新消费者订阅时会自动下发。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> subject = <span class=\"keyword\">new</span> <span class=\"title class_\">Rx</span>.<span class=\"title class_\">ReplaySubject</span>(<span class=\"number\">100</span>, <span class=\"number\">500</span> <span class=\"comment\">/* windowTime */</span>);</span><br></pre></td></tr></table></figure>\n\n<p>第二个参数描述数据的过期时间</p>\n<h3 id=\"AsyncSubject\"><a href=\"#AsyncSubject\" class=\"headerlink\" title=\"AsyncSubject\"></a>AsyncSubject</h3><p><strong>只存储</strong>最后一次释放的值，并<strong>在<code>complete</code>状态后</strong>下发给消费者</p>\n<h2 id=\"Operator\"><a href=\"#Operator\" class=\"headerlink\" title=\"Operator\"></a>Operator</h2><blockquote>\n<p>RxJS的核心概念，读入一个Observable返回一个全新的Observable，是<strong>纯函数</strong></p>\n</blockquote>\n<p>Operator分为两类：</p>\n<ul>\n<li>instance operator 用来对已有Operator链式调用进行改造，是纯函数，如<code>.map()</code></li>\n<li>static operator 用来从JS原始值中构造Observable，如<code>.of()</code>，<code>.from()</code>等</li>\n</ul>\n<p>RxJS提供的Operator非常多，以至于文档写了个<a href=\"http://reactivex.io/rxjs/manual/overview.html#choose-an-operator\">小程序</a>帮助你选择你想要的Operator。借助宝石图(marble diagram)，可以更好理解各operator。</p>\n<h2 id=\"Scheduler\"><a href=\"#Scheduler\" class=\"headerlink\" title=\"Scheduler\"></a>Scheduler</h2><blockquote>\n<p>Scheduler允许你定义Observable发布消息给Observer的执行环境，具体来说如存储tasks，执行任务的时机和顺序，同步&#x2F;异步等。</p>\n</blockquote>\n<p>选择上，有<code>Rx.Scheduler.queue</code>（当前事件帧）, <code>Rx.Scheduler.asap</code>（microtasks queue）, <code>Rx.Scheduler.async</code>（setInterval）。static operator通常使用Scheduler，通过<code>observeOn</code>和<code>subscribeOn</code>两种方法指定。instance operator可以使用一个Scheduler。</p>\n<p>现在可以跟着<a href=\"http://reactivex.io/rxjs/manual/tutorial.html\">Tutorial</a>使用起RxJS了。Enjoy~</p>\n",
            "tags": [
                "JavaScript",
                "响应式编程",
                "RxJS"
            ]
        }
    ]
}