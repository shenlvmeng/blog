<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://shenlvmeng.github.com/blog</id>
    <title>Shenlvmeng&#39;s Blog • Posts by &#34;重构&#34; tag</title>
    <link href="http://shenlvmeng.github.com/blog" />
    <updated>2020-08-17T14:56:03.000Z</updated>
    <category term="总结" />
    <category term="制度" />
    <category term="道德" />
    <category term="文官" />
    <category term="万历" />
    <category term="明朝" />
    <category term="读书笔记" />
    <category term="展望" />
    <category term="2018" />
    <category term="2019" />
    <category term="flag" />
    <category term="2020" />
    <category term="2021" />
    <category term="2022" />
    <category term="2023" />
    <category term="面试" />
    <category term="前端" />
    <category term="FAQ" />
    <category term="HTML" />
    <category term="CSS" />
    <category term="style guide" />
    <category term="编程" />
    <category term="范式" />
    <category term="设计" />
    <category term="艺术" />
    <category term="质量" />
    <category term="async_hooks" />
    <category term="cls-hooked" />
    <category term="logId" />
    <category term="录音" />
    <category term="getUserMedia" />
    <category term="AudioContext" />
    <category term="PCM" />
    <category term="WAVE" />
    <category term="二叉搜索树" />
    <category term="算法" />
    <category term="回忆" />
    <category term="老朋友" />
    <category term="C" />
    <category term="Hash" />
    <category term="布隆过滤器" />
    <category term="字符串检索" />
    <category term="canvas" />
    <category term="流程图" />
    <category term="d3" />
    <category term="g6" />
    <category term="zrender" />
    <category term="processOn" />
    <category term="SDN" />
    <category term="cbench" />
    <category term="安装说明" />
    <category term="绘图" />
    <category term="动画" />
    <category term="攻略" />
    <category term="流水账" />
    <category term="成都" />
    <category term="重庆" />
    <category term="武汉" />
    <category term="重构" />
    <category term="代码" />
    <category term="代码风格" />
    <category term="数据可视化" />
    <category term="爬虫" />
    <category term="chrome" />
    <category term="crx" />
    <category term="扩展" />
    <category term="CORS" />
    <category term="跨域" />
    <category term="盒模型" />
    <category term="浮动" />
    <category term="Reactive Programming" />
    <category term="JavaScript" />
    <category term="Cycle.js" />
    <category term="Dart" />
    <category term="最佳实践" />
    <category term="引流" />
    <category term="universal-link" />
    <category term="app-link" />
    <category term="脚手架" />
    <category term="degit" />
    <category term="git" />
    <category term="设计模式" />
    <category term="类" />
    <category term="接口" />
    <category term="抽象类" />
    <category term="DOM" />
    <category term="Docker" />
    <category term="ONOS" />
    <category term="控制器" />
    <category term="虚拟化" />
    <category term="笔记" />
    <category term="UX" />
    <category term="UED" />
    <category term="准则" />
    <category term="Java" />
    <category term="Ruby" />
    <category term="反射" />
    <category term="编程范式" />
    <category term="鸭子类型" />
    <category term="管理" />
    <category term="效率" />
    <category term="知识工作者" />
    <category term="卓有成效" />
    <category term="Elm" />
    <category term="框架" />
    <category term="函数式编程" />
    <category term="虚网映射" />
    <category term="Javascript" />
    <category term="并发" />
    <category term="event loop" />
    <category term="覆盖率" />
    <category term="端到端测试" />
    <category term="istanbul" />
    <category term="istanbuljs" />
    <category term="JavaSript" />
    <category term="Express" />
    <category term="源码" />
    <category term="代码覆盖率" />
    <category term="istanbul-middleware" />
    <category term="代码插桩" />
    <category term="require钩子" />
    <category term="babel-plugin-istanbul" />
    <category term="css" />
    <category term="html5" />
    <category term="flex" />
    <category term="javascript" />
    <category term="roadmap" />
    <category term="闭包" />
    <category term="Haskell" />
    <category term="monad" />
    <category term="后端" />
    <category term="管理后台" />
    <category term="egg.js" />
    <category term="工作流" />
    <category term="pull request" />
    <category term="golang" />
    <category term="语言学习" />
    <category term="黑客与画家" />
    <category term="创业" />
    <category term="骑行" />
    <category term="海南" />
    <category term="图文" />
    <category term="reflow" />
    <category term="repaint" />
    <category term="命名法" />
    <category term="成功学" />
    <category term="自我建设" />
    <category term="HTTP" />
    <category term="HTTP/2" />
    <category term="SPDY" />
    <category term="QUIC" />
    <category term="HTTPS" />
    <category term="状态码" />
    <category term="网络攻击" />
    <category term="介绍" />
    <category term="图片渲染" />
    <category term="html2canvas" />
    <category term="dom-to-image" />
    <category term="electron" />
    <category term="indexedDB" />
    <category term="异步" />
    <category term="Generator" />
    <category term="thunk" />
    <category term="async" />
    <category term="函数表达式" />
    <category term="对象" />
    <category term="继承" />
    <category term="类型转换" />
    <category term="==" />
    <category term="类型判断" />
    <category term="猫" />
    <category term="杀手" />
    <category term="管理学" />
    <category term="领导力" />
    <category term="梯队" />
    <category term="移动端" />
    <category term="UI" />
    <category term="自适应" />
    <category term="rem" />
    <category term="Electron" />
    <category term="GUI" />
    <category term="gpx" />
    <category term="template" />
    <category term="Electron Builder" />
    <category term="PWA" />
    <category term="方法论" />
    <category term="夜话" />
    <category term="多线" />
    <category term="生活" />
    <category term="密码" />
    <category term="密钥" />
    <category term="技改" />
    <category term="Vue" />
    <category term="gulp" />
    <category term="瀑布流" />
    <category term="电影" />
    <category term="PHP" />
    <category term="参考" />
    <category term="思维" />
    <category term="学习能力" />
    <category term="右脑" />
    <category term="经济学" />
    <category term="宏观经济学" />
    <category term="术语" />
    <category term="GDP" />
    <category term="CPI" />
    <category term="储蓄" />
    <category term="投资" />
    <category term="金融市场" />
    <category term="股票" />
    <category term="债券" />
    <category term="美联储" />
    <category term="失业" />
    <category term="货币" />
    <category term="现值" />
    <category term="准备金" />
    <category term="货币中性" />
    <category term="通货膨胀" />
    <category term="汇率" />
    <category term="购买力" />
    <category term="净出口" />
    <category term="资产净流出" />
    <category term="总需求" />
    <category term="总供给" />
    <category term="流动性偏好" />
    <category term="乘数效应" />
    <category term="菲利普斯曲线" />
    <category term="微观经济学" />
    <category term="供求" />
    <category term="贸易" />
    <category term="市场" />
    <category term="税" />
    <category term="剩余" />
    <category term="外部性" />
    <category term="公共物品" />
    <category term="公共资源" />
    <category term="生产成本" />
    <category term="利润" />
    <category term="垄断" />
    <category term="价格歧视" />
    <category term="寡头" />
    <category term="垄断竞争" />
    <category term="生产要素市场" />
    <category term="贫困" />
    <category term="消费者选择理论" />
    <category term="不对称信息" />
    <category term="政治经济学" />
    <category term="行为经济学" />
    <category term="VSCode" />
    <category term="编辑器" />
    <category term="IDE" />
    <category term="hybrid" />
    <category term="JSBridge" />
    <category term="Web Worker" />
    <category term="Service Worker" />
    <category term="习惯" />
    <category term="lint" />
    <category term="editorconfig" />
    <category term="commit message" />
    <category term="量子物理" />
    <category term="史话" />
    <category term="埋点" />
    <category term="raven.js" />
    <category term="前端监控" />
    <category term="文本编辑器" />
    <category term="quill" />
    <category term="结构化数据" />
    <category term="React" />
    <category term="Hooks" />
    <category term="函数组件" />
    <category term="复用" />
    <category term="状态管理" />
    <category term="redux" />
    <category term="MobX" />
    <category term="代码质量" />
    <category term="重来" />
    <category term="requestAnimationFrame" />
    <category term="TypeScript" />
    <category term="路书" />
    <category term="gpx解析" />
    <category term="EXIF" />
    <category term="人类" />
    <category term="生存" />
    <category term="基因" />
    <category term="响应式编程" />
    <category term="RxJS" />
    <category term="成长" />
    <category term="业务" />
    <category term="思想" />
    <category term="程序设计" />
    <category term="心理学" />
    <category term="自我" />
    <category term="社会思维" />
    <category term="社会影响" />
    <category term="文化" />
    <category term="性别" />
    <category term="从众" />
    <category term="说服" />
    <category term="临床诊断" />
    <category term="陪审团" />
    <category term="司法" />
    <category term="物质主义" />
    <category term="健康" />
    <category term="社会关系" />
    <category term="偏见" />
    <category term="攻击行为" />
    <category term="亲密关系" />
    <category term="友谊" />
    <category term="爱情" />
    <category term="利他" />
    <category term="冲突" />
    <category term="和解" />
    <category term="软技能" />
    <category term="理财" />
    <category term="健身" />
    <category term="自我营销" />
    <category term="学习" />
    <category term="商业模式" />
    <category term="产品" />
    <category term="校园网" />
    <category term="互联网" />
    <category term="技术" />
    <category term="web开发" />
    <category term="哲思" />
    <category term="择偶观" />
    <category term="validator" />
    <category term="大文件" />
    <category term="visibilityChange" />
    <category term="IntersectionObserver" />
    <category term="图种" />
    <category term="draggable" />
    <category term="webpack" />
    <category term="z-index" />
    <category term="git submodule" />
    <category term="object-fit" />
    <category term="object-position" />
    <category term="BroadcastChannel" />
    <category term="extract-text-webpack-plugin" />
    <category term="lottie" />
    <category term="backface-visibility" />
    <category term="egret" />
    <category term="mock" />
    <category term="SSO" />
    <category term="autoprefixer" />
    <category term="polyfill" />
    <category term="Android" />
    <category term="ffmpeg" />
    <category term="React Hooks" />
    <category term="rollup" />
    <category term="CDN" />
    <category term="DNS" />
    <category term="CNAME" />
    <category term="架构" />
    <category term="组件" />
    <category term="ssh" />
    <category term="fis-receiver" />
    <category term="tmux" />
    <category term="origami" />
    <category term="promise" />
    <category term="encodeURI" />
    <category term="encodeURIComponent" />
    <category term="axios" />
    <category term="charles" />
    <category term="黑色幽默" />
    <category term="朋友" />
    <category term="梦" />
    <category term="濒死" />
    <category term="江南" />
    <category term="苏州" />
    <category term="无锡" />
    <category term="宜兴" />
    <category term="湖州" />
    <category term="南浔" />
    <category term="游记" />
    <category term="随笔" />
    <category term="群众" />
    <category term="理论" />
    <category term="实效" />
    <category term="测试" />
    <category term="长沙" />
    <category term="杭州" />
    <category term="湖南" />
    <category term="核酸" />
    <category term="美食" />
    <category term="云南" />
    <category term="丽江" />
    <category term="大理" />
    <category term="青岛" />
    <category term="济南" />
    <category term="山东" />
    <category term="西北" />
    <category term="银川" />
    <category term="西宁" />
    <category term="青海湖" />
    <category term="西海镇" />
    <category term="茶卡盐湖" />
    <category term="厦门" />
    <category term="感受" />
    <category term="C语言" />
    <category term="树" />
    <category term="主干开发" />
    <category term="GitFlow" />
    <category term="GithubFlow" />
    <category term="typescript" />
    <category term="类型系统" />
    <category term="webrtc" />
    <category term="RTMP" />
    <category term="首屏时间" />
    <category term="性能优化" />
    <category term="公司" />
    <category term="个人发展" />
    <category term="战略" />
    <category term="晋升" />
    <category term="哲学" />
    <category term="幸福" />
    <category term="人生" />
    <category term="叔本华" />
    <category term="Unix" />
    <category term="Rollup" />
    <category term="mouseout" />
    <category term="mouseleave" />
    <category term="lint-staged" />
    <category term="吸顶" />
    <category term="图片组件" />
    <category term="形式系统" />
    <category term="不完全性" />
    <category term="隐喻" />
    <category term="哥德尔" />
    <category term="巴赫" />
    <category term="埃舍尔" />
    <category term="济州" />
    <category term="西归浦" />
    <category term="城山" />
    <category term="咸德" />
    <category term="人工智能" />
    <category term="心智" />
    <category term="自指" />
    <category term="图灵" />
    <category term="马列主义" />
    <category term="恩格斯" />
    <category term="家庭" />
    <category term="国家" />
    <category term="阶级" />
    <category term="氏族" />
    <entry>
        <id>http://shenlvmeng.github.com/blog/2020/08/17/refactoring-design-improvement/</id>
        <title>重构 —— 代码的实用性与艺术性</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2020/08/17/refactoring-design-improvement/"/>
        <content type="html">&lt;p&gt;MF的《重构》一书算是程序设计书籍的经典了。其中对于重构的认识和剖析深入浅出，提纲挈领。对于有一定编程经验的人来说更是如虎添翼的帮助。下面我尽量在不贬损原意的基础上，用自己的思路和语言进行适当的总结。&lt;/p&gt;
&lt;h2 id=&#34;序-amp-前言：重构的再认识&#34;&gt;&lt;a href=&#34;#序-amp-前言：重构的再认识&#34; class=&#34;headerlink&#34; title=&#34;序 &amp;amp; 前言：重构的再认识&#34;&gt;&lt;/a&gt;序 &amp;amp; 前言：重构的再认识&lt;/h2&gt;&lt;p&gt;开篇名义，还未进入正文，书从序和前言开始，便不自觉间流露着真知灼见：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重构是&lt;strong&gt;不改变软件可观察行为的前提下改善其内部结构&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;重构需要你维护一份“坏味道”和重构手段的对应&lt;/li&gt;
&lt;li&gt;设计前期使用模式通常会导致过度工程&lt;/li&gt;
&lt;li&gt;代码总将随着设计者的经验成长而进化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;样例：感受重构&#34;&gt;&lt;a href=&#34;#样例：感受重构&#34; class=&#34;headerlink&#34; title=&#34;样例：感受重构&#34;&gt;&lt;/a&gt;样例：感受重构&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;任何一个傻瓜都能写出计算机理解的代码。但唯有优秀的程序员才能写出人类能理解的代码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;代码被阅读和修改的次数远多于被编写的次数。尽管代码在机器中运行时，机器并不会嫌弃代码丑陋。但是代码总是要修改的，当我们打算修改系统时，就涉及到了人。人在乎这些。差劲的系统很难维护，如果很难找到修改点，程序员就可能犯错，从而引入bug。如果你发现你需要为程序增加特性，但是当前的代码结构让你不能方便达成目标时，先重构那个程序，再方便地添加特性。&lt;/p&gt;
&lt;p&gt;当然，重构前一定要确认，自己有没有一套&lt;strong&gt;可靠的测试机制&lt;/strong&gt;，因为你需要它来保证重构的基础要素：不修改已有功能。重构中，最好能以&lt;strong&gt;微小的步伐&lt;/strong&gt;前进（这样能及时回滚）。在本章样例的重构中，体现了下面一些“好味道”：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代码块越小，代码功能就越好管理&lt;/li&gt;
&lt;li&gt;好的代码应该能够清楚表达自己的功能，变量名也是代码清晰的关键&lt;/li&gt;
&lt;li&gt;用多态取代条件判断逻辑&lt;/li&gt;
&lt;li&gt;结构化风格相比过程化风格更易扩展也更好维护&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;原则&#34;&gt;&lt;a href=&#34;#原则&#34; class=&#34;headerlink&#34; title=&#34;原则&#34;&gt;&lt;/a&gt;原则&lt;/h2&gt;&lt;p&gt;本章介绍了重构的一些原则和基础性认识。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;何为重构：不改变软件可观察特性的前提下，通过修改内部结构，提高其可理解性。通常情况下和&lt;strong&gt;性能优化&lt;/strong&gt;相对应&lt;ul&gt;
&lt;li&gt;两顶帽子：添加新功能和重构应该属于两种截然不同的行为，它们应该分开交替进行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;重构的好处&lt;ul&gt;
&lt;li&gt;改进软件设计，整理代码让后续的修改更容易&lt;/li&gt;
&lt;li&gt;让软件更好理解，准确说出我想要的&lt;/li&gt;
&lt;li&gt;帮忙找到bug&lt;/li&gt;
&lt;li&gt;提高未来的编程速度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;何时重构&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;事不过三&lt;/strong&gt;，第一次只管去做，第二次产生反感但还是去做，第三次做类似的事情就去重构&lt;/li&gt;
&lt;li&gt;修改bug时重构&lt;/li&gt;
&lt;li&gt;review代码时重构&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;间接层和重构：中间层能够允许逻辑共享和意图的分开解释，同时隔离变化和解耦。&lt;ul&gt;
&lt;li&gt;提前设计好中间层不如先直接做再重构&lt;/li&gt;
&lt;li&gt;少数情况下，中间层只会带来冗余&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;重构的难题&lt;ul&gt;
&lt;li&gt;修改已有API：建议维护新旧两个接口，让用户做出反应后，再迁移。这期间，旧接口应该要调用新接口实现&lt;/li&gt;
&lt;li&gt;代码已经无法正常运行时，重写比重构更省事&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;重构和性能优化：大多数的性能优化集中在小部分代码上。先写出风格良好的代码，再使用性能工具实测数据，对瓶颈处单独优化性能。好的重构也会让性能优化更容易进行&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;坏味道&#34;&gt;&lt;a href=&#34;#坏味道&#34; class=&#34;headerlink&#34; title=&#34;坏味道&#34;&gt;&lt;/a&gt;坏味道&lt;/h2&gt;&lt;p&gt;在遇到下面一些“味道”时，可能你就需要重构了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重复代码&lt;/li&gt;
&lt;li&gt;函数过长，每当你需要用注释说明点什么时，可以把需要说明的东西写到一个独立函数中&lt;/li&gt;
&lt;li&gt;太长的类&lt;/li&gt;
&lt;li&gt;函数入参过多&lt;/li&gt;
&lt;li&gt;发散式变化：一个类因为多个原因发生不同的变化&lt;/li&gt;
&lt;li&gt;霰弹式变化：一个原因引起一个类的多个变化&lt;/li&gt;
&lt;li&gt;特性依恋：函数对某个类的兴趣高于自己所在的类&lt;/li&gt;
&lt;li&gt;数据泥团：喜欢聚合在一起的零散数据字段&lt;/li&gt;
&lt;li&gt;基础类型偏执：对于基础类型如字符串、整型不愿意使用简单类来封装&lt;/li&gt;
&lt;li&gt;swtich语句&lt;/li&gt;
&lt;li&gt;冗余类&lt;/li&gt;
&lt;li&gt;夸夸其谈未来性：过度为未来设计&lt;/li&gt;
&lt;li&gt;令人迷惑的暂时字段&lt;/li&gt;
&lt;li&gt;过度耦合的链式调用，如&lt;code&gt;a.b.c().d()&lt;/code&gt;，链上任意类做修改都会影响整个调用&lt;/li&gt;
&lt;li&gt;两个类的狎昵关系&lt;/li&gt;
&lt;li&gt;异曲同工的类&lt;/li&gt;
&lt;li&gt;幼稚的数据类：只有最简单的getter和setter&lt;/li&gt;
&lt;li&gt;子类拒绝继承超类的函数或数据&lt;/li&gt;
&lt;li&gt;过多的注释&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;测试体系：重构的保证&#34;&gt;&lt;a href=&#34;#测试体系：重构的保证&#34; class=&#34;headerlink&#34; title=&#34;测试体系：重构的保证&#34;&gt;&lt;/a&gt;测试体系：重构的保证&lt;/h2&gt;&lt;p&gt;前面已经提到数次，重构的前提是不对已经已有行为做改动，这需要测试的帮助。本章对建立测试给了一些简单的介绍。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编写测试代码最有用时机是编程之前&lt;/li&gt;
&lt;li&gt;编写一个测试case时，可以先让测试失败，再通过成功验证程序功能&lt;/li&gt;
&lt;li&gt;遇到bug时，先添加一个单元测试复现这个bug&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;测试不能保证程序没有bug&lt;/strong&gt;，编写测试样例也遵循82原则，当样例已经很多时，它带来的边际效果就没那么好了。应该更多考虑容易出错的&lt;strong&gt;边界条件&lt;/strong&gt;，积极思考如何“破坏代码”。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;重构列表&#34;&gt;&lt;a href=&#34;#重构列表&#34; class=&#34;headerlink&#34; title=&#34;重构列表&#34;&gt;&lt;/a&gt;重构列表&lt;/h2&gt;&lt;p&gt;下面分几大方向介绍具体的重构手段。每个手段会分场景、思路、动机、做法来展开。&lt;/p&gt;
&lt;h3 id=&#34;组织函数&#34;&gt;&lt;a href=&#34;#组织函数&#34; class=&#34;headerlink&#34; title=&#34;组织函数&#34;&gt;&lt;/a&gt;组织函数&lt;/h3&gt;&lt;p&gt;日常工作中，非常容易坏味道中的过长函数，下面的一些重构方式可以帮我们优化这一点。&lt;/p&gt;
&lt;h4 id=&#34;提炼函数&#34;&gt;&lt;a href=&#34;#提炼函数&#34; class=&#34;headerlink&#34; title=&#34;提炼函数&#34;&gt;&lt;/a&gt;提炼函数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：有一段相对独立的代码可以被组织并独立出来&lt;/li&gt;
&lt;li&gt;思路：将这段代码放到一个独立函数中，用&lt;strong&gt;函数名解释该函数的用途&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;动机：有时会遇到过长函数中有一段需要注释才能看明白的代码。将这样相对独立的逻辑拆分成表意的短小函数后，可以让高层函数读起来就像一系列注释。如果提炼可以提高代码清晰度，就算函数名比函数体长都无所谓&lt;/li&gt;
&lt;li&gt;做法：用&lt;strong&gt;做什么&lt;/strong&gt;而不是&lt;strong&gt;怎么做&lt;/strong&gt;来为函数命名（如果你想不出一个更有意义的名称，就别动了）。检查是否有临时变量，如果有读取，可以作为入参传递给函数；如果对临时变量甚至有再赋值，那可能还要让函数返回临时变量修改后的值&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;内联函数&#34;&gt;&lt;a href=&#34;#内联函数&#34; class=&#34;headerlink&#34; title=&#34;内联函数&#34;&gt;&lt;/a&gt;内联函数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：函数本体和名称一样清晰易懂&lt;/li&gt;
&lt;li&gt;思路：在函数调用点插入函数本体，然后移除函数&lt;/li&gt;
&lt;li&gt;动机：如果函数本体足够简单，且表意清晰，同时调用点有限，&lt;strong&gt;不具备多态性&lt;/strong&gt;。那么出于减少无用中间层的考虑，可以直接使用函数体&lt;/li&gt;
&lt;li&gt;做法：注意检查是否有多态性&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;内联临时变量&#34;&gt;&lt;a href=&#34;#内联临时变量&#34; class=&#34;headerlink&#34; title=&#34;内联临时变量&#34;&gt;&lt;/a&gt;内联临时变量&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：一个临时变量只被&lt;strong&gt;简单表达式&lt;/strong&gt;赋值一次，同时妨碍了其他重构手法&lt;/li&gt;
&lt;li&gt;思路：将对变量的引用动作，替换成给它赋值的表达式本身&lt;/li&gt;
&lt;li&gt;动机：过多的临时变量会妨碍你重构长函数&lt;/li&gt;
&lt;li&gt;做法：注意确保表达式&lt;strong&gt;没有副作用&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;以查询替代临时变量&#34;&gt;&lt;a href=&#34;#以查询替代临时变量&#34; class=&#34;headerlink&#34; title=&#34;以查询替代临时变量&#34;&gt;&lt;/a&gt;以查询替代临时变量&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：程序中有个临时变量保存了某个表达式的运算结果，同时被多处引用&lt;/li&gt;
&lt;li&gt;思路：将表达式提炼成独立函数，在独立变量的所有引用点替换成对新函数的调用&lt;/li&gt;
&lt;li&gt;动机：替换成函数后，整个类都可以获得这份信息，同时会减少对该变量的频繁引用带来的重构困难&lt;/li&gt;
&lt;li&gt;做法：寻找&lt;strong&gt;只被赋值一次&lt;/strong&gt;的临时变量，对于赋值多次的临时变量使用“分解临时变量”方法先重构，保证提炼出来的函数没有副作用。先不要担心性能问题，等到出现了优化也会比较简单&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;引入解释性变量&#34;&gt;&lt;a href=&#34;#引入解释性变量&#34; class=&#34;headerlink&#34; title=&#34;引入解释性变量&#34;&gt;&lt;/a&gt;引入解释性变量&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：有个复杂的表达式，表意不够清晰&lt;/li&gt;
&lt;li&gt;思路：将表达式的值放进一个临时变量，用变量名表意&lt;/li&gt;
&lt;li&gt;动机：表达式不如变量名更好阅读。如果临时变量在整个类都有意义，建议直接使用“提炼函数”方法&lt;/li&gt;
&lt;li&gt;做法：先判断是否使用“提炼函数”的做法&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;分解临时变量&#34;&gt;&lt;a href=&#34;#分解临时变量&#34; class=&#34;headerlink&#34; title=&#34;分解临时变量&#34;&gt;&lt;/a&gt;分解临时变量&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：某个临时变量被&lt;strong&gt;多次赋值&lt;/strong&gt;，且每次赋值意义不一样&lt;/li&gt;
&lt;li&gt;思路：针对每次不同意义的赋值使用不一样的临时变量&lt;/li&gt;
&lt;li&gt;动机：临时变量的多义性会增大理解成本&lt;/li&gt;
&lt;li&gt;做法：寻找被多次赋值且有多义性的变量，不同的意义使用新的不同临时变量&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;移除对函数入参的赋值&#34;&gt;&lt;a href=&#34;#移除对函数入参的赋值&#34; class=&#34;headerlink&#34; title=&#34;移除对函数入参的赋值&#34;&gt;&lt;/a&gt;移除对函数入参的赋值&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：对函数入参赋值&lt;/li&gt;
&lt;li&gt;思路：用新的临时变量取代入参&lt;/li&gt;
&lt;li&gt;动机：对入参赋值会混淆按值传递和按引用传递的传参方式&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;用函数对象取代函数&#34;&gt;&lt;a href=&#34;#用函数对象取代函数&#34; class=&#34;headerlink&#34; title=&#34;用函数对象取代函数&#34;&gt;&lt;/a&gt;用函数对象取代函数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：大型函数中代码过于复杂，无法使用“提炼函数”&lt;/li&gt;
&lt;li&gt;思路：直接将函数放在&lt;strong&gt;单独对象&lt;/strong&gt;中，将复杂的局部变量变成对象字段，从而可以轻松地在对象中分解这个大型函数到多个小型函数&lt;/li&gt;
&lt;li&gt;动机：略&lt;/li&gt;
&lt;li&gt;做法&lt;ol&gt;
&lt;li&gt;建立一个新类，用函数用途给这类命名&lt;/li&gt;
&lt;li&gt;在新类中创建final字段保存大型函数所在的对象，即“源对象”&lt;/li&gt;
&lt;li&gt;新类的构造函数使用原函数入参作为入参&lt;/li&gt;
&lt;li&gt;新类中建立&lt;code&gt;computed()&lt;/code&gt;函数&lt;/li&gt;
&lt;li&gt;赋值原代码到&lt;code&gt;computed()&lt;/code&gt;中&lt;/li&gt;
&lt;li&gt;在原函数位置，创建这个新类的一个对象，并调用这个对象的&lt;code&gt;computed()&lt;/code&gt;函数&lt;/li&gt;
&lt;li&gt;继续重构新类中的&lt;code&gt;computed()&lt;/code&gt;函数&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;替换算法&#34;&gt;&lt;a href=&#34;#替换算法&#34; class=&#34;headerlink&#34; title=&#34;替换算法&#34;&gt;&lt;/a&gt;替换算法&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：某个算法有更清晰的算法替代&lt;/li&gt;
&lt;li&gt;思路：直接更换函数本体&lt;/li&gt;
&lt;li&gt;动机：略&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;对象间的特性搬移&#34;&gt;&lt;a href=&#34;#对象间的特性搬移&#34; class=&#34;headerlink&#34; title=&#34;对象间的特性搬移&#34;&gt;&lt;/a&gt;对象间的特性搬移&lt;/h3&gt;&lt;p&gt;类应该承担清晰且明确的责任。不论是承担责任过多还是“不怎么负责任”，都需要进行重构。&lt;/p&gt;
&lt;h4 id=&#34;搬移函数&#34;&gt;&lt;a href=&#34;#搬移函数&#34; class=&#34;headerlink&#34; title=&#34;搬移函数&#34;&gt;&lt;/a&gt;搬移函数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：有函数和所在类以外的其他类反而有更多交流，如调用或被调用&lt;/li&gt;
&lt;li&gt;思路：在和函数交流更多的类中建立一个有类似行为的新函数，改造旧函数为新函数的委托函数，或者直接移除旧函数&lt;/li&gt;
&lt;li&gt;动机：略&lt;/li&gt;
&lt;li&gt;做法：&lt;ul&gt;
&lt;li&gt;检查和搬移函数关联的字段或函数，判断是否要一起搬移&lt;/li&gt;
&lt;li&gt;检查子类和超类有无其他声明，检查有无多态性&lt;/li&gt;
&lt;li&gt;如果目标函数需要太多源类特性，就需要进一步分解后再搬移&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;搬移字段&#34;&gt;&lt;a href=&#34;#搬移字段&#34; class=&#34;headerlink&#34; title=&#34;搬移字段&#34;&gt;&lt;/a&gt;搬移字段&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：某个字段和所在类以外的其他类有更多交流&lt;/li&gt;
&lt;li&gt;思路：在目标类新建字段，修改源字段的所有使用者，令它们使用新字段&lt;/li&gt;
&lt;li&gt;动机：略&lt;/li&gt;
&lt;li&gt;做法：如果字段的访问级别是&lt;code&gt;public&lt;/code&gt;，需要先用“封装字段”手段制造一个委托中间层&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;提炼类&#34;&gt;&lt;a href=&#34;#提炼类&#34; class=&#34;headerlink&#34; title=&#34;提炼类&#34;&gt;&lt;/a&gt;提炼类&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：某个类做了两个类的事情&lt;/li&gt;
&lt;li&gt;思路：建立新类，搬移函数和字段&lt;/li&gt;
&lt;li&gt;动机：一个类应该是清楚的抽象，即可以使用清晰的命名&lt;/li&gt;
&lt;li&gt;做法：拆分类，建立两个类之间的单向或双向连接，搬移底层函数，搬移高层函数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;内联化类&#34;&gt;&lt;a href=&#34;#内联化类&#34; class=&#34;headerlink&#34; title=&#34;内联化类&#34;&gt;&lt;/a&gt;内联化类&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：某个类没做什么事情&lt;/li&gt;
&lt;li&gt;思路：将这个类的特性搬移到其他类，然后移除原类&lt;/li&gt;
&lt;li&gt;动机：通常会由于此前的重构动作移走了这个类的责任&lt;/li&gt;
&lt;li&gt;做法：选择和这个类关系最近的类进行合并，可以先在目标类中使用委托，然后再通过搬移函数的方式完成重构&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;隐藏委托关系&#34;&gt;&lt;a href=&#34;#隐藏委托关系&#34; class=&#34;headerlink&#34; title=&#34;隐藏委托关系&#34;&gt;&lt;/a&gt;隐藏委托关系&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：使用者通过委托类来调用对象&lt;/li&gt;
&lt;li&gt;思路：在提供服务的类上直接建立使用者所需的所有函数，隐藏委托关系&lt;/li&gt;
&lt;li&gt;动机：隐藏调用关系可以减少实现细节暴露从而减少耦合&lt;/li&gt;
&lt;li&gt;做法：在发起请求的类中，直接实现功能的接口，移除使用者的委托代码&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;移除中间人&#34;&gt;&lt;a href=&#34;#移除中间人&#34; class=&#34;headerlink&#34; title=&#34;移除中间人&#34;&gt;&lt;/a&gt;移除中间人&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：类做了过多&lt;strong&gt;简单委托&lt;/strong&gt;的动作&lt;/li&gt;
&lt;li&gt;思路：让使用者直接调用受托类&lt;/li&gt;
&lt;li&gt;动机：当“隐藏委托关系”使用过多时，封装会很痛苦，这个时候不如直接让使用者通过链式调用用中间受托类实现功能&lt;/li&gt;
&lt;li&gt;做法：刚好是“隐藏委托关系”的反向过程&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;引入外加函数&#34;&gt;&lt;a href=&#34;#引入外加函数&#34; class=&#34;headerlink&#34; title=&#34;引入外加函数&#34;&gt;&lt;/a&gt;引入外加函数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：需要为提供服务的类新增函数，但是你无法修改这个类（通常是库代码）&lt;/li&gt;
&lt;li&gt;思路：在使用者类中建立一个函数，并用第一参数的方式传入服务类实例&lt;/li&gt;
&lt;li&gt;动机：尽管可以在不修改服务类代码的情况下，自行添加新函数，但还是建议当外加函数较多时，使用“引入本地扩展”的方式，或直接推动服务类升级&lt;/li&gt;
&lt;li&gt;做法：在客户类中建立函数，这个函数不调用客户类特性，只是转发请求到服务类&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;引入本地扩展&#34;&gt;&lt;a href=&#34;#引入本地扩展&#34; class=&#34;headerlink&#34; title=&#34;引入本地扩展&#34;&gt;&lt;/a&gt;引入本地扩展&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：需要为服务类添加一些额外函数，但你无法修改这个类&lt;/li&gt;
&lt;li&gt;思路：建立一个新类，使其包含这些额外函数，让这个扩展类成为源类的子类或包装类&lt;/li&gt;
&lt;li&gt;动机：子类工作量较少，但是必须在对象创建期接管创建过程；包装类只是单纯转发请求，没有这个限制，但是转发过程都需要自己实现&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;重新组织数据&#34;&gt;&lt;a href=&#34;#重新组织数据&#34; class=&#34;headerlink&#34; title=&#34;重新组织数据&#34;&gt;&lt;/a&gt;重新组织数据&lt;/h3&gt;&lt;h4 id=&#34;自封装字段&#34;&gt;&lt;a href=&#34;#自封装字段&#34; class=&#34;headerlink&#34; title=&#34;自封装字段&#34;&gt;&lt;/a&gt;自封装字段&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：直接访问一个字段的方式给你的重构带来了麻烦，或是引入了麻烦的耦合关系&lt;/li&gt;
&lt;li&gt;思路：用取值&amp;#x2F;设值函数替代直接访问字段&lt;/li&gt;
&lt;li&gt;动机：这种方式让字段更为灵活，但是根据奥卡姆剃刀法则，等需要的时候再用&lt;/li&gt;
&lt;li&gt;做法：有的字段可能需要一个初始化函数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;用对象取代数据值&#34;&gt;&lt;a href=&#34;#用对象取代数据值&#34; class=&#34;headerlink&#34; title=&#34;用对象取代数据值&#34;&gt;&lt;/a&gt;用对象取代数据值&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：数据项需要和行为合在一起使用才有价值&lt;/li&gt;
&lt;li&gt;思路：把简单的数据项封装成对象&lt;/li&gt;
&lt;li&gt;动机：开发初期的简单数据，可能在迭代后会加上特殊行为，如果不及时处理，就会出现特性依恋或重复代码&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;将值对象改为引用对象&#34;&gt;&lt;a href=&#34;#将值对象改为引用对象&#34; class=&#34;headerlink&#34; title=&#34;将值对象改为引用对象&#34;&gt;&lt;/a&gt;将值对象改为引用对象&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：从一个类会衍生出多个实例，实例间只是一个实体的多种状态&lt;/li&gt;
&lt;li&gt;思路：将值对象改为引用对象&lt;/li&gt;
&lt;li&gt;动机：值对象通过&lt;code&gt;equals()&lt;/code&gt;或&lt;code&gt;hashCode()&lt;/code&gt;判断，如日期；引用对象则直接可以用相等操作符&lt;code&gt;==&lt;/code&gt;判断，如顾客、账户等概念&lt;/li&gt;
&lt;li&gt;做法：你可能需要一个静态字段或提前创建好多个新对象作为访问点&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;将引用对象改为值对象&#34;&gt;&lt;a href=&#34;#将引用对象改为值对象&#34; class=&#34;headerlink&#34; title=&#34;将引用对象改为值对象&#34;&gt;&lt;/a&gt;将引用对象改为值对象&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：你的引用对象很小且&lt;strong&gt;不可变&lt;/strong&gt;，同时不易管理&lt;/li&gt;
&lt;li&gt;思路：将引用对象改为值对象&lt;/li&gt;
&lt;li&gt;动机：引用对象不好控制，值对象的&lt;strong&gt;不可变特性&lt;/strong&gt;在某些场景很好用。&lt;/li&gt;
&lt;li&gt;做法：&lt;strong&gt;只有不可变对象才能被重构&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;以对象取代数组&#34;&gt;&lt;a href=&#34;#以对象取代数组&#34; class=&#34;headerlink&#34; title=&#34;以对象取代数组&#34;&gt;&lt;/a&gt;以对象取代数组&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：有个数组，其中的元素类型不一，代表不同的东西&lt;/li&gt;
&lt;li&gt;思路：用对象替代数组，用字段表示不同意义的元素&lt;/li&gt;
&lt;li&gt;动机：数组的作用是&lt;strong&gt;以某种顺序存储一组相似对象&lt;/strong&gt;，不要让位置具有特殊意义&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;复制被监视数据&#34;&gt;&lt;a href=&#34;#复制被监视数据&#34; class=&#34;headerlink&#34; title=&#34;复制被监视数据&#34;&gt;&lt;/a&gt;复制被监视数据&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：有些领域数据被放在了GUI部分代码里&lt;/li&gt;
&lt;li&gt;思路：将数据复制到领域对象中，建立Observer模式，剥离UI和逻辑&lt;/li&gt;
&lt;li&gt;动机：分层良好的系统，用户界面和业务逻辑代码是分开的，这样也更好维护&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;将单向关联改成双向关联&#34;&gt;&lt;a href=&#34;#将单向关联改成双向关联&#34; class=&#34;headerlink&#34; title=&#34;将单向关联改成双向关联&#34;&gt;&lt;/a&gt;将单向关联改成双向关联&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：两个类都需要对方特性，但目前只有单向连接&lt;/li&gt;
&lt;li&gt;思路：增加一个反向指针，同时修改函数能够同时更新两条链接&lt;/li&gt;
&lt;li&gt;动机：略&lt;/li&gt;
&lt;li&gt;做法：注意删除过程移除指针的顺序&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;将双向关联改为单向关联&#34;&gt;&lt;a href=&#34;#将双向关联改为单向关联&#34; class=&#34;headerlink&#34; title=&#34;将双向关联改为单向关联&#34;&gt;&lt;/a&gt;将双向关联改为单向关联&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：两个类有双向关联，但是一个类已经不需要另一个类的特性&lt;/li&gt;
&lt;li&gt;思路：去除不必要连接&lt;/li&gt;
&lt;li&gt;动机：维护双向连接带来便利的同时，也会增加维护的复杂度&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;用常量取代魔法数&#34;&gt;&lt;a href=&#34;#用常量取代魔法数&#34; class=&#34;headerlink&#34; title=&#34;用常量取代魔法数&#34;&gt;&lt;/a&gt;用常量取代魔法数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：有个字面量数值，具有特殊含义，但是不能一眼看明白&lt;/li&gt;
&lt;li&gt;思路：创造一个常量，用命名说明字面数值的意义&lt;/li&gt;
&lt;li&gt;动机：魔法数是类型码时，要使用“以类取代类型码”&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;封装字段&#34;&gt;&lt;a href=&#34;#封装字段&#34; class=&#34;headerlink&#34; title=&#34;封装字段&#34;&gt;&lt;/a&gt;封装字段&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：类中有public字段&lt;/li&gt;
&lt;li&gt;思路：声明改为private，提供相应的访问函数&lt;/li&gt;
&lt;li&gt;动机：暴露public会降低函数的模块化程度，数据应该和行为集中在一起，不应被直接修改&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;封装集合&#34;&gt;&lt;a href=&#34;#封装集合&#34; class=&#34;headerlink&#34; title=&#34;封装集合&#34;&gt;&lt;/a&gt;封装集合&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：函数返回一个集合&lt;/li&gt;
&lt;li&gt;思路：返回集合的只读副本，并在类中提供添加&amp;#x2F;移除集合元素的函数&lt;/li&gt;
&lt;li&gt;动机：类似“封装字段”，返回的集合一样可能被修改&lt;/li&gt;
&lt;li&gt;做法：使用Collection，或返回一个副本&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;用数据类取代记录&#34;&gt;&lt;a href=&#34;#用数据类取代记录&#34; class=&#34;headerlink&#34; title=&#34;用数据类取代记录&#34;&gt;&lt;/a&gt;用数据类取代记录&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：面对传统编程中的记录结构&lt;/li&gt;
&lt;li&gt;思路：创建“哑”数据对象&lt;/li&gt;
&lt;li&gt;动机：要将记录型结构转成面向对象的程序中&lt;/li&gt;
&lt;li&gt;做法：创建private字段，创建读写函数并提供&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;以类取代类型码&#34;&gt;&lt;a href=&#34;#以类取代类型码&#34; class=&#34;headerlink&#34; title=&#34;以类取代类型码&#34;&gt;&lt;/a&gt;以类取代类型码&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：类中有个数值类型码，但是&lt;strong&gt;不影响类行为&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;思路：用新的类替换数值类型码&lt;/li&gt;
&lt;li&gt;动机：略&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;以子类取代类型码&#34;&gt;&lt;a href=&#34;#以子类取代类型码&#34; class=&#34;headerlink&#34; title=&#34;以子类取代类型码&#34;&gt;&lt;/a&gt;以子类取代类型码&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：类中有个&lt;strong&gt;不可变&lt;/strong&gt;数值类型码，同时&lt;strong&gt;影响类行为&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;思路：用宿主的子类替换类型码&lt;/li&gt;
&lt;li&gt;动机：可以用子类的多态性取代switch语句，不过，如果类型码会发生改变，或者宿主类已经有子类则不能用此方法&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;以状态-x2F-策略取代类型码&#34;&gt;&lt;a href=&#34;#以状态-x2F-策略取代类型码&#34; class=&#34;headerlink&#34; title=&#34;以状态&amp;#x2F;策略取代类型码&#34;&gt;&lt;/a&gt;以状态&amp;#x2F;策略取代类型码&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：类中有个数值类型码，会&lt;strong&gt;影响类行为&lt;/strong&gt;，同时不能通过继承来消除&lt;/li&gt;
&lt;li&gt;思路：以状态对象取代替换数值类型码&lt;/li&gt;
&lt;li&gt;动机：略&lt;/li&gt;
&lt;li&gt;做法：创建一个新的类，用类型码的用途为它命名，这就是一个状态对象。所有的新类继承自超类，返回不同的状态码&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;以字段取代字段&#34;&gt;&lt;a href=&#34;#以字段取代字段&#34; class=&#34;headerlink&#34; title=&#34;以字段取代字段&#34;&gt;&lt;/a&gt;以字段取代字段&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：子类的查边只在&lt;strong&gt;返回常量数据&lt;/strong&gt;的函数上&lt;/li&gt;
&lt;li&gt;思路：修改函数，让它们返回超类的新增字段，然后销毁子类&lt;/li&gt;
&lt;li&gt;动机：这样可以避免继承带来的额外复杂性&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;简化条件表达式&#34;&gt;&lt;a href=&#34;#简化条件表达式&#34; class=&#34;headerlink&#34; title=&#34;简化条件表达式&#34;&gt;&lt;/a&gt;简化条件表达式&lt;/h3&gt;&lt;p&gt;条件逻辑会增加理解的层级，处理不好时，很容易配合长代码造成理解困难。&lt;/p&gt;
&lt;h4 id=&#34;分解条件表达式&#34;&gt;&lt;a href=&#34;#分解条件表达式&#34; class=&#34;headerlink&#34; title=&#34;分解条件表达式&#34;&gt;&lt;/a&gt;分解条件表达式&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：有一个复杂的条件语句&lt;/li&gt;
&lt;li&gt;思路：为if、then、else语句段落提炼独立函数&lt;/li&gt;
&lt;li&gt;动机：条件逻辑通常会使代码更难阅读&lt;/li&gt;
&lt;li&gt;做法：使用表意的函数名说明条件语句意思&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;合并条件表达式&#34;&gt;&lt;a href=&#34;#合并条件表达式&#34; class=&#34;headerlink&#34; title=&#34;合并条件表达式&#34;&gt;&lt;/a&gt;合并条件表达式&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：有一系列的条件逻辑，都得到相同结果&lt;/li&gt;
&lt;li&gt;思路：合并成一个条件表达式，并将之提炼成一个独立函数&lt;/li&gt;
&lt;li&gt;动机：有时候这么做能把“做什么”的语句转换成“为什么”的含义，前提是这些检查并非彼此独立&lt;/li&gt;
&lt;li&gt;做法：注意确认条件语句都没有副作用，有些条件表达式甚至可以简化成三元表达式&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;合并重复的条件片段&#34;&gt;&lt;a href=&#34;#合并重复的条件片段&#34; class=&#34;headerlink&#34; title=&#34;合并重复的条件片段&#34;&gt;&lt;/a&gt;合并重复的条件片段&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：条件表达式的每个分支都有相同的一段代码&lt;/li&gt;
&lt;li&gt;思路：将代码提取到条件表达式之外&lt;/li&gt;
&lt;li&gt;动机：减少重复语句&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;移除控制标记&#34;&gt;&lt;a href=&#34;#移除控制标记&#34; class=&#34;headerlink&#34; title=&#34;移除控制标记&#34;&gt;&lt;/a&gt;移除控制标记&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：在一系列布尔表达式中，某变量具有控制标记的作用&lt;/li&gt;
&lt;li&gt;思路：用&lt;code&gt;break&lt;/code&gt;或&lt;code&gt;return&lt;/code&gt;替代&lt;/li&gt;
&lt;li&gt;动机：有时候为了可读性和可维护性，可以牺牲单一出口的做法&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;用“卫语句”替代嵌套条件表达式&#34;&gt;&lt;a href=&#34;#用“卫语句”替代嵌套条件表达式&#34; class=&#34;headerlink&#34; title=&#34;用“卫语句”替代嵌套条件表达式&#34;&gt;&lt;/a&gt;用“卫语句”替代嵌套条件表达式&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：嵌套的条件逻辑过多，难以看清正常执行路径&lt;/li&gt;
&lt;li&gt;思路：用“卫语句”枚举出所有特殊情况，减少嵌套层数&lt;/li&gt;
&lt;li&gt;动机：当特殊case多于正常case时，提前处理每种特殊情况，可以有效减少嵌套层数&lt;/li&gt;
&lt;li&gt;做法：注意“卫语句”要么就从函数返回，要么就抛出异常，反正要跳出当前执行流&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;用多态取代条件表达式&#34;&gt;&lt;a href=&#34;#用多态取代条件表达式&#34; class=&#34;headerlink&#34; title=&#34;用多态取代条件表达式&#34;&gt;&lt;/a&gt;用多态取代条件表达式&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：你手上有个条件表达式，根据对象类型不同选择不同行为&lt;/li&gt;
&lt;li&gt;思路：将条件表达式的每个分支放在子类的重载函数中，然后将父类的原始函数声明为抽象函数&lt;/li&gt;
&lt;li&gt;动机：面向对象程序中，更少出现switch语句也是得益于多态这个工具&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;引入Null对象&#34;&gt;&lt;a href=&#34;#引入Null对象&#34; class=&#34;headerlink&#34; title=&#34;引入Null对象&#34;&gt;&lt;/a&gt;引入Null对象&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：在很多地方检查对象是否为&lt;code&gt;null&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;思路：用一个特殊的Null对象取代&lt;code&gt;null&lt;/code&gt;值&lt;/li&gt;
&lt;li&gt;动机：空对象对外就像是特殊的空的对象（Go笑而不语），而不是什么都没有，有利于保证函数行为的一致性&lt;/li&gt;
&lt;li&gt;做法：空对象一定是单例的&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;引入断言&#34;&gt;&lt;a href=&#34;#引入断言&#34; class=&#34;headerlink&#34; title=&#34;引入断言&#34;&gt;&lt;/a&gt;引入断言&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：某段代码需要对程序状态做出假设&lt;/li&gt;
&lt;li&gt;思路：用断言表示这种假设&lt;/li&gt;
&lt;li&gt;动机：有些时候，只有某个条件为真，代码才能正常运行，这个时候用断言明确这些假设。&lt;/li&gt;
&lt;li&gt;做法：注意不要滥用断言，只用来检查“一定为真”的条件，而不要去检查“应该为真”的条件&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;优化函数调用&#34;&gt;&lt;a href=&#34;#优化函数调用&#34; class=&#34;headerlink&#34; title=&#34;优化函数调用&#34;&gt;&lt;/a&gt;优化函数调用&lt;/h3&gt;&lt;p&gt;我们在前面提到了函数体本身的优化，这一章我们主要介绍函数调用的优化&lt;/p&gt;
&lt;h4 id=&#34;函数改名&#34;&gt;&lt;a href=&#34;#函数改名&#34; class=&#34;headerlink&#34; title=&#34;函数改名&#34;&gt;&lt;/a&gt;函数改名&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：函数名没能说明函数用途&lt;/li&gt;
&lt;li&gt;思路：修改函数名&lt;/li&gt;
&lt;li&gt;动机：优化函数名，让它达到注释的效果，重新安排参数顺序，提高代码清晰度&lt;/li&gt;
&lt;li&gt;做法：对于旧函数，可以标注&lt;code&gt;deprecated&lt;/code&gt;，说明其不建议使用&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;添加参数&#34;&gt;&lt;a href=&#34;#添加参数&#34; class=&#34;headerlink&#34; title=&#34;添加参数&#34;&gt;&lt;/a&gt;添加参数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：函数需要从调用端得到更多信息&lt;/li&gt;
&lt;li&gt;思路：为函数添加新的对象参数&lt;/li&gt;
&lt;li&gt;动机：如果有其他重构的方法，只要可能，基本都比添加参数要好&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;移除参数&#34;&gt;&lt;a href=&#34;#移除参数&#34; class=&#34;headerlink&#34; title=&#34;移除参数&#34;&gt;&lt;/a&gt;移除参数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：函数本体不需要某个参数&lt;/li&gt;
&lt;li&gt;思路：去除该参数&lt;/li&gt;
&lt;li&gt;动机：暂时不要考虑未来是否能用到&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;分离查询和修改&#34;&gt;&lt;a href=&#34;#分离查询和修改&#34; class=&#34;headerlink&#34; title=&#34;分离查询和修改&#34;&gt;&lt;/a&gt;分离查询和修改&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：一个函数即返回对象状态，同时又有副作用&lt;/li&gt;
&lt;li&gt;思路：将查询和修改分离出两个参数&lt;/li&gt;
&lt;li&gt;动机：任何有返回值的函数，最好都不要有看得见的副作用&lt;/li&gt;
&lt;li&gt;做法：先分离查询，再分离修改&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;让函数携带参数&#34;&gt;&lt;a href=&#34;#让函数携带参数&#34; class=&#34;headerlink&#34; title=&#34;让函数携带参数&#34;&gt;&lt;/a&gt;让函数携带参数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：若干函数做了类似的操作，仅仅因为某些值表现不同&lt;/li&gt;
&lt;li&gt;思路：用一个单一函数表示，用参数来表示那些不同的值&lt;/li&gt;
&lt;li&gt;动机：减少重复代码&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;用明确函数取代参数&#34;&gt;&lt;a href=&#34;#用明确函数取代参数&#34; class=&#34;headerlink&#34; title=&#34;用明确函数取代参数&#34;&gt;&lt;/a&gt;用明确函数取代参数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：有一个函数，其中&lt;strong&gt;完全取决于参数&lt;/strong&gt;表现出不同行为&lt;/li&gt;
&lt;li&gt;思路：针对参数的不同值，建立一个独立函数&lt;/li&gt;
&lt;li&gt;动机：函数内大多以条件表达式检查这些参数值，并作出不同行为；有时也可以用多态实现&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;保持对象完整&#34;&gt;&lt;a href=&#34;#保持对象完整&#34; class=&#34;headerlink&#34; title=&#34;保持对象完整&#34;&gt;&lt;/a&gt;保持对象完整&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：你从对象中取了若干字段，将它们作为函数调用的一些参数&lt;/li&gt;
&lt;li&gt;思路：改为传递整个对象&lt;/li&gt;
&lt;li&gt;动机：如果传递整个对象会让你的依赖结构恶化，那么就不该用这个方法&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;用函数取代参数&#34;&gt;&lt;a href=&#34;#用函数取代参数&#34; class=&#34;headerlink&#34; title=&#34;用函数取代参数&#34;&gt;&lt;/a&gt;用函数取代参数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：对象调用某个函数，用其结果做参数传递给另一个函数，然而接受改参数的函数本身也能调用到前一个函数&lt;/li&gt;
&lt;li&gt;思路：让参数接受函数直接去调用前一个函数，然后去除该参数&lt;/li&gt;
&lt;li&gt;动机：&lt;strong&gt;如果函数有其他途径获得参数值，就不该通过参数获得&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;引入参数对象&#34;&gt;&lt;a href=&#34;#引入参数对象&#34; class=&#34;headerlink&#34; title=&#34;引入参数对象&#34;&gt;&lt;/a&gt;引入参数对象&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：某些函数入参总是在一起出现&lt;/li&gt;
&lt;li&gt;思路：直接用一个对象取代这些参数&lt;/li&gt;
&lt;li&gt;动机：略&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;移除设值函数&#34;&gt;&lt;a href=&#34;#移除设值函数&#34; class=&#34;headerlink&#34; title=&#34;移除设值函数&#34;&gt;&lt;/a&gt;移除设值函数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：类的某个字段在创建时设值，然后就不再改变&lt;/li&gt;
&lt;li&gt;思路：去掉字段的设值函数&lt;/li&gt;
&lt;li&gt;动机：提供设值字段就表示可能被改变&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;隐藏函数&#34;&gt;&lt;a href=&#34;#隐藏函数&#34; class=&#34;headerlink&#34; title=&#34;隐藏函数&#34;&gt;&lt;/a&gt;隐藏函数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：有函数从未被其他类用到&lt;/li&gt;
&lt;li&gt;思路：将函数改为private&lt;/li&gt;
&lt;li&gt;动机：减少无谓的API暴露&lt;/li&gt;
&lt;li&gt;做法：可以利用lint工具帮忙检查&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;用工厂函数替代构造函数&#34;&gt;&lt;a href=&#34;#用工厂函数替代构造函数&#34; class=&#34;headerlink&#34; title=&#34;用工厂函数替代构造函数&#34;&gt;&lt;/a&gt;用工厂函数替代构造函数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：希望创建对象时不仅做简单的构建动作&lt;/li&gt;
&lt;li&gt;思路：使用工厂函数&lt;/li&gt;
&lt;li&gt;动机：这个方法也可以用来通过类型码创建类对象&lt;/li&gt;
&lt;li&gt;做法：结合&lt;code&gt;Class.forName()&lt;/code&gt;可以不用写switch语句&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;封装向下转型&#34;&gt;&lt;a href=&#34;#封装向下转型&#34; class=&#34;headerlink&#34; title=&#34;封装向下转型&#34;&gt;&lt;/a&gt;封装向下转型&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：函数返回的对象需要由调用者向下转型&lt;/li&gt;
&lt;li&gt;思路：将向下转型放在函数中进行&lt;/li&gt;
&lt;li&gt;动机：略&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;用异常取代错误码&#34;&gt;&lt;a href=&#34;#用异常取代错误码&#34; class=&#34;headerlink&#34; title=&#34;用异常取代错误码&#34;&gt;&lt;/a&gt;用异常取代错误码&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：函数返回特性的代码表示错误情况&lt;/li&gt;
&lt;li&gt;思路：改用异常&lt;/li&gt;
&lt;li&gt;动机：异常能够区分出正常情况和异常处理&lt;/li&gt;
&lt;li&gt;做法：需要决定抛出受控异常或者非受控异常&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;用测试取代异常&#34;&gt;&lt;a href=&#34;#用测试取代异常&#34; class=&#34;headerlink&#34; title=&#34;用测试取代异常&#34;&gt;&lt;/a&gt;用测试取代异常&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：对于一个调用者可以预先检查的条件，抛出了异常&lt;/li&gt;
&lt;li&gt;思路：修改调用者，改在调用前进行检查&lt;/li&gt;
&lt;li&gt;动机：能够提前检查的情况，就不算是异常&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;处理继承关系&#34;&gt;&lt;a href=&#34;#处理继承关系&#34; class=&#34;headerlink&#34; title=&#34;处理继承关系&#34;&gt;&lt;/a&gt;处理继承关系&lt;/h3&gt;&lt;h4 id=&#34;字段上移&#34;&gt;&lt;a href=&#34;#字段上移&#34; class=&#34;headerlink&#34; title=&#34;字段上移&#34;&gt;&lt;/a&gt;字段上移&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：两个子类有相同字段&lt;/li&gt;
&lt;li&gt;思路：将字段移至超类&lt;/li&gt;
&lt;li&gt;动机：归纳重复特性&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;函数上移&#34;&gt;&lt;a href=&#34;#函数上移&#34; class=&#34;headerlink&#34; title=&#34;函数上移&#34;&gt;&lt;/a&gt;函数上移&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：两个子类有相同作用的函数&lt;/li&gt;
&lt;li&gt;思路：将函数移至超类&lt;/li&gt;
&lt;li&gt;动机：归纳重复特性。子类的函数覆写超类函数，但是做相同工作时，也要使用函数上移&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;构造函数上移&#34;&gt;&lt;a href=&#34;#构造函数上移&#34; class=&#34;headerlink&#34; title=&#34;构造函数上移&#34;&gt;&lt;/a&gt;构造函数上移&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：子类的构造函数几乎完全一致&lt;/li&gt;
&lt;li&gt;思路：在超类中新建构造函数，再在子类构造函数中调用它&lt;/li&gt;
&lt;li&gt;动机：如果重构过程过于复杂，可以考虑使用“用工厂函数替代构造函数”&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;函数下移&#34;&gt;&lt;a href=&#34;#函数下移&#34; class=&#34;headerlink&#34; title=&#34;函数下移&#34;&gt;&lt;/a&gt;函数下移&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：超类的某函数只和部分子类有关&lt;/li&gt;
&lt;li&gt;思路：将函数移到相关的子类中去&lt;/li&gt;
&lt;li&gt;动机：和“函数上移”恰恰相反&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;字段下移&#34;&gt;&lt;a href=&#34;#字段下移&#34; class=&#34;headerlink&#34; title=&#34;字段下移&#34;&gt;&lt;/a&gt;字段下移&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：超类的字段只被部分子类用到&lt;/li&gt;
&lt;li&gt;思路：将字段移到真正需要的子类中去&lt;/li&gt;
&lt;li&gt;动机：和“字段上移”恰恰相反&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;提炼子类&#34;&gt;&lt;a href=&#34;#提炼子类&#34; class=&#34;headerlink&#34; title=&#34;提炼子类&#34;&gt;&lt;/a&gt;提炼子类&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：类的特性只被部分实例对象用到&lt;/li&gt;
&lt;li&gt;思路：新建一个子类，将未被用到的特性转移到子类中&lt;/li&gt;
&lt;li&gt;动机：上述的差异行为有时也可能通过类型码区分，这个时候可以由“以子类取代类型码”或“以状态&amp;#x2F;策略取代类型码”方法来重构&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;提炼超类&#34;&gt;&lt;a href=&#34;#提炼超类&#34; class=&#34;headerlink&#34; title=&#34;提炼超类&#34;&gt;&lt;/a&gt;提炼超类&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：两个类有相似特性&lt;/li&gt;
&lt;li&gt;思路：为两个类建立超类，将相似特性移到超类中&lt;/li&gt;
&lt;li&gt;动机：两个类用相同方式做类似事情往往意味着重复代码&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;提炼接口&#34;&gt;&lt;a href=&#34;#提炼接口&#34; class=&#34;headerlink&#34; title=&#34;提炼接口&#34;&gt;&lt;/a&gt;提炼接口&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：若干客户端使用类中的同一子集，或者两个类有部分相同点&lt;/li&gt;
&lt;li&gt;思路：将相同的子集提炼到独立接口中&lt;/li&gt;
&lt;li&gt;动机：接口有助于系统的&lt;strong&gt;责任划分&lt;/strong&gt;和&lt;strong&gt;能力声明&lt;/strong&gt;（鸭子类型）。在单继承的语言中，接口扮演了组合功能代码的角色。尤其某个类在不同环境表现不同时，使用接口是个好主意&lt;/li&gt;
&lt;li&gt;做法：接口命名通常由&lt;code&gt;-able&lt;/code&gt;结尾&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;折叠继承关系&#34;&gt;&lt;a href=&#34;#折叠继承关系&#34; class=&#34;headerlink&#34; title=&#34;折叠继承关系&#34;&gt;&lt;/a&gt;折叠继承关系&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：超类和子类几乎无法区分&lt;/li&gt;
&lt;li&gt;思路：将它们合为一体&lt;/li&gt;
&lt;li&gt;动机：往往在过度设计时出现&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;构造模板函数&#34;&gt;&lt;a href=&#34;#构造模板函数&#34; class=&#34;headerlink&#34; title=&#34;构造模板函数&#34;&gt;&lt;/a&gt;构造模板函数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：有一些子类，细节上有所区别，但是整个流程上操作类似&lt;/li&gt;
&lt;li&gt;思路：提炼出操作流程，上移至超类，将具体细节操作放在独立函数中，让它们有相同的签名，然后实现超类的抽象函数&lt;/li&gt;
&lt;li&gt;动机：这样抽离出来的流程函数也叫模板函数，模板上&lt;em&gt;插槽&lt;/em&gt;接口固定，然而提供插槽的模板函数是一致的&lt;/li&gt;
&lt;li&gt;做法：后续新增的类，只需实现超类抽象函数就可以完成扩展&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;用委托取代继承&#34;&gt;&lt;a href=&#34;#用委托取代继承&#34; class=&#34;headerlink&#34; title=&#34;用委托取代继承&#34;&gt;&lt;/a&gt;用委托取代继承&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：子类只使用超类接口的一部分，或者直接不需要继承来的数据&lt;/li&gt;
&lt;li&gt;思路：在子类中新建字段保存超类，然后调整子类函数，让它委托超类，然后去掉两者的继承关系&lt;/li&gt;
&lt;li&gt;动机：略&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;用继承取代委托&#34;&gt;&lt;a href=&#34;#用继承取代委托&#34; class=&#34;headerlink&#34; title=&#34;用继承取代委托&#34;&gt;&lt;/a&gt;用继承取代委托&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：两个类的委托关系过多，且委托函数都很简单&lt;/li&gt;
&lt;li&gt;思路：让委托类继承受托类&lt;/li&gt;
&lt;li&gt;动机：如果你没有使用&lt;strong&gt;所有&lt;/strong&gt;受托类函数，那么就不要用这个重构方法，继续保持委托关系，使用其他重构方法；另外受托对象可变时，也要注意&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;大型重构&#34;&gt;&lt;a href=&#34;#大型重构&#34; class=&#34;headerlink&#34; title=&#34;大型重构&#34;&gt;&lt;/a&gt;大型重构&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Kent Beck和作者所写&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本章介绍了4个大型重构的思路，也是大型程序容易遇到的4个问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;梳理和分析继承体系：往往因为某个继承体系承担的两个甚至更多责任，有一个特征是，某一层级的所有类，子类都以相同形容词开始。可以通过委托的形式，对继承体系做正交化&lt;/li&gt;
&lt;li&gt;过程化设计转化为对象设计：往往出现在过程化风格传统语言中。可以将数据记录变为对象，拆分大块行为为小块，然后将行为转移到相关对象中。&lt;/li&gt;
&lt;li&gt;分离领域和UI：出现在有GUI的场景中。传统的MVC设计模式就是将领域逻辑分离出来，用接口的方式和UI部分代码对接&lt;/li&gt;
&lt;li&gt;提炼继承体系：有的类做了太多工作，里面经常有较多的条件表达式。对于这种，可以借助面向对象中的子类和多态或者策略模式实现&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;重构与现实&#34;&gt;&lt;a href=&#34;#重构与现实&#34; class=&#34;headerlink&#34; title=&#34;重构与现实&#34;&gt;&lt;/a&gt;重构与现实&lt;/h2&gt;&lt;p&gt;重构在某些角度和技术演进很像。技术的接纳过程类似一条钟形曲线。前段包括先行者和早期接受者，中部大量人群包括早期消费者和晚期消费者，最后则是行动迟缓者。不同人有不同的消费动机。先行者和早期接受者感兴趣的是&lt;strong&gt;新技术，“范式转移和突破性思想”的愿景&lt;/strong&gt;；早期和晚期消费者则关心&lt;strong&gt;成熟度、成本、支持程度，以及这种新思想&amp;#x2F;新产品是否被和他们相似的其他人成功使用&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;尾声&#34;&gt;&lt;a href=&#34;#尾声&#34; class=&#34;headerlink&#34; title=&#34;尾声&#34;&gt;&lt;/a&gt;尾声&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;重构工具能节省你的重构时间&lt;/li&gt;
&lt;li&gt;永远记住“两顶帽子”，重构时保持代码功能不变&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="重构" />
        <category term="设计模式" />
        <category term="代码质量" />
        <updated>2020-08-17T14:56:03.000Z</updated>
    </entry>
    <entry>
        <id>http://shenlvmeng.github.com/blog/2019/12/02/clean-code/</id>
        <title>《代码整洁之道》——有一个好的代码品味</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2019/12/02/clean-code/"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;The only valid measurement of code quality: WTFs&amp;#x2F;minute&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在成为一个程序员的初期，实现功能还需磕磕绊绊的阶段，我们大抵没有精力操心代码风格的问题；而在能够搞定环境和API使用的时间段，大部分人又会沉湎于使用一门语言让想象实现的成就感，而没有发现暗藏在迭代后的危机。往往迭代了一段时间后，才发现之前埋下的巨坑已经让自己无从下手。这时一部分人醒悟过来，意识到一个优良的代码风格对于项目推进的长远意义。这也是《Clean Code》这本书的宗旨。它较之《程序员修炼之道》更为具体，较之《重构》更为宏观。对于工作一段时间后的程序员来说，是一个很好的提醒和反思归纳的建议。让代码work的方式是千万种，而让代码可持续，可扩展，长久work的方式也许需要前辈指引些方法。&lt;/p&gt;
&lt;h2 id=&#34;观念&#34;&gt;&lt;a href=&#34;#观念&#34; class=&#34;headerlink&#34; title=&#34;观念&#34;&gt;&lt;/a&gt;观念&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Later equals never —— Leblanc Law&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;糟糕的代码会让人难以下手，拖慢进度，若无人着手改善，混乱会持续增加，进而降低团队生产力，降低人效，然后搞砸整个项目。为什么不一开始就打好基础，写出整洁代码呢？&lt;/p&gt;
&lt;p&gt;下面是一些大师对“整洁代码”的界定&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“代码逻辑直截了当，缺陷难以隐藏；减少依赖关系，从而便于维护；性能调优，省得引人做出没规矩的优化，干出蠢事；整洁的代码只干一件事” —— Bjarne Stroustrup&lt;/li&gt;
&lt;li&gt;“代码简单直接，如同优美的散文；从不隐藏设计者的意图，充满干净利落的抽象和直截了当的控制语句” —— Grady Booch&lt;/li&gt;
&lt;li&gt;“可由作者外的人阅读和扩展，应该有单元测试和验收测试；只使用有意义的命名；提供尽量正交的使用方法（一种而非多种做一件事的方法）；尽量少的API；尽量少的依赖关系，且要明确定义和清晰提供；代码应从字面意义上表达其含义” —— Dave Thomas&lt;/li&gt;
&lt;li&gt;“整洁的代码总是看起来像某位特别在意的人写的，几乎没有改进的余地，所有的改进都会回到原点” —— Michael Feather&lt;/li&gt;
&lt;li&gt;“能通过所有测试；没有重复代码，表达力强大；体现系统中的全部设计理念；包括尽量少的实体，如类、方法、函数。” —— Ron Jeffries&lt;/li&gt;
&lt;li&gt;“整洁代码让每个例程都深合己意；漂亮代码让语言看起来像是专门为解决那个问题而存在” —— Ward Cunningham&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;编写代码的难度，取决于读周边代码的难度，要想干得快，就先让代码易读。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;让营地比你来时更干净 —— 童子军军规&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;命名&#34;&gt;&lt;a href=&#34;#命名&#34; class=&#34;headerlink&#34; title=&#34;命名&#34;&gt;&lt;/a&gt;命名&lt;/h2&gt;&lt;p&gt;好的命名，可以让人一眼就明白代码的逻辑。看下面两段代码：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; List&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;[]&amp;gt; getThem() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  List&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;[]&amp;gt; list1 = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;[]&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;[] x : theList)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (x[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] == &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      list1.add(x)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; list1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; List&amp;lt;Cell&amp;gt; &lt;span class=&#34;title function_&#34;&gt;getFlaggedCells&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  List&amp;lt;Cell&amp;gt; flaggedCells = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;Cell&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (Cell cell : gameBoard)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (cell.isFlagged)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      flaggedCells.add(cell);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; flaggedCells;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;下面是一些准则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;名副其实，一旦发现更好的，就替换掉旧的。&lt;strong&gt;如果名称还需要注释补充，那就不算名副其实&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;避免误导，提防使用不同之处较小的名称，比如&lt;code&gt;UsernameListEmptyFilter&lt;/code&gt;和&lt;code&gt;UsernameListNullFilter&lt;/code&gt;，不要混用1和l，以及0和O&lt;/li&gt;
&lt;li&gt;做有意义的区分，少废话，反例是&lt;code&gt;a1&lt;/code&gt;和&lt;code&gt;a2&lt;/code&gt;，&lt;code&gt;nameString&lt;/code&gt;和&lt;code&gt;name&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用&lt;strong&gt;能读出来&lt;/strong&gt;的名称，方便程序员的沟通&lt;/li&gt;
&lt;li&gt;使用&lt;strong&gt;可搜索&lt;/strong&gt;的名称，仅在块作用域或短函数内使用单字母名称&lt;/li&gt;
&lt;li&gt;不把类型信息放在名称中&lt;/li&gt;
&lt;li&gt;减少不必要的前缀和后缀&lt;/li&gt;
&lt;li&gt;类名应该是名词，方法名应该是动词或动词短语&lt;/li&gt;
&lt;li&gt;别玩梗&lt;/li&gt;
&lt;li&gt;标准化语素，为每一个抽象概念选择一个统一的词&lt;/li&gt;
&lt;li&gt;别用有多重含义的词汇，这会增加使用者顾虑和理解成本&lt;/li&gt;
&lt;li&gt;只在没有明确定义的场景下使用语境（类，前缀……）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;函数&#34;&gt;&lt;a href=&#34;#函数&#34; class=&#34;headerlink&#34; title=&#34;函数&#34;&gt;&lt;/a&gt;函数&lt;/h2&gt;&lt;p&gt;下面是一些准则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;短小，更短小&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;只做一件事，只做一件事，只做一件事&lt;/strong&gt;，重要的事情说三遍&lt;ul&gt;
&lt;li&gt;还有一种方式可以帮助判断函数是不是只做了一件事：&lt;strong&gt;函数语句是否在一个抽象层级上&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;只做一件事的函数无法被继续合理拆分成多段&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;让代码拥有从上到下的自然的阅读顺序，尽量避免跳来跳去的阅读顺序&lt;/li&gt;
&lt;li&gt;为函数使用&lt;strong&gt;描述性&lt;/strong&gt;的名称&lt;/li&gt;
&lt;li&gt;函数&lt;strong&gt;最多3个入参&lt;/strong&gt;，最理想是没有参数，其次是1个，再其次是2个，要避免3个参数&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;布尔类型的参数会让你的函数难以理解&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;使用二元参数时，最好保证前后顺序不敏感&lt;/li&gt;
&lt;li&gt;对于复杂的入参，可以用对象封装起来&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;函数要么只做副作用（&lt;em&gt;做什么事&lt;/em&gt;），要么没有副作用（&lt;em&gt;回答什么事&lt;/em&gt;），而且能从名称中一目了然地看到&lt;/li&gt;
&lt;li&gt;用异常代替错误码，错误处理也是一件事&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;别重复自己（Don’t repeat yourself, DRY）&lt;/strong&gt;。重复是软件中一切邪恶的根源，软件开发领域的所有创新都在不断尝试从源代码中消灭重复&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;函数是语言的动词，类是名词。大师级的程序员把系统当做故事来讲，而不是程序来写。他们使用特定编程语言提供的工具构建一种&lt;strong&gt;更丰富和更具表达力的语言&lt;/strong&gt;。好的函数必须干净利落的组合在一起，形成清晰明确的语言，帮你&lt;strong&gt;讲好故事&lt;/strong&gt;。这个过程不是一蹴而就的，你可以现象什么就写什么，然后一点点打磨它。&lt;/p&gt;
&lt;h2 id=&#34;注释&#34;&gt;&lt;a href=&#34;#注释&#34; class=&#34;headerlink&#34; title=&#34;注释&#34;&gt;&lt;/a&gt;注释&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;使用注释 &amp;#x3D; 承认自己无法用代码表达清楚意图&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;列举注释的准则前，必须摆正观念。&lt;strong&gt;注释是一种必须的恶，如果编程语言足够有表达力，或你长于用语言表达自己的意图，那么就不需要注释。注释的恰当用法是弥补我们用代码表达意图时遭遇的失败。&lt;/strong&gt;注释存在的时间越久，具体所描述的事实就越远。原因很简单，程序员不可能坚持维护注释。&lt;/p&gt;
&lt;p&gt;的确，程序员应该让注释保持可维护而精准，但最好能直接写清楚代码，保证无须编写注释。&lt;strong&gt;真实只在一处：代码&lt;/strong&gt;，只有代码能忠实告诉你它做的事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;注释无法挽救糟糕的代码&lt;/strong&gt;，与其为糟糕代码补充大量注释，不如花时间写出整洁有表达力的代码&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用代码代替注释&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;有些无法避免且合理存在的注释&lt;ul&gt;
&lt;li&gt;法律信息&lt;/li&gt;
&lt;li&gt;对函数名的补充&lt;/li&gt;
&lt;li&gt;对稍微反常规意图的解释，避免误解&lt;/li&gt;
&lt;li&gt;糟糕的代码来自外部库或外部API&lt;/li&gt;
&lt;li&gt;敏感代码的警告&lt;/li&gt;
&lt;li&gt;TODO、FIXME&lt;/li&gt;
&lt;li&gt;Javadoc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;下面则是一些很常见的糟糕注释，它们只是糟糕代码的借口&lt;ul&gt;
&lt;li&gt;只有自己看得懂的注释&lt;/li&gt;
&lt;li&gt;对函数名的复述&lt;/li&gt;
&lt;li&gt;误导性注释&lt;/li&gt;
&lt;li&gt;日志型注释，如Milestone记录&lt;/li&gt;
&lt;li&gt;废话&lt;/li&gt;
&lt;li&gt;位置标记，如&lt;code&gt;====================&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;代码署名&lt;/li&gt;
&lt;li&gt;&lt;em&gt;大多数&lt;/em&gt;注释掉的代码&lt;/li&gt;
&lt;li&gt;百科式的介绍&lt;/li&gt;
&lt;li&gt;私有代码的Javadoc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;格式&#34;&gt;&lt;a href=&#34;#格式&#34; class=&#34;headerlink&#34; title=&#34;格式&#34;&gt;&lt;/a&gt;格式&lt;/h2&gt;&lt;p&gt;格式即代码风格，可以利用lint这样的自动化工具完成，需要在团队内保持一致。&lt;/p&gt;
&lt;h3 id=&#34;垂直格式&#34;&gt;&lt;a href=&#34;#垂直格式&#34; class=&#34;headerlink&#34; title=&#34;垂直格式&#34;&gt;&lt;/a&gt;垂直格式&lt;/h3&gt;&lt;p&gt;在从上到下的组织上，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以向报纸一样，先大纲，再粗线条概述，再给出细节，越往下细节越多&lt;/li&gt;
&lt;li&gt;用&lt;strong&gt;空行&lt;/strong&gt;分隔概念&lt;/li&gt;
&lt;li&gt;靠近的代码行暗示了代码间的紧密关系&lt;/li&gt;
&lt;li&gt;应避免迫使读者在源文件和类之间跳来跳去&lt;ul&gt;
&lt;li&gt;变量声明应尽量靠近使用位置&lt;/li&gt;
&lt;li&gt;循环中的控制变量总在循环语句中声明&lt;/li&gt;
&lt;li&gt;类成员在类顶部声明&lt;/li&gt;
&lt;li&gt;如果某个函数调用了另一个，就应该把它们放一起&lt;/li&gt;
&lt;li&gt;概念相关的代码应该放在一起，如&lt;code&gt;getHour&lt;/code&gt;和&lt;code&gt;getMinute&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果可以，最好把被调用的函数放在执行调用的函数下面&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;横向格式&#34;&gt;&lt;a href=&#34;#横向格式&#34; class=&#34;headerlink&#34; title=&#34;横向格式&#34;&gt;&lt;/a&gt;横向格式&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;水平字符的上限，100或120&lt;/li&gt;
&lt;li&gt;使用&lt;strong&gt;空格&lt;/strong&gt;分隔概念&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不需要水平对齐&lt;/strong&gt;，以为从左到右的阅读顺序优先于从上到下&lt;/li&gt;
&lt;li&gt;学会用&lt;strong&gt;缩进&lt;/strong&gt;表现层级&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;对象和数据结构&#34;&gt;&lt;a href=&#34;#对象和数据结构&#34; class=&#34;headerlink&#34; title=&#34;对象和数据结构&#34;&gt;&lt;/a&gt;对象和数据结构&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;对象&lt;/strong&gt;把数据隐藏于抽象的后面，暴露操作数据的函数，&lt;strong&gt;数据结构&lt;/strong&gt;暴露数据，不提供有意义的函数。&lt;/li&gt;
&lt;li&gt;过程式代码难以添加新的数据结构，因为必须修改所有函数；面向对象代码难以添加新函数，因为必须修改所有类&lt;/li&gt;
&lt;li&gt;得墨忒尔律：类C的方法f只应该调用以下对象的方法：&lt;strong&gt;C、f创建的对象、作为参数传给f的对象、C的成员所持有的对象&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据结构&lt;/strong&gt;只简单地拥有公有变量，没有函数；而&lt;strong&gt;对象&lt;/strong&gt;则只拥有私有变量和函数。一半是对象一半是数据结构的混淆会增加添加新函数和数据结构的难度&lt;/li&gt;
&lt;li&gt;DTO（Data Transfer Objects，数据传输对象）就是只有公有变量，没有函数的类，Active Record就是DTO的一种&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;错误处理&#34;&gt;&lt;a href=&#34;#错误处理&#34; class=&#34;headerlink&#34; title=&#34;错误处理&#34;&gt;&lt;/a&gt;错误处理&lt;/h2&gt;&lt;p&gt;错误处理很重要，但要是它搞乱了代码逻辑，那就是错误的用法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;返回异常而不是错误码&lt;/li&gt;
&lt;li&gt;try-catch-finally语句块就像事务，可以帮你定义用户应该期待些什么&lt;/li&gt;
&lt;li&gt;在Java中，可控异常违反开闭原则带来的成本要高于收益&lt;/li&gt;
&lt;li&gt;打包第三方API，一方面降低了依赖的覆盖面，另一方面也有助于模拟第三方调用&lt;/li&gt;
&lt;li&gt;可以把抛出错误封装成特定的函数&lt;/li&gt;
&lt;li&gt;别返回和传递null值&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;边界&#34;&gt;&lt;a href=&#34;#边界&#34; class=&#34;headerlink&#34; title=&#34;边界&#34;&gt;&lt;/a&gt;边界&lt;/h2&gt;&lt;p&gt;边界即我们代码和第三方代码的连接处。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过编写测试来概览和理解第三方代码的形式叫做&lt;strong&gt;学习性测试（learning tests）&lt;/strong&gt;。它可以帮助我们快速试错和反馈，从而对第三方API快速上手。&lt;/li&gt;
&lt;li&gt;在第三方代码尚未就绪时，&lt;strong&gt;编写我们想要的接口&lt;/strong&gt;，可以使我们能保持代码在自己控制中，并在未来通过编写adapter的形式无痛迁移&lt;/li&gt;
&lt;li&gt;应尽量避免过多依赖第三方的特定信息，更多依靠你能控制的东西，好过依靠你控制不了的东西，免得日后受其控制&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;单元测试&#34;&gt;&lt;a href=&#34;#单元测试&#34; class=&#34;headerlink&#34; title=&#34;单元测试&#34;&gt;&lt;/a&gt;单元测试&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;TDD（Test-Driven Development）三定律&lt;ul&gt;
&lt;li&gt;在编写不能通过的单元测试前，不编写生产代码&lt;/li&gt;
&lt;li&gt;只编写刚好无法通过的单元测试，不能编译也算&lt;/li&gt;
&lt;li&gt;只编写刚好足已通过失败测试的生产代码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;测试代码和生产代码一样重要&lt;/strong&gt;。正是单元测试让你的代码可扩展、可维护、可复用&lt;/li&gt;
&lt;li&gt;整洁的测试代码一样要求&lt;strong&gt;可读性&lt;/strong&gt;。大多数测试代码可以总结为构造-操作-检验（Build-Operate-Check）模式。第一个环节构造测试数据，第二个环节操作数据，第三个环节验证是否得到期望的结果&lt;/li&gt;
&lt;li&gt;每个测试中的断言数量应该尽量少，且只测试一个概念&lt;/li&gt;
&lt;li&gt;FIRST原则&lt;ul&gt;
&lt;li&gt;Fast，测试应该能够快速运行&lt;/li&gt;
&lt;li&gt;Independent，测试间应该相互独立&lt;/li&gt;
&lt;li&gt;Repeatable，测试应该在任何环境下可重复通过&lt;/li&gt;
&lt;li&gt;Self-Validating，测试应该有布尔值输出&lt;/li&gt;
&lt;li&gt;Timely，测试应及时编写&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;类&#34;&gt;&lt;a href=&#34;#类&#34; class=&#34;headerlink&#34; title=&#34;类&#34;&gt;&lt;/a&gt;类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;类应该由一组成员开始，从静态到普通，从共有到私有。且很少会有公有成员。&lt;/li&gt;
&lt;li&gt;类应该短小，&lt;strong&gt;类的名称应该能描述其权责&lt;/strong&gt;。类名无法精确明明时，类大概就太长了。类名越含糊，类越有可能拥有过多权责。类名应该控制在25个字母内，且不应该包含连词。&lt;/li&gt;
&lt;li&gt;单一权责原则（Single Responsibility Principle，SRP）认为，类和模块应有且仅有&lt;strong&gt;一条加以修改的原因&lt;/strong&gt;。这个原则可以帮助创造更好的抽象。它也是OO设计中最重要的概念之一。&lt;/li&gt;
&lt;li&gt;内聚：类应该只有少量实体变量，且所有方法都应该操作其中一些。当类的每个变量都被每个方法使用时，我们认为该类具有最大的内聚性。当发现类逐渐丧失内聚性时，尽早拆分它！让它变成多个短小的类。这个拆分的过程也是权责的拆分过程。&lt;/li&gt;
&lt;li&gt;通过基类和子类，可以在不修改类的同时，保持类对新功能的开放。在理想系统中，我们通过扩展系统而非修改现有代码来添加新特性。可以通过抽象类和接口隔离细节修改带来的影响。&lt;/li&gt;
&lt;li&gt;降低类之间的连接耦合，可以采用依赖倒置原则（Dependency Inversion Principle，DIP），让类依赖于抽象（接口）而不是具体细节（自行构造类）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;系统&#34;&gt;&lt;a href=&#34;#系统&#34; class=&#34;headerlink&#34; title=&#34;系统&#34;&gt;&lt;/a&gt;系统&lt;/h2&gt;&lt;p&gt;&lt;em&gt;这一章的Java概念较多&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分开系统的构造和使用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖注入&lt;/strong&gt;是控制反转的一种思路，它将第二权责从对象中拿出来，转移到专门的对象中去，从而遵循&lt;strong&gt;单一权责原则&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;我们应该专注于今天的用户故事，并且&lt;strong&gt;持续适当切分&lt;/strong&gt;我们的关注面。书中举了Java AOP、AspectJ框架的例子&lt;/li&gt;
&lt;li&gt;实现时，使用&lt;em&gt;大致可工作的最简单方案&lt;/em&gt;。只要软件构架有效切分了关注面，就比较好做根本性改动&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;迭代&#34;&gt;&lt;a href=&#34;#迭代&#34; class=&#34;headerlink&#34; title=&#34;迭代&#34;&gt;&lt;/a&gt;迭代&lt;/h2&gt;&lt;p&gt;Kent Beck关于测试的4个原则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运行所有测试，全面测试并持续通过所有测试的系统，就是可测试的系统。测试也能减少重构时可能破坏代码的顾虑。&lt;/li&gt;
&lt;li&gt;不可重复，使用模板生成或继承等高级概念&lt;/li&gt;
&lt;li&gt;表达程序员的意图。代码应当清晰表达作者的意图。使用好名称、保持类和函数的短小，以及之前章节提到的各种方法&lt;/li&gt;
&lt;li&gt;尽可能减少类和方法的数目，避免前两条规范的矫枉过正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;并发编程&#34;&gt;&lt;a href=&#34;#并发编程&#34; class=&#34;headerlink&#34; title=&#34;并发编程&#34;&gt;&lt;/a&gt;并发编程&lt;/h2&gt;&lt;p&gt;并发是一种解耦策略，帮助我们分解开&lt;strong&gt;做什么（目的）&lt;/strong&gt;和&lt;strong&gt;何时（时机）&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;并发&lt;strong&gt;有时&lt;/strong&gt;能改善性能，会在编写额外代码上带来额外开销&lt;/li&gt;
&lt;li&gt;正确的并发是复杂的&lt;/li&gt;
&lt;li&gt;并发会带来系统结构的变化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有些防御并发代码问题的原则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单一权责：分离并发代码和其他代码&lt;/li&gt;
&lt;li&gt;限制对可能共享的数据的访问&lt;/li&gt;
&lt;li&gt;线程应尽可能独立&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;并发执行模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;生产者-消费者模式：数据通过队列传递，队列本身是一种限定资源&lt;/li&gt;
&lt;li&gt;读者-作者模式&lt;/li&gt;
&lt;li&gt;宴席哲学家问题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还有一些需要注意的事情：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;警惕同步方法间的依赖&lt;/li&gt;
&lt;li&gt;尽可能减小sychronized区域&lt;/li&gt;
&lt;li&gt;尽早考虑程序关闭问题&lt;/li&gt;
&lt;li&gt;测试线程代码&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3个实例&#34;&gt;&lt;a href=&#34;#3个实例&#34; class=&#34;headerlink&#34; title=&#34;3个实例&#34;&gt;&lt;/a&gt;3个实例&lt;/h2&gt;&lt;p&gt;书中以三个实例的重构过程向我们表现了一些将之前思路应用于优化代码的方式。&lt;/p&gt;
&lt;h3 id=&#34;命令行参数解析：args&#34;&gt;&lt;a href=&#34;#命令行参数解析：args&#34; class=&#34;headerlink&#34; title=&#34;命令行参数解析：args&#34;&gt;&lt;/a&gt;命令行参数解析：args&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;编程是一种技术甚于科学的东西，要编写整洁代码，必须先写肮脏代码，然后再&lt;strong&gt;清理它&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在你的初稿，当代码糟糕透顶时甚至是前几稿中，很可能还是会存在烂摊子：成员多得吓人，奇怪命名的魔法字符串，一大堆的try-catch-finally代码。程序员们不都是蠢人，这堆糟糕透顶的代码其实是从最初看起来很合理但是&lt;strong&gt;扩展性差&lt;/strong&gt;的代码一步步演化来的。&lt;/p&gt;
&lt;p&gt;需要使用一些总结和抽象，来简明地表达你的目的。另外，在重构前，“我”（其实是作者）要不厌其烦地强调TDD的必要性，它能保证你重构的每一步，系统都可以工作。在重构过程中，放进拿出是常见的事，小步幅、保持测试通过，你可能会不断移动各种东西。&lt;/p&gt;
&lt;p&gt;优秀的代码设计，大都关乎&lt;strong&gt;分隔&lt;/strong&gt;——创建合适的空间防止不同种类的代码。对关注面的分隔让代码更易于理解和维护（减少理解所需要的大脑缓存）&lt;/p&gt;
&lt;h3 id=&#34;JUnit&#34;&gt;&lt;a href=&#34;#JUnit&#34; class=&#34;headerlink&#34; title=&#34;JUnit&#34;&gt;&lt;/a&gt;JUnit&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;不必要的编码前缀（&lt;code&gt;f_&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;未封装的条件判断&lt;/li&gt;
&lt;li&gt;建议使用肯定式代替否定式判断&lt;/li&gt;
&lt;li&gt;奇怪的不直观的函数名&lt;/li&gt;
&lt;li&gt;易造成理解困难的变量名&lt;/li&gt;
&lt;li&gt;拆分违反SRP原则的函数&lt;/li&gt;
&lt;li&gt;避免隐式时序耦合的函数，用hardcode的形式显示表现时序耦合&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;SerialDate重构&#34;&gt;&lt;a href=&#34;#SerialDate重构&#34; class=&#34;headerlink&#34; title=&#34;SerialDate重构&#34;&gt;&lt;/a&gt;SerialDate重构&lt;/h3&gt;&lt;p&gt;再强调一遍，&lt;strong&gt;重构前要有一个完整的验证可行性的测试&lt;/strong&gt;。然后开始重构：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;没有描述力的类名和术语名&lt;/li&gt;
&lt;li&gt;使用枚举代替常量类&lt;/li&gt;
&lt;li&gt;抽象类中不应知道实现细节&lt;/li&gt;
&lt;li&gt;基类不宜知道子类的情况&lt;/li&gt;
&lt;li&gt;多余的注释&lt;/li&gt;
&lt;li&gt;变量声明应该放在尽量靠近使用的地方&lt;/li&gt;
&lt;li&gt;如果有专业术语，就不要自己命名了&lt;/li&gt;
&lt;li&gt;不要写无用的模板代码&lt;/li&gt;
&lt;li&gt;如果函数对成员进行操作，它就不应该是静态的&lt;/li&gt;
&lt;li&gt;用&lt;strong&gt;解释临时变量&lt;/strong&gt;的方式，让大段的代码更为简化和有表达力&lt;/li&gt;
&lt;li&gt;消除魔术数&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;味道和启发&#34;&gt;&lt;a href=&#34;#味道和启发&#34; class=&#34;headerlink&#34; title=&#34;味道和启发&#34;&gt;&lt;/a&gt;味道和启发&lt;/h2&gt;&lt;p&gt;作者在这里对《重构：既有代码设计的改善》里提到的味道做了自己的一些扩充，也可以作为对上面章节的回顾。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“味道”，即那些看起来不大对劲的代码&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;注释-1&#34;&gt;&lt;a href=&#34;#注释-1&#34; class=&#34;headerlink&#34; title=&#34;注释&#34;&gt;&lt;/a&gt;注释&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;不恰当的信息，如修改记录&lt;/li&gt;
&lt;li&gt;过时的注释&lt;/li&gt;
&lt;li&gt;多余的废话&lt;/li&gt;
&lt;li&gt;错误的有误导性的注释&lt;/li&gt;
&lt;li&gt;注释掉的代码&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;环境&#34;&gt;&lt;a href=&#34;#环境&#34; class=&#34;headerlink&#34; title=&#34;环境&#34;&gt;&lt;/a&gt;环境&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;多步才能完成的构建&lt;/li&gt;
&lt;li&gt;多步才能完成的测试&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;函数-1&#34;&gt;&lt;a href=&#34;#函数-1&#34; class=&#34;headerlink&#34; title=&#34;函数&#34;&gt;&lt;/a&gt;函数&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;过多的入参&lt;/li&gt;
&lt;li&gt;布尔类型参数&lt;/li&gt;
&lt;li&gt;从未被调用的函数&lt;/li&gt;
&lt;li&gt;用于返回的参数&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;一般性问题&#34;&gt;&lt;a href=&#34;#一般性问题&#34; class=&#34;headerlink&#34; title=&#34;一般性问题&#34;&gt;&lt;/a&gt;一般性问题&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;源文件中有多种语言&lt;/li&gt;
&lt;li&gt;明显违背字面意义的直觉&lt;/li&gt;
&lt;li&gt;不考虑边界情况&lt;/li&gt;
&lt;li&gt;忽视安全问题&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;重复&lt;/strong&gt;，这也是最常见的问题。每次看到重复代码都代表遗漏了抽象。有一些常见的设计模式可以帮助你。&lt;/li&gt;
&lt;li&gt;代码的抽象层级有问题，或混杂。抽象类用来容纳高层级概念，子类用来容纳低层级概念。不同层级概念放在不同容器中。&lt;/li&gt;
&lt;li&gt;基类依赖于子类。通常来说，基类对子类应该一无所知&lt;/li&gt;
&lt;li&gt;信息过多，违背SRP&lt;/li&gt;
&lt;li&gt;从未使用的代码&lt;/li&gt;
&lt;li&gt;不恰当的垂直分隔&lt;/li&gt;
&lt;li&gt;语素前后不一致&lt;/li&gt;
&lt;li&gt;基于巧合、预设假设的耦合。异或是两个没有直接目的之间的模块的耦合。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特性依恋&lt;/strong&gt;，类的方法只应对自身的成员和方法感兴趣，不应关注其他类的成员和方法&lt;/li&gt;
&lt;li&gt;使用boolean或枚举参数让一个函数表现多态。使用多个函数通常由于向单个函数传递代码来选择函数行为&lt;/li&gt;
&lt;li&gt;晦涩的意图，如魔术数、魔术字符串、过度简写的表达式&lt;/li&gt;
&lt;li&gt;位置错误的权责&lt;/li&gt;
&lt;li&gt;不恰当的静态方法，如完全不需要多态的函数&lt;/li&gt;
&lt;li&gt;使用自解释的变量名&lt;/li&gt;
&lt;li&gt;使用自解释的函数名&lt;/li&gt;
&lt;li&gt;理解算法&lt;/li&gt;
&lt;li&gt;把逻辑依赖（脑海中的限制&amp;#x2F;已知条件）改为物理依赖&lt;/li&gt;
&lt;li&gt;使用if&amp;#x2F;else、switch前想想有没有多态的实现方法&lt;/li&gt;
&lt;li&gt;遵循团队lint规则&lt;/li&gt;
&lt;li&gt;足够准确&lt;/li&gt;
&lt;li&gt;未封装的条件判断&lt;/li&gt;
&lt;li&gt;未封装的边界条件检测&lt;/li&gt;
&lt;li&gt;避免否定性条件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;函数应该只做一件事&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;函数应该只在一个抽象层级上&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;隐蔽的时序性耦合&lt;/li&gt;
&lt;li&gt;别随意，先好好思考再下手&lt;/li&gt;
&lt;li&gt;应该在较高层级放置可配置数据&lt;/li&gt;
&lt;li&gt;避免传递浏览，即遵守德墨忒尔律&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Java&#34;&gt;&lt;a href=&#34;#Java&#34; class=&#34;headerlink&#34; title=&#34;Java&#34;&gt;&lt;/a&gt;Java&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;使用通配符避免过长的导入清单&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt;.*&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;不要继承&lt;em&gt;常量&lt;/em&gt;，使用静态导入&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; EmployeeConstants.*&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;在可以的情况下，用枚举代替常量&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;名称&#34;&gt;&lt;a href=&#34;#名称&#34; class=&#34;headerlink&#34; title=&#34;名称&#34;&gt;&lt;/a&gt;名称&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;使用描述性名称&lt;/li&gt;
&lt;li&gt;名称应该与抽象层级相符&lt;/li&gt;
&lt;li&gt;使用标准化语素&lt;/li&gt;
&lt;li&gt;使用无歧义的名称&lt;/li&gt;
&lt;li&gt;在较大作用范围使用较长名称，较小作用范围&lt;em&gt;可以&lt;/em&gt;使用较短名称&lt;/li&gt;
&lt;li&gt;名称应该明确说明有副作用存在&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;测试&#34;&gt;&lt;a href=&#34;#测试&#34; class=&#34;headerlink&#34; title=&#34;测试&#34;&gt;&lt;/a&gt;测试&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;要有足够的测试&lt;/li&gt;
&lt;li&gt;使用覆盖率工具&lt;/li&gt;
&lt;li&gt;别放过小测试&lt;/li&gt;
&lt;li&gt;被忽略的测试是对不确定事物的疑问&lt;/li&gt;
&lt;li&gt;测试边界条件&lt;/li&gt;
&lt;li&gt;测试失败的模式（pattern）会有启发性&lt;/li&gt;
&lt;li&gt;测试覆盖率的模式会有启发性&lt;/li&gt;
&lt;li&gt;测试应该快速&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;并发编程示例&#34;&gt;&lt;a href=&#34;#并发编程示例&#34; class=&#34;headerlink&#34; title=&#34;并发编程示例&#34;&gt;&lt;/a&gt;并发编程示例&lt;/h2&gt;&lt;h3 id=&#34;客户端-x2F-服务端&#34;&gt;&lt;a href=&#34;#客户端-x2F-服务端&#34; class=&#34;headerlink&#34; title=&#34;客户端&amp;#x2F;服务端&#34;&gt;&lt;/a&gt;客户端&amp;#x2F;服务端&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;如果吞吐量与I&amp;#x2F;O有关，则并发编程可以提升运行效率&lt;/li&gt;
&lt;li&gt;保持并发系统整洁，把线程管理隔离到一个位置&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;可能的执行路径&#34;&gt;&lt;a href=&#34;#可能的执行路径&#34; class=&#34;headerlink&#34; title=&#34;可能的执行路径&#34;&gt;&lt;/a&gt;可能的执行路径&lt;/h3&gt;&lt;p&gt;深入到字节码和汇编语句的执行上，有些并非线程安全的操作中，不同的执行路径会带来不同结果。&lt;/p&gt;
&lt;h3 id=&#34;了解类库&#34;&gt;&lt;a href=&#34;#了解类库&#34; class=&#34;headerlink&#34; title=&#34;了解类库&#34;&gt;&lt;/a&gt;了解类库&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Executor框架&lt;/li&gt;
&lt;li&gt;非锁定方案：AtomicBoolean，AtomicInteger和AtomicReference&lt;/li&gt;
&lt;li&gt;数据库连接、java.util中的容器、Servlet天生不是线程安全的&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;提升吞吐量&#34;&gt;&lt;a href=&#34;#提升吞吐量&#34; class=&#34;headerlink&#34; title=&#34;提升吞吐量&#34;&gt;&lt;/a&gt;提升吞吐量&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;synchronized代码块最好能限制在小范围内&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;死锁&#34;&gt;&lt;a href=&#34;#死锁&#34; class=&#34;headerlink&#34; title=&#34;死锁&#34;&gt;&lt;/a&gt;死锁&lt;/h3&gt;&lt;p&gt;死锁需要满足4个条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;互斥&lt;/strong&gt;，即资源数量有限，或无法在同一时间为多个线程公用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;上锁及等待&lt;/strong&gt;，从线程获取资源到完成工作前，不会释放这个资源&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;无抢先机制&lt;/strong&gt;，线程无法从其他线程处夺取资源&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;循环等待&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;相反地，有4种避免死锁的方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;不互斥&lt;/strong&gt;，使用允许同时使用的资源，或增加资源数目&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不上锁及等待&lt;/strong&gt;，如果有等待情况就释放所有资源从新来过&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;满足抢先机制&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不做循环等待&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;测试多线程代码&#34;&gt;&lt;a href=&#34;#测试多线程代码&#34; class=&#34;headerlink&#34; title=&#34;测试多线程代码&#34;&gt;&lt;/a&gt;测试多线程代码&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;复现问题可能很难，可以借助工具（如ConTest）帮助&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;–END–&lt;/em&gt;&lt;/p&gt;
</content>
        <category term="编程" />
        <category term="重构" />
        <category term="代码" />
        <category term="代码风格" />
        <updated>2019-12-02T15:08:32.000Z</updated>
    </entry>
    <entry>
        <id>http://shenlvmeng.github.com/blog/2019/05/28/the-pragmatic-programmer/</id>
        <title>《程序员修炼之道》 —— 从小工到专家</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2019/05/28/the-pragmatic-programmer/"/>
        <content type="html">&lt;p&gt;《程序员修炼之道》这个书名实际上不如原版《The Pragmatic Programmer： From Journeyman to Master》来得更清晰明了。此书第一版写于1999年，我看的是11年的版本，但还是透流露着不少世纪初的观念和视野。除开一部分观点认识的过时，书中绝大多数观点都四溢着国外互联网行业的工作风格和流程，和国内凶猛生长、一把梭就是干的风格各有不同，甚至我感觉国内IT，尤其是互联网企业里的工作流更加讲求实效。尽管和读之前的预期不大一样，里面许多经验还是很有借鉴意义，比如正交性、不要依赖巧合等等。&lt;/p&gt;
&lt;p&gt;书中内容在项目管理、编程哲学、以及编程过程的各个方面都有涉及，在这些方面上更加深入的探讨，书的最后也推荐了继续阅读的材料。下面就各章节的关键观点加以整理。&lt;/p&gt;
&lt;h2 id=&#34;序&#34;&gt;&lt;a href=&#34;#序&#34; class=&#34;headerlink&#34; title=&#34;序&#34;&gt;&lt;/a&gt;序&lt;/h2&gt;&lt;p&gt;关于本书的读法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;能不能让正确原则指导正确的行动本身，其实就是区分是否是高手的一个显著标志&lt;/li&gt;
&lt;li&gt;要能内化书中提到的各个小提示，不实践的话，是不会有太大收获的&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;思考，你的工作&lt;/strong&gt;，多思考&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;实效哲学&#34;&gt;&lt;a href=&#34;#实效哲学&#34; class=&#34;headerlink&#34; title=&#34;实效哲学&#34;&gt;&lt;/a&gt;实效哲学&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;对你的源码负责&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不要容忍破窗&lt;/strong&gt;，它们会增大你软件的熵（这个也是要结合实际情况看的）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;记住大图景&lt;/strong&gt;，注意方向是否有误，不要光低头做事&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;知道在何时打住&lt;/strong&gt;，你不可能做到完美&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;定期为你的知识资产投资&lt;/strong&gt;，就像经济投资一样&lt;ul&gt;
&lt;li&gt;定期投资&lt;/li&gt;
&lt;li&gt;多元化&lt;/li&gt;
&lt;li&gt;管理风险，不要把所有技术放在一个篮子里&lt;/li&gt;
&lt;li&gt;低买高卖，能看清形势&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;为此，你需要&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;每年至少学习一种新语言&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;每季度阅读一本技术书籍&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;也要阅读非技术书籍&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;批判地思考你读到和听到的&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;如何表达自己很重要&lt;/strong&gt;，这会增加你的影响力&lt;ul&gt;
&lt;li&gt;你想让谁知道&lt;/li&gt;
&lt;li&gt;你想让他们知道什么&lt;/li&gt;
&lt;li&gt;他们是否感兴趣&lt;/li&gt;
&lt;li&gt;他们需要知道细节么&lt;/li&gt;
&lt;li&gt;如何促使他们与你交流&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;实效途径&#34;&gt;&lt;a href=&#34;#实效途径&#34; class=&#34;headerlink&#34; title=&#34;实效途径&#34;&gt;&lt;/a&gt;实效途径&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;DRY，不要重复自己&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;强加的重复 &amp;#x3D;&amp;gt; 使用自动生成，减少是信息冗知识&lt;/li&gt;
&lt;li&gt;无意的重复 &amp;#x3D;&amp;gt; 优良的设计&lt;/li&gt;
&lt;li&gt;无耐心的重复 &amp;#x3D;&amp;gt; 考虑长远&lt;/li&gt;
&lt;li&gt;开发者间的重复 &amp;#x3D;&amp;gt; 加强组内交流，制定代码规范，&lt;strong&gt;制造更容易复用的环境&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;减少无关事物的影响&lt;/strong&gt;，非正交 &amp;#x3D;&amp;gt; 次级效应 &amp;#x3D;&amp;gt; 补偿行为 &amp;#x3D;&amp;gt; 经验依赖&lt;ul&gt;
&lt;li&gt;好处：提高生产率（促进复用）、降低风险（风险隔离，易测试）&lt;/li&gt;
&lt;li&gt;分层设计、抽象和接口约定&lt;/li&gt;
&lt;li&gt;避免使用全局变量&lt;/li&gt;
&lt;li&gt;考虑使用库的代码侵入性&lt;/li&gt;
&lt;li&gt;文档和认同正交性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;不存在最终决策&lt;/em&gt;，当需求变动频繁的时候，不仅要思考程序架构如何适应这种变动，也要反思是否是设计者没想清楚到底要做什么&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用曳光弹找到目标&lt;/strong&gt;，即MVP + 快速迭代 + 即时的反馈&lt;ul&gt;
&lt;li&gt;逐步逼近，摸着石头过河&lt;/li&gt;
&lt;li&gt;曳光弹模式永远包含着一个可用的软件版本&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;原型和便笺&lt;/strong&gt;，使用原型去表达和快速验证项目的可行性&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;靠近问题领域编程&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;使用DSL（Domain Specified Language）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;估算，以避免意外&lt;/strong&gt;，主要用来估计工期、分析风险&lt;ul&gt;
&lt;li&gt;适当地降低估算速度，慎重思考隐藏的风险&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;基本工具&#34;&gt;&lt;a href=&#34;#基本工具&#34; class=&#34;headerlink&#34; title=&#34;基本工具&#34;&gt;&lt;/a&gt;基本工具&lt;/h2&gt;&lt;p&gt;工具成为双手和大脑的延伸，优秀的工具可以放大你的才干。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;纯文本以其自解释能力几乎可以永久保存&lt;/strong&gt;，XML、JSON就是利用此成为通用的数据表现形式&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;利用shell的力量&lt;/strong&gt;，它是自动化任务避不开的工具&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;要能烂熟地使用你的编辑器&lt;/strong&gt;、&lt;strong&gt;要使用高级的编辑器&lt;/strong&gt;，由于你的所有开发工作都建立在它上面，做好这两点可以节省你大量时间&lt;ul&gt;
&lt;li&gt;反思一下，在用你的编辑器时，你有遇到过到比较繁琐的操作吗？&lt;/li&gt;
&lt;li&gt;是因为你不会高级使用方式，还是编辑器本身不支持？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;总是使用源码控制&lt;/em&gt;（这一点早已成为共识）&lt;/li&gt;
&lt;li&gt;调试，debug&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;通常认为匪夷所思的bug，都来自健忘、自大和愚蠢&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;QA角色的重要性之一：帮助复现、找到规律性&lt;/li&gt;
&lt;li&gt;橡皮鸭调试法&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;二分查找法&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;如果bug来自某人的错误假设，那么需要清除团队其他人的相同误解&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;学习一种文本操纵语言或工具&lt;/strong&gt;，例如awk，sed，处理数据和结果时一定能用上&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;编写代码生成器&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;开发者手动触发，如模板代码&lt;/li&gt;
&lt;li&gt;程序自动出发，如scheme to idl，idl to code&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;偏执编程&#34;&gt;&lt;a href=&#34;#偏执编程&#34; class=&#34;headerlink&#34; title=&#34;偏执编程&#34;&gt;&lt;/a&gt;偏执编程&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;通过合约设计&lt;/strong&gt;，约定好接口，合作方基于接口开发&lt;ul&gt;
&lt;li&gt;强类型语言更容易实现这一点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;早崩溃&lt;/strong&gt;，这在需要编译的软件开发上比较科学，对于web应用来说却不是这样&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用断言确保某事不会发生&lt;/strong&gt;，减少预设条件代理的隐藏bug&lt;ul&gt;
&lt;li&gt;不要滥用断言&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;只在异常处用异常&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一定记住释放请求的资源&lt;/strong&gt;，如内存、句柄等，可以通过封装统一的资源类实现自动的资源释放&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;时间的魔力&#34;&gt;&lt;a href=&#34;#时间的魔力&#34; class=&#34;headerlink&#34; title=&#34;时间的魔力&#34;&gt;&lt;/a&gt;时间的魔力&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;德墨忒尔法则&lt;/strong&gt;，使模块间的依赖减少到最小&lt;ul&gt;
&lt;li&gt;物理解耦&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;要配置不要hardcode&lt;/strong&gt;，使用元数据动态描述你的程序&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;抽象放进代码，细节放进元数据&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;时间耦合：考虑并发和事件的发生顺序&lt;ul&gt;
&lt;li&gt;在异步代码中，总考虑并发&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一些GUI的设计模式&lt;ul&gt;
&lt;li&gt;发布订阅&lt;/li&gt;
&lt;li&gt;MVC&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;基于规则&amp;#x2F;规则集的黑板系统&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;黑板给出统一接口&lt;/li&gt;
&lt;li&gt;耦合方通过调用黑板接口避免耦合&lt;/li&gt;
&lt;li&gt;黑板通过规则给出输出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;编码时&#34;&gt;&lt;a href=&#34;#编码时&#34; class=&#34;headerlink&#34; title=&#34;编码时&#34;&gt;&lt;/a&gt;编码时&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;不要靠巧合编程&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;改动要有文档沉淀&lt;/li&gt;
&lt;li&gt;只依靠文档中记录的行为&lt;/li&gt;
&lt;li&gt;把你的假设记入文档&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在大数据量时&lt;/strong&gt;，考虑算法数量级&lt;ul&gt;
&lt;li&gt;兼顾效率和可读性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;早重构，常重构&lt;/strong&gt;，代码是业务设计的近似同构体，常重构才能保证代码完美贴合需求设计&lt;ul&gt;
&lt;li&gt;重构和功能开发分开进行&lt;/li&gt;
&lt;li&gt;重构一定要有测试&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;优秀的代码不是看新增了多少行，而是看删除了多少行&lt;/li&gt;
&lt;li&gt;编写易于测试的代码&lt;ul&gt;
&lt;li&gt;测试你的软件，否则你的用户会代你做测试&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;项目开始前&#34;&gt;&lt;a href=&#34;#项目开始前&#34; class=&#34;headerlink&#34; title=&#34;项目开始前&#34;&gt;&lt;/a&gt;项目开始前&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;完美，不是在没有什么需要增加，而是在没有什么需要去掉的时候达到的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;去挖掘需求，思考用户做特定事情的原因，和如何去做的方式，&lt;strong&gt;让需求成为一种一般性的陈述&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;制作需求文档时的一大危险是太过具体，好的需求文档会保持抽象&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;经常性复盘&lt;/li&gt;
&lt;li&gt;鼓励文档分享和交流&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;巧妙解决看似不能解决的难题&lt;/strong&gt;，关键要找到&lt;strong&gt;真正的约束&lt;/strong&gt;，去思考&lt;ul&gt;
&lt;li&gt;有更容易的方法么&lt;/li&gt;
&lt;li&gt;你是在解决真正的问题，还是被外围的技术问题转移了注意力&lt;/li&gt;
&lt;li&gt;这件事为什么是一个问题&lt;/li&gt;
&lt;li&gt;是什么让它难以解决&lt;/li&gt;
&lt;li&gt;它必须这么做么&lt;/li&gt;
&lt;li&gt;它必须完成么&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;准备好再开始，但不要让它成为你懈怠的借口&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不要成为方法学的奴隶&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;实效项目&#34;&gt;&lt;a href=&#34;#实效项目&#34; class=&#34;headerlink&#34; title=&#34;实效项目&#34;&gt;&lt;/a&gt;实效项目&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;团队建设&lt;ul&gt;
&lt;li&gt;不留破窗户（考验leader的管理能力）&lt;/li&gt;
&lt;li&gt;经常性的复盘和例会&lt;/li&gt;
&lt;li&gt;减少团队成员分工的冗余&lt;/li&gt;
&lt;li&gt;自动化项目流程 &amp;#x3D;&amp;gt; 效率工程团队开发内部工具&lt;/li&gt;
&lt;li&gt;制造context，给成员足够空间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不要使用手动流程&lt;/strong&gt;，它不可控且难以复制&lt;ul&gt;
&lt;li&gt;shell、crontab&lt;/li&gt;
&lt;li&gt;CI和自动化持续集成&lt;/li&gt;
&lt;li&gt;代码生成&lt;/li&gt;
&lt;li&gt;自动化测试&lt;/li&gt;
&lt;li&gt;代码review和源码版本控制流程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;常测试，早测试，自动化测试&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;单元测试&amp;#x2F;集成测试&amp;#x2F;压力测试&amp;#x2F;回归测试&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;测试状态覆盖，而不是代码覆盖&lt;/strong&gt;，代码覆盖率提供的意义有限&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;关于如何生产文本&lt;ul&gt;
&lt;li&gt;所有文档都是代码的反映&lt;/li&gt;
&lt;li&gt;源码注释应该去把项目里那些难以描述、容易忘记、不能记录在其他地方的东西记载下来&lt;/li&gt;
&lt;li&gt;比无意义的名称更糟糕的是&lt;strong&gt;有误导性&lt;/strong&gt;的名称&lt;/li&gt;
&lt;li&gt;除非有程序或人工维护，否则任何形式的文档都只是&lt;strong&gt;快照&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;温和地超出用户期望&lt;/strong&gt;，如&lt;ul&gt;
&lt;li&gt;友好的新手指引&lt;/li&gt;
&lt;li&gt;快捷键&lt;/li&gt;
&lt;li&gt;自动化安装&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自豪地为你的作品签名&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;更多资源&#34;&gt;&lt;a href=&#34;#更多资源&#34; class=&#34;headerlink&#34; title=&#34;更多资源&#34;&gt;&lt;/a&gt;更多资源&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;《人月神话》&lt;/li&gt;
&lt;li&gt;《Unix编程艺术》&lt;/li&gt;
&lt;li&gt;《Effective C++》&lt;/li&gt;
&lt;li&gt;《集市与大教堂》&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;–END–&lt;/em&gt;&lt;/p&gt;
</content>
        <category term="重构" />
        <category term="程序设计" />
        <category term="实效" />
        <category term="测试" />
        <updated>2019-05-28T15:55:53.000Z</updated>
    </entry>
    <entry>
        <id>http://shenlvmeng.github.com/blog/2017/11/17/photogallery-improvement-2/</id>
        <title>Photogallery技术演进第2步</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2017/11/17/photogallery-improvement-2/"/>
        <content type="html">&lt;h2 id=&#34;构建工具升级&#34;&gt;&lt;a href=&#34;#构建工具升级&#34; class=&#34;headerlink&#34; title=&#34;构建工具升级&#34;&gt;&lt;/a&gt;构建工具升级&lt;/h2&gt;&lt;p&gt;因为要拆分代码，便于管理，需要使用&lt;code&gt;import&lt;/code&gt;和&lt;code&gt;export&lt;/code&gt;，因此必须要引入webpack这样的打包工具到gulp中，使用&lt;a href=&#34;https://github.com/shama/webpack-stream&#34;&gt;webpack-stream&lt;/a&gt;，具体使用方法和其他的gulp插件类似，在pipe在这样插入就行了&lt;code&gt;.pipe(webpack())&lt;/code&gt;，配置方式和webpack一样。（webpack中引入babel-loader的过程就不赘述了）引入webpack后，开发流程和一起类似，&lt;code&gt;gulp&lt;/code&gt;启动测试服务器，使用webpack通过&lt;code&gt;entry.js&lt;/code&gt;打包代码，CSS和JSON相关流程不变。release时，增加了minify的流程，让js流程后的代码再压缩一遍。&lt;/p&gt;
&lt;p&gt;另外，引入babel后，可以用ES6语法改写&lt;code&gt;gulpfile.js&lt;/code&gt;。最后的&lt;code&gt;gulpfile.babel.js&lt;/code&gt;像下面这样：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; gulp &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;gulp&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; rename &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;gulp-rename&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; uglify &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;gulp-uglify&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; cleanCSS &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;gulp-clean-css&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; jsonminify &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;gulp-jsonminify&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; webserver &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;gulp-webserver&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; webpack &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;webpack-stream&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;gulp.&lt;span class=&#34;title function_&#34;&gt;task&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;js&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; gulp.&lt;span class=&#34;title function_&#34;&gt;src&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;src/index.js&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .&lt;span class=&#34;title function_&#34;&gt;pipe&lt;/span&gt;(&lt;span class=&#34;title function_&#34;&gt;webpack&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;module&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;rules&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &amp;#123; &lt;span class=&#34;attr&#34;&gt;test&lt;/span&gt;: &lt;span class=&#34;regexp&#34;&gt;/\.js$/&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;exclude&lt;/span&gt;: &lt;span class=&#34;regexp&#34;&gt;/node_modules/&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;loader&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;babel-loader&amp;quot;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .&lt;span class=&#34;title function_&#34;&gt;pipe&lt;/span&gt;(&lt;span class=&#34;title function_&#34;&gt;rename&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;index.js&amp;quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		.&lt;span class=&#34;title function_&#34;&gt;pipe&lt;/span&gt;(gulp.&lt;span class=&#34;title function_&#34;&gt;dest&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;dist&amp;#x27;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;gulp.&lt;span class=&#34;title function_&#34;&gt;task&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;minify&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; gulp.&lt;span class=&#34;title function_&#34;&gt;src&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;dist/index.js&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .&lt;span class=&#34;title function_&#34;&gt;pipe&lt;/span&gt;(&lt;span class=&#34;title function_&#34;&gt;uglify&lt;/span&gt;())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .&lt;span class=&#34;title function_&#34;&gt;pipe&lt;/span&gt;(&lt;span class=&#34;title function_&#34;&gt;rename&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;index.min.js&amp;quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .&lt;span class=&#34;title function_&#34;&gt;pipe&lt;/span&gt;(gulp.&lt;span class=&#34;title function_&#34;&gt;dest&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;dist&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;gulp.&lt;span class=&#34;title function_&#34;&gt;task&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;css&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; gulp.&lt;span class=&#34;title function_&#34;&gt;src&lt;/span&gt;([&lt;span class=&#34;string&#34;&gt;&amp;#x27;src/index.css&amp;#x27;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		.&lt;span class=&#34;title function_&#34;&gt;pipe&lt;/span&gt;(&lt;span class=&#34;title function_&#34;&gt;cleanCSS&lt;/span&gt;(&amp;#123;&lt;span class=&#34;attr&#34;&gt;compatibility&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;ie8&amp;#x27;&lt;/span&gt;&amp;#125;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		.&lt;span class=&#34;title function_&#34;&gt;pipe&lt;/span&gt;(gulp.&lt;span class=&#34;title function_&#34;&gt;dest&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;dist&amp;#x27;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;gulp.&lt;span class=&#34;title function_&#34;&gt;task&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;json&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; gulp.&lt;span class=&#34;title function_&#34;&gt;src&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;src/meta*.json&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		.&lt;span class=&#34;title function_&#34;&gt;pipe&lt;/span&gt;(&lt;span class=&#34;title function_&#34;&gt;jsonminify&lt;/span&gt;())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		.&lt;span class=&#34;title function_&#34;&gt;pipe&lt;/span&gt;(gulp.&lt;span class=&#34;title function_&#34;&gt;dest&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;dist&amp;#x27;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;gulp.&lt;span class=&#34;title function_&#34;&gt;task&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;webserver&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  gulp.&lt;span class=&#34;title function_&#34;&gt;src&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;./&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .&lt;span class=&#34;title function_&#34;&gt;pipe&lt;/span&gt;(&lt;span class=&#34;title function_&#34;&gt;webserver&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;livereload&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;directoryListing&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;open&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;gulp.&lt;span class=&#34;title function_&#34;&gt;task&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;watch&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  gulp.&lt;span class=&#34;title function_&#34;&gt;watch&lt;/span&gt;([&lt;span class=&#34;string&#34;&gt;&amp;#x27;src/*.js&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;src/**/*.js&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;src/**/*.vue&amp;#x27;&lt;/span&gt;], [&lt;span class=&#34;string&#34;&gt;&amp;#x27;js&amp;#x27;&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  gulp.&lt;span class=&#34;title function_&#34;&gt;watch&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;src/*.css&amp;#x27;&lt;/span&gt;, [&lt;span class=&#34;string&#34;&gt;&amp;#x27;css&amp;#x27;&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  gulp.&lt;span class=&#34;title function_&#34;&gt;watch&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;src/*.json&amp;#x27;&lt;/span&gt;, [&lt;span class=&#34;string&#34;&gt;&amp;#x27;json&amp;#x27;&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;gulp.&lt;span class=&#34;title function_&#34;&gt;task&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;assets&amp;#x27;&lt;/span&gt;, [&lt;span class=&#34;string&#34;&gt;&amp;#x27;json&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;css&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;js&amp;#x27;&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;gulp.&lt;span class=&#34;title function_&#34;&gt;task&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;default&amp;#x27;&lt;/span&gt;, [&lt;span class=&#34;string&#34;&gt;&amp;#x27;assets&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;webserver&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;watch&amp;#x27;&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;gulp.&lt;span class=&#34;title function_&#34;&gt;task&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;release&amp;quot;&lt;/span&gt;, [&lt;span class=&#34;string&#34;&gt;&amp;#x27;assets&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;minify&amp;#x27;&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;使用单文件组件&#34;&gt;&lt;a href=&#34;#使用单文件组件&#34; class=&#34;headerlink&#34; title=&#34;使用单文件组件&#34;&gt;&lt;/a&gt;使用单文件组件&lt;/h2&gt;&lt;p&gt;引入webpack后，开始高高兴兴地分模块拆分代码，却发现分组件使用Vue时，不是单纯地定义组件配置信息，然后传给入口组件就行。必须要引入全家桶，&lt;code&gt;vue-loader&lt;/code&gt;等工具，文件不得不用.vue这样的形式组织（现在开始觉得React组件的组织比Vue舒服了）。本来使用单文件的形式就是想尽量精简，可随着功能逐渐健全，看来重构也是避免不了的啊。在&lt;a href=&#34;https://github.com/vuejs/vue-loader&#34;&gt;vue-loader&lt;/a&gt;的介绍里，居然还要通过&lt;code&gt;vue-cli&lt;/code&gt;来大一统，但是我一是想维持项目尽量轻量精简，使用gulp的工具链；二是项目已经写了很久了，全部迁移过去成本有些大。于是，通过&lt;code&gt;vue-cli&lt;/code&gt;新建样本项目，对着&lt;code&gt;package.json&lt;/code&gt;和&lt;code&gt;webpack.config.js&lt;/code&gt;一抄了事。&lt;/p&gt;
&lt;p&gt;加上种种&lt;code&gt;.vue&lt;/code&gt;文件的相关配置，&lt;code&gt;gulp.babel.js&lt;/code&gt;最后长下面这样。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;gulp.&lt;span class=&#34;title function_&#34;&gt;task&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;js&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; gulp.&lt;span class=&#34;title function_&#34;&gt;src&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;src/index.js&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .&lt;span class=&#34;title function_&#34;&gt;pipe&lt;/span&gt;(&lt;span class=&#34;title function_&#34;&gt;webpack&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;module&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;rules&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &amp;#123; &lt;span class=&#34;attr&#34;&gt;test&lt;/span&gt;: &lt;span class=&#34;regexp&#34;&gt;/\.js$/&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;exclude&lt;/span&gt;: &lt;span class=&#34;regexp&#34;&gt;/node_modules/&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;loader&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;babel-loader&amp;quot;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &amp;#123; &lt;span class=&#34;attr&#34;&gt;test&lt;/span&gt;: &lt;span class=&#34;regexp&#34;&gt;/\.vue$/&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;loader&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;vue-loader&amp;#x27;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &amp;#123; &lt;span class=&#34;attr&#34;&gt;test&lt;/span&gt;: &lt;span class=&#34;regexp&#34;&gt;/\.(png|jpg|gif|svg)$/&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;loader&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;file-loader&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;options&lt;/span&gt;: &amp;#123; &lt;span class=&#34;attr&#34;&gt;name&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;[name].[ext]?[hash]&amp;#x27;&lt;/span&gt; &amp;#125; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;resolve&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;alias&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;string&#34;&gt;&amp;#x27;vue$&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;vue/dist/vue.esm.js&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;extensions&lt;/span&gt;: [&lt;span class=&#34;string&#34;&gt;&amp;#x27;*&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;.js&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;.vue&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;.json&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .&lt;span class=&#34;title function_&#34;&gt;pipe&lt;/span&gt;(&lt;span class=&#34;title function_&#34;&gt;rename&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;index.js&amp;quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		.&lt;span class=&#34;title function_&#34;&gt;pipe&lt;/span&gt;(gulp.&lt;span class=&#34;title function_&#34;&gt;dest&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;dist&amp;#x27;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;下面需要开始拆分代码了。根据React&amp;#x2F;Vue这样框架通常的设计经验，需要下面一些组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;actions&lt;/code&gt;  存储状态管理的动作&lt;/li&gt;
&lt;li&gt;&lt;code&gt;components&lt;/code&gt;  存储相互解耦的”dumb”组件，最好和业务无关&lt;/li&gt;
&lt;li&gt;&lt;code&gt;constants&lt;/code&gt;  存储全局常量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;containers&lt;/code&gt;  存储组织&lt;code&gt;components&lt;/code&gt;的业务容器组件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;entry&lt;/code&gt;  存储入口文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;helper&lt;/code&gt;  存储工具函数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reducers&lt;/code&gt;  存储状态管理的reducers&lt;/li&gt;
&lt;li&gt;&lt;code&gt;settings&lt;/code&gt;  存储全局配置，通常用来初始化store&lt;/li&gt;
&lt;li&gt;&lt;code&gt;store&lt;/code&gt;  存储全局状态&lt;/li&gt;
&lt;li&gt;&lt;code&gt;templates&lt;/code&gt;  存储引入js的html文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我的项目比较简单，一没有状态管理（后面复杂了之后可能会引入😂），二只有三个组件，只要上面的&lt;code&gt;components&lt;/code&gt;, &lt;code&gt;constants&lt;/code&gt;, &lt;code&gt;containers&lt;/code&gt;, &lt;code&gt;helper&lt;/code&gt;的就够用了。最后src下的文件目录大概像下面这样&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;├── App.vue&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;├── components&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│   └── column&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│       └── Column.vue&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;├── constants&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│   └── index.js&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;├── containers&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│   ├── info&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│   │   └── Info.vue&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│   └── wall&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│       └── Wall.vue&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;├── helper&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│   └── utils.js&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;├── index.css&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;└── index.js&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在拆分时遇到了一些数据需要从最外层透传到子组件的情况，如&lt;code&gt;res&lt;/code&gt;, &lt;code&gt;tag_list&lt;/code&gt;, &lt;code&gt;tag_keys&lt;/code&gt;。不过他们是只读的，而且数目很少，所以并不需要状态管理，只用通过props传下去就行了。&lt;/p&gt;
&lt;h2 id=&#34;新功能&#34;&gt;&lt;a href=&#34;#新功能&#34; class=&#34;headerlink&#34; title=&#34;新功能&#34;&gt;&lt;/a&gt;新功能&lt;/h2&gt;&lt;p&gt;重构完之后，终于可以写新功能了。新功能主要是增加两个伪路由，方便页面的分享（这个需求我之前遇到过几次了）。页面是spa类型的，所以前端路由可以采用hash或history H5 API来实现。同时也有许多在这个基础上了前端路由库，提供一站式解决方案。我的需求目前其实不需要完整的路由方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;图片详情页可以分享&lt;/li&gt;
&lt;li&gt;搜索结果可以分享&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，设计上使用hash的方案，对于图片详情页，用&lt;code&gt;!&lt;/code&gt;开头，后接图片序号。对于搜索结果页，则没有开头的&lt;code&gt;!&lt;/code&gt;，仅使用&lt;code&gt;/&lt;/code&gt;隔开每一个搜索关键字。对hash的读写上，没有什么困难的地方：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;读&lt;/strong&gt;：&lt;code&gt;App.vue&lt;/code&gt;根据hash注入对应的数据，更改默认视图，对于图片详情页，更改展示组件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;写&lt;/strong&gt;：切换组件时，记录当前数据到&lt;code&gt;location.hash&lt;/code&gt;，方便直接复制链接分享&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;后面的计划&#34;&gt;&lt;a href=&#34;#后面的计划&#34; class=&#34;headerlink&#34; title=&#34;后面的计划&#34;&gt;&lt;/a&gt;后面的计划&lt;/h2&gt;&lt;p&gt;现在网站还是有点单调了。只能自娱自乐，没有互动。后面应该会考虑在每张图片接入Disqus的问题。&lt;/p&gt;
</content>
        <category term="重构" />
        <category term="脚手架" />
        <category term="技改" />
        <category term="Vue" />
        <category term="gulp" />
        <updated>2017-11-17T12:56:12.000Z</updated>
    </entry>
    <entry>
        <id>http://shenlvmeng.github.com/blog/2015/02/02/some-thinking-5/</id>
        <title>重构与复提产品有感</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2015/02/02/some-thinking-5/"/>
        <content type="html">&lt;p&gt;2月2日，二月份第一个工作日。老大道佳和同事阳仔来了，技术组的三人总算全部到齐。再加上辰光大师兄，讨论时总算有了许多技术成分加入。此时，对产品未来开发的开发变得有了冲击和富有信息量起来。期间，道佳和阳仔（其实阳仔能力很强）提到了代码重构的概念。自己之前也有所感悟，这次找到共鸣有些高兴。&lt;/p&gt;
&lt;h2 id=&#34;关于重构&#34;&gt;&lt;a href=&#34;#关于重构&#34; class=&#34;headerlink&#34; title=&#34;关于重构&#34;&gt;&lt;/a&gt;关于重构&lt;/h2&gt;&lt;p&gt;有前几篇日记的缺点做借鉴，这里分点列出我的想法，力避废话和漫无头绪。&lt;/p&gt;
&lt;h4 id=&#34;重构是经常出现的&#34;&gt;&lt;a href=&#34;#重构是经常出现的&#34; class=&#34;headerlink&#34; title=&#34;重构是经常出现的&#34;&gt;&lt;/a&gt;重构是经常出现的&lt;/h4&gt;&lt;p&gt;起因是，身为技术的我们接手的是外包团队的一期作品，随着更高产品需求的提出，代码自然做了一番又一番的增删改查，渐渐地，我们愈发察觉到推倒重来似乎比继续修改来得更长远和轻松。今天对员工权限模糊问题的讨论是压倒骆驼的最后一根稻草。在讨论时，道佳提到重构是程序员避不开的环节，所谓两月一重构。我认为很有道理，诚如辰光在之前所说，产品的商业模式是会随市场反响改变的。这样，阳仔的事例就很好解释了——他在之前的创业团队当过技术，写代码时，他说到“我写的代码只能用2个月，这两个月后恐怕需要你们找跟你们一起做下去的技术重新写一遍。”&lt;/p&gt;
&lt;h4 id=&#34;重构来自新需求或新思想&#34;&gt;&lt;a href=&#34;#重构来自新需求或新思想&#34; class=&#34;headerlink&#34; title=&#34;重构来自新需求或新思想&#34;&gt;&lt;/a&gt;重构来自新需求或新思想&lt;/h4&gt;&lt;p&gt;产品在推出后，导向不可避免受到外界的影响。补丁打多了，衣服自然变得不适合穿。老版的代码经常跟不上方向的迅速变化，重构是最理想也是最有效的解决办法，治标且治本。另外，这里新思想是指对数据结构或身份权限等基本模型有了更深的认识抑或外界因素迫使基本模型做出适应（如用户量的庞大将考验数据表的设计），这次我们将要作出的重构一部分就是因为这个原因。&lt;/p&gt;
&lt;h4 id=&#34;重构是产品与技术的平衡点&#34;&gt;&lt;a href=&#34;#重构是产品与技术的平衡点&#34; class=&#34;headerlink&#34; title=&#34;重构是产品与技术的平衡点&#34;&gt;&lt;/a&gt;重构是产品与技术的平衡点&lt;/h4&gt;&lt;p&gt;产品设计和技术开发的思路刚好是两个不同方向。产品设计讲究MVP（Minimum Viable Product ），意为产品的最初设计一定要抓住核心，把产品的主要价值展现出来即可。拿给用户反馈后，再看情况做后续设计。因为，这样在成本上最节省，且成功概率最大。“迭代”一词在这里是最佳的形容，推出&amp;#x3D;&amp;gt;反馈&amp;#x3D;&amp;gt;复推出，如此周而复始，雪球越滚越大。归功于互联网的快速，可以“小步快跑”的传统行业互联网化将有很美好的场景（可惜的是，汽车等传统行业做不到），在短期内滚成很大规模。因此，初期产品追求短小而精悍，很忌讳全面。&lt;/p&gt;
&lt;p&gt;理想化的技术恰相反，毕竟只有对产品有了全面细致的思考，才能使保证产品在技术上的长时间可靠性。如，模型设计，数据表设计。这些正像大厦的地基，地基牢固，楼才搭得高。可是，绝大多数情况，产品等不了那么久，没有全面思考调研的时间，只能像上文提到那样，先做出突出主体的一部分。这样技术就不得不在新需求的压力下，对地基进行小范围修改，以保证产品的可靠性。可以想见，这样搭上去的楼注定不会牢固。&lt;/p&gt;
&lt;p&gt;重构恰好是两者中的平衡点。重构给了技术喘口气的时间，也能满足产品方面的新需求。正是由于它的普遍存在性。很多公司其实是一边打补丁，一边给自己铺后路设计新技术架构的。&lt;/p&gt;
&lt;h2 id=&#34;MVP与产品成功三内因&#34;&gt;&lt;a href=&#34;#MVP与产品成功三内因&#34; class=&#34;headerlink&#34; title=&#34;MVP与产品成功三内因&#34;&gt;&lt;/a&gt;MVP与产品成功三内因&lt;/h2&gt;&lt;p&gt;上文中也提到了，产品的设计是有讲究的。在初期设计时，一定要把握住MVP的思路，只呈现核心价值，用最小可验证产品证明它的可行性。微信就是个很典型的例子，1.0只推出了聊天功能，之后的摇一摇，朋友圈，支付等都是一点一点加上去的。充分的缓冲时间和较快的互联网产品周期，让它能稳步上升。它的内因是，未来无法预知，最小代价实验，随机应变是最放心的。好的产品经理不用识别未来，只要能识别好产品现在的走向就不错了。反过来看初期，若有的产品设计的面面俱到或是团队承诺已考虑到未来，多半走不远。&lt;/p&gt;
&lt;p&gt;产品在设计上有成功的三内因。一，满足刚需；二，用户黏性；三，用户体验。这里以师兄提到的找朋友出去玩的app来讨论。&lt;/p&gt;
&lt;h4 id=&#34;满足刚需&#34;&gt;&lt;a href=&#34;#满足刚需&#34; class=&#34;headerlink&#34; title=&#34;满足刚需&#34;&gt;&lt;/a&gt;满足刚需&lt;/h4&gt;&lt;p&gt;刚需是什么？就是在某种场景下，满足某一部分人的必需。以例子为例，它满足了在找不到熟人却想进行体育活动等时的需求。刚需最好别无取代，当有所取代时，可以尝试缩小用户群，提高针对性。&lt;/p&gt;
&lt;h4 id=&#34;用户黏性&#34;&gt;&lt;a href=&#34;#用户黏性&#34; class=&#34;headerlink&#34; title=&#34;用户黏性&#34;&gt;&lt;/a&gt;用户黏性&lt;/h4&gt;&lt;p&gt;满足了刚需，就会有人用。但这还不够，足够的用户黏性才能保证产品活下去。黏性的最好衡量因素就是使用频次。以例子为例，休闲活动对于大多数人来说一周一到两次，这样的频次实在不算高。&lt;/p&gt;
&lt;h4 id=&#34;用户体验&#34;&gt;&lt;a href=&#34;#用户体验&#34; class=&#34;headerlink&#34; title=&#34;用户体验&#34;&gt;&lt;/a&gt;用户体验&lt;/h4&gt;&lt;p&gt;用户体验即产品价值。价值&amp;#x3D;值 - 价，只有用户使用产品时的显性+隐性花费小于得到的体验，才会被留下来。即产品大于用户的预期。它是用户黏性的保证。&lt;/p&gt;
&lt;p&gt;写了这么多篇日记，似乎以产品为多了。道佳、阳仔过来后，但愿在技术上也能得到真知灼见。&lt;/p&gt;
</content>
        <category term="重构" />
        <category term="产品" />
        <category term="技术" />
        <updated>2015-02-02T15:39:56.000Z</updated>
    </entry>
</feed>
