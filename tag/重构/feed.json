{
    "version": "https://jsonfeed.org/version/1",
    "title": "Shenlvmeng's Blog • All posts by \"重构\" tag",
    "description": "Be sharp, my friend.",
    "home_page_url": "http://shenlvmeng.github.com/blog",
    "items": [
        {
            "id": "http://shenlvmeng.github.com/blog/2020/08/17/refactoring-design-improvement/",
            "url": "http://shenlvmeng.github.com/blog/2020/08/17/refactoring-design-improvement/",
            "title": "重构 —— 代码的实用性与艺术性",
            "date_published": "2020-08-17T14:56:03.000Z",
            "content_html": "<p>MF的《重构》一书算是程序设计书籍的经典了。其中对于重构的认识和剖析深入浅出，提纲挈领。对于有一定编程经验的人来说更是如虎添翼的帮助。下面我尽量在不贬损原意的基础上，用自己的思路和语言进行适当的总结。</p>\n<h2 id=\"序-amp-前言：重构的再认识\"><a href=\"#序-amp-前言：重构的再认识\" class=\"headerlink\" title=\"序 &amp; 前言：重构的再认识\"></a>序 &amp; 前言：重构的再认识</h2><p>开篇名义，还未进入正文，书从序和前言开始，便不自觉间流露着真知灼见：</p>\n<ul>\n<li>重构是<strong>不改变软件可观察行为的前提下改善其内部结构</strong>。</li>\n<li>重构需要你维护一份“坏味道”和重构手段的对应</li>\n<li>设计前期使用模式通常会导致过度工程</li>\n<li>代码总将随着设计者的经验成长而进化</li>\n</ul>\n<h2 id=\"样例：感受重构\"><a href=\"#样例：感受重构\" class=\"headerlink\" title=\"样例：感受重构\"></a>样例：感受重构</h2><blockquote>\n<p>任何一个傻瓜都能写出计算机理解的代码。但唯有优秀的程序员才能写出人类能理解的代码</p>\n</blockquote>\n<p>代码被阅读和修改的次数远多于被编写的次数。尽管代码在机器中运行时，机器并不会嫌弃代码丑陋。但是代码总是要修改的，当我们打算修改系统时，就涉及到了人。人在乎这些。差劲的系统很难维护，如果很难找到修改点，程序员就可能犯错，从而引入bug。如果你发现你需要为程序增加特性，但是当前的代码结构让你不能方便达成目标时，先重构那个程序，再方便地添加特性。</p>\n<p>当然，重构前一定要确认，自己有没有一套<strong>可靠的测试机制</strong>，因为你需要它来保证重构的基础要素：不修改已有功能。重构中，最好能以<strong>微小的步伐</strong>前进（这样能及时回滚）。在本章样例的重构中，体现了下面一些“好味道”：</p>\n<ul>\n<li>代码块越小，代码功能就越好管理</li>\n<li>好的代码应该能够清楚表达自己的功能，变量名也是代码清晰的关键</li>\n<li>用多态取代条件判断逻辑</li>\n<li>结构化风格相比过程化风格更易扩展也更好维护</li>\n</ul>\n<h2 id=\"原则\"><a href=\"#原则\" class=\"headerlink\" title=\"原则\"></a>原则</h2><p>本章介绍了重构的一些原则和基础性认识。</p>\n<ul>\n<li>何为重构：不改变软件可观察特性的前提下，通过修改内部结构，提高其可理解性。通常情况下和<strong>性能优化</strong>相对应<ul>\n<li>两顶帽子：添加新功能和重构应该属于两种截然不同的行为，它们应该分开交替进行</li>\n</ul>\n</li>\n<li>重构的好处<ul>\n<li>改进软件设计，整理代码让后续的修改更容易</li>\n<li>让软件更好理解，准确说出我想要的</li>\n<li>帮忙找到bug</li>\n<li>提高未来的编程速度</li>\n</ul>\n</li>\n<li>何时重构<ul>\n<li><strong>事不过三</strong>，第一次只管去做，第二次产生反感但还是去做，第三次做类似的事情就去重构</li>\n<li>修改bug时重构</li>\n<li>review代码时重构</li>\n</ul>\n</li>\n<li>间接层和重构：中间层能够允许逻辑共享和意图的分开解释，同时隔离变化和解耦。<ul>\n<li>提前设计好中间层不如先直接做再重构</li>\n<li>少数情况下，中间层只会带来冗余</li>\n</ul>\n</li>\n<li>重构的难题<ul>\n<li>修改已有API：建议维护新旧两个接口，让用户做出反应后，再迁移。这期间，旧接口应该要调用新接口实现</li>\n<li>代码已经无法正常运行时，重写比重构更省事</li>\n</ul>\n</li>\n<li>重构和性能优化：大多数的性能优化集中在小部分代码上。先写出风格良好的代码，再使用性能工具实测数据，对瓶颈处单独优化性能。好的重构也会让性能优化更容易进行</li>\n</ul>\n<h2 id=\"坏味道\"><a href=\"#坏味道\" class=\"headerlink\" title=\"坏味道\"></a>坏味道</h2><p>在遇到下面一些“味道”时，可能你就需要重构了。</p>\n<ul>\n<li>重复代码</li>\n<li>函数过长，每当你需要用注释说明点什么时，可以把需要说明的东西写到一个独立函数中</li>\n<li>太长的类</li>\n<li>函数入参过多</li>\n<li>发散式变化：一个类因为多个原因发生不同的变化</li>\n<li>霰弹式变化：一个原因引起一个类的多个变化</li>\n<li>特性依恋：函数对某个类的兴趣高于自己所在的类</li>\n<li>数据泥团：喜欢聚合在一起的零散数据字段</li>\n<li>基础类型偏执：对于基础类型如字符串、整型不愿意使用简单类来封装</li>\n<li>swtich语句</li>\n<li>冗余类</li>\n<li>夸夸其谈未来性：过度为未来设计</li>\n<li>令人迷惑的暂时字段</li>\n<li>过度耦合的链式调用，如<code>a.b.c().d()</code>，链上任意类做修改都会影响整个调用</li>\n<li>两个类的狎昵关系</li>\n<li>异曲同工的类</li>\n<li>幼稚的数据类：只有最简单的getter和setter</li>\n<li>子类拒绝继承超类的函数或数据</li>\n<li>过多的注释</li>\n</ul>\n<h2 id=\"测试体系：重构的保证\"><a href=\"#测试体系：重构的保证\" class=\"headerlink\" title=\"测试体系：重构的保证\"></a>测试体系：重构的保证</h2><p>前面已经提到数次，重构的前提是不对已经已有行为做改动，这需要测试的帮助。本章对建立测试给了一些简单的介绍。</p>\n<ul>\n<li>编写测试代码最有用时机是编程之前</li>\n<li>编写一个测试case时，可以先让测试失败，再通过成功验证程序功能</li>\n<li>遇到bug时，先添加一个单元测试复现这个bug</li>\n<li><strong>测试不能保证程序没有bug</strong>，编写测试样例也遵循82原则，当样例已经很多时，它带来的边际效果就没那么好了。应该更多考虑容易出错的<strong>边界条件</strong>，积极思考如何“破坏代码”。</li>\n</ul>\n<h2 id=\"重构列表\"><a href=\"#重构列表\" class=\"headerlink\" title=\"重构列表\"></a>重构列表</h2><p>下面分几大方向介绍具体的重构手段。每个手段会分场景、思路、动机、做法来展开。</p>\n<h3 id=\"组织函数\"><a href=\"#组织函数\" class=\"headerlink\" title=\"组织函数\"></a>组织函数</h3><p>日常工作中，非常容易坏味道中的过长函数，下面的一些重构方式可以帮我们优化这一点。</p>\n<h4 id=\"提炼函数\"><a href=\"#提炼函数\" class=\"headerlink\" title=\"提炼函数\"></a>提炼函数</h4><ul>\n<li>场景：有一段相对独立的代码可以被组织并独立出来</li>\n<li>思路：将这段代码放到一个独立函数中，用<strong>函数名解释该函数的用途</strong></li>\n<li>动机：有时会遇到过长函数中有一段需要注释才能看明白的代码。将这样相对独立的逻辑拆分成表意的短小函数后，可以让高层函数读起来就像一系列注释。如果提炼可以提高代码清晰度，就算函数名比函数体长都无所谓</li>\n<li>做法：用<strong>做什么</strong>而不是<strong>怎么做</strong>来为函数命名（如果你想不出一个更有意义的名称，就别动了）。检查是否有临时变量，如果有读取，可以作为入参传递给函数；如果对临时变量甚至有再赋值，那可能还要让函数返回临时变量修改后的值</li>\n</ul>\n<h4 id=\"内联函数\"><a href=\"#内联函数\" class=\"headerlink\" title=\"内联函数\"></a>内联函数</h4><ul>\n<li>场景：函数本体和名称一样清晰易懂</li>\n<li>思路：在函数调用点插入函数本体，然后移除函数</li>\n<li>动机：如果函数本体足够简单，且表意清晰，同时调用点有限，<strong>不具备多态性</strong>。那么出于减少无用中间层的考虑，可以直接使用函数体</li>\n<li>做法：注意检查是否有多态性</li>\n</ul>\n<h4 id=\"内联临时变量\"><a href=\"#内联临时变量\" class=\"headerlink\" title=\"内联临时变量\"></a>内联临时变量</h4><ul>\n<li>场景：一个临时变量只被<strong>简单表达式</strong>赋值一次，同时妨碍了其他重构手法</li>\n<li>思路：将对变量的引用动作，替换成给它赋值的表达式本身</li>\n<li>动机：过多的临时变量会妨碍你重构长函数</li>\n<li>做法：注意确保表达式<strong>没有副作用</strong></li>\n</ul>\n<h4 id=\"以查询替代临时变量\"><a href=\"#以查询替代临时变量\" class=\"headerlink\" title=\"以查询替代临时变量\"></a>以查询替代临时变量</h4><ul>\n<li>场景：程序中有个临时变量保存了某个表达式的运算结果，同时被多处引用</li>\n<li>思路：将表达式提炼成独立函数，在独立变量的所有引用点替换成对新函数的调用</li>\n<li>动机：替换成函数后，整个类都可以获得这份信息，同时会减少对该变量的频繁引用带来的重构困难</li>\n<li>做法：寻找<strong>只被赋值一次</strong>的临时变量，对于赋值多次的临时变量使用“分解临时变量”方法先重构，保证提炼出来的函数没有副作用。先不要担心性能问题，等到出现了优化也会比较简单</li>\n</ul>\n<h4 id=\"引入解释性变量\"><a href=\"#引入解释性变量\" class=\"headerlink\" title=\"引入解释性变量\"></a>引入解释性变量</h4><ul>\n<li>场景：有个复杂的表达式，表意不够清晰</li>\n<li>思路：将表达式的值放进一个临时变量，用变量名表意</li>\n<li>动机：表达式不如变量名更好阅读。如果临时变量在整个类都有意义，建议直接使用“提炼函数”方法</li>\n<li>做法：先判断是否使用“提炼函数”的做法</li>\n</ul>\n<h4 id=\"分解临时变量\"><a href=\"#分解临时变量\" class=\"headerlink\" title=\"分解临时变量\"></a>分解临时变量</h4><ul>\n<li>场景：某个临时变量被<strong>多次赋值</strong>，且每次赋值意义不一样</li>\n<li>思路：针对每次不同意义的赋值使用不一样的临时变量</li>\n<li>动机：临时变量的多义性会增大理解成本</li>\n<li>做法：寻找被多次赋值且有多义性的变量，不同的意义使用新的不同临时变量</li>\n</ul>\n<h4 id=\"移除对函数入参的赋值\"><a href=\"#移除对函数入参的赋值\" class=\"headerlink\" title=\"移除对函数入参的赋值\"></a>移除对函数入参的赋值</h4><ul>\n<li>场景：对函数入参赋值</li>\n<li>思路：用新的临时变量取代入参</li>\n<li>动机：对入参赋值会混淆按值传递和按引用传递的传参方式</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"用函数对象取代函数\"><a href=\"#用函数对象取代函数\" class=\"headerlink\" title=\"用函数对象取代函数\"></a>用函数对象取代函数</h4><ul>\n<li>场景：大型函数中代码过于复杂，无法使用“提炼函数”</li>\n<li>思路：直接将函数放在<strong>单独对象</strong>中，将复杂的局部变量变成对象字段，从而可以轻松地在对象中分解这个大型函数到多个小型函数</li>\n<li>动机：略</li>\n<li>做法<ol>\n<li>建立一个新类，用函数用途给这类命名</li>\n<li>在新类中创建final字段保存大型函数所在的对象，即“源对象”</li>\n<li>新类的构造函数使用原函数入参作为入参</li>\n<li>新类中建立<code>computed()</code>函数</li>\n<li>赋值原代码到<code>computed()</code>中</li>\n<li>在原函数位置，创建这个新类的一个对象，并调用这个对象的<code>computed()</code>函数</li>\n<li>继续重构新类中的<code>computed()</code>函数</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"替换算法\"><a href=\"#替换算法\" class=\"headerlink\" title=\"替换算法\"></a>替换算法</h4><ul>\n<li>场景：某个算法有更清晰的算法替代</li>\n<li>思路：直接更换函数本体</li>\n<li>动机：略</li>\n<li>做法：略</li>\n</ul>\n<h3 id=\"对象间的特性搬移\"><a href=\"#对象间的特性搬移\" class=\"headerlink\" title=\"对象间的特性搬移\"></a>对象间的特性搬移</h3><p>类应该承担清晰且明确的责任。不论是承担责任过多还是“不怎么负责任”，都需要进行重构。</p>\n<h4 id=\"搬移函数\"><a href=\"#搬移函数\" class=\"headerlink\" title=\"搬移函数\"></a>搬移函数</h4><ul>\n<li>场景：有函数和所在类以外的其他类反而有更多交流，如调用或被调用</li>\n<li>思路：在和函数交流更多的类中建立一个有类似行为的新函数，改造旧函数为新函数的委托函数，或者直接移除旧函数</li>\n<li>动机：略</li>\n<li>做法：<ul>\n<li>检查和搬移函数关联的字段或函数，判断是否要一起搬移</li>\n<li>检查子类和超类有无其他声明，检查有无多态性</li>\n<li>如果目标函数需要太多源类特性，就需要进一步分解后再搬移</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"搬移字段\"><a href=\"#搬移字段\" class=\"headerlink\" title=\"搬移字段\"></a>搬移字段</h4><ul>\n<li>场景：某个字段和所在类以外的其他类有更多交流</li>\n<li>思路：在目标类新建字段，修改源字段的所有使用者，令它们使用新字段</li>\n<li>动机：略</li>\n<li>做法：如果字段的访问级别是<code>public</code>，需要先用“封装字段”手段制造一个委托中间层</li>\n</ul>\n<h4 id=\"提炼类\"><a href=\"#提炼类\" class=\"headerlink\" title=\"提炼类\"></a>提炼类</h4><ul>\n<li>场景：某个类做了两个类的事情</li>\n<li>思路：建立新类，搬移函数和字段</li>\n<li>动机：一个类应该是清楚的抽象，即可以使用清晰的命名</li>\n<li>做法：拆分类，建立两个类之间的单向或双向连接，搬移底层函数，搬移高层函数</li>\n</ul>\n<h4 id=\"内联化类\"><a href=\"#内联化类\" class=\"headerlink\" title=\"内联化类\"></a>内联化类</h4><ul>\n<li>场景：某个类没做什么事情</li>\n<li>思路：将这个类的特性搬移到其他类，然后移除原类</li>\n<li>动机：通常会由于此前的重构动作移走了这个类的责任</li>\n<li>做法：选择和这个类关系最近的类进行合并，可以先在目标类中使用委托，然后再通过搬移函数的方式完成重构</li>\n</ul>\n<h4 id=\"隐藏委托关系\"><a href=\"#隐藏委托关系\" class=\"headerlink\" title=\"隐藏委托关系\"></a>隐藏委托关系</h4><ul>\n<li>场景：使用者通过委托类来调用对象</li>\n<li>思路：在提供服务的类上直接建立使用者所需的所有函数，隐藏委托关系</li>\n<li>动机：隐藏调用关系可以减少实现细节暴露从而减少耦合</li>\n<li>做法：在发起请求的类中，直接实现功能的接口，移除使用者的委托代码</li>\n</ul>\n<h4 id=\"移除中间人\"><a href=\"#移除中间人\" class=\"headerlink\" title=\"移除中间人\"></a>移除中间人</h4><ul>\n<li>场景：类做了过多<strong>简单委托</strong>的动作</li>\n<li>思路：让使用者直接调用受托类</li>\n<li>动机：当“隐藏委托关系”使用过多时，封装会很痛苦，这个时候不如直接让使用者通过链式调用用中间受托类实现功能</li>\n<li>做法：刚好是“隐藏委托关系”的反向过程</li>\n</ul>\n<h4 id=\"引入外加函数\"><a href=\"#引入外加函数\" class=\"headerlink\" title=\"引入外加函数\"></a>引入外加函数</h4><ul>\n<li>场景：需要为提供服务的类新增函数，但是你无法修改这个类（通常是库代码）</li>\n<li>思路：在使用者类中建立一个函数，并用第一参数的方式传入服务类实例</li>\n<li>动机：尽管可以在不修改服务类代码的情况下，自行添加新函数，但还是建议当外加函数较多时，使用“引入本地扩展”的方式，或直接推动服务类升级</li>\n<li>做法：在客户类中建立函数，这个函数不调用客户类特性，只是转发请求到服务类</li>\n</ul>\n<h4 id=\"引入本地扩展\"><a href=\"#引入本地扩展\" class=\"headerlink\" title=\"引入本地扩展\"></a>引入本地扩展</h4><ul>\n<li>场景：需要为服务类添加一些额外函数，但你无法修改这个类</li>\n<li>思路：建立一个新类，使其包含这些额外函数，让这个扩展类成为源类的子类或包装类</li>\n<li>动机：子类工作量较少，但是必须在对象创建期接管创建过程；包装类只是单纯转发请求，没有这个限制，但是转发过程都需要自己实现</li>\n<li>做法：略</li>\n</ul>\n<h3 id=\"重新组织数据\"><a href=\"#重新组织数据\" class=\"headerlink\" title=\"重新组织数据\"></a>重新组织数据</h3><h4 id=\"自封装字段\"><a href=\"#自封装字段\" class=\"headerlink\" title=\"自封装字段\"></a>自封装字段</h4><ul>\n<li>场景：直接访问一个字段的方式给你的重构带来了麻烦，或是引入了麻烦的耦合关系</li>\n<li>思路：用取值&#x2F;设值函数替代直接访问字段</li>\n<li>动机：这种方式让字段更为灵活，但是根据奥卡姆剃刀法则，等需要的时候再用</li>\n<li>做法：有的字段可能需要一个初始化函数</li>\n</ul>\n<h4 id=\"用对象取代数据值\"><a href=\"#用对象取代数据值\" class=\"headerlink\" title=\"用对象取代数据值\"></a>用对象取代数据值</h4><ul>\n<li>场景：数据项需要和行为合在一起使用才有价值</li>\n<li>思路：把简单的数据项封装成对象</li>\n<li>动机：开发初期的简单数据，可能在迭代后会加上特殊行为，如果不及时处理，就会出现特性依恋或重复代码</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"将值对象改为引用对象\"><a href=\"#将值对象改为引用对象\" class=\"headerlink\" title=\"将值对象改为引用对象\"></a>将值对象改为引用对象</h4><ul>\n<li>场景：从一个类会衍生出多个实例，实例间只是一个实体的多种状态</li>\n<li>思路：将值对象改为引用对象</li>\n<li>动机：值对象通过<code>equals()</code>或<code>hashCode()</code>判断，如日期；引用对象则直接可以用相等操作符<code>==</code>判断，如顾客、账户等概念</li>\n<li>做法：你可能需要一个静态字段或提前创建好多个新对象作为访问点</li>\n</ul>\n<h4 id=\"将引用对象改为值对象\"><a href=\"#将引用对象改为值对象\" class=\"headerlink\" title=\"将引用对象改为值对象\"></a>将引用对象改为值对象</h4><ul>\n<li>场景：你的引用对象很小且<strong>不可变</strong>，同时不易管理</li>\n<li>思路：将引用对象改为值对象</li>\n<li>动机：引用对象不好控制，值对象的<strong>不可变特性</strong>在某些场景很好用。</li>\n<li>做法：<strong>只有不可变对象才能被重构</strong></li>\n</ul>\n<h4 id=\"以对象取代数组\"><a href=\"#以对象取代数组\" class=\"headerlink\" title=\"以对象取代数组\"></a>以对象取代数组</h4><ul>\n<li>场景：有个数组，其中的元素类型不一，代表不同的东西</li>\n<li>思路：用对象替代数组，用字段表示不同意义的元素</li>\n<li>动机：数组的作用是<strong>以某种顺序存储一组相似对象</strong>，不要让位置具有特殊意义</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"复制被监视数据\"><a href=\"#复制被监视数据\" class=\"headerlink\" title=\"复制被监视数据\"></a>复制被监视数据</h4><ul>\n<li>场景：有些领域数据被放在了GUI部分代码里</li>\n<li>思路：将数据复制到领域对象中，建立Observer模式，剥离UI和逻辑</li>\n<li>动机：分层良好的系统，用户界面和业务逻辑代码是分开的，这样也更好维护</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"将单向关联改成双向关联\"><a href=\"#将单向关联改成双向关联\" class=\"headerlink\" title=\"将单向关联改成双向关联\"></a>将单向关联改成双向关联</h4><ul>\n<li>场景：两个类都需要对方特性，但目前只有单向连接</li>\n<li>思路：增加一个反向指针，同时修改函数能够同时更新两条链接</li>\n<li>动机：略</li>\n<li>做法：注意删除过程移除指针的顺序</li>\n</ul>\n<h4 id=\"将双向关联改为单向关联\"><a href=\"#将双向关联改为单向关联\" class=\"headerlink\" title=\"将双向关联改为单向关联\"></a>将双向关联改为单向关联</h4><ul>\n<li>场景：两个类有双向关联，但是一个类已经不需要另一个类的特性</li>\n<li>思路：去除不必要连接</li>\n<li>动机：维护双向连接带来便利的同时，也会增加维护的复杂度</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"用常量取代魔法数\"><a href=\"#用常量取代魔法数\" class=\"headerlink\" title=\"用常量取代魔法数\"></a>用常量取代魔法数</h4><ul>\n<li>场景：有个字面量数值，具有特殊含义，但是不能一眼看明白</li>\n<li>思路：创造一个常量，用命名说明字面数值的意义</li>\n<li>动机：魔法数是类型码时，要使用“以类取代类型码”</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"封装字段\"><a href=\"#封装字段\" class=\"headerlink\" title=\"封装字段\"></a>封装字段</h4><ul>\n<li>场景：类中有public字段</li>\n<li>思路：声明改为private，提供相应的访问函数</li>\n<li>动机：暴露public会降低函数的模块化程度，数据应该和行为集中在一起，不应被直接修改</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"封装集合\"><a href=\"#封装集合\" class=\"headerlink\" title=\"封装集合\"></a>封装集合</h4><ul>\n<li>场景：函数返回一个集合</li>\n<li>思路：返回集合的只读副本，并在类中提供添加&#x2F;移除集合元素的函数</li>\n<li>动机：类似“封装字段”，返回的集合一样可能被修改</li>\n<li>做法：使用Collection，或返回一个副本</li>\n</ul>\n<h4 id=\"用数据类取代记录\"><a href=\"#用数据类取代记录\" class=\"headerlink\" title=\"用数据类取代记录\"></a>用数据类取代记录</h4><ul>\n<li>场景：面对传统编程中的记录结构</li>\n<li>思路：创建“哑”数据对象</li>\n<li>动机：要将记录型结构转成面向对象的程序中</li>\n<li>做法：创建private字段，创建读写函数并提供</li>\n</ul>\n<h4 id=\"以类取代类型码\"><a href=\"#以类取代类型码\" class=\"headerlink\" title=\"以类取代类型码\"></a>以类取代类型码</h4><ul>\n<li>场景：类中有个数值类型码，但是<strong>不影响类行为</strong></li>\n<li>思路：用新的类替换数值类型码</li>\n<li>动机：略</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"以子类取代类型码\"><a href=\"#以子类取代类型码\" class=\"headerlink\" title=\"以子类取代类型码\"></a>以子类取代类型码</h4><ul>\n<li>场景：类中有个<strong>不可变</strong>数值类型码，同时<strong>影响类行为</strong></li>\n<li>思路：用宿主的子类替换类型码</li>\n<li>动机：可以用子类的多态性取代switch语句，不过，如果类型码会发生改变，或者宿主类已经有子类则不能用此方法</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"以状态-x2F-策略取代类型码\"><a href=\"#以状态-x2F-策略取代类型码\" class=\"headerlink\" title=\"以状态&#x2F;策略取代类型码\"></a>以状态&#x2F;策略取代类型码</h4><ul>\n<li>场景：类中有个数值类型码，会<strong>影响类行为</strong>，同时不能通过继承来消除</li>\n<li>思路：以状态对象取代替换数值类型码</li>\n<li>动机：略</li>\n<li>做法：创建一个新的类，用类型码的用途为它命名，这就是一个状态对象。所有的新类继承自超类，返回不同的状态码</li>\n</ul>\n<h4 id=\"以字段取代字段\"><a href=\"#以字段取代字段\" class=\"headerlink\" title=\"以字段取代字段\"></a>以字段取代字段</h4><ul>\n<li>场景：子类的查边只在<strong>返回常量数据</strong>的函数上</li>\n<li>思路：修改函数，让它们返回超类的新增字段，然后销毁子类</li>\n<li>动机：这样可以避免继承带来的额外复杂性</li>\n<li>做法：略</li>\n</ul>\n<h3 id=\"简化条件表达式\"><a href=\"#简化条件表达式\" class=\"headerlink\" title=\"简化条件表达式\"></a>简化条件表达式</h3><p>条件逻辑会增加理解的层级，处理不好时，很容易配合长代码造成理解困难。</p>\n<h4 id=\"分解条件表达式\"><a href=\"#分解条件表达式\" class=\"headerlink\" title=\"分解条件表达式\"></a>分解条件表达式</h4><ul>\n<li>场景：有一个复杂的条件语句</li>\n<li>思路：为if、then、else语句段落提炼独立函数</li>\n<li>动机：条件逻辑通常会使代码更难阅读</li>\n<li>做法：使用表意的函数名说明条件语句意思</li>\n</ul>\n<h4 id=\"合并条件表达式\"><a href=\"#合并条件表达式\" class=\"headerlink\" title=\"合并条件表达式\"></a>合并条件表达式</h4><ul>\n<li>场景：有一系列的条件逻辑，都得到相同结果</li>\n<li>思路：合并成一个条件表达式，并将之提炼成一个独立函数</li>\n<li>动机：有时候这么做能把“做什么”的语句转换成“为什么”的含义，前提是这些检查并非彼此独立</li>\n<li>做法：注意确认条件语句都没有副作用，有些条件表达式甚至可以简化成三元表达式</li>\n</ul>\n<h4 id=\"合并重复的条件片段\"><a href=\"#合并重复的条件片段\" class=\"headerlink\" title=\"合并重复的条件片段\"></a>合并重复的条件片段</h4><ul>\n<li>场景：条件表达式的每个分支都有相同的一段代码</li>\n<li>思路：将代码提取到条件表达式之外</li>\n<li>动机：减少重复语句</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"移除控制标记\"><a href=\"#移除控制标记\" class=\"headerlink\" title=\"移除控制标记\"></a>移除控制标记</h4><ul>\n<li>场景：在一系列布尔表达式中，某变量具有控制标记的作用</li>\n<li>思路：用<code>break</code>或<code>return</code>替代</li>\n<li>动机：有时候为了可读性和可维护性，可以牺牲单一出口的做法</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"用“卫语句”替代嵌套条件表达式\"><a href=\"#用“卫语句”替代嵌套条件表达式\" class=\"headerlink\" title=\"用“卫语句”替代嵌套条件表达式\"></a>用“卫语句”替代嵌套条件表达式</h4><ul>\n<li>场景：嵌套的条件逻辑过多，难以看清正常执行路径</li>\n<li>思路：用“卫语句”枚举出所有特殊情况，减少嵌套层数</li>\n<li>动机：当特殊case多于正常case时，提前处理每种特殊情况，可以有效减少嵌套层数</li>\n<li>做法：注意“卫语句”要么就从函数返回，要么就抛出异常，反正要跳出当前执行流</li>\n</ul>\n<h4 id=\"用多态取代条件表达式\"><a href=\"#用多态取代条件表达式\" class=\"headerlink\" title=\"用多态取代条件表达式\"></a>用多态取代条件表达式</h4><ul>\n<li>场景：你手上有个条件表达式，根据对象类型不同选择不同行为</li>\n<li>思路：将条件表达式的每个分支放在子类的重载函数中，然后将父类的原始函数声明为抽象函数</li>\n<li>动机：面向对象程序中，更少出现switch语句也是得益于多态这个工具</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"引入Null对象\"><a href=\"#引入Null对象\" class=\"headerlink\" title=\"引入Null对象\"></a>引入Null对象</h4><ul>\n<li>场景：在很多地方检查对象是否为<code>null</code></li>\n<li>思路：用一个特殊的Null对象取代<code>null</code>值</li>\n<li>动机：空对象对外就像是特殊的空的对象（Go笑而不语），而不是什么都没有，有利于保证函数行为的一致性</li>\n<li>做法：空对象一定是单例的</li>\n</ul>\n<h4 id=\"引入断言\"><a href=\"#引入断言\" class=\"headerlink\" title=\"引入断言\"></a>引入断言</h4><ul>\n<li>场景：某段代码需要对程序状态做出假设</li>\n<li>思路：用断言表示这种假设</li>\n<li>动机：有些时候，只有某个条件为真，代码才能正常运行，这个时候用断言明确这些假设。</li>\n<li>做法：注意不要滥用断言，只用来检查“一定为真”的条件，而不要去检查“应该为真”的条件</li>\n</ul>\n<h3 id=\"优化函数调用\"><a href=\"#优化函数调用\" class=\"headerlink\" title=\"优化函数调用\"></a>优化函数调用</h3><p>我们在前面提到了函数体本身的优化，这一章我们主要介绍函数调用的优化</p>\n<h4 id=\"函数改名\"><a href=\"#函数改名\" class=\"headerlink\" title=\"函数改名\"></a>函数改名</h4><ul>\n<li>场景：函数名没能说明函数用途</li>\n<li>思路：修改函数名</li>\n<li>动机：优化函数名，让它达到注释的效果，重新安排参数顺序，提高代码清晰度</li>\n<li>做法：对于旧函数，可以标注<code>deprecated</code>，说明其不建议使用</li>\n</ul>\n<h4 id=\"添加参数\"><a href=\"#添加参数\" class=\"headerlink\" title=\"添加参数\"></a>添加参数</h4><ul>\n<li>场景：函数需要从调用端得到更多信息</li>\n<li>思路：为函数添加新的对象参数</li>\n<li>动机：如果有其他重构的方法，只要可能，基本都比添加参数要好</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"移除参数\"><a href=\"#移除参数\" class=\"headerlink\" title=\"移除参数\"></a>移除参数</h4><ul>\n<li>场景：函数本体不需要某个参数</li>\n<li>思路：去除该参数</li>\n<li>动机：暂时不要考虑未来是否能用到</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"分离查询和修改\"><a href=\"#分离查询和修改\" class=\"headerlink\" title=\"分离查询和修改\"></a>分离查询和修改</h4><ul>\n<li>场景：一个函数即返回对象状态，同时又有副作用</li>\n<li>思路：将查询和修改分离出两个参数</li>\n<li>动机：任何有返回值的函数，最好都不要有看得见的副作用</li>\n<li>做法：先分离查询，再分离修改</li>\n</ul>\n<h4 id=\"让函数携带参数\"><a href=\"#让函数携带参数\" class=\"headerlink\" title=\"让函数携带参数\"></a>让函数携带参数</h4><ul>\n<li>场景：若干函数做了类似的操作，仅仅因为某些值表现不同</li>\n<li>思路：用一个单一函数表示，用参数来表示那些不同的值</li>\n<li>动机：减少重复代码</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"用明确函数取代参数\"><a href=\"#用明确函数取代参数\" class=\"headerlink\" title=\"用明确函数取代参数\"></a>用明确函数取代参数</h4><ul>\n<li>场景：有一个函数，其中<strong>完全取决于参数</strong>表现出不同行为</li>\n<li>思路：针对参数的不同值，建立一个独立函数</li>\n<li>动机：函数内大多以条件表达式检查这些参数值，并作出不同行为；有时也可以用多态实现</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"保持对象完整\"><a href=\"#保持对象完整\" class=\"headerlink\" title=\"保持对象完整\"></a>保持对象完整</h4><ul>\n<li>场景：你从对象中取了若干字段，将它们作为函数调用的一些参数</li>\n<li>思路：改为传递整个对象</li>\n<li>动机：如果传递整个对象会让你的依赖结构恶化，那么就不该用这个方法</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"用函数取代参数\"><a href=\"#用函数取代参数\" class=\"headerlink\" title=\"用函数取代参数\"></a>用函数取代参数</h4><ul>\n<li>场景：对象调用某个函数，用其结果做参数传递给另一个函数，然而接受改参数的函数本身也能调用到前一个函数</li>\n<li>思路：让参数接受函数直接去调用前一个函数，然后去除该参数</li>\n<li>动机：<strong>如果函数有其他途径获得参数值，就不该通过参数获得</strong></li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"引入参数对象\"><a href=\"#引入参数对象\" class=\"headerlink\" title=\"引入参数对象\"></a>引入参数对象</h4><ul>\n<li>场景：某些函数入参总是在一起出现</li>\n<li>思路：直接用一个对象取代这些参数</li>\n<li>动机：略</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"移除设值函数\"><a href=\"#移除设值函数\" class=\"headerlink\" title=\"移除设值函数\"></a>移除设值函数</h4><ul>\n<li>场景：类的某个字段在创建时设值，然后就不再改变</li>\n<li>思路：去掉字段的设值函数</li>\n<li>动机：提供设值字段就表示可能被改变</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"隐藏函数\"><a href=\"#隐藏函数\" class=\"headerlink\" title=\"隐藏函数\"></a>隐藏函数</h4><ul>\n<li>场景：有函数从未被其他类用到</li>\n<li>思路：将函数改为private</li>\n<li>动机：减少无谓的API暴露</li>\n<li>做法：可以利用lint工具帮忙检查</li>\n</ul>\n<h4 id=\"用工厂函数替代构造函数\"><a href=\"#用工厂函数替代构造函数\" class=\"headerlink\" title=\"用工厂函数替代构造函数\"></a>用工厂函数替代构造函数</h4><ul>\n<li>场景：希望创建对象时不仅做简单的构建动作</li>\n<li>思路：使用工厂函数</li>\n<li>动机：这个方法也可以用来通过类型码创建类对象</li>\n<li>做法：结合<code>Class.forName()</code>可以不用写switch语句</li>\n</ul>\n<h4 id=\"封装向下转型\"><a href=\"#封装向下转型\" class=\"headerlink\" title=\"封装向下转型\"></a>封装向下转型</h4><ul>\n<li>场景：函数返回的对象需要由调用者向下转型</li>\n<li>思路：将向下转型放在函数中进行</li>\n<li>动机：略</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"用异常取代错误码\"><a href=\"#用异常取代错误码\" class=\"headerlink\" title=\"用异常取代错误码\"></a>用异常取代错误码</h4><ul>\n<li>场景：函数返回特性的代码表示错误情况</li>\n<li>思路：改用异常</li>\n<li>动机：异常能够区分出正常情况和异常处理</li>\n<li>做法：需要决定抛出受控异常或者非受控异常</li>\n</ul>\n<h4 id=\"用测试取代异常\"><a href=\"#用测试取代异常\" class=\"headerlink\" title=\"用测试取代异常\"></a>用测试取代异常</h4><ul>\n<li>场景：对于一个调用者可以预先检查的条件，抛出了异常</li>\n<li>思路：修改调用者，改在调用前进行检查</li>\n<li>动机：能够提前检查的情况，就不算是异常</li>\n<li>做法：略</li>\n</ul>\n<h3 id=\"处理继承关系\"><a href=\"#处理继承关系\" class=\"headerlink\" title=\"处理继承关系\"></a>处理继承关系</h3><h4 id=\"字段上移\"><a href=\"#字段上移\" class=\"headerlink\" title=\"字段上移\"></a>字段上移</h4><ul>\n<li>场景：两个子类有相同字段</li>\n<li>思路：将字段移至超类</li>\n<li>动机：归纳重复特性</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"函数上移\"><a href=\"#函数上移\" class=\"headerlink\" title=\"函数上移\"></a>函数上移</h4><ul>\n<li>场景：两个子类有相同作用的函数</li>\n<li>思路：将函数移至超类</li>\n<li>动机：归纳重复特性。子类的函数覆写超类函数，但是做相同工作时，也要使用函数上移</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"构造函数上移\"><a href=\"#构造函数上移\" class=\"headerlink\" title=\"构造函数上移\"></a>构造函数上移</h4><ul>\n<li>场景：子类的构造函数几乎完全一致</li>\n<li>思路：在超类中新建构造函数，再在子类构造函数中调用它</li>\n<li>动机：如果重构过程过于复杂，可以考虑使用“用工厂函数替代构造函数”</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"函数下移\"><a href=\"#函数下移\" class=\"headerlink\" title=\"函数下移\"></a>函数下移</h4><ul>\n<li>场景：超类的某函数只和部分子类有关</li>\n<li>思路：将函数移到相关的子类中去</li>\n<li>动机：和“函数上移”恰恰相反</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"字段下移\"><a href=\"#字段下移\" class=\"headerlink\" title=\"字段下移\"></a>字段下移</h4><ul>\n<li>场景：超类的字段只被部分子类用到</li>\n<li>思路：将字段移到真正需要的子类中去</li>\n<li>动机：和“字段上移”恰恰相反</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"提炼子类\"><a href=\"#提炼子类\" class=\"headerlink\" title=\"提炼子类\"></a>提炼子类</h4><ul>\n<li>场景：类的特性只被部分实例对象用到</li>\n<li>思路：新建一个子类，将未被用到的特性转移到子类中</li>\n<li>动机：上述的差异行为有时也可能通过类型码区分，这个时候可以由“以子类取代类型码”或“以状态&#x2F;策略取代类型码”方法来重构</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"提炼超类\"><a href=\"#提炼超类\" class=\"headerlink\" title=\"提炼超类\"></a>提炼超类</h4><ul>\n<li>场景：两个类有相似特性</li>\n<li>思路：为两个类建立超类，将相似特性移到超类中</li>\n<li>动机：两个类用相同方式做类似事情往往意味着重复代码</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"提炼接口\"><a href=\"#提炼接口\" class=\"headerlink\" title=\"提炼接口\"></a>提炼接口</h4><ul>\n<li>场景：若干客户端使用类中的同一子集，或者两个类有部分相同点</li>\n<li>思路：将相同的子集提炼到独立接口中</li>\n<li>动机：接口有助于系统的<strong>责任划分</strong>和<strong>能力声明</strong>（鸭子类型）。在单继承的语言中，接口扮演了组合功能代码的角色。尤其某个类在不同环境表现不同时，使用接口是个好主意</li>\n<li>做法：接口命名通常由<code>-able</code>结尾</li>\n</ul>\n<h4 id=\"折叠继承关系\"><a href=\"#折叠继承关系\" class=\"headerlink\" title=\"折叠继承关系\"></a>折叠继承关系</h4><ul>\n<li>场景：超类和子类几乎无法区分</li>\n<li>思路：将它们合为一体</li>\n<li>动机：往往在过度设计时出现</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"构造模板函数\"><a href=\"#构造模板函数\" class=\"headerlink\" title=\"构造模板函数\"></a>构造模板函数</h4><ul>\n<li>场景：有一些子类，细节上有所区别，但是整个流程上操作类似</li>\n<li>思路：提炼出操作流程，上移至超类，将具体细节操作放在独立函数中，让它们有相同的签名，然后实现超类的抽象函数</li>\n<li>动机：这样抽离出来的流程函数也叫模板函数，模板上<em>插槽</em>接口固定，然而提供插槽的模板函数是一致的</li>\n<li>做法：后续新增的类，只需实现超类抽象函数就可以完成扩展</li>\n</ul>\n<h4 id=\"用委托取代继承\"><a href=\"#用委托取代继承\" class=\"headerlink\" title=\"用委托取代继承\"></a>用委托取代继承</h4><ul>\n<li>场景：子类只使用超类接口的一部分，或者直接不需要继承来的数据</li>\n<li>思路：在子类中新建字段保存超类，然后调整子类函数，让它委托超类，然后去掉两者的继承关系</li>\n<li>动机：略</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"用继承取代委托\"><a href=\"#用继承取代委托\" class=\"headerlink\" title=\"用继承取代委托\"></a>用继承取代委托</h4><ul>\n<li>场景：两个类的委托关系过多，且委托函数都很简单</li>\n<li>思路：让委托类继承受托类</li>\n<li>动机：如果你没有使用<strong>所有</strong>受托类函数，那么就不要用这个重构方法，继续保持委托关系，使用其他重构方法；另外受托对象可变时，也要注意</li>\n<li>做法：略</li>\n</ul>\n<h2 id=\"大型重构\"><a href=\"#大型重构\" class=\"headerlink\" title=\"大型重构\"></a>大型重构</h2><blockquote>\n<p>Kent Beck和作者所写</p>\n</blockquote>\n<p>本章介绍了4个大型重构的思路，也是大型程序容易遇到的4个问题</p>\n<ul>\n<li>梳理和分析继承体系：往往因为某个继承体系承担的两个甚至更多责任，有一个特征是，某一层级的所有类，子类都以相同形容词开始。可以通过委托的形式，对继承体系做正交化</li>\n<li>过程化设计转化为对象设计：往往出现在过程化风格传统语言中。可以将数据记录变为对象，拆分大块行为为小块，然后将行为转移到相关对象中。</li>\n<li>分离领域和UI：出现在有GUI的场景中。传统的MVC设计模式就是将领域逻辑分离出来，用接口的方式和UI部分代码对接</li>\n<li>提炼继承体系：有的类做了太多工作，里面经常有较多的条件表达式。对于这种，可以借助面向对象中的子类和多态或者策略模式实现</li>\n</ul>\n<h2 id=\"重构与现实\"><a href=\"#重构与现实\" class=\"headerlink\" title=\"重构与现实\"></a>重构与现实</h2><p>重构在某些角度和技术演进很像。技术的接纳过程类似一条钟形曲线。前段包括先行者和早期接受者，中部大量人群包括早期消费者和晚期消费者，最后则是行动迟缓者。不同人有不同的消费动机。先行者和早期接受者感兴趣的是<strong>新技术，“范式转移和突破性思想”的愿景</strong>；早期和晚期消费者则关心<strong>成熟度、成本、支持程度，以及这种新思想&#x2F;新产品是否被和他们相似的其他人成功使用</strong>。</p>\n<h2 id=\"尾声\"><a href=\"#尾声\" class=\"headerlink\" title=\"尾声\"></a>尾声</h2><ul>\n<li>重构工具能节省你的重构时间</li>\n<li>永远记住“两顶帽子”，重构时保持代码功能不变</li>\n</ul>\n",
            "tags": [
                "重构",
                "设计模式",
                "代码质量"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2019/12/02/clean-code/",
            "url": "http://shenlvmeng.github.com/blog/2019/12/02/clean-code/",
            "title": "《代码整洁之道》——有一个好的代码品味",
            "date_published": "2019-12-02T15:08:32.000Z",
            "content_html": "<blockquote>\n<p>The only valid measurement of code quality: WTFs&#x2F;minute</p>\n</blockquote>\n<p>在成为一个程序员的初期，实现功能还需磕磕绊绊的阶段，我们大抵没有精力操心代码风格的问题；而在能够搞定环境和API使用的时间段，大部分人又会沉湎于使用一门语言让想象实现的成就感，而没有发现暗藏在迭代后的危机。往往迭代了一段时间后，才发现之前埋下的巨坑已经让自己无从下手。这时一部分人醒悟过来，意识到一个优良的代码风格对于项目推进的长远意义。这也是《Clean Code》这本书的宗旨。它较之《程序员修炼之道》更为具体，较之《重构》更为宏观。对于工作一段时间后的程序员来说，是一个很好的提醒和反思归纳的建议。让代码work的方式是千万种，而让代码可持续，可扩展，长久work的方式也许需要前辈指引些方法。</p>\n<h2 id=\"观念\"><a href=\"#观念\" class=\"headerlink\" title=\"观念\"></a>观念</h2><blockquote>\n<p>Later equals never —— Leblanc Law</p>\n</blockquote>\n<p>糟糕的代码会让人难以下手，拖慢进度，若无人着手改善，混乱会持续增加，进而降低团队生产力，降低人效，然后搞砸整个项目。为什么不一开始就打好基础，写出整洁代码呢？</p>\n<p>下面是一些大师对“整洁代码”的界定</p>\n<ul>\n<li>“代码逻辑直截了当，缺陷难以隐藏；减少依赖关系，从而便于维护；性能调优，省得引人做出没规矩的优化，干出蠢事；整洁的代码只干一件事” —— Bjarne Stroustrup</li>\n<li>“代码简单直接，如同优美的散文；从不隐藏设计者的意图，充满干净利落的抽象和直截了当的控制语句” —— Grady Booch</li>\n<li>“可由作者外的人阅读和扩展，应该有单元测试和验收测试；只使用有意义的命名；提供尽量正交的使用方法（一种而非多种做一件事的方法）；尽量少的API；尽量少的依赖关系，且要明确定义和清晰提供；代码应从字面意义上表达其含义” —— Dave Thomas</li>\n<li>“整洁的代码总是看起来像某位特别在意的人写的，几乎没有改进的余地，所有的改进都会回到原点” —— Michael Feather</li>\n<li>“能通过所有测试；没有重复代码，表达力强大；体现系统中的全部设计理念；包括尽量少的实体，如类、方法、函数。” —— Ron Jeffries</li>\n<li>“整洁代码让每个例程都深合己意；漂亮代码让语言看起来像是专门为解决那个问题而存在” —— Ward Cunningham</li>\n</ul>\n<p>编写代码的难度，取决于读周边代码的难度，要想干得快，就先让代码易读。</p>\n<blockquote>\n<p>让营地比你来时更干净 —— 童子军军规</p>\n</blockquote>\n<h2 id=\"命名\"><a href=\"#命名\" class=\"headerlink\" title=\"命名\"></a>命名</h2><p>好的命名，可以让人一眼就明白代码的逻辑。看下面两段代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;<span class=\"type\">int</span>[]&gt; getThem() &#123;</span><br><span class=\"line\">  List&lt;<span class=\"type\">int</span>[]&gt; list1 = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;<span class=\"type\">int</span>[]&gt;();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span>[] x : theList)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x[<span class=\"number\">0</span>] == <span class=\"number\">4</span>)</span><br><span class=\"line\">      list1.add(x)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> list1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;Cell&gt; <span class=\"title function_\">getFlaggedCells</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  List&lt;Cell&gt; flaggedCells = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Cell&gt;();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (Cell cell : gameBoard)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cell.isFlagged)</span><br><span class=\"line\">      flaggedCells.add(cell);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> flaggedCells;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面是一些准则：</p>\n<ul>\n<li>名副其实，一旦发现更好的，就替换掉旧的。<strong>如果名称还需要注释补充，那就不算名副其实</strong></li>\n<li>避免误导，提防使用不同之处较小的名称，比如<code>UsernameListEmptyFilter</code>和<code>UsernameListNullFilter</code>，不要混用1和l，以及0和O</li>\n<li>做有意义的区分，少废话，反例是<code>a1</code>和<code>a2</code>，<code>nameString</code>和<code>name</code></li>\n<li>使用<strong>能读出来</strong>的名称，方便程序员的沟通</li>\n<li>使用<strong>可搜索</strong>的名称，仅在块作用域或短函数内使用单字母名称</li>\n<li>不把类型信息放在名称中</li>\n<li>减少不必要的前缀和后缀</li>\n<li>类名应该是名词，方法名应该是动词或动词短语</li>\n<li>别玩梗</li>\n<li>标准化语素，为每一个抽象概念选择一个统一的词</li>\n<li>别用有多重含义的词汇，这会增加使用者顾虑和理解成本</li>\n<li>只在没有明确定义的场景下使用语境（类，前缀……）</li>\n</ul>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><p>下面是一些准则：</p>\n<ul>\n<li><strong>短小，更短小</strong></li>\n<li><strong>只做一件事，只做一件事，只做一件事</strong>，重要的事情说三遍<ul>\n<li>还有一种方式可以帮助判断函数是不是只做了一件事：<strong>函数语句是否在一个抽象层级上</strong></li>\n<li>只做一件事的函数无法被继续合理拆分成多段</li>\n</ul>\n</li>\n<li>让代码拥有从上到下的自然的阅读顺序，尽量避免跳来跳去的阅读顺序</li>\n<li>为函数使用<strong>描述性</strong>的名称</li>\n<li>函数<strong>最多3个入参</strong>，最理想是没有参数，其次是1个，再其次是2个，要避免3个参数<ul>\n<li><strong>布尔类型的参数会让你的函数难以理解</strong></li>\n<li>使用二元参数时，最好保证前后顺序不敏感</li>\n<li>对于复杂的入参，可以用对象封装起来</li>\n</ul>\n</li>\n<li>函数要么只做副作用（<em>做什么事</em>），要么没有副作用（<em>回答什么事</em>），而且能从名称中一目了然地看到</li>\n<li>用异常代替错误码，错误处理也是一件事</li>\n<li><strong>别重复自己（Don’t repeat yourself, DRY）</strong>。重复是软件中一切邪恶的根源，软件开发领域的所有创新都在不断尝试从源代码中消灭重复</li>\n</ul>\n<p>函数是语言的动词，类是名词。大师级的程序员把系统当做故事来讲，而不是程序来写。他们使用特定编程语言提供的工具构建一种<strong>更丰富和更具表达力的语言</strong>。好的函数必须干净利落的组合在一起，形成清晰明确的语言，帮你<strong>讲好故事</strong>。这个过程不是一蹴而就的，你可以现象什么就写什么，然后一点点打磨它。</p>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><blockquote>\n<p>使用注释 &#x3D; 承认自己无法用代码表达清楚意图</p>\n</blockquote>\n<p>列举注释的准则前，必须摆正观念。<strong>注释是一种必须的恶，如果编程语言足够有表达力，或你长于用语言表达自己的意图，那么就不需要注释。注释的恰当用法是弥补我们用代码表达意图时遭遇的失败。</strong>注释存在的时间越久，具体所描述的事实就越远。原因很简单，程序员不可能坚持维护注释。</p>\n<p>的确，程序员应该让注释保持可维护而精准，但最好能直接写清楚代码，保证无须编写注释。<strong>真实只在一处：代码</strong>，只有代码能忠实告诉你它做的事。</p>\n<ul>\n<li><strong>注释无法挽救糟糕的代码</strong>，与其为糟糕代码补充大量注释，不如花时间写出整洁有表达力的代码</li>\n<li><strong>用代码代替注释</strong></li>\n<li>有些无法避免且合理存在的注释<ul>\n<li>法律信息</li>\n<li>对函数名的补充</li>\n<li>对稍微反常规意图的解释，避免误解</li>\n<li>糟糕的代码来自外部库或外部API</li>\n<li>敏感代码的警告</li>\n<li>TODO、FIXME</li>\n<li>Javadoc</li>\n</ul>\n</li>\n<li>下面则是一些很常见的糟糕注释，它们只是糟糕代码的借口<ul>\n<li>只有自己看得懂的注释</li>\n<li>对函数名的复述</li>\n<li>误导性注释</li>\n<li>日志型注释，如Milestone记录</li>\n<li>废话</li>\n<li>位置标记，如<code>====================</code></li>\n<li>代码署名</li>\n<li><em>大多数</em>注释掉的代码</li>\n<li>百科式的介绍</li>\n<li>私有代码的Javadoc</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a>格式</h2><p>格式即代码风格，可以利用lint这样的自动化工具完成，需要在团队内保持一致。</p>\n<h3 id=\"垂直格式\"><a href=\"#垂直格式\" class=\"headerlink\" title=\"垂直格式\"></a>垂直格式</h3><p>在从上到下的组织上，</p>\n<ul>\n<li>可以向报纸一样，先大纲，再粗线条概述，再给出细节，越往下细节越多</li>\n<li>用<strong>空行</strong>分隔概念</li>\n<li>靠近的代码行暗示了代码间的紧密关系</li>\n<li>应避免迫使读者在源文件和类之间跳来跳去<ul>\n<li>变量声明应尽量靠近使用位置</li>\n<li>循环中的控制变量总在循环语句中声明</li>\n<li>类成员在类顶部声明</li>\n<li>如果某个函数调用了另一个，就应该把它们放一起</li>\n<li>概念相关的代码应该放在一起，如<code>getHour</code>和<code>getMinute</code></li>\n<li>如果可以，最好把被调用的函数放在执行调用的函数下面</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"横向格式\"><a href=\"#横向格式\" class=\"headerlink\" title=\"横向格式\"></a>横向格式</h3><ul>\n<li>水平字符的上限，100或120</li>\n<li>使用<strong>空格</strong>分隔概念</li>\n<li><strong>不需要水平对齐</strong>，以为从左到右的阅读顺序优先于从上到下</li>\n<li>学会用<strong>缩进</strong>表现层级</li>\n</ul>\n<h2 id=\"对象和数据结构\"><a href=\"#对象和数据结构\" class=\"headerlink\" title=\"对象和数据结构\"></a>对象和数据结构</h2><ul>\n<li><strong>对象</strong>把数据隐藏于抽象的后面，暴露操作数据的函数，<strong>数据结构</strong>暴露数据，不提供有意义的函数。</li>\n<li>过程式代码难以添加新的数据结构，因为必须修改所有函数；面向对象代码难以添加新函数，因为必须修改所有类</li>\n<li>得墨忒尔律：类C的方法f只应该调用以下对象的方法：<strong>C、f创建的对象、作为参数传给f的对象、C的成员所持有的对象</strong></li>\n<li><strong>数据结构</strong>只简单地拥有公有变量，没有函数；而<strong>对象</strong>则只拥有私有变量和函数。一半是对象一半是数据结构的混淆会增加添加新函数和数据结构的难度</li>\n<li>DTO（Data Transfer Objects，数据传输对象）就是只有公有变量，没有函数的类，Active Record就是DTO的一种</li>\n</ul>\n<h2 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h2><p>错误处理很重要，但要是它搞乱了代码逻辑，那就是错误的用法。</p>\n<ul>\n<li>返回异常而不是错误码</li>\n<li>try-catch-finally语句块就像事务，可以帮你定义用户应该期待些什么</li>\n<li>在Java中，可控异常违反开闭原则带来的成本要高于收益</li>\n<li>打包第三方API，一方面降低了依赖的覆盖面，另一方面也有助于模拟第三方调用</li>\n<li>可以把抛出错误封装成特定的函数</li>\n<li>别返回和传递null值</li>\n</ul>\n<h2 id=\"边界\"><a href=\"#边界\" class=\"headerlink\" title=\"边界\"></a>边界</h2><p>边界即我们代码和第三方代码的连接处。</p>\n<ul>\n<li>通过编写测试来概览和理解第三方代码的形式叫做<strong>学习性测试（learning tests）</strong>。它可以帮助我们快速试错和反馈，从而对第三方API快速上手。</li>\n<li>在第三方代码尚未就绪时，<strong>编写我们想要的接口</strong>，可以使我们能保持代码在自己控制中，并在未来通过编写adapter的形式无痛迁移</li>\n<li>应尽量避免过多依赖第三方的特定信息，更多依靠你能控制的东西，好过依靠你控制不了的东西，免得日后受其控制</li>\n</ul>\n<h2 id=\"单元测试\"><a href=\"#单元测试\" class=\"headerlink\" title=\"单元测试\"></a>单元测试</h2><ul>\n<li>TDD（Test-Driven Development）三定律<ul>\n<li>在编写不能通过的单元测试前，不编写生产代码</li>\n<li>只编写刚好无法通过的单元测试，不能编译也算</li>\n<li>只编写刚好足已通过失败测试的生产代码</li>\n</ul>\n</li>\n<li><strong>测试代码和生产代码一样重要</strong>。正是单元测试让你的代码可扩展、可维护、可复用</li>\n<li>整洁的测试代码一样要求<strong>可读性</strong>。大多数测试代码可以总结为构造-操作-检验（Build-Operate-Check）模式。第一个环节构造测试数据，第二个环节操作数据，第三个环节验证是否得到期望的结果</li>\n<li>每个测试中的断言数量应该尽量少，且只测试一个概念</li>\n<li>FIRST原则<ul>\n<li>Fast，测试应该能够快速运行</li>\n<li>Independent，测试间应该相互独立</li>\n<li>Repeatable，测试应该在任何环境下可重复通过</li>\n<li>Self-Validating，测试应该有布尔值输出</li>\n<li>Timely，测试应及时编写</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h2><ul>\n<li>类应该由一组成员开始，从静态到普通，从共有到私有。且很少会有公有成员。</li>\n<li>类应该短小，<strong>类的名称应该能描述其权责</strong>。类名无法精确明明时，类大概就太长了。类名越含糊，类越有可能拥有过多权责。类名应该控制在25个字母内，且不应该包含连词。</li>\n<li>单一权责原则（Single Responsibility Principle，SRP）认为，类和模块应有且仅有<strong>一条加以修改的原因</strong>。这个原则可以帮助创造更好的抽象。它也是OO设计中最重要的概念之一。</li>\n<li>内聚：类应该只有少量实体变量，且所有方法都应该操作其中一些。当类的每个变量都被每个方法使用时，我们认为该类具有最大的内聚性。当发现类逐渐丧失内聚性时，尽早拆分它！让它变成多个短小的类。这个拆分的过程也是权责的拆分过程。</li>\n<li>通过基类和子类，可以在不修改类的同时，保持类对新功能的开放。在理想系统中，我们通过扩展系统而非修改现有代码来添加新特性。可以通过抽象类和接口隔离细节修改带来的影响。</li>\n<li>降低类之间的连接耦合，可以采用依赖倒置原则（Dependency Inversion Principle，DIP），让类依赖于抽象（接口）而不是具体细节（自行构造类）</li>\n</ul>\n<h2 id=\"系统\"><a href=\"#系统\" class=\"headerlink\" title=\"系统\"></a>系统</h2><p><em>这一章的Java概念较多</em></p>\n<ul>\n<li>分开系统的构造和使用</li>\n<li><strong>依赖注入</strong>是控制反转的一种思路，它将第二权责从对象中拿出来，转移到专门的对象中去，从而遵循<strong>单一权责原则</strong></li>\n<li>我们应该专注于今天的用户故事，并且<strong>持续适当切分</strong>我们的关注面。书中举了Java AOP、AspectJ框架的例子</li>\n<li>实现时，使用<em>大致可工作的最简单方案</em>。只要软件构架有效切分了关注面，就比较好做根本性改动</li>\n</ul>\n<h2 id=\"迭代\"><a href=\"#迭代\" class=\"headerlink\" title=\"迭代\"></a>迭代</h2><p>Kent Beck关于测试的4个原则：</p>\n<ul>\n<li>运行所有测试，全面测试并持续通过所有测试的系统，就是可测试的系统。测试也能减少重构时可能破坏代码的顾虑。</li>\n<li>不可重复，使用模板生成或继承等高级概念</li>\n<li>表达程序员的意图。代码应当清晰表达作者的意图。使用好名称、保持类和函数的短小，以及之前章节提到的各种方法</li>\n<li>尽可能减少类和方法的数目，避免前两条规范的矫枉过正</li>\n</ul>\n<h2 id=\"并发编程\"><a href=\"#并发编程\" class=\"headerlink\" title=\"并发编程\"></a>并发编程</h2><p>并发是一种解耦策略，帮助我们分解开<strong>做什么（目的）</strong>和<strong>何时（时机）</strong>。</p>\n<ul>\n<li>并发<strong>有时</strong>能改善性能，会在编写额外代码上带来额外开销</li>\n<li>正确的并发是复杂的</li>\n<li>并发会带来系统结构的变化</li>\n</ul>\n<p>有些防御并发代码问题的原则：</p>\n<ul>\n<li>单一权责：分离并发代码和其他代码</li>\n<li>限制对可能共享的数据的访问</li>\n<li>线程应尽可能独立</li>\n</ul>\n<p>并发执行模式：</p>\n<ul>\n<li>生产者-消费者模式：数据通过队列传递，队列本身是一种限定资源</li>\n<li>读者-作者模式</li>\n<li>宴席哲学家问题</li>\n</ul>\n<p>还有一些需要注意的事情：</p>\n<ul>\n<li>警惕同步方法间的依赖</li>\n<li>尽可能减小sychronized区域</li>\n<li>尽早考虑程序关闭问题</li>\n<li>测试线程代码</li>\n</ul>\n<h2 id=\"3个实例\"><a href=\"#3个实例\" class=\"headerlink\" title=\"3个实例\"></a>3个实例</h2><p>书中以三个实例的重构过程向我们表现了一些将之前思路应用于优化代码的方式。</p>\n<h3 id=\"命令行参数解析：args\"><a href=\"#命令行参数解析：args\" class=\"headerlink\" title=\"命令行参数解析：args\"></a>命令行参数解析：args</h3><blockquote>\n<p>编程是一种技术甚于科学的东西，要编写整洁代码，必须先写肮脏代码，然后再<strong>清理它</strong></p>\n</blockquote>\n<p>在你的初稿，当代码糟糕透顶时甚至是前几稿中，很可能还是会存在烂摊子：成员多得吓人，奇怪命名的魔法字符串，一大堆的try-catch-finally代码。程序员们不都是蠢人，这堆糟糕透顶的代码其实是从最初看起来很合理但是<strong>扩展性差</strong>的代码一步步演化来的。</p>\n<p>需要使用一些总结和抽象，来简明地表达你的目的。另外，在重构前，“我”（其实是作者）要不厌其烦地强调TDD的必要性，它能保证你重构的每一步，系统都可以工作。在重构过程中，放进拿出是常见的事，小步幅、保持测试通过，你可能会不断移动各种东西。</p>\n<p>优秀的代码设计，大都关乎<strong>分隔</strong>——创建合适的空间防止不同种类的代码。对关注面的分隔让代码更易于理解和维护（减少理解所需要的大脑缓存）</p>\n<h3 id=\"JUnit\"><a href=\"#JUnit\" class=\"headerlink\" title=\"JUnit\"></a>JUnit</h3><ul>\n<li>不必要的编码前缀（<code>f_</code>）</li>\n<li>未封装的条件判断</li>\n<li>建议使用肯定式代替否定式判断</li>\n<li>奇怪的不直观的函数名</li>\n<li>易造成理解困难的变量名</li>\n<li>拆分违反SRP原则的函数</li>\n<li>避免隐式时序耦合的函数，用hardcode的形式显示表现时序耦合</li>\n</ul>\n<h3 id=\"SerialDate重构\"><a href=\"#SerialDate重构\" class=\"headerlink\" title=\"SerialDate重构\"></a>SerialDate重构</h3><p>再强调一遍，<strong>重构前要有一个完整的验证可行性的测试</strong>。然后开始重构：</p>\n<ul>\n<li>没有描述力的类名和术语名</li>\n<li>使用枚举代替常量类</li>\n<li>抽象类中不应知道实现细节</li>\n<li>基类不宜知道子类的情况</li>\n<li>多余的注释</li>\n<li>变量声明应该放在尽量靠近使用的地方</li>\n<li>如果有专业术语，就不要自己命名了</li>\n<li>不要写无用的模板代码</li>\n<li>如果函数对成员进行操作，它就不应该是静态的</li>\n<li>用<strong>解释临时变量</strong>的方式，让大段的代码更为简化和有表达力</li>\n<li>消除魔术数</li>\n</ul>\n<h2 id=\"味道和启发\"><a href=\"#味道和启发\" class=\"headerlink\" title=\"味道和启发\"></a>味道和启发</h2><p>作者在这里对《重构：既有代码设计的改善》里提到的味道做了自己的一些扩充，也可以作为对上面章节的回顾。</p>\n<p><em>“味道”，即那些看起来不大对劲的代码</em></p>\n<h3 id=\"注释-1\"><a href=\"#注释-1\" class=\"headerlink\" title=\"注释\"></a>注释</h3><ul>\n<li>不恰当的信息，如修改记录</li>\n<li>过时的注释</li>\n<li>多余的废话</li>\n<li>错误的有误导性的注释</li>\n<li>注释掉的代码</li>\n</ul>\n<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><ul>\n<li>多步才能完成的构建</li>\n<li>多步才能完成的测试</li>\n</ul>\n<h3 id=\"函数-1\"><a href=\"#函数-1\" class=\"headerlink\" title=\"函数\"></a>函数</h3><ul>\n<li>过多的入参</li>\n<li>布尔类型参数</li>\n<li>从未被调用的函数</li>\n<li>用于返回的参数</li>\n</ul>\n<h3 id=\"一般性问题\"><a href=\"#一般性问题\" class=\"headerlink\" title=\"一般性问题\"></a>一般性问题</h3><ul>\n<li>源文件中有多种语言</li>\n<li>明显违背字面意义的直觉</li>\n<li>不考虑边界情况</li>\n<li>忽视安全问题</li>\n<li><strong>重复</strong>，这也是最常见的问题。每次看到重复代码都代表遗漏了抽象。有一些常见的设计模式可以帮助你。</li>\n<li>代码的抽象层级有问题，或混杂。抽象类用来容纳高层级概念，子类用来容纳低层级概念。不同层级概念放在不同容器中。</li>\n<li>基类依赖于子类。通常来说，基类对子类应该一无所知</li>\n<li>信息过多，违背SRP</li>\n<li>从未使用的代码</li>\n<li>不恰当的垂直分隔</li>\n<li>语素前后不一致</li>\n<li>基于巧合、预设假设的耦合。异或是两个没有直接目的之间的模块的耦合。</li>\n<li><strong>特性依恋</strong>，类的方法只应对自身的成员和方法感兴趣，不应关注其他类的成员和方法</li>\n<li>使用boolean或枚举参数让一个函数表现多态。使用多个函数通常由于向单个函数传递代码来选择函数行为</li>\n<li>晦涩的意图，如魔术数、魔术字符串、过度简写的表达式</li>\n<li>位置错误的权责</li>\n<li>不恰当的静态方法，如完全不需要多态的函数</li>\n<li>使用自解释的变量名</li>\n<li>使用自解释的函数名</li>\n<li>理解算法</li>\n<li>把逻辑依赖（脑海中的限制&#x2F;已知条件）改为物理依赖</li>\n<li>使用if&#x2F;else、switch前想想有没有多态的实现方法</li>\n<li>遵循团队lint规则</li>\n<li>足够准确</li>\n<li>未封装的条件判断</li>\n<li>未封装的边界条件检测</li>\n<li>避免否定性条件</li>\n<li><strong>函数应该只做一件事</strong></li>\n<li><strong>函数应该只在一个抽象层级上</strong></li>\n<li>隐蔽的时序性耦合</li>\n<li>别随意，先好好思考再下手</li>\n<li>应该在较高层级放置可配置数据</li>\n<li>避免传递浏览，即遵守德墨忒尔律</li>\n</ul>\n<h3 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h3><ul>\n<li>使用通配符避免过长的导入清单</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">package</span>.*</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>不要继承<em>常量</em>，使用静态导入</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> EmployeeConstants.*</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在可以的情况下，用枚举代替常量</li>\n</ul>\n<h3 id=\"名称\"><a href=\"#名称\" class=\"headerlink\" title=\"名称\"></a>名称</h3><ul>\n<li>使用描述性名称</li>\n<li>名称应该与抽象层级相符</li>\n<li>使用标准化语素</li>\n<li>使用无歧义的名称</li>\n<li>在较大作用范围使用较长名称，较小作用范围<em>可以</em>使用较短名称</li>\n<li>名称应该明确说明有副作用存在</li>\n</ul>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><ul>\n<li>要有足够的测试</li>\n<li>使用覆盖率工具</li>\n<li>别放过小测试</li>\n<li>被忽略的测试是对不确定事物的疑问</li>\n<li>测试边界条件</li>\n<li>测试失败的模式（pattern）会有启发性</li>\n<li>测试覆盖率的模式会有启发性</li>\n<li>测试应该快速</li>\n</ul>\n<h2 id=\"并发编程示例\"><a href=\"#并发编程示例\" class=\"headerlink\" title=\"并发编程示例\"></a>并发编程示例</h2><h3 id=\"客户端-x2F-服务端\"><a href=\"#客户端-x2F-服务端\" class=\"headerlink\" title=\"客户端&#x2F;服务端\"></a>客户端&#x2F;服务端</h3><ul>\n<li>如果吞吐量与I&#x2F;O有关，则并发编程可以提升运行效率</li>\n<li>保持并发系统整洁，把线程管理隔离到一个位置</li>\n</ul>\n<h3 id=\"可能的执行路径\"><a href=\"#可能的执行路径\" class=\"headerlink\" title=\"可能的执行路径\"></a>可能的执行路径</h3><p>深入到字节码和汇编语句的执行上，有些并非线程安全的操作中，不同的执行路径会带来不同结果。</p>\n<h3 id=\"了解类库\"><a href=\"#了解类库\" class=\"headerlink\" title=\"了解类库\"></a>了解类库</h3><ul>\n<li>Executor框架</li>\n<li>非锁定方案：AtomicBoolean，AtomicInteger和AtomicReference</li>\n<li>数据库连接、java.util中的容器、Servlet天生不是线程安全的</li>\n</ul>\n<h3 id=\"提升吞吐量\"><a href=\"#提升吞吐量\" class=\"headerlink\" title=\"提升吞吐量\"></a>提升吞吐量</h3><ul>\n<li>synchronized代码块最好能限制在小范围内</li>\n</ul>\n<h3 id=\"死锁\"><a href=\"#死锁\" class=\"headerlink\" title=\"死锁\"></a>死锁</h3><p>死锁需要满足4个条件：</p>\n<ul>\n<li><strong>互斥</strong>，即资源数量有限，或无法在同一时间为多个线程公用</li>\n<li><strong>上锁及等待</strong>，从线程获取资源到完成工作前，不会释放这个资源</li>\n<li><strong>无抢先机制</strong>，线程无法从其他线程处夺取资源</li>\n<li><strong>循环等待</strong></li>\n</ul>\n<p>相反地，有4种避免死锁的方式：</p>\n<ul>\n<li><strong>不互斥</strong>，使用允许同时使用的资源，或增加资源数目</li>\n<li><strong>不上锁及等待</strong>，如果有等待情况就释放所有资源从新来过</li>\n<li><strong>满足抢先机制</strong></li>\n<li><strong>不做循环等待</strong></li>\n</ul>\n<h3 id=\"测试多线程代码\"><a href=\"#测试多线程代码\" class=\"headerlink\" title=\"测试多线程代码\"></a>测试多线程代码</h3><ul>\n<li>复现问题可能很难，可以借助工具（如ConTest）帮助</li>\n</ul>\n<p><em>–END–</em></p>\n",
            "tags": [
                "编程",
                "重构",
                "代码",
                "代码风格"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2019/05/28/the-pragmatic-programmer/",
            "url": "http://shenlvmeng.github.com/blog/2019/05/28/the-pragmatic-programmer/",
            "title": "《程序员修炼之道》 —— 从小工到专家",
            "date_published": "2019-05-28T15:55:53.000Z",
            "content_html": "<p>《程序员修炼之道》这个书名实际上不如原版《The Pragmatic Programmer： From Journeyman to Master》来得更清晰明了。此书第一版写于1999年，我看的是11年的版本，但还是透流露着不少世纪初的观念和视野。除开一部分观点认识的过时，书中绝大多数观点都四溢着国外互联网行业的工作风格和流程，和国内凶猛生长、一把梭就是干的风格各有不同，甚至我感觉国内IT，尤其是互联网企业里的工作流更加讲求实效。尽管和读之前的预期不大一样，里面许多经验还是很有借鉴意义，比如正交性、不要依赖巧合等等。</p>\n<p>书中内容在项目管理、编程哲学、以及编程过程的各个方面都有涉及，在这些方面上更加深入的探讨，书的最后也推荐了继续阅读的材料。下面就各章节的关键观点加以整理。</p>\n<h2 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h2><p>关于本书的读法：</p>\n<ul>\n<li>能不能让正确原则指导正确的行动本身，其实就是区分是否是高手的一个显著标志</li>\n<li>要能内化书中提到的各个小提示，不实践的话，是不会有太大收获的</li>\n<li><strong>思考，你的工作</strong>，多思考</li>\n</ul>\n<h2 id=\"实效哲学\"><a href=\"#实效哲学\" class=\"headerlink\" title=\"实效哲学\"></a>实效哲学</h2><ul>\n<li><strong>对你的源码负责</strong></li>\n<li><strong>不要容忍破窗</strong>，它们会增大你软件的熵（这个也是要结合实际情况看的）</li>\n<li><strong>记住大图景</strong>，注意方向是否有误，不要光低头做事</li>\n<li><strong>知道在何时打住</strong>，你不可能做到完美</li>\n<li><strong>定期为你的知识资产投资</strong>，就像经济投资一样<ul>\n<li>定期投资</li>\n<li>多元化</li>\n<li>管理风险，不要把所有技术放在一个篮子里</li>\n<li>低买高卖，能看清形势</li>\n</ul>\n</li>\n<li>为此，你需要<ul>\n<li><strong>每年至少学习一种新语言</strong></li>\n<li><strong>每季度阅读一本技术书籍</strong></li>\n<li>也要阅读非技术书籍</li>\n</ul>\n</li>\n<li><strong>批判地思考你读到和听到的</strong></li>\n<li><strong>如何表达自己很重要</strong>，这会增加你的影响力<ul>\n<li>你想让谁知道</li>\n<li>你想让他们知道什么</li>\n<li>他们是否感兴趣</li>\n<li>他们需要知道细节么</li>\n<li>如何促使他们与你交流</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"实效途径\"><a href=\"#实效途径\" class=\"headerlink\" title=\"实效途径\"></a>实效途径</h2><ul>\n<li><strong>DRY，不要重复自己</strong><ul>\n<li>强加的重复 &#x3D;&gt; 使用自动生成，减少是信息冗知识</li>\n<li>无意的重复 &#x3D;&gt; 优良的设计</li>\n<li>无耐心的重复 &#x3D;&gt; 考虑长远</li>\n<li>开发者间的重复 &#x3D;&gt; 加强组内交流，制定代码规范，<strong>制造更容易复用的环境</strong></li>\n</ul>\n</li>\n<li><strong>减少无关事物的影响</strong>，非正交 &#x3D;&gt; 次级效应 &#x3D;&gt; 补偿行为 &#x3D;&gt; 经验依赖<ul>\n<li>好处：提高生产率（促进复用）、降低风险（风险隔离，易测试）</li>\n<li>分层设计、抽象和接口约定</li>\n<li>避免使用全局变量</li>\n<li>考虑使用库的代码侵入性</li>\n<li>文档和认同正交性</li>\n</ul>\n</li>\n<li><em>不存在最终决策</em>，当需求变动频繁的时候，不仅要思考程序架构如何适应这种变动，也要反思是否是设计者没想清楚到底要做什么</li>\n<li><strong>使用曳光弹找到目标</strong>，即MVP + 快速迭代 + 即时的反馈<ul>\n<li>逐步逼近，摸着石头过河</li>\n<li>曳光弹模式永远包含着一个可用的软件版本</li>\n</ul>\n</li>\n<li><strong>原型和便笺</strong>，使用原型去表达和快速验证项目的可行性</li>\n<li><strong>靠近问题领域编程</strong><ul>\n<li>使用DSL（Domain Specified Language）</li>\n</ul>\n</li>\n<li><strong>估算，以避免意外</strong>，主要用来估计工期、分析风险<ul>\n<li>适当地降低估算速度，慎重思考隐藏的风险</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"基本工具\"><a href=\"#基本工具\" class=\"headerlink\" title=\"基本工具\"></a>基本工具</h2><p>工具成为双手和大脑的延伸，优秀的工具可以放大你的才干。</p>\n<ul>\n<li><strong>纯文本以其自解释能力几乎可以永久保存</strong>，XML、JSON就是利用此成为通用的数据表现形式</li>\n<li><strong>利用shell的力量</strong>，它是自动化任务避不开的工具</li>\n<li><strong>要能烂熟地使用你的编辑器</strong>、<strong>要使用高级的编辑器</strong>，由于你的所有开发工作都建立在它上面，做好这两点可以节省你大量时间<ul>\n<li>反思一下，在用你的编辑器时，你有遇到过到比较繁琐的操作吗？</li>\n<li>是因为你不会高级使用方式，还是编辑器本身不支持？</li>\n</ul>\n</li>\n<li><em>总是使用源码控制</em>（这一点早已成为共识）</li>\n<li>调试，debug<ul>\n<li><strong>通常认为匪夷所思的bug，都来自健忘、自大和愚蠢</strong></li>\n<li>QA角色的重要性之一：帮助复现、找到规律性</li>\n<li>橡皮鸭调试法</li>\n<li><strong>二分查找法</strong></li>\n<li>如果bug来自某人的错误假设，那么需要清除团队其他人的相同误解</li>\n</ul>\n</li>\n<li><strong>学习一种文本操纵语言或工具</strong>，例如awk，sed，处理数据和结果时一定能用上</li>\n<li><strong>编写代码生成器</strong><ul>\n<li>开发者手动触发，如模板代码</li>\n<li>程序自动出发，如scheme to idl，idl to code</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"偏执编程\"><a href=\"#偏执编程\" class=\"headerlink\" title=\"偏执编程\"></a>偏执编程</h2><ul>\n<li><strong>通过合约设计</strong>，约定好接口，合作方基于接口开发<ul>\n<li>强类型语言更容易实现这一点</li>\n</ul>\n</li>\n<li><strong>早崩溃</strong>，这在需要编译的软件开发上比较科学，对于web应用来说却不是这样</li>\n<li><strong>使用断言确保某事不会发生</strong>，减少预设条件代理的隐藏bug<ul>\n<li>不要滥用断言</li>\n</ul>\n</li>\n<li><strong>只在异常处用异常</strong></li>\n<li><strong>一定记住释放请求的资源</strong>，如内存、句柄等，可以通过封装统一的资源类实现自动的资源释放</li>\n</ul>\n<h2 id=\"时间的魔力\"><a href=\"#时间的魔力\" class=\"headerlink\" title=\"时间的魔力\"></a>时间的魔力</h2><ul>\n<li><strong>德墨忒尔法则</strong>，使模块间的依赖减少到最小<ul>\n<li>物理解耦</li>\n</ul>\n</li>\n<li><strong>要配置不要hardcode</strong>，使用元数据动态描述你的程序<ul>\n<li><strong>抽象放进代码，细节放进元数据</strong></li>\n</ul>\n</li>\n<li>时间耦合：考虑并发和事件的发生顺序<ul>\n<li>在异步代码中，总考虑并发</li>\n</ul>\n</li>\n<li>一些GUI的设计模式<ul>\n<li>发布订阅</li>\n<li>MVC</li>\n</ul>\n</li>\n<li><strong>基于规则&#x2F;规则集的黑板系统</strong><ul>\n<li>黑板给出统一接口</li>\n<li>耦合方通过调用黑板接口避免耦合</li>\n<li>黑板通过规则给出输出</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"编码时\"><a href=\"#编码时\" class=\"headerlink\" title=\"编码时\"></a>编码时</h2><ul>\n<li><strong>不要靠巧合编程</strong><ul>\n<li>改动要有文档沉淀</li>\n<li>只依靠文档中记录的行为</li>\n<li>把你的假设记入文档</li>\n</ul>\n</li>\n<li><strong>在大数据量时</strong>，考虑算法数量级<ul>\n<li>兼顾效率和可读性</li>\n</ul>\n</li>\n<li><strong>早重构，常重构</strong>，代码是业务设计的近似同构体，常重构才能保证代码完美贴合需求设计<ul>\n<li>重构和功能开发分开进行</li>\n<li>重构一定要有测试</li>\n</ul>\n</li>\n<li>优秀的代码不是看新增了多少行，而是看删除了多少行</li>\n<li>编写易于测试的代码<ul>\n<li>测试你的软件，否则你的用户会代你做测试</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"项目开始前\"><a href=\"#项目开始前\" class=\"headerlink\" title=\"项目开始前\"></a>项目开始前</h2><blockquote>\n<p>完美，不是在没有什么需要增加，而是在没有什么需要去掉的时候达到的。</p>\n</blockquote>\n<ul>\n<li>去挖掘需求，思考用户做特定事情的原因，和如何去做的方式，<strong>让需求成为一种一般性的陈述</strong><ul>\n<li><strong>制作需求文档时的一大危险是太过具体，好的需求文档会保持抽象</strong></li>\n<li>经常性复盘</li>\n<li>鼓励文档分享和交流</li>\n</ul>\n</li>\n<li><strong>巧妙解决看似不能解决的难题</strong>，关键要找到<strong>真正的约束</strong>，去思考<ul>\n<li>有更容易的方法么</li>\n<li>你是在解决真正的问题，还是被外围的技术问题转移了注意力</li>\n<li>这件事为什么是一个问题</li>\n<li>是什么让它难以解决</li>\n<li>它必须这么做么</li>\n<li>它必须完成么</li>\n</ul>\n</li>\n<li><strong>准备好再开始，但不要让它成为你懈怠的借口</strong></li>\n<li><strong>不要成为方法学的奴隶</strong></li>\n</ul>\n<h2 id=\"实效项目\"><a href=\"#实效项目\" class=\"headerlink\" title=\"实效项目\"></a>实效项目</h2><ul>\n<li>团队建设<ul>\n<li>不留破窗户（考验leader的管理能力）</li>\n<li>经常性的复盘和例会</li>\n<li>减少团队成员分工的冗余</li>\n<li>自动化项目流程 &#x3D;&gt; 效率工程团队开发内部工具</li>\n<li>制造context，给成员足够空间</li>\n</ul>\n</li>\n<li><strong>不要使用手动流程</strong>，它不可控且难以复制<ul>\n<li>shell、crontab</li>\n<li>CI和自动化持续集成</li>\n<li>代码生成</li>\n<li>自动化测试</li>\n<li>代码review和源码版本控制流程</li>\n</ul>\n</li>\n<li><strong>常测试，早测试，自动化测试</strong><ul>\n<li>单元测试&#x2F;集成测试&#x2F;压力测试&#x2F;回归测试</li>\n<li><strong>测试状态覆盖，而不是代码覆盖</strong>，代码覆盖率提供的意义有限</li>\n</ul>\n</li>\n<li>关于如何生产文本<ul>\n<li>所有文档都是代码的反映</li>\n<li>源码注释应该去把项目里那些难以描述、容易忘记、不能记录在其他地方的东西记载下来</li>\n<li>比无意义的名称更糟糕的是<strong>有误导性</strong>的名称</li>\n<li>除非有程序或人工维护，否则任何形式的文档都只是<strong>快照</strong></li>\n</ul>\n</li>\n<li><strong>温和地超出用户期望</strong>，如<ul>\n<li>友好的新手指引</li>\n<li>快捷键</li>\n<li>自动化安装</li>\n</ul>\n</li>\n<li><strong>自豪地为你的作品签名</strong></li>\n</ul>\n<h2 id=\"更多资源\"><a href=\"#更多资源\" class=\"headerlink\" title=\"更多资源\"></a>更多资源</h2><ul>\n<li>《人月神话》</li>\n<li>《Unix编程艺术》</li>\n<li>《Effective C++》</li>\n<li>《集市与大教堂》</li>\n</ul>\n<p><em>–END–</em></p>\n",
            "tags": [
                "重构",
                "程序设计",
                "实效",
                "测试"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2017/11/17/photogallery-improvement-2/",
            "url": "http://shenlvmeng.github.com/blog/2017/11/17/photogallery-improvement-2/",
            "title": "Photogallery技术演进第2步",
            "date_published": "2017-11-17T12:56:12.000Z",
            "content_html": "<h2 id=\"构建工具升级\"><a href=\"#构建工具升级\" class=\"headerlink\" title=\"构建工具升级\"></a>构建工具升级</h2><p>因为要拆分代码，便于管理，需要使用<code>import</code>和<code>export</code>，因此必须要引入webpack这样的打包工具到gulp中，使用<a href=\"https://github.com/shama/webpack-stream\">webpack-stream</a>，具体使用方法和其他的gulp插件类似，在pipe在这样插入就行了<code>.pipe(webpack())</code>，配置方式和webpack一样。（webpack中引入babel-loader的过程就不赘述了）引入webpack后，开发流程和一起类似，<code>gulp</code>启动测试服务器，使用webpack通过<code>entry.js</code>打包代码，CSS和JSON相关流程不变。release时，增加了minify的流程，让js流程后的代码再压缩一遍。</p>\n<p>另外，引入babel后，可以用ES6语法改写<code>gulpfile.js</code>。最后的<code>gulpfile.babel.js</code>像下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> gulp <span class=\"keyword\">from</span> <span class=\"string\">&#x27;gulp&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> rename <span class=\"keyword\">from</span> <span class=\"string\">&#x27;gulp-rename&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> uglify <span class=\"keyword\">from</span> <span class=\"string\">&#x27;gulp-uglify&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> cleanCSS <span class=\"keyword\">from</span> <span class=\"string\">&#x27;gulp-clean-css&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jsonminify <span class=\"keyword\">from</span> <span class=\"string\">&#x27;gulp-jsonminify&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> webserver <span class=\"keyword\">from</span> <span class=\"string\">&#x27;gulp-webserver&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> webpack <span class=\"keyword\">from</span> <span class=\"string\">&#x27;webpack-stream&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;js&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;src/index.js&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">webpack</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">          &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>, <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span>, <span class=\"attr\">loader</span>: <span class=\"string\">&quot;babel-loader&quot;</span> &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">rename</span>(<span class=\"string\">&quot;index.js&quot;</span>))</span><br><span class=\"line\">\t\t.<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;dist&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;minify&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;dist/index.js&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">uglify</span>())</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">rename</span>(<span class=\"string\">&quot;index.min.js&quot;</span>))</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&quot;dist&quot;</span>));</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;css&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>([<span class=\"string\">&#x27;src/index.css&#x27;</span>])</span><br><span class=\"line\">\t\t.<span class=\"title function_\">pipe</span>(<span class=\"title function_\">cleanCSS</span>(&#123;<span class=\"attr\">compatibility</span>: <span class=\"string\">&#x27;ie8&#x27;</span>&#125;))</span><br><span class=\"line\">\t\t.<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;dist&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;json&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;src/meta*.json&#x27;</span>)</span><br><span class=\"line\">\t\t.<span class=\"title function_\">pipe</span>(<span class=\"title function_\">jsonminify</span>())</span><br><span class=\"line\">\t\t.<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;dist&#x27;</span>))</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;webserver&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;./&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">webserver</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">livereload</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">directoryListing</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">open</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;watch&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  gulp.<span class=\"title function_\">watch</span>([<span class=\"string\">&#x27;src/*.js&#x27;</span>, <span class=\"string\">&#x27;src/**/*.js&#x27;</span>, <span class=\"string\">&#x27;src/**/*.vue&#x27;</span>], [<span class=\"string\">&#x27;js&#x27;</span>]);</span><br><span class=\"line\">  gulp.<span class=\"title function_\">watch</span>(<span class=\"string\">&#x27;src/*.css&#x27;</span>, [<span class=\"string\">&#x27;css&#x27;</span>]);</span><br><span class=\"line\">  gulp.<span class=\"title function_\">watch</span>(<span class=\"string\">&#x27;src/*.json&#x27;</span>, [<span class=\"string\">&#x27;json&#x27;</span>]);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;assets&#x27;</span>, [<span class=\"string\">&#x27;json&#x27;</span>, <span class=\"string\">&#x27;css&#x27;</span>, <span class=\"string\">&#x27;js&#x27;</span>]);</span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;default&#x27;</span>, [<span class=\"string\">&#x27;assets&#x27;</span>, <span class=\"string\">&#x27;webserver&#x27;</span>, <span class=\"string\">&#x27;watch&#x27;</span>]);</span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&quot;release&quot;</span>, [<span class=\"string\">&#x27;assets&#x27;</span>, <span class=\"string\">&#x27;minify&#x27;</span>]);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用单文件组件\"><a href=\"#使用单文件组件\" class=\"headerlink\" title=\"使用单文件组件\"></a>使用单文件组件</h2><p>引入webpack后，开始高高兴兴地分模块拆分代码，却发现分组件使用Vue时，不是单纯地定义组件配置信息，然后传给入口组件就行。必须要引入全家桶，<code>vue-loader</code>等工具，文件不得不用.vue这样的形式组织（现在开始觉得React组件的组织比Vue舒服了）。本来使用单文件的形式就是想尽量精简，可随着功能逐渐健全，看来重构也是避免不了的啊。在<a href=\"https://github.com/vuejs/vue-loader\">vue-loader</a>的介绍里，居然还要通过<code>vue-cli</code>来大一统，但是我一是想维持项目尽量轻量精简，使用gulp的工具链；二是项目已经写了很久了，全部迁移过去成本有些大。于是，通过<code>vue-cli</code>新建样本项目，对着<code>package.json</code>和<code>webpack.config.js</code>一抄了事。</p>\n<p>加上种种<code>.vue</code>文件的相关配置，<code>gulp.babel.js</code>最后长下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;js&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;src/index.js&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">webpack</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">          &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>, <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span>, <span class=\"attr\">loader</span>: <span class=\"string\">&quot;babel-loader&quot;</span> &#125;,</span><br><span class=\"line\">          &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.vue$/</span>, <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;vue-loader&#x27;</span>&#125;,</span><br><span class=\"line\">          &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(png|jpg|gif|svg)$/</span>, <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;file-loader&#x27;</span>, <span class=\"attr\">options</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;[name].[ext]?[hash]&#x27;</span> &#125; &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">alias</span>: &#123;</span><br><span class=\"line\">          <span class=\"string\">&#x27;vue$&#x27;</span>: <span class=\"string\">&#x27;vue/dist/vue.esm.js&#x27;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">extensions</span>: [<span class=\"string\">&#x27;*&#x27;</span>, <span class=\"string\">&#x27;.js&#x27;</span>, <span class=\"string\">&#x27;.vue&#x27;</span>, <span class=\"string\">&#x27;.json&#x27;</span>]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">rename</span>(<span class=\"string\">&quot;index.js&quot;</span>))</span><br><span class=\"line\">\t\t.<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;dist&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n\n<p>下面需要开始拆分代码了。根据React&#x2F;Vue这样框架通常的设计经验，需要下面一些组成：</p>\n<ul>\n<li><code>actions</code>  存储状态管理的动作</li>\n<li><code>components</code>  存储相互解耦的”dumb”组件，最好和业务无关</li>\n<li><code>constants</code>  存储全局常量</li>\n<li><code>containers</code>  存储组织<code>components</code>的业务容器组件</li>\n<li><code>entry</code>  存储入口文件</li>\n<li><code>helper</code>  存储工具函数</li>\n<li><code>reducers</code>  存储状态管理的reducers</li>\n<li><code>settings</code>  存储全局配置，通常用来初始化store</li>\n<li><code>store</code>  存储全局状态</li>\n<li><code>templates</code>  存储引入js的html文件</li>\n</ul>\n<p>我的项目比较简单，一没有状态管理（后面复杂了之后可能会引入😂），二只有三个组件，只要上面的<code>components</code>, <code>constants</code>, <code>containers</code>, <code>helper</code>的就够用了。最后src下的文件目录大概像下面这样</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── App.vue</span><br><span class=\"line\">├── components</span><br><span class=\"line\">│   └── column</span><br><span class=\"line\">│       └── Column.vue</span><br><span class=\"line\">├── constants</span><br><span class=\"line\">│   └── index.js</span><br><span class=\"line\">├── containers</span><br><span class=\"line\">│   ├── info</span><br><span class=\"line\">│   │   └── Info.vue</span><br><span class=\"line\">│   └── wall</span><br><span class=\"line\">│       └── Wall.vue</span><br><span class=\"line\">├── helper</span><br><span class=\"line\">│   └── utils.js</span><br><span class=\"line\">├── index.css</span><br><span class=\"line\">└── index.js</span><br></pre></td></tr></table></figure>\n\n<p>在拆分时遇到了一些数据需要从最外层透传到子组件的情况，如<code>res</code>, <code>tag_list</code>, <code>tag_keys</code>。不过他们是只读的，而且数目很少，所以并不需要状态管理，只用通过props传下去就行了。</p>\n<h2 id=\"新功能\"><a href=\"#新功能\" class=\"headerlink\" title=\"新功能\"></a>新功能</h2><p>重构完之后，终于可以写新功能了。新功能主要是增加两个伪路由，方便页面的分享（这个需求我之前遇到过几次了）。页面是spa类型的，所以前端路由可以采用hash或history H5 API来实现。同时也有许多在这个基础上了前端路由库，提供一站式解决方案。我的需求目前其实不需要完整的路由方案：</p>\n<ul>\n<li>图片详情页可以分享</li>\n<li>搜索结果可以分享</li>\n</ul>\n<p>因此，设计上使用hash的方案，对于图片详情页，用<code>!</code>开头，后接图片序号。对于搜索结果页，则没有开头的<code>!</code>，仅使用<code>/</code>隔开每一个搜索关键字。对hash的读写上，没有什么困难的地方：</p>\n<ul>\n<li><strong>读</strong>：<code>App.vue</code>根据hash注入对应的数据，更改默认视图，对于图片详情页，更改展示组件</li>\n<li><strong>写</strong>：切换组件时，记录当前数据到<code>location.hash</code>，方便直接复制链接分享</li>\n</ul>\n<h2 id=\"后面的计划\"><a href=\"#后面的计划\" class=\"headerlink\" title=\"后面的计划\"></a>后面的计划</h2><p>现在网站还是有点单调了。只能自娱自乐，没有互动。后面应该会考虑在每张图片接入Disqus的问题。</p>\n",
            "tags": [
                "重构",
                "脚手架",
                "技改",
                "Vue",
                "gulp"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2015/02/02/some-thinking-5/",
            "url": "http://shenlvmeng.github.com/blog/2015/02/02/some-thinking-5/",
            "title": "重构与复提产品有感",
            "date_published": "2015-02-02T15:39:56.000Z",
            "content_html": "<p>2月2日，二月份第一个工作日。老大道佳和同事阳仔来了，技术组的三人总算全部到齐。再加上辰光大师兄，讨论时总算有了许多技术成分加入。此时，对产品未来开发的开发变得有了冲击和富有信息量起来。期间，道佳和阳仔（其实阳仔能力很强）提到了代码重构的概念。自己之前也有所感悟，这次找到共鸣有些高兴。</p>\n<h2 id=\"关于重构\"><a href=\"#关于重构\" class=\"headerlink\" title=\"关于重构\"></a>关于重构</h2><p>有前几篇日记的缺点做借鉴，这里分点列出我的想法，力避废话和漫无头绪。</p>\n<h4 id=\"重构是经常出现的\"><a href=\"#重构是经常出现的\" class=\"headerlink\" title=\"重构是经常出现的\"></a>重构是经常出现的</h4><p>起因是，身为技术的我们接手的是外包团队的一期作品，随着更高产品需求的提出，代码自然做了一番又一番的增删改查，渐渐地，我们愈发察觉到推倒重来似乎比继续修改来得更长远和轻松。今天对员工权限模糊问题的讨论是压倒骆驼的最后一根稻草。在讨论时，道佳提到重构是程序员避不开的环节，所谓两月一重构。我认为很有道理，诚如辰光在之前所说，产品的商业模式是会随市场反响改变的。这样，阳仔的事例就很好解释了——他在之前的创业团队当过技术，写代码时，他说到“我写的代码只能用2个月，这两个月后恐怕需要你们找跟你们一起做下去的技术重新写一遍。”</p>\n<h4 id=\"重构来自新需求或新思想\"><a href=\"#重构来自新需求或新思想\" class=\"headerlink\" title=\"重构来自新需求或新思想\"></a>重构来自新需求或新思想</h4><p>产品在推出后，导向不可避免受到外界的影响。补丁打多了，衣服自然变得不适合穿。老版的代码经常跟不上方向的迅速变化，重构是最理想也是最有效的解决办法，治标且治本。另外，这里新思想是指对数据结构或身份权限等基本模型有了更深的认识抑或外界因素迫使基本模型做出适应（如用户量的庞大将考验数据表的设计），这次我们将要作出的重构一部分就是因为这个原因。</p>\n<h4 id=\"重构是产品与技术的平衡点\"><a href=\"#重构是产品与技术的平衡点\" class=\"headerlink\" title=\"重构是产品与技术的平衡点\"></a>重构是产品与技术的平衡点</h4><p>产品设计和技术开发的思路刚好是两个不同方向。产品设计讲究MVP（Minimum Viable Product ），意为产品的最初设计一定要抓住核心，把产品的主要价值展现出来即可。拿给用户反馈后，再看情况做后续设计。因为，这样在成本上最节省，且成功概率最大。“迭代”一词在这里是最佳的形容，推出&#x3D;&gt;反馈&#x3D;&gt;复推出，如此周而复始，雪球越滚越大。归功于互联网的快速，可以“小步快跑”的传统行业互联网化将有很美好的场景（可惜的是，汽车等传统行业做不到），在短期内滚成很大规模。因此，初期产品追求短小而精悍，很忌讳全面。</p>\n<p>理想化的技术恰相反，毕竟只有对产品有了全面细致的思考，才能使保证产品在技术上的长时间可靠性。如，模型设计，数据表设计。这些正像大厦的地基，地基牢固，楼才搭得高。可是，绝大多数情况，产品等不了那么久，没有全面思考调研的时间，只能像上文提到那样，先做出突出主体的一部分。这样技术就不得不在新需求的压力下，对地基进行小范围修改，以保证产品的可靠性。可以想见，这样搭上去的楼注定不会牢固。</p>\n<p>重构恰好是两者中的平衡点。重构给了技术喘口气的时间，也能满足产品方面的新需求。正是由于它的普遍存在性。很多公司其实是一边打补丁，一边给自己铺后路设计新技术架构的。</p>\n<h2 id=\"MVP与产品成功三内因\"><a href=\"#MVP与产品成功三内因\" class=\"headerlink\" title=\"MVP与产品成功三内因\"></a>MVP与产品成功三内因</h2><p>上文中也提到了，产品的设计是有讲究的。在初期设计时，一定要把握住MVP的思路，只呈现核心价值，用最小可验证产品证明它的可行性。微信就是个很典型的例子，1.0只推出了聊天功能，之后的摇一摇，朋友圈，支付等都是一点一点加上去的。充分的缓冲时间和较快的互联网产品周期，让它能稳步上升。它的内因是，未来无法预知，最小代价实验，随机应变是最放心的。好的产品经理不用识别未来，只要能识别好产品现在的走向就不错了。反过来看初期，若有的产品设计的面面俱到或是团队承诺已考虑到未来，多半走不远。</p>\n<p>产品在设计上有成功的三内因。一，满足刚需；二，用户黏性；三，用户体验。这里以师兄提到的找朋友出去玩的app来讨论。</p>\n<h4 id=\"满足刚需\"><a href=\"#满足刚需\" class=\"headerlink\" title=\"满足刚需\"></a>满足刚需</h4><p>刚需是什么？就是在某种场景下，满足某一部分人的必需。以例子为例，它满足了在找不到熟人却想进行体育活动等时的需求。刚需最好别无取代，当有所取代时，可以尝试缩小用户群，提高针对性。</p>\n<h4 id=\"用户黏性\"><a href=\"#用户黏性\" class=\"headerlink\" title=\"用户黏性\"></a>用户黏性</h4><p>满足了刚需，就会有人用。但这还不够，足够的用户黏性才能保证产品活下去。黏性的最好衡量因素就是使用频次。以例子为例，休闲活动对于大多数人来说一周一到两次，这样的频次实在不算高。</p>\n<h4 id=\"用户体验\"><a href=\"#用户体验\" class=\"headerlink\" title=\"用户体验\"></a>用户体验</h4><p>用户体验即产品价值。价值&#x3D;值 - 价，只有用户使用产品时的显性+隐性花费小于得到的体验，才会被留下来。即产品大于用户的预期。它是用户黏性的保证。</p>\n<p>写了这么多篇日记，似乎以产品为多了。道佳、阳仔过来后，但愿在技术上也能得到真知灼见。</p>\n",
            "tags": [
                "重构",
                "产品",
                "技术"
            ]
        }
    ]
}