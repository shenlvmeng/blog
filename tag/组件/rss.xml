<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Shenlvmeng&#39;s Blog • Posts by &#34;组件&#34; tag</title>
        <link>http://shenlvmeng.github.com/blog</link>
        <description>Be sharp, my friend.</description>
        <language>zh-CN</language>
        <pubDate>Mon, 22 Mar 2021 23:47:20 +0800</pubDate>
        <lastBuildDate>Mon, 22 Mar 2021 23:47:20 +0800</lastBuildDate>
        <category>总结</category>
        <category>制度</category>
        <category>道德</category>
        <category>文官</category>
        <category>万历</category>
        <category>明朝</category>
        <category>读书笔记</category>
        <category>展望</category>
        <category>2018</category>
        <category>2019</category>
        <category>flag</category>
        <category>2020</category>
        <category>2021</category>
        <category>2022</category>
        <category>2023</category>
        <category>面试</category>
        <category>前端</category>
        <category>FAQ</category>
        <category>HTML</category>
        <category>CSS</category>
        <category>style guide</category>
        <category>编程</category>
        <category>范式</category>
        <category>设计</category>
        <category>艺术</category>
        <category>质量</category>
        <category>async_hooks</category>
        <category>cls-hooked</category>
        <category>logId</category>
        <category>录音</category>
        <category>getUserMedia</category>
        <category>AudioContext</category>
        <category>PCM</category>
        <category>WAVE</category>
        <category>二叉搜索树</category>
        <category>算法</category>
        <category>回忆</category>
        <category>老朋友</category>
        <category>C</category>
        <category>Hash</category>
        <category>布隆过滤器</category>
        <category>字符串检索</category>
        <category>canvas</category>
        <category>流程图</category>
        <category>d3</category>
        <category>g6</category>
        <category>zrender</category>
        <category>processOn</category>
        <category>SDN</category>
        <category>cbench</category>
        <category>安装说明</category>
        <category>绘图</category>
        <category>动画</category>
        <category>攻略</category>
        <category>流水账</category>
        <category>成都</category>
        <category>重庆</category>
        <category>武汉</category>
        <category>重构</category>
        <category>代码</category>
        <category>代码风格</category>
        <category>数据可视化</category>
        <category>爬虫</category>
        <category>chrome</category>
        <category>crx</category>
        <category>扩展</category>
        <category>CORS</category>
        <category>跨域</category>
        <category>盒模型</category>
        <category>浮动</category>
        <category>Reactive Programming</category>
        <category>JavaScript</category>
        <category>Cycle.js</category>
        <category>Dart</category>
        <category>最佳实践</category>
        <category>引流</category>
        <category>universal-link</category>
        <category>app-link</category>
        <category>脚手架</category>
        <category>degit</category>
        <category>git</category>
        <category>设计模式</category>
        <category>类</category>
        <category>接口</category>
        <category>抽象类</category>
        <category>DOM</category>
        <category>Docker</category>
        <category>ONOS</category>
        <category>控制器</category>
        <category>虚拟化</category>
        <category>笔记</category>
        <category>UX</category>
        <category>UED</category>
        <category>准则</category>
        <category>Java</category>
        <category>Ruby</category>
        <category>反射</category>
        <category>编程范式</category>
        <category>鸭子类型</category>
        <category>管理</category>
        <category>效率</category>
        <category>知识工作者</category>
        <category>卓有成效</category>
        <category>Elm</category>
        <category>框架</category>
        <category>函数式编程</category>
        <category>虚网映射</category>
        <category>Javascript</category>
        <category>并发</category>
        <category>event loop</category>
        <category>覆盖率</category>
        <category>端到端测试</category>
        <category>istanbul</category>
        <category>istanbuljs</category>
        <category>JavaSript</category>
        <category>Express</category>
        <category>源码</category>
        <category>代码覆盖率</category>
        <category>istanbul-middleware</category>
        <category>代码插桩</category>
        <category>require钩子</category>
        <category>babel-plugin-istanbul</category>
        <category>css</category>
        <category>html5</category>
        <category>flex</category>
        <category>javascript</category>
        <category>roadmap</category>
        <category>闭包</category>
        <category>Haskell</category>
        <category>monad</category>
        <category>后端</category>
        <category>管理后台</category>
        <category>egg.js</category>
        <category>工作流</category>
        <category>pull request</category>
        <category>golang</category>
        <category>语言学习</category>
        <category>黑客与画家</category>
        <category>创业</category>
        <category>骑行</category>
        <category>海南</category>
        <category>图文</category>
        <category>reflow</category>
        <category>repaint</category>
        <category>命名法</category>
        <category>成功学</category>
        <category>自我建设</category>
        <category>HTTP</category>
        <category>HTTP/2</category>
        <category>SPDY</category>
        <category>QUIC</category>
        <category>HTTPS</category>
        <category>状态码</category>
        <category>网络攻击</category>
        <category>介绍</category>
        <category>图片渲染</category>
        <category>html2canvas</category>
        <category>dom-to-image</category>
        <category>electron</category>
        <category>indexedDB</category>
        <category>异步</category>
        <category>Generator</category>
        <category>thunk</category>
        <category>async</category>
        <category>函数表达式</category>
        <category>对象</category>
        <category>继承</category>
        <category>类型转换</category>
        <category>==</category>
        <category>类型判断</category>
        <category>猫</category>
        <category>杀手</category>
        <category>管理学</category>
        <category>领导力</category>
        <category>梯队</category>
        <category>移动端</category>
        <category>UI</category>
        <category>自适应</category>
        <category>rem</category>
        <category>Electron</category>
        <category>GUI</category>
        <category>gpx</category>
        <category>template</category>
        <category>Electron Builder</category>
        <category>PWA</category>
        <category>方法论</category>
        <category>夜话</category>
        <category>多线</category>
        <category>生活</category>
        <category>密码</category>
        <category>密钥</category>
        <category>技改</category>
        <category>Vue</category>
        <category>gulp</category>
        <category>瀑布流</category>
        <category>电影</category>
        <category>PHP</category>
        <category>参考</category>
        <category>思维</category>
        <category>学习能力</category>
        <category>右脑</category>
        <category>经济学</category>
        <category>宏观经济学</category>
        <category>术语</category>
        <category>GDP</category>
        <category>CPI</category>
        <category>储蓄</category>
        <category>投资</category>
        <category>金融市场</category>
        <category>股票</category>
        <category>债券</category>
        <category>美联储</category>
        <category>失业</category>
        <category>货币</category>
        <category>现值</category>
        <category>准备金</category>
        <category>货币中性</category>
        <category>通货膨胀</category>
        <category>汇率</category>
        <category>购买力</category>
        <category>净出口</category>
        <category>资产净流出</category>
        <category>总需求</category>
        <category>总供给</category>
        <category>流动性偏好</category>
        <category>乘数效应</category>
        <category>菲利普斯曲线</category>
        <category>微观经济学</category>
        <category>供求</category>
        <category>贸易</category>
        <category>市场</category>
        <category>税</category>
        <category>剩余</category>
        <category>外部性</category>
        <category>公共物品</category>
        <category>公共资源</category>
        <category>生产成本</category>
        <category>利润</category>
        <category>垄断</category>
        <category>价格歧视</category>
        <category>寡头</category>
        <category>垄断竞争</category>
        <category>生产要素市场</category>
        <category>贫困</category>
        <category>消费者选择理论</category>
        <category>不对称信息</category>
        <category>政治经济学</category>
        <category>行为经济学</category>
        <category>VSCode</category>
        <category>编辑器</category>
        <category>IDE</category>
        <category>hybrid</category>
        <category>JSBridge</category>
        <category>Web Worker</category>
        <category>Service Worker</category>
        <category>习惯</category>
        <category>lint</category>
        <category>editorconfig</category>
        <category>commit message</category>
        <category>量子物理</category>
        <category>史话</category>
        <category>埋点</category>
        <category>raven.js</category>
        <category>前端监控</category>
        <category>文本编辑器</category>
        <category>quill</category>
        <category>结构化数据</category>
        <category>React</category>
        <category>Hooks</category>
        <category>函数组件</category>
        <category>复用</category>
        <category>状态管理</category>
        <category>redux</category>
        <category>MobX</category>
        <category>代码质量</category>
        <category>重来</category>
        <category>requestAnimationFrame</category>
        <category>TypeScript</category>
        <category>路书</category>
        <category>gpx解析</category>
        <category>EXIF</category>
        <category>人类</category>
        <category>生存</category>
        <category>基因</category>
        <category>响应式编程</category>
        <category>RxJS</category>
        <category>成长</category>
        <category>业务</category>
        <category>思想</category>
        <category>程序设计</category>
        <category>心理学</category>
        <category>自我</category>
        <category>社会思维</category>
        <category>社会影响</category>
        <category>文化</category>
        <category>性别</category>
        <category>从众</category>
        <category>说服</category>
        <category>临床诊断</category>
        <category>陪审团</category>
        <category>司法</category>
        <category>物质主义</category>
        <category>健康</category>
        <category>社会关系</category>
        <category>偏见</category>
        <category>攻击行为</category>
        <category>亲密关系</category>
        <category>友谊</category>
        <category>爱情</category>
        <category>利他</category>
        <category>冲突</category>
        <category>和解</category>
        <category>软技能</category>
        <category>理财</category>
        <category>健身</category>
        <category>自我营销</category>
        <category>学习</category>
        <category>商业模式</category>
        <category>产品</category>
        <category>校园网</category>
        <category>互联网</category>
        <category>技术</category>
        <category>web开发</category>
        <category>哲思</category>
        <category>择偶观</category>
        <category>validator</category>
        <category>大文件</category>
        <category>visibilityChange</category>
        <category>IntersectionObserver</category>
        <category>图种</category>
        <category>draggable</category>
        <category>webpack</category>
        <category>z-index</category>
        <category>git submodule</category>
        <category>object-fit</category>
        <category>object-position</category>
        <category>BroadcastChannel</category>
        <category>extract-text-webpack-plugin</category>
        <category>lottie</category>
        <category>backface-visibility</category>
        <category>egret</category>
        <category>mock</category>
        <category>SSO</category>
        <category>autoprefixer</category>
        <category>polyfill</category>
        <category>Android</category>
        <category>ffmpeg</category>
        <category>React Hooks</category>
        <category>rollup</category>
        <category>CDN</category>
        <category>DNS</category>
        <category>CNAME</category>
        <category>架构</category>
        <category>组件</category>
        <category>ssh</category>
        <category>fis-receiver</category>
        <category>tmux</category>
        <category>origami</category>
        <category>promise</category>
        <category>encodeURI</category>
        <category>encodeURIComponent</category>
        <category>axios</category>
        <category>charles</category>
        <category>黑色幽默</category>
        <category>朋友</category>
        <category>梦</category>
        <category>濒死</category>
        <category>江南</category>
        <category>苏州</category>
        <category>无锡</category>
        <category>宜兴</category>
        <category>湖州</category>
        <category>南浔</category>
        <category>游记</category>
        <category>随笔</category>
        <category>群众</category>
        <category>理论</category>
        <category>实效</category>
        <category>测试</category>
        <category>长沙</category>
        <category>杭州</category>
        <category>湖南</category>
        <category>核酸</category>
        <category>美食</category>
        <category>云南</category>
        <category>丽江</category>
        <category>大理</category>
        <category>青岛</category>
        <category>济南</category>
        <category>山东</category>
        <category>西北</category>
        <category>银川</category>
        <category>西宁</category>
        <category>青海湖</category>
        <category>西海镇</category>
        <category>茶卡盐湖</category>
        <category>厦门</category>
        <category>感受</category>
        <category>C语言</category>
        <category>树</category>
        <category>主干开发</category>
        <category>GitFlow</category>
        <category>GithubFlow</category>
        <category>typescript</category>
        <category>类型系统</category>
        <category>webrtc</category>
        <category>RTMP</category>
        <category>首屏时间</category>
        <category>性能优化</category>
        <category>公司</category>
        <category>个人发展</category>
        <category>战略</category>
        <category>晋升</category>
        <category>哲学</category>
        <category>幸福</category>
        <category>人生</category>
        <category>叔本华</category>
        <category>Unix</category>
        <category>Rollup</category>
        <category>mouseout</category>
        <category>mouseleave</category>
        <category>lint-staged</category>
        <category>吸顶</category>
        <category>图片组件</category>
        <category>形式系统</category>
        <category>不完全性</category>
        <category>隐喻</category>
        <category>哥德尔</category>
        <category>巴赫</category>
        <category>埃舍尔</category>
        <item>
            <guid isPermalink="true">http://shenlvmeng.github.com/blog/2021/03/22/clean-architecture/</guid>
            <title>《架构整洁之道》—— 软件设计的思考</title>
            <link>http://shenlvmeng.github.com/blog/2021/03/22/clean-architecture/</link>
            <category>设计</category>
            <category>架构</category>
            <category>组件</category>
            <pubDate>Mon, 22 Mar 2021 23:47:20 +0800</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;全文参考自马丁大叔的《架构整洁之道》，书中文笔清爽易懂，不过在后半段有点条理不清流于术而非道&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在编程领域，问题就像一个生命体一样，是在不断繁殖和进化的。它甚至经常不会人们预期中一般发展。作为一名出色的软件工程师或架构师，你需要有超出普通程序员的视角，考虑系统宏观的未来的发展。你的使命是，在这种恶劣的开发环境下，绘制一幅相对最优的图纸，用最少的时间、人力、金钱构建和维护一个随时可能融化在熵增热汤里的软件系统。和现实物理世界里的架构师类似，你需要了解编程世界里的一般规律，帮助你挑选武器（技术），修炼秘籍（方法论），在不同的江湖里（业务）打造不同的门派（软件系统）。&lt;/p&gt;
&lt;p&gt;开卷有益，祝你练武愉快~&lt;/p&gt;
&lt;h2 id=&#34;你要做什么&#34;&gt;&lt;a href=&#34;#你要做什么&#34; class=&#34;headerlink&#34; title=&#34;你要做什么&#34;&gt;&lt;/a&gt;你要做什么&lt;/h2&gt;&lt;p&gt;简而言之，架构师的终极目标就是&lt;strong&gt;用最少的人力成本来满足构建和维护软件系统的需求&lt;/strong&gt;。糟糕的架构设计会让软件在成功之前，就带来高昂的边际人力成本，即开发新需求的开支越来越大（因为程序员的时间都耗费在系统的修修补补上了）。然而，这种日益增长的边际人力成本现象并不少见。来源于类似龟兔赛跑中兔子的盲目自信，实际上，&lt;strong&gt;无论从短期还是长期看，胡乱编写代码的工作速度其实比循规蹈矩更慢&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;架构师存在的一个必要性就是，软件存在着两种价值维度：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;行为价值（现在时）&lt;/strong&gt;：即实现功能和弥补bug。这类价值是&lt;strong&gt;紧急却并不总是重要的&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;架构价值（将来时）&lt;/strong&gt;：即软件是否足够“软”（易于被修改），这类价值是&lt;strong&gt;重要却并不总是紧急的&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;很现实的一点是，在公司中，&lt;strong&gt;团队之间的抗争本来就是无穷无尽的&lt;/strong&gt;。你作为研发团队的一员，职责的一部分就是避免你的代码在抗争的风吹雨打下变成一坨没人爱的shit。&lt;/p&gt;
&lt;h2 id=&#34;编程范式&#34;&gt;&lt;a href=&#34;#编程范式&#34; class=&#34;headerlink&#34; title=&#34;编程范式&#34;&gt;&lt;/a&gt;编程范式&lt;/h2&gt;&lt;p&gt;没错，架构师们也有祖师爷。在1958到1968年期间，3大编程范式就已经陆续出现了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;结构化编程&lt;/strong&gt;，由Dijkstra在1968年提出，并发扬光大，&lt;strong&gt;它对程序控制权的直接转移（程序语句）进行了限制和规范&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;面向对象编程&lt;/strong&gt;，最早在1966年提出，Ole Johan Dahl和Kriste Nygaard注意到，函数调用堆栈可以被放到堆内存中，从而在函数返回后继续保留。&lt;strong&gt;它对程序控制权的间接转移（函数调用）进行了限制和规范&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;函数式编程&lt;/strong&gt;，启发自Alonzo Church于1936年发明的lambda演算，发扬于1958年的LISP语言。&lt;strong&gt;它对程序的赋值进行了限制和规范&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;值得思考是，三大范式做的都是&lt;strong&gt;限制和规范&lt;/strong&gt;，即告诉我们&lt;strong&gt;不能做什么&lt;/strong&gt;，而不是可以做什么。另外，多态带来的架构边界飞跃，函数式编程带来的数据访问限制，结构化编程带来的算法拆解为我们架构软件提供了强大武器。这也与软件架构的三个关注点所契合：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能性&lt;/strong&gt;，即完整的功能实现&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;组件独立性&lt;/strong&gt;，即合适的耦合度与细粒度&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据管理&lt;/strong&gt;，即良好的数据结构设计&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;结构化编程&#34;&gt;&lt;a href=&#34;#结构化编程&#34; class=&#34;headerlink&#34; title=&#34;结构化编程&#34;&gt;&lt;/a&gt;结构化编程&lt;/h3&gt;&lt;p&gt;Dijkstra在1950年代思考编程时，得出过一个结论：编程是一项&lt;strong&gt;难度很大&lt;/strong&gt;的活动。他倾向于把编程类比为数学推导过程，并发现&lt;code&gt;goto&lt;/code&gt;的&lt;strong&gt;某些使用&lt;/strong&gt;会导致&lt;strong&gt;模块无法被递归拆解成更小的单元&lt;/strong&gt;。然而，去掉这些使用的&lt;code&gt;goto&lt;/code&gt;可以被&lt;strong&gt;顺序结构、分支结构、循环结构这三种最小集&lt;/strong&gt;等价表示出来。从而，大问题可以被逐步拆解为小问题。&lt;/p&gt;
&lt;p&gt;不过，事情也并非这么理想，当程序复杂后，我们不可能像Dijkstra一样，用严格的数学推导形式化证明编程的正确性。相反，类似实验学科的&lt;strong&gt;无法被证伪即正确&lt;/strong&gt;，我们现今依旧使用着Dijkstra的结构化编程思路将大问题拆解为小问题。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有趣的是，“无法被证伪即正确”和Dijkstra的一个观点&lt;strong&gt;“测试只能展示bug的存在，并不能证明不存在bug”&lt;/strong&gt;不谋而合&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简而言之，去掉goto糟粕诞生的结构化编程中，最有价值的地方就是，它赋予我们创造&lt;strong&gt;可证伪程序单元&lt;/strong&gt;的能力，从而架构起大程序。在架构设计领域，&lt;strong&gt;功能性拆解仍然是最佳实践之一&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;什么？什么叫做可证伪？你应该写过单元测试吧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面向对象编程&#34;&gt;&lt;a href=&#34;#面向对象编程&#34; class=&#34;headerlink&#34; title=&#34;面向对象编程&#34;&gt;&lt;/a&gt;面向对象编程&lt;/h3&gt;&lt;p&gt;什么是面向对象？有人说面向对象是“数据和函数的组合”，也有人说是“对真实世界的一种建模方式”。但这两种理解要么片面，要么虚无缥缈。为了总结这种范式，我们先从它的3大特征入手：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;封装&lt;/strong&gt;，即将一组关联数据和函数圈起来。然而这种特性，从C语言起就支持（struct + 头文件），很难说它是面向对象编程的必要条件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;继承&lt;/strong&gt;，即可以在某个作用域对外部定义的一组变量与函数进行覆盖。不过C语言也能模拟出这种能力，看起来也比较勉强。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多态&lt;/strong&gt;，即在同一接口描述下的不同具体实现形式，C语言起也做了支持（STDOUT），然而使用函数指针显式实现多态问题就在于指针的&lt;strong&gt;危险性&lt;/strong&gt;。而面向对象编程对这种程序间接控制权的转移做了约束。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;传统的函数调用树中，系统行为决定了自上而下的控制流，而控制流决定了&lt;strong&gt;源代码依赖&lt;/strong&gt;（代码实现）是自上而下的，比如在C中会使用&lt;code&gt;#include&lt;/code&gt;引入依赖。此时不论是代码实现还是代码执行都是自上而下的。然而在&lt;strong&gt;多态&lt;/strong&gt;的帮助下，底层函数需要依赖高层接口实现，作为高层函数的插件引入，从而将这种依赖关系和控制流反向，即&lt;strong&gt;依赖反转&lt;/strong&gt;。实际上，借助安全便利的多态实现，可以轻松将依赖关系反转。&lt;/p&gt;
&lt;p&gt;从而架构师可以&lt;strong&gt;完全控制&lt;/strong&gt;这种方式下，系统中所有的源代码依赖关系，进而随意更改源代码依赖关系。让每个组件都有&lt;strong&gt;独立部署&lt;/strong&gt;和&lt;strong&gt;独立开发&lt;/strong&gt;能力。好了，我们现在可以说明面向对象编程的含义了：&lt;/p&gt;
&lt;p&gt;面向对象编程就是以多态为手段来对源代码中的依赖关系进行控制的能力。这种能力让架构师可以构建&lt;strong&gt;插件式架构&lt;/strong&gt;，让高层&lt;strong&gt;策略性组件&lt;/strong&gt;和底层&lt;strong&gt;实现性组件&lt;/strong&gt;相分离。借助接口，底层实现性组件作为插件，可以独立于高层组件开发和部署。&lt;/p&gt;
&lt;h3 id=&#34;函数式编程&#34;&gt;&lt;a href=&#34;#函数式编程&#34; class=&#34;headerlink&#34; title=&#34;函数式编程&#34;&gt;&lt;/a&gt;函数式编程&lt;/h3&gt;&lt;p&gt;函数式编程依据的原理早在编程之前就已出现，相对前两种范式，函数式编程的风格可能相对陌生一点。在这类风格中，变量都是不可变的。从而让竞争问题、死锁问题、并发更新问题不复存在。一个架构良好的系统，需要将状态修改的部分和不需要修改的部分隔离开，然后用类似事务型内存的方式来保护可变量。另外，架构师应该着力于将大部分逻辑归于不可变组件中，可变组件的逻辑越少越好。&lt;/p&gt;
&lt;p&gt;书中还提到了只包含CR的事件溯源存储逻辑，即通过事务日志的方式保存当前状态。因为不存在更改和删除，从而不存在并发问题。也是一种很新颖的思路。&lt;/p&gt;
&lt;p&gt;回顾上面的三种编程范式，都在说什么&lt;strong&gt;不应该做&lt;/strong&gt;。也即编程好似在充满死路的熵增旷野中，只有沿着相对安全的几个大方向才可拨开迷雾。&lt;/p&gt;
&lt;h2 id=&#34;设计原则&#34;&gt;&lt;a href=&#34;#设计原则&#34; class=&#34;headerlink&#34; title=&#34;设计原则&#34;&gt;&lt;/a&gt;设计原则&lt;/h2&gt;&lt;p&gt;软件的中层需要具有良好的可读性、可扩展性。这里就不得不提到SOLID原则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SRP：&lt;strong&gt;单一职责原则&lt;/strong&gt;，每个模块有且只有一个需要被改变的理由&lt;/li&gt;
&lt;li&gt;OCP：&lt;strong&gt;开闭原则&lt;/strong&gt;，对扩展开放，对修改封闭&lt;/li&gt;
&lt;li&gt;LSP：&lt;strong&gt;里氏替换原则&lt;/strong&gt;，子类型应该能够无无缝替换类型使用&lt;/li&gt;
&lt;li&gt;ISP：&lt;strong&gt;接口隔离原则&lt;/strong&gt;，依赖的模块不要包含不需要的接口&lt;/li&gt;
&lt;li&gt;DIP：&lt;strong&gt;依赖反转原则&lt;/strong&gt;，高层策略性代码不要依赖底层实现性代码&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;SRP&#34;&gt;&lt;a href=&#34;#SRP&#34; class=&#34;headerlink&#34; title=&#34;SRP&#34;&gt;&lt;/a&gt;SRP&lt;/h3&gt;&lt;p&gt;任何一个软件模块（一组紧密相关的函数和数据结构）都应该只对一个行为者负责。实际上，代码和数据就是靠着和某一类行为者的相关性组合起来的。我们需要&lt;strong&gt;将服务不同行为者的代码进行切分&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;OCP&#34;&gt;&lt;a href=&#34;#OCP&#34; class=&#34;headerlink&#34; title=&#34;OCP&#34;&gt;&lt;/a&gt;OCP&lt;/h3&gt;&lt;p&gt;设计良好的软件应该易于扩展，同时抗拒修改。实现方式可以通过将系统划分为一系列组件，并且将依赖关系按层次组织，使得高阶组件不会因为低阶组件修改受到影响。&lt;/p&gt;
&lt;h3 id=&#34;LSP&#34;&gt;&lt;a href=&#34;#LSP&#34; class=&#34;headerlink&#34; title=&#34;LSP&#34;&gt;&lt;/a&gt;LSP&lt;/h3&gt;&lt;p&gt;里氏替换原则表示，子类型应该能够被当做父类型使用。它实际上表示了一种面向接口设计的设计原则。一旦违背了这种可替换性，就会不得不在系统架构中增加大量复杂的应对机制。&lt;/p&gt;
&lt;h3 id=&#34;ISP&#34;&gt;&lt;a href=&#34;#ISP&#34; class=&#34;headerlink&#34; title=&#34;ISP&#34;&gt;&lt;/a&gt;ISP&lt;/h3&gt;&lt;p&gt;ISP告诉我们任何软件设计如果依赖了不需要的东西，都是不好的迹象，很容易带来不必要的麻烦。&lt;/p&gt;
&lt;h3 id=&#34;DIP&#34;&gt;&lt;a href=&#34;#DIP&#34; class=&#34;headerlink&#34; title=&#34;DIP&#34;&gt;&lt;/a&gt;DIP&lt;/h3&gt;&lt;p&gt;DIP告诉我们，应该多引用抽象类型，而不是具体实现。因为软件是经常变动的，而抽象出共性的接口则是较少变化的。从而可以衍生出一些守则，譬如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应该多使用抽象接口，避免使用多变的实现类&lt;/li&gt;
&lt;li&gt;不要在实现类上创建衍生类&lt;/li&gt;
&lt;li&gt;不要覆盖具体实现的函数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不过当然了，还是得有人做实现的脏活累活的&lt;/p&gt;
&lt;h2 id=&#34;组件构建&#34;&gt;&lt;a href=&#34;#组件构建&#34; class=&#34;headerlink&#34; title=&#34;组件构建&#34;&gt;&lt;/a&gt;组件构建&lt;/h2&gt;&lt;h3 id=&#34;组件&#34;&gt;&lt;a href=&#34;#组件&#34; class=&#34;headerlink&#34; title=&#34;组件&#34;&gt;&lt;/a&gt;组件&lt;/h3&gt;&lt;p&gt;组件是构建软件的最小单元，同时也是源代码的集合。在早期会使用链接技术将程序和库函数链接起来，而后随着机器性能的增长，我们会在程序运行中插入动态链接文件，如今这种组件化插件式架构是最常见的软件构建形式。&lt;/p&gt;
&lt;h3 id=&#34;组件聚合&#34;&gt;&lt;a href=&#34;#组件聚合&#34; class=&#34;headerlink&#34; title=&#34;组件聚合&#34;&gt;&lt;/a&gt;组件聚合&lt;/h3&gt;&lt;p&gt;和类相似，组件也有一些原则指引我们的构建工作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;REP：复用&amp;#x2F;发布原则，即可以一起发布的最小粒度就是复用的最小粒度，也即按可以同时发布聚合&lt;/li&gt;
&lt;li&gt;CCP：共同闭包原则，即因为同一原因修改的放在一起，反之不要放在一起，也即按变更原因聚合&lt;/li&gt;
&lt;li&gt;CRP：共同复用原则，即会被一起复用的放在一起，反之不要放在一起，也即按减少无用耦合聚合&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这三大原则相互牵制，在项目的不同阶段，某一原则重要性也会不同；比如在项目早期CCP就会更重要，而后REP会比较重要。&lt;/p&gt;
&lt;h3 id=&#34;组合耦合&#34;&gt;&lt;a href=&#34;#组合耦合&#34; class=&#34;headerlink&#34; title=&#34;组合耦合&#34;&gt;&lt;/a&gt;组合耦合&lt;/h3&gt;&lt;p&gt;本节提出了一些可以定量衡量耦合健康度的指标，比较新颖。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无依赖环原则：依赖关系中不能有环，会不利于厘清依赖关系；可以通过&lt;strong&gt;依赖反转&lt;/strong&gt;或&lt;strong&gt;创建第三方依赖组件&lt;/strong&gt;解决。循环依赖关系务必持续监控。&lt;/li&gt;
&lt;li&gt;稳定依赖原则：依赖关系必须指向稳定的方向，简单点说就是让经常变更的组件依赖于不经常变更的组件。一个组件的位置稳定性可以通过入向和出向依赖算出，它要能和组件的实际稳定性匹配。&lt;/li&gt;
&lt;li&gt;稳定抽象原则：抽象化程度需要和稳定性程度一直，即经常变更的组件要容易变更，即更具体实现；反之，稳定的组件要不容易变更，即更抽象。结合上条看，依赖关系应该指向更抽象的方向。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用位置稳定性指标I和抽象程度A，可以绘制一个坐标系。在主序列上的是最健康的，相反的两块痛苦区和无用区则是不健康的表现。用偏离主序列线的距离可以大致衡量依赖关系的健康程度。结合发布版本的变化来看，还可以得到变化趋势。&lt;/p&gt;
&lt;h2 id=&#34;软件架构&#34;&gt;&lt;a href=&#34;#软件架构&#34; class=&#34;headerlink&#34; title=&#34;软件架构&#34;&gt;&lt;/a&gt;软件架构&lt;/h2&gt;&lt;p&gt;软件架构目的就是方便在工作中更好地对组件进行研发、部署、运行和维护。其中的策略就是&lt;strong&gt;保留尽可能多的可选项&lt;/strong&gt;。让系统最大化程序员的生产力，同时最小化系统运营成本：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开发：系统架构需要方便开发团队对它的开发，不同的团队结构应该采用不同的架构设计，比如团队的大小就会影响架构的选择&lt;/li&gt;
&lt;li&gt;部署：一键式部署&lt;/li&gt;
&lt;li&gt;运行：几乎任何运行问题都可以通过增加硬件来解决&lt;/li&gt;
&lt;li&gt;维护：减小新功能和系统缺陷占用的人力资源&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;保持可选项，忽略那些无关紧要的实现细节。任何软件系统都可以拆解成&lt;strong&gt;策略&lt;/strong&gt;（业务的宏观逻辑和流程）和&lt;strong&gt;细节&lt;/strong&gt;（具体操作行为）。而&lt;strong&gt;策略才是系统的真正价值所在&lt;/strong&gt;。细节是指那些和策略交互的东西，包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I&amp;#x2F;O设备&lt;/li&gt;
&lt;li&gt;数据库&lt;/li&gt;
&lt;li&gt;Web系统&lt;/li&gt;
&lt;li&gt;服务器&lt;/li&gt;
&lt;li&gt;框架&lt;/li&gt;
&lt;li&gt;交互协议&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在设计时，可以尽量拖延上面这些的设计，这样我们做出的决策才不会依赖各种很容易变化的信息。另一方面，也可以&lt;strong&gt;增加实现底层的可替换性&lt;/strong&gt;。举个具体例子：&lt;strong&gt;设备无关性&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;独立性&#34;&gt;&lt;a href=&#34;#独立性&#34; class=&#34;headerlink&#34; title=&#34;独立性&#34;&gt;&lt;/a&gt;独立性&lt;/h3&gt;&lt;p&gt;一个良好的架构应支持下面几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统用例：设计良好的架构需要能够&lt;strong&gt;看起来&lt;/strong&gt;就可以反映系统的设计意图，比如一个购物车应用架构应该看起来就该是用来实现购物车的&lt;/li&gt;
&lt;li&gt;系统运行：可以解耦出多个独立服务，然后通过某种网络协议通信，这种架构即微服务&lt;/li&gt;
&lt;li&gt;系统维护&lt;/li&gt;
&lt;li&gt;系统开发&lt;/li&gt;
&lt;li&gt;系统部署：理想的独立部署应该能够做到&lt;strong&gt;热更新&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要注意留意表面的重复和实际的重复，如果两段代码变更速率和缘由不同，那么就不算是真正的重复。&lt;/p&gt;
&lt;h3 id=&#34;划分边界&#34;&gt;&lt;a href=&#34;#划分边界&#34; class=&#34;headerlink&#34; title=&#34;划分边界&#34;&gt;&lt;/a&gt;划分边界&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;设计良好的系统架构不应该依赖细节，而应该尽可能推迟细节性的决策。通过划清边界，可以推迟和延后细节性的决策，从而节省大量时间，避免问题。&lt;/li&gt;
&lt;li&gt;边界线应该画在不相干的事情中间，譬如GUI和业务逻辑&lt;/li&gt;
&lt;li&gt;针对核心业务逻辑的插件式架构可以提高可维护性和可扩展性&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;边界剖析&#34;&gt;&lt;a href=&#34;#边界剖析&#34; class=&#34;headerlink&#34; title=&#34;边界剖析&#34;&gt;&lt;/a&gt;边界剖析&lt;/h3&gt;&lt;p&gt;简言之，应该尽可能从底层组件指向高层组件。&lt;/p&gt;
&lt;h3 id=&#34;策略和层次&#34;&gt;&lt;a href=&#34;#策略和层次&#34; class=&#34;headerlink&#34; title=&#34;策略和层次&#34;&gt;&lt;/a&gt;策略和层次&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;变更原因、时间和层次不同的策略应该属于不同的组件&lt;/li&gt;
&lt;li&gt;按距离系统输入、输出距离的远近，可以确定策略的层次&lt;/li&gt;
&lt;li&gt;源码间的依赖关系，应该主要和组件所在的层次挂钩&lt;/li&gt;
&lt;li&gt;低层组件应该以插件的方式依赖高层组件&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;业务逻辑&#34;&gt;&lt;a href=&#34;#业务逻辑&#34; class=&#34;headerlink&#34; title=&#34;业务逻辑&#34;&gt;&lt;/a&gt;业务逻辑&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;业务逻辑是程序中真正用于或者体现赚钱&amp;#x2F;省钱的逻辑与过程&lt;/strong&gt;。其中关键逻辑和关键数据紧密组合成为&lt;strong&gt;业务实体&lt;/strong&gt;。业务实体应该只有高层逻辑，没有具体实现。而&lt;strong&gt;用例&lt;/strong&gt;是业务实体在不同侧面的具体体现。通过用例可以规范用户和业务实体的交互方式。&lt;/p&gt;
&lt;h3 id=&#34;“尖叫”的软件架构&#34;&gt;&lt;a href=&#34;#“尖叫”的软件架构&#34; class=&#34;headerlink&#34; title=&#34;“尖叫”的软件架构&#34;&gt;&lt;/a&gt;“尖叫”的软件架构&lt;/h3&gt;&lt;p&gt;“尖叫”即所见即所得。软件架构本身就足以能够体现其用途。一个良好的架构设计应该围绕用例展开，推迟和延后框架的选择，不要过度拘泥于框架。&lt;strong&gt;框架只是一个可选项&lt;/strong&gt;，是一个工具，而不是一种信念，更不是一种架构。&lt;/p&gt;
&lt;h3 id=&#34;整洁架构&#34;&gt;&lt;a href=&#34;#整洁架构&#34; class=&#34;headerlink&#34; title=&#34;整洁架构&#34;&gt;&lt;/a&gt;整洁架构&lt;/h3&gt;&lt;p&gt;一些常见的系统架构通常具有以下特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;独立于框架&lt;/li&gt;
&lt;li&gt;可被测试&lt;/li&gt;
&lt;li&gt;独立于UI&lt;/li&gt;
&lt;li&gt;独立于数据库&lt;/li&gt;
&lt;li&gt;独立于外部接口&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Main组件&#34;&gt;&lt;a href=&#34;#Main组件&#34; class=&#34;headerlink&#34; title=&#34;Main组件&#34;&gt;&lt;/a&gt;Main组件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Main组件包含了系统中最细节化最底层的策略，它应该在做完脏活累活后，将程序的控制权交给最高抽象层的代码去执行&lt;/li&gt;
&lt;li&gt;针对不同系统可以配置不同的Main组件，即将Main组件视为应用程序的一个插件&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;服务：微观和宏观&#34;&gt;&lt;a href=&#34;#服务：微观和宏观&#34; class=&#34;headerlink&#34; title=&#34;服务：微观和宏观&#34;&gt;&lt;/a&gt;服务：微观和宏观&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;系统的架构边界事实上并不落在服务之间，而是&lt;strong&gt;穿透&lt;/strong&gt;所有服务，在服务内以组件形式存在&lt;/li&gt;
&lt;li&gt;服务可以提升系统的可扩展性和可开发性，不过服务却并不能代表整个系统的架构设计&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;整洁的嵌入式架构&#34;&gt;&lt;a href=&#34;#整洁的嵌入式架构&#34; class=&#34;headerlink&#34; title=&#34;整洁的嵌入式架构&#34;&gt;&lt;/a&gt;整洁的嵌入式架构&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;固件即对平台或硬件的强依赖代码，在固件和软件之间可以设置HAL（硬件抽象层），为它上层的软件提供服务，它可以帮助软件&lt;em&gt;脱离&lt;/em&gt;目标硬件平台来测试&lt;/li&gt;
&lt;li&gt;类似地，我们还可以引入OSAL（操作系统抽象层）来减少软件对操作系统的依赖&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;实现细节&#34;&gt;&lt;a href=&#34;#实现细节&#34; class=&#34;headerlink&#34; title=&#34;实现细节&#34;&gt;&lt;/a&gt;实现细节&lt;/h2&gt;&lt;p&gt;那么什么算是实现细节呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数据库&lt;/strong&gt;，数据的组织结构和模型都是系统架构的一部分，但是从磁盘中存储&amp;#x2F;读取数据的机制或手段则没那么重要，就比如数据库或静态文件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Web&lt;/strong&gt;，Web只是UI，只是一种I&amp;#x2F;O设备&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;应用框架&lt;/strong&gt;，框架被创造的目的是解决作者遇到的问题，它要求我们去阅读文档，按照作者的要求整合到我们的应用中，可以使用但是不要被框架绑定&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;案例：视频销售网站&#34;&gt;&lt;a href=&#34;#案例：视频销售网站&#34; class=&#34;headerlink&#34; title=&#34;案例：视频销售网站&#34;&gt;&lt;/a&gt;案例：视频销售网站&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;系统架构设计的第一步是识别系统中的各种角色和用例&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;–END–&lt;/em&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
