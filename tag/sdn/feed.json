{
    "version": "https://jsonfeed.org/version/1",
    "title": "Shenlvmeng's Blog • All posts by \"sdn\" tag",
    "description": "Be sharp, my friend.",
    "home_page_url": "http://shenlvmeng.github.com/blog",
    "items": [
        {
            "id": "http://shenlvmeng.github.com/blog/2014/11/17/cbench-usage/",
            "url": "http://shenlvmeng.github.com/blog/2014/11/17/cbench-usage/",
            "title": "cbench安装与使用说明",
            "date_published": "2014-11-17T11:13:37.000Z",
            "content_html": "<p>cbench用来测试OpenFlow控制器或是OpenFlow网络虚拟化平台实在是太合适了。它的原理是不断循环产生“新的”流（<em>注意是新的</em>），从而用大量的packet-in消息检验控制器或是平台的抗压能力。通过发送packet-in消息和查看flow-mod消息下发的统计消息，将性能指标呈现给用户。</p>\n<p>cbench毕竟不是mininet，它的着眼点在调试。所以，虽然cbench也能虚拟出许多多台交换机和大批主机，但是开放的参数很少。不过，这对于测试已经足够了。</p>\n<p>安装配置过程如下，官网上的过程可以照搬。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#第一步：安装依赖包 无脑apt-get即可</span></span><br><span class=\"line\">$ sudo apt-get install autoconf automake libtool libsnmp-dev libpcap-dev</span><br><span class=\"line\"><span class=\"comment\">#第二步：安装oflops 因为cbench是在oflops环境下的 不要装在openflow目录下 同目录下即可</span></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> git://gitosis.stanford.edu/oflops.git</span><br><span class=\"line\"><span class=\"comment\">#进入目录 完成更新</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> oflops; git submodule init &amp;amp;&amp;amp; git submodule update</span><br><span class=\"line\"><span class=\"comment\">#第三步：安装openflow环境 接着进入分支</span></span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> git://gitosis.stanford.edu/openflow.git</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> openflow; git checkout -b release/1.0.0 remotes/origin/release/1.0.0</span><br><span class=\"line\"><span class=\"comment\">#第四步 安装libconfig包 对cbench编译配置</span></span><br><span class=\"line\">$ wget http://hyperrealm.com/libconfig/libconfig-1.4.9.tar.gz</span><br><span class=\"line\">$ tar -xvzf libconfig-1.4.9.tar.gz</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> libconfig-1.4.9</span><br><span class=\"line\">$ ./configure</span><br><span class=\"line\">$ sudo make &amp;amp;&amp;amp; sudo make install //容易出错权限不够 sudo 或者 sudo <span class=\"built_in\">chmod</span> 777 别忘了改回去</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> ../../netfpga-packet-generator-c-library/</span><br><span class=\"line\">$ sudo ./autogen.sh &amp;amp;&amp;amp; sudo ./configure &amp;amp;&amp;amp; sudo make //同理</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> ..</span><br><span class=\"line\"><span class=\"comment\">#第五步 可以开始安装cbench了</span></span><br><span class=\"line\">$ sh ./boot.sh ; ./configure --with-openflow-src-dir=&amp;lt;absolute path to openflow branch&amp;gt;; make</span><br><span class=\"line\">$ sudo make install //同理 安装好即可出现启动文件</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> cbench</span><br></pre></td></tr></table></figure>\n<p>以上的步骤中容易出两种情况的错误：</p>\n<ul>\n<li>权限不够，make报错 “xxxxxx Permission denied”，&#x2F;usr&#x2F;local&#x2F;lib,include,share会出现</li>\n<li>依赖包补全，make报错“xxx: command not found”，笔者的错误是g++不识别，sudo apt-get install g++ 再次make就好了<br>至此，cbench安装完成。可以使用cbench的各种参数完成你的仿真了。下面这行代码即可执行仿真命令（前提是本机上6633端口得有控制器），由于cbench有默认参数，所以这也是可以执行的。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./cbench</span><br><span class=\"line\">$ ./cbench -h</span><br></pre></td></tr></table></figure>\ncbench的参数就都能看到了。参数的详细介绍可以见<a href=\"http://www.sdnap.com/sdnap-post/4007.html\">SDNAP</a></li>\n</ul>\n<p>要想进行测试，还需要安装控制器。如POX或者Floodlight等。这比较简单，POX：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> pox</span><br><span class=\"line\"><span class=\"comment\"># 启动</span></span><br><span class=\"line\">$ ./pox.py openflow.of_01 forwarding.l2_learning</span><br></pre></td></tr></table></figure>\n<p>Floodlight要稍复杂一点：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 先安装操作环境，Floodlight是用Java写的所以要有标准JDK和构建工具ant Eclipse可选</span></span><br><span class=\"line\">$ sudo apt-get install build-essential default-jdk ant python-dev eclipse</span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> http://github.com/Floodlight/Floodlight.git  //文件较大</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> Floodlight</span><br><span class=\"line\">$ checkout fl-last-passed-build</span><br><span class=\"line\">$ ant</span><br><span class=\"line\"><span class=\"comment\"># 启动</span></span><br><span class=\"line\">$ java -jar target/Flooglight.jar</span><br></pre></td></tr></table></figure>\n<p>根据个人经验，如果之前做个SDN的相关实验，有可能报错端口6633已被占用。这很可能是ovs-controller的开机启动导致的。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ps -aux | grep controller //杀干净吧</span><br><span class=\"line\">$ <span class=\"built_in\">kill</span> xxxx(进程号)</span><br></pre></td></tr></table></figure>\n<p>不过Floodlight的服务器可能还会启动不成功，不过并不影响实验。在Floodlight&#x2F;src&#x2F;main&#x2F;resources&#x2F;Floodlightdefault.properties中可以更改Floodlight的默认配置。</p>\n<p>控制器也安好后，可以根据你的需要来启动测试了。cbench存储了范例，便是如下一行代码的结果。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./cbench -c localhost -p 6633 -m 10000 -l 10 -s 16 -M 1000 -t</span><br></pre></td></tr></table></figure>\n<p>-M 后的参数是不同MAC地址的主机数。根据个人体验，主机数较多点仿真出来的效果会比较好。</p>\n",
            "tags": [
                "SDN",
                "cbench",
                "安装说明"
            ]
        }
    ]
}