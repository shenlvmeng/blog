{
    "version": "https://jsonfeed.org/version/1",
    "title": "Shenlvmeng's Blog • All posts by \"结构化数据\" tag",
    "description": "Be sharp, my friend.",
    "home_page_url": "http://shenlvmeng.github.com/blog",
    "items": [
        {
            "id": "http://shenlvmeng.github.com/blog/2018/04/17/quill-md/",
            "url": "http://shenlvmeng.github.com/blog/2018/04/17/quill-md/",
            "title": "使用quill搭建文本编辑器",
            "date_published": "2018-04-17T15:45:03.000Z",
            "content_html": "<blockquote>\n<p>官网：<a href=\"https://quilljs.com/\">https://quilljs.com</a></p>\n</blockquote>\n<p>quill可以是一个文本编辑器JS库或是文本编辑器构建库。它提供了结构化数据方式用脱离语言的方式描述编辑器内容，同时预置了内置插件，支持自定义插件，有助于在此基础上进行和业务相关编辑器开发。</p>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>关于<code>contenteditable</code>属性，<code>selection</code>对象和<code>range</code>对象的介绍，可以参考<a href=\"https://caelumtian.github.io/2017/08/21/%E5%88%A9%E7%94%A8javascript%E6%90%AD%E5%BB%BA%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/\">这篇文章</a>。</p>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> editor = <span class=\"keyword\">new</span> <span class=\"title class_\">Quill</span>(<span class=\"string\">&quot;#container&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 或是直接传入DOM对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> editor = <span class=\"keyword\">new</span> <span class=\"title class_\">Quill</span>(<span class=\"variable language_\">document</span>.<span class=\"property\">body</span>);</span><br></pre></td></tr></table></figure>\n\n<p>quill通常使用上面的方式初始化。在初始化时，支持用丰富的配置项定义生成的编辑器。下面是一个例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\">    <span class=\"attr\">debug</span>: <span class=\"string\">&#x27;info&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">modules</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">toolbar</span>: <span class=\"string\">&#x27;#toolbar&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">placeholder</span>: <span class=\"string\">&#x27;Tell a story...&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">readOnly</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">them</span>: <span class=\"string\">&#x27;snow&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> editor = <span class=\"keyword\">new</span> <span class=\"title class_\">Quill</span>(<span class=\"string\">&#x27;#container&#x27;</span>, options);</span><br></pre></td></tr></table></figure>\n\n<p>Quill支持的配置项有：</p>\n<ul>\n<li><code>bounds</code>，Quill UI元素的限制范围，默认<code>document.body</code></li>\n<li><code>debug</code>，是<code>Quill.debug</code>的快捷方式，用于打印调试信息，默认级别为<code>warn</code></li>\n<li><code>formats</code>，Quill中允许出现的格式，默认为<a href=\"https://quilljs.com/docs/formats/\">所有格式</a>，它和toolbar是解耦的</li>\n<li><code>modules</code>，注册在Quill中的功能模块和与之对应的配置信息，Quill会有默认配置</li>\n<li><code>placeholder</code>，提示信息</li>\n<li><code>readOnly</code>，是否可写</li>\n<li><code>scrollContainer</code>，编辑器滚动条的父级，默认为编辑器本身</li>\n<li><code>strict</code>，版本更新配置，默认为<code>true</code></li>\n<li><code>theme</code>，整体外观，默认为<code>snow</code>，<code>bubble</code>可选</li>\n</ul>\n<h3 id=\"支持的文本格式\"><a href=\"#支持的文本格式\" class=\"headerlink\" title=\"支持的文本格式\"></a>支持的文本格式</h3><p>分为<strong>行内</strong>，<strong>块级</strong>，<strong>嵌入式</strong>三大类。</p>\n<ul>\n<li>行内：加粗&#x2F;背景色&#x2F;字体颜色&#x2F;字体&#x2F;行内代码&#x2F;斜体&#x2F;下划线&#x2F;删除线&#x2F;链接&#x2F;字体大小&#x2F;上、下标</li>\n<li>块级：引用&#x2F;标题&#x2F;行首缩进&#x2F;有序、无序列表&#x2F;对齐&#x2F;文本方向&#x2F;代码块</li>\n<li>嵌入式：音频&#x2F;视频&#x2F;公式</li>\n</ul>\n<h3 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h3><p>按照由浅入深，分为<strong>修改内容</strong>，<strong>修改格式</strong>，<strong>选取</strong>，<strong>编辑器本身</strong>，<strong>事件</strong>，<strong>数据模型操作</strong>，<strong>拓展</strong>几大类。涉及到内容修改的都会返回代表更改的delta。</p>\n<h4 id=\"修改内容\"><a href=\"#修改内容\" class=\"headerlink\" title=\"修改内容\"></a>修改内容</h4><p>涉及到修改时，最后一个参数都可以选择<code>user</code>，<code>api</code>，<code>silent</code>。<code>user</code>类型下，disabled时会没有效果。</p>\n<ul>\n<li><code>deleteText</code>，输入起始点和长度，删除特定范围的内容，返回delta类型数据。如<code>quill.deleteText(6, 4)</code></li>\n<li><code>getContents</code>，获取delta格式的编辑器内容，如<code>quill.getContents()</code></li>\n<li><code>getLength</code>，获取文本长度，quill默认会有一个空行，所以默认返回1</li>\n<li><code>getText</code>，获取文本内容，跳过非文本如音视频元素，如<code>quill.getText(0, 10)</code></li>\n<li><code>insertEmbed</code>，输入位置，类型，值，插入嵌入式内容，如<code>quill.insertEmbed(10, &#39;image&#39;, &#39;https://quilljs.com/images/cloud.png&#39;)</code></li>\n<li><code>insertText</code>，插入文本，可带格式。如下<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">quill.<span class=\"title function_\">insertText</span>(<span class=\"number\">0</span>, <span class=\"string\">&#x27;Hello&#x27;</span>, <span class=\"string\">&#x27;bold&#x27;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">quill.<span class=\"title function_\">insertText</span>(<span class=\"number\">5</span>, <span class=\"string\">&#x27;Quill&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;color&#x27;</span>: <span class=\"string\">&#x27;#ffff00&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;italic&#x27;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n<li><code>setContent</code>，输入delta，重设编辑器内容，需以<code>\\n</code>结尾。如下：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">quill.<span class=\"title function_\">setContents</span>([</span><br><span class=\"line\">  &#123; <span class=\"attr\">insert</span>: <span class=\"string\">&#x27;Hello &#x27;</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">insert</span>: <span class=\"string\">&#x27;World!&#x27;</span>, <span class=\"attr\">attributes</span>: &#123; <span class=\"attr\">bold</span>: <span class=\"literal\">true</span> &#125; &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">insert</span>: <span class=\"string\">&#x27;\\n&#x27;</span> &#125;</span><br><span class=\"line\">]);</span><br></pre></td></tr></table></figure></li>\n<li><code>setText</code>，设置文本，返回代表改变的delta</li>\n<li><code>updateContent</code>，输入delta，更新内容，返回代表更新的delta</li>\n</ul>\n<h4 id=\"修改格式\"><a href=\"#修改格式\" class=\"headerlink\" title=\"修改格式\"></a>修改格式</h4><ul>\n<li><code>format</code>，设置用户当前所选的文本格式，如<code>quill.format(&#39;color&#39;, &#39;red&#39;);</code></li>\n<li><code>formatLine</code>，设置给定选择当前整行样式，使用类似<code>format</code>的方法设置样式，也支持直接传入格式对象。类似<code>quill.formatLine(1, 2, &#123; &#39;align&#39;: &#39;right&#39;&#125;)</code></li>\n<li><code>formatText</code>，设置给定范围内文本格式，类似<code>formatLine</code></li>\n<li><code>getFormat</code>，获取给定范围内的格式，没有输入时，返回当前选择的格式</li>\n<li><code>removeFormat</code>，移除范围内样式</li>\n</ul>\n<h4 id=\"选取\"><a href=\"#选取\" class=\"headerlink\" title=\"选取\"></a>选取</h4><ul>\n<li><code>getBounds(index, length = 0)</code>，返回的top、width、height、left相对于编辑器容器而言</li>\n<li><code>getSelection(focus = false)</code>，返回用户的选取范围，由index、length组成</li>\n<li><code>setSelection(index, length = 0)</code>，设置选区范围，会自动focus，输入null会自动blur</li>\n</ul>\n<h4 id=\"编辑器本身\"><a href=\"#编辑器本身\" class=\"headerlink\" title=\"编辑器本身\"></a>编辑器本身</h4><ul>\n<li><code>blur</code>，失焦</li>\n<li><code>disable</code>，禁用</li>\n<li><code>enable(enabled = false)</code>，启用</li>\n<li><code>focus</code>，聚焦</li>\n<li><code>hasFocus</code>，是否聚焦</li>\n<li><code>update</code>，同步用户改动，协同工作时常用</li>\n</ul>\n<h4 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h4><p>事件通过<code>on</code>方法绑定在quill对象上。</p>\n<ul>\n<li><code>text-change</code>，quill内的内容改变时触发，回调函数可以获取delta、oldContent，source。通常来自’user’，<code>source</code>为’silent’时，该事件不会触发。</li>\n<li><code>selection-change</code>，回调函数可以获取range，oldRange，source</li>\n<li><code>editor-change</code>，上述两个事件触发时触发，即使source为<code>silent</code></li>\n</ul>\n<p>除了<code>on</code>方法，还有<code>once</code>用于绑定一次和<code>off</code>方法解绑。</p>\n<h4 id=\"数据模型操作\"><a href=\"#数据模型操作\" class=\"headerlink\" title=\"数据模型操作\"></a>数据模型操作</h4><ul>\n<li><code>find</code>，寻找DOM节点对应的quill或Blot对象</li>\n<li><code>getIndex</code>，返回文档开头到给定Blot的偏移量</li>\n<li><code>getLeafBlot</code>，返回给定位置的Blot</li>\n<li><code>getLine</code>，返回给定位置整行的Blot</li>\n<li><code>getLines</code>，返回给定范围的Blot</li>\n</ul>\n<h4 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h4><ul>\n<li><code>debug</code>，设置调试信息级别，<code>info | log | warn | error</code></li>\n<li><code>import</code>，导出quill相关库，输入相对于quill的路径<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Parchment</span> = <span class=\"title class_\">Quill</span>.<span class=\"keyword\">import</span>(<span class=\"string\">&#x27;parchment&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Delta</span> = <span class=\"title class_\">Quill</span>.<span class=\"keyword\">import</span>(<span class=\"string\">&#x27;delta&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Toolbar</span> = <span class=\"title class_\">Quill</span>.<span class=\"keyword\">import</span>(<span class=\"string\">&#x27;modules/toolbar&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Link</span> = <span class=\"title class_\">Quill</span>.<span class=\"keyword\">import</span>(<span class=\"string\">&#x27;formats/link&#x27;</span>);</span><br></pre></td></tr></table></figure></li>\n<li><code>register</code>，注册module到quill中，有下面几种用法<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Quill</span>.<span class=\"title function_\">register</span>(<span class=\"attr\">format</span>: <span class=\"title class_\">Attributor</span> | <span class=\"title class_\">BlotDefinintion</span>, <span class=\"attr\">supressWarning</span>: <span class=\"title class_\">Boolean</span> = <span class=\"literal\">false</span>)</span><br><span class=\"line\"><span class=\"title class_\">Quill</span>.<span class=\"title function_\">register</span>(<span class=\"attr\">path</span>: <span class=\"title class_\">String</span>, <span class=\"attr\">def</span>: any, <span class=\"attr\">supressWarning</span>: <span class=\"title class_\">Boolean</span> = <span class=\"literal\">false</span>)</span><br><span class=\"line\"><span class=\"title class_\">Quill</span>.<span class=\"title function_\">register</span>(<span class=\"attr\">defs</span>: &#123; [<span class=\"title class_\">String</span>]: any &#125;, <span class=\"attr\">supressWarning</span>: <span class=\"title class_\">Boolean</span> = <span class=\"literal\">false</span>)</span><br></pre></td></tr></table></figure></li>\n<li><code>addContainer</code>，新增容器并返回</li>\n<li><code>enable/disable</code>，启用、禁用编辑器</li>\n</ul>\n<h3 id=\"delta\"><a href=\"#delta\" class=\"headerlink\" title=\"delta\"></a>delta</h3><p><a href=\"https://github.com/quilljs/delta\">delta</a>是quill中最重要的概念。据<a href=\"https://quilljs.com/guides/designing-the-delta-format/\">介绍</a>所说，quill是“第一个”使用delta（结构化数据）这个概念的。不同于其他大多数文本编辑器需要反复执行修改编辑器中的HTML文档。quill维护一个delta数组，使用JSON数据的方式描述了文档的内容。</p>\n<p>使用delta一词，并没有问题，因为可以理解成文档本身是由空内容 + delta一点点得到的。delta主要有两个特性：</p>\n<ul>\n<li>权威性，delta和对应的生成结果是一一对应的，没有歧义</li>\n<li>压缩性，delta中描述的操作是经过压缩后的</li>\n</ul>\n<p>delta中的操作可以分为增、删、修改格式，分别对应<code>insert</code>，<code>delete</code>和<code>retain</code>操作。对文本编辑器的一次改动（真实世界中的改动行为）只可能涉及上述三种行为的一种（Quill并不允许Ctrl多处选中）。其中retain的意义类似于光标的移动，它使得这三种操作并不需要使用index描述，便于Quill做优化和压缩。</p>\n<p>delta的操作实际上是对parchment进行的，它类似于vdom，使用JS的数据结构对文本编辑器中可能出现的各元素进行了抽象，称作Blot。Blot有scroll，inline、block、text，break几种。父Blot下必须包含至少一个子Blot，而所有的Blot都包含在一个scroll Blot下。文本编辑器中特定格式的文本块都用特定的Blot表示，每个这样的Blot都必须继承自上面的一种Blot类型。就像通过下面的方式继承了Blot，就可以使对应的行内元素得到对应的编辑器样式元素对应起来，并使用在后面的编辑器里。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Inline</span> = <span class=\"title class_\">Quill</span>.<span class=\"keyword\">import</span>(<span class=\"string\">&#x27;blots/inline&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BoldBlot</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Inline</span> &#123; &#125;</span><br><span class=\"line\"><span class=\"title class_\">BoldBlot</span>.<span class=\"property\">blotName</span> = <span class=\"string\">&#x27;bold&#x27;</span>;</span><br><span class=\"line\"><span class=\"title class_\">BoldBlot</span>.<span class=\"property\">tagName</span> = <span class=\"string\">&#x27;strong&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ItalicBlot</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Inline</span> &#123; &#125;</span><br><span class=\"line\"><span class=\"title class_\">ItalicBlot</span>.<span class=\"property\">blotName</span> = <span class=\"string\">&#x27;italic&#x27;</span>;</span><br><span class=\"line\"><span class=\"title class_\">ItalicBlot</span>.<span class=\"property\">tagName</span> = <span class=\"string\">&#x27;em&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Quill</span>.<span class=\"title function_\">register</span>(<span class=\"title class_\">BoldBlot</span>);</span><br><span class=\"line\"><span class=\"title class_\">Quill</span>.<span class=\"title function_\">register</span>(<span class=\"title class_\">ItalicBlot</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// in your editor</span></span><br><span class=\"line\"></span><br><span class=\"line\">quill.<span class=\"title function_\">insertText</span>(<span class=\"number\">0</span>, <span class=\"string\">&#x27;Test&#x27;</span>, &#123; <span class=\"attr\">bold</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\">quill.<span class=\"title function_\">formatText</span>(<span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"string\">&#x27;italic&#x27;</span>, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n\n<p>类似地，我们定义一个Link Blot。它相比bold，italic不同的是，它需要一个string而不是boolean初始化。因此需要定义<code>create</code>和<code>format</code>两个函数。其中create在构造Blot时使用，value即输入的href，formats将用户的format字段和真实DOM的字段相关联。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LinkBlot</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Inline</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">create</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> node = <span class=\"variable language_\">super</span>.<span class=\"title function_\">create</span>();</span><br><span class=\"line\">    <span class=\"comment\">// Sanitize url value if desired</span></span><br><span class=\"line\">    node.<span class=\"title function_\">setAttribute</span>(<span class=\"string\">&#x27;href&#x27;</span>, value);</span><br><span class=\"line\">    <span class=\"comment\">// Okay to set other non-format related attributes</span></span><br><span class=\"line\">    <span class=\"comment\">// These are invisible to Parchment so must be static</span></span><br><span class=\"line\">    node.<span class=\"title function_\">setAttribute</span>(<span class=\"string\">&#x27;target&#x27;</span>, <span class=\"string\">&#x27;_blank&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">formats</span>(<span class=\"params\">node</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// We will only be called with a node already</span></span><br><span class=\"line\">    <span class=\"comment\">// determined to be a Link blot, so we do</span></span><br><span class=\"line\">    <span class=\"comment\">// not need to check ourselves</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> node.<span class=\"title function_\">getAttribute</span>(<span class=\"string\">&#x27;href&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">LinkBlot</span>.<span class=\"property\">blotName</span> = <span class=\"string\">&#x27;link&#x27;</span>;</span><br><span class=\"line\"><span class=\"title class_\">LinkBlot</span>.<span class=\"property\">tagName</span> = <span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Quill</span>.<span class=\"title function_\">register</span>(<span class=\"title class_\">LinkBlot</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>定义引用这样的块级元素时，对应地继承Block Blot即可。和inline Blot不同的是，Block Blot无法嵌套，在对已有的块级元素应用时会替换而不是嵌套绑定在元素上。以Header元素为例，可以指定tagName为一个数组，可以在format时使用1、2的方式指定具体哪种tag。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HeaderBlot</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Block</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">formats</span>(<span class=\"params\">node</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">HeaderBlot</span>.<span class=\"property\">tagName</span>.<span class=\"title function_\">indexOf</span>(node.<span class=\"property\">tagName</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">HeaderBlot</span>.<span class=\"property\">blotName</span> = <span class=\"string\">&#x27;header&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// Medium only supports two header sizes, so we will only demonstrate two,</span></span><br><span class=\"line\"><span class=\"comment\">// but we could easily just add more tags into this array</span></span><br><span class=\"line\"><span class=\"title class_\">HeaderBlot</span>.<span class=\"property\">tagName</span> = [<span class=\"string\">&#x27;H1&#x27;</span>, <span class=\"string\">&#x27;H2&#x27;</span>];</span><br></pre></td></tr></table></figure>\n\n<p>类似的，可以在插入embed Blot，这种类型效果是插入在元素中间的新的tag。如Image。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">BlockEmbed</span> = <span class=\"title class_\">Quill</span>.<span class=\"keyword\">import</span>(<span class=\"string\">&#x27;blots/block/embed&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ImageBlot</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">BlockEmbed</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">create</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> node = <span class=\"variable language_\">super</span>.<span class=\"title function_\">create</span>();</span><br><span class=\"line\">    node.<span class=\"title function_\">setAttribute</span>(<span class=\"string\">&#x27;alt&#x27;</span>, value.<span class=\"property\">alt</span>);</span><br><span class=\"line\">    node.<span class=\"title function_\">setAttribute</span>(<span class=\"string\">&#x27;src&#x27;</span>, value.<span class=\"property\">url</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">value</span>(<span class=\"params\">node</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">alt</span>: node.<span class=\"title function_\">getAttribute</span>(<span class=\"string\">&#x27;alt&#x27;</span>),</span><br><span class=\"line\">      <span class=\"attr\">url</span>: node.<span class=\"title function_\">getAttribute</span>(<span class=\"string\">&#x27;src&#x27;</span>)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">ImageBlot</span>.<span class=\"property\">blotName</span> = <span class=\"string\">&#x27;image&#x27;</span>;</span><br><span class=\"line\"><span class=\"title class_\">ImageBlot</span>.<span class=\"property\">tagName</span> = <span class=\"string\">&#x27;img&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用时</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> range = quill.<span class=\"title function_\">getSelection</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">quill.<span class=\"title function_\">insertText</span>(range.<span class=\"property\">index</span>, <span class=\"string\">&#x27;\\n&#x27;</span>, <span class=\"title class_\">Quill</span>.<span class=\"property\">sources</span>.<span class=\"property\">USER</span>);</span><br><span class=\"line\">quill.<span class=\"title function_\">insertEmbed</span>(range.<span class=\"property\">index</span> + <span class=\"number\">1</span>, <span class=\"string\">&#x27;image&#x27;</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">alt</span>: <span class=\"string\">&#x27;Quill Cloud&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;https://quilljs.com/0.20/assets/images/cloud.png&#x27;</span></span><br><span class=\"line\">&#125;, <span class=\"title class_\">Quill</span>.<span class=\"property\">sources</span>.<span class=\"property\">USER</span>);</span><br><span class=\"line\">quill.<span class=\"title function_\">setSelection</span>(range.<span class=\"property\">index</span> + <span class=\"number\">2</span>, <span class=\"title class_\">Quill</span>.<span class=\"property\">sources</span>.<span class=\"property\">SILENT</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"modules\"><a href=\"#modules\" class=\"headerlink\" title=\"modules\"></a>modules</h3><p>quill中的module位于quill的应用层。可以通过定制modules，利用quill的功能；或是更改quill内置module，修改quill本身的行为和功能。clipboard、keyboard、history三个module是quill默认加载的。用户完全可以根据业务需求定义自己的module。官网给了<a href=\"https://quilljs.com/guides/building-a-custom-module/\">简单的例子</a>展示了module的大致骨架：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Quill</span>.<span class=\"title function_\">register</span>(<span class=\"string\">&#x27;modules/counter&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">quill, options</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> container = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(options.<span class=\"property\">container</span>);</span><br><span class=\"line\">  quill.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;text-change&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> text = quill.<span class=\"title function_\">getText</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options.<span class=\"property\">unit</span> === <span class=\"string\">&#x27;word&#x27;</span>) &#123;</span><br><span class=\"line\">      container.<span class=\"property\">innerText</span> = text.<span class=\"title function_\">split</span>(<span class=\"regexp\">/\\s+/</span>).<span class=\"property\">length</span> + <span class=\"string\">&#x27; words&#x27;</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      container.<span class=\"property\">innerText</span> = text.<span class=\"property\">length</span> + <span class=\"string\">&#x27; characters&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> quill = <span class=\"keyword\">new</span> <span class=\"title class_\">Quill</span>(<span class=\"string\">&#x27;#editor&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">modules</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">counter</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">container</span>: <span class=\"string\">&#x27;#counter&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">unit</span>: <span class=\"string\">&#x27;word&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>只需要定义一个可以接收quill对象的函数即可，在函数内部利用quill事件监听即可完成应用层的建设。</p>\n<h3 id=\"Toolbar和ClipBoard\"><a href=\"#Toolbar和ClipBoard\" class=\"headerlink\" title=\"Toolbar和ClipBoard\"></a>Toolbar和ClipBoard</h3><p><a href=\"https://quilljs.com/docs/modules/toolbar/\">Toolbar</a>和<a href=\"https://quilljs.com/docs/modules/clipboard/\">Clipboard</a>是Quill内置的两个module，对你构建自己的文本编辑器有很大的借鉴意义。</p>\n<p>Toolbar用来定制工具栏上的按钮，是自定义编辑器（尤其是业务相关的编辑器）逃不开的一部分。它有几个基本配置：</p>\n<ul>\n<li><code>container</code>，放置工具栏的DOM容器</li>\n<li><code>handler</code>，点击ToolBar图标时注册的函数，传入Blot的value，通过调用Quill的API完成功能。也可以通过下面方式注册。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Handlers can also be added post initialization</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> toolbar = quill.<span class=\"title function_\">getModule</span>(<span class=\"string\">&#x27;toolbar&#x27;</span>);</span><br><span class=\"line\">toolbar.<span class=\"title function_\">addHandler</span>(<span class=\"string\">&#x27;image&#x27;</span>, showImageUI);</span><br></pre></td></tr></table></figure>\n\n<p>在遇到从别的文本编辑器拷贝内容过来的情况时，需要修改ClipBoard Module中<code>addMatcher</code>的定义。这个方法向ClipBoard中注册了新的Matcher匹配拷贝过来的HTML文本，将之转换为对应的Blot。如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">quill.<span class=\"property\">clipboard</span>.<span class=\"title function_\">addMatcher</span>(<span class=\"title class_\">Node</span>.<span class=\"property\">TEXT_NODE</span>, <span class=\"keyword\">function</span>(<span class=\"params\">node, delta</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Delta</span>().<span class=\"title function_\">insert</span>(node.<span class=\"property\">data</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Interpret a &lt;b&gt; tag as bold</span></span><br><span class=\"line\">quill.<span class=\"property\">clipboard</span>.<span class=\"title function_\">addMatcher</span>(<span class=\"string\">&#x27;.custom-class&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">node, delta</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> delta.<span class=\"title function_\">compose</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Delta</span>().<span class=\"title function_\">retain</span>(delta.<span class=\"title function_\">length</span>(), &#123; <span class=\"attr\">bold</span>: <span class=\"literal\">true</span> &#125;));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>或者在configuration中，注入新定义的matcher即可。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> quill = <span class=\"keyword\">new</span> <span class=\"title class_\">Quill</span>(<span class=\"string\">&#x27;#editor&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">modules</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">clipboard</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">matchers</span>: [</span><br><span class=\"line\">        [<span class=\"string\">&#x27;B&#x27;</span>, customMatcherA],</span><br><span class=\"line\">        [<span class=\"title class_\">Node</span>.<span class=\"property\">TEXT_NODE</span>, customMatcherB]</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"https://quilljs.com/docs/\">Quill文档</a></li>\n<li><a href=\"https://caelumtian.github.io/2017/08/21/%E5%88%A9%E7%94%A8javascript%E6%90%AD%E5%BB%BA%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/\">利用javascript搭建富文本编辑器</a></li>\n</ul>\n",
            "tags": [
                "文本编辑器",
                "quill",
                "结构化数据"
            ]
        }
    ]
}