{
    "version": "https://jsonfeed.org/version/1",
    "title": "Shenlvmeng's Blog • All posts by \"electron\" tag",
    "description": "Be sharp, my friend.",
    "home_page_url": "http://shenlvmeng.github.com/blog",
    "items": [
        {
            "id": "http://shenlvmeng.github.com/blog/2019/09/01/roadmap-refactor-log/",
            "url": "http://shenlvmeng.github.com/blog/2019/09/01/roadmap-refactor-log/",
            "title": "roadmap工程化改造",
            "date_published": "2019-09-01T09:25:31.000Z",
            "content_html": "<blockquote>\n<p><a href=\"https://github.com/shenlvmeng/roadmap\">roadmap</a>最近使用typescript重构到了1.0.0版本，下面是一些记录</p>\n</blockquote>\n<p>1.0.0项目由两部分组成：<strong>Electron程序</strong>、<strong>web网页</strong>。两者不直接关联，通过配置文件<code>roadmap.config.json</code>解耦。</p>\n<p>另外，Electron程序和web网页属于两套开发流程，互不干扰，在使用配置文件作为接口的基础上，可以独立开发和升级。</p>\n<h2 id=\"Electron程序\"><a href=\"#Electron程序\" class=\"headerlink\" title=\"Electron程序\"></a>Electron程序</h2><p>提供给用户程序，通过输入地图配置、gpx文件、定位图片物料，产出<code>roadmap.config.json</code>。整体使用Electron + webpack + TypeScript的脚手架。</p>\n<p>Electron工作重点在gpx文件转换和图片压缩：</p>\n<ul>\n<li>gpx文件使用<code>parse-gpx</code>库解析，产出JSON字符串</li>\n<li>图片压缩，保留EXIF信息的图片压缩，产出压缩后的图片</li>\n</ul>\n<p>最后加上用户的输入，综合产出<code>roadmap.config.json</code>。</p>\n<h3 id=\"gpx解析\"><a href=\"#gpx解析\" class=\"headerlink\" title=\"gpx解析\"></a>gpx解析</h3><blockquote>\n<p>见src&#x2F;main&#x2F;gpx2json.ts</p>\n</blockquote>\n<p>使用<code>parse-gpx</code>库解析，将经纬度坐标换算到百度地图坐标，产出保留经纬度、海拔信息的结构体，储存为JSON文件，便于网页读取。</p>\n<h3 id=\"图片压缩\"><a href=\"#图片压缩\" class=\"headerlink\" title=\"图片压缩\"></a>图片压缩</h3><blockquote>\n<p>见src&#x2F;renderer&#x2F;image.ts</p>\n</blockquote>\n<p>带有EXIF信息的图片通常体积很大，不适合直接放在网页，会严重拖慢网页加载速度。而经过调研，常见的图片压缩工具都不会保留图片EXIF信息，即使保留也不会保留我们需要的经纬度、海拔信息。</p>\n<p>另外，满足要求的图片压缩工具（如Adobe PhotoShop）没法整合在整个流程中。因此需要自己实现。</p>\n<p>思路是：</p>\n<ul>\n<li>读取原始图片中的EXIF信息</li>\n<li>借助canvas压缩图片体积、同时调整图片尺寸</li>\n<li>再度组合EXIF信息和压缩后的图片，得到保留完整EXIF信息的压缩图片</li>\n</ul>\n<h3 id=\"网页模板\"><a href=\"#网页模板\" class=\"headerlink\" title=\"网页模板\"></a>网页模板</h3><p>使用<code>html-loader</code>加载已经产出好的<code>output.html</code>，读取为字符串，直接输出到指定目录即可。</p>\n<p>网页模板的开发流程见portal一节。</p>\n<h3 id=\"产物\"><a href=\"#产物\" class=\"headerlink\" title=\"产物\"></a>产物</h3><blockquote>\n<p>样例见src&#x2F;test&#x2F;portal</p>\n</blockquote>\n<p>产物生成在桌面的roadmap-output文件夹，<strong>新生成的文件夹会覆盖老的</strong>。内容如下：</p>\n<ul>\n<li><code>index.html</code> 目标网页</li>\n<li><code>roadmap.config.json</code> 配置信息</li>\n<li><code>data</code><ul>\n<li><code>xx.json</code> gpx内容</li>\n<li><code>images</code> 图片信息</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"roadmap-config-json\"><a href=\"#roadmap-config-json\" class=\"headerlink\" title=\"roadmap.config.json\"></a>roadmap.config.json</h2><p>用于解耦。包含了基础的配置信息</p>\n<ul>\n<li>city 默认定位的中心城市</li>\n<li>title 网页标题</li>\n<li>gpxCount gpx路径数</li>\n<li>imgTitles 图片标题，不需要和图片一一对应</li>\n</ul>\n<h2 id=\"web网页（portal）\"><a href=\"#web网页（portal）\" class=\"headerlink\" title=\"web网页（portal）\"></a>web网页（portal）</h2><p>web网页为了便于迭代，使用了和Electron程序独立的webpack工程。在<code>config</code>中有独立的webpack配置，有独立的webpack调试、打包命令。</p>\n<p>工程位于<code>src/portal</code>，使用TypeScript。产物位于<code>portal</code>目录下，由Electron程序引用。</p>\n<p>在portal工程的webpack配置中：</p>\n<ul>\n<li>使用<code>MiniCssExtractPlugin</code>抽出css为css资源文件，加载时的避免样式闪动</li>\n<li>使用<code>HtmlWebpackInlineSourcePlugin</code>将引用的css和js文件inline，使得Electron程序只需引用一个HTML文件即可</li>\n<li>需要配置html-loader的<code>attr</code>，避免web网页在加载时，里面的<code>&lt;img&gt;</code>标签的<code>src</code>属性被解析</li>\n</ul>\n<h3 id=\"gps轨迹\"><a href=\"#gps轨迹\" class=\"headerlink\" title=\"gps轨迹\"></a>gps轨迹</h3><p>使用百度地图API绘制polyline实现，Electron程序生成的JSON中，已经提前转成百度地图坐标地址。</p>\n<h3 id=\"图床\"><a href=\"#图床\" class=\"headerlink\" title=\"图床\"></a>图床</h3><p>图片存储于免费的<a href=\"https://imgchr.com/\">路过图床</a>，因为不支持自定义访问路径，因此需要将上传图床后的路径保存为图片的title，在网页加载时，通过压缩图的title找到图片在图床上的对应地址（这个地方的设计待优化，所以暂时未开放）。</p>\n<p>图片的位置使用EXIF.js读取压缩图片的EXIF信息拿到，转换坐标后绘制在地图上。</p>\n",
            "tags": [
                "Electron",
                "TypeScript",
                "路书",
                "gpx解析",
                "EXIF"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2019/03/12/indexeddb-introduction/",
            "url": "http://shenlvmeng.github.com/blog/2019/03/12/indexeddb-introduction/",
            "title": "Electron应用数据库选型暨indexedDB扫盲",
            "date_published": "2019-03-11T16:01:59.000Z",
            "content_html": "<blockquote>\n<p>名谓扫盲，实则扫自己的盲</p>\n</blockquote>\n<h2 id=\"选型\"><a href=\"#选型\" class=\"headerlink\" title=\"选型\"></a>选型</h2><p>要说到最近的一个个人项目<a href=\"https://github.com/shenlvmeng/calendone\">calendone</a>，它是一个普通的Electron日历应用，有每日记录，定计划等功能，需要做数据持久化。数据量不大，不需要考虑性能问题。简单看了些方案。</p>\n<h3 id=\"SQLite\"><a href=\"#SQLite\" class=\"headerlink\" title=\"SQLite\"></a>SQLite</h3><ul>\n<li><strong>关系型数据库</strong>，具有关系型数据库的一切特性，事务遵循ACID属性。小巧轻便，有knex这样的库做ORM。</li>\n<li>是node原生模块，需要重新编译，而且有坑</li>\n</ul>\n<h3 id=\"NeDB\"><a href=\"#NeDB\" class=\"headerlink\" title=\"NeDB\"></a>NeDB</h3><ul>\n<li><strong>NoSQL类型数据库</strong>，可以实现本地存储，也可以作为内存存储</li>\n<li><strong>API是MongoDB的一个子集</strong></li>\n<li>纯js实现，一个文件对应一张表</li>\n</ul>\n<h3 id=\"Leveldb\"><a href=\"#Leveldb\" class=\"headerlink\" title=\"Leveldb\"></a>Leveldb</h3><ul>\n<li><strong>NoSQL类型数据库</strong>，支持内存和持久化存储</li>\n<li><strong>没有事务机制</strong>，默认按key查询，没有索引</li>\n<li>默认保存的不是js对象，而是字符串。如果要保存为对象，可以在level函数第二个参数加入<code>&#123; valueEncoding: &quot;json&quot; &#125;</code>来让保存的js对象以json的形式读取</li>\n</ul>\n<h3 id=\"Lowdb\"><a href=\"#Lowdb\" class=\"headerlink\" title=\"Lowdb\"></a>Lowdb</h3><ul>\n<li>基于Loadsh的<strong>纯JSON文件数据库</strong>，速度较慢</li>\n<li>不支持索引&#x2F;事务&#x2F;批量操作等数据库功能</li>\n</ul>\n<h3 id=\"indexedDB\"><a href=\"#indexedDB\" class=\"headerlink\" title=\"indexedDB\"></a>indexedDB</h3><ul>\n<li><strong>NoSQL数据库</strong>，浏览器自带，可以储存大量数据，容量为250MB以上</li>\n<li>支持事务，有版本号的概念。</li>\n<li>支持较多的字段类型</li>\n</ul>\n<p>综上考虑，最后采用浏览器自带的indexedDB，足够满足要求，漫游接入成本，升级方便，调试方便。</p>\n<h2 id=\"indexedDB介绍\"><a href=\"#indexedDB介绍\" class=\"headerlink\" title=\"indexedDB介绍\"></a>indexedDB介绍</h2><p>indexedDB脱胎于HTML本地存储。</p>\n<h3 id=\"HTML本地存储\"><a href=\"#HTML本地存储\" class=\"headerlink\" title=\"HTML本地存储\"></a>HTML本地存储</h3><p>上古时代中，HTML中持久化数据只有几种方法[1]：</p>\n<ul>\n<li>cookie。cookie的缺点很明显，最多只能存储4KB的数据，且会携带在同域名下每个HTTP请求的头部，明文传输（除非你使用SSL）。</li>\n<li>IE userData。微软在上世纪90年代的浏览器大战时推出的本地存储方案，允许每个页面最多存储64K数据，每个站点最多640K数据，它不是Web标准的一部分</li>\n<li>Flash cookie。它实际上和HTTP cookie并不是一回事，它的名字可能叫做”Flash本地存储”更为合适。考虑到Flash已经是要被淘汰的技术……</li>\n</ul>\n<p>本地存储出现后，有了下面一些标准化的更简单的方法：</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API\">Web Storage接口</a>，即localStorage和sessionStorage</li>\n<li>Web SQL，这是一个<strong>已经废弃</strong>的规范。就跟它的名字一样，它就是浏览器端的一个SQL数据库，可以执行SQL语句。由于语法和SQLite绑定过紧，后被标准组织废弃</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/IndexedDB_API\">indexedDB</a>，Web SQL的替代品，也是浏览器端的数据库，但他是No SQL的。有MongoDB使用体验的，对它就不会感到陌生。</li>\n</ul>\n<h3 id=\"indexedDB-1\"><a href=\"#indexedDB-1\" class=\"headerlink\" title=\"indexedDB\"></a>indexedDB</h3><p>indexedDB是浏览器提供的本地数据库，目标是持久化存储大量数据，提供类No SQL的增删改查体验。因此它有以下几点特色：</p>\n<ul>\n<li><strong>键值对存储</strong>，采用对象仓库（object store）存放数据，所有类型的数据都可以直接存入，包括 JavaScript 对象。</li>\n<li><strong>支持索引</strong>，indexedDB没有表列的概念，但可以建立索引，查询数据时使用id或索引搜索</li>\n<li><strong>支持事务</strong>，保证操作的原子性，事务中的任意一步失败，数据库都会回滚到操作事务前的状态</li>\n<li><strong>异步操作</strong>，indexedDB操作都是异步的，在执行数据增删改查时，不会影响界面性能。</li>\n<li><strong>同源限制</strong>，每一个数据库会关联创建它的域名。网页只能访问自身域名下的数据库，不能跨域访问数据库。</li>\n<li><strong>其他</strong>，包括存储空间大、支持二进制存储等…</li>\n</ul>\n<h4 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h4><ul>\n<li><strong>数据库</strong>，IDBDatabase对象类型，每个域名（协议 + 域名 + 端口）可以新建任意多个数据库。</li>\n<li><strong>对象仓库</strong>，IDBObjectStore对象类型，一个数据库包含若干个对象仓库，类似于关系型数据库中的表</li>\n<li><strong>数据记录</strong>，类型于关系型数据库中的行，但是只有主键和数据体两部分。<strong>数据体可以是任意数据类型，不限于对象</strong>。</li>\n<li><strong>索引</strong>，IDBIndex对象类型，数据记录里除了主键以外的搜索参照</li>\n<li><strong>事务</strong>，IDBTransaction数据类型，对数据库的增删改查都需要通过事务进行，执行结果通过<code>error</code>，<code>success</code>，<code>abort</code>事件回调拿到</li>\n</ul>\n<p>indexedDB定义了许多对象接口，即API，除了上面介绍的一些，更完善的接口介绍可以参考MDN的介绍。</p>\n<h4 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h4><p>indexedDB 鼓励使用的基本模式如下所示：</p>\n<ol>\n<li>打开数据库。</li>\n<li>在数据库中创建一个对象仓库（object store）。</li>\n<li>启动一个事务，并发送一个请求来执行一些数据库操作，像增加或提取数据等。</li>\n<li>通过监听正确类型的DOM事件以等待操作完成。</li>\n<li>在操作结果上进行一些操作（可以在request对象中找到）</li>\n</ol>\n<p><strong>打开数据库</strong></p>\n<p>使用 IndexedDB 的第一步是打开数据库，使用indexedDB.open()方法如下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> request = <span class=\"variable language_\">window</span>.<span class=\"property\">indexedDB</span>.<span class=\"title function_\">open</span>(databaseName, version);</span><br></pre></td></tr></table></figure>\n\n<p>其中第一个参数为数据库名，第二个参数是数据库版本号。<code>indexedDB.open()</code>方法返回一个<code>IDBRequest</code>对象。这个对象通过三种事件error、success、upgradeneeded，处理打开数据库的操作结果。</p>\n<p>如果数据库不存在，open操作会创建该数据库，然后<code>onupgradeneeded</code>事件被触发，需要在该事件的处理函数中创建数据库模式。如果数据库已经存在，但指定了一个更高的数据库版本，会直接触发 <code>onupgradeneeded</code>事件，允许你在处理函数中更新数据库模式。</p>\n<p><strong>注意：这里的版本号是一个unsigned long long数字，使用浮点数是会被转化到最近的整数</strong></p>\n<p><strong>绑定处理函数</strong></p>\n<p>几乎所有我们产生的请求我们在处理的时候首先要做的就是添加成功和失败处理函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request.<span class=\"property\">onerror</span> = <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Do something with request.errorCode!</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">request.<span class=\"property\">onsuccess</span> = <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Do something with request.result!</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>如果一切顺利的话，相关request的<code>onsuccess()</code>处理函数就会被触发。如果不是所有事情都成功的话，<code>error </code>事件会在request上被触发。</p>\n<p><strong>新建数据库</strong></p>\n<p>新建数据库与打开数据库是同一个操作。不同之处在于，后续的操作主要在<code>upgradeneeded</code>事件的监听函数里面完成。通常新建数据库后，第一件事是新建对象仓库，即下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request.<span class=\"property\">onupgradeneeded</span> = <span class=\"keyword\">function</span> (<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  db = event.<span class=\"property\">target</span>.<span class=\"property\">result</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> objectStore;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!db.<span class=\"property\">objectStoreNames</span>.<span class=\"title function_\">contains</span>(<span class=\"string\">&#x27;person&#x27;</span>)) &#123;</span><br><span class=\"line\">    objectStore = db.<span class=\"title function_\">createObjectStore</span>(<span class=\"string\">&#x27;person&#x27;</span>, &#123; <span class=\"attr\">keyPath</span>: <span class=\"string\">&#x27;id&#x27;</span> &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面这段语句使用id作为对象仓库的主键，如果没有合适作为主键的属性，可以让indexedDB自动生成主键。为了便于查询，可以在数据仓库中建立索引。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> objectStore = db.<span class=\"title function_\">createObjectStore</span>(</span><br><span class=\"line\">  <span class=\"string\">&#x27;person&#x27;</span>,</span><br><span class=\"line\">  &#123; <span class=\"attr\">autoIncrement</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\">objectStore.<span class=\"title function_\">createIndex</span>(<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;name&#x27;</span>, &#123; <span class=\"attr\">unique</span>: <span class=\"literal\">false</span> &#125;);</span><br><span class=\"line\">objectStore.<span class=\"title function_\">createIndex</span>(<span class=\"string\">&#x27;email&#x27;</span>, <span class=\"string\">&#x27;email&#x27;</span>, &#123; <span class=\"attr\">unique</span>: <span class=\"literal\">true</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>增删改查</strong></p>\n<p>增删改查都通过事务进行。事务来自于数据库对象，必须指定你想让这个事务跨越哪些对象仓库。事务中有三种模式，表示你想对数据库进行的操作类型：</p>\n<ul>\n<li><code>readonly</code> <strong>默认</strong>，只读</li>\n<li><code>readwrite</code> 读写操作</li>\n<li><code>versionchange</code> 修改数据库模式或结构</li>\n</ul>\n<p>只在必要时指定 readwrite 事务。你可以同时执行多个readonly事务，哪怕它们的作用域有重叠；但对于在一个对象仓库上只能运行一个readwrite事务。</p>\n<p>增加一条数据的语句如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> transaction = db.<span class=\"title function_\">transaction</span>([<span class=\"string\">&quot;person&quot;</span>], <span class=\"string\">&quot;readwrite&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在所有数据添加完毕后的处理</span></span><br><span class=\"line\">transaction.<span class=\"property\">oncomplete</span> = <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;成功&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">transaction.<span class=\"property\">onerror</span> = <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;失败&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> objectStore = transaction.<span class=\"title function_\">objectStore</span>(<span class=\"string\">&quot;person&quot;</span>);</span><br><span class=\"line\">    .<span class=\"title function_\">add</span>(&#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;foo&#x27;</span>, <span class=\"attr\">email</span>: <span class=\"string\">&#x27;foo@bar.com&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>在有了数据后，可以通过几种方法对它进行提取。首先是简单的 <code>get()</code>，通过键获得值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> transaction = db.<span class=\"title function_\">transaction</span>([<span class=\"string\">&quot;person&quot;</span>]);</span><br><span class=\"line\"><span class=\"keyword\">var</span> objectStore = transaction.<span class=\"title function_\">objectStore</span>(<span class=\"string\">&quot;person&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> request = objectStore.<span class=\"title function_\">get</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">request.<span class=\"property\">onsuccess</span> = <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 对 request.result 做些操作！</span></span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(request.<span class=\"property\">result</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">request.<span class=\"property\">onerror</span> = <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;出错了&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在很多场景下你并不知道数据的键，这时可以用索引找到你要的数据。例子中的<code>name</code>属性可能并不是唯一的，在这种情况下，你总是得到键值最小的那个。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 前提是你已经建立了name索引</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> index = objectStore.<span class=\"title function_\">index</span>(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">index.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;foo&#x27;</span>).<span class=\"property\">onsuccess</span> = <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;foo&#x27;s id is &quot;</span> + event.<span class=\"property\">target</span>.<span class=\"property\">result</span>.<span class=\"property\">id</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在需要遍历某一范围的数据集合时，也可以使用<strong>游标</strong>，这里要用到<code>openCursor</code>方法。比如查询整个数据对象存储。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objectStore.<span class=\"title function_\">openCursor</span>().<span class=\"property\">onsuccess</span> = <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> cursor = event.<span class=\"property\">target</span>.<span class=\"property\">result</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (cursor) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(cursor.<span class=\"property\">value</span>);</span><br><span class=\"line\">    cursor.<span class=\"title function_\">continue</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;遍历结束&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><em>上面的功能也可以通过<code>getAll</code>完成，但是由于数据对象是懒生成的，<code>getAll</code>性能会有消耗。当然你如果想直接拿到整个数据组成的数组，还是<code>getAll</code>好点</em></p>\n<p>结合索引（IDBIndex）和游标（IDBCursor）可以查询指定索引的所有记录，方法<code>openCursor</code>和<code>openKeyCursor</code>分别返回不同的数据结构。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index.<span class=\"title function_\">openCursor</span>().<span class=\"property\">onsuccess</span> = <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> cursor = event.<span class=\"property\">target</span>.<span class=\"property\">result</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (cursor) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// cursor.key 是一个 name, 就像 &quot;Bill&quot;, 然后 cursor.value 是整个对象。</span></span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;Name: &quot;</span> + cursor.<span class=\"property\">key</span> + <span class=\"string\">&quot;, email: &quot;</span> + cursor.<span class=\"property\">value</span>.<span class=\"property\">email</span>);</span><br><span class=\"line\">    cursor.<span class=\"title function_\">continue</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">index.<span class=\"title function_\">openKeyCursor</span>().<span class=\"property\">onsuccess</span> = <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> cursor = event.<span class=\"property\">target</span>.<span class=\"property\">result</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (cursor) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// cursor.key 是一个 name, 就像 &quot;Bill&quot;, 然后 cursor.value是主键的值。</span></span><br><span class=\"line\">    <span class=\"comment\">// 没办法得到存储对象的其余部分。</span></span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;Name: &quot;</span> + cursor.<span class=\"property\">key</span> + <span class=\"string\">&quot;, id: &quot;</span> + cursor.<span class=\"property\">value</span>);</span><br><span class=\"line\">    cursor.<span class=\"title function_\">continue</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>更多游标设置参考<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/IndexedDB_API/Using_IndexedDB#%E6%8C%87%E5%AE%9A%E6%B8%B8%E6%A0%87%E7%9A%84%E8%8C%83%E5%9B%B4%E5%92%8C%E6%96%B9%E5%90%91\">mdn</a>的介绍。</p>\n<p>更新和删除数据，分别使用<code>put</code>和<code>delete</code>方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> request = db.<span class=\"title function_\">transaction</span>([<span class=\"string\">&#x27;person&#x27;</span>], <span class=\"string\">&#x27;readwrite&#x27;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">objectStore</span>(<span class=\"string\">&#x27;person&#x27;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">put</span>(&#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;李四&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">35</span>, <span class=\"attr\">email</span>: <span class=\"string\">&#x27;lisi@example.com&#x27;</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">request.<span class=\"property\">onsuccess</span> = <span class=\"keyword\">function</span> (<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;数据更新成功&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">request.<span class=\"property\">onerror</span> = <span class=\"keyword\">function</span> (<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;数据更新失败&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> request = db.<span class=\"title function_\">transaction</span>([<span class=\"string\">&#x27;person&#x27;</span>], <span class=\"string\">&#x27;readwrite&#x27;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">objectStore</span>(<span class=\"string\">&#x27;person&#x27;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">delete</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">request.<span class=\"property\">onsuccess</span> = <span class=\"keyword\">function</span> (<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;数据删除成功&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>其中put的数据为全量替换，可以通过get方法拿到数据后，修改特定值再交给put完成增量替换。</p>\n<h2 id=\"indexedDB封装库\"><a href=\"#indexedDB封装库\" class=\"headerlink\" title=\"indexedDB封装库\"></a>indexedDB封装库</h2><p>indexedDB虽然强大，但是有些API对于用户来说还是不够方便，下面是几个indexedDB的封装库：</p>\n<ul>\n<li><a href=\"https://localforage.github.io/localForage/\">localForage</a>，支持类Storage API语法的客户端数据存储polyfill，支持回退到Storage和Web SQL</li>\n<li><a href=\"https://dexie.org/\">dexie.js</a>，提供更友好和简单的语法便于快速的编码开发，<strong>有Typescript支持</strong>。</li>\n<li><a href=\"https://github.com/erikolson186/zangodb\">ZangoDB</a>，提供类MongoDB的接口实现，提供了许多MangoDB的特性实现</li>\n<li><a href=\"http://jsstore.net/\">JsStore</a>，提供基于indexedDB的类SQL的语法实现。</li>\n</ul>\n<p>综上，考虑到dexie.js的语法更加友善，文档页较完善。最终选择它作为客户端存储的实现。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://jiangzhenghua.iteye.com/blog/1225201\">HTML5本地存储不完全指南</a></li>\n<li><a href=\"https://wangdoc.com/javascript/bom/indexeddb.html\">IndexedDB API</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/IndexedDB_API/Using_IndexedDB\">使用 IndexedDB - Web API接口参考 | MDN</a></li>\n<li><a href=\"https://dexie.org/docs/API-Reference\">Dexie.js API Reference</a></li>\n</ul>\n",
            "tags": [
                "electron",
                "indexedDB"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2018/02/06/my-first-electron-demo/",
            "url": "http://shenlvmeng.github.com/blog/2018/02/06/my-first-electron-demo/",
            "title": "我的第一个Electron应用",
            "date_published": "2018-02-06T07:58:11.000Z",
            "content_html": "<blockquote>\n<p>前一阵突发奇想，想写一个汇总所有骑行数据的网页。又想到最近看了下Electron，干脆写一个能够生产这样网页的工具，造福自己，造福他人。</p>\n</blockquote>\n<p><img src=\"https://s2.ax1x.com/2019/04/07/Ahbsc6.png\" alt=\"Ahbsc6.png\"></p>\n<h2 id=\"Electron是啥\"><a href=\"#Electron是啥\" class=\"headerlink\" title=\"Electron是啥\"></a>Electron是啥</h2><p><a href=\"(https://electronjs.org/)\">Electron</a>一套由Github开发的开源库，基于<a href=\"https://www.chromium.org/Home\">Chromium</a>和<a href=\"https://nodejs.org/en/\">Node.js</a>，支持通过HTML、JavaScript、CSS来构建跨平台（Mac、Windows、Linux）应用。Electron起初是为文本编辑器<a href=\"https://atom.io/\">Atom</a>而开发的一套开发框架，名为Atom Shell。现如今已经为<a href=\"https://electronjs.org/apps\">众多应用</a>所用。</p>\n<p>从开发者角度看，Electron分为<code>main</code>和<code>renderer</code>两部分。前者运行在主进程中，以创建web页面的方式显示一个GUI；后者是渲染进程，每个Electron的web页面运行在其中。通常的浏览器内，网页通常运行在一个沙盒的环境不能够进行原生操作。 在Electron中，可以在渲染进程使用Node.js的API和Electron提供的众多API（GUI相关除外），和操作系统进行一些低级别的交互。主进程和渲染进程通过<a href=\"https://electronjs.org/docs/api/ipc-main\"><code>ipcMain</code></a>和<a href=\"https://electronjs.org/docs/api/ipc-renderer\"><code>ipcRenderer</code></a>相互沟通；也可以通过<a href=\"https://electronjs.org/docs/api/remote\"><code>remote</code></a>的方式发起，后者要更简洁些。</p>\n<p>在项目结构上，官网并没有限制，<a href=\"https://github.com/electron-userland/electron-webpack\">electron-webpack</a>的<a href=\"https://webpack.electron.build/project-structure\">project-structure</a>可以参考，安全性上，可以参考官网的<a href=\"https://electronjs.org/docs/tutorial/security\">介绍</a>。要想获得对Electron概念的快速认识，可以看看<a href=\"https://electronjs.org/docs/tutorial/about\">关于Electron</a>和<a href=\"https://electronjs.org/docs/tutorial/quick-start\">快速入门</a>，再去<a href=\"https://www.zhihu.com/topic/20038727/top-answers\">知乎Electron精华话题</a>看看，或者看看<a href=\"https://github.com/sindresorhus/awesome-electron\">awesome list</a>也是极好的。</p>\n<h2 id=\"调研准备\"><a href=\"#调研准备\" class=\"headerlink\" title=\"调研准备\"></a>调研准备</h2><p>地图考虑还是使用百度地图API（因为<a href=\"https://shenlvmeng.github.io/blog/2018/01/27/my-first-pwa-app/\">上个小项目</a>用的就是百度地图，好上手），根据<a href=\"http://lbsyun.baidu.com/jsdemo.htm#c1_25\">demo演示</a>来看，根据数据点画个折线是没什么问题的。地图的part没问题了。</p>\n<p>下面就是数据的part。去确认了下我骑行常用的APP<a href=\"https://www.imxingzhe.com/\">行者</a>，网页和APP都有导出功能。导出格式为<code>.gpx</code>的gps数据文件。OK，数据的来源也有了。</p>\n<p>至于怎么把这些点连线搁在地图上，就是我要干的活了。</p>\n<h2 id=\"功能设计\"><a href=\"#功能设计\" class=\"headerlink\" title=\"功能设计\"></a>功能设计</h2><p>但是事情没那么简单，既然选择<a href=\"https://electronjs.org/\">Electron</a>来练手，光做个展示的网页出来就很没意思了。这也不是Electron的用武之地。于是能够想到的就是，做一个<strong>可以生成上面那个网页的工具</strong>，一方面减轻我的负担，让我在日后维护时省心省力；另一方面也能造福他人嘛。</p>\n<p>现在整理一下，我拿在手里的是一堆<code>.gpx</code>的文件，产出是可以画图的网页。稍微分解一下：</p>\n<ul>\n<li>网页是需要独立存在，不需要用户配置的，这些gps数据必须单独存储，可以使用前端友好的JSON文件。这个<strong>转译</strong>过程需要在Electron应用中完成</li>\n<li>网页需要能够配置生成，不需要用户手写，因此在应用里需要填充<strong>HTML模板</strong>，生产HTML文件。</li>\n<li>页面并不复杂，不需要使用Vue、React甚至webpack的加持，作为我的第一个Electron应用，把握整体感受要紧</li>\n</ul>\n<h2 id=\"开写\"><a href=\"#开写\" class=\"headerlink\" title=\"开写\"></a>开写</h2><h3 id=\"相关环境\"><a href=\"#相关环境\" class=\"headerlink\" title=\"相关环境\"></a>相关环境</h3><p>安装Electron过程中，报错node版本过低。只能重新安转新版本的node，windows下只有<a href=\"https://github.com/coreybutler/nvm-windows\">nvm-windows</a>这个选择。安装完成后，之前全局安装的npm包只能重头再安一遍。先安装<a href=\"https://www.npmjs.com/package/nrm\">nrm</a>再说。</p>\n<p><strong>注意：安装nvm-windows前，强烈建议卸载已有的Node.js</strong></p>\n<h3 id=\"boilerplate\"><a href=\"#boilerplate\" class=\"headerlink\" title=\"boilerplate\"></a>boilerplate</h3><p>boilerplate即骨架。现在前端的环境里，一门成熟的开源库是一定有一堆boilerplate的，毕竟程序猿懒人多。Electron也不能免俗。可以从<a href=\"https://github.com/sindresorhus/awesome-electron#boilerplates\">awesome list</a>中挑一个看上眼的。如果项目比较大，可以直接用<a href=\"https://github.com/SimulatedGREG/electron-vue\">electron-vue</a>这种省心省力，一键式配置，开发打包工具一应齐全。这里我从官网提到的<a href=\"https://github.com/electron/electron-quick-start\">quick start</a>，除了一些样例代码，啥都没有，正合我意。</p>\n<p><em>（我曾经尝试使用<a href=\"https://github.com/electron/electron-quick-start\">electron-webpack-quick-start</a>，想着顺便打包了<a href=\"https://github.com/electron-userland/electron-builder\">electron-builder</a>，还有webpack、热加载，岂不美哉。不过根据<a href=\"https://webpack.electron.build/development#use-of-html-webpack-plugin\">这里</a>所说，是没有index.html暴露给你的，这几乎就意味着必须要用Vue、React这样的解决方案，但是<a href=\"https://github.com/electron-userland/electron-webpack\">electron-webpack</a>这个库并没有包括，需要自己add-on，但是按照<a href=\"https://webpack.electron.build/add-ons#vuejs\">文档</a>所说的操作后，并不能识别<code>.vue</code>文件，而且也没有vue-devtool。这是<strong>坑之一</strong>）</em></p>\n<h3 id=\"转译\"><a href=\"#转译\" class=\"headerlink\" title=\"转译\"></a>转译</h3><p>转译过程是在<code>renderer.js</code>中完成的。实际上，项目里<a href=\"https://zhuanlan.zhihu.com/p/24275216\">大多数业务逻辑也是在渲染进程中完成的</a>。核心在把gpx文件里的信息解析出来，除了<code>&lt;desc&gt;&lt;/desc&gt;</code>中的meta信息之外，其余的点结构大致像下面这样;</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">trkpt</span> <span class=\"attr\">lat</span>=<span class=\"string\">&quot;40.106419&quot;</span> <span class=\"attr\">lon</span>=<span class=\"string\">&quot;116.369812&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ele</span>&gt;</span>40.6<span class=\"tag\">&lt;/<span class=\"name\">ele</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">time</span>&gt;</span>2017-03-04T16:52:36Z<span class=\"tag\">&lt;/<span class=\"name\">time</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">trkpt</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">trkpt</span> <span class=\"attr\">lat</span>=<span class=\"string\">&quot;40.106531&quot;</span> <span class=\"attr\">lon</span>=<span class=\"string\">&quot;116.369916&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ele</span>&gt;</span>59.8<span class=\"tag\">&lt;/<span class=\"name\">ele</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">time</span>&gt;</span>2017-03-04T16:52:39Z<span class=\"tag\">&lt;/<span class=\"name\">time</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">trkpt</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>幸运的是，npm上早就有gpx的parser。<a href=\"https://www.npmjs.com/package/gpx-parse\">gpx-parse</a>的功能足够满足我们需要了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gpxParse = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;gpx-parse&quot;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//from file </span></span><br><span class=\"line\">gpxParse.<span class=\"title function_\">parseGpxFromFile</span>(<span class=\"string\">&quot;/path/to/gpxFile&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">error, data</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//do stuff </span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//or from string </span></span><br><span class=\"line\">gpxParse.<span class=\"title function_\">parseGpx</span>(<span class=\"string\">&quot;&lt;gpx&gt;&lt;/gpx&gt;&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">error, data</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//do stuff </span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// or an external file via HTTP(S) </span></span><br><span class=\"line\">gpxParse.<span class=\"title function_\">parseRemoteGpxFile</span>(<span class=\"string\">&quot;http://host.tld/my.gpx&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">error, data</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//do stuff </span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>顺带写几个input框（包括<code>&lt;input type=&quot;file&quot;&gt;</code>），测试一下，没啥问题（排除掉中间处理<a href=\"https://yarnpkg.com/zh-Hans/\">yarn</a>和npm冲突问题的话）。观察一下，返回值是一个<code>GpxResult</code>类型，里面有<code>metadata</code>，<code>routes</code>，<code>tracks</code>等字段，只有tracks中记录着点的信息。考虑到<code>tracks</code>和里面<code>segments</code>字段是数组的情况，要进行一下flatten的处理。最后，整个转译过程大概如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">serialize</span>(<span class=\"params\">file, index</span>) &#123;</span><br><span class=\"line\">  gpxParse.<span class=\"title function_\">parseGpxFromFile</span>(file.<span class=\"property\">path</span>, <span class=\"keyword\">function</span>(<span class=\"params\">error, data</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (error || !data.<span class=\"property\">tracks</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;文件内容错误&#x27;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> track = data.<span class=\"property\">tracks</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 扁平化处理</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> flattenTrack = track.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">acc, cur</span>) =&gt;</span> (cur.<span class=\"property\">segments</span>.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">acc, cur</span>) =&gt;</span> acc.<span class=\"title function_\">concat</span>(cur), []).<span class=\"title function_\">concat</span>(acc)), [])</span><br><span class=\"line\">    <span class=\"keyword\">const</span> points = flattenTrack.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">&#123;lat, lon&#125;</span>) =&gt;</span> (&#123;lat, <span class=\"attr\">lng</span>: lon&#125;))</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> jsonData = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(points)</span><br><span class=\"line\">      <span class=\"keyword\">const</span> pathStr = path.<span class=\"title function_\">join</span>(<span class=\"variable constant_\">OUTPUT_PATH</span>, <span class=\"string\">`<span class=\"subst\">$&#123;index&#125;</span>.json`</span>)</span><br><span class=\"line\">      remote.<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>).<span class=\"title function_\">writeFile</span>(pathStr, jsonData,<span class=\"string\">&#x27;utf8&#x27;</span>, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">warn</span>(e)</span><br><span class=\"line\">      <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;文件序列化失败&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"写一个示例网页\"><a href=\"#写一个示例网页\" class=\"headerlink\" title=\"写一个示例网页\"></a>写一个示例网页</h3><p>既然最后的网页是生成出来的，就有第一个能够成功工作起来的网页作为模子，好抽离范本出来。先搭一个最简单的HTML架子，插入百度地图的script标签。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0, user-scalable=no&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-tag\">body</span>, <span class=\"selector-tag\">html</span>, <span class=\"selector-id\">#map</span> &#123;<span class=\"attribute\">width</span>: <span class=\"number\">100%</span>; <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>; <span class=\"attribute\">overflow</span>: hidden; <span class=\"attribute\">margin</span>:<span class=\"number\">0</span>;&#125;</span></span><br><span class=\"line\"><span class=\"language-css\">  </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>我的骑行轨迹<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;map&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://api.map.baidu.com/api?v=2.0&amp;ak=你的秘钥&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>下面我们把工作稍微分析一下：</p>\n<ul>\n<li>从本地读取JSON文件，意味着<strong>自己实现一个ajax</strong>，考虑兼容性（毕竟没了<a href=\"http://babeljs.io/\">babel</a>和webpack）,使用XMLHttpRequest</li>\n<li>读取当然得是<strong>异步</strong>的，JSON文件很有可能很多，需要依次进行</li>\n<li>地图配置和画图就很简单了，参考API就行了</li>\n</ul>\n<p>第一个工作不难：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getJSON</span>(<span class=\"params\">path, callback</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> request = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">  request.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;GET&#x27;</span>, path, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  request.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (request.<span class=\"property\">readyState</span> === <span class=\"number\">4</span> &amp;&amp; request.<span class=\"property\">status</span> === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">callback</span>(request.<span class=\"property\">response</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  request.<span class=\"title function_\">send</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第二个工作也不难，在递归函数的外面设置控制递归的变量就可以了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pool = <span class=\"title class_\">Array</span>.<span class=\"title function_\">apply</span>(<span class=\"literal\">null</span>, <span class=\"title class_\">Array</span>(length)).<span class=\"title function_\">map</span>(<span class=\"keyword\">function</span>(<span class=\"params\">v, i</span>)&#123;<span class=\"keyword\">return</span> i+<span class=\"string\">&#x27;.json&#x27;</span>;&#125;);</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">paint</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!pool.<span class=\"property\">length</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"title function_\">getJSON</span>(pool.<span class=\"title function_\">shift</span>(), <span class=\"keyword\">function</span>(<span class=\"params\">res</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res) <span class=\"title function_\">paint</span>();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> pois = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(res).<span class=\"title function_\">map</span>(<span class=\"keyword\">function</span>(<span class=\"params\">point</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BMap</span>.<span class=\"title class_\">Point</span>(point.<span class=\"property\">lng</span>, point.<span class=\"property\">lat</span>);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">var</span> polyline = <span class=\"keyword\">new</span> <span class=\"title class_\">BMap</span>.<span class=\"title class_\">Polyline</span>(pois);</span><br><span class=\"line\">      map.<span class=\"title function_\">addOverlay</span>(polyline);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">warn</span>(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>OK，大功告成（排除其余逻辑bug之后），赶紧接上<code>renderer.js</code>那边转译好的JSON文件看看骑行轨迹吧！</p>\n<p>你以为事情会这么简单么？</p>\n<p>当然不。</p>\n<h3 id=\"坐标换算\"><a href=\"#坐标换算\" class=\"headerlink\" title=\"坐标换算\"></a>坐标换算</h3><p>图是出来了，但是路线有偏差，发现明显有所平移。这是怎么回事，搜索过后才发现，百度所采用的坐标并不是gps数据中的真实大地坐标，而是在火星坐标基础上再次加密的百度坐标（<a href=\"http://blog.csdn.net/flygoa/article/details/69258648\">更多</a>）。<a href=\"http://lbsyun.baidu.com/jsdemo.htm#a5_3\">官网示例</a>上也给出了gps坐标转成百度坐标的API。</p>\n<p>得，那就在转译成JSON数据前多map一段呗。仔细一看，<a href=\"http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference.html#a7b49\"><code>Convertor</code></a>的介绍里赫然写着<strong>“一次最多10个点”</strong>，居然还限流（其实不只是限流的问题，递归的写法也要变化）。一条路线至少上千个点呢，算了先试试看速度吧。</p>\n<p>两条路线用了30s才显示出来，果然很慢……</p>\n<p>只能自己实现转译过程了，网上倒是有一些例子，都差不多。尝试了一下，发现有点效果，但是路线还是有偏移。试了半个多小时后，总算找到了一个完美的<a href=\"http://www.oschina.net/code/snippet_260395_39205\">JS转译代码</a>，感谢原作者。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">delta</span>(<span class=\"params\">lat, lon</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Krasovsky 1940</span></span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\">  <span class=\"comment\">// a = 6378245.0, 1/f = 298.3</span></span><br><span class=\"line\">  <span class=\"comment\">// b = a * (1 - f)</span></span><br><span class=\"line\">  <span class=\"comment\">// ee = (a^2 - b^2) / a^2;</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> a = <span class=\"number\">6378245.0</span>; <span class=\"comment\">//  a: 卫星椭球坐标投影到平面地图坐标系的投影因子。</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> ee = <span class=\"number\">0.00669342162296594323</span>; <span class=\"comment\">//  ee: 椭球的偏心率。</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> dLat = <span class=\"title function_\">transformLat</span>(lon - <span class=\"number\">105.0</span>, lat - <span class=\"number\">35.0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dLon = <span class=\"title function_\">transformLon</span>(lon - <span class=\"number\">105.0</span>, lat - <span class=\"number\">35.0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> radLat = lat / <span class=\"number\">180.0</span> * <span class=\"variable constant_\">PI</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> magic = <span class=\"title class_\">Math</span>.<span class=\"title function_\">sin</span>(radLat);</span><br><span class=\"line\">  magic = <span class=\"number\">1</span> - ee * magic * magic;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> sqrtMagic = <span class=\"title class_\">Math</span>.<span class=\"title function_\">sqrt</span>(magic);</span><br><span class=\"line\">  dLat = (dLat * <span class=\"number\">180.0</span>) / ((a * (<span class=\"number\">1</span> - ee)) / (magic * sqrtMagic) * <span class=\"variable constant_\">PI</span>);</span><br><span class=\"line\">  dLon = (dLon * <span class=\"number\">180.0</span>) / (a / sqrtMagic * <span class=\"title class_\">Math</span>.<span class=\"title function_\">cos</span>(radLat) * <span class=\"variable constant_\">PI</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;<span class=\"attr\">lat</span>: dLat, <span class=\"attr\">lon</span>: dLon&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">transformLat</span> (x, y) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ret = -<span class=\"number\">100.0</span> + <span class=\"number\">2.0</span> * x + <span class=\"number\">3.0</span> * y + <span class=\"number\">0.2</span> * y * y + <span class=\"number\">0.1</span> * x * y + <span class=\"number\">0.2</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">sqrt</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(x));</span><br><span class=\"line\">    ret += (<span class=\"number\">20.0</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">sin</span>(<span class=\"number\">6.0</span> * x * <span class=\"variable constant_\">PI</span>) + <span class=\"number\">20.0</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">sin</span>(<span class=\"number\">2.0</span> * x * <span class=\"variable constant_\">PI</span>)) * <span class=\"number\">2.0</span> / <span class=\"number\">3.0</span>;</span><br><span class=\"line\">    ret += (<span class=\"number\">20.0</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">sin</span>(y * <span class=\"variable constant_\">PI</span>) + <span class=\"number\">40.0</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">sin</span>(y / <span class=\"number\">3.0</span> * <span class=\"variable constant_\">PI</span>)) * <span class=\"number\">2.0</span> / <span class=\"number\">3.0</span>;</span><br><span class=\"line\">    ret += (<span class=\"number\">160.0</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">sin</span>(y / <span class=\"number\">12.0</span> * <span class=\"variable constant_\">PI</span>) + <span class=\"number\">320</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">sin</span>(y * <span class=\"variable constant_\">PI</span> / <span class=\"number\">30.0</span>)) * <span class=\"number\">2.0</span> / <span class=\"number\">3.0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">transformLon</span> (x, y) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ret = <span class=\"number\">300.0</span> + x + <span class=\"number\">2.0</span> * y + <span class=\"number\">0.1</span> * x * x + <span class=\"number\">0.1</span> * x * y + <span class=\"number\">0.1</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">sqrt</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(x));</span><br><span class=\"line\">    ret += (<span class=\"number\">20.0</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">sin</span>(<span class=\"number\">6.0</span> * x * <span class=\"variable constant_\">PI</span>) + <span class=\"number\">20.0</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">sin</span>(<span class=\"number\">2.0</span> * x * <span class=\"variable constant_\">PI</span>)) * <span class=\"number\">2.0</span> / <span class=\"number\">3.0</span>;</span><br><span class=\"line\">    ret += (<span class=\"number\">20.0</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">sin</span>(x * <span class=\"variable constant_\">PI</span>) + <span class=\"number\">40.0</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">sin</span>(x / <span class=\"number\">3.0</span> * <span class=\"variable constant_\">PI</span>)) * <span class=\"number\">2.0</span> / <span class=\"number\">3.0</span>;</span><br><span class=\"line\">    ret += (<span class=\"number\">150.0</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">sin</span>(x / <span class=\"number\">12.0</span> * <span class=\"variable constant_\">PI</span>) + <span class=\"number\">300.0</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">sin</span>(x / <span class=\"number\">30.0</span> * <span class=\"variable constant_\">PI</span>)) * <span class=\"number\">2.0</span> / <span class=\"number\">3.0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n\n<p>这转译过程，要不是有先行者，我怕是要倒在这里了。</p>\n<h3 id=\"HTML模板\"><a href=\"#HTML模板\" class=\"headerlink\" title=\"HTML模板\"></a>HTML模板</h3><p>示例HTML已经工作起来了，现在就是抽出模子的过程。网页并不复杂，可以用简单的HTML template解决问题。John Resig的方案如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Simple JavaScript Templating</span></span><br><span class=\"line\"><span class=\"comment\">// John Resig - https://johnresig.com/ - MIT Licensed</span></span><br><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> cache = &#123;&#125;;</span><br><span class=\"line\">   </span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">tmpl</span> = <span class=\"keyword\">function</span> <span class=\"title function_\">tmpl</span>(<span class=\"params\">str, data</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Figure out if we&#x27;re getting a template, or if we need to</span></span><br><span class=\"line\">    <span class=\"comment\">// load the template - and be sure to cache the result.</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> fn = !<span class=\"regexp\">/\\W/</span>.<span class=\"title function_\">test</span>(str) ?</span><br><span class=\"line\">      cache[str] = cache[str] ||</span><br><span class=\"line\">        <span class=\"title function_\">tmpl</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(str).<span class=\"property\">innerHTML</span>) :</span><br><span class=\"line\">       </span><br><span class=\"line\">      <span class=\"comment\">// Generate a reusable function that will serve as a template</span></span><br><span class=\"line\">      <span class=\"comment\">// generator (and which will be cached).</span></span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"title class_\">Function</span>(<span class=\"string\">&quot;obj&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;var p=[],print=function()&#123;p.push.apply(p,arguments);&#125;;&quot;</span> +</span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"comment\">// Introduce the data as local variables using with()&#123;&#125;</span></span><br><span class=\"line\">        <span class=\"string\">&quot;with(obj)&#123;p.push(&#x27;&quot;</span> +</span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"comment\">// Convert the template into pure JavaScript</span></span><br><span class=\"line\">        str</span><br><span class=\"line\">          .<span class=\"title function_\">replace</span>(<span class=\"regexp\">/[\\r\\t\\n]/g</span>, <span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">split</span>(<span class=\"string\">&quot;&lt;%&quot;</span>).<span class=\"title function_\">join</span>(<span class=\"string\">&quot;\\t&quot;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">replace</span>(<span class=\"regexp\">/((^|%&gt;)[^\\t]*)&#x27;/g</span>, <span class=\"string\">&quot;$1\\r&quot;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\t=(.*?)%&gt;/g</span>, <span class=\"string\">&quot;&#x27;,$1,&#x27;&quot;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">split</span>(<span class=\"string\">&quot;\\t&quot;</span>).<span class=\"title function_\">join</span>(<span class=\"string\">&quot;&#x27;);&quot;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">split</span>(<span class=\"string\">&quot;%&gt;&quot;</span>).<span class=\"title function_\">join</span>(<span class=\"string\">&quot;p.push(&#x27;&quot;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">split</span>(<span class=\"string\">&quot;\\r&quot;</span>).<span class=\"title function_\">join</span>(<span class=\"string\">&quot;\\\\&#x27;&quot;</span>)</span><br><span class=\"line\">      + <span class=\"string\">&quot;&#x27;);&#125;return p.join(&#x27;&#x27;);&quot;</span>);</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"comment\">// Provide some basic currying to the user</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> data ? <span class=\"title function_\">fn</span>( data ) : fn;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<p>看上去很眼熟，以前的项目似乎见到过。</p>\n<p>把之前的示例HTML放在<code>index.html</code>的<code>&lt;script type=&quot;text/template&quot;&gt;&lt;/script&gt;</code>中，在渲染进程里加上代码看看？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">tmpl</span>(<span class=\"string\">&#x27;template&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<p>嗯……报错了。提示“<code>Missing &#39;)&#39; after argument list </code>”。加断点调试发现是标签里的<code>&quot;</code>打断了<code>new Function</code>的语句。尝试了多种方法无效后，索性使用<code>encodeURIComponent</code>想处理掉麻烦的特殊符号，但是这么做之后就无法匹配<code>&lt;%=%&gt;</code>了。</p>\n<p>于是最后选择<a href=\"http://underscorejs.org/\">underscore</a>的template方法。再试试……</p>\n<p>没问题了。之后把允许用户填写的部分抽出来，就可以把<code>index.html</code>的生成放在转译代码身旁了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> template = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;template&#x27;</span>).<span class=\"property\">innerHTML</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">remote.<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>).<span class=\"title function_\">writeFile</span>(path.<span class=\"title function_\">join</span>(<span class=\"variable constant_\">OUTPUT_PATH</span>, <span class=\"string\">&#x27;index.html&#x27;</span>), <span class=\"title function_\">tmpl</span>(template)(data).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/&amp;lt;/g</span>, <span class=\"string\">&#x27;&lt;&#x27;</span>),<span class=\"string\">&#x27;utf8&#x27;</span>, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;生成完毕！\\n将output文件夹下所有文件上传到服务器即可查看效果！&#x27;</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>再次运行，测试生成的网页能否工作？答案当然是可以。</p>\n<h3 id=\"苦力活\"><a href=\"#苦力活\" class=\"headerlink\" title=\"苦力活\"></a>苦力活</h3><p>技术上的问题解决了，现在从用户填写信息到最后生成能用的展示页面也没有问题了。初版下面的问题就是美化了。</p>\n<ul>\n<li>CSS修饰样式</li>\n<li>将模板HTML文件压缩（包括JS和CSS），因为反正用户不会修改内容，不需要考虑可读性</li>\n<li>一些保护性编程和边缘情况兜底</li>\n</ul>\n<p>最后测试结果如下：</p>\n<p><img src=\"https://s2.ax1x.com/2019/04/07/AhbD91.png\" alt=\"AhbD91.png\"></p>\n<p>生成效果如上。</p>\n<h3 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h3><p>初版开发已经完成了，只剩发布出来给别人用了，考虑到<a href=\"https://electronjs.org/docs/tutorial/application-distribution\">官网文档</a>讲得实在不清不楚，不如用一个好工具帮我们完成。</p>\n<p>这里使用<a href=\"https://github.com/electron-userland/electron-builder\">electron-builder</a>。跟着介绍里一步步完善<code>package.json</code>和项目结构。加上依赖后，执行<code>yarn dist</code>生成可分发的文件。</p>\n<p>嗯……果然失败了。原因很简单，网络错误，Electron镜像文件下载失败。还好淘宝有electron镜像。通过设置ELECTRON_MIRROR环境变量，可以大大加快速度。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export ELECTRON_MIRROR=https://npm.taobao.org/mirrors/electron/</span><br></pre></td></tr></table></figure>\n\n<p>然后，再次执行<code>yarn dist</code>，在从Github下载其他相关文件的时候，仍然会网络错误。于是我机智的从网页上下载下来，直接放在了目标目录下。再次执行任务，居然不能识别出来。好吧……</p>\n<p>故事的最后，打包还是完成了。不过由于生成文件的目录写成了相对目录，生成的文件得通过搜索才能找到，考虑后面生成在桌面。</p>\n<p><em>–END–</em></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://www.jianshu.com/p/28bca6529150\">在windows下用nvm 安装node</a></li>\n<li><a href=\"http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference.html\">百度地图JavaScript API v2.0类参考</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/24275216\">Electron 应用实战 (架构篇)</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/GPS_Exchange_Format\">GPS Exchange Format</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest\">XMLHttpRequest | MDN</a></li>\n<li><a href=\"https://skalman.github.io/UglifyJS-online/\">UglifyJS 3: Online JavaScript minifier</a></li>\n<li><a href=\"https://cssminifier.com/\">CSS Minifier</a></li>\n<li><a href=\"https://github.com/pfan123/electron-docs\">pfan123&#x2F;electron-docs electron-docs学习文档</a></li>\n</ul>\n",
            "tags": [
                "JavaScript",
                "Electron",
                "GUI",
                "gpx",
                "template",
                "Electron Builder"
            ]
        }
    ]
}