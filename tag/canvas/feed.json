{
    "version": "https://jsonfeed.org/version/1",
    "title": "Shenlvmeng's Blog • All posts by \"canvas\" tag",
    "description": "Be sharp, my friend.",
    "home_page_url": "http://shenlvmeng.github.com/blog",
    "items": [
        {
            "id": "http://shenlvmeng.github.com/blog/2018/06/26/canvas-flowchart-compare/",
            "url": "http://shenlvmeng.github.com/blog/2018/06/26/canvas-flowchart-compare/",
            "title": "流程图JS实现方案对比",
            "date_published": "2018-06-26T13:09:27.000Z",
            "content_html": "<p>实现流程图和类流程图的工具主要需要解决<strong>数据 -&gt; 图形</strong>和<strong>交互</strong>两方面问题。在实现图形元素时也有canvas，SVG，canvas with DOM，SVG with DOM，DOM with canvas一些实现方式。</p>\n<p>canvas和SVG的实现方式区别比较明显：</p>\n<ul>\n<li>大规模元素、频繁重绘上，canvas完胜</li>\n<li>强调光影效果上，canvas小胜</li>\n<li>强调导出图片上，canvas小胜</li>\n<li>强调元素可交互上，SVG完胜</li>\n<li>强调画图元素可缩放上，SVG完胜</li>\n</ul>\n<p>使用SVG实现时，元素规模大以及频繁重绘时会出现卡顿现象，在大规模元素场景下交互也会有卡顿。使用canvas实现时，保证流程图元素的可交互性将成为头疼的难题，开发者需要自己模拟浏览器的一部分行为。</p>\n<p>下面是一些流程图实现基础的对比。</p>\n<h2 id=\"d3\"><a href=\"#d3\" class=\"headerlink\" title=\"d3\"></a>d3</h2><p>d3着眼在数据可视化，重点在使用不同layout组织数据，完成可视化。</p>\n<p>d3最初是天然支持SVG的，这点从类jQuery的API也能看出来。d3和canvas的结合上，绘制需要<a href=\"https://bl.ocks.org/mbostock/1276463\">额外的data binding</a>操作，周期性地将虚拟的DOM节点映射到canvas上，重绘得到下一帧画面。要实现canvas可交互的话也需要一些<a href=\"https://medium.freecodecamp.org/d3-and-canvas-in-3-steps-8505c8b27444\">hack的手段</a>。基于d3实现流程图并不划算。</p>\n<h2 id=\"zrender\"><a href=\"#zrender\" class=\"headerlink\" title=\"zrender\"></a>zrender</h2><p>zrender是一个canvas画图的基础库。它并不负责数据的组织和渲染，需要自己完成这一部分工作。但是zrender提供了让canvas可交互的重要功能。</p>\n<p>zrender下，mixin了Eventful特性的元素上可以监听交互事件。Eventful只是为元素提供了类似EventEmitter的功能。真正实现元素可交互的handler。</p>\n<p>handler内会拦截发生在canvas内的<code>click</code>&#x2F;<code>mousedown</code>&#x2F;<code>mouseup</code>&#x2F;<code>mousewheel</code>&#x2F;<code>dblclick</code>&#x2F;<code>contextmenu</code>事件，交予prototype内对应的处理方法处理，handler内有下面几个关键方法：</p>\n<ul>\n<li><code>mousemove</code>，监听canvas内mousemove事件，调用<code>findHover</code>得到当前位置对应的元素，根据情况调用<code>dispatchToElement</code>方法，分发<code>mouseout</code>，<code>mouseover</code>，<code>mousemove</code>给刚才得到的元素实例</li>\n<li><code>dispatchToElement</code>，分发事件到对应实例，将事件对象封装，trigger实例的对应事件handler，并通过<code>el.parent</code>向上冒泡</li>\n<li><code>findHover</code>，指定x, y坐标寻找该坐标位置的元素。从storage中拿到所有的displayable的list。挨个调用<code>isHover</code>判断displayable和[x, y]坐标的关系</li>\n<li><code>isHover</code>函数，根据displayable的rectHover属性，即是否使用包围盒检测鼠标进入。调用displayable的<code>rectContain</code>或<code>contain</code>检测是否在其中。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isHover</span>(<span class=\"params\">displayable, x, y</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (displayable[displayable.<span class=\"property\">rectHover</span> ? <span class=\"string\">&#x27;rectContain&#x27;</span> : <span class=\"string\">&#x27;contain&#x27;</span>](x, y)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> el = displayable;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> isSilent;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (el) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// If clipped by ancestor.</span></span><br><span class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">FIXME:</span> If clipPath has neither stroke nor fill,</span></span><br><span class=\"line\">            <span class=\"comment\">// el.clipPath.contain(x, y) will always return false.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (el.<span class=\"property\">clipPath</span> &amp;&amp; !el.<span class=\"property\">clipPath</span>.<span class=\"title function_\">contain</span>(x, y))  &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (el.<span class=\"property\">silent</span>) &#123;</span><br><span class=\"line\">                isSilent = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            el = el.<span class=\"property\">parent</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> isSilent ? <span class=\"variable constant_\">SILENT</span> : <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>先简单看下storage，因为zrender里绘制的元素之间没有逻辑关联，因此需要有一个全局存储storage去统一管理加入的Group或Shape。storage的<code>getDisplayList</code>方法返回所有图形的绘制队列。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">getDisplayList</span>: <span class=\"keyword\">function</span> (<span class=\"params\">update, includeIgnore</span>) &#123;</span><br><span class=\"line\">    includeIgnore = includeIgnore || <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (update) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">updateDisplayList</span>(includeIgnore);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_displayList</span>;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p><em>注：方法中提到的<code>updateDisplayList</code>用于更新图形的绘制队列，在每次绘制前调用，它会深度优先遍历整个树，更新所有的变换后，根据优先级排序得到新的绘制队列。</em></p>\n<p>在displayable的基类中，<code>contain</code>方法只是单纯调用了<code>rectContain</code>（子类都有区别于<code>rectContain</code>的自己的实现）。在<code>rectContain</code>中，获取到坐标相对于图形的坐标（<code>transformCoordToLocal</code>）和图形的包围盒（<code>getBoundingRect</code>）。这里先说简单的<code>RectContain</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">rectContain</span>: <span class=\"keyword\">function</span> (<span class=\"params\">x, y</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> coord = <span class=\"variable language_\">this</span>.<span class=\"title function_\">transformCoordToLocal</span>(x, y);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rect = <span class=\"variable language_\">this</span>.<span class=\"title function_\">getBoundingRect</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rect.<span class=\"title function_\">contain</span>(coord[<span class=\"number\">0</span>], coord[<span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>getBoundingRect</code>是各自类自己实现的。除了个别情况，如Text，形状都基于Path类。在Path的<code>getBoundingRect</code>中可以看到，path的绘制又额外包装了一层<code>PathProxy</code>，<code>getBoundingRect</code>也是使用的<code>PathProxy</code>的方法。在实现上，PathProxy把绘制路径的操作命令拆分成了命令数组。通过记录每一段子路径上x、y的最大最小值，再将所有这些极值比较得到最后的最值。在PathProxy返回结果后，根据描边粗细得到最终结果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">getBoundingRect</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// _rect变量做缓存用，计算完成后只在重绘时置空，避免重复计算</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> rect = <span class=\"variable language_\">this</span>.<span class=\"property\">_rect</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> style = <span class=\"variable language_\">this</span>.<span class=\"property\">style</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> needsUpdateRect = !rect;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (needsUpdateRect) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> path = <span class=\"variable language_\">this</span>.<span class=\"property\">path</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!path) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Create path on demand.</span></span><br><span class=\"line\">            path = <span class=\"variable language_\">this</span>.<span class=\"property\">path</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">PathProxy</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">__dirtyPath</span>) &#123;</span><br><span class=\"line\">            path.<span class=\"title function_\">beginPath</span>();</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"title function_\">buildPath</span>(path, <span class=\"variable language_\">this</span>.<span class=\"property\">shape</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        rect = path.<span class=\"title function_\">getBoundingRect</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_rect</span> = rect;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (style.<span class=\"title function_\">hasStroke</span>()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Return rect with stroke</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> rectWithStroke;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> rect;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p><code>Displayable</code>继承自<code>Element</code>，<code>Element</code>通过mixin得到来自<code>Transformable</code>中的<code>transformCoordToLocal</code>方法。这里要说到，zrender中元素和Group都有一个构造时的初始位置，而后的所有变化都是作为transform叠加在元素上的。例如拖拽元素对应的是“原始位置 + transform”而不是一个“新位置”。</p>\n<p>在每次变换后，<code>Transformable</code>中的<code>updateTransform</code>方法都会调用，设置自身<code>invTransform</code>属性为这次变化的逆矩阵。在<code>transformCoordToLocal</code>中对向量[x, y]应用这个逆矩阵即可得到点相对于当前形状的位置（可以理解成将点逆变换到形状变换前的位置）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transformableProto.<span class=\"property\">updateTransform</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    m = m || matrix.<span class=\"title function_\">create</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保存这个变换矩阵</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">transform</span> = m;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">invTransform</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">invTransform</span> || matrix.<span class=\"title function_\">create</span>();</span><br><span class=\"line\">    matrix.<span class=\"title function_\">invert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">invTransform</span>, m);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">transformableProto.<span class=\"property\">transformCoordToLocal</span> = <span class=\"keyword\">function</span> (<span class=\"params\">x, y</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> v2 = [x, y];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> invTransform = <span class=\"variable language_\">this</span>.<span class=\"property\">invTransform</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (invTransform) &#123;</span><br><span class=\"line\">        vector.<span class=\"title function_\">applyTransform</span>(v2, v2, invTransform);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> v2;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>综合这两个方法即可判断点是否在某元素的包围盒中。</p>\n<p>判断<code>contain</code>时，首先需要满足<code>rectContain</code>的关系。之后根据描边和填充情况，执行<code>contain/path</code>下对应的<code>contain</code>或<code>containStroke</code>方法。前者实际上是后者stroke为0时的特殊情况。除了path外，可以判断点是否在元素图形内的所有元素在<code>contain</code>下都有对应文件。基本所有的包含都可以转化为指定闭合路径是否包含指定点的问题。</p>\n<p>zrender利用<a href=\"https://en.wikipedia.org/wiki/Point_in_polygon\">PIP</a>（point-in-polygon）问题<a href=\"https://www.quora.com/How-do-I-know-a-point-is-inside-a-closed-curve-or-not#\">winding number</a>的解法判断点是否在path中；canvas提供的API中也有<code>isPointInPath</code>和<code>isPointInStroke</code>，不过只能针对当前的path。</p>\n<p>综上，zrender可以实现canvas内的元素和交互。</p>\n<h2 id=\"g6\"><a href=\"#g6\" class=\"headerlink\" title=\"g6\"></a>g6</h2><p>g6是antv的一部分，是一个canvas实现的展示关系型数据的JS可视化库。使用canvas的原因应该也在展示大量数据和重绘上更流畅。</p>\n<p>使用canvas实现时，g6一样会遇到zrender遇到的实现元素可交互的难题。从处理event的event.js中能看到，关联事件和元素的实现在<code>_getEventObj</code>处完成，剩下的步骤只是额外的封装操作：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Util</span>.<span class=\"title function_\">each</span>(<span class=\"title class_\">MouseEventTypes</span>, <span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    _events.<span class=\"title function_\">push</span>(<span class=\"title class_\">Util</span>.<span class=\"title function_\">addEventListener</span>(el, item, <span class=\"function\"><span class=\"params\">ev</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> oldEventObj = <span class=\"variable language_\">this</span>.<span class=\"property\">_currentEventObj</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">_oldEventObj</span> = oldEventObj;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">_processEventObj</span>(ev);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> currentEventObj = <span class=\"variable language_\">this</span>.<span class=\"property\">_currentEventObj</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">_processEventObj</span>(<span class=\"params\">ev</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> graph = <span class=\"variable language_\">this</span>.<span class=\"property\">graph</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> canvas = graph.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;_canvas&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> frontCanvas = graph.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;_frontCanvas&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> evObj = <span class=\"variable language_\">this</span>.<span class=\"title function_\">_getEventObj</span>(ev, canvas);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> frontEvObj = <span class=\"variable language_\">this</span>.<span class=\"title function_\">_getEventObj</span>(ev, frontCanvas);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">_getEventObj</span>(<span class=\"params\">ev, canvas</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> graph = <span class=\"variable language_\">this</span>.<span class=\"property\">graph</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> clientX = ev.<span class=\"property\">clientX</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> clientY = ev.<span class=\"property\">clientY</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> canvasPoint = canvas.<span class=\"title function_\">getPointByClient</span>(clientX, clientY);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> point = <span class=\"variable language_\">this</span>.<span class=\"title function_\">_parsePoint</span>(canvasPoint.<span class=\"property\">x</span>, canvasPoint.<span class=\"property\">y</span>); <span class=\"comment\">// 根据pixel ratio做一个转换</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> shape = canvas.<span class=\"title function_\">getShape</span>(canvasPoint.<span class=\"property\">x</span>, canvasPoint.<span class=\"property\">y</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> item = graph.<span class=\"title function_\">getItemByShape</span>(shape);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>p.s. 另说一点，frontCanvas的作用是绘制拖拽状态中的元素和辅助线等信息。</p>\n<p>最关键的方法<code>getPointByClient</code>和<code>getShape</code>来自Graph的<code>canvas</code>属性，这个属性通过‘@antv&#x2F;g’（G2）的canvas构造得来。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> G = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@antv/g&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Canvas</span> = G.<span class=\"property\">Canvas</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在G2中，Canvas继承自Group，可以认为Canvas本身已经扮演了根节点的角色。Canvas判断坐标对应元素的方法<code>getShape(x,y)</code>也来自Group。此方法遍历Group下所有元素（包括单个元素或Group），判断点[x, y]是否在范围内：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">find</span>(<span class=\"params\">children, x, y</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> rst;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = children.<span class=\"property\">length</span> - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> child = children[i];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (child.<span class=\"property\">__cfg</span>.<span class=\"property\">visible</span> &amp;&amp; child.<span class=\"property\">__cfg</span>.<span class=\"property\">capture</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 是Group就继续向下寻找</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (child.<span class=\"property\">isGroup</span>) &#123;</span><br><span class=\"line\">        rst = child.<span class=\"title function_\">getShape</span>(x, y);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (child.<span class=\"title function_\">isHit</span>(x, y)) &#123;</span><br><span class=\"line\">        rst = child;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rst) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> rst;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>关键的<code>child.isHit</code>方法类似zrender里的<code>contain</code>方法。区别使用包围盒还是自身范围判断。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">isHit</span>(<span class=\"params\">x, y</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> self = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> v = [ x, y, <span class=\"number\">1</span> ];</span><br><span class=\"line\">    self.<span class=\"title function_\">invert</span>(v); <span class=\"comment\">// canvas</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (self.<span class=\"title function_\">isHitBox</span>()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> box = self.<span class=\"title function_\">getBBox</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (box &amp;&amp; !<span class=\"title class_\">Inside</span>.<span class=\"title function_\">box</span>(box.<span class=\"property\">minX</span>, box.<span class=\"property\">maxX</span>, box.<span class=\"property\">minY</span>, box.<span class=\"property\">maxY</span>, v[<span class=\"number\">0</span>], v[<span class=\"number\">1</span>])) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> clip = self.<span class=\"property\">__attrs</span>.<span class=\"property\">clip</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (clip) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (clip.<span class=\"title function_\">inside</span>(x, y)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.<span class=\"title function_\">isPointInPath</span>(v[<span class=\"number\">0</span>], v[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.<span class=\"title function_\">isPointInPath</span>(v[<span class=\"number\">0</span>], v[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用包围盒时用<code>getBBox()</code>判断，类似zrender；否则使用<code>isPointInPath</code>。这点上g2不同，它只对特殊的闭合曲线如圆、矩形、贝塞尔曲线等等进行自己的实现。对一般性的path，直接使用上面提到的canvas的API来判断。</p>\n<h2 id=\"processOn\"><a href=\"#processOn\" class=\"headerlink\" title=\"processOn\"></a>processOn</h2><p>processOn严格意义上是一个产品，类似于在线的visio，编辑很流畅。使用DOM + canvas实现。具体来说：</p>\n<ul>\n<li>DOM绘制每个元素占位，响应交互</li>\n<li>canvas绘制每个DOM内的图形本身</li>\n</ul>\n<p>这么做的好处在有二：1. 天然解决了元素交互的问题；2. 更平滑的元素拖拽效果。</p>\n<p>类似的还有jsPlumb这样的使用SVG的方案，使用SVG的优势体现在交互更容易实现。</p>\n",
            "tags": [
                "canvas",
                "流程图",
                "d3",
                "g6",
                "zrender",
                "processOn"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2018/05/14/canvas-introduction/",
            "url": "http://shenlvmeng.github.com/blog/2018/05/14/canvas-introduction/",
            "title": "canvas相关介绍",
            "date_published": "2018-05-14T13:28:01.000Z",
            "content_html": "<p>canvas由Apple首先提出，现在已经有非常好的浏览器支持度。它和<code>&lt;img&gt;</code>标签很像，但是只有<code>width</code>和<code>height</code>两个属性，在未设置时，为300px和150px。canvas类似<code>&lt;video&gt;</code>和<code>&lt;audio&gt;</code>可以设置替换内容，应对标签本身不被支持的情况。另外，canvas不同于<code>&lt;img&gt;</code>，它必须要有一个<code>&lt;/canvas&gt;</code>作为闭合标志。</p>\n<p>canvas是一个2D渲染上下文环境（就像webGL是3D渲染上下文环境），在获取到<code>&lt;canvas&gt;</code>元素后，可以通过其<code>getContext</code>方法得到渲染上下文和相关功能，通常传入<code>2d</code>，用来绘制2D图案。</p>\n<h2 id=\"形状\"><a href=\"#形状\" class=\"headerlink\" title=\"形状\"></a>形状</h2><p><code>canvas.getContext(&#39;2d&#39;)</code>得到一个CanvasRenderingContext2D对象。剩下的绘制操作都通过调用对象上的API实现。</p>\n<p>canvas的坐标系系统和svg一样，从左上角开始，向右和向下为正，坐标轴单位为像素。下面列出最常见的绘制图形API。</p>\n<ul>\n<li><code>fillRect(x, y, width, height)</code> 绘制矩形</li>\n<li><code>strokeRect(x, y, width, height)</code> 绘制矩形边框</li>\n<li><code>clearRect(x, y, width, height)</code> 擦除矩形范围</li>\n</ul>\n<p>path被用来绘制通用曲线，注意<strong>path都是封闭的</strong>。绘制路径有4步：</p>\n<ul>\n<li><code>beginPath()</code> 新建一条路径，生成之后，图形绘制命令被指向到路径上生成路径。</li>\n<li>使用画图命令去画出路径</li>\n<li><code>closePath()</code> 闭合路径</li>\n<li><em>可选</em> <code>fill()</code> 通过填充路径的内容区域生成实心的图形，使用<code>fill()</code>时可以不手动闭合路径</li>\n<li><code>stroke()</code>，为路径添加描边</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 样例</span></span><br><span class=\"line\">ctx.<span class=\"title function_\">beginPath</span>();</span><br><span class=\"line\">ctx.<span class=\"title function_\">moveTo</span>(<span class=\"number\">75</span>,<span class=\"number\">50</span>);</span><br><span class=\"line\">ctx.<span class=\"title function_\">lineTo</span>(<span class=\"number\">100</span>,<span class=\"number\">75</span>);</span><br><span class=\"line\">ctx.<span class=\"title function_\">lineTo</span>(<span class=\"number\">100</span>,<span class=\"number\">25</span>);</span><br><span class=\"line\">ctx.<span class=\"title function_\">fill</span>();</span><br></pre></td></tr></table></figure>\n\n<div class=\"tip\">所有的路径通过`stroke()`和`fill()`才能体现效果。</div>\n\n<p>里面包含了常见的<code>moveTo</code>和<code>lineTo</code>，表示移动画笔&#x2F;画直线到(x,y)处。画曲线时可以选择：</p>\n<ul>\n<li><code>arc(x, y, radius, startAngle, endAngle, anticlockwise)</code><br>画一个以（x,y）为圆心的以radius为半径的圆弧（圆），从startAngle开始到endAngle结束，按照anticlockwise给定的方向（默认为顺时针）来生成。</li>\n<li><code>arcTo(x1, y1, x2, y2, radius)</code> 根据给定的控制点和半径画一段圆弧，再以直线连接两个控制点。</li>\n<li><code>quadraticCurveTo(cp1x, cp1y, x, y)</code> 绘制二次贝塞尔曲线，cp1x,cp1y为一个控制点，x,y为结束点。</li>\n<li><code>bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y)</code> 绘制三次贝塞尔曲线，cp1x,cp1y为控制点一，cp2x,cp2y为控制点二，x,y为结束点。</li>\n</ul>\n<p><strong>path2D</strong></p>\n<p>通过<code>new path2D()</code>用path2D声明子路径，允许你保留和重用路径对象。除了CanvasRenderingContext2D对象的API外，还可以用<code>addPath</code>新增路径到path2D对象中，它还支持通过SVG格式的字符串导入为路径。</p>\n<h2 id=\"样式\"><a href=\"#样式\" class=\"headerlink\" title=\"样式\"></a>样式</h2><p>通过修改<code>fillStyle</code>和<code>strokeStyle</code>改变当前填充和描边的默认颜色。支持的颜色格式有</p>\n<ul>\n<li>颜色名</li>\n<li>hex</li>\n<li>rgb</li>\n<li>rgba</li>\n</ul>\n<p>通过<code>globalAlpha</code>修改画布里的所有图形的透明度，取值在0到1之间。</p>\n<p>线型样式选择有：</p>\n<ul>\n<li>lineWidth &#x3D; value 设置线条宽度。</li>\n<li>lineCap &#x3D; type 设置线条末端样式。默认为butt，还有round、square可选。</li>\n<li>lineJoin &#x3D; type 设定线条与线条间接合处的样式。round, bevel 和 miter三种可选，miter时，miterLimit可以限制尖角的高度。</li>\n<li>miterLimit &#x3D; value 限制当两条线相交时交接处最大长度；所谓交接处长度（斜接长度）是指线条交接处内角顶点到外角顶点的长度</li>\n</ul>\n<p>设置虚线时，<code>setLineDash(segments)</code>设置当前虚线样式。<code>lineDashOffset = value</code>设置虚线样式的起始偏移量。<code>getLineDash()</code>返回一个包含当前虚线样式，长度为非负偶数的数组。</p>\n<p><strong>渐变</strong></p>\n<p>渐变需要先指定类型和覆盖范围：</p>\n<ul>\n<li><code>createLinearGradient(x1, y1, x2, y2)</code> 方法接受4个参数，表示渐变的起点 (x1,y1) 与终点 (x2,y2)。</li>\n<li><code>createRadialGradient(x1, y1, r1, x2, y2, r2)</code> 方法接受6个参数，前三个定义一个以 (x1,y1) 为原点，半径为r1的圆，后三个参数则定义另一个以 (x2,y2) 为原点，半径为r2的圆。</li>\n</ul>\n<p>创建的渐变通过<code>addColorStop(position, color)</code>添加多个color stop。position参数是一个0.0与1.0之间的数值，表示渐变中颜色所在的相对位置。<strong>渐变是一种样式，通过指定给fillStyle或是strokeStyle发挥作用</strong>。</p>\n<p><strong>模式</strong></p>\n<p>通过<code>createPattern(image, type)</code>创建pattern，Image可以是一个Image对象的引用，或者另一个canvas对象。Type描述重复的格式，是下面的字符串值之一：repeat，repeat-x，repeat-y 和 no-repeat。</p>\n<p>同样，通过指定给<code>fillStyle</code>和<code>strokeStyle</code>使用。</p>\n<p><strong>阴影</strong></p>\n<ul>\n<li>shadowOffsetX &#x3D; float</li>\n<li>shadowOffsetY &#x3D; float<br>shadowOffsetX和shadowOffsetY用来设定阴影在X和Y轴的延伸距离，它们是不受变换矩阵所影响的。负值表示阴影会往上或左延伸，正值则表示会往下或右延伸，它们默认都为0。</li>\n<li>shadowBlur &#x3D; float shadowBlur 用于设定阴影的模糊程度，默认为 0。</li>\n<li>shadowColor &#x3D; color，默认为黑色</li>\n</ul>\n<p>canvas有两种填充规则<a href=\"https://en.wikipedia.org/wiki/Nonzero-rule\"><code>non-zero</code></a>和<code>even-odd</code>，默认为前者。</p>\n<h2 id=\"文字\"><a href=\"#文字\" class=\"headerlink\" title=\"文字\"></a>文字</h2><ul>\n<li><code>fillText(text, x, y [, maxWidth])</code> 在指定的(x,y)位置填充指定的文本，绘制的最大宽度是可选的</li>\n<li><code>strokeText(text, x, y [, maxWidth])</code> 在指定的(x,y)位置绘制文本边框，绘制的最大宽度是可选的</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.<span class=\"property\">font</span> = <span class=\"string\">&quot;48px PingFangSC&quot;</span>;</span><br><span class=\"line\">ctx.<span class=\"title function_\">strokeText</span>(<span class=\"string\">&quot;Hello world&quot;</span>, <span class=\"number\">10</span>, <span class=\"number\">50</span>);</span><br></pre></td></tr></table></figure>\n\n<p>除了<code>font</code>（语法和CSS的font相同）外，还有下面的选择：</p>\n<ul>\n<li>textAlign &#x3D; value 文本对齐选项. 可选的值包括：start, end, left, right or center. 默认值是 start。</li>\n<li>textBaseline &#x3D; value 基线对齐选项. 可选的值包括：top, hanging, middle, alphabetic, ideographic, bottom。默认值是 alphabetic。</li>\n<li>direction &#x3D; value 文本方向</li>\n</ul>\n<p>另外，可以通过<code>measureText()</code>，得到文本绘制的宽度。</p>\n<h2 id=\"使用图片\"><a href=\"#使用图片\" class=\"headerlink\" title=\"使用图片\"></a>使用图片</h2><p>canvas里可以引入Image对象或其他canvas元素，或者通过URL方式使用图片。</p>\n<ul>\n<li>使用相同页面内的图片，使用正常地获取元素的方式获取即可</li>\n<li>使用其它域名下的图片，在HTMLImageElement上使用<code>crossOrigin</code>属性，可以请求加载其它域名上的图片。若服务器不允许跨域加载，则会污染canvas，即不能导出数据</li>\n<li>使用canvas，按获取元素的方式获取即可</li>\n</ul>\n<p>image可以指定<code>src</code>属性为URL或<code>data:url</code>的形式。甚至引入<code>&lt;video&gt;</code>使用视频帧作为image。绘制图片时，使用：</p>\n<ul>\n<li><code>drawImage(image, x, y)</code> 其中image是image或者canvas对象，x和y是其在目标canvas里的起始坐标。</li>\n<li><code>drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight)</code>是包含了缩放和切片后完整的<code>drawImage</code>用法</li>\n</ul>\n<h2 id=\"变形和裁剪\"><a href=\"#变形和裁剪\" class=\"headerlink\" title=\"变形和裁剪\"></a>变形和裁剪</h2><p><strong>save</strong>和<strong>restore</strong>用来保存和恢复canvas状态。每当<code>save()</code>方法被调用后，当前的状态就被推送到栈中保存。状态包括所有变形、样式信息。每次<code>restore</code>时会弹出栈顶的状态。<strong>建议在做变形和裁剪前保存状态</strong>。</p>\n<p>变形用到的属性和CSS很像：</p>\n<ul>\n<li><code>translate(x,y)</code>改变当前原点位置，</li>\n<li><code>rotate(angle)</code>以当前原点为圆心旋转画布，angle为弧度值。</li>\n<li><code>scale(x, y)</code>缩放当前canvas中的图形大小，x和y分别表示两轴上的缩放因子</li>\n<li><code>transform(m11, m12, m21, m22, dx, dy)</code>通过变形矩阵进行变换</li>\n<li><code>setTransform(m11, m12, m21, m22, dx, dy)</code>先还原为单位矩阵，再按入参的矩阵变换</li>\n<li><code>resetTransform</code>重置变形为单位矩阵</li>\n</ul>\n<p><code>globalCompositeOperation</code>定义了图形相互重叠时的处理策略，类似PS中图层的混合模式，默认为<code>darker</code>，还有很多<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation\">别的选项</a>。</p>\n<p><code>clip()</code>即裁剪方法，和<code>fill</code>以及<code>stroke</code>类似，不过<code>clip</code>将路径对应的部分裁剪出指定区域。</p>\n<h2 id=\"动画\"><a href=\"#动画\" class=\"headerlink\" title=\"动画\"></a>动画</h2><p>canvas只是一个画布，画出的东西都会保持原样。制作动画只能采取重绘，逐帧绘制，而每一帧包括下面几步：</p>\n<ul>\n<li>清空canvas，可以使用<code>clearRect</code>方法</li>\n<li><em>可选</em>，保存当前状态</li>\n<li>使用上面提过的种种方法绘制下一帧</li>\n<li><em>可选</em>，恢复状态</li>\n</ul>\n<p>绘制动画通常要结合用户交互以及<code>setTimeout</code>，<code>setInterval</code>，<code>requestAnimationFrame</code>。</p>\n<p>MDN给个一个<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial/Advanced_animations\">小球的组合动画</a>可以参考。</p>\n<h2 id=\"像素级操作\"><a href=\"#像素级操作\" class=\"headerlink\" title=\"像素级操作\"></a>像素级操作</h2><p><code>ImageData</code>接口描述<code>&lt;canvas&gt;</code>元素的一个包含像素数据的区域。它包含<code>width</code>, <code>height</code>, <code>data</code>单个只读属性。<code>ImageData</code>可以通过<code>ctx.createImageData(width, height)</code>或者从已有对象中创建，除此创建的所有像素都是透明黑。</p>\n<p>可以用<code>getImageData(left, top, width, height)</code>方法获取指定范围的<code>ImageData</code>信息，当<code>width</code>和<code>height</code>都为1时，取得当前像素信息。</p>\n<p>使用<code>putImageData(imageData, dx, dy)</code>可以在当前画布(dx, dy)处绘制imageData像素数据。<code>imageSmoothingEnabled</code>默认开启，关闭后可以在图片缩放时看到清楚颗粒化的细节。</p>\n<h2 id=\"导出\"><a href=\"#导出\" class=\"headerlink\" title=\"导出\"></a>导出</h2><p>主要有三种用法：</p>\n<ul>\n<li><code>canvas.toDataURL(&#39;image/png&#39;)</code>，默认将canvas导出成png文件</li>\n<li><code>canvas.toDataURL(&#39;image/jpeg&#39;, quality)</code>，quality指定在0到1之间，默认为0.92。</li>\n<li><code>canvas.toBlob(callback, type, encoderOptions)</code>，这个创建了一个在画布中的代表图片的Blob对像</li>\n</ul>\n<p><code>toDataURL</code>除了上面两种导出格式还有别的选择。</p>\n<h2 id=\"交互\"><a href=\"#交互\" class=\"headerlink\" title=\"交互\"></a>交互</h2><p><code>&lt;canvas&gt;</code>标签只是一个位图，它并不提供任何已经绘制在上面的对象的信息。canvas的内容不能像语义化的HTML一样暴露给一些协助工具。一般来说，你应该避免在交互型的网站或者App上使用canvas。</p>\n<p><code>addHitRegion(options)</code>可以将添加一个点击区域，options可以参考<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/addHitRegion\">MDN文档</a>，鼠标事件如果触发在点击区域中，会带上region用于定位点击区域。</p>\n<p>另外<code>drawFocusIfNeeded()</code>和<code>scrollPathIntoView()</code>方法还可以绘制焦点圈。</p>\n<h2 id=\"性能问题\"><a href=\"#性能问题\" class=\"headerlink\" title=\"性能问题\"></a>性能问题</h2><ul>\n<li>预渲染相似或重复对象</li>\n<li>为了避免抗锯齿带来的额外运算，减少使用浮点数</li>\n<li>在离屏canvas中缓存图片的不同尺寸，不要用<code>drawImage()</code>去缩放它们</li>\n<li>使用多层画布去画一个复杂的场景，比如使用多层画布，描绘不同层级的内容。  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">&quot;stage&quot;</span>&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;ui-layer&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;480&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;320&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;game-layer&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;480&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;320&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;background-layer&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;480&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;320&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span></span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li>\n<li>用CSS画大的背景图</li>\n<li>用CSS transforms特性缩放画布，建议不要将小画布放大，而是去将大画布缩小</li>\n<li>尽可能避免text rendering</li>\n<li>尽可能避免 shadowBlur</li>\n<li><code>window.requestAnimationFrame()</code>性能优于<code>window.setInterval()</code></li>\n</ul>\n",
            "tags": [
                "canvas",
                "绘图",
                "动画"
            ]
        }
    ]
}