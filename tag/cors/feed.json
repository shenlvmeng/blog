{
    "version": "https://jsonfeed.org/version/1",
    "title": "Shenlvmeng's Blog • All posts by \"cors\" tag",
    "description": "Be sharp, my friend.",
    "home_page_url": "http://shenlvmeng.github.com/blog",
    "items": [
        {
            "id": "http://shenlvmeng.github.com/blog/2017/04/18/cors/",
            "url": "http://shenlvmeng.github.com/blog/2017/04/18/cors/",
            "title": "跨域技法之CORS",
            "date_published": "2017-04-18T12:44:38.000Z",
            "content_html": "<p>说到CORS，要从下面是一段很常见的前端面试对话</p>\n<blockquote>\n<p>问: 之前实践中有遇到过跨域的需求吗？</p>\n</blockquote>\n<blockquote>\n<p>答: 遇到过。</p>\n</blockquote>\n<blockquote>\n<p>问: 那你是怎么解决的呢？</p>\n</blockquote>\n<blockquote>\n<p>答: 跨域吧，大概有8种方法，<del>很平衡</del>，jsonp，CORS，反向代理，Websocket。结合iframe，还有使用document.domain, window.name, location.hash, window.postMessage等方法。</p>\n</blockquote>\n<h3 id=\"jsonp\"><a href=\"#jsonp\" class=\"headerlink\" title=\"jsonp\"></a>jsonp</h3><p>jsonp是此前最为常用的一种跨域方法，利用了<code>&lt;script&gt;</code>标签的非跨域性，实现起来大概是下面这样的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">jsonp</span>(<span class=\"params\">url, success</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> ud = <span class=\"string\">&#x27;_&#x27;</span> + +<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>,</span><br><span class=\"line\">      script = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;script&#x27;</span>),</span><br><span class=\"line\">      head = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&#x27;head&#x27;</span>)[<span class=\"number\">0</span>] </span><br><span class=\"line\">          || <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">window</span>[ud] = <span class=\"keyword\">function</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">    head.<span class=\"title function_\">removeChild</span>(script);</span><br><span class=\"line\">    success &amp;&amp; <span class=\"title function_\">success</span>(data);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  script.<span class=\"property\">src</span> = url.<span class=\"title function_\">replace</span>(<span class=\"string\">&#x27;callback=?&#x27;</span>, <span class=\"string\">&#x27;callback=&#x27;</span> + ud);</span><br><span class=\"line\">  head.<span class=\"title function_\">appendChild</span>(script);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">jsonp</span>(<span class=\"string\">&#x27;http://soundcloud.com/oembed?url=http%3A//soundcloud.com/forss/flickermood&amp;format=js&amp;callback=?&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">data</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);</span><br><span class=\"line\">&#125;); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CORS\"><a href=\"#CORS\" class=\"headerlink\" title=\"CORS\"></a>CORS</h3><p>CORS（<a href=\"https://www.w3.org/TR/cors/\">Cross-Origin Resource Sharing</a>）是W3C规定的在客户端用来进行跨站通信的标准。随着XMLHttpRequest2的出现，大部分浏览器下，可以像普通同域那样使用xhr对象来发起跨域请求。</p>\n<h4 id=\"构造一个CORS请求\"><a href=\"#构造一个CORS请求\" class=\"headerlink\" title=\"构造一个CORS请求\"></a>构造一个CORS请求</h4><p>CORS被下列浏览器<a href=\"http://caniuse.com/#search=cors\">支持</a></p>\n<ul>\n<li>Chrome 3+</li>\n<li>Firefox 3.5+</li>\n<li>Opera 12+</li>\n<li>Safari 4+</li>\n<li>Internet Explorer 8+</li>\n</ul>\n<p>其中Chrome，FF，Opera，Safari都通过<a href=\"https://www.html5rocks.com/zh/tutorials/file/xhr2/\">XMLHttpRequest2</a>对象来实现CORS。不一般的IE通过XDomainRequest对象实现，不过工作方式和xhr对象大同小异。Nicolas Zakas（《JavaScript高级程序设计》的作者）写了一个<a href=\"http://www.nczonline.net/blog/2010/05/25/cross-domain-ajax-with-cross-origin-resource-sharing/\">helper函数</a>，保证了浏览器兼容性：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createCORSRequest</span>(<span class=\"params\">method, url</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"string\">&quot;withCredentials&quot;</span> <span class=\"keyword\">in</span> xhr) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Check if the XMLHttpRequest object has a &quot;withCredentials&quot; property.</span></span><br><span class=\"line\">    <span class=\"comment\">// &quot;withCredentials&quot; only exists on XMLHTTPRequest2 objects.</span></span><br><span class=\"line\">    xhr.<span class=\"title function_\">open</span>(method, url, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"title class_\">XDomainRequest</span> != <span class=\"string\">&quot;undefined&quot;</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Otherwise, check if XDomainRequest.</span></span><br><span class=\"line\">    <span class=\"comment\">// XDomainRequest only exists in IE, and is IE&#x27;s way of making CORS requests.</span></span><br><span class=\"line\">    xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XDomainRequest</span>();</span><br><span class=\"line\">    xhr.<span class=\"title function_\">open</span>(method, url);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Otherwise, CORS is not supported by the browser.</span></span><br><span class=\"line\">    xhr = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> xhr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"title function_\">createCORSRequest</span>(<span class=\"string\">&#x27;GET&#x27;</span>, url);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!xhr) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;CORS not supported&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"withCredentials\"><a href=\"#withCredentials\" class=\"headerlink\" title=\"withCredentials\"></a>withCredentials</h4><p>标准的CORS请求默认不携带cookie，如果需要在请求中携带cookie信息，需要在为xhr对象指定<code>withCredentials</code>属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhr.<span class=\"property\">withCredentials</span> = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>同时，服务器端也要在响应头上设置<code>Access-Control-Allow-Credentials</code>字段为<code>true</code>。像下面这样:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Access-Control-Allow-Credentials: true</span><br></pre></td></tr></table></figure>\n\n<p>值得注意的是，cookie同样遵守同源法则，即你的JS代码无法获取和设置远端的cookie。</p>\n<h4 id=\"发起CORS请求\"><a href=\"#发起CORS请求\" class=\"headerlink\" title=\"发起CORS请求\"></a>发起CORS请求</h4><p>CORS请求发起方式和xhr没有什么区别，调用<code>xhr.send()</code>即可。综合来看，一个End to End的例子像下面这样</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Create the XHR object.</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createCORSRequest</span>(<span class=\"params\">method, url</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"string\">&quot;withCredentials&quot;</span> <span class=\"keyword\">in</span> xhr) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// XHR for Chrome/Firefox/Opera/Safari.</span></span><br><span class=\"line\">    xhr.<span class=\"title function_\">open</span>(method, url, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"title class_\">XDomainRequest</span> != <span class=\"string\">&quot;undefined&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// XDomainRequest for IE.</span></span><br><span class=\"line\">    xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XDomainRequest</span>();</span><br><span class=\"line\">    xhr.<span class=\"title function_\">open</span>(method, url);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// CORS not supported.</span></span><br><span class=\"line\">    xhr = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> xhr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Helper method to parse the title tag from the response.</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getTitle</span>(<span class=\"params\">text</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> text.<span class=\"title function_\">match</span>(<span class=\"string\">&#x27;&lt;title&gt;(.*)?&lt;/title&gt;&#x27;</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Make the actual CORS request.</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">makeCorsRequest</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// This is a sample server that supports CORS.</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> url = <span class=\"string\">&#x27;http://html5rocks-cors.s3-website-us-east-1.amazonaws.com/index.html&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> xhr = <span class=\"title function_\">createCORSRequest</span>(<span class=\"string\">&#x27;GET&#x27;</span>, url);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!xhr) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;CORS not supported&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Response handlers.</span></span><br><span class=\"line\">  xhr.<span class=\"property\">onload</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> text = xhr.<span class=\"property\">responseText</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> title = <span class=\"title function_\">getTitle</span>(text);</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;Response from CORS request to &#x27;</span> + url + <span class=\"string\">&#x27;: &#x27;</span> + title);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  xhr.<span class=\"property\">onerror</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;Woops, there was an error making the request.&#x27;</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  xhr.<span class=\"title function_\">send</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"背后\"><a href=\"#背后\" class=\"headerlink\" title=\"背后\"></a>背后</h4><p><img src=\"/blog/images/cors_flow.png\"></p>\n<p>CORS背后的脏活累活包括额外的包头以及额外的报文，这些由浏览器帮我们代劳了。CORS请求分为“<em>简单的请求</em>”和“<em>没那么简单的请求</em>”。简单的请求包含下列特征：</p>\n<ul>\n<li>HTTP方法名是<code>GET</code>, <code>POST</code>, <code>HEAD</code>之一</li>\n<li>HTTP包头包括<ul>\n<li>Accept</li>\n<li>Accept-Language</li>\n<li>Content-Language</li>\n<li>Last-Event-ID</li>\n<li>Content-Type为<code>application/x-www-form-urlencoded</code>或<code>multipart/form-data</code>或<code>text/plain</code></li>\n</ul>\n</li>\n</ul>\n<p>这种普通的CORS请求可以不必选择CORS，而可以通过jsonp或表单提交的方式解决。剩下的不那么简单的请求则需要浏览器和服务器进行额外的报文交换（prelight request）。</p>\n<p>我们先从一个简单的请求开始，利用上面封装好的函数，写出下面的一段代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">&quot;http://api.foo.com/cors&quot;</span>,</span><br><span class=\"line\">    xhr = <span class=\"title function_\">createCORSRequest</span>(<span class=\"string\">&#x27;GET&#x27;</span>, url);</span><br><span class=\"line\">xhr.<span class=\"title function_\">send</span>();</span><br></pre></td></tr></table></figure>\n\n<p>在它的背后的HTTP包头像下面这样，请注意其中的Origin字段。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /cors HTTP/1.1</span><br><span class=\"line\">Origin: http://api.bar.com</span><br><span class=\"line\">Host: api.foo.com</span><br><span class=\"line\">Accept-Language: en-US</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">User-Agent: Mozilla/5.0 ...</span><br></pre></td></tr></table></figure>\n\n<p>一个合理的CORS请求<strong>必须</strong>包含一个<strong>Origin</strong>包头。这个包头由浏览器添加，用户不可自行修改。这部分由协议，域名和端口三部分组成。三者任意一个与<strong>Host</strong>不一致就算做跨域。非跨域时，不同浏览器对这个字段的处理方式不同，如FF会省去Origin字段，Chrome和Safari会在POST&#x2F;DELETE&#x2F;PUT时包括这个字段。</p>\n<p>幸运的是，在跨域时一定会带上这个字段。支持CORS会根据客户端的Origin是否在allow list中做出回应。下面是一个样例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Access-Control-Allow-Origin: http://appi.bob.com</span><br><span class=\"line\">Access-Control-Allow-Credentials: true</span><br><span class=\"line\">Access-Control-Expose-Headers: FooBar</span><br><span class=\"line\">Content-Type: text/html; charset=utf-8</span><br></pre></td></tr></table></figure>\n<p>其中前三个以<code>Access-Control-</code>开头的字段和CORS相关。</p>\n<ul>\n<li><code>Access-Control-Allow-Origin</code>(必须)，这个字段必须附加在合法的CORS响应中，像上面例子所写的那样，或是设置为<code>*</code>表示允许任意源的请求（不过一般不会这样设置）</li>\n<li><code>Access-Control-Allow-Credentials</code>(可选)，默认情况下，cookie不被包含在CORS请求中，设置此字段为<code>true</code>表示包含cookie在请求中。这个字段需要和XMLHttpRequest2中的<code>withCredentials</code>属性配合保证成功。</li>\n<li><code>Access-Control-Expose-Headers</code>(可选)，XMLHttpRequest2的<code>getResponseHeader()</code>方法可以获取下面这些属性<ul>\n<li>Cache-Control</li>\n<li>Content-Language</li>\n<li>Content-Type</li>\n<li>Expires</li>\n<li>Last-Modified</li>\n<li>Pragma<br>如果想访问其他属性时，需要设置这个字段，属性间用逗号隔开。</li>\n</ul>\n</li>\n</ul>\n<p>当请求“没那么简单”时，比如徐需要使用PUT或DELETE，或是需要支持JSON的返回资源类型时，浏览器需要先发起一次<strong>prelight request</strong>。在收到服务器允许的回复后，真实的请求再发出。不过这个过程对于用户是透明的。下面是一个例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">&quot;http://api.foo.com&quot;</span>,</span><br><span class=\"line\">    xhr = <span class=\"title function_\">createCORSRequest</span>(<span class=\"string\">&#x27;PUT&#x27;</span>, url);</span><br><span class=\"line\">xhr.<span class=\"title function_\">setRequestHeader</span>(<span class=\"string\">&#x27;X-Custom-Header&#x27;</span>, <span class=\"string\">&#x27;value&#x27;</span>);</span><br><span class=\"line\">xhr.<span class=\"title function_\">send</span>();</span><br></pre></td></tr></table></figure>\n<p><code>Prelight request</code>如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OPTIONS /cors HTTP/1.1</span><br><span class=\"line\">Origin: http://api.bar.com</span><br><span class=\"line\">Access-Control-Request-Method: PUT</span><br><span class=\"line\">Access-Control-Request-Headers: X-Custom-Header</span><br><span class=\"line\">Host: api.foo.com</span><br><span class=\"line\">Accept-Language: en-US</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">User-Agent: Mozilla/5.0 ...</span><br></pre></td></tr></table></figure>\n\n<p>除了我们上面已经提过的<code>Origin</code>字段外，又新增了两个字段</p>\n<ul>\n<li><code>Access-Control-Request-Method</code> 真实的HTTP请求方法。是始终包含在包头的</li>\n<li><code>Access-Control-Request-Headers</code> 用逗号分隔的真实HTTP请求的包头。</li>\n</ul>\n<p>服务器接收到这些后，会根据方法和包头，结合<code>Origin</code>检验合法性。在验证合法后，返回<code>Prelight Response</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Access-Control-Allow-Origin: http://api.bob.com</span><br><span class=\"line\">Access-Control-Allow-Methods: GET, POST, PUT</span><br><span class=\"line\">Access-Control-Allow-Headers: X-Custom-Header</span><br><span class=\"line\">Content-Type: text/html; charset=utf-8</span><br></pre></td></tr></table></figure>\n\n<p>它们的含义从名字中就可以推出一二</p>\n<ul>\n<li><code>Access-Control-Allow-Origin</code>(必须) 略</li>\n<li><code>Access-Control-Allow-Methods</code>(必须)，用逗号分隔的支持的HTTP方法列表。尽管可能请求中只写了一种方法。这么做避免了多次请求</li>\n<li><code>Access-Control-Allow-Headers</code> (若客户端填写对应的头部则为必须)，逗号分割的支持的所有头部类型</li>\n<li><code>Access-Control-Allow-Credentials</code>(可选) 略</li>\n<li><code>Access-Control-Max-Age</code>(可选)，<code>prelight response</code>的缓存时间，以秒为单位。</li>\n</ul>\n<p>在<code>Prelight request</code>和<code>Prelight response</code>交换完成后，就是真正的请求和响应。此时的请求头部可以带上之前商议中所允许的字段，大致像下面这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT /cors HTTP/1.1</span><br><span class=\"line\">Origin: http://api.bob.com</span><br><span class=\"line\">Host: api.alice.com</span><br><span class=\"line\">X-Custom-Header: value</span><br><span class=\"line\">Accept-Language: en-US</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">User-Agent: Mozilla/5.0...</span><br></pre></td></tr></table></figure>\n\n<p>当请求成功发出时，可以在响应头部看到CORS相关的字段，如<code>Access-Control-Allow-Origin</code>。请求失败时，会在console上报错，但不会给出具体信息。</p>\n<h3 id=\"CORS-from-jQuery\"><a href=\"#CORS-from-jQuery\" class=\"headerlink\" title=\"CORS from jQuery\"></a>CORS from jQuery</h3><p>关于使用jQuery发起CORS请求，可以参加后文<a href=\"#refer\">参考</a>的第一条或jQuery相关文档。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><span id=\"refer\"></span></p>\n<ul>\n<li><a href=\"https://www.html5rocks.com/en/tutorials/cors/\">Using CORS</a></li>\n<li><a href=\"https://www.html5rocks.com/zh/tutorials/file/xhr2/\">XMLHttpRequest2 新技巧</a></li>\n</ul>\n",
            "tags": [
                "CORS",
                "跨域"
            ]
        }
    ]
}