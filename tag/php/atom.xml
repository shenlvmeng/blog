<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://shenlvmeng.github.com/blog</id>
    <title>Shenlvmeng&#39;s Blog • Posts by &#34;php&#34; tag</title>
    <link href="http://shenlvmeng.github.com/blog" />
    <updated>2019-09-10T13:02:17.000Z</updated>
    <category term="总结" />
    <category term="制度" />
    <category term="道德" />
    <category term="文官" />
    <category term="万历" />
    <category term="明朝" />
    <category term="读书笔记" />
    <category term="展望" />
    <category term="2018" />
    <category term="2019" />
    <category term="flag" />
    <category term="2020" />
    <category term="2021" />
    <category term="2022" />
    <category term="2023" />
    <category term="面试" />
    <category term="前端" />
    <category term="FAQ" />
    <category term="HTML" />
    <category term="CSS" />
    <category term="style guide" />
    <category term="编程" />
    <category term="范式" />
    <category term="设计" />
    <category term="艺术" />
    <category term="质量" />
    <category term="async_hooks" />
    <category term="cls-hooked" />
    <category term="logId" />
    <category term="录音" />
    <category term="getUserMedia" />
    <category term="AudioContext" />
    <category term="PCM" />
    <category term="WAVE" />
    <category term="二叉搜索树" />
    <category term="算法" />
    <category term="回忆" />
    <category term="老朋友" />
    <category term="C" />
    <category term="Hash" />
    <category term="布隆过滤器" />
    <category term="字符串检索" />
    <category term="canvas" />
    <category term="流程图" />
    <category term="d3" />
    <category term="g6" />
    <category term="zrender" />
    <category term="processOn" />
    <category term="SDN" />
    <category term="cbench" />
    <category term="安装说明" />
    <category term="绘图" />
    <category term="动画" />
    <category term="攻略" />
    <category term="流水账" />
    <category term="成都" />
    <category term="重庆" />
    <category term="武汉" />
    <category term="重构" />
    <category term="代码" />
    <category term="代码风格" />
    <category term="数据可视化" />
    <category term="爬虫" />
    <category term="chrome" />
    <category term="crx" />
    <category term="扩展" />
    <category term="CORS" />
    <category term="跨域" />
    <category term="盒模型" />
    <category term="浮动" />
    <category term="Reactive Programming" />
    <category term="JavaScript" />
    <category term="Cycle.js" />
    <category term="Dart" />
    <category term="最佳实践" />
    <category term="引流" />
    <category term="universal-link" />
    <category term="app-link" />
    <category term="脚手架" />
    <category term="degit" />
    <category term="git" />
    <category term="设计模式" />
    <category term="类" />
    <category term="接口" />
    <category term="抽象类" />
    <category term="DOM" />
    <category term="Docker" />
    <category term="ONOS" />
    <category term="控制器" />
    <category term="虚拟化" />
    <category term="笔记" />
    <category term="UX" />
    <category term="UED" />
    <category term="准则" />
    <category term="Java" />
    <category term="Ruby" />
    <category term="反射" />
    <category term="编程范式" />
    <category term="鸭子类型" />
    <category term="管理" />
    <category term="效率" />
    <category term="知识工作者" />
    <category term="卓有成效" />
    <category term="Elm" />
    <category term="框架" />
    <category term="函数式编程" />
    <category term="虚网映射" />
    <category term="Javascript" />
    <category term="并发" />
    <category term="event loop" />
    <category term="覆盖率" />
    <category term="端到端测试" />
    <category term="istanbul" />
    <category term="istanbuljs" />
    <category term="JavaSript" />
    <category term="Express" />
    <category term="源码" />
    <category term="代码覆盖率" />
    <category term="istanbul-middleware" />
    <category term="代码插桩" />
    <category term="require钩子" />
    <category term="babel-plugin-istanbul" />
    <category term="css" />
    <category term="html5" />
    <category term="flex" />
    <category term="javascript" />
    <category term="roadmap" />
    <category term="闭包" />
    <category term="Haskell" />
    <category term="monad" />
    <category term="后端" />
    <category term="管理后台" />
    <category term="egg.js" />
    <category term="工作流" />
    <category term="pull request" />
    <category term="golang" />
    <category term="语言学习" />
    <category term="黑客与画家" />
    <category term="创业" />
    <category term="骑行" />
    <category term="海南" />
    <category term="图文" />
    <category term="reflow" />
    <category term="repaint" />
    <category term="命名法" />
    <category term="成功学" />
    <category term="自我建设" />
    <category term="HTTP" />
    <category term="HTTP/2" />
    <category term="SPDY" />
    <category term="QUIC" />
    <category term="HTTPS" />
    <category term="状态码" />
    <category term="网络攻击" />
    <category term="介绍" />
    <category term="图片渲染" />
    <category term="html2canvas" />
    <category term="dom-to-image" />
    <category term="electron" />
    <category term="indexedDB" />
    <category term="异步" />
    <category term="Generator" />
    <category term="thunk" />
    <category term="async" />
    <category term="函数表达式" />
    <category term="对象" />
    <category term="继承" />
    <category term="类型转换" />
    <category term="==" />
    <category term="类型判断" />
    <category term="猫" />
    <category term="杀手" />
    <category term="管理学" />
    <category term="领导力" />
    <category term="梯队" />
    <category term="移动端" />
    <category term="UI" />
    <category term="自适应" />
    <category term="rem" />
    <category term="Electron" />
    <category term="GUI" />
    <category term="gpx" />
    <category term="template" />
    <category term="Electron Builder" />
    <category term="PWA" />
    <category term="方法论" />
    <category term="夜话" />
    <category term="多线" />
    <category term="生活" />
    <category term="密码" />
    <category term="密钥" />
    <category term="技改" />
    <category term="Vue" />
    <category term="gulp" />
    <category term="瀑布流" />
    <category term="电影" />
    <category term="PHP" />
    <category term="参考" />
    <category term="思维" />
    <category term="学习能力" />
    <category term="右脑" />
    <category term="经济学" />
    <category term="宏观经济学" />
    <category term="术语" />
    <category term="GDP" />
    <category term="CPI" />
    <category term="储蓄" />
    <category term="投资" />
    <category term="金融市场" />
    <category term="股票" />
    <category term="债券" />
    <category term="美联储" />
    <category term="失业" />
    <category term="货币" />
    <category term="现值" />
    <category term="准备金" />
    <category term="货币中性" />
    <category term="通货膨胀" />
    <category term="汇率" />
    <category term="购买力" />
    <category term="净出口" />
    <category term="资产净流出" />
    <category term="总需求" />
    <category term="总供给" />
    <category term="流动性偏好" />
    <category term="乘数效应" />
    <category term="菲利普斯曲线" />
    <category term="微观经济学" />
    <category term="供求" />
    <category term="贸易" />
    <category term="市场" />
    <category term="税" />
    <category term="剩余" />
    <category term="外部性" />
    <category term="公共物品" />
    <category term="公共资源" />
    <category term="生产成本" />
    <category term="利润" />
    <category term="垄断" />
    <category term="价格歧视" />
    <category term="寡头" />
    <category term="垄断竞争" />
    <category term="生产要素市场" />
    <category term="贫困" />
    <category term="消费者选择理论" />
    <category term="不对称信息" />
    <category term="政治经济学" />
    <category term="行为经济学" />
    <category term="VSCode" />
    <category term="编辑器" />
    <category term="IDE" />
    <category term="hybrid" />
    <category term="JSBridge" />
    <category term="Web Worker" />
    <category term="Service Worker" />
    <category term="习惯" />
    <category term="lint" />
    <category term="editorconfig" />
    <category term="commit message" />
    <category term="量子物理" />
    <category term="史话" />
    <category term="埋点" />
    <category term="raven.js" />
    <category term="前端监控" />
    <category term="文本编辑器" />
    <category term="quill" />
    <category term="结构化数据" />
    <category term="React" />
    <category term="Hooks" />
    <category term="函数组件" />
    <category term="复用" />
    <category term="状态管理" />
    <category term="redux" />
    <category term="MobX" />
    <category term="代码质量" />
    <category term="重来" />
    <category term="requestAnimationFrame" />
    <category term="TypeScript" />
    <category term="路书" />
    <category term="gpx解析" />
    <category term="EXIF" />
    <category term="人类" />
    <category term="生存" />
    <category term="基因" />
    <category term="响应式编程" />
    <category term="RxJS" />
    <category term="成长" />
    <category term="业务" />
    <category term="思想" />
    <category term="程序设计" />
    <category term="心理学" />
    <category term="自我" />
    <category term="社会思维" />
    <category term="社会影响" />
    <category term="文化" />
    <category term="性别" />
    <category term="从众" />
    <category term="说服" />
    <category term="临床诊断" />
    <category term="陪审团" />
    <category term="司法" />
    <category term="物质主义" />
    <category term="健康" />
    <category term="社会关系" />
    <category term="偏见" />
    <category term="攻击行为" />
    <category term="亲密关系" />
    <category term="友谊" />
    <category term="爱情" />
    <category term="利他" />
    <category term="冲突" />
    <category term="和解" />
    <category term="软技能" />
    <category term="理财" />
    <category term="健身" />
    <category term="自我营销" />
    <category term="学习" />
    <category term="商业模式" />
    <category term="产品" />
    <category term="校园网" />
    <category term="互联网" />
    <category term="技术" />
    <category term="web开发" />
    <category term="哲思" />
    <category term="择偶观" />
    <category term="validator" />
    <category term="大文件" />
    <category term="visibilityChange" />
    <category term="IntersectionObserver" />
    <category term="图种" />
    <category term="draggable" />
    <category term="webpack" />
    <category term="z-index" />
    <category term="git submodule" />
    <category term="object-fit" />
    <category term="object-position" />
    <category term="BroadcastChannel" />
    <category term="extract-text-webpack-plugin" />
    <category term="lottie" />
    <category term="backface-visibility" />
    <category term="egret" />
    <category term="mock" />
    <category term="SSO" />
    <category term="autoprefixer" />
    <category term="polyfill" />
    <category term="Android" />
    <category term="ffmpeg" />
    <category term="React Hooks" />
    <category term="rollup" />
    <category term="CDN" />
    <category term="DNS" />
    <category term="CNAME" />
    <category term="架构" />
    <category term="组件" />
    <category term="ssh" />
    <category term="fis-receiver" />
    <category term="tmux" />
    <category term="origami" />
    <category term="promise" />
    <category term="encodeURI" />
    <category term="encodeURIComponent" />
    <category term="axios" />
    <category term="charles" />
    <category term="黑色幽默" />
    <category term="朋友" />
    <category term="梦" />
    <category term="濒死" />
    <category term="江南" />
    <category term="苏州" />
    <category term="无锡" />
    <category term="宜兴" />
    <category term="湖州" />
    <category term="南浔" />
    <category term="游记" />
    <category term="随笔" />
    <category term="群众" />
    <category term="理论" />
    <category term="实效" />
    <category term="测试" />
    <category term="长沙" />
    <category term="杭州" />
    <category term="湖南" />
    <category term="核酸" />
    <category term="美食" />
    <category term="云南" />
    <category term="丽江" />
    <category term="大理" />
    <category term="青岛" />
    <category term="济南" />
    <category term="山东" />
    <category term="西北" />
    <category term="银川" />
    <category term="西宁" />
    <category term="青海湖" />
    <category term="西海镇" />
    <category term="茶卡盐湖" />
    <category term="厦门" />
    <category term="感受" />
    <category term="C语言" />
    <category term="树" />
    <category term="主干开发" />
    <category term="GitFlow" />
    <category term="GithubFlow" />
    <category term="typescript" />
    <category term="类型系统" />
    <category term="webrtc" />
    <category term="RTMP" />
    <category term="首屏时间" />
    <category term="性能优化" />
    <category term="公司" />
    <category term="个人发展" />
    <category term="战略" />
    <category term="晋升" />
    <category term="哲学" />
    <category term="幸福" />
    <category term="人生" />
    <category term="叔本华" />
    <category term="Unix" />
    <category term="Rollup" />
    <category term="mouseout" />
    <category term="mouseleave" />
    <category term="lint-staged" />
    <category term="吸顶" />
    <category term="图片组件" />
    <category term="形式系统" />
    <category term="不完全性" />
    <category term="隐喻" />
    <category term="哥德尔" />
    <category term="巴赫" />
    <category term="埃舍尔" />
    <entry>
        <id>http://shenlvmeng.github.com/blog/2019/09/10/php-note/</id>
        <title>（旧文）PHP语言介绍</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2019/09/10/php-note/"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;//php.net&#34;&gt;php.net&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;简介&#34;&gt;&lt;a href=&#34;#简介&#34; class=&#34;headerlink&#34; title=&#34;简介&#34;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;PHP来源于工程PHP&amp;#x2F;FI，由Rasmus Lerdorf创建于1995年，起初只是一套简单的Perl脚本，名字叫做“Personal Home Page Tools”，语法也和Perl很像，随着用户的增加，改进为用C语言实现。1997年，Andi Gutmans 和 Zeev Suraski 重写了代码，推出第三版，PHP&amp;#x2F;FI也演变成PHP（PHP: Hypertext Preprocessor）。注意，这是一个递归的缩写。&lt;/p&gt;
&lt;p&gt;1999年，由两人改进的更具模块化的“Zend Engine”引入PHP，在结合了许多新功能后，2000年5月发布官方版PHP 4.0。如今广泛使用的5.x版本从2004年起发布。5.x版本支持完整的面向对象模型。目前的最新版本已经到了7.x版本（直接从稳定的5.6版跃迁）。&lt;/p&gt;
&lt;p&gt;由于丰富的PHP主要用于服务端的脚本程序，就像其他的CGI程序，如收集表单，生成网页，发送&amp;#x2F;接收Cookie等。除此以外，PHP还用于命令行脚本，编写桌面应用程序。这两种开发可能会用到PHP的拓展库。由于解析器的存在，PHP的跨平台能力很好。 &lt;/p&gt;
&lt;p&gt;关于php的绝大多数内容都可以在&lt;a href=&#34;//php.net&#34;&gt;php.net&lt;/a&gt;上找到，上面介绍的历史也是如此。本文的绝大多数内容更是如此。&lt;/p&gt;
&lt;h2 id=&#34;安装和配置&#34;&gt;&lt;a href=&#34;#安装和配置&#34; class=&#34;headerlink&#34; title=&#34;安装和配置&#34;&gt;&lt;/a&gt;安装和配置&lt;/h2&gt;&lt;p&gt;在通常情况下，php用于服务器端脚本，安装配置较之Javascript复杂很多。在Unix环境下，假设服务器环境（如Apache, Nginx等）已经安装完毕，可以通过configure脚本安装配置。Windows环境下，通过MSI文件安装配置PHP和所有内置以及PECL拓展库。此外Mac OS X，云平台等安装各有不同，详见&lt;a href=&#34;http://php.net/manual/zh/install.php&#34;&gt;官方教程&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;配置文件（&lt;code&gt;php.ini&lt;/code&gt;）在PHP启动时被读取，作为服务器模块版本的PHP，仅在服务器启动时读取1次，作为CGI和CLI版本，每次调用都会读取。用户亦可自定义自己的&lt;code&gt;user.ini&lt;/code&gt;文件。PHP的有些指令可以在PHP脚本中用&lt;code&gt;ini_set()&lt;/code&gt;设定，有些只能在&lt;code&gt;php.ini&lt;/code&gt;或&lt;code&gt;httpd.conf&lt;/code&gt;中设定。这些是由指令的模式决定的，模式有4种：&lt;code&gt;PHP_INI_USER&lt;/code&gt;, &lt;code&gt;PHP_INI_PERDIR&lt;/code&gt;, &lt;code&gt;PHP_INI_SYSTEM&lt;/code&gt;, &lt;code&gt;PHP_INI_ALL&lt;/code&gt;。具体见&lt;a href=&#34;http://php.net/manual/zh/configuration.changes.modes.php&#34;&gt;文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;PHP作为Apache模块运行时，还可以用&lt;code&gt;php_value&lt;/code&gt;, &lt;code&gt;php_flag&lt;/code&gt;, &lt;code&gt;php_admin_value&lt;/code&gt;, &lt;code&gt;php_admin_flag&lt;/code&gt;命令设置。&lt;/p&gt;
&lt;h2 id=&#34;第一段代码&#34;&gt;&lt;a href=&#34;#第一段代码&#34; class=&#34;headerlink&#34; title=&#34;第一段代码&#34;&gt;&lt;/a&gt;第一段代码&lt;/h2&gt;&lt;p&gt;与C等语言通过代码输出HTML不同的是，PHP页面本身就是HTML，你也完全可以像通常建立HTML页面那样创建和编辑PHP页面，只不过其中嵌入了&lt;code&gt;&amp;lt;?php&lt;/code&gt;和&lt;code&gt;?&amp;gt;&lt;/code&gt;包裹的PHP代码。与Javascript不同的是，PHP运行在服务端，用户无从得知脚本是如何运行的。&lt;/p&gt;
&lt;p&gt;值得一提的是，除了上述的开始和结束标记，使用&lt;code&gt;&amp;lt;script language =&amp;quot;php&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;或者asp风格的短标记&lt;code&gt;&amp;lt;?=&lt;/code&gt;, &lt;code&gt;&amp;lt;%=&lt;/code&gt;也行（&lt;em&gt;不建议&lt;/em&gt;）。在这一对标记之外的内容都会被PHP解析器忽略。可以在脚本中通过&lt;code&gt;phpinfo()&lt;/code&gt;打印php的整体配置信息。&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;phpinfo&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在html语句中嵌入php语句时，尽量做到将业务逻辑和展示语句隔离开对维护php工程有着极大的好处。&lt;/p&gt;
&lt;h2 id=&#34;特性参考&#34;&gt;&lt;a href=&#34;#特性参考&#34; class=&#34;headerlink&#34; title=&#34;特性参考&#34;&gt;&lt;/a&gt;特性参考&lt;/h2&gt;&lt;h3 id=&#34;PHP标识&#34;&gt;&lt;a href=&#34;#PHP标识&#34; class=&#34;headerlink&#34; title=&#34;PHP标识&#34;&gt;&lt;/a&gt;PHP标识&lt;/h3&gt;&lt;p&gt;如上文中提到，PHP通过&lt;code&gt;&amp;lt;?php&lt;/code&gt;和&lt;code&gt;?&amp;gt;&lt;/code&gt;分隔php脚本，在&lt;code&gt;php.ini&lt;/code&gt;激活&lt;code&gt;short_open_tag&lt;/code&gt;配置后，支持使用短标记作为分隔符。&lt;strong&gt;如果文件内容为纯PHP代码，最好在文末删除结束标记，以免打印意料之外的空白&lt;/strong&gt;。如下示例：&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Hello world&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// ... more code&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Last statement&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// stop here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;PHP使用&lt;strong&gt;分号&lt;/strong&gt;作为分隔符，支持C，C++，Perl风格的注释。即&lt;code&gt;//&lt;/code&gt;，&lt;code&gt;/**/&lt;/code&gt;和&lt;code&gt;#&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;类型-amp-类型转换&#34;&gt;&lt;a href=&#34;#类型-amp-类型转换&#34; class=&#34;headerlink&#34; title=&#34;类型 &amp;amp; 类型转换&#34;&gt;&lt;/a&gt;类型 &amp;amp; 类型转换&lt;/h3&gt;&lt;p&gt;PHP的原始数据类型有&lt;strong&gt;boolean，integer，float，string，array，object，resource，NULL&lt;/strong&gt;。其中前4种为标量，第5，6中为复合类型。resouce表示资源，&lt;strong&gt;NULL表示无类型&lt;/strong&gt;。PHP中&lt;strong&gt;float也称为double&lt;/strong&gt;。在确保代码易读性上，还有mixed，number和callback几种伪类型。需要注意的是，PHP和Javascript一样，类型往往根据上下文确定。&lt;/p&gt;
&lt;h4 id=&#34;boolean&#34;&gt;&lt;a href=&#34;#boolean&#34; class=&#34;headerlink&#34; title=&#34;boolean&#34;&gt;&lt;/a&gt;boolean&lt;/h4&gt;&lt;p&gt;和JavaScript类似。&lt;/p&gt;
&lt;p&gt;只有TRUE或FALSE，除了false以外，还有下列假值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0&lt;/li&gt;
&lt;li&gt;0.0&lt;/li&gt;
&lt;li&gt;‘’&lt;/li&gt;
&lt;li&gt;“0”&lt;/li&gt;
&lt;li&gt;[],&lt;/li&gt;
&lt;li&gt;{}（仅4.0）&lt;/li&gt;
&lt;li&gt;NULL&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其余均为真值（包含任何resource）。和Javascript类似，支持&amp;#x3D;&amp;#x3D;&amp;#x3D;全等。&lt;/p&gt;
&lt;h4 id=&#34;integer&#34;&gt;&lt;a href=&#34;#integer&#34; class=&#34;headerlink&#34; title=&#34;integer&#34;&gt;&lt;/a&gt;integer&lt;/h4&gt;&lt;p&gt;有十进制，十六进制，八进制，二进制表示。除十进制外，分别以&lt;code&gt;0&lt;/code&gt;, &lt;code&gt;0x&lt;/code&gt;, &lt;code&gt;0b&lt;/code&gt;开头。5.0.5后最大值可以用常量&lt;code&gt;PHP_INT_MAX&lt;/code&gt;设置。&lt;strong&gt;整数溢出时会被解释为float&lt;/strong&gt;。&lt;strong&gt;注意：八进制中传递非法数字后，后面数字会被忽略&lt;/strong&gt;。类型转换时，可以使用&lt;code&gt;intval()&lt;/code&gt;。在浮点数过大，分数强制转换和其他类型转换时，结果未定义。&lt;/p&gt;
&lt;h4 id=&#34;float&#34;&gt;&lt;a href=&#34;#float&#34; class=&#34;headerlink&#34; title=&#34;float&#34;&gt;&lt;/a&gt;float&lt;/h4&gt;&lt;p&gt;又称为double和real，支持科学记数法。运算时精度有限，高精度要求下参考任意精度数学函数和gmp函数。在比较大小时需要谨慎，可以采用相减之差和最大容忍度比较的方法作折衷。常量&lt;code&gt;NAN&lt;/code&gt;表示浮点计算中不可描述的值，为float类型，不等于任何其他变量，甚至自身。可以用&lt;code&gt;is_nan()&lt;/code&gt;检查。&lt;/p&gt;
&lt;h4 id=&#34;string&#34;&gt;&lt;a href=&#34;#string&#34; class=&#34;headerlink&#34; title=&#34;string&#34;&gt;&lt;/a&gt;string&lt;/h4&gt;&lt;p&gt;和JavaScript区别较大。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PHP字符串的字符占1个字节，因此不支持Unicode。字符串最长可达2GB&lt;/li&gt;
&lt;li&gt;表示字符串有4种方法，&lt;strong&gt;单引号，双引号，heredoc和nowdoc&lt;/strong&gt;。&lt;ul&gt;
&lt;li&gt;单引号下，只转义单引号和反斜线，其余字符均为plain text，支持多行；&lt;/li&gt;
&lt;li&gt;双引号下，对换行回车制表符等特殊字符进行转义，还会对变量解析（$xxx）的形式（和Javascript相似）。&lt;/li&gt;
&lt;li&gt;Heredoc结构里，在&amp;lt;&amp;lt;&amp;lt;符号后提供一个标识符然后换行，接下来是字符串本身，字符串后另起一行用前面定义的标识符作为结束标志。中间内容的处理方式同双引号。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$str&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;lt;&amp;lt;&amp;lt;EOD&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;Example of string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;spanning multiple lines&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;using heredoc syntax.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;EOD&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;5.3.0以后，可以使用heredoc结构初始化静态变量和类的属性以及常量。nowdoc结构类似于单引号版的heredoc，但是跟在&lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/code&gt;之后的标识符要用单引号括起来，多用在不解析特殊字符的大段文本中。在双引号或heredoc结构中，变量会被解析，简单语法下，PHP解析器会去组合尽量多的标识形成一个合法的&lt;strong&gt;变量名&lt;/strong&gt;。复杂语法下，&lt;code&gt;$&lt;/code&gt;符号的&lt;strong&gt;外侧或里侧&lt;/strong&gt;会紧贴&lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;，来实现更复杂的变量表达式。&lt;/p&gt;
&lt;p&gt;字符串中的字符可以用&lt;code&gt;[]&lt;/code&gt;或者&lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;（不建议）访问。下标超出字符串长度时，会将&lt;strong&gt;多出的长度用空格填充&lt;/strong&gt;。另外，字符串使用&lt;code&gt;.&lt;/code&gt;连接。使用&lt;code&gt;strval()&lt;/code&gt;转换变量为字符串，boolean会转成&lt;code&gt;&amp;quot;1&amp;quot;&lt;/code&gt;或&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;。integer和float作字面转换。**array总转换成&lt;code&gt;&amp;quot;Array&amp;quot;&lt;/code&gt;**。object总转换成”Object”。NULL总转变成&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;serialize()&lt;/code&gt;可以串行化大部分PHP值。字符串转为数值时，类似Javascript的&lt;code&gt;parseInt()/parseFloat()&lt;/code&gt;，试图从头转换直到遇到不合法字符，支持科学记数法。区别在于PHP中失败时返回&lt;code&gt;0&lt;/code&gt;而不是&lt;code&gt;NAN&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;关于string的更多介绍，参加&lt;a href=&#34;https://www.php.net/manual/zh/language.types.string.php#language.types.string&#34;&gt;官方文档String&lt;/a&gt;一章。&lt;/p&gt;
&lt;h4 id=&#34;array&#34;&gt;&lt;a href=&#34;#array&#34; class=&#34;headerlink&#34; title=&#34;array&#34;&gt;&lt;/a&gt;array&lt;/h4&gt;&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$array&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;array&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 自 PHP 5.4 起&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$array&lt;/span&gt; = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;与Javascript区别较大，PHP中的数组也是个&lt;strong&gt;有序&lt;/strong&gt;映射，描述了keys到values的映射。array使用&lt;code&gt;array()&lt;/code&gt;初始化，在5.4版本后支持字面量定义。&lt;strong&gt;key可以是integer或string&lt;/strong&gt;（integer时是数组，string时是键值对），value可以是任何类型。使用&lt;code&gt;[]&lt;/code&gt;访问和修改数组元素，通过&lt;code&gt;unset()&lt;/code&gt;删除某键值对（类似与Javascript的&lt;code&gt;delete&lt;/code&gt;）。有趣的是，使用&lt;code&gt;[]&lt;/code&gt;不指定键名时，则取当前最大整数索引值（曾经存在即可），新的键名在之上加1。可以使用&lt;code&gt;array_values()&lt;/code&gt;重建索引。&lt;/p&gt;
&lt;p&gt;转换为数组时，除object、NULL类型外，其余类型得到只有一个元素的数组。object类型转换时，单元为对象的属性，键名为成员变量名，还有其他特殊情况见文档&lt;a href=&#34;https://www.php.net/manual/zh/language.types.array.php&#34;&gt;数组&lt;/a&gt;部分。NULL会转换为一个空数组。&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;A&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$A&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// This will become &amp;#x27;\0A\0A&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;B&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;A&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$A&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// This will become &amp;#x27;\0B\0A&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$AA&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// This will become &amp;#x27;AA&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;var_dump&lt;/span&gt;((&lt;span class=&#34;keyword&#34;&gt;array&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title function_ invoke__&#34;&gt;B&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;object&#34;&gt;&lt;a href=&#34;#object&#34; class=&#34;headerlink&#34; title=&#34;object&#34;&gt;&lt;/a&gt;object&lt;/h4&gt;&lt;p&gt;对象，通过new来实例化一个类产生。转换为对象时，PHP会创建一个内置类stdClass的实例，可以通过&lt;code&gt;new stdClass()&lt;/code&gt;创建一个空对象。php 7后，还有&lt;code&gt;new class&amp;#123;&amp;#125;&lt;/code&gt;和&lt;code&gt;(object) []&lt;/code&gt;方法。&lt;/p&gt;
&lt;h4 id=&#34;resource&#34;&gt;&lt;a href=&#34;#resource&#34; class=&#34;headerlink&#34; title=&#34;resource&#34;&gt;&lt;/a&gt;resource&lt;/h4&gt;&lt;p&gt;用于保存到外部资源的一个引用，通过专门的函数建立和使用，由Zend引擎维护资源回收。&lt;/p&gt;
&lt;h4 id=&#34;NULL&#34;&gt;&lt;a href=&#34;#NULL&#34; class=&#34;headerlink&#34; title=&#34;NULL&#34;&gt;&lt;/a&gt;NULL&lt;/h4&gt;&lt;p&gt;表示一个变量没有值。可细分为被赋值为&lt;code&gt;NULL&lt;/code&gt;，尚未赋值和被&lt;code&gt;unset()&lt;/code&gt;。&lt;strong&gt;NULL不区分大小写&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;callback&#34;&gt;&lt;a href=&#34;#callback&#34; class=&#34;headerlink&#34; title=&#34;callback&#34;&gt;&lt;/a&gt;callback&lt;/h4&gt;&lt;p&gt;类似Javascript中的function类型，一些函数如&lt;code&gt;call_user_func()&lt;/code&gt;可以接收用户定义的回调函数作为参数。传递时，以string类型传递函数名。5.3.0后可以直接传递closure给回调参数。&lt;/p&gt;
&lt;p&gt;其余伪类型多用于代码的说明注释中，如&lt;code&gt;mixed&lt;/code&gt;表述多种不确定类型，&lt;code&gt;void&lt;/code&gt;表述函数返回值无用或不接受任何参数等。&lt;/p&gt;
&lt;h4 id=&#34;类型转换&#34;&gt;&lt;a href=&#34;#类型转换&#34; class=&#34;headerlink&#34; title=&#34;类型转换&#34;&gt;&lt;/a&gt;类型转换&lt;/h4&gt;&lt;p&gt;使用&lt;code&gt;var_dump()&lt;/code&gt;查看值和类型，&lt;code&gt;gettype()&lt;/code&gt;查看类型，&lt;code&gt;is_int&lt;/code&gt;&amp;#x2F;&lt;code&gt;is_string&lt;/code&gt;&amp;#x2F;…判断类型，&lt;code&gt;(type)&lt;/code&gt;或&lt;code&gt;settype()&lt;/code&gt;强制类型转换。PHP的强制转换和C非常相似。目前支持&lt;code&gt;(int)&lt;/code&gt;, &lt;code&gt;(bool)&lt;/code&gt;, &lt;code&gt;(float)&lt;/code&gt;, &lt;code&gt;(string)&lt;/code&gt;, &lt;code&gt;(array)&lt;/code&gt;, &lt;code&gt;(object)&lt;/code&gt;, &lt;code&gt;(unset)&lt;/code&gt;（转换为&lt;code&gt;NULL&lt;/code&gt;）。5.2版本后支持&lt;code&gt;(binary)&lt;/code&gt;转换。&lt;/p&gt;
&lt;p&gt;除了强制转换，PHP中会根据需要对变量自动转换，如加法。与Javascript的&lt;code&gt;+&lt;/code&gt;不大不同，PHP会优先将操作数转为float，否则会将操作数解释为integer。数组的键名会优先转换为integer（仅十进制），再转换为string。下面就是一个有趣的例子：&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable&#34;&gt;$foo&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;;  &lt;span class=&#34;comment&#34;&gt;// $foo is a string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable&#34;&gt;$foo&lt;/span&gt; += &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;;   &lt;span class=&#34;comment&#34;&gt;// $foo is an int now&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable&#34;&gt;$foo&lt;/span&gt; = &lt;span class=&#34;variable&#34;&gt;$foo&lt;/span&gt; + &lt;span class=&#34;number&#34;&gt;1.3&lt;/span&gt;;  &lt;span class=&#34;comment&#34;&gt;// $foo is a float now (3.3)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable&#34;&gt;$foo&lt;/span&gt; = &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt; + &lt;span class=&#34;string&#34;&gt;&amp;quot;10 Little Piggies&amp;quot;&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// $foo is an integer (15)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable&#34;&gt;$foo&lt;/span&gt; = &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt; + &lt;span class=&#34;string&#34;&gt;&amp;quot;Small Pigs&amp;quot;&lt;/span&gt;;     &lt;span class=&#34;comment&#34;&gt;// $foo is an integer (5)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;变量-amp-常量&#34;&gt;&lt;a href=&#34;#变量-amp-常量&#34; class=&#34;headerlink&#34; title=&#34;变量 &amp;amp; 常量&#34;&gt;&lt;/a&gt;变量 &amp;amp; 常量&lt;/h3&gt;&lt;p&gt;PHP变量以&lt;code&gt;$&lt;/code&gt;符号开头，只能包含数字字母（这里说的字母包含ASCII字符）和下划线且不能以数字开头。变量区分大小写。&lt;code&gt;$this&lt;/code&gt;是特殊变量不能赋值。可以在&lt;code&gt;$&lt;/code&gt;前加&lt;code&gt;&amp;amp;&lt;/code&gt;符号&lt;strong&gt;引用赋值&lt;/strong&gt;，在改变原变量时，目标变量也会改动。&lt;code&gt;isset()&lt;/code&gt;可以检查变量是否已被赋值。&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$var&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Bob&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$Var&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Joe&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;&lt;span class=&#34;subst&#34;&gt;$var&lt;/span&gt;, &lt;span class=&#34;subst&#34;&gt;$Var&lt;/span&gt;&amp;quot;&lt;/span&gt;;      &lt;span class=&#34;comment&#34;&gt;// 输出 &amp;quot;Bob, Joe&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;site = &lt;span class=&#34;string&#34;&gt;&amp;#x27;not yet&amp;#x27;&lt;/span&gt;;     &lt;span class=&#34;comment&#34;&gt;// 非法变量名；以数字开头&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$_4site&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;not yet&amp;#x27;&lt;/span&gt;;    &lt;span class=&#34;comment&#34;&gt;// 合法变量名；以下划线开头&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$i&lt;/span&gt;站点is = &lt;span class=&#34;string&#34;&gt;&amp;#x27;mansikka&amp;#x27;&lt;/span&gt;;  &lt;span class=&#34;comment&#34;&gt;// 合法变量名；可以用中文&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;用户在为变量命名时，有几点要注意的。function, class, interface, 常量和函数外定义的变量会进入全局命名空间；建议在函数名中用&lt;code&gt;_&lt;/code&gt;区分，类名中用驼峰或首字母大写的驼峰命名。注意：很多情况下，PHP会自动将变量名中的点转换成下划线。&lt;/p&gt;
&lt;h4 id=&#34;可变变量&#34;&gt;&lt;a href=&#34;#可变变量&#34; class=&#34;headerlink&#34; title=&#34;可变变量&#34;&gt;&lt;/a&gt;可变变量&lt;/h4&gt;&lt;p&gt;PHP中的变量名可以很方便地改变，而且可变变量可以用在数组或对象中，如下面的例子，。使用可变变量时，注意通过花括号给属性名清晰定界。&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Given these variables ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$nameTypes&lt;/span&gt;    = &lt;span class=&#34;keyword&#34;&gt;array&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;first&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;last&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;company&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$name_first&lt;/span&gt;   = &lt;span class=&#34;string&#34;&gt;&amp;quot;John&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$name_last&lt;/span&gt;    = &lt;span class=&#34;string&#34;&gt;&amp;quot;Doe&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$name_company&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;quot;PHP.net&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Then this loop is ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;foreach&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$nameTypes&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$type&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;print&lt;/span&gt; $&amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;quot;name_&lt;span class=&#34;subst&#34;&gt;$type&lt;/span&gt;&amp;quot;&lt;/span&gt;&amp;#125; . &lt;span class=&#34;string&#34;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// ... equivalent to this print statement.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;&lt;span class=&#34;subst&#34;&gt;$name_first&lt;/span&gt;\n&lt;span class=&#34;subst&#34;&gt;$name_last&lt;/span&gt;\n&lt;span class=&#34;subst&#34;&gt;$name_company&lt;/span&gt;\n&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;预定义变量&#34;&gt;&lt;a href=&#34;#预定义变量&#34; class=&#34;headerlink&#34; title=&#34;预定义变量&#34;&gt;&lt;/a&gt;预定义变量&lt;/h4&gt;&lt;p&gt;PHP提供许多预定义的变量。PHP中的许多预定义变量都是“超全局的”，这意味着它们在脚本的全部作用域都可见。这种类型在4.1版本中被引入，有&lt;code&gt;$GLOBALS&lt;/code&gt;, &lt;code&gt;$_SERVER&lt;/code&gt;, &lt;code&gt;$_GET&lt;/code&gt;, &lt;code&gt;$_POST&lt;/code&gt;, &lt;code&gt;$_FILES&lt;/code&gt;, &lt;code&gt;$_COOKIE&lt;/code&gt;, &lt;code&gt;$_SESSION&lt;/code&gt;, &lt;code&gt;$_REQUEST&lt;/code&gt;, &lt;code&gt;$_ENV&lt;/code&gt;。它们在5.4版本后不能作为函数的输入参数。通过这些预设的超全局变量，PHP可以轻松地获取请求的各种参数。&lt;/p&gt;
&lt;p&gt;除了上述超全局变量外，还有&lt;code&gt;$php_errormsg&lt;/code&gt;, &lt;code&gt;$HTTP_RAW_POST_DATA&lt;/code&gt;（使用php:&amp;#x2F;&amp;#x2F;input代替）, &lt;code&gt;$http_response_header&lt;/code&gt;(使用HTTP包装其时，该变量会被自动填充)，&lt;code&gt;$argc&lt;/code&gt;和&lt;code&gt;$argv&lt;/code&gt;分别代表传递给脚本的参数数目和参数数组（运行在命令行下时）。&lt;/p&gt;
&lt;h4 id=&#34;作用域&#34;&gt;&lt;a href=&#34;#作用域&#34; class=&#34;headerlink&#34; title=&#34;作用域&#34;&gt;&lt;/a&gt;作用域&lt;/h4&gt;&lt;p&gt;变量作用域通常为文件作用域。函数内部的声明的变量被限制在函数作用域内。同时，和Javascript相同，&lt;strong&gt;PHP没有块级作用域&lt;/strong&gt;。注意，PHP中定义全局变量需使用&lt;code&gt;global&lt;/code&gt;关键字。在函数内部，变量优先视作局部变量。下面的脚本不会有任何输出，因为&lt;code&gt;echo&lt;/code&gt;引用了一个局部变量&lt;code&gt;$a&lt;/code&gt;，但是在函数作用域内它并没有被赋值。要想$a在函数作用域内可见，需要在引用前声明&lt;code&gt;global&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$a&lt;/span&gt; = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;/* global scope */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Test&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$a&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;/* reference to local scope variable */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;Test&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Test2&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;global&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$a&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$a&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;Test2&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;静态变量通过&lt;code&gt;static&lt;/code&gt;声明，&lt;strong&gt;仅在局部作用域存在&lt;/strong&gt;，程序离开作用域时内容不丢失。静态变量不能使用表达式初始化。在下面的例子中，函数仅在第一次调用时初始化&lt;code&gt;$a&lt;/code&gt;变量，之后每次调用都会输出&lt;code&gt;$a&lt;/code&gt;，并加一。&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;test&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$a&lt;/span&gt; = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$a&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable&#34;&gt;$a&lt;/span&gt;++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;常量&#34;&gt;&lt;a href=&#34;#常量&#34; class=&#34;headerlink&#34; title=&#34;常量&#34;&gt;&lt;/a&gt;常量&lt;/h4&gt;&lt;p&gt;在类外，常量通过&lt;code&gt;define(name. value)&lt;/code&gt;函数定义。在类内使用&lt;code&gt;const&lt;/code&gt;定义常量（5.3.0后）。常量的命名规范同C。常量只能是标量。&lt;strong&gt;在访问常量值时，名字前不带&lt;code&gt;$&lt;/code&gt;&lt;strong&gt;。常量名事先无法确定时，使用&lt;code&gt;constant()&lt;/code&gt;获取常量。&lt;/strong&gt;常量没有作用域的限制&lt;/strong&gt;，可以在任何位置访问。&lt;/p&gt;
&lt;p&gt;PHP定义了大量的魔术常量，都以两个下划线开头和结尾。有&lt;code&gt;__LINE__&lt;/code&gt;，&lt;code&gt;__FILE__&lt;/code&gt;, &lt;code&gt;__DIR__&lt;/code&gt;, &lt;code&gt;__FUNCTION__&lt;/code&gt;, &lt;code&gt;__CLASS__&lt;/code&gt;, &lt;code&gt;__TRAIT__&lt;/code&gt;, &lt;code&gt;METHOD__&lt;/code&gt;, &lt;code&gt;__NAMESPACE__&lt;/code&gt;。具体解释见&lt;a href=&#34;http://php.net/manual/zh/language.constants.predefined.php&#34;&gt;官方文档&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;表达式-amp-流程&#34;&gt;&lt;a href=&#34;#表达式-amp-流程&#34; class=&#34;headerlink&#34; title=&#34;表达式 &amp;amp; 流程&#34;&gt;&lt;/a&gt;表达式 &amp;amp; 流程&lt;/h3&gt;&lt;p&gt;PHP的表达式根据官方的定义表述，是&lt;em&gt;任何有值的东西&lt;/em&gt;。表达式的组成类似于其他语言，从略。值得注意的有以下几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PHP的逻辑运算符同时有&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;||&lt;/code&gt;以及&lt;code&gt;and&lt;/code&gt;, &lt;code&gt;xor&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;两套，但是&lt;strong&gt;后一套的优先级最低&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;PHP提供&lt;code&gt;@&lt;/code&gt;作为错误控制运算符，放置在表达式前可以忽略产生的任何错误信息。&lt;strong&gt;强烈不建议使用&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;反引号``执行其中的shell命令，并将输出结果返回，等同于执行&lt;code&gt;shell_exec()&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;+&lt;/code&gt;, &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;===&lt;/code&gt;还可以用于数组间的运算，进行数组的连接，键值对相同的检测。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;instanceof&lt;/code&gt;用于确定变量是否属于某个类的实例。用法如&lt;code&gt;$a instanceof MyClass&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;算法流程上，PHP类似C风格。不同点有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提供在&lt;code&gt;&amp;lt;?php&amp;gt;&lt;/code&gt;闭合标签内使用&lt;code&gt;for endfor&lt;/code&gt;这种用法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;foreach(array as $key =&amp;gt; $value)&lt;/code&gt;便于遍历数组。（注意：在&lt;code&gt;$value&lt;/code&gt;前&lt;code&gt;&amp;amp;&lt;/code&gt;可以在&lt;code&gt;foreach&lt;/code&gt;循环中改变&lt;code&gt;value&lt;/code&gt;的值）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;break&lt;/code&gt;可以接受一个可选的数字决定跳出几层循环&lt;/li&gt;
&lt;li&gt;&lt;code&gt;continue&lt;/code&gt;接受一个可选的数字参数来决定跳过几重循环到循环结尾。默认值是&lt;code&gt;1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;declare&lt;/code&gt;设定一段代码的施行指令，目前只支持&lt;code&gt;ticks&lt;/code&gt;和&lt;code&gt;encoding&lt;/code&gt;。前者控制执行计时的若干条命令后的操作，后者决定代码的运行编码。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;require&lt;/code&gt;和&lt;code&gt;include&lt;/code&gt;效果类似，用法同C，它们也有带后缀&lt;code&gt;_once&lt;/code&gt;的操作符&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;函数&#34;&gt;&lt;a href=&#34;#函数&#34; class=&#34;headerlink&#34; title=&#34;函数&#34;&gt;&lt;/a&gt;函数&lt;/h3&gt;&lt;p&gt;PHP的函数定义和其他语言类似，定义的函数都具有全局作用域。不同的是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PHP可以使用&lt;code&gt;create_function(args, code)&lt;/code&gt;这样的函数定义函数（类似JS中的&lt;code&gt;new Function()&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;函数需要先定义后使用（这个只是与Javascript不同）&lt;/li&gt;
&lt;li&gt;PHP可以定义有条件的函数，通过用if包裹和放在function定义内&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;和C&amp;#x2F;C++风格很像的是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PHP函数参数接收的是一个复制，需要传递引用改变原值；&lt;/li&gt;
&lt;li&gt;支持默认参数，需放在最右；&lt;/li&gt;
&lt;li&gt;5.0之后支持对输入参数类型检查，到5.4为止支持class &amp;#x2F; array &amp;#x2F; callable类型，7.0以后支持标量类型。如果给出的值类型不对，那么将会产生一个错误&lt;/li&gt;
&lt;li&gt;7.0之后支持不对输入参数强制类型转换。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;C&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;D&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;C&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// This doesn&amp;#x27;t extend C.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;E&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;f&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;C &lt;span class=&#34;variable&#34;&gt;$c&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;title function_ invoke__&#34;&gt;get_class&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$c&lt;/span&gt;).&lt;span class=&#34;string&#34;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;f&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; C);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;f&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; D);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;f&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; E);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;和Js相似的一点时，5.6版之后支持使用&lt;code&gt;...&lt;/code&gt;符号获取参数列表。&lt;/p&gt;
&lt;p&gt;和可变变量一样，PHP中有可变函数，用法和可变变量一样。在调用对象的静态方法时，函数调用要优于静态属性，下面是一个例子&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Foo&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$variable&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;static property&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Variable&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;Method Variable called&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Foo&lt;/span&gt;::&lt;span class=&#34;variable&#34;&gt;$variable&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// This prints &amp;#x27;static property&amp;#x27;. It does need a $variable in this scope.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$variable&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;quot;Variable&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Foo&lt;/span&gt;::&lt;span class=&#34;variable&#34;&gt;$variable&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// This calls $foo-&amp;gt;Variable() reading $variable in this scope.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;5.3之后，PHP也支持匿名函数，并可以传递给一个变量储存。实际中，这种表达式会被转换为内置类Closure的对象实例。闭包可以从父作用域继承变量，但是此类变量需要用&lt;em&gt;use结构&lt;/em&gt;传递进去，类似于&lt;code&gt;function() use($a)&amp;#123;&amp;#125;&lt;/code&gt;这样的形式。&lt;/p&gt;
&lt;h3 id=&#34;类-amp-对象&#34;&gt;&lt;a href=&#34;#类-amp-对象&#34; class=&#34;headerlink&#34; title=&#34;类 &amp;amp; 对象&#34;&gt;&lt;/a&gt;类 &amp;amp; 对象&lt;/h3&gt;&lt;p&gt;PHP承袭着面向对象语言对类和对象的处理。类以&lt;code&gt;class&lt;/code&gt;开头，里面包含属性和方法等，可以包含自己的常量。通过&lt;code&gt;new&lt;/code&gt;实例化，通过&lt;code&gt;extends&lt;/code&gt;实现继承。子类使用&lt;code&gt;parent::&lt;/code&gt;访问被覆盖的属性或方法，使用&lt;code&gt;self::&lt;/code&gt;自身的静态属性和方法。5.5之后使用&lt;code&gt;ClassName::class&lt;/code&gt;可以获取带有命名空间的完整类名。轻量级的类可以通过强制转换关联数组实现。&lt;/p&gt;
&lt;p&gt;类中的静态属性通过&lt;code&gt;::&lt;/code&gt;访问，非静态属性通过&lt;code&gt;-&amp;gt;&lt;/code&gt;访问。定义常量时使用&lt;code&gt;const&lt;/code&gt;，常量的值必须是一个定值（5.6之后可以是数学运算结果）。PHP 5新增了关键字&lt;code&gt;final&lt;/code&gt;，修饰方法或者类不可被继承。&lt;/p&gt;
&lt;p&gt;PHP 5中，**&lt;code&gt;__autoload()&lt;/code&gt;函数会在使用未定义的类时自动调用**，5.3.0之后通常使用&lt;code&gt;spl_autoload_register()&lt;/code&gt;作为&lt;code&gt;autoload&lt;/code&gt;的替代。&lt;code&gt;__construct()&lt;/code&gt;和&lt;code&gt;__destruct()&lt;/code&gt;分别是构造和析构函数，5.3.3之前，在没有&lt;code&gt;__construct()&lt;/code&gt;函数也没有父类时，会寻找命名空间中与类名同名的方法。&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;spl_autoload_register&lt;/span&gt;(function (&lt;span class=&#34;variable&#34;&gt;$class_name&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;require_once&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$class_name&lt;/span&gt; . &lt;span class=&#34;string&#34;&gt;&amp;#x27;.php&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$obj&lt;/span&gt;  = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;MyClass1&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$obj2&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;MyClass2&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;trait-amp-匿名类&#34;&gt;&lt;a href=&#34;#trait-amp-匿名类&#34; class=&#34;headerlink&#34; title=&#34;trait &amp;amp; 匿名类&#34;&gt;&lt;/a&gt;trait &amp;amp; 匿名类&lt;/h4&gt;&lt;p&gt;在访问控制，继承，抽象类，接口等方面PHP和传统的面向对象语言很像。在5.4.0后，PHP提供了&lt;strong&gt;trait作为类之间代码水平复用的特性（很像mixin）&lt;/strong&gt;。在class定义中使用&lt;code&gt;use&lt;/code&gt;来获取trait，类似interface，一个类可以插入多个trait，trait会覆盖基类方法而被当前类方法覆盖。在多个trait的同名方法发生冲突时，通过&lt;code&gt;insteadof&lt;/code&gt;和&lt;code&gt;as&lt;/code&gt;来决定使用哪个，具体见&lt;a href=&#34;https://www.php.net/manual/zh/language.oop5.traits.php&#34;&gt;trait文档&lt;/a&gt;。trait的功能使用依赖注入也可以完成，相关讨论见&lt;a href=&#34;https://stackoverflow.com/questions/7892749/traits-in-php-any-real-world-examples-best-practices&#34;&gt;stackoverflow trait practives&lt;/a&gt;与&lt;a href=&#34;https://stackoverflow.com/questions/9205083/traits-vs-interfaces&#34;&gt;trait vs interface&lt;/a&gt;。trait甚至还支持抽象成员和静态成员。&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;trait&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;A&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;smallTalk&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;a&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;bigTalk&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;A&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;trait&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;B&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;smallTalk&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;b&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;bigTalk&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;B&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Talker&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;A&lt;/span&gt;, &lt;span class=&#34;title&#34;&gt;B&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title&#34;&gt;B&lt;/span&gt;::&lt;span class=&#34;title&#34;&gt;smallTalk&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;insteadof&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;A&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        A::&lt;span class=&#34;variable constant_&#34;&gt;bigTalk&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;insteadof&lt;/span&gt; B;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Aliased_Talker&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;A&lt;/span&gt;, &lt;span class=&#34;title&#34;&gt;B&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title&#34;&gt;B&lt;/span&gt;::&lt;span class=&#34;title&#34;&gt;smallTalk&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;insteadof&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;A&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        A::&lt;span class=&#34;variable constant_&#34;&gt;bigTalk&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;insteadof&lt;/span&gt; B;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        B::&lt;span class=&#34;variable constant_&#34;&gt;bigTalk&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; talk;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;PHP7.0之后支持匿名类，用于创建一次性的简单对象。&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// PHP 7 之前的代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Logger&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$msg&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$msg&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$util&lt;/span&gt;-&amp;gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;setLogger&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Logger&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 使用了 PHP 7+ 后的代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$util&lt;/span&gt;-&amp;gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;setLogger&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; function &lt;span class=&#34;title function_ invoke__&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$msg&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$msg&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;“重载”&#34;&gt;&lt;a href=&#34;#“重载”&#34; class=&#34;headerlink&#34; title=&#34;“重载”&#34;&gt;&lt;/a&gt;“重载”&lt;/h4&gt;&lt;p&gt;PHP提供的&lt;strong&gt;重载（overload）&lt;/strong&gt;语义和其他大部分OOP语言不同，指在调用当前环境下未定义或不可见的类属性或方法时调用重载方法。PHP借助&lt;strong&gt;魔术方法&lt;/strong&gt;实现重载。读写不可访问属性时，&lt;code&gt;__get()&lt;/code&gt;和&lt;code&gt;__set()&lt;/code&gt;分别被调用；对不可访问属性调用&lt;code&gt;isset&lt;/code&gt;和&lt;code&gt;unset&lt;/code&gt;时，&lt;code&gt;__isset()&lt;/code&gt;和&lt;code&gt;__unset()&lt;/code&gt;分别被调用。&lt;strong&gt;属性重载只能在对象中进行&lt;/strong&gt;。调用不可访问的方法和静态方法时，&lt;code&gt;__call()&lt;/code&gt;和&lt;code&gt;__callStatic()&lt;/code&gt;分别被调用，方法重载用法类似属性重载。重载的示例见文档。（&lt;em&gt;不建议使用这个特性，这会影响ide补全和代码的可读性&lt;/em&gt;）。&lt;/p&gt;
&lt;p&gt;PHP5提供foreach方法遍历对象，默认情况可见属性都会被遍历，可以让类实现&lt;code&gt;Iterator&lt;/code&gt;接口从而自行决定如何处理遍历。实现&lt;code&gt;IteratorAggregate&lt;/code&gt;接口可以代替实现所有的Iterator方法，&lt;code&gt;IteratorAggregate&lt;/code&gt;只需实现&lt;code&gt;IteratorAggregate::getIterator()&lt;/code&gt;方法即可。&lt;/p&gt;
&lt;h4 id=&#34;魔术方法&#34;&gt;&lt;a href=&#34;#魔术方法&#34; class=&#34;headerlink&#34; title=&#34;魔术方法&#34;&gt;&lt;/a&gt;魔术方法&lt;/h4&gt;&lt;p&gt;PHP将所有&lt;code&gt;__&lt;/code&gt;开头的类方法保留为&lt;strong&gt;魔术方法&lt;/strong&gt;，&lt;code&gt;__sleep()&lt;/code&gt;方法在&lt;code&gt;serialize()&lt;/code&gt;函数前调用，应返回一个包含对象中所有应被序列化的变量名称的数组，相对的&lt;code&gt;__wakeup()&lt;/code&gt;在反序列化函数前调用。&lt;code&gt;__toString()&lt;/code&gt;在把一个类视作字符串时怎样回应时调用。&lt;code&gt;__invoke()&lt;/code&gt;在把一个类视作函数调用时调用。更多方法见&lt;a href=&#34;https://www.php.net/manual/zh/language.oop5.magic.php&#34;&gt;魔术方法页面&lt;/a&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Connection&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$link&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$server&lt;/span&gt;, &lt;span class=&#34;variable&#34;&gt;$username&lt;/span&gt;, &lt;span class=&#34;variable&#34;&gt;$password&lt;/span&gt;, &lt;span class=&#34;variable&#34;&gt;$db&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;__construct&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$server&lt;/span&gt;, &lt;span class=&#34;variable&#34;&gt;$username&lt;/span&gt;, &lt;span class=&#34;variable&#34;&gt;$password&lt;/span&gt;, &lt;span class=&#34;variable&#34;&gt;$db&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;$this&lt;/span&gt;-&amp;gt;server = &lt;span class=&#34;variable&#34;&gt;$server&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;$this&lt;/span&gt;-&amp;gt;username = &lt;span class=&#34;variable&#34;&gt;$username&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;$this&lt;/span&gt;-&amp;gt;password = &lt;span class=&#34;variable&#34;&gt;$password&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;$this&lt;/span&gt;-&amp;gt;db = &lt;span class=&#34;variable&#34;&gt;$db&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;$this&lt;/span&gt;-&amp;gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;connect&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;connect&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;$this&lt;/span&gt;-&amp;gt;link = &lt;span class=&#34;title function_ invoke__&#34;&gt;mysql_connect&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$this&lt;/span&gt;-&amp;gt;server, &lt;span class=&#34;variable&#34;&gt;$this&lt;/span&gt;-&amp;gt;username, &lt;span class=&#34;variable&#34;&gt;$this&lt;/span&gt;-&amp;gt;password);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_ invoke__&#34;&gt;mysql_select_db&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$this&lt;/span&gt;-&amp;gt;db, &lt;span class=&#34;variable&#34;&gt;$this&lt;/span&gt;-&amp;gt;link);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;__sleep&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;array&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;server&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;username&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;password&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;db&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;__wakeup&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;$this&lt;/span&gt;-&amp;gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;connect&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;PHP使用&lt;code&gt;clone&lt;/code&gt;创造对象的浅复制（即只创造属性的引用），魔术方法&lt;code&gt;__clone()&lt;/code&gt;在clone完成后调用。PHP 5中的对象甚至可以相互比较，使用&lt;code&gt;==&lt;/code&gt;判断属性和属性值是否一致，&lt;code&gt;===&lt;/code&gt;判断变量是否是同一个实例。&lt;/p&gt;
&lt;p&gt;自5.3.0起，PHP增加了&lt;code&gt;static::&lt;/code&gt;关键字和&lt;a href=&#34;https://www.php.net/manual/zh/language.oop5.late-static-bindings.php&#34;&gt;后期静态绑定&lt;/a&gt;的功能，用于在继承范围内引用静态调用的类。静态环境下绑定静态方法可以让子类在&lt;strong&gt;自己的环境&lt;/strong&gt;下（自己的this）调用继承自基类的方法。这种方式绑定非静态方法时，会出现不同结果，尽量避免使用。&lt;/p&gt;
&lt;p&gt;对象通过&lt;code&gt;serialize()&lt;/code&gt;和&lt;code&gt;unserialize()&lt;/code&gt;来序列化和反序列化一个对象，对象的方法和静态成员不会保留。&lt;strong&gt;在解序列的文件域内需要包含类的定义&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;预定义接口&#34;&gt;&lt;a href=&#34;#预定义接口&#34; class=&#34;headerlink&#34; title=&#34;预定义接口&#34;&gt;&lt;/a&gt;预定义接口&lt;/h4&gt;&lt;p&gt;PHP预定义了许多接口。&lt;code&gt;Traversal&lt;/code&gt;接口监测一个类是否可以使用foreach进行遍历（仅供引擎使用）。&lt;code&gt;Iterator&lt;/code&gt;接口用来实现对象的foreach迭代，有&lt;code&gt;rewind&lt;/code&gt;, &lt;code&gt;current&lt;/code&gt;, &lt;code&gt;key&lt;/code&gt;, &lt;code&gt;next&lt;/code&gt;, &lt;code&gt;valid&lt;/code&gt;等成员方法。除此以外还有聚合迭代，数组式访问，序列化，生成器接口等接口和Closure类。这里从略。&lt;/p&gt;
&lt;h3 id=&#34;命名空间&#34;&gt;&lt;a href=&#34;#命名空间&#34; class=&#34;headerlink&#34; title=&#34;命名空间&#34;&gt;&lt;/a&gt;命名空间&lt;/h3&gt;&lt;p&gt;命名空间是PHP一个比较有特点的特性。在PHP中用命名空间解决&lt;strong&gt;类库和用户代码名字冲突的问题&lt;/strong&gt;。实际上命名空间所做的事情就是代码模块化，正如Java的packages和Javascript里CommonJS规范一样。命名空间的命名方法类似变量，不允许使用PHP或php开头的命名空间。下面是一个命名空间的范例：&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;my&lt;/span&gt;\&lt;span class=&#34;title class_&#34;&gt;name&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;MyClass&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;myfunction&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;variable constant_&#34;&gt;MYCONST&lt;/span&gt; = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$a&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;MyClass&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$c&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; \my\name\MyClass; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$a&lt;/span&gt; = &lt;span class=&#34;title function_ invoke__&#34;&gt;strlen&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;hi&amp;#x27;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$d&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt;\&lt;span class=&#34;title class_&#34;&gt;MYCONST&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$d&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;__NAMESPACE__&lt;/span&gt; . &lt;span class=&#34;string&#34;&gt;&amp;#x27;\MYCONST&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;title function_ invoke__&#34;&gt;constant&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$d&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;除了&lt;code&gt;declare&lt;/code&gt;语句以外，&lt;strong&gt;namespace的定义需在文件的最前面&lt;/strong&gt;。PHP与其它的语言特征不同，同一个命名空间可以定义在多个文件中，即&lt;strong&gt;允许将同一个命名空间的内容分割存放在不同的文件中&lt;/strong&gt;。在命名空间中使用define定义常量时，需要带上&lt;code&gt;__NAMESPACE__&lt;/code&gt;，否则意味着定义在全局空间下。&lt;/p&gt;
&lt;p&gt;PHP中的命名空间和文件目录很像，也支持层级化的定义方法，即定义子命名空间，父子间通过反斜线&lt;code&gt;\&lt;/code&gt;隔开。可以在单文件内定义多个namespace（&lt;strong&gt;不提倡&lt;/strong&gt;），建议namespace间通过大括号隔离开。PHP命名空间可以和文件系统进行类比，类名非限定时，会在当前空间寻找，以&lt;code&gt;\&lt;/code&gt;开头时从全局空间寻找（相对目录），否则从当前空间起向下寻找（绝对目录）。下面是一个使用了三种方法的样例：&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Foo&lt;/span&gt;\&lt;span class=&#34;title class_&#34;&gt;Bar&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;file1.php&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;variable constant_&#34;&gt;FOO&lt;/span&gt; = &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;foo&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;staticmethod&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 非限定名称 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;foo&lt;/span&gt;();     &lt;span class=&#34;comment&#34;&gt;// 解析为 Foo\Bar\foo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;foo::&lt;span class=&#34;title function_ invoke__&#34;&gt;staticmethod&lt;/span&gt;();     &lt;span class=&#34;comment&#34;&gt;// 解析为类 Foo\Bar\foo的静态方法static method&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;echo&lt;/span&gt; FOO; &lt;span class=&#34;comment&#34;&gt;// 解析为常量 Foo\Bar\FOO&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 限定名称 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;subnamespace\&lt;span class=&#34;title function_ invoke__&#34;&gt;foo&lt;/span&gt;(); &lt;span class=&#34;comment&#34;&gt;// 解析为函数 Foo\Bar\subnamespace\foo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;subnamespace\foo::&lt;span class=&#34;title function_ invoke__&#34;&gt;staticmethod&lt;/span&gt;(); &lt;span class=&#34;comment&#34;&gt;// 解析为类 Foo\Bar\subnamespace\foo, 以及类的方法 staticmethod&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;echo&lt;/span&gt; subnamespace\FOO; &lt;span class=&#34;comment&#34;&gt;// 解析为常量 Foo\Bar\subnamespace\FOO&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 完全限定名称 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;\Foo\Bar\&lt;span class=&#34;title function_ invoke__&#34;&gt;foo&lt;/span&gt;(); &lt;span class=&#34;comment&#34;&gt;// 解析为函数 Foo\Bar\foo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;\Foo\Bar\foo::&lt;span class=&#34;title function_ invoke__&#34;&gt;staticmethod&lt;/span&gt;(); &lt;span class=&#34;comment&#34;&gt;// 解析为类 Foo\Bar\foo, 以及类的方法 staticmethod&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;echo&lt;/span&gt; \Foo\Bar\FOO; &lt;span class=&#34;comment&#34;&gt;// 解析为常量 Foo\Bar\FOO&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;命名空间的装载和名称的解析是在编译期完成的。命名空间有三种定义方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;非限定名称：名称中不包含命名空间分割符，即\，如Foo&lt;/li&gt;
&lt;li&gt;限定名称：名称中包含命名空间分割符，如Foo\Bar&lt;/li&gt;
&lt;li&gt;完全限定名称：名称中包含命名空间分割符，且以\开始的标识符，如\Foo\Bar&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PHP支持使用&lt;code&gt;namespace&lt;/code&gt;关键字或&lt;code&gt;__NAMESPACE__&lt;/code&gt;魔术常量获取当前所在命名空间。所有支持命名空间的PHP版本支持三种别名或导入方式：&lt;strong&gt;为类名称使用别名&lt;/strong&gt;、&lt;strong&gt;为接口使用别名&lt;/strong&gt;、&lt;strong&gt;为命名空间名称使用别名&lt;/strong&gt;。这么做类似于在操作系统中创建符号连接。别名通过操作符&lt;code&gt;use as&lt;/code&gt;实现。注意：导入命名空间后文件内的类名，接口名等会收到导入的影响。在一个命名空间中，当PHP遇到一个非限定的类、函数或常量名称时，它使用不同的优先策略来解析该名称。对于函数和常量来说，如果当前命名空间中不存在该函数或常量，PHP会退而使用全局空间中的函数或常量。因此在访问系统内部或不包含在命名空间中的类名称时，必须使用完全限定名称。&lt;/p&gt;
&lt;h3 id=&#34;错误和异常&#34;&gt;&lt;a href=&#34;#错误和异常&#34; class=&#34;headerlink&#34; title=&#34;错误和异常&#34;&gt;&lt;/a&gt;错误和异常&lt;/h3&gt;&lt;p&gt;PHP的错误类型有很多，可以见&lt;a href=&#34;http://php.net/manual/zh/errorfunc.constants.php&#34;&gt;类型列表&lt;/a&gt;。PHP对错误的汇报方式由&lt;code&gt;php.ini&lt;/code&gt;中的&lt;code&gt;error_reporting&lt;/code&gt;命令控制，可以在运行时通过&lt;code&gt;error_reporting()&lt;/code&gt;函数动态修改。在开发环境，建议将级别设置到&lt;code&gt;E_ALL&lt;/code&gt;，同时在脚本的开头设置级别。&lt;code&gt;php.ini&lt;/code&gt;中的&lt;code&gt;display_errors&lt;/code&gt;指令控制是否将错误显示在脚本输出中，建议在生产环境中关闭。&lt;code&gt;log_errors&lt;/code&gt;指令控制错误记录。&lt;/p&gt;
&lt;p&gt;PHP 5中异常可以被抛出，由try&amp;#x2F;catch语句块获取。&lt;code&gt;catch&lt;/code&gt;获得的是一个&lt;code&gt;Exception&lt;/code&gt;类的实例。类似Java，可以在catch后加上finally语句块。Exception是一个类，有&lt;code&gt;getMessage&lt;/code&gt;，&lt;code&gt;getTraceAsString&lt;/code&gt;等方法可以使用和拓展，详见介绍。PHP 7中，大多数错误都被作为Error异常抛出，可以被第一个匹配的try&amp;#x2F;catch语句块捕获，否则交给PHP相应的异常处理函数处理，如果尚未通过&lt;code&gt;set_exception_handler()&lt;/code&gt;注册童永刚异常处理函数，则会报告一个Fatal Error。注意：捕获错误或异常时，若在自定义命名空间下，Exception需要用完全限定方式书写。&lt;/p&gt;
&lt;p&gt;7.0以后的版本中，&lt;code&gt;Error&lt;/code&gt;和&lt;code&gt;Exception&lt;/code&gt;同属于&lt;code&gt;Throwable&lt;/code&gt;类型，这一点与5.x版本不同。代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//To catch both exceptions and errors in PHP 5.x and 7, add a catch block for Exception AFTER catching Throwable first.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//Once PHP 5.x support is no longer needed, the block catching Exception can be removed.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;comment&#34;&gt;// Code that may throw an Exception or Error.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;Throwable&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$t&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;comment&#34;&gt;// Executed only in PHP 7, will not match in PHP 5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$e&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;comment&#34;&gt;// Executed only in PHP 5, will not be reached in PHP 7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;生成器（generator）&#34;&gt;&lt;a href=&#34;#生成器（generator）&#34; class=&#34;headerlink&#34; title=&#34;生成器（generator）&#34;&gt;&lt;/a&gt;生成器（generator）&lt;/h3&gt;&lt;p&gt;PHP中的生成器的概念与Java等高级语言中生成器的概念无二。生成器函数看起来像一个普通的函数，不同的是普通函数返回一个值，而一个生成器可以&lt;code&gt;yield&lt;/code&gt;生成许多它所需要的值。当一个生成器被调用的时候，它返回一个可以被遍历的对象。PHP 将会在每次需要值的时候调用生成器函数，并在产生一个值之后保存生成器的状态。&lt;strong&gt;生成器不可以返回值&lt;/strong&gt;。return语句只会终止生成器继续执行。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;yield会返回一个值给循环调用此生成器的代码并且只是暂停执行生成器函数&lt;/strong&gt;。可以使用yield返回键值对，引用或&lt;code&gt;NULL&lt;/code&gt;等。在PHP 7以后，使用&lt;code&gt;yield from&lt;/code&gt;可以从实现了Iterator接口的对象或使用yield的函数中yield值。如下：&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;count_to_ten&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;yield&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;yield&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;yield&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; [&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;yield&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;ArrayIterator&lt;/span&gt;([&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;yield&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;title function_ invoke__&#34;&gt;seven_eight&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;yield&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;title function_ invoke__&#34;&gt;nine_ten&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;seven_eight&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;yield&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;yield&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;title function_ invoke__&#34;&gt;eight&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;eight&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;yield&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;nine_ten&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;yield&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$gen&lt;/span&gt; = &lt;span class=&#34;title function_ invoke__&#34;&gt;count_to_ten&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;foreach&lt;/span&gt; (&lt;span class=&#34;variable&#34;&gt;$gen&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$num&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;&lt;span class=&#34;subst&#34;&gt;$num&lt;/span&gt; &amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$gen&lt;/span&gt;-&amp;gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;getReturn&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;对比生成器和实现Iterator接口的类来看，生成器的代码可读性更高，代码量也更少，缺憾在于不能多次迭代和回退，除非重建或使用clone。&lt;/p&gt;
&lt;h3 id=&#34;引用&#34;&gt;&lt;a href=&#34;#引用&#34; class=&#34;headerlink&#34; title=&#34;引用&#34;&gt;&lt;/a&gt;引用&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;PHP的引用意味着不同的名字访问同一个变量内容&lt;/strong&gt;，通过在变量前加上&lt;code&gt;&amp;amp;&lt;/code&gt;使用。在对一个未定义的变量进行引用参数传递或引用返回时，会自动创建该变量。不使用&lt;code&gt;&amp;amp;&lt;/code&gt;符号时，意味着生成一个拷贝。&lt;/p&gt;
&lt;p&gt;在进行引用传递时，只能传递变量，New语句和函数中返回的引用；引用返回时，需要在函数名前加上&amp;amp;符号，同时接受返回值的变量也需写为接收引用的形式。&lt;br&gt;通过&lt;code&gt;unset&lt;/code&gt;销毁引用，销毁引用的同时不会销毁原变量（类似于删除符号链接）。&lt;code&gt;global $var&lt;/code&gt;实际上就是创建了到&lt;code&gt;$GLOBALS[]&lt;/code&gt;的引用。&lt;code&gt;$this&lt;/code&gt;也是同理。&lt;/p&gt;
&lt;h3 id=&#34;支持的协议&#34;&gt;&lt;a href=&#34;#支持的协议&#34; class=&#34;headerlink&#34; title=&#34;支持的协议&#34;&gt;&lt;/a&gt;支持的协议&lt;/h3&gt;&lt;p&gt;PHP带有内置URL风格的封装协议，可用于类似&lt;code&gt;fopen()&lt;/code&gt;、&lt;code&gt;copy()&lt;/code&gt;、&lt;code&gt;file_exists()&lt;/code&gt;和&lt;code&gt;filesize()&lt;/code&gt;的文件系统函数，如file, http, ftp, php, zlib, data等。其中&lt;code&gt;php://&lt;/code&gt;提供的是输入输出流和错误描述符的访问能力。创建数据流前，可以通过&lt;code&gt;stream_context_create()&lt;/code&gt;创建上下文选项，定义数据流的选项。&lt;/p&gt;
&lt;h2 id=&#34;函数参考&#34;&gt;&lt;a href=&#34;#函数参考&#34; class=&#34;headerlink&#34; title=&#34;函数参考&#34;&gt;&lt;/a&gt;函数参考&lt;/h2&gt;&lt;p&gt;PHP本身提供了海量的函数。且都可以全局访问到。&lt;/p&gt;
&lt;h3 id=&#34;内核&#34;&gt;&lt;a href=&#34;#内核&#34; class=&#34;headerlink&#34; title=&#34;内核&#34;&gt;&lt;/a&gt;内核&lt;/h3&gt;&lt;p&gt;内核部分的函数，不能通过编译选项去除。PHP这部分的函数和介绍相当多，这里只撷选了常用的部分。&lt;/p&gt;
&lt;h4 id=&#34;数组&#34;&gt;&lt;a href=&#34;#数组&#34; class=&#34;headerlink&#34; title=&#34;数组&#34;&gt;&lt;/a&gt;数组&lt;/h4&gt;&lt;p&gt;这部分的函数主要用来进行和数组相关的操作，由于PHP中的数组包括了键值对这样类似对象的功能，函数的数量很多，甚至有些冗余。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;array_chunk&lt;/code&gt; 将数组分割为多个，单元数目由size决定。返回一个多维数组。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array_merge&lt;/code&gt; 将多个数组的单元合并在一起，字符串键名相同时，后面的值会覆盖前一个。类似的还有array_merge_recursive。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array_count_values&lt;/code&gt; 统计数组中所有的值出现的次数，返回一个关联数组&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array_diff&lt;/code&gt; 计算数组的差集，返回在array1但不在array2的元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array_intersect&lt;/code&gt; 计算数组的交集，返回一个在array1中出现同时也在其他所有参数数组中出现的值。在差和交的名称前加上u的函数可以自己指定比较方法。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array_fill&lt;/code&gt; 用给定的值填充数组的num个条目，start_index为返回数组的第一个索引值。array_fill_keys函数可以填充键值对。&lt;code&gt;array_pad&lt;/code&gt; 用值将数组填充到指定长度。键从第一个整型数开始，否则从0开始。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array_flip&lt;/code&gt; 返回一个交换键和值的数组。不合法的值将不会反转。类似的&lt;code&gt;array_reverse&lt;/code&gt;返回一个单元顺序相反的数组。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array_combine(array $keys , array $values)&lt;/code&gt;返回一个由&lt;code&gt;keys&lt;/code&gt;数组作键，&lt;code&gt;values&lt;/code&gt;数组作值的新数组，两个数组长度不一样时抛出异常。&lt;code&gt;array_keys(array $array [, mixed $search_value [, bool $strict= false ]])&lt;/code&gt;返回所有值为&lt;code&gt;search_value&lt;/code&gt;的键名，&lt;code&gt;strict&lt;/code&gt;表示是否进行严格比较。类似地，&lt;code&gt;array_values(array $input)&lt;/code&gt;返回一个由所有值组成的数组，并建立起数字索引。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array_multisort&lt;/code&gt;用来一次多多个数组排序，输入数组被当作一个数据表的若干列来排序。常用在对数据库数据的排序。返回值为bool类型。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array_push&lt;/code&gt;和&lt;code&gt;array_pop&lt;/code&gt;分别在array的末尾弹出或压入一个元素。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array_shift&lt;/code&gt;和&lt;code&gt;array_uinshift&lt;/code&gt;完成类似于上面的功能，不过是在数组开头。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array_product()&lt;/code&gt;和&lt;code&gt;array_sum()&lt;/code&gt;分别返回数组的乘积和总和。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array_filter&lt;/code&gt;用回调函数过滤数组单元。没有回调函数时将删除input中等值于FALSE的条目。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array_map&lt;/code&gt;返回一个arr1所有单元经过callback作用后的单元。callback 接受的参数数目应该和传递给 array_map() 函数的数组数目一致。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array_walk&lt;/code&gt;使用用户自定义的函数对数组每个函数做回调处理。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array_reduce&lt;/code&gt;根据回调将array简化为一个值。function变量可以读取result和item。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array_replace(array $array1 , array $array2 [, array $... ])&lt;/code&gt;将前面的数组的键值对覆盖为后面的键值对。多维数组下有recursive版本。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array_key_exists&lt;/code&gt;检查键名是否存在于数组中。&lt;code&gt;array_search(mixed $needle , array $haystack [, bool $strict = false ])&lt;/code&gt;在数组中搜索给定值。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array_slice&lt;/code&gt;根据offset和length从数组中取出一段。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array_splice&lt;/code&gt;把input数组中由offset和length指定的单元去掉，如果提供了replacement参数，则用其中的单元取代。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array_unique&lt;/code&gt;用于移除数组中重复的值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了这些，还有&lt;code&gt;is_array()&lt;/code&gt;，&lt;code&gt;explode()&lt;/code&gt;，&lt;code&gt;split()&lt;/code&gt;等不以array开头的函数和数组相关，大多用来进行一些简单的操作，列表见&lt;a href=&#34;http://php.net/manual/zh/ref.array.php&#34;&gt;数组参考&lt;/a&gt;。和数组排序相关的函数也有很多，它们在排序依据，是否稳定等方面各不相同，更多内容参考对数组进行排序。&lt;/p&gt;
&lt;h4 id=&#34;字符串&#34;&gt;&lt;a href=&#34;#字符串&#34; class=&#34;headerlink&#34; title=&#34;字符串&#34;&gt;&lt;/a&gt;字符串&lt;/h4&gt;&lt;p&gt;和字符串相关的函数也很多，但只有以str开头的是严格意义上的字符串函数。下面列举了部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;addslashes&lt;/code&gt;转义字符串中的单引号，双引号，反斜线和NUL&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chr&lt;/code&gt;返回ASCII码对应的字符，&lt;code&gt;ord()&lt;/code&gt;是其互补函数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chunk_split($body[,int $chunklen = 76 [,string $end = &amp;quot;\r\n&amp;quot; ]] )&lt;/code&gt;拆分&lt;code&gt;$body&lt;/code&gt;为&lt;code&gt;$chunklen&lt;/code&gt;的小块，每块后用&lt;code&gt;$end&lt;/code&gt;结尾&lt;/li&gt;
&lt;li&gt;&lt;code&gt;crypt&lt;/code&gt;返回一个单向字符串散列，&lt;code&gt;md5&lt;/code&gt;计算字符串的MD5散列值，&lt;code&gt;sha1&lt;/code&gt;计算sha1散列值&lt;/li&gt;
&lt;li&gt;echo 输出一组字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;explode&lt;/code&gt;使用一个字符串分割另一个字符串；类似地，&lt;code&gt;implode&lt;/code&gt;将一个一维数组的值转为字符串。又写作&lt;code&gt;join&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;htmlentites&lt;/code&gt;转义所有的特殊字符为HTML实体；&lt;code&gt;html_entity_decode()&lt;/code&gt;实现相反的步骤。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;htmlspecialchars()&lt;/code&gt;和&lt;code&gt;htmlspecialchars_decode()&lt;/code&gt;完成的功能和上面相似，但是转义的字符只有&lt;code&gt;&amp;amp;&lt;/code&gt;，&lt;code&gt;&amp;quot;&lt;/code&gt;，&lt;code&gt;&amp;#39;&lt;/code&gt;，&lt;code&gt;&amp;lt;&lt;/code&gt;，&lt;code&gt;&amp;gt;&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lcfirst&lt;/code&gt;将首字母小写，&lt;code&gt;ucfirst&lt;/code&gt;将首字母大写，&lt;code&gt;ucwords&lt;/code&gt;将每个单词的首字母大写&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ltrim&lt;/code&gt;，&lt;code&gt;rtrim&lt;/code&gt;和&lt;code&gt;trim&lt;/code&gt;删除字符串首部，尾端和两端的空白。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;str_getcsv&lt;/code&gt;解析csv字符串为一个数组&lt;/li&gt;
&lt;li&gt;&lt;code&gt;str_pad&lt;/code&gt;使用另一个字符串填充字符串到指定长度&lt;/li&gt;
&lt;li&gt;&lt;code&gt;str_repeat&lt;/code&gt; 重复一个字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;str_replace&lt;/code&gt; 字符串替换，&lt;code&gt;preg_replace&lt;/code&gt;的特殊情况&lt;/li&gt;
&lt;li&gt;&lt;code&gt;str_shuffle&lt;/code&gt;随机打乱一个字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;str_split&lt;/code&gt;将一个字符串转换为数组&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strstr&lt;/code&gt;查找字符串的第一次出现。&lt;code&gt;stristr()&lt;/code&gt;则不区分大小写地查找&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strcmp&lt;/code&gt;二进制安全字符串比较大小，&lt;code&gt;strncmp&lt;/code&gt;类似，不过允许指定比较的长度，&lt;code&gt;strnatcmp&lt;/code&gt;以自然顺序比较字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strlen&lt;/code&gt;获取字符串长度&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strpos&lt;/code&gt;查找字符串初次出现位置，&lt;code&gt;strrpos&lt;/code&gt;查找最后一次出现，&lt;code&gt;strripos&lt;/code&gt;不区分大小写查找最后一次出现&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strrev&lt;/code&gt;反转字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strip_tags&lt;/code&gt;去除str中的空字符，HTML标记和PHP标记，和&lt;code&gt;fgetss()&lt;/code&gt;机制一样&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strtoupper&lt;/code&gt;将字符串转化为大写，&lt;code&gt;strtolower&lt;/code&gt;将字符串转换为小写&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strtr()&lt;/code&gt;翻译、转换指定字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;substr&lt;/code&gt;返回字符串的子串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;substr_count&lt;/code&gt;返回子字符串在字符串中出现的次数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;变量&#34;&gt;&lt;a href=&#34;#变量&#34; class=&#34;headerlink&#34; title=&#34;变量&#34;&gt;&lt;/a&gt;变量&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boolvar()&lt;/code&gt;转换变量为bool类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;empty()&lt;/code&gt;判断变量是否为空&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isset()&lt;/code&gt;检测变量是否已设置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;intval()&lt;/code&gt;获取变量整数值，&lt;code&gt;floatval()&lt;/code&gt;获取变量浮点数值，&lt;code&gt;strval()&lt;/code&gt;获取变量的字符串表示&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get_resource_type()&lt;/code&gt;获取资源类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gettype()&lt;/code&gt;获取变量类型，&lt;code&gt;settype($var, string $type)&lt;/code&gt;设置变量类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_array&lt;/code&gt;, &lt;code&gt;is_bool&lt;/code&gt;, &lt;code&gt;is_callable&lt;/code&gt;, &lt;code&gt;is_float&lt;/code&gt;, &lt;code&gt;is_int&lt;/code&gt;, &lt;code&gt;is_null&lt;/code&gt;, &lt;code&gt;is_numeric&lt;/code&gt;, &lt;code&gt;is_object&lt;/code&gt;, &lt;code&gt;is_resource&lt;/code&gt;, &lt;code&gt;is_scalar&lt;/code&gt;, &lt;code&gt;is_string&lt;/code&gt;用来检测各种类型。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;print_r()&lt;/code&gt;和&lt;code&gt;var_dump()&lt;/code&gt;打印变量的相关信息，&lt;code&gt;var_export()&lt;/code&gt;以合法PHP代码的形式返回变量的字符串表示&lt;/li&gt;
&lt;li&gt;&lt;code&gt;serialize()&lt;/code&gt;序列化一个变量，&lt;code&gt;unserialize()&lt;/code&gt;反序列化一个变量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unset()&lt;/code&gt;销毁指定的变量&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;类和对象&#34;&gt;&lt;a href=&#34;#类和对象&#34; class=&#34;headerlink&#34; title=&#34;类和对象&#34;&gt;&lt;/a&gt;类和对象&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;spl_autoload_register()&lt;/code&gt;尝试在类名未定义时启动类的自动加载&lt;/li&gt;
&lt;li&gt;&lt;code&gt;class_alias&lt;/code&gt;为一个类创建别名。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;class_exists&lt;/code&gt;检查指定的类是否定义&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get_class()&lt;/code&gt;返回对象实例所属类的名字。类似地还有&lt;code&gt;get_class_vars&lt;/code&gt;和&lt;code&gt;get_class_methods&lt;/code&gt;函数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get_declare_classes&lt;/code&gt;和&lt;code&gt;get_declare_interfaces&lt;/code&gt;以及&lt;code&gt;get_declare_traits&lt;/code&gt;获取脚本中已定义的类、接口、trait数组。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;method_exists( mixed $object , string $method_name )&lt;/code&gt;检查类方法是否存在于指定object中，类似地还有&lt;code&gt;property_exsits&lt;/code&gt;，&lt;code&gt;interface_exists&lt;/code&gt;和&lt;code&gt;trait_exist&lt;/code&gt;等&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;日期和时间&#34;&gt;&lt;a href=&#34;#日期和时间&#34; class=&#34;headerlink&#34; title=&#34;日期和时间&#34;&gt;&lt;/a&gt;日期和时间&lt;/h4&gt;&lt;p&gt;PHP中的时间以64为数字存储。使用时需要配置好&lt;code&gt;php.ini&lt;/code&gt;中时区等信息。&lt;code&gt;DateTime&lt;/code&gt;，&lt;code&gt;DateTimeZone&lt;/code&gt;，&lt;code&gt;DateInterval&lt;/code&gt;等对象便于进行相关的操作。PHP同时提供了OOP风格和过程化风格两种方式使用函数。其中&lt;code&gt;DateTime&lt;/code&gt;和&lt;code&gt;DateTimeImmutable&lt;/code&gt;都继承自&lt;code&gt;DateTimeInterface&lt;/code&gt;接口，有着&lt;code&gt;diff&lt;/code&gt;，&lt;code&gt;format&lt;/code&gt;，&lt;code&gt;getTimestamp&lt;/code&gt;，&lt;code&gt;getTimezone&lt;/code&gt;等方法。&lt;/p&gt;
&lt;p&gt;DateTime中的部分方法如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;add(DateInterval $interval)&lt;/code&gt;在当前时间上加上一个时间段&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sub(DateInterval $interval)&lt;/code&gt;在当前时间上减去一个时间段。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__construct()&lt;/code&gt;，创建一个对象，过程化风格: &lt;code&gt;date_create()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;createFromFormat&lt;/code&gt;创建一种时间格式format的写法格式见&lt;a href=&#34;https://www.php.net/manual/zh/datetime.createfromformat.php&#34;&gt;参考&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;modify&lt;/code&gt;修改当前时间，modify为合法的时间格式。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setDate(int $year, int $month, int $day )&lt;/code&gt;设置日期&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setTime(int $hour ,int $minute [,int $second = 0 ])&lt;/code&gt;设置时间。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setTimestamp()&lt;/code&gt;设置时间戳。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上述方法都有对应的过程化风格的对应函数。&lt;/p&gt;
&lt;p&gt;DatePeriod和DateTimeZone等的介绍从略。除了以上的对象方法过程化的函数外，还有以下一些常用方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;date($format[, $timestamp)&lt;/code&gt;，格式化一个本地时间&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getdate()&lt;/code&gt;，获得日期时间信息，&lt;code&gt;localtime&lt;/code&gt;功能类似，返回一个数组。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mktime&lt;/code&gt;获得一个日期的时间戳，默认为当前。类似的还有&lt;code&gt;time&lt;/code&gt;，&lt;code&gt;microtime&lt;/code&gt;，返回一个时间戳类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strtotime&lt;/code&gt;将英文文本的日期时间解析为Unix时间戳&lt;/li&gt;
&lt;li&gt;有意思的是&lt;code&gt;date_sunset&lt;/code&gt;和&lt;code&gt;date_sunrise&lt;/code&gt;可以获取指定时间戳的日出日落时间&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;文件系统&#34;&gt;&lt;a href=&#34;#文件系统&#34; class=&#34;headerlink&#34; title=&#34;文件系统&#34;&gt;&lt;/a&gt;文件系统&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;basename()&lt;/code&gt;返回路径的文件名部分；&lt;code&gt;dirname()&lt;/code&gt;返回路径中的目录部分，&lt;code&gt;realpath()&lt;/code&gt;返回规范的绝对路径名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chgrp()&lt;/code&gt;改变文件所属组，类似的还有&lt;code&gt;chmod&lt;/code&gt;和&lt;code&gt;chown&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;copy&lt;/code&gt;用于拷贝文件，&lt;code&gt;rename&lt;/code&gt;用于移动和重命名文件。注意，这里没有delete函数。&lt;code&gt;unlink&lt;/code&gt;用于删除文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;link ()&lt;/code&gt;建立一个硬连接，&lt;code&gt;linkinfo&lt;/code&gt;, &lt;code&gt;lstat&lt;/code&gt;给出连接信息。&lt;code&gt;symlink&lt;/code&gt;创建一个符号连接。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mkdir&lt;/code&gt;和&lt;code&gt;rmdir&lt;/code&gt;用来创建和删除文件夹&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file&lt;/code&gt;把整个文件都入到一个数组中，一行一个元素，可以使用URL作为文件名。&lt;code&gt;file_exists&lt;/code&gt;检查文件或目录是否已存在。&lt;code&gt;tmpfile&lt;/code&gt;则会建立一个关闭后自动删除的临时文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_get_contents&lt;/code&gt;将文件读入到字符串中，可以使用&lt;code&gt;stream_context_create&lt;/code&gt;创建上下文进行更细致的操作。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_put_contents()&lt;/code&gt;写文件，和依次调用&lt;code&gt;fopen()&lt;/code&gt;, &lt;code&gt;fwrite()&lt;/code&gt;, &lt;code&gt;fclose()&lt;/code&gt;效果一样。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fileatime&lt;/code&gt;, &lt;code&gt;filectime&lt;/code&gt;, &lt;code&gt;filemtime&lt;/code&gt;, &lt;code&gt;filegroup&lt;/code&gt;, &lt;code&gt;fileowner&lt;/code&gt;, &lt;code&gt;fileperms&lt;/code&gt;, &lt;code&gt;filesize&lt;/code&gt;, &lt;code&gt;filetype&lt;/code&gt;, &lt;code&gt;stat&lt;/code&gt;等和字面意义一样获取文件的各方面信息。它们接收文件路径作为参数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_dir&lt;/code&gt;, &lt;code&gt;is_executable&lt;/code&gt;, &lt;code&gt;is_file&lt;/code&gt;, &lt;code&gt;is_link&lt;/code&gt;, &lt;code&gt;is_readable&lt;/code&gt;, &lt;code&gt;is_uploaded_file&lt;/code&gt;, &lt;code&gt;is_writable&lt;/code&gt;检查文件各种属性&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fopen&lt;/code&gt;打开一个文件，返回一个resource句柄，可以交给&lt;code&gt;fread&lt;/code&gt;, &lt;code&gt;fwrite&lt;/code&gt;, &lt;code&gt;fscanf&lt;/code&gt;, &lt;code&gt;fclose&lt;/code&gt;等函数做读写操作。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fgets&lt;/code&gt;从当前指针处读取一行，&lt;code&gt;fgetc&lt;/code&gt;读取一个字符，&lt;code&gt;fstat&lt;/code&gt;返回文件信息，&lt;code&gt;ftruncate&lt;/code&gt;将文件阶段到给定长度。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;glob()&lt;/code&gt;寻找和pattern匹配的文件路径&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Directory类通过&lt;code&gt;dir()&lt;/code&gt;创建。Directory实例有&lt;code&gt;close&lt;/code&gt;，&lt;code&gt;read&lt;/code&gt;，&lt;code&gt;rewind&lt;/code&gt;三种方法。分别用来释放句柄，读取条目和倒回开头。初次以外还有下面这些常用的目录相关函数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;chdir(string $directory)&lt;/code&gt;用来改变当前目录，&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getcwd&lt;/code&gt;取得当前工作目录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scandir()&lt;/code&gt;返回一个包含目录中所有文件和目录的数组&lt;/li&gt;
&lt;li&gt;&lt;code&gt;closedir()&lt;/code&gt;关闭通过&lt;code&gt;opendir()&lt;/code&gt;打开的目录流。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;readdir()&lt;/code&gt;返回目录中下一个文件的文件名。文件名以在文件系统中的排序返回。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;错误处理&#34;&gt;&lt;a href=&#34;#错误处理&#34; class=&#34;headerlink&#34; title=&#34;错误处理&#34;&gt;&lt;/a&gt;错误处理&lt;/h4&gt;&lt;p&gt;下面这些函数允许你定义自己的错误处理规则，以及修改错误记录的方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;debug_backtrace()&lt;/code&gt;产生一条PHP的回溯跟踪，返回数组类型；&lt;code&gt;debug_print_backtrace()&lt;/code&gt;则将回溯打印出来。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_get_last()&lt;/code&gt;获取最后一个发生错误的信息，&lt;code&gt;error_clear_last()&lt;/code&gt;清除最后一个错误信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_log()&lt;/code&gt;发送错误信息到web服务器的错误日志或是一个文件里。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_reporting()&lt;/code&gt;设置应该报告的PHP错误级别。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set_error_handler&lt;/code&gt;, &lt;code&gt;set_exception_handler&lt;/code&gt;, &lt;code&gt;restore_error_handler&lt;/code&gt;, &lt;code&gt;restore_exception_handler&lt;/code&gt;分别是设置和重置错误以及异常处理的函数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;trigger_error()&lt;/code&gt;触发一个用户级别的错误条件，在运行出现异常时，需要产生一个特定响应时很有用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;session&#34;&gt;&lt;a href=&#34;#session&#34; class=&#34;headerlink&#34; title=&#34;session&#34;&gt;&lt;/a&gt;session&lt;/h4&gt;&lt;p&gt;在会话支持下，每个访问网站的用户都有一个唯一的id标识，这个标识可以存储在cookie中，也可以通过URL传递。当一个访问者访问网站时，PHP将自动检查(如果&lt;code&gt;session.auto_start&lt;/code&gt;被设置为1）或者在你要求下检查(明确通过&lt;code&gt;session_start()&lt;/code&gt;或者隐式通&lt;code&gt; session_register()&lt;/code&gt;) 当前会话 id 是否是先前发送的请求创建. 如果是这种情况，那么先前保存的环境将被重建。&lt;/p&gt;
&lt;p&gt;安全方面需要注意以下几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;session.cookie_lifetime=0&lt;/code&gt;, 即浏览器不持久化存储cookie数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;session.use_cookies=On&lt;/code&gt; 并且&lt;code&gt;session.use_only_cookies=On&lt;/code&gt;，即通过HTTP cookie实现会话ID管理&lt;/li&gt;
&lt;li&gt;&lt;code&gt;session.use_strict_mode=On&lt;/code&gt;，即禁止使用未初始化会话id的会话，从而防止Javascript进行会话ID的注入&lt;/li&gt;
&lt;li&gt;&lt;code&gt;session.cookie_httponly=On&lt;/code&gt;，禁止Javascript访问会话ID&lt;/li&gt;
&lt;li&gt;&lt;code&gt;session.cookie_secure=On&lt;/code&gt;，仅在HTTPS协议下访问session ID，用在仅支持HTTPS的站点&lt;/li&gt;
&lt;li&gt;&lt;code&gt;session.hash_function=&amp;quot;sha256&amp;quot;&lt;/code&gt;。 高强度的散列函数可以产生高强度的会话ID&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其他注意事项可以在PHP的&lt;a href=&#34;http://php.net/manual/zh/session.security.php&#34;&gt;会话与安全章节&lt;/a&gt;找到，根据实际需要选择。下面是一些session函数的使用:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;session_destroy()&lt;/code&gt;, 销毁一个会话里的全部数据，但不会重置相关全局变量也不会重置cookie，再次使用时需要重新调用&lt;code&gt;session_start()&lt;/code&gt;函数。为彻底删除session，需要调用&lt;code&gt;setcookie()&lt;/code&gt;清除cookie中的session ID。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;session_cache_expire()&lt;/code&gt;设置或读取当前缓存到期时间（这个只和浏览器页面刷新缓存有关）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;session_id()&lt;/code&gt;获取&amp;#x2F;设置当前会话ID，PHP仅允许会话ID包括a-z A-Z 0-9 ,（逗号） -（减号）.如果不是用cookie来存储session ID，session ID通常附在SID常量中，放在URL里。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;session_regenerate_id()&lt;/code&gt;在不修改当前session数据的前提下使用新的ID替换原有会话ID。如果启用了&lt;code&gt;session.use_trans_sid&lt;/code&gt;选项,那么必须在调用&lt;code&gt;session_regenerate_id()&lt;/code&gt;函数之后开始进行输出工作，否则会导致使用原有的会话 ID&lt;/li&gt;
&lt;li&gt;&lt;code&gt;session_start()&lt;/code&gt;创建新会话或者重用现有会话。 如果通过GET或者POST方式，或者使cookie提交了会话ID，则会重用现有会话。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;session_status()&lt;/code&gt;返回当前会话状态&lt;/li&gt;
&lt;li&gt;&lt;code&gt;session_write_close()&lt;/code&gt;写入session数据，然后关闭会话&lt;/li&gt;
&lt;li&gt;&lt;code&gt;session_name()&lt;/code&gt;设置或返回当前回话名称，名称应短小易懂，且不能由纯数字组成，如&lt;code&gt;website_id&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;session_save_path()&lt;/code&gt;读取&amp;#x2F;设置当前会话的保存路径&lt;/li&gt;
&lt;li&gt;&lt;code&gt;session_unset()&lt;/code&gt;释放当前会话注册的所有会话变量&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;进程控制&#34;&gt;&lt;a href=&#34;#进程控制&#34; class=&#34;headerlink&#34; title=&#34;进程控制&#34;&gt;&lt;/a&gt;进程控制&lt;/h4&gt;&lt;p&gt;这部分函数提供执行系统本身命令的能力。注意，&lt;strong&gt;以加锁方式打开的文件，必须在执行后台程序前关闭&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;escapeshellarg(string $arg)&lt;/code&gt;和&lt;code&gt;escapeshellcmd(string $command)&lt;/code&gt;对参数和命令元字符转义，保证安全。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exec()&lt;/code&gt;和&lt;code&gt;passthru()&lt;/code&gt;都能执行一个外部程序，区别是前者返回结果的最后一行，后者返回未经处理的全部输出数据。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shell_exec()&lt;/code&gt;在shell环境下执行命令，以字符串的形式返回完整的字符串。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;system(string $command[, int &amp;amp;$return_var ] )&lt;/code&gt;执行 command 参数所指定的命令，并且输出执行结果。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;函数调用&#34;&gt;&lt;a href=&#34;#函数调用&#34; class=&#34;headerlink&#34; title=&#34;函数调用&#34;&gt;&lt;/a&gt;函数调用&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;call_user_func(callable $callback [, mixed $parameter [, mixed $... ]])&lt;/code&gt;把第一个参数作为回掉函数调用。在参数很多时，建议使用$callback(…values)的形式传入数组。类似的还有&lt;code&gt;forward_static_call&lt;/code&gt;和&lt;code&gt;forward_static_call_array&lt;/code&gt;用来调用静态方法。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;func_get_arg(int $arg_num)&lt;/code&gt;和&lt;code&gt;func_get_arg()&lt;/code&gt;返回自定义函数的参数和参数列表，用在函数体内。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;function_exists()&lt;/code&gt;判断函数是否定义&lt;/li&gt;
&lt;li&gt;&lt;code&gt;register_shutdown_function&lt;/code&gt;, &lt;code&gt;register_tick_function&lt;/code&gt;用来注册&lt;code&gt;exit&lt;/code&gt;之后和每个tick后执行的函数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Hash&#34;&gt;&lt;a href=&#34;#Hash&#34; class=&#34;headerlink&#34; title=&#34;Hash&#34;&gt;&lt;/a&gt;Hash&lt;/h4&gt;&lt;p&gt;这部分函数自5.1.2版本后成为核心的一部分。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hash()&lt;/code&gt;根据指定的哈希算法生成哈希值。类似的还有&lt;code&gt;hash_file&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hash_hmac()&lt;/code&gt;使用HMAC方法生成带有密钥的哈希值，类似的还有&lt;code&gt;hash_hmac_file&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hash_init()&lt;/code&gt;初始化一个哈希运算上下文，返回resource类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hash_update(resource $context , string $data)&lt;/code&gt;向活跃的哈希运算上下文中填充数据。细化的，还有&lt;code&gt;hash_update_file&lt;/code&gt;和&lt;code&gt;hash_update_stream&lt;/code&gt;两个函数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hash_final()&lt;/code&gt;结束哈希上下文，返回摘要内容。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hash_copy()&lt;/code&gt;返回一个哈希运算上下文副本。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;PHP自身&#34;&gt;&lt;a href=&#34;#PHP自身&#34; class=&#34;headerlink&#34; title=&#34;PHP自身&#34;&gt;&lt;/a&gt;PHP自身&lt;/h4&gt;&lt;p&gt;这些函数允许你获得许多关于PHP本身的参数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;assert()&lt;/code&gt;检查一个断言是否为FALSE，并在失败的时候调用&lt;code&gt;assert_options()&lt;/code&gt;中指定的回调函数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dl()&lt;/code&gt;运行时加载一个PHP扩展&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get_cfg_var()&lt;/code&gt;获取PHP配置选项的值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get_current_user()&lt;/code&gt;获取当前PHP脚本所有者名称&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get_included_files()&lt;/code&gt;返回被include和require文件名的 array&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ini_get()&lt;/code&gt;获取一个配置选项的值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ini_set()&lt;/code&gt;设置指定配置选项的值。这个选项会在脚本运行时保持新的值，并在脚本结束时恢复&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ini_restore()&lt;/code&gt;恢复指定的配置选项到它的原始值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;memory_get_usage()&lt;/code&gt;返回当前分配给你的 PHP 脚本的内存量，单位是字节（byte）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;php_sapi_name()&lt;/code&gt;返回web服务器和PHP之间的接口类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;php_uname()&lt;/code&gt;返回运行PHP的系统的有关信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;phpinfo([int $what = INFO_ALL])&lt;/code&gt;输出关于 PHP 配置的信息。可以通过&lt;code&gt;what&lt;/code&gt;筛选输出内容。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;phpversion()&lt;/code&gt;获取当前的PHP版本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;version_compare()&lt;/code&gt;对比两个「PHP 规范化」的版本数字字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;数学&#34;&gt;&lt;a href=&#34;#数学&#34; class=&#34;headerlink&#34; title=&#34;数学&#34;&gt;&lt;/a&gt;数学&lt;/h4&gt;&lt;p&gt;这部分函数处理integer和float范围内的计算。预定义常量包括&lt;code&gt;M_PI&lt;/code&gt;, &lt;code&gt;M_E&lt;/code&gt;, &lt;code&gt;M_LOG2E&lt;/code&gt;, &lt;code&gt;M_LN2&lt;/code&gt;, &lt;code&gt;M_PI_2&lt;/code&gt;, &lt;code&gt;M_1_PI&lt;/code&gt;, &lt;code&gt;M_SQRT2&lt;/code&gt;, &lt;code&gt;M_SQRT3&lt;/code&gt;, &lt;code&gt;INF&lt;/code&gt;等诸多数学常量。函数名和其他语言类似。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;三角函数相关：&lt;code&gt;sin&lt;/code&gt;, &lt;code&gt;cos&lt;/code&gt;, &lt;code&gt;tan&lt;/code&gt;, &lt;code&gt;asin&lt;/code&gt;, &lt;code&gt;acos&lt;/code&gt;, &lt;code&gt;atan&lt;/code&gt;计算单位为弧度&lt;/li&gt;
&lt;li&gt;双曲函数相关：&lt;code&gt;sinh&lt;/code&gt;, &lt;code&gt;cosh&lt;/code&gt;, &lt;code&gt;tanh&lt;/code&gt;, &lt;code&gt;asinh&lt;/code&gt;, &lt;code&gt;acosh&lt;/code&gt;, &lt;code&gt;atanh&lt;/code&gt;, &lt;code&gt;atan2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;对数相关：&lt;code&gt;log&lt;/code&gt;, &lt;code&gt;log10&lt;/code&gt;, &lt;code&gt;log1p&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;指数相关：&lt;code&gt;pow&lt;/code&gt;, &lt;code&gt;exp&lt;/code&gt;, &lt;code&gt;expm&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;近似相关：&lt;code&gt;round&lt;/code&gt;, &lt;code&gt;floor&lt;/code&gt;, &lt;code&gt;ceil&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;随机数相关： &lt;code&gt;rand(int $min , int $max)&lt;/code&gt;, &lt;code&gt;mt_rand&lt;/code&gt;（用法同&lt;code&gt;rand&lt;/code&gt;，性能更好）, &lt;code&gt;srand&lt;/code&gt;和&lt;code&gt;mt_srand&lt;/code&gt;（现已不需要使用）&lt;/li&gt;
&lt;li&gt;进制转换相关：&lt;code&gt;bindec&lt;/code&gt;, &lt;code&gt;octdec&lt;/code&gt;, &lt;code&gt;hexdec&lt;/code&gt;转为十进制数（读取字符串，输出数字），相对应还有&lt;code&gt;decbin&lt;/code&gt;, &lt;code&gt;decbin&lt;/code&gt;, &lt;code&gt;dechex&lt;/code&gt;。&lt;code&gt;base_convert()&lt;/code&gt;可以做任意进制转换&lt;/li&gt;
&lt;li&gt;角度相关：&lt;code&gt;deg2rad&lt;/code&gt;角度转弧度&lt;/li&gt;
&lt;li&gt;运算相关：&lt;code&gt;intdiv&lt;/code&gt;返回商的整数部分，&lt;code&gt;fmod&lt;/code&gt;返回浮点数余数。&lt;code&gt;abs&lt;/code&gt;计算绝对值，&lt;code&gt;sqrt&lt;/code&gt;计算开根号&lt;/li&gt;
&lt;li&gt;判断相关：&lt;code&gt;is_finite&lt;/code&gt;, &lt;code&gt;is_infinite&lt;/code&gt;, &lt;code&gt;is_nan&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;其他：&lt;code&gt;max&lt;/code&gt;, &lt;code&gt;min&lt;/code&gt;（可以输入数组）, &lt;code&gt;pi&lt;/code&gt;, &lt;code&gt;hypot&lt;/code&gt;（根据直角边计算三角形斜边长）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;输出控制&#34;&gt;&lt;a href=&#34;#输出控制&#34; class=&#34;headerlink&#34; title=&#34;输出控制&#34;&gt;&lt;/a&gt;输出控制&lt;/h4&gt;&lt;p&gt;PHP脚本有输出时，输出控制函数可以用这些来控制输出。如通过&lt;code&gt;ob_start()&lt;/code&gt;将下文的输出放在缓冲区直到调用&lt;code&gt;ob_end_flush()&lt;/code&gt;。通常配合&lt;code&gt;header()&lt;/code&gt;使用，在真正返回数据前写入header和cookie。&lt;/p&gt;
&lt;p&gt;从略。&lt;/p&gt;
&lt;h4 id=&#34;杂项&#34;&gt;&lt;a href=&#34;#杂项&#34; class=&#34;headerlink&#34; title=&#34;杂项&#34;&gt;&lt;/a&gt;杂项&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;constant()&lt;/code&gt;返回一个常量的值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;define()&lt;/code&gt;定义一个常量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exit()&lt;/code&gt;输出一个消息并且退出当前脚本，&lt;code&gt;die&lt;/code&gt;是&lt;code&gt;exit&lt;/code&gt;的同名函数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;highlight_file()&lt;/code&gt;语法高亮一个文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;highlight_string()&lt;/code&gt;语法高亮一个字符串，使用方法同上。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sleep()&lt;/code&gt;延迟指定秒数执行。类似的还有&lt;code&gt;usleep&lt;/code&gt;以指定微秒数暂缓执行，&lt;code&gt;time_sleep_until&lt;/code&gt;使脚本睡眠到指定时间&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uniqid()&lt;/code&gt;返回一个基于当前微秒级时间的带前缀的唯一ID。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;绑定拓展库&#34;&gt;&lt;a href=&#34;#绑定拓展库&#34; class=&#34;headerlink&#34; title=&#34;绑定拓展库&#34;&gt;&lt;/a&gt;绑定拓展库&lt;/h3&gt;&lt;p&gt;下面的拓展库绑定在PHP发行包中。较之内核部分的函数，更偏向为解决某类问题而设计。这里也只摘选部分常用的介绍。&lt;/p&gt;
&lt;h4 id=&#34;Ctype&#34;&gt;&lt;a href=&#34;#Ctype&#34; class=&#34;headerlink&#34; title=&#34;Ctype&#34;&gt;&lt;/a&gt;Ctype&lt;/h4&gt;&lt;p&gt;用来检测 在当前的区域设定下，一个字符或者字符串 是否仅包含指定类型的字符。根据官方描述，&lt;strong&gt;“如果可以满足需求，请优先考虑使用 ctype 函数， 而不是正则表达式或者对应的 “str_*” 和 “is_*” 函数。 因为 ctype 使用的是原生 C 库，所以会有明显的性能优势”&lt;/strong&gt;。在4.2.0版本后，这些函数是默认启动的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ctype_alpha()&lt;/code&gt;纯字符检测&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctype_upper()&lt;/code&gt;大写字母检测&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctype_lower()&lt;/code&gt;小写字母检测&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctype_digit()&lt;/code&gt;纯数字检测&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctype_alnum()&lt;/code&gt;检查字符串内的字符否全部为字母或数字&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctype_cntrl()&lt;/code&gt;控制字符检测&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctype_print()&lt;/code&gt;字符是否都可以打印&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctype_graph()&lt;/code&gt;字符输出是否都是可见的&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctype_punct()&lt;/code&gt;字符是否都可打印却不是字母数组和空白&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctype_space()&lt;/code&gt;空白字符检测&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctype_xdigit()&lt;/code&gt;十六进制字符串检测&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;正则表达式&#34;&gt;&lt;a href=&#34;#正则表达式&#34; class=&#34;headerlink&#34; title=&#34;正则表达式&#34;&gt;&lt;/a&gt;正则表达式&lt;/h4&gt;&lt;p&gt;在PHP5.3版本后，原来的POSIX Regex不再推荐使用。兼容Perl的正则表达式库PCRE仍可以使用，且默认开启。这里仅介绍PCRE相关函数，它们均以&lt;code&gt;preg&lt;/code&gt;开头。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;preg_match()&lt;/code&gt;返回pattern在subject中的匹配次数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;preg_match_all()&lt;/code&gt;搜索subject中所有匹配pattern给定正则表达式的匹配结果并且将它们以指定顺序输出到matches结果中.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;preg_replace()&lt;/code&gt;执行一个正则表达式的搜索和替换，当$pattern和$replacement都是数组时，会进行相对应位置的替换。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;preg_grep(string $pattern , array $input [, int $flags = 0 ])&lt;/code&gt;返回给定数组input中与模式pattern 匹配的元素组成的数组.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;preg_split()&lt;/code&gt;通过正则表达式分割字符串，返回一个数组。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;JSON&#34;&gt;&lt;a href=&#34;#JSON&#34; class=&#34;headerlink&#34; title=&#34;JSON&#34;&gt;&lt;/a&gt;JSON&lt;/h4&gt;&lt;p&gt;自5.2.0起，JSON拓展默认内置并编译进PHP。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;json_encode()&lt;/code&gt;JSON编码一个变量。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;json_decode()&lt;/code&gt;解码一个JSON格式的字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;json_last_error()&lt;/code&gt;返回JSON编码时最后的错误&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;多字节字符串&#34;&gt;&lt;a href=&#34;#多字节字符串&#34; class=&#34;headerlink&#34; title=&#34;多字节字符串&#34;&gt;&lt;/a&gt;多字节字符串&lt;/h4&gt;&lt;p&gt;在汉语中，每个字符通常占用2个字节，在使用string的相关函数时，可能会出现意外问题。多字节字符串即为了解决此问题。这不是一个默认扩展，需要在configure选项中显式激活。详见&lt;a href=&#34;http://php.net/manual/zh/mbstring.installation.php&#34;&gt;安装&lt;/a&gt;。另外，&lt;code&gt;mbstring&lt;/code&gt;支持“函数重载”，即使用&lt;code&gt;mb_xxx&lt;/code&gt;替代原有的字符串函数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mb_detect_encoding()&lt;/code&gt;检测字符的编码&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mb_ereg_xxx&lt;/code&gt;打头的与&lt;code&gt;preg_xxx&lt;/code&gt;同名的函数为正则匹配多字节版&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mb_strlen()&lt;/code&gt;获取字符串长度。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mb_split()&lt;/code&gt;使用正则表达式分割多字节字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mb_substr()&lt;/code&gt;执行一个多字节安全的&lt;code&gt;substr()&lt;/code&gt;操作&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mb_strpos()&lt;/code&gt;查找字符串在另一个字符串中首次出现的位置；类似地，&lt;code&gt;mb_strrpos&lt;/code&gt;查找最后出现的位置。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mb_strstr ()&lt;/code&gt;查找字符串在另一个字符串里的首次出现；类似地，&lt;code&gt;mb_strrchr()&lt;/code&gt;查找指定字符在另一个字符串中最后一次的出现&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;BCMath&#34;&gt;&lt;a href=&#34;#BCMath&#34; class=&#34;headerlink&#34; title=&#34;BCMath&#34;&gt;&lt;/a&gt;BCMath&lt;/h4&gt;&lt;p&gt;这部分函数进行任意大小和精度的数字的二进制计算。自4.0.4后随PHP一起发布。Windows版本下是默认支持的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;string bcadd(string $left_operand , string $right_operand [, int $scale ] )&lt;/code&gt;加法。scale用来决定小数点位数，输入输出均未string类型，下同。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bcsub()&lt;/code&gt;减法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int bccomp()&lt;/code&gt;比较&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bcmul()&lt;/code&gt;乘法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bcdiv()&lt;/code&gt;除法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bcmod()&lt;/code&gt;取模&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bcpow()&lt;/code&gt;乘方&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bcsqrt()&lt;/code&gt;二次方根&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bcscale()&lt;/code&gt;设置所有bc数学函数的默认小数点位数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;图像处理&#34;&gt;&lt;a href=&#34;#图像处理&#34; class=&#34;headerlink&#34; title=&#34;图像处理&#34;&gt;&lt;/a&gt;图像处理&lt;/h4&gt;&lt;p&gt;PHP可以处理各种格式的图像，并把它们输出到浏览器。这需要在编译时指定GD库（除了&lt;code&gt;getimagesize()&lt;/code&gt;函数）。GD库不仅能处理图像，还能对字体进行处理。使用PHP可以动态修改图像文件，或为图像添加水印信息，甚至创建一个图像。&lt;/p&gt;
&lt;p&gt;下面是和图像信息相关的函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gd_info()&lt;/code&gt;获取当前安装的GD库信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getimagesize()&lt;/code&gt;获取图像大小，返回数组类型，按顺序分别是宽度，高度，类型，描述宽高的字符串。&lt;code&gt;getimagesizefromstring&lt;/code&gt;函数则通过打开的图片信息（字符串格式）中读取图像尺寸信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;image_type_to_extension()&lt;/code&gt;获取图像类型的文件后缀&lt;/li&gt;
&lt;li&gt;&lt;code&gt;imageistruecolor(resource $image)&lt;/code&gt;检查图像是否为真彩色&lt;/li&gt;
&lt;li&gt;&lt;code&gt;imagesx()&lt;/code&gt;返回image所代表的图像宽度；&lt;code&gt;imagesy()&lt;/code&gt;返回所代表的图像高度&lt;/li&gt;
&lt;li&gt;&lt;code&gt;imagetypes()&lt;/code&gt;返回PHP支持的图像类型，int类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;剩下还有众多以&lt;code&gt;image&lt;/code&gt;开头的和创建、输出、删除图像，画图、编辑图片、设置颜色、设置字体相关的函数，见&lt;a href=&#34;https://www.php.net/manual/zh/book.image.php&#34;&gt;参考&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&#34;Exif&#34;&gt;&lt;a href=&#34;#Exif&#34; class=&#34;headerlink&#34; title=&#34;Exif&#34;&gt;&lt;/a&gt;Exif&lt;/h4&gt;&lt;p&gt;通过Exif拓展，可以操作图像元数据。必须使用&lt;code&gt;--enable-exif&lt;/code&gt;选项编译PHP，Windows用户还需要启用mbstring扩展。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;exif_imagetype()&lt;/code&gt;读取一个图像的第一个字节并检查其签名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exif_read_data()&lt;/code&gt;函数从JPEG或TIFF图像文件中读取EXIF头信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exif_thumbnail()&lt;/code&gt;读取TIFF或JPEG图像中的嵌入缩略图。如果图像不包含缩略图则返回FALSE&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Socket&#34;&gt;&lt;a href=&#34;#Socket&#34; class=&#34;headerlink&#34; title=&#34;Socket&#34;&gt;&lt;/a&gt;Socket&lt;/h4&gt;&lt;p&gt;Socket拓展基于流行的BSD sockets，实现了和socket通讯功能的底层接口。在编译PHP时必须在配置中添加—enable-sockets配置项。利用这部分函数可以很方便地搭建起socket服务器和客户端，示例见&lt;a href=&#34;http://php.net/manual/zh/sockets.examples.php&#34;&gt;官网&lt;/a&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;socket_create(int $domain , int $type , int $protocol)&lt;/code&gt;创建并返回一个套接字（resource类型）。其中&lt;code&gt;domain&lt;/code&gt;指定使用的网络协议族，&lt;code&gt;type&lt;/code&gt;指定建立的套接字类型，&lt;code&gt;protocol&lt;/code&gt;指定使用的具体协议。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;socket_create_listen()&lt;/code&gt;在某端口打开socket以接收连接。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;socket_bind()&lt;/code&gt;绑定网络地址到套接字的源。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;socket_connect()&lt;/code&gt;使用address作为目的地址，建立套接字连接。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;socket_listen()&lt;/code&gt;在创建好socket资源，并绑定了source address后，可以调用此函数监听进入的数据流。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;socket_accept()&lt;/code&gt;在依次使用socket_create创建套接字，使用&lt;code&gt;socket_bind&lt;/code&gt;绑定端口，使用&lt;code&gt;socket_listen&lt;/code&gt;监听连接后。该函数允许到此套接字上的连接，返回一个新的socket资源用来通信。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;socket_read()&lt;/code&gt;从已连接的socket中读取一段长度的数据，返回读出的数据。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;socket_recv()&lt;/code&gt;功能同上，返回字节数并将数据存放在&lt;code&gt;$buf&lt;/code&gt;中。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;socket_recvfrom() &lt;/code&gt;从已连接和还未连接的socket中读取数据。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;socket_write()&lt;/code&gt;向socket中写入数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;socket_send()&lt;/code&gt;向已连接的socket中写入数据。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;socket_sendto()&lt;/code&gt;向socket中发送数据而不管是否已连接&lt;/li&gt;
&lt;li&gt;&lt;code&gt;socket_getsockname()&lt;/code&gt;和&lt;code&gt;socket_getpeername()&lt;/code&gt;获取本地和远端socket信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;socket_set_block()&lt;/code&gt;和&lt;code&gt;socket_set_nonblock()&lt;/code&gt;设置socket是否阻塞&lt;/li&gt;
&lt;li&gt;&lt;code&gt;socket_set_option()&lt;/code&gt;设置套接字选项&lt;/li&gt;
&lt;li&gt;&lt;code&gt;socket_shutdown()&lt;/code&gt;停止从socket中读写数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;socket_close()&lt;/code&gt;关闭给定的socket资源&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;外部拓展库&#34;&gt;&lt;a href=&#34;#外部拓展库&#34; class=&#34;headerlink&#34; title=&#34;外部拓展库&#34;&gt;&lt;/a&gt;外部拓展库&lt;/h3&gt;&lt;p&gt;这些扩展库已经绑定在PHP发行包中，但是要编译以下扩展库，需要外部的库文件。这里仅介绍常用的cURL库。Mysqli和Mongo等可能会用得到的库介绍从略。&lt;/p&gt;
&lt;h4 id=&#34;client-URL&#34;&gt;&lt;a href=&#34;#client-URL&#34; class=&#34;headerlink&#34; title=&#34;client URL&#34;&gt;&lt;/a&gt;client URL&lt;/h4&gt;&lt;p&gt;PHP支持Daniel Stenberg创建的libcurl库，能够连接通讯各种服务器、使用各种协议。这些curl函数在PHP 4.0.2中引入。需要安装libcurl包才能使用PHP的cURL函数。安装过程从略。curl的使用流程思路和socket，mysql等十分相似，先使用&lt;code&gt;curl_init()&lt;/code&gt;初始化会话，再使用&lt;code&gt;curl_setopt()&lt;/code&gt;设置选项，然后通过&lt;code&gt;curl_exec()&lt;/code&gt;执行会话，最后使用&lt;code&gt;curl_close()&lt;/code&gt;关闭。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;curl_setopt()&lt;/code&gt;设置一个传输选项，常用的设置包括&lt;code&gt;CURLOPT_URL&lt;/code&gt;, &lt;code&gt;CURLOPT_HEADER&lt;/code&gt;, &lt;code&gt;CURLOPT_RETURNTRANSFER&lt;/code&gt;, &lt;code&gt;CURLOPT_TIMEOUT&lt;/code&gt;等。类似的，还有&lt;code&gt;curl_setopt_array&lt;/code&gt;函数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;curl_reset()&lt;/code&gt;重置一个libcurl会话句柄的所有的选项&lt;/li&gt;
&lt;li&gt;&lt;code&gt;curl_exec()&lt;/code&gt;执行一个cURL会话。返回TRUE或执行的结果，或是FALSE。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;curl_close()&lt;/code&gt;关闭一个会话，释放所有相关资源&lt;/li&gt;
&lt;li&gt;&lt;code&gt;curl_getinfo()&lt;/code&gt;获取最后一次传输的相关信息。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;curl_error()&lt;/code&gt;返回一条最近一次cURL操作明确的文本的错误信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;curl_version()&lt;/code&gt;获取cURL版本信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;特色&#34;&gt;&lt;a href=&#34;#特色&#34; class=&#34;headerlink&#34; title=&#34;特色&#34;&gt;&lt;/a&gt;特色&lt;/h2&gt;&lt;p&gt;这里列举的特点更多是PHP语言的特殊使用方式与应用特性。如HTTP用户认证（介绍见&lt;a href=&#34;http://php.net/manual/zh/features.http-auth.php&#34;&gt;官网&lt;/a&gt;），cookie等。&lt;/p&gt;
&lt;p&gt;PHP透明地支持HTTP cookie，在PHP的网络函数中可以用&lt;code&gt;setcookie()&lt;/code&gt;或&lt;code&gt;setrawcookie()&lt;/code&gt;函数来设置cookie。cookie是HTTP标头的一部分，因此&lt;code&gt;setcookie()&lt;/code&gt;函数必须在其它信息被输出到浏览器前调用，这和对header()函数的限制类似。可以使用输出缓冲函数来延迟脚本的输出，直到按需要设置好了所有的cookie或者其它HTTP标头。&lt;/p&gt;
&lt;p&gt;PHP允许用户使用POST方法上传文本和二进制文件。一个上传文件的HTML表单代码类似如下，其中的&lt;code&gt;MAX_FILE_SIZE&lt;/code&gt;隐藏字段在浏览器端限制了文件大小（单位字节，不建议依赖于此）：&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;&amp;lt;!-- The data encoding type, enctype, MUST be specified as below --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;form&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;enctype&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;multipart/form-data&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;action&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;__URL__&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;method&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;&amp;lt;!-- MAX_FILE_SIZE must precede the file input field --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;MAX_FILE_SIZE&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;30000&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;&amp;lt;!-- Name of input element determines name in $_FILES array --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Send this file: &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;userfile&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;file&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;Send File&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;全局变量&lt;code&gt;$_FILES&lt;/code&gt;自PHP4.1.0起存在，包含了所有上传的文件信息。&lt;code&gt;$_FILES[&amp;#39;userfile&amp;#39;]&lt;/code&gt;数组有&lt;code&gt;name&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;size&lt;/code&gt;, &lt;code&gt;tmp_name&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt;等字段。error字段状态码在0-7间，分别表示上传成功&amp;#x2F;文件过大&amp;#x2F;部分上传&amp;#x2F;没有文件&amp;#x2F;找不到临时文件夹&amp;#x2F;写入失败。文件被上传后，默认地会被储存到服务端的默认临时目录中。&lt;/p&gt;
&lt;p&gt;PHP支持同时上传多个文件并将它们的信息自动以数组的形式组织。要完成这项功能，需要在HTML表单中对文件上传域使用和多选框与复选框相同的数组式提交语法。像下面的代码那样：&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;form&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;action&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;file-upload.php&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;method&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;post&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;enctype&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;multipart/form-data&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Send these files:&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;br&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;userfile[]&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;file&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;br&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;userfile[]&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;file&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;br&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;Send files&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;同时，PHP还支持PUT方法上传文件，内容见官方文档。下面是一个允许用户上传图片的代码：&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;header&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Content-Type: text/plain; charset=utf-8&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Undefined | Multiple Files | $_FILES Corruption Attack&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// If this request falls under any of them, treat it invalid.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        !&lt;span class=&#34;keyword&#34;&gt;isset&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$_FILES&lt;/span&gt;[&lt;span class=&#34;string&#34;&gt;&amp;#x27;upfile&amp;#x27;&lt;/span&gt;][&lt;span class=&#34;string&#34;&gt;&amp;#x27;error&amp;#x27;&lt;/span&gt;]) ||&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_ invoke__&#34;&gt;is_array&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$_FILES&lt;/span&gt;[&lt;span class=&#34;string&#34;&gt;&amp;#x27;upfile&amp;#x27;&lt;/span&gt;][&lt;span class=&#34;string&#34;&gt;&amp;#x27;error&amp;#x27;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;RuntimeException&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Invalid parameters.&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Check $_FILES[&amp;#x27;upfile&amp;#x27;][&amp;#x27;error&amp;#x27;] value.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt; (&lt;span class=&#34;variable&#34;&gt;$_FILES&lt;/span&gt;[&lt;span class=&#34;string&#34;&gt;&amp;#x27;upfile&amp;#x27;&lt;/span&gt;][&lt;span class=&#34;string&#34;&gt;&amp;#x27;error&amp;#x27;&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; UPLOAD_ERR_OK:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; UPLOAD_ERR_NO_FILE:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;RuntimeException&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;No file sent.&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; UPLOAD_ERR_INI_SIZE:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; UPLOAD_ERR_FORM_SIZE:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;RuntimeException&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Exceeded filesize limit.&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;RuntimeException&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Unknown errors.&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// You should also check filesize here. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;variable&#34;&gt;$_FILES&lt;/span&gt;[&lt;span class=&#34;string&#34;&gt;&amp;#x27;upfile&amp;#x27;&lt;/span&gt;][&lt;span class=&#34;string&#34;&gt;&amp;#x27;size&amp;#x27;&lt;/span&gt;] &amp;gt; &lt;span class=&#34;number&#34;&gt;1000000&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;RuntimeException&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Exceeded filesize limit.&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// DO NOT TRUST $_FILES[&amp;#x27;upfile&amp;#x27;][&amp;#x27;mime&amp;#x27;] VALUE !!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Check MIME Type by yourself.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable&#34;&gt;$finfo&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title function_ invoke__&#34;&gt;finfo&lt;/span&gt;(FILEINFO_MIME_TYPE);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt; === &lt;span class=&#34;variable&#34;&gt;$ext&lt;/span&gt; = &lt;span class=&#34;title function_ invoke__&#34;&gt;array_search&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable&#34;&gt;$finfo&lt;/span&gt;-&amp;gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;file&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$_FILES&lt;/span&gt;[&lt;span class=&#34;string&#34;&gt;&amp;#x27;upfile&amp;#x27;&lt;/span&gt;][&lt;span class=&#34;string&#34;&gt;&amp;#x27;tmp_name&amp;#x27;&lt;/span&gt;]),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;array&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;#x27;jpg&amp;#x27;&lt;/span&gt; =&amp;gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;image/jpeg&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;#x27;png&amp;#x27;&lt;/span&gt; =&amp;gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;image/png&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;#x27;gif&amp;#x27;&lt;/span&gt; =&amp;gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;image/gif&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    )) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;RuntimeException&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Invalid file format.&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// You should name it uniquely.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// DO NOT USE $_FILES[&amp;#x27;upfile&amp;#x27;][&amp;#x27;name&amp;#x27;] WITHOUT ANY VALIDATION !!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// On this example, obtain safe unique name from its binary data.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!&lt;span class=&#34;title function_ invoke__&#34;&gt;move_uploaded_file&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable&#34;&gt;$_FILES&lt;/span&gt;[&lt;span class=&#34;string&#34;&gt;&amp;#x27;upfile&amp;#x27;&lt;/span&gt;][&lt;span class=&#34;string&#34;&gt;&amp;#x27;tmp_name&amp;#x27;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_ invoke__&#34;&gt;sprintf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;./uploads/%s.%s&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_ invoke__&#34;&gt;sha1_file&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$_FILES&lt;/span&gt;[&lt;span class=&#34;string&#34;&gt;&amp;#x27;upfile&amp;#x27;&lt;/span&gt;][&lt;span class=&#34;string&#34;&gt;&amp;#x27;tmp_name&amp;#x27;&lt;/span&gt;]),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;variable&#34;&gt;$ext&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    )) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;RuntimeException&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Failed to move uploaded file.&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;File is uploaded successfully.&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;RuntimeException&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$e&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$e&lt;/span&gt;-&amp;gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;getMessage&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在php.ini文件中激活了&lt;code&gt;allow_url_fopen&lt;/code&gt;选项后，可以在大多数需要用文件名作为参数的函数中使用HTTP和FTP的URL来代替文件名。同时，也可以在&lt;code&gt;include&lt;/code&gt;、&lt;code&gt;include_once&lt;/code&gt;、&lt;code&gt;require&lt;/code&gt;及&lt;code&gt;require_once&lt;/code&gt;语句中使用URL。如果有合法的访问权限，以一个用户的身份和某FTP服务器建立了链接，还可以向该FTP服务器端的文件进行写操作。&lt;/p&gt;
&lt;p&gt;持久的数据库连接是指在脚本结束运行时不关闭的连接。当收到一个持久连接的请求时。PHP将检查是否已经存在一个（前面已经开启的）相同的持久连接。如果存在，将直接使用这个连接；如果不存在，则建立一个新的连接。所谓“相同”的连接是指用相同的用户名和密码到相同主机的连接。&lt;/p&gt;
&lt;p&gt;PHP 5.3后使用GC作为新的垃圾回收机制。每个php变量存在一个叫”zval”的变量容器中。一个zval变量容器，除了包含变量的类型和值，还包括两个字节的额外信息。第一个是”is_ref”，是个bool值，用来标识这个变量是否是属于引用集合(reference set)。第二个额外字节是”refcount”，用以表示指向这个zval变量容器的变量(也称符号即symbol)个数。通常，PHP中的垃圾回收机制，仅仅在循环回收算法确实运行时会有时间消耗上的增加。但是在平常的(更小的)脚本中应根本就没有性能影响。&lt;/p&gt;
&lt;h2 id=&#34;安全&#34;&gt;&lt;a href=&#34;#安全&#34; class=&#34;headerlink&#34; title=&#34;安全&#34;&gt;&lt;/a&gt;安全&lt;/h2&gt;&lt;p&gt;PHP作为一种强大的语言，无论是以模块还是CGI的方式安装，它的解释器都可以在服务器上访问文件、运行命令以及创建网络连接等。这些功能也许会给服务器添加很多不安全因素，但是只要正确地安装和配置PHP，以及编写安全的代码，那么PHP相对于Perl和C来说，是能创建出更安全的CGI程序的。这部分提出一些原则，在不同环境下尽可能提高安全性。&lt;/p&gt;
&lt;h3 id=&#34;安装&#34;&gt;&lt;a href=&#34;#安装&#34; class=&#34;headerlink&#34; title=&#34;安装&#34;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;p&gt;以CGI模式安装PHP时，它的设计可以用以避免访问系统文件和服务器的任意目录。在安装时配置一些选项可以有助避免这类攻击。具体见&lt;a href=&#34;http://php.net/manual/zh/security.cgi-bin.attacks.php&#34;&gt;文档介绍&lt;/a&gt;。同理，以Apache模块安装时，权限的注意也请见&lt;a href=&#34;https://www.php.net/manual/zh/security.apache.php&#34;&gt;官网介绍&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;Session安全&#34;&gt;&lt;a href=&#34;#Session安全&#34; class=&#34;headerlink&#34; title=&#34;Session安全&#34;&gt;&lt;/a&gt;Session安全&lt;/h3&gt;&lt;p&gt;这部分见&lt;a href=&#34;####session&#34;&gt;Session部分&lt;/a&gt;的安全介绍。&lt;/p&gt;
&lt;h3 id=&#34;文件系统-1&#34;&gt;&lt;a href=&#34;#文件系统-1&#34; class=&#34;headerlink&#34; title=&#34;文件系统&#34;&gt;&lt;/a&gt;文件系统&lt;/h3&gt;&lt;p&gt;PHP被设计为以用户级别来访问文件系统，所以完全有可能通过编写一段PHP代码来读取系统文件如&lt;code&gt;/etc/passwd&lt;/code&gt;，更改网络连接以及发送大量打印任务等等。因此必须确保PHP代码读取和写入的是合适的文件。&lt;/p&gt;
&lt;p&gt;由于PHP的文件系统操作是基于C语言的函数的，Null字符在C语言中用于标识字符串结束，一个完整的字符串是从其开头到遇见Null字符为止。因此，任何用于操作文件系统的字符串（特别是程序外部输入的字符串）都必须经过适当的检查。&lt;/p&gt;
&lt;p&gt;这种安全问题也会出现在执行来自用户输入的命令。通常有两条路可以选择：1）检查所有来自外部的变量（&lt;strong&gt;黑名单&lt;/strong&gt;）；2）后台写死可以执行的文件名或命令有限集（&lt;strong&gt;白名单&lt;/strong&gt;）&lt;/p&gt;
&lt;h3 id=&#34;数据库&#34;&gt;&lt;a href=&#34;#数据库&#34; class=&#34;headerlink&#34; title=&#34;数据库&#34;&gt;&lt;/a&gt;数据库&lt;/h3&gt;&lt;p&gt;由于敏感数据和机密数据通常存储在数据库中，数据库安全和保护显得尤为重要。&lt;strong&gt;PHP本身并不能保护数据库的安全&lt;/strong&gt;。这里只是讲述怎样用PHP脚本对数据库进行基本的访问和操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;设计数据库时，永远不要使用数据库所有者或超级用户帐号来连接数据库&lt;/strong&gt;，因为这些帐号可以执行任意的操作。应该为程序的每个方面创建不同的数据库帐号，并赋予对数据库对象的极有限的权限。同时，一些功能可以用视图（view）、触发器（trigger）或者规则（rule）在数据库层面完成。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;连接数据库&lt;/strong&gt;时，把连接建立在 SSL 加密技术上可以增加客户端和服务器端通信的安全性，或者SSH也可以用于加密客户端和数据库之间的连接。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;存储模型&lt;/strong&gt;中，可以散列一些没必要明文显示的数据，建议加盐散列，同时采用新的SHA散列算法（如SHA-2或SHA-3）以增加安全程度。&lt;/p&gt;
&lt;h3 id=&#34;SQL注入&#34;&gt;&lt;a href=&#34;#SQL注入&#34; class=&#34;headerlink&#34; title=&#34;SQL注入&#34;&gt;&lt;/a&gt;SQL注入&lt;/h3&gt;&lt;p&gt;这部分内容是极为常见的网络安全问题，通过构造特殊的SQL语句，获取数据库信息甚至主机权限，介绍从略。&lt;/p&gt;
&lt;p&gt;在预防措施上，&lt;strong&gt;永远不要信任外部输入的任何数据，包括表单里和cookie的信息&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用权限被严格限制的帐号访问数据库&lt;/li&gt;
&lt;li&gt;检查输入的数据是否具有所期望的数据格式&lt;/li&gt;
&lt;li&gt;减少SQL语句的拼接使用&lt;/li&gt;
&lt;li&gt;使用数据库特定的敏感字符转义函数&lt;/li&gt;
&lt;li&gt;还可以选择使用数据库的存储过程和预定义指针等特性来抽象数库访问，使用户不能直接访问数据表和视图&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;错误报告&#34;&gt;&lt;a href=&#34;#错误报告&#34; class=&#34;headerlink&#34; title=&#34;错误报告&#34;&gt;&lt;/a&gt;错误报告&lt;/h3&gt;&lt;p&gt;错误报告是一把双刃剑。一方面可以提高安全性，另一方面又有利于攻击者收集服务器的信息以便寻找弱点。PHP的独有的错误提示风格可以说明系统在运行 PHP，一个函数错误可能暴露系统正在使用的数据库，一个文件系统或者PHP的错误就会暴露web服务器具有什么权限，以及文件在服务器上的组织结构等。&lt;/p&gt;
&lt;p&gt;有三个常用的办法处理这些问题。第一个是彻底地检查所有函数，并尝试弥补大多数错误。第二个是对在线系统彻底关闭错误报告。第三个是使用 PHP 自定义的错误处理函数创建自己的错误处理机制&lt;/p&gt;
&lt;p&gt;可以通过&lt;code&gt;error_reporting()&lt;/code&gt;帮助找到错误所在并使代码更安全。发布程序前，设置为&lt;code&gt;E_ALL&lt;/code&gt;找到所有使用不当的地方；正式发布后，设为0彻底关闭错误报告或设置&lt;code&gt;php.ini&lt;/code&gt;中的&lt;code&gt;display_errors&lt;/code&gt;为&lt;code&gt;off&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;隐藏PHP&#34;&gt;&lt;a href=&#34;#隐藏PHP&#34; class=&#34;headerlink&#34; title=&#34;隐藏PHP&#34;&gt;&lt;/a&gt;隐藏PHP&lt;/h3&gt;&lt;p&gt;一些简单的方法可以帮助隐藏 PHP，这样做可以提高攻击者发现系统弱点的难度。在&lt;code&gt;php.ini&lt;/code&gt;文件里设置&lt;code&gt;expose_php = off&lt;/code&gt;，可以减少他们能获得的有用信息。&lt;/p&gt;
&lt;p&gt;另一个策略就是让web服务器用PHP解析不同扩展名。无论是通过&lt;code&gt;.htaccess&lt;/code&gt;文件还是Apache的配置文件，都可以设置能误导攻击者的文件扩展名。&lt;/p&gt;
&lt;p&gt;更多机智的隐藏方法见官网&lt;a href=&#34;https://www.php.net/manual/zh/security.hiding.php&#34;&gt;隐藏PHP&lt;/a&gt;一节。&lt;/p&gt;
&lt;h2 id=&#34;内核-1&#34;&gt;&lt;a href=&#34;#内核-1&#34; class=&#34;headerlink&#34; title=&#34;内核&#34;&gt;&lt;/a&gt;内核&lt;/h2&gt;&lt;p&gt;考虑到重点所在，这部分内容仅简单地介绍一些涉及到PHP内部原理的东西。由于PHP运行在C语言的基础上，以下的内容和C语言编程靠近。&lt;/p&gt;
&lt;h3 id=&#34;内存管理&#34;&gt;&lt;a href=&#34;#内存管理&#34; class=&#34;headerlink&#34; title=&#34;内存管理&#34;&gt;&lt;/a&gt;内存管理&lt;/h3&gt;&lt;p&gt;用C语言编程时，开发者要手工地进行内存管理。因为PHP经常用作Web服务器的模块，内存管理与预防内存泄漏紧密关联。此外，Zend引擎要面对一个十分特殊的使用模式：在一段比较短的时间内，许多zval结构大小的内存块和其他的小内存块被请求又再被释放。为了满足以上的需求，Zend引擎提供为了处理请求相关数据提供了一种特殊的内存管理器。请求相关数据是指只需要服务于单个请求，最迟会在请求结束时释放的数据。&lt;em&gt;API介绍从略&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;因为安全原因，在请求结束时，Zend引擎会释放所有由上面提到的API所分配的内存。&lt;/p&gt;
&lt;h3 id=&#34;变量使用&#34;&gt;&lt;a href=&#34;#变量使用&#34; class=&#34;headerlink&#34; title=&#34;变量使用&#34;&gt;&lt;/a&gt;变量使用&lt;/h3&gt;&lt;p&gt;PHP变量，通常来说，由两部分组成：标签（例如，可能是符号表中的一个条目）和实际变量容器。变量容器，在代码中称为zval，掌握了所需处理变量的所有数据。 包括实际值、当前类型、统计指向此容器的标签的数量，和指示这些标签是引用还是副本的标志。在PHP 5.3中，结构如下：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; _&lt;span class=&#34;title&#34;&gt;zval_struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;zval&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;union&lt;/span&gt; _&lt;span class=&#34;title&#34;&gt;zvalue_value&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; lval;                 &lt;span class=&#34;comment&#34;&gt;/* long value */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;double&lt;/span&gt; dval;               &lt;span class=&#34;comment&#34;&gt;/* double value */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;                   &lt;span class=&#34;comment&#34;&gt;/* string type */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *val;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; len;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; str;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    HashTable *ht;             &lt;span class=&#34;comment&#34;&gt;/* hash table value */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    zend_object_value obj;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; zvalue_value;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; _&lt;span class=&#34;title&#34;&gt;zval_struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/* Variable information */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    zvalue_value value;        &lt;span class=&#34;comment&#34;&gt;/* value */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    zend_uint refcount__gc;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    zend_uchar type;           &lt;span class=&#34;comment&#34;&gt;/* active type */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    zend_uchar is_ref__gc;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;有关函数，类和对象，流等的介绍从略。&lt;/p&gt;
&lt;h2 id=&#34;FAQ&#34;&gt;&lt;a href=&#34;#FAQ&#34; class=&#34;headerlink&#34; title=&#34;FAQ&#34;&gt;&lt;/a&gt;FAQ&lt;/h2&gt;&lt;p&gt;Q: PHP 版本之间有什么联系？&lt;br&gt;A: PHP&amp;#x2F;FI 2.0是最早的PHP版本，已经不再支持。PHP 3是PHP&amp;#x2F;FI 2.0的后继者，要好很多。PHP 5是目前一代的PHP，内部使用了Zend 2引擎，除了很多新功能之外还提供了许多附加的面向对象编程（OOP）特性。&lt;br&gt;&lt;br&gt;&lt;br&gt;Q: 可以同时运行几个不同版本的PHP吗？&lt;br&gt;A: 可以，请参阅见PHP源程序发行包中的 INSTALL文件。&lt;br&gt;&lt;br&gt;&lt;br&gt;Q: 应该上哪儿去找我的&lt;code&gt;php.ini&lt;/code&gt;文件&lt;br&gt;A: UNIX中默认在&lt;code&gt;/usr/local/lib&lt;/code&gt;目录中，也就是&lt;code&gt;&amp;lt;install-path&amp;gt;/lib&lt;/code&gt;。可以在编译时通过 &lt;code&gt;--with-config-file-path&lt;/code&gt;标记来改变路径。Windows中&lt;code&gt;php.ini&lt;/code&gt;文件的默认路径在Windows目录下。如果使用的是Apache服务器，则会首先在Apache的安装目录中寻找&lt;code&gt;php.ini&lt;/code&gt;。&lt;br&gt;&lt;br&gt;&lt;br&gt;Q: PHP是否仅限于处理GET和POST请求方法？&lt;br&gt;A: 不是，PHP有可能处理任何请求方法，例如&lt;code&gt;CONNECT&lt;/code&gt;。适当的回应状态可以用&lt;code&gt;header()&lt;/code&gt;发送。&lt;br&gt;&lt;br&gt;&lt;br&gt;Q: 我忘了PHP函数的参数顺序，它们是随机的吗？&lt;br&gt;A: 通常情况下，数组函数的参数里，needle在前，haystack在后；字符串函数中，haystack在前，needle在后。&lt;br&gt;&lt;br&gt;&lt;br&gt;Q: PHP选项&lt;code&gt;register_globals&lt;/code&gt;对我有什么影响？&lt;br&gt;A: 强烈不建议开启此选项，&lt;code&gt;register_globals&lt;/code&gt;会自动生成变量。&lt;br&gt;&lt;br&gt;&lt;br&gt;Q: 我需要直接访问请求报头中的信息，怎么能办到？&lt;br&gt;A: 如果以Apache的模块方式运行PHP，那么函数&lt;code&gt;getallheaders()&lt;/code&gt;可以做这件事。&lt;br&gt;&lt;br&gt;&lt;br&gt;Q: 如果不建议使用常用散列函数保护密码， 那么我应该如何对密码进行散列处理？&lt;br&gt;A: 当进行密码散列处理的时候，有两个必须考虑的因素： 计算量以及“盐”。 散列算法的计算量越大，暴力破解所需的时间就越长。PHP 5.5提供了一个原生密码散列API， 它提供一种安全的方式来完成密码散列和验证。 PHP 5.3.7及后续版本中都提供了一个纯PHP的兼容库。PHP 5.3及后续版本中，还可以使用&lt;code&gt;crypt()&lt;/code&gt;函数，它支持多种散列算法。针对每种受支持的散列算法，PHP都提供了对应的原生实现。&lt;br&gt;&lt;br&gt;&lt;br&gt;Q: “盐”是什么？&lt;br&gt;A: 加解密领域中的“盐”是指在进行散列处理的过程中 加入的一些数据，用来避免从已计算的散列值表（被称作“彩虹表”中对比输出数据从而获取明文密码的风险。&lt;br&gt;&lt;br&gt;&lt;br&gt;Q: 我在使用&lt;code&gt;&amp;lt;input type=&amp;quot;image&amp;quot;&amp;gt;&lt;/code&gt;标记，但是没有&lt;code&gt;$foo.x&lt;/code&gt;和&lt;code&gt;$foo.y&lt;/code&gt;变量，它们哪去了？&lt;br&gt;A: 当提交表单时，可以用图片代替标准的提交按钮，用类似这样的标记&lt;br&gt;&lt;code&gt;&amp;lt;input type=&amp;quot;image&amp;quot; src=&amp;quot;image.gif&amp;quot; name=&amp;quot;foo&amp;quot; /&amp;gt;&lt;/code&gt;&lt;br&gt;当用户点击了图片的任何部分，该表单会被发送到服务器并加上两个额外的变量：&lt;code&gt;foo.x&lt;/code&gt;和&lt;code&gt;foo.y&lt;/code&gt;。因为&lt;code&gt;foo.x&lt;/code&gt;和 &lt;code&gt;foo.y&lt;/code&gt;在PHP中会成为非法的变量名，它们被自动转换成了&lt;code&gt;foo_x&lt;/code&gt;和&lt;code&gt;foo_y&lt;/code&gt;。也就是用下划线代替了点。&lt;br&gt;&lt;br&gt;&lt;br&gt;Q: PHP 5中还能用MySQL吗？好像找不到了。&lt;br&gt;A: MySQL依然被支持，唯一区别是PHP 5中默认为不激活。这意味着在PHP的configure一行中不包含有&lt;code&gt;--with-mysql&lt;/code&gt;选项，因此必须在编译时手工加入。Windows用户可以编辑&lt;code&gt;php.ini&lt;/code&gt;并激活&lt;code&gt;php_mysql.dll&lt;/code&gt;。&lt;br&gt;&lt;br&gt;&lt;br&gt;Q: 在函数定义中，参数旁边的&lt;code&gt;&amp;amp;&lt;/code&gt;是什么意思？&lt;br&gt;A: 这表示该参数是引用传递，该函数会修改其值。鼓励使用的方法是在函数定义中指定哪些参数应该用引用传递。在函数调用时通过引用传递参数是不推荐的，因为它影响到了代码的整洁。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;&lt;a href=&#34;#参考&#34; class=&#34;headerlink&#34; title=&#34;参考&#34;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://php.net/manual/zh/book.password.php&#34;&gt;php.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://laravel-china.github.io/php-the-right-way/&#34;&gt;PHP之道中文版&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="PHP" />
        <category term="参考" />
        <updated>2019-09-10T13:02:17.000Z</updated>
    </entry>
</feed>
