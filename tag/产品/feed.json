{
    "version": "https://jsonfeed.org/version/1",
    "title": "Shenlvmeng's Blog • All posts by \"产品\" tag",
    "description": "Be sharp, my friend.",
    "home_page_url": "http://shenlvmeng.github.com/blog",
    "items": [
        {
            "id": "http://shenlvmeng.github.com/blog/2015/02/02/some-thinking-5/",
            "url": "http://shenlvmeng.github.com/blog/2015/02/02/some-thinking-5/",
            "title": "重构与复提产品有感",
            "date_published": "2015-02-02T15:39:56.000Z",
            "content_html": "<p>2月2日，二月份第一个工作日。老大道佳和同事阳仔来了，技术组的三人总算全部到齐。再加上辰光大师兄，讨论时总算有了许多技术成分加入。此时，对产品未来开发的开发变得有了冲击和富有信息量起来。期间，道佳和阳仔（其实阳仔能力很强）提到了代码重构的概念。自己之前也有所感悟，这次找到共鸣有些高兴。</p>\n<h2 id=\"关于重构\"><a href=\"#关于重构\" class=\"headerlink\" title=\"关于重构\"></a>关于重构</h2><p>有前几篇日记的缺点做借鉴，这里分点列出我的想法，力避废话和漫无头绪。</p>\n<h4 id=\"重构是经常出现的\"><a href=\"#重构是经常出现的\" class=\"headerlink\" title=\"重构是经常出现的\"></a>重构是经常出现的</h4><p>起因是，身为技术的我们接手的是外包团队的一期作品，随着更高产品需求的提出，代码自然做了一番又一番的增删改查，渐渐地，我们愈发察觉到推倒重来似乎比继续修改来得更长远和轻松。今天对员工权限模糊问题的讨论是压倒骆驼的最后一根稻草。在讨论时，道佳提到重构是程序员避不开的环节，所谓两月一重构。我认为很有道理，诚如辰光在之前所说，产品的商业模式是会随市场反响改变的。这样，阳仔的事例就很好解释了——他在之前的创业团队当过技术，写代码时，他说到“我写的代码只能用2个月，这两个月后恐怕需要你们找跟你们一起做下去的技术重新写一遍。”</p>\n<h4 id=\"重构来自新需求或新思想\"><a href=\"#重构来自新需求或新思想\" class=\"headerlink\" title=\"重构来自新需求或新思想\"></a>重构来自新需求或新思想</h4><p>产品在推出后，导向不可避免受到外界的影响。补丁打多了，衣服自然变得不适合穿。老版的代码经常跟不上方向的迅速变化，重构是最理想也是最有效的解决办法，治标且治本。另外，这里新思想是指对数据结构或身份权限等基本模型有了更深的认识抑或外界因素迫使基本模型做出适应（如用户量的庞大将考验数据表的设计），这次我们将要作出的重构一部分就是因为这个原因。</p>\n<h4 id=\"重构是产品与技术的平衡点\"><a href=\"#重构是产品与技术的平衡点\" class=\"headerlink\" title=\"重构是产品与技术的平衡点\"></a>重构是产品与技术的平衡点</h4><p>产品设计和技术开发的思路刚好是两个不同方向。产品设计讲究MVP（Minimum Viable Product ），意为产品的最初设计一定要抓住核心，把产品的主要价值展现出来即可。拿给用户反馈后，再看情况做后续设计。因为，这样在成本上最节省，且成功概率最大。“迭代”一词在这里是最佳的形容，推出&#x3D;&gt;反馈&#x3D;&gt;复推出，如此周而复始，雪球越滚越大。归功于互联网的快速，可以“小步快跑”的传统行业互联网化将有很美好的场景（可惜的是，汽车等传统行业做不到），在短期内滚成很大规模。因此，初期产品追求短小而精悍，很忌讳全面。</p>\n<p>理想化的技术恰相反，毕竟只有对产品有了全面细致的思考，才能使保证产品在技术上的长时间可靠性。如，模型设计，数据表设计。这些正像大厦的地基，地基牢固，楼才搭得高。可是，绝大多数情况，产品等不了那么久，没有全面思考调研的时间，只能像上文提到那样，先做出突出主体的一部分。这样技术就不得不在新需求的压力下，对地基进行小范围修改，以保证产品的可靠性。可以想见，这样搭上去的楼注定不会牢固。</p>\n<p>重构恰好是两者中的平衡点。重构给了技术喘口气的时间，也能满足产品方面的新需求。正是由于它的普遍存在性。很多公司其实是一边打补丁，一边给自己铺后路设计新技术架构的。</p>\n<h2 id=\"MVP与产品成功三内因\"><a href=\"#MVP与产品成功三内因\" class=\"headerlink\" title=\"MVP与产品成功三内因\"></a>MVP与产品成功三内因</h2><p>上文中也提到了，产品的设计是有讲究的。在初期设计时，一定要把握住MVP的思路，只呈现核心价值，用最小可验证产品证明它的可行性。微信就是个很典型的例子，1.0只推出了聊天功能，之后的摇一摇，朋友圈，支付等都是一点一点加上去的。充分的缓冲时间和较快的互联网产品周期，让它能稳步上升。它的内因是，未来无法预知，最小代价实验，随机应变是最放心的。好的产品经理不用识别未来，只要能识别好产品现在的走向就不错了。反过来看初期，若有的产品设计的面面俱到或是团队承诺已考虑到未来，多半走不远。</p>\n<p>产品在设计上有成功的三内因。一，满足刚需；二，用户黏性；三，用户体验。这里以师兄提到的找朋友出去玩的app来讨论。</p>\n<h4 id=\"满足刚需\"><a href=\"#满足刚需\" class=\"headerlink\" title=\"满足刚需\"></a>满足刚需</h4><p>刚需是什么？就是在某种场景下，满足某一部分人的必需。以例子为例，它满足了在找不到熟人却想进行体育活动等时的需求。刚需最好别无取代，当有所取代时，可以尝试缩小用户群，提高针对性。</p>\n<h4 id=\"用户黏性\"><a href=\"#用户黏性\" class=\"headerlink\" title=\"用户黏性\"></a>用户黏性</h4><p>满足了刚需，就会有人用。但这还不够，足够的用户黏性才能保证产品活下去。黏性的最好衡量因素就是使用频次。以例子为例，休闲活动对于大多数人来说一周一到两次，这样的频次实在不算高。</p>\n<h4 id=\"用户体验\"><a href=\"#用户体验\" class=\"headerlink\" title=\"用户体验\"></a>用户体验</h4><p>用户体验即产品价值。价值&#x3D;值 - 价，只有用户使用产品时的显性+隐性花费小于得到的体验，才会被留下来。即产品大于用户的预期。它是用户黏性的保证。</p>\n<p>写了这么多篇日记，似乎以产品为多了。道佳、阳仔过来后，但愿在技术上也能得到真知灼见。</p>\n",
            "tags": [
                "重构",
                "产品",
                "技术"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2015/01/20/some-thinking-3/",
            "url": "http://shenlvmeng.github.com/blog/2015/01/20/some-thinking-3/",
            "title": "与师兄之泛谈 2",
            "date_published": "2015-01-19T16:50:48.000Z",
            "content_html": "<p>今晚与师兄两人回校，聊起互联网分工时，师兄不免又多说了许多。说着说着，话题又过渡到人生道路上。因觉得颇有共鸣，这里依旧流水账般，记在下面。</p>\n<h2 id=\"关于互联网分工\"><a href=\"#关于互联网分工\" class=\"headerlink\" title=\"关于互联网分工\"></a>关于互联网分工</h2><h4 id=\"产品\"><a href=\"#产品\" class=\"headerlink\" title=\"产品\"></a>产品</h4><p>个人认为，互联网分工的必要组成部分是产品，产品分PM和PD两种，PM和PD上有产品总监。PD即Product Designer，产品经理。负责具象化用户需求，交给技术去实现。话说起来简单，但实际上，具象化需求不是那么好做的，产品总监提出大体构想后，PM多半会召集身边各部门开会，并去整理会议上各方杂乱的美好设想。首先，总监的构想有时会很模糊，甚至会有方向上的错误；其次，会议上各方的建议并不能覆盖所有细节，尤其是枯燥的细节。毕竟产品做不好是PD背锅。接下来，整合好的具体需求是不能直接拿给技术看的，否则<del>很容易被砍死。</del>PD需要融合、简化需求，减轻技术团队的压力。产品，做出来才是真的。接下来，把任务交给PM。除此以外，PD需要尽量为自己所带领的技术团队争取资源，作为挡箭牌处理和营销以及运维的关系甚至办公室政治，这也是让产品成功的重要一点。综上，PD是个多方受压的角色，一旦失误很容易背锅，同时它也是产品流程的重要一环，把控好产品方向，安抚好烦躁的程序员，着实压力巨大。所以，有句古话说得好，PD常有，好的PD不常有。</p>\n<p>PM即Project Manager，项目经理。和PD在互联网产品开发中是多对一（多PD）或一对一的关系。PM需要将需求进一步细化到技术上，拆分成各个部分，交给手下的技术团队完成。同时，PM负责把握工程的时间进度。时间过了deadline是没法交差的。PM不一定得很懂技术，但一定得能让技术团队信服（虽然大多数的PM都很懂技术）。否则，手下心不齐，三天两头添乱，PM是很不好受的。毕竟产品开发不完，是它背锅。相比PD，PM距离技术更近，也会经常参与技术团队的开发。</p>\n<h4 id=\"营销\"><a href=\"#营销\" class=\"headerlink\" title=\"营销\"></a>营销</h4><p>产品从设计到原型结束后，交给营销团队推广拉客。营销部门只负责拉客，并不负责接客。因为它的kpi是按照入驻用户数来计算的。营销又称销售，它做的工作和安利很像，负责为产品招揽足够数量的客户。为了保证每月或每天kpi的硬性要求，营销会将产品好的一面，甚至没有的一面展示出来。这里遇到了两个矛盾：第一，为了产品能卖得更好，营销部门会向PD施压，改变产品需求，使得更种各样的用户都能入驻。万一这时PD不够“硬”，技术团队就要<del>砍人</del>了。第二，营销的kpi不包括客户流失率，毕竟不是它负责接客，不负责任的拉客和承诺很容易招揽垃圾用户和愤怒的用户，这就要考验运营部门的智慧了，它要努力把人留下来，并用甜美的笑容迎接客户的怒骂。可见，运营部门也是个很考验心理素质的地方。</p>\n<h4 id=\"运营与技术\"><a href=\"#运营与技术\" class=\"headerlink\" title=\"运营与技术\"></a>运营与技术</h4><p>营销说完了，下面是运营。运营的KPI包括客户流失率。上面说过，用户反馈的所以负面意见90%都由运营部门的客服来扛着。产品当然不会做出的第一版就很完美，因为用户是不会接触到产品原型开发的。运营吃的营销的亏，会扔给产品和技术。埋怨产品是怎么设计的，并向PD施压，要求改变产品需求（这话听得怎么那么耳熟），因为用户反馈blablabla。这时，重复修改是无法避免的，PD再调整，PM下的程序员免不了做重复工作。如果调整得不好，<del>技术砍死产品经理就会发生</del>。</p>\n<p>技术分两种。第一种是学术型技术，多半不会和产品、营销、运维三个部门一起提，即真正的技术。它是埋头做的，不一定短时间内就会生效的。大公司里会分成专门的部门。第二种是工程型技术，和产品在一起提到，很多互联网公司会有“技术池”这个概念，即程序员们的工作并不固定，自己自由选择或分从分配到某个产品线，和某个PD合作。</p>\n<p>综上，我们看到，产品、运营、销售是三个相互坑与被坑的角色，矛盾统一的是它们的目标一致——这个产品的前景。换句话说，它们是一条绳上的蚂蚱，相互间痛并快乐着。高工资不是白拿的，它们的压力透过文字就可以辨别出。</p>\n<h2 id=\"关于悲惨的程序员\"><a href=\"#关于悲惨的程序员\" class=\"headerlink\" title=\"关于悲惨的程序员\"></a>关于悲惨的程序员</h2><p>程序员的悲惨，其实是不需要这段文字就能看出来的。对需求的重复修改是程序员即普通技术的噩梦。技术（以下均指普通技术）的KPI是按照需求数量来计算的。PM把需求分解，按照难度打分后，交给技术完成，很像完成成就。如果PD或PM的功底不够，产品细化的不够狠，技术的KPI就会比较难看。这还不算悲惨。如果PD不够“硬”，产品原型还没出来，就被销售改了几个需求，技术的开发工作就会重复进行，而新的实现方法是不计入KPI的。不计入KPI倒可以忍，改得晚，deadline就在眼前才是最要命的。实际上，程序员加班并不是工作量大，而是重复工作太多了。而PD里有许多应届，出色的PD少，这也就成了业界程序员的常态。</p>\n<p>产品推出后，运营也加入了挤压产品、技术的队伍，技术又会针对客户的反馈进行修改。大家也猜到了，这个修改也是不计入KPI的。如此多的工作，却对KPI毫无贡献，悲惨的程序员该怎么想呢？呆不下去就走呗！这也是互联网离职率高的重要原因。</p>\n<p>以上讲了技术跟错了产品和产品经理的悲剧。好的产品新修改多，重复修改少，KPI高，年终奖拿到手软，不好的产品线注定会多处很多重复修改，却，见不到用户量的大提升。如果我们隐忍的程序员还没有放弃，产品线终于崩溃了。这时，技术面临两种命运，一，等着被随机分配到另一个产品线上，用鸟枪法找一个靠谱的产品和产品经理；二，原来工作努力上进，口碑好，被好的产品线挑走，从此人生改变。可见，对于技术来讲，找一个信得过的产品是多么重要；幸运的是，对于产品经理来说，找一个信得过的技术也是很重要的（产品实现不了是它背锅）。说到底，这里做事还是看人。</p>\n<h2 id=\"关于技术的前途\"><a href=\"#关于技术的前途\" class=\"headerlink\" title=\"关于技术的前途\"></a>关于技术的前途</h2><p>工科学校出身，有技术功底，出去最有可能就是技术了。那该选择什么道路，能避免上面的悲惨命运呢？上面也提到了，说大了，技术无非两种，研发型和工程型。前者强调在深度，后者强调在广度。因此，对于前者，在知识上的精深，对高深技术的掌握很重要，Google、微软中国这样的公司将是理想的归宿，尤其是对于技术痴迷者。若出世没那么厉害，互联网等公司的研发岗也是不错的选择。这一切的前提是，得好好学习。</p>\n<p>工程岗，又称技术民工。在知识上的灵活，对多领域的技术掌握、有工程技术实践经验很重要。因为，技术毕竟不能干一辈子。长期来看，管理岗位是理想选择；短期来看，PM是最好的跳板，如果因为产品线大限已到，或是因为其他原因调岗后，能因为之前的经验升任PM。那恭喜，你终于能翻身农奴把歌唱，由被坑的角色，转成坑人的角色了。不过，这个几率在你跟对产品线才会比较大。</p>\n<p>看来，说到底，还是得跟对人。</p>\n",
            "tags": [
                "产品",
                "互联网",
                "技术"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2015/01/14/some-thinking-1/",
            "url": "http://shenlvmeng.github.com/blog/2015/01/14/some-thinking-1/",
            "title": "与师兄之泛谈",
            "date_published": "2015-01-13T16:21:27.000Z",
            "content_html": "<p>近日，和做产品经理的师兄一同返校。聊了许多，顿觉收获颇大，在此以故事的形式一并记之，想到哪儿写到哪儿，以励后进。</p>\n<p>师兄本科写了四年的代码，保研去了经管院，实习先后去过咨询公司，外企，互联网三巨头BAT，也算是对产品和商业模式有了些自己的认识与理解。最后借现在这家创业公司的环境，实践以前之所学。</p>\n<h3 id=\"关于创业\"><a href=\"#关于创业\" class=\"headerlink\" title=\"关于创业\"></a>关于创业</h3><p>创业分五个阶段，第一个阶段，产品由无到有，几个核心成员借由最初的idea，用技术完成一个雏形。这个阶段用技术去证实这个产品是可行的，因此技术占了这个阶段绝大多数工作。产品雏形是它的终点；第二阶段，产品雏形出现以后，团队开始扩张，初创成员开始出现分歧，技术以外的部门诸如融资、营销等会加入团队，这是个不稳定期，需要有“领导”角色的产生和团队内的磨合。一个较为成熟的商业模式在这个阶段形成（注：商业模式的规划是一开始就要做的）。一般，A轮融资发生在这之间，股权的划分也是对团队的考验。成熟的商业产品和商业模型是它的终点；第三阶段，有了融资和统一的产品规划后，将这个商业模式做大，通过烧钱推广产品。这个阶段里，我们会用数据去衡量产品的发展前景，运维、行政等部门又会加入。当用户数出现质的提升时，证明商业模式在社会上可行。这也标志着第三阶段的结束。在这之后，公司一般会迎来B轮融资，以千万起。而大多数公司都倒在第二、三阶段。</p>\n<p>第四阶段，商业模式被证明可行后，在各个维度上推广复制，开辟到不同城市、不同周边领域。利用融资继续扩大规模，一般到此，创业者会获得真正的财政自由；第五阶段，公司继续扩张，迎接IPO。在这两个阶段间遇到的困难会大大小于前三个阶段。</p>\n<p>综上来看，难倒大多数创业者的门槛反而成了团队内的团结统一。的确，扪心自问真正信得过的合作伙伴太少了，剩下的就好好珍惜吧。现在，我就在一家创业公司的第二阶段，面临着产品从雏形到成熟过程，尽管技术团队人很少，暂时也没有一套成熟的工作模式。不过这种创业的氛围恐怕也能让我学到不少。包括和PM的沟通，技术和需求间的取舍等。如果这条路能跟着走下去的话，学到的将是BAT教不了我的。</p>\n<h3 id=\"关于开源软件与商业模式\"><a href=\"#关于开源软件与商业模式\" class=\"headerlink\" title=\"关于开源软件与商业模式\"></a>关于开源软件与商业模式</h3><p>正巧这阵在做一个开源小工具，和同寝的技术一起合作开发。就顺便问起了小团队开源开发需要注意的地方。师兄提到，开源软件并非只有免费公益这么简单，从商业模式角度去考虑，这是推广市场或积累口碑的最好选择。以Symbian和Android为例，后起的Android为何为打败Symbian，开源占了很大一部分原因。可是开源的同时，Google难道就没有收益么？正是因为Google核心的商业模式在其搜索引擎上，Android是自带Google搜索的，这才是它关心的；而且Android的知识产权是Google的，这将给Google隐形的收益。以CSDN为例，里面有许多写技术博客的开发者，在开源自己产品的同时，获得了转发，评论等社会影响力，这笔关注在求职或是发表言论将会发挥到它的作用。</p>\n<p>所以，有时问题换个层面去思考，会得到很有意思的结果。在开发开源产品的时候，从商业模式上去考量，会得到以前从不会想到的一些问题。合理的商业模式将使产品被用户所接受，甚至会给自己带来收益。</p>\n<h3 id=\"关于眼界与技术\"><a href=\"#关于眼界与技术\" class=\"headerlink\" title=\"关于眼界与技术\"></a>关于眼界与技术</h3><p>自然科学，社会科学，人文科学这对于一个大学生来说都是需要的。不同的方面的了解将会使你对问题有不同的认知方式。这也正是综合性大学在学生培养上的天生优势。北邮是所很靠谱的理工科大学，所以培养出的学生严谨有余，而灵活、情怀不足。社科赋予人对社会和人际的了解，人文赋予人对艺术和设计上的了解。在创业型公司里，工作中出现的问题种类会比大公司多，多方面的掌握有时会给我们很大的启示。</p>\n<p>在说到创业时，师兄突然感慨似乎我们都陷入了完全做好准备再出发的怪圈，许多半路出家边走边学的人却提前取得了成功。难道是研究生严谨学术的氛围使得毕业生们都不肯轻易出手么？研究生的两年半里，不要把眼光限得太死，不要抱着技术不放手，要勇敢接受新事物，展示自己的学习能力，接触更多方面的人，这可能是现阶段对我最好的启示。</p>\n<p>而那个开源小项目，可能也得重新思考了。</p>\n",
            "tags": [
                "创业",
                "商业模式",
                "产品"
            ]
        }
    ]
}