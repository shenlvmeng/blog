{
    "version": "https://jsonfeed.org/version/1",
    "title": "Shenlvmeng's Blog • All posts by \"redux\" tag",
    "description": "Be sharp, my friend.",
    "home_page_url": "http://shenlvmeng.github.com/blog",
    "items": [
        {
            "id": "http://shenlvmeng.github.com/blog/2017/08/08/redux-and-mobx/",
            "url": "http://shenlvmeng.github.com/blog/2017/08/08/redux-and-mobx/",
            "title": "Redux和Mobx：AK47和匕首",
            "date_published": "2017-08-08T12:43:13.000Z",
            "content_html": "<p>此前一直未从0开始写过Redux的工程，近日想简单对比下<a href=\"http://redux.js.org/docs\">Redux</a>和<a href=\"https://github.com/mobxjs/mobx\">Mobx</a>的各自特点，于是动手撸了TodoList，感受了它们的不同。对比上看</p>\n<ul>\n<li>Redux可靠规整，有一整套最佳实践，写大型应用时能避免很多坑</li>\n<li>MobX轻便锋利，概念不多上手容易，在中小型应用中开发效率更高</li>\n</ul>\n<h3 id=\"Redux\"><a href=\"#Redux\" class=\"headerlink\" title=\"Redux\"></a>Redux</h3><p>Redux吸收了Flux和Elm的设计特点，正如它在<a href=\"http://redux.js.org/docs/introduction/ThreePrinciples.html\">Three Principles</a>中写到的那样，<strong>唯一可信数据源，状态数据只读，状态改变为纯函数</strong>，这三大特点最大可能提升了可预测性，减少了调试的难度。同时，在概念上也易于理解。不过，复杂的设定和较多的代码入侵使得个人项目使用时稍显笨重，团队项目使用在改动已有代码时又会有牵一发动全身的感觉。</p>\n<p>在数据流上，Redux规定<strong>action</strong>描述state的改变情况，<strong>reducer</strong>根据<code>action</code>定义state如何更新。</p>\n<ul>\n<li><strong>action</strong>，由type和payload部分组成，描述发生了什么变化，如<code>&#123; type: &#39;ADD_TODO&#39;, text: &#39;Eat pie.&#39; &#125;</code></li>\n<li><strong>reducer</strong>，接受state和action作为入参，返回一个<strong>全新的state</strong>，正如文档里所说<strong>Redux assumes you never mutate your data</strong></li>\n</ul>\n<p>在这种设计理念下，我们借助redux创建state，之后所有的状态更新，都通过state.dispatch提交action完成，再借由connect等工具同步更新组件的props实现数据绑定的效果。除了设计理念外，Redux一些工程实践上的设计也值得一提</p>\n<h4 id=\"和React的互动\"><a href=\"#和React的互动\" class=\"headerlink\" title=\"和React的互动\"></a>和React的互动</h4><p>Redux并不是和React绑定了，但确实经常和React同时出现。react-redux是用来和react绑定的库。在结合了Redux后，React会有一些最佳工程实践</p>\n<ul>\n<li><strong>区分开绘制组件和容器组件</strong>，前者只负责将数据转化为标签，后者负责接入数据，完成逻辑，组织绘制组件，并向其传递用户交互触发dispatch的函数。这样的层级设计将会增加解耦，减少后期修改时的工作量</li>\n<li>在最外侧调用<code>createStore</code>生成store并传入<code>&lt;Provider&gt;</code>组件，内部的容器组件，通过<code>connect</code>，<code>mapStateToProps</code>，<code>mapDispatchToProps</code>就能便利地和store进行沟通，就像下面这样</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">mapStateToProps</span> = (<span class=\"params\">state, ownProps</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">active</span>: state.<span class=\"property\">filter</span> === ownProps.<span class=\"property\">filter</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">mapDispatchToProps</span> = (<span class=\"params\">dispatch, ownProps</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">handleClick</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">dispatch</span>(<span class=\"title function_\">setFilter</span>(ownProps.<span class=\"property\">filter</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">FilterLink</span> = <span class=\"title function_\">connect</span>(</span><br><span class=\"line\">  mapStateToProps,</span><br><span class=\"line\">  mapDispatchToProps</span><br><span class=\"line\">)(<span class=\"title class_\">Link</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Action-Creator\"><a href=\"#Action-Creator\" class=\"headerlink\" title=\"Action Creator\"></a>Action Creator</h4><p>使用函数创建标准化的action，而不要把action直接写在dispatch内。就像下面这样</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">addTodo</span>(<span class=\"params\">text</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"variable constant_\">ADD_TODO</span>,</span><br><span class=\"line\">    text</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">dispatch</span>(<span class=\"title function_\">addTodo</span>(text))</span><br></pre></td></tr></table></figure>\n\n<p>这么做在action发生更改时，只需要修改定义函数的位置即可，简单方便。可以发现上面的action creator中，完成的工作只是简单的组装type和函数的入参在同一个action object里。当这样的函数很多时，还可以用action creator creator来帮我们一行生成这些类似的action creator。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">createActionCreator</span> = (<span class=\"params\">type, ...argNames</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> action = &#123; type &#125;</span><br><span class=\"line\">    argNames.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">arg, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      action[arg] = args[index]</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> action</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> addTodo = <span class=\"title function_\">createActionCreator</span>(<span class=\"variable constant_\">ADD_TODO</span>, <span class=\"string\">&#x27;text&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> setFilter = <span class=\"title function_\">createActionCreator</span>(<span class=\"variable constant_\">SET_FILTER</span>, <span class=\"string\">&#x27;filter&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> toggleTodo = <span class=\"title function_\">createActionCreator</span>(<span class=\"variable constant_\">TOGGLE_TODO</span>, <span class=\"string\">&#x27;id&#x27;</span>, <span class=\"string\">&#x27;to&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Split-Reducer\"><a href=\"#Split-Reducer\" class=\"headerlink\" title=\"Split Reducer\"></a>Split Reducer</h4><p>除了上面讲到的Action Creator外，split reducer页很常见，它的应用场景出现在当state比较复杂时，可以针对state的每个field单独写reducer，然后通过Redux的<code>combineReducers</code>组合起来。</p>\n<p>就像TodoList中，筛选条件<code>filter</code>和待办事项<code>todos</code>可以拆出两个reducer去更改。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">todos</span> = (<span class=\"params\">state = [], action</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.<span class=\"property\">type</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"attr\">ADD_TODO</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span>  [</span><br><span class=\"line\">        ...state,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"attr\">id</span>: action.<span class=\"property\">id</span>,</span><br><span class=\"line\">          <span class=\"attr\">text</span>: action.<span class=\"property\">text</span>,</span><br><span class=\"line\">          <span class=\"attr\">status</span>: <span class=\"number\">0</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"attr\">TOGGLE_TODO</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">todo</span> =&gt;</span></span><br><span class=\"line\">        (todo.<span class=\"property\">id</span> === action.<span class=\"property\">id</span>) ? &#123;...todo, <span class=\"attr\">status</span>: action.<span class=\"property\">to</span> || +!todo.<span class=\"property\">status</span>&#125; : todo</span><br><span class=\"line\">      )</span><br><span class=\"line\">    <span class=\"attr\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">filter</span> = (<span class=\"params\">state = <span class=\"string\">&#x27;SHOW_ALL&#x27;</span>, action</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.<span class=\"property\">type</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"attr\">SET_FILTER</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> action.<span class=\"property\">filter</span></span><br><span class=\"line\">    <span class=\"attr\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> todoApp = <span class=\"title function_\">combineReducers</span>(&#123;</span><br><span class=\"line\">  todos,</span><br><span class=\"line\">  filter</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Middleware和Async-Action\"><a href=\"#Middleware和Async-Action\" class=\"headerlink\" title=\"Middleware和Async Action\"></a>Middleware和Async Action</h4><p>首先，我们要明确一点，Redux中只有dispatch能改变store，然而默认情况下，dispatch只接受action。因此，当我们想异步修改store时，异步的逻辑只能写在组件里（Vuex里则可以通过action异步提交commit）。设想一下，假如一个<code>fetch</code>API的逻辑在多处都用到时，只能在这些地方重复书写这些代码。好在，Redux提供了middleware的概念，和<a href=\"https://shenlvmeng.github.io/blog/2017/04/23/express-js/#%E4%B8%AD%E9%97%B4%E4%BB%B6\">Express中的中间件</a>类似，不同的是Redux中中间件处理的是用户提交的dispatch请求而已。</p>\n<p><a href=\"http://redux.js.org/docs/advanced/Middleware.html\">文档</a>里对中间件的介绍非常到位，鉴于我们对express以及<a href=\"https://shenlvmeng.github.io/blog/2017/03/29/javascript-async-programming-2/\">co</a>中类似概念的了解，我们直接从第4步看起：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">logger</span>(<span class=\"params\">store</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> next = store.<span class=\"property\">dispatch</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Previously:</span></span><br><span class=\"line\">  <span class=\"comment\">// store.dispatch = function dispatchAndLog(action) &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">dispatchAndLog</span>(<span class=\"params\">action</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;dispatching&#x27;</span>, action)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"title function_\">next</span>(action)</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;next state&#x27;</span>, store.<span class=\"title function_\">getState</span>())</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">applyMiddlewareByMonkeypatching</span>(<span class=\"params\">store, middlewares</span>) &#123;</span><br><span class=\"line\">  middlewares = middlewares.<span class=\"title function_\">slice</span>()</span><br><span class=\"line\">  middlewares.<span class=\"title function_\">reverse</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Transform dispatch function with each middleware.</span></span><br><span class=\"line\">  middlewares.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">middleware</span> =&gt;</span></span><br><span class=\"line\">    store.<span class=\"property\">dispatch</span> = <span class=\"title function_\">middleware</span>(store)</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，原理其实是类似的，关键点在于使用store的<code>dispatch</code>方法依次暂存上一个节点，这么做的好处是保证最终能抛出最后真正的dispatch，且能实现链式的效果。然而，使用dispatch显得还不自然，于是就有了下面的版本，每次将next主动传入，当让applyMiddleware里需要额外传入next。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">logger</span> = store =&gt; <span class=\"function\"><span class=\"params\">next</span> =&gt;</span> <span class=\"function\"><span class=\"params\">action</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;dispatching&#x27;</span>, action)</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"title function_\">next</span>(action)</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;next state&#x27;</span>, store.<span class=\"title function_\">getState</span>())</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">crashReporter</span> = store =&gt; <span class=\"function\"><span class=\"params\">next</span> =&gt;</span> <span class=\"function\"><span class=\"params\">action</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">next</span>(action)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;Caught an exception!&#x27;</span>, err)</span><br><span class=\"line\">    <span class=\"title class_\">Raven</span>.<span class=\"title function_\">captureException</span>(err, &#123;</span><br><span class=\"line\">      <span class=\"attr\">extra</span>: &#123;</span><br><span class=\"line\">        action,</span><br><span class=\"line\">        <span class=\"attr\">state</span>: store.<span class=\"title function_\">getState</span>()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> err</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Warning: Naïve implementation!</span></span><br><span class=\"line\"><span class=\"comment\">// That&#x27;s *not* Redux API.</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">applyMiddleware</span>(<span class=\"params\">store, middlewares</span>) &#123;</span><br><span class=\"line\">  middlewares = middlewares.<span class=\"title function_\">slice</span>()</span><br><span class=\"line\">  middlewares.<span class=\"title function_\">reverse</span>()</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dispatch = store.<span class=\"property\">dispatch</span></span><br><span class=\"line\">  middlewares.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">middleware</span> =&gt;</span></span><br><span class=\"line\">    dispatch = <span class=\"title function_\">middleware</span>(store)(dispatch)</span><br><span class=\"line\">  )</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(&#123;&#125;, store, &#123; dispatch &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>借助中间件的帮助，我们可以在dispatch前完成我们想要的操作：打log，catch错误，甚至提前终止流程。而异步dispatch正是借助了thunk中间件的帮助。它的实现很简单。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">thunk</span> = store =&gt; <span class=\"function\"><span class=\"params\">next</span> =&gt;</span> <span class=\"function\"><span class=\"params\">action</span> =&gt;</span></span><br><span class=\"line\">  <span class=\"keyword\">typeof</span> action === <span class=\"string\">&#x27;function&#x27;</span></span><br><span class=\"line\">    ? <span class=\"title function_\">action</span>(store.<span class=\"property\">dispatch</span>, store.<span class=\"property\">getState</span>)</span><br><span class=\"line\">    : <span class=\"title function_\">next</span>(action)</span><br></pre></td></tr></table></figure>\n\n<p>在我们通过<code>applyMiddleware</code>注入到store中后，就可以在<code>dispatch</code>中写入函数了！就像下面这样</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fetchPosts</span>(<span class=\"params\">subreddit</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">dispatch</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">dispatch</span>(<span class=\"title function_\">requestPosts</span>(subreddit))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">fetch</span>(<span class=\"string\">`https://www.reddit.com/r/<span class=\"subst\">$&#123;subreddit&#125;</span>.json`</span>)</span><br><span class=\"line\">      .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> response.<span class=\"title function_\">json</span>())</span><br><span class=\"line\">      .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">json</span> =&gt;</span> <span class=\"title function_\">dispatch</span>(<span class=\"title function_\">receivePosts</span>(subreddit, json)))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fetchPostsIfNeeded</span>(<span class=\"params\">subreddit</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">dispatch, getState</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">shouldFetchPosts</span>(<span class=\"title function_\">getState</span>(), subreddit)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"title function_\">dispatch</span>(<span class=\"title function_\">fetchPosts</span>(subreddit))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在使用时正常dispatch即可。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">dispatch</span>(<span class=\"title function_\">fetchPostsIfNeeded</span>(selectedSubreddit))</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"其他常用的store-API\"><a href=\"#其他常用的store-API\" class=\"headerlink\" title=\"其他常用的store API\"></a>其他常用的store API</h4><ul>\n<li><code>getState()</code> 获取当前的state状态</li>\n<li><code>subscribe(listener)</code> 在每次更改state时触发</li>\n<li><code>createStore()</code> 根据输入的reducer，initState，middleware等生成store</li>\n</ul>\n<h4 id=\"脚手架\"><a href=\"#脚手架\" class=\"headerlink\" title=\"脚手架\"></a>脚手架</h4><p>官网在介绍时列举了许多依赖库，却并没有给出示例的脚手架。没有舒服的脚手架，效率和工作热情都会受影响。这里介绍一种使用<a href=\"https://github.com/facebookincubator/create-react-app\">create-react-app</a>快速搭建Redux脚手架的过程，下面的Mobx类似。</p>\n<p>项目依赖大概有下面这些</p>\n<ul>\n<li><a href=\"https://facebook.github.io/react/\">react</a></li>\n<li><a href=\"http://redux.js.org/\">redux</a></li>\n<li><a href=\"https://github.com/reactjs/react-redux\">react-redux</a></li>\n<li><a href=\"https://github.com/ReactTraining/react-router\">react-router</a>&#x2F;<a href=\"https://github.com/ReactTraining/history\">history</a></li>\n<li><a href=\"https://webpack.github.io/\">webpack</a> 打包工具</li>\n<li><a href=\"http://babeljs.io/\">babel</a> polyfill方案</li>\n<li><a href=\"http://eslint.org/\">eslint</a> JS代码风格标准化</li>\n<li><a href=\"https://stylelint.io/\">stylelint</a> CSS代码风格标准化</li>\n<li><a href=\"http://postcss.org/\">postcss</a></li>\n</ul>\n<p>但其实<a href=\"https://facebook.github.io/react/blog/2016/07/22/create-apps-with-no-configuration.html\">create-react-app</a>可以帮你搭好其中包括react、react-dom、eslint、babel、webpack、postcss等绝大多数依赖环境，且完成配置。剩下的react-redux和react-router手动安装即可。</p>\n<p>create-react-app类似于vue-cli，创建的默认配置不满意时，还可以<code>npm run eject</code>将默认配置撤销成用户配置，交给用户自己配置。</p>\n<h3 id=\"MobX\"><a href=\"#MobX\" class=\"headerlink\" title=\"MobX\"></a>MobX</h3><p>对比Redux，诞生于2015年3月的MobX在概念上吸收Vue，Knockout等MVVM框架要更多一些<a href=\"https://github.com/mobxjs/mobx#credits\">1</a>，号称是TFRP（Transparent Functional Reactive Programming）。Transparent在依赖项的更新是隐式完成的，Functional在Computed中的使用，Reactive就不说了。MobX原名Mobservable，而后改名为MobX，官方并未说明如何发音，姑且读作moʊ-bex。和Redux对比来看，巧合的是<a href=\"https://mobx.js.org/intro/overview.html\">MobX的设计理念</a>也可以分为三部分：</p>\n<ul>\n<li>将所有的状态抽出来，用observable修饰</li>\n<li>描述出状态到视图的映射关系，这个过程因框架而异，但是一般React多一些，使用observer修饰</li>\n<li>在要修改状态的位置使用action包裹（强烈建议你这么做）</li>\n</ul>\n<p>不过还有很核心的一点，文档里并没有提到</p>\n<ul>\n<li>把所有state修改的副作用放在<code>autorun/reaction/when</code>体内，在必要时在体内继续使用action</li>\n</ul>\n<p>哇，是不是简洁了很多。你对observable对象做的所有修改（不论有没有用action包裹）都会自动反映在视图中，在项目结构上，你完全可以根据自己需要组织。不过，没有Redux里transaction的概念，MobX中对状态的修改在时间上都是不可回溯的。同时，没有中间件的概念，意味着在状态比较复杂时，可维护性就会下降。</p>\n<p>整个MobX的关键API主要是由下面几部分组成的</p>\n<ul>\n<li>observable 创建被依赖项，在设计中即state</li>\n<li>computed 被依赖项的计算值，和Vue中的computed属性一致</li>\n<li>action 动作，用来修改state，显式的使用可以使逻辑更清楚，当然不在action里修改observable也是允许的</li>\n<li>observer和autorun&#x2F;reaction&#x2F;when，前者是derivation即根据state衍生出的结果，后者是reaction即state变化会触发的副作用（如IO等）</li>\n</ul>\n<h4 id=\"与React的结合\"><a href=\"#与React的结合\" class=\"headerlink\" title=\"与React的结合\"></a>与React的结合</h4><p>MobX和React相结合的方式就自由了很多。大体上使用<code>components</code>存储组件，<code>stores</code>描述状态。</p>\n<p>在<code>stores</code>描述状态时，</p>\n<ul>\n<li>通过<code>@observable</code>描述需要响应变化的状态变量，同时尽量将所有改变状态变量的操作封装成整个class的方法（并不强制），便于管理。</li>\n<li>通过<code>@computed</code>声明能够直接根据当前状态变量得到的衍生值。有意思的是，MobX只在observable变化时更新这个值，而不是在用户需要时去计算，从而节省了许多时间</li>\n<li>通过<code>autorun()</code>，<code>reaction()</code>，<code>when()</code>声明式地定义状态改变时的side effect，它们的执行结果都会返回一个dispose函数，在它们的生命周期结束后方便显式垃圾回收。它们三个都是除了用户操作外几乎唯一能进行副作用操作的地方，其中<ul>\n<li><code>autorun()</code>在定义时就会被执行一次</li>\n<li><code>reaction()</code>仅在变化时执行，且对函数内部改变状态不敏感</li>\n<li><code>when()</code>则是在变化时执行一次即失效</li>\n</ul>\n</li>\n<li>通过<code>@action</code>描述对状态做修改的行为，推荐使用，修饰在方法名前，开启strict模式后，则是强制要求使用</li>\n</ul>\n<p>上面这些关键字都有修饰词（如：<code>@action.bound</code>）还有对应的ES5语法。（如：<code>@observable key = value</code>等同于<code>extendObservable(this, &#123; key: value &#125;)</code>）。MobX并不要求使用单一的状态树，可以用多个文字组织你的状态。其中的一个store文件可能像下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TodoList</span> &#123;</span><br><span class=\"line\">  id = <span class=\"number\">0</span></span><br><span class=\"line\">  @observable todos = []</span><br><span class=\"line\"></span><br><span class=\"line\">  @computed <span class=\"keyword\">get</span> <span class=\"title function_\">activeTodoCount</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">todos</span>.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">todo</span> =&gt;</span> todo.<span class=\"property\">status</span> === <span class=\"number\">0</span>).<span class=\"property\">length</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">saveToStorage</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 第一次不会触发</span></span><br><span class=\"line\">    <span class=\"title function_\">reaction</span>(</span><br><span class=\"line\">      <span class=\"function\">() =&gt;</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">toJS</span>(),</span><br><span class=\"line\">      <span class=\"function\"><span class=\"params\">todos</span> =&gt;</span> <span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">setItem</span>(<span class=\"string\">&#x27;todo-mobx&#x27;</span>, <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(&#123; todos &#125;))</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">addTodo</span>(<span class=\"params\">title</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">id</span>++;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">todos</span>.<span class=\"title function_\">push</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">TodoItem</span>(&#123;<span class=\"attr\">id</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">id</span>, title, <span class=\"attr\">status</span>: <span class=\"number\">0</span>&#125;))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">toggleAll</span>(<span class=\"params\">status</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">todos</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">todo</span> =&gt;</span> todo.<span class=\"property\">status</span> = +status)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">delete</span>(<span class=\"params\">id</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> todoId = <span class=\"variable language_\">this</span>.<span class=\"property\">todos</span>.<span class=\"title function_\">findIndex</span>(<span class=\"function\"><span class=\"params\">todo</span> =&gt;</span> todo.<span class=\"property\">id</span> === id)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (todoId !== -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">todos</span>.<span class=\"title function_\">splice</span>(todoId, <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">clearCompleted</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">todos</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">todos</span>.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">todo</span> =&gt;</span> todo.<span class=\"property\">status</span> === <span class=\"number\">0</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">toJS</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">todos</span>.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">todo</span> =&gt;</span> todo.<span class=\"title function_\">toJS</span>())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">fromJS</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> todoStore = <span class=\"keyword\">new</span> <span class=\"title class_\">TodoList</span>();</span><br><span class=\"line\">    todoStore.<span class=\"property\">todos</span> = arr.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">todo</span> =&gt;</span> <span class=\"title class_\">TodoItem</span>.<span class=\"title function_\">from</span>(todo))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> todoStore</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>components</code>文件夹下做的事和使用其他框架其实差别不大。区别主要在引入observer后，用<code>@observer</code>装饰组件类。需要修改状态时，可以直接对props中传入的store进行<br>修改（不过还是建议使用store中定义好的方法修改），视图就会同步更新，副作用也会同步完成。一个使用了mobx-react的组件大概像下面这样</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@observer</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TodoList</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; todoStore, filterStore &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">props</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!todoStore.<span class=\"property\">todos</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;this.toggleAll&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">checked</span>=<span class=\"string\">&#123;todoStore.activeTodoCount</span> === <span class=\"string\">0&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          &#123;this.getVisibleTodos().map(todo =&gt; (</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">TodoItem</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">              <span class=\"attr\">key</span>=<span class=\"string\">&#123;todo.id&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">              <span class=\"attr\">todo</span>=<span class=\"string\">&#123;todo&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">              <span class=\"attr\">filterStore</span>=<span class=\"string\">&#123;filterStore&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">              <span class=\"attr\">handleDestroy</span>=<span class=\"string\">&#123;this.handleDestroy&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          ))&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">getVisibleTodos</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; todoStore, filterStore &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">props</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> todoStore.<span class=\"property\">todos</span>.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">todo</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">switch</span> (filterStore.<span class=\"property\">filter</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"attr\">ACTIVE</span>:</span><br><span class=\"line\">          <span class=\"keyword\">return</span> todo.<span class=\"property\">status</span> === <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"attr\">COMPLETED</span>:</span><br><span class=\"line\">          <span class=\"keyword\">return</span> todo.<span class=\"property\">status</span> === <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"attr\">REMOVED</span>:</span><br><span class=\"line\">          <span class=\"keyword\">return</span> todo.<span class=\"property\">status</span> === <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"attr\">default</span>:</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  toggleAll = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> checked = e.<span class=\"property\">target</span>.<span class=\"property\">checked</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">props</span>.<span class=\"property\">todoStore</span>.<span class=\"title function_\">toggleAll</span>(checked !== <span class=\"number\">0</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleDestroy = <span class=\"function\">(<span class=\"params\">id</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">props</span>.<span class=\"property\">todoStore</span>.<span class=\"title function_\">delete</span>(id)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>除了直接使用store外，<a href=\"https://github.com/mobxjs/mobx-react\">mobx-react</a>还提供了将observable对象通过<code>&lt;Provider&gt;</code>和<code>inject</code><a href=\"https://github.com/mobxjs/mobx-react#provider-and-inject\">2</a>传入组件的方式。其他的用法可以参看<a href=\"https://mobx.js.org/index.html\">文档</a>，还有<a href=\"http://cn.mobx.js.org/\">中文版翻译</a>。</p>\n<h4 id=\"脚手架-1\"><a href=\"#脚手架-1\" class=\"headerlink\" title=\"脚手架\"></a>脚手架</h4><p>除了Redux里面提到的，因为MobX中用到了最新的decorator特性，<code>.babelrc</code>配置文件大概是下面这样</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;presets&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"string\">&quot;react&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;es2015&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"string\">&quot;stage-1&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;plugins&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;transform-decorators-legacy&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;react-hot-loader/babel&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>package.json</code>中需要额外引入”mobx”和”mobx-react”两个库（至少）。官方还提供了<a href=\"https://github.com/mobxjs/mobx-react-boilerplate\">mobx-react-boilerplate</a>，这些环境都已帮你配置好，按照<code>README.md</code>操作即可。另外，官方提供的<a href=\"https://github.com/mobxjs/awesome-mobx\">awesome list</a>是一个非常好学习mobx的地方</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ol>\n<li><a href=\"https://github.com/mobxjs/mobx#credits\">https://github.com/mobxjs/mobx#credits</a></li>\n<li><a href=\"https://github.com/mobxjs/mobx-react#provider-and-inject\">https://github.com/mobxjs/mobx-react#provider-and-inject</a></li>\n</ol>\n",
            "tags": [
                "状态管理",
                "redux",
                "MobX"
            ]
        }
    ]
}