{
    "version": "https://jsonfeed.org/version/1",
    "title": "Shenlvmeng's Blog • All posts by \"电影\" tag",
    "description": "Be sharp, my friend.",
    "home_page_url": "http://shenlvmeng.github.com/blog",
    "items": [
        {
            "id": "http://shenlvmeng.github.com/blog/2017/09/08/photogallery-improvement/",
            "url": "http://shenlvmeng.github.com/blog/2017/09/08/photogallery-improvement/",
            "title": "PhotoGallery技术改造",
            "date_published": "2017-09-08T11:31:17.000Z",
            "content_html": "<p><img src=\"/blog/images/photogallery.png\"></p>\n<p>最近离职后除了准备面试，多了许多时间对以往的前端个人项目进行改造。<a href=\"http://shenlvmeng.github.io/gallery/index.html\">PhotoGallery</a>就是其中一个个人很喜欢，但由于技术原因没做到完美的例子。最近准备抽出时间进行完善。</p>\n<p>PhotoGallery是一个使用瀑布流展示电影海报以及花絮（当然都是个人比较心水的）的展示型页面。所有的电影图片也是从大一就开始收集的，一直囤积在人人上。页面的诸多功能是根据个人爱好设计的，如</p>\n<ul>\n<li>根据标签搜索</li>\n<li>相似图片</li>\n<li>基于tag的推荐等</li>\n</ul>\n<p>总体来说，就是一个展示、介绍、推荐电影的地方。内容上还是很不错的。但是，去年寒假码代码时，前端技术还有待提高，很多地方写得并不严谨甚至比较丑陋。功能上也有些影响体验必须解决的痛点。大概有下面这些</p>\n<ul>\n<li><strong>首屏渲染时间糟糕</strong>，这是因为图片过多（个人看的太多），又使用了Vue。同时Vue这种MVVM框架和精细化DOM操作一山不容二虎，因此，结合懒加载，效果依然不理想</li>\n<li><strong>图片的时序排布并不自然</strong>，当时图省事，使用纯CSS方案实现瀑布流，牺牲了图片排序。图片只能从上到下再从左到右排序，和正常的阅读顺序并不一致。同时，最老的图片在最前，也不合理</li>\n<li><strong>新增图片困难</strong>，这是由于github.io的纯静态的限制，当时采用了静态图片+meta存数据的方式来实现，后面看了电影再往里加图步骤繁琐，没有人性化的办法</li>\n<li>样式老气，细节粗糙</li>\n<li><strong>本地调试困难</strong>，只使用了gulp来压缩js，css和json代码（代码少，不需要打包），不是全家桶脚手架，本地调试困难，且不能使用ES6语法</li>\n<li><strong>代码语法和风格上不严谨</strong>，考虑结合在公司的规矩规范</li>\n</ul>\n<p>针对上面大大小小几点，以及实际情况（比如只能使用github.io），考虑像下面这样优化</p>\n<h3 id=\"瀑布流布局实现方式待优化\"><a href=\"#瀑布流布局实现方式待优化\" class=\"headerlink\" title=\"瀑布流布局实现方式待优化\"></a>瀑布流布局实现方式待优化</h3><p>放弃使用column-count的方案。原因有二：</p>\n<ol>\n<li>排布顺序是从上到下，再从左到右，和日常经验相悖。类似地，使用flex的方案也不行</li>\n<li>本身和懒加载的设计兼容性并不好，懒加载的新图片会导致整个页面的布局完全改变。类似地，使用grid的方案也不适合</li>\n</ol>\n<p>因此考虑借鉴<a href=\"http://www.zhangxinxu.com/wordpress/2012/03/%E5%A4%9A%E6%A0%8F%E5%88%97%E8%A1%A8%E5%8E%9F%E7%90%86%E4%B8%8B%E5%AE%9E%E7%8E%B0%E7%9A%84%E7%80%91%E5%B8%83%E6%B5%81%E5%B8%83%E5%B1%80-waterfall-layout/\">张鑫旭大神的方案</a>，综合CSS和JS实现懒加载的滚动式瀑布流布局。</p>\n<p><img src=\"http://image.zhangxinxu.com/image/blog/201203/2012-03-23_233114.png\"></p>\n<p>首先，根据屏幕宽度设置合理的列数，再逐列插入5张新图片，作为初始情况，同时，使用<code>flex</code>布局，设置<code>flex-grow</code>和<code>justify-content</code>等属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Wall</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">columns</span>: <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">clientWidth</span> / columnWidth),</span><br><span class=\"line\">      <span class=\"attr\">lastFlag</span>: <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">clientWidth</span> / columnWidth) * <span class=\"number\">5</span> - <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">items</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">itemsForColumns</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> ret = <span class=\"title class_\">Array</span>.<span class=\"title function_\">apply</span>(<span class=\"literal\">null</span>, <span class=\"title class_\">Array</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">columns</span>)).<span class=\"title function_\">map</span>(<span class=\"function\">() =&gt;</span> []);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">items</span>.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">lastFlag</span> + <span class=\"number\">1</span>).<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        ret[i % <span class=\"variable language_\">this</span>.<span class=\"property\">columns</span>].<span class=\"title function_\">push</span>(item);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      <span class=\"comment\">// 每列先只加载5个</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#photos</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">flex-flow</span>: row wrap;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>: flex-start;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: space-around;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.wall-column</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">250px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">8px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>: top;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>之后，监听可能会改变布局的所有情况，在我这个场景下，大概有三种：</p>\n<ul>\n<li>滚动（scroll）事件</li>\n<li>缩放事件（resize）事件</li>\n<li>筛选图片，在改变筛选条件，会导致图片数目的变化</li>\n</ul>\n<p>下面分情况解决之。</p>\n<p><strong>resize时</strong></p>\n<p>监听<code>window</code>的<code>resize</code>事件，当最后一列的位置变化时，意味着布局已经改变，需要触发重排。可以看到上面的<code>itemForColumns</code>中依赖<code>columns</code>和<code>lastFlag</code>两个状态。这里我们利用MVVM框架的优势，维护这两个值，就可以让Vue帮我们完成重排这样的繁琐操作。如下，当<code>columns</code>改变时，才会触发重绘。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;resize&quot;</span>, <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">columns</span> = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">clientWidth</span> / columnWidth);</span><br><span class=\"line\">  <span class=\"comment\">// 已经展示过的图片就不要隐藏了</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">lastFlag</span> = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">columns</span> * <span class=\"number\">5</span> - <span class=\"number\">1</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">lastFlag</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>筛选图片时</strong></p>\n<p>同理，通过关键词筛选图片时，改变了传入Wall的prop <code>factor</code>。会同步更新依赖<code>factor</code>的<code>item</code>，触发重排。有一点有注意的是，**<code>lastFlag</code>需要重新开始累加**。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">watch</span>: &#123;</span><br><span class=\"line\">  <span class=\"title function_\">items</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设置了筛选条件后，lastFlag需要重新开始累加</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">lastFlag</span> = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">clientWidth</span> / columnWidth) * <span class=\"number\">5</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>scroll时</strong></p>\n<p>页面滚动时，需要加入新的图片到column中，我们要做的只是更改<code>lastFlag</code>即可，Vue会帮我们自动完成依赖<code>lastFlag</code>的<code>itemForColumns</code>更新。重点在，我们如何知道lastFlag应该增加到多少。</p>\n<p>我们回看下<code>itemForColumns</code>的逻辑，可以发现<strong>新增的图片是循环摆放的</strong>。这里额外说一句，尽管新图片放在最短列是最合理的，但是工程上并不合算（一是Vue下做这么精细的DOM操作不合适，二是获知最短列意味着DOM操作已经发生，即会有频繁的回流和重绘，这会影响渲染时间）。我们循环考虑每一列的最底部位置，如果在视口内，将图片更新到该列，直到所有列底部都在视口外。直到图片加载完毕。</p>\n<p>另外，在实践时还发现一个问题，<code>handleScroll</code>里更改了<code>lastFlag</code>后，Vue本身有batch的优化，会在microtask栈空后，才会进行耗时的DOM操作。循环添加图片时，需要通过setTimeout异步完成，避免误判，在一次递归中加载了所有图片。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">handleScroll</span>(<span class=\"params\">top</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">items</span>.<span class=\"property\">length</span> &lt;= <span class=\"variable language_\">this</span>.<span class=\"property\">lastFlag</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> delta = -<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">columns</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> col = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">`wall-<span class=\"subst\">$&#123;i&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (col &amp;&amp; col.<span class=\"property\">offsetTop</span> + col.<span class=\"property\">clientHeight</span> &lt; top + (<span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span> || <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>.<span class=\"property\">clientHeight</span>)) &#123;</span><br><span class=\"line\">      delta = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!!++delta) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">lastFlag</span> += delta;</span><br><span class=\"line\">    <span class=\"comment\">// 直到所有列下沿都不在视口内，</span></span><br><span class=\"line\">    <span class=\"comment\">// 同时，设置时延，保证DOM操作完成后再继续handleScroll</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;  <span class=\"variable language_\">this</span>.<span class=\"title function_\">handleScroll</span>(top); &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"新增图片困难\"><a href=\"#新增图片困难\" class=\"headerlink\" title=\"新增图片困难\"></a>新增图片困难</h3><p><del>由于github.io是纯静态的页面，我并没有后台环境，这个痛点短期内只能缓解不能根除。不过后面考虑将所有图片迁移到图床上，毕竟把图片数据也存在github上感觉还是……有点怪怪的。日后新增图片应该还是通过上传图片，更新<code>meta.json</code>的形式完成。</del></p>\n<p>目前已将所有图片迁移到图床上，图床选择上参考了知乎上的推荐，使用<a href=\"https://www.qiniu.com/\">七牛云存储</a>，在个人实名认证后，免费部分有每月10G国内和国外下载流量，100万次GET和PUT请求次数，和10G存储空间。同时，它还提供对图片的压缩等管理，尽量减少流量。</p>\n<p>迁移之后，仓库体积大大减小。之后日常更新时，图片单独上传，根据外链固定前缀得到最终路径。</p>\n<p><del><code>meta.json</code>的更新上，考虑自己写一个工具，根据新看的电影生成新的content。</del></p>\n<p>已完成自动生成<code>meta.json</code>的<a href=\"https://shenlvmeng.github.io/meta-maker.html\">小工具</a>，原理很简单，就不再介绍了。</p>\n<h3 id=\"细节美化\"><a href=\"#细节美化\" class=\"headerlink\" title=\"细节美化\"></a>细节美化</h3><p>点比较细碎。整体借鉴了<a href=\"https://material.io/guidelines/material-design/introduction.html#introduction-goals\">material design</a>的思想。</p>\n<p><strong>影片详细信息的遮罩</strong></p>\n<p>考虑使用100%的遮罩，同时禁止背景滚动的形式展示图片的详细信息。起初打算用js去实现，后来发现下面的两点使得方案并不简单</p>\n<ul>\n<li>scroll事件不能被cancel，这意味着不能打断默认的滚动行为</li>\n<li>从Mouse，Keyboard，Touch相关触发scroll事件的事件劫持滚动行为倒是可以，不过要监听的事件太多</li>\n</ul>\n<p>只好作罢，通过纯CSS的方式，弹出浮层时，为body指定<code>noscroll</code>的类名。让浮层的<code>overflow</code>属性为<code>scroll</code>即可，同时设置浮层<code>position</code>属性为<code>fixed</code>即可。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#display</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"comment\">/*...*/</span></span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">100</span>;</span><br><span class=\"line\">  <span class=\"attribute\">overflow-y</span>: scroll;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用缓动函数改进回到开头</strong></p>\n<p>这里使用定义域和值域都是<code>[0,1]</code>的<code>easeInOutCubic</code>函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">easeInOutCubic</span> = t =&gt; (t&lt;<span class=\"number\">.5</span> ? <span class=\"number\">4</span>*t*t*t : (t-<span class=\"number\">1</span>)*(<span class=\"number\">2</span>*t-<span class=\"number\">2</span>)*(<span class=\"number\">2</span>*t-<span class=\"number\">2</span>)+<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<p>有了缓动函数后，使用<code>requestAnimationFrame</code>即可高效率地绘制JS动画。这里封装了一个<code>animate</code>函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">animate</span> = (<span class=\"params\">obj, prop, end, time, ease</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!obj || !obj[prop] || time &lt; <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> start = obj[prop],</span><br><span class=\"line\">      k = end - start,</span><br><span class=\"line\">      timer = <span class=\"literal\">null</span>,</span><br><span class=\"line\">      tick = <span class=\"function\"><span class=\"params\">timestamp</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timer === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">          timer = timestamp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> progress = timestamp - timer;</span><br><span class=\"line\">        obj[prop] = start + <span class=\"title function_\">ease</span>(progress / time) * k;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (progress &lt; time) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">requestAnimationFrame</span>(tick);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">requestAnimationFrame</span>(tick);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>后面直接使用<code>animate(document.body, &quot;scrollTop&quot;, 0, 1000, easeInOutCubic)</code>就可以圆滑地上移了。</p>\n<p><strong>移动端的优化</strong></p>\n<ul>\n<li>使用媒体查询，在屏幕宽度更改时，隐藏一些元素</li>\n<li>在UA为移动端设备时，给出提醒</li>\n</ul>\n<p><strong>loading样式</strong></p>\n<p>在改变筛选条件时，设置loading样式提升用户体验。通过积累onload的计数和初始加载图片值进行对比，在达到该值时清除遮罩。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"title function_\">loadedCount</span>(<span class=\"params\">newCount</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (newCount &gt;= <span class=\"title class_\">Math</span>.<span class=\"title function_\">min</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">lastFlag</span> + <span class=\"number\">1</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">items</span>.<span class=\"property\">length</span>)) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;全部加载完成&quot;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">isHidden</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// console.log(&quot;Loading...&quot;);</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>杂项</strong></p>\n<ul>\n<li>导航条交互优化</li>\n<li>导航条部分设置阴影，更改部分字体颜色和背景色</li>\n<li>修改触发分类方式，由<code>click</code>改为<code>mousemove</code></li>\n<li>修改tab的样式</li>\n<li>将vue和lodash的js文件下载到本地，避免CDN失效的问题（之前已经遇到过一次），增加可靠性</li>\n<li>搜索条件不区分大小写</li>\n</ul>\n<h3 id=\"本地调试困难\"><a href=\"#本地调试困难\" class=\"headerlink\" title=\"本地调试困难\"></a>本地调试困难</h3><p>因为代码较少，也只有一个文件，用不着webpack这样的全套解决方案。小巧易用的gulp就够了。针对我们需要的ES6转码，替换minify方案，本地调试等需要，都有对应的gulp插件解决问题。</p>\n<h4 id=\"gulp-babel\"><a href=\"#gulp-babel\" class=\"headerlink\" title=\"gulp-babel\"></a>gulp-babel</h4><p>使用<a href=\"https://babeljs.io/\">babel</a>来转码，<code>gulp-babel</code>依赖<code>babel-core@6</code>或以上版本，同时设置<code>preset</code>为<code>es2015</code>或ES7相关版本时也需要下载对应module。</p>\n<p>我只需要es2015即可。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev babel-core gulp-babel babel-preset-es2015</span><br></pre></td></tr></table></figure>\n\n<p>React和ES7的各阶段可以像下面这样选择安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save-dev babel-preset-react</span><br><span class=\"line\">$ npm install --save-dev babel-preset-stage-0</span><br><span class=\"line\">$ npm install --save-dev babel-preset-stage-1</span><br><span class=\"line\">$ npm install --save-dev babel-preset-stage-2</span><br><span class=\"line\">$ npm install --save-dev babel-preset-stage-3</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"其他工具\"><a href=\"#其他工具\" class=\"headerlink\" title=\"其他工具\"></a>其他工具</h4><ul>\n<li>**<a href=\"https://www.npmjs.com/package/gulp-uglify\">gulp-uglify</a>**，压缩代码</li>\n<li><strong>gulp-rename</strong>，为压缩出的js重命名</li>\n<li>**<a href=\"https://www.npmjs.com/package/gulp-webserver\">gulp-webserver</a>**，开启本地服务，方便本地调试</li>\n</ul>\n<p>上面这些插件按照文档操作即可，坑比较少，使用webserver时的<code>gulp.src()</code>入参通常为<code>./</code>，指以当前目录为服务器根目录。</p>\n<p>最后还需要加一个watch，方便在调试时的修改能同步转码压缩。像下面这样</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;watch&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  gulp.<span class=\"title function_\">watch</span>(<span class=\"string\">&#x27;assets/src/*.js&#x27;</span>, [<span class=\"string\">&#x27;js&#x27;</span>]);</span><br><span class=\"line\">  gulp.<span class=\"title function_\">watch</span>(<span class=\"string\">&#x27;assets/src/*.css&#x27;</span>, [<span class=\"string\">&#x27;css&#x27;</span>]);</span><br><span class=\"line\">  gulp.<span class=\"title function_\">watch</span>(<span class=\"string\">&#x27;assets/src/*.json&#x27;</span>, [<span class=\"string\">&#x27;json&#x27;</span>]);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>最后整个<code>gulpfile.js</code>是下面的样子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp&#x27;</span>),</span><br><span class=\"line\">    babel = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-babel&#x27;</span>),</span><br><span class=\"line\">    uglify = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-uglify&#x27;</span>),</span><br><span class=\"line\">    rename = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-rename&#x27;</span>),</span><br><span class=\"line\">    cleanCSS = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-clean-css&#x27;</span>),</span><br><span class=\"line\">    jsonminify = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-jsonminify&#x27;</span>),</span><br><span class=\"line\">    webserver = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-webserver&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;js&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;assets/src/*.js&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">babel</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">presets</span>: [<span class=\"string\">&#x27;es2015&#x27;</span>]</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">uglify</span>())</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">rename</span>(&#123; <span class=\"attr\">suffix</span>: <span class=\"string\">&#x27;.min&#x27;</span> &#125;))</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;dist&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;css&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>([<span class=\"string\">&#x27;assets/src/*.css&#x27;</span>])</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">cleanCSS</span>(&#123;<span class=\"attr\">compatibility</span>: <span class=\"string\">&#x27;ie8&#x27;</span>&#125;))</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;dist&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;json&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;assets/src/meta.json&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">jsonminify</span>())</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;dist&#x27;</span>))</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;webserver&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;./&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">webserver</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">livereload</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">directoryListing</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">open</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;watch&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  gulp.<span class=\"title function_\">watch</span>(<span class=\"string\">&#x27;assets/src/*.js&#x27;</span>, [<span class=\"string\">&#x27;js&#x27;</span>]);</span><br><span class=\"line\">  gulp.<span class=\"title function_\">watch</span>(<span class=\"string\">&#x27;assets/src/*.css&#x27;</span>, [<span class=\"string\">&#x27;css&#x27;</span>]);</span><br><span class=\"line\">  gulp.<span class=\"title function_\">watch</span>(<span class=\"string\">&#x27;assets/src/*.json&#x27;</span>, [<span class=\"string\">&#x27;json&#x27;</span>]);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;dev&#x27;</span>, [<span class=\"string\">&#x27;default&#x27;</span>, <span class=\"string\">&#x27;webserver&#x27;</span>, <span class=\"string\">&#x27;watch&#x27;</span>]);</span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&quot;default&quot;</span>, [<span class=\"string\">&#x27;json&#x27;</span>, <span class=\"string\">&#x27;css&#x27;</span>, <span class=\"string\">&#x27;js&#x27;</span>]);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"代码优化\"><a href=\"#代码优化\" class=\"headerlink\" title=\"代码优化\"></a>代码优化</h3><p>从略。HTML和CSS部分参照以往写的<a href=\"https://shenlvmeng.github.io/blog/2017/06/23/HTML-CSS-code-style-guide/\">建议</a>即可。除此以外，优化了下面的部分：</p>\n<ul>\n<li>删除了为兼容移动端额外使用的touchend事件，增加viewport的meta标签，消除移动端chrome浏览器点击300ms延时情况</li>\n<li>由于引入了babel，删除了兼容ES6语法的自己写的polyfill部分</li>\n<li>使用<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\">fetch API</a>请求json</li>\n<li>优化导航条点击事件处理相关的代码</li>\n<li>减少图片数目和json体积</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"https://segmentfault.com/a/1190000004394726\">使用gulp 进行ES6开发</a></li>\n<li><a href=\"http://blog.csdn.net/seven0404/article/details/51880162\">node.js利用gulp 启动webServer服务</a></li>\n<li><a href=\"https://stackoverflow.com/questions/2434602/css-setting-width-height-as-percentage-minus-pixels\">CSS: Setting width&#x2F;height as Percentage minus pixels</a></li>\n<li><a href=\"http://easings.net/zh-cn\">缓动函数速查表</a></li>\n<li><a href=\"https://gist.github.com/gre/1650294\">Simple Easing Functions in Javascript</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame\">window.requestAnimationFrame | MDN</a></li>\n<li><a href=\"https://dribbble.com/\">dribbble</a></li>\n<li><a href=\"https://codepen.io/sdthornton/pen/wBZdXq\">Material Design Box Shadows</a></li>\n<li><a href=\"http://tobiasahlin.com/spinkit/\">SpinKit | Simple CSS Spinners</a></li>\n<li><a href=\"https://www.zhihu.com/question/21667151\">国内有什么方便的图床？</a></li>\n</ul>\n",
            "tags": [
                "脚手架",
                "技改",
                "Vue",
                "gulp",
                "瀑布流",
                "电影"
            ]
        }
    ]
}