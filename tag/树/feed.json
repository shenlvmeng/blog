{
    "version": "https://jsonfeed.org/version/1",
    "title": "Shenlvmeng's Blog • All posts by \"树\" tag",
    "description": "Be sharp, my friend.",
    "home_page_url": "http://shenlvmeng.github.com/blog",
    "items": [
        {
            "id": "http://shenlvmeng.github.com/blog/2015/11/02/trie/",
            "url": "http://shenlvmeng.github.com/blog/2015/11/02/trie/",
            "title": "海量字符串搜索之一 Trie树",
            "date_published": "2015-11-02T11:13:54.000Z",
            "content_html": "<p>前言：编程第一次大作业，海量字符串检索。C语言，并要求使用trie树结构以及bloomfilter两种技术实现，体会它们的特点。这里对Trie做些学习笔记。</p>\n<h2 id=\"Trie树\"><a href=\"#Trie树\" class=\"headerlink\" title=\"Trie树\"></a>Trie树</h2><p>Trie树，又称单词查找树、字典树，是一种树形结构，是一种哈希树的变种，是一种用于快速检索的多叉树结构。典型应用是用于统计和排序大量的字符串（但不仅限于字符串），所以经常被搜索引擎系统用于文本词频统计。<strong>它的优点是：最大限度地减少无谓的字符串比较，查询效率比哈希表高。</strong></p>\n<p><strong>Trie的核心思想是空间换时间。</strong>利用字符串的公共前缀来降低查询时间的开销以达到提高效率的目的，例如邮箱的公共后缀。</p>\n<p><strong>Trie树也有它的缺点</strong>,Trie树的内存消耗非常大.当然,或许用左儿子右兄弟的方法建树的话,可能会好点.</p>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><ol>\n<li>根节点不包含字符，除根节点外每一个节点都只包含一个字符。</li>\n<li>从根节点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串。</li>\n<li>每个节点的所有子节点包含的字符都不相同<br>例如，给出一组单词：inn, int, at, age, adv, ant, 我们可以得到下面的Trie树</li>\n</ol>\n<p><img src=\"/blog/blog/images/trie-1.gif\"></p>\n<p>可以看出：</p>\n<ul>\n<li>每条边对应一个字母。</li>\n<li>每个节点对应一项前缀。叶节点对应最长前缀，即单词本身。</li>\n<li>单词inn与单词int有共同的前缀“in”, 因此他们共享左边的一条分支，root-&gt;i-&gt;in。同理，ate, age, adv, 和ant共享前缀”a”，所以他们共享从根节点到节点”a”的边。</li>\n</ul>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><h4 id=\"1-插入过程\"><a href=\"#1-插入过程\" class=\"headerlink\" title=\"1. 插入过程\"></a>1. 插入过程</h4><p>对于新的单词，从根开始，沿着单词的各个字母所对应的树中的节点分支向下走，直到单词遍历完，将最后的节点做标记，表示该单词已插入trie树。</p>\n<h4 id=\"2-检索过程\"><a href=\"#2-检索过程\" class=\"headerlink\" title=\"2. 检索过程\"></a>2. 检索过程</h4><p>从根开始按照单词的字母顺序向下遍历trie树，一旦发现某个节点标记不存在或者单词遍历完成而最后的节点没有标记，则表示该单词不存在，若最后的节点有标记，表示该单词存在。</p>\n<h4 id=\"3-删除节点\"><a href=\"#3-删除节点\" class=\"headerlink\" title=\"3. 删除节点\"></a>3. 删除节点</h4><p>很少使用，从该节点开始，释放它和所有子节点占用的空间。</p>\n<h4 id=\"4-代码\"><a href=\"#4-代码\" class=\"headerlink\" title=\"4. 代码\"></a>4. 代码</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">TrieNode</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> count; <span class=\"comment\">//statistics</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">TrieNode</span>* <span class=\"title\">next</span>[<span class=\"title\">MAX</span>];</span></span><br><span class=\"line\">&#125;TrieNode;</span><br><span class=\"line\"></span><br><span class=\"line\">TrieNode* <span class=\"title function_\">CreateNode</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\tTrieNode* p = (TrieNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(TrieNode));</span><br><span class=\"line\">\tp-&gt;count=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(p-&gt;next, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(p-&gt;next));</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*Insert new entry*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InsertTrieNode</span><span class=\"params\">(TrieNode* pRoot, <span class=\"type\">char</span> *s, <span class=\"type\">int</span> flag)</span>&#123;</span><br><span class=\"line\">\tTrieNode *p = pRoot;</span><br><span class=\"line\">\t<span class=\"type\">int</span> i,k;</span><br><span class=\"line\">\ti = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(s[i])&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//confirm branch</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(s[i] &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; s[i] &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\"> \t\t\tk = s[i++] - <span class=\"string\">&#x27;0&#x27;</span> + <span class=\"number\">2</span>;</span><br><span class=\"line\"> \t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s[i] &gt;= <span class=\"string\">&#x27;@&#x27;</span> &amp;&amp; s[i] &lt;=<span class=\"string\">&#x27;Z&#x27;</span>)</span><br><span class=\"line\"> \t\t\tk = s[i++] - <span class=\"string\">&#x27;@&#x27;</span> + <span class=\"number\">12</span>;</span><br><span class=\"line\"> \t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s[i] &gt;= <span class=\"string\">&#x27;a&#x27;</span> &amp;&amp; s[i] &lt;= <span class=\"string\">&#x27;z&#x27;</span>)</span><br><span class=\"line\"> \t\t\tk = s[i++] - <span class=\"string\">&#x27;a&#x27;</span> + <span class=\"number\">13</span>;</span><br><span class=\"line\"> \t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s[i] == <span class=\"string\">&#x27;.&#x27;</span> || s[i] == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\"> \t\t\tk = s[i++] - <span class=\"string\">&#x27;-&#x27;</span>;</span><br><span class=\"line\"> \t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s[i] == <span class=\"string\">&#x27;_&#x27;</span>)&#123;</span><br><span class=\"line\"> \t\t\tk = <span class=\"number\">39</span>;i++;</span><br><span class=\"line\"> \t\t&#125;</span><br><span class=\"line\"> \t\t<span class=\"keyword\">else</span></span><br><span class=\"line\"> \t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\"> \t\t<span class=\"keyword\">if</span>(<span class=\"literal\">NULL</span> == p-&gt;next[k]) </span><br><span class=\"line\">\t\t\tp-&gt;next[k] = CreateNode();\t\t</span><br><span class=\"line\">\t\tp = p-&gt;next[k];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//mark the trie string</span></span><br><span class=\"line\">\tp-&gt;count = flag;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*Match certain string*/</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">SearchTrie</span><span class=\"params\">(TrieNode* pRoot, <span class=\"type\">char</span> *s)</span>&#123;</span><br><span class=\"line\">\tTrieNode *p = pRoot;</span><br><span class=\"line\">\t<span class=\"type\">int</span> i,k;</span><br><span class=\"line\">\ti = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(s[i])&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(s[i] &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; s[i] &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\"> \t\t\tk = s[i++] - <span class=\"string\">&#x27;0&#x27;</span> + <span class=\"number\">2</span>;</span><br><span class=\"line\"> \t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s[i] &gt;= <span class=\"string\">&#x27;@&#x27;</span> &amp;&amp; s[i] &lt;=<span class=\"string\">&#x27;Z&#x27;</span>)</span><br><span class=\"line\"> \t\t\tk = s[i++] - <span class=\"string\">&#x27;@&#x27;</span> + <span class=\"number\">12</span>;</span><br><span class=\"line\"> \t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s[i] &gt;= <span class=\"string\">&#x27;a&#x27;</span> &amp;&amp; s[i] &lt;= <span class=\"string\">&#x27;z&#x27;</span>) </span><br><span class=\"line\">\t\t\tk = s[i++] - <span class=\"string\">&#x27;a&#x27;</span> + <span class=\"number\">13</span>;</span><br><span class=\"line\"> \t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s[i] == <span class=\"string\">&#x27;.&#x27;</span> || s[i] == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\"> \t\t\tk = s[i++] - <span class=\"string\">&#x27;-&#x27;</span>;</span><br><span class=\"line\"> \t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s[i] == <span class=\"string\">&#x27;_&#x27;</span>)&#123;</span><br><span class=\"line\"> \t\t\tk = <span class=\"number\">39</span>;i++;</span><br><span class=\"line\"> \t\t&#125;</span><br><span class=\"line\"> \t\t<span class=\"keyword\">else</span></span><br><span class=\"line\"> \t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"> \t\t<span class=\"keyword\">if</span>(p-&gt;next[k] == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tp = p-&gt;next[k];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(p-&gt;count &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> p-&gt;count;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果略。</p>\n<h3 id=\"查找性能分析\"><a href=\"#查找性能分析\" class=\"headerlink\" title=\"查找性能分析\"></a>查找性能分析</h3><p>在trie树中查找一个关键字的时间和树中包含的结点数无关，而取决于组成关键字的字符数。而二叉查找树的查找时间和树中的结点数有关O(log2n)。</p>\n<p>如果要查找的关键字可以分解成字符序列且不是很长，利用trie树查找速度优于二叉查找树。如：若关键字长度最大是5，则利用trie树，利用5次比较可以从26^5＝11881376个可能的关键字中检索出指定的关键字。而利用二叉查找树至少要进行约23.5次比较。</p>\n<h3 id=\"Trie树的应用\"><a href=\"#Trie树的应用\" class=\"headerlink\" title=\"Trie树的应用\"></a>Trie树的应用</h3><ul>\n<li>串的快速检索：<br>给出N个单词组成的熟词表，以及一篇全用小写英文书写的文章，请你按最早出现的顺序写出所有不在熟词表中的生词。<br>在这道题中，我们可以用数组枚举，用哈希，用字典树，先把熟词建一棵树，然后读入文章进行比较，这种方法效率是比较高的。</li>\n<li>串排序：<br>给定N个互不相同的仅由一个单词构成的英文名，让你将他们按字典序从小到大输出。<br>用字典树进行排序，采用数组的方式创建字典树，这棵树的每个结点的所有儿子很显然地按照其字母大小排序。对这棵树进行先序遍历即可。</li>\n<li>最长公共前缀<br>对所有串建立字典树，对于两个串的最长公共前缀的长度即他们所在的结点的公共祖先个数，于是，问题就转化为当时公共祖先问题（以后补上）。</li>\n</ul>\n<h3 id=\"Patricia-Trie\"><a href=\"#Patricia-Trie\" class=\"headerlink\" title=\"Patricia Trie\"></a>Patricia Trie</h3><p>针对，Trie树占用空间较多的缺点。可以对每个trie树节点做压缩工作，从而节省程序占用的内存空间。如果一颗Trie中有很多单词只有一个儿子结点，可以用Patricia Trie（Linux内核中叫做Radix Tree）压缩存储。由于#结束符标记被看作是一个叶子结点，那么一颗Patricia Trie的任何内部结点有2个或以上的孩子结点。</p>\n<p>Linux radix树最广泛的用途是用于内存管理，结构address_space通过radix树跟踪绑定到地址映射上的核心页，该radix树允许内存管理代码快速查找标识为dirty或writeback的页。Linux radix树的API函数在lib&#x2F;radix-tree.c中实现。</p>\n<p>作为Trie树的优化变异，Patricia树也可进行Trie树的操作。实现略。</p>\n<h2 id=\"Trie树之外\"><a href=\"#Trie树之外\" class=\"headerlink\" title=\"Trie树之外\"></a>Trie树之外</h2><p>除了Trie树，最常用的字符串检索有<a href=\"https://en.wikipedia.org/wiki/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm\">Knuth-Morris-Pratt</a>算法（最长前缀匹配），以及<a href=\"https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_string_search_algorithm\">Boyer-Moore</a>算法（最长后缀匹配）。关于这两个算法，参考资料的6和7的链接是我见过介绍的最好的，深入浅出易于理解。这里就不再废话了。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ol>\n<li><a href=\"http://blog.csdn.net/hguisu/article/details/8131559\" title=\"http://blog.csdn.net/hguisu/article/details/8131559\">http://blog.csdn.net/hguisu/article/details/8131559</a></li>\n<li><a href=\"http://blog.csdn.net/sjjbupt/article/details/6758309\" title=\"http://blog.csdn.net/sjjbupt/article/details/6758309\">http://blog.csdn.net/sjjbupt/article/details/6758309</a></li>\n<li><a href=\"http://blog.chinaunix.net/xmlrpc.php?r=blog/article&uid=28977986&id=3807947\" title=\"http://blog.chinaunix.net/xmlrpc.php?r=blog/article&amp;uid=28977986&amp;id=3807947\">http://blog.chinaunix.net/xmlrpc.php?r=blog/article&uid=28977986&id=3807947</a></li>\n<li><a href=\"http://www.cnblogs.com/ljsspace/archive/2011/06/27/2091771.html\" title=\"http://www.cnblogs.com/ljsspace/archive/2011/06/27/2091771.html\">http://www.cnblogs.com/ljsspace/archive/2011/06/27/2091771.html</a></li>\n<li><a href=\"http://blog.chinaunix.net/uid-13245160-id-84371.html\" title=\"http://blog.chinaunix.net/uid-13245160-id-84371.html\">http://blog.chinaunix.net/uid-13245160-id-84371.html</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.htm\" title=\"http://www.ruanyifeng.com/blog/2013/05/boyer-moore_string_search_algorithm.html\">http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.htm</a>l</li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2013/05/boyer-moore_string_search_algorithm.html\" title=\"http://www.ruanyifeng.com/blog/2013/05/boyer-moore_string_search_algorithm.html\">http://www.ruanyifeng.com/blog/2013/05/boyer-moore_string_search_algorithm.html</a></li>\n</ol>\n",
            "tags": [
                "字符串检索",
                "C语言",
                "树"
            ]
        }
    ]
}