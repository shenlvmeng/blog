<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://shenlvmeng.github.com/blog</id>
    <title>Shenlvmeng&#39;s Blog • Posts by &#34;http&#34; tag</title>
    <link href="http://shenlvmeng.github.com/blog" />
    <updated>2020-06-29T14:41:51.000Z</updated>
    <category term="总结" />
    <category term="制度" />
    <category term="道德" />
    <category term="文官" />
    <category term="万历" />
    <category term="明朝" />
    <category term="读书笔记" />
    <category term="展望" />
    <category term="2018" />
    <category term="2019" />
    <category term="flag" />
    <category term="2020" />
    <category term="2021" />
    <category term="2022" />
    <category term="2023" />
    <category term="面试" />
    <category term="前端" />
    <category term="FAQ" />
    <category term="HTML" />
    <category term="CSS" />
    <category term="style guide" />
    <category term="编程" />
    <category term="范式" />
    <category term="设计" />
    <category term="艺术" />
    <category term="质量" />
    <category term="async_hooks" />
    <category term="cls-hooked" />
    <category term="logId" />
    <category term="录音" />
    <category term="getUserMedia" />
    <category term="AudioContext" />
    <category term="PCM" />
    <category term="WAVE" />
    <category term="二叉搜索树" />
    <category term="算法" />
    <category term="回忆" />
    <category term="老朋友" />
    <category term="C" />
    <category term="Hash" />
    <category term="布隆过滤器" />
    <category term="字符串检索" />
    <category term="canvas" />
    <category term="流程图" />
    <category term="d3" />
    <category term="g6" />
    <category term="zrender" />
    <category term="processOn" />
    <category term="SDN" />
    <category term="cbench" />
    <category term="安装说明" />
    <category term="绘图" />
    <category term="动画" />
    <category term="攻略" />
    <category term="流水账" />
    <category term="成都" />
    <category term="重庆" />
    <category term="武汉" />
    <category term="重构" />
    <category term="代码" />
    <category term="代码风格" />
    <category term="数据可视化" />
    <category term="爬虫" />
    <category term="chrome" />
    <category term="crx" />
    <category term="扩展" />
    <category term="CORS" />
    <category term="跨域" />
    <category term="盒模型" />
    <category term="浮动" />
    <category term="Reactive Programming" />
    <category term="JavaScript" />
    <category term="Cycle.js" />
    <category term="Dart" />
    <category term="最佳实践" />
    <category term="引流" />
    <category term="universal-link" />
    <category term="app-link" />
    <category term="脚手架" />
    <category term="degit" />
    <category term="git" />
    <category term="设计模式" />
    <category term="类" />
    <category term="接口" />
    <category term="抽象类" />
    <category term="DOM" />
    <category term="Docker" />
    <category term="ONOS" />
    <category term="控制器" />
    <category term="虚拟化" />
    <category term="笔记" />
    <category term="UX" />
    <category term="UED" />
    <category term="准则" />
    <category term="Java" />
    <category term="Ruby" />
    <category term="反射" />
    <category term="编程范式" />
    <category term="鸭子类型" />
    <category term="管理" />
    <category term="效率" />
    <category term="知识工作者" />
    <category term="卓有成效" />
    <category term="Elm" />
    <category term="框架" />
    <category term="函数式编程" />
    <category term="虚网映射" />
    <category term="Javascript" />
    <category term="并发" />
    <category term="event loop" />
    <category term="覆盖率" />
    <category term="端到端测试" />
    <category term="istanbul" />
    <category term="istanbuljs" />
    <category term="JavaSript" />
    <category term="Express" />
    <category term="源码" />
    <category term="代码覆盖率" />
    <category term="istanbul-middleware" />
    <category term="代码插桩" />
    <category term="require钩子" />
    <category term="babel-plugin-istanbul" />
    <category term="css" />
    <category term="html5" />
    <category term="flex" />
    <category term="javascript" />
    <category term="roadmap" />
    <category term="闭包" />
    <category term="Haskell" />
    <category term="monad" />
    <category term="后端" />
    <category term="管理后台" />
    <category term="egg.js" />
    <category term="工作流" />
    <category term="pull request" />
    <category term="golang" />
    <category term="语言学习" />
    <category term="黑客与画家" />
    <category term="创业" />
    <category term="骑行" />
    <category term="海南" />
    <category term="图文" />
    <category term="reflow" />
    <category term="repaint" />
    <category term="命名法" />
    <category term="成功学" />
    <category term="自我建设" />
    <category term="HTTP" />
    <category term="HTTP/2" />
    <category term="SPDY" />
    <category term="QUIC" />
    <category term="HTTPS" />
    <category term="状态码" />
    <category term="网络攻击" />
    <category term="介绍" />
    <category term="图片渲染" />
    <category term="html2canvas" />
    <category term="dom-to-image" />
    <category term="electron" />
    <category term="indexedDB" />
    <category term="异步" />
    <category term="Generator" />
    <category term="thunk" />
    <category term="async" />
    <category term="函数表达式" />
    <category term="对象" />
    <category term="继承" />
    <category term="类型转换" />
    <category term="==" />
    <category term="类型判断" />
    <category term="猫" />
    <category term="杀手" />
    <category term="管理学" />
    <category term="领导力" />
    <category term="梯队" />
    <category term="移动端" />
    <category term="UI" />
    <category term="自适应" />
    <category term="rem" />
    <category term="Electron" />
    <category term="GUI" />
    <category term="gpx" />
    <category term="template" />
    <category term="Electron Builder" />
    <category term="PWA" />
    <category term="方法论" />
    <category term="夜话" />
    <category term="多线" />
    <category term="生活" />
    <category term="密码" />
    <category term="密钥" />
    <category term="技改" />
    <category term="Vue" />
    <category term="gulp" />
    <category term="瀑布流" />
    <category term="电影" />
    <category term="PHP" />
    <category term="参考" />
    <category term="思维" />
    <category term="学习能力" />
    <category term="右脑" />
    <category term="经济学" />
    <category term="宏观经济学" />
    <category term="术语" />
    <category term="GDP" />
    <category term="CPI" />
    <category term="储蓄" />
    <category term="投资" />
    <category term="金融市场" />
    <category term="股票" />
    <category term="债券" />
    <category term="美联储" />
    <category term="失业" />
    <category term="货币" />
    <category term="现值" />
    <category term="准备金" />
    <category term="货币中性" />
    <category term="通货膨胀" />
    <category term="汇率" />
    <category term="购买力" />
    <category term="净出口" />
    <category term="资产净流出" />
    <category term="总需求" />
    <category term="总供给" />
    <category term="流动性偏好" />
    <category term="乘数效应" />
    <category term="菲利普斯曲线" />
    <category term="微观经济学" />
    <category term="供求" />
    <category term="贸易" />
    <category term="市场" />
    <category term="税" />
    <category term="剩余" />
    <category term="外部性" />
    <category term="公共物品" />
    <category term="公共资源" />
    <category term="生产成本" />
    <category term="利润" />
    <category term="垄断" />
    <category term="价格歧视" />
    <category term="寡头" />
    <category term="垄断竞争" />
    <category term="生产要素市场" />
    <category term="贫困" />
    <category term="消费者选择理论" />
    <category term="不对称信息" />
    <category term="政治经济学" />
    <category term="行为经济学" />
    <category term="VSCode" />
    <category term="编辑器" />
    <category term="IDE" />
    <category term="hybrid" />
    <category term="JSBridge" />
    <category term="Web Worker" />
    <category term="Service Worker" />
    <category term="习惯" />
    <category term="lint" />
    <category term="editorconfig" />
    <category term="commit message" />
    <category term="量子物理" />
    <category term="史话" />
    <category term="埋点" />
    <category term="raven.js" />
    <category term="前端监控" />
    <category term="文本编辑器" />
    <category term="quill" />
    <category term="结构化数据" />
    <category term="React" />
    <category term="Hooks" />
    <category term="函数组件" />
    <category term="复用" />
    <category term="状态管理" />
    <category term="redux" />
    <category term="MobX" />
    <category term="代码质量" />
    <category term="重来" />
    <category term="requestAnimationFrame" />
    <category term="TypeScript" />
    <category term="路书" />
    <category term="gpx解析" />
    <category term="EXIF" />
    <category term="人类" />
    <category term="生存" />
    <category term="基因" />
    <category term="响应式编程" />
    <category term="RxJS" />
    <category term="成长" />
    <category term="业务" />
    <category term="思想" />
    <category term="程序设计" />
    <category term="心理学" />
    <category term="自我" />
    <category term="社会思维" />
    <category term="社会影响" />
    <category term="文化" />
    <category term="性别" />
    <category term="从众" />
    <category term="说服" />
    <category term="临床诊断" />
    <category term="陪审团" />
    <category term="司法" />
    <category term="物质主义" />
    <category term="健康" />
    <category term="社会关系" />
    <category term="偏见" />
    <category term="攻击行为" />
    <category term="亲密关系" />
    <category term="友谊" />
    <category term="爱情" />
    <category term="利他" />
    <category term="冲突" />
    <category term="和解" />
    <category term="软技能" />
    <category term="理财" />
    <category term="健身" />
    <category term="自我营销" />
    <category term="学习" />
    <category term="商业模式" />
    <category term="产品" />
    <category term="校园网" />
    <category term="互联网" />
    <category term="技术" />
    <category term="web开发" />
    <category term="哲思" />
    <category term="择偶观" />
    <category term="validator" />
    <category term="大文件" />
    <category term="visibilityChange" />
    <category term="IntersectionObserver" />
    <category term="图种" />
    <category term="draggable" />
    <category term="webpack" />
    <category term="z-index" />
    <category term="git submodule" />
    <category term="object-fit" />
    <category term="object-position" />
    <category term="BroadcastChannel" />
    <category term="extract-text-webpack-plugin" />
    <category term="lottie" />
    <category term="backface-visibility" />
    <category term="egret" />
    <category term="mock" />
    <category term="SSO" />
    <category term="autoprefixer" />
    <category term="polyfill" />
    <category term="Android" />
    <category term="ffmpeg" />
    <category term="React Hooks" />
    <category term="rollup" />
    <category term="CDN" />
    <category term="DNS" />
    <category term="CNAME" />
    <category term="架构" />
    <category term="组件" />
    <category term="ssh" />
    <category term="fis-receiver" />
    <category term="tmux" />
    <category term="origami" />
    <category term="promise" />
    <category term="encodeURI" />
    <category term="encodeURIComponent" />
    <category term="axios" />
    <category term="charles" />
    <category term="黑色幽默" />
    <category term="朋友" />
    <category term="梦" />
    <category term="濒死" />
    <category term="江南" />
    <category term="苏州" />
    <category term="无锡" />
    <category term="宜兴" />
    <category term="湖州" />
    <category term="南浔" />
    <category term="游记" />
    <category term="随笔" />
    <category term="群众" />
    <category term="理论" />
    <category term="实效" />
    <category term="测试" />
    <category term="长沙" />
    <category term="杭州" />
    <category term="湖南" />
    <category term="核酸" />
    <category term="美食" />
    <category term="云南" />
    <category term="丽江" />
    <category term="大理" />
    <category term="青岛" />
    <category term="济南" />
    <category term="山东" />
    <category term="西北" />
    <category term="银川" />
    <category term="西宁" />
    <category term="青海湖" />
    <category term="西海镇" />
    <category term="茶卡盐湖" />
    <category term="厦门" />
    <category term="感受" />
    <category term="C语言" />
    <category term="树" />
    <category term="主干开发" />
    <category term="GitFlow" />
    <category term="GithubFlow" />
    <category term="typescript" />
    <category term="类型系统" />
    <category term="webrtc" />
    <category term="RTMP" />
    <category term="首屏时间" />
    <category term="性能优化" />
    <category term="公司" />
    <category term="个人发展" />
    <category term="战略" />
    <category term="晋升" />
    <category term="哲学" />
    <category term="幸福" />
    <category term="人生" />
    <category term="叔本华" />
    <category term="Unix" />
    <category term="Rollup" />
    <category term="mouseout" />
    <category term="mouseleave" />
    <category term="lint-staged" />
    <category term="吸顶" />
    <category term="图片组件" />
    <category term="形式系统" />
    <category term="不完全性" />
    <category term="隐喻" />
    <category term="哥德尔" />
    <category term="巴赫" />
    <category term="埃舍尔" />
    <entry>
        <id>http://shenlvmeng.github.com/blog/2020/06/29/http-2-for-frontend/</id>
        <title>面向前端的HTTP/2介绍</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2020/06/29/http-2-for-frontend/"/>
        <content type="html">&lt;p&gt;正式版HTTP&amp;#x2F;2发布于2015年5月，距今已经快5年了，相比老一辈HTTP 1.1有了许多改进。在具体讨论这些改进前，我们先简单回顾下HTTP这一路以来的历程。&lt;/p&gt;
&lt;h2 id=&#34;历史回顾&#34;&gt;&lt;a href=&#34;#历史回顾&#34; class=&#34;headerlink&#34; title=&#34;历史回顾&#34;&gt;&lt;/a&gt;历史回顾&lt;/h2&gt;&lt;p&gt;HTTP在1991年发布了最初的HTTP0.9版本，主要用于学术交流，目的也只是用来在网络之间传递HTML超文本的内容。HTTP0.9基于TCP，只有一个GET请求类型，请求和文档响应都是ASCII字符流，响应数据类型只有HTML类型，在响应结束后立即断开连接。&lt;/p&gt;
&lt;p&gt;随着互联网发展，1994年底出现了拨号上网，网景推出浏览器后，WWW已经不仅局限于学术交流，浏览器中除了承载HTML以外，还包括了JavaScript、CSS、图片、音视频等资源。HTTP1.0在这个背景下于1996年推出（RFC1945），它支持了状态码、方法、头部的概念，响应内容不局限于超文本文件，编码类型也不仅限于ASCII。但是TCP连接在响应返回后依旧会断开连接。&lt;/p&gt;
&lt;p&gt;在浏览器等技术发展，HTTP请求更多也更复杂，HTTP1.0的已有问题暴露得越来越明显。TCP频繁建立连接的时延，缓存协商机制的不完整、大文件下载的支持等问题需要解决。于是HTTP1.1在1999年推出（RFC2616），这是个很庞大的协议，全文长达176页，在后续IETF对该规范进行更新时，则被拆分成了总页数更多的六个文档（即RFC7230协议族）。HTTP1.1包含了太多细节和可选的部分，包含不常用的功能和不合适的优化，因此几乎没有任何实现包含完整的协议功能。总的来看，HTTP1.1做了一些尝试：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TCP持久连接（keep-alive），即在一个TCP连接上发起HTTP请求&lt;/li&gt;
&lt;li&gt;支持范围请求（Accept-Ranges）&lt;/li&gt;
&lt;li&gt;更强大的缓存机制（协商缓存和强缓存，以及相关的头部）&lt;/li&gt;
&lt;li&gt;提出了HTTP pipeline，尝试改善串行HTTP请求引起的线头阻塞（Head-of-line blocking）问题&lt;/li&gt;
&lt;li&gt;更多的错误相关状态码&lt;/li&gt;
&lt;li&gt;Host头处理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;之后HTTP1.1便被一直使用至今，随着互联网页面请求资源的数量和体积增大，HTTP1.1中没能妥善解决的问题越来越明显。HTTPbis工作组在2007年夏天便着手于HTTP1.1标准的更新，并最终在2014年初形成上面提到的RFC7230系列协议族。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/SPDY&#34;&gt;SPDY&lt;/a&gt;（SPeeDY）是由Google牵头开发的开源协议，意图在TLS和HTTP中间插入中间层，解决HTTP协议的问题。大约在2012年提出，也被大多数主流浏览器支持。最终在2015年HTTP&amp;#x2F;2协议发布后，逐步放弃支持。实际上HTTP&amp;#x2F;2也是在SPDY&amp;#x2F;3草案的基础上形成的协议初稿。&lt;/p&gt;
&lt;h2 id=&#34;历史问题&#34;&gt;&lt;a href=&#34;#历史问题&#34; class=&#34;headerlink&#34; title=&#34;历史问题&#34;&gt;&lt;/a&gt;历史问题&lt;/h2&gt;&lt;h3 id=&#34;传输资源与延迟&#34;&gt;&lt;a href=&#34;#传输资源与延迟&#34; class=&#34;headerlink&#34; title=&#34;传输资源与延迟&#34;&gt;&lt;/a&gt;传输资源与延迟&lt;/h3&gt;&lt;p&gt;当今的互联网环境和20世纪末那会儿已经有了很大的不同，现在的Web页面更像一个应用的概念，而非一个简单的页面（SPA）。从HTTPArchive一个页面下请求的资源数已经上百，请求的资源体积也接近2M。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bagder/http2-explained/master/images/transfer-size-growth.png&#34; alt=&#34;http-transfer-size&#34;&gt;&lt;/p&gt;
&lt;p&gt;随着这些年网络硬件条件的迅猛发展，&lt;strong&gt;带宽&lt;/strong&gt;已经不再是影响人们体验的因素，而&lt;strong&gt;网络延迟&lt;/strong&gt;仍然没有太好的改善。高延迟的网络上（比如移动设备），即使拥有高连接速率，也很难获得优质快速的网络体验。页面从访问到打开的近70%时间都发生在网络上。&lt;/p&gt;
&lt;h3 id=&#34;请求-响应模型&#34;&gt;&lt;a href=&#34;#请求-响应模型&#34; class=&#34;headerlink&#34; title=&#34;请求-响应模型&#34;&gt;&lt;/a&gt;请求-响应模型&lt;/h3&gt;&lt;p&gt;HTTP1.1是无状态协议，需要以客户端请求开始，然后才能响应。一个TCP上同时只能有一个请求&amp;#x2F;响应。TCP协议的能力并没有被充分利用。在HTTP1.1启用keep-alive后，TCP连接重复建立的问题被解决。但是请求还是需要排队一个一个发送，TCP的RTT（round-trip time）还是比较可观。后续的HTTP1.1提出了&lt;strong&gt;HTTP管线化&lt;/strong&gt;（pipeline），即将多个HTTP请求合并成一个，一起发送，这样的确提高了服务器的资源利用率，但是也会带来线头阻塞（head-of-line blocking）问题，即一个比较耗时的请求会影响后续的所有请求。另外，它会给重试带来麻烦，需要网络中间节点的支持。所以这个特性并没有得到浏览器和服务器认可，实现也并不普及。目前大多数桌面浏览器也是默认关闭这个特性的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mdn.mozillademos.org/files/13727/HTTP1_x_Connections.png&#34; alt=&#34;http-pipeline&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;那些年，我们一起克服延迟的办法&#34;&gt;&lt;a href=&#34;#那些年，我们一起克服延迟的办法&#34; class=&#34;headerlink&#34; title=&#34;那些年，我们一起克服延迟的办法&#34;&gt;&lt;/a&gt;那些年，我们一起克服延迟的办法&lt;/h4&gt;&lt;p&gt;针对上面的困难，智慧的开发者们自然也是有了许多应对办法。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bagder/http2-explained/master/images/spriting.jpg&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;雪碧图：将小图片整合成一张大图。&lt;/li&gt;
&lt;li&gt;内联：将高优先级资源或小资源通过script标签或style标签或dataUrl的形式直接内嵌在页面里&lt;/li&gt;
&lt;li&gt;分片（sharding）与域名散列：将图片或者其他资源分发到不同主机。最初的HTTP1.1规范（RFC2616）提到一个客户端最多只能对同一主机建立两个TCP连接。后来，两个连接的限制被取消了（RFC7230），现在的浏览器一般允许每个域名主机建立6-8个连接。根据httparchive.org的记录显示，在Top30万个URL中平均使用40个TCP连接来显示页面&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bagder/http2-explained/master/images/expressen-sharding.jpg&#34; alt=&#34;http-sharding&#34;&gt;&lt;/p&gt;
&lt;p&gt;除此之外，为了减少请求数，前端会将代码合并并打包，这也是webpack这样的工具诞生的背景。&lt;/p&gt;
&lt;h3 id=&#34;冗长的头部&#34;&gt;&lt;a href=&#34;#冗长的头部&#34; class=&#34;headerlink&#34; title=&#34;冗长的头部&#34;&gt;&lt;/a&gt;冗长的头部&lt;/h3&gt;&lt;p&gt;HTTP1.1中1000+字节的头部都是常见的且体积较大的，如&lt;code&gt;Cookie&lt;/code&gt;。头部信息有许多多余信息。这也让许多大请求建立连接的过程变得很慢。&lt;/p&gt;
&lt;p&gt;总结来看，HTTP1.1遗留了下面几个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对TCP利用较差，同时只能有一个请求&amp;#x2F;响应&lt;ul&gt;
&lt;li&gt;目前应对方法：开多个TCP连接（分片），减少请求数（合并资源）；这些方法多少会遇到TCP慢启动、DNS开销等问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HTTP头部没有压缩，占用较大空间&lt;ul&gt;
&lt;li&gt;目前应对方法：减少请求数、使用cookie-less域名&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;固有的请求-响应模式，重要资源无法优先推送&lt;ul&gt;
&lt;li&gt;目前应对方法：内联资源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;HTTP&amp;#x2F;2对于上面这些问题自然是重拳出击。&lt;/p&gt;
&lt;h2 id=&#34;HTTP-x2F-2概述&#34;&gt;&lt;a href=&#34;#HTTP-x2F-2概述&#34; class=&#34;headerlink&#34; title=&#34;HTTP&amp;#x2F;2概述&#34;&gt;&lt;/a&gt;HTTP&amp;#x2F;2概述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;“HTTP&amp;#x2F;2 enables a more efficient use of network resources and a reduced perception of latency by introducing header field compression and allowing multiple concurrent exchanges on the same connection. It also introduces unsolicited push of representations from servers to clients.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;根据&lt;a href=&#34;https://httpwg.org/specs/rfc7540.html&#34;&gt;RFC7540&lt;/a&gt;的摘要，简明扼要地点出了HTTP&amp;#x2F;2带来的几个重要特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多路复用的二进制协议；一个TCP连接上不再只有1个请求&amp;#x2F;响应，同时采用二进制而非文本传输数据&lt;/li&gt;
&lt;li&gt;头部压缩；用二进制分帧配合专门设计的头部压缩算法（HPACK）大大减少头部体积，HPACK有专门的&lt;a href=&#34;https://httpwg.github.io/specs/rfc7541.html&#34;&gt;RFC7541&lt;/a&gt;来规范。&lt;/li&gt;
&lt;li&gt;服务器推送；在客户端发送请求前，主动将资源推送给客户端&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;整个HTTP&amp;#x2F;2实际上还是在HTTP的框架下的，对HTTP1.1也是完全兼容的，这意味着你可以像以前一样使用HTTP的API、方法、头部、状态码这些：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP&amp;#x2F;2必须维持HTTP的范式。它只是一个让客户端发送请求到服务器的基于TCP的协议&lt;/li&gt;
&lt;li&gt;不能改变&lt;code&gt;http://&lt;/code&gt;和&lt;code&gt;https://&lt;/code&gt;这样的URL，也不能对其添加新的结构。使用这类URL的网站太多了，没法指望他们全部改变。&lt;/li&gt;
&lt;li&gt;HTTP1.1的服务器和客户端依然会存在很久，所以必须提供HTTP1.1到HTTP&amp;#x2F;2服务器的代理&lt;/li&gt;
&lt;li&gt;不再使用小版本号。服务器和客户端都必须确定自己是否完整兼容http2或者彻底不兼容&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;协商&#34;&gt;&lt;a href=&#34;#协商&#34; class=&#34;headerlink&#34; title=&#34;协商&#34;&gt;&lt;/a&gt;协商&lt;/h3&gt;&lt;p&gt;SPDY依赖于TLS，不过从SPDY中诞生的HTTP&amp;#x2F;2却可以选择是否基于TLS。由此带来2种HTTP&amp;#x2F;2协商机制。对于普通的HTTP1.1，通过给服务器发送一个带升级头部的报文。如果服务器支持HTTP&amp;#x2F;2，它将以“101 Switching”作为回复的状态码，并从此开始在该连接上使用HTTP&amp;#x2F;2。这种连接方式也被称为&lt;strong&gt;h2c&lt;/strong&gt;（HTTP&amp;#x2F;2 cleartext），此时HTTP&amp;#x2F;2在TCP之上运行。出于安全性考虑。&lt;strong&gt;几乎所有的主流浏览器都不支持这种协商实现&lt;/strong&gt;（curl可以支持）。&lt;/p&gt;
&lt;p&gt;对于在TLS之上的https，Next Protocol Negotiation (NPN)是一个用来在TLS服务器上协商SPDY的协议。IETF将这个非正式标准进行规范化，从而演变成了ALPN（Application Layer Protocol Negotiation）。ALPN会伴随HTTP&amp;#x2F;2中的使用而推广，考虑到SPDY会使用NPN，而许多服务器又会同时提供SPDY以及HTTP&amp;#x2F;2，所以在这些服务器上同时支持ALPN以及NPN显然会成为最理所当然的选择。ALPN和NPN的主要区别在于，ALPN中由服务端最终决定通信协议，NPN中由客户端最终决定。&lt;/p&gt;
&lt;h2 id=&#34;HTTP-x2F-2特性&#34;&gt;&lt;a href=&#34;#HTTP-x2F-2特性&#34; class=&#34;headerlink&#34; title=&#34;HTTP&amp;#x2F;2特性&#34;&gt;&lt;/a&gt;HTTP&amp;#x2F;2特性&lt;/h2&gt;&lt;p&gt;在HTTP&amp;#x2F;2的介绍中提到，协议通过定义一个优化的基础连接的HTTP语义映射来解决HTTP1.1的问题。具体地，它允许在&lt;strong&gt;同一连接&lt;/strong&gt;上&lt;strong&gt;交错&lt;/strong&gt;地建立请求和响应消息，并使用&lt;strong&gt;高效率编码&lt;/strong&gt;的HTTP报头字段。它还允许&lt;strong&gt;请求的优先级&lt;/strong&gt;，让更多的重要的请求更快速的完成，进一步提升了性能。最终协议设计为对网络更友好，因为它相对HTTP&amp;#x2F;1.x减少了TCP连接。最后，这种封装也通过使用&lt;strong&gt;二进制消息帧&lt;/strong&gt;使信息处理更具扩展性。&lt;/p&gt;
&lt;p&gt;里面加粗的部分即HTTP&amp;#x2F;2带来的几个新特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单一TCP连接&lt;/li&gt;
&lt;li&gt;二进制分帧&lt;ul&gt;
&lt;li&gt;请求优先级&lt;/li&gt;
&lt;li&gt;服务端推送&lt;/li&gt;
&lt;li&gt;流量控制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多路复用&lt;/li&gt;
&lt;li&gt;头部压缩（HPACK）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;二进制分帧“层”&#34;&gt;&lt;a href=&#34;#二进制分帧“层”&#34; class=&#34;headerlink&#34; title=&#34;二进制分帧“层”&#34;&gt;&lt;/a&gt;二进制分帧“层”&lt;/h3&gt;&lt;p&gt;首先，HTTP&amp;#x2F;2是个二进制协议。它的请求和响应都是流的形式，它基本的协议单位是帧。每个帧都有不同的类型和用途。HTTP&amp;#x2F;2所有性能增强的核心也在于这个新的二进制分帧层，它定义了如何封装 HTTP 消息并在客户端与服务器之间传输。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://developers.google.com/web/fundamentals/performance/http2/images/binary_framing_layer01.svg&#34; alt=&#34;http2-framing-layer&#34;&gt;&lt;/p&gt;
&lt;p&gt;从图中能看到，在TLS之上，HTTP&amp;#x2F;2之下新增了一个二进制分帧层。这里所谓的“层”，指的是位于套接字接口与应用可见的高级HTTP API之间一个经过优化的新编码机制：HTTP的语义（包括各种动词、方法、标头）都不受影响，不同的是传输期间对它们的&lt;strong&gt;编码方式&lt;/strong&gt;变了。不同于HTTP1.x里面用换行符作为分隔，HTTP&amp;#x2F;2中将信息分割成帧，并进行二进制编码。整个分帧过程由客户端和服务端替我们完成。&lt;/p&gt;
&lt;h3 id=&#34;数据流和帧&#34;&gt;&lt;a href=&#34;#数据流和帧&#34; class=&#34;headerlink&#34; title=&#34;数据流和帧&#34;&gt;&lt;/a&gt;数据流和帧&lt;/h3&gt;&lt;p&gt;上面这种二进制分帧机制改变了客户端与服务器之间交换数据的方式，也带来了流的概念。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;流（Stream）：一个双向字节帧流穿过HTTP&amp;#x2F;2连接中的虚拟通道，可以承载一条或多条消息。&lt;/li&gt;
&lt;li&gt;消息：与逻辑请求或响应消息对应的完整的一系列帧。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;流的生存周期包含idle、reserved(local)、reserved(remote)、open、half closed(local)、half closed(remote)、closed多个阶段。状态间通过特定的帧类型流转。在不同状态下对应着不同的能力，对于&lt;a href=&#34;https://tools.ietf.org/html/rfc7540#section-5.1&#34;&gt;状态规范&lt;/a&gt;描述以外的操作请求都会给出协议错误（PROTOCOL_ERROR）。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;                         +--------+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                 send PP |        | recv PP&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                ,--------|  idle  |--------.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               /         |        |         \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;              v          +--------+          v&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       +----------+          |           +----------+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       |          |          | send H /  |          |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;,------| reserved |          | recv H    | reserved |------.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|      | (local)  |          |           | (remote) |      |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|      +----------+          v           +----------+      |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|          |             +--------+             |          |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|          |     recv ES |        | send ES     |          |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|   send H |     ,-------|  open  |-------.     | recv H   |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|          |    /        |        |        \    |          |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|          v   v         +--------+         v   v          |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|      +----------+          |           +----------+      |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|      |   half   |          |           |   half   |      |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|      |  closed  |          | send R /  |  closed  |      |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|      | (remote) |          | recv R    | (local)  |      |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|      +----------+          |           +----------+      |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|           |                |                 |           |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|           | send ES /      |       recv ES / |           |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|           | send R /       v        send R / |           |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|           | recv R     +--------+   recv R   |           |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;| send R /  `-----------&amp;gt;|        |&amp;lt;-----------&amp;#x27;  send R / |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;| recv R                 | closed |               recv R   |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;`-----------------------&amp;gt;|        |&amp;lt;----------------------&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                         +--------+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   send:   endpoint sends this frame&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   recv:   endpoint receives this frame&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   H:  HEADERS frame (with implied CONTINUATIONs)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   PP: PUSH_PROMISE frame (with implied CONTINUATIONs)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   ES: END_STREAM flag&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   R:  RST_STREAM frame&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;流和帧的关系是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有通信都在一个TCP连接上完成，这个连接可以承载任意数量的流&lt;/li&gt;
&lt;li&gt;每个流上面都有唯一标识符和&lt;em&gt;可选&lt;/em&gt;的优先级信息，里面会承载要传递的消息&lt;/li&gt;
&lt;li&gt;每条消息都是一条逻辑HTTP信息（如请求或相应），有完整的HTTP语义，其中可能有一个或多个帧&lt;/li&gt;
&lt;li&gt;帧是最小的通信单位，承载着特定类型的数据，例如HTTP 标头、消息负载等等。帧可以&lt;strong&gt;交错发送&lt;/strong&gt;，然后再根据帧头的数据流标识符进行组装&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://developers.google.com/web/fundamentals/performance/http2/images/streams_messages_frames01.svg&#34; alt=&#34;http2-frame&#34;&gt;&lt;/p&gt;
&lt;p&gt;所有的帧以8字节的报头开始并且跟着0到16383字节长度的主体。帧格式如下：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt; 0                   1                   2                   3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;| R |     Length (14)           |   Type (8)    |   Flags (8)   |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+-+-+-----------+---------------+-------------------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|R|                 Stream Identifier (31)                      |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+=+=============================================================+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|                   Frame Payload (0...)                      ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+---------------------------------------------------------------+&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;R：保留字段&lt;/li&gt;
&lt;li&gt;Length：14位无符号整数的帧主体长度&lt;/li&gt;
&lt;li&gt;Type：帧类型，它描述了剩余的帧报头和帧主体将如何被解释&lt;/li&gt;
&lt;li&gt;Flags：为帧类型保留的8位布尔类型字段，根据不同帧类型赋予不同语义&lt;/li&gt;
&lt;li&gt;Stream Identifier：31字节的流标识符(见StreamIdentifiers)。0是保留的，标明帧是与连接相关作为一个整体而不是一个单独的流。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;请求与响应复用&#34;&gt;&lt;a href=&#34;#请求与响应复用&#34; class=&#34;headerlink&#34; title=&#34;请求与响应复用&#34;&gt;&lt;/a&gt;请求与响应复用&lt;/h3&gt;&lt;p&gt;在HTTP1.1中，客户端要想发起多个并行请求以提升性能，则必须使用多个TCP连接，这种对TCP效率低下的利用，在HTTP&amp;#x2F;2中得到改善。二进制分帧层将HTTP消息分解为互不依赖的帧，然后交错发送，最后再在另一端把它们重新组装起来。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://developers.google.com/web/fundamentals/performance/http2/images/multiplexing01.svg&#34; alt=&#34;http2-reusing&#34;&gt;&lt;/p&gt;
&lt;p&gt;在上图中，流1和流3交错在同一个TCP连接上并行运行。这种机制带来了下面一些具体的提升：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请求之间交错且互不影响&lt;/li&gt;
&lt;li&gt;响应之间交错且互不影响&lt;/li&gt;
&lt;li&gt;可以使用一个连接并行发送多个请求和响应&lt;/li&gt;
&lt;li&gt;不必再为了优化HTTP1.1性能做雪碧图、分片等骚操作&lt;/li&gt;
&lt;li&gt;一定程度上解决了线头阻塞问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;流控制&#34;&gt;&lt;a href=&#34;#流控制&#34; class=&#34;headerlink&#34; title=&#34;流控制&#34;&gt;&lt;/a&gt;流控制&lt;/h3&gt;&lt;p&gt;HTTP&amp;#x2F;2的流控制类似TCP，但是更为精细和更靠近应用层。借助HTTP&amp;#x2F;2流控制，可以实现在用户暂停一个大型视频流后，减少或阻塞视频里带来的HTTP流量，又或者中间代理匹配上下游流量速率。HTTP&amp;#x2F;2流控制提出了一些规则，但&lt;strong&gt;并没有指出特定算法&lt;/strong&gt;，目标在于允许不需要协议改动的情况下改进流量控制算法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;流量控制是逐跳的，而不是头尾端点的&lt;/li&gt;
&lt;li&gt;流量控制是基于窗口更新帧的。接收端广播自己准备在流及整个连接过程中接收的字节大小。这是一个信用为基础的方案。&lt;/li&gt;
&lt;li&gt;流量控制是有方向性的，由接收端全权掌握。&lt;/li&gt;
&lt;li&gt;流量控制窗口初始值是65,535字节，不过接收方可以设置一个更大的值&lt;/li&gt;
&lt;li&gt;帧类型决定了是否适用流量控制规则。目前只有DATA帧受流量控制&lt;/li&gt;
&lt;li&gt;不能被禁用&lt;/li&gt;
&lt;li&gt;通过使用&lt;code&gt;WINDOW_UPDATE&lt;/code&gt;帧类型来实现&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;流优先级&#34;&gt;&lt;a href=&#34;#流优先级&#34; class=&#34;headerlink&#34; title=&#34;流优先级&#34;&gt;&lt;/a&gt;流优先级&lt;/h3&gt;&lt;p&gt;HTTP&amp;#x2F;2标准允许每个数据流都有一个关联的权重和依赖关系：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以向每个数据流分配一个介于1至256之间的整数。&lt;/li&gt;
&lt;li&gt;每个数据流与其他数据流之间可以存在显式依赖关系。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;优先级的目的是让客户端可以构建和传递“优先级树”，表明它倾向于如何接收响应。反过来，服务器可以使用此信息通过控制CPU、内存和其他资源的分配设定数据流处理的优先级。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://developers.google.com/web/fundamentals/performance/http2/images/stream_prioritization01.svg&#34; alt=&#34;http2-priority&#34;&gt;&lt;/p&gt;
&lt;p&gt;数据流依赖关系通过将另一个数据流的唯一标识符作为父项引用进行声明；如果忽略标识符，相应数据流将依赖于“根数据流”。分配时，会尽可能先向父数据流分配资源，然后再向其依赖项分配资源。共享相同父项的数据流按其权重比例分配资源。在上图中，数据流B获得的资源是数据流A所获资源的三分之一。&lt;/p&gt;
&lt;p&gt;新建流的终端可以在报头帧中包含优先级信息来对流标记优先级。对于已存在的流，优先级帧可以用来改变流优先级。&lt;/p&gt;
&lt;p&gt;更详细规范参考&lt;a href=&#34;https://tools.ietf.org/html/rfc7540#section-5.3&#34;&gt;RFC&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;帧类型&#34;&gt;&lt;a href=&#34;#帧类型&#34; class=&#34;headerlink&#34; title=&#34;帧类型&#34;&gt;&lt;/a&gt;帧类型&lt;/h3&gt;&lt;h4 id=&#34;DATA&#34;&gt;&lt;a href=&#34;#DATA&#34; class=&#34;headerlink&#34; title=&#34;DATA&#34;&gt;&lt;/a&gt;DATA&lt;/h4&gt;&lt;p&gt;数据帧，类型0x0，传递和流关联的任意变量值长度的字节数据。例如，一个或多个数据帧被用来携带HTTP请求或者响应的载体。数据帧定义了以下标记：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;END_STREAM (0x1) ：用来表示当前帧是确定的流发送的最后一帧。设置这个标记时流进入到一种半封闭状态或者关闭状态。&lt;/li&gt;
&lt;li&gt;END_SEGMENT (0x2) ：表示是当前端的最后一帧。代理端绝对不能跨越多个端的边界来合并帧，转发帧的时候代理端必须保持片段的边界。&lt;/li&gt;
&lt;li&gt;PADDED (0x8) ： 位4用来表示Pad Length字段是可见的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数据帧绝对需要与流相关联，且遵从流量控制。&lt;/p&gt;
&lt;h4 id=&#34;HEADERS&#34;&gt;&lt;a href=&#34;#HEADERS&#34; class=&#34;headerlink&#34; title=&#34;HEADERS&#34;&gt;&lt;/a&gt;HEADERS&lt;/h4&gt;&lt;p&gt;报头帧，类型0x1，用来打开一个流，并携带头部片段。能在流打开或者半封闭(远程)的状态下发送。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;+---------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|Pad Length? (8)|&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+-+-------------+-----------------------------------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|E|                 Stream Dependency? (31)                     |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+-+-------------+-----------------------------------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|  Weight? (8)  |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+-+-------------+-----------------------------------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|                   Header Block Fragment (*)                 ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+---------------------------------------------------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|                           Padding (*)                       ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+---------------------------------------------------------------+&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;它有以下标记：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;END_STREAM (0x1) ：用来标识这是发送端对确定的流发送的最后报头区块。设置这个标记将使流进入一种半封闭状态。后面伴随带有END_STREAM标记的延续帧的报头帧表示流的终止。延续帧不用来终止流。&lt;/li&gt;
&lt;li&gt;END_SEGMENT (0x2) ：表示这是当前端的最后一帧。中介端绝对不能跨片段来合并帧，且在转发帧的时候必须保持片段的边界。&lt;/li&gt;
&lt;li&gt;END_HEADERS (0x4) ：表示帧包含了整个的报头块，且后面没有延续帧。不带有END_HEADERS标记的报头帧在同个流上后面必须跟着延续帧。&lt;/li&gt;
&lt;li&gt;PADDED (0x8) ：表示Pad Length字段会呈现。&lt;/li&gt;
&lt;li&gt;PRIORITY (0x8) ：设置指示专用标记(E)，流依赖及权重字段将会呈现&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;PRIORITY&#34;&gt;&lt;a href=&#34;#PRIORITY&#34; class=&#34;headerlink&#34; title=&#34;PRIORITY&#34;&gt;&lt;/a&gt;PRIORITY&lt;/h4&gt;&lt;p&gt;优先级帧，类型0x2。明确了发送者建议的流的优先级，它可以在任意时间的流中发送。优先级帧不包含任何标记（flag）。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt; 0                   1                   2                   3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|E|                  Stream Dependency (31)                     |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+-+-------------+-----------------------------------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|   Weight (8)  |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+-+-------------+&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;RST-STREAM&#34;&gt;&lt;a href=&#34;#RST-STREAM&#34; class=&#34;headerlink&#34; title=&#34;RST_STREAM&#34;&gt;&lt;/a&gt;RST_STREAM&lt;/h4&gt;&lt;p&gt;类型0x3，允许流的立即终止。通常用来取消一个流，或表示有错误发生。绝不应该在idle状态下发出。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;0                   1                   2                   3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|                        Error Code (32)                        |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+---------------------------------------------------------------+&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;SETTINGS&#34;&gt;&lt;a href=&#34;#SETTINGS&#34; class=&#34;headerlink&#34; title=&#34;SETTINGS&#34;&gt;&lt;/a&gt;SETTINGS&lt;/h4&gt;&lt;p&gt;设置帧，类型0x4。包含影响如何与终端通信的设置参数，并且用来确认这些参数的接收。设置帧&lt;em&gt;必须&lt;/em&gt;由两个终端在连接开始的时候发送，并且&lt;em&gt;可以&lt;/em&gt;由各个终端在连接生存期的任意时间发送。&lt;/p&gt;
&lt;h4 id=&#34;PUSH-PROMISE&#34;&gt;&lt;a href=&#34;#PUSH-PROMISE&#34; class=&#34;headerlink&#34; title=&#34;PUSH_PROMISE&#34;&gt;&lt;/a&gt;PUSH_PROMISE&lt;/h4&gt;&lt;p&gt;推送承诺帧，类型0x5。用来在流发送者准备发送流之前告知对等端。包含了终端准备创建的长流的31位无符号标记以及提供附加上下文的报头的集合。通常在服务器中使用。推送承诺的接收端可以选择给推送承诺的发送端返回一个与被承诺的流标识符相关的RST_STREAM标记来拒绝接收承诺流。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;0                   1                   2                   3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;| [Pad High(8)] | [Pad Low (8)] |X|  Promised Stream ID (31)  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+---------------+---------------+-+-----------------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...    Promised Stream ID       | Header Block Fragment (*)   ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+-------------------------------+-------------------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|                   Header Block Fragment (*)                 ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+---------------------------------------------------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|                           Padding (*)                       ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+---------------------------------------------------------------+&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;PING&#34;&gt;&lt;a href=&#34;#PING&#34; class=&#34;headerlink&#34; title=&#34;PING&#34;&gt;&lt;/a&gt;PING&lt;/h4&gt;&lt;p&gt;类型0x6。从发送端测量最小的RTT时间的机制，同样也是一种检测连接是否可用的方法。PING帧可以被任何终端发送，且必须在载体中包含一个8字节长度的任意数据。&lt;/p&gt;
&lt;h4 id=&#34;GOAWAY&#34;&gt;&lt;a href=&#34;#GOAWAY&#34; class=&#34;headerlink&#34; title=&#34;GOAWAY&#34;&gt;&lt;/a&gt;GOAWAY&lt;/h4&gt;&lt;p&gt;超时帧，类型0x7。通知远端对等端不要在这个连接上建立新流。超时帧可以由客户端或者服务端发送。发送后，可以针对新的流创建一个新的连接。这个帧的目的是允许终端优雅的停止接收新的流，但仍可以继续完成之前已经建立的流的处理。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;0                   1                   2                   3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|X|                  Last-Stream-ID (31)                        |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+-+-------------------------------------------------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|                      Error Code (32)                          |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+---------------------------------------------------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|                  Additional Debug Data (*)                    |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+---------------------------------------------------------------+&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;32位的错误码中包含了关闭连接的原因。&lt;/p&gt;
&lt;h4 id=&#34;WINDOW-UPDATE&#34;&gt;&lt;a href=&#34;#WINDOW-UPDATE&#34; class=&#34;headerlink&#34; title=&#34;WINDOW_UPDATE&#34;&gt;&lt;/a&gt;WINDOW_UPDATE&lt;/h4&gt;&lt;p&gt;窗口更新帧，类型0x8。用来实现流控制。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;0                   1                   2                   3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|X|              Window Size Increment (31)                     |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+-+-------------------------------------------------------------+&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;CONTINUATION&#34;&gt;&lt;a href=&#34;#CONTINUATION&#34; class=&#34;headerlink&#34; title=&#34;CONTINUATION&#34;&gt;&lt;/a&gt;CONTINUATION&lt;/h4&gt;&lt;p&gt;延续帧，类型0x9，用来延续一个报头区块。在END_HEADERS标记前，可以在HEADERS帧、PUSH_PROMISE帧以及CONTINUATION帧后接续任意数量的CONTINUATION帧。它包含一个flag：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;END_HEADERS (0x4) : 设置指示这个帧的报头区块的终止&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;延续帧必须与流相关联。如果延续帧的相关流表示字段是0x0，终端必须响应一个类型为协议错误的连接错误。&lt;/p&gt;
&lt;h3 id=&#34;服务器推送&#34;&gt;&lt;a href=&#34;#服务器推送&#34; class=&#34;headerlink&#34; title=&#34;服务器推送&#34;&gt;&lt;/a&gt;服务器推送&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://developers.google.com/web/fundamentals/performance/http2/images/push01.svg&#34; alt=&#34;http2-server-push&#34;&gt;&lt;/p&gt;
&lt;p&gt;HTTP&amp;#x2F;2中的服务器推送打破了原来HTTP中的请求-响应语义（对原有语义也做了&lt;a href=&#34;https://tools.ietf.org/html/rfc7540#section-8.1&#34;&gt;改进&lt;/a&gt;），支持服务器可以对一个客户端请求发送多个响应。在原先的HTTP1.1中我们可能会将重要资源内联到网页中，减少网络延迟，这实际上等同于HTTP&amp;#x2F;2中的强制推送。在HTTP&amp;#x2F;2中的服务器推送还有下面一些功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;推送的资源能被客户端缓存（服务器也只能推送可被缓存的资源）&lt;/li&gt;
&lt;li&gt;在不同页面之间可以重用&lt;/li&gt;
&lt;li&gt;可以由服务器设定优先级&lt;/li&gt;
&lt;li&gt;可以被客户端拒绝&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;服务器推送数据流由PUSH_PROMISE帧发起，需要先于请求推送资源的响应数据传输。实现上的策略是先于父响应（即，DATA 帧）发送所有PUSH_PROMISE帧，其中包含所承诺资源的HTTP头部。客户端接收到PUSH_PROMISE帧后，它可以根据自身情况选择接受拒绝（通过RST_STREAM帧）数据流。（例如，如果资源已经位于缓存中）&lt;/p&gt;
&lt;p&gt;客户端完全掌控服务器推送的使用方式。客户端可以限制并行推送的数据流数量；调整初始的流控制窗口以控制在数据流首次打开时推送的数据量；或完全停用服务器推送。这些在HTTP&amp;#x2F;2连接开始时通过SETTINGS帧传输，可能随时更新。&lt;/p&gt;
&lt;h3 id=&#34;头部压缩&#34;&gt;&lt;a href=&#34;#头部压缩&#34; class=&#34;headerlink&#34; title=&#34;头部压缩&#34;&gt;&lt;/a&gt;头部压缩&lt;/h3&gt;&lt;p&gt;在HTTP1.1中，头部数据使用以纯文本的形式传输，所占空间较大，在使用HTTP Cookie后，更是会达到上千字节。为了减少此开销和提升性能，HTTP&amp;#x2F;2使用专门设计的&lt;a href=&#34;https://httpwg.github.io/specs/rfc7541.html&#34;&gt;HPACK&lt;/a&gt;压缩格式压缩请求和响应头部，这种格式通过静态霍夫曼编码对传输的头部字段进行编码。HPACK要求客户端和服务器同时维护和更新一个包含之前见过的标头字段的索引列表，利用之前传输值的索引列表，我们可以通过传输索引值的方式对重复值进行编码，索引值可用于有效查询和重构完整的头部键值对。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://developers.google.com/web/fundamentals/performance/http2/images/header_compression01.svg&#34; alt=&#34;hpack&#34;&gt;&lt;/p&gt;
&lt;p&gt;作为一种进一步优化方式，HPACK压缩上下文包含一个&lt;a href=&#34;https://httpwg.org/specs/rfc7541.html#static.table.definition&#34;&gt;静态表&lt;/a&gt;和一个动态表：静态表在规范中定义，并提供了一个所有连接都可能使用的常用HTTP头部字段列表；动态表最初为空，将根据在特定连接内交换的值进行更新。&lt;/p&gt;
&lt;p&gt;早期版本的HTTP&amp;#x2F;2和SPDY使用的&lt;a href=&#34;https://tools.ietf.org/html/rfc1951&#34;&gt;DEFLATE&lt;/a&gt;对头部进行压缩，但是在2012年夏天出现了&lt;a href=&#34;https://en.wikipedia.org/w/index.php?title=CRIME&amp;oldid=660948120&#34;&gt;CRIME&lt;/a&gt;这种安全攻击。因此，之后HTTP&amp;#x2F;2的头部压缩采用了专门设计的HPACK方案。在使用HPACK后，初次访问后的压缩率能达到70%~80%，甚至90%+。&lt;/p&gt;
&lt;h2 id=&#34;支持度与调试&#34;&gt;&lt;a href=&#34;#支持度与调试&#34; class=&#34;headerlink&#34; title=&#34;支持度与调试&#34;&gt;&lt;/a&gt;支持度与调试&lt;/h2&gt;&lt;p&gt;支持度上，&lt;a href=&#34;https://caniuse.com/#search=http%2F2&#34;&gt;主流浏览器&lt;/a&gt;和&lt;a href=&#34;https://github.com/http2/http2-spec/wiki/Implementations&#34;&gt;服务器程序&lt;/a&gt;都已支持。你也可以访问&lt;a href=&#34;https://http2.akamai.com/demo&#34;&gt;这个网址&lt;/a&gt;体验HTTP&amp;#x2F;2和HTTP1.1在load大量图片时的延迟对比。&lt;/p&gt;
&lt;p&gt;如果你想确认当前网页中的哪些请求是使用的HTTP&amp;#x2F;2，可以在chrome devTools下的network选项卡里查看“Protocol”列（未发现此列的可以在表头右键找到并勾选显示），其中HTTP&amp;#x2F;2将显示为h2。正如之前所说，支持HTTP&amp;#x2F;2的浏览器会和服务器使用特定协议协商，对于不支持HTTP&amp;#x2F;2的情况，会自动会退到HTTP1.1版本。&lt;/p&gt;
&lt;p&gt;尽管HTTP&amp;#x2F;2使用二进制传输数据，然而浏览器为我们掩盖了实现细节。如果想要深入查看甚至是调试二进制分帧层的功能，如何去debug呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Wireshark&lt;/li&gt;
&lt;li&gt;curl&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/bradfitz/http2/tree/master/h2i&#34;&gt;h2i&lt;/a&gt;，不过这个好像已经不维护了&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;TLS调优&#34;&gt;&lt;a href=&#34;#TLS调优&#34; class=&#34;headerlink&#34; title=&#34;TLS调优&#34;&gt;&lt;/a&gt;TLS调优&lt;/h2&gt;&lt;p&gt;目前各大浏览器只在&lt;code&gt;https://&lt;/code&gt;的基础上支持HTTP&amp;#x2F;2，即在TLS层之上的HTTP&amp;#x2F;2。多出的TLS的层也是会增加时延和成本的，具体涉及到的TLS握手、会话和加密套件协商过程还有优化空间，如减少证书层级、减少证书大小等。其余优化方向可以查看参考中一些文章介绍。&lt;/p&gt;
&lt;h2 id=&#34;之前的优化还应该继续用么&#34;&gt;&lt;a href=&#34;#之前的优化还应该继续用么&#34; class=&#34;headerlink&#34; title=&#34;之前的优化还应该继续用么&#34;&gt;&lt;/a&gt;之前的优化还应该继续用么&lt;/h2&gt;&lt;h3 id=&#34;继续保持的&#34;&gt;&lt;a href=&#34;#继续保持的&#34; class=&#34;headerlink&#34; title=&#34;继续保持的&#34;&gt;&lt;/a&gt;继续保持的&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;减少DNS查询&lt;ul&gt;
&lt;li&gt;减少域名&lt;/li&gt;
&lt;li&gt;启用预读：dns-prefetch&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用CDN&lt;/li&gt;
&lt;li&gt;避免重定向&lt;/li&gt;
&lt;li&gt;资源压缩&lt;ul&gt;
&lt;li&gt;代码压缩（JS、HTML、CSS）&lt;/li&gt;
&lt;li&gt;资源压缩（图片、字体、音频、视频）&lt;/li&gt;
&lt;li&gt;文本压缩（Gzip）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;不再需要的&#34;&gt;&lt;a href=&#34;#不再需要的&#34; class=&#34;headerlink&#34; title=&#34;不再需要的&#34;&gt;&lt;/a&gt;不再需要的&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;分片与域名散列：HTTP&amp;#x2F;2对于一个域名只使用一个TCP连接，分片反而会浪费资源，同时也会影响流控制、头部压缩的表现。&lt;/li&gt;
&lt;li&gt;资源打包合并：HTTP&amp;#x2F;2支持多路复用，资源合并会降低缓存利用率，且会让开发流程更复杂。（&lt;a href=&#34;https://github.com/pikapkg/snowpack&#34;&gt;snowpack&lt;/a&gt;了解一下）&lt;/li&gt;
&lt;li&gt;资源内联：可以由服务器推送解决这类需求，资源内联一方面无法缓存，另一方面会让页面代码更大&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;常见问题&#34;&gt;&lt;a href=&#34;#常见问题&#34; class=&#34;headerlink&#34; title=&#34;常见问题&#34;&gt;&lt;/a&gt;常见问题&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Q: 既然HTTP&amp;#x2F;2是在SPDY工作基础上设计的，那HTTP&amp;#x2F;2推出后，SPDY还使用吗&lt;/li&gt;
&lt;li&gt;A: Google公开声明了他们会在2016年移除Chrome里对SPDY和NPN的支持，并且极力推动服务器迁移至HTTP&amp;#x2F;2。2016年2月他们&lt;a href=&#34;https://blog.chromium.org/2016/02/transitioning-from-spdy-to-http2.html&#34;&gt;声明&lt;/a&gt;了SPDY和NPN会在Chrome 51之后被移除。&lt;/li&gt;
&lt;li&gt;Q: 这个协议是否只对大型网站有效&lt;/li&gt;
&lt;li&gt;A: 由于缺乏内容分发网络，小网站的网络延迟往往较高，而多路复用的能力可以极大的改善在高网络延迟下的体验。&lt;/li&gt;
&lt;li&gt;Q: 基于TLS让速度变得更慢&lt;/li&gt;
&lt;li&gt;A: 正如上一节提到的，TLS的握手确实增加了额外的开销，也有越来越多的方案提出来减少TLS往返的时间。TLS同时也会更多消耗CPU等资源，更多例子可见&lt;a href=&#34;https://istlsfastyet.com/&#34;&gt;istlsfastyet.com&lt;/a&gt;。不过一方面HTTP&amp;#x2F;2并不强制要求基于TLS，另一方面HTTP&amp;#x2F;2带来的性能提升使得即使基于TLS，通常也会比HTTP1.1更快&lt;/li&gt;
&lt;li&gt;Q: 为什么不使用文本传输&lt;/li&gt;
&lt;li&gt;A: 的确，如果可以直接读出协议内容，那么调试和追踪都会变得更为简单。但是二进制带来的灵活度更高，何况浏览器会自动帮你解析。&lt;/li&gt;
&lt;li&gt;Q: 看起来，HTTP1.1中的一些短板并没有改彻底&lt;/li&gt;
&lt;li&gt;A: 实际上，设计HTTP&amp;#x2F;2之初的目标就包括向前兼容HTTP&amp;#x2F;1.1的范式，来保证升级协议也不用重写底层的很多东西。老的HTTP功能，如协议头、状态码、可怕的Cookie，这些都保留了。性能优化更多通过增加了一个中间分帧层解决的。&lt;/li&gt;
&lt;li&gt;Q: 目前使用的广泛程度如何&lt;/li&gt;
&lt;li&gt;A: 在2015年年底大多数浏览器就已经支持HTTP&amp;#x2F;2，目前约96%的浏览器支持HTTP&amp;#x2F;2，同时约46%的网站支持HTTP&amp;#x2F;2。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;后续&#34;&gt;&lt;a href=&#34;#后续&#34; class=&#34;headerlink&#34; title=&#34;后续&#34;&gt;&lt;/a&gt;后续&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;官网在给出HTTP&amp;#x2F;2规范时，也曾预计要10年时间和HTTP1.1并存，在这个期间，Web优化的思路也可能会有调整&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.openssl.org/index.php/TLS1.3&#34;&gt;TLS1.3&lt;/a&gt;。2020年2月的&lt;a href=&#34;https://tools.ietf.org/html/rfc8740&#34;&gt;RFC8740&lt;/a&gt;中给出了基于TLS1.3的HTTP&amp;#x2F;2的实现建议。&lt;/li&gt;
&lt;li&gt;既然TCP容易遇到线头阻塞问题，那么能不用使用UDP呢？Google提出的&lt;a href=&#34;https://www.chromium.org/quic&#34;&gt;QUIC&lt;/a&gt;（Quick UDP Internet Connection）它在很大程度上继承了SPDY的衣钵。QUIC可以理解成TCP + TLS + HTTP&amp;#x2F;2替代实现。&lt;/li&gt;
&lt;li&gt;2018年10月，互联网工程任务组HTTP及QUIC工作小组正式将基于QUIC协议的HTTP（英语：HTTP over QUIC）重命名为&lt;a href=&#34;https://datatracker.ietf.org/doc/draft-ietf-quic-http/&#34;&gt;HTTP&amp;#x2F;3&lt;/a&gt;以为确立下一代规范做准备。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考&#34;&gt;&lt;a href=&#34;#参考&#34; class=&#34;headerlink&#34; title=&#34;参考&#34;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://imququ.com/post/http2-new-opportunities-and-challenges.html&#34;&gt;HTTP&amp;#x2F;2：新的机遇与挑战&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://imququ.com/post/http2-resource.html&#34;&gt;HTTP&amp;#x2F;2 资料汇总&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://http2.github.io/&#34;&gt;HTTP&amp;#x2F;2官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://httpwg.org/specs/rfc7540.html&#34;&gt;HTTP&amp;#x2F;2规范&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://httpwg.github.io/specs/rfc7541.html&#34;&gt;HPACK规范&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/web/fundamentals/performance/http2&#34;&gt;HTTP&amp;#x2F;2简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ye11ow.gitbooks.io/http2-explained/content/&#34;&gt;HTTP&amp;#x2F;2讲解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://imququ.com/post/header-compression-in-http2.html&#34;&gt;HTTP&amp;#x2F;2 头部压缩技术介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fex-team/http2-spec/blob/master/HTTP2%E4%B8%AD%E8%8B%B1%E5%AF%B9%E7%85%A7%E7%89%88(06-29).md&#34;&gt;HTTP&amp;#x2F;2草案13中英对照&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.mnot.net/talks/h2fe/#8&#34;&gt;HTTP&amp;#x2F;2 for Front-End Developers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://velocityconf.com/devops-web-performance-2015/public/schedule/detail/42385&#34;&gt;HTTP&amp;#x2F;2 is here, let’s optimize!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://caniuse.com/#search=HTTP%2F2&#34;&gt;HTTP&amp;#x2F;2支持度&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/http2/http2-spec/wiki/Implementations&#34;&gt;HTTP&amp;#x2F;2实现列表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.chainnews.com/articles/401950499827.htm&#34;&gt;HTTP发展史梳理笔记&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://http2.akamai.com/demo&#34;&gt;HTTP&amp;#x2F;2 is the future of the Web | Akamai&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="HTTP" />
        <category term="HTTP/2" />
        <category term="SPDY" />
        <category term="QUIC" />
        <updated>2020-06-29T14:41:51.000Z</updated>
    </entry>
    <entry>
        <id>http://shenlvmeng.github.com/blog/2018/09/13/http-intro-note/</id>
        <title>《图解HTTP》整理</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2018/09/13/http-intro-note/"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;读完了《图解HTTP》，就算是对计算机网络和HTTP部分内容做了个温习吧。同步做了整理，以便加强记忆和后面回顾。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;概述&#34;&gt;&lt;a href=&#34;#概述&#34; class=&#34;headerlink&#34; title=&#34;概述&#34;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;请求报文构成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方法&lt;/li&gt;
&lt;li&gt;URI（绝对或是相对）&lt;/li&gt;
&lt;li&gt;HTTP版本&lt;/li&gt;
&lt;li&gt;请求首部&lt;/li&gt;
&lt;li&gt;内容实体&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;响应报文构成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP版本号&lt;/li&gt;
&lt;li&gt;状态码&lt;/li&gt;
&lt;li&gt;状态码原语&lt;/li&gt;
&lt;li&gt;响应头部&lt;/li&gt;
&lt;li&gt;响应主体&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;请求URI是服务器本身时，可以用&lt;code&gt;*&lt;/code&gt;代替URI。&lt;/p&gt;
&lt;p&gt;可用的方法列表：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GET 获取资源&lt;/li&gt;
&lt;li&gt;POST 传输信息&lt;/li&gt;
&lt;li&gt;PUT 传输文件，&lt;strong&gt;没有用户验证机制&lt;/strong&gt;，很少用到&lt;/li&gt;
&lt;li&gt;DELETE 删除文件，同上，很少用到&lt;/li&gt;
&lt;li&gt;HEAD 获得响应头部，不返回主体&lt;/li&gt;
&lt;li&gt;OPTIONS 询问支持方法&lt;/li&gt;
&lt;li&gt;CONNECT 用来建立HTTPS连接的隧道&lt;/li&gt;
&lt;li&gt;TRACE 追踪路径上的所有服务器节点，很少用到&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中后面三个是HTTP1.1才开始支持的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;持久化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在HTTP1.1后，HTTP建立的TCP连接默认是长连接（&lt;code&gt;keep-alive&lt;/code&gt;），避免不必要的多次TCP握手和挥手。在此基础上，客户端可以同时向服务端发起多个资源请求。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;状态化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HTTP本身是无状态的。通过cookie实现状态化，cookie通过服务端在响应头部的&lt;code&gt;set-cookie&lt;/code&gt;字段下发，设置信息、使用范围、过期时间等内容。客户端在使用范围内的请求默认会携带上cookie信息。&lt;/p&gt;
&lt;h2 id=&#34;HTTP报文结构&#34;&gt;&lt;a href=&#34;#HTTP报文结构&#34; class=&#34;headerlink&#34; title=&#34;HTTP报文结构&#34;&gt;&lt;/a&gt;HTTP报文结构&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;请求首部和主体通过CR+LF分割开来&lt;/li&gt;
&lt;li&gt;报文编码&lt;ul&gt;
&lt;li&gt;编码压缩&lt;ul&gt;
&lt;li&gt;gzip （GNU zip）&lt;/li&gt;
&lt;li&gt;compress（UNIX compress）&lt;/li&gt;
&lt;li&gt;deflate（zlib）&lt;/li&gt;
&lt;li&gt;indentity（不压缩）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分块发送&lt;/li&gt;
&lt;li&gt;多部分发送（multipart）&lt;ul&gt;
&lt;li&gt;multipart&amp;#x2F;form-data 表单文件上传，用boundary字符&lt;code&gt;--&lt;/code&gt;表示新的part的开始&lt;/li&gt;
&lt;li&gt;multipart&amp;#x2F;byterange 配合206响应只包含了部分数据时使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;部分发送&lt;ul&gt;
&lt;li&gt;Range指定字节范围&lt;/li&gt;
&lt;li&gt;206响应状态码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内容协商&lt;ul&gt;
&lt;li&gt;双方就合适的语言、字符集、编码方式、过期时间进行协商&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;HTTP状态码&#34;&gt;&lt;a href=&#34;#HTTP状态码&#34; class=&#34;headerlink&#34; title=&#34;HTTP状态码&#34;&gt;&lt;/a&gt;HTTP状态码&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1xx 这一类型的状态码，代表请求已被接受，需要继续处理&lt;ul&gt;
&lt;li&gt;100 Continue：客户端应当继续发送请求。&lt;/li&gt;
&lt;li&gt;101 Switching Protocals：将通过Upgrade消息头通知客户端采用不同的协议来完成这个请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2xx 成功：这一类型的状态码，代表请求已成功被服务器接收、理解、并接受。&lt;ul&gt;
&lt;li&gt;200 OK：请求已成功，在方法时HEAD时不返回响应主体&lt;/li&gt;
&lt;li&gt;204 No Content：服务器成功处理了请求，但不需要返回任何实体内容，&lt;strong&gt;用户浏览器应保留发送了该请求的页面&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;205 Reset Content：和204的唯一不同是返回此状态码的响应要求请求者重置文档视图&lt;/li&gt;
&lt;li&gt;206 Partial Content：服务器已经成功处理了部分GET请求。请求必须包含Range头信息来指示客户端希望得到的内容范围，返回使用&lt;code&gt;Content-Range&lt;/code&gt;多用于下载工具&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;3xx 重定向：这类状态码代表需要客户端采取进一步的操作才能完成请求。通常，这些状态码用来重定向，后续的请求地址在本次响应的Location域中指明。&lt;ul&gt;
&lt;li&gt;300 Multiple Choices：被请求的资源有一系列可供选择的回馈信息，每个都有自己特定的地址和浏览器驱动的商议信息。用户或浏览器能够自行选择一个首选的地址进行重定向。&lt;/li&gt;
&lt;li&gt;301 Moved Permanently：被请求的资源已永久移动到新位置，建议使用Location中的新地址&lt;/li&gt;
&lt;li&gt;302 Found：请求的资源现在临时从不同的URI响应请求&lt;/li&gt;
&lt;li&gt;303 See Other：和302的区别是，客户端&lt;strong&gt;应当采用GET的方式&lt;/strong&gt;访问新的资源&lt;/li&gt;
&lt;li&gt;304 Not Modified：如果客户端发送了一个带条件（包括缓存相关的请求头部）的GET请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变&lt;/li&gt;
&lt;li&gt;305 Use Proxy：被请求的资源必须通过指定的代理才能被访问&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;4xx 客户端错误：客户端发生了错误&lt;ul&gt;
&lt;li&gt;400 Bad Request：由于包含语法错误，当前请求无法被服务器理解&lt;/li&gt;
&lt;li&gt;401 Unauthorized：当前请求需要用户验证，或用户未通过验证。&lt;/li&gt;
&lt;li&gt;403 Forbidden：服务器已经理解请求，但是拒绝执行它&lt;/li&gt;
&lt;li&gt;404 Not Found：资源未被在服务器上发现&lt;/li&gt;
&lt;li&gt;405 Method Not Allowed：请求行中指定的请求方法不能被用于请求相应的资源，响应中必须返回一个Allow头信息用以表示出当前资源能够接受的请求方法的列表&lt;/li&gt;
&lt;li&gt;406 Not Acceptable：请求的资源的内容特性无法满足请求头中的条件&lt;/li&gt;
&lt;li&gt;413 Request Entity Too Large&lt;/li&gt;
&lt;li&gt;414 Request-URI Too Long&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;5xx 服务器错误：服务器在处理请求的过程中有错误发生&lt;ul&gt;
&lt;li&gt;500 Internal Server Error：这个问题会在服务器的代码出错时出现&lt;/li&gt;
&lt;li&gt;501 Not Implemented：服务器不支持当前请求所需要的某个功能&lt;/li&gt;
&lt;li&gt;502 Bad GateWay：作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应&lt;/li&gt;
&lt;li&gt;503 Service Unavailable：临时的服务器维护或者过载。这个状况是临时的，并且将在一段时间以后恢复。&lt;/li&gt;
&lt;li&gt;504 Gateway Timeout：作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器或者辅助服务器收到响应&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;协作机制&#34;&gt;&lt;a href=&#34;#协作机制&#34; class=&#34;headerlink&#34; title=&#34;协作机制&#34;&gt;&lt;/a&gt;协作机制&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;代理（Proxy），单纯转发HTTP请求，会在响应头部的&lt;code&gt;Via&lt;/code&gt;字段留下痕迹&lt;/li&gt;
&lt;li&gt;网关（Gateway），隔绝服务器和客户端，有安全、计费等逻辑&lt;/li&gt;
&lt;li&gt;隧道（tunnel），基于协议搭建，保证传输安全，对用户侧透明&lt;/li&gt;
&lt;li&gt;缓存（Cache），本地、服务端二级缓存，加快响应时间，有过期时间&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;报文头部&#34;&gt;&lt;a href=&#34;#报文头部&#34; class=&#34;headerlink&#34; title=&#34;报文头部&#34;&gt;&lt;/a&gt;报文头部&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;首部用来进行连接的各种信息描述。每个首部的字段用字段名和值组成，两者用&lt;code&gt;:&lt;/code&gt;隔开。&lt;/li&gt;
&lt;li&gt;首部分为端到端和逐跳两类，前者在报文转发的整个过程都保留，后者在转发后就会丢弃。典型的逐条首部有&lt;code&gt;Connection&lt;/code&gt;, &lt;code&gt;Keep-Alive&lt;/code&gt;, &lt;code&gt;Transfer-Encoding&lt;/code&gt;, &lt;code&gt;Upgrade&lt;/code&gt;等&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;通用首部&#34;&gt;&lt;a href=&#34;#通用首部&#34; class=&#34;headerlink&#34; title=&#34;通用首部&#34;&gt;&lt;/a&gt;通用首部&lt;/h3&gt;&lt;h4 id=&#34;Cache-Control&#34;&gt;&lt;a href=&#34;#Cache-Control&#34; class=&#34;headerlink&#34; title=&#34;Cache-Control&#34;&gt;&lt;/a&gt;Cache-Control&lt;/h4&gt;&lt;p&gt;客户端和服务端协商缓存机制。配合下面一些首部字段使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Etag&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Last-Modified&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Expires&lt;/code&gt;（HTTP1.0）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Pragma&lt;/code&gt;（HTTP1.0）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Age&lt;/code&gt;（HTTP1.0）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;If-None-Match&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;If-Not-Modified-Since&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Cache-Control&lt;/code&gt;有下面一些可配置项。&lt;/p&gt;
&lt;p&gt;缓冲能力上，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private，缓存只针对当前用户而言&lt;/li&gt;
&lt;li&gt;public，缓存对所有用户生效&lt;/li&gt;
&lt;li&gt;no-cache，始终对缓存进行过期验证&lt;/li&gt;
&lt;li&gt;no-store，不允许缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;过期时间上，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;min-fresh，返回指定时间范围内的非过期资源&lt;/li&gt;
&lt;li&gt;max-stale，返回指定时间范围内过期、非过期资源&lt;/li&gt;
&lt;li&gt;max-age，单位：秒，最大缓存时间&lt;/li&gt;
&lt;li&gt;s-max-age，同上，只用于CDN缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;二次验证上，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;only-if-cached，强制从缓存服务器中获取内容&lt;/li&gt;
&lt;li&gt;immutable，一旦缓存不可更改&lt;/li&gt;
&lt;li&gt;must-revalidate，即使本地已缓存，仍要求检查CDN缓存&lt;/li&gt;
&lt;li&gt;proxy-revalidate，缓存服务器必须检查源内容是否改变&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Connection&#34;&gt;&lt;a href=&#34;#Connection&#34; class=&#34;headerlink&#34; title=&#34;Connection&#34;&gt;&lt;/a&gt;Connection&lt;/h4&gt;&lt;p&gt;管理连接，主要有两个用途。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指定不希望转发给代理的字段&lt;/li&gt;
&lt;li&gt;管理持久连接。使用&lt;code&gt;Connection: Keep-Alive&lt;/code&gt;建立连接（HTTP1.1默认行为），使用&lt;code&gt;Connection: Close&lt;/code&gt;终止连接&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Date&#34;&gt;&lt;a href=&#34;#Date&#34; class=&#34;headerlink&#34; title=&#34;Date&#34;&gt;&lt;/a&gt;Date&lt;/h4&gt;&lt;p&gt;报文创建时间。行如“Date: Tue, 03 Jul 2012 04:31:12 GMT”&lt;/p&gt;
&lt;h4 id=&#34;Pragma&#34;&gt;&lt;a href=&#34;#Pragma&#34; class=&#34;headerlink&#34; title=&#34;Pragma&#34;&gt;&lt;/a&gt;Pragma&lt;/h4&gt;&lt;p&gt;历史遗留字段。&lt;code&gt;Pragma: no-cache&lt;/code&gt;等同于&lt;code&gt;Cache-Control: no-cache&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;除此外还有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Trailer，说明报文主体中记录的首部字段&lt;/li&gt;
&lt;li&gt;Transfer-Encoding，分段传输的主体编码&lt;/li&gt;
&lt;li&gt;Upgrade，切换协议，&lt;strong&gt;配合&lt;code&gt;Connection: Upgrade&lt;/code&gt;使用&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Via，标明沿途的整条路径&lt;/li&gt;
&lt;li&gt;Warning，缓存相关警告&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;请求首部&#34;&gt;&lt;a href=&#34;#请求首部&#34; class=&#34;headerlink&#34; title=&#34;请求首部&#34;&gt;&lt;/a&gt;请求首部&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Accept 接受文件的类型，类型间可以指定&lt;code&gt;q=x&lt;/code&gt;表示权重值，x的取值在0到1之间。下同&lt;/li&gt;
&lt;li&gt;Accept-Charset 可以接受的文件字符集&lt;/li&gt;
&lt;li&gt;Accept-Encoding 可以接受的文件编码，有gzip，compress，deflate，indentity几种&lt;/li&gt;
&lt;li&gt;Accept-Language 可接受的语言&lt;/li&gt;
&lt;li&gt;Authorization 服务端需要的用户验证信息&lt;/li&gt;
&lt;li&gt;Age 从缓存实体产生到现在经历的时间&lt;/li&gt;
&lt;li&gt;Expect 期望的服务端返回状态码，服务端无法满足时返回417状态码，客户端等待服务端100响应时发送的请求都要带上该字段&lt;/li&gt;
&lt;li&gt;Host 服务器的主机名，通常是请求资源的URL&lt;/li&gt;
&lt;li&gt;If-Match 需要匹配的Etag，不满足时返回412，表示不满足条件&lt;/li&gt;
&lt;li&gt;If-Modified-Since 返回指定日期后的新内容，否则返回304&lt;/li&gt;
&lt;li&gt;If-Unmodified-Since 类似上&lt;/li&gt;
&lt;li&gt;If-Range 类似If-Match不过是范围匹配&lt;/li&gt;
&lt;li&gt;Max-Forwards 报文最多转发次数，通常配合TRACE方法使用&lt;/li&gt;
&lt;li&gt;Proxy-Authorization 代理服务端需要的用户验证信息&lt;/li&gt;
&lt;li&gt;Range 请求资源的部分内容，一般用在多线程下载（客户端发起）&lt;/li&gt;
&lt;li&gt;Referer 当前请求从哪个地址发起&lt;/li&gt;
&lt;li&gt;User-Agent 请求发起终端信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;响应首部&#34;&gt;&lt;a href=&#34;#响应首部&#34; class=&#34;headerlink&#34; title=&#34;响应首部&#34;&gt;&lt;/a&gt;响应首部&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Accept-Ranges，表示服务器是否支持Range请求，支持时值为bytes，否则是none&lt;/li&gt;
&lt;li&gt;Age，表示缓存到目前为止过了多久（HTTP1.0）&lt;/li&gt;
&lt;li&gt;Etag，资源的唯一标识，分为强Etag和弱Etag&lt;/li&gt;
&lt;li&gt;Location，用在3xx的请求中，表示客户端需要重定向到的新地址&lt;/li&gt;
&lt;li&gt;WWW-Authentication&amp;#x2F;Proxy-Authentication，服务器、代理使用的认证类型&lt;/li&gt;
&lt;li&gt;Server，服务器信息&lt;/li&gt;
&lt;li&gt;Vary，与Vary指定首部字段同名的请求才会命中缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;实体首部&#34;&gt;&lt;a href=&#34;#实体首部&#34; class=&#34;headerlink&#34; title=&#34;实体首部&#34;&gt;&lt;/a&gt;实体首部&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Allow 允许的访问方法&lt;/li&gt;
&lt;li&gt;Content-Encoding&amp;#x2F;Content-Language&amp;#x2F;Content-Length&amp;#x2F; 内容的编码、语言、长度、类型&lt;/li&gt;
&lt;li&gt;Content-Location 内容的位置，通常在和访问URI时会用到&lt;/li&gt;
&lt;li&gt;Content-MD5 内容MD5编码，便于和客户端编码后进行对比，防止内容篡改&lt;/li&gt;
&lt;li&gt;Content-Range 用于部分请求&lt;/li&gt;
&lt;li&gt;Content-Type 文件类型，包括MIME type和字符集&lt;/li&gt;
&lt;li&gt;Expires&amp;#x2F;Last-Modified 文件的过期时间和上次修改时间，用户判断缓存是否过期&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除此之外，还有和Cookie相关的两个头部，它们来自网景公司对于Cookie的设计。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Set-Cookie，服务端下发设置Cookie信息。包含下列信息&lt;ul&gt;
&lt;li&gt;expires，过期时间&lt;/li&gt;
&lt;li&gt;path，适用路径&lt;/li&gt;
&lt;li&gt;domain，适用域名&lt;/li&gt;
&lt;li&gt;secure，限制https才会携带Cookie&lt;/li&gt;
&lt;li&gt;HttpOnly，限制JS脚本访问Cookie&lt;/li&gt;
&lt;li&gt;下发的cookie内容&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cookie，客户端期望的cookie内容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外还有一些常用的首部字段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;X-Frame-Options，规定页面在iframe中的呈现方式&lt;ul&gt;
&lt;li&gt;DENY 禁止访问&lt;/li&gt;
&lt;li&gt;SAMEORIGIN 仅允许同源访问&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;X-XSS-Protection，为1时开启XSS防御&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;不建议使用”X-“开头的方式拓展非标准首部&lt;/strong&gt;。 &lt;/p&gt;
&lt;h2 id=&#34;HTTPS简介&#34;&gt;&lt;a href=&#34;#HTTPS简介&#34; class=&#34;headerlink&#34; title=&#34;HTTPS简介&#34;&gt;&lt;/a&gt;HTTPS简介&lt;/h2&gt;&lt;p&gt;HTTP缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用明文 -&amp;gt; 通信内容可以被窃听 –HTTPS–&amp;gt; 加密通信内容&lt;/li&gt;
&lt;li&gt;不能验证身份 -&amp;gt; DDoS攻击和伪装服务器、客户端身份 –HTTPS–&amp;gt; 证书证明身份&lt;/li&gt;
&lt;li&gt;不能验证内容完整性 -&amp;gt; 中间人攻击 –HTTPS–&amp;gt; HTTPS保证完整性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;HTTPS特征：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加密内容&lt;/li&gt;
&lt;li&gt;证书&lt;/li&gt;
&lt;li&gt;完整性保护&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;HTTPS建立在SSL连接之上，SSL建立在TCP连接上。SSL使用共享秘钥和公开秘钥加密两种方式混合加密。在秘钥确保安全的情况下，使用共享秘钥对称加密，优化速度；否则使用公开秘钥确保安全性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;共享秘钥，双方使用同一秘钥加密和解密，秘钥被监听后加密就失去了意义&lt;/li&gt;
&lt;li&gt;公开秘钥，使用公开秘钥加密，使用私有秘钥解密&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然而公开密钥本身并不能确保完整性，需要证书机构（CA）颁发证书认证，确保秘钥和端的有效以及合法性。服务端也可以使用OpenSSL为自己颁发自认证证书，但是一般会在浏览器上弹出警告。&lt;/p&gt;
&lt;p&gt;HTTPS建立连接的过程包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;协商决定秘钥组件&lt;/li&gt;
&lt;li&gt;服务端发送公开密钥、证书&lt;/li&gt;
&lt;li&gt;客户端检查证书合法性，以确认服务端身份，并拿到公钥&lt;/li&gt;
&lt;li&gt;客户端发送pre-master secret随机字符串&lt;/li&gt;
&lt;li&gt;服务端使用私钥加密pre-master secret hash值，返回加密的hash值（避免黑客尝试破解私钥）&lt;/li&gt;
&lt;li&gt;客户端使用公钥解密hash，对比自己之前生成的pre-master secret字符串hash，若一致，及证明服务端身份的合法性&lt;/li&gt;
&lt;li&gt;客户端生成一个对称加密算法和秘钥master-secret，使用公钥加密，发送给服务端&lt;/li&gt;
&lt;li&gt;双方使用master-secret进行通信&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通信的完整性可以通过将报文内容生成hash交由客户端验证来实现。&lt;/p&gt;
&lt;p&gt;SSL最初由网景开发，1.0和2.0版本被发现存在问题已被废弃。3.0后由IETF接手。目前可用的协议版本有SSL3.0和TLS1.0、TLS1.1、TLS1.2，其中最常用的是SSL3.0和TLS1.0。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;证书&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;证书包含：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发布机构（CA）&lt;/li&gt;
&lt;li&gt;有效期&lt;/li&gt;
&lt;li&gt;持有者（由CA担保证明持有者身份）&lt;/li&gt;
&lt;li&gt;公钥&lt;/li&gt;
&lt;li&gt;数字签名算法&lt;/li&gt;
&lt;li&gt;指纹算法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了保证安全，在证书的发布机构发布证书时，证书的指纹和指纹算法，都会用自己的私钥加密后再和证书放到一起发布。使用者在打开证书时，根据加密算法，系统使用自带的公钥解密指纹和指纹算法，使用指纹算法计算证书的hash值和指纹对比，如果对的上就代表证书没问题。系统使用的公钥和证书一般由证书发布机构自己生成，内嵌在操作系统中。&lt;/p&gt;
&lt;p&gt;证书颁发机构（CA）通常会去做很多工作确保持有者的合法性，信任CA代表着信任CA颁发证书中的所有信息。所以一般系统只选择信誉较好的CA机构。公司内部使用或自生成的证书就只能被在指定范围内被信任。&lt;/p&gt;
&lt;h2 id=&#34;身份验证&#34;&gt;&lt;a href=&#34;#身份验证&#34; class=&#34;headerlink&#34; title=&#34;身份验证&#34;&gt;&lt;/a&gt;身份验证&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;BASIC 使用用户名密码验证，明文传输&lt;/li&gt;
&lt;li&gt;DIGEST 质询响应，防止密码被拦截，安全度和便利性都较差&lt;/li&gt;
&lt;li&gt;SSL 客户端证书 + HTTPS传输，成本高&lt;/li&gt;
&lt;li&gt;HTTP表单 + Cookie&amp;#x2F;Session验证&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;功能追加协议&#34;&gt;&lt;a href=&#34;#功能追加协议&#34; class=&#34;headerlink&#34; title=&#34;功能追加协议&#34;&gt;&lt;/a&gt;功能追加协议&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;WebSocket&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;全双工，解决Ajax，长短轮询的局限。握手过程很简单：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请求方添加&lt;code&gt;Upgrade&lt;/code&gt;首部字段，声明升级到websocket。包含Sec-WebSocket-Key，Sec-WebSocket-Protocol，Sec-WebSocket-Verison等必要字段&lt;/li&gt;
&lt;li&gt;响应方回复101状态码，包含Sec-WebSocket-Accept（是根据Sec-WebSocket-Key生成的），Sec-WebSocket-Protocol&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;连接建立后，双方使用WebSocket的方式进行通信&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WebDAV&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;基于Web的文件属性管理。新增了一些方法和状态码，允许客户端远程修改服务器上的文件。&lt;/p&gt;
&lt;h2 id=&#34;Web应用&#34;&gt;&lt;a href=&#34;#Web应用&#34; class=&#34;headerlink&#34; title=&#34;Web应用&#34;&gt;&lt;/a&gt;Web应用&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;RSS&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;RDF Site Summary，简易内容聚合。和Atom一样，使用XML的形式发布信息，通过特定的RSS阅读器阅读。&lt;/p&gt;
&lt;h2 id=&#34;常见Web攻击方式&#34;&gt;&lt;a href=&#34;#常见Web攻击方式&#34; class=&#34;headerlink&#34; title=&#34;常见Web攻击方式&#34;&gt;&lt;/a&gt;常见Web攻击方式&lt;/h2&gt;&lt;p&gt;根本原因：HTTP本身没有必要的安全机制。&lt;/p&gt;
&lt;h3 id=&#34;输出值转义相关攻击方式&#34;&gt;&lt;a href=&#34;#输出值转义相关攻击方式&#34; class=&#34;headerlink&#34; title=&#34;输出值转义相关攻击方式&#34;&gt;&lt;/a&gt;输出值转义相关攻击方式&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;XSS，跨站脚本攻击，主要出现在&lt;strong&gt;动态拼接HTML&lt;/strong&gt;的场景中，用户恶意注入的script代码段埋下陷阱，诱导用户误操作触发。盗取用户密码或Cookie信息&lt;/li&gt;
&lt;li&gt;SQL注入，通过URL注入的方式，制造恶意SQL语句，出现在&lt;strong&gt;动态拼接SQL语句&lt;/strong&gt;的场景下。可以绕过认证、甚至破坏整个数据库&lt;/li&gt;
&lt;li&gt;OS命令注入，类似SQL注入，出现在&lt;strong&gt;动态拼接OS语句&lt;/strong&gt;的场景下。&lt;/li&gt;
&lt;li&gt;HTTP首部攻击，出现在服务端响应头部使用了用户侧输入场景下，比如302响应中的Location头部可能存在的query部分。攻击者可以通过添加换行符，恶意添加新的首部字段，甚至篡改原有的响应主体&lt;/li&gt;
&lt;li&gt;邮箱首部注入攻击，类似HTTP首部攻击&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;类似地还有目录遍历漏洞、远程文件引用漏洞。&lt;/p&gt;
&lt;p&gt;通过上面几种攻击方式，可以看到，&lt;strong&gt;永远不要信任用户侧输入&lt;/strong&gt;，&lt;strong&gt;使用白名单机制，禁止动态拼接用户输入的语句&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;设计缺陷相关攻击方式&#34;&gt;&lt;a href=&#34;#设计缺陷相关攻击方式&#34; class=&#34;headerlink&#34; title=&#34;设计缺陷相关攻击方式&#34;&gt;&lt;/a&gt;设计缺陷相关攻击方式&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;强制浏览，在服务器公开目录下，浏览开发者本非自愿公开的文件。&lt;/li&gt;
&lt;li&gt;不正确的系统错误处理方式，数据库等内部系统抛出的错误，对用户毫无帮助，反倒能让攻击者看到服务背后的一些细节。包括，数据库错误、PHP等脚本错误、Web服务器的错误&lt;/li&gt;
&lt;li&gt;开放重定向，网站有诸如&lt;code&gt;?redirect=xxx&lt;/code&gt;的path可以重定向时，一定要对redirect后的网址进行白名单控制，防止成为钓鱼攻击的跳板&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;session相关&#34;&gt;&lt;a href=&#34;#session相关&#34; class=&#34;headerlink&#34; title=&#34;session相关&#34;&gt;&lt;/a&gt;session相关&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;XSS盗取cookie，伪装用户登录&lt;/li&gt;
&lt;li&gt;发送恶意链接，强制用户使用攻击者指定的session ID&lt;/li&gt;
&lt;li&gt;CSRF，跨站信息伪造，在带有用户信息的domain里留下恶意的网络请求，伪造用户发起请求，伪造请求可以通过&lt;code&gt;&amp;lt;img src=&amp;quot;xx&amp;quot; /&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;video src=&amp;quot;xxx&amp;gt;&amp;lt;/video&amp;gt;&lt;/code&gt;等多种形式&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;其他&#34;&gt;&lt;a href=&#34;#其他&#34; class=&#34;headerlink&#34; title=&#34;其他&#34;&gt;&lt;/a&gt;其他&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;穷举法破解密码，暴力破解。使用图片验证码、手机验证码、机器检测等方式限制同IP的访问频率。&lt;ul&gt;
&lt;li&gt;彩虹表。使用salt，增加破解难度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;撞库。建议用户在不同域内使用不一样的密码&lt;/li&gt;
&lt;li&gt;点击劫持，使用透明元素覆盖在目标网页上。在18+网页中最常出现（😂）。&lt;/li&gt;
&lt;li&gt;DoS（Denial of Service）拒绝服务攻击，构造大量合法的网络请求，导致服务器超负荷。通常都是DDoS（Distributed Denial of Service）的形式。需要在IP层去过滤攻击的IP。&lt;/li&gt;
&lt;li&gt;后门程序&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="笔记" />
        <category term="HTTP" />
        <category term="HTTPS" />
        <category term="状态码" />
        <category term="网络攻击" />
        <category term="介绍" />
        <updated>2018-09-13T15:35:11.000Z</updated>
    </entry>
</feed>
