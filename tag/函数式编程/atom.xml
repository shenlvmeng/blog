<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://shenlvmeng.github.com/blog</id>
    <title>Shenlvmeng&#39;s Blog • Posts by &#34;函数式编程&#34; tag</title>
    <link href="http://shenlvmeng.github.com/blog" />
    <updated>2017-06-20T11:45:44.000Z</updated>
    <category term="总结" />
    <category term="制度" />
    <category term="道德" />
    <category term="文官" />
    <category term="万历" />
    <category term="明朝" />
    <category term="读书笔记" />
    <category term="展望" />
    <category term="2018" />
    <category term="2019" />
    <category term="flag" />
    <category term="2020" />
    <category term="2021" />
    <category term="2022" />
    <category term="2023" />
    <category term="面试" />
    <category term="前端" />
    <category term="FAQ" />
    <category term="HTML" />
    <category term="CSS" />
    <category term="style guide" />
    <category term="编程" />
    <category term="范式" />
    <category term="设计" />
    <category term="艺术" />
    <category term="质量" />
    <category term="async_hooks" />
    <category term="cls-hooked" />
    <category term="logId" />
    <category term="录音" />
    <category term="getUserMedia" />
    <category term="AudioContext" />
    <category term="PCM" />
    <category term="WAVE" />
    <category term="二叉搜索树" />
    <category term="算法" />
    <category term="回忆" />
    <category term="老朋友" />
    <category term="C" />
    <category term="Hash" />
    <category term="布隆过滤器" />
    <category term="字符串检索" />
    <category term="canvas" />
    <category term="流程图" />
    <category term="d3" />
    <category term="g6" />
    <category term="zrender" />
    <category term="processOn" />
    <category term="SDN" />
    <category term="cbench" />
    <category term="安装说明" />
    <category term="绘图" />
    <category term="动画" />
    <category term="攻略" />
    <category term="流水账" />
    <category term="成都" />
    <category term="重庆" />
    <category term="武汉" />
    <category term="重构" />
    <category term="代码" />
    <category term="代码风格" />
    <category term="数据可视化" />
    <category term="爬虫" />
    <category term="chrome" />
    <category term="crx" />
    <category term="扩展" />
    <category term="CORS" />
    <category term="跨域" />
    <category term="盒模型" />
    <category term="浮动" />
    <category term="Reactive Programming" />
    <category term="JavaScript" />
    <category term="Cycle.js" />
    <category term="Dart" />
    <category term="最佳实践" />
    <category term="引流" />
    <category term="universal-link" />
    <category term="app-link" />
    <category term="脚手架" />
    <category term="degit" />
    <category term="git" />
    <category term="设计模式" />
    <category term="类" />
    <category term="接口" />
    <category term="抽象类" />
    <category term="DOM" />
    <category term="Docker" />
    <category term="ONOS" />
    <category term="控制器" />
    <category term="虚拟化" />
    <category term="笔记" />
    <category term="UX" />
    <category term="UED" />
    <category term="准则" />
    <category term="Java" />
    <category term="Ruby" />
    <category term="反射" />
    <category term="编程范式" />
    <category term="鸭子类型" />
    <category term="管理" />
    <category term="效率" />
    <category term="知识工作者" />
    <category term="卓有成效" />
    <category term="Elm" />
    <category term="框架" />
    <category term="函数式编程" />
    <category term="虚网映射" />
    <category term="Javascript" />
    <category term="并发" />
    <category term="event loop" />
    <category term="覆盖率" />
    <category term="端到端测试" />
    <category term="istanbul" />
    <category term="istanbuljs" />
    <category term="JavaSript" />
    <category term="Express" />
    <category term="源码" />
    <category term="代码覆盖率" />
    <category term="istanbul-middleware" />
    <category term="代码插桩" />
    <category term="require钩子" />
    <category term="babel-plugin-istanbul" />
    <category term="css" />
    <category term="html5" />
    <category term="flex" />
    <category term="javascript" />
    <category term="roadmap" />
    <category term="闭包" />
    <category term="Haskell" />
    <category term="monad" />
    <category term="后端" />
    <category term="管理后台" />
    <category term="egg.js" />
    <category term="工作流" />
    <category term="pull request" />
    <category term="golang" />
    <category term="语言学习" />
    <category term="黑客与画家" />
    <category term="创业" />
    <category term="骑行" />
    <category term="海南" />
    <category term="图文" />
    <category term="reflow" />
    <category term="repaint" />
    <category term="命名法" />
    <category term="成功学" />
    <category term="自我建设" />
    <category term="HTTP" />
    <category term="HTTP/2" />
    <category term="SPDY" />
    <category term="QUIC" />
    <category term="HTTPS" />
    <category term="状态码" />
    <category term="网络攻击" />
    <category term="介绍" />
    <category term="图片渲染" />
    <category term="html2canvas" />
    <category term="dom-to-image" />
    <category term="electron" />
    <category term="indexedDB" />
    <category term="异步" />
    <category term="Generator" />
    <category term="thunk" />
    <category term="async" />
    <category term="函数表达式" />
    <category term="对象" />
    <category term="继承" />
    <category term="类型转换" />
    <category term="==" />
    <category term="类型判断" />
    <category term="猫" />
    <category term="杀手" />
    <category term="管理学" />
    <category term="领导力" />
    <category term="梯队" />
    <category term="移动端" />
    <category term="UI" />
    <category term="自适应" />
    <category term="rem" />
    <category term="Electron" />
    <category term="GUI" />
    <category term="gpx" />
    <category term="template" />
    <category term="Electron Builder" />
    <category term="PWA" />
    <category term="方法论" />
    <category term="夜话" />
    <category term="多线" />
    <category term="生活" />
    <category term="密码" />
    <category term="密钥" />
    <category term="技改" />
    <category term="Vue" />
    <category term="gulp" />
    <category term="瀑布流" />
    <category term="电影" />
    <category term="PHP" />
    <category term="参考" />
    <category term="思维" />
    <category term="学习能力" />
    <category term="右脑" />
    <category term="经济学" />
    <category term="宏观经济学" />
    <category term="术语" />
    <category term="GDP" />
    <category term="CPI" />
    <category term="储蓄" />
    <category term="投资" />
    <category term="金融市场" />
    <category term="股票" />
    <category term="债券" />
    <category term="美联储" />
    <category term="失业" />
    <category term="货币" />
    <category term="现值" />
    <category term="准备金" />
    <category term="货币中性" />
    <category term="通货膨胀" />
    <category term="汇率" />
    <category term="购买力" />
    <category term="净出口" />
    <category term="资产净流出" />
    <category term="总需求" />
    <category term="总供给" />
    <category term="流动性偏好" />
    <category term="乘数效应" />
    <category term="菲利普斯曲线" />
    <category term="微观经济学" />
    <category term="供求" />
    <category term="贸易" />
    <category term="市场" />
    <category term="税" />
    <category term="剩余" />
    <category term="外部性" />
    <category term="公共物品" />
    <category term="公共资源" />
    <category term="生产成本" />
    <category term="利润" />
    <category term="垄断" />
    <category term="价格歧视" />
    <category term="寡头" />
    <category term="垄断竞争" />
    <category term="生产要素市场" />
    <category term="贫困" />
    <category term="消费者选择理论" />
    <category term="不对称信息" />
    <category term="政治经济学" />
    <category term="行为经济学" />
    <category term="VSCode" />
    <category term="编辑器" />
    <category term="IDE" />
    <category term="hybrid" />
    <category term="JSBridge" />
    <category term="Web Worker" />
    <category term="Service Worker" />
    <category term="习惯" />
    <category term="lint" />
    <category term="editorconfig" />
    <category term="commit message" />
    <category term="量子物理" />
    <category term="史话" />
    <category term="埋点" />
    <category term="raven.js" />
    <category term="前端监控" />
    <category term="文本编辑器" />
    <category term="quill" />
    <category term="结构化数据" />
    <category term="React" />
    <category term="Hooks" />
    <category term="函数组件" />
    <category term="复用" />
    <category term="状态管理" />
    <category term="redux" />
    <category term="MobX" />
    <category term="代码质量" />
    <category term="重来" />
    <category term="requestAnimationFrame" />
    <category term="TypeScript" />
    <category term="路书" />
    <category term="gpx解析" />
    <category term="EXIF" />
    <category term="人类" />
    <category term="生存" />
    <category term="基因" />
    <category term="响应式编程" />
    <category term="RxJS" />
    <category term="成长" />
    <category term="业务" />
    <category term="思想" />
    <category term="程序设计" />
    <category term="心理学" />
    <category term="自我" />
    <category term="社会思维" />
    <category term="社会影响" />
    <category term="文化" />
    <category term="性别" />
    <category term="从众" />
    <category term="说服" />
    <category term="临床诊断" />
    <category term="陪审团" />
    <category term="司法" />
    <category term="物质主义" />
    <category term="健康" />
    <category term="社会关系" />
    <category term="偏见" />
    <category term="攻击行为" />
    <category term="亲密关系" />
    <category term="友谊" />
    <category term="爱情" />
    <category term="利他" />
    <category term="冲突" />
    <category term="和解" />
    <category term="软技能" />
    <category term="理财" />
    <category term="健身" />
    <category term="自我营销" />
    <category term="学习" />
    <category term="商业模式" />
    <category term="产品" />
    <category term="校园网" />
    <category term="互联网" />
    <category term="技术" />
    <category term="web开发" />
    <category term="哲思" />
    <category term="择偶观" />
    <category term="validator" />
    <category term="大文件" />
    <category term="visibilityChange" />
    <category term="IntersectionObserver" />
    <category term="图种" />
    <category term="draggable" />
    <category term="webpack" />
    <category term="z-index" />
    <category term="git submodule" />
    <category term="object-fit" />
    <category term="object-position" />
    <category term="BroadcastChannel" />
    <category term="extract-text-webpack-plugin" />
    <category term="lottie" />
    <category term="backface-visibility" />
    <category term="egret" />
    <category term="mock" />
    <category term="SSO" />
    <category term="autoprefixer" />
    <category term="polyfill" />
    <category term="Android" />
    <category term="ffmpeg" />
    <category term="React Hooks" />
    <category term="rollup" />
    <category term="CDN" />
    <category term="DNS" />
    <category term="CNAME" />
    <category term="架构" />
    <category term="组件" />
    <category term="ssh" />
    <category term="fis-receiver" />
    <category term="tmux" />
    <category term="origami" />
    <category term="promise" />
    <category term="encodeURI" />
    <category term="encodeURIComponent" />
    <category term="axios" />
    <category term="charles" />
    <category term="黑色幽默" />
    <category term="朋友" />
    <category term="梦" />
    <category term="濒死" />
    <category term="江南" />
    <category term="苏州" />
    <category term="无锡" />
    <category term="宜兴" />
    <category term="湖州" />
    <category term="南浔" />
    <category term="游记" />
    <category term="随笔" />
    <category term="群众" />
    <category term="理论" />
    <category term="实效" />
    <category term="测试" />
    <category term="长沙" />
    <category term="杭州" />
    <category term="湖南" />
    <category term="核酸" />
    <category term="美食" />
    <category term="云南" />
    <category term="丽江" />
    <category term="大理" />
    <category term="青岛" />
    <category term="济南" />
    <category term="山东" />
    <category term="西北" />
    <category term="银川" />
    <category term="西宁" />
    <category term="青海湖" />
    <category term="西海镇" />
    <category term="茶卡盐湖" />
    <category term="厦门" />
    <category term="感受" />
    <category term="C语言" />
    <category term="树" />
    <category term="主干开发" />
    <category term="GitFlow" />
    <category term="GithubFlow" />
    <category term="typescript" />
    <category term="类型系统" />
    <category term="webrtc" />
    <category term="RTMP" />
    <category term="首屏时间" />
    <category term="性能优化" />
    <category term="公司" />
    <category term="个人发展" />
    <category term="战略" />
    <category term="晋升" />
    <category term="哲学" />
    <category term="幸福" />
    <category term="人生" />
    <category term="叔本华" />
    <category term="Unix" />
    <category term="Rollup" />
    <category term="mouseout" />
    <category term="mouseleave" />
    <category term="lint-staged" />
    <category term="吸顶" />
    <category term="图片组件" />
    <category term="形式系统" />
    <category term="不完全性" />
    <category term="隐喻" />
    <category term="哥德尔" />
    <category term="巴赫" />
    <category term="埃舍尔" />
    <category term="济州" />
    <category term="西归浦" />
    <category term="城山" />
    <category term="咸德" />
    <category term="人工智能" />
    <category term="心智" />
    <category term="自指" />
    <category term="图灵" />
    <category term="马列主义" />
    <category term="恩格斯" />
    <category term="家庭" />
    <category term="国家" />
    <category term="阶级" />
    <category term="氏族" />
    <category term="哲学史" />
    <category term="孔子" />
    <category term="老子" />
    <category term="儒家" />
    <category term="道家" />
    <category term="佛教" />
    <category term="禅宗" />
    <category term="理学" />
    <category term="心学" />
    <category term="计算机" />
    <category term="微机原理" />
    <category term="门" />
    <category term="操作系统" />
    <category term="数字电路" />
    <category term="2024" />
    <category term="政府" />
    <category term="经济" />
    <category term="消费" />
    <category term="土地金融" />
    <category term="饮食" />
    <category term="蛋白质" />
    <category term="碳水" />
    <category term="慢性病" />
    <category term="三高" />
    <category term="肿瘤" />
    <category term="启蒙" />
    <category term="社会主义" />
    <category term="当代史" />
    <category term="共产党" />
    <category term="南明" />
    <category term="清" />
    <category term="顾诚" />
    <entry>
        <id>http://shenlvmeng.github.com/blog/2017/06/20/functional-programming-brief/</id>
        <title>函数式编程扫盲</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2017/06/20/functional-programming-brief/"/>
        <content type="html">&lt;p&gt;名谓扫盲，实则是为自己扫盲。前些日子通过Elm的学习接触到了函数式编程的概念，发现语言风格和以C为代表的命令式编程大不相同，接触不同的编程思维还是很有助于自我提升的。在回顾的同时，这里走马观花地带过一些函数式编程的“热门词汇”。&lt;/p&gt;
&lt;h2 id=&#34;历史故事&#34;&gt;&lt;a href=&#34;#历史故事&#34; class=&#34;headerlink&#34; title=&#34;历史故事&#34;&gt;&lt;/a&gt;&lt;a href=&#34;http://www.defmacro.org/ramblings/fp.html&#34;&gt;历史故事&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;什么是函数式编程（Functional Programming，FP）？它从何而来？可以吃吗？这得从20世纪30年代开始讲起：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;新建成的哥特式办公楼给普林斯顿大学带来一种天堂般的安全感。来自世界各地的逻辑学者应邀来到普林斯顿，他们将组建一个新的学部。正当大部分美国人还在为找不到一片面包做晚餐而发愁的时候，在普林斯顿却是这样一番景象：高高的天花板和木雕包覆的墙，每天品茶论道，漫步丛林。 一个名叫&lt;a href=&#34;http://zh.wikipedia.org/zh/%E9%98%BF%E9%9A%86%E4%BD%90%C2%B7%E9%82%B1%E5%A5%87&#34;&gt;阿隆佐·邱奇&lt;/a&gt;(Alonzo Church)的年轻数学家就过着这样优越的生活。阿隆佐本科毕业于普林斯顿后被留在研究院。他觉得这样的生活完全没有必要，于是他鲜少出现在那些数学茶会中也不喜欢到树林里散心。阿隆佐更喜欢独处：自己一个人的时候他的工作效率更高。尽管如此他还是和普林斯顿学者保持着联系，这些人当中有&lt;a href=&#34;https://zh.wikipedia.org/zh/%E8%89%BE%E4%BC%A6%C2%B7%E5%9B%BE%E7%81%B5&#34;&gt;艾伦·图灵&lt;/a&gt;、&lt;a href=&#34;http://zh.wikipedia.org/zh/%E7%BA%A6%E7%BF%B0%C2%B7%E5%86%AF%C2%B7%E8%AF%BA%E4%BC%8A%E6%9B%BC&#34;&gt;约翰·冯·诺伊曼&lt;/a&gt;、&lt;a href=&#34;https://zh.wikipedia.org/zh-hant/%E5%BA%93%E5%B0%94%E7%89%B9%C2%B7%E5%93%A5%E5%BE%B7%E5%B0%94&#34;&gt;库尔特·哥德尔&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在与这些人的合作下，阿隆佐设计了一个名为&lt;a href=&#34;https://en.wikipedia.org/wiki/Lambda_calculus&#34;&gt;lambda演算&lt;/a&gt;的形式系统。在这种语言里面，函数的参数是函数，返回值也是函数。篇幅和本人能力限制，不对lambda演算做更多讲解。&lt;/p&gt;
&lt;p&gt;除了阿隆佐·邱奇，艾伦·图灵也在进行类似的研究。他设计了一种完全不同的系统（后来被称为图灵机），并用这种系统得出了和阿隆佐相似的答案。到了后来人们证明了图灵机和lambda演算的能力是一样的。&lt;/p&gt;
&lt;p&gt;到了50年代末，一个叫John McCarthy的MIT教授（他也是普林斯顿的硕士）对阿隆佐的成果产生了兴趣。1958年他发明了一种列表处理语言（Lisp），这种语言是一种阿隆佐lambda演算在现实世界的实现，而且它能在冯·诺伊曼计算机上运行！而后的诸多函数式编程语言（如Haskell，ML等）也多少收到Lisp的影响。&lt;/p&gt;
&lt;h2 id=&#34;法则&#34;&gt;&lt;a href=&#34;#法则&#34; class=&#34;headerlink&#34; title=&#34;法则&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://www.byvoid.com/upload/fl/images/FP/FP.pdf&#34;&gt;法则&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;函数式编程的思想来源Lambda演算在最初设计时就是用来解决计算相关问题，它是一种相对于“命令式编程”完全不同的编程范式，后者告诉计算机怎么做，前者着眼在从数学角度描述问题。它的特点也很明显：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;变量不可变&lt;/strong&gt;，即默认带上&lt;code&gt;const&lt;/code&gt;或是&lt;code&gt;final&lt;/code&gt;（当然函数式编程里压根没有&lt;code&gt;const&lt;/code&gt;和&lt;code&gt;final&lt;/code&gt;的概念）。这么来看，叫它为“符号”似乎更合适&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;惰性求值&lt;/strong&gt;，变量直到使用时才会真正计算它的值，因为这个特点，Haskell甚至允许无限列表的出现。同时，这也意味着语句的出现顺序和执行顺序并不相关。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高阶函数&lt;/strong&gt;，函数可以作为入参或是返回值，这个也被很多不那么OOP的语言借鉴去了&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;无副作用&lt;/strong&gt;，&lt;strong&gt;函数只负责映射数据&lt;/strong&gt;，更像是个管道，绝不改变外部状态，同样的输入在任何时候会得到同样的输出（测试人员笑开了花）。这一点使得函数式编程语言天生支持并发执行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一切皆函数&lt;/strong&gt;，函数是第一公民&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;λ演算用来描述一种形式系统，它的语法只有三条：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;语法&lt;/th&gt;
&lt;th&gt;术语&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;变量&lt;/td&gt;
&lt;td&gt;一个代表参数或数字&amp;#x2F;逻辑值的符号或字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(λx.M)&lt;/td&gt;
&lt;td&gt;定义&lt;/td&gt;
&lt;td&gt;函数定义，&lt;code&gt;.&lt;/code&gt;前面的标识符&lt;code&gt;x&lt;/code&gt;为入参，M为表达式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(M N)&lt;/td&gt;
&lt;td&gt;调用&lt;/td&gt;
&lt;td&gt;应用函数到一个入参&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;例如：&lt;code&gt;((λ x y. x + y) 1 2)&lt;/code&gt;表示1和2相加。&lt;/p&gt;
&lt;p&gt;λ演算公理只有两个：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;(λx.M[x]) → (λy.M[y])&lt;/td&gt;
&lt;td&gt;α变换&lt;/td&gt;
&lt;td&gt;改变入参名不影响结果&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;((λx.M) E) → (M[x:&amp;#x3D;E])&lt;/td&gt;
&lt;td&gt;β规约&lt;/td&gt;
&lt;td&gt;将入参传入λ意味着对它做演算&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;还以上面的相加为例，α变换就是&lt;code&gt;λ x y. x + y → λ a b. a + b&lt;/code&gt;；β规约就是&lt;code&gt;(λ x y. x + y) a b → a + b&lt;/code&gt;。是不是很好理解。&lt;/p&gt;
&lt;p&gt;通过这两个基本的公理，结合基本变量类型可以构造各种函数。如not函数，and函数，or函数，甚至if函数。&lt;/p&gt;
&lt;figure class=&#34;highlight haskell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;let&lt;/span&gt; and =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;true&lt;/span&gt; value  -&amp;gt;  value&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;false&lt;/span&gt; value -&amp;gt;  false&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;value&lt;/span&gt; true  -&amp;gt;  value&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;value&lt;/span&gt; false -&amp;gt;  false&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;λ cond tvalue fvalue. (cond and tvalue) or (not cond  and fvalue)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;高阶函数&#34;&gt;&lt;a href=&#34;#高阶函数&#34; class=&#34;headerlink&#34; title=&#34;高阶函数&#34;&gt;&lt;/a&gt;高阶函数&lt;/h2&gt;&lt;p&gt;高阶函数意味着，我们可以把函数直接作为入参传入，或作为返回值返回。这早已不是函数式编程语言的专利，Python，JavaScript等也吸收了这个设计理念。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Currying&#34;&gt;函数柯里化&lt;/a&gt;即部分求值，就利用了高阶函数的特点提出的技术，它使得函数可以一个一个接受入参，返回相同的计算结果。类似于下面的感觉：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;pow&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;i, j&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; i^j;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;funtion &lt;span class=&#34;title function_&#34;&gt;square&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;j&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;pow&lt;/span&gt;(i, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;square&lt;/code&gt;函数返回的函数需要指定&lt;code&gt;i&lt;/code&gt;才可执行。柯里的名字来自于第一次提出这个技巧的逻辑学家&lt;a href=&#34;https://en.wikipedia.org/wiki/Haskell_Curry&#34;&gt;Haskell Curry&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;另外，值得注意的是，在函数式编程下，高阶函数通过将函数作为参数惰性求值实现。那命令式编程下呢，答案是&lt;a href=&#34;https://en.wikipedia.org/wiki/Closure_(computer_programming)&#34;&gt;闭包&lt;/a&gt;（lexical closure）。&lt;/p&gt;
&lt;h2 id=&#34;递归？&#34;&gt;&lt;a href=&#34;#递归？&#34; class=&#34;headerlink&#34; title=&#34;递归？&#34;&gt;&lt;/a&gt;递归？&lt;/h2&gt;&lt;p&gt;函数式编程里没有状态变量（可以用其他方式实现），因此自然没有循环结构。实际上，函数式编程中的循环都是通过递归实现的。比如，斐波那契数列函数像下面这样：&lt;/p&gt;
&lt;figure class=&#34;highlight haskell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;let&lt;/span&gt; fact = λ n. &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (n == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; (n * fact n-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里&lt;code&gt;fact&lt;/code&gt;函数引用了自身，虽然编译器可以识别这种写法，但是显然它并不符合严格的数学公理。&lt;/p&gt;
&lt;p&gt;重新审视这个变换，我们可以通过传入自身的方式来让它“数学化”。&lt;code&gt;let P = λ self n. if (n == 0) 1 (n * self(self n-1))&lt;/code&gt;，然后在令&lt;code&gt;let fact n = P (P n)&lt;/code&gt;。如此这般：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;fact 4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-&amp;gt; P (P 4)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-&amp;gt; if (4 == 0) (1) (4 * P(P 3))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-&amp;gt; 4 * P(P 3)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-&amp;gt; 4 * 3 * P(P 2)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-&amp;gt; 4 * 3 * 2 * P(P 1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-&amp;gt; 4 * 3 * 2 * 1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;可是，这个函数看上去并不自然，不像一个真正的递归函数，且λ演算的公理里并没有这样一条公理可以让你在定义函数的时候引用本身。还好，已经有人做了&lt;a href=&#34;https://en.wikipedia.org/wiki/Fixed-point_combinator&#34;&gt;研究&lt;/a&gt;，借助Y组合子的帮助，可以实现真正的递归函数。&lt;/p&gt;
&lt;figure class=&#34;highlight haskell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Y&lt;/span&gt; = λ &lt;span class=&#34;type&#34;&gt;F&lt;/span&gt;. &lt;span class=&#34;type&#34;&gt;G&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;G&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;G&lt;/span&gt; = λ self. &lt;span class=&#34;type&#34;&gt;F&lt;/span&gt;(self(self))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这相当于我们在λ演算公理体系中添加了一条“可以在函数调用时引用自身”。这也是证明λ演算图灵等价的关键一步。这意味着它的计算能力和计算机是一致的，能通过λ演算描述的函数一定可以由计算机计算。&lt;/p&gt;
&lt;h2 id=&#34;Haskell&#34;&gt;&lt;a href=&#34;#Haskell&#34; class=&#34;headerlink&#34; title=&#34;Haskell&#34;&gt;&lt;/a&gt;Haskell&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://www.zhihu.com/question/27355585&#34;&gt;Haskell&lt;/a&gt;是一个纯函数式编程语言，它得名于上面提到过的Haskell Curry。Y组合子也是他发现的。&lt;/p&gt;
&lt;p&gt;Haskell中一切都是函数，甚至没有指令式编程中变量的概念，它的变量全部都是只允许一次赋值，不可改变。&lt;/p&gt;
&lt;p&gt;Haskell还没有一般意义上的控制流结构，如for循环，取而代之的是递归。同样，Haskell还有两个重要的特性，即无副作用和惰&lt;br&gt;性求值。偏数学的问题，用Haskell解决通常代码量都很小。下面是一个列表去重例子&lt;/p&gt;
&lt;figure class=&#34;highlight haskell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;cut&lt;/span&gt; cond  []  = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;cut&lt;/span&gt; cond  (elem:rest) = &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;  cond elem &lt;span class=&#34;keyword&#34;&gt;then&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;cut&lt;/span&gt; cond  rest  &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;  elem:rest&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;compress&lt;/span&gt;  []  = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;compress&lt;/span&gt;  (elem:rest) = elem  : compress&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(cut  (== elem) rest)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;还有一个快排（不过借助了filter函数）的例子，也是短得不行&lt;/p&gt;
&lt;figure class=&#34;highlight haskell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;qsort&lt;/span&gt; (elem:rest) = (qsort lesser) ++ [elem] ++ (qsort greater)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    lesser = filter (&amp;lt; elem) rest&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    greater = filter (&amp;gt;= elem) rest&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Haskell中还可以定义无穷列表，如[1..]表示所有正整数。这也是惰性求值特性带来的。&lt;code&gt;[1,3..] !! 42&lt;/code&gt;将会返回85。&lt;/p&gt;
&lt;h2 id=&#34;Monad&#34;&gt;&lt;a href=&#34;#Monad&#34; class=&#34;headerlink&#34; title=&#34;Monad&#34;&gt;&lt;/a&gt;Monad&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Monad其实就是自函子范畴上的一个幺半群而已&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这节将展示一个图文并茂的说明但并不致力于解释清楚monad到底是个什么（因为我自己也不明白）。这篇对比&lt;a href=&#34;http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html&#34;&gt;functor，applicatives，monad&lt;/a&gt;的文章写得很透彻易懂，尽管这可能并不能描述一个100%的monad。要更深刻了解monad还是需要学习范畴论的内容。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;&lt;a href=&#34;#参考&#34; class=&#34;headerlink&#34; title=&#34;参考&#34;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://www.byvoid.com/upload/fl/images/FP/FP.pdf&#34;&gt;函数式编程.pdf&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;http://www.defmacro.org/ramblings/fp.html&#34;&gt;Functional Programming For The Rest of Us&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html&#34;&gt;Functors, Applicatives, And Monads In Pictures&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="函数式编程" />
        <category term="闭包" />
        <category term="Haskell" />
        <category term="monad" />
        <updated>2017-06-20T11:45:44.000Z</updated>
    </entry>
    <entry>
        <id>http://shenlvmeng.github.com/blog/2017/06/19/elm-introduction/</id>
        <title>Elm——函数式前端框架介绍</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2017/06/19/elm-introduction/"/>
        <content type="html">&lt;h2 id=&#34;前言&#34;&gt;&lt;a href=&#34;#前言&#34; class=&#34;headerlink&#34; title=&#34;前言&#34;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Elm提出于2012年，最初出现在Evan Czaplicki的毕业论文中（掩面）。目标是提出一个面向web的函数式编程语言。它拥有诸多特性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;强类型语言&lt;/li&gt;
&lt;li&gt;一次编译，no runtime error&lt;/li&gt;
&lt;li&gt;状态不可修改&lt;/li&gt;
&lt;li&gt;函数是一级公民等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Elm是门新语言，它是一个类似React（但绝对和它不一样）的前端框架。在Web App的设计它甚至启发了Flux设计的提出。在如今前端框架吸收函数式编程以及强类型语言优点的形势下，学习Elm可能会开启对Web前端开发的重新认识。&lt;/p&gt;
&lt;p&gt;再看完下面的介绍后，建议阅读两篇对Elm的评价，相信更有助于对这门年轻语言特点的理解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@ericdreichert/my-thoughts-on-elm-lang-b609d69cfa4d&#34;&gt;My thoughts on Elm Lang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hackernoon.com/some-thoughts-on-elm-development-39a0f8a9002a&#34;&gt;Some thoughts on Elm Development&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;准备工作&#34;&gt;&lt;a href=&#34;#准备工作&#34; class=&#34;headerlink&#34; title=&#34;准备工作&#34;&gt;&lt;/a&gt;准备工作&lt;/h2&gt;&lt;p&gt;Elm是通过将代码编译成JavaScript工作的。一个最简单的Elm App大概像下面这样：&lt;/p&gt;
&lt;figure class=&#34;highlight elm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; Html &lt;span class=&#34;keyword&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;Html&lt;/span&gt;, button, div, text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; Html.Events &lt;span class=&#34;keyword&#34;&gt;exposing&lt;/span&gt; (onClick)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;main&lt;/span&gt; =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;Html&lt;/span&gt;.beginnerProgram &amp;#123; model = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, view = view, update = update &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Msg&lt;/span&gt; = &lt;span class=&#34;type&#34;&gt;Increment&lt;/span&gt; | &lt;span class=&#34;type&#34;&gt;Decrement&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;update&lt;/span&gt; msg model =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; msg &lt;span class=&#34;keyword&#34;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;Increment&lt;/span&gt; -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      model + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;Decrement&lt;/span&gt; -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      model - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;view&lt;/span&gt; model =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  div []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [ button [ onClick &lt;span class=&#34;type&#34;&gt;Decrement&lt;/span&gt; ] [ text &lt;span class=&#34;string&#34;&gt;&amp;quot;-&amp;quot;&lt;/span&gt; ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    , div [] [ text (toString model) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    , button [ onClick &lt;span class=&#34;type&#34;&gt;Increment&lt;/span&gt; ] [ text &lt;span class=&#34;string&#34;&gt;&amp;quot;+&amp;quot;&lt;/span&gt; ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;那么这样一个Elm文件是怎么应用在页面中呢？&lt;/p&gt;
&lt;p&gt;在&lt;a href=&#34;http://elm-lang.org/&#34;&gt;Elm&lt;/a&gt;安装完成后，会有4个Elm相关的包：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;elm-repl 命令行操作，在cli中感受Elm的语法特点&lt;/li&gt;
&lt;li&gt;elm-reactor 快速脚手架搭建&lt;/li&gt;
&lt;li&gt;elm-make 编译工具&lt;/li&gt;
&lt;li&gt;elm-package 包管理工具&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;麻雀虽小，五脏俱全。&lt;/p&gt;
&lt;h2 id=&#34;语法特点&#34;&gt;&lt;a href=&#34;#语法特点&#34; class=&#34;headerlink&#34; title=&#34;语法特点&#34;&gt;&lt;/a&gt;语法特点&lt;/h2&gt;&lt;p&gt;Elm在&lt;a href=&#34;http://elm-lang.org/docs/syntax&#34;&gt;语法&lt;/a&gt;上不同于C风格的所有语言，和Haskell更为靠近。&lt;/p&gt;
&lt;h3 id=&#34;注释&#34;&gt;&lt;a href=&#34;#注释&#34; class=&#34;headerlink&#34; title=&#34;注释&#34;&gt;&lt;/a&gt;注释&lt;/h3&gt;&lt;p&gt;用&lt;code&gt;--&lt;/code&gt;开启单行注释，结合&lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;进行多行注释&lt;/p&gt;
&lt;figure class=&#34;highlight elm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;-- a single line comment&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;&amp;#123;- a multiline comment&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;   &lt;span class=&#34;comment&#34;&gt;&amp;#123;- can be nested -&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;-&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;类型&#34;&gt;&lt;a href=&#34;#类型&#34; class=&#34;headerlink&#34; title=&#34;类型&#34;&gt;&lt;/a&gt;类型&lt;/h3&gt;&lt;p&gt;Elm是强类型语言，有Bool，Int，Float，Char，String 5种基本类型。有意思的是，&lt;strong&gt;Elm没有Null&lt;/strong&gt;。这也是特别&lt;a href=&#34;https://guide.elm-lang.org/error_handling/&#34;&gt;设计&lt;/a&gt;的。&lt;/p&gt;
&lt;div class=&#34;tip&#34;&gt;注意：Elm中Char类型用单引号`&#39;`包裹，而String类型用双引号`&#34;`包裹。
&lt;/div&gt;

&lt;p&gt;除了基本类型，Elm中还有List，Array，Tuple，Dict，Record几种泛型。其中List，Record设计类似JavaScript中的Array和Object。&lt;/p&gt;
&lt;div class=&#34;tip&#34;&gt;在Elm中`Array`和`List`是两种不同的类型，前者通过链表实现，后者通过Relaxed Radix Tree实现。前者在增删节点上高效，后者在随机查询时高效。&lt;/div&gt;

&lt;figure class=&#34;highlight elm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; :: [&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; :: &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; :: &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt; :: &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt; :: []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;point&lt;/span&gt; =                         &lt;span class=&#34;comment&#34;&gt;-- create a record&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#123; x = &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, y = &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;point&lt;/span&gt;.x                         &lt;span class=&#34;comment&#34;&gt;-- access field&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;List&lt;/span&gt;.map .x [point,&amp;#123;x=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,y=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&amp;#125;]   &lt;span class=&#34;comment&#34;&gt;-- field access function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123; point | x = &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt; &amp;#125;               &lt;span class=&#34;comment&#34;&gt;-- update a field&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123; point |                       &lt;span class=&#34;comment&#34;&gt;-- update many fields&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x = point.x + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    y = point.y + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;*(值得注意的是，上面的&lt;code&gt;::&lt;/code&gt;和&lt;code&gt;.x&lt;/code&gt;实际上都是函数)*。&lt;/p&gt;
&lt;h4 id=&#34;类型声明&#34;&gt;&lt;a href=&#34;#类型声明&#34; class=&#34;headerlink&#34; title=&#34;类型声明&#34;&gt;&lt;/a&gt;类型声明&lt;/h4&gt;&lt;p&gt;类型是Elm中重要的一环，每个变量都需要有类型，编译时需要进行检查。因此显式地声明变量类型很重要。&lt;/p&gt;
&lt;p&gt;当我们需要通过基本类型构造复杂类型时，可以通过&lt;code&gt;type alias&lt;/code&gt;的形式为record创建新的类型。在新类型创建的同时，会同步生成一个record构造函数。&lt;/p&gt;
&lt;figure class=&#34;highlight elm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;-- Before：麻烦的函数写法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;hasBio&lt;/span&gt; : &amp;#123; name : &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt;, bio : &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt;, pic : &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &amp;#125; -&amp;gt; &lt;span class=&#34;type&#34;&gt;Bool&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;hasBio&lt;/span&gt; user =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt;.length user.bio &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;-- After：简便的写法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;User&lt;/span&gt; =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#123; name : &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  , bio : &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  , pic : &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;hasBio&lt;/span&gt; : &lt;span class=&#34;type&#34;&gt;User&lt;/span&gt; -&amp;gt; &lt;span class=&#34;type&#34;&gt;Bool&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;hasBio&lt;/span&gt; user =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt;.length user.bio &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;Union类型&#34;&gt;&lt;a href=&#34;#Union类型&#34; class=&#34;headerlink&#34; title=&#34;Union类型&#34;&gt;&lt;/a&gt;Union类型&lt;/h4&gt;&lt;p&gt;之所以单独拿出来说，是因为Union Type的设计几乎是Elm的精髓。首先，它类似于枚举（enum）的概念，通过&lt;code&gt;type enum = A | B | C&lt;/code&gt;的形式定义一个类型。这是简单的Union Type的使用。&lt;/p&gt;
&lt;p&gt;Union Type还有Tagged Union的用法。即下面这样。这意味着&lt;strong&gt;User可以是不带信息的Anonymous或带有String信息的Named&lt;/strong&gt;。&lt;code&gt;Anonymous&lt;/code&gt;和&lt;code&gt;Named&lt;/code&gt;是User的两个构造函数。其中Named接受一个String类型入参构造User类型。&lt;/p&gt;
&lt;figure class=&#34;highlight elm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;User&lt;/span&gt; = &lt;span class=&#34;type&#34;&gt;Anonymous&lt;/span&gt; | &lt;span class=&#34;type&#34;&gt;Named&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;div class=&#34;tip&#34;&gt;注意：不同Union Type间的Tag构造函数不能同名，即不能出现下面的情况。同时Tag后的额外消息是泛型`a`时，需要在type名后也加上，便于type check&lt;/div&gt;

&lt;figure class=&#34;highlight elm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;User&lt;/span&gt; = &lt;span class=&#34;type&#34;&gt;Named&lt;/span&gt; | &lt;span class=&#34;type&#34;&gt;Named&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;-- Wrong!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;结合上面的特点，可以很容易地将相似数据结构或设计抽象为单一模板，如&lt;a href=&#34;https://guide.elm-lang.org/types/union_types.html&#34;&gt;举例&lt;/a&gt;中的将时间轴、日志等统一抽象为widget。思路：&lt;strong&gt;逐个击破，合而为一&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于Union Type可以递归定义，通过Union Type甚至可以构建链表和&lt;a href=&#34;http://elm-lang.org/examples/binary-tree&#34;&gt;二叉树&lt;/a&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight elm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;List&lt;/span&gt; a = &lt;span class=&#34;type&#34;&gt;Empty&lt;/span&gt; | &lt;span class=&#34;type&#34;&gt;Node&lt;/span&gt; a (&lt;span class=&#34;type&#34;&gt;List&lt;/span&gt; a)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Tree&lt;/span&gt; a = &lt;span class=&#34;type&#34;&gt;Empty&lt;/span&gt; | &lt;span class=&#34;type&#34;&gt;Node&lt;/span&gt; a (&lt;span class=&#34;type&#34;&gt;Tree&lt;/span&gt; a) (&lt;span class=&#34;type&#34;&gt;Tree&lt;/span&gt; a)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;此外，Elm中的错误处理&lt;a href=&#34;https://guide.elm-lang.org/error_handling/maybe.html&#34;&gt;Maybe&lt;/a&gt;和&lt;a href=&#34;https://guide.elm-lang.org/error_handling/result.html&#34;&gt;Result&lt;/a&gt;也是基于Union Type实现的。&lt;/p&gt;
&lt;p&gt;因为Union Type的不同子类型可以有自己独特的构造函数，且支持解构赋值，因此非常适合用作实现状态管理的事件。Web App中的update函数接受的Html Msg类型实际上也是Union Type实现的。&lt;/p&gt;
&lt;h3 id=&#34;函数&#34;&gt;&lt;a href=&#34;#函数&#34; class=&#34;headerlink&#34; title=&#34;函数&#34;&gt;&lt;/a&gt;函数&lt;/h3&gt;&lt;p&gt;除了不能手动更改状态的变量（因此&lt;strong&gt;递归完全替代了循环结构&lt;/strong&gt;），函数是Elm中最常见的存在。命令式编程中，函数用作告诉电脑该怎么做。函数式编程中，函数用作描述一种映射关系，告诉电脑要什么。Elm中函数像下面这样声明：&lt;/p&gt;
&lt;figure class=&#34;highlight elm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;square&lt;/span&gt; n =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  n^&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;hypotenuse&lt;/span&gt; : &lt;span class=&#34;type&#34;&gt;Float&lt;/span&gt; -&amp;gt; &lt;span class=&#34;type&#34;&gt;Float&lt;/span&gt; -&amp;gt; &lt;span class=&#34;type&#34;&gt;Float&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;hypotenuse&lt;/span&gt; a b =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  sqrt (square a + square b)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;distance&lt;/span&gt; (a,b) (x,y) =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  hypotenuse (a-x) (b-y)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;入参在上，返回值在下。入参间通过空格隔开，由于Elm支持函数柯里化，所以在函数的类型声明中，也是通过&lt;code&gt;-&amp;gt;&lt;/code&gt;隔开每个入参以及返回值的。由于函数变成了纯粹的“通道”，函数体中声明临时变量的语法通过&lt;code&gt;let ... in&lt;/code&gt;的形式实现。&lt;/p&gt;
&lt;p&gt;Elm中也有匿名函数，像下面这样，由反斜线&lt;code&gt;\&lt;/code&gt;开头：&lt;/p&gt;
&lt;figure class=&#34;highlight elm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;square&lt;/span&gt; =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  \n -&amp;gt; n^&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;squares&lt;/span&gt; =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;List&lt;/span&gt;.map (\n -&amp;gt; n^&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;) (&lt;span class=&#34;type&#34;&gt;List&lt;/span&gt;.range &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;函数间通过&lt;code&gt;|&amp;gt;&lt;/code&gt;和&lt;code&gt;&amp;lt;|&lt;/code&gt;连接减少括号的使用。例如下面这样&lt;/p&gt;
&lt;figure class=&#34;highlight elm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;viewNames1&lt;/span&gt; names =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt;.join &lt;span class=&#34;string&#34;&gt;&amp;quot;, &amp;quot;&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;List&lt;/span&gt;.sort names)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;viewNames2&lt;/span&gt; names =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  names&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    |&amp;gt; &lt;span class=&#34;type&#34;&gt;List&lt;/span&gt;.sort&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    |&amp;gt; &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt;.join &lt;span class=&#34;string&#34;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;-- (arg |&amp;gt; func) is the same as (func arg)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;同时，可以通过&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;和&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;构造复合函数。&lt;code&gt;``&lt;/code&gt;用来将第&lt;code&gt;n&lt;/code&gt;个函数入参前置，使得居于更符合语法习惯，如&lt;code&gt;buyMilk `then` drinkMilk&lt;/code&gt;中&lt;code&gt;buyMilk&lt;/code&gt;参数被提前。&lt;code&gt;n&lt;/code&gt;可以通过&lt;code&gt;infixr&lt;/code&gt;设置。&lt;/p&gt;
&lt;p&gt;其中可能较难理解的是&lt;strong&gt;递归完全替代了循环结构&lt;/strong&gt;，Elm类似其他函数式语言，没有&lt;code&gt;for&lt;/code&gt;和&lt;code&gt;while&lt;/code&gt;。它用描述问题的方式，通过递归解决普通的循环问题，下面举两个例子：&lt;/p&gt;
&lt;figure class=&#34;highlight elm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;reverse&lt;/span&gt; : &lt;span class=&#34;type&#34;&gt;List&lt;/span&gt; a -&amp;gt; &lt;span class=&#34;type&#34;&gt;List&lt;/span&gt; a&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;reverse&lt;/span&gt; list =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; list &lt;span class=&#34;keyword&#34;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [] -&amp;gt; []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    (x::xs) -&amp;gt; reverse xs ++ [x]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;quicksort&lt;/span&gt; : &lt;span class=&#34;type&#34;&gt;List&lt;/span&gt; comparable -&amp;gt; &lt;span class=&#34;type&#34;&gt;List&lt;/span&gt; comparable&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;quicksort&lt;/span&gt; list = &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; list &lt;span class=&#34;keyword&#34;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [] -&amp;gt; []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    (x::xs) -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        smallerSorted = quicksort (&lt;span class=&#34;type&#34;&gt;List&lt;/span&gt;.filter ((&amp;gt;) x) xs)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        biggerSorted = quicksort (&lt;span class=&#34;type&#34;&gt;List&lt;/span&gt;.filter ((&amp;lt;=) x) xs)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        smallerSorted ++ [x] ++ biggerSorted&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;可以找到规律：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Usually you define an edge case and then you define a function that does something between some element and the function applied to the rest.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;更具体的解释可以看参考链接3。&lt;/p&gt;
&lt;h3 id=&#34;控制结构&#34;&gt;&lt;a href=&#34;#控制结构&#34; class=&#34;headerlink&#34; title=&#34;控制结构&#34;&gt;&lt;/a&gt;控制结构&lt;/h3&gt;&lt;p&gt;Elm中没有&lt;code&gt;for&lt;/code&gt;和&lt;code&gt;while&lt;/code&gt;循环（都通过递归实现了）。但是存在&lt;code&gt;if&lt;/code&gt;和&lt;code&gt;case&lt;/code&gt;语句。&lt;/p&gt;
&lt;figure class=&#34;highlight elm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;if&lt;/span&gt; powerLevel &amp;gt; &lt;span class=&#34;number&#34;&gt;9000&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;then&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;OVER 9000!!!&amp;quot;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;meh&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;case&lt;/span&gt; maybe &lt;span class=&#34;keyword&#34;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;Just&lt;/span&gt; xs -&amp;gt; xs&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;Nothing&lt;/span&gt; -&amp;gt; []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;case&lt;/span&gt; xs &lt;span class=&#34;keyword&#34;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  hd::tl -&amp;gt; &lt;span class=&#34;type&#34;&gt;Just&lt;/span&gt; (hd,tl)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  []     -&amp;gt; &lt;span class=&#34;type&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;case&lt;/span&gt; n &lt;span class=&#34;keyword&#34;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; -&amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; -&amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  _ -&amp;gt; fib (n&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;) + fib (n&lt;span class=&#34;number&#34;&gt;-2&lt;/span&gt;) &lt;span class=&#34;comment&#34;&gt;-- _表示不接受入参&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;杂项&#34;&gt;&lt;a href=&#34;#杂项&#34; class=&#34;headerlink&#34; title=&#34;杂项&#34;&gt;&lt;/a&gt;杂项&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;++&lt;/code&gt;连接字符串，&lt;code&gt;+&lt;/code&gt;表示相加&lt;/li&gt;
&lt;li&gt;Elm不会进行强制类型转换&lt;/li&gt;
&lt;li&gt;缩进会影响语句解析&lt;/li&gt;
&lt;li&gt;list中所有元素类型必须一致&lt;/li&gt;
&lt;li&gt;tuples设计类似python&lt;/li&gt;
&lt;li&gt;records类型不允许访问不存在的属性&lt;/li&gt;
&lt;li&gt;&lt;code&gt;//&lt;/code&gt;用来进行C风格的除法&lt;/li&gt;
&lt;li&gt;Elm中!用于连接Model和Cmd，用&lt;code&gt;/=&lt;/code&gt;表示&lt;code&gt;!=&lt;/code&gt;，同&lt;code&gt;not&lt;/code&gt;表示&lt;code&gt;!&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Elm的语言设定大不同于C风格，所以，多写去熟悉它的语法风格吧。&lt;/p&gt;
&lt;h2 id=&#34;Elm架构&#34;&gt;&lt;a href=&#34;#Elm架构&#34; class=&#34;headerlink&#34; title=&#34;Elm架构&#34;&gt;&lt;/a&gt;Elm架构&lt;/h2&gt;&lt;p&gt;Elm构建Web App的架构为MVU（不考虑Cmd和Subscription的话），这和目前大部分MVVM框架一样，致力于减少UI维护，减少不必要的状态修改来更好地定位错误。有意思的是，Elm也&lt;a href=&#34;http://elm-lang.org/blog/blazing-fast-html&#34;&gt;采用了Virtual DOM的设计&lt;/a&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Model，类似Web App的state，通常为&lt;code&gt;records&lt;/code&gt;类型&lt;/li&gt;
&lt;li&gt;Update，更新state的唯一方式（类似于action或commit），通常类型为&lt;code&gt;Msg -&amp;gt; Model -&amp;gt; (Model, Cmd Msg)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;View，根据state渲染HTML的方式，通常类型为&lt;code&gt;Model -&amp;gt; Html Msg&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Update部分，通常像下面这样，接受Union Type的Msg，并通过&lt;code&gt;case ... of&lt;/code&gt;接受到附在Msg上的payload。&lt;/p&gt;
&lt;figure class=&#34;highlight elm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;update&lt;/span&gt; : &lt;span class=&#34;type&#34;&gt;Msg&lt;/span&gt; -&amp;gt; &lt;span class=&#34;type&#34;&gt;Model&lt;/span&gt; -&amp;gt; &lt;span class=&#34;type&#34;&gt;Model&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;update&lt;/span&gt; msg model =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; msg &lt;span class=&#34;keyword&#34;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;Change&lt;/span&gt; newContent -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#123; model | content = newContent &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;View部分，所有常用的标签名和属性名都被封装为函数，接受属性列表和子元素列表两个入参，像下面这样。&lt;/p&gt;
&lt;figure class=&#34;highlight elm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;view&lt;/span&gt; : &lt;span class=&#34;type&#34;&gt;Model&lt;/span&gt; -&amp;gt; &lt;span class=&#34;type&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Msg&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;view&lt;/span&gt; model =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  div []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [ input [ placeholder &lt;span class=&#34;string&#34;&gt;&amp;quot;Text to reverse&amp;quot;&lt;/span&gt;, onInput &lt;span class=&#34;type&#34;&gt;Change&lt;/span&gt; ] []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    , div [] [ text (&lt;span class=&#34;type&#34;&gt;String&lt;/span&gt;.reverse model.content) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;将M、V、U三部分结合在一起就可以构造简单的web应用了。当有异步任务等复杂情况出现时，需要通过Cmd和Subscription实现。&lt;/p&gt;
&lt;h3 id=&#34;Effects&#34;&gt;&lt;a href=&#34;#Effects&#34; class=&#34;headerlink&#34; title=&#34;Effects&#34;&gt;&lt;/a&gt;Effects&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://guide.elm-lang.org/architecture/effects/beginnerProgram.svg&#34; alt=&#34;Elm Architecture&#34;&gt;&lt;/p&gt;
&lt;p&gt;说这两位之前，我们要回顾下之前的工作流。仔细观察就能发现，我们所做的事只是描述了接受Html Msg后如何生产新的Model并根据新的Model生产新的Html Msg交给Elm Runtime，之后的脏活累活都交给Elm干了。根据Elm的描述，除了vDOM外，它还使用了下面两个手段提升效率：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Skip Work&lt;/strong&gt;，通过&lt;code&gt;lazy&lt;/code&gt;（类似React的&lt;code&gt;shouldComponentUpdate&lt;/code&gt;）限制更新频率&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Align Work&lt;/strong&gt;，通过&lt;code&gt;Html.keyed&lt;/code&gt;（类似React的&lt;code&gt;key&lt;/code&gt;）减少无意义的diffing。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;回到正题，Cmd和Subscription也是对Msg所做的外层包装而已。除了能向Elm Runtime pipe Html Msg外，当然也可以发送命令或订阅事件&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://guide.elm-lang.org/architecture/effects/program.svg&#34;&gt;&lt;/p&gt;
&lt;p&gt;。Html, Cmd, Sub三者实际上没太大区别，都是我们将生成的数据交给Elm Runtime，剩下的做甩手掌柜。它可以帮助我们：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更好的debug&lt;/li&gt;
&lt;li&gt;确保Elm函数的线性时不变&lt;/li&gt;
&lt;li&gt;优化HTTP连接，缓存effects&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面是一个Sub的例子：&lt;/p&gt;
&lt;figure class=&#34;highlight elm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;-- SUBSCRIPTIONS&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;subscriptions&lt;/span&gt; : &lt;span class=&#34;type&#34;&gt;Model&lt;/span&gt; -&amp;gt; &lt;span class=&#34;type&#34;&gt;Sub&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Msg&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;subscriptions&lt;/span&gt; model =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;Time&lt;/span&gt;.every second &lt;span class=&#34;type&#34;&gt;Tick&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;-- UPDATE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;update&lt;/span&gt; : &lt;span class=&#34;type&#34;&gt;Msg&lt;/span&gt; -&amp;gt; &lt;span class=&#34;type&#34;&gt;Model&lt;/span&gt; -&amp;gt; (&lt;span class=&#34;type&#34;&gt;Model&lt;/span&gt;, &lt;span class=&#34;type&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Msg&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;update&lt;/span&gt; msg model =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; msg &lt;span class=&#34;keyword&#34;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;Tick&lt;/span&gt; newTime -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      (newTime, &lt;span class=&#34;type&#34;&gt;Cmd&lt;/span&gt;.none)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;错误处理&#34;&gt;&lt;a href=&#34;#错误处理&#34; class=&#34;headerlink&#34; title=&#34;错误处理&#34;&gt;&lt;/a&gt;错误处理&lt;/h2&gt;&lt;p&gt;之前提到过Elm致力于“编辑时无bug&amp;#x3D;&amp;gt;Runtime无bug”。除了强类型和无状态（实际上是Immutable的状态）外，还有Maybe和Result的辅助。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Elm treats errors as data.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考&lt;a href=&#34;https://www.lucidchart.com/techblog/2015/08/31/the-worst-mistake-of-computer-science/&#34;&gt;null的糟糕设计&lt;/a&gt;，Elm通过&lt;/p&gt;
&lt;figure class=&#34;highlight elm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Maybe&lt;/span&gt; a = &lt;span class=&#34;type&#34;&gt;Nothing&lt;/span&gt; | &lt;span class=&#34;type&#34;&gt;Just&lt;/span&gt; a&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;定义了Maybe类型。结合&lt;code&gt;case of&lt;/code&gt;的特殊情况处理，通过&lt;strong&gt;option types&lt;/strong&gt;的方法&lt;strong&gt;替代Null&lt;/strong&gt;。&lt;a href=&#34;http://package.elm-lang.org/packages/elm-lang/core/4.0.0/Maybe&#34;&gt;core&amp;#x2F;Maybe&lt;/a&gt;模块还有&lt;code&gt;withDefault&lt;/code&gt;，&lt;code&gt;andThen&lt;/code&gt;等其他方法。&lt;/p&gt;
&lt;p&gt;类似于Maybe，Result用Union Type的形式定义了不可靠操作的返回值。&lt;/p&gt;
&lt;figure class=&#34;highlight elm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Result&lt;/span&gt; error value = &lt;span class=&#34;type&#34;&gt;Err&lt;/span&gt; error | &lt;span class=&#34;type&#34;&gt;Ok&lt;/span&gt; value&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过Err和Ok两种类型，隐含了其他语言中的&lt;code&gt;try catch&lt;/code&gt;操作，&lt;strong&gt;避免exception&lt;/strong&gt;的出现。Elm库函数是实现了Result类型的，如&lt;code&gt;Http.get&lt;/code&gt;。Result预定义在&lt;a href=&#34;http://package.elm-lang.org/packages/elm-lang/core/4.0.0/Result&#34;&gt;core&amp;#x2F;Result&lt;/a&gt;中&lt;/p&gt;
&lt;h3 id=&#34;Task&#34;&gt;&lt;a href=&#34;#Task&#34; class=&#34;headerlink&#34; title=&#34;Task&#34;&gt;&lt;/a&gt;Task&lt;/h3&gt;&lt;p&gt;另外，Elm中有Task用来处理异步操作中的失败情况。类似于JS中的Promise。使用思路是先通过succeed方法和fail方法定义Task再使用。&lt;/p&gt;
&lt;figure class=&#34;highlight elm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Task&lt;/span&gt; err ok =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;Task&lt;/span&gt; err ok&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;succeed&lt;/span&gt; : a -&amp;gt; &lt;span class=&#34;type&#34;&gt;Task&lt;/span&gt; x a&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;fail&lt;/span&gt; : x -&amp;gt; &lt;span class=&#34;type&#34;&gt;Task&lt;/span&gt; x a&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在Elm由0.17升级到0.18时，有两种方式执行一个Task。&lt;code&gt;Task.perform&lt;/code&gt;和&lt;code&gt;Task.attempt&lt;/code&gt;。前者针对&lt;strong&gt;从不返回错误&lt;/strong&gt;的task，后者针对&lt;strong&gt;可能出错&lt;/strong&gt;的task。更重要的是，在&lt;code&gt;Task.attempt&lt;/code&gt;中结合了熟悉的Result模型。&lt;/p&gt;
&lt;figure class=&#34;highlight elm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;perform&lt;/span&gt; : (a -&amp;gt; msg) -&amp;gt; &lt;span class=&#34;type&#34;&gt;Task&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Never&lt;/span&gt; a -&amp;gt; &lt;span class=&#34;type&#34;&gt;Cmd&lt;/span&gt; msg&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;attempt&lt;/span&gt; : (&lt;span class=&#34;type&#34;&gt;Result&lt;/span&gt; x a -&amp;gt; msg) -&amp;gt; &lt;span class=&#34;type&#34;&gt;Task&lt;/span&gt; x a -&amp;gt; &lt;span class=&#34;type&#34;&gt;Cmd&lt;/span&gt; msg&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;-- example&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Msg&lt;/span&gt; = &lt;span class=&#34;type&#34;&gt;Click&lt;/span&gt; | &lt;span class=&#34;type&#34;&gt;NewTime&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Time&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;update&lt;/span&gt; : &lt;span class=&#34;type&#34;&gt;Msg&lt;/span&gt; -&amp;gt; &lt;span class=&#34;type&#34;&gt;Model&lt;/span&gt; -&amp;gt; ( &lt;span class=&#34;type&#34;&gt;Model&lt;/span&gt;, &lt;span class=&#34;type&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Msg&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;update&lt;/span&gt; msg model =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; msg &lt;span class=&#34;keyword&#34;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;Click&lt;/span&gt; -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      ( model, &lt;span class=&#34;type&#34;&gt;Task&lt;/span&gt;.perform &lt;span class=&#34;type&#34;&gt;NewTime&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Time&lt;/span&gt;.now )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;NewTime&lt;/span&gt; time -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;互操作性&#34;&gt;&lt;a href=&#34;#互操作性&#34; class=&#34;headerlink&#34; title=&#34;互操作性&#34;&gt;&lt;/a&gt;互操作性&lt;/h2&gt;&lt;p&gt;Elm的互操作性体现在和JSON以及JavaScript上。&lt;/p&gt;
&lt;h3 id=&#34;与JSON&#34;&gt;&lt;a href=&#34;#与JSON&#34; class=&#34;headerlink&#34; title=&#34;与JSON&#34;&gt;&lt;/a&gt;与JSON&lt;/h3&gt;&lt;p&gt;通过Json.Decode和Json.Encode完成相关工作。解析部分由&lt;code&gt;decodeString&lt;/code&gt;完成。&lt;/p&gt;
&lt;figure class=&#34;highlight elm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;decodeString&lt;/span&gt; : &lt;span class=&#34;type&#34;&gt;Decoder&lt;/span&gt; a -&amp;gt; &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; -&amp;gt; &lt;span class=&#34;type&#34;&gt;Result&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; a&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由第一个参数指定decoder类型，如 &lt;code&gt;decodeString int &amp;quot;42&amp;quot;&lt;/code&gt;就指定了一个整数的解析器。在多数情况下，JSON字符串并没这么简单。这时，需要先利用基本的int、string、list、dict解析器结合map2、map3等构造相应的Decoder，再交给decodeString处理。&lt;strong&gt;函数返回&lt;code&gt;Result&lt;/code&gt;类型&lt;/strong&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight elm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; Json.Decode &lt;span class=&#34;keyword&#34;&gt;exposing&lt;/span&gt; (..)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Point&lt;/span&gt; = &amp;#123; x : &lt;span class=&#34;type&#34;&gt;Int&lt;/span&gt;, y : &lt;span class=&#34;type&#34;&gt;Int&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;pointDecoder&lt;/span&gt; = map2 &lt;span class=&#34;type&#34;&gt;Point&lt;/span&gt; (field &lt;span class=&#34;string&#34;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; int) (field &lt;span class=&#34;string&#34;&gt;&amp;quot;y&amp;quot;&lt;/span&gt; int)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;decodeString&lt;/span&gt; pointDecoder &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;#123; &amp;quot;&lt;/span&gt;x&lt;span class=&#34;string&#34;&gt;&amp;quot;: 3, &amp;quot;&lt;/span&gt;y&lt;span class=&#34;string&#34;&gt;&amp;quot;: 4 &amp;#125;&amp;quot;&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;-- Ok &amp;#123; x = 3, y = 4 &amp;#125; : Result String Point&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;是不是很麻烦。不像JavaScript里一个&lt;code&gt;JSON.parse()&lt;/code&gt;完事，确实Elm解析JSON的笨拙为人诟病，官方的&lt;a href=&#34;http://package.elm-lang.org/packages/NoRedInk/elm-decode-pipeline/latest&#34;&gt;pipeline&lt;/a&gt;包通过&lt;code&gt;|&amp;gt;&lt;/code&gt;组合Decoder，让语法稍微好了一点。最新的0.18版本下有&lt;a href=&#34;http://package.elm-lang.org/packages/elm-community/json-extra/2.6.0/Json-Decode-Extra&#34;&gt;json-extra&lt;/a&gt;提供更方便的decoder选择。&lt;/p&gt;
&lt;figure class=&#34;highlight elm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; Json.Decode.Pipeline &lt;span class=&#34;keyword&#34;&gt;exposing&lt;/span&gt; (decode, required)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;pointDecoder&lt;/span&gt; : &lt;span class=&#34;type&#34;&gt;Decoder&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Point&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;pointDecoder&lt;/span&gt; =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  decode &lt;span class=&#34;type&#34;&gt;Point&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    |&amp;gt; required &lt;span class=&#34;string&#34;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; int&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    |&amp;gt; required &lt;span class=&#34;string&#34;&gt;&amp;quot;y&amp;quot;&lt;/span&gt; int&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;可这距离&lt;code&gt;JSON.parse&lt;/code&gt;还是不够啊。于是有人写了个根据Records类型&lt;a href=&#34;https://github.com/eeue56/json-to-elm&#34;&gt;生成decoder的工具&lt;/a&gt;，或者&lt;a href=&#34;http://noredink.github.io/json-to-elm/&#34;&gt;在线生成&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;相比之下，&lt;a href=&#34;http://package.elm-lang.org/packages/elm-lang/core/5.1.1/Json-Encode&#34;&gt;encode&lt;/a&gt;过程就简单多了。&lt;/p&gt;
&lt;h3 id=&#34;与JavaScript&#34;&gt;&lt;a href=&#34;#与JavaScript&#34; class=&#34;headerlink&#34; title=&#34;与JavaScript&#34;&gt;&lt;/a&gt;与JavaScript&lt;/h3&gt;&lt;p&gt;有两种方式，port或flag。&lt;/p&gt;
&lt;p&gt;前者类似于在Elm应用上凿洞，用类似订阅发布的模式工作。需要在文件开头的module声明前，额外加上&lt;code&gt;port&lt;/code&gt;关键词，同时需要暴露的接口前也需要&lt;code&gt;port&lt;/code&gt;关键词。&lt;/p&gt;
&lt;figure class=&#34;highlight elm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;module&lt;/span&gt; Spelling &lt;span class=&#34;keyword&#34;&gt;exposing&lt;/span&gt; (..)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;-- port for sending strings out to JavaScript&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;port&lt;/span&gt; check : String -&amp;gt; Cmd msg&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;-- port for listening for suggestions from JavaScript&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;port&lt;/span&gt; suggestions : (&lt;span class=&#34;type&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; -&amp;gt; msg) -&amp;gt; Sub msg&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; app = &lt;span class=&#34;title class_&#34;&gt;Elm&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;Spelling&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;fullscreen&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;app.&lt;span class=&#34;property&#34;&gt;ports&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;check&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;subscribe&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;word&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; suggestions = &lt;span class=&#34;title function_&#34;&gt;spellCheck&lt;/span&gt;(word);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  app.&lt;span class=&#34;property&#34;&gt;ports&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;suggestions&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;send&lt;/span&gt;(suggestions);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;spellCheck&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;word&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// have a real implementation!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; [];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;后者暴露program的init给外部JavaScript。在声明Elm program时，使用&lt;code&gt;programWithFlags&lt;/code&gt;而非&lt;code&gt;program&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight elm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;init&lt;/span&gt; : &lt;span class=&#34;type&#34;&gt;Flags&lt;/span&gt; -&amp;gt; ( &lt;span class=&#34;type&#34;&gt;Model&lt;/span&gt;, &lt;span class=&#34;type&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Msg&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;init&lt;/span&gt; flags =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;main&lt;/span&gt; =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  programWithFlags &amp;#123; init = init, ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; app = &lt;span class=&#34;title class_&#34;&gt;Elm&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;MyApp&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;fullscreen&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;user&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;Tom&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;token&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;12345&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Elm的思路是不向后兼容，避免过去问题的引入。只通过port和flags的方式，借由Elm runtime和外部JS沟通，避免自身的runtime exception，把问题只留在JavaScript部分。&lt;/p&gt;
&lt;h2 id=&#34;工程实践&#34;&gt;&lt;a href=&#34;#工程实践&#34; class=&#34;headerlink&#34; title=&#34;工程实践&#34;&gt;&lt;/a&gt;工程实践&lt;/h2&gt;&lt;p&gt;使用Elm编写简单的应用时，可能一个.elm文件完成后，就可以直接&lt;code&gt;elm-make index.elm --output index.js&lt;/code&gt;就OK了。当工程较大时（目前还没怎么看到生产环境用Elm的），必然需要拆分组件。&lt;/p&gt;
&lt;p&gt;Elm在设计上，拆分的比MVVM框架更细。它拆分到了函数的级别，由于它pure function的特点，不受状态的束缚，重用函数比MVVM框架顾虑少太多了。如，重用view函数就相当于React和Vue中的函数式组件。重用update函数，可以实现MVVM中“组件A改变组件B，组件B改变组件C，组件C改变组件A”的史诗级难题。&lt;/p&gt;
&lt;p&gt;封装和应用是通过&lt;code&gt;module ... exposing ...&lt;/code&gt;和&lt;code&gt;import ... exposing ...&lt;/code&gt;的语法完成的。Elm会去elm-package.json中的&lt;code&gt;source-directories&lt;/code&gt;以及&lt;code&gt;dependencies&lt;/code&gt;中声明的路径和包下寻找&lt;code&gt;import&lt;/code&gt;对应的东西。剩下的，只要控制好复用程度，在习惯Elm语法后，就可以轻松且高逼格地编写Web应用了。&lt;/p&gt;
&lt;p&gt;Elm编写好，且通过&lt;code&gt;elm-make&lt;/code&gt;成功编译后，会得到一个&lt;code&gt;.js&lt;/code&gt;文件，在需要的HTML文件中引入，会得到一个&lt;code&gt;Elm&lt;/code&gt;全局对象，存储了所有的program。&lt;strong&gt;每个program都有&lt;code&gt;embed&lt;/code&gt;方法和&lt;code&gt;fullscreen&lt;/code&gt;方法绑定在HTML文件中&lt;/strong&gt;。之后，大功告成！&lt;/p&gt;
&lt;p&gt;参考作者所写的&lt;a href=&#34;https://github.com/evancz/elm-todomvc&#34;&gt;TODOMVC&lt;/a&gt;是个不错的开始。&lt;/p&gt;
&lt;h3 id=&#34;FAQ&#34;&gt;&lt;a href=&#34;#FAQ&#34; class=&#34;headerlink&#34; title=&#34;FAQ&#34;&gt;&lt;/a&gt;FAQ&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Q：Where are my components? And how do they communicate?&lt;/strong&gt;&lt;br&gt;A：参见&lt;a href=&#34;https://guide.elm-lang.org/reuse/&#34;&gt;Scaling The Elm Architecture&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q：What’s the “Elm style”?&lt;/strong&gt;&lt;br&gt;A：回头看看&lt;a href=&#34;#%E5%89%8D%E8%A8%80&#34;&gt;前言&lt;/a&gt;一节最后放的两个Elm开发感受，Elm中，View和Updates两部分均可以拆解成多个&amp;#x2F;组helper functions。最后在一个门面文件中汇总。Elm将state、updates、view放在一个文件，对开发更友好。Elm的优势在于函数式编程特点的帮助（无副作用&amp;#x2F;纯函数&amp;#x2F;强类型&amp;#x2F;出色的错误处理机制）和对人机交互模式的优异抽象。它的问题在&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不完善的文档&lt;/li&gt;
&lt;li&gt;蹩脚的互操作（interop）设计（port和flag）&lt;/li&gt;
&lt;li&gt;学习曲线陡峭&lt;/li&gt;
&lt;li&gt;缺乏成熟的成套解决方案&lt;/li&gt;
&lt;li&gt;坑爹的JSON支持&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Q：Who will save my front-end routing?&lt;/strong&gt;&lt;br&gt;A：有的，借助&lt;a href=&#34;https://github.com/elm-lang/navigation&#34;&gt;Elm Navigation package&lt;/a&gt;就可以做到，具体如何和状态变化绑定起来参见&lt;a href=&#34;https://www.elm-tutorial.org/en/07-routing/01-intro.html&#34;&gt;tutorial的routing部分&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;&lt;a href=&#34;#参考&#34; class=&#34;headerlink&#34; title=&#34;参考&#34;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://guide.elm-lang.org/&#34;&gt;An Introduction to Elm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://elm-lang.org/docs/syntax&#34;&gt;syntax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://learnyouanelm.github.io/pages/05-recursion.html&#34;&gt;Recursion | Elm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://infi.nl/nieuws/why-i-became-an-elm-evangelist/&#34;&gt;Why I became an Elm evangelist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/isRuslan/awesome-elm&#34;&gt;awesome-elm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Elm" />
        <category term="框架" />
        <category term="函数式编程" />
        <updated>2017-06-19T09:36:01.000Z</updated>
    </entry>
</feed>
