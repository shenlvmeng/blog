{
    "version": "https://jsonfeed.org/version/1",
    "title": "Shenlvmeng's Blog • All posts by \"图片渲染\" tag",
    "description": "Be sharp, my friend.",
    "home_page_url": "http://shenlvmeng.github.com/blog",
    "items": [
        {
            "id": "http://shenlvmeng.github.com/blog/2018/04/14/image-render-md/",
            "url": "http://shenlvmeng.github.com/blog/2018/04/14/image-render-md/",
            "title": "图片生成有感",
            "date_published": "2018-04-14T03:20:07.000Z",
            "content_html": "<p>最近在业务中遇到使用生成图片的需求，图片只需要展示数据，没有计算密集型工作。后端生成的图片字体太单一，工作就交给了前端。从0开始作图做像素级的操作自然是不现实的，有幸的是，HTML本身就是一个很不错的做UI的语言，有CSS的支持。再借助HTML to canvas或是SVG的库，可以完成想要的需求。</p>\n<p><em>实际上，后端大多数也是通过起chrome内核，绘制DOM节点生成图片的</em></p>\n<h3 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h3><ul>\n<li>按照指定格式生成图片</li>\n<li>保证格式正确清晰度高</li>\n<li>生成过程用户无感知</li>\n<li>对图片格式没有明确要求</li>\n</ul>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>HTML to image有两种方案比较流行，一个是<a href=\"https://github.com/niklasvh/html2canvas\">html2canvas</a>，一个是<a href=\"https://github.com/tsayen/dom-to-image\">dom-to-image</a>。它们的设计初衷其实都是将<strong>已有</strong>DOM结构转成图片类型。对比来看</p>\n<ul>\n<li>流行度上，html2canvas流行度更高，资料更好找，但更新缓慢</li>\n<li>格式支持上，dom-to-image可以将图转成SVG等更多格式，html2canvas只能输出canvas，需要用户自行处理</li>\n<li>清晰度上，dom-to-image可以导出SVG，html2canvas则需要hack的方式（设置更大的canvas绘制再等比缩放）</li>\n<li>实现原理上，都是通过遍历DOM树，读取格式化数据，dom-to-image通过浏览器解析CSS语法，因此支持度更高；html2canvas则<a href=\"https://github.com/niklasvh/html2canvas/tree/master/src/parsing\">自己实现了CSS解析</a></li>\n</ul>\n<p>渲染图片的HTML模板在通常情况下，不应该展示给用户。即生成过程短暂停留的DOM需要用户不可见。不可见的方式大致有下面几种：</p>\n<ul>\n<li><code>display: none</code>，这种情况，两个方案度都输出空白图片</li>\n<li><code>visibility: hidden</code>，在输出图片时，DOM结构会短暂闪现，两种方案都输出空白图片</li>\n<li>将DOM移出视口，html2canvas可以正确输出图片，dom-to-image不行</li>\n</ul>\n<p>本场景下生成的图片需要上传，并最后展示给C端，没有对SVG的需求。测试来看，两者的输出结果清晰度类似，且html2canvas输出格式还原度更高。综合考虑，选择html2canvas。</p>\n<p>在其他场景下，如支持SVG、需要高清截图、需要导出更多图片时，可以考虑使用dom-to-image。两者的API实际上非常类似。</p>\n<h3 id=\"容器组件\"><a href=\"#容器组件\" class=\"headerlink\" title=\"容器组件\"></a>容器组件</h3><p>考虑到未来仍可能存在的前端图片渲染需求，将相关逻辑内聚成一个组件，同时开发接口给外部使用。</p>\n<p>组件需要输入：</p>\n<ul>\n<li><code>hide</code>，因为渲染过程是<code>componentDidMount</code>阶段完成的，在每次渲染完成后要在父组件手动卸载该组件，这部分需要在<code>hide</code>中实现</li>\n<li><code>success</code>，可选的成功回调，入参是生成的canvas，<code>hide</code>作为可选第二个入参，可以异步卸载组件</li>\n<li><code>&#123;children&#125;</code>，无状态的函数组件，只负责图片的HTML模板</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * @author: shenlvmeng</span></span><br><span class=\"line\"><span class=\"comment\"> * @desc: 渲染图片的容器组件，加载时根据内部DOM生成图片，输出data64编码到回调</span></span><br><span class=\"line\"><span class=\"comment\"> * @props: hide    &#123;Function&#125; required 图片生成完成后需要在父组件执行的卸载该组件操作</span></span><br><span class=\"line\"><span class=\"comment\"> * @props: success &#123;Function&#125; 成功回调</span></span><br><span class=\"line\"><span class=\"comment\">**/</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">PropTypes</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;prop-types&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> html2canvas <span class=\"keyword\">from</span> <span class=\"string\">&#x27;html2canvas&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">GeneratedImage</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Component</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> defaultProps = &#123;</span><br><span class=\"line\">        <span class=\"attr\">hide</span>: <span class=\"function\">() =&gt;</span> &#123;&#125;,</span><br><span class=\"line\">        <span class=\"attr\">success</span>: <span class=\"function\">(<span class=\"params\">canvas</span>) =&gt;</span> &#123;<span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(canvas);&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> propTypes = &#123;</span><br><span class=\"line\">        <span class=\"attr\">hide</span>: <span class=\"title class_\">PropTypes</span>.<span class=\"property\">func</span>,</span><br><span class=\"line\">        <span class=\"attr\">success</span>: <span class=\"title class_\">PropTypes</span>.<span class=\"property\">func</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">componentDidMount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">html2canvas</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;html2canvas&#x27;</span>))</span><br><span class=\"line\">        .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">canvas</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 可以将hide操作作为success的回调使用</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">props</span>.<span class=\"property\">success</span>.<span class=\"property\">length</span> &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">this</span>.<span class=\"property\">props</span>.<span class=\"title function_\">success</span>(canvas, <span class=\"variable language_\">this</span>.<span class=\"property\">props</span>.<span class=\"property\">hide</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">this</span>.<span class=\"property\">props</span>.<span class=\"title function_\">success</span>(canvas);</span><br><span class=\"line\">                <span class=\"variable language_\">this</span>.<span class=\"property\">props</span>.<span class=\"title function_\">hide</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(e);</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">props</span>.<span class=\"title function_\">hide</span>();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                <span class=\"attr\">id</span>=<span class=\"string\">&quot;html2canvas&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                    <span class=\"attr\">position:</span> &#x27;<span class=\"attr\">fixed</span>&#x27;,</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                    <span class=\"attr\">left:</span> &#x27;<span class=\"attr\">-9999px</span>&#x27;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                &#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                &#123;this.props.children&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">GeneratedImage</span>;</span><br></pre></td></tr></table></figure>\n\n<p>使用时，像如下这样，在对应的时机展示组件即可：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">isGenerating</span> ?</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">GeneratedImage</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">hide</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;this.setState(&#123; isGenerating: false &#125;)&#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        success=&#123;(canvas) =&gt; &#123; console.log(canvas.toDataURL()); &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    &gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Image</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">GeneratedImage</span>&gt;</span></span></span><br><span class=\"line\">    : <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"已知缺陷\"><a href=\"#已知缺陷\" class=\"headerlink\" title=\"已知缺陷\"></a>已知缺陷</h3><ul>\n<li>对部分CSS属性支持度有限，如<code>box-shadow</code>，<code>-webkit-line-clamp</code>，<code>background-position</code>等</li>\n<li>使用时需要额外的卸载操作</li>\n</ul>\n<h2 id=\"后端\"><a href=\"#后端\" class=\"headerlink\" title=\"后端\"></a>后端</h2><p>生成图片的业务需求大多数是用内容填充的，因此使用浏览器渲染页面再截图是比较直观的生成方式（qrcode这种简单的图片需求另说）。在使用python的场景下，可以用<a href=\"http://selenium-python.readthedocs.io/\">selenium</a>生成，代码非常简单。</p>\n<p>首先，<code>pip install selenium</code>，如果是python3，就<code>pip3 install selenium</code>。</p>\n<p>然后，安装<a href=\"http://npm.taobao.org/mirrors/chromedriver/\">chromedriver</a>。使用headless模式打开chrome，并根据图片位置和大小截图即可。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">from</span> io <span class=\"keyword\">import</span> BytesIO</span><br><span class=\"line\"><span class=\"keyword\">from</span> os <span class=\"keyword\">import</span> path</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">screenshot</span>(<span class=\"params\">path</span>):</span><br><span class=\"line\">    <span class=\"comment\"># Headless chrome</span></span><br><span class=\"line\"></span><br><span class=\"line\">    DRIVER = <span class=\"string\">&#x27;chromedriver&#x27;</span> <span class=\"comment\"># add this to your $PATH</span></span><br><span class=\"line\">    chrome_options = webdriver.ChromeOptions()</span><br><span class=\"line\">    chrome_options.add_argument(<span class=\"string\">&#x27;--headless&#x27;</span>)</span><br><span class=\"line\">    chrome_options.add_argument(<span class=\"string\">&#x27;--disable-gpu&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># get screenshot</span></span><br><span class=\"line\"></span><br><span class=\"line\">    browser = webdriver.Chrome(chrome_options=chrome_options, executable_path=DRIVER)</span><br><span class=\"line\">    browser.get(path)</span><br><span class=\"line\">    ele = browser.find_element_by_id(<span class=\"string\">&#x27;demo&#x27;</span>)</span><br><span class=\"line\">    location = ele.location</span><br><span class=\"line\">    size = ele.size</span><br><span class=\"line\">    image = browser.get_screenshot_as_png()</span><br><span class=\"line\">    browser.quit()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># crop image</span></span><br><span class=\"line\"></span><br><span class=\"line\">    im  = Image.<span class=\"built_in\">open</span>(BytesIO(image))</span><br><span class=\"line\"></span><br><span class=\"line\">    left = location[<span class=\"string\">&#x27;x&#x27;</span>]</span><br><span class=\"line\">    top = location[<span class=\"string\">&#x27;y&#x27;</span>]</span><br><span class=\"line\">    right = location[<span class=\"string\">&#x27;x&#x27;</span>] + size[<span class=\"string\">&#x27;width&#x27;</span>] * <span class=\"number\">2</span></span><br><span class=\"line\">    bottom = location[<span class=\"string\">&#x27;y&#x27;</span>] + size[<span class=\"string\">&#x27;height&#x27;</span>] * <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">    im = im.crop((left, top, right, bottom))</span><br><span class=\"line\">    im.save(<span class=\"string\">&#x27;screenshot.png&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (__name__ == <span class=\"string\">&#x27;__main__&#x27;</span>):</span><br><span class=\"line\">    curr_path = path.dirname(path.realpath(__file__))</span><br><span class=\"line\">    screenshot(<span class=\"string\">&#x27;file://&#x27;</span> + curr_path + <span class=\"string\">&#x27;/demo.html&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>这样就可以获取到示例页面的截图。</p>\n",
            "tags": [
                "图片渲染",
                "html2canvas",
                "dom-to-image"
            ]
        }
    ]
}