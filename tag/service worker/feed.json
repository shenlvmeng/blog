{
    "version": "https://jsonfeed.org/version/1",
    "title": "Shenlvmeng's Blog • All posts by \"service worker\" tag",
    "description": "Be sharp, my friend.",
    "home_page_url": "http://shenlvmeng.github.com/blog",
    "items": [
        {
            "id": "http://shenlvmeng.github.com/blog/2017/09/04/pwa-and-hybrid-brief/",
            "url": "http://shenlvmeng.github.com/blog/2017/09/04/pwa-and-hybrid-brief/",
            "title": "PWA以及Hybrid开发方案简介",
            "date_published": "2017-09-04T09:59:00.000Z",
            "content_html": "<h2 id=\"PWA\"><a href=\"#PWA\" class=\"headerlink\" title=\"PWA\"></a>PWA</h2><p>PWA(Progressive Web App)渐进增强的Web App。最早提出在2015年，它最初的设计理念是，保留Web的精髓，让Web逐渐演进成App，而非现在Hybrid App（即现在最常用的UIWebView&#x2F;WebView+前端）形式。</p>\n<ul>\n<li>可安装性</li>\n<li>离线能力</li>\n<li>推送能力</li>\n</ul>\n<p>在PWA的概念下，网页可以被添加到主屏同时支持全屏运行，在Service Worker帮助下可以离线运行，最后它仍是Web而并不用添加到App Store中。</p>\n<p>说到Service Worker很多人可能会想到Web Worker的概念。这两个看起来是包含关系的概念实际上有区别。</p>\n<ul>\n<li>Web Worker是JS多线程的一种实现方式，借助它可以让脚本在后台运行，worker对象和主线程通过message的方式交流，caniuse上的支持度为93%</li>\n<li>Service Worker是浏览器的一个新特性，配合PWA的概念一起使用，是PWA网络请求的代理，结合缓存管理等方案，提供很好的离线体验，caniuse支持度仅有73%</li>\n</ul>\n<p>一个<a href=\"https://nolanlawson.github.io/cascadia-2016/#/35\">介绍ppt</a>上展示了具体的区别：</p>\n<ul>\n<li>和tab的关系，Web Worker是一tab对多Web Worker，Service Worker则是多对一</li>\n<li>生命周期，Web Worker和选项卡同生共死，Service Worker则是完全独立的</li>\n<li>擅长场景，Web Worker用在多线程协同，Service Worker则可以提供很好的离线体验</li>\n<li>为保证安全Service Worker要求scheme为https</li>\n</ul>\n<p>Service Worker通过<code>navigator.serviceWorker.register(&#39;path&#39;).then</code>的方式注册，之后便能通过监听事件拿到所有scope里发生的请求，当然，可以在path后的第二个参数中显式地声明作用域（如<code>&#123;scope: &#39;/js&#39;&#125;</code>）。Service Worker可以监听它声明周期中的各事件</p>\n<ul>\n<li><strong>Install</strong> 发生在第一次注册和sw.js（这里的文件名只是举个例子）改变时，通常在这个阶段设定SW的初始状态和准备好缓存。缓存可以借助<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Cache\">caches API</a>完成。</li>\n<li><strong>Fetch</strong> 发生在网络请求产生时，任何匹配了Request的网络请求都会被拦截，并返回缓存数据。只有找不到存在的缓存，才会产生一个请求</li>\n<li><strong>Activate</strong> 发生在SW更新或网页关掉再重新打开时，触发在install之后</li>\n<li><strong>Sync</strong> 发生在用户有网络时，用在用户进行依赖网络的操作时，会推迟到有网络时再执行。简单来说，所有的依赖网络的操作，都需要使用sync事件</li>\n</ul>\n<p>除了Service Worker，Manifest也是很重要的一部分。它用来描述应用程序的各种信息。它包括下面一些成员</p>\n<ul>\n<li><strong>background-color</strong> 在css加载前用作应用背景颜色</li>\n<li><strong>name</strong> 应用名，<strong>short_name</strong>也是类似意思</li>\n<li><strong>description</strong> 应用描述</li>\n<li><strong>display</strong> 显示模式，有<code>fullscreen</code>, <code>standalone</code>, <code>minimal-ui</code>和<code>browser</code>几种可以选择</li>\n<li><strong>icons</strong> 应用图标，数组类型，每项包含<code>src</code>, <code>type</code>和<code>sizes</code>几个属性</li>\n<li><strong>orientation</strong> 默认的屏幕朝向</li>\n</ul>\n<p><a href=\"https://pwa.rocks/\">这里</a>有一个收集PWA酷站的地方。</p>\n<h2 id=\"Hybrid方案相关\"><a href=\"#Hybrid方案相关\" class=\"headerlink\" title=\"Hybrid方案相关\"></a>Hybrid方案相关</h2><p>离线包管理方案：</p>\n<ol>\n<li>本地开发测试，提交特性分支到远端，</li>\n<li>通过提MR的方式合并在当前迭代分支上，触发basement自动CI为zip格式，根据当前发包的状态，传递给NebulaMng管理</li>\n<li>NebulaMng基于zip生成版本号和配置文件，构建整个离线包，并推送给应用中心</li>\n<li>应用中心负责向客户端推送更新</li>\n<li>客户端根据策略拉取离线包、解压、渲染</li>\n</ol>\n<p>离线包本地渲染方案：</p>\n<ol>\n<li>加载公共资源包</li>\n<li>判断本地是否已安装该离线包，若有，则加载到内存，否则触发离线包下载</li>\n<li>WebView加载离线包url链接，加载前检查内存中是否存在页面数据，若有，从内存中取出并渲染，否则fallback到线上cdn地址</li>\n</ol>\n<p>离线包更新方案：</p>\n<ol>\n<li>应用中心广播或服务端发sync消息触发</li>\n<li>向wapcenter获取当前客户端下所有包信息</li>\n<li>在本地没有当前版本且WiFi条件或auto_install为1时更新本地包</li>\n</ol>\n<p>双向通信和JSBridge原理：</p>\n<ul>\n<li>WebView在载入页面时，注入JSBridge脚本。通过调用JSBridge.call，触发调用参数的序列化，并调用<code>console.log(h5container.message:xxx)</code>或<code>window.prompt</code>事件。WebView监听页面的console或prompt事件，解析传递的参数信息，然后通过NebulaService分发事件</li>\n<li>Service、Session、Page实例化时，内部都有一个H5PluginManager成员，通过类似EventEmitter的形式存储着一个action -&gt; plugin的map。每个plugin都有interceptEvent和handleEvent两个函数，处理事件的拦截和处理两个阶段</li>\n<li>WebView通过loadUrl(“javascript:JsBridge.callback”)的形式输入结果并运行回调</li>\n</ul>\n<p>实现上类似这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;<span class=\"comment\">//JsBridge</span></span><br><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"variable language_\">window</span></span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> callbackList = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">window</span>.<span class=\"property\">JsBridge</span> = &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 参数说明</span></span><br><span class=\"line\"><span class=\"comment\">     * @evt &#123;string&#125; 调用接口名称 (必须)</span></span><br><span class=\"line\"><span class=\"comment\">     * @params &#123;object&#125; 配置参数 (可选)</span></span><br><span class=\"line\"><span class=\"comment\">     * @callback &#123;function&#125; 回调函数 (可选)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"attr\">call</span>: <span class=\"keyword\">function</span>(<span class=\"params\">evt, params, callback</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//第一个参数必须为string</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> evt != <span class=\"string\">&#x27;string&#x27;</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> params == <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">        callback = params;</span><br><span class=\"line\">        params = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> params != <span class=\"string\">&#x27;object&#x27;</span>) &#123;</span><br><span class=\"line\">        params = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">var</span> callbackId = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>() + <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> callback == <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">        callbackList[callbackId] = callback;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">var</span> msg = &#123;</span><br><span class=\"line\">        <span class=\"attr\">callbackId</span>: callbackId,</span><br><span class=\"line\">        <span class=\"attr\">action</span>: evt,</span><br><span class=\"line\">        <span class=\"attr\">data</span>: params || &#123;&#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"title function_\">prompt</span>(<span class=\"string\">&#x27;JsBridgeCall&#x27;</span>, <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(msg));</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">/* 参数说明</span></span><br><span class=\"line\"><span class=\"comment\">     * @params &#123;object&#125; 返回的数据 (必须)</span></span><br><span class=\"line\"><span class=\"comment\">     * 数据示例：&#123; callbackId: &#x27;xxx&#x27;, data: &#x27;&#x27; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"attr\">callback</span>: <span class=\"keyword\">function</span>(<span class=\"params\">params</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// params = JSON.parse(params);</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> callbackId = params.<span class=\"property\">callbackId</span>,</span><br><span class=\"line\">        data = params.<span class=\"property\">data</span>,</span><br><span class=\"line\">        callbackHandler = callbackList[callbackId];</span><br><span class=\"line\">      callbackHandler &amp;&amp; callbackHandler.<span class=\"title function_\">call</span>(<span class=\"literal\">null</span>, data);</span><br><span class=\"line\">      <span class=\"keyword\">delete</span> callbackList[callbackId]; <span class=\"comment\">//删除回调</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)(<span class=\"variable language_\">window</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">;<span class=\"comment\">//JsBridgeReady</span></span><br><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"variable language_\">document</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> evt = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createEvent</span>(<span class=\"string\">&#x27;HTMLEvents&#x27;</span>);</span><br><span class=\"line\">  evt.<span class=\"title function_\">initEvent</span>(<span class=\"string\">&#x27;JsBridgeReady&#x27;</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"title function_\">dispatchEvent</span>(evt)</span><br><span class=\"line\">&#125;)(<span class=\"variable language_\">document</span>);</span><br></pre></td></tr></table></figure>\n\n<p>native和H5混合方案：</p>\n<ul>\n<li>在RootView中创建离线包View再异步添加进来</li>\n<li>通过JSBridge进行交互</li>\n<li>提前拦截touch事件，防止冲突</li>\n</ul>\n",
            "tags": [
                "PWA",
                "hybrid",
                "JSBridge",
                "Web Worker",
                "Service Worker"
            ]
        }
    ]
}