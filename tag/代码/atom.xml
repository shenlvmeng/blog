<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://shenlvmeng.github.com/blog</id>
    <title>Shenlvmeng&#39;s Blog • Posts by &#34;代码&#34; tag</title>
    <link href="http://shenlvmeng.github.com/blog" />
    <updated>2019-12-02T15:08:32.000Z</updated>
    <category term="总结" />
    <category term="制度" />
    <category term="道德" />
    <category term="文官" />
    <category term="万历" />
    <category term="明朝" />
    <category term="读书笔记" />
    <category term="展望" />
    <category term="2018" />
    <category term="2019" />
    <category term="flag" />
    <category term="2020" />
    <category term="2021" />
    <category term="2022" />
    <category term="2023" />
    <category term="面试" />
    <category term="前端" />
    <category term="FAQ" />
    <category term="HTML" />
    <category term="CSS" />
    <category term="style guide" />
    <category term="编程" />
    <category term="范式" />
    <category term="设计" />
    <category term="艺术" />
    <category term="质量" />
    <category term="async_hooks" />
    <category term="cls-hooked" />
    <category term="logId" />
    <category term="录音" />
    <category term="getUserMedia" />
    <category term="AudioContext" />
    <category term="PCM" />
    <category term="WAVE" />
    <category term="二叉搜索树" />
    <category term="算法" />
    <category term="回忆" />
    <category term="老朋友" />
    <category term="C" />
    <category term="Hash" />
    <category term="布隆过滤器" />
    <category term="字符串检索" />
    <category term="canvas" />
    <category term="流程图" />
    <category term="d3" />
    <category term="g6" />
    <category term="zrender" />
    <category term="processOn" />
    <category term="SDN" />
    <category term="cbench" />
    <category term="安装说明" />
    <category term="绘图" />
    <category term="动画" />
    <category term="攻略" />
    <category term="流水账" />
    <category term="成都" />
    <category term="重庆" />
    <category term="武汉" />
    <category term="重构" />
    <category term="代码" />
    <category term="代码风格" />
    <category term="数据可视化" />
    <category term="爬虫" />
    <category term="chrome" />
    <category term="crx" />
    <category term="扩展" />
    <category term="CORS" />
    <category term="跨域" />
    <category term="盒模型" />
    <category term="浮动" />
    <category term="Reactive Programming" />
    <category term="JavaScript" />
    <category term="Cycle.js" />
    <category term="Dart" />
    <category term="最佳实践" />
    <category term="引流" />
    <category term="universal-link" />
    <category term="app-link" />
    <category term="脚手架" />
    <category term="degit" />
    <category term="git" />
    <category term="设计模式" />
    <category term="类" />
    <category term="接口" />
    <category term="抽象类" />
    <category term="DOM" />
    <category term="Docker" />
    <category term="ONOS" />
    <category term="控制器" />
    <category term="虚拟化" />
    <category term="笔记" />
    <category term="UX" />
    <category term="UED" />
    <category term="准则" />
    <category term="Java" />
    <category term="Ruby" />
    <category term="反射" />
    <category term="编程范式" />
    <category term="鸭子类型" />
    <category term="管理" />
    <category term="效率" />
    <category term="知识工作者" />
    <category term="卓有成效" />
    <category term="Elm" />
    <category term="框架" />
    <category term="函数式编程" />
    <category term="虚网映射" />
    <category term="Javascript" />
    <category term="并发" />
    <category term="event loop" />
    <category term="覆盖率" />
    <category term="端到端测试" />
    <category term="istanbul" />
    <category term="istanbuljs" />
    <category term="JavaSript" />
    <category term="Express" />
    <category term="源码" />
    <category term="代码覆盖率" />
    <category term="istanbul-middleware" />
    <category term="代码插桩" />
    <category term="require钩子" />
    <category term="babel-plugin-istanbul" />
    <category term="css" />
    <category term="html5" />
    <category term="flex" />
    <category term="javascript" />
    <category term="roadmap" />
    <category term="闭包" />
    <category term="Haskell" />
    <category term="monad" />
    <category term="后端" />
    <category term="管理后台" />
    <category term="egg.js" />
    <category term="工作流" />
    <category term="pull request" />
    <category term="golang" />
    <category term="语言学习" />
    <category term="黑客与画家" />
    <category term="创业" />
    <category term="骑行" />
    <category term="海南" />
    <category term="图文" />
    <category term="reflow" />
    <category term="repaint" />
    <category term="命名法" />
    <category term="成功学" />
    <category term="自我建设" />
    <category term="HTTP" />
    <category term="HTTP/2" />
    <category term="SPDY" />
    <category term="QUIC" />
    <category term="HTTPS" />
    <category term="状态码" />
    <category term="网络攻击" />
    <category term="介绍" />
    <category term="图片渲染" />
    <category term="html2canvas" />
    <category term="dom-to-image" />
    <category term="electron" />
    <category term="indexedDB" />
    <category term="异步" />
    <category term="Generator" />
    <category term="thunk" />
    <category term="async" />
    <category term="函数表达式" />
    <category term="对象" />
    <category term="继承" />
    <category term="类型转换" />
    <category term="==" />
    <category term="类型判断" />
    <category term="猫" />
    <category term="杀手" />
    <category term="管理学" />
    <category term="领导力" />
    <category term="梯队" />
    <category term="移动端" />
    <category term="UI" />
    <category term="自适应" />
    <category term="rem" />
    <category term="Electron" />
    <category term="GUI" />
    <category term="gpx" />
    <category term="template" />
    <category term="Electron Builder" />
    <category term="PWA" />
    <category term="方法论" />
    <category term="夜话" />
    <category term="多线" />
    <category term="生活" />
    <category term="密码" />
    <category term="密钥" />
    <category term="技改" />
    <category term="Vue" />
    <category term="gulp" />
    <category term="瀑布流" />
    <category term="电影" />
    <category term="PHP" />
    <category term="参考" />
    <category term="思维" />
    <category term="学习能力" />
    <category term="右脑" />
    <category term="经济学" />
    <category term="宏观经济学" />
    <category term="术语" />
    <category term="GDP" />
    <category term="CPI" />
    <category term="储蓄" />
    <category term="投资" />
    <category term="金融市场" />
    <category term="股票" />
    <category term="债券" />
    <category term="美联储" />
    <category term="失业" />
    <category term="货币" />
    <category term="现值" />
    <category term="准备金" />
    <category term="货币中性" />
    <category term="通货膨胀" />
    <category term="汇率" />
    <category term="购买力" />
    <category term="净出口" />
    <category term="资产净流出" />
    <category term="总需求" />
    <category term="总供给" />
    <category term="流动性偏好" />
    <category term="乘数效应" />
    <category term="菲利普斯曲线" />
    <category term="微观经济学" />
    <category term="供求" />
    <category term="贸易" />
    <category term="市场" />
    <category term="税" />
    <category term="剩余" />
    <category term="外部性" />
    <category term="公共物品" />
    <category term="公共资源" />
    <category term="生产成本" />
    <category term="利润" />
    <category term="垄断" />
    <category term="价格歧视" />
    <category term="寡头" />
    <category term="垄断竞争" />
    <category term="生产要素市场" />
    <category term="贫困" />
    <category term="消费者选择理论" />
    <category term="不对称信息" />
    <category term="政治经济学" />
    <category term="行为经济学" />
    <category term="VSCode" />
    <category term="编辑器" />
    <category term="IDE" />
    <category term="hybrid" />
    <category term="JSBridge" />
    <category term="Web Worker" />
    <category term="Service Worker" />
    <category term="习惯" />
    <category term="lint" />
    <category term="editorconfig" />
    <category term="commit message" />
    <category term="量子物理" />
    <category term="史话" />
    <category term="埋点" />
    <category term="raven.js" />
    <category term="前端监控" />
    <category term="文本编辑器" />
    <category term="quill" />
    <category term="结构化数据" />
    <category term="React" />
    <category term="Hooks" />
    <category term="函数组件" />
    <category term="复用" />
    <category term="状态管理" />
    <category term="redux" />
    <category term="MobX" />
    <category term="代码质量" />
    <category term="重来" />
    <category term="requestAnimationFrame" />
    <category term="TypeScript" />
    <category term="路书" />
    <category term="gpx解析" />
    <category term="EXIF" />
    <category term="人类" />
    <category term="生存" />
    <category term="基因" />
    <category term="响应式编程" />
    <category term="RxJS" />
    <category term="成长" />
    <category term="业务" />
    <category term="思想" />
    <category term="程序设计" />
    <category term="心理学" />
    <category term="自我" />
    <category term="社会思维" />
    <category term="社会影响" />
    <category term="文化" />
    <category term="性别" />
    <category term="从众" />
    <category term="说服" />
    <category term="临床诊断" />
    <category term="陪审团" />
    <category term="司法" />
    <category term="物质主义" />
    <category term="健康" />
    <category term="社会关系" />
    <category term="偏见" />
    <category term="攻击行为" />
    <category term="亲密关系" />
    <category term="友谊" />
    <category term="爱情" />
    <category term="利他" />
    <category term="冲突" />
    <category term="和解" />
    <category term="软技能" />
    <category term="理财" />
    <category term="健身" />
    <category term="自我营销" />
    <category term="学习" />
    <category term="商业模式" />
    <category term="产品" />
    <category term="校园网" />
    <category term="互联网" />
    <category term="技术" />
    <category term="web开发" />
    <category term="哲思" />
    <category term="择偶观" />
    <category term="validator" />
    <category term="大文件" />
    <category term="visibilityChange" />
    <category term="IntersectionObserver" />
    <category term="图种" />
    <category term="draggable" />
    <category term="webpack" />
    <category term="z-index" />
    <category term="git submodule" />
    <category term="object-fit" />
    <category term="object-position" />
    <category term="BroadcastChannel" />
    <category term="extract-text-webpack-plugin" />
    <category term="lottie" />
    <category term="backface-visibility" />
    <category term="egret" />
    <category term="mock" />
    <category term="SSO" />
    <category term="autoprefixer" />
    <category term="polyfill" />
    <category term="Android" />
    <category term="ffmpeg" />
    <category term="React Hooks" />
    <category term="rollup" />
    <category term="CDN" />
    <category term="DNS" />
    <category term="CNAME" />
    <category term="架构" />
    <category term="组件" />
    <category term="ssh" />
    <category term="fis-receiver" />
    <category term="tmux" />
    <category term="origami" />
    <category term="promise" />
    <category term="encodeURI" />
    <category term="encodeURIComponent" />
    <category term="axios" />
    <category term="charles" />
    <category term="黑色幽默" />
    <category term="朋友" />
    <category term="梦" />
    <category term="濒死" />
    <category term="江南" />
    <category term="苏州" />
    <category term="无锡" />
    <category term="宜兴" />
    <category term="湖州" />
    <category term="南浔" />
    <category term="游记" />
    <category term="随笔" />
    <category term="群众" />
    <category term="理论" />
    <category term="实效" />
    <category term="测试" />
    <category term="长沙" />
    <category term="杭州" />
    <category term="湖南" />
    <category term="核酸" />
    <category term="美食" />
    <category term="云南" />
    <category term="丽江" />
    <category term="大理" />
    <category term="青岛" />
    <category term="济南" />
    <category term="山东" />
    <category term="西北" />
    <category term="银川" />
    <category term="西宁" />
    <category term="青海湖" />
    <category term="西海镇" />
    <category term="茶卡盐湖" />
    <category term="厦门" />
    <category term="感受" />
    <category term="C语言" />
    <category term="树" />
    <category term="主干开发" />
    <category term="GitFlow" />
    <category term="GithubFlow" />
    <category term="typescript" />
    <category term="类型系统" />
    <category term="webrtc" />
    <category term="RTMP" />
    <category term="首屏时间" />
    <category term="性能优化" />
    <category term="公司" />
    <category term="个人发展" />
    <category term="战略" />
    <category term="晋升" />
    <category term="哲学" />
    <category term="幸福" />
    <category term="人生" />
    <category term="叔本华" />
    <category term="Unix" />
    <category term="Rollup" />
    <category term="mouseout" />
    <category term="mouseleave" />
    <category term="lint-staged" />
    <category term="吸顶" />
    <category term="图片组件" />
    <category term="形式系统" />
    <category term="不完全性" />
    <category term="隐喻" />
    <category term="哥德尔" />
    <category term="巴赫" />
    <category term="埃舍尔" />
    <category term="济州" />
    <category term="西归浦" />
    <category term="城山" />
    <category term="咸德" />
    <category term="人工智能" />
    <category term="心智" />
    <category term="自指" />
    <category term="图灵" />
    <category term="马列主义" />
    <category term="恩格斯" />
    <category term="家庭" />
    <category term="国家" />
    <category term="阶级" />
    <category term="氏族" />
    <category term="哲学史" />
    <category term="孔子" />
    <category term="老子" />
    <category term="儒家" />
    <category term="道家" />
    <category term="佛教" />
    <category term="禅宗" />
    <category term="理学" />
    <category term="心学" />
    <entry>
        <id>http://shenlvmeng.github.com/blog/2019/12/02/clean-code/</id>
        <title>《代码整洁之道》——有一个好的代码品味</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2019/12/02/clean-code/"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;The only valid measurement of code quality: WTFs&amp;#x2F;minute&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在成为一个程序员的初期，实现功能还需磕磕绊绊的阶段，我们大抵没有精力操心代码风格的问题；而在能够搞定环境和API使用的时间段，大部分人又会沉湎于使用一门语言让想象实现的成就感，而没有发现暗藏在迭代后的危机。往往迭代了一段时间后，才发现之前埋下的巨坑已经让自己无从下手。这时一部分人醒悟过来，意识到一个优良的代码风格对于项目推进的长远意义。这也是《Clean Code》这本书的宗旨。它较之《程序员修炼之道》更为具体，较之《重构》更为宏观。对于工作一段时间后的程序员来说，是一个很好的提醒和反思归纳的建议。让代码work的方式是千万种，而让代码可持续，可扩展，长久work的方式也许需要前辈指引些方法。&lt;/p&gt;
&lt;h2 id=&#34;观念&#34;&gt;&lt;a href=&#34;#观念&#34; class=&#34;headerlink&#34; title=&#34;观念&#34;&gt;&lt;/a&gt;观念&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Later equals never —— Leblanc Law&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;糟糕的代码会让人难以下手，拖慢进度，若无人着手改善，混乱会持续增加，进而降低团队生产力，降低人效，然后搞砸整个项目。为什么不一开始就打好基础，写出整洁代码呢？&lt;/p&gt;
&lt;p&gt;下面是一些大师对“整洁代码”的界定&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“代码逻辑直截了当，缺陷难以隐藏；减少依赖关系，从而便于维护；性能调优，省得引人做出没规矩的优化，干出蠢事；整洁的代码只干一件事” —— Bjarne Stroustrup&lt;/li&gt;
&lt;li&gt;“代码简单直接，如同优美的散文；从不隐藏设计者的意图，充满干净利落的抽象和直截了当的控制语句” —— Grady Booch&lt;/li&gt;
&lt;li&gt;“可由作者外的人阅读和扩展，应该有单元测试和验收测试；只使用有意义的命名；提供尽量正交的使用方法（一种而非多种做一件事的方法）；尽量少的API；尽量少的依赖关系，且要明确定义和清晰提供；代码应从字面意义上表达其含义” —— Dave Thomas&lt;/li&gt;
&lt;li&gt;“整洁的代码总是看起来像某位特别在意的人写的，几乎没有改进的余地，所有的改进都会回到原点” —— Michael Feather&lt;/li&gt;
&lt;li&gt;“能通过所有测试；没有重复代码，表达力强大；体现系统中的全部设计理念；包括尽量少的实体，如类、方法、函数。” —— Ron Jeffries&lt;/li&gt;
&lt;li&gt;“整洁代码让每个例程都深合己意；漂亮代码让语言看起来像是专门为解决那个问题而存在” —— Ward Cunningham&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;编写代码的难度，取决于读周边代码的难度，要想干得快，就先让代码易读。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;让营地比你来时更干净 —— 童子军军规&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;命名&#34;&gt;&lt;a href=&#34;#命名&#34; class=&#34;headerlink&#34; title=&#34;命名&#34;&gt;&lt;/a&gt;命名&lt;/h2&gt;&lt;p&gt;好的命名，可以让人一眼就明白代码的逻辑。看下面两段代码：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; List&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;[]&amp;gt; getThem() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  List&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;[]&amp;gt; list1 = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;[]&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;[] x : theList)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (x[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] == &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      list1.add(x)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; list1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; List&amp;lt;Cell&amp;gt; &lt;span class=&#34;title function_&#34;&gt;getFlaggedCells&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  List&amp;lt;Cell&amp;gt; flaggedCells = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;Cell&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (Cell cell : gameBoard)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (cell.isFlagged)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      flaggedCells.add(cell);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; flaggedCells;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;下面是一些准则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;名副其实，一旦发现更好的，就替换掉旧的。&lt;strong&gt;如果名称还需要注释补充，那就不算名副其实&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;避免误导，提防使用不同之处较小的名称，比如&lt;code&gt;UsernameListEmptyFilter&lt;/code&gt;和&lt;code&gt;UsernameListNullFilter&lt;/code&gt;，不要混用1和l，以及0和O&lt;/li&gt;
&lt;li&gt;做有意义的区分，少废话，反例是&lt;code&gt;a1&lt;/code&gt;和&lt;code&gt;a2&lt;/code&gt;，&lt;code&gt;nameString&lt;/code&gt;和&lt;code&gt;name&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用&lt;strong&gt;能读出来&lt;/strong&gt;的名称，方便程序员的沟通&lt;/li&gt;
&lt;li&gt;使用&lt;strong&gt;可搜索&lt;/strong&gt;的名称，仅在块作用域或短函数内使用单字母名称&lt;/li&gt;
&lt;li&gt;不把类型信息放在名称中&lt;/li&gt;
&lt;li&gt;减少不必要的前缀和后缀&lt;/li&gt;
&lt;li&gt;类名应该是名词，方法名应该是动词或动词短语&lt;/li&gt;
&lt;li&gt;别玩梗&lt;/li&gt;
&lt;li&gt;标准化语素，为每一个抽象概念选择一个统一的词&lt;/li&gt;
&lt;li&gt;别用有多重含义的词汇，这会增加使用者顾虑和理解成本&lt;/li&gt;
&lt;li&gt;只在没有明确定义的场景下使用语境（类，前缀……）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;函数&#34;&gt;&lt;a href=&#34;#函数&#34; class=&#34;headerlink&#34; title=&#34;函数&#34;&gt;&lt;/a&gt;函数&lt;/h2&gt;&lt;p&gt;下面是一些准则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;短小，更短小&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;只做一件事，只做一件事，只做一件事&lt;/strong&gt;，重要的事情说三遍&lt;ul&gt;
&lt;li&gt;还有一种方式可以帮助判断函数是不是只做了一件事：&lt;strong&gt;函数语句是否在一个抽象层级上&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;只做一件事的函数无法被继续合理拆分成多段&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;让代码拥有从上到下的自然的阅读顺序，尽量避免跳来跳去的阅读顺序&lt;/li&gt;
&lt;li&gt;为函数使用&lt;strong&gt;描述性&lt;/strong&gt;的名称&lt;/li&gt;
&lt;li&gt;函数&lt;strong&gt;最多3个入参&lt;/strong&gt;，最理想是没有参数，其次是1个，再其次是2个，要避免3个参数&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;布尔类型的参数会让你的函数难以理解&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;使用二元参数时，最好保证前后顺序不敏感&lt;/li&gt;
&lt;li&gt;对于复杂的入参，可以用对象封装起来&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;函数要么只做副作用（&lt;em&gt;做什么事&lt;/em&gt;），要么没有副作用（&lt;em&gt;回答什么事&lt;/em&gt;），而且能从名称中一目了然地看到&lt;/li&gt;
&lt;li&gt;用异常代替错误码，错误处理也是一件事&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;别重复自己（Don’t repeat yourself, DRY）&lt;/strong&gt;。重复是软件中一切邪恶的根源，软件开发领域的所有创新都在不断尝试从源代码中消灭重复&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;函数是语言的动词，类是名词。大师级的程序员把系统当做故事来讲，而不是程序来写。他们使用特定编程语言提供的工具构建一种&lt;strong&gt;更丰富和更具表达力的语言&lt;/strong&gt;。好的函数必须干净利落的组合在一起，形成清晰明确的语言，帮你&lt;strong&gt;讲好故事&lt;/strong&gt;。这个过程不是一蹴而就的，你可以现象什么就写什么，然后一点点打磨它。&lt;/p&gt;
&lt;h2 id=&#34;注释&#34;&gt;&lt;a href=&#34;#注释&#34; class=&#34;headerlink&#34; title=&#34;注释&#34;&gt;&lt;/a&gt;注释&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;使用注释 &amp;#x3D; 承认自己无法用代码表达清楚意图&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;列举注释的准则前，必须摆正观念。&lt;strong&gt;注释是一种必须的恶，如果编程语言足够有表达力，或你长于用语言表达自己的意图，那么就不需要注释。注释的恰当用法是弥补我们用代码表达意图时遭遇的失败。&lt;/strong&gt;注释存在的时间越久，具体所描述的事实就越远。原因很简单，程序员不可能坚持维护注释。&lt;/p&gt;
&lt;p&gt;的确，程序员应该让注释保持可维护而精准，但最好能直接写清楚代码，保证无须编写注释。&lt;strong&gt;真实只在一处：代码&lt;/strong&gt;，只有代码能忠实告诉你它做的事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;注释无法挽救糟糕的代码&lt;/strong&gt;，与其为糟糕代码补充大量注释，不如花时间写出整洁有表达力的代码&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用代码代替注释&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;有些无法避免且合理存在的注释&lt;ul&gt;
&lt;li&gt;法律信息&lt;/li&gt;
&lt;li&gt;对函数名的补充&lt;/li&gt;
&lt;li&gt;对稍微反常规意图的解释，避免误解&lt;/li&gt;
&lt;li&gt;糟糕的代码来自外部库或外部API&lt;/li&gt;
&lt;li&gt;敏感代码的警告&lt;/li&gt;
&lt;li&gt;TODO、FIXME&lt;/li&gt;
&lt;li&gt;Javadoc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;下面则是一些很常见的糟糕注释，它们只是糟糕代码的借口&lt;ul&gt;
&lt;li&gt;只有自己看得懂的注释&lt;/li&gt;
&lt;li&gt;对函数名的复述&lt;/li&gt;
&lt;li&gt;误导性注释&lt;/li&gt;
&lt;li&gt;日志型注释，如Milestone记录&lt;/li&gt;
&lt;li&gt;废话&lt;/li&gt;
&lt;li&gt;位置标记，如&lt;code&gt;====================&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;代码署名&lt;/li&gt;
&lt;li&gt;&lt;em&gt;大多数&lt;/em&gt;注释掉的代码&lt;/li&gt;
&lt;li&gt;百科式的介绍&lt;/li&gt;
&lt;li&gt;私有代码的Javadoc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;格式&#34;&gt;&lt;a href=&#34;#格式&#34; class=&#34;headerlink&#34; title=&#34;格式&#34;&gt;&lt;/a&gt;格式&lt;/h2&gt;&lt;p&gt;格式即代码风格，可以利用lint这样的自动化工具完成，需要在团队内保持一致。&lt;/p&gt;
&lt;h3 id=&#34;垂直格式&#34;&gt;&lt;a href=&#34;#垂直格式&#34; class=&#34;headerlink&#34; title=&#34;垂直格式&#34;&gt;&lt;/a&gt;垂直格式&lt;/h3&gt;&lt;p&gt;在从上到下的组织上，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以向报纸一样，先大纲，再粗线条概述，再给出细节，越往下细节越多&lt;/li&gt;
&lt;li&gt;用&lt;strong&gt;空行&lt;/strong&gt;分隔概念&lt;/li&gt;
&lt;li&gt;靠近的代码行暗示了代码间的紧密关系&lt;/li&gt;
&lt;li&gt;应避免迫使读者在源文件和类之间跳来跳去&lt;ul&gt;
&lt;li&gt;变量声明应尽量靠近使用位置&lt;/li&gt;
&lt;li&gt;循环中的控制变量总在循环语句中声明&lt;/li&gt;
&lt;li&gt;类成员在类顶部声明&lt;/li&gt;
&lt;li&gt;如果某个函数调用了另一个，就应该把它们放一起&lt;/li&gt;
&lt;li&gt;概念相关的代码应该放在一起，如&lt;code&gt;getHour&lt;/code&gt;和&lt;code&gt;getMinute&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果可以，最好把被调用的函数放在执行调用的函数下面&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;横向格式&#34;&gt;&lt;a href=&#34;#横向格式&#34; class=&#34;headerlink&#34; title=&#34;横向格式&#34;&gt;&lt;/a&gt;横向格式&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;水平字符的上限，100或120&lt;/li&gt;
&lt;li&gt;使用&lt;strong&gt;空格&lt;/strong&gt;分隔概念&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不需要水平对齐&lt;/strong&gt;，以为从左到右的阅读顺序优先于从上到下&lt;/li&gt;
&lt;li&gt;学会用&lt;strong&gt;缩进&lt;/strong&gt;表现层级&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;对象和数据结构&#34;&gt;&lt;a href=&#34;#对象和数据结构&#34; class=&#34;headerlink&#34; title=&#34;对象和数据结构&#34;&gt;&lt;/a&gt;对象和数据结构&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;对象&lt;/strong&gt;把数据隐藏于抽象的后面，暴露操作数据的函数，&lt;strong&gt;数据结构&lt;/strong&gt;暴露数据，不提供有意义的函数。&lt;/li&gt;
&lt;li&gt;过程式代码难以添加新的数据结构，因为必须修改所有函数；面向对象代码难以添加新函数，因为必须修改所有类&lt;/li&gt;
&lt;li&gt;得墨忒尔律：类C的方法f只应该调用以下对象的方法：&lt;strong&gt;C、f创建的对象、作为参数传给f的对象、C的成员所持有的对象&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据结构&lt;/strong&gt;只简单地拥有公有变量，没有函数；而&lt;strong&gt;对象&lt;/strong&gt;则只拥有私有变量和函数。一半是对象一半是数据结构的混淆会增加添加新函数和数据结构的难度&lt;/li&gt;
&lt;li&gt;DTO（Data Transfer Objects，数据传输对象）就是只有公有变量，没有函数的类，Active Record就是DTO的一种&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;错误处理&#34;&gt;&lt;a href=&#34;#错误处理&#34; class=&#34;headerlink&#34; title=&#34;错误处理&#34;&gt;&lt;/a&gt;错误处理&lt;/h2&gt;&lt;p&gt;错误处理很重要，但要是它搞乱了代码逻辑，那就是错误的用法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;返回异常而不是错误码&lt;/li&gt;
&lt;li&gt;try-catch-finally语句块就像事务，可以帮你定义用户应该期待些什么&lt;/li&gt;
&lt;li&gt;在Java中，可控异常违反开闭原则带来的成本要高于收益&lt;/li&gt;
&lt;li&gt;打包第三方API，一方面降低了依赖的覆盖面，另一方面也有助于模拟第三方调用&lt;/li&gt;
&lt;li&gt;可以把抛出错误封装成特定的函数&lt;/li&gt;
&lt;li&gt;别返回和传递null值&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;边界&#34;&gt;&lt;a href=&#34;#边界&#34; class=&#34;headerlink&#34; title=&#34;边界&#34;&gt;&lt;/a&gt;边界&lt;/h2&gt;&lt;p&gt;边界即我们代码和第三方代码的连接处。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过编写测试来概览和理解第三方代码的形式叫做&lt;strong&gt;学习性测试（learning tests）&lt;/strong&gt;。它可以帮助我们快速试错和反馈，从而对第三方API快速上手。&lt;/li&gt;
&lt;li&gt;在第三方代码尚未就绪时，&lt;strong&gt;编写我们想要的接口&lt;/strong&gt;，可以使我们能保持代码在自己控制中，并在未来通过编写adapter的形式无痛迁移&lt;/li&gt;
&lt;li&gt;应尽量避免过多依赖第三方的特定信息，更多依靠你能控制的东西，好过依靠你控制不了的东西，免得日后受其控制&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;单元测试&#34;&gt;&lt;a href=&#34;#单元测试&#34; class=&#34;headerlink&#34; title=&#34;单元测试&#34;&gt;&lt;/a&gt;单元测试&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;TDD（Test-Driven Development）三定律&lt;ul&gt;
&lt;li&gt;在编写不能通过的单元测试前，不编写生产代码&lt;/li&gt;
&lt;li&gt;只编写刚好无法通过的单元测试，不能编译也算&lt;/li&gt;
&lt;li&gt;只编写刚好足已通过失败测试的生产代码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;测试代码和生产代码一样重要&lt;/strong&gt;。正是单元测试让你的代码可扩展、可维护、可复用&lt;/li&gt;
&lt;li&gt;整洁的测试代码一样要求&lt;strong&gt;可读性&lt;/strong&gt;。大多数测试代码可以总结为构造-操作-检验（Build-Operate-Check）模式。第一个环节构造测试数据，第二个环节操作数据，第三个环节验证是否得到期望的结果&lt;/li&gt;
&lt;li&gt;每个测试中的断言数量应该尽量少，且只测试一个概念&lt;/li&gt;
&lt;li&gt;FIRST原则&lt;ul&gt;
&lt;li&gt;Fast，测试应该能够快速运行&lt;/li&gt;
&lt;li&gt;Independent，测试间应该相互独立&lt;/li&gt;
&lt;li&gt;Repeatable，测试应该在任何环境下可重复通过&lt;/li&gt;
&lt;li&gt;Self-Validating，测试应该有布尔值输出&lt;/li&gt;
&lt;li&gt;Timely，测试应及时编写&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;类&#34;&gt;&lt;a href=&#34;#类&#34; class=&#34;headerlink&#34; title=&#34;类&#34;&gt;&lt;/a&gt;类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;类应该由一组成员开始，从静态到普通，从共有到私有。且很少会有公有成员。&lt;/li&gt;
&lt;li&gt;类应该短小，&lt;strong&gt;类的名称应该能描述其权责&lt;/strong&gt;。类名无法精确明明时，类大概就太长了。类名越含糊，类越有可能拥有过多权责。类名应该控制在25个字母内，且不应该包含连词。&lt;/li&gt;
&lt;li&gt;单一权责原则（Single Responsibility Principle，SRP）认为，类和模块应有且仅有&lt;strong&gt;一条加以修改的原因&lt;/strong&gt;。这个原则可以帮助创造更好的抽象。它也是OO设计中最重要的概念之一。&lt;/li&gt;
&lt;li&gt;内聚：类应该只有少量实体变量，且所有方法都应该操作其中一些。当类的每个变量都被每个方法使用时，我们认为该类具有最大的内聚性。当发现类逐渐丧失内聚性时，尽早拆分它！让它变成多个短小的类。这个拆分的过程也是权责的拆分过程。&lt;/li&gt;
&lt;li&gt;通过基类和子类，可以在不修改类的同时，保持类对新功能的开放。在理想系统中，我们通过扩展系统而非修改现有代码来添加新特性。可以通过抽象类和接口隔离细节修改带来的影响。&lt;/li&gt;
&lt;li&gt;降低类之间的连接耦合，可以采用依赖倒置原则（Dependency Inversion Principle，DIP），让类依赖于抽象（接口）而不是具体细节（自行构造类）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;系统&#34;&gt;&lt;a href=&#34;#系统&#34; class=&#34;headerlink&#34; title=&#34;系统&#34;&gt;&lt;/a&gt;系统&lt;/h2&gt;&lt;p&gt;&lt;em&gt;这一章的Java概念较多&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分开系统的构造和使用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖注入&lt;/strong&gt;是控制反转的一种思路，它将第二权责从对象中拿出来，转移到专门的对象中去，从而遵循&lt;strong&gt;单一权责原则&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;我们应该专注于今天的用户故事，并且&lt;strong&gt;持续适当切分&lt;/strong&gt;我们的关注面。书中举了Java AOP、AspectJ框架的例子&lt;/li&gt;
&lt;li&gt;实现时，使用&lt;em&gt;大致可工作的最简单方案&lt;/em&gt;。只要软件构架有效切分了关注面，就比较好做根本性改动&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;迭代&#34;&gt;&lt;a href=&#34;#迭代&#34; class=&#34;headerlink&#34; title=&#34;迭代&#34;&gt;&lt;/a&gt;迭代&lt;/h2&gt;&lt;p&gt;Kent Beck关于测试的4个原则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运行所有测试，全面测试并持续通过所有测试的系统，就是可测试的系统。测试也能减少重构时可能破坏代码的顾虑。&lt;/li&gt;
&lt;li&gt;不可重复，使用模板生成或继承等高级概念&lt;/li&gt;
&lt;li&gt;表达程序员的意图。代码应当清晰表达作者的意图。使用好名称、保持类和函数的短小，以及之前章节提到的各种方法&lt;/li&gt;
&lt;li&gt;尽可能减少类和方法的数目，避免前两条规范的矫枉过正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;并发编程&#34;&gt;&lt;a href=&#34;#并发编程&#34; class=&#34;headerlink&#34; title=&#34;并发编程&#34;&gt;&lt;/a&gt;并发编程&lt;/h2&gt;&lt;p&gt;并发是一种解耦策略，帮助我们分解开&lt;strong&gt;做什么（目的）&lt;/strong&gt;和&lt;strong&gt;何时（时机）&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;并发&lt;strong&gt;有时&lt;/strong&gt;能改善性能，会在编写额外代码上带来额外开销&lt;/li&gt;
&lt;li&gt;正确的并发是复杂的&lt;/li&gt;
&lt;li&gt;并发会带来系统结构的变化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有些防御并发代码问题的原则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单一权责：分离并发代码和其他代码&lt;/li&gt;
&lt;li&gt;限制对可能共享的数据的访问&lt;/li&gt;
&lt;li&gt;线程应尽可能独立&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;并发执行模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;生产者-消费者模式：数据通过队列传递，队列本身是一种限定资源&lt;/li&gt;
&lt;li&gt;读者-作者模式&lt;/li&gt;
&lt;li&gt;宴席哲学家问题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还有一些需要注意的事情：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;警惕同步方法间的依赖&lt;/li&gt;
&lt;li&gt;尽可能减小sychronized区域&lt;/li&gt;
&lt;li&gt;尽早考虑程序关闭问题&lt;/li&gt;
&lt;li&gt;测试线程代码&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3个实例&#34;&gt;&lt;a href=&#34;#3个实例&#34; class=&#34;headerlink&#34; title=&#34;3个实例&#34;&gt;&lt;/a&gt;3个实例&lt;/h2&gt;&lt;p&gt;书中以三个实例的重构过程向我们表现了一些将之前思路应用于优化代码的方式。&lt;/p&gt;
&lt;h3 id=&#34;命令行参数解析：args&#34;&gt;&lt;a href=&#34;#命令行参数解析：args&#34; class=&#34;headerlink&#34; title=&#34;命令行参数解析：args&#34;&gt;&lt;/a&gt;命令行参数解析：args&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;编程是一种技术甚于科学的东西，要编写整洁代码，必须先写肮脏代码，然后再&lt;strong&gt;清理它&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在你的初稿，当代码糟糕透顶时甚至是前几稿中，很可能还是会存在烂摊子：成员多得吓人，奇怪命名的魔法字符串，一大堆的try-catch-finally代码。程序员们不都是蠢人，这堆糟糕透顶的代码其实是从最初看起来很合理但是&lt;strong&gt;扩展性差&lt;/strong&gt;的代码一步步演化来的。&lt;/p&gt;
&lt;p&gt;需要使用一些总结和抽象，来简明地表达你的目的。另外，在重构前，“我”（其实是作者）要不厌其烦地强调TDD的必要性，它能保证你重构的每一步，系统都可以工作。在重构过程中，放进拿出是常见的事，小步幅、保持测试通过，你可能会不断移动各种东西。&lt;/p&gt;
&lt;p&gt;优秀的代码设计，大都关乎&lt;strong&gt;分隔&lt;/strong&gt;——创建合适的空间防止不同种类的代码。对关注面的分隔让代码更易于理解和维护（减少理解所需要的大脑缓存）&lt;/p&gt;
&lt;h3 id=&#34;JUnit&#34;&gt;&lt;a href=&#34;#JUnit&#34; class=&#34;headerlink&#34; title=&#34;JUnit&#34;&gt;&lt;/a&gt;JUnit&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;不必要的编码前缀（&lt;code&gt;f_&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;未封装的条件判断&lt;/li&gt;
&lt;li&gt;建议使用肯定式代替否定式判断&lt;/li&gt;
&lt;li&gt;奇怪的不直观的函数名&lt;/li&gt;
&lt;li&gt;易造成理解困难的变量名&lt;/li&gt;
&lt;li&gt;拆分违反SRP原则的函数&lt;/li&gt;
&lt;li&gt;避免隐式时序耦合的函数，用hardcode的形式显示表现时序耦合&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;SerialDate重构&#34;&gt;&lt;a href=&#34;#SerialDate重构&#34; class=&#34;headerlink&#34; title=&#34;SerialDate重构&#34;&gt;&lt;/a&gt;SerialDate重构&lt;/h3&gt;&lt;p&gt;再强调一遍，&lt;strong&gt;重构前要有一个完整的验证可行性的测试&lt;/strong&gt;。然后开始重构：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;没有描述力的类名和术语名&lt;/li&gt;
&lt;li&gt;使用枚举代替常量类&lt;/li&gt;
&lt;li&gt;抽象类中不应知道实现细节&lt;/li&gt;
&lt;li&gt;基类不宜知道子类的情况&lt;/li&gt;
&lt;li&gt;多余的注释&lt;/li&gt;
&lt;li&gt;变量声明应该放在尽量靠近使用的地方&lt;/li&gt;
&lt;li&gt;如果有专业术语，就不要自己命名了&lt;/li&gt;
&lt;li&gt;不要写无用的模板代码&lt;/li&gt;
&lt;li&gt;如果函数对成员进行操作，它就不应该是静态的&lt;/li&gt;
&lt;li&gt;用&lt;strong&gt;解释临时变量&lt;/strong&gt;的方式，让大段的代码更为简化和有表达力&lt;/li&gt;
&lt;li&gt;消除魔术数&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;味道和启发&#34;&gt;&lt;a href=&#34;#味道和启发&#34; class=&#34;headerlink&#34; title=&#34;味道和启发&#34;&gt;&lt;/a&gt;味道和启发&lt;/h2&gt;&lt;p&gt;作者在这里对《重构：既有代码设计的改善》里提到的味道做了自己的一些扩充，也可以作为对上面章节的回顾。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“味道”，即那些看起来不大对劲的代码&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;注释-1&#34;&gt;&lt;a href=&#34;#注释-1&#34; class=&#34;headerlink&#34; title=&#34;注释&#34;&gt;&lt;/a&gt;注释&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;不恰当的信息，如修改记录&lt;/li&gt;
&lt;li&gt;过时的注释&lt;/li&gt;
&lt;li&gt;多余的废话&lt;/li&gt;
&lt;li&gt;错误的有误导性的注释&lt;/li&gt;
&lt;li&gt;注释掉的代码&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;环境&#34;&gt;&lt;a href=&#34;#环境&#34; class=&#34;headerlink&#34; title=&#34;环境&#34;&gt;&lt;/a&gt;环境&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;多步才能完成的构建&lt;/li&gt;
&lt;li&gt;多步才能完成的测试&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;函数-1&#34;&gt;&lt;a href=&#34;#函数-1&#34; class=&#34;headerlink&#34; title=&#34;函数&#34;&gt;&lt;/a&gt;函数&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;过多的入参&lt;/li&gt;
&lt;li&gt;布尔类型参数&lt;/li&gt;
&lt;li&gt;从未被调用的函数&lt;/li&gt;
&lt;li&gt;用于返回的参数&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;一般性问题&#34;&gt;&lt;a href=&#34;#一般性问题&#34; class=&#34;headerlink&#34; title=&#34;一般性问题&#34;&gt;&lt;/a&gt;一般性问题&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;源文件中有多种语言&lt;/li&gt;
&lt;li&gt;明显违背字面意义的直觉&lt;/li&gt;
&lt;li&gt;不考虑边界情况&lt;/li&gt;
&lt;li&gt;忽视安全问题&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;重复&lt;/strong&gt;，这也是最常见的问题。每次看到重复代码都代表遗漏了抽象。有一些常见的设计模式可以帮助你。&lt;/li&gt;
&lt;li&gt;代码的抽象层级有问题，或混杂。抽象类用来容纳高层级概念，子类用来容纳低层级概念。不同层级概念放在不同容器中。&lt;/li&gt;
&lt;li&gt;基类依赖于子类。通常来说，基类对子类应该一无所知&lt;/li&gt;
&lt;li&gt;信息过多，违背SRP&lt;/li&gt;
&lt;li&gt;从未使用的代码&lt;/li&gt;
&lt;li&gt;不恰当的垂直分隔&lt;/li&gt;
&lt;li&gt;语素前后不一致&lt;/li&gt;
&lt;li&gt;基于巧合、预设假设的耦合。异或是两个没有直接目的之间的模块的耦合。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特性依恋&lt;/strong&gt;，类的方法只应对自身的成员和方法感兴趣，不应关注其他类的成员和方法&lt;/li&gt;
&lt;li&gt;使用boolean或枚举参数让一个函数表现多态。使用多个函数通常由于向单个函数传递代码来选择函数行为&lt;/li&gt;
&lt;li&gt;晦涩的意图，如魔术数、魔术字符串、过度简写的表达式&lt;/li&gt;
&lt;li&gt;位置错误的权责&lt;/li&gt;
&lt;li&gt;不恰当的静态方法，如完全不需要多态的函数&lt;/li&gt;
&lt;li&gt;使用自解释的变量名&lt;/li&gt;
&lt;li&gt;使用自解释的函数名&lt;/li&gt;
&lt;li&gt;理解算法&lt;/li&gt;
&lt;li&gt;把逻辑依赖（脑海中的限制&amp;#x2F;已知条件）改为物理依赖&lt;/li&gt;
&lt;li&gt;使用if&amp;#x2F;else、switch前想想有没有多态的实现方法&lt;/li&gt;
&lt;li&gt;遵循团队lint规则&lt;/li&gt;
&lt;li&gt;足够准确&lt;/li&gt;
&lt;li&gt;未封装的条件判断&lt;/li&gt;
&lt;li&gt;未封装的边界条件检测&lt;/li&gt;
&lt;li&gt;避免否定性条件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;函数应该只做一件事&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;函数应该只在一个抽象层级上&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;隐蔽的时序性耦合&lt;/li&gt;
&lt;li&gt;别随意，先好好思考再下手&lt;/li&gt;
&lt;li&gt;应该在较高层级放置可配置数据&lt;/li&gt;
&lt;li&gt;避免传递浏览，即遵守德墨忒尔律&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Java&#34;&gt;&lt;a href=&#34;#Java&#34; class=&#34;headerlink&#34; title=&#34;Java&#34;&gt;&lt;/a&gt;Java&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;使用通配符避免过长的导入清单&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt;.*&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;不要继承&lt;em&gt;常量&lt;/em&gt;，使用静态导入&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; EmployeeConstants.*&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;在可以的情况下，用枚举代替常量&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;名称&#34;&gt;&lt;a href=&#34;#名称&#34; class=&#34;headerlink&#34; title=&#34;名称&#34;&gt;&lt;/a&gt;名称&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;使用描述性名称&lt;/li&gt;
&lt;li&gt;名称应该与抽象层级相符&lt;/li&gt;
&lt;li&gt;使用标准化语素&lt;/li&gt;
&lt;li&gt;使用无歧义的名称&lt;/li&gt;
&lt;li&gt;在较大作用范围使用较长名称，较小作用范围&lt;em&gt;可以&lt;/em&gt;使用较短名称&lt;/li&gt;
&lt;li&gt;名称应该明确说明有副作用存在&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;测试&#34;&gt;&lt;a href=&#34;#测试&#34; class=&#34;headerlink&#34; title=&#34;测试&#34;&gt;&lt;/a&gt;测试&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;要有足够的测试&lt;/li&gt;
&lt;li&gt;使用覆盖率工具&lt;/li&gt;
&lt;li&gt;别放过小测试&lt;/li&gt;
&lt;li&gt;被忽略的测试是对不确定事物的疑问&lt;/li&gt;
&lt;li&gt;测试边界条件&lt;/li&gt;
&lt;li&gt;测试失败的模式（pattern）会有启发性&lt;/li&gt;
&lt;li&gt;测试覆盖率的模式会有启发性&lt;/li&gt;
&lt;li&gt;测试应该快速&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;并发编程示例&#34;&gt;&lt;a href=&#34;#并发编程示例&#34; class=&#34;headerlink&#34; title=&#34;并发编程示例&#34;&gt;&lt;/a&gt;并发编程示例&lt;/h2&gt;&lt;h3 id=&#34;客户端-x2F-服务端&#34;&gt;&lt;a href=&#34;#客户端-x2F-服务端&#34; class=&#34;headerlink&#34; title=&#34;客户端&amp;#x2F;服务端&#34;&gt;&lt;/a&gt;客户端&amp;#x2F;服务端&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;如果吞吐量与I&amp;#x2F;O有关，则并发编程可以提升运行效率&lt;/li&gt;
&lt;li&gt;保持并发系统整洁，把线程管理隔离到一个位置&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;可能的执行路径&#34;&gt;&lt;a href=&#34;#可能的执行路径&#34; class=&#34;headerlink&#34; title=&#34;可能的执行路径&#34;&gt;&lt;/a&gt;可能的执行路径&lt;/h3&gt;&lt;p&gt;深入到字节码和汇编语句的执行上，有些并非线程安全的操作中，不同的执行路径会带来不同结果。&lt;/p&gt;
&lt;h3 id=&#34;了解类库&#34;&gt;&lt;a href=&#34;#了解类库&#34; class=&#34;headerlink&#34; title=&#34;了解类库&#34;&gt;&lt;/a&gt;了解类库&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Executor框架&lt;/li&gt;
&lt;li&gt;非锁定方案：AtomicBoolean，AtomicInteger和AtomicReference&lt;/li&gt;
&lt;li&gt;数据库连接、java.util中的容器、Servlet天生不是线程安全的&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;提升吞吐量&#34;&gt;&lt;a href=&#34;#提升吞吐量&#34; class=&#34;headerlink&#34; title=&#34;提升吞吐量&#34;&gt;&lt;/a&gt;提升吞吐量&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;synchronized代码块最好能限制在小范围内&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;死锁&#34;&gt;&lt;a href=&#34;#死锁&#34; class=&#34;headerlink&#34; title=&#34;死锁&#34;&gt;&lt;/a&gt;死锁&lt;/h3&gt;&lt;p&gt;死锁需要满足4个条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;互斥&lt;/strong&gt;，即资源数量有限，或无法在同一时间为多个线程公用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;上锁及等待&lt;/strong&gt;，从线程获取资源到完成工作前，不会释放这个资源&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;无抢先机制&lt;/strong&gt;，线程无法从其他线程处夺取资源&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;循环等待&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;相反地，有4种避免死锁的方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;不互斥&lt;/strong&gt;，使用允许同时使用的资源，或增加资源数目&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不上锁及等待&lt;/strong&gt;，如果有等待情况就释放所有资源从新来过&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;满足抢先机制&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不做循环等待&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;测试多线程代码&#34;&gt;&lt;a href=&#34;#测试多线程代码&#34; class=&#34;headerlink&#34; title=&#34;测试多线程代码&#34;&gt;&lt;/a&gt;测试多线程代码&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;复现问题可能很难，可以借助工具（如ConTest）帮助&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;–END–&lt;/em&gt;&lt;/p&gt;
</content>
        <category term="编程" />
        <category term="重构" />
        <category term="代码" />
        <category term="代码风格" />
        <updated>2019-12-02T15:08:32.000Z</updated>
    </entry>
</feed>
