{
    "version": "https://jsonfeed.org/version/1",
    "title": "Shenlvmeng's Blog • All posts by \"脚手架\" tag",
    "description": "Be sharp, my friend.",
    "home_page_url": "http://shenlvmeng.github.com/blog",
    "items": [
        {
            "id": "http://shenlvmeng.github.com/blog/2019/11/15/degit-improvement/",
            "url": "http://shenlvmeng.github.com/blog/2019/11/15/degit-improvement/",
            "title": "degit认识和改造",
            "date_published": "2019-11-15T13:51:58.000Z",
            "content_html": "<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>近日写了一个chrome插件的starter-boilerplate。但这类boilerplate被人们使用的方式常常是整合在cli库中。由于仓库本身的模板性质和git历史存在，并不合适使用npm分发或<code>git clone</code>快速搭建项目骨架。</p>\n<p>碰巧此前学习svelte的时候接触到了<a href=\"https://github.com/Rich-Harris/degit\">degit</a>，degit做的事很简单，<strong>复制git仓库代码</strong>。这也正是一个称职的boilerplate发挥光和热的方式。</p>\n<h2 id=\"degit使用\"><a href=\"#degit使用\" class=\"headerlink\" title=\"degit使用\"></a>degit使用</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">degit user/repo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># these commands are equivalent</span></span><br><span class=\"line\">degit github:user/repo</span><br><span class=\"line\">degit git@github.com:user/repo</span><br><span class=\"line\">degit https://github.com/user/repo</span><br><span class=\"line\"></span><br><span class=\"line\">degit user/repo my-new-project</span><br></pre></td></tr></table></figure>\n\n<p>上面是一个degit的基本用法，类似<code>git clone</code>指定仓库地址和本地目录名，默认将项目当前<code>master</code>分支的代码拷贝到本地。还可以在仓库后使用<code>#</code>分隔，指定分支名、tag名或commit hash。目前（2019&#x2F;11&#x2F;12）degit支持github、gitlab、BitBucket以及Sourcehut，暂不支持私有仓库。</p>\n<p>在一些情况下，我们可能希望在拷贝完代码后进行一些后置操作，如拷贝关联仓库或删除不必要文件等。对此，degit设计了<strong>actions</strong>来支持，可以在当前目录的<code>degit.json</code>中声明。目前actions只有<code>clone</code>和<code>remove</code>两种。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// degit.json</span></span><br><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;action&quot;</span>: <span class=\"string\">&quot;clone&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;src&quot;</span>: <span class=\"string\">&quot;user/another-repo&quot;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;action&quot;</span>: <span class=\"string\">&quot;remove&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;files&quot;</span>: [<span class=\"string\">&quot;LICENSE&quot;</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"degit优势\"><a href=\"#degit优势\" class=\"headerlink\" title=\"degit优势\"></a>degit优势</h2><p>如README中提到的，degit和<code>git clone --depth 1</code>还是有所区别的：</p>\n<ul>\n<li><code>git clone</code>后，终归还是会有个<code>.git</code>目录，需要手动重置</li>\n<li>degit在实现时增加了缓存策略，在有些情况下不需要重复下载代码，速度更快</li>\n<li>“更少的字数”（<code>degit user/repo</code>而不是<code>git clone --depth 1 git@github.com:user/repo</code>）</li>\n<li>灵活度更高，如前后置操作如actions的支持</li>\n<li>更好的可扩展性，未来可以在degit基础上实现交互等更复杂的设计</li>\n</ul>\n<h2 id=\"degit原理\"><a href=\"#degit原理\" class=\"headerlink\" title=\"degit原理\"></a>degit原理</h2><p>那么degit快在哪里？它的思路借鉴于<a href=\"https://github.com/vutran/zel\">zel</a>和<a href=\"https://github.com/lukeed/gittar\">gittar</a>，即方便快捷地从git仓库中下载需要的源代码。原理上，<strong>利用某些git平台url的特定规则，从平台下载tar.gz包，再本地解压</strong>。</p>\n<p>degit实现集中在<code>src/index.js</code>中。<code>src/bin.js</code>只用来实现cli部分的入口代码，<code>src/utils.js</code>则包含了一些工具函数。</p>\n<h3 id=\"入口\"><a href=\"#入口\" class=\"headerlink\" title=\"入口\"></a>入口</h3><p>在<code>src/bin.js</code>中，流程分下面几步：</p>\n<ol>\n<li>利用<a href=\"https://github.com/lukeed/mri\">mri</a>做了基本的参数处理</li>\n<li>实例化Degit对象，注册logger的监听方法</li>\n<li>调用<code>clone</code>方法</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> d = <span class=\"title function_\">degit</span>(src, args);</span><br><span class=\"line\"></span><br><span class=\"line\">    d.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;info&#x27;</span>, <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(chalk.<span class=\"title function_\">cyan</span>(<span class=\"string\">`&gt; <span class=\"subst\">$&#123;event.message.replace(<span class=\"string\">&#x27;options.&#x27;</span>, <span class=\"string\">&#x27;--&#x27;</span>)&#125;</span>`</span>));</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    d.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;warn&#x27;</span>, <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(</span><br><span class=\"line\">            chalk.<span class=\"title function_\">magenta</span>(<span class=\"string\">`! <span class=\"subst\">$&#123;event.message.replace(<span class=\"string\">&#x27;options.&#x27;</span>, <span class=\"string\">&#x27;--&#x27;</span>)&#125;</span>`</span>)</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    d.<span class=\"title function_\">clone</span>(dest)</span><br><span class=\"line\">        <span class=\"comment\">// .then(() =&gt; &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// &#125;)</span></span><br><span class=\"line\">        .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(chalk.<span class=\"title function_\">red</span>(<span class=\"string\">`! <span class=\"subst\">$&#123;err.message.replace(<span class=\"string\">&#x27;options.&#x27;</span>, <span class=\"string\">&#x27;--&#x27;</span>)&#125;</span>`</span>));</span><br><span class=\"line\">            process.<span class=\"title function_\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Degit初始化\"><a href=\"#Degit初始化\" class=\"headerlink\" title=\"Degit初始化\"></a>Degit初始化</h3><p>对象实例包含下面几个成员，其中repo信息需要处理后才能拿到。</p>\n<ul>\n<li><code>src</code>，string，用户输入的仓库地址</li>\n<li><code>cache</code>，boolean，是否使用缓存，来自命令行<code>-c</code>或<code>--cache</code>参数</li>\n<li><code>force</code>，boolean，目标文件夹有内容时，是否覆盖，来自<code>-f</code>或<code>--force</code>参数</li>\n<li><code>verbose</code>，boolean，是否打印详细日志，来自<code>-v</code>或<code>--verbose</code>参数</li>\n<li><code>repo</code>，处理<code>src</code>拿到仓库的详情，包括<ul>\n<li><code>site</code>，网页域名</li>\n<li><code>user</code>，用户&#x2F;组织名</li>\n<li><code>name</code>，仓库名</li>\n<li><code>ref</code>，分支、tag、commit hash</li>\n<li><code>url</code>，完整的HTTP url</li>\n</ul>\n</li>\n<li><code>directiveActions</code>，actions配置对应的处理函数，包含<ul>\n<li><code>clone</code>，递归处理src的仓库</li>\n<li><code>remove</code>，调用<code>remove</code>方法移除指定文件</li>\n</ul>\n</li>\n</ul>\n<p>repo信息来自src经过正则匹配出的详细信息。由于要利用一些git平台的url拼接规则，需要排除已知平台以外的url。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 支持的范围</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> supported = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([<span class=\"string\">&#x27;github&#x27;</span>, <span class=\"string\">&#x27;gitlab&#x27;</span>, <span class=\"string\">&#x27;bitbucket&#x27;</span>, <span class=\"string\">&#x27;git.sr.ht&#x27;</span>]);</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">parse</span>(<span class=\"params\">src</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> match = <span class=\"regexp\">/^(?:https:\\/\\/([^/]+)\\/|git@([^/]+)[:/]|([^/]+)[:/])?([^/\\s]+)\\/([^/\\s#]+)(?:#(.+))?/</span>.<span class=\"title function_\">exec</span>(</span><br><span class=\"line\">        src</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!match) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DegitError</span>(<span class=\"string\">`could not parse <span class=\"subst\">$&#123;src&#125;</span>`</span>, &#123;</span><br><span class=\"line\">            <span class=\"attr\">code</span>: <span class=\"string\">&#x27;BAD_SRC&#x27;</span>,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> site = (match[<span class=\"number\">1</span>] || match[<span class=\"number\">2</span>] || match[<span class=\"number\">3</span>] || <span class=\"string\">&#x27;github&#x27;</span>).<span class=\"title function_\">replace</span>(</span><br><span class=\"line\">        <span class=\"regexp\">/\\.(com|org)$/</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"comment\">// 排除范围外的url</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!supported.<span class=\"title function_\">has</span>(site)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DegitError</span>(</span><br><span class=\"line\">            <span class=\"string\">`degit supports GitHub, GitLab, Sourcehut and BitBucket`</span>,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">code</span>: <span class=\"string\">&#x27;UNSUPPORTED_HOST&#x27;</span>,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 匹配出用户名、仓库名、分支/tag/commit hash名</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> user = match[<span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> name = match[<span class=\"number\">5</span>].<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\.git$/</span>, <span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ref = match[<span class=\"number\">6</span>] || <span class=\"string\">&#x27;master&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 完整的仓库地址，需要http开头的</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> url = <span class=\"string\">`https://<span class=\"subst\">$&#123;site&#125;</span>.<span class=\"subst\">$&#123;</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">        site === <span class=\"string\">&#x27;bitbucket&#x27;</span> ? <span class=\"string\">&#x27;org&#x27;</span> : site === <span class=\"string\">&#x27;git.sr.ht&#x27;</span> ? <span class=\"string\">&#x27;&#x27;</span> : <span class=\"string\">&#x27;com&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">    &#125;</span>/<span class=\"subst\">$&#123;user&#125;</span>/<span class=\"subst\">$&#123;name&#125;</span>`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; site, user, name, ref, url &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"仓库下载\"><a href=\"#仓库下载\" class=\"headerlink\" title=\"仓库下载\"></a>仓库下载</h3><p>下载仓库流程如下：</p>\n<p><img src=\"https://s2.ax1x.com/2019/11/15/Mdbl6S.png\" alt=\"degit流程\"></p>\n<h4 id=\"获取缓存信息\"><a href=\"#获取缓存信息\" class=\"headerlink\" title=\"获取缓存信息\"></a>获取缓存信息</h4><p>degit的缓存放在<code>/home</code>或<code>/tmp</code>下的<code>.degit</code>目录下，按照<code>site/user/name</code>的目录组织。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 缓存目录</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> base = path.<span class=\"title function_\">join</span>(homeOrTmp, <span class=\"string\">&#x27;.degit&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> dir = path.<span class=\"title function_\">join</span>(base, repo.<span class=\"property\">site</span>, repo.<span class=\"property\">user</span>, repo.<span class=\"property\">name</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> cached = <span class=\"title function_\">tryRequire</span>(path.<span class=\"title function_\">join</span>(dir, <span class=\"string\">&#x27;map.json&#x27;</span>)) || &#123;&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>目录下有一个<code>map.json</code>和缓存的代码tar.gz包，包名格式为<code>&lt;commit-hash&gt;.tar.gz</code>。在map.json保存着此前使用过的分支名&#x2F;tag名&#x2F;简写commit名到commit hash的最新映射关系。形如下方：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;master&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;4e3a4089b4f0275964eb10a432dc1c15526a0b4d&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>这一步会尝试使用parse好的<code>site</code>、<code>user</code>、<code>name</code>属性找已有的缓存的<code>map.json</code>。没有找到时返回<code>&#123;&#125;</code>。</p>\n<h4 id=\"获取commit-hash\"><a href=\"#获取commit-hash\" class=\"headerlink\" title=\"获取commit hash\"></a>获取commit hash</h4><p>这一步分两种情况;</p>\n<ul>\n<li>使用缓存时，直接从上一步拿到的<code>map.json</code>里面找<code>ref</code>对应的commit hash</li>\n<li>不使用缓存时，需要从远端仓库拿分支名&#x2F;tag名到commit hash的对应关系（使用<code>git ls-remote</code>完成）。之后格式化为结构化数据并从中寻找<code>ref</code>对应的commit hash。如果中途失败，则fallback到使用缓存的方式。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fetchRefs</span>(<span class=\"params\">repo</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; stdout &#125; = <span class=\"keyword\">await</span> <span class=\"title function_\">exec</span>(<span class=\"string\">`git ls-remote <span class=\"subst\">$&#123;repo.url&#125;</span>`</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> stdout</span><br><span class=\"line\">            .<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">            .<span class=\"title function_\">filter</span>(<span class=\"title class_\">Boolean</span>)</span><br><span class=\"line\">            .<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">row</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">const</span> [hash, ref] = row.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;\\t&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 格式化过程</span></span><br><span class=\"line\">                <span class=\"comment\">// ...</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 错误处理</span></span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这一步若未找到hash，则无法构造下载的url，从而需要抛出错误。</p>\n<h4 id=\"构造下载地址\"><a href=\"#构造下载地址\" class=\"headerlink\" title=\"构造下载地址\"></a>构造下载地址</h4><p>根据不同的git平台固定的源码tar.gz归档url规则，构造下载的url，这也是degit思路的基础。目前支持gitlab、bucket、github风格的url。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 即将下载的tar.gz文件路径</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> file = <span class=\"string\">`<span class=\"subst\">$&#123;dir&#125;</span>/<span class=\"subst\">$&#123;hash&#125;</span>.tar.gz`</span>;</span><br><span class=\"line\"><span class=\"comment\">// 下载的url</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> url =</span><br><span class=\"line\">    repo.<span class=\"property\">site</span> === <span class=\"string\">&#x27;gitlab&#x27;</span></span><br><span class=\"line\">        ? <span class=\"string\">`<span class=\"subst\">$&#123;repo.url&#125;</span>/repository/archive.tar.gz?ref=<span class=\"subst\">$&#123;hash&#125;</span>`</span></span><br><span class=\"line\">        : repo.<span class=\"property\">site</span> === <span class=\"string\">&#x27;bitbucket&#x27;</span></span><br><span class=\"line\">        ? <span class=\"string\">`<span class=\"subst\">$&#123;repo.url&#125;</span>/get/<span class=\"subst\">$&#123;hash&#125;</span>.tar.gz`</span></span><br><span class=\"line\">        : <span class=\"string\">`<span class=\"subst\">$&#123;repo.url&#125;</span>/archive/<span class=\"subst\">$&#123;hash&#125;</span>.tar.gz`</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建目录并下载\"><a href=\"#创建目录并下载\" class=\"headerlink\" title=\"创建目录并下载\"></a>创建目录并下载</h4><p>不使用缓存时，会在创建缓存目录并下载。另外，指定<code>-f</code>或<code>--force</code>参数，会覆盖已有文件路径。最后使用https模块下载文件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">cache</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            fs.<span class=\"title function_\">statSync</span>(file);</span><br><span class=\"line\">            <span class=\"comment\">// ...</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">mkdirp</span>(path.<span class=\"title function_\">dirname</span>(file));</span><br><span class=\"line\">            <span class=\"comment\">// ...</span></span><br><span class=\"line\">            <span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(url, file);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 错误处理</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"更新缓存\"><a href=\"#更新缓存\" class=\"headerlink\" title=\"更新缓存\"></a>更新缓存</h4><p>下载成功会更新本地缓存，保证以后使用缓存时能使用尽量新的包。</p>\n<ol>\n<li>当前使用包的commit hash如果和指定分支&#x2F;tag&#x2F;commit hash对应的hash一致，则不需要更新</li>\n<li>在需要更新时，检查老的hash是否还有使用，如果没有使用，则清除hash对应的tar.gz包</li>\n<li>更新map.json里的对应关系</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateCache</span>(<span class=\"params\">dir, repo, hash, cached</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cached[repo.<span class=\"property\">ref</span>] === hash) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> oldHash = cached[repo.<span class=\"property\">ref</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldHash) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> used = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> cached) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cached[key] === hash) &#123;</span><br><span class=\"line\">                used = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!used) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// we no longer need this tar file</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                fs.<span class=\"title function_\">unlinkSync</span>(path.<span class=\"title function_\">join</span>(dir, <span class=\"string\">`<span class=\"subst\">$&#123;oldHash&#125;</span>.tar.gz`</span>));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// ignore</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cached[repo.<span class=\"property\">ref</span>] = hash;</span><br><span class=\"line\">    fs.<span class=\"title function_\">writeFileSync</span>(</span><br><span class=\"line\">        path.<span class=\"title function_\">join</span>(dir, <span class=\"string\">&#x27;map.json&#x27;</span>),</span><br><span class=\"line\">        <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(cached, <span class=\"literal\">null</span>, <span class=\"string\">&#x27;  &#x27;</span>)</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"解压tar-gz包\"><a href=\"#解压tar-gz包\" class=\"headerlink\" title=\"解压tar.gz包\"></a>解压tar.gz包</h4><p>创建cli中输入的目标目录，并将已下载到缓存中tar.gz包解压到目标路径下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">mkdirp</span>(dest);</span><br><span class=\"line\"><span class=\"keyword\">await</span> <span class=\"title function_\">untar</span>(file, dest);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"actions处理\"><a href=\"#actions处理\" class=\"headerlink\" title=\"actions处理\"></a><code>actions</code>处理</h4><p>如果在当前目录下获取到了<code>degit.json</code>，则执行后续的<code>clone</code>或<code>remove</code>操作。</p>\n<ul>\n<li>clone，在目标目录下继续一遍clone流程</li>\n<li>remove，删除指定文件或文件夹</li>\n</ul>\n<h2 id=\"degit改造\"><a href=\"#degit改造\" class=\"headerlink\" title=\"degit改造\"></a>degit改造</h2><p>degit虽好，但从上面也可以看到，支持仓库比较有限，且不支持私有仓库。在公司内部，无法从url推断git仓库类型时，degit就无法工作了。不过，借助degit本身的设计，稍微改造上面提到的“degit初始化”，“构造下载地址”部分，就可以让degit通过传参url风格的形式支持私有仓库。</p>\n<ul>\n<li>新增<code>-s</code>或<code>--style</code>命令行入参，表示git仓库url的风格，目前设计有github、gitlab、bitbucket这几个degit原始就支持的形式。</li>\n<li>解析仓库地址信息时，若有style入参，则先判断是否在上述允许范围内；保留原有从域名解析style的部分，新增若未解析出style，则从入参里取；最后再抛出不支持的仓库地址错误</li>\n<li>解析返回数据结构中，新增<code>style</code>字段表示url风格，原有的<code>site</code>为避免歧义，直接使用域名代替原有的域名前缀</li>\n<li>在构造下载地址时，直接根据style字段拼接url</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">parse</span>(<span class=\"params\">src, style</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (style &amp;&amp; !supportedGitStyle.<span class=\"title function_\">has</span>(style)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DegitError</span>(<span class=\"string\">`degit supports styles of github, gitlab, bitbucket`</span>, &#123;</span><br><span class=\"line\">            <span class=\"attr\">code</span>: <span class=\"string\">&#x27;UNSUPPORTED_STYLE&#x27;</span>,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> site = match[<span class=\"number\">1</span>] || match[<span class=\"number\">2</span>] || match[<span class=\"number\">3</span>] || <span class=\"string\">&#x27;github.com&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> gitStyle =</span><br><span class=\"line\">        style ||</span><br><span class=\"line\">        (match[<span class=\"number\">1</span>] || match[<span class=\"number\">2</span>] || match[<span class=\"number\">3</span>] || <span class=\"string\">&#x27;gitlab&#x27;</span>).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\.(com|org)$/</span>, <span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!supportedGitRepo.<span class=\"title function_\">has</span>(gitStyle)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DegitError</span>(</span><br><span class=\"line\">            <span class=\"string\">`degit supports GitHub, GitLab, Sourcehut and BitBucket without -s/--style parameters`</span>,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">code</span>: <span class=\"string\">&#x27;UNSUPPORTED_HOST&#x27;</span>,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> user = match[<span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> name = match[<span class=\"number\">5</span>].<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\.git$/</span>, <span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ref = match[<span class=\"number\">6</span>] || <span class=\"string\">&#x27;master&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> url = <span class=\"string\">`https://<span class=\"subst\">$&#123;site&#125;</span>/<span class=\"subst\">$&#123;user&#125;</span>/<span class=\"subst\">$&#123;name&#125;</span>`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; site, user, name, ref, url, <span class=\"attr\">style</span>: gitStyle &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 拼接url处</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> url =</span><br><span class=\"line\">    repo.<span class=\"property\">style</span> === <span class=\"string\">&#x27;gitlab&#x27;</span></span><br><span class=\"line\">        ? <span class=\"string\">`<span class=\"subst\">$&#123;repo.url&#125;</span>/repository/archive.tar.gz?ref=<span class=\"subst\">$&#123;hash&#125;</span>`</span></span><br><span class=\"line\">        : repo.<span class=\"property\">style</span> === <span class=\"string\">&#x27;bitbucket&#x27;</span></span><br><span class=\"line\">        ? <span class=\"string\">`<span class=\"subst\">$&#123;repo.url&#125;</span>/get/<span class=\"subst\">$&#123;hash&#125;</span>.tar.gz`</span></span><br><span class=\"line\">        : <span class=\"string\">`<span class=\"subst\">$&#123;repo.url&#125;</span>/archive/<span class=\"subst\">$&#123;hash&#125;</span>.tar.gz`</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"可能存在的问题\"><a href=\"#可能存在的问题\" class=\"headerlink\" title=\"可能存在的问题\"></a>可能存在的问题</h3><p>绝大多数私有仓库，都会对用户身份做校验，直接访问tar.gz链接会报401错误。这需要根据不同的内部平台自己做处理了。</p>\n<p>因为特殊原因，改造后的包和代码不提供。</p>\n<p><em>–END–</em></p>\n",
            "tags": [
                "脚手架",
                "degit",
                "git"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2017/11/17/photogallery-improvement-2/",
            "url": "http://shenlvmeng.github.com/blog/2017/11/17/photogallery-improvement-2/",
            "title": "Photogallery技术演进第2步",
            "date_published": "2017-11-17T12:56:12.000Z",
            "content_html": "<h2 id=\"构建工具升级\"><a href=\"#构建工具升级\" class=\"headerlink\" title=\"构建工具升级\"></a>构建工具升级</h2><p>因为要拆分代码，便于管理，需要使用<code>import</code>和<code>export</code>，因此必须要引入webpack这样的打包工具到gulp中，使用<a href=\"https://github.com/shama/webpack-stream\">webpack-stream</a>，具体使用方法和其他的gulp插件类似，在pipe在这样插入就行了<code>.pipe(webpack())</code>，配置方式和webpack一样。（webpack中引入babel-loader的过程就不赘述了）引入webpack后，开发流程和一起类似，<code>gulp</code>启动测试服务器，使用webpack通过<code>entry.js</code>打包代码，CSS和JSON相关流程不变。release时，增加了minify的流程，让js流程后的代码再压缩一遍。</p>\n<p>另外，引入babel后，可以用ES6语法改写<code>gulpfile.js</code>。最后的<code>gulpfile.babel.js</code>像下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> gulp <span class=\"keyword\">from</span> <span class=\"string\">&#x27;gulp&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> rename <span class=\"keyword\">from</span> <span class=\"string\">&#x27;gulp-rename&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> uglify <span class=\"keyword\">from</span> <span class=\"string\">&#x27;gulp-uglify&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> cleanCSS <span class=\"keyword\">from</span> <span class=\"string\">&#x27;gulp-clean-css&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jsonminify <span class=\"keyword\">from</span> <span class=\"string\">&#x27;gulp-jsonminify&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> webserver <span class=\"keyword\">from</span> <span class=\"string\">&#x27;gulp-webserver&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> webpack <span class=\"keyword\">from</span> <span class=\"string\">&#x27;webpack-stream&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;js&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;src/index.js&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">webpack</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">          &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>, <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span>, <span class=\"attr\">loader</span>: <span class=\"string\">&quot;babel-loader&quot;</span> &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">rename</span>(<span class=\"string\">&quot;index.js&quot;</span>))</span><br><span class=\"line\">\t\t.<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;dist&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;minify&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;dist/index.js&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">uglify</span>())</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">rename</span>(<span class=\"string\">&quot;index.min.js&quot;</span>))</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&quot;dist&quot;</span>));</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;css&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>([<span class=\"string\">&#x27;src/index.css&#x27;</span>])</span><br><span class=\"line\">\t\t.<span class=\"title function_\">pipe</span>(<span class=\"title function_\">cleanCSS</span>(&#123;<span class=\"attr\">compatibility</span>: <span class=\"string\">&#x27;ie8&#x27;</span>&#125;))</span><br><span class=\"line\">\t\t.<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;dist&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;json&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;src/meta*.json&#x27;</span>)</span><br><span class=\"line\">\t\t.<span class=\"title function_\">pipe</span>(<span class=\"title function_\">jsonminify</span>())</span><br><span class=\"line\">\t\t.<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;dist&#x27;</span>))</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;webserver&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;./&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">webserver</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">livereload</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">directoryListing</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">open</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;watch&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  gulp.<span class=\"title function_\">watch</span>([<span class=\"string\">&#x27;src/*.js&#x27;</span>, <span class=\"string\">&#x27;src/**/*.js&#x27;</span>, <span class=\"string\">&#x27;src/**/*.vue&#x27;</span>], [<span class=\"string\">&#x27;js&#x27;</span>]);</span><br><span class=\"line\">  gulp.<span class=\"title function_\">watch</span>(<span class=\"string\">&#x27;src/*.css&#x27;</span>, [<span class=\"string\">&#x27;css&#x27;</span>]);</span><br><span class=\"line\">  gulp.<span class=\"title function_\">watch</span>(<span class=\"string\">&#x27;src/*.json&#x27;</span>, [<span class=\"string\">&#x27;json&#x27;</span>]);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;assets&#x27;</span>, [<span class=\"string\">&#x27;json&#x27;</span>, <span class=\"string\">&#x27;css&#x27;</span>, <span class=\"string\">&#x27;js&#x27;</span>]);</span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;default&#x27;</span>, [<span class=\"string\">&#x27;assets&#x27;</span>, <span class=\"string\">&#x27;webserver&#x27;</span>, <span class=\"string\">&#x27;watch&#x27;</span>]);</span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&quot;release&quot;</span>, [<span class=\"string\">&#x27;assets&#x27;</span>, <span class=\"string\">&#x27;minify&#x27;</span>]);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用单文件组件\"><a href=\"#使用单文件组件\" class=\"headerlink\" title=\"使用单文件组件\"></a>使用单文件组件</h2><p>引入webpack后，开始高高兴兴地分模块拆分代码，却发现分组件使用Vue时，不是单纯地定义组件配置信息，然后传给入口组件就行。必须要引入全家桶，<code>vue-loader</code>等工具，文件不得不用.vue这样的形式组织（现在开始觉得React组件的组织比Vue舒服了）。本来使用单文件的形式就是想尽量精简，可随着功能逐渐健全，看来重构也是避免不了的啊。在<a href=\"https://github.com/vuejs/vue-loader\">vue-loader</a>的介绍里，居然还要通过<code>vue-cli</code>来大一统，但是我一是想维持项目尽量轻量精简，使用gulp的工具链；二是项目已经写了很久了，全部迁移过去成本有些大。于是，通过<code>vue-cli</code>新建样本项目，对着<code>package.json</code>和<code>webpack.config.js</code>一抄了事。</p>\n<p>加上种种<code>.vue</code>文件的相关配置，<code>gulp.babel.js</code>最后长下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;js&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;src/index.js&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">webpack</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">          &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>, <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span>, <span class=\"attr\">loader</span>: <span class=\"string\">&quot;babel-loader&quot;</span> &#125;,</span><br><span class=\"line\">          &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.vue$/</span>, <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;vue-loader&#x27;</span>&#125;,</span><br><span class=\"line\">          &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(png|jpg|gif|svg)$/</span>, <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;file-loader&#x27;</span>, <span class=\"attr\">options</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;[name].[ext]?[hash]&#x27;</span> &#125; &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">alias</span>: &#123;</span><br><span class=\"line\">          <span class=\"string\">&#x27;vue$&#x27;</span>: <span class=\"string\">&#x27;vue/dist/vue.esm.js&#x27;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">extensions</span>: [<span class=\"string\">&#x27;*&#x27;</span>, <span class=\"string\">&#x27;.js&#x27;</span>, <span class=\"string\">&#x27;.vue&#x27;</span>, <span class=\"string\">&#x27;.json&#x27;</span>]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">rename</span>(<span class=\"string\">&quot;index.js&quot;</span>))</span><br><span class=\"line\">\t\t.<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;dist&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n\n<p>下面需要开始拆分代码了。根据React&#x2F;Vue这样框架通常的设计经验，需要下面一些组成：</p>\n<ul>\n<li><code>actions</code>  存储状态管理的动作</li>\n<li><code>components</code>  存储相互解耦的”dumb”组件，最好和业务无关</li>\n<li><code>constants</code>  存储全局常量</li>\n<li><code>containers</code>  存储组织<code>components</code>的业务容器组件</li>\n<li><code>entry</code>  存储入口文件</li>\n<li><code>helper</code>  存储工具函数</li>\n<li><code>reducers</code>  存储状态管理的reducers</li>\n<li><code>settings</code>  存储全局配置，通常用来初始化store</li>\n<li><code>store</code>  存储全局状态</li>\n<li><code>templates</code>  存储引入js的html文件</li>\n</ul>\n<p>我的项目比较简单，一没有状态管理（后面复杂了之后可能会引入😂），二只有三个组件，只要上面的<code>components</code>, <code>constants</code>, <code>containers</code>, <code>helper</code>的就够用了。最后src下的文件目录大概像下面这样</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── App.vue</span><br><span class=\"line\">├── components</span><br><span class=\"line\">│   └── column</span><br><span class=\"line\">│       └── Column.vue</span><br><span class=\"line\">├── constants</span><br><span class=\"line\">│   └── index.js</span><br><span class=\"line\">├── containers</span><br><span class=\"line\">│   ├── info</span><br><span class=\"line\">│   │   └── Info.vue</span><br><span class=\"line\">│   └── wall</span><br><span class=\"line\">│       └── Wall.vue</span><br><span class=\"line\">├── helper</span><br><span class=\"line\">│   └── utils.js</span><br><span class=\"line\">├── index.css</span><br><span class=\"line\">└── index.js</span><br></pre></td></tr></table></figure>\n\n<p>在拆分时遇到了一些数据需要从最外层透传到子组件的情况，如<code>res</code>, <code>tag_list</code>, <code>tag_keys</code>。不过他们是只读的，而且数目很少，所以并不需要状态管理，只用通过props传下去就行了。</p>\n<h2 id=\"新功能\"><a href=\"#新功能\" class=\"headerlink\" title=\"新功能\"></a>新功能</h2><p>重构完之后，终于可以写新功能了。新功能主要是增加两个伪路由，方便页面的分享（这个需求我之前遇到过几次了）。页面是spa类型的，所以前端路由可以采用hash或history H5 API来实现。同时也有许多在这个基础上了前端路由库，提供一站式解决方案。我的需求目前其实不需要完整的路由方案：</p>\n<ul>\n<li>图片详情页可以分享</li>\n<li>搜索结果可以分享</li>\n</ul>\n<p>因此，设计上使用hash的方案，对于图片详情页，用<code>!</code>开头，后接图片序号。对于搜索结果页，则没有开头的<code>!</code>，仅使用<code>/</code>隔开每一个搜索关键字。对hash的读写上，没有什么困难的地方：</p>\n<ul>\n<li><strong>读</strong>：<code>App.vue</code>根据hash注入对应的数据，更改默认视图，对于图片详情页，更改展示组件</li>\n<li><strong>写</strong>：切换组件时，记录当前数据到<code>location.hash</code>，方便直接复制链接分享</li>\n</ul>\n<h2 id=\"后面的计划\"><a href=\"#后面的计划\" class=\"headerlink\" title=\"后面的计划\"></a>后面的计划</h2><p>现在网站还是有点单调了。只能自娱自乐，没有互动。后面应该会考虑在每张图片接入Disqus的问题。</p>\n",
            "tags": [
                "重构",
                "脚手架",
                "技改",
                "Vue",
                "gulp"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2017/09/08/photogallery-improvement/",
            "url": "http://shenlvmeng.github.com/blog/2017/09/08/photogallery-improvement/",
            "title": "PhotoGallery技术改造",
            "date_published": "2017-09-08T11:31:17.000Z",
            "content_html": "<p><img src=\"/blog/blog/images/photogallery.png\"></p>\n<p>最近离职后除了准备面试，多了许多时间对以往的前端个人项目进行改造。<a href=\"http://shenlvmeng.github.io/gallery/index.html\">PhotoGallery</a>就是其中一个个人很喜欢，但由于技术原因没做到完美的例子。最近准备抽出时间进行完善。</p>\n<p>PhotoGallery是一个使用瀑布流展示电影海报以及花絮（当然都是个人比较心水的）的展示型页面。所有的电影图片也是从大一就开始收集的，一直囤积在人人上。页面的诸多功能是根据个人爱好设计的，如</p>\n<ul>\n<li>根据标签搜索</li>\n<li>相似图片</li>\n<li>基于tag的推荐等</li>\n</ul>\n<p>总体来说，就是一个展示、介绍、推荐电影的地方。内容上还是很不错的。但是，去年寒假码代码时，前端技术还有待提高，很多地方写得并不严谨甚至比较丑陋。功能上也有些影响体验必须解决的痛点。大概有下面这些</p>\n<ul>\n<li><strong>首屏渲染时间糟糕</strong>，这是因为图片过多（个人看的太多），又使用了Vue。同时Vue这种MVVM框架和精细化DOM操作一山不容二虎，因此，结合懒加载，效果依然不理想</li>\n<li><strong>图片的时序排布并不自然</strong>，当时图省事，使用纯CSS方案实现瀑布流，牺牲了图片排序。图片只能从上到下再从左到右排序，和正常的阅读顺序并不一致。同时，最老的图片在最前，也不合理</li>\n<li><strong>新增图片困难</strong>，这是由于github.io的纯静态的限制，当时采用了静态图片+meta存数据的方式来实现，后面看了电影再往里加图步骤繁琐，没有人性化的办法</li>\n<li>样式老气，细节粗糙</li>\n<li><strong>本地调试困难</strong>，只使用了gulp来压缩js，css和json代码（代码少，不需要打包），不是全家桶脚手架，本地调试困难，且不能使用ES6语法</li>\n<li><strong>代码语法和风格上不严谨</strong>，考虑结合在公司的规矩规范</li>\n</ul>\n<p>针对上面大大小小几点，以及实际情况（比如只能使用github.io），考虑像下面这样优化</p>\n<h3 id=\"瀑布流布局实现方式待优化\"><a href=\"#瀑布流布局实现方式待优化\" class=\"headerlink\" title=\"瀑布流布局实现方式待优化\"></a>瀑布流布局实现方式待优化</h3><p>放弃使用column-count的方案。原因有二：</p>\n<ol>\n<li>排布顺序是从上到下，再从左到右，和日常经验相悖。类似地，使用flex的方案也不行</li>\n<li>本身和懒加载的设计兼容性并不好，懒加载的新图片会导致整个页面的布局完全改变。类似地，使用grid的方案也不适合</li>\n</ol>\n<p>因此考虑借鉴<a href=\"http://www.zhangxinxu.com/wordpress/2012/03/%E5%A4%9A%E6%A0%8F%E5%88%97%E8%A1%A8%E5%8E%9F%E7%90%86%E4%B8%8B%E5%AE%9E%E7%8E%B0%E7%9A%84%E7%80%91%E5%B8%83%E6%B5%81%E5%B8%83%E5%B1%80-waterfall-layout/\">张鑫旭大神的方案</a>，综合CSS和JS实现懒加载的滚动式瀑布流布局。</p>\n<p><img src=\"http://image.zhangxinxu.com/image/blog/201203/2012-03-23_233114.png\"></p>\n<p>首先，根据屏幕宽度设置合理的列数，再逐列插入5张新图片，作为初始情况，同时，使用<code>flex</code>布局，设置<code>flex-grow</code>和<code>justify-content</code>等属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Wall</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">columns</span>: <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">clientWidth</span> / columnWidth),</span><br><span class=\"line\">      <span class=\"attr\">lastFlag</span>: <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">clientWidth</span> / columnWidth) * <span class=\"number\">5</span> - <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">items</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">itemsForColumns</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> ret = <span class=\"title class_\">Array</span>.<span class=\"title function_\">apply</span>(<span class=\"literal\">null</span>, <span class=\"title class_\">Array</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">columns</span>)).<span class=\"title function_\">map</span>(<span class=\"function\">() =&gt;</span> []);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">items</span>.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">lastFlag</span> + <span class=\"number\">1</span>).<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        ret[i % <span class=\"variable language_\">this</span>.<span class=\"property\">columns</span>].<span class=\"title function_\">push</span>(item);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      <span class=\"comment\">// 每列先只加载5个</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#photos</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">flex-flow</span>: row wrap;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>: flex-start;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: space-around;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.wall-column</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">250px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">8px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>: top;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>之后，监听可能会改变布局的所有情况，在我这个场景下，大概有三种：</p>\n<ul>\n<li>滚动（scroll）事件</li>\n<li>缩放事件（resize）事件</li>\n<li>筛选图片，在改变筛选条件，会导致图片数目的变化</li>\n</ul>\n<p>下面分情况解决之。</p>\n<p><strong>resize时</strong></p>\n<p>监听<code>window</code>的<code>resize</code>事件，当最后一列的位置变化时，意味着布局已经改变，需要触发重排。可以看到上面的<code>itemForColumns</code>中依赖<code>columns</code>和<code>lastFlag</code>两个状态。这里我们利用MVVM框架的优势，维护这两个值，就可以让Vue帮我们完成重排这样的繁琐操作。如下，当<code>columns</code>改变时，才会触发重绘。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;resize&quot;</span>, <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">columns</span> = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">clientWidth</span> / columnWidth);</span><br><span class=\"line\">  <span class=\"comment\">// 已经展示过的图片就不要隐藏了</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">lastFlag</span> = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">columns</span> * <span class=\"number\">5</span> - <span class=\"number\">1</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">lastFlag</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>筛选图片时</strong></p>\n<p>同理，通过关键词筛选图片时，改变了传入Wall的prop <code>factor</code>。会同步更新依赖<code>factor</code>的<code>item</code>，触发重排。有一点有注意的是，**<code>lastFlag</code>需要重新开始累加**。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">watch</span>: &#123;</span><br><span class=\"line\">  <span class=\"title function_\">items</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设置了筛选条件后，lastFlag需要重新开始累加</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">lastFlag</span> = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">clientWidth</span> / columnWidth) * <span class=\"number\">5</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>scroll时</strong></p>\n<p>页面滚动时，需要加入新的图片到column中，我们要做的只是更改<code>lastFlag</code>即可，Vue会帮我们自动完成依赖<code>lastFlag</code>的<code>itemForColumns</code>更新。重点在，我们如何知道lastFlag应该增加到多少。</p>\n<p>我们回看下<code>itemForColumns</code>的逻辑，可以发现<strong>新增的图片是循环摆放的</strong>。这里额外说一句，尽管新图片放在最短列是最合理的，但是工程上并不合算（一是Vue下做这么精细的DOM操作不合适，二是获知最短列意味着DOM操作已经发生，即会有频繁的回流和重绘，这会影响渲染时间）。我们循环考虑每一列的最底部位置，如果在视口内，将图片更新到该列，直到所有列底部都在视口外。直到图片加载完毕。</p>\n<p>另外，在实践时还发现一个问题，<code>handleScroll</code>里更改了<code>lastFlag</code>后，Vue本身有batch的优化，会在microtask栈空后，才会进行耗时的DOM操作。循环添加图片时，需要通过setTimeout异步完成，避免误判，在一次递归中加载了所有图片。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">handleScroll</span>(<span class=\"params\">top</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">items</span>.<span class=\"property\">length</span> &lt;= <span class=\"variable language_\">this</span>.<span class=\"property\">lastFlag</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> delta = -<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">columns</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> col = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">`wall-<span class=\"subst\">$&#123;i&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (col &amp;&amp; col.<span class=\"property\">offsetTop</span> + col.<span class=\"property\">clientHeight</span> &lt; top + (<span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span> || <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>.<span class=\"property\">clientHeight</span>)) &#123;</span><br><span class=\"line\">      delta = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!!++delta) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">lastFlag</span> += delta;</span><br><span class=\"line\">    <span class=\"comment\">// 直到所有列下沿都不在视口内，</span></span><br><span class=\"line\">    <span class=\"comment\">// 同时，设置时延，保证DOM操作完成后再继续handleScroll</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;  <span class=\"variable language_\">this</span>.<span class=\"title function_\">handleScroll</span>(top); &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"新增图片困难\"><a href=\"#新增图片困难\" class=\"headerlink\" title=\"新增图片困难\"></a>新增图片困难</h3><p><del>由于github.io是纯静态的页面，我并没有后台环境，这个痛点短期内只能缓解不能根除。不过后面考虑将所有图片迁移到图床上，毕竟把图片数据也存在github上感觉还是……有点怪怪的。日后新增图片应该还是通过上传图片，更新<code>meta.json</code>的形式完成。</del></p>\n<p>目前已将所有图片迁移到图床上，图床选择上参考了知乎上的推荐，使用<a href=\"https://www.qiniu.com/\">七牛云存储</a>，在个人实名认证后，免费部分有每月10G国内和国外下载流量，100万次GET和PUT请求次数，和10G存储空间。同时，它还提供对图片的压缩等管理，尽量减少流量。</p>\n<p>迁移之后，仓库体积大大减小。之后日常更新时，图片单独上传，根据外链固定前缀得到最终路径。</p>\n<p><del><code>meta.json</code>的更新上，考虑自己写一个工具，根据新看的电影生成新的content。</del></p>\n<p>已完成自动生成<code>meta.json</code>的<a href=\"https://shenlvmeng.github.io/meta-maker.html\">小工具</a>，原理很简单，就不再介绍了。</p>\n<h3 id=\"细节美化\"><a href=\"#细节美化\" class=\"headerlink\" title=\"细节美化\"></a>细节美化</h3><p>点比较细碎。整体借鉴了<a href=\"https://material.io/guidelines/material-design/introduction.html#introduction-goals\">material design</a>的思想。</p>\n<p><strong>影片详细信息的遮罩</strong></p>\n<p>考虑使用100%的遮罩，同时禁止背景滚动的形式展示图片的详细信息。起初打算用js去实现，后来发现下面的两点使得方案并不简单</p>\n<ul>\n<li>scroll事件不能被cancel，这意味着不能打断默认的滚动行为</li>\n<li>从Mouse，Keyboard，Touch相关触发scroll事件的事件劫持滚动行为倒是可以，不过要监听的事件太多</li>\n</ul>\n<p>只好作罢，通过纯CSS的方式，弹出浮层时，为body指定<code>noscroll</code>的类名。让浮层的<code>overflow</code>属性为<code>scroll</code>即可，同时设置浮层<code>position</code>属性为<code>fixed</code>即可。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#display</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"comment\">/*...*/</span></span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">100</span>;</span><br><span class=\"line\">  <span class=\"attribute\">overflow-y</span>: scroll;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用缓动函数改进回到开头</strong></p>\n<p>这里使用定义域和值域都是<code>[0,1]</code>的<code>easeInOutCubic</code>函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">easeInOutCubic</span> = t =&gt; (t&lt;<span class=\"number\">.5</span> ? <span class=\"number\">4</span>*t*t*t : (t-<span class=\"number\">1</span>)*(<span class=\"number\">2</span>*t-<span class=\"number\">2</span>)*(<span class=\"number\">2</span>*t-<span class=\"number\">2</span>)+<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<p>有了缓动函数后，使用<code>requestAnimationFrame</code>即可高效率地绘制JS动画。这里封装了一个<code>animate</code>函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">animate</span> = (<span class=\"params\">obj, prop, end, time, ease</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!obj || !obj[prop] || time &lt; <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> start = obj[prop],</span><br><span class=\"line\">      k = end - start,</span><br><span class=\"line\">      timer = <span class=\"literal\">null</span>,</span><br><span class=\"line\">      tick = <span class=\"function\"><span class=\"params\">timestamp</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timer === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">          timer = timestamp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> progress = timestamp - timer;</span><br><span class=\"line\">        obj[prop] = start + <span class=\"title function_\">ease</span>(progress / time) * k;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (progress &lt; time) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">requestAnimationFrame</span>(tick);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">requestAnimationFrame</span>(tick);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>后面直接使用<code>animate(document.body, &quot;scrollTop&quot;, 0, 1000, easeInOutCubic)</code>就可以圆滑地上移了。</p>\n<p><strong>移动端的优化</strong></p>\n<ul>\n<li>使用媒体查询，在屏幕宽度更改时，隐藏一些元素</li>\n<li>在UA为移动端设备时，给出提醒</li>\n</ul>\n<p><strong>loading样式</strong></p>\n<p>在改变筛选条件时，设置loading样式提升用户体验。通过积累onload的计数和初始加载图片值进行对比，在达到该值时清除遮罩。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"title function_\">loadedCount</span>(<span class=\"params\">newCount</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (newCount &gt;= <span class=\"title class_\">Math</span>.<span class=\"title function_\">min</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">lastFlag</span> + <span class=\"number\">1</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">items</span>.<span class=\"property\">length</span>)) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;全部加载完成&quot;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">isHidden</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// console.log(&quot;Loading...&quot;);</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>杂项</strong></p>\n<ul>\n<li>导航条交互优化</li>\n<li>导航条部分设置阴影，更改部分字体颜色和背景色</li>\n<li>修改触发分类方式，由<code>click</code>改为<code>mousemove</code></li>\n<li>修改tab的样式</li>\n<li>将vue和lodash的js文件下载到本地，避免CDN失效的问题（之前已经遇到过一次），增加可靠性</li>\n<li>搜索条件不区分大小写</li>\n</ul>\n<h3 id=\"本地调试困难\"><a href=\"#本地调试困难\" class=\"headerlink\" title=\"本地调试困难\"></a>本地调试困难</h3><p>因为代码较少，也只有一个文件，用不着webpack这样的全套解决方案。小巧易用的gulp就够了。针对我们需要的ES6转码，替换minify方案，本地调试等需要，都有对应的gulp插件解决问题。</p>\n<h4 id=\"gulp-babel\"><a href=\"#gulp-babel\" class=\"headerlink\" title=\"gulp-babel\"></a>gulp-babel</h4><p>使用<a href=\"https://babeljs.io/\">babel</a>来转码，<code>gulp-babel</code>依赖<code>babel-core@6</code>或以上版本，同时设置<code>preset</code>为<code>es2015</code>或ES7相关版本时也需要下载对应module。</p>\n<p>我只需要es2015即可。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev babel-core gulp-babel babel-preset-es2015</span><br></pre></td></tr></table></figure>\n\n<p>React和ES7的各阶段可以像下面这样选择安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save-dev babel-preset-react</span><br><span class=\"line\">$ npm install --save-dev babel-preset-stage-0</span><br><span class=\"line\">$ npm install --save-dev babel-preset-stage-1</span><br><span class=\"line\">$ npm install --save-dev babel-preset-stage-2</span><br><span class=\"line\">$ npm install --save-dev babel-preset-stage-3</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"其他工具\"><a href=\"#其他工具\" class=\"headerlink\" title=\"其他工具\"></a>其他工具</h4><ul>\n<li>**<a href=\"https://www.npmjs.com/package/gulp-uglify\">gulp-uglify</a>**，压缩代码</li>\n<li><strong>gulp-rename</strong>，为压缩出的js重命名</li>\n<li>**<a href=\"https://www.npmjs.com/package/gulp-webserver\">gulp-webserver</a>**，开启本地服务，方便本地调试</li>\n</ul>\n<p>上面这些插件按照文档操作即可，坑比较少，使用webserver时的<code>gulp.src()</code>入参通常为<code>./</code>，指以当前目录为服务器根目录。</p>\n<p>最后还需要加一个watch，方便在调试时的修改能同步转码压缩。像下面这样</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;watch&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  gulp.<span class=\"title function_\">watch</span>(<span class=\"string\">&#x27;assets/src/*.js&#x27;</span>, [<span class=\"string\">&#x27;js&#x27;</span>]);</span><br><span class=\"line\">  gulp.<span class=\"title function_\">watch</span>(<span class=\"string\">&#x27;assets/src/*.css&#x27;</span>, [<span class=\"string\">&#x27;css&#x27;</span>]);</span><br><span class=\"line\">  gulp.<span class=\"title function_\">watch</span>(<span class=\"string\">&#x27;assets/src/*.json&#x27;</span>, [<span class=\"string\">&#x27;json&#x27;</span>]);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>最后整个<code>gulpfile.js</code>是下面的样子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp&#x27;</span>),</span><br><span class=\"line\">    babel = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-babel&#x27;</span>),</span><br><span class=\"line\">    uglify = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-uglify&#x27;</span>),</span><br><span class=\"line\">    rename = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-rename&#x27;</span>),</span><br><span class=\"line\">    cleanCSS = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-clean-css&#x27;</span>),</span><br><span class=\"line\">    jsonminify = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-jsonminify&#x27;</span>),</span><br><span class=\"line\">    webserver = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-webserver&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;js&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;assets/src/*.js&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">babel</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">presets</span>: [<span class=\"string\">&#x27;es2015&#x27;</span>]</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">uglify</span>())</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">rename</span>(&#123; <span class=\"attr\">suffix</span>: <span class=\"string\">&#x27;.min&#x27;</span> &#125;))</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;dist&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;css&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>([<span class=\"string\">&#x27;assets/src/*.css&#x27;</span>])</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">cleanCSS</span>(&#123;<span class=\"attr\">compatibility</span>: <span class=\"string\">&#x27;ie8&#x27;</span>&#125;))</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;dist&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;json&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;assets/src/meta.json&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">jsonminify</span>())</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;dist&#x27;</span>))</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;webserver&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;./&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">webserver</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">livereload</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">directoryListing</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">open</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;watch&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  gulp.<span class=\"title function_\">watch</span>(<span class=\"string\">&#x27;assets/src/*.js&#x27;</span>, [<span class=\"string\">&#x27;js&#x27;</span>]);</span><br><span class=\"line\">  gulp.<span class=\"title function_\">watch</span>(<span class=\"string\">&#x27;assets/src/*.css&#x27;</span>, [<span class=\"string\">&#x27;css&#x27;</span>]);</span><br><span class=\"line\">  gulp.<span class=\"title function_\">watch</span>(<span class=\"string\">&#x27;assets/src/*.json&#x27;</span>, [<span class=\"string\">&#x27;json&#x27;</span>]);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;dev&#x27;</span>, [<span class=\"string\">&#x27;default&#x27;</span>, <span class=\"string\">&#x27;webserver&#x27;</span>, <span class=\"string\">&#x27;watch&#x27;</span>]);</span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&quot;default&quot;</span>, [<span class=\"string\">&#x27;json&#x27;</span>, <span class=\"string\">&#x27;css&#x27;</span>, <span class=\"string\">&#x27;js&#x27;</span>]);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"代码优化\"><a href=\"#代码优化\" class=\"headerlink\" title=\"代码优化\"></a>代码优化</h3><p>从略。HTML和CSS部分参照以往写的<a href=\"https://shenlvmeng.github.io/blog/2017/06/23/HTML-CSS-code-style-guide/\">建议</a>即可。除此以外，优化了下面的部分：</p>\n<ul>\n<li>删除了为兼容移动端额外使用的touchend事件，增加viewport的meta标签，消除移动端chrome浏览器点击300ms延时情况</li>\n<li>由于引入了babel，删除了兼容ES6语法的自己写的polyfill部分</li>\n<li>使用<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\">fetch API</a>请求json</li>\n<li>优化导航条点击事件处理相关的代码</li>\n<li>减少图片数目和json体积</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"https://segmentfault.com/a/1190000004394726\">使用gulp 进行ES6开发</a></li>\n<li><a href=\"http://blog.csdn.net/seven0404/article/details/51880162\">node.js利用gulp 启动webServer服务</a></li>\n<li><a href=\"https://stackoverflow.com/questions/2434602/css-setting-width-height-as-percentage-minus-pixels\">CSS: Setting width&#x2F;height as Percentage minus pixels</a></li>\n<li><a href=\"http://easings.net/zh-cn\">缓动函数速查表</a></li>\n<li><a href=\"https://gist.github.com/gre/1650294\">Simple Easing Functions in Javascript</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame\">window.requestAnimationFrame | MDN</a></li>\n<li><a href=\"https://dribbble.com/\">dribbble</a></li>\n<li><a href=\"https://codepen.io/sdthornton/pen/wBZdXq\">Material Design Box Shadows</a></li>\n<li><a href=\"http://tobiasahlin.com/spinkit/\">SpinKit | Simple CSS Spinners</a></li>\n<li><a href=\"https://www.zhihu.com/question/21667151\">国内有什么方便的图床？</a></li>\n</ul>\n",
            "tags": [
                "脚手架",
                "技改",
                "Vue",
                "gulp",
                "瀑布流",
                "电影"
            ]
        }
    ]
}