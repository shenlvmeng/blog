{
    "version": "https://jsonfeed.org/version/1",
    "title": "Shenlvmeng's Blog • All posts by \"dom\" tag",
    "description": "Be sharp, my friend.",
    "home_page_url": "http://shenlvmeng.github.com/blog",
    "items": [
        {
            "id": "http://shenlvmeng.github.com/blog/2017/04/10/how-browsers-work-1/",
            "url": "http://shenlvmeng.github.com/blog/2017/04/10/how-browsers-work-1/",
            "title": "浏览器是如何工作的 上 解析与呈现",
            "date_published": "2017-04-10T12:27:40.000Z",
            "content_html": "<blockquote>\n<p>下篇传送门： <a href=\"https://shenlvmeng.github.io/blog/2017/04/11/how-browsers-work-2/\">浏览器是如何工作的 下 布局与绘制</a></p>\n</blockquote>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>本文主要翻译于Tali Garsiel在2009年10月的一篇介绍Webkit和Gecko内核的经典文章<a href=\"http://taligarsiel.com/Projects/howbrowserswork1.htm\">How browsers work</a>。尽管在面试和工作上用不到这么细节，但是学习浏览器的内部原理将让我们可以更好地理解一些最优开发实践的道理。</p>\n<h3 id=\"浏览器\"><a href=\"#浏览器\" class=\"headerlink\" title=\"浏览器\"></a>浏览器</h3><p>浏览器可以说是PC和移动设备上最常用的软件应用了。目前的主流浏览器有5个：IE，Firefox，Safari，Chrome和Opera。浏览器的主要功能是协助用户向服务器发起请求，并在窗口中展示请求的网络资源（HTML文档，或图片，或pdf文档，或其他可以被URI指定位置的类型）。</p>\n<p>浏览器解释并展示HTML稳当的方式规定在HTML和CSS规范中。这些规范由<a href=\"https://www.w3.org/\">W3C</a>组织制订和维护。但是多年来，各浏览器并没有完全遵从这些规范（直到现在也是如此），从而带来兼容性的问题。</p>\n<p>从高层来看，浏览器的用户界面（并没有规范去规定它该如何设计）是类似的，有用来输入URI的地址栏，前进和后退按钮，书签管理选项，刷新和停止刷新按钮，主页按钮等。这些最佳实践是自然发展和相互模仿的结果。它的背后由下面的一些组件组成：</p>\n<ul>\n<li>用户界面和界面后端，即UI</li>\n<li>浏览器引擎，负责在UI和浏览器各组件间传递指令</li>\n<li>渲染引擎，负责渲染请求的内容</li>\n<li>网络，底层的网络调用</li>\n<li>JavaScript引擎</li>\n<li>数据存储，持久化存储浏览器的各种数据</li>\n</ul>\n<p><img src=\"/blog/blog/images/browser/layers.png\"></p>\n<div class=\"tip\">值得注意的是，Chrome的每个标签页分别对应一个渲染引擎实例，且都是一个独立的进程。（知道为什么Chrome那么吃内存了么😂）\n</div>\n\n<h3 id=\"渲染引擎\"><a href=\"#渲染引擎\" class=\"headerlink\" title=\"渲染引擎\"></a>渲染引擎</h3><p>渲染引擎的工作是渲染（文章原话），默认情况下，渲染引擎能呈现HTML、XML文档和图片。通过插件还可以展示其他类型内容（如PDF查看器插件显示PDF文档）。文章主要讨论了Firefox的Gecko引擎和Chrome的<a href=\"http://webkit.org/\">Webkit</a>引擎。</p>\n<p>渲染引擎的主要流程大致是获取并解析HTML文档构建DOM树，之后创建呈现树，呈现树包含有视觉属性（如颜色和尺寸），最后进入布局和绘制阶段。需要指出的是，这是个复杂和渐进的过程，为了更好地用户体验，渲染引擎通常会先将解析完成的部分HTML显示出来。下面是Webkit和Gecko的渲染引擎主流程。</p>\n<p><img src=\"/blog/blog/images/browser/geckoflow.jpg\" alt=\"Webkit\"></p>\n<p><img src=\"/blog/blog/images/browser/webkitflow.png\" alt=\"Gecko\"></p>\n<p>Gecko和Webkit的术语略有不同，整体流程却是相似的。Gecko将视觉格式化元素组成的树称为“框架树”。每个元素都是一个框架。WebKit使用的术语是“呈现树”，它由“呈现对象”组成。对于元素的放置，WebKit 使用的术语是“布局”，而Gecko称之为“重排”。另外，Gecko在HTML和DOM树间还有一个称为“内容槽”的层用于生成DOM元素。</p>\n<h4 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h4><p>关于解析HTML文档，<a href=\"http://taligarsiel.com/Projects/howbrowserswork1.htm#Parsing_general\">原文</a>做了详尽深入的讲解。由于侧重点不同，这里做些精炼。</p>\n<p>解析文档是指将文档转化成为有意义的结构，也就是可让代码理解和使用的结构。解析得到的结果通常是代表了文档结构的节点树，它称作解析树或者语法树。</p>\n<p>解析的过程通常分为<strong>词法分析</strong>和<strong>语法分析</strong>。前者是指将内容拆解成合法标记的过程，由词法分析器完成；后者指应用语言的语法规则，由解析器完成。</p>\n<p><img src=\"/blog/blog/images/browser/parse.png\"></p>\n<p>词汇通常用正则表达式表示。例如，我们的示例语言可以定义如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INTEGER :0|[1-9][0-9]*</span><br><span class=\"line\">PLUS : +</span><br><span class=\"line\">MINUS: - </span><br></pre></td></tr></table></figure>\n\n<p>正如您所看到的，这里用正则表达式给出了整数的定义。语法通常使用一种称为<a href=\"https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_Form\">BNF</a>的格式来定义。我们的示例语言可以定义如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">expression :=  term  operation  term</span><br><span class=\"line\">operation :=  PLUS | MINUS</span><br><span class=\"line\">term := INTEGER | expression</span><br></pre></td></tr></table></figure>\n\n<p>之前我们说过，如果语言的语法是与<a href=\"https://en.wikipedia.org/wiki/Context-free_grammar\">上下文无关</a>的语法，就可以由常规解析器进行解析。与上下文无关的语法的直观定义就是可以完全用BNF格式表达的语法。</p>\n<h5 id=\"解析器\"><a href=\"#解析器\" class=\"headerlink\" title=\"解析器\"></a>解析器</h5><p>有两种基本类型的解析器：<strong>自上而下解析器</strong>和<strong>自下而上解析器</strong>。直观地来说，自上而下的解析器从语法的高层结构出发，尝试从中找到匹配的结构。而自下而上的解析器从低层规则出发，将输入内容逐步转化为语法规则，直至满足高层规则。</p>\n<p>例如，我们要解析一个<code>2 + 3 - 1</code>的表达式，自上而下的解析器会从高层的规则开始：首先将<code>2 + 3</code>标识为一个表达式，然后将<code>2 + 3 - 1</code>标识为一个表达式。自下而上的解析器将扫描输入内容，找到匹配的规则后，将匹配的输入内容替换成规则。如此继续替换，直到输入内容的结尾。部分匹配的表达式保存在解析器的堆栈中。</p>\n<p>有一些工具可以帮助您生成解析器，它们称为解析器生成器。您只要向其提供您所用语言的语法（词汇和语法规则），它就会生成相应的解析器。WebKit使用了两种非常有名的解析器生成器：用于创建词法分析器的Flex以及用于创建解析器的Bison。Flex的输入是包含标记的正则表达式定义的文件。Bison的输入是采用BNF格式的语言语法规则。</p>\n<p>事情到了HTML这里变得麻烦了些。首先，HTML解析器的任务是将HTML标记解析成解析树。HTML词汇和语法在W3C的规范（目前版本是HTML5）中有着定义。但是HTML并不能很容易地用解析器所需的与上下文无关的语法来定义。HTML的正规格式DTD（Document Type Definition）并不是一种上下文无关的语法。</p>\n<p>原因就是HTML并不是XML。HTML最初野蛮生长的日子里，实现方式不一而足，HTML的严格版变体XHTML并没有得到广泛的支持。为了保证兼容性，饶了诸多浏览器一命，包容许多并不合适的使用方式，简化网络开发。DTD中的严格模式下是完全遵守HTML规范的。</p>\n<h4 id=\"HTML解析\"><a href=\"#HTML解析\" class=\"headerlink\" title=\"HTML解析\"></a>HTML解析</h4><p>解析器的输出<em>解析树</em>是由DOM元素和属性节点构成的树结构。DOM是文档对象模型 (Document Object Model) 的缩写。它是HTML文档的对象表示，同时也是JavaScript与HTML元素之间的接口。解析树的根节点是<code>Document</code>对象。DOM与标记tag间几乎是一一对应的关系。</p>\n<p>如上文所说，由于语言的宽容性和原内容的可更改性，HTML无法用常规的自上而下或自下而上的解析器来解析。根据原文的说法，<a href=\"https://www.w3.org/TR/html5/syntax.html#html-parser\">HTML的解析算法</a>由<strong>标记化</strong>和<strong>树构建</strong>组成。</p>\n<p>标记化是词法分析过程，将输入内容解析成多个标记。HTML标记包括起始标记、结束标记、属性名称和属性值。标记生成器识别标记，传递给树构造器，然后接受下一个字符以识别下一个标记；如此反复直到输入的结束。</p>\n<p><img src=\"/blog/blog/images/browser/parseflow.png\"></p>\n<p>其中<strong>标记化算法</strong>的输出结果是HTML标记。该算法使用状态机来表示。每一个状态接收来自输入信息流的一个或多个字符，并根据这些字符更新下一个状态。当前的标记化状态和树结构状态会影响进入下一状态的决定。算法相当复杂，无法在此详述，下面给出一个简要的示例（来自原文）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    Hello world</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>初始状态是数据状态。遇到字符<code>&lt;</code>时状态更改为“标记打开状态”。接收一个a-z字符会创建“起始标记”，状态更改为“标记名称状态”。这个状态会一直保持到接收<code>&gt;</code>字符。在此期间接收的每个字符都会附加到新的标记名称上。在本例中，我们创建的标记是<code>html</code>标记。</p>\n<p>遇到<code>&gt;</code>标记时，会发送当前的标记，状态改回“数据状态”。<code>&lt;body&gt;</code>标记也会进行同样的处理。目前<code>html</code>和<code>body</code>标记均已发出。现在我们回到“数据状态”。接收到 <code>Hello world</code>中的<code>H</code>字符时，将创建并发送字符标记，直到接收<code>&lt;/body&gt;</code>中的<code>&lt;</code>。我们将为<code>Hello world</code>中的每个字符都发送一个字符标记。</p>\n<p>现在我们回到“标记打开状态”。接收下一个输入字符<code>/</code>时，会创建<code>end tag token</code>并改为“标记名称状态”。我们会再次保持这个状态，直到接收<code>&gt;</code>。然后将发送新的标记，并回到“数据状态”。<code>&lt;/html&gt;</code>输入也会进行同样的处理。</p>\n<p><img src=\"/blog/blog/images/browser/tokeniser.png\"></p>\n<p>树构造器中运行着<strong>树构造算法</strong>。在创建解析器的同时，也会创建<code>Document</code>对象。在树构建阶段，以<code>Document</code>为根节点的DOM树也会不断进行修改，向其中添加各种元素。标记生成器发送的每个节点都会由树构建器进行处理。规范中定义了每个标记所对应的DOM元素，这些元素会在接收到相应的标记时创建。这些元素不仅会添加到DOM树中，还会添加到开放元素的堆栈中。此堆栈用于纠正嵌套错误和处理未关闭的标记。其算法类似标记化算法，也可以用状态机来描述。</p>\n<p>我们同样以上面的代码为例，树构建阶段的输入是一个来自标记化阶段的标记序列。第一个模式是<strong>initial mode</strong>。接收HTML标记后转为<strong>before html</strong>模式，并在这个模式下重新处理此标记。这样会创建一个<code>HTMLHtmlElement</code>元素，并将其附加到<code>Document</code>根对象上。</p>\n<p>然后状态将改为<strong>before head</strong>。此时我们接收<code>body</code>标记。即使我们的示例中没有<code>head</code>标记，系统也会隐式创建一个<code>HTMLHeadElement</code>，并将其添加到树中。</p>\n<p>现在我们进入了<strong>in head</strong>模式，然后转入<strong>after head</strong>模式。系统对<code>body</code>标记进行重新处理，创建并插入<code>HTMLBodyElement</code>，同时模式转变为<strong>in body</strong>。</p>\n<p>现在，接收由“Hello world”字符串生成的一系列字符标记。接收第一个字符时会创建并插入<code>Text</code>节点，而其他字符也将附加到该节点。</p>\n<p>接收<code>body</code>结束标记会触发<strong>after body</strong>模式。现在我们将接收HTML结束标记，然后进入<code>after after body</code>模式。接收到文件结束标记后，解析过程就此结束。</p>\n<p><img src=\"/blog/blog/images/browser/treebuilder.gif\"></p>\n<h4 id=\"解析后与容错机制\"><a href=\"#解析后与容错机制\" class=\"headerlink\" title=\"解析后与容错机制\"></a>解析后与容错机制</h4><p>在此阶段，浏览器会将文档标注为交互状态，并开始解析那些处于<code>deferred</code>模式的脚本，也就是那些应在文档解析完成后才执行的脚本。然后，文档状态将设置为“完成”，一个<code>load</code>事件随之触发。</p>\n<p>我们在浏览HTML网页时从来不会看到“语法无效”的错误。这是因为浏览器会纠正<strong>任何</strong>无效内容，然后继续工作。不同浏览器的错误处理机制相当一致，但这种机制却并不是HTML当前规范的一部分。和书签管理以及前进&#x2F;后退按钮一样，它也是浏览器在多年发展中的产物。很多网站都普遍存在着一些已知的无效HTML结构，每一种浏览器都会尝试通过和其他浏览器一样的方式来修复这些无效结构。</p>\n<p><a href=\"https://whatwg-cn.github.io/html/\">HTML5规范</a>定义了一部分这样的要求。WebKit在HTML解析器类的开头注释中对此做了很好的概括。</p>\n<blockquote><p>解析器对标记化输入内容进行解析，以构建文档树。如果文档的格式正确，就直接进行解析。</p>\n<p>遗憾的是，我们不得不处理很多格式错误的 HTML 文档，所以解析器必须具备一定的容错性。</p>\n<p>我们至少要能够处理以下错误情况：</p>\n<ol>\n<li>明显不能在某些外部标记中添加的元素。在此情况下，我们应该关闭所有标记，直到出现禁止添加的元素，然后再加入该元素。</li>\n<li>我们不能直接添加的元素。这很可能是网页作者忘记添加了其中的一些标记（或者其中的标记是可选的）。这些标签可能包括：HTML HEAD BODY TBODY TR TD LI（还有遗漏的吗？）。</li>\n<li>向inline元素内添加block元素。关闭所有inline元素，直到出现下一个较高级的block元素。</li>\n<li>如果这样仍然无效，可关闭所有元素，直到可以添加元素为止，或者忽略该标记。</li>\n</ol>\n</blockquote>\n\n<p><a href=\"http://taligarsiel.com/Projects/howbrowserswork1.htm#Browsers_error_tolerance\">错误的情况</a>包括错误使用<code>&lt;br&gt;</code>，离散表格，过于复杂的标记层级结构。错误的html或body结束标记等。Webkit的具体代码展示略。</p>\n<h4 id=\"CSS解析\"><a href=\"#CSS解析\" class=\"headerlink\" title=\"CSS解析\"></a>CSS解析</h4><p>和HTML不同，CSS是上下文无关的语法，可以使用简介中描述的各种解析器进行解析。词法语法（词汇）是针对各个标记用正则表达式定义的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">comment   \\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\/</span><br><span class=\"line\">num   [0-9]+|[0-9]*&quot;.&quot;[0-9]+</span><br><span class=\"line\">nonascii  [\\200-\\377]</span><br><span class=\"line\">nmstart   [_a-z]|&#123;nonascii&#125;|&#123;escape&#125;</span><br><span class=\"line\">nmchar    [_a-z0-9-]|&#123;nonascii&#125;|&#123;escape&#125;</span><br><span class=\"line\">name    &#123;nmchar&#125;+</span><br><span class=\"line\">ident   &#123;nmstart&#125;&#123;nmchar&#125;*</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>ident</code>表示标识符，如类名。<code>name</code>是元素ID。</p>\n<p>语法则是采用 BNF 格式描述的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ruleset</span><br><span class=\"line\">  : selector [ &#x27;,&#x27; S* selector ]*</span><br><span class=\"line\">    &#x27;&#123;&#x27; S* declaration [ &#x27;;&#x27; S* declaration ]* &#x27;&#125;&#x27; S*</span><br><span class=\"line\">  ;</span><br><span class=\"line\">selector</span><br><span class=\"line\">  : simple_selector [ combinator selector | S+ [ combinator? selector ]? ]?</span><br><span class=\"line\">  ;</span><br><span class=\"line\">simple_selector</span><br><span class=\"line\">  : element_name [ HASH | class | attrib | pseudo ]*</span><br><span class=\"line\">  | [ HASH | class | attrib | pseudo ]+</span><br><span class=\"line\">  ;</span><br><span class=\"line\">class</span><br><span class=\"line\">  : &#x27;.&#x27; IDENT</span><br><span class=\"line\">  ;</span><br><span class=\"line\">element_name</span><br><span class=\"line\">  : IDENT | &#x27;*&#x27;</span><br><span class=\"line\">  ;</span><br><span class=\"line\">attrib</span><br><span class=\"line\">  : &#x27;[&#x27; S* IDENT S* [ [ &#x27;=&#x27; | INCLUDES | DASHMATCH ] S*</span><br><span class=\"line\">    [ IDENT | STRING ] S* ] &#x27;]&#x27;</span><br><span class=\"line\">  ;</span><br><span class=\"line\">pseudo</span><br><span class=\"line\">  : &#x27;:&#x27; [ IDENT | FUNCTION S* [IDENT S*] &#x27;)&#x27; ]</span><br><span class=\"line\">  ;</span><br></pre></td></tr></table></figure>\n\n<p>如其中的<code>ruleset</code>表示，这个规则集是一个选择器，或者由逗号和空格（S表示空格）分隔的多个（数量可选）选择器。规则集包含了大括号，以及其中的一个或多个（数量可选）由分号分隔的声明。</p>\n<p>Webkit使用Flex和Bison解析器生成器，通过 CSS 语法文件自动创建解析器。Firefox 使用的是人工编写的自上而下的解析器。这两种解析器都会将CSS文件解析成<code>StyleSheet</code>对象，且每个对象都包含CSS规则。</p>\n<h4 id=\"JS和CSS的处理\"><a href=\"#JS和CSS的处理\" class=\"headerlink\" title=\"JS和CSS的处理\"></a>JS和CSS的处理</h4><blockquote>\n<p>这也是经常的考点</p>\n</blockquote>\n<h5 id=\"脚本\"><a href=\"#脚本\" class=\"headerlink\" title=\"脚本\"></a>脚本</h5><p><strong>解析器遇到<code>&lt;script&gt;</code>标记时会立即解析并执行脚本。文档的解析将停止，直到脚本执行完毕</strong>。如果脚本是外部的，那么解析过程会停止，直到从网络同步抓取资源完成后再继续。此模型已经使用了多年，也在HTML4和HTML5规范中进行了指定。</p>\n<p>脚本标注为<strong>defer</strong>时，它不会停止文档解析，而是等到解析结束才执行。HTML5中还增加了一个选项<code>async</code>，可将脚本标记为异步，在资源下载完毕后立即执行。</p>\n<h5 id=\"预解析\"><a href=\"#预解析\" class=\"headerlink\" title=\"预解析\"></a>预解析</h5><p>WebKit和Firefox都进行了这项优化。在执行脚本时，其他线程会解析文档的其余部分，找出并加载需要通过网络加载的其他资源。通过这种方式，资源可以在并行连接上加载，从而提高总体速度。但是，<strong>预解析器不会修改DOM树</strong>，而是将这项工作交由主解析器处理；预解析器只会解析外部资源（例如外部脚本、样式表和图片）的引用。</p>\n<h5 id=\"样式表\"><a href=\"#样式表\" class=\"headerlink\" title=\"样式表\"></a>样式表</h5><p>理论上来说，应用样式表不会更改DOM树，因此似乎没有必要等待样式表并停止文档解析。但这涉及到一个问题，就是脚本在文档解析阶段会请求样式信息。如果当时还没有加载和解析样式，脚本就会获得错误的回复。</p>\n<p>从而，Firefox在样式表加载和解析的过程中，会禁止所有脚本。而对于WebKit而言，仅当脚本尝试访问的样式属性可能受尚未加载的样式表影响时，它才会禁止该脚本。</p>\n<h4 id=\"呈现树\"><a href=\"#呈现树\" class=\"headerlink\" title=\"呈现树\"></a>呈现树</h4><p>在DOM树构建的同时，浏览器还会构建另一个树结构：呈现树（Render Tree）。这是由可视化元素按照其显示顺序而组成的树，也是文档的可视化表示。它的作用是让您按照正确的顺序绘制内容。</p>\n<p>Firefox将呈现树中的元素称为“框架”。WebKit使用的术语是呈现器或呈现对象。呈现器知道如何布局并将自身及其子元素绘制出来。</p>\n<p>每个呈现器都表示一个矩形区域，通常对应于相关节点的CSS框，这一点在CSS2规范中有所描述。它包含诸如宽度、高度和位置等几何信息。框的类型会受到与节点相关的<code>display</code>样式属性的影响。下面是Webkit根据<code>display</code>属性的不同，针对同一个DOM节点创建不同呈现器的例子：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">RenderObject* <span class=\"title\">RenderObject::createObject</span><span class=\"params\">(Node* node, RenderStyle* style)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  Document* doc = node-&gt;<span class=\"built_in\">document</span>();</span><br><span class=\"line\">  RenderArena* arena = doc-&gt;<span class=\"built_in\">renderArena</span>();</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  RenderObject* o = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (style-&gt;<span class=\"built_in\">display</span>()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> NONE:</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> INLINE:</span><br><span class=\"line\">      o = <span class=\"built_in\">new</span> (arena) <span class=\"built_in\">RenderInline</span>(node);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> BLOCK:</span><br><span class=\"line\">      o = <span class=\"built_in\">new</span> (arena) <span class=\"built_in\">RenderBlock</span>(node);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> INLINE_BLOCK:</span><br><span class=\"line\">      o = <span class=\"built_in\">new</span> (arena) <span class=\"built_in\">RenderBlock</span>(node);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> LIST_ITEM:</span><br><span class=\"line\">      o = <span class=\"built_in\">new</span> (arena) <span class=\"built_in\">RenderListItem</span>(node);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">   ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"和DOM树关系\"><a href=\"#和DOM树关系\" class=\"headerlink\" title=\"和DOM树关系\"></a>和DOM树关系</h5><p>呈现器和DOM元素是一一对应的，但是呈现树则不是。<strong>非可视化的DOM元素不会插入在呈现树中</strong>，例如<code>head</code>元素，或是<code>display</code>设为none的元素。同时，还有<strong>一些DOM元素对应着多个可视化对象</strong>，例如<code>select</code>元素。格式无效的HTML元素会根据CSS规范作出调整，如inline元素中同时包裹了block和inline元素（只能包含其中一种）。最后，<strong>有些呈现对象的位置和DOM节点位置不同</strong>，如浮动定位和绝对定位这样脱离文档流的元素。</p>\n<p><img src=\"/blog/blog/images/browser/rendertree.png\"></p>\n<h5 id=\"构建过程\"><a href=\"#构建过程\" class=\"headerlink\" title=\"构建过程\"></a>构建过程</h5><p>在Firefox中，<strong>展示层被注册为DOM更新的监听器</strong>。在监听到DOM改动后，展示层会把将框架创建工作委派给<code>FrameConstructor</code>，由其构造器解析样式并创建框架。</p>\n<p>在WebKit中，<strong>解析样式和创建呈现器的过程称为attachment</strong>。每个DOM节点都有一个<code>attach</code>方法用于完成此项工作。attach是<strong>同步</strong>进行的，将节点插入DOM树需要调用新的节点<code>attach</code>方法。</p>\n<p>处理<code>html</code>和<code>body</code>标记会构建呈现树根节点。这个根节点呈现对象对应于CSS规范中所说的<em>容器block</em>，这是最上层的 block，包含了其他所有block。它的尺寸就是视口，即浏览器窗口显示区域的尺寸。Firefox称之为<code>ViewPortFrame</code>，而WebKit称之为<code>RenderView</code>。这就是文档所指向的呈现对象。呈现树的其余部分以DOM树节点插入的形式来构建。</p>\n<p>W3C的CSS2.1规范中有提到<a href=\"https://www.w3.org/TR/CSS21/intro.html#processing-model\">解析模型</a>的问题。</p>\n<h5 id=\"样式计算\"><a href=\"#样式计算\" class=\"headerlink\" title=\"样式计算\"></a>样式计算</h5><p>构建呈现树时，需要计算每个呈现对象的可视化属性。这是通过每个元素的样式来完成的。样式包括来自各种来源的样式表、inline样式元素（即style属性）和HTML中的可视化属性（如<code>bgColor</code>, <code>width</code>）。样式表的来源包括浏览器的默认样式表、由网页作者提供的样式表以及由浏览器用户提供的用户样式表等。</p>\n<p>样式计算存在着许多困难：1）样式数据庞大，2）为元素查找匹配规则的过程复杂，3）CSS的层叠规则复杂。针对这些问题，firefox和Webkit有不同的处理方法。</p>\n<p>Webkit会引用样式对象（RenderStyle）。这些对象在某些情况下可被不同同级节点共享，这些节点还有下面的要求：</p>\n<ul>\n<li>鼠标状态相同，如都是<code>:hover</code></li>\n<li>没有元素ID</li>\n<li>tag名应匹配</li>\n<li>class属性应匹配</li>\n<li>链接状态（如<code>:active</code>）和焦点状态（如<code>:focus</code>）相同</li>\n<li>映射属性的集合完全相同</li>\n<li>不应被属性选择器匹配</li>\n<li>不能有任何inline样式属性</li>\n<li>不能使用同级选择器</li>\n</ul>\n<p>Firefox为简化运算，使用了另外两种树，<strong>规则树</strong>和<strong>样式上下文树</strong>，如下图所示。Webkit则通过DOM节点指向样式对象来实现。样式上下文包含端值。要计算出这些值，应按照正确顺序应用所有的匹配规则，并将其从逻辑值转化为具体的值。例如，如果逻辑值是屏幕大小的百分比，则需要换算成绝对的单位。</p>\n<p><img src=\"/blog/blog/images/browser/firefoxstyletree.png\"></p>\n<h6 id=\"规则树\"><a href=\"#规则树\" class=\"headerlink\" title=\"规则树\"></a>规则树</h6><p>规则树的设计将所有匹配规则都存储在树中，它包含了所有匹配规则。路径的路径中的底层节点拥有较高的优先级。规则树包含了所有已知规则匹配的路径。规则的存储是延迟进行的。规则树不会在开始的时候就为所有的节点进行计算，而是只有当某个节点样式需要进行计算时，才会向规则树添加计算的路径。</p>\n<p>原文从两个角度分析了规则树如何减少工作量：<strong>结构划分</strong>和<strong>通过规则树计算样式上下文</strong>。</p>\n<p>样式上下文可分割成多个结构。这些结构体包含了特定类别（如<code>border</code>或<code>color</code>）的样式信息。结构中的属性都是继承的或非继承的。继承属性如果未由元素定义，则继承自其父代。非继承属性（也称为“重置”属性）如果未进行定义，则使用默认值。</p>\n<p>规则树通过缓存整个结构（包含计算出的端值）为我们提供帮助。这一想法假定底层节点没有提供结构的定义，则可使用上层节点中的缓存结构。</p>\n<p>在计算某个特定元素的样式上下文时，我们首先计算规则树中的一条对应路径，或者使用一条现有的路径。然后我们沿此路径应用规则，在这个样式上下文中填充结构。我们从路径中拥有最高优先级的底层节点（通常也是最特殊的选择器）开始，并向上遍历规则树，直到结构填充完毕。</p>\n<p>如果该规则节点对于此结构没有任何规范，那么我们可以实现更好的优化：寻找路径更上层的节点，找到后指定完整的规范并指向相关节点即可。这是最好的优化方法，因为整个结构都能共享。这可以减少端值的计算量并节约内存。 </p>\n<p>如果我们找到了部分定义，就会向上遍历规则树，直到结构填充完毕。如果我们找不到结构的任何定义，那么假如该结构是<strong>继承</strong>类型，我们会在上下文树中指向父代的结构，这样也可以共享结构。如果是<code>reset</code>类型的结构，则会使用默认值。</p>\n<p>如果最特殊的节点确实添加了值，那么我们需要另外进行一些计算，以便将这些值转化成实际值。然后我们将结果缓存在树节点中，供子代使用。如果某个元素与其同级元素都指向同一个树节点，那么它们就可以<strong>共享整个样式上下文</strong>。</p>\n<p>下面用一个例子来讲解上面晦涩的说明：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;err&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;div1&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        this is a <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;big&quot;</span>&gt;</span> big error <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        this is also a</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;big&quot;</span>&gt;</span> very  big  error<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span> error</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;err&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;div2&quot;</span>&gt;</span>another error<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;<span class=\"attribute\">margin</span>:<span class=\"number\">5px</span>;<span class=\"attribute\">color</span>:black&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.err</span> &#123;<span class=\"attribute\">color</span>:red&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.big</span> &#123;<span class=\"attribute\">margin-top</span>:<span class=\"number\">3px</span>&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">div</span> <span class=\"selector-tag\">span</span> &#123;<span class=\"attribute\">margin-bottom</span>:<span class=\"number\">4px</span>&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#div1</span> &#123;<span class=\"attribute\">color</span>:blue&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#div2</span> &#123;<span class=\"attribute\">color</span>:green&#125;</span><br></pre></td></tr></table></figure>\n\n<p>为了简便起见，我们只需要填充两个结构：color 结构和 margin 结构。color 结构只包含一个成员（即“color”），而 margin 结构包含四条边。 形成的规则树如下图所示</p>\n<p><img src=\"/blog/blog/images/browser/styletree.png\"></p>\n<p>假设我们解析 HTML 时遇到了第二个<code>&lt;div&gt;</code>标记，我们需要为此节点创建样式上下文，并填充其样式结构。经过规则匹配，我们发现该<code>&lt;div&gt;</code>的匹配规则是第1、2和6条。这意味着规则树中已有一条路径可供我们的元素使用，我们只需要再为其添加一个节点以匹配第6条规则（规则树中的F节点）。我们将创建样式上下文并将其放入上下文树中。新的样式上下文将指向规则树中的F节点。</p>\n<p>现在我们需要填充样式结构。首先要填充的是<code>margin</code>结构。由于最后的规则节点(F)并没有添加到<code>margin</code>结构，我们需要上溯规则树，直至找到在先前节点插入中计算过的缓存结构，然后使用该结构。我们会在指定<code>margin</code>规则的最上层节点（即B节点）上找到该结构。</p>\n<p>我们已经有了<code>color</code>结构的定义，因此不能使用缓存的结构。由于<code>color</code>有一个属性，我们无需上溯规则树以填充其他属性。我们将计算端值（将字符串转化为RGB等）并在此节点上缓存经过计算的结构。</p>\n<p>第二个<code>&lt;span&gt;</code>元素处理起来更加简单。我们将匹配规则，最终发现它和之前的<code>span</code>一样指向规则G。由于我们找到了指向同一节点的同级，就可以共享整个样式上下文了，只需指向之<code>span</code>的上下文即可。</p>\n<h6 id=\"处理规则简化匹配\"><a href=\"#处理规则简化匹配\" class=\"headerlink\" title=\"处理规则简化匹配\"></a>处理规则简化匹配</h6><p>样式规则来源于外部样式表、inline样式属性、HTML可视化属性。后两者很容易匹配。CSS规则可能会棘手，可以对它进行一些处理，便于访问。</p>\n<p>样式表解析完毕后，系统会根据选择器将CSS规则添加到某个哈希表中。这些哈希表的选择器各不相同，包括ID、类名称、标记名称等，还有一种通用哈希表，适合不属于上述类别的规则。如果选择器是ID，规则就会添加到ID表中；如果选择器是类，规则就会添加到类表中，依此类推。这种处理可以大大简化规则匹配。我们无需查看每一条声明，只要从哈希表中提取元素的相关规则即可。以下面的CSS为例</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-class\">.error</span> &#123;<span class=\"attribute\">color</span>:red&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#messageDiv</span> &#123;<span class=\"attribute\">height</span>:<span class=\"number\">50px</span>&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;<span class=\"attribute\">margin</span>:<span class=\"number\">5px</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第一条规则将插入类表，第二条将插入ID表，而第三条将插入标记表。对于下面的HTML代码段：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;error&quot;</span>&gt;</span>an error occurred <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;messageDiv&quot;</span>&gt;</span>this is a message<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>我们首先会为p元素寻找匹配的规则。类表中有一个<code>error</code>键，在下面可以找到<code>p.error</code>的规则。div元素在ID表（键为 ID）和标记表中有相关的规则。剩下的工作就是找出哪些根据键提取的规则是真正匹配的了。</p>\n<h6 id=\"正确的层叠顺序\"><a href=\"#正确的层叠顺序\" class=\"headerlink\" title=\"正确的层叠顺序\"></a>正确的层叠顺序</h6><p>样式对象具有与可视化属性一一对应的属性（均为CSS属性但更为通用）。如果某个属性未由任何匹配规则所定义，那么部分属性可由父代元素样式对象继承。其他属性具有默认值。不过如果定义不止一个，就会出现麻烦，这时需要通过层叠顺序来解决。</p>\n<p>某个样式属性的声明可能会出现在多个样式表中，也可能在同一个样式表中出现多次。<strong>层叠</strong>顺序的重要性正体现在这里。根据CSS2规范，层叠的顺序为（优先级从低到高）：</p>\n<ol>\n<li>Browser declarations</li>\n<li>User normal declarations</li>\n<li>Author normal declarations</li>\n<li>Author important declarations</li>\n<li>User important declarations</li>\n</ol>\n<p>同样顺序的声明则会根据<strong>特异性(specity)<strong>进行排序，然后再是其</strong>指定顺序</strong>。HTML可视化属性会转换成匹配的CSS声明。它们被视为低优先级的Author normal declaration。</p>\n<p>那么特异性是什么意思呢？根据<a href=\"https://www.w3.org/TR/selectors/#specificity\">CSS3 selectors specificity</a>中的定义（和CSS2.1几乎一样），一个选择器的优先级计算如下：</p>\n<ol>\n<li>如果声明来自于<code>style</code>属性，而不是带有选择器的规则，则记为1，否则记为0 (&#x3D; a)</li>\n<li>记为选择器中ID属性的个数 (&#x3D; b)</li>\n<li>记为选择器中其他属性和伪类的个数 (&#x3D; c)</li>\n<li>记为选择器中元素名称和伪元素的个数 (&#x3D; d)</li>\n</ol>\n<p>将四个数字按a-b-c-d这样连接起来（位于大数进制的数字系统中），构成特异性。所使用的进制取决于上述类别中的最高计数。例如，如果a&#x3D;14，可以使用十六进制。如果a&#x3D;17，那么需要使用十七进制；不过在正常使用中，几乎不会使用到如此深嵌套层级的选择器。规范中给出的例子很好地演示了这种系统的工作方式。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*             &#123;&#125;  <span class=\"comment\">/* a=0 b=0 c=0 d=0 -&gt; specificity = 0,0,0,0 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">li</span>            &#123;&#125;  <span class=\"comment\">/* a=0 b=0 c=0 d=1 -&gt; specificity = 0,0,0,1 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:first</span>-line &#123;&#125;  <span class=\"comment\">/* a=0 b=0 c=0 d=2 -&gt; specificity = 0,0,0,2 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span>         &#123;&#125;  <span class=\"comment\">/* a=0 b=0 c=0 d=2 -&gt; specificity = 0,0,0,2 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">ol</span>+<span class=\"selector-tag\">li</span>      &#123;&#125;  <span class=\"comment\">/* a=0 b=0 c=0 d=3 -&gt; specificity = 0,0,0,3 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> + *<span class=\"selector-attr\">[rel=up]</span>&#123;&#125;  <span class=\"comment\">/* a=0 b=0 c=1 d=1 -&gt; specificity = 0,0,1,1 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">ol</span> <span class=\"selector-tag\">li</span><span class=\"selector-class\">.red</span>  &#123;&#125;  <span class=\"comment\">/* a=0 b=0 c=1 d=3 -&gt; specificity = 0,0,1,3 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">li</span><span class=\"selector-class\">.red</span><span class=\"selector-class\">.level</span>  &#123;&#125;  <span class=\"comment\">/* a=0 b=0 c=2 d=1 -&gt; specificity = 0,0,2,1 */</span></span><br><span class=\"line\"><span class=\"selector-id\">#x34y</span>         &#123;&#125;  <span class=\"comment\">/* a=0 b=1 c=0 d=0 -&gt; specificity = 0,1,0,0 */</span></span><br></pre></td></tr></table></figure>\n\n<p>找到匹配的规则之后，应根据级联顺序将其排序。WebKit对于较小的列表会使用冒泡排序，对较大的列表使用归并排序。</p>\n",
            "tags": [
                "HTML",
                "CSS",
                "DOM"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2017/03/20/domevent-elementsize-mediatag/",
            "url": "http://shenlvmeng.github.com/blog/2017/03/20/domevent-elementsize-mediatag/",
            "title": "【笔记】JavaScript事件处理机制，元素大小判断与H5的媒体标签",
            "date_published": "2017-03-20T12:45:30.000Z",
            "content_html": "<p>前一阵舍友去面试，被问到JavaScript中的事件处理机制。暗自思忖，发现自己也没有深入的了解过。顺带连同常用的HTML元素大小和实际中用到的HTML5中的媒体元素简单整理在下面，方便之后回顾。</p>\n<h2 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h2><p>JavaScript和HTML的交互是通过<strong>事件</strong>实现的。可以通过监听器订阅文档或窗口中的事件，在事件发生时执行特定的代码。这种属于设计模式中的观察者模式。</p>\n<p>事件相关的API最早出现在IE4和NetScape Nivagator4（后面简称为网景）中。两种浏览器提供了相似却不同的API。在之后的DOM2级标准中对DOM事件进行了标准化。</p>\n<h3 id=\"事件流\"><a href=\"#事件流\" class=\"headerlink\" title=\"事件流\"></a>事件流</h3><p><strong>事件流</strong>描述的是页面中接受时间的顺序。在这点上IE和网景采用了完全相反的两种处理思路。IE采用的是<strong>事件冒泡流</strong>，网景采用的是<strong>事件捕获流</strong>。</p>\n<p>事件冒泡（event bubbling）指从事件开始的最具体的元素接收，再逐步向上传递到最外层的节点，直到<code>document</code>。如下图（来自红宝书）展示的过程，在下面的文档中：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Event bubbling<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Click me<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果div标签被点击，<code>click</code>事件会这样依次传递：<code>&lt;div&gt;</code> -&gt; <code>&lt;body&gt;</code> -&gt; <code>&lt;html&gt;</code> -&gt; <code>document</code>。（不同浏览器实现细节上会有不同）</p>\n<p><img src=\"/blog/blog/images/event-bubbling.jpg\"></p>\n<p>事件捕获（event capturing）则认为应该从父节点开始捕获事件直到事件目标。因此，同样的上面的例子，顺序将是：<code>document</code> -&gt; <code>&lt;html&gt;</code> -&gt; <code>&lt;body&gt;</code> -&gt;  <code>&lt;div&gt;</code>。</p>\n<p><img src=\"/blog/blog/images/event-capturing.jpg\"></p>\n<p>目前很少有人使用事件捕获这种方式作为事件流。</p>\n<h4 id=\"DOM-事件流\"><a href=\"#DOM-事件流\" class=\"headerlink\" title=\"DOM 事件流\"></a>DOM 事件流</h4><p>“DOM2级标准”中规定事件流包括三个阶段，<strong>事件捕获</strong>、<strong>处于目标</strong>、<strong>时间冒泡</strong>。在实际的DOM事件流中，实际目标不会接受到事件。因此如下图展示的那样，捕获阶段停止在父目标<code>&lt;body&gt;</code>上，之后事件发生在目标上，<strong>并作为事件冒泡的一部分</strong>。然后，冒泡阶段发生，事件传回到文档。</p>\n<p><img src=\"/blog/blog/images/DOM2-event-flow.jpg\"></p>\n<h3 id=\"事件处理程序\"><a href=\"#事件处理程序\" class=\"headerlink\" title=\"事件处理程序\"></a>事件处理程序</h3><p>事件处理程序指用户指定响应事件的某种动作。它们都以’on’开头。HTML元素本身都可以使用与之同名的HTML特性。</p>\n<h4 id=\"DOM0级事件处理程序\"><a href=\"#DOM0级事件处理程序\" class=\"headerlink\" title=\"DOM0级事件处理程序\"></a>DOM0级事件处理程序</h4><p>DOM0级事件处理程序就是将一个函数直接赋值给一个事件处理程序属性。使用这种方法指定的事件处理程序被认为是元素的一种方法，从而其作用域为元素本身，即<code>this</code>指向引用元素。可以通过直接为事件处理程序属性赋值为null删除。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;button&#x27;</span>);</span><br><span class=\"line\">btn.<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">id</span>); <span class=\"comment\">// &quot;button&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//删除</span></span><br><span class=\"line\">btn.<span class=\"property\">onclick</span> = <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure>\n\n<p>所有浏览器都支持DOM0级事件处理程序。这么做的好处是可以保证浏览器兼容性，缺点是使得HTML和JavaScript紧密耦合，不利用后期维护。</p>\n<h4 id=\"DOM2级事件处理程序\"><a href=\"#DOM2级事件处理程序\" class=\"headerlink\" title=\"DOM2级事件处理程序\"></a>DOM2级事件处理程序</h4><p>伴随DOM2级标准提出，“DOM2级事件”提出了两种方法，用于绑定和解除事件处理程序：<code>addEventListener()</code>和<code>removeEventListener()</code>。它接受3个参数：<strong>事件名</strong>、<strong>事件处理程序对应的函数</strong>、<strong>表示捕获阶段的布尔值</strong>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;button&#x27;</span>);</span><br><span class=\"line\">btn.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;click&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">id</span>);</span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br><span class=\"line\">btn.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;click&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">id</span> + <span class=\"string\">&quot; again.&quot;</span>);</span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n\n<p>使用DOM2级方法绑定事件处理程序的一个优点是，<strong>可以添加多个程序到同一个标签上</strong>。使用DOM0级方法时则会覆盖上一次的事件处理程序。IE9及以上版本都支持DOM2级事件处理程序。</p>\n<p>由于IE事件处理程序在IE8之前，是通过类似的<code>attachEvent()</code>和<code>detachEvent()</code>方法。它的第一个参数是事件名（<strong>需要带上on</strong>），第二个参数是事件处理程序。通过这种方法绑定的处理程序都添加在冒泡阶段，且需要注意的是其中的<code>this</code>等于<code>window</code>对象。支持这种方式有IE和Opera。</p>\n<p>因此，一个跨浏览器兼容的事件绑定和解绑应该是下面这样的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">EventUtil</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">addHandler</span>: <span class=\"keyword\">function</span>(<span class=\"params\">element, type, handler</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (element.<span class=\"property\">addEventListener</span>) &#123;</span><br><span class=\"line\">            element.<span class=\"title function_\">addEventListener</span>(type, handler, <span class=\"literal\">false</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (element.<span class=\"property\">attachEvent</span>) &#123;</span><br><span class=\"line\">            element.<span class=\"title function_\">attachEvent</span>(<span class=\"string\">&quot;on&quot;</span> + type, handler);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            element[<span class=\"string\">&quot;on&quot;</span> + type] = handler;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">removeHandler</span>: <span class=\"keyword\">function</span>(<span class=\"params\">element, type, handler</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (element.<span class=\"property\">removeEventListener</span>) &#123;</span><br><span class=\"line\">            element.<span class=\"title function_\">removeEventListener</span>(type, handler, <span class=\"literal\">false</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (element.<span class=\"property\">detachEvent</span>) &#123;</span><br><span class=\"line\">            element.<span class=\"title function_\">detachEvent</span>(<span class=\"string\">&quot;on&quot;</span> + type, handler);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            element[<span class=\"string\">&quot;on&quot;</span> + type] = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>&#x3D;&#x3D;&#x3D;</p>\n<h2 id=\"元素大小与位置\"><a href=\"#元素大小与位置\" class=\"headerlink\" title=\"元素大小与位置\"></a>元素大小与位置</h2><p>这些属性方法并不属于“DOM2级样式”，但是却经常得到使用。目前所有主流浏览器都支持这些属性。它们大多都是只读的。</p>\n<h3 id=\"偏移量\"><a href=\"#偏移量\" class=\"headerlink\" title=\"偏移量\"></a>偏移量</h3><p><strong>偏移量</strong>描述元素在屏幕中占用的可用空间，由其宽高决定，包括内边距、滚动条和边框（不包括外边距）。有下面4个属性：</p>\n<ul>\n<li><code>offsetHeight</code> 元素垂直方向上的占用空间</li>\n<li><code>offsetWidth</code> 元素水平方向上的占用空间</li>\n<li><code>offsetLeft</code> 元素左边框距<code>offsetParent</code>元素左内边框的像素距离</li>\n<li><code>offsetTop</code> 元素上边框距<code>offsetParent</code>元素上内边框的像素距离</li>\n</ul>\n<p>可以利用元素的<code>offsetLeft</code>或<code>offsetLeft</code>与其<code>offsetParent</code>对应属性相加直到根元素，获取到元素相对于页面的左偏移值或上偏移值。</p>\n<h3 id=\"客户区大小\"><a href=\"#客户区大小\" class=\"headerlink\" title=\"客户区大小\"></a>客户区大小</h3><p><strong>客户区大小</strong>指元素内容和内边距占据的空间大小，不包括滚动条。<code>clientWidth</code>是元素内容宽度加左右内边距的宽度，<code>clientHeight</code>是元素内容高度加上下内边距的高度。</p>\n<p>可以通过对<code>body</code>元素取值来获取当前浏览器视口的大小。</p>\n<h3 id=\"滚动大小\"><a href=\"#滚动大小\" class=\"headerlink\" title=\"滚动大小\"></a>滚动大小</h3><p><strong>滚动大小</strong>包含滚动内容的元素大小。它有下面4个相关属性：</p>\n<ul>\n<li><code>scrollHeight</code> 没有滚动条时，元素内容的高度</li>\n<li><code>scrollWidth</code> 没有滚动条时，元素内容的宽度</li>\n<li><code>scrollLeft</code> 被隐藏在内容区域左侧的像素数，可以设置从而改变元素滚动位置</li>\n<li><code>scrollTop</code> 被隐藏在内容区域上侧的像素数，可以设置从而改变元素滚动位置</li>\n</ul>\n<p><code>scrollHeight/scrollWidth</code>和<code>clientHeight/clientWidth</code>在不同浏览器下的表现行为并不相同，有的表示视口大小，有的表示元素内容区域大小。使用时可以<strong>取较大值</strong>。而另外两个属性<code>scrollLeft</code>和<code>scrollTop</code>则通常用在<code>document</code>中，获取和滚动相关的属性。</p>\n<h3 id=\"确定元素大小\"><a href=\"#确定元素大小\" class=\"headerlink\" title=\"确定元素大小\"></a>确定元素大小</h3><p>大多数主流浏览器为元素提供了<code>getBoundingClientRect()</code>方法，返回一个对象，包含<code>left</code>，<code>right</code>，<code>top</code>，<code>bottom</code>四个属性。给出了元素相对于视口的位置。</p>\n<p>对不支持这个方法的浏览器，可以通过偏移量的相关属性获取。</p>\n<p>&#x3D;&#x3D;&#x3D;</p>\n<h2 id=\"媒体元素\"><a href=\"#媒体元素\" class=\"headerlink\" title=\"媒体元素\"></a>媒体元素</h2><p>HTML5出现前，提供富媒体内容的网站多采用Flash的方式保证浏览器兼容性。HTML5新增了两个标签<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio\"><code>&lt;audio&gt;</code></a>和<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/video\"><code>&lt;video&gt;</code></a>。用于方便地嵌入音频和视频内容。同时，这两个标签也提供了实现常用功能的JavaScript API。允许为媒体创建自定义控件。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;demo.mpg&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;foo&quot;</span>&gt;</span>Video player is not available.<span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">audio</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;song.mp3&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;bar&quot;</span>&gt;</span>Audio player is not available.<span class=\"tag\">&lt;/<span class=\"name\">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>其中元素的<code>src</code>属性指定了加载的媒体文件，还可以通过<code>width</code>和<code>height</code>属性指定播放器大小。<code>controls</code>属性意味浏览器应该显示UI控件用于操作媒体。标签中的内容用于在不支持时显示后备内容。</p>\n<p>因为不同浏览器支持的媒体格式集并不完全相同，可以在标签下指定<strong>一或多个</strong><code>&lt;source&gt;</code>元素，通过<code>src</code>和<code>type</code>属性指定来源和格式，视频标签下<code>&lt;source&gt;</code>的<code>type</code>中甚至可以指定<code>codecs</code>表示解码器。目前现代浏览器（IE9+，对IE说的就是你）都支持这两个标签。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myVideo&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;foo.mpg&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;foo.webm&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;video/webm; codecs=vp8, vorbis&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">audio</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;song.ogg&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;audio/ogg&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;song.mp3&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;audio/mpeg&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><p><code>&lt;video&gt;</code>和<code>&lt;audio&gt;</code>提供了完善的JavaScript接口，下面是一些可能会用到的它们的属性。其中很多可以直接在标签元素上设置。</p>\n<ul>\n<li><code>autoplay</code> 取消或设置当前<code>autoplay</code>标识</li>\n<li><code>controls</code> 取消或设置当前<code>controls</code>标识，用于显示和隐藏浏览器内置控件</li>\n<li><code>currentTime</code> 获取已经播放的秒数</li>\n<li><code>duration</code> 获取媒体的总长度（秒数）</li>\n<li><code>ended</code> 获取媒体是否播放完成</li>\n<li><code>loop</code>  取消或设置媒体文件是否循环播放</li>\n<li><code>muted</code> 取消或设置媒体文件是否静音</li>\n<li><code>paused</code> 标识播放器是否暂停</li>\n<li><code>playbackRate</code> 取消或设置当前播放速度</li>\n<li><code>readyState</code> 标识媒体是否就绪，有0，1，2，3四种情况，表示不可用、可以播放当前帧、可以播放、加载完毕</li>\n<li><code>src</code> 媒体文件来源，可重写</li>\n<li><code>volume</code> 取消或设置当前音量，值为0.0到1.0</li>\n</ul>\n<h3 id=\"事件-1\"><a href=\"#事件-1\" class=\"headerlink\" title=\"事件\"></a>事件</h3><p>这两个媒体元素还有许多事件，有的是媒体播放的结果，有的是用户操作的结果。</p>\n<ul>\n<li><code>abort</code> 下载中断</li>\n<li><code>canplay</code> 对应着<code>readyState</code>为2</li>\n<li><code>canplaythrough</code> 对应着<code>readyState</code>为3</li>\n<li><code>ended</code> 媒体播放完毕</li>\n<li><code>error</code> 下载过程网络错误</li>\n<li><code>pause</code> 播放暂停</li>\n<li><code>play</code>  媒体收到播放指令</li>\n<li><code>playing</code> 媒体开始播放</li>\n<li><code>ratechange</code> 播放速度改变</li>\n<li><code>seeked</code> 移动到新位置</li>\n<li><code>seeking</code> 正在移动进度条</li>\n<li><code>volumnchange</code> <code>volumn</code>和<code>muted</code>属性值改变</li>\n<li><code>waiting</code> 播放因下载未完成暂停</li>\n</ul>\n<p>在如此丰富的属性和事件的帮助下，结合<code>play()</code>和<code>pause()</code>方法，我们可以很容易构建一个自定义的媒体播放器。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;player&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;player__content&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;video&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;movie.mov&quot;</span> <span class=\"attr\">poster</span>=<span class=\"string\">&quot;movie.jpg&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;400&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;200&quot;</span>&gt;</span></span><br><span class=\"line\">      Video is not supported.</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;player__control&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Play!&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;video-play&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;curtime&quot;</span>&gt;</span>0<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>/<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;duration&quot;</span>&gt;</span>0<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> player = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;video&quot;</span>),</span><br><span class=\"line\">    btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;video-play&quot;</span>),</span><br><span class=\"line\">    curtime = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;curtime&quot;</span>),</span><br><span class=\"line\">    duration = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;duration&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//更新播放时间</span></span><br><span class=\"line\">duration.<span class=\"property\">innerHTML</span> = player.<span class=\"property\">duration</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//为按钮添加处理事件</span></span><br><span class=\"line\"><span class=\"title class_\">EventUtil</span>.<span class=\"title function_\">addHandler</span>(btn, <span class=\"string\">&quot;click&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (player.<span class=\"property\">paused</span>) &#123;</span><br><span class=\"line\">        player.<span class=\"title function_\">play</span>();</span><br><span class=\"line\">        btn.<span class=\"property\">value</span> = <span class=\"string\">&quot;Pause!&quot;</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        player.<span class=\"title function_\">pause</span>();</span><br><span class=\"line\">        btn.<span class=\"property\">value</span> = <span class=\"string\">&quot;Play!&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定时更新时间</span></span><br><span class=\"line\"><span class=\"built_in\">setInterval</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    curtime.<span class=\"property\">innerHTML</span> = player.<span class=\"property\">currentTime</span>;</span><br><span class=\"line\">&#125;, <span class=\"number\">250</span>);</span><br></pre></td></tr></table></figure>\n\n<p>最后，不是所有浏览器都支持这两个标签的所有解码器，因此有一个API来检测浏览器是否支持某种解码器。通过<code>canPlayType()</code>方法，该方法接收格式&#x2F;编解码器（如”<code>audio/wav</code>“）字符串，返回”probably”, “maybe”或是空字符串””。像下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (audio.<span class=\"title function_\">canPlayType</span>(<span class=\"string\">&quot;audio/mpeg&quot;</span>))&#123;</span><br><span class=\"line\">    <span class=\"comment\">//进一步处理</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "HTML",
                "JavaScript",
                "DOM",
                "笔记"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2017/03/06/dom-1/",
            "url": "http://shenlvmeng.github.com/blog/2017/03/06/dom-1/",
            "title": "HTML中的DOM 1级模型",
            "date_published": "2017-03-06T03:26:29.000Z",
            "content_html": "<h2 id=\"DOM\"><a href=\"#DOM\" class=\"headerlink\" title=\"DOM\"></a>DOM</h2><p><strong>DOM（文档对象模型）</strong>是针对HTML和XML文档的一个API，描绘了层次化的节点树。开发者可以借助DOM对页面的某一部分进行添加、移除、修改。DOM来源于网景和微软提出的<a href=\"https://en.wikipedia.org/wiki/Dynamic_HTML\">DHTML</a>。1998年10月，DOM 1级规范称为W3C的标准，为文档查询和改动提供了接口。各大主流浏览器都完善地实现了DOM。</p>\n<hr>\n<p>DOM把HTML和XML文档描述成一个多层节点构成的结构。每个节点有都有自己的特点、数据和方法。</p>\n<p><strong>文档节点</strong>是每个文档的根节点。HTML中<code>&lt;html&gt;</code>元素是文档节点<em>唯一</em>的子节点，又称为<strong>文档元素</strong>。每一个标签都通过树中的一个节点表示，HTML元素表示为元素节点，特性通过特性节点表示，文档表示为文档节点，如此这样，总共有12中节点类型。</p>\n<h3 id=\"Node\"><a href=\"#Node\" class=\"headerlink\" title=\"Node\"></a>Node</h3><p>DOM 1级中定义了Node类型。JavaScript中的所有节点类型都继承于Node类型。每个节点都有一个<strong>nodeType</strong>属性。常用的取值如下：</p>\n<ul>\n<li>Node.ELEMENT_NODE(1)</li>\n<li>Node.ATTRIBUTE_NODE(2)</li>\n<li>Node.TEXT_NODE(3)</li>\n<li>Node.COMMENT_NODE(8)</li>\n<li>Node.DOCUMENT_NODE(9)</li>\n<li>Node.DOCUMENT_TYPE_NODE(10)</li>\n<li>Node.DOCUMENT_FRAGMENT_NODE(11)</li>\n</ul>\n<p>为了确保浏览器兼容性，建议还是将nodeType属性和数字值进行比较，减少使用常量。因为IE没有公开Node类型的构造函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (someNode.<span class=\"property\">nodeType</span> == <span class=\"number\">1</span>) &#123; <span class=\"comment\">// 元素节点</span></span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;This is an element node.&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>除了nodeType，节点类型还有<strong>nodeName</strong>和<strong>nodeValue</strong>两个属性。它们的取值取决于节点的类型。后面的介绍中也会提到。</p>\n<h4 id=\"节点关系\"><a href=\"#节点关系\" class=\"headerlink\" title=\"节点关系\"></a>节点关系</h4><p>在父子关系上，每个节点有一个<code>childNodes</code>属性，保存着<code>NodeList</code>对象。这个对象有<code>length</code>属性，也可以通过方括号访问其中的值，也可以通过<code>item()</code>方法访问，但它并不是Array的实例。且DOM结构的变化会实时地反映到这个<code>NodeList</code>对象中。<em>减少使用NodeList可以避免它带来的时延</em>。</p>\n<p>使用<code>firstChild</code>和<code>lastChild</code>属性可以分别访问到列表中第一个和最后一个节点。同时，每个节点都有一个parentNode属性，指向文档树的父节点。</p>\n<p>在兄弟关系上，使用<code>nextSibling</code>和<code>previousSibling</code>分别可以访问到下一个和上一个兄弟节点。<code>hasChildNodes()</code>在节点包含多个子节点时返回true。</p>\n<p>最后，所有节点都有<code>ownerDocument</code>属性，指向整个文档的文档节点。</p>\n<h4 id=\"节点操作\"><a href=\"#节点操作\" class=\"headerlink\" title=\"节点操作\"></a>节点操作</h4><p><code>appendChild</code>和<code>insertBefore</code>分别用于在childNodes末尾和某位前插入节点。并返回插入的DOM节点。需要注意的是，<em>如果插入的节点来自于DOM中，则节点会从原来的位置删除</em>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> returnedNode = someNode.<span class=\"title function_\">appendChild</span>(newNode);</span><br><span class=\"line\"><span class=\"keyword\">var</span> anotherNode  = someNode.<span class=\"title function_\">insertBefore</span>(newNode, <span class=\"literal\">null</span>); <span class=\"comment\">// 插入到最后一位</span></span><br><span class=\"line\">anotherNode = someNode.<span class=\"title function_\">insertBefore</span>(newNode, someNode.<span class=\"property\">firstChild</span>); <span class=\"comment\">// 插入到第二位</span></span><br></pre></td></tr></table></figure>\n<p><code>replaceChild</code>用于替换节点，<code>cloneChild</code>用于复制节点，cloneChild方法接受一个布尔值参数，表示是否执行深复制。在参数为true时执行深复制，否则执行浅复制。</p>\n<div class=\"tip\">需要留意的是，`cloneChild`不会复制DOM节点中的JavaScript属性，如事件处理程序。IE则会复制事件处理程序。为了保证一致性，建议在复制前移除事件处理程序。\n</div>\n\n<p>最后，节点的<code>normalize</code>方法可以删除节点后代中的空文本节点，合并相邻的文本节点。</p>\n<h3 id=\"Document\"><a href=\"#Document\" class=\"headerlink\" title=\"Document\"></a>Document</h3><p>JavaScript中用<code>Document</code>类型表示文档，浏览器中的<code>document</code>表示整个页面。它是<code>window</code>对象的一个属性。因此可以作为全局对象来访问。</p>\n<p>它的nodeType为9，nodeName为<code>&quot;#document&quot;</code>，子节点可以是一个DocumentType或Element类型的节点。在HTML中可以通过<code>documentElement</code>属性便捷地得到子节点<code>&lt;html&gt;</code>。所有浏览器都支持这个属性。<code>document.body</code>属性也都被支持。</p>\n<p>除了<code>&lt;html&gt;</code>，另一个可能的子节点是<code>DocumentType</code>，即<code>&lt;!DOCTYPE&gt;</code>标签。浏览器对它的支持差异很大。同样的还有<code>&lt;html&gt;</code>元素外的注释。</p>\n<p>document还有下面4个独特的HTML属性：</p>\n<ul>\n<li><code>title</code>包含网页的标题，属性的修改直接对应<code>&lt;title&gt;</code>元素</li>\n<li><code>URL</code>表示页面的URL，<strong>只读</strong></li>\n<li><code>domain</code>表示页面的域名，可修改</li>\n<li><code>referer</code>保存链接到当前页面的URL，<strong>只读</strong></li>\n</ul>\n<p>其中修改domain可以用来访问同一父级域名下的iframe中的资源。</p>\n<div class=\"tip\">为了保证安全，域名修改只能由“紧绷”变“松散”，而不能反过来。\n</div>\n\n<h4 id=\"查找元素\"><a href=\"#查找元素\" class=\"headerlink\" title=\"查找元素\"></a>查找元素</h4><p>DOM 1级标准只有<code>getElementById()</code>，<code>getElementsByTagName()</code>和<code>getElementsByName()</code>三种方法。具体功能不必再提。它们返回的是一个<code>HTMLCollection</code>对象。这个对象和<code>NodeList</code>很类似。同样可以通过方括号访问其中的子元素。不过<code>HTMLCollection</code>额外提供<code>namedItem()</code>方法，通过<code>name</code>属性值访问其中的子元素。</p>\n<p>除此以外，<code>document</code>对象还有一个特殊的集合，它们也都是<code>HTMLCollection</code>对象。如<code>document.anchors</code>，<code>document.forms</code>，<code>document.imgs</code>，<code>document.links</code>。</p>\n<h4 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h4><p><code>document.implementation</code>属性用来检测浏览器对DOM实现的程度，它有一个<code>hasFeature()</code>。</p>\n<p><code>write()</code>、<code>writeln()</code>、<code>open()</code>、<code>close()</code>方法可以将输出流写入到网页中。</p>\n<h3 id=\"Element\"><a href=\"#Element\" class=\"headerlink\" title=\"Element\"></a>Element</h3><p>除了<code>document</code>外，Element类型应该是HTML中最常用的类型了。它的nodeType为1，nodeName为元素的标签名，<code>tagName</code>属性也可以用来访问元素标签名。</p>\n<p>所有HTML元素都由HTMLElement的子类型表示。所有的HTML元素都具有下面的一些标准特性：</p>\n<ul>\n<li><code>id</code>：元素的唯一标识符</li>\n<li><code>title</code>：有关元素的附加说明信息</li>\n<li><code>lang</code>：元素的语言代码</li>\n<li><code>dir</code>：语言的方向</li>\n<li><code>className</code>：与元素的class对应</li>\n</ul>\n<p>这些都可以通过访问元素的属性得到。如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myDiv&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;foo&quot;</span> <span class=\"attr\">title</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span> <span class=\"attr\">dir</span>=<span class=\"string\">&quot;ltr&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>元素的信息可以通过下面的方式得到，同样，这些属性可以直接赋予新值来修改。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;myDiv&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(div.<span class=\"property\">id</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(div.<span class=\"property\">class</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(div.<span class=\"property\">title</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(div.<span class=\"property\">lang</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(div.<span class=\"property\">dir</span>);</span><br></pre></td></tr></table></figure>\n\n<p><em>未完待续</em></p>\n",
            "tags": [
                "HTML",
                "JavaScript",
                "DOM"
            ]
        }
    ]
}