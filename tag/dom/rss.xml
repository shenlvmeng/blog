<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Shenlvmeng&#39;s Blog • Posts by &#34;dom&#34; tag</title>
        <link>http://shenlvmeng.github.com/blog</link>
        <description>Be sharp, my friend.</description>
        <language>zh-CN</language>
        <pubDate>Mon, 10 Apr 2017 20:27:40 +0800</pubDate>
        <lastBuildDate>Mon, 10 Apr 2017 20:27:40 +0800</lastBuildDate>
        <category>总结</category>
        <category>制度</category>
        <category>道德</category>
        <category>文官</category>
        <category>万历</category>
        <category>明朝</category>
        <category>读书笔记</category>
        <category>展望</category>
        <category>2018</category>
        <category>2019</category>
        <category>flag</category>
        <category>2020</category>
        <category>2021</category>
        <category>2022</category>
        <category>2023</category>
        <category>面试</category>
        <category>前端</category>
        <category>FAQ</category>
        <category>HTML</category>
        <category>CSS</category>
        <category>style guide</category>
        <category>编程</category>
        <category>范式</category>
        <category>设计</category>
        <category>艺术</category>
        <category>质量</category>
        <category>async_hooks</category>
        <category>cls-hooked</category>
        <category>logId</category>
        <category>录音</category>
        <category>getUserMedia</category>
        <category>AudioContext</category>
        <category>PCM</category>
        <category>WAVE</category>
        <category>二叉搜索树</category>
        <category>算法</category>
        <category>回忆</category>
        <category>老朋友</category>
        <category>C</category>
        <category>Hash</category>
        <category>布隆过滤器</category>
        <category>字符串检索</category>
        <category>canvas</category>
        <category>流程图</category>
        <category>d3</category>
        <category>g6</category>
        <category>zrender</category>
        <category>processOn</category>
        <category>SDN</category>
        <category>cbench</category>
        <category>安装说明</category>
        <category>绘图</category>
        <category>动画</category>
        <category>攻略</category>
        <category>流水账</category>
        <category>成都</category>
        <category>重庆</category>
        <category>武汉</category>
        <category>重构</category>
        <category>代码</category>
        <category>代码风格</category>
        <category>数据可视化</category>
        <category>爬虫</category>
        <category>chrome</category>
        <category>crx</category>
        <category>扩展</category>
        <category>CORS</category>
        <category>跨域</category>
        <category>盒模型</category>
        <category>浮动</category>
        <category>Reactive Programming</category>
        <category>JavaScript</category>
        <category>Cycle.js</category>
        <category>Dart</category>
        <category>最佳实践</category>
        <category>引流</category>
        <category>universal-link</category>
        <category>app-link</category>
        <category>脚手架</category>
        <category>degit</category>
        <category>git</category>
        <category>设计模式</category>
        <category>类</category>
        <category>接口</category>
        <category>抽象类</category>
        <category>DOM</category>
        <category>Docker</category>
        <category>ONOS</category>
        <category>控制器</category>
        <category>虚拟化</category>
        <category>笔记</category>
        <category>UX</category>
        <category>UED</category>
        <category>准则</category>
        <category>Java</category>
        <category>Ruby</category>
        <category>反射</category>
        <category>编程范式</category>
        <category>鸭子类型</category>
        <category>管理</category>
        <category>效率</category>
        <category>知识工作者</category>
        <category>卓有成效</category>
        <category>Elm</category>
        <category>框架</category>
        <category>函数式编程</category>
        <category>虚网映射</category>
        <category>Javascript</category>
        <category>并发</category>
        <category>event loop</category>
        <category>覆盖率</category>
        <category>端到端测试</category>
        <category>istanbul</category>
        <category>istanbuljs</category>
        <category>JavaSript</category>
        <category>Express</category>
        <category>源码</category>
        <category>代码覆盖率</category>
        <category>istanbul-middleware</category>
        <category>代码插桩</category>
        <category>require钩子</category>
        <category>babel-plugin-istanbul</category>
        <category>css</category>
        <category>html5</category>
        <category>flex</category>
        <category>javascript</category>
        <category>roadmap</category>
        <category>闭包</category>
        <category>Haskell</category>
        <category>monad</category>
        <category>后端</category>
        <category>管理后台</category>
        <category>egg.js</category>
        <category>工作流</category>
        <category>pull request</category>
        <category>golang</category>
        <category>语言学习</category>
        <category>黑客与画家</category>
        <category>创业</category>
        <category>骑行</category>
        <category>海南</category>
        <category>图文</category>
        <category>reflow</category>
        <category>repaint</category>
        <category>命名法</category>
        <category>成功学</category>
        <category>自我建设</category>
        <category>HTTP</category>
        <category>HTTP/2</category>
        <category>SPDY</category>
        <category>QUIC</category>
        <category>HTTPS</category>
        <category>状态码</category>
        <category>网络攻击</category>
        <category>介绍</category>
        <category>图片渲染</category>
        <category>html2canvas</category>
        <category>dom-to-image</category>
        <category>electron</category>
        <category>indexedDB</category>
        <category>异步</category>
        <category>Generator</category>
        <category>thunk</category>
        <category>async</category>
        <category>函数表达式</category>
        <category>对象</category>
        <category>继承</category>
        <category>类型转换</category>
        <category>==</category>
        <category>类型判断</category>
        <category>猫</category>
        <category>杀手</category>
        <category>管理学</category>
        <category>领导力</category>
        <category>梯队</category>
        <category>移动端</category>
        <category>UI</category>
        <category>自适应</category>
        <category>rem</category>
        <category>Electron</category>
        <category>GUI</category>
        <category>gpx</category>
        <category>template</category>
        <category>Electron Builder</category>
        <category>PWA</category>
        <category>方法论</category>
        <category>夜话</category>
        <category>多线</category>
        <category>生活</category>
        <category>密码</category>
        <category>密钥</category>
        <category>技改</category>
        <category>Vue</category>
        <category>gulp</category>
        <category>瀑布流</category>
        <category>电影</category>
        <category>PHP</category>
        <category>参考</category>
        <category>思维</category>
        <category>学习能力</category>
        <category>右脑</category>
        <category>经济学</category>
        <category>宏观经济学</category>
        <category>术语</category>
        <category>GDP</category>
        <category>CPI</category>
        <category>储蓄</category>
        <category>投资</category>
        <category>金融市场</category>
        <category>股票</category>
        <category>债券</category>
        <category>美联储</category>
        <category>失业</category>
        <category>货币</category>
        <category>现值</category>
        <category>准备金</category>
        <category>货币中性</category>
        <category>通货膨胀</category>
        <category>汇率</category>
        <category>购买力</category>
        <category>净出口</category>
        <category>资产净流出</category>
        <category>总需求</category>
        <category>总供给</category>
        <category>流动性偏好</category>
        <category>乘数效应</category>
        <category>菲利普斯曲线</category>
        <category>微观经济学</category>
        <category>供求</category>
        <category>贸易</category>
        <category>市场</category>
        <category>税</category>
        <category>剩余</category>
        <category>外部性</category>
        <category>公共物品</category>
        <category>公共资源</category>
        <category>生产成本</category>
        <category>利润</category>
        <category>垄断</category>
        <category>价格歧视</category>
        <category>寡头</category>
        <category>垄断竞争</category>
        <category>生产要素市场</category>
        <category>贫困</category>
        <category>消费者选择理论</category>
        <category>不对称信息</category>
        <category>政治经济学</category>
        <category>行为经济学</category>
        <category>VSCode</category>
        <category>编辑器</category>
        <category>IDE</category>
        <category>hybrid</category>
        <category>JSBridge</category>
        <category>Web Worker</category>
        <category>Service Worker</category>
        <category>习惯</category>
        <category>lint</category>
        <category>editorconfig</category>
        <category>commit message</category>
        <category>量子物理</category>
        <category>史话</category>
        <category>埋点</category>
        <category>raven.js</category>
        <category>前端监控</category>
        <category>文本编辑器</category>
        <category>quill</category>
        <category>结构化数据</category>
        <category>React</category>
        <category>Hooks</category>
        <category>函数组件</category>
        <category>复用</category>
        <category>状态管理</category>
        <category>redux</category>
        <category>MobX</category>
        <category>代码质量</category>
        <category>重来</category>
        <category>requestAnimationFrame</category>
        <category>TypeScript</category>
        <category>路书</category>
        <category>gpx解析</category>
        <category>EXIF</category>
        <category>人类</category>
        <category>生存</category>
        <category>基因</category>
        <category>响应式编程</category>
        <category>RxJS</category>
        <category>成长</category>
        <category>业务</category>
        <category>思想</category>
        <category>程序设计</category>
        <category>心理学</category>
        <category>自我</category>
        <category>社会思维</category>
        <category>社会影响</category>
        <category>文化</category>
        <category>性别</category>
        <category>从众</category>
        <category>说服</category>
        <category>临床诊断</category>
        <category>陪审团</category>
        <category>司法</category>
        <category>物质主义</category>
        <category>健康</category>
        <category>社会关系</category>
        <category>偏见</category>
        <category>攻击行为</category>
        <category>亲密关系</category>
        <category>友谊</category>
        <category>爱情</category>
        <category>利他</category>
        <category>冲突</category>
        <category>和解</category>
        <category>软技能</category>
        <category>理财</category>
        <category>健身</category>
        <category>自我营销</category>
        <category>学习</category>
        <category>商业模式</category>
        <category>产品</category>
        <category>校园网</category>
        <category>互联网</category>
        <category>技术</category>
        <category>web开发</category>
        <category>哲思</category>
        <category>择偶观</category>
        <category>validator</category>
        <category>大文件</category>
        <category>visibilityChange</category>
        <category>IntersectionObserver</category>
        <category>图种</category>
        <category>draggable</category>
        <category>webpack</category>
        <category>z-index</category>
        <category>git submodule</category>
        <category>object-fit</category>
        <category>object-position</category>
        <category>BroadcastChannel</category>
        <category>extract-text-webpack-plugin</category>
        <category>lottie</category>
        <category>backface-visibility</category>
        <category>egret</category>
        <category>mock</category>
        <category>SSO</category>
        <category>autoprefixer</category>
        <category>polyfill</category>
        <category>Android</category>
        <category>ffmpeg</category>
        <category>React Hooks</category>
        <category>rollup</category>
        <category>CDN</category>
        <category>DNS</category>
        <category>CNAME</category>
        <category>架构</category>
        <category>组件</category>
        <category>ssh</category>
        <category>fis-receiver</category>
        <category>tmux</category>
        <category>origami</category>
        <category>promise</category>
        <category>encodeURI</category>
        <category>encodeURIComponent</category>
        <category>axios</category>
        <category>charles</category>
        <category>黑色幽默</category>
        <category>朋友</category>
        <category>梦</category>
        <category>濒死</category>
        <category>江南</category>
        <category>苏州</category>
        <category>无锡</category>
        <category>宜兴</category>
        <category>湖州</category>
        <category>南浔</category>
        <category>游记</category>
        <category>随笔</category>
        <category>群众</category>
        <category>理论</category>
        <category>实效</category>
        <category>测试</category>
        <category>长沙</category>
        <category>杭州</category>
        <category>湖南</category>
        <category>核酸</category>
        <category>美食</category>
        <category>云南</category>
        <category>丽江</category>
        <category>大理</category>
        <category>青岛</category>
        <category>济南</category>
        <category>山东</category>
        <category>西北</category>
        <category>银川</category>
        <category>西宁</category>
        <category>青海湖</category>
        <category>西海镇</category>
        <category>茶卡盐湖</category>
        <category>厦门</category>
        <category>感受</category>
        <category>C语言</category>
        <category>树</category>
        <category>主干开发</category>
        <category>GitFlow</category>
        <category>GithubFlow</category>
        <category>typescript</category>
        <category>类型系统</category>
        <category>webrtc</category>
        <category>RTMP</category>
        <category>首屏时间</category>
        <category>性能优化</category>
        <category>公司</category>
        <category>个人发展</category>
        <category>战略</category>
        <category>晋升</category>
        <category>哲学</category>
        <category>幸福</category>
        <category>人生</category>
        <category>叔本华</category>
        <category>Unix</category>
        <category>Rollup</category>
        <category>mouseout</category>
        <category>mouseleave</category>
        <category>lint-staged</category>
        <category>吸顶</category>
        <category>图片组件</category>
        <category>形式系统</category>
        <category>不完全性</category>
        <category>隐喻</category>
        <category>哥德尔</category>
        <category>巴赫</category>
        <category>埃舍尔</category>
        <category>济州</category>
        <category>西归浦</category>
        <category>城山</category>
        <category>咸德</category>
        <category>人工智能</category>
        <category>心智</category>
        <category>自指</category>
        <category>图灵</category>
        <category>马列主义</category>
        <category>恩格斯</category>
        <category>家庭</category>
        <category>国家</category>
        <category>阶级</category>
        <category>氏族</category>
        <category>哲学史</category>
        <category>孔子</category>
        <category>老子</category>
        <category>儒家</category>
        <category>道家</category>
        <category>佛教</category>
        <category>禅宗</category>
        <category>理学</category>
        <category>心学</category>
        <category>计算机</category>
        <category>微机原理</category>
        <category>门</category>
        <category>操作系统</category>
        <category>数字电路</category>
        <category>2024</category>
        <item>
            <guid isPermalink="true">http://shenlvmeng.github.com/blog/2017/04/10/how-browsers-work-1/</guid>
            <title>浏览器是如何工作的 上 解析与呈现</title>
            <link>http://shenlvmeng.github.com/blog/2017/04/10/how-browsers-work-1/</link>
            <category>HTML</category>
            <category>CSS</category>
            <category>DOM</category>
            <pubDate>Mon, 10 Apr 2017 20:27:40 +0800</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;下篇传送门： &lt;a href=&#34;https://shenlvmeng.github.io/blog/2017/04/11/how-browsers-work-2/&#34;&gt;浏览器是如何工作的 下 布局与绘制&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;前言&#34;&gt;&lt;a href=&#34;#前言&#34; class=&#34;headerlink&#34; title=&#34;前言&#34;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;本文主要翻译于Tali Garsiel在2009年10月的一篇介绍Webkit和Gecko内核的经典文章&lt;a href=&#34;http://taligarsiel.com/Projects/howbrowserswork1.htm&#34;&gt;How browsers work&lt;/a&gt;。尽管在面试和工作上用不到这么细节，但是学习浏览器的内部原理将让我们可以更好地理解一些最优开发实践的道理。&lt;/p&gt;
&lt;h3 id=&#34;浏览器&#34;&gt;&lt;a href=&#34;#浏览器&#34; class=&#34;headerlink&#34; title=&#34;浏览器&#34;&gt;&lt;/a&gt;浏览器&lt;/h3&gt;&lt;p&gt;浏览器可以说是PC和移动设备上最常用的软件应用了。目前的主流浏览器有5个：IE，Firefox，Safari，Chrome和Opera。浏览器的主要功能是协助用户向服务器发起请求，并在窗口中展示请求的网络资源（HTML文档，或图片，或pdf文档，或其他可以被URI指定位置的类型）。&lt;/p&gt;
&lt;p&gt;浏览器解释并展示HTML稳当的方式规定在HTML和CSS规范中。这些规范由&lt;a href=&#34;https://www.w3.org/&#34;&gt;W3C&lt;/a&gt;组织制订和维护。但是多年来，各浏览器并没有完全遵从这些规范（直到现在也是如此），从而带来兼容性的问题。&lt;/p&gt;
&lt;p&gt;从高层来看，浏览器的用户界面（并没有规范去规定它该如何设计）是类似的，有用来输入URI的地址栏，前进和后退按钮，书签管理选项，刷新和停止刷新按钮，主页按钮等。这些最佳实践是自然发展和相互模仿的结果。它的背后由下面的一些组件组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户界面和界面后端，即UI&lt;/li&gt;
&lt;li&gt;浏览器引擎，负责在UI和浏览器各组件间传递指令&lt;/li&gt;
&lt;li&gt;渲染引擎，负责渲染请求的内容&lt;/li&gt;
&lt;li&gt;网络，底层的网络调用&lt;/li&gt;
&lt;li&gt;JavaScript引擎&lt;/li&gt;
&lt;li&gt;数据存储，持久化存储浏览器的各种数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/blog/images/browser/layers.png&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;tip&#34;&gt;值得注意的是，Chrome的每个标签页分别对应一个渲染引擎实例，且都是一个独立的进程。（知道为什么Chrome那么吃内存了么😂）
&lt;/div&gt;

&lt;h3 id=&#34;渲染引擎&#34;&gt;&lt;a href=&#34;#渲染引擎&#34; class=&#34;headerlink&#34; title=&#34;渲染引擎&#34;&gt;&lt;/a&gt;渲染引擎&lt;/h3&gt;&lt;p&gt;渲染引擎的工作是渲染（文章原话），默认情况下，渲染引擎能呈现HTML、XML文档和图片。通过插件还可以展示其他类型内容（如PDF查看器插件显示PDF文档）。文章主要讨论了Firefox的Gecko引擎和Chrome的&lt;a href=&#34;http://webkit.org/&#34;&gt;Webkit&lt;/a&gt;引擎。&lt;/p&gt;
&lt;p&gt;渲染引擎的主要流程大致是获取并解析HTML文档构建DOM树，之后创建呈现树，呈现树包含有视觉属性（如颜色和尺寸），最后进入布局和绘制阶段。需要指出的是，这是个复杂和渐进的过程，为了更好地用户体验，渲染引擎通常会先将解析完成的部分HTML显示出来。下面是Webkit和Gecko的渲染引擎主流程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/blog/images/browser/geckoflow.jpg&#34; alt=&#34;Webkit&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/blog/images/browser/webkitflow.png&#34; alt=&#34;Gecko&#34;&gt;&lt;/p&gt;
&lt;p&gt;Gecko和Webkit的术语略有不同，整体流程却是相似的。Gecko将视觉格式化元素组成的树称为“框架树”。每个元素都是一个框架。WebKit使用的术语是“呈现树”，它由“呈现对象”组成。对于元素的放置，WebKit 使用的术语是“布局”，而Gecko称之为“重排”。另外，Gecko在HTML和DOM树间还有一个称为“内容槽”的层用于生成DOM元素。&lt;/p&gt;
&lt;h4 id=&#34;解析&#34;&gt;&lt;a href=&#34;#解析&#34; class=&#34;headerlink&#34; title=&#34;解析&#34;&gt;&lt;/a&gt;解析&lt;/h4&gt;&lt;p&gt;关于解析HTML文档，&lt;a href=&#34;http://taligarsiel.com/Projects/howbrowserswork1.htm#Parsing_general&#34;&gt;原文&lt;/a&gt;做了详尽深入的讲解。由于侧重点不同，这里做些精炼。&lt;/p&gt;
&lt;p&gt;解析文档是指将文档转化成为有意义的结构，也就是可让代码理解和使用的结构。解析得到的结果通常是代表了文档结构的节点树，它称作解析树或者语法树。&lt;/p&gt;
&lt;p&gt;解析的过程通常分为&lt;strong&gt;词法分析&lt;/strong&gt;和&lt;strong&gt;语法分析&lt;/strong&gt;。前者是指将内容拆解成合法标记的过程，由词法分析器完成；后者指应用语言的语法规则，由解析器完成。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/blog/images/browser/parse.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;词汇通常用正则表达式表示。例如，我们的示例语言可以定义如下：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;INTEGER :0|[1-9][0-9]*&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;PLUS : +&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;MINUS: - &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;正如您所看到的，这里用正则表达式给出了整数的定义。语法通常使用一种称为&lt;a href=&#34;https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_Form&#34;&gt;BNF&lt;/a&gt;的格式来定义。我们的示例语言可以定义如下：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;expression :=  term  operation  term&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;operation :=  PLUS | MINUS&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;term := INTEGER | expression&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;之前我们说过，如果语言的语法是与&lt;a href=&#34;https://en.wikipedia.org/wiki/Context-free_grammar&#34;&gt;上下文无关&lt;/a&gt;的语法，就可以由常规解析器进行解析。与上下文无关的语法的直观定义就是可以完全用BNF格式表达的语法。&lt;/p&gt;
&lt;h5 id=&#34;解析器&#34;&gt;&lt;a href=&#34;#解析器&#34; class=&#34;headerlink&#34; title=&#34;解析器&#34;&gt;&lt;/a&gt;解析器&lt;/h5&gt;&lt;p&gt;有两种基本类型的解析器：&lt;strong&gt;自上而下解析器&lt;/strong&gt;和&lt;strong&gt;自下而上解析器&lt;/strong&gt;。直观地来说，自上而下的解析器从语法的高层结构出发，尝试从中找到匹配的结构。而自下而上的解析器从低层规则出发，将输入内容逐步转化为语法规则，直至满足高层规则。&lt;/p&gt;
&lt;p&gt;例如，我们要解析一个&lt;code&gt;2 + 3 - 1&lt;/code&gt;的表达式，自上而下的解析器会从高层的规则开始：首先将&lt;code&gt;2 + 3&lt;/code&gt;标识为一个表达式，然后将&lt;code&gt;2 + 3 - 1&lt;/code&gt;标识为一个表达式。自下而上的解析器将扫描输入内容，找到匹配的规则后，将匹配的输入内容替换成规则。如此继续替换，直到输入内容的结尾。部分匹配的表达式保存在解析器的堆栈中。&lt;/p&gt;
&lt;p&gt;有一些工具可以帮助您生成解析器，它们称为解析器生成器。您只要向其提供您所用语言的语法（词汇和语法规则），它就会生成相应的解析器。WebKit使用了两种非常有名的解析器生成器：用于创建词法分析器的Flex以及用于创建解析器的Bison。Flex的输入是包含标记的正则表达式定义的文件。Bison的输入是采用BNF格式的语言语法规则。&lt;/p&gt;
&lt;p&gt;事情到了HTML这里变得麻烦了些。首先，HTML解析器的任务是将HTML标记解析成解析树。HTML词汇和语法在W3C的规范（目前版本是HTML5）中有着定义。但是HTML并不能很容易地用解析器所需的与上下文无关的语法来定义。HTML的正规格式DTD（Document Type Definition）并不是一种上下文无关的语法。&lt;/p&gt;
&lt;p&gt;原因就是HTML并不是XML。HTML最初野蛮生长的日子里，实现方式不一而足，HTML的严格版变体XHTML并没有得到广泛的支持。为了保证兼容性，饶了诸多浏览器一命，包容许多并不合适的使用方式，简化网络开发。DTD中的严格模式下是完全遵守HTML规范的。&lt;/p&gt;
&lt;h4 id=&#34;HTML解析&#34;&gt;&lt;a href=&#34;#HTML解析&#34; class=&#34;headerlink&#34; title=&#34;HTML解析&#34;&gt;&lt;/a&gt;HTML解析&lt;/h4&gt;&lt;p&gt;解析器的输出&lt;em&gt;解析树&lt;/em&gt;是由DOM元素和属性节点构成的树结构。DOM是文档对象模型 (Document Object Model) 的缩写。它是HTML文档的对象表示，同时也是JavaScript与HTML元素之间的接口。解析树的根节点是&lt;code&gt;Document&lt;/code&gt;对象。DOM与标记tag间几乎是一一对应的关系。&lt;/p&gt;
&lt;p&gt;如上文所说，由于语言的宽容性和原内容的可更改性，HTML无法用常规的自上而下或自下而上的解析器来解析。根据原文的说法，&lt;a href=&#34;https://www.w3.org/TR/html5/syntax.html#html-parser&#34;&gt;HTML的解析算法&lt;/a&gt;由&lt;strong&gt;标记化&lt;/strong&gt;和&lt;strong&gt;树构建&lt;/strong&gt;组成。&lt;/p&gt;
&lt;p&gt;标记化是词法分析过程，将输入内容解析成多个标记。HTML标记包括起始标记、结束标记、属性名称和属性值。标记生成器识别标记，传递给树构造器，然后接受下一个字符以识别下一个标记；如此反复直到输入的结束。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/blog/images/browser/parseflow.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;其中&lt;strong&gt;标记化算法&lt;/strong&gt;的输出结果是HTML标记。该算法使用状态机来表示。每一个状态接收来自输入信息流的一个或多个字符，并根据这些字符更新下一个状态。当前的标记化状态和树结构状态会影响进入下一状态的决定。算法相当复杂，无法在此详述，下面给出一个简要的示例（来自原文）&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Hello world&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;初始状态是数据状态。遇到字符&lt;code&gt;&amp;lt;&lt;/code&gt;时状态更改为“标记打开状态”。接收一个a-z字符会创建“起始标记”，状态更改为“标记名称状态”。这个状态会一直保持到接收&lt;code&gt;&amp;gt;&lt;/code&gt;字符。在此期间接收的每个字符都会附加到新的标记名称上。在本例中，我们创建的标记是&lt;code&gt;html&lt;/code&gt;标记。&lt;/p&gt;
&lt;p&gt;遇到&lt;code&gt;&amp;gt;&lt;/code&gt;标记时，会发送当前的标记，状态改回“数据状态”。&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;标记也会进行同样的处理。目前&lt;code&gt;html&lt;/code&gt;和&lt;code&gt;body&lt;/code&gt;标记均已发出。现在我们回到“数据状态”。接收到 &lt;code&gt;Hello world&lt;/code&gt;中的&lt;code&gt;H&lt;/code&gt;字符时，将创建并发送字符标记，直到接收&lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt;中的&lt;code&gt;&amp;lt;&lt;/code&gt;。我们将为&lt;code&gt;Hello world&lt;/code&gt;中的每个字符都发送一个字符标记。&lt;/p&gt;
&lt;p&gt;现在我们回到“标记打开状态”。接收下一个输入字符&lt;code&gt;/&lt;/code&gt;时，会创建&lt;code&gt;end tag token&lt;/code&gt;并改为“标记名称状态”。我们会再次保持这个状态，直到接收&lt;code&gt;&amp;gt;&lt;/code&gt;。然后将发送新的标记，并回到“数据状态”。&lt;code&gt;&amp;lt;/html&amp;gt;&lt;/code&gt;输入也会进行同样的处理。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/blog/images/browser/tokeniser.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;树构造器中运行着&lt;strong&gt;树构造算法&lt;/strong&gt;。在创建解析器的同时，也会创建&lt;code&gt;Document&lt;/code&gt;对象。在树构建阶段，以&lt;code&gt;Document&lt;/code&gt;为根节点的DOM树也会不断进行修改，向其中添加各种元素。标记生成器发送的每个节点都会由树构建器进行处理。规范中定义了每个标记所对应的DOM元素，这些元素会在接收到相应的标记时创建。这些元素不仅会添加到DOM树中，还会添加到开放元素的堆栈中。此堆栈用于纠正嵌套错误和处理未关闭的标记。其算法类似标记化算法，也可以用状态机来描述。&lt;/p&gt;
&lt;p&gt;我们同样以上面的代码为例，树构建阶段的输入是一个来自标记化阶段的标记序列。第一个模式是&lt;strong&gt;initial mode&lt;/strong&gt;。接收HTML标记后转为&lt;strong&gt;before html&lt;/strong&gt;模式，并在这个模式下重新处理此标记。这样会创建一个&lt;code&gt;HTMLHtmlElement&lt;/code&gt;元素，并将其附加到&lt;code&gt;Document&lt;/code&gt;根对象上。&lt;/p&gt;
&lt;p&gt;然后状态将改为&lt;strong&gt;before head&lt;/strong&gt;。此时我们接收&lt;code&gt;body&lt;/code&gt;标记。即使我们的示例中没有&lt;code&gt;head&lt;/code&gt;标记，系统也会隐式创建一个&lt;code&gt;HTMLHeadElement&lt;/code&gt;，并将其添加到树中。&lt;/p&gt;
&lt;p&gt;现在我们进入了&lt;strong&gt;in head&lt;/strong&gt;模式，然后转入&lt;strong&gt;after head&lt;/strong&gt;模式。系统对&lt;code&gt;body&lt;/code&gt;标记进行重新处理，创建并插入&lt;code&gt;HTMLBodyElement&lt;/code&gt;，同时模式转变为&lt;strong&gt;in body&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;现在，接收由“Hello world”字符串生成的一系列字符标记。接收第一个字符时会创建并插入&lt;code&gt;Text&lt;/code&gt;节点，而其他字符也将附加到该节点。&lt;/p&gt;
&lt;p&gt;接收&lt;code&gt;body&lt;/code&gt;结束标记会触发&lt;strong&gt;after body&lt;/strong&gt;模式。现在我们将接收HTML结束标记，然后进入&lt;code&gt;after after body&lt;/code&gt;模式。接收到文件结束标记后，解析过程就此结束。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/blog/images/browser/treebuilder.gif&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;解析后与容错机制&#34;&gt;&lt;a href=&#34;#解析后与容错机制&#34; class=&#34;headerlink&#34; title=&#34;解析后与容错机制&#34;&gt;&lt;/a&gt;解析后与容错机制&lt;/h4&gt;&lt;p&gt;在此阶段，浏览器会将文档标注为交互状态，并开始解析那些处于&lt;code&gt;deferred&lt;/code&gt;模式的脚本，也就是那些应在文档解析完成后才执行的脚本。然后，文档状态将设置为“完成”，一个&lt;code&gt;load&lt;/code&gt;事件随之触发。&lt;/p&gt;
&lt;p&gt;我们在浏览HTML网页时从来不会看到“语法无效”的错误。这是因为浏览器会纠正&lt;strong&gt;任何&lt;/strong&gt;无效内容，然后继续工作。不同浏览器的错误处理机制相当一致，但这种机制却并不是HTML当前规范的一部分。和书签管理以及前进&amp;#x2F;后退按钮一样，它也是浏览器在多年发展中的产物。很多网站都普遍存在着一些已知的无效HTML结构，每一种浏览器都会尝试通过和其他浏览器一样的方式来修复这些无效结构。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://whatwg-cn.github.io/html/&#34;&gt;HTML5规范&lt;/a&gt;定义了一部分这样的要求。WebKit在HTML解析器类的开头注释中对此做了很好的概括。&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;解析器对标记化输入内容进行解析，以构建文档树。如果文档的格式正确，就直接进行解析。&lt;/p&gt;
&lt;p&gt;遗憾的是，我们不得不处理很多格式错误的 HTML 文档，所以解析器必须具备一定的容错性。&lt;/p&gt;
&lt;p&gt;我们至少要能够处理以下错误情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;明显不能在某些外部标记中添加的元素。在此情况下，我们应该关闭所有标记，直到出现禁止添加的元素，然后再加入该元素。&lt;/li&gt;
&lt;li&gt;我们不能直接添加的元素。这很可能是网页作者忘记添加了其中的一些标记（或者其中的标记是可选的）。这些标签可能包括：HTML HEAD BODY TBODY TR TD LI（还有遗漏的吗？）。&lt;/li&gt;
&lt;li&gt;向inline元素内添加block元素。关闭所有inline元素，直到出现下一个较高级的block元素。&lt;/li&gt;
&lt;li&gt;如果这样仍然无效，可关闭所有元素，直到可以添加元素为止，或者忽略该标记。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://taligarsiel.com/Projects/howbrowserswork1.htm#Browsers_error_tolerance&#34;&gt;错误的情况&lt;/a&gt;包括错误使用&lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt;，离散表格，过于复杂的标记层级结构。错误的html或body结束标记等。Webkit的具体代码展示略。&lt;/p&gt;
&lt;h4 id=&#34;CSS解析&#34;&gt;&lt;a href=&#34;#CSS解析&#34; class=&#34;headerlink&#34; title=&#34;CSS解析&#34;&gt;&lt;/a&gt;CSS解析&lt;/h4&gt;&lt;p&gt;和HTML不同，CSS是上下文无关的语法，可以使用简介中描述的各种解析器进行解析。词法语法（词汇）是针对各个标记用正则表达式定义的：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;comment   \/\*[^*]*\*+([^/*][^*]*\*+)*\/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;num   [0-9]+|[0-9]*&amp;quot;.&amp;quot;[0-9]+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;nonascii  [\200-\377]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;nmstart   [_a-z]|&amp;#123;nonascii&amp;#125;|&amp;#123;escape&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;nmchar    [_a-z0-9-]|&amp;#123;nonascii&amp;#125;|&amp;#123;escape&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;name    &amp;#123;nmchar&amp;#125;+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ident   &amp;#123;nmstart&amp;#125;&amp;#123;nmchar&amp;#125;*&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;其中&lt;code&gt;ident&lt;/code&gt;表示标识符，如类名。&lt;code&gt;name&lt;/code&gt;是元素ID。&lt;/p&gt;
&lt;p&gt;语法则是采用 BNF 格式描述的：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ruleset&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  : selector [ &amp;#x27;,&amp;#x27; S* selector ]*&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#x27;&amp;#123;&amp;#x27; S* declaration [ &amp;#x27;;&amp;#x27; S* declaration ]* &amp;#x27;&amp;#125;&amp;#x27; S*&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;selector&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  : simple_selector [ combinator selector | S+ [ combinator? selector ]? ]?&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;simple_selector&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  : element_name [ HASH | class | attrib | pseudo ]*&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  | [ HASH | class | attrib | pseudo ]+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  : &amp;#x27;.&amp;#x27; IDENT&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;element_name&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  : IDENT | &amp;#x27;*&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;attrib&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  : &amp;#x27;[&amp;#x27; S* IDENT S* [ [ &amp;#x27;=&amp;#x27; | INCLUDES | DASHMATCH ] S*&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [ IDENT | STRING ] S* ] &amp;#x27;]&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;pseudo&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  : &amp;#x27;:&amp;#x27; [ IDENT | FUNCTION S* [IDENT S*] &amp;#x27;)&amp;#x27; ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;如其中的&lt;code&gt;ruleset&lt;/code&gt;表示，这个规则集是一个选择器，或者由逗号和空格（S表示空格）分隔的多个（数量可选）选择器。规则集包含了大括号，以及其中的一个或多个（数量可选）由分号分隔的声明。&lt;/p&gt;
&lt;p&gt;Webkit使用Flex和Bison解析器生成器，通过 CSS 语法文件自动创建解析器。Firefox 使用的是人工编写的自上而下的解析器。这两种解析器都会将CSS文件解析成&lt;code&gt;StyleSheet&lt;/code&gt;对象，且每个对象都包含CSS规则。&lt;/p&gt;
&lt;h4 id=&#34;JS和CSS的处理&#34;&gt;&lt;a href=&#34;#JS和CSS的处理&#34; class=&#34;headerlink&#34; title=&#34;JS和CSS的处理&#34;&gt;&lt;/a&gt;JS和CSS的处理&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;这也是经常的考点&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;脚本&#34;&gt;&lt;a href=&#34;#脚本&#34; class=&#34;headerlink&#34; title=&#34;脚本&#34;&gt;&lt;/a&gt;脚本&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;解析器遇到&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标记时会立即解析并执行脚本。文档的解析将停止，直到脚本执行完毕&lt;/strong&gt;。如果脚本是外部的，那么解析过程会停止，直到从网络同步抓取资源完成后再继续。此模型已经使用了多年，也在HTML4和HTML5规范中进行了指定。&lt;/p&gt;
&lt;p&gt;脚本标注为&lt;strong&gt;defer&lt;/strong&gt;时，它不会停止文档解析，而是等到解析结束才执行。HTML5中还增加了一个选项&lt;code&gt;async&lt;/code&gt;，可将脚本标记为异步，在资源下载完毕后立即执行。&lt;/p&gt;
&lt;h5 id=&#34;预解析&#34;&gt;&lt;a href=&#34;#预解析&#34; class=&#34;headerlink&#34; title=&#34;预解析&#34;&gt;&lt;/a&gt;预解析&lt;/h5&gt;&lt;p&gt;WebKit和Firefox都进行了这项优化。在执行脚本时，其他线程会解析文档的其余部分，找出并加载需要通过网络加载的其他资源。通过这种方式，资源可以在并行连接上加载，从而提高总体速度。但是，&lt;strong&gt;预解析器不会修改DOM树&lt;/strong&gt;，而是将这项工作交由主解析器处理；预解析器只会解析外部资源（例如外部脚本、样式表和图片）的引用。&lt;/p&gt;
&lt;h5 id=&#34;样式表&#34;&gt;&lt;a href=&#34;#样式表&#34; class=&#34;headerlink&#34; title=&#34;样式表&#34;&gt;&lt;/a&gt;样式表&lt;/h5&gt;&lt;p&gt;理论上来说，应用样式表不会更改DOM树，因此似乎没有必要等待样式表并停止文档解析。但这涉及到一个问题，就是脚本在文档解析阶段会请求样式信息。如果当时还没有加载和解析样式，脚本就会获得错误的回复。&lt;/p&gt;
&lt;p&gt;从而，Firefox在样式表加载和解析的过程中，会禁止所有脚本。而对于WebKit而言，仅当脚本尝试访问的样式属性可能受尚未加载的样式表影响时，它才会禁止该脚本。&lt;/p&gt;
&lt;h4 id=&#34;呈现树&#34;&gt;&lt;a href=&#34;#呈现树&#34; class=&#34;headerlink&#34; title=&#34;呈现树&#34;&gt;&lt;/a&gt;呈现树&lt;/h4&gt;&lt;p&gt;在DOM树构建的同时，浏览器还会构建另一个树结构：呈现树（Render Tree）。这是由可视化元素按照其显示顺序而组成的树，也是文档的可视化表示。它的作用是让您按照正确的顺序绘制内容。&lt;/p&gt;
&lt;p&gt;Firefox将呈现树中的元素称为“框架”。WebKit使用的术语是呈现器或呈现对象。呈现器知道如何布局并将自身及其子元素绘制出来。&lt;/p&gt;
&lt;p&gt;每个呈现器都表示一个矩形区域，通常对应于相关节点的CSS框，这一点在CSS2规范中有所描述。它包含诸如宽度、高度和位置等几何信息。框的类型会受到与节点相关的&lt;code&gt;display&lt;/code&gt;样式属性的影响。下面是Webkit根据&lt;code&gt;display&lt;/code&gt;属性的不同，针对同一个DOM节点创建不同呈现器的例子：&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;RenderObject* &lt;span class=&#34;title&#34;&gt;RenderObject::createObject&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Node* node, RenderStyle* style)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Document* doc = node-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;document&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  RenderArena* arena = doc-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;renderArena&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  RenderObject* o = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt; (style-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;display&lt;/span&gt;()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; NONE:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; INLINE:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      o = &lt;span class=&#34;built_in&#34;&gt;new&lt;/span&gt; (arena) &lt;span class=&#34;built_in&#34;&gt;RenderInline&lt;/span&gt;(node);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; BLOCK:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      o = &lt;span class=&#34;built_in&#34;&gt;new&lt;/span&gt; (arena) &lt;span class=&#34;built_in&#34;&gt;RenderBlock&lt;/span&gt;(node);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; INLINE_BLOCK:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      o = &lt;span class=&#34;built_in&#34;&gt;new&lt;/span&gt; (arena) &lt;span class=&#34;built_in&#34;&gt;RenderBlock&lt;/span&gt;(node);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; LIST_ITEM:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      o = &lt;span class=&#34;built_in&#34;&gt;new&lt;/span&gt; (arena) &lt;span class=&#34;built_in&#34;&gt;RenderListItem&lt;/span&gt;(node);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; o;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h5 id=&#34;和DOM树关系&#34;&gt;&lt;a href=&#34;#和DOM树关系&#34; class=&#34;headerlink&#34; title=&#34;和DOM树关系&#34;&gt;&lt;/a&gt;和DOM树关系&lt;/h5&gt;&lt;p&gt;呈现器和DOM元素是一一对应的，但是呈现树则不是。&lt;strong&gt;非可视化的DOM元素不会插入在呈现树中&lt;/strong&gt;，例如&lt;code&gt;head&lt;/code&gt;元素，或是&lt;code&gt;display&lt;/code&gt;设为none的元素。同时，还有&lt;strong&gt;一些DOM元素对应着多个可视化对象&lt;/strong&gt;，例如&lt;code&gt;select&lt;/code&gt;元素。格式无效的HTML元素会根据CSS规范作出调整，如inline元素中同时包裹了block和inline元素（只能包含其中一种）。最后，&lt;strong&gt;有些呈现对象的位置和DOM节点位置不同&lt;/strong&gt;，如浮动定位和绝对定位这样脱离文档流的元素。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/blog/images/browser/rendertree.png&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;构建过程&#34;&gt;&lt;a href=&#34;#构建过程&#34; class=&#34;headerlink&#34; title=&#34;构建过程&#34;&gt;&lt;/a&gt;构建过程&lt;/h5&gt;&lt;p&gt;在Firefox中，&lt;strong&gt;展示层被注册为DOM更新的监听器&lt;/strong&gt;。在监听到DOM改动后，展示层会把将框架创建工作委派给&lt;code&gt;FrameConstructor&lt;/code&gt;，由其构造器解析样式并创建框架。&lt;/p&gt;
&lt;p&gt;在WebKit中，&lt;strong&gt;解析样式和创建呈现器的过程称为attachment&lt;/strong&gt;。每个DOM节点都有一个&lt;code&gt;attach&lt;/code&gt;方法用于完成此项工作。attach是&lt;strong&gt;同步&lt;/strong&gt;进行的，将节点插入DOM树需要调用新的节点&lt;code&gt;attach&lt;/code&gt;方法。&lt;/p&gt;
&lt;p&gt;处理&lt;code&gt;html&lt;/code&gt;和&lt;code&gt;body&lt;/code&gt;标记会构建呈现树根节点。这个根节点呈现对象对应于CSS规范中所说的&lt;em&gt;容器block&lt;/em&gt;，这是最上层的 block，包含了其他所有block。它的尺寸就是视口，即浏览器窗口显示区域的尺寸。Firefox称之为&lt;code&gt;ViewPortFrame&lt;/code&gt;，而WebKit称之为&lt;code&gt;RenderView&lt;/code&gt;。这就是文档所指向的呈现对象。呈现树的其余部分以DOM树节点插入的形式来构建。&lt;/p&gt;
&lt;p&gt;W3C的CSS2.1规范中有提到&lt;a href=&#34;https://www.w3.org/TR/CSS21/intro.html#processing-model&#34;&gt;解析模型&lt;/a&gt;的问题。&lt;/p&gt;
&lt;h5 id=&#34;样式计算&#34;&gt;&lt;a href=&#34;#样式计算&#34; class=&#34;headerlink&#34; title=&#34;样式计算&#34;&gt;&lt;/a&gt;样式计算&lt;/h5&gt;&lt;p&gt;构建呈现树时，需要计算每个呈现对象的可视化属性。这是通过每个元素的样式来完成的。样式包括来自各种来源的样式表、inline样式元素（即style属性）和HTML中的可视化属性（如&lt;code&gt;bgColor&lt;/code&gt;, &lt;code&gt;width&lt;/code&gt;）。样式表的来源包括浏览器的默认样式表、由网页作者提供的样式表以及由浏览器用户提供的用户样式表等。&lt;/p&gt;
&lt;p&gt;样式计算存在着许多困难：1）样式数据庞大，2）为元素查找匹配规则的过程复杂，3）CSS的层叠规则复杂。针对这些问题，firefox和Webkit有不同的处理方法。&lt;/p&gt;
&lt;p&gt;Webkit会引用样式对象（RenderStyle）。这些对象在某些情况下可被不同同级节点共享，这些节点还有下面的要求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;鼠标状态相同，如都是&lt;code&gt;:hover&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;没有元素ID&lt;/li&gt;
&lt;li&gt;tag名应匹配&lt;/li&gt;
&lt;li&gt;class属性应匹配&lt;/li&gt;
&lt;li&gt;链接状态（如&lt;code&gt;:active&lt;/code&gt;）和焦点状态（如&lt;code&gt;:focus&lt;/code&gt;）相同&lt;/li&gt;
&lt;li&gt;映射属性的集合完全相同&lt;/li&gt;
&lt;li&gt;不应被属性选择器匹配&lt;/li&gt;
&lt;li&gt;不能有任何inline样式属性&lt;/li&gt;
&lt;li&gt;不能使用同级选择器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Firefox为简化运算，使用了另外两种树，&lt;strong&gt;规则树&lt;/strong&gt;和&lt;strong&gt;样式上下文树&lt;/strong&gt;，如下图所示。Webkit则通过DOM节点指向样式对象来实现。样式上下文包含端值。要计算出这些值，应按照正确顺序应用所有的匹配规则，并将其从逻辑值转化为具体的值。例如，如果逻辑值是屏幕大小的百分比，则需要换算成绝对的单位。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/blog/images/browser/firefoxstyletree.png&#34;&gt;&lt;/p&gt;
&lt;h6 id=&#34;规则树&#34;&gt;&lt;a href=&#34;#规则树&#34; class=&#34;headerlink&#34; title=&#34;规则树&#34;&gt;&lt;/a&gt;规则树&lt;/h6&gt;&lt;p&gt;规则树的设计将所有匹配规则都存储在树中，它包含了所有匹配规则。路径的路径中的底层节点拥有较高的优先级。规则树包含了所有已知规则匹配的路径。规则的存储是延迟进行的。规则树不会在开始的时候就为所有的节点进行计算，而是只有当某个节点样式需要进行计算时，才会向规则树添加计算的路径。&lt;/p&gt;
&lt;p&gt;原文从两个角度分析了规则树如何减少工作量：&lt;strong&gt;结构划分&lt;/strong&gt;和&lt;strong&gt;通过规则树计算样式上下文&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;样式上下文可分割成多个结构。这些结构体包含了特定类别（如&lt;code&gt;border&lt;/code&gt;或&lt;code&gt;color&lt;/code&gt;）的样式信息。结构中的属性都是继承的或非继承的。继承属性如果未由元素定义，则继承自其父代。非继承属性（也称为“重置”属性）如果未进行定义，则使用默认值。&lt;/p&gt;
&lt;p&gt;规则树通过缓存整个结构（包含计算出的端值）为我们提供帮助。这一想法假定底层节点没有提供结构的定义，则可使用上层节点中的缓存结构。&lt;/p&gt;
&lt;p&gt;在计算某个特定元素的样式上下文时，我们首先计算规则树中的一条对应路径，或者使用一条现有的路径。然后我们沿此路径应用规则，在这个样式上下文中填充结构。我们从路径中拥有最高优先级的底层节点（通常也是最特殊的选择器）开始，并向上遍历规则树，直到结构填充完毕。&lt;/p&gt;
&lt;p&gt;如果该规则节点对于此结构没有任何规范，那么我们可以实现更好的优化：寻找路径更上层的节点，找到后指定完整的规范并指向相关节点即可。这是最好的优化方法，因为整个结构都能共享。这可以减少端值的计算量并节约内存。 &lt;/p&gt;
&lt;p&gt;如果我们找到了部分定义，就会向上遍历规则树，直到结构填充完毕。如果我们找不到结构的任何定义，那么假如该结构是&lt;strong&gt;继承&lt;/strong&gt;类型，我们会在上下文树中指向父代的结构，这样也可以共享结构。如果是&lt;code&gt;reset&lt;/code&gt;类型的结构，则会使用默认值。&lt;/p&gt;
&lt;p&gt;如果最特殊的节点确实添加了值，那么我们需要另外进行一些计算，以便将这些值转化成实际值。然后我们将结果缓存在树节点中，供子代使用。如果某个元素与其同级元素都指向同一个树节点，那么它们就可以&lt;strong&gt;共享整个样式上下文&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;下面用一个例子来讲解上面晦涩的说明：&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;err&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;div1&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        this is a &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;span&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;big&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; big error &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        this is also a&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;span&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;big&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; very  big  error&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt; error&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;err&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;div2&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;another error&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;selector-tag&#34;&gt;div&lt;/span&gt; &amp;#123;&lt;span class=&#34;attribute&#34;&gt;margin&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;5px&lt;/span&gt;;&lt;span class=&#34;attribute&#34;&gt;color&lt;/span&gt;:black&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;selector-class&#34;&gt;.err&lt;/span&gt; &amp;#123;&lt;span class=&#34;attribute&#34;&gt;color&lt;/span&gt;:red&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;selector-class&#34;&gt;.big&lt;/span&gt; &amp;#123;&lt;span class=&#34;attribute&#34;&gt;margin-top&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;3px&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;selector-tag&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;selector-tag&#34;&gt;span&lt;/span&gt; &amp;#123;&lt;span class=&#34;attribute&#34;&gt;margin-bottom&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;4px&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;selector-id&#34;&gt;#div1&lt;/span&gt; &amp;#123;&lt;span class=&#34;attribute&#34;&gt;color&lt;/span&gt;:blue&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;selector-id&#34;&gt;#div2&lt;/span&gt; &amp;#123;&lt;span class=&#34;attribute&#34;&gt;color&lt;/span&gt;:green&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;为了简便起见，我们只需要填充两个结构：color 结构和 margin 结构。color 结构只包含一个成员（即“color”），而 margin 结构包含四条边。 形成的规则树如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/blog/images/browser/styletree.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;假设我们解析 HTML 时遇到了第二个&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;标记，我们需要为此节点创建样式上下文，并填充其样式结构。经过规则匹配，我们发现该&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;的匹配规则是第1、2和6条。这意味着规则树中已有一条路径可供我们的元素使用，我们只需要再为其添加一个节点以匹配第6条规则（规则树中的F节点）。我们将创建样式上下文并将其放入上下文树中。新的样式上下文将指向规则树中的F节点。&lt;/p&gt;
&lt;p&gt;现在我们需要填充样式结构。首先要填充的是&lt;code&gt;margin&lt;/code&gt;结构。由于最后的规则节点(F)并没有添加到&lt;code&gt;margin&lt;/code&gt;结构，我们需要上溯规则树，直至找到在先前节点插入中计算过的缓存结构，然后使用该结构。我们会在指定&lt;code&gt;margin&lt;/code&gt;规则的最上层节点（即B节点）上找到该结构。&lt;/p&gt;
&lt;p&gt;我们已经有了&lt;code&gt;color&lt;/code&gt;结构的定义，因此不能使用缓存的结构。由于&lt;code&gt;color&lt;/code&gt;有一个属性，我们无需上溯规则树以填充其他属性。我们将计算端值（将字符串转化为RGB等）并在此节点上缓存经过计算的结构。&lt;/p&gt;
&lt;p&gt;第二个&lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;元素处理起来更加简单。我们将匹配规则，最终发现它和之前的&lt;code&gt;span&lt;/code&gt;一样指向规则G。由于我们找到了指向同一节点的同级，就可以共享整个样式上下文了，只需指向之&lt;code&gt;span&lt;/code&gt;的上下文即可。&lt;/p&gt;
&lt;h6 id=&#34;处理规则简化匹配&#34;&gt;&lt;a href=&#34;#处理规则简化匹配&#34; class=&#34;headerlink&#34; title=&#34;处理规则简化匹配&#34;&gt;&lt;/a&gt;处理规则简化匹配&lt;/h6&gt;&lt;p&gt;样式规则来源于外部样式表、inline样式属性、HTML可视化属性。后两者很容易匹配。CSS规则可能会棘手，可以对它进行一些处理，便于访问。&lt;/p&gt;
&lt;p&gt;样式表解析完毕后，系统会根据选择器将CSS规则添加到某个哈希表中。这些哈希表的选择器各不相同，包括ID、类名称、标记名称等，还有一种通用哈希表，适合不属于上述类别的规则。如果选择器是ID，规则就会添加到ID表中；如果选择器是类，规则就会添加到类表中，依此类推。这种处理可以大大简化规则匹配。我们无需查看每一条声明，只要从哈希表中提取元素的相关规则即可。以下面的CSS为例&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;selector-tag&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;selector-class&#34;&gt;.error&lt;/span&gt; &amp;#123;&lt;span class=&#34;attribute&#34;&gt;color&lt;/span&gt;:red&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;selector-id&#34;&gt;#messageDiv&lt;/span&gt; &amp;#123;&lt;span class=&#34;attribute&#34;&gt;height&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;50px&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;selector-tag&#34;&gt;div&lt;/span&gt; &amp;#123;&lt;span class=&#34;attribute&#34;&gt;margin&lt;/span&gt;:&lt;span class=&#34;number&#34;&gt;5px&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;第一条规则将插入类表，第二条将插入ID表，而第三条将插入标记表。对于下面的HTML代码段：&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;error&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;an error occurred &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;messageDiv&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;this is a message&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;我们首先会为p元素寻找匹配的规则。类表中有一个&lt;code&gt;error&lt;/code&gt;键，在下面可以找到&lt;code&gt;p.error&lt;/code&gt;的规则。div元素在ID表（键为 ID）和标记表中有相关的规则。剩下的工作就是找出哪些根据键提取的规则是真正匹配的了。&lt;/p&gt;
&lt;h6 id=&#34;正确的层叠顺序&#34;&gt;&lt;a href=&#34;#正确的层叠顺序&#34; class=&#34;headerlink&#34; title=&#34;正确的层叠顺序&#34;&gt;&lt;/a&gt;正确的层叠顺序&lt;/h6&gt;&lt;p&gt;样式对象具有与可视化属性一一对应的属性（均为CSS属性但更为通用）。如果某个属性未由任何匹配规则所定义，那么部分属性可由父代元素样式对象继承。其他属性具有默认值。不过如果定义不止一个，就会出现麻烦，这时需要通过层叠顺序来解决。&lt;/p&gt;
&lt;p&gt;某个样式属性的声明可能会出现在多个样式表中，也可能在同一个样式表中出现多次。&lt;strong&gt;层叠&lt;/strong&gt;顺序的重要性正体现在这里。根据CSS2规范，层叠的顺序为（优先级从低到高）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Browser declarations&lt;/li&gt;
&lt;li&gt;User normal declarations&lt;/li&gt;
&lt;li&gt;Author normal declarations&lt;/li&gt;
&lt;li&gt;Author important declarations&lt;/li&gt;
&lt;li&gt;User important declarations&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;同样顺序的声明则会根据&lt;strong&gt;特异性(specity)&lt;strong&gt;进行排序，然后再是其&lt;/strong&gt;指定顺序&lt;/strong&gt;。HTML可视化属性会转换成匹配的CSS声明。它们被视为低优先级的Author normal declaration。&lt;/p&gt;
&lt;p&gt;那么特异性是什么意思呢？根据&lt;a href=&#34;https://www.w3.org/TR/selectors/#specificity&#34;&gt;CSS3 selectors specificity&lt;/a&gt;中的定义（和CSS2.1几乎一样），一个选择器的优先级计算如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果声明来自于&lt;code&gt;style&lt;/code&gt;属性，而不是带有选择器的规则，则记为1，否则记为0 (&amp;#x3D; a)&lt;/li&gt;
&lt;li&gt;记为选择器中ID属性的个数 (&amp;#x3D; b)&lt;/li&gt;
&lt;li&gt;记为选择器中其他属性和伪类的个数 (&amp;#x3D; c)&lt;/li&gt;
&lt;li&gt;记为选择器中元素名称和伪元素的个数 (&amp;#x3D; d)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;将四个数字按a-b-c-d这样连接起来（位于大数进制的数字系统中），构成特异性。所使用的进制取决于上述类别中的最高计数。例如，如果a&amp;#x3D;14，可以使用十六进制。如果a&amp;#x3D;17，那么需要使用十七进制；不过在正常使用中，几乎不会使用到如此深嵌套层级的选择器。规范中给出的例子很好地演示了这种系统的工作方式。&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;*             &amp;#123;&amp;#125;  &lt;span class=&#34;comment&#34;&gt;/* a=0 b=0 c=0 d=0 -&amp;gt; specificity = 0,0,0,0 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;selector-tag&#34;&gt;li&lt;/span&gt;            &amp;#123;&amp;#125;  &lt;span class=&#34;comment&#34;&gt;/* a=0 b=0 c=0 d=1 -&amp;gt; specificity = 0,0,0,1 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;selector-tag&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;selector-pseudo&#34;&gt;:first&lt;/span&gt;-line &amp;#123;&amp;#125;  &lt;span class=&#34;comment&#34;&gt;/* a=0 b=0 c=0 d=2 -&amp;gt; specificity = 0,0,0,2 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;selector-tag&#34;&gt;ul&lt;/span&gt; &lt;span class=&#34;selector-tag&#34;&gt;li&lt;/span&gt;         &amp;#123;&amp;#125;  &lt;span class=&#34;comment&#34;&gt;/* a=0 b=0 c=0 d=2 -&amp;gt; specificity = 0,0,0,2 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;selector-tag&#34;&gt;ul&lt;/span&gt; &lt;span class=&#34;selector-tag&#34;&gt;ol&lt;/span&gt;+&lt;span class=&#34;selector-tag&#34;&gt;li&lt;/span&gt;      &amp;#123;&amp;#125;  &lt;span class=&#34;comment&#34;&gt;/* a=0 b=0 c=0 d=3 -&amp;gt; specificity = 0,0,0,3 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;selector-tag&#34;&gt;h1&lt;/span&gt; + *&lt;span class=&#34;selector-attr&#34;&gt;[rel=up]&lt;/span&gt;&amp;#123;&amp;#125;  &lt;span class=&#34;comment&#34;&gt;/* a=0 b=0 c=1 d=1 -&amp;gt; specificity = 0,0,1,1 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;selector-tag&#34;&gt;ul&lt;/span&gt; &lt;span class=&#34;selector-tag&#34;&gt;ol&lt;/span&gt; &lt;span class=&#34;selector-tag&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;selector-class&#34;&gt;.red&lt;/span&gt;  &amp;#123;&amp;#125;  &lt;span class=&#34;comment&#34;&gt;/* a=0 b=0 c=1 d=3 -&amp;gt; specificity = 0,0,1,3 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;selector-tag&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;selector-class&#34;&gt;.red&lt;/span&gt;&lt;span class=&#34;selector-class&#34;&gt;.level&lt;/span&gt;  &amp;#123;&amp;#125;  &lt;span class=&#34;comment&#34;&gt;/* a=0 b=0 c=2 d=1 -&amp;gt; specificity = 0,0,2,1 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;selector-id&#34;&gt;#x34y&lt;/span&gt;         &amp;#123;&amp;#125;  &lt;span class=&#34;comment&#34;&gt;/* a=0 b=1 c=0 d=0 -&amp;gt; specificity = 0,1,0,0 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;找到匹配的规则之后，应根据级联顺序将其排序。WebKit对于较小的列表会使用冒泡排序，对较大的列表使用归并排序。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://shenlvmeng.github.com/blog/2017/03/20/domevent-elementsize-mediatag/</guid>
            <title>【笔记】JavaScript事件处理机制，元素大小判断与H5的媒体标签</title>
            <link>http://shenlvmeng.github.com/blog/2017/03/20/domevent-elementsize-mediatag/</link>
            <category>HTML</category>
            <category>JavaScript</category>
            <category>DOM</category>
            <category>笔记</category>
            <pubDate>Mon, 20 Mar 2017 20:45:30 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;前一阵舍友去面试，被问到JavaScript中的事件处理机制。暗自思忖，发现自己也没有深入的了解过。顺带连同常用的HTML元素大小和实际中用到的HTML5中的媒体元素简单整理在下面，方便之后回顾。&lt;/p&gt;
&lt;h2 id=&#34;事件&#34;&gt;&lt;a href=&#34;#事件&#34; class=&#34;headerlink&#34; title=&#34;事件&#34;&gt;&lt;/a&gt;事件&lt;/h2&gt;&lt;p&gt;JavaScript和HTML的交互是通过&lt;strong&gt;事件&lt;/strong&gt;实现的。可以通过监听器订阅文档或窗口中的事件，在事件发生时执行特定的代码。这种属于设计模式中的观察者模式。&lt;/p&gt;
&lt;p&gt;事件相关的API最早出现在IE4和NetScape Nivagator4（后面简称为网景）中。两种浏览器提供了相似却不同的API。在之后的DOM2级标准中对DOM事件进行了标准化。&lt;/p&gt;
&lt;h3 id=&#34;事件流&#34;&gt;&lt;a href=&#34;#事件流&#34; class=&#34;headerlink&#34; title=&#34;事件流&#34;&gt;&lt;/a&gt;事件流&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;事件流&lt;/strong&gt;描述的是页面中接受时间的顺序。在这点上IE和网景采用了完全相反的两种处理思路。IE采用的是&lt;strong&gt;事件冒泡流&lt;/strong&gt;，网景采用的是&lt;strong&gt;事件捕获流&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;事件冒泡（event bubbling）指从事件开始的最具体的元素接收，再逐步向上传递到最外层的节点，直到&lt;code&gt;document&lt;/code&gt;。如下图（来自红宝书）展示的过程，在下面的文档中：&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;!DOCTYPE &lt;span class=&#34;keyword&#34;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Event bubbling&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;Click me&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;如果div标签被点击，&lt;code&gt;click&lt;/code&gt;事件会这样依次传递：&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; -&amp;gt; &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; -&amp;gt; &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; -&amp;gt; &lt;code&gt;document&lt;/code&gt;。（不同浏览器实现细节上会有不同）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/blog/images/event-bubbling.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;事件捕获（event capturing）则认为应该从父节点开始捕获事件直到事件目标。因此，同样的上面的例子，顺序将是：&lt;code&gt;document&lt;/code&gt; -&amp;gt; &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; -&amp;gt; &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; -&amp;gt;  &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/blog/images/event-capturing.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;目前很少有人使用事件捕获这种方式作为事件流。&lt;/p&gt;
&lt;h4 id=&#34;DOM-事件流&#34;&gt;&lt;a href=&#34;#DOM-事件流&#34; class=&#34;headerlink&#34; title=&#34;DOM 事件流&#34;&gt;&lt;/a&gt;DOM 事件流&lt;/h4&gt;&lt;p&gt;“DOM2级标准”中规定事件流包括三个阶段，&lt;strong&gt;事件捕获&lt;/strong&gt;、&lt;strong&gt;处于目标&lt;/strong&gt;、&lt;strong&gt;时间冒泡&lt;/strong&gt;。在实际的DOM事件流中，实际目标不会接受到事件。因此如下图展示的那样，捕获阶段停止在父目标&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;上，之后事件发生在目标上，&lt;strong&gt;并作为事件冒泡的一部分&lt;/strong&gt;。然后，冒泡阶段发生，事件传回到文档。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/blog/images/DOM2-event-flow.jpg&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;事件处理程序&#34;&gt;&lt;a href=&#34;#事件处理程序&#34; class=&#34;headerlink&#34; title=&#34;事件处理程序&#34;&gt;&lt;/a&gt;事件处理程序&lt;/h3&gt;&lt;p&gt;事件处理程序指用户指定响应事件的某种动作。它们都以’on’开头。HTML元素本身都可以使用与之同名的HTML特性。&lt;/p&gt;
&lt;h4 id=&#34;DOM0级事件处理程序&#34;&gt;&lt;a href=&#34;#DOM0级事件处理程序&#34; class=&#34;headerlink&#34; title=&#34;DOM0级事件处理程序&#34;&gt;&lt;/a&gt;DOM0级事件处理程序&lt;/h4&gt;&lt;p&gt;DOM0级事件处理程序就是将一个函数直接赋值给一个事件处理程序属性。使用这种方法指定的事件处理程序被认为是元素的一种方法，从而其作用域为元素本身，即&lt;code&gt;this&lt;/code&gt;指向引用元素。可以通过直接为事件处理程序属性赋值为null删除。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; btn = &lt;span class=&#34;variable language_&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;getElementById&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;button&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;btn.&lt;span class=&#34;property&#34;&gt;onclick&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;alert&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;id&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;// &amp;quot;button&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//删除&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;btn.&lt;span class=&#34;property&#34;&gt;onclick&lt;/span&gt; = &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;所有浏览器都支持DOM0级事件处理程序。这么做的好处是可以保证浏览器兼容性，缺点是使得HTML和JavaScript紧密耦合，不利用后期维护。&lt;/p&gt;
&lt;h4 id=&#34;DOM2级事件处理程序&#34;&gt;&lt;a href=&#34;#DOM2级事件处理程序&#34; class=&#34;headerlink&#34; title=&#34;DOM2级事件处理程序&#34;&gt;&lt;/a&gt;DOM2级事件处理程序&lt;/h4&gt;&lt;p&gt;伴随DOM2级标准提出，“DOM2级事件”提出了两种方法，用于绑定和解除事件处理程序：&lt;code&gt;addEventListener()&lt;/code&gt;和&lt;code&gt;removeEventListener()&lt;/code&gt;。它接受3个参数：&lt;strong&gt;事件名&lt;/strong&gt;、&lt;strong&gt;事件处理程序对应的函数&lt;/strong&gt;、&lt;strong&gt;表示捕获阶段的布尔值&lt;/strong&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; btn = &lt;span class=&#34;variable language_&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;getElementById&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;button&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;btn.&lt;span class=&#34;title function_&#34;&gt;addEventListener&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;click&amp;quot;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;alert&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;id&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;, &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;btn.&lt;span class=&#34;title function_&#34;&gt;addEventListener&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;click&amp;quot;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;alert&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;id&lt;/span&gt; + &lt;span class=&#34;string&#34;&gt;&amp;quot; again.&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;, &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;使用DOM2级方法绑定事件处理程序的一个优点是，&lt;strong&gt;可以添加多个程序到同一个标签上&lt;/strong&gt;。使用DOM0级方法时则会覆盖上一次的事件处理程序。IE9及以上版本都支持DOM2级事件处理程序。&lt;/p&gt;
&lt;p&gt;由于IE事件处理程序在IE8之前，是通过类似的&lt;code&gt;attachEvent()&lt;/code&gt;和&lt;code&gt;detachEvent()&lt;/code&gt;方法。它的第一个参数是事件名（&lt;strong&gt;需要带上on&lt;/strong&gt;），第二个参数是事件处理程序。通过这种方法绑定的处理程序都添加在冒泡阶段，且需要注意的是其中的&lt;code&gt;this&lt;/code&gt;等于&lt;code&gt;window&lt;/code&gt;对象。支持这种方式有IE和Opera。&lt;/p&gt;
&lt;p&gt;因此，一个跨浏览器兼容的事件绑定和解绑应该是下面这样的：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;EventUtil&lt;/span&gt; = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;addHandler&lt;/span&gt;: &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;element, type, handler&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (element.&lt;span class=&#34;property&#34;&gt;addEventListener&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            element.&lt;span class=&#34;title function_&#34;&gt;addEventListener&lt;/span&gt;(type, handler, &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (element.&lt;span class=&#34;property&#34;&gt;attachEvent&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            element.&lt;span class=&#34;title function_&#34;&gt;attachEvent&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;on&amp;quot;&lt;/span&gt; + type, handler);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            element[&lt;span class=&#34;string&#34;&gt;&amp;quot;on&amp;quot;&lt;/span&gt; + type] = handler;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;removeHandler&lt;/span&gt;: &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;element, type, handler&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (element.&lt;span class=&#34;property&#34;&gt;removeEventListener&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            element.&lt;span class=&#34;title function_&#34;&gt;removeEventListener&lt;/span&gt;(type, handler, &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (element.&lt;span class=&#34;property&#34;&gt;detachEvent&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            element.&lt;span class=&#34;title function_&#34;&gt;detachEvent&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;on&amp;quot;&lt;/span&gt; + type, handler);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            element[&lt;span class=&#34;string&#34;&gt;&amp;quot;on&amp;quot;&lt;/span&gt; + type] = &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&amp;#x3D;&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;h2 id=&#34;元素大小与位置&#34;&gt;&lt;a href=&#34;#元素大小与位置&#34; class=&#34;headerlink&#34; title=&#34;元素大小与位置&#34;&gt;&lt;/a&gt;元素大小与位置&lt;/h2&gt;&lt;p&gt;这些属性方法并不属于“DOM2级样式”，但是却经常得到使用。目前所有主流浏览器都支持这些属性。它们大多都是只读的。&lt;/p&gt;
&lt;h3 id=&#34;偏移量&#34;&gt;&lt;a href=&#34;#偏移量&#34; class=&#34;headerlink&#34; title=&#34;偏移量&#34;&gt;&lt;/a&gt;偏移量&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;偏移量&lt;/strong&gt;描述元素在屏幕中占用的可用空间，由其宽高决定，包括内边距、滚动条和边框（不包括外边距）。有下面4个属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;offsetHeight&lt;/code&gt; 元素垂直方向上的占用空间&lt;/li&gt;
&lt;li&gt;&lt;code&gt;offsetWidth&lt;/code&gt; 元素水平方向上的占用空间&lt;/li&gt;
&lt;li&gt;&lt;code&gt;offsetLeft&lt;/code&gt; 元素左边框距&lt;code&gt;offsetParent&lt;/code&gt;元素左内边框的像素距离&lt;/li&gt;
&lt;li&gt;&lt;code&gt;offsetTop&lt;/code&gt; 元素上边框距&lt;code&gt;offsetParent&lt;/code&gt;元素上内边框的像素距离&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以利用元素的&lt;code&gt;offsetLeft&lt;/code&gt;或&lt;code&gt;offsetLeft&lt;/code&gt;与其&lt;code&gt;offsetParent&lt;/code&gt;对应属性相加直到根元素，获取到元素相对于页面的左偏移值或上偏移值。&lt;/p&gt;
&lt;h3 id=&#34;客户区大小&#34;&gt;&lt;a href=&#34;#客户区大小&#34; class=&#34;headerlink&#34; title=&#34;客户区大小&#34;&gt;&lt;/a&gt;客户区大小&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;客户区大小&lt;/strong&gt;指元素内容和内边距占据的空间大小，不包括滚动条。&lt;code&gt;clientWidth&lt;/code&gt;是元素内容宽度加左右内边距的宽度，&lt;code&gt;clientHeight&lt;/code&gt;是元素内容高度加上下内边距的高度。&lt;/p&gt;
&lt;p&gt;可以通过对&lt;code&gt;body&lt;/code&gt;元素取值来获取当前浏览器视口的大小。&lt;/p&gt;
&lt;h3 id=&#34;滚动大小&#34;&gt;&lt;a href=&#34;#滚动大小&#34; class=&#34;headerlink&#34; title=&#34;滚动大小&#34;&gt;&lt;/a&gt;滚动大小&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;滚动大小&lt;/strong&gt;包含滚动内容的元素大小。它有下面4个相关属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;scrollHeight&lt;/code&gt; 没有滚动条时，元素内容的高度&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scrollWidth&lt;/code&gt; 没有滚动条时，元素内容的宽度&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scrollLeft&lt;/code&gt; 被隐藏在内容区域左侧的像素数，可以设置从而改变元素滚动位置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scrollTop&lt;/code&gt; 被隐藏在内容区域上侧的像素数，可以设置从而改变元素滚动位置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;scrollHeight/scrollWidth&lt;/code&gt;和&lt;code&gt;clientHeight/clientWidth&lt;/code&gt;在不同浏览器下的表现行为并不相同，有的表示视口大小，有的表示元素内容区域大小。使用时可以&lt;strong&gt;取较大值&lt;/strong&gt;。而另外两个属性&lt;code&gt;scrollLeft&lt;/code&gt;和&lt;code&gt;scrollTop&lt;/code&gt;则通常用在&lt;code&gt;document&lt;/code&gt;中，获取和滚动相关的属性。&lt;/p&gt;
&lt;h3 id=&#34;确定元素大小&#34;&gt;&lt;a href=&#34;#确定元素大小&#34; class=&#34;headerlink&#34; title=&#34;确定元素大小&#34;&gt;&lt;/a&gt;确定元素大小&lt;/h3&gt;&lt;p&gt;大多数主流浏览器为元素提供了&lt;code&gt;getBoundingClientRect()&lt;/code&gt;方法，返回一个对象，包含&lt;code&gt;left&lt;/code&gt;，&lt;code&gt;right&lt;/code&gt;，&lt;code&gt;top&lt;/code&gt;，&lt;code&gt;bottom&lt;/code&gt;四个属性。给出了元素相对于视口的位置。&lt;/p&gt;
&lt;p&gt;对不支持这个方法的浏览器，可以通过偏移量的相关属性获取。&lt;/p&gt;
&lt;p&gt;&amp;#x3D;&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;h2 id=&#34;媒体元素&#34;&gt;&lt;a href=&#34;#媒体元素&#34; class=&#34;headerlink&#34; title=&#34;媒体元素&#34;&gt;&lt;/a&gt;媒体元素&lt;/h2&gt;&lt;p&gt;HTML5出现前，提供富媒体内容的网站多采用Flash的方式保证浏览器兼容性。HTML5新增了两个标签&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio&#34;&gt;&lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt;&lt;/a&gt;和&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/video&#34;&gt;&lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt;&lt;/a&gt;。用于方便地嵌入音频和视频内容。同时，这两个标签也提供了实现常用功能的JavaScript API。允许为媒体创建自定义控件。&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;video&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;src&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;demo.mpg&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Video player is not available.&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;video&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;audio&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;src&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;song.mp3&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Audio player is not available.&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;audio&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;其中元素的&lt;code&gt;src&lt;/code&gt;属性指定了加载的媒体文件，还可以通过&lt;code&gt;width&lt;/code&gt;和&lt;code&gt;height&lt;/code&gt;属性指定播放器大小。&lt;code&gt;controls&lt;/code&gt;属性意味浏览器应该显示UI控件用于操作媒体。标签中的内容用于在不支持时显示后备内容。&lt;/p&gt;
&lt;p&gt;因为不同浏览器支持的媒体格式集并不完全相同，可以在标签下指定&lt;strong&gt;一或多个&lt;/strong&gt;&lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt;元素，通过&lt;code&gt;src&lt;/code&gt;和&lt;code&gt;type&lt;/code&gt;属性指定来源和格式，视频标签下&lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt;的&lt;code&gt;type&lt;/code&gt;中甚至可以指定&lt;code&gt;codecs&lt;/code&gt;表示解码器。目前现代浏览器（IE9+，对IE说的就是你）都支持这两个标签。&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;video&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;myVideo&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;source&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;src&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;foo.mpg&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;source&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;src&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;foo.webm&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;video/webm; codecs=vp8, vorbis&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;video&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;audio&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;source&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;src&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;song.ogg&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;audio/ogg&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;source&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;src&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;song.mp3&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;audio/mpeg&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;audio&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;属性&#34;&gt;&lt;a href=&#34;#属性&#34; class=&#34;headerlink&#34; title=&#34;属性&#34;&gt;&lt;/a&gt;属性&lt;/h3&gt;&lt;p&gt;&lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt;和&lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt;提供了完善的JavaScript接口，下面是一些可能会用到的它们的属性。其中很多可以直接在标签元素上设置。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;autoplay&lt;/code&gt; 取消或设置当前&lt;code&gt;autoplay&lt;/code&gt;标识&lt;/li&gt;
&lt;li&gt;&lt;code&gt;controls&lt;/code&gt; 取消或设置当前&lt;code&gt;controls&lt;/code&gt;标识，用于显示和隐藏浏览器内置控件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;currentTime&lt;/code&gt; 获取已经播放的秒数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;duration&lt;/code&gt; 获取媒体的总长度（秒数）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ended&lt;/code&gt; 获取媒体是否播放完成&lt;/li&gt;
&lt;li&gt;&lt;code&gt;loop&lt;/code&gt;  取消或设置媒体文件是否循环播放&lt;/li&gt;
&lt;li&gt;&lt;code&gt;muted&lt;/code&gt; 取消或设置媒体文件是否静音&lt;/li&gt;
&lt;li&gt;&lt;code&gt;paused&lt;/code&gt; 标识播放器是否暂停&lt;/li&gt;
&lt;li&gt;&lt;code&gt;playbackRate&lt;/code&gt; 取消或设置当前播放速度&lt;/li&gt;
&lt;li&gt;&lt;code&gt;readyState&lt;/code&gt; 标识媒体是否就绪，有0，1，2，3四种情况，表示不可用、可以播放当前帧、可以播放、加载完毕&lt;/li&gt;
&lt;li&gt;&lt;code&gt;src&lt;/code&gt; 媒体文件来源，可重写&lt;/li&gt;
&lt;li&gt;&lt;code&gt;volume&lt;/code&gt; 取消或设置当前音量，值为0.0到1.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;事件-1&#34;&gt;&lt;a href=&#34;#事件-1&#34; class=&#34;headerlink&#34; title=&#34;事件&#34;&gt;&lt;/a&gt;事件&lt;/h3&gt;&lt;p&gt;这两个媒体元素还有许多事件，有的是媒体播放的结果，有的是用户操作的结果。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;abort&lt;/code&gt; 下载中断&lt;/li&gt;
&lt;li&gt;&lt;code&gt;canplay&lt;/code&gt; 对应着&lt;code&gt;readyState&lt;/code&gt;为2&lt;/li&gt;
&lt;li&gt;&lt;code&gt;canplaythrough&lt;/code&gt; 对应着&lt;code&gt;readyState&lt;/code&gt;为3&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ended&lt;/code&gt; 媒体播放完毕&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error&lt;/code&gt; 下载过程网络错误&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pause&lt;/code&gt; 播放暂停&lt;/li&gt;
&lt;li&gt;&lt;code&gt;play&lt;/code&gt;  媒体收到播放指令&lt;/li&gt;
&lt;li&gt;&lt;code&gt;playing&lt;/code&gt; 媒体开始播放&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ratechange&lt;/code&gt; 播放速度改变&lt;/li&gt;
&lt;li&gt;&lt;code&gt;seeked&lt;/code&gt; 移动到新位置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;seeking&lt;/code&gt; 正在移动进度条&lt;/li&gt;
&lt;li&gt;&lt;code&gt;volumnchange&lt;/code&gt; &lt;code&gt;volumn&lt;/code&gt;和&lt;code&gt;muted&lt;/code&gt;属性值改变&lt;/li&gt;
&lt;li&gt;&lt;code&gt;waiting&lt;/code&gt; 播放因下载未完成暂停&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在如此丰富的属性和事件的帮助下，结合&lt;code&gt;play()&lt;/code&gt;和&lt;code&gt;pause()&lt;/code&gt;方法，我们可以很容易构建一个自定义的媒体播放器。&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;player&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;player__content&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;video&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;video&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;src&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;movie.mov&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;poster&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;movie.jpg&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;width&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;400&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;height&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;200&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      Video is not supported.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;video&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;player__control&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;button&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;Play!&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;video-play&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;span&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;curtime&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;0&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;/&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;span&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;duration&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;0&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; player = &lt;span class=&#34;variable language_&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;getElementById&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;video&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    btn = &lt;span class=&#34;variable language_&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;getElementById&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;video-play&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    curtime = &lt;span class=&#34;variable language_&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;getElementById&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;curtime&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    duration = &lt;span class=&#34;variable language_&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;getElementById&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;duration&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//更新播放时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;duration.&lt;span class=&#34;property&#34;&gt;innerHTML&lt;/span&gt; = player.&lt;span class=&#34;property&#34;&gt;duration&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//为按钮添加处理事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;EventUtil&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;addHandler&lt;/span&gt;(btn, &lt;span class=&#34;string&#34;&gt;&amp;quot;click&amp;quot;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;e&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (player.&lt;span class=&#34;property&#34;&gt;paused&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        player.&lt;span class=&#34;title function_&#34;&gt;play&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        btn.&lt;span class=&#34;property&#34;&gt;value&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;quot;Pause!&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        player.&lt;span class=&#34;title function_&#34;&gt;pause&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        btn.&lt;span class=&#34;property&#34;&gt;value&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;quot;Play!&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//定时更新时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;setInterval&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    curtime.&lt;span class=&#34;property&#34;&gt;innerHTML&lt;/span&gt; = player.&lt;span class=&#34;property&#34;&gt;currentTime&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;, &lt;span class=&#34;number&#34;&gt;250&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;最后，不是所有浏览器都支持这两个标签的所有解码器，因此有一个API来检测浏览器是否支持某种解码器。通过&lt;code&gt;canPlayType()&lt;/code&gt;方法，该方法接收格式&amp;#x2F;编解码器（如”&lt;code&gt;audio/wav&lt;/code&gt;“）字符串，返回”probably”, “maybe”或是空字符串””。像下面这样：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (audio.&lt;span class=&#34;title function_&#34;&gt;canPlayType&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;audio/mpeg&amp;quot;&lt;/span&gt;))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//进一步处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://shenlvmeng.github.com/blog/2017/03/06/dom-1/</guid>
            <title>HTML中的DOM 1级模型</title>
            <link>http://shenlvmeng.github.com/blog/2017/03/06/dom-1/</link>
            <category>HTML</category>
            <category>JavaScript</category>
            <category>DOM</category>
            <pubDate>Mon, 06 Mar 2017 11:26:29 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;DOM&#34;&gt;&lt;a href=&#34;#DOM&#34; class=&#34;headerlink&#34; title=&#34;DOM&#34;&gt;&lt;/a&gt;DOM&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;DOM（文档对象模型）&lt;/strong&gt;是针对HTML和XML文档的一个API，描绘了层次化的节点树。开发者可以借助DOM对页面的某一部分进行添加、移除、修改。DOM来源于网景和微软提出的&lt;a href=&#34;https://en.wikipedia.org/wiki/Dynamic_HTML&#34;&gt;DHTML&lt;/a&gt;。1998年10月，DOM 1级规范称为W3C的标准，为文档查询和改动提供了接口。各大主流浏览器都完善地实现了DOM。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;DOM把HTML和XML文档描述成一个多层节点构成的结构。每个节点有都有自己的特点、数据和方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;文档节点&lt;/strong&gt;是每个文档的根节点。HTML中&lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;元素是文档节点&lt;em&gt;唯一&lt;/em&gt;的子节点，又称为&lt;strong&gt;文档元素&lt;/strong&gt;。每一个标签都通过树中的一个节点表示，HTML元素表示为元素节点，特性通过特性节点表示，文档表示为文档节点，如此这样，总共有12中节点类型。&lt;/p&gt;
&lt;h3 id=&#34;Node&#34;&gt;&lt;a href=&#34;#Node&#34; class=&#34;headerlink&#34; title=&#34;Node&#34;&gt;&lt;/a&gt;Node&lt;/h3&gt;&lt;p&gt;DOM 1级中定义了Node类型。JavaScript中的所有节点类型都继承于Node类型。每个节点都有一个&lt;strong&gt;nodeType&lt;/strong&gt;属性。常用的取值如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Node.ELEMENT_NODE(1)&lt;/li&gt;
&lt;li&gt;Node.ATTRIBUTE_NODE(2)&lt;/li&gt;
&lt;li&gt;Node.TEXT_NODE(3)&lt;/li&gt;
&lt;li&gt;Node.COMMENT_NODE(8)&lt;/li&gt;
&lt;li&gt;Node.DOCUMENT_NODE(9)&lt;/li&gt;
&lt;li&gt;Node.DOCUMENT_TYPE_NODE(10)&lt;/li&gt;
&lt;li&gt;Node.DOCUMENT_FRAGMENT_NODE(11)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了确保浏览器兼容性，建议还是将nodeType属性和数字值进行比较，减少使用常量。因为IE没有公开Node类型的构造函数。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (someNode.&lt;span class=&#34;property&#34;&gt;nodeType&lt;/span&gt; == &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) &amp;#123; &lt;span class=&#34;comment&#34;&gt;// 元素节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;alert&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;This is an element node.&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;除了nodeType，节点类型还有&lt;strong&gt;nodeName&lt;/strong&gt;和&lt;strong&gt;nodeValue&lt;/strong&gt;两个属性。它们的取值取决于节点的类型。后面的介绍中也会提到。&lt;/p&gt;
&lt;h4 id=&#34;节点关系&#34;&gt;&lt;a href=&#34;#节点关系&#34; class=&#34;headerlink&#34; title=&#34;节点关系&#34;&gt;&lt;/a&gt;节点关系&lt;/h4&gt;&lt;p&gt;在父子关系上，每个节点有一个&lt;code&gt;childNodes&lt;/code&gt;属性，保存着&lt;code&gt;NodeList&lt;/code&gt;对象。这个对象有&lt;code&gt;length&lt;/code&gt;属性，也可以通过方括号访问其中的值，也可以通过&lt;code&gt;item()&lt;/code&gt;方法访问，但它并不是Array的实例。且DOM结构的变化会实时地反映到这个&lt;code&gt;NodeList&lt;/code&gt;对象中。&lt;em&gt;减少使用NodeList可以避免它带来的时延&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;firstChild&lt;/code&gt;和&lt;code&gt;lastChild&lt;/code&gt;属性可以分别访问到列表中第一个和最后一个节点。同时，每个节点都有一个parentNode属性，指向文档树的父节点。&lt;/p&gt;
&lt;p&gt;在兄弟关系上，使用&lt;code&gt;nextSibling&lt;/code&gt;和&lt;code&gt;previousSibling&lt;/code&gt;分别可以访问到下一个和上一个兄弟节点。&lt;code&gt;hasChildNodes()&lt;/code&gt;在节点包含多个子节点时返回true。&lt;/p&gt;
&lt;p&gt;最后，所有节点都有&lt;code&gt;ownerDocument&lt;/code&gt;属性，指向整个文档的文档节点。&lt;/p&gt;
&lt;h4 id=&#34;节点操作&#34;&gt;&lt;a href=&#34;#节点操作&#34; class=&#34;headerlink&#34; title=&#34;节点操作&#34;&gt;&lt;/a&gt;节点操作&lt;/h4&gt;&lt;p&gt;&lt;code&gt;appendChild&lt;/code&gt;和&lt;code&gt;insertBefore&lt;/code&gt;分别用于在childNodes末尾和某位前插入节点。并返回插入的DOM节点。需要注意的是，&lt;em&gt;如果插入的节点来自于DOM中，则节点会从原来的位置删除&lt;/em&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; returnedNode = someNode.&lt;span class=&#34;title function_&#34;&gt;appendChild&lt;/span&gt;(newNode);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; anotherNode  = someNode.&lt;span class=&#34;title function_&#34;&gt;insertBefore&lt;/span&gt;(newNode, &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;// 插入到最后一位&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;anotherNode = someNode.&lt;span class=&#34;title function_&#34;&gt;insertBefore&lt;/span&gt;(newNode, someNode.&lt;span class=&#34;property&#34;&gt;firstChild&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;// 插入到第二位&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;replaceChild&lt;/code&gt;用于替换节点，&lt;code&gt;cloneChild&lt;/code&gt;用于复制节点，cloneChild方法接受一个布尔值参数，表示是否执行深复制。在参数为true时执行深复制，否则执行浅复制。&lt;/p&gt;
&lt;div class=&#34;tip&#34;&gt;需要留意的是，`cloneChild`不会复制DOM节点中的JavaScript属性，如事件处理程序。IE则会复制事件处理程序。为了保证一致性，建议在复制前移除事件处理程序。
&lt;/div&gt;

&lt;p&gt;最后，节点的&lt;code&gt;normalize&lt;/code&gt;方法可以删除节点后代中的空文本节点，合并相邻的文本节点。&lt;/p&gt;
&lt;h3 id=&#34;Document&#34;&gt;&lt;a href=&#34;#Document&#34; class=&#34;headerlink&#34; title=&#34;Document&#34;&gt;&lt;/a&gt;Document&lt;/h3&gt;&lt;p&gt;JavaScript中用&lt;code&gt;Document&lt;/code&gt;类型表示文档，浏览器中的&lt;code&gt;document&lt;/code&gt;表示整个页面。它是&lt;code&gt;window&lt;/code&gt;对象的一个属性。因此可以作为全局对象来访问。&lt;/p&gt;
&lt;p&gt;它的nodeType为9，nodeName为&lt;code&gt;&amp;quot;#document&amp;quot;&lt;/code&gt;，子节点可以是一个DocumentType或Element类型的节点。在HTML中可以通过&lt;code&gt;documentElement&lt;/code&gt;属性便捷地得到子节点&lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;。所有浏览器都支持这个属性。&lt;code&gt;document.body&lt;/code&gt;属性也都被支持。&lt;/p&gt;
&lt;p&gt;除了&lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;，另一个可能的子节点是&lt;code&gt;DocumentType&lt;/code&gt;，即&lt;code&gt;&amp;lt;!DOCTYPE&amp;gt;&lt;/code&gt;标签。浏览器对它的支持差异很大。同样的还有&lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;元素外的注释。&lt;/p&gt;
&lt;p&gt;document还有下面4个独特的HTML属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;title&lt;/code&gt;包含网页的标题，属性的修改直接对应&lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt;元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;URL&lt;/code&gt;表示页面的URL，&lt;strong&gt;只读&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;domain&lt;/code&gt;表示页面的域名，可修改&lt;/li&gt;
&lt;li&gt;&lt;code&gt;referer&lt;/code&gt;保存链接到当前页面的URL，&lt;strong&gt;只读&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中修改domain可以用来访问同一父级域名下的iframe中的资源。&lt;/p&gt;
&lt;div class=&#34;tip&#34;&gt;为了保证安全，域名修改只能由“紧绷”变“松散”，而不能反过来。
&lt;/div&gt;

&lt;h4 id=&#34;查找元素&#34;&gt;&lt;a href=&#34;#查找元素&#34; class=&#34;headerlink&#34; title=&#34;查找元素&#34;&gt;&lt;/a&gt;查找元素&lt;/h4&gt;&lt;p&gt;DOM 1级标准只有&lt;code&gt;getElementById()&lt;/code&gt;，&lt;code&gt;getElementsByTagName()&lt;/code&gt;和&lt;code&gt;getElementsByName()&lt;/code&gt;三种方法。具体功能不必再提。它们返回的是一个&lt;code&gt;HTMLCollection&lt;/code&gt;对象。这个对象和&lt;code&gt;NodeList&lt;/code&gt;很类似。同样可以通过方括号访问其中的子元素。不过&lt;code&gt;HTMLCollection&lt;/code&gt;额外提供&lt;code&gt;namedItem()&lt;/code&gt;方法，通过&lt;code&gt;name&lt;/code&gt;属性值访问其中的子元素。&lt;/p&gt;
&lt;p&gt;除此以外，&lt;code&gt;document&lt;/code&gt;对象还有一个特殊的集合，它们也都是&lt;code&gt;HTMLCollection&lt;/code&gt;对象。如&lt;code&gt;document.anchors&lt;/code&gt;，&lt;code&gt;document.forms&lt;/code&gt;，&lt;code&gt;document.imgs&lt;/code&gt;，&lt;code&gt;document.links&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;其他&#34;&gt;&lt;a href=&#34;#其他&#34; class=&#34;headerlink&#34; title=&#34;其他&#34;&gt;&lt;/a&gt;其他&lt;/h4&gt;&lt;p&gt;&lt;code&gt;document.implementation&lt;/code&gt;属性用来检测浏览器对DOM实现的程度，它有一个&lt;code&gt;hasFeature()&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;write()&lt;/code&gt;、&lt;code&gt;writeln()&lt;/code&gt;、&lt;code&gt;open()&lt;/code&gt;、&lt;code&gt;close()&lt;/code&gt;方法可以将输出流写入到网页中。&lt;/p&gt;
&lt;h3 id=&#34;Element&#34;&gt;&lt;a href=&#34;#Element&#34; class=&#34;headerlink&#34; title=&#34;Element&#34;&gt;&lt;/a&gt;Element&lt;/h3&gt;&lt;p&gt;除了&lt;code&gt;document&lt;/code&gt;外，Element类型应该是HTML中最常用的类型了。它的nodeType为1，nodeName为元素的标签名，&lt;code&gt;tagName&lt;/code&gt;属性也可以用来访问元素标签名。&lt;/p&gt;
&lt;p&gt;所有HTML元素都由HTMLElement的子类型表示。所有的HTML元素都具有下面的一些标准特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;id&lt;/code&gt;：元素的唯一标识符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;title&lt;/code&gt;：有关元素的附加说明信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lang&lt;/code&gt;：元素的语言代码&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dir&lt;/code&gt;：语言的方向&lt;/li&gt;
&lt;li&gt;&lt;code&gt;className&lt;/code&gt;：与元素的class对应&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些都可以通过访问元素的属性得到。如：&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;myDiv&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;title&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;lang&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;dir&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;ltr&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;元素的信息可以通过下面的方式得到，同样，这些属性可以直接赋予新值来修改。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; div = &lt;span class=&#34;variable language_&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;getElementById&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;myDiv&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(div.&lt;span class=&#34;property&#34;&gt;id&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(div.&lt;span class=&#34;property&#34;&gt;class&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(div.&lt;span class=&#34;property&#34;&gt;title&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(div.&lt;span class=&#34;property&#34;&gt;lang&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(div.&lt;span class=&#34;property&#34;&gt;dir&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;未完待续&lt;/em&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
