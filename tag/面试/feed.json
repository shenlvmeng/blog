{
    "version": "https://jsonfeed.org/version/1",
    "title": "Shenlvmeng's Blog • All posts by \"面试\" tag",
    "description": "Be sharp, my friend.",
    "home_page_url": "http://shenlvmeng.github.com/blog",
    "items": [
        {
            "id": "http://shenlvmeng.github.com/blog/2017/07/27/interview-algorithm-md/",
            "url": "http://shenlvmeng.github.com/blog/2017/07/27/interview-algorithm-md/",
            "title": "《剑指Offer》JavaScript版解决方案",
            "date_published": "2017-07-27T11:52:57.000Z",
            "content_html": "<p>问题全部来自《剑指Offer》，顺序一致。</p>\n<h2 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h2><p>1.使用字面量声明对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Singleton</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">prop1</span>: <span class=\"string\">&quot;prop1&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">prop2</span>: <span class=\"string\">&quot;prop2&quot;</span></span><br><span class=\"line\">  <span class=\"title function_\">method1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;I am a method.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或者通过闭包封装自己的私有变量和方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Singleton</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> privateProp = <span class=\"string\">&quot;You can&#x27;t see me&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">privateMethod</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;You can&#x27;t see me either.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">publicProp</span>: <span class=\"string\">`<span class=\"subst\">$&#123;privateProp&#125;</span>!`</span>,</span><br><span class=\"line\">    <span class=\"title function_\">publicMethod</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"title function_\">privateMethod</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.利用闭包</p>\n<p>本质上和上面的方法类似</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Singleton</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> instance;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">init</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">prop</span>: <span class=\"string\">&quot;prop&quot;</span>,</span><br><span class=\"line\">      <span class=\"title function_\">method</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;I am a method.&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">getInstance</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// JS单线程，不考虑锁的问题</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!instance) &#123;</span><br><span class=\"line\">        instance = <span class=\"title function_\">init</span>();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>还有一个酷炫的变种，不过是上面的构造函数写法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Singleton</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> instance = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">prop</span> = <span class=\"string\">&quot;prop&quot;</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">method</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;I am a method.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">Singleton</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.借助构造函数和JS中函数也是对象的特点</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Singleton</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 这里不取名为instance也可以</span></span><br><span class=\"line\">  <span class=\"comment\">// 显式返回this</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"title class_\">Singleton</span>.<span class=\"property\">instance</span> === <span class=\"string\">&quot;object&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Singleton</span>.<span class=\"property\">instance</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 成员和方法</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">prop</span> = <span class=\"string\">&quot;prop&quot;</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">method</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;I am a method.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">Singleton</span>.<span class=\"property\">instance</span> = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//隐式返回this</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"http://www.cnblogs.com/TomXu/archive/2012/02/20/2352817.html\">参考</a></p>\n<h2 id=\"找出数组中重复的数字\"><a href=\"#找出数组中重复的数字\" class=\"headerlink\" title=\"找出数组中重复的数字\"></a>找出数组中重复的数字</h2><p><strong>Set</strong>，使用ES6内建的数据结构。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mySet = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>();</span><br><span class=\"line\">arr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">val, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (mySet.<span class=\"title function_\">has</span>(val)) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(val);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    mySet.<span class=\"title function_\">add</span>(val);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>Object</strong>或<strong>Array</strong>（空间复杂度O(n)），换汤不换药，略。</p>\n<p><strong>传统方法</strong>，时间复杂度O(n)，空间复杂度O(1)。交换当前元素和当前索引对应的元素，直到两者相等。（请参考原书中的前提，数字都在0~n-1之间）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">findDuplicate</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 边界检测</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!arr || arr.<span class=\"property\">length</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, len = arr.<span class=\"property\">length</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 循环交换元素直到arr[i] == i</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (arr[i] != i) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arr[i] === arr[arr[i]]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr[i];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 交换</span></span><br><span class=\"line\">      [arr[i], arr[arr[i]]] = [arr[arr[i]], arr[i]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>传统方法，且不修改数组</strong>，利用折半查找，递归寻找重复的元素。时间复杂度O(nlogn)，空间复杂度O(1)。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">findDuplicate</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 边界检测</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!arr || arr.<span class=\"property\">length</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">countRange</span> (arr, start, end) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &gt; end) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (start === end) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> start;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> split = (start + end) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> count = arr.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">last, val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> last + +(val &gt;= start &amp;&amp; val &lt;= split);</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (count &gt; split - start + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">countRange</span>(arr, start, split);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">countRange</span>(arr, split + <span class=\"number\">1</span>, end);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">countRange</span>(arr, <span class=\"number\">0</span>, arr.<span class=\"property\">length</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二维数组中的查找\"><a href=\"#二维数组中的查找\" class=\"headerlink\" title=\"二维数组中的查找\"></a>二维数组中的查找</h2><p><strong>前提</strong>：数组的每一行和每一列都递增</p>\n<p>贪婪算法，从右上角开始。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">find</span>(<span class=\"params\">arr, val</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!arr || !arr.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> [rows, columns] = [arr.<span class=\"property\">length</span>, arr[<span class=\"number\">0</span>].<span class=\"property\">length</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!rows || !columns) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> [x, y] = [columns-<span class=\"number\">1</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(x &gt; <span class=\"number\">0</span> &amp;&amp; y &lt; rows) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[y][x] === val) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr[y][x] &gt; val) &#123;</span><br><span class=\"line\">      x--;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      y++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"替换字符串中的空格\"><a href=\"#替换字符串中的空格\" class=\"headerlink\" title=\"替换字符串中的空格\"></a>替换字符串中的空格</h2><p>JavaScript中很好实现，可以直接使用库函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">replace</span>(<span class=\"params\">str</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str.<span class=\"title function_\">replace</span>(<span class=\"string\">&quot; &quot;</span>, <span class=\"string\">&quot;%20&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用传统方法，思路是先从前到后找到空格数，扩展出足够空间。再使用两个指针，从后到前，P1指向旧字符串的末尾，P2指向新字符串的末尾。碰到空格时，P2插入”%20”。碰到其他字符时，挨个复制即可。</p>\n<p>这种双指针从后向前的思维还可以用在两有序数组合并。从尾到头比较A1和A2数字。</p>\n<h2 id=\"链表设计\"><a href=\"#链表设计\" class=\"headerlink\" title=\"链表设计\"></a>链表设计</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 单向链表</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">LinkedList2</span> = (<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">element</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">element</span> = element;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">next</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">LinkedList</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">length</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">append</span>(<span class=\"params\">element</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> node = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(element);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">head</span> === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = node;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> curr = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(curr.<span class=\"property\">next</span>) &#123;</span><br><span class=\"line\">          curr = curr.<span class=\"property\">next</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        curr.<span class=\"property\">next</span> = node;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">length</span>++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">insert</span>(<span class=\"params\">pos, element</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (pos &lt; <span class=\"number\">0</span> || pos &gt; <span class=\"variable language_\">this</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> curr = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>,</span><br><span class=\"line\">          node = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(element);</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(--pos &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        curr = curr.<span class=\"property\">next</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      node.<span class=\"property\">next</span> = curr.<span class=\"property\">next</span>;</span><br><span class=\"line\">      curr.<span class=\"property\">next</span> = node;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">length</span>++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">remove</span>(<span class=\"params\">pos</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (pos &lt; <span class=\"number\">0</span> || pos &gt; <span class=\"variable language_\">this</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> curr = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>;</span><br><span class=\"line\">          prev;</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(--pos &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        prev = curr;</span><br><span class=\"line\">        curr = curr.<span class=\"property\">next</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"title function_\">isUndefined</span>(prev)) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        prev.<span class=\"property\">next</span> = curr.<span class=\"property\">next</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">length</span>--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">indexOf</span>(<span class=\"params\">element</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> curr = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>,</span><br><span class=\"line\">          index = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (curr) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (element === curr.<span class=\"property\">element</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> index;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        index++;</span><br><span class=\"line\">        curr = curr.<span class=\"property\">next</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 双向链表</span></span><br><span class=\"line\"><span class=\"comment\">// 略</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"从尾到头打印链表\"><a href=\"#从尾到头打印链表\" class=\"headerlink\" title=\"从尾到头打印链表\"></a>从尾到头打印链表</h2><p><strong>前提</strong>：单向链表。使用递归</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">recursivePrint</span>(<span class=\"params\">node</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (node &amp;&amp; node.<span class=\"property\">next</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">recursivePrint</span>(node.<span class=\"property\">next</span>));</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(node.<span class=\"property\">element</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"重建二叉树\"><a href=\"#重建二叉树\" class=\"headerlink\" title=\"重建二叉树\"></a>重建二叉树</h2><p><strong>前提</strong>：根据前序和中序遍历的结果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BinaryTreeNode</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">element, left, right</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">element</span> = element;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">left</span> = left;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">right</span> = right;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过前序遍历找到根节点，结合中序遍历找到左右子树，之后递归构建左右子树。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">constructTree</span>(<span class=\"params\">preorder, inorder</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (preorder.<span class=\"property\">length</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">construct</span>(<span class=\"params\">preorder, inorder</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 找到根节点元素</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> root = preorder[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 确定左右子树</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> index = inorder.<span class=\"title function_\">indexOf</span>(root),</span><br><span class=\"line\">        left = (index === <span class=\"number\">0</span> ? <span class=\"literal\">null</span> : <span class=\"title function_\">construct</span>(preorder.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, index), inorder.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, index)));</span><br><span class=\"line\">        right = (index === inorder.<span class=\"property\">length</span>-<span class=\"number\">1</span> ? <span class=\"literal\">null</span> : <span class=\"title function_\">construct</span>(preorder.<span class=\"title function_\">slice</span>(index+<span class=\"number\">1</span>), inorder.<span class=\"title function_\">slice</span>(index+<span class=\"number\">1</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BinaryTreeNode</span>(root, left, right);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">construct</span>(preorder, inorder);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二叉树的下一个节点\"><a href=\"#二叉树的下一个节点\" class=\"headerlink\" title=\"二叉树的下一个节点\"></a>二叉树的下一个节点</h2><p><strong>前提</strong>：树的每个节点除了有两个子节点的指针，还有一个指向父节点的指针。寻找中序遍历的下一个节点。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BinaryTreeNode</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">element, left, right, parent</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">element</span> = element;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">left</span> = left;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">right</span> = right;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">parent</span> = parent;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>二叉树中的节点和周围节点可能有四种关系（画图出来更直观）</p>\n<ol>\n<li>左子树的父节点</li>\n<li>右子树的父节点</li>\n<li>父节点的左子树</li>\n<li>父节点的右子树</li>\n</ol>\n<p>从而有下面的流程：</p>\n<ol>\n<li>关系2存在时，返回右子树的最左节点，否则到步骤2</li>\n<li>关系3存在时，返回父节点，否则到步骤3</li>\n<li>关系4存在时，向上回溯，对父节点使用步骤2，否则到步骤4</li>\n<li>（节点是根节点）返回null</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">findNextNode</span>(<span class=\"params\">node</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> curr;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (node.<span class=\"property\">right</span>) &#123;</span><br><span class=\"line\">    curr = node.<span class=\"property\">right</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(curr = curr.<span class=\"property\">left</span>) &#123;</span><br><span class=\"line\">      ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> curr;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (node.<span class=\"property\">parent</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.<span class=\"property\">parent</span>.<span class=\"property\">left</span> === node) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> node.<span class=\"property\">parent</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (node.<span class=\"property\">parent</span>.<span class=\"property\">right</span> === node) &#123;</span><br><span class=\"line\">      curr = node.<span class=\"property\">parent</span>;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (curr.<span class=\"property\">parent</span> &amp;&amp; curr.<span class=\"property\">parent</span>.<span class=\"property\">right</span> === curr) &#123;</span><br><span class=\"line\">        curr = node.<span class=\"property\">parent</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (curr.<span class=\"property\">parent</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> curr.<span class=\"property\">parent</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"用两个栈实现队列\"><a href=\"#用两个栈实现队列\" class=\"headerlink\" title=\"用两个栈实现队列\"></a>用两个栈实现队列</h2><p><strong>前提</strong>，实现append和delete功能，完成在队尾插入和队首删除。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Stack</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span> = []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> <span class=\"title function_\">size</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">push</span>(<span class=\"params\">element</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>.<span class=\"title function_\">push</span>(element);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">pop</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>思路</strong>，栈1只允许正序存放，栈2只允许倒序存放，由于栈2的内容始终较老，因此插入总发生在栈1。删除总发生在栈2（栈2为空时除外）。JS中没有泛型的概念，所以无需考虑栈中的数据类型。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Queue</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">inverseStack</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">append</span>(<span class=\"params\">element</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>.<span class=\"title function_\">push</span>(element);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>.<span class=\"property\">size</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">inverseStack</span>.<span class=\"property\">size</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">delete</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">inverseStack</span>.<span class=\"property\">size</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>.<span class=\"property\">size</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">inverseStack</span>.<span class=\"title function_\">push</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>.<span class=\"title function_\">pop</span>());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判断是否为空</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">inverseStack</span>.<span class=\"property\">size</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">inverseStack</span>.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">warn</span>(<span class=\"string\">&quot;Empty queue!&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"用两个队列实现栈\"><a href=\"#用两个队列实现栈\" class=\"headerlink\" title=\"用两个队列实现栈\"></a>用两个队列实现栈</h2><p>前提同上。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Queue</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">queue</span> = []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> <span class=\"title function_\">size</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">in</span>(<span class=\"params\">element</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>.<span class=\"title function_\">push</span>(element);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">out</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>思路和上面类似，但不大一样。每次元素出队时，所有元素一定会转移到另一个队列中。因此，插入和删除一定发生在有元素的队列。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Stack</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">queue</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Queue</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">backupQueue</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Queue</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">append</span>(<span class=\"params\">element</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (queue.<span class=\"property\">size</span>) &#123;</span><br><span class=\"line\">      queue.<span class=\"title function_\">in</span>(element);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> queue.<span class=\"property\">size</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      backupQueue.<span class=\"title function_\">in</span>(element);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> backupQueue.<span class=\"property\">size</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">delete</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (queue.<span class=\"property\">size</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> element;</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(queue.<span class=\"property\">size</span> &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        element = queue.<span class=\"title function_\">out</span>();</span><br><span class=\"line\">        backupQueue.<span class=\"title function_\">in</span>(element);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> queue.<span class=\"title function_\">out</span>();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(backQueue.<span class=\"property\">size</span> &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> element;</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(backupQueue.<span class=\"property\">size</span>) &#123;</span><br><span class=\"line\">        element = backupQueue.<span class=\"title function_\">out</span>();</span><br><span class=\"line\">        queue.<span class=\"title function_\">in</span>(element);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> backupQueue.<span class=\"title function_\">out</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">warn</span>(<span class=\"string\">&quot;Empty stack!&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"斐波那契数列\"><a href=\"#斐波那契数列\" class=\"headerlink\" title=\"斐波那契数列\"></a>斐波那契数列</h2><p>使用递归的代码好写，但是效率低；使用循环更好。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fibonacci</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">0</span>,</span><br><span class=\"line\">      b = <span class=\"number\">1</span>,</span><br><span class=\"line\">      res = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">2</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">    [res, a, b] = [a + b, b, res];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>变种还有“青蛙跳台阶”等类最优子问题的问题。</p>\n<h2 id=\"旋转数组的最小数字\"><a href=\"#旋转数组的最小数字\" class=\"headerlink\" title=\"旋转数组的最小数字\"></a>旋转数组的最小数字</h2><p><strong>前提</strong>，将数组开头的部分元素搬运到数组的末尾，寻找最小的元素。</p>\n<p>使用二分查找，右半边递增时，最小元素在左半边。左半边递增时，最小元素在右半边。注意下面两种情况：</p>\n<ul>\n<li>数组未做旋转</li>\n<li>旋转后，头尾元素相等</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">findMin</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!arr || !.<span class=\"property\">arr</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> lindex = <span class=\"number\">0</span>,</span><br><span class=\"line\">      rindex = arr.<span class=\"property\">length</span> - <span class=\"number\">1</span>,</span><br><span class=\"line\">      res = lindex;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (arr[lindex] &gt;= arr[rindex]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rindex - lindex === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      res = rindex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    res = (lindex + rindex) / <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 特殊情况</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[res] == arr[lindex] &amp;&amp; arr[res] == arr[rindex]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> arr.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">min, val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">min</span>(min, val);</span><br><span class=\"line\">      &#125;, arr[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[res] &gt;= arr[lindex]) &#123;</span><br><span class=\"line\">      lindex = res;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr[res] &lt;= arr[rindex]) &#123;</span><br><span class=\"line\">      rindex = res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr[res];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"回溯法\"><a href=\"#回溯法\" class=\"headerlink\" title=\"回溯法\"></a>回溯法</h2><p>通常适合用递归法实现，到达某个节点时，尝试所有可能，并在满足条件时递归到下一节点。</p>\n<h3 id=\"矩阵中的路径\"><a href=\"#矩阵中的路径\" class=\"headerlink\" title=\"矩阵中的路径\"></a>矩阵中的路径</h3><p><strong>前提</strong>，判断矩阵中有无一条不交叉路径能够返回指定字符串</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">hasPath</span>(<span class=\"params\">arr, str</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!arr || !arr.<span class=\"property\">length</span> || !str) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 使用数组记录历史数据，防止交叉</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> occupied = arr.<span class=\"title function_\">map</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr[<span class=\"number\">0</span>].<span class=\"title function_\">map</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> pathMath = <span class=\"keyword\">function</span>(<span class=\"params\">i, j, str</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!str) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span> || i &gt;= arr.<span class=\"property\">length</span> || j &lt; <span class=\"number\">0</span> || i &gt;= arr[<span class=\"number\">0</span>].<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str.<span class=\"title function_\">substr</span>(<span class=\"number\">0</span>, <span class=\"number\">1</span>) == arr[i][j]) &#123;</span><br><span class=\"line\">      occupied[i][j] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> newStr = str.<span class=\"title function_\">substr</span>(<span class=\"number\">1</span>),</span><br><span class=\"line\">          res = <span class=\"title function_\">pathMath</span>(i-<span class=\"number\">1</span>, j, newStr) || <span class=\"title function_\">pathMath</span>(i+<span class=\"number\">1</span>, j, newStr) || <span class=\"title function_\">pathMath</span>(i, j-<span class=\"number\">1</span>, newStr) || <span class=\"title function_\">pathMath</span>(i, j+<span class=\"number\">1</span>, newStr);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 回溯</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!res) &#123;</span><br><span class=\"line\">        occupied[i][j] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  arr.<span class=\"title function_\">foreach</span>(<span class=\"function\">(<span class=\"params\">val, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    val.<span class=\"title function_\">foreach</span>(<span class=\"function\">(<span class=\"params\">val, j</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title function_\">pathMatch</span>(i, j, str)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"机器人的运动范围\"><a href=\"#机器人的运动范围\" class=\"headerlink\" title=\"机器人的运动范围\"></a>机器人的运动范围</h3><p><strong>前提</strong>，m行n列的矩阵，机器人从(0,0)出发不能进入数位和大于k的格子，求能到的格子个数。</p>\n<p>思路同上甚至更简单。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">gridCount</span>(<span class=\"params\">rowCount, colCount, limit</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (limit &lt; <span class=\"number\">0</span> || rowCount &lt;= <span class=\"number\">0</span> || colCount &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 使用数组记录历史数据，减少冗余查询</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> walked = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"keyword\">function</span>(<span class=\"params\">row, col</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">check</span>(row, col)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 不必还原，减少重复查询</span></span><br><span class=\"line\">      walked[row * rowCount + col] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      cnt = <span class=\"number\">1</span> + <span class=\"title function_\">count</span>(row-<span class=\"number\">1</span>, col) + <span class=\"title function_\">count</span>(row+<span class=\"number\">1</span>, col) + <span class=\"title function_\">count</span>(row, col-<span class=\"number\">1</span>) + <span class=\"title function_\">count</span>(row, col+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cnt;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">    check = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> row &gt;= <span class=\"number\">0</span> &amp;&amp; col &gt;= <span class=\"number\">0</span> &amp;&amp; !walked[row * rowCount + col] &amp;&amp; <span class=\"title function_\">digitSum</span>(row) + <span class=\"title function_\">digitSum</span>(col) &lt;= limit;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">    digitSum = <span class=\"keyword\">function</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(num &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      sum += num % <span class=\"number\">10</span>;</span><br><span class=\"line\">      num /= <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">count</span>(row, col)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"剪绳子\"><a href=\"#剪绳子\" class=\"headerlink\" title=\"剪绳子\"></a>剪绳子</h2><p><strong>前提</strong>，绳长为整数，切成若干段，使得绳长乘积最大。</p>\n<p>类似于《算法导论》里的裁切钢管。首先可以用<strong>动态规划</strong>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">cutRope</span>(<span class=\"params\">len</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (len &lt; <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> len - <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> cut = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">4</span>; i &lt;= len; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> max = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">1</span>; j &lt;= i / <span class=\"number\">2</span>; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> mul = cut[j-<span class=\"number\">1</span>] * cut[i-j-<span class=\"number\">1</span>];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (max &lt; mul) &#123;</span><br><span class=\"line\">        max = mul;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cut.<span class=\"title function_\">push</span>(max);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> cut[len-<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>经过数学推导，<code>n&gt;=5</code>时，<code>2(n-2)&gt;n</code>且<code>3(n-3)&gt;n</code>且<code>2(n-2)&gt;=3(n-3)</code>，因此有最优子问题的解法。根据<strong>贪婪算法</strong>，应该尽量多切长度为3的绳子段。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">cutRope</span>(<span class=\"params\">len</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (len &lt; <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> len - <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 多切长度为3的绳子段</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> cntOf3 = len / <span class=\"number\">3</span>,</span><br><span class=\"line\">      cntOf2 = <span class=\"number\">1</span>,</span><br><span class=\"line\">      remain = len % <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 长度为4时，应该切成两个2</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (remain === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    cntOf3--;</span><br><span class=\"line\">    cntOf2 = <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">3</span>, cntOf3) * cntOf2</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"位运算\"><a href=\"#位运算\" class=\"headerlink\" title=\"位运算\"></a>位运算</h2><p>经常用于奇技淫巧。在C风格的解法中常用。JS中应该不常出现。</p>\n<h3 id=\"二进制中1的数目\"><a href=\"#二进制中1的数目\" class=\"headerlink\" title=\"二进制中1的数目\"></a>二进制中1的数目</h3><p>通过移位操作，需要注意的是，对入参移位容易出现死循环，可以对1进行移位并比较。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">numOf1</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> cnt = <span class=\"number\">0</span>,</span><br><span class=\"line\">      flag = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(flag) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &amp; flag) &#123;</span><br><span class=\"line\">      cnt++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    flag &lt;&lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> cnt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>二进制整数减1相当于右侧0值变成1，最右侧1变成0，<strong>此时和原数做按位与，可以消掉最右侧0</strong>。利用这个特点可以进一步提高效率。这种思路可以用来解决很多二进制问题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">numOf1</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(n) &#123;</span><br><span class=\"line\">    ++cnt;</span><br><span class=\"line\">    n = (n-<span class=\"number\">1</span>) &amp; n;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> cnt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数值的整数次方\"><a href=\"#数值的整数次方\" class=\"headerlink\" title=\"数值的整数次方\"></a>数值的整数次方</h2><p><strong>前提</strong>，不得使用库函数，需要考虑大数问题</p>\n<p>用类似二分法的思想，由2到4，由4到8，由8到16。时间复杂度O(logn)。同时注意边界情况。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">pow</span>(<span class=\"params\">base, exp</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> isNeg = exp &gt; <span class=\"number\">0</span>,</span><br><span class=\"line\">      res = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (exp == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (base == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">unsignedPow</span>(<span class=\"params\">base, exp</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (exp === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (exp === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> base;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"title function_\">unsigned</span>(base, exp &gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">    res *= res;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (exp &amp; <span class=\"number\">0x1</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      res *= base;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  res = <span class=\"title function_\">unsignedPow</span>(base, <span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(exp));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isNeg) &#123;</span><br><span class=\"line\">    res = <span class=\"number\">1</span> / res;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"按顺序打印从0到最大的n位数字\"><a href=\"#按顺序打印从0到最大的n位数字\" class=\"headerlink\" title=\"按顺序打印从0到最大的n位数字\"></a>按顺序打印从0到最大的n位数字</h2><p>大数问题。自定义数据结构实现整数+1操作，或者通过递归for循环依次打印每一位数字，像下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">printNums</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">print</span>(<span class=\"params\">str, n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">1</span> === n) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str + i);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      n--;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"number\">0</span> === i) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">print</span>(str, n);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">print</span>(str + i, n);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">print</span>(<span class=\"string\">&#x27;&#x27;</span>, n);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除链表节点\"><a href=\"#删除链表节点\" class=\"headerlink\" title=\"删除链表节点\"></a>删除链表节点</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LinkedListNode</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">value, next</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">next</span> = next</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"O-1-时间删除单向链表中某节点\"><a href=\"#O-1-时间删除单向链表中某节点\" class=\"headerlink\" title=\"O(1)时间删除单向链表中某节点\"></a>O(1)时间删除单向链表中某节点</h3><p>通常思路，需要从头结点循环找到节点的上一个节点，将它的<code>next</code>属性设置删除节点的<code>next</code>。但是这么做是O(n)的复杂度。更好的方法是，借尸还魂，覆盖当前节点的<code>next</code>节点，然后重设<code>next</code>节点跳过下一节点。</p>\n<p><em>（因为JS中没有指针一说，这种模拟不能完全还原原题的问题）</em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">removeNode</span>(<span class=\"params\">head, node</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!head || !node) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!node.<span class=\"property\">next</span>) &#123; <span class=\"comment\">// 不是尾节点</span></span><br><span class=\"line\">    node.<span class=\"property\">next</span> = node.<span class=\"property\">next</span>.<span class=\"property\">next</span>;</span><br><span class=\"line\">    node.<span class=\"property\">value</span> = node.<span class=\"property\">value</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (node == head) &#123; <span class=\"comment\">// 链表只有一个节点</span></span><br><span class=\"line\">    head = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 是尾节点，只能循环</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> n = head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n.<span class=\"property\">next</span> !== node) &#123;</span><br><span class=\"line\">      n = n.<span class=\"property\">next</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    n.<span class=\"property\">next</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"表示数值的字符串\"><a href=\"#表示数值的字符串\" class=\"headerlink\" title=\"表示数值的字符串\"></a>表示数值的字符串</h2><p>考察思维的全面性。包括正数负数、小数、科学技术法都要考虑。格式遵循<code>[+|-]?(\\d+)(\\.\\d+)?([e|E][+|-]?\\d+)?</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 正则表达式</span></span><br><span class=\"line\">/\\d/.<span class=\"title function_\">test</span>(str);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 类型转换</span></span><br><span class=\"line\">!<span class=\"built_in\">isNaN</span>(+str);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>JS下解决问题并不如C++自然。下面是C++风格的解法</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">judgeUnsignedInt</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> ** str)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"type\">const</span> <span class=\"type\">char</span> * start = *str;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(**str != \\<span class=\"number\">0</span> &amp;&amp; **str &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; **str &lt;= <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">    ++(*str);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> *str &gt; start;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">judgeInt</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> ** str)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (**str === <span class=\"string\">&#x27;+&#x27;</span> || **str === <span class=\"string\">&#x27;-&#x27;</span>) &#123;</span><br><span class=\"line\">    ++(*str);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">judgeUnisignedInt</span>(str);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isNumber</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> * str)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (str == null) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 先扫描整数部分</span></span><br><span class=\"line\">  <span class=\"type\">bool</span> res = <span class=\"built_in\">judgeInt</span>(&amp;str);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (*str == <span class=\"string\">&#x27;.&#x27;</span>) &#123;</span><br><span class=\"line\">    ++str;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 扫描小数部分</span></span><br><span class=\"line\">    res = <span class=\"built_in\">judgeUnsignedInt</span>(&amp;str) || res;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (*str == <span class=\"string\">&#x27;e&#x27;</span> || *str == <span class=\"string\">&#x27;E&#x27;</span>) &#123;</span><br><span class=\"line\">    ++str;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 扫描指数部分</span></span><br><span class=\"line\">    res = <span class=\"built_in\">judgeInt</span>(&amp;str) &amp;&amp; res;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res &amp;&amp; *str == <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"调整整数数组中奇数和偶数的位置\"><a href=\"#调整整数数组中奇数和偶数的位置\" class=\"headerlink\" title=\"调整整数数组中奇数和偶数的位置\"></a>调整整数数组中奇数和偶数的位置</h2><p><strong>前提</strong>，使得奇数都位于前边，偶数都位于后边。</p>\n<p>考虑拓展性，用一个函数作为衡量指标，判断元素应该在前还是在后。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">adjustArr</span>(<span class=\"params\">arr, standard</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!arr || !arr.<span class=\"property\">length</span> || arr.<span class=\"property\">length</span> &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> start = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> end = arr.<span class=\"property\">length</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (start &lt; end) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start &lt; end &amp;&amp; !<span class=\"title function_\">standard</span>(arr[start])) &#123;</span><br><span class=\"line\">      start++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start &lt; end &amp;&amp; <span class=\"title function_\">standard</span>(arr[end])) &#123;</span><br><span class=\"line\">      end--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &lt; end) &#123;</span><br><span class=\"line\">      [arr[start], arr[end]] = [arr[end], arr[start]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在后面的标准</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">standard</span> (num) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num / <span class=\"number\">2</span> == <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"鲁棒性\"><a href=\"#鲁棒性\" class=\"headerlink\" title=\"鲁棒性\"></a>鲁棒性</h1><h2 id=\"链表的倒数第K的节点\"><a href=\"#链表的倒数第K的节点\" class=\"headerlink\" title=\"链表的倒数第K的节点\"></a>链表的倒数第K的节点</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LinkedList</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">head</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = head;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">next</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">next</span> = next;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>考虑鲁棒性：</p>\n<ul>\n<li>空数组</li>\n<li>k超过数组长度</li>\n<li>k&#x3D;0</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">findLastK</span>(<span class=\"params\">head, k</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!head || k === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> flag = head;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (--k &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (head.<span class=\"property\">next</span>) &#123;</span><br><span class=\"line\">      head = head.<span class=\"property\">next</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = head;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(flag = flag.<span class=\"property\">next</span>) &#123;</span><br><span class=\"line\">    res = res.<span class=\"property\">next</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"tip\">当一个指针不足以解决链表的问题时，通常两个指针就可以解决问题</div>\n\n<h2 id=\"链表中环的入口节点\"><a href=\"#链表中环的入口节点\" class=\"headerlink\" title=\"链表中环的入口节点\"></a>链表中环的入口节点</h2><p>思路：</p>\n<ol>\n<li>链表中有环存在时，走得快的指针将会追上走得慢的指针。</li>\n<li>确定环的长度k后，让两个指针同速，一个领先k位出发，相遇的位置即是入口</li>\n</ol>\n<p>考虑鲁棒性：</p>\n<ul>\n<li>无环时</li>\n<li>寻找相遇点的时候注意next属性是否存在</li>\n<li>头结点为环入口时</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">entryOfLoop</span>(<span class=\"params\">list</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!list || !list.<span class=\"property\">length</span> || !list.<span class=\"property\">length</span> &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 找到相遇位置</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> slow, fast, meet;</span><br><span class=\"line\">  slow = fast = list.<span class=\"property\">head</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!!fast &amp;&amp; !!slow) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fast === slow) &#123;</span><br><span class=\"line\">      meet = fast;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    slow = slow.<span class=\"property\">next</span>;</span><br><span class=\"line\">    fast = fast.<span class=\"property\">next</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!!fast) &#123;</span><br><span class=\"line\">      fast = fast.<span class=\"property\">next</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 无环存在时跳出</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!!meet) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 确定环的长度</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> length = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> tmpNode = meet.<span class=\"property\">next</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (tmpNode !== meet) &#123;</span><br><span class=\"line\">    tmpNode = tmpNode.<span class=\"property\">next</span>;</span><br><span class=\"line\">    length++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 先移动一个指针</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> first = list.<span class=\"property\">head</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    first = first.<span class=\"property\">next</span>;</span><br><span class=\"line\">    length--;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 再移动第二个指针</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> next = list.<span class=\"property\">head</span>；</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (next !== first) &#123;</span><br><span class=\"line\">    first = first.<span class=\"property\">next</span>;</span><br><span class=\"line\">    next = next.<span class=\"property\">next</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> first;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"反转链表\"><a href=\"#反转链表\" class=\"headerlink\" title=\"反转链表\"></a>反转链表</h2><p><strong>前提</strong>：反转链表并输出反转后的头节点。</p>\n<p>考虑鲁棒性：</p>\n<ul>\n<li>边界情况，如空链表或长度为1的链表</li>\n<li>反转过程中链表断裂</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverseList</span>(<span class=\"params\">list</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> node = list.<span class=\"property\">head</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> prev = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(!!node) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!node.<span class=\"property\">next</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    node.<span class=\"property\">next</span> = prev;</span><br><span class=\"line\">    prev = node;</span><br><span class=\"line\">    node = node.<span class=\"property\">next</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"合并两个排序的链表\"><a href=\"#合并两个排序的链表\" class=\"headerlink\" title=\"合并两个排序的链表\"></a>合并两个排序的链表</h2><p>类似归并排序。</p>\n<p>考虑鲁棒性：</p>\n<ul>\n<li>空链表</li>\n<li>链表长度为1</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">merge</span>(<span class=\"params\">list1, list2</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!list1) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list2;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!list2) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list1;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> node = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>();</span><br><span class=\"line\">  <span class=\"keyword\">let</span> list = <span class=\"keyword\">new</span> <span class=\"title class_\">List</span>(node);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> h1 = list1.<span class=\"property\">head</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> h2 = list2.<span class=\"property\">head</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (!!h1 || !!h2) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> next;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!!h1 &amp;&amp; !h2 || h1.<span class=\"property\">value</span> &lt; h2.<span class=\"property\">value</span>) &#123;</span><br><span class=\"line\">      next = h1.<span class=\"property\">value</span>;</span><br><span class=\"line\">      node = node.<span class=\"property\">next</span>;</span><br><span class=\"line\">      h1 = h1.<span class=\"property\">next</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      next = h2.<span class=\"property\">value</span>;</span><br><span class=\"line\">      h2 = h2.<span class=\"property\">next</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    node.<span class=\"property\">next</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(next);</span><br><span class=\"line\">    node = node.<span class=\"property\">next</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  list.<span class=\"property\">head</span> = list.<span class=\"property\">head</span>.<span class=\"property\">next</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"树的子结构\"><a href=\"#树的子结构\" class=\"headerlink\" title=\"树的子结构\"></a>树的子结构</h2><p><strong>前提</strong>：判断树A中是否能找到和树B结构一样的子树。</p>\n<p>使用递归思路更简单。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">hasSubTree</span>(<span class=\"params\">heap, needle</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">match</span>(<span class=\"params\">root1, root2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!root2) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!root1) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">match</span>(root1.<span class=\"property\">left</span>, root2.<span class=\"property\">left</span>) &amp;&amp; <span class=\"title function_\">match</span>(root1.<span class=\"property\">right</span>, root2.<span class=\"property\">right</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> root1 = heap.<span class=\"property\">root</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> root2 = needle.<span class=\"property\">root</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!root1 &amp;&amp; !root2) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root1.<span class=\"property\">value</span> === root2.<span class=\"property\">value</span>) &#123;</span><br><span class=\"line\">      res = <span class=\"title function_\">match</span>(root1, root2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!res) &#123;</span><br><span class=\"line\">      res = <span class=\"title function_\">hasSubTree</span>(root1.<span class=\"property\">left</span>, root2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!res) &#123;</span><br><span class=\"line\">      res = <span class=\"title function_\">hasSubTree</span>(root1.<span class=\"property\">right</span>, root2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"形象化\"><a href=\"#形象化\" class=\"headerlink\" title=\"形象化\"></a>形象化</h1><h2 id=\"二叉树的镜像\"><a href=\"#二叉树的镜像\" class=\"headerlink\" title=\"二叉树的镜像\"></a>二叉树的镜像</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mirrorBinaryTree</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!root) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 跳过叶子节点</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!root.<span class=\"property\">left</span> &amp;&amp; !root.<span class=\"property\">right</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  [root.<span class=\"property\">left</span>, root.<span class=\"property\">right</span>] = [root.<span class=\"property\">right</span>, root.<span class=\"property\">left</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!!root.<span class=\"property\">left</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">mirrotBinaryTree</span>(root.<span class=\"property\">left</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!!root.<span class=\"property\">right</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">mirrotBinaryTree</span>(root.<span class=\"property\">right</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对称的二叉树\"><a href=\"#对称的二叉树\" class=\"headerlink\" title=\"对称的二叉树\"></a>对称的二叉树</h2><p>即前序和对称遍历结果一致。和上面类似。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isSymmetrical</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">judge</span>(<span class=\"params\">root1, root2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root1 === <span class=\"literal\">null</span> &amp;&amp; root2 === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root1 === <span class=\"literal\">null</span> || root2 === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root1.<span class=\"property\">value</span> !== root2.<span class=\"property\">value2</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">judge</span>(root1.<span class=\"property\">left</span>, root2.<span class=\"property\">right</span>) &amp;&amp; <span class=\"title function_\">judge</span>(root1.<span class=\"property\">right</span>, root2.<span class=\"property\">left</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">judge</span>(root, root);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"顺时针打印矩阵\"><a href=\"#顺时针打印矩阵\" class=\"headerlink\" title=\"顺时针打印矩阵\"></a>顺时针打印矩阵</h2><ul>\n<li>打印一行“删去”一行，打印一列“删去”一列。</li>\n<li>最后一圈先向右再向下再向上再向左，根据顺序共有4种可能，通过if语句区分</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">printMatrix</span>(<span class=\"params\">matrix</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!matrix || !matrix.<span class=\"property\">length</span> || !matrix[<span class=\"number\">0</span>].<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> top = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> bottom = matrix.<span class=\"property\">length</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> right = (matrix[<span class=\"number\">0</span>].<span class=\"property\">length</span> ? matrix[<span class=\"number\">0</span>].<span class=\"property\">length</span> - <span class=\"number\">1</span> : <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (left &lt;= right &amp;&amp; top &lt;= bottom) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 向右</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = left; i &lt;= right; i++) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(matrix[top][i] + <span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    top++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 向下</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (top &lt;= bottom) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = top; i &lt;= bottom; i++) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(matrix[i][right] + <span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      right--;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 向左</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left &lt;= right) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = right; i &gt;= left; i--) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(matrix[bottom][i] + <span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      bottom--;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 向上</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (top &lt;= bottom) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = bottom; i &gt;= top; i--) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(matrix[i][left] + <span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      left++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>剑指offer上的思路是利用每圈的起始x和y坐标相等，判断循环终止条件，再根据条件决定一圈打印几行。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">printMatrix</span>(<span class=\"params\">matrix</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!matrix || !matrix.<span class=\"property\">length</span> || !matrix[<span class=\"number\">0</span>].<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">print</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> width = column - start - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> height = rows - start - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = start; i &lt;= width; i++) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(matrix[start][i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &lt; height) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt;= height; i++) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(matrix[i][width]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &lt; width &amp;&amp; start &lt; height) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = width-<span class=\"number\">1</span>; i &gt;= start; i--) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(matrix[height][i]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &lt; width &amp;&amp; start &lt; height - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = height-<span class=\"number\">1</span>; i &lt; start+<span class=\"number\">1</span>; i--) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(matrix[i][start]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> start = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> rows = matrix.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> column = matrix[<span class=\"number\">0</span>].<span class=\"property\">length</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (column &gt; <span class=\"number\">2</span> * start &amp;&amp; rows &gt; <span class=\"number\">2</span> * start) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">print</span>();</span><br><span class=\"line\">    ++start;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"包含min函数的栈\"><a href=\"#包含min函数的栈\" class=\"headerlink\" title=\"包含min函数的栈\"></a>包含min函数的栈</h2><p><strong>前提</strong>，设计栈的数据结构，使min、push和pop的时间复杂度都是O(1)。</p>\n<p>注意：若使用变量保存最小元素，那么在最小元素出栈后会找不到次小元素。可见只使用一个变量是不够的，为配合原始栈的结构，需要有一个辅助栈记录最小元素的位置。（画图可以很容易理解）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Stack</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span> = [];</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">minStack</span> = [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> <span class=\"title function_\">min</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> len = <span class=\"variable language_\">this</span>.<span class=\"property\">minStack</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (len ? <span class=\"variable language_\">this</span>.<span class=\"property\">minStack</span>[len-<span class=\"number\">1</span>] : <span class=\"title class_\">Infinity</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">push</span>(<span class=\"params\">element</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>.<span class=\"title function_\">push</span>(element);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">minStack</span>.<span class=\"title function_\">push</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">min</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">min</span>, element));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">pop</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">minStack</span>.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">top</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>.<span class=\"property\">length</span> ? <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>.<span class=\"property\">length</span>-<span class=\"number\">1</span>] : <span class=\"literal\">null</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"栈的压入、弹出序列\"><a href=\"#栈的压入、弹出序列\" class=\"headerlink\" title=\"栈的压入、弹出序列\"></a>栈的压入、弹出序列</h2><p><strong>前提</strong>：给定栈的压入顺序，判断某个出栈顺序是否可能</p>\n<p>通过举例具象化思考。如入栈顺序为[1, 2, 3, 4, 5]，[4, 3, 5, 2, 1]就是一个可能的例子。首先，4是第一个出栈元素，则[1,2,3]此时已经入栈，4出栈后，3位栈顶，出栈后，5不在栈内，将5入栈。剩下的5，2，1同理。因此，可以发现下面规律。</p>\n<ol>\n<li>第一个出栈元素前的入栈序列此时正在栈内</li>\n<li>之后所有的出栈元素，先在栈顶寻找，若有，则出栈；若没有，在栈外元素中寻找</li>\n<li>若找到，将其入栈，若找不到，则返回false</li>\n<li>如此循环直到栈空</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isPopOrder</span>(<span class=\"params\">push, pop</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (push.<span class=\"property\">length</span> !== pop.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!push.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 寻找当前栈内元素</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> first = pop[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> index = push.<span class=\"title function_\">indexOf</span>(first);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> stack = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (index === -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt;= index-<span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">    stack.<span class=\"title function_\">push</span>(push[i]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> rest = push.<span class=\"title function_\">slice</span>(index);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">2</span>, len = pop.<span class=\"property\">length</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = pop[i];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!push.<span class=\"property\">length</span> || push[push.<span class=\"property\">length</span>-<span class=\"number\">1</span>] !== value) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> index = rest.<span class=\"title function_\">indexOf</span>(value);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (index === -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      push.<span class=\"title function_\">push</span>(value);</span><br><span class=\"line\">      rest.<span class=\"title function_\">splice</span>(index, <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      push.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"从上到下打印二叉树\"><a href=\"#从上到下打印二叉树\" class=\"headerlink\" title=\"从上到下打印二叉树\"></a>从上到下打印二叉树</h2><p>使用队列保证先后顺序。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Queue</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">queue</span> = []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> <span class=\"title function_\">length</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">queue</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">in</span>(<span class=\"params\">element</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">queue</span>.<span class=\"title function_\">push</span>(element);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">queue</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">out</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">queue</span>.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">printTreeByTier</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!root) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> q = <span class=\"keyword\">new</span> <span class=\"title class_\">Queue</span>();</span><br><span class=\"line\">  q.<span class=\"title function_\">in</span>(root);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(q.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> node = q.<span class=\"title function_\">out</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(node.<span class=\"property\">value</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.<span class=\"property\">left</span>) &#123;</span><br><span class=\"line\">      q.<span class=\"title function_\">in</span>(node.<span class=\"property\">left</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.<span class=\"property\">right</span>) &#123;</span><br><span class=\"line\">      q.<span class=\"title function_\">in</span>(node.<span class=\"property\">right</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"进阶：分行从上到下打印二叉树\"><a href=\"#进阶：分行从上到下打印二叉树\" class=\"headerlink\" title=\"进阶：分行从上到下打印二叉树\"></a>进阶：分行从上到下打印二叉树</h3><p>和上面类似，区别在入队时需要携带层数信息。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Queue</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">queue</span> = []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> <span class=\"title function_\">length</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">queue</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">in</span>(<span class=\"params\">element</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">queue</span>.<span class=\"title function_\">push</span>(element);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">queue</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">out</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">queue</span>.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">printTreeByTier</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!root) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> tier = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> q = <span class=\"keyword\">new</span> <span class=\"title class_\">Queue</span>();</span><br><span class=\"line\">  q.<span class=\"title function_\">in</span>(&#123;</span><br><span class=\"line\">    root,</span><br><span class=\"line\">    tier,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (q.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> node = q.<span class=\"title function_\">out</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.<span class=\"property\">tier</span> !== tier) &#123;</span><br><span class=\"line\">      tier = node.<span class=\"property\">tier</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;换行&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (q.<span class=\"property\">root</span>.<span class=\"property\">left</span>) &#123;</span><br><span class=\"line\">      q.<span class=\"title function_\">in</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">root</span>: q.<span class=\"property\">root</span>.<span class=\"property\">left</span>,</span><br><span class=\"line\">        <span class=\"attr\">tier</span>: tier+<span class=\"number\">1</span>,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (q.<span class=\"property\">root</span>.<span class=\"property\">right</span>) &#123;</span><br><span class=\"line\">      q.<span class=\"title function_\">in</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">root</span>: q.<span class=\"property\">root</span>.<span class=\"property\">right</span>,</span><br><span class=\"line\">        <span class=\"attr\">tier</span>: tier+<span class=\"number\">1</span>,</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"进阶2：之字形打印二叉树\"><a href=\"#进阶2：之字形打印二叉树\" class=\"headerlink\" title=\"进阶2：之字形打印二叉树\"></a>进阶2：之字形打印二叉树</h3><p><strong>前提</strong>：第一行从左到右打印，第二行从右到左打印，以此类推。</p>\n<p>因为每层的顺序都相反，很适合栈存储。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 栈的数据结构实现略</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">printTreeByZ</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!root) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> stack1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>();</span><br><span class=\"line\">  <span class=\"keyword\">let</span> stack2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>();</span><br><span class=\"line\">  <span class=\"comment\">// 当前在哪个栈内</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> curr = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  stack1.<span class=\"title function_\">push</span>(root);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!stack1.<span class=\"title function_\">empty</span>() || !stack2.<span class=\"title function_\">empty</span>()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (curr == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> node = stack1.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(node.<span class=\"property\">value</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node.<span class=\"property\">left</span>) &#123;</span><br><span class=\"line\">        stack2.<span class=\"title function_\">push</span>(node.<span class=\"property\">left</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node.<span class=\"property\">right</span>) &#123;</span><br><span class=\"line\">        stack2.<span class=\"title function_\">push</span>(node.<span class=\"property\">right</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (stack1.<span class=\"title function_\">empty</span>()) &#123;</span><br><span class=\"line\">        curr = <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;换行&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> node = stack2.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(node.<span class=\"property\">value</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node.<span class=\"property\">right</span>) &#123;</span><br><span class=\"line\">        stack1.<span class=\"title function_\">push</span>(node.<span class=\"property\">right</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node.<span class=\"property\">left</span>) &#123;</span><br><span class=\"line\">        stack1.<span class=\"title function_\">push</span>(node.<span class=\"property\">left</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (stack2.<span class=\"title function_\">emtpy</span>()) &#123;</span><br><span class=\"line\">        curr = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;换行&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二叉搜索树的后序遍历序列\"><a href=\"#二叉搜索树的后序遍历序列\" class=\"headerlink\" title=\"二叉搜索树的后序遍历序列\"></a>二叉搜索树的后序遍历序列</h2><p><strong>前提</strong>：判断整数序列是否是某个二叉搜索树的后序遍历序列，并假设所有数字都不相同</p>\n<p>利用二叉搜索树的特点，结合后序遍历时尾元素为根节点，递归判断。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">verifySeqOfBST</span>(<span class=\"params\">seq</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!seq || seq.<span class=\"property\">length</span> &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = seq.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> root = seq[len-<span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"comment\">// 找到右子树的起点</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> rightIndex = seq.<span class=\"title function_\">findIndex</span>(<span class=\"function\">(<span class=\"params\">element</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> element &gt; root;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 右子树的节点需要都大于左节点</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (rightIndex == -<span class=\"number\">1</span> || seq.<span class=\"title function_\">slice</span>(rightIndex).<span class=\"title function_\">every</span>(<span class=\"function\">(<span class=\"params\">element</span>)=&gt;</span>&#123; <span class=\"keyword\">return</span> element &gt; root; &#125;)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 递归判断左右子树</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = rightIndex &lt;= <span class=\"number\">0</span> || <span class=\"title function_\">verifySeqOfBST</span>(seq.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, rightIndex));</span><br><span class=\"line\">  <span class=\"keyword\">let</span> right = rightIndex == -<span class=\"number\">1</span> || <span class=\"title function_\">verifySeqOfBST</span>(seq.<span class=\"title function_\">slice</span>(rightIndex));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> left &amp;&amp; right;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二叉树中和为某值的路径\"><a href=\"#二叉树中和为某值的路径\" class=\"headerlink\" title=\"二叉树中和为某值的路径\"></a>二叉树中和为某值的路径</h2><p><strong>前提</strong>：找到所有满足要求的路径</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">findPaths</span>(<span class=\"params\">root, target</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> path = [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> node = root;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 利用闭包共享变量</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"title function_\">find</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    path.<span class=\"title function_\">push</span>(node);</span><br><span class=\"line\">    sum += node.<span class=\"property\">value</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sum === target) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(path)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.<span class=\"property\">left</span>) &#123;</span><br><span class=\"line\">      node = node.<span class=\"property\">left</span>;</span><br><span class=\"line\">      <span class=\"title function_\">find</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.<span class=\"property\">right</span>) &#123;</span><br><span class=\"line\">      node = node.<span class=\"property\">right</span>;</span><br><span class=\"line\">      <span class=\"title function_\">find</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 不要忘了弹出栈顶元素</span></span><br><span class=\"line\">    path.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">find</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"分解\"><a href=\"#分解\" class=\"headerlink\" title=\"分解\"></a>分解</h1><h2 id=\"复杂链表的复制\"><a href=\"#复杂链表的复制\" class=\"headerlink\" title=\"复杂链表的复制\"></a>复杂链表的复制</h2><p><strong>前提</strong>：复杂链表中每个节点除了一个指向下个节点的指针外，还有一个指向任意节点的指针</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ComplexLinkedListNode</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">&#123;value, next, extra&#125;</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">next</span> = next;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">extra</span> = extra;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>困难在extra属性的复制，在O(n)的时间复杂度，O(1)的空间复杂度的要求下，问题可以分解成3步</p>\n<ol>\n<li>在每个原始节点后接上复制节点</li>\n<li>原样复制extra属性</li>\n<li>将复制的链表拆出来</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">copyLinkedList</span>(<span class=\"params\">head</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!head) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> node = head;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Step1: 在每个节点后添加一个复制节点</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (node) &#123;</span><br><span class=\"line\">    node.<span class=\"property\">next</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">ComplexLinkedListNode</span>()(&#123;</span><br><span class=\"line\">      <span class=\"attr\">value</span>: node.<span class=\"property\">value</span>,</span><br><span class=\"line\">      <span class=\"attr\">next</span>: node.<span class=\"property\">next</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    node = node.<span class=\"property\">next</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Step2: 复制每个节点的extra属性</span></span><br><span class=\"line\">  node = head;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (node) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这一步大大减少了时间复杂度</span></span><br><span class=\"line\">    node.<span class=\"property\">next</span>.<span class=\"property\">extra</span> = node.<span class=\"property\">extra</span>.<span class=\"property\">next</span>;</span><br><span class=\"line\">    node = node.<span class=\"property\">next</span>.<span class=\"property\">next</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Step3: 拆开两条链</span></span><br><span class=\"line\">  node = head</span><br><span class=\"line\">  <span class=\"keyword\">let</span> newNode = <span class=\"keyword\">new</span> <span class=\"title class_\">ComplexLinkedListNode</span>();</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (node) &#123;</span><br><span class=\"line\">    newNode.<span class=\"property\">next</span> = node.<span class=\"property\">next</span>;</span><br><span class=\"line\">    node.<span class=\"property\">next</span> = node.<span class=\"property\">next</span>.<span class=\"property\">next</span>;</span><br><span class=\"line\">    node = node.<span class=\"property\">next</span>;</span><br><span class=\"line\">    newNode = newNode.<span class=\"property\">next</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> newNode.<span class=\"property\">next</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二叉搜索树和双向链表\"><a href=\"#二叉搜索树和双向链表\" class=\"headerlink\" title=\"二叉搜索树和双向链表\"></a>二叉搜索树和双向链表</h2><p><strong>前提</strong>：将一个二叉搜索树转换成一个排序的双向链表，不允许新建节点。</p>\n<p>一般涉及到树结构的问题，使用递归都要更直观方便。本题中，可以把问题拆解成，将根节点和已组装好的左右双向链表组装。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">transBSTToBilink</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!root) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"title function_\">split</span> = (<span class=\"params\">root, type</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> node = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(root.<span class=\"property\">value</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = node;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> right = node;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.<span class=\"property\">left</span>) &#123;</span><br><span class=\"line\">      left = <span class=\"title function_\">split</span>(root.<span class=\"property\">left</span>, <span class=\"string\">&#x27;left&#x27;</span>);</span><br><span class=\"line\">      left.<span class=\"property\">next</span> = node;</span><br><span class=\"line\">      node.<span class=\"property\">next</span> = left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.<span class=\"property\">right</span>) &#123;</span><br><span class=\"line\">      right = <span class=\"title function_\">split</span>(root.<span class=\"property\">right</span>, <span class=\"string\">&#x27;right&#x27;</span>)</span><br><span class=\"line\">      node.<span class=\"property\">next</span> = right;</span><br><span class=\"line\">      right.<span class=\"property\">next</span> = node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 通过type区分当前是左子树还是右子树，从而返回最大点或最小点</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (type === <span class=\"string\">&#x27;left&#x27;</span> ? right : left);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">split</span>(root);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"序列化二叉树\"><a href=\"#序列化二叉树\" class=\"headerlink\" title=\"序列化二叉树\"></a>序列化二叉树</h2><p><strong>要求</strong>：实习序列化和反序列化函数</p>\n<p>通常情况需要两种遍历序列才能还原二叉树，这是因为二叉树非完全。对空缺的节点使用特殊字符，即可消除二义性，使用单一遍历序列还原二叉树。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BinaryTree</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">BinaryTree</span>.<span class=\"property\">serialize</span> = <span class=\"function\">(<span class=\"params\">root</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> str = [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"title function_\">serialize</span> = (<span class=\"params\">root</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!root) &#123;</span><br><span class=\"line\">      str.<span class=\"title function_\">push</span>(<span class=\"string\">&#x27;$&#x27;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    str.<span class=\"title function_\">push</span>(root.<span class=\"property\">value</span>);</span><br><span class=\"line\">    <span class=\"title function_\">serialize</span>(root.<span class=\"property\">left</span>);</span><br><span class=\"line\">    <span class=\"title function_\">serialize</span>(root.<span class=\"property\">right</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"title function_\">serialize</span>(root);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">BinaryTree</span>.<span class=\"property\">parse</span> = <span class=\"function\">(<span class=\"params\">str</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!str) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = str.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"title function_\">parse</span> = (<span class=\"params\">str</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str[i] === <span class=\"string\">&#x27;$&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> root = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(+str[i]);</span><br><span class=\"line\">    <span class=\"comment\">// 最后一个节点必是叶节点</span></span><br><span class=\"line\">    ++i, root.<span class=\"property\">left</span> = <span class=\"title function_\">parse</span>(str);</span><br><span class=\"line\">    ++i, root.<span class=\"property\">right</span> = <span class=\"title function_\">parse</span>(str);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">parse</span>(str);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符串的排列\"><a href=\"#字符串的排列\" class=\"headerlink\" title=\"字符串的排列\"></a>字符串的排列</h2><p><strong>前提</strong>：不考虑重复字符的问题<br><strong>要求</strong>：输入一个字符串，输出字符串中字符的所有排列</p>\n<p>此题可以用递归，《剑指offer》上的解法简单易行。JS中对字符串的限制（只读）使得代码和C风格有别。这里我们考虑输入是一个字符数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">combinations</span>(<span class=\"params\">str</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!str.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = str.<span class=\"property\">length</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">combine</span>(<span class=\"params\">comb, strs, start</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start === len - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(comb + strs[start]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = start; i &lt; len; i++) &#123;</span><br><span class=\"line\">      [strs[start], strs[i]] = [strs[i], strs[start]];</span><br><span class=\"line\">      <span class=\"comment\">// 需要通过slice方法传递复制</span></span><br><span class=\"line\">      <span class=\"title function_\">combine</span>(comb + strs[start], strs.<span class=\"title function_\">slice</span>(), start+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">combine</span>(<span class=\"string\">&#x27;&#x27;</span>, str, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"求字符串的组合（也可以叫求子集）\"><a href=\"#求字符串的组合（也可以叫求子集）\" class=\"headerlink\" title=\"求字符串的组合（也可以叫求子集）\"></a>求字符串的组合（也可以叫求子集）</h3><p>总共的解数目为$2^n$。从最低位开始，向上寻找时，有两种可能：新字符不出现，新字符出现。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">subsets</span>(<span class=\"params\">str</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!str.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">reduce</span>(<span class=\"params\">res, i</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i === str.<span class=\"property\">length</span>-<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res + str[i]);</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">reduce</span>(res+str[i], i+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"title function_\">reduce</span>(res, i+<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">reduce</span>(<span class=\"string\">&#x27;&#x27;</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输入8个数字的数组放在正方体的8个顶点，有无可能每对面对应的4个顶点和相等\"><a href=\"#输入8个数字的数组放在正方体的8个顶点，有无可能每对面对应的4个顶点和相等\" class=\"headerlink\" title=\"输入8个数字的数组放在正方体的8个顶点，有无可能每对面对应的4个顶点和相等\"></a>输入8个数字的数组放在正方体的8个顶点，有无可能每对面对应的4个顶点和相等</h3><p>相等于寻找全排列，使得a1+a2+a3+a4&#x3D;a5+a6+a7+a8，且a1+a3+a5+a7&#x3D;a2+a4+a6+a8，且a1+a2+a5+a6&#x3D;a3+a4+a7+a8。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">findComb</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = nums.<span class=\"property\">length</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">combine</span>(<span class=\"params\">nums, start</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start === len-<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"title function_\">test</span>(nums)) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(nums);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = start; i &lt; len; i++) &#123;</span><br><span class=\"line\">      [nums[start], nums[i]] = [nums[i], nums[start]];</span><br><span class=\"line\">      <span class=\"title function_\">combine</span>(nums.<span class=\"title function_\">slice</span>(), start + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums[<span class=\"number\">0</span>] + nums[<span class=\"number\">1</span>] + nums[<span class=\"number\">2</span>] + nums[<span class=\"number\">3</span>] == nums[<span class=\"number\">4</span>] + nums[<span class=\"number\">5</span>] + nums[<span class=\"number\">6</span>] + nums[<span class=\"number\">7</span>] &amp;&amp;</span><br><span class=\"line\">        nums[<span class=\"number\">0</span>] + nums[<span class=\"number\">2</span>] + nums[<span class=\"number\">4</span>] + nums[<span class=\"number\">5</span>] == nums[<span class=\"number\">1</span>] + nums[<span class=\"number\">3</span>] + nums[<span class=\"number\">5</span>] + nums[<span class=\"number\">7</span>] &amp;&amp;</span><br><span class=\"line\">        nums[<span class=\"number\">0</span>] + nums[<span class=\"number\">1</span>] + nums[<span class=\"number\">6</span>] + nums[<span class=\"number\">7</span>] == nums[<span class=\"number\">2</span>] + nums[<span class=\"number\">3</span>] + nums[<span class=\"number\">4</span>] + nums[<span class=\"number\">5</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">combine</span>(nums, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8皇后问题\"><a href=\"#8皇后问题\" class=\"headerlink\" title=\"8皇后问题\"></a>8皇后问题</h3><p>8皇后的限制条件在，不得同行同列，不得位于同一对角线。因此，为长度为8的数组初始化填入1~8，代表行数。填入的数代表列数，因为每行每列都只有一个皇后。所以全排列中，只需要删除满足下面条件的排列即可：</p>\n<ul>\n<li><code>i-j != columns[i] - columns[j]</code>且<code>j-i != columns[i] - columns[j]</code>，即不在一个对角线上</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">eightQueens</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">combine</span>(<span class=\"params\">queens, start</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start === <span class=\"number\">7</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(queens);</span><br><span class=\"line\">      count++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = start; i &lt; <span class=\"number\">8</span>; i++) &#123;</span><br><span class=\"line\">      [queens[start], queens[i]] = [queens[i], queens[start]];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title function_\">test</span>(queens, start)) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">combine</span>(queens.<span class=\"title function_\">slice</span>(), start+<span class=\"number\">1</span>);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        [queens[start], queens[i]] = [queens[i], queens[start]];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\">queens, end</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; end; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> diff = queens[end] - queens[i];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (diff == end - i || -diff == end - i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">combine</span>([<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>], <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(count);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种思路会带来重复的解，按照<a href=\"http://www.matrix67.com/blog/archives/266\">Matrix67的思路</a>，可以通过位运算求解。使用row（列占用情况），ld（左下右上对角线占用），rd（右下左上对角线占用）三个变量存储当前列的禁用情况。使用“1”表示禁用，“0”表示可用。解决n皇后的问题代码仅在10行左右。详细解释见链接。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">nQueens</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!n || n &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> limit = (<span class=\"number\">1</span> &lt;&lt; n) - <span class=\"number\">1</span>, sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">queen</span>(<span class=\"params\">row, ld, rd</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (row !== limit) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> pos = limit &amp; ~(row | ld | rd);</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (pos) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> p = pos &amp; -pos; <span class=\"comment\">// 得到最右侧可放子的位置</span></span><br><span class=\"line\">        pos -= p; <span class=\"comment\">// 除去这个位置</span></span><br><span class=\"line\">        <span class=\"title function_\">queen</span>(row|p, (ld|p) &lt;&lt; <span class=\"number\">1</span>, (rd|p) &gt;&gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> sum++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">queen</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"时间效率\"><a href=\"#时间效率\" class=\"headerlink\" title=\"时间效率\"></a>时间效率</h1><h2 id=\"数组中出现次数超过一半的数字\"><a href=\"#数组中出现次数超过一半的数字\" class=\"headerlink\" title=\"数组中出现次数超过一半的数字\"></a>数组中出现次数超过一半的数字</h2><p>思路1：超过一半的数组一定出现在中位数的位置，结合快排的思想，找到中位数<br>思路2：遍历所有数字，遇到与major相同的元素时，计数器+1，反之-1。计数器为0时，更换major。返回最后的major</p>\n<p>注意：最后需要检查数组是否有满足条件的元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">findMajor</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!nums.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> major;</span><br><span class=\"line\">  times = <span class=\"number\">0</span>;</span><br><span class=\"line\">  nums.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">num</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (times === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      major = num;</span><br><span class=\"line\">      times = <span class=\"number\">1</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (num === major) &#123;</span><br><span class=\"line\">      times++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      times--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (nums.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">sum, num</span>) =&gt;</span> &#123; <span class=\"keyword\">return</span> sum + (num === major); &#125;, <span class=\"number\">0</span>) * <span class=\"number\">2</span> &gt; nums.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> major;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"最小的k个数\"><a href=\"#最小的k个数\" class=\"headerlink\" title=\"最小的k个数\"></a>最小的k个数</h2><p>同样的两种思路：</p>\n<ol>\n<li>利用快排的中的partition，找到前k个数，时间复杂度O(n)，但是会修改数组<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">partition</span>(<span class=\"params\">arr, start, end</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (start &gt;= end) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> index = start -<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> split = arr[end];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = start; i &lt; end; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[i] &lt; split) &#123;</span><br><span class=\"line\">      index++;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (i != index) &#123;</span><br><span class=\"line\">        [arr[i], arr[index]] = [arr[index], arr[i]];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  index++;</span><br><span class=\"line\">  arr[end] = arr[index];</span><br><span class=\"line\">  arr[index] = split;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> index;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">minKNums</span>(<span class=\"params\">nums, k</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!nums || k &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (k &gt;= nums.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> start = <span class=\"number\">0</span>,</span><br><span class=\"line\">      end = nums.<span class=\"property\">length</span> - <span class=\"number\">1</span>,</span><br><span class=\"line\">      index = <span class=\"title function_\">partition</span>(nums, start, end);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(index != k-<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index &gt; k-<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      end = index - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      start = index + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    index = <span class=\"title function_\">partition</span>(nums, start, end);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(nums.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, k));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>维护一个排序的长度为k的数据容器，当容器满时，根据容器最大值更新容器，时间复杂度O(nlogk)，空间复杂度O(k)，但是在k较小时，性能很接近</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MinSet</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> <span class=\"title function_\">max</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> <span class=\"title function_\">len</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">input</span>(<span class=\"params\">element</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">remove</span>(<span class=\"params\">element</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">toString</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">minKNums</span>(<span class=\"params\">nums, k</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!nums || k &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (k &gt;= nums.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> set = <span class=\"keyword\">new</span> <span class=\"title class_\">MinSet</span>();</span><br><span class=\"line\">  nums.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">num</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (set.<span class=\"property\">len</span> === k) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (set.<span class=\"property\">max</span>.<span class=\"property\">value</span> &gt; num) &#123;</span><br><span class=\"line\">        set.<span class=\"title function_\">remove</span>(set.<span class=\"property\">max</span>);</span><br><span class=\"line\">        set.<span class=\"title function_\">input</span>(num);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      set.<span class=\"title function_\">input</span>(num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  set.<span class=\"title function_\">toString</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数据流的中位数\"><a href=\"#数据流的中位数\" class=\"headerlink\" title=\"数据流的中位数\"></a>数据流的中位数</h2><p>使用二叉树、最大堆最小堆完成。保证最大堆和最小堆的数目差不超过1即可。当然，首先要实现最大和最小堆</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">inherit</span>(<span class=\"params\">son, father</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> prototype = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(father.<span class=\"property\"><span class=\"keyword\">prototype</span></span>);</span><br><span class=\"line\">  prototype.<span class=\"property\">constructor</span> = son;</span><br><span class=\"line\">  son.<span class=\"property\">constructor</span> = prototype;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Heap</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">heap</span> = [];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Heap</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">parent</span> = <span class=\"keyword\">function</span>(<span class=\"params\">i</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (i+<span class=\"number\">1</span>) / <span class=\"number\">2</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Heap</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">left</span> = <span class=\"keyword\">function</span>(<span class=\"params\">i</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">2</span> * i + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Heap</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">right</span> = <span class=\"keyword\">function</span>(<span class=\"params\">i</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">2</span> * i + <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Heap</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">size</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">heap</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">MinHeap</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Heap</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">minify</span>(<span class=\"params\">index</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> l = <span class=\"variable language_\">this</span>.<span class=\"title function_\">left</span>(index),</span><br><span class=\"line\">        r = <span class=\"variable language_\">this</span>.<span class=\"title function_\">right</span>(index),</span><br><span class=\"line\">        size = <span class=\"variable language_\">this</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l &lt; size &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">heap</span>[l] &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">heap</span>[index]) &#123;</span><br><span class=\"line\">      i = l;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      i = index;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r &lt; size &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">heap</span>[r] &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">heap</span>[i]) &#123;</span><br><span class=\"line\">      i = r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i != index) &#123;</span><br><span class=\"line\">      [<span class=\"variable language_\">this</span>.<span class=\"property\">heap</span>[index], <span class=\"variable language_\">this</span>.<span class=\"property\">heap</span>[i]] = [<span class=\"variable language_\">this</span>.<span class=\"property\">heap</span>[i], <span class=\"variable language_\">this</span>.<span class=\"property\">heap</span>[index]];</span><br><span class=\"line\">      <span class=\"title function_\">minify</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">add</span> = <span class=\"keyword\">function</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">heap</span>.<span class=\"title function_\">push</span>(num);</span><br><span class=\"line\">    <span class=\"title function_\">minify</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">heap</span>.<span class=\"property\">length</span> / <span class=\"number\">2</span> - <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">shift</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> num = <span class=\"variable language_\">this</span>.<span class=\"property\">heap</span>.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\">    <span class=\"title function_\">minify</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">heap</span>.<span class=\"property\">length</span> / <span class=\"number\">2</span> - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">top</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">heap</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">inherit</span>(<span class=\"title class_\">MinHeap</span>, <span class=\"title class_\">Heap</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">MaxHeap</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Heap</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">maxify</span>(<span class=\"params\">index</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//... 同上</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">add</span> = <span class=\"keyword\">function</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//... 同上</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">shift</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> num = <span class=\"variable language_\">this</span>.<span class=\"property\">heap</span>.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\">    <span class=\"title function_\">maxify</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">heap</span>.<span class=\"property\">length</span> / <span class=\"number\">2</span> - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">top</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">   <span class=\"comment\">//... 同上</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 借助上面的MinHeap和MaxHeap实现 */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">DynamicArray</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">min</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">MinHeap</span>();</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">max</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">MaxHeap</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">DynamicArray</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">insert</span> = <span class=\"keyword\">function</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> minSize = <span class=\"variable language_\">this</span>.<span class=\"property\">min</span>.<span class=\"title function_\">size</span>(),</span><br><span class=\"line\">      maxSize = <span class=\"variable language_\">this</span>.<span class=\"property\">max</span>.<span class=\"title function_\">size</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (minSize === maxSize) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">min</span>.<span class=\"title function_\">add</span>(num);</span><br><span class=\"line\">    <span class=\"comment\">// 插入在最小堆，但是数字在最大堆的范围</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (maxSize &gt; <span class=\"number\">0</span> &amp;&amp; num &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">max</span>.<span class=\"title function_\">top</span>()) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">max</span>.<span class=\"title function_\">add</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">min</span>.<span class=\"title function_\">shift</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">max</span>.<span class=\"title function_\">add</span>(num);</span><br><span class=\"line\">    <span class=\"comment\">// 同理，插入在最大堆，但是数字在最小堆的范围</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (minSize &gt; <span class=\"number\">0</span> &amp;&amp; num &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">min</span>.<span class=\"title function_\">top</span>()) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">min</span>.<span class=\"title function_\">add</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">max</span>.<span class=\"title function_\">shift</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">DynamicArray</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">getMedian</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> size = <span class=\"variable language_\">this</span>.<span class=\"property\">min</span>.<span class=\"title function_\">size</span>() + <span class=\"variable language_\">this</span>.<span class=\"property\">max</span>.<span class=\"title function_\">size</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!size) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">warn</span>(<span class=\"string\">&#x27;Empty array.&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (size &amp; <span class=\"number\">0x01</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">min</span>.<span class=\"title function_\">top</span>();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">min</span>.<span class=\"title function_\">top</span>() + <span class=\"variable language_\">this</span>.<span class=\"property\">max</span>.<span class=\"title function_\">top</span>()) / <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"连续子数组的最大和\"><a href=\"#连续子数组的最大和\" class=\"headerlink\" title=\"连续子数组的最大和\"></a>连续子数组的最大和</h2><p><strong>前提</strong>：数组由正负数组成。</p>\n<p>经典的动态规划问题。用双指针的方法，采用贪婪算法，用<code>f[i]</code>表示以第i位结尾的最大和，当<code>f[i-1]&lt;=0</code>时，可以抛弃之前的和，以当前元素为<code>f[i]</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">maxSum</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!nums.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = nums.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      res = nums[i];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      res += nums[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-n整数中1出现的次数\"><a href=\"#1-n整数中1出现的次数\" class=\"headerlink\" title=\"1~n整数中1出现的次数\"></a>1~n整数中1出现的次数</h2><p>这种数学题，多半会有找规律的简单方法。普通的方法是，逐个寻找每个数字中1出现的次数，时间复杂度O(nlogn)。逐位寻找1出现的次数，再累加，时间复杂度可以降至O(logn)。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">numOf1</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">count</span>(<span class=\"params\">str</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> first = str[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> len = str.<span class=\"property\">length</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str.<span class=\"property\">length</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> first &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 第一位中1出现的次数</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> firstCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (first &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      firstCount = <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">10</span>, len-<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (first == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      firstCount = +str.<span class=\"title function_\">substr</span>(<span class=\"number\">1</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 剩下的位数可以通过排列组合计算</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> otherCount = first * (len - <span class=\"number\">1</span>) * <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">10</span>, len-<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> firstCount + otherCount + <span class=\"title function_\">count</span>(str.<span class=\"title function_\">substr</span>(<span class=\"number\">1</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> numStr = <span class=\"string\">`<span class=\"subst\">$&#123;num&#125;</span>`</span>;</span><br><span class=\"line\">  <span class=\"title function_\">count</span>(numStr);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数字序列中某一位的数字\"><a href=\"#数字序列中某一位的数字\" class=\"headerlink\" title=\"数字序列中某一位的数字\"></a>数字序列中某一位的数字</h2><p><strong>前提</strong>：数字以<code>0123456789101112131415...</code>的格式序列化</p>\n<p>需要找到规律。1位数占用10位，2位数占用180位，3位数占用2700位，……，n位数占用9 * (10 ^ n)位。通过循环确定位数后，对n取余，能知道是n位数第几个数的第几位。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">findKthDigit</span>(<span class=\"params\">k</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">countInDigits</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (n === <span class=\"number\">1</span> ? <span class=\"number\">10</span> : <span class=\"number\">9</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">10</span>, n-<span class=\"number\">1</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 第m个n位数的第k位</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">find</span>(<span class=\"params\">n, m, k</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 找到n位数的起始</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> start = <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">10</span>, n - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> num = start + m;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num / <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">10</span>, n - k - <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (k &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> digits = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (k &gt;= <span class=\"title function_\">countInDigits</span>(digits)) &#123;</span><br><span class=\"line\">    k -= <span class=\"title function_\">countInDigits</span>(digits++);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">find</span>(digits, k / digits, k % digits);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"把数组排成最小的数\"><a href=\"#把数组排成最小的数\" class=\"headerlink\" title=\"把数组排成最小的数\"></a>把数组排成最小的数</h2><p><strong>要求</strong>：拼接数组中的数，使之最小</p>\n<p>此题的思路在拓展排序的规则。当组合<code>mn &lt; nm</code>时，说明m应该在前，即元素间的比较准则是mn和nm的大小关系。注意大数问题，应该比较字符串。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">minComb</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  nums.<span class=\"title function_\">sort</span>(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"string\">&#x27;&#x27;</span> + a + b &gt; <span class=\"string\">&#x27;&#x27;</span> + b + a ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"把数字翻译成字符串\"><a href=\"#把数字翻译成字符串\" class=\"headerlink\" title=\"把数字翻译成字符串\"></a>把数字翻译成字符串</h2><p><strong>前提</strong>：0翻译成‘a’，1翻译成‘b’，逐位进行翻译，有时会有多种结果<br><strong>要求</strong>：求可能的结果数目</p>\n<p>动态规划，避免重复解决子问题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">translateCount</span>(<span class=\"params\">numStr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!numStr || +numStr &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> count;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> counts = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = numStr.<span class=\"property\">length</span> - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i === numStr.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      count[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    count = count[i+<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> comb = +(count[i] + count[i+<span class=\"number\">1</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (comb &lt;= <span class=\"number\">25</span> &amp;&amp; comb &gt;= <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">      count += (i &lt; numStr.<span class=\"property\">length</span> - <span class=\"number\">2</span> ? counts[i+<span class=\"number\">2</span>] : <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    count[i] = count;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> count[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"礼物的最大价值\"><a href=\"#礼物的最大价值\" class=\"headerlink\" title=\"礼物的最大价值\"></a>礼物的最大价值</h2><p><strong>前提</strong>：从m*n的格子中拿礼物，从左上角开始，每次向下或向右取一格，直到右下角<br><strong>要求</strong>：礼物价值总和最大</p>\n<p>和上面的思路很类似，通过循环替代递归。比带有备忘录的递归更省时间和空间。坐标是(i, j)的格子最大总和只取决于(i-1, j)和(i, j-1)。因此可以用一维数组代替二维数组，减少空间使用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getMaxValue</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!nums.<span class=\"property\">length</span> || !nums[<span class=\"number\">0</span>].<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> row = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> rows = nums.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> columns = nums[<span class=\"number\">0</span>].<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; rows; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; columns; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> up = (i &gt; <span class=\"number\">0</span> ? row[j] : <span class=\"number\">0</span>)</span><br><span class=\"line\">      <span class=\"keyword\">let</span> left = (j &gt; <span class=\"number\">0</span> ? row[j-<span class=\"number\">1</span>] : <span class=\"number\">0</span>);</span><br><span class=\"line\">      row[j] = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(left, up) + nums[i][j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> row[columns - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"最长的不包括重复字符的子字符串\"><a href=\"#最长的不包括重复字符的子字符串\" class=\"headerlink\" title=\"最长的不包括重复字符的子字符串\"></a>最长的不包括重复字符的子字符串</h2><p><strong>要求</strong>：返回字符串的长度</p>\n<p>用类似动态规划的思路，借助之前的结果递推。同时，使用Object存储对应字符上次出现的位置，可以保证O(n)的时间复杂度。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">longestSubStrWithDup</span>(<span class=\"params\">str</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!str.<span class=\"property\">length</span> || str.<span class=\"property\">length</span> &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str.<span class=\"property\">length</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> pos = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> strArr = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(str);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> maxLen = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> curLen = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  strArr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">char, num</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 此前未出现过或出现在当前最长子字符串之外</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> position = pos[char];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> position !== <span class=\"string\">&#x27;undefined&#x27;</span> || position + curLen &lt; i) &#123;</span><br><span class=\"line\">      curLen++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 出现在此前的最长子字符串中时，需要更新长度值</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (curLen &gt; maxLen) &#123;</span><br><span class=\"line\">        maxLen = curLen;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      curLen = i - position;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 更新位置</span></span><br><span class=\"line\">    pos[char] = i;</span><br><span class=\"line\">  &#125;)；</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (curLen &gt; maxLen) &#123;</span><br><span class=\"line\">    maxLen = curLen;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> maxLen;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"丑数\"><a href=\"#丑数\" class=\"headerlink\" title=\"丑数\"></a>丑数</h2><p><strong>前提</strong>：丑数是指只包含因子2、3、5的数。求给定位置的丑数</p>\n<p>普通的思路是通过循环依次判断数字是否为丑数直到找到。在允许空间消耗时，我们用数组去存储所有的丑数，并不断更新数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">uglyNum</span>(<span class=\"params\">k</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (k &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ugly = [<span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ugly2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ugly3 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ugly5 = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(count &lt; k) &#123;</span><br><span class=\"line\">    uglynums.<span class=\"title function_\">push</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">min</span>(ugly[ugly2]*<span class=\"number\">2</span>, ugly[ugly3]*<span class=\"number\">3</span>, ugly[ugly5]*<span class=\"number\">5</span>));</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ugly[ugly2]*<span class=\"number\">2</span> &lt;= ugly[count]) &#123;</span><br><span class=\"line\">      ugly2++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ugly[ugly3]*<span class=\"number\">3</span> &lt;= ugly[count]) &#123;</span><br><span class=\"line\">      ugly3++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ugly[ugly5]*<span class=\"number\">5</span> &lt;= ugly[count]) &#123;</span><br><span class=\"line\">      ugly5++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    count++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ugly.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第一个只出现一次的字符\"><a href=\"#第一个只出现一次的字符\" class=\"headerlink\" title=\"第一个只出现一次的字符\"></a>第一个只出现一次的字符</h2><p>哈希表，JavaScript中使用Object即可。第一次扫描时去除所有重复元素，第二次扫描时，打印第一个字符。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">firstUniqueChar</span>(<span class=\"params\">str</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> strArr = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(str);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> chars = &#123;&#125;;</span><br><span class=\"line\">  strArr.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">char</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!chars[char]) &#123;</span><br><span class=\"line\">      chars[char] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      chars[char]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  strArr.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">char</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (chars[char] === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> char;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>类似问题都可以用哈希表解决。</p>\n<h2 id=\"数组中的逆序对\"><a href=\"#数组中的逆序对\" class=\"headerlink\" title=\"数组中的逆序对\"></a>数组中的逆序对</h2><p>逆序对的存在是数组未排序的结果。因此使用排序算法得到交换元素的次数即可。最直观的使用冒泡排序，时间复杂度为O(n^2)。使用归并和快排可以达到O(nlogn)的时间复杂度。</p>\n<p>略。</p>\n<h2 id=\"两个链表的第一个公共节点\"><a href=\"#两个链表的第一个公共节点\" class=\"headerlink\" title=\"两个链表的第一个公共节点\"></a>两个链表的第一个公共节点</h2><p>因为链表从交汇节点后拥有相同的节点，所以，从后向前回溯，直到节点不同为止即可。时间复杂度O(m+n)，空间复杂度O(m+n)。若不使用辅助栈，空间复杂度还可降至O(1)。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">findFirstCommonNode</span>(<span class=\"params\">list1, list2</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!list1 || !list2) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 遍历list1和list2到尾节点</span></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 向前回溯直到节点不同</span></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"排序数组中查找数字（二分查找）\"><a href=\"#排序数组中查找数字（二分查找）\" class=\"headerlink\" title=\"排序数组中查找数字（二分查找）\"></a>排序数组中查找数字（二分查找）</h2><h3 id=\"排序数组中数字出现的次数\"><a href=\"#排序数组中数字出现的次数\" class=\"headerlink\" title=\"排序数组中数字出现的次数\"></a>排序数组中数字出现的次数</h3><p>思路是，查找到数字第一次出现的地方和最后一次出现的地方。通过二分法查找，数字较小时，在右半边；较大时，在左半边；相等时判断左&#x2F;右是否还有该元素。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">numOfK</span>(<span class=\"params\">arr, k</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!arr.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">findFirst</span>(<span class=\"params\">start, end</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &gt; end) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> middle = (start + end) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> median = arr[middle];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (median &lt; k) &#123;</span><br><span class=\"line\">      start = middle + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (median &gt; k) &#123;</span><br><span class=\"line\">      end = middle - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (middle &gt; <span class=\"number\">0</span> &amp;&amp; arr[middle-<span class=\"number\">1</span>] === median) &#123;</span><br><span class=\"line\">        end = middle - <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> middle;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">findFirst</span>(start, end);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">findLast</span>(<span class=\"params\">start, end</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &gt; end) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> middle = (start + end) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> median = arr[middle];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (median &lt; k) &#123;</span><br><span class=\"line\">      start = middle + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (median &gt; k) &#123;</span><br><span class=\"line\">      end = middle - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (middle &lt; arr.<span class=\"property\">length</span>-<span class=\"number\">1</span> &amp;&amp; arr[middle+<span class=\"number\">1</span>] === median) &#123;</span><br><span class=\"line\">        start = middle + <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> middle;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">findLast</span>(start, end);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> first = <span class=\"title function_\">findFirst</span>(<span class=\"number\">0</span>, arr.<span class=\"property\">length</span>-<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> last = <span class=\"title function_\">findLast</span>(<span class=\"number\">0</span>, arr.<span class=\"property\">length</span>-<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title function_\">findFirst</span>() === -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> last - first + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"寻找从0-n-1中缺少的数字\"><a href=\"#寻找从0-n-1中缺少的数字\" class=\"headerlink\" title=\"寻找从0~n-1中缺少的数字\"></a>寻找从0~n-1中缺少的数字</h3><p>数组事先排序时，借助二分法查找，时间复杂度O(logn)；未排序时，通过求和和<code>n(n-1)/2</code>求差得出（不考虑大数问题的话）。中间元素和下标相等时，在右半边寻找；不相等时，若左侧元素相等，则返回该元素，左侧元素不等时，在左半边寻找。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">findLeftNum</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = arr.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!len || len &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> right = len - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> middle = (left + right) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[middle] === middle) &#123;</span><br><span class=\"line\">      left = middle + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (middle &gt; <span class=\"number\">0</span> &amp;&amp; arr[middle-<span class=\"number\">1</span>] !== middle-<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        right = middle - <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> middle;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (left &gt; right) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> len;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数组中和下标相等的元素\"><a href=\"#数组中和下标相等的元素\" class=\"headerlink\" title=\"数组中和下标相等的元素\"></a>数组中和下标相等的元素</h3><p><strong>前提</strong>：数组元素都为整数，且单调递增。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">numsEqualsToIndex</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!nums.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>,</span><br><span class=\"line\">      right = nums.<span class=\"property\">length</span>-<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> mid = (left + right) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums[mid] === mid) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums[mid] &gt; mid) &#123;</span><br><span class=\"line\">      right = middle - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      left = middle + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二叉搜索树的第k大的节点（遍历）\"><a href=\"#二叉搜索树的第k大的节点（遍历）\" class=\"headerlink\" title=\"二叉搜索树的第k大的节点（遍历）\"></a>二叉搜索树的第k大的节点（遍历）</h2><p>利用二叉搜索树的中序遍历的特点，找到第k大的节点。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">findKthNode</span>(<span class=\"params\">root, k</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (k &lt; <span class=\"number\">1</span> || !root) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (root.<span class=\"property\">left</span>) &#123;</span><br><span class=\"line\">    res = <span class=\"title function_\">findKthNode</span>(root.<span class=\"property\">left</span>, k);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      res = root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    k--;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (root.<span class=\"property\">right</span>) &#123;</span><br><span class=\"line\">    res = <span class=\"title function_\">findKthNode</span>(root.<span class=\"property\">right</span>, k);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二叉树的深度\"><a href=\"#二叉树的深度\" class=\"headerlink\" title=\"二叉树的深度\"></a>二叉树的深度</h2><p>使用递归，比较左右子树的深度，取较大值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">treeDepth</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!root) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = <span class=\"title function_\">treeDepth</span>(root.<span class=\"property\">left</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> right = <span class=\"title function_\">treeDepth</span>(root.<span class=\"property\">right</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(left, right) + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"判断一棵树是否是平衡二叉树\"><a href=\"#判断一棵树是否是平衡二叉树\" class=\"headerlink\" title=\"判断一棵树是否是平衡二叉树\"></a>判断一棵树是否是平衡二叉树</h3><p>可以使用上面的思路，递归判断除叶节点外每个节点的左右子树深度。但是这样会重复遍历节点。但是如果使用后序遍历，就可以先遍历左右子树，再回到根节点。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isBalanceTree</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">tree</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!root) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">depth</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"attr\">flag</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = <span class=\"title function_\">tree</span>(root.<span class=\"property\">left</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> right = <span class=\"title function_\">tree</span>(root.<span class=\"property\">right</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left.<span class=\"property\">flag</span> &amp;&amp; right.<span class=\"property\">flag</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> diff = left.<span class=\"property\">depth</span> - right.<span class=\"property\">depth</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (diff &lt;= <span class=\"number\">1</span> &amp;&amp; diff &gt;= -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">          <span class=\"attr\">depth</span>: <span class=\"number\">1</span> + <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(left.<span class=\"property\">depth</span>, right.<span class=\"property\">depth</span>),</span><br><span class=\"line\">          <span class=\"attr\">flag</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">flag</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">tree</span>(root);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组中数字出现的次数（位运算）\"><a href=\"#数组中数字出现的次数（位运算）\" class=\"headerlink\" title=\"数组中数字出现的次数（位运算）\"></a>数组中数字出现的次数（位运算）</h2><h3 id=\"在数组中找到唯二两个只出现一次的元素\"><a href=\"#在数组中找到唯二两个只出现一次的元素\" class=\"headerlink\" title=\"在数组中找到唯二两个只出现一次的元素\"></a>在数组中找到唯二两个只出现一次的元素</h3><p><strong>前提</strong>：数组中其他元素都出现两次。</p>\n<p>还是使用异或，不过这次异或的结果是两个数组的异或结果。找到结果中第一位1，说明这一位两个数不同，据此将数组分成两部分，分别异或，得到最终结果。时间复杂度O(n)，空间复杂度O(1)。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">find2UniqueNums</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sum = nums.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">sum, cur</span>) =&gt;</span> sum ^ cur);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> index = sum &amp; -sum;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> nums1 = nums.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">num</span> =&gt;</span> num &amp; index);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> nums2 = nums.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">num</span> =&gt;</span> !num &amp; index);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">unique1</span>: nums1.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">sum, cur</span>) =&gt;</span> sum ^ cur);</span><br><span class=\"line\">    <span class=\"attr\">unique2</span>: nums2.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">sum, cur</span>) =&gt;</span> sum ^ cur);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在数组中找到唯一一个出现一次的数字\"><a href=\"#在数组中找到唯一一个出现一次的数字\" class=\"headerlink\" title=\"在数组中找到唯一一个出现一次的数字\"></a>在数组中找到唯一一个出现一次的数字</h3><p><strong>前提</strong>：其余数字都出现3次。</p>\n<p>使用和上面类似的思路，使用二进制表示每一个数，用数组存储各位1出现的和，累加后，将每一位数字对3取余，得到的数字就是结果的二进制表示。</p>\n<p>略</p>\n<h2 id=\"和为s的若干数字（双指针）\"><a href=\"#和为s的若干数字（双指针）\" class=\"headerlink\" title=\"和为s的若干数字（双指针）\"></a>和为s的若干数字（双指针）</h2><h3 id=\"2个数\"><a href=\"#2个数\" class=\"headerlink\" title=\"2个数\"></a>2个数</h3><p><strong>前提</strong>：数组是单调递增的。因此可以在头尾放两个指针，向中间靠拢，逼近最终结果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sumS</span>(<span class=\"params\">nums, s</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = nums.<span class=\"property\">length</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!len || len &lt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> right = len - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum = nums[left] + nums[right];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sum === s) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> [nums[left], nums[right]];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sum &lt; s) &#123;</span><br><span class=\"line\">      left++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      right--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"正数序列\"><a href=\"#正数序列\" class=\"headerlink\" title=\"正数序列\"></a>正数序列</h3><p><strong>前提</strong>：打印出和为s的<strong>连续正数序列</strong>，长度最少为1。</p>\n<p>若使用双指针，需要先确定上下界。这里的序列起始的上界为<code>n/2</code>，下界是1。然后使用类似的方法，确定起始后，后移后界求序列。时间复杂度O(n^2)。然而，实际上，确定下界后，连续正数序列和与序列长度满足函数关系<code>f(m, n) = (m + n)(n - m + 1) / 2</code>（其中m为起始值，n为截止值）。问题变成了检验后界是否满足一元二次方程组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sumSSeq</span>(<span class=\"params\">s</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (s &lt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">print</span>(<span class=\"params\">i, j</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = i; index &lt;= j; index++) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(index);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>, limit = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(s/<span class=\"number\">2</span>); i &lt;= limit; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> j = i+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (j &lt;= limit+<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> sum = (i + j) * (j - i + <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (sum &gt;= s) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sum === s) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">print</span>(i, j);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      j++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"翻转字符串（多次翻转）\"><a href=\"#翻转字符串（多次翻转）\" class=\"headerlink\" title=\"翻转字符串（多次翻转）\"></a>翻转字符串（多次翻转）</h2><h3 id=\"翻转单词的顺序\"><a href=\"#翻转单词的顺序\" class=\"headerlink\" title=\"翻转单词的顺序\"></a>翻转单词的顺序</h3><p><strong>要求</strong>：翻转一句话中所有单词的顺序。</p>\n<p>此题可以先翻转所有字符，再翻转每个单词内的字符顺序。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverseByWord</span>(<span class=\"params\">sentence</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sentence.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27; &#x27;</span>).<span class=\"title function_\">reverse</span>().<span class=\"title function_\">join</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"左旋转字符串\"><a href=\"#左旋转字符串\" class=\"headerlink\" title=\"左旋转字符串\"></a>左旋转字符串</h3><p><strong>要求</strong>：将字符串头部的若干字符转移到字符尾部。</p>\n<p>使用类似上面的思路，可以不用<code>substring</code>方法，用翻转也可实现，不过在JS中无法对字符串自由写入，法2反而不如法1。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 法1，使用substring</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">leftReverse</span>(<span class=\"params\">str, n</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!str || n &gt;= str.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> str.<span class=\"title function_\">substring</span>(n) + str.<span class=\"title function_\">substring</span>(<span class=\"number\">0</span>, n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 法2，使用reverse</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">leftReverse</span>(<span class=\"params\">str, n</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!str || n &gt;= str.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> strArr = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(str);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> strArr.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, n).<span class=\"title function_\">reverse</span>().<span class=\"title function_\">concat</span>(strArr.<span class=\"title function_\">slice</span>(n).<span class=\"title function_\">reverse</span>()).<span class=\"title function_\">reverse</span>().<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"队列的最大值（队列）\"><a href=\"#队列的最大值（队列）\" class=\"headerlink\" title=\"队列的最大值（队列）\"></a>队列的最大值（队列）</h2><h3 id=\"滑动窗口的最大值\"><a href=\"#滑动窗口的最大值\" class=\"headerlink\" title=\"滑动窗口的最大值\"></a>滑动窗口的最大值</h3><p><strong>前提</strong>：固定滑动窗口的宽度<br><strong>要求</strong>：返回窗口内的最大值组成的数组</p>\n<p>使用双端队列去维护滑动窗口内的最大值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">maxInWindow</span>(<span class=\"params\">nums, k</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!nums.<span class=\"property\">length</span> || k &gt; nums.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> queue = [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; k; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(nums[queue[queue.<span class=\"property\">length</span>-<span class=\"number\">1</span>]] &lt; nums[i]) &#123;</span><br><span class=\"line\">      queue.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    queue.<span class=\"title function_\">push</span>(i);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = k; i &lt; nums.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">push</span>(nums[queue[<span class=\"number\">0</span>]]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(nums[i] &gt;= nums[queue[queue.<span class=\"property\">length</span>-<span class=\"number\">1</span>]]) &#123;</span><br><span class=\"line\">      queue.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 出界的大值要移出</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (queue[<span class=\"number\">0</span>] &lt;= i - k) &#123;</span><br><span class=\"line\">      queue.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    queue.<span class=\"title function_\">push</span>(i);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  res.<span class=\"title function_\">push</span>(nums[queue[<span class=\"number\">0</span>]]);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"队列的最大值\"><a href=\"#队列的最大值\" class=\"headerlink\" title=\"队列的最大值\"></a>队列的最大值</h3><p><strong>要求</strong>：设计队列，使max，shift和push的时间复杂度为1。</p>\n<p>因为在push和shift操作时，队列就像上面的滑动窗口，可以用相同方法实现max。</p>\n<p>略。</p>\n<hr>\n<h1 id=\"建模能力\"><a href=\"#建模能力\" class=\"headerlink\" title=\"建模能力\"></a>建模能力</h1><h2 id=\"n个骰子的点数（化递归为循环）\"><a href=\"#n个骰子的点数（化递归为循环）\" class=\"headerlink\" title=\"n个骰子的点数（化递归为循环）\"></a>n个骰子的点数（化递归为循环）</h2><p><strong>要求</strong>：输入n，返回n个骰子朝上一面的点数之和的概率分布。</p>\n<p>使用循环的角度考虑，骰子递增时，点数和为k的可能性为k-6，k-5，k-4，……，k-1的可能性之和。因此我们可以得到下面的结果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">posibilities</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">2</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">6</span> * n; j &gt; <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">      res[j] = res.<span class=\"title function_\">slice</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(<span class=\"number\">0</span>, j-<span class=\"number\">6</span>), j).<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">sum, cur</span>) =&gt;</span> sum + (cur || <span class=\"number\">0</span>), <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>).<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">num</span> =&gt;</span> num / <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">6</span>, n));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"扑克牌中的顺子\"><a href=\"#扑克牌中的顺子\" class=\"headerlink\" title=\"扑克牌中的顺子\"></a>扑克牌中的顺子</h2><p><strong>前提</strong>：从扑克牌中随机取5张，大小王可以当做任意数字，判断是否为顺子</p>\n<p>这里我们假设传入的数组已经按照扑克牌中的大小对牌进行了排序。整体分3步，首先向数组的指定项插入数字，然后判断0的数目，最后看0的数目是否能填满<code>undefined</code>的个数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isSeq</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!nums.<span class=\"property\">length</span> || nums.<span class=\"property\">length</span> &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> numbers = [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> zeros = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> index = -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  nums.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">num</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      zeros++;</span><br><span class=\"line\">      <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!numbers[num]) &#123;</span><br><span class=\"line\">      numbers[num] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 有对子就不是顺子</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  numbers.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">num, idx</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> num !== <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">        zeros--;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (zeros-- &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          index = idx;</span><br><span class=\"line\">          <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> num !== <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">        flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> numbers.<span class=\"title function_\">slice</span>(index).<span class=\"title function_\">every</span>(<span class=\"function\"><span class=\"params\">num</span> =&gt;</span> <span class=\"keyword\">typeof</span> num === <span class=\"string\">&#x27;undefined&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"约瑟夫问题\"><a href=\"#约瑟夫问题\" class=\"headerlink\" title=\"约瑟夫问题\"></a>约瑟夫问题</h2><p>字面意义的解法就不说了。根据《剑指offer》上的递推公式，可以得到<code>f(n,m)=[f(n-1,m)+m]%n</code>。因此，可以用循环实现。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">joseph</span>(<span class=\"params\">n, m</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span> || m &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> remains = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">    remains = (remains + m) % i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> remains;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"股票的最大利润\"><a href=\"#股票的最大利润\" class=\"headerlink\" title=\"股票的最大利润\"></a>股票的最大利润</h2><p>也即起始、末尾数对最大差值区间。当遍历到<code>f[i]</code>时，寻找之前的最小值，即可得到利润，遍历整个数组即可得到最大利润，时间复杂度为O(n)。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">maxBenifit</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = nums.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!len || len &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> min = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> benifit = nums[i] - min;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> res === <span class=\"string\">&#x27;undefined&#x27;</span> || res &lt; benifit) &#123;</span><br><span class=\"line\">      res = benifit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (benifit &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      min = nums[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"不使用控制结构语句求解1-2-3-…-n\"><a href=\"#不使用控制结构语句求解1-2-3-…-n\" class=\"headerlink\" title=\"不使用控制结构语句求解1+2+3+…+n\"></a>不使用控制结构语句求解1+2+3+…+n</h2><p>使用递归等等价形式即可。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Array</span>(n).<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">sum, i</span>) =&gt;</span> sum + i, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"不用加减乘除做加法\"><a href=\"#不用加减乘除做加法\" class=\"headerlink\" title=\"不用加减乘除做加法\"></a>不用加减乘除做加法</h2><p>使用异或可以得到没有进位的结果。可以通过位与运算得到都是1的位。和异或结果异或，直到位与结果都为0为止。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sum = a ^ b,</span><br><span class=\"line\">      extra = a &amp; b;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!extra) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tmp = sum &amp; extra;</span><br><span class=\"line\">    sum = sum ^ (extra &lt;&lt; <span class=\"number\">1</span>);</span><br><span class=\"line\">    extra = tmp;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"构建乘积数组\"><a href=\"#构建乘积数组\" class=\"headerlink\" title=\"构建乘积数组\"></a>构建乘积数组</h2><p><strong>要求</strong>：给定数组A，构建数组B，其中每个元素是A中缺少对应位元素的总乘积。不能使用除法。</p>\n<p>使用两个辅助数组分别存储数组从前到后和从后到前两段元素的乘积。空间复杂度O(n)的情况下，可以在O(n)时间上得到结果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">multiArr</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!nums.<span class=\"property\">length</span> || nums.<span class=\"property\">length</span> &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> m1 = <span class=\"number\">1</span>,</span><br><span class=\"line\">      m2 = <span class=\"number\">1</span>,</span><br><span class=\"line\">      mArr1 = [],</span><br><span class=\"line\">      mArr2 = [],</span><br><span class=\"line\">      res = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">    m1 *= nums[i];</span><br><span class=\"line\">    m2 *= nums[n - i - <span class=\"number\">1</span>];</span><br><span class=\"line\">    mArr1.<span class=\"title function_\">push</span>(m1);</span><br><span class=\"line\">    mArr2.<span class=\"title function_\">unshift</span>(m2);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">push</span>(mArr1[i] * mArr2[i]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "面试",
                "JavaScript"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2017/05/19/Frontend-FAQ-part3/",
            "url": "http://shenlvmeng.github.com/blog/2017/05/19/Frontend-FAQ-part3/",
            "title": "前端常见面试问题 part 3",
            "date_published": "2017-05-19T09:07:56.000Z",
            "content_html": "<blockquote>\n<p>下面的大部分问题来自Github的这个<a href=\"https://github.com/h5bp/Front-end-Developer-Interview-Questions\">仓库</a>，排名不分先后</p>\n</blockquote>\n<h3 id=\"46-html5中元素的data-属性\"><a href=\"#46-html5中元素的data-属性\" class=\"headerlink\" title=\"46. html5中元素的data-*属性\"></a>46. html5中元素的<code>data-*</code>属性</h3><p>用来存储用户自定义数据，可以通过Element.dataset.foo的形式读取。</p>\n<h3 id=\"47-CSS在前JS在后是一定的么\"><a href=\"#47-CSS在前JS在后是一定的么\" class=\"headerlink\" title=\"47. CSS在前JS在后是一定的么\"></a>47. CSS在前JS在后是一定的么</h3><p>不。调试js，日志脚本，shim或polyfill以及动态修改整个页面style的JS代码需要放在<code>&lt;head&gt;</code>中。</p>\n<h3 id=\"48-progressive-rendering\"><a href=\"#48-progressive-rendering\" class=\"headerlink\" title=\"48. progressive rendering\"></a>48. progressive rendering</h3><p>渐进式渲染技术是一种尽量快地将渲染结果展现给用户的技术。比如懒加载，优先渲染高优先级元素等手段。目标是将用户关心的内容优先展示出来，将页面信息一点点释放给用户。</p>\n<h3 id=\"49-normalize-x2F-reset-CSS\"><a href=\"#49-normalize-x2F-reset-CSS\" class=\"headerlink\" title=\"49. normalize&#x2F;reset CSS\"></a>49. normalize&#x2F;reset CSS</h3><p><a href=\"https://www.zhihu.com/question/20094066\">知乎</a>中一段说明写得太好，这里摘录下来。</p>\n<blockquote>\n<p>CSS Reset 是革命党，CSS Reset 里最激进那一派提倡不管你小子有用没用，通通给我脱了那身衣服，凭什么你 body 出生就穿一圈 margin，凭什么你姓 h 的比别人吃得胖，凭什么你 ul 戴一胳膊珠子。于是 *{margin:0;} 等等运动，把人家全拍扁了。看似是众生平等了，实则是浪费了资源又占不到便宜，有求于人家的时候还得贱贱地给加回去，实在需要人家的默认样式了怎么办？人家锅都扔炉子里烧了，自己看着办吧。</p>\n<p>Normalize.css 是改良派。他们提倡，各个元素都有其存在的道理，简单粗暴地一视同仁是不好的。body 那一圈确实挤压了页面的生存空间，那就改掉。士农工商，谁有谁的作用，给他们制定个规范，确保他们在任何浏览器里都干好自己的活儿。</p>\n</blockquote>\n<p>Normalize.css是一种CSS reset的替代方案。Reset清除了所有浏览器默认样式，强调不同浏览器间的一致性。但是在我们需要浏览器默认样式时，就需要自己重头再来。Normalize是两位设计者研究不同浏览器默认样式差异后，设计的弥补浏览器bug保证一致性的CSS。现在大多数的网站已经抛弃了Reset.css而选择Normalize.css。</p>\n<h3 id=\"50-BFC是什么\"><a href=\"#50-BFC是什么\" class=\"headerlink\" title=\"50. BFC是什么\"></a>50. BFC是什么</h3><p>BFC意为块格式化上下文（block formatting context），BFC表示一个区域，在区域内的所有子元素共同构成一个块级上下文。有4中手段可以触发BFC：</p>\n<ul>\n<li>position: 不为static和relative</li>\n<li>display: table-cell，table-caption，inline-block，flex，inline-flex</li>\n<li>float: 不为none</li>\n<li>overflow: 不为visible</li>\n</ul>\n<p>相对来说通过<code>overflow</code>属性触发BFC对已有内容影响最小。利用BFC可以实现很多特性：</p>\n<ul>\n<li>消除box间margin的collapse现象</li>\n<li>包裹浮动元素，防止高度collapse</li>\n<li>BFC不与其他元素相交叉，避免文字围绕图片，实现多栏布局</li>\n</ul>\n<h3 id=\"51-清除浮动的一些手段\"><a href=\"#51-清除浮动的一些手段\" class=\"headerlink\" title=\"51. 清除浮动的一些手段\"></a>51. 清除浮动的一些手段</h3><ul>\n<li>在浮动元素后创建一个空的<code>div</code>标签，为之设置<code>clear: both</code></li>\n<li>触发BFC，一般通过<code>overflow</code>属性触发</li>\n<li>使用伪类<code>:after</code>，设置<code>clear: both</code></li>\n</ul>\n<h3 id=\"52-CSS-sprites怎么实现和优缺点\"><a href=\"#52-CSS-sprites怎么实现和优缺点\" class=\"headerlink\" title=\"52. CSS sprites怎么实现和优缺点\"></a>52. CSS sprites怎么实现和优缺点</h3><p>将多张小图拼成大图后，通过<code>background-image</code>和<code>background-position</code>更改背景。优点是省流量，更换图标整体风格快；缺点是添加新图片麻烦。</p>\n<h3 id=\"53-图片替代方案\"><a href=\"#53-图片替代方案\" class=\"headerlink\" title=\"53. 图片替代方案\"></a>53. 图片替代方案</h3><p>图片替代指使用图片替代文字，同时保证图片可读，通常用于Logo。有下面几种方案：</p>\n<ul>\n<li>display: none + background-image</li>\n<li>text-ident: 9999px + background-image</li>\n<li>margin-left: -9999px + background-image (盒模型很大，低效)</li>\n<li>img alt属性</li>\n<li>font-size或color: #fff</li>\n</ul>\n<h3 id=\"54-解决browser-specific问题\"><a href=\"#54-解决browser-specific问题\" class=\"headerlink\" title=\"54. 解决browser-specific问题\"></a>54. 解决browser-specific问题</h3><p>写patches（独立的CSS文件）处理</p>\n<h3 id=\"55-如何面对低等级浏览器\"><a href=\"#55-如何面对低等级浏览器\" class=\"headerlink\" title=\"55. 如何面对低等级浏览器\"></a>55. 如何面对低等级浏览器</h3><p>polyfill，graceful degration</p>\n<h3 id=\"56-预处理语言的优缺点\"><a href=\"#56-预处理语言的优缺点\" class=\"headerlink\" title=\"56. 预处理语言的优缺点\"></a>56. 预处理语言的优缺点</h3><p>优点：更加友善，更好的特性，语法糖<br>缺点：需要编译，应用场景局限</p>\n<h3 id=\"57-display有哪些可选值\"><a href=\"#57-display有哪些可选值\" class=\"headerlink\" title=\"57. display有哪些可选值\"></a>57. display有哪些可选值</h3><ul>\n<li>none</li>\n<li>inherit</li>\n<li>initial</li>\n<li>unset</li>\n<li>block</li>\n<li>inline</li>\n<li>inline-block</li>\n<li>flow</li>\n<li>table</li>\n<li>flex</li>\n<li>grid</li>\n<li>list-item</li>\n<li>table-row-group</li>\n<li>table-row</li>\n<li>table-header-group</li>\n<li>table-footer-group</li>\n<li>table-cell</li>\n<li>table-column-group</li>\n<li>table-column</li>\n<li>table-caption</li>\n<li>inline-flex</li>\n<li>inline-grid</li>\n<li>inline-table</li>\n<li>inline-list-item</li>\n</ul>\n<h3 id=\"58-translate和absolute的选择\"><a href=\"#58-translate和absolute的选择\" class=\"headerlink\" title=\"58. translate和absolute的选择\"></a>58. translate和absolute的选择</h3><p>两者并无优劣之分。只有应用场景的不同。translate可以实现复杂的位移和变形，absolute用在固定的定位时更方便</p>\n<h3 id=\"59-视觉上隐藏一个元素\"><a href=\"#59-视觉上隐藏一个元素\" class=\"headerlink\" title=\"59. 视觉上隐藏一个元素\"></a>59. 视觉上隐藏一个元素</h3><ol>\n<li>position: fix + left: -9999px</li>\n<li>clip + width&#x2F;height + overflow</li>\n<li>visibility: hidden</li>\n</ol>\n<h3 id=\"60-grid-system\"><a href=\"#60-grid-system\" class=\"headerlink\" title=\"60. grid system\"></a>60. grid system</h3><p>除开最新的Grid布局。可以通过<code>inline-block + margin</code>实现。grid布局目前支持还较差。<a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/\">这里</a>是一篇很不错的介绍。</p>\n<p><img src=\"/blog/blog/images/grid-support.png\"></p>\n<h3 id=\"61-高效的CSS写法\"><a href=\"#61-高效的CSS写法\" class=\"headerlink\" title=\"61. 高效的CSS写法\"></a>61. 高效的CSS写法</h3><p><a href=\"https://css-tricks.com/css-style-guides/\">这里</a>有一堆CSS编码风格。总体来说，要注意</p>\n<ul>\n<li>避免全局选择</li>\n<li>让选择器更加具体化</li>\n<li>减少不必要的选择器</li>\n<li>减少选择器的过深嵌套</li>\n<li>尽可能少使用表达式（即calc, rgba这些）</li>\n<li>CSS放在头部</li>\n</ul>\n<h3 id=\"62-CSS匹配顺序\"><a href=\"#62-CSS匹配顺序\" class=\"headerlink\" title=\"62. CSS匹配顺序\"></a>62. CSS匹配顺序</h3><p>先构建DOM树，再从右至左地匹配CSS选择器</p>\n<h3 id=\"63-盒模型\"><a href=\"#63-盒模型\" class=\"headerlink\" title=\"63. 盒模型\"></a>63. 盒模型</h3><p>DOM元素以盒的形式呈现，包裹住真正的内容，有margin&#x2F;border&#x2F;padding&#x2F;content四部分，width在默认情况下仅指content部分的宽度，height同理。若想改变盒模型，可以设置<code>box-sizing</code>属性</p>\n<h3 id=\"64-flex\"><a href=\"#64-flex\" class=\"headerlink\" title=\"64. flex\"></a>64. flex</h3><p>flex是弹性布局。借助flex布局，可以很轻松地实现居中置右等使用默认方法难以实现的效果。flex布局有两个轴：主轴和交叉轴。元素在主轴方向上排布，在位置不够时，会沿交叉轴推挤到下一行或下一列。flex相关的CSS属性同时针对容器和项目。（下方加粗为默认值）</p>\n<p>针对容器的属性有</p>\n<ul>\n<li><code>flex-direction</code> 主轴方向。可选<strong>row</strong>&#x2F;column&#x2F;reverse</li>\n<li><code>flex-wrap</code> 换行选项。可选<strong>nowrap</strong>&#x2F;wrap&#x2F;wrap-reverse</li>\n<li><code>flex-flow</code> 综合上面两个选项，如row wrap</li>\n<li><code>justify-content</code> 主轴上对齐方式。可选<strong>flex-start</strong>&#x2F;flex-end&#x2F;center&#x2F;space-between&#x2F;space-around</li>\n<li><code>align-items</code>交叉轴对齐方式。可选flex-start&#x2F;flex-end&#x2F;center&#x2F;<strong>stretch</strong>&#x2F;baseline</li>\n<li><code>align-contents</code>主轴间对齐方式。可选<strong>flex-start</strong>&#x2F;end&#x2F;center&#x2F;space-between&#x2F;space-around&#x2F;stretch</li>\n</ul>\n<p>针对项目的属性有</p>\n<ul>\n<li><code>order</code> 项目顺序，默认按照书写顺序排列</li>\n<li><code>flex-grow</code> 当容器主轴上长度足够时，该项目在主轴方向上的长度，默认为1，项目间按照该值比例分配</li>\n<li><code>flex-shrink</code> 当容器主轴上长度不够时，类似<code>flex-grow</code>处理</li>\n<li><code>flex-basis</code> 容器默认的主轴方向长度，也按比例分配</li>\n<li><code>align-self</code> 该项目的对齐方式</li>\n</ul>\n<h3 id=\"65-适应式-x2F-响应式布局\"><a href=\"#65-适应式-x2F-响应式布局\" class=\"headerlink\" title=\"65. 适应式&#x2F;响应式布局\"></a>65. 适应式&#x2F;响应式布局</h3><p>responsive：响应式布局，使用同一种布局响应浏览器窗口的连续变化<br>adaptive：适应式布局，在视口特定大小时改变外观或样式，是离散的</p>\n<h3 id=\"66-DOM事件代理，冒泡和捕获两阶段\"><a href=\"#66-DOM事件代理，冒泡和捕获两阶段\" class=\"headerlink\" title=\"66. DOM事件代理，冒泡和捕获两阶段\"></a>66. DOM事件代理，冒泡和捕获两阶段</h3><p>DOM事件代理是指，在DOM2级标准中，事件触发有捕获和冒泡两阶段，所以可以将事件监听器绑定在父节点上，减少EventListener的数目。细节可以参见之前做过的一则<a href=\"https://shenlvmeng.github.io/blog/2017/03/20/domevent-elementsize-mediatag/\">笔记</a>。</p>\n<h3 id=\"67-null-nudefined-undeclared三者的区别\"><a href=\"#67-null-nudefined-undeclared三者的区别\" class=\"headerlink\" title=\"67. null, nudefined, undeclared三者的区别\"></a>67. null, nudefined, undeclared三者的区别</h3><p><strong>null</strong>: 是Object类型，表示空对象，多用来表示还未赋值的对象<br><strong>undefined</strong>: 是基础类型，表示没有定义的变量或属性<br><strong>undecided</strong>: 只是一种称呼，表示没有用<code>var</code>, <code>const</code>或<code>let</code>声明的变量，默认为全局变量，应该避免出现这种情况</p>\n<h3 id=\"68-匿名函数的应用场景\"><a href=\"#68-匿名函数的应用场景\" class=\"headerlink\" title=\"68. 匿名函数的应用场景\"></a>68. 匿名函数的应用场景</h3><p>主要用作返回值或输入参数。</p>\n<h3 id=\"69-host-object和native-object的区别\"><a href=\"#69-host-object和native-object的区别\" class=\"headerlink\" title=\"69. host object和native object的区别\"></a>69. host object和native object的区别</h3><p>前者是用户定义的对象类型，后者是环境自带的原生对象。尽量避免修改native object（包括增删改）。</p>\n<h3 id=\"70-Function-prototype-bind的使用场景\"><a href=\"#70-Function-prototype-bind的使用场景\" class=\"headerlink\" title=\"70. Function.prototype.bind的使用场景\"></a>70. <code>Function.prototype.bind</code>的使用场景</h3><p>在setTimeout和listener handler中最常用到</p>\n<h3 id=\"71-feature-detection-x2F-feature-inference-x2F-UA\"><a href=\"#71-feature-detection-x2F-feature-inference-x2F-UA\" class=\"headerlink\" title=\"71. feature detection&#x2F;feature inference&#x2F;UA\"></a>71. feature detection&#x2F;feature inference&#x2F;UA</h3><p>由于浏览器之间有各自的特性差异，这三种手段用于保证代码在浏览器间的兼容性。</p>\n<ul>\n<li>feature detection 检测特性是否存在再使用，比较保险科学</li>\n<li>feature inference 通过某特性是否存在推断另一特性是否存在，有风险，避免使用</li>\n<li>UA 直接通过header中的User Agent来得到浏览器信息，建议迫不得已不使用</li>\n</ul>\n<h3 id=\"72-AJAX技术的优劣\"><a href=\"#72-AJAX技术的优劣\" class=\"headerlink\" title=\"72. AJAX技术的优劣\"></a>72. AJAX技术的优劣</h3><p>优：用户体验好，局部刷新速度快，可以用于实现界面和数据分离<br>劣：相对来说较难调试，需要解决跨域问题，搜索引擎支持即SEO弱，会遇到移动端支持问题</p>\n<h3 id=\"73-JS-templating\"><a href=\"#73-JS-templating\" class=\"headerlink\" title=\"73. JS templating\"></a>73. JS templating</h3><p>JS中的模板技术，如在backbone中使用的underscore的_.template方法。在<a href=\"https://github.com/xtemplate/xtemplate\">xtemplate</a>支持下，也可以在页面中指定<code>&lt;script type=&quot;x-template&quot;&gt;</code>的形式声明，</p>\n<h3 id=\"74-如何理解不要改动built-in特性\"><a href=\"#74-如何理解不要改动built-in特性\" class=\"headerlink\" title=\"74. 如何理解不要改动built-in特性\"></a>74. 如何理解不要改动built-in特性</h3><p>浏览器和标准都是在不断变化的，此刻对built-in特性做的修改在之后浏览器或标注的呢更新后可能会埋下很深的坑。</p>\n<h3 id=\"75-如何区分-和\"><a href=\"#75-如何区分-和\" class=\"headerlink\" title=\"75. 如何区分[]和{}\"></a>75. 如何区分[]和{}</h3><ul>\n<li>Object.Prototype.toString.call()</li>\n<li>[].concat</li>\n<li>instanceof</li>\n<li>ES6中新增的方法Array.isArray</li>\n</ul>\n<h3 id=\"76-tenary-operator\"><a href=\"#76-tenary-operator\" class=\"headerlink\" title=\"76. tenary operator\"></a>76. tenary operator</h3><p>JS中唯一的三元操作符</p>\n<h3 id=\"77-DOM中attributes和properties的区别\"><a href=\"#77-DOM中attributes和properties的区别\" class=\"headerlink\" title=\"77. DOM中attributes和properties的区别\"></a>77. DOM中attributes和properties的区别</h3><p>节点的特性（attributes）用<code>Attr</code>类型表示。直观上讲，特性就是元素attributes属性中的节点，即在tag中声明的各特性名，以下面的标签为例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;John&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>该DOM节点有两个特性：<code>type</code>和<code>value</code>。<code>Attr</code>也是<code>Node</code>的一种，<code>nodeType</code>为2，<code>Attr</code>对象有三个属性</p>\n<ul>\n<li><code>name</code> 特性名称</li>\n<li><code>value</code> 特性的值</li>\n<li><code>specified</code> 特性是否指定在代码中，抑或是默认的</li>\n</ul>\n<p>节点的属性（properties）则指对应的DOM对象的属性，不论是继承自<code>Node</code>或是<code>Element</code>类型的，还是自身类型自带的。比如上面同样的例子，该DOM节点具有<code>children</code>, <code>childNodes</code>, <code>className</code>等。</p>\n<p>节点的属性和特性会有重合的部分，如<code>id</code>, <code>type</code>等，因DOM节点而异。上面的例子里，attribute中的<code>value</code>指声明在标签上的value默认值，而properties中的<code>value</code>则指该input标签当前的内容。</p>\n<h3 id=\"78-quot-use-strict-quot\"><a href=\"#78-quot-use-strict-quot\" class=\"headerlink\" title=\"78. &quot;use strict&quot;;\"></a>78. <code>&quot;use strict&quot;;</code></h3><p>严格模式在ES5中引入，通过直接定义一个不赋给任何变量的上述字符串进入。可以选择在全局或是函数作用域内开启。</p>\n<ul>\n<li>严格模式下对默认模式下会静默出错的代码显式报错</li>\n<li>严格模式下禁止不合理的行为，如声明了两个一样的属性名</li>\n<li>严格模式还淘汰了一些属性，如<code>arguments.callee</code>和<code>arguments.caller</code>; 同时，限制一些不安全的使用，如<code>with</code>和<code>eval</code></li>\n<li>严格模式抑制了<code>this</code>的值</li>\n<li>严格模式下，对未来版本可能用到的保留字禁止用户访问</li>\n</ul>\n<p>不过，由于严格模式下代码的解析规则会不大一样，建议只在需要测试的特定函数内开启严格模式，</p>\n<h3 id=\"79-ready和load-event的区别\"><a href=\"#79-ready和load-event的区别\" class=\"headerlink\" title=\"79. ready和load event的区别\"></a>79. ready和load event的区别</h3><ul>\n<li>ready在DOM元素加载完成后触发</li>\n<li>load在页面所有资源请求完成后触发（包括图片、视频、音频等）</li>\n</ul>\n<h3 id=\"80-SPA的SEO优化\"><a href=\"#80-SPA的SEO优化\" class=\"headerlink\" title=\"80. SPA的SEO优化\"></a>80. SPA的SEO优化</h3><p>采用预渲染技术，或为爬虫专门准备静态页面</p>\n<h3 id=\"81-event-loop，call-stack和task-queue\"><a href=\"#81-event-loop，call-stack和task-queue\" class=\"headerlink\" title=\"81. event loop，call stack和task queue\"></a>81. event loop，call stack和task queue</h3><p>见这篇<a href=\"https://shenlvmeng.github.io/blog/2017/02/27/event-loop/\">笔记</a>。</p>\n<h3 id=\"82-JavaScript中的对象和继承\"><a href=\"#82-JavaScript中的对象和继承\" class=\"headerlink\" title=\"82. JavaScript中的对象和继承\"></a>82. JavaScript中的对象和继承</h3><p>见这篇<a href=\"https://shenlvmeng.github.io/blog/2017/03/13/js-object/\">笔记</a>。</p>\n<p>不过，在ES6中引入了强类型OOP语言中传统的对象和继承语法。</p>\n<ul>\n<li>使用<code>class</code>关键字定义类，类中用<code>constructor</code>定义构造函数，使用<code>public</code>和<code>private</code>修饰成员级别</li>\n<li>可以在成员前指定<code>get</code>和<code>set</code>为成员指定setter和getter函数</li>\n<li>通过<code>extends</code>实现继承</li>\n</ul>\n<h3 id=\"83-promise\"><a href=\"#83-promise\" class=\"headerlink\" title=\"83. promise\"></a>83. promise</h3><p>见之前做过的一篇<a href=\"https://shenlvmeng.github.io/blog/2017/03/29/javascript-async-programming-1/\">笔记</a>。</p>\n<h3 id=\"84-提升有滚动条时的动画渲染性能\"><a href=\"#84-提升有滚动条时的动画渲染性能\" class=\"headerlink\" title=\"84. 提升有滚动条时的动画渲染性能\"></a>84. 提升有滚动条时的动画渲染性能</h3><p>在CSS中为<code>will-change</code>属性指定动画要改变的CSS属性，参见<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/will-change\">MDN上的介绍</a>。</p>\n<h3 id=\"85-layout-painting-composition\"><a href=\"#85-layout-painting-composition\" class=\"headerlink\" title=\"85. layout, painting, composition\"></a>85. layout, painting, composition</h3><p>浏览器解析，绘制，组合网页的过程。DOM操作可能会触发回流（reflow）或重绘（repainting），后者代价更小，建议减少频繁的DOM操作</p>\n<h3 id=\"86-一些HTTP-1-1的header\"><a href=\"#86-一些HTTP-1-1的header\" class=\"headerlink\" title=\"86. 一些HTTP 1.1的header\"></a>86. 一些HTTP 1.1的header</h3><ul>\n<li><code>Accept</code> 接受文件的类型</li>\n<li><code>Accept-Charset</code>&#x2F;<code>Accept-Encoding</code> 可以接受的文件字符集和编码</li>\n<li><code>Age</code> 从缓存实体产生到现在经历的时间</li>\n<li><code>Allow</code> 允许使用的HTTP方法</li>\n<li><code>Cache-control</code> 使用的缓存策略</li>\n<li><code>Content-Encoding</code> 响应体使用编码</li>\n<li><code>Content-Lenght</code> 响应体长度</li>\n<li><code>Content-Range</code> 响应体范围，用于部分下载（服务端的返回）</li>\n<li><code>Content-Type</code> 响应的媒体类型</li>\n<li><code>Date</code> 消息的发送时间</li>\n<li><code>Etag</code> html实体的唯一标识，用于缓存对比</li>\n<li><code>Expires</code> 缓存实体过期时间</li>\n<li><code>Host</code> 服务器的主机名，通常是请求资源的URL</li>\n<li><code>Location</code> 重定向的地址</li>\n<li><code>Pragma</code> 用于向后兼容还没有<code>Cache-Control</code>的HTTP1.0版本，通常只用作<code>Pragma: no-cache</code></li>\n<li><code>Range</code> 请求资源的部分内容，一般用在多线程下载（客户端发起）</li>\n<li><code>Referer</code> 当前请求从哪个地址发起</li>\n<li><code>Server</code> 服务器端使用的软件信息</li>\n<li><code>Transfer-Encoding</code> 传输内容所用的协议类型</li>\n<li><code>Upgrade</code> 切换到额外的通信协议，服务端需要返回101状态码，并指定升级的协议名</li>\n<li><code>User-Agent</code> 请求发起自什么终端</li>\n<li><code>Vary</code> 列出一个相应字段列表，告知服务器当URL对应不同版本资源时，如何选择合适版本</li>\n<li><code>Via</code> 用在proxies中，表示使用的协议，版本以及起始端</li>\n</ul>\n<p>更多header参考<a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html\">W3C文档</a></p>\n<h3 id=\"87-HTTP-actions\"><a href=\"#87-HTTP-actions\" class=\"headerlink\" title=\"87. HTTP actions\"></a>87. HTTP actions</h3><ul>\n<li><code>OPTIONS</code> 描述目标资源的通信选项</li>\n<li><code>GET</code> 获取数据</li>\n<li><code>HEAD</code> 类似GET，但是没有响应体</li>\n<li><code>POST</code> 将实体提交给服务器</li>\n<li><code>PUT</code> 用请求payload替换目标资源</li>\n<li><code>PATCH</code> 对资源部分修改</li>\n<li><code>DELETE</code> 删除指定资源</li>\n<li><code>TRACE</code> 沿着到目标资源的路径执行一个消息环回测试</li>\n<li><code>CONNECT</code> 建立一个到由目标资源标识的服务器的隧道</li>\n</ul>\n<h3 id=\"88-JS内存泄漏\"><a href=\"#88-JS内存泄漏\" class=\"headerlink\" title=\"88. JS内存泄漏\"></a>88. JS内存泄漏</h3><ul>\n<li>意外的全局变量</li>\n<li>被遗忘的<code>setInterval</code></li>\n<li>脱离文档的DOM引用</li>\n<li>不合理的闭包</li>\n</ul>\n<p>Chrome下可以通过Timeline&#x2F;Profile选项卡查看内存使用情况，避免上述情况出现。</p>\n<h3 id=\"89-rem，em，px\"><a href=\"#89-rem，em，px\" class=\"headerlink\" title=\"89. rem，em，px\"></a>89. rem，em，px</h3><p>见<a href=\"https://shenlvmeng.github.io/blog/2017/05/17/Frontend-FAQ-part2/index.html#question24\">Question 24</a>。</p>\n<h3 id=\"90-JS数据类型\"><a href=\"#90-JS数据类型\" class=\"headerlink\" title=\"90. JS数据类型\"></a>90. JS数据类型</h3><p>基础类型：</p>\n<ul>\n<li>Undefined</li>\n<li>Null</li>\n<li>Number（包括NaN Infinity）</li>\n<li>Boolean</li>\n<li>String</li>\n</ul>\n<p>其余都是引用类型。更多参加<a href=\"https://shenlvmeng.github.io/blog/2017/03/01/js-type-and-equal-judgement/\">这里</a>。</p>\n<h3 id=\"91-Object-assign和Object-create\"><a href=\"#91-Object-assign和Object-create\" class=\"headerlink\" title=\"91. Object.assign和Object.create\"></a>91. <code>Object.assign</code>和<code>Object.create</code></h3><ul>\n<li><code>Object.assign</code> 将传入变量的<strong>可枚举属性</strong>和已有属性合并</li>\n<li><code>Object.create</code> 创建一个以传入对象为<code>__proto__</code>的对象</li>\n</ul>\n<h3 id=\"92-回流和重绘\"><a href=\"#92-回流和重绘\" class=\"headerlink\" title=\"92. 回流和重绘\"></a>92. 回流和重绘</h3><p>还是参见<a href=\"http://taligarsiel.com/Projects/howbrowserswork1.htm\">how browsers work</a>。为了减少回流，有下面一些推荐实践：</p>\n<ul>\n<li>一次性改变样式，如用<code>class</code></li>\n<li><code>requestAnimationFrame</code>推迟回流</li>\n<li>虚拟DOM</li>\n<li>使用<code>documentFragment</code></li>\n</ul>\n<h3 id=\"93-排序算法\"><a href=\"#93-排序算法\" class=\"headerlink\" title=\"93. 排序算法\"></a>93. 排序算法</h3><p>稳定：插冒归基；不稳定：快选堆希。实现略。</p>\n<h3 id=\"94-CSS-x2F-JS跨浏览器兼容问题\"><a href=\"#94-CSS-x2F-JS跨浏览器兼容问题\" class=\"headerlink\" title=\"94. CSS&#x2F;JS跨浏览器兼容问题\"></a>94. CSS&#x2F;JS跨浏览器兼容问题</h3><ul>\n<li>明确产品的兼容版本方案，选择合适的技术栈</li>\n<li>normalize.css polyfill&#x2F;shim保证兼容</li>\n<li>在符合W3C标准浏览器下表现良好，旧浏览器下保证可用性，提示升级即可</li>\n<li>CSS hack（特殊的选择器，条件样式表）</li>\n</ul>\n<h3 id=\"95-xss和csrf的防御\"><a href=\"#95-xss和csrf的防御\" class=\"headerlink\" title=\"95. xss和csrf的防御\"></a>95. xss和csrf的防御</h3><p>XSS（Cross Site Script，跨站脚本攻击），分为反射式，存储式，前者只对特定用户生效，如存储在个人资料中的脚本，后者对访问网站的所有用户生效，如攻击站点本身代码。防御转义时，不仅要监测<code>&lt;script&gt;</code>标签，对可以书写JavaScript的<code>href</code>属性，<code>src</code>属性，甚至<code>img</code>的<code>onerror</code>等事件也要做防御。</p>\n<p>CSRF（Cross-site Request Forgery，跨站请求伪造），意为恶意网站通过用户存储的cookie，模拟向其他网站发起“合法”请求。需要注意下面两点</p>\n<ul>\n<li>不使用GET方法更新数据</li>\n<li>对于POST方法，通过后台生成随机的csrf_token注入到<code>form</code>的<code>&lt;input type=&quot;hidden&quot;&gt;</code>标签中预防</li>\n</ul>\n<p>总而言之，<strong>不信任用户的所有输入</strong>，对输入做处理，避免SQL注入和XSS攻击。</p>\n<hr>\n<h3 id=\"96-CSS属性继承\"><a href=\"#96-CSS属性继承\" class=\"headerlink\" title=\"96. CSS属性继承\"></a>96. CSS属性继承</h3><p>无继承性：</p>\n<ul>\n<li>display</li>\n<li>文本属性：vertical-align&#x2F;text-shadow&#x2F;text-decoration</li>\n<li>盒模型属性</li>\n<li>背景相关属性</li>\n<li>定位属性：float clear top&#x2F;left&#x2F;right&#x2F;bottom z-index</li>\n<li>轮廓内容：content outline</li>\n</ul>\n<p>有继承性：</p>\n<ul>\n<li>字体属性</li>\n<li>文本属性：text-align&#x2F;line-height&#x2F;word-spacing&#x2F;letter-spacing&#x2F;color</li>\n<li>可见性：visibility</li>\n<li>表格列表：list-style</li>\n<li>光标：cursor</li>\n</ul>\n<p>行内元素可继承：字体属性，除了text-indent&#x2F;text-align<br>块元素可继承：text-align&#x2F;text-ident</p>\n<h3 id=\"97-移动端实现0-5px的border\"><a href=\"#97-移动端实现0-5px的border\" class=\"headerlink\" title=\"97. 移动端实现0.5px的border\"></a>97. 移动端实现0.5px的<code>border</code></h3><ul>\n<li>结合<code>:before</code>或<code>:after</code>通过<code>transform-origin</code>和<code>scale</code>实现</li>\n<li>利用渐变<code>background-image: linear-gradient</code></li>\n<li>直接使用backgroun-image</li>\n</ul>\n<h3 id=\"98-随机打乱一个数组\"><a href=\"#98-随机打乱一个数组\" class=\"headerlink\" title=\"98. 随机打乱一个数组\"></a>98. 随机打乱一个数组</h3><p><a href=\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\">Fisher-Yates shuffle</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">shuffle</span>(<span class=\"params\">array</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> counter = array.<span class=\"property\">length</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// While there are elements in the array</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (counter &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Pick a random index</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> index = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * counter);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Decrease counter by 1</span></span><br><span class=\"line\">        counter--;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// And swap the last element with it</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> temp = array[counter];</span><br><span class=\"line\">        array[counter] = array[index];</span><br><span class=\"line\">        array[index] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> array;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"99-移动端fixed定位bug\"><a href=\"#99-移动端fixed定位bug\" class=\"headerlink\" title=\"99. 移动端fixed定位bug\"></a>99. 移动端fixed定位bug</h3><p>iOS中，在软键盘唤起后，fixed定位元素会失效，变为absolute定位。解决方案：主体部分设为<code>height: 100%; overflow-y: scroll</code>，通过absolute定位实现。</p>\n<h3 id=\"100-JS如何获知当前页面是否来自缓存\"><a href=\"#100-JS如何获知当前页面是否来自缓存\" class=\"headerlink\" title=\"100. JS如何获知当前页面是否来自缓存\"></a>100. JS如何获知当前页面是否来自缓存</h3><p>配合后台：后台传递时间戳到当前页面或cookie<br>无后台：通过xhr放送<code>HEAD</code>请求，得到返回的status code</p>\n<h3 id=\"101-重复打印字符串\"><a href=\"#101-重复打印字符串\" class=\"headerlink\" title=\"101. 重复打印字符串\"></a>101. 重复打印字符串</h3><p>幂次叠加，<code>substr</code>切割字符串。</p>\n<h3 id=\"102-正则匹配中-和-的意思\"><a href=\"#102-正则匹配中-和-的意思\" class=\"headerlink\" title=\"102. 正则匹配中?:和?=的意思\"></a>102. 正则匹配中<code>?:</code>和<code>?=</code>的意思</h3><ul>\n<li><code>?:</code> 非捕获匹配分组，匹配并出现在匹配结果中，但不作为子匹配返回</li>\n<li><code>?=</code> 前瞻匹配，不出现在匹配结果中</li>\n</ul>\n<p>更多参见<a href=\"https://shenlvmeng.github.io/blog/2017/05/12/Frontend-FAQ-part1/index.html#regexp\">问题16</a>。</p>\n",
            "tags": [
                "面试",
                "前端",
                "FAQ"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2017/05/17/Frontend-FAQ-part2/",
            "url": "http://shenlvmeng.github.com/blog/2017/05/17/Frontend-FAQ-part2/",
            "title": "前端常见面试问题 part 2",
            "date_published": "2017-05-17T07:16:27.000Z",
            "content_html": "<blockquote>\n<p>下面的大部分问题来自Github的这个<a href=\"https://github.com/h5bp/Front-end-Developer-Interview-Questions\">仓库</a>，排名不分先后</p>\n</blockquote>\n<h3 id=\"18-Vue和React框架的对比\"><a href=\"#18-Vue和React框架的对比\" class=\"headerlink\" title=\"18. Vue和React框架的对比\"></a>18. Vue和React框架的对比</h3><p>先说相同之处，Vue和React都是优秀的MVVM框架。具有<strong>响应式设计</strong>的种种特点，因此<strong>数据驱动</strong>是使用这两种框架不能忘的出发点。正如上一个问题提到的那样，开发者只需处理好数据，让框架去处理易错的UI。同时，<strong>组件化</strong>前端开发流程也是它们强调的一点，用组件化之名行代码重用之实，通过组件积木去构建整个页面。最后，它们不约而同地使用<strong>虚拟DOM树</strong>（vDOM）（Vue是在2.0引入的）抽象页面的节点，通过优化的diff算法减少频繁的DOM操作，减少交互的响应时间。另外，在最新的版本中，Vue和React的源码分别通过<a href=\"https://flow.org/\">Flow</a>和<a href=\"https://www.typescriptlang.org/\">TypeScript</a>加入类型约束，增强可读性和健壮性。</p>\n<p>两者同时也有MVVM框架共同的短板，把过多的渲染放在客户端，在页面元素复杂时，会加大交互的延迟。同时会影响首屏时间。</p>\n<p>再说它们的不同之处，不同之处基本都在使用细节上。</p>\n<ul>\n<li>Vue通常把网页模板写在<code>template</code>属性中，默认不支持JSX语法（可以通过插件支持）。React中则是写在render里</li>\n<li>Vue糅合了Angular 1.x的特点，通过一些内置的自定义标签属性减少开发者的代码量。React则更加纯粹，少了这些预设的框架</li>\n<li>Vue使用<code>Object.defineProperty</code>实现数据绑定，React通过<code>setState</code>显式更新依赖。前者更加酷和自然，但是在编程风格不好时，容易出现难以debug的错误。React推荐immutable Object，每次更新时使用新对象更新自身<code>state</code>，出错的概率更低。</li>\n<li>Vue和React在组件生命周期上有些细微的差别。Vue的生命周期更加简明，在create，mount，update，destroy前后设置钩子函数，React在state改变前后也会有钩子函数</li>\n<li>Vue的脚手架使用起来较React更加顺手（个人感觉），单文件.vue的组织方式，内部支持模板语言jade、ejs，预处理语言coffeescript，sass等。React的构建方式则更加自由。</li>\n<li>React的社区较之Vue更为活跃些，流行的库要更多，脚手架中的库更多是爱好者自己开发的。Vue和React生态圈中都有路由和状态管理器的工具，其中Vue的都是官方开发的。</li>\n</ul>\n<h3 id=\"19-TCP三次握手，四次挥手过程\"><a href=\"#19-TCP三次握手，四次挥手过程\" class=\"headerlink\" title=\"19. TCP三次握手，四次挥手过程\"></a>19. TCP三次握手，四次挥手过程</h3><p>过程参考下图。</p>\n<p><img src=\"/blog/blog/images/tcp.png\"></p>\n<p><img src=\"/blog/blog/images/tcp2.png\"></p>\n<p>因为断开连接时数据可能并未传输完成，所以挥手时要多一步。</p>\n<h3 id=\"20-CSS预处理语言\"><a href=\"#20-CSS预处理语言\" class=\"headerlink\" title=\"20. CSS预处理语言\"></a>20. CSS预处理语言</h3><p>Sass和Less。Sass支持变量的定义和使用，有语法控制结构，同时支持<code>@mixin</code>定义mixin和<code>@function</code>定义函数。更多介绍可以看我之前的<a href=\"http://shenlvmeng.github.io/book.html#sass\">一段笔记</a>。</p>\n<p>less语法使用上和Sass相近，采用JavaScript实现。支持本地和在线解析。本人没有用过，更多特性参考<a href=\"http://lesscss.org/features/\">官网</a>。</p>\n<h3 id=\"21-JS里的错误和异常处理\"><a href=\"#21-JS里的错误和异常处理\" class=\"headerlink\" title=\"21. JS里的错误和异常处理\"></a>21. JS里的错误和异常处理</h3><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/try...catch\">try catch</a>语句块捕获错误，catch块接受一个参数作为错误对象。对象的message属性会给出错误的详细信息。catch后还可以接上<code>finally</code>关键字，finally语句块在错误处理后必定执行。throw语句可以抛出错误。</p>\n<h3 id=\"22-闭包\"><a href=\"#22-闭包\" class=\"headerlink\" title=\"22. 闭包\"></a>22. 闭包</h3><p>闭包是JavaScript中比较有特色的概念。它和JS中的作用域链（见问题4）概念密切相关。闭包发生在函数中定义的函数，在外层函数退出后，其作用域环境通过作用域链仍然保存在存活的内部环境中。利用这种特点，可以实现诸如状态保存，封装等特殊性质。</p>\n<p>值得注意的是，内层函数的不合理操作会导致内存泄漏。且大量使用闭包会导致性能问题。不要过度依赖闭包。</p>\n<h3 id=\"23-列举一些RESTful操作名\"><a href=\"#23-列举一些RESTful操作名\" class=\"headerlink\" title=\"23. 列举一些RESTful操作名\"></a>23. 列举一些RESTful操作名</h3><p>GET&#x2F;POST&#x2F;DELETE&#x2F;UPDATE&#x2F;PUT等</p>\n<h3 id=\"24-列举一些CSS中的长度单位\"><a href=\"#24-列举一些CSS中的长度单位\" class=\"headerlink\" title=\"24. 列举一些CSS中的长度单位\"></a>24. 列举一些CSS中的长度单位</h3><p><span id=\"question24\"></span></p>\n<p>固定长度：</p>\n<ul>\n<li>px 像素点</li>\n<li>mm 毫米</li>\n<li>cm 厘米</li>\n<li>in 英寸</li>\n<li>pt 磅（1&#x2F;72英寸）</li>\n<li>pc 活字（1&#x2F;6英寸）</li>\n</ul>\n<p>相对长度：</p>\n<ul>\n<li>em 以字体大小(<code>font-size</code>)为单位</li>\n<li>ex 以小写字母大小为单位</li>\n<li>rem 以根元素（默认为<code>&lt;html&gt;</code>）的字体大小为单位，用于自适应布局</li>\n<li>vh 视口高度的1&#x2F;100</li>\n<li>vw 视口宽度的1&#x2F;100</li>\n<li>vmin 视口宽高较小值的1&#x2F;100</li>\n<li>vmax 视口宽高较大值的1&#x2F;100</li>\n</ul>\n<h3 id=\"25-前端职责\"><a href=\"#25-前端职责\" class=\"headerlink\" title=\"25. 前端职责\"></a>25. 前端职责</h3><p>狭义地来说是实现UI设计师的设计稿和UE、UX的交互细节。宏观来说，是借助浏览器在技术上处理和用户交互的所有环节。近些年来，借助native的帮助，前端还可以实现后台的业务部分。</p>\n<h3 id=\"26-职业规划\"><a href=\"#26-职业规划\" class=\"headerlink\" title=\"26. 职业规划\"></a>26. 职业规划</h3><p>略</p>\n<h3 id=\"27-获取新鲜资讯的方式\"><a href=\"#27-获取新鲜资讯的方式\" class=\"headerlink\" title=\"27. 获取新鲜资讯的方式\"></a>27. 获取新鲜资讯的方式</h3><ul>\n<li><a href=\"https://uptodate.frontendrescue.org/zh/\">这个</a></li>\n<li><a href=\"http://www.echojs.com/\">Echo JS</a></li>\n<li><a href=\"https://juejin.im/welcome/frontend\">掘金</a></li>\n<li>一些awesome的集锦，诸如<a href=\"https://github.com/syaning/awesome-frontend\">这个</a></li>\n<li>知乎，github等</li>\n</ul>\n<h3 id=\"28-前端模块化\"><a href=\"#28-前端模块化\" class=\"headerlink\" title=\"28. 前端模块化\"></a>28. 前端模块化</h3><p>模块化规范包括CommonJS，CMD（SeaJS），AMD（RequireJS）等。我此前做过一个小型的<a href=\"http://shenlvmeng.github.io/book.html#commonjs\">笔记</a>。</p>\n<h3 id=\"29-position类型\"><a href=\"#29-position类型\" class=\"headerlink\" title=\"29. position类型\"></a>29. position类型</h3><p>static, relative, absolute, fix四种。</p>\n<ul>\n<li>static 正常文档流</li>\n<li>relative 正常文档流，指定<code>top</code>, <code>left</code>等CSS属性相对原位置移动</li>\n<li>absolute 脱离文档流，相对上一个非static元素定位</li>\n<li>fix 脱离文档流，相对html定位</li>\n</ul>\n<p>通常建议使用正常文档流减少潜在bug。绘制复杂动画时，建议使用脱离文档流的布局。</p>\n<h3 id=\"30-盒模型\"><a href=\"#30-盒模型\" class=\"headerlink\" title=\"30. 盒模型\"></a>30. 盒模型</h3><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Introduction_to_the_CSS_box_model\">盒模型</a>意为所有渲染的元素都是一个个的矩形。矩形区域内包含<code>margin</code>, <code>border</code>, <code>padding</code>和<code>content</code>4层。CSS属性中只有<strong>两种</strong>盒模型：<code>border-box</code>和<code>content-box</code>。后者是默认值。可以通过<code>box-sizing</code>属性设置。</p>\n<h3 id=\"31-使用原生JS发送AJAX\"><a href=\"#31-使用原生JS发送AJAX\" class=\"headerlink\" title=\"31. 使用原生JS发送AJAX\"></a>31. 使用原生JS发送AJAX</h3><p>现代浏览器中都通过XMLHttpRquest对象实现Ajax请求。古老的IE浏览器会有不同的实现方法（目前已经很少见了），如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">ActiveXObject</span>(<span class=\"string\">&quot;Microsoft.XMLHTTP&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">ActiveXObject</span>(<span class=\"string\">&quot;Msxml2.XMLHTTP.6.0&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>通常使用XMLHttpRequest发送GET的方法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;demo.php?id=1&quot;</span>);</span><br><span class=\"line\">xhr.<span class=\"title function_\">send</span>()</span><br></pre></td></tr></table></figure>\n\n<p>发送POST和其他复杂请求时，需要设置request header，在需要接受AJAX返回时，还可以监听readyState的change事件<br>，大致像下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;POST&quot;</span>, <span class=\"string\">&quot;ajax_post.php&quot;</span>);</span><br><span class=\"line\">xhr.<span class=\"title function_\">setRequestHeader</span>(<span class=\"string\">&quot;Content-type&quot;</span>, <span class=\"string\">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class=\"line\">xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (xhr.<span class=\"property\">readyState</span> === <span class=\"number\">4</span> &amp;&amp; xhr.<span class=\"property\">status</span> === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;ok&quot;</span> + xhr.<span class=\"property\">responseText</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>XMLHttpRequest2中又引入了进度，跨域，中止等新特性。</p>\n<p>另外，使用新的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch\">Fetch API</a>也可以完成Ajax请求。Fetch提出的目标是提供访问和操纵HTTP的接口，异步的获取网络资源。它和XMLHttpRequst的区别是：</p>\n<ul>\n<li>即使响应是404或500，返回的Promise也会正常解决</li>\n<li>默认情况下，fetch在服务端不会发送或接受任何cookies</li>\n</ul>\n<p>在Ajax需要跨域时，最常用的方法是使用jsonp的形式实现。不过目前通过XMLHttpRequest2或fetch也都能完成跨域请求。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">jsonp</span>(<span class=\"params\">url, success</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> ud = <span class=\"string\">&#x27;_&#x27;</span> + +<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>,</span><br><span class=\"line\">      script = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;script&#x27;</span>),</span><br><span class=\"line\">      head = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&#x27;head&#x27;</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">          || <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">window</span>[ud] = <span class=\"keyword\">function</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">    head.<span class=\"title function_\">removeChild</span>(script);</span><br><span class=\"line\">    success &amp;&amp; <span class=\"title function_\">success</span>(data);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  script.<span class=\"property\">src</span> = url.<span class=\"title function_\">replace</span>(<span class=\"string\">&#x27;callback=?&#x27;</span>, <span class=\"string\">&#x27;callback=&#x27;</span> + ud);</span><br><span class=\"line\">  head.<span class=\"title function_\">appendChild</span>(script);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">jsonp</span>(<span class=\"string\">&#x27;http://soundcloud.com/oembed?url=http%3A//soundcloud.com/forss/flickermood&amp;format=js&amp;callback=?&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">data</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"31-如何加快访问速度\"><a href=\"#31-如何加快访问速度\" class=\"headerlink\" title=\"31. 如何加快访问速度\"></a>31. 如何加快访问速度</h3><p>这个问题实际上很大，可以从各个方面去优化</p>\n<ul>\n<li>压缩并打包资源文件</li>\n<li>使用CDN存储资源文件</li>\n<li>设置缓存</li>\n<li>CSS sprites</li>\n<li>图片压缩</li>\n<li>图片懒加载</li>\n<li>合理的DOM层级设置</li>\n<li>为<code>&lt;script&gt;</code>标签设置<code>defer</code>或<code>async</code>或动态异步加载</li>\n<li>一般情况下，CSS在前，JS在后</li>\n<li>使用MVVM框架时，使用服务端渲染或预渲染</li>\n</ul>\n<h3 id=\"32-前端的未来发展\"><a href=\"#32-前端的未来发展\" class=\"headerlink\" title=\"32. 前端的未来发展\"></a>32. 前端的未来发展</h3><p>随着大前端的风吹来，前端工作在横向和纵向都获得了更多的机会。横向上，由PC端到移动端甚至有界面展示的智能终端。不过后两者需要记住native库的帮助。纵向上，在NodeJS的帮助下，后台的部分业务功能抽离出来交由前端完成，前端对界面有完整的控制，数据通过接口的形式向后台索取。现在看来，身为一个前端工程师，不仅要对HTML，CSS，JavaScript老三样了如指掌，对Android或iOS也渐渐有了些要求。</p>\n<h3 id=\"33-CSS-selector的优先级顺序\"><a href=\"#33-CSS-selector的优先级顺序\" class=\"headerlink\" title=\"33. CSS selector的优先级顺序\"></a>33. CSS selector的优先级顺序</h3><p>在<a href=\"http://taligarsiel.com/Projects/howbrowserswork1.htm#Style_sheets\">how browsers work</a>中有介绍。根据<a href=\"https://www.w3.org/TR/selectors/#specificity\">CSS3 selectors specificity</a>中的定义，一个选择器的优先级计算如下</p>\n<ol>\n<li>如果声明来自于style属性，而不是带有选择器的规则，则记为1，否则记为0 (&#x3D; a)</li>\n<li>记为选择器中ID属性的个数 (&#x3D; b)<br>3.记为选择器中其他属性和伪类的个数 (&#x3D; c)</li>\n<li>记为选择器中元素名称和伪元素的个数 (&#x3D; d)</li>\n</ol>\n<p>将四个数字按a-b-c-d这样连接起来（位于大数进制的数字系统中），构成特异性。所使用的进制取决于上述类别中的最高计数。最终决定优先级顺序。简而言之就是，style &gt; id &gt; class &gt; tag &gt; pseudo class，统计情况下看个数，有<code>!important</code>时，以<code>!important</code>为准。</p>\n<h3 id=\"34-连等的赋值顺序\"><a href=\"#34-连等的赋值顺序\" class=\"headerlink\" title=\"34. 连等的赋值顺序\"></a>34. 连等的赋值顺序</h3><p>问题是，有这样一段代码，问原理是什么：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123; <span class=\"attr\">n</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = foo;</span><br><span class=\"line\">foo.<span class=\"property\">x</span> = foo = &#123; <span class=\"attr\">n</span>: <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(foo.<span class=\"property\">x</span>); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>我们来细化一下过程，首先我们要明确JavaScript中对象是引用类型：</p>\n<ul>\n<li>第一句里，首先创建了一个字面量对象，并将foo指向之</li>\n<li>第二句里，将foo赋值给bar，即bar也指向<code>&#123; n: 1 &#125;</code>这个对象</li>\n<li>第三句里，又创建了一个<code>&#123; n: 2 &#125;</code>的对象，首先寻找foo指向对象中是否有x属性，没有时则新建一个x属性指向这个字面量对象，接着改变foo存储的地址，指向这个新的对象。</li>\n<li>第四句里，由于新的对象没有x属性，<code>foo.x</code>将返回<code>undefined</code></li>\n</ul>\n<p>这时，如果我们<code>console.log(bar)</code>结果将是{x: {n: 2}, n: 1}&#96;。</p>\n<h3 id=\"35-JavaScript的hoist行为\"><a href=\"#35-JavaScript的hoist行为\" class=\"headerlink\" title=\"35. JavaScript的hoist行为\"></a>35. JavaScript的hoist行为</h3><p><code>hoist</code>特性又叫<strong>变量声明提升</strong>。是JavaScript中比较有特点的特性。意为将作用域中所有变量（包括函数）声明提升到语句的开头。如下面的语句</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"title function_\">fun</span>(a);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fun</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>等同于</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fun</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"title function_\">fun</span>(a);</span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n<p>需要注意的是当通过函数表达式声明函数时，会提示<code>fun</code>未定义。因为，此时的语句等同于</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a;</span><br><span class=\"line\"><span class=\"keyword\">var</span> fun;</span><br><span class=\"line\">a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"title function_\">fun</span>(a);</span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"number\">0</span>;</span><br><span class=\"line\">fun = <span class=\"keyword\">function</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后，最佳的风格是所有的变量先声明再使用。这也是JSLint和JSHint等linter工具推荐的。</p>\n<h3 id=\"36-优雅降级和渐进增强\"><a href=\"#36-优雅降级和渐进增强\" class=\"headerlink\" title=\"36. 优雅降级和渐进增强\"></a>36. 优雅降级和渐进增强</h3><p>又名graceful degration和progressive enhancement。是两种开发的思路。前者意为针对最高级的浏览器设计开发，再保证向下兼容；后者意为针对低版本浏览器设计，保证基础性能，再追对现代浏览器追加效果，提高用户体验。</p>\n<h3 id=\"37-优化网页资源\"><a href=\"#37-优化网页资源\" class=\"headerlink\" title=\"37. 优化网页资源\"></a>37. 优化网页资源</h3><ol>\n<li>使用CDN</li>\n<li>分布存放</li>\n<li>CSS sprites</li>\n<li>disable etag</li>\n</ol>\n<h3 id=\"38-浏览器一次可以从同一domain加载多少资源\"><a href=\"#38-浏览器一次可以从同一domain加载多少资源\" class=\"headerlink\" title=\"38. 浏览器一次可以从同一domain加载多少资源\"></a>38. 浏览器一次可以从同一domain加载多少资源</h3><p>2~8，因浏览器而异。<a href=\"http://stackoverflow.com/questions/985431/max-parallel-http-connections-in-a-browser/14768266#14768266\">这里</a>有个非常全的表。</p>\n<h3 id=\"39-轮播图设计思路\"><a href=\"#39-轮播图设计思路\" class=\"headerlink\" title=\"39. 轮播图设计思路\"></a>39. 轮播图设计思路</h3><p>可以用display实现，配合渐变效果。需要看到幻灯片移动时，可以结合transform和scale实现，配合<code>overflow: hidden</code>。</p>\n<h3 id=\"40-CSS3的部分新特性\"><a href=\"#40-CSS3的部分新特性\" class=\"headerlink\" title=\"40. CSS3的部分新特性\"></a>40. CSS3的部分新特性</h3><ul>\n<li>border: <code>border-radius</code>，<code>border-image</code></li>\n<li>background: <code>background-size</code>，<code>background-origin</code></li>\n<li>text: <code>font-face</code>，<code>text-overflow</code>，<code>text-shadow</code>，<code>word-break</code>，<code>word-wrap</code></li>\n<li>transform: <code>translate</code>，<code>rotate</code>，<code>skew</code>，<code>scale</code></li>\n<li>transition: <code>transition</code>，<code>animation</code></li>\n<li>other: <code>box-shadow</code></li>\n</ul>\n<h3 id=\"41-ARIA\"><a href=\"#41-ARIA\" class=\"headerlink\" title=\"41. ARIA\"></a>41. ARIA</h3><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA\">ARIA</a>全称Accessible Rich Internet Application。主旨是提升网页易用性，方便有阅读障碍的人使用。比较常用的属性有</p>\n<ul>\n<li><code>role</code> 当前元素的作用，</li>\n<li><code>&lt;label&gt;</code>, <code>aria-label</code> 元素名</li>\n<li><code>aria-hidden</code> 是否隐藏</li>\n</ul>\n<h3 id=\"42-CSS-animation和JavaScript-animation\"><a href=\"#42-CSS-animation和JavaScript-animation\" class=\"headerlink\" title=\"42. CSS animation和JavaScript animation\"></a>42. CSS animation和JavaScript animation</h3><p>前者方便简单，通过keyframe就可以画出动画，且浏览器会做一些优化，因此性能也比较好。后者更加灵活，可以暂停和反转，且支持交互性。更详细的分析参考<a href=\"https://developers.google.com/web/fundamentals/design-and-ui/animations/css-vs-javascript?hl=zh-cn\">这里</a></p>\n<h3 id=\"43-doctype是什么\"><a href=\"#43-doctype是什么\" class=\"headerlink\" title=\"43. doctype是什么\"></a>43. doctype是什么</h3><p>doctype出现在HTML4.1。用于规范HTML和XML文档格式，在推出时，HTML有3种标准可以选择：strict, transitional, frameset。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">HTML</span> <span class=\"keyword\">PUBLIC</span> <span class=\"string\">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class=\"string\">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">HTML</span> <span class=\"keyword\">PUBLIC</span> <span class=\"string\">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class=\"string\">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">HTML</span> <span class=\"keyword\">PUBLIC</span> <span class=\"string\">&quot;-//W3C//DTD HTML 4.01 Frameset//EN&quot;</span> <span class=\"string\">&quot;http://www.w3.org/TR/html4/frameset.dtd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在HTML5中，只有一种doctype可以选择，那就是html：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"44-standard-mode和quirks-mode\"><a href=\"#44-standard-mode和quirks-mode\" class=\"headerlink\" title=\"44. standard mode和quirks mode\"></a>44. standard mode和quirks mode</h3><p>分别是标准模式和怪异模式。由于历史原因，为了兼容标准建立前就已存在的古老网站，浏览器存在着两种解析网页的模式。在怪异模式下，排版会模拟Navigator 4与Internet Explorer 5的非标准行为。为了支持在网络标准被广泛采用前，就已经建好的网站，这么做是必要的。在标准模式下，行为即（但愿如此）由HTML与CSS的规范描述的行为。在<code>&lt;!DOCTYPE&gt;</code>中指定<code>html</code>将自动启用标准模式。<a href=\"https://www.ibm.com/developerworks/cn/web/1310_shatao_quirks/\">这里</a>有更多介绍。</p>\n<h3 id=\"45-XHTML和HTML\"><a href=\"#45-XHTML和HTML\" class=\"headerlink\" title=\"45. XHTML和HTML\"></a>45. XHTML和HTML</h3><p>XHTML伴随HTML4.01一同提出，使用更加严谨的语法。MIMEtype为<code>application/xhtml+xml</code>，比如：html元素需要有xml相关属性，元素名必须是小写字母，元素属性用<code>&quot;</code>包围不能为空值，在内容里不能有<code>&amp;</code>, 需要转义，包括其他特殊字符<code>&lt;&gt;</code>，空元素以<code>/&gt;</code>结尾。由于语法过于严苛，使用的人不多。未推出的XHTML1.1便被html5取代。</p>\n",
            "tags": [
                "面试",
                "前端",
                "FAQ"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2017/05/12/Frontend-FAQ-part1/",
            "url": "http://shenlvmeng.github.com/blog/2017/05/12/Frontend-FAQ-part1/",
            "title": "前端常见面试问题 part 1",
            "date_published": "2017-05-12T09:26:22.000Z",
            "content_html": "<blockquote>\n<p>下面的大部分问题来自Github的这个<a href=\"https://github.com/h5bp/Front-end-Developer-Interview-Questions\">仓库</a>，排名不分先后</p>\n</blockquote>\n<h3 id=\"1-JS中如何定义自定义事件，实现订阅-x2F-发布模式\"><a href=\"#1-JS中如何定义自定义事件，实现订阅-x2F-发布模式\" class=\"headerlink\" title=\"1. JS中如何定义自定义事件，实现订阅&#x2F;发布模式\"></a>1. JS中如何定义自定义事件，实现订阅&#x2F;发布模式</h3><p>明确需求：可以通过<code>on</code>和<code>emit</code>绑定和触发事件。</p>\n<p>方案：创建全局事件管理器<code>events</code>，构建事件名和回调函数数组的键值对。<code>on</code>和<code>emit</code>分别写和读<code>events</code>。大概像下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">EventUtil</span> = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 全局事件管理</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> events = &#123;&#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 注册事件</span></span><br><span class=\"line\">        on = <span class=\"keyword\">function</span> (<span class=\"params\">type, handler</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (events[type]) &#123;</span><br><span class=\"line\">                events[type].<span class=\"title function_\">push</span>(handler);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                events[type] = [handler];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 触发事件</span></span><br><span class=\"line\">        emit = <span class=\"keyword\">function</span> (<span class=\"params\">type</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!events[type]) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = events[type].<span class=\"property\">length</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">                events[type][i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>当使用<code>Object.assign</code>实现继承时，会出现<code>events</code>共享的问题。可以通过在第一次调用<code>on</code>时，通过<code>Object.defineProperty</code>的方式创建避免共享。</p>\n<h3 id=\"2-js中的this\"><a href=\"#2-js中的this\" class=\"headerlink\" title=\"2. js中的this\"></a>2. js中的<code>this</code></h3><p>首先，<code>this</code>永远是对象。</p>\n<ul>\n<li>全局上下文内，<code>this</code>为<strong>全局对象</strong></li>\n<li>函数上下文内，根据调用场景分情况讨论<ul>\n<li>直接调用：<strong>全局对象</strong></li>\n<li>通过对象的方法调用：<strong>调用方法的对象</strong></li>\n<li>构造函数中：<strong>即将被创建的对象</strong>，有<code>return</code>语句时，以<code>return</code>的返回值为准</li>\n<li>call和apply：传入的第一个值</li>\n<li>bind方法：永久绑定到第一个参数</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-js跨域问题和解决方案\"><a href=\"#3-js跨域问题和解决方案\" class=\"headerlink\" title=\"3. js跨域问题和解决方案\"></a>3. js跨域问题和解决方案</h3><p>跨域（Cross-domain）是网景最初基于安全性考虑提出的策略。意为<strong>不同域名</strong>或<strong>不同协议</strong>或<strong>不同端口</strong>间的Ajax通信是被禁止的。根据使用需求，可以分为跨站请求资源和跨页面共享资源（我自己发明的说法）</p>\n<p>跨站请求资源</p>\n<ul>\n<li>jsonp（json with padding）跨域，利用了<code>&lt;script&gt;</code>标签的可跨域完成，自己写一遍就能搞懂<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getJSONP</span>(<span class=\"params\">url, success</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> ud = <span class=\"string\">&#x27;_&#x27;</span> + +<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>,</span><br><span class=\"line\">        script = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;script&#x27;</span>),</span><br><span class=\"line\">        head = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&#x27;head&#x27;</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">               || <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">window</span>[ud] = <span class=\"keyword\">function</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">        head.<span class=\"title function_\">removeChild</span>(script);</span><br><span class=\"line\">        success &amp;&amp; <span class=\"title function_\">success</span>(data);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    script.<span class=\"property\">src</span> = url.<span class=\"title function_\">replace</span>(<span class=\"string\">&#x27;callback=?&#x27;</span>, <span class=\"string\">&#x27;callback=&#x27;</span> + ud);</span><br><span class=\"line\">    head.<span class=\"title function_\">appendChild</span>(script);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>CORS，使用CORS进行跨域请求时，在现代浏览器中已经可以像普通Ajax请求那样使用<code>XMLHttpRequest</code>即可，可以参考<a href=\"https://shenlvmeng.github.io/blog/2017/04/18/cors/\">这个</a>。需要后台服务器支持</li>\n<li>后台反向代理，需要一台中转的服务器</li>\n<li>建立websocket通信，需要后台服务器支持</li>\n</ul>\n<p>跨页面共享资源，结合<code>&lt;iframe&gt;</code>有以下几种方案</p>\n<ul>\n<li>修改document.domain，使两个页面位于同一域名下，注意只能从精确-&gt;模糊修改域名</li>\n<li>通过window.name传递消息，利用了iframe location变化后，window.name不变的特点</li>\n<li>location.hash</li>\n<li>html5中的postMessage API在不同<code>window</code>间传递消息</li>\n</ul>\n<p>这里附上一个<a href=\"http://blog.csdn.net/joyhen/article/details/21631833\">链接</a>.</p>\n<h3 id=\"4-js的作用域链\"><a href=\"#4-js的作用域链\" class=\"headerlink\" title=\"4. js的作用域链\"></a>4. js的作用域链</h3><p>这是JavaScript最有特点同时也是最基础的内涵之一。红宝书和犀牛书都做了详尽和透彻的解释。这个问题理解了，什么是闭包就能很好地理解了。</p>\n<blockquote>\n<p>执行环境是JavaScript中最为重要的一个概念。执行环境定义了变量或函数有权访问的其他数据，决定了它们各自的行为。每个执行环境都有一个与之关联的变量对象，环境中定义的所有变量和函数都保存在这个对象中。虽然我们便习得代码无法访问这个对象，但解析器在处理数据时会在后台使用它。</p>\n</blockquote>\n<blockquote>\n<p>全局执行环境是最外围的一个执行环境。…。某个执行环境中的所有代码执行完毕后，该环境被销毁，保存在其中的所有变量和函数定义也随之销毁（全局环境知道应用程序退出时才会销毁）<br>每个函数都有自己的<strong>执行环境</strong>。当执行流进入一个函数时，函数的环境就会被推入一个环境栈中。而在函数执行后，栈将其环境弹出，把控制权返回给之前的执行环境。ECMAScript程序中的执行流正是有这个方便的机制控制着。</p>\n</blockquote>\n<blockquote>\n<p>当代码在一个环境中执行时，会创建变量对象的一个作用域链(scope chain)。作用域链的用途，是保证对执行环境有权访问的所有变量和函数的有序访问。作用域链的前端，时钟都是当前执行的代码所在环境的变量对象。如果这个环境是函数，则将其<strong>活动对象</strong>做为变量对象。活动对象在最开始时只包含一个变量，即<code>arguments</code>对象（这个对象在全局环境中是不存在的）。作用域链中的下一个变量对象来自包含（外部）环境，而在下一个变量对象则来自下一个包含环境。这样，一直延续到全局执行环境；全局执行环境的变量对象始终都是作用域链中最后一个对象。</p>\n</blockquote>\n<h3 id=\"5-Function-call和Function-apply的区别\"><a href=\"#5-Function-call和Function-apply的区别\" class=\"headerlink\" title=\"5. Function.call和Function.apply的区别\"></a>5. <code>Function.call</code>和<code>Function.apply</code>的区别</h3><p><code>call</code>和<code>apply</code>同为改变<code>this</code>的方法，前者一个一个接收输入参数，后者以数组的形式接收。</p>\n<h3 id=\"6-浏览器渲染页面的原理\"><a href=\"#6-浏览器渲染页面的原理\" class=\"headerlink\" title=\"6. 浏览器渲染页面的原理\"></a>6. 浏览器渲染页面的原理</h3><p>可以参考经典的文章<a href=\"http://taligarsiel.com/Projects/howbrowserswork1.htm\">how browsers work</a>，或者<a href=\"https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/\">中译版</a>.</p>\n<h3 id=\"7-列举一些HTML5的改进\"><a href=\"#7-列举一些HTML5的改进\" class=\"headerlink\" title=\"7. 列举一些HTML5的改进\"></a>7. 列举一些HTML5的改进</h3><p>可以参考MDN给出的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Guide/HTML/HTML5\">summary</a>。比如:</p>\n<ul>\n<li>语义化，语义化标签<code>&lt;header&gt;</code>, <code>&lt;article&gt;</code>，语义化元素<code>&lt;figure&gt;</code>, <code>&lt;time&gt;</code>等和新的多媒体标签<code>&lt;audio&gt;</code>, <code>&lt;video&gt;</code></li>\n<li>网络通信，Websocket，WebRTC</li>\n<li>图像，Canvas和WebGL</li>\n<li>离线存储，Storage接口和IndexDB</li>\n<li>性能，Web Worker，XMLHttpRequest2（支持进度等新特性），History API，Fullscreen，PointerLock，requestAnimationFrame等</li>\n<li>CSS，CSS3的特性，有些甚至演进到了Level 4</li>\n</ul>\n<h3 id=\"8-HTML5中的定位API\"><a href=\"#8-HTML5中的定位API\" class=\"headerlink\" title=\"8. HTML5中的定位API\"></a>8. HTML5中的定位API</h3><p>Geolocation API，新的API，红宝书中有提到。通过<code>navigator.geolocation</code>对象实现，允许用户提供自己的所在地理位置。需要用户确认同意才可使用。最常用的方法是<code>getCurrentPosition()</code>。这个方法接受三个参数——成功回调、可选的失败回调、可选的选项。</p>\n<p>类似的不常见的API还有<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Battery_Status_API\">Battery API</a>，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/File\">File API</a>，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/performance\">performance</a>等。</p>\n<h3 id=\"9-一些前端框架的双向绑定原理\"><a href=\"#9-一些前端框架的双向绑定原理\" class=\"headerlink\" title=\"9. 一些前端框架的双向绑定原理\"></a>9. 一些前端框架的双向绑定原理</h3><p>不是所有框架都提倡双向绑定。有的框架如Angular使用数据双向绑定，适合于表单很多的站点，React和Vue这样的使用的是<a href=\"https://www.zhihu.com/question/31585377\">单向绑定</a>。在单向绑定背景下，可以通过<code>addEventListener</code>实现双向绑定。</p>\n<p>实现原理上分为几种：</p>\n<ul>\n<li>发布-订阅模式，显式地绑定事件和监听函数。backbone就是这么做的，显式地通过<code>Model.set</code>修改数据触发<code>change</code>事件来更新视图。React也是通过<code>setState</code>显式地触发虚拟DOM树更新和重新渲染的。</li>\n<li>脏检查（digest cycle），通过特定事件触发脏检查。脏检查即一种不关心你如何以及何时改变的数据，只关心在特定的检查阶段数据是否改变的数据监听技术。过程大致是<code>$update</code>或其他手段触发digest阶段，遍历通过<code>$watch</code>绑定的watcher。对比值是否改变触发更新。优点是无需知道更改数据的方式，可以统一更新view，缺点是watcher较多时会有严重的性能问题。</li>\n<li>数据劫持<code>Object.defineProperty</code>，Vue使用这种方式实现隐式的绑定（当然在<a href=\"https://shenlvmeng.github.io/blog/2017/04/05/vue-reactive-sourcecode/\">具体实现</a>中复杂了许多）。这么做的问题是版本只支持到IE9+，且在数组更新时有所局限。</li>\n</ul>\n<h3 id=\"10-webpack的配置文件写法\"><a href=\"#10-webpack的配置文件写法\" class=\"headerlink\" title=\"10. webpack的配置文件写法\"></a>10. webpack的配置文件写法</h3><p>除了常用的<code>entry</code>, <code>output</code>, <code>module</code>, <code>plugins</code>外，webpack的使用方法实在太多，建议去<a href=\"https://webpack.js.org/configuration/\">官网</a>查看完整的配置信息。</p>\n<h3 id=\"11-node文件和网络API\"><a href=\"#11-node文件和网络API\" class=\"headerlink\" title=\"11. node文件和网络API\"></a>11. node文件和网络API</h3><p>文件操作上，常用的有<code>fs.readFileSync</code>，<code>fs.writeFileSync</code>，或通过流的方式使用<code>fs.createReadStream</code>，<code>fs.createWriteStream</code>。还有<code>pipe</code>将流连接在一起。除此之外，<code>path</code>，<code>join</code>和<code>normalize</code>常用在处理文件路径。</p>\n<p>和网络操作相关的包包括<code>http</code>, <code>https</code>, <code>url</code>, <code>querystring</code>, <code>zlib</code>等。其中前两个包更为常用，尤其是<code>http.createServer</code>方法。</p>\n<p>另外，在进程上有<code>process</code>, <code>child_process</code>等包。<a href=\"https://nqdeng.github.io/7-days-nodejs\">这里</a> 有一篇文章做了比较详细的介绍。当然，有空最好还是去<a href=\"https://nodejs.org/docs/latest-v5.x/api/\">官方文档</a>.</p>\n<h3 id=\"12-和-import的区别\"><a href=\"#12-和-import的区别\" class=\"headerlink\" title=\"12. 和@import的区别\"></a>12. <link>和@import的区别</h3><p>它们的最常见的使用方式都是引入CSS文件到html中。它们的区别在于</p>\n<ul>\n<li>link是XHTML标签，除了加载CSS外，还可以引入RSS等其他资源；@import属于CSS范畴，只能加载CSS。</li>\n<li>link引用CSS时，在页面载入时同时加载；@import需要页面网页完全载入以后加载。</li>\n<li>link是XHTML标签，无兼容问题；@import是在CSS2.1提出的，低版本的浏览器不支持。</li>\n<li>由于link是标签，可以通过JavaScript控制来改变样式，后者不行。</li>\n</ul>\n<h3 id=\"13-cookie，localStorage和sessionStorage的区别和联系\"><a href=\"#13-cookie，localStorage和sessionStorage的区别和联系\" class=\"headerlink\" title=\"13. cookie，localStorage和sessionStorage的区别和联系\"></a>13. cookie，localStorage和sessionStorage的区别和联系</h3><p>cookie设计的初衷是用来为无状态的http访问添加用户状态消息的。大小4KB以下，会携带在请求头中。大多包含敏感信息，会和服务器端的session配合使用。</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Storage\">Storage API</a>是HTML5的新API。又可以细分为localStorage和sessionStorage。它们一般只存储在客户端，用来缓存用户非敏感数据，大小因浏览器而异，容量约可达到5MB。sessionStorage在浏览器关闭后清除，localStorage则在超过时限或手动clear后清除。</p>\n<p>cookie中的内容很少变化，且最好秘文储存，并通过HttpOnly添加限制（后台修改set-cookie头）。Storage则很可能会频繁读写。</p>\n<h3 id=\"14-HTTP状态码\"><a href=\"#14-HTTP状态码\" class=\"headerlink\" title=\"14. HTTP状态码\"></a>14. HTTP状态码</h3><p>根据状态码开头的数字确定状态码类型。下面列举一些常用的。</p>\n<p><strong>1xx 信息</strong>：这一类型的状态码，代表请求已被接受，需要继续处理。这类响应是临时响应。</p>\n<ul>\n<li>100 继续：客户端应当继续发送请求。</li>\n<li>101 切换协议：将通过Upgrade消息头通知客户端采用不同的协议来完成这个请求。</li>\n</ul>\n<p><strong>2xx 成功</strong>：这一类型的状态码，代表请求已成功被服务器接收、理解、并接受。</p>\n<ul>\n<li>200 OK：请求已成功，请求所希望的响应头或数据体将随此响应返回</li>\n<li>201 已创建：请求已经被实现，而且有一个新的资源已经依据请求的需要而创建，且其URI已经随Location头信息返回</li>\n<li>202 已接受：服务器已接受请求，但尚未处理</li>\n<li>204 No Content：服务器成功处理了请求，但不需要返回任何实体内容，用户浏览器应保留发送了该请求的页面</li>\n<li>205 Reset Content：和204的唯一不同是返回此状态码的响应要求请求者重置文档视图</li>\n<li>206 服务器已经成功处理了部分GET请求。该请求必须包含Range头信息来指示客户端希望得到的内容范围，多用于下载工具</li>\n</ul>\n<p><strong>3xx 重定向</strong>：这类状态码代表需要客户端采取进一步的操作才能完成请求。通常，这些状态码用来重定向，后续的请求地址（重定向目标）在本次响应的Location域中指明。</p>\n<ul>\n<li>300 多选择：被请求的资源有一系列可供选择的回馈信息，每个都有自己特定的地址和浏览器驱动的商议信息。用户或浏览器能够自行选择一个首选的地址进行重定向。</li>\n<li>301 永久移动：被请求的资源已永久移动到新位置</li>\n<li>302 临时移动：请求的资源现在临时从不同的URI响应请求</li>\n<li>303 重定向：对应当前请求的响应可以在另一个URI上被找到，而且客户端应当采用GET的方式访问那个资源</li>\n<li>304 如果客户端发送了一个带条件的GET请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变</li>\n<li>305 使用中介：被请求的资源必须通过指定的代理才能被访问</li>\n</ul>\n<p><strong>4xx 客户端错误</strong>：代表了客户端看起来可能发生了错误，妨碍了服务器的处理</p>\n<ul>\n<li>400 无法理解的请求：由于包含语法错误，当前请求无法被服务器理解</li>\n<li>401 需要验证：当前请求需要用户验证。响应必须包含一个适用于被请求资源的WWW-Authenticate信息头用以询问用户信息。</li>\n<li>403 禁止访问：服务器已经理解请求，但是拒绝执行它</li>\n<li>404 未找到：请求所希望得到的资源未被在服务器上发现</li>\n<li>405 方法不允许：请求行中指定的请求方法不能被用于请求相应的资源，响应中必须返回一个Allow头信息用以表示出当前资源能够接受的请求方法的列表</li>\n<li>406 头部不对：请求的资源的内容特性无法满足请求头中的条件</li>\n<li>408 请求超时：客户端没有在服务器预备等待的时间内完成一个请求的发送</li>\n<li>411 需要指定长度：服务器拒绝在没有定义Content-Length头的情况下接受请求</li>\n<li>413 请求实体太长</li>\n<li>414 URI太长</li>\n</ul>\n<p><strong>5xx 服务器错误</strong>：代表了服务器在处理请求的过程中有错误或者异常状态发生</p>\n<ul>\n<li>500 内部错误：一般来说，这个问题会在服务器的代码出错时出现</li>\n<li>501 未实现：服务器不支持当前请求所需要的某个功能</li>\n<li>502 Bad GateWay：作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应</li>\n<li>503 服务不可达：由于临时的服务器维护或者过载，服务器当前无法处理请求。这个状况是临时的，并且将在一段时间以后恢复。</li>\n<li>504 网关超时：作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器或者辅助服务器收到响应</li>\n<li>505 HTTP协议版本不正确</li>\n</ul>\n<h3 id=\"15-URL去参数\"><a href=\"#15-URL去参数\" class=\"headerlink\" title=\"15. URL去参数\"></a>15. URL去参数</h3><p><code>location.search</code>, <code>location.href</code>, <code>location.origin</code>分别代表url中的querystring，完整url和域名。再结合<code>location.pathname</code>, <code>location.port</code>和<code>location.protocol</code>可以得到任意想要的URL参数。</p>\n<p>另外，新的API<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\">URLSearchParams</a>中有些方法可以对querystring做方便的增删改查的操作。</p>\n<ul>\n<li><code>append</code>增加一个检索参数</li>\n<li><code>delete</code>删除一个检索参数</li>\n<li><code>get</code>获取检索参数的第一个值</li>\n<li><code>getAll</code>获取检索参数的所有值</li>\n<li><code>has</code>检查是否存在某检索参数</li>\n<li><code>set</code>设置一个检索参数的新值，会覆盖原值</li>\n<li><code>keys</code>和<code>values</code>分别返回键和值组成的数组</li>\n</ul>\n<h3 id=\"16-js中的正则匹配\"><a href=\"#16-js中的正则匹配\" class=\"headerlink\" title=\"16. js中的正则匹配\"></a>16. js中的正则匹配</h3><p><span id=\"regexp\"></span></p>\n<p>js中的正则匹配和Perl的正则匹配规则基本类似。在js中，使用一个正则表达式字面量，由包含在斜杠之间的模式组成。正则表达式同时也是RegExp对象。除了简单模式外，考察对<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions\">正则表达式</a>的熟悉在它的特殊字符使用上。</p>\n<p>一些常见的特殊字符：</p>\n<ul>\n<li><p><code>\\</code> 用于转义</p>\n</li>\n<li><p><code>^</code> 用于匹配开始或表示一个反向字符集（如<code>[^xyz]</code>）</p>\n</li>\n<li><p><code>$</code> 用于匹配结尾</p>\n</li>\n<li><p><code>*</code> 匹配前一个表达式0或多次 &#x3D; <code>&#123;0,&#125;</code></p>\n</li>\n<li><p><code>+</code> 匹配前一个表达式1或多次 &#x3D; <code>&#123;1,&#125;</code></p>\n</li>\n<li><p><code>?</code> 匹配0或1次 &#x3D; <code>&#123;0,1&#125;</code>；紧跟量词后使匹配非贪婪</p>\n</li>\n<li><p><code>.</code> 匹配除换行符外任何单字符</p>\n</li>\n<li><p><code>(x)</code> 捕获匹配，会包括在最后结果中，也可以通过$1, $n来访问</p>\n</li>\n<li><p><code>(?:x)</code> 非捕获分组，匹配但不捕获</p>\n</li>\n<li><p><code>x(?=y)</code> 断言匹配，捕获后跟y的x</p>\n</li>\n<li><p><code>x|y</code> 匹配x或y</p>\n</li>\n<li><p><code>&#123;n&#125;</code> 量词，匹配n次，还有{n,m}和{n,}的用法</p>\n</li>\n<li><p><code>[xyz]</code> 字符集，可以使用<code>-</code>连接，如<code>[x-z]</code></p>\n</li>\n<li><p><code>\\d</code> 一个数字</p>\n</li>\n<li><p><code>\\D</code> 一个非数字</p>\n</li>\n<li><p><code>\\s</code> 一个空白字符，包含空格，制表符，分页符，换行符</p>\n</li>\n<li><p><code>\\S</code> 一个非空白字符</p>\n</li>\n<li><p><code>\\w</code> 一个单字字符，等价于<code>[A-Za-z0-9_]</code></p>\n</li>\n<li><p><code>\\W</code> 一个非单字字符</p>\n</li>\n</ul>\n<p>另外，正则表达式还有几个可选参数辅助搜索类型</p>\n<ul>\n<li>g 全局搜索</li>\n<li>i 不区分大小写</li>\n<li>m 多行搜索</li>\n<li>y 粘性搜索</li>\n</ul>\n<p>有一些方法用于和正则表达式相关</p>\n<ul>\n<li><code>exec</code> 在字符串中执行匹配，返回匹配结果</li>\n<li><code>test</code> 测试是否能匹配RegExp，返回true或false</li>\n<li><code>match</code> 对字符串执行查找匹配的String方法，返回匹配结果</li>\n<li><code>search</code> 在字符串中测试匹配，返回位置索引或-1</li>\n<li><code>replace</code> 在字符串中执行查找匹配，并使用替换字符串替换匹配的子字符串</li>\n<li><code>split</code> 使用一个正则表达式或字符串分割一个字符串，并储存在数组中</li>\n</ul>\n<p>常见的考法有，书写一个邮箱或手机号的正则表达式：</p>\n<ul>\n<li>邮箱 <code>/^(([^&lt;&gt;()\\[\\]\\\\.,;:\\s@&quot;]+(\\.[^&lt;&gt;()\\[\\]\\\\.,;:\\s@&quot;]+)*)|(&quot;.+&quot;))@((\\[[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]&#123;2,&#125;))$/</code></li>\n<li>手机号 <code>/^0*(13|15|18|14|17)(\\d&#123;9&#125;|\\d-\\d&#123;3&#125;-\\d&#123;5&#125;|\\d-\\d&#123;4&#125;-\\d&#123;4&#125;|\\d&#123;2&#125;-\\d&#123;3&#125;-\\d&#123;4&#125;|\\d&#123;2&#125;-\\d&#123;4&#125;-\\d&#123;3&#125;)$/</code></li>\n</ul>\n<h3 id=\"17-MVC和MVVM框架\"><a href=\"#17-MVC和MVVM框架\" class=\"headerlink\" title=\"17. MVC和MVVM框架\"></a>17. MVC和MVVM框架</h3><p>框架模式不是一门写代码的学问，而是一门管理与组织代码的学问。其本质是一种软件开发的模型。与设计模式不同，设计模式是在解决某类特定问题时总结抽象出的公共方法，是<strong>方法论</strong>的范畴，一种框架模式往往使用了多种设计模式，且和技术栈有耦合的关系。</p>\n<p>视图（View）从本质上讲是数据在图像上的一种体现和映射。用户在操作图像时可以达到操作数据的目的，在数据更改后，需要重新将数据映射到视图上。这实际上就是MVC的出发点。</p>\n<p><img src=\"/blog/blog/images/mvc.png\"></p>\n<ul>\n<li>View: 放置视图相关的代码，原则上里面不应该有任何业务逻辑。</li>\n<li>Controller: 放置视图与模型之间的映射，原则上这里应该很薄，他只放一些事件绑定相关的代码(router)，但并不实现真正的功能，他只是一个桥梁。</li>\n<li>Model: 这里的model不是说实体类，它是主要实现业务逻辑的地方。</li>\n</ul>\n<p>开发流程是先创建视图组件，再将之关联到Model上，通过View修改Model中的值时，Model会触发绑定在之上的所有View的更新。Backbone是个典型的例子。这么做部分分离了视图和逻辑。但是，在情况复杂时，Model的代码量将会大大膨胀。</p>\n<p><img src=\"/blog/blog/images/mvp.png\"></p>\n<p>MVP因此而生，其中Presenter（分发器）代替了原来的Controller，分担了Model的部分功能。针对上面的问题，Presetner隔断了Model和View，当M改变时，会通知P去更新视图。业务逻辑和绑定逻辑从V和M中分离出来到P中。使得MVP三方分工更加鲜明。绝大多数的PHP框架都是MVP类型的。</p>\n<p><img src=\"/blog/blog/images/mvvm.png\"></p>\n<p>MVVM是Model-View-ViewModel的缩写。在MVVM中，View和ViewModel是双向或单向数据绑定的关系。当ViewModel反应了Model中的数据模型，并绑定到视图属性上，反过来，视图属性变化后也会通过ViewModel影响Model。React，Vue这些流行的前端框架都是MVVM类型的。</p>\n<p>不管是MVC还是MVP或MVVM，他们都是<strong>数据驱动</strong>的。核心上基于M推送消息，V或P来订阅这个模型。使用者需要维护的不再是UI树，而是抽象的数据。当UI的状态一旦多起来，这种框架模式的优势就很明显了。</p>\n",
            "tags": [
                "面试",
                "前端",
                "FAQ"
            ]
        }
    ]
}