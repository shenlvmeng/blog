{
    "version": "https://jsonfeed.org/version/1",
    "title": "Shenlvmeng's Blog • All posts by \"设计\" tag",
    "description": "Be sharp, my friend.",
    "home_page_url": "http://shenlvmeng.github.com/blog",
    "items": [
        {
            "id": "http://shenlvmeng.github.com/blog/2022/08/25/all-about-code-2/",
            "url": "http://shenlvmeng.github.com/blog/2022/08/25/all-about-code-2/",
            "title": "关于编码的一切 ——《代码大全》 下",
            "date_published": "2022-08-25T14:37:19.000Z",
            "content_html": "<blockquote>\n<p>文接<a href=\"https://shenlvmeng.github.io/blog/2022/03/03/all-about-code/\">关于编码的一切 ——《代码大全》 下</a></p>\n</blockquote>\n<h2 id=\"软件质量\"><a href=\"#软件质量\" class=\"headerlink\" title=\"软件质量\"></a>软件质量</h2><p>在了解最基本的变量和语句组织后，这一部分围绕提高软件质量展开。</p>\n<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>软件的外在质量特性体现在：</p>\n<ul>\n<li>正确性</li>\n<li>可用性</li>\n<li>效率</li>\n<li>可靠性</li>\n<li>健壮性</li>\n<li>适应性</li>\n<li>完整性</li>\n<li>精确性</li>\n</ul>\n<p>内在质量特性体现在：</p>\n<ul>\n<li>可维护性</li>\n<li>可扩展性</li>\n<li>可移植性</li>\n<li>可读性</li>\n<li>可测试性</li>\n<li>可理解性</li>\n</ul>\n<p>而改善软件质量可以有很多技术：</p>\n<ul>\n<li>确定目标</li>\n<li>测试策略</li>\n<li>非正式走查</li>\n<li>正式技术复查</li>\n<li>外部审查</li>\n</ul>\n<p>开发过程中可以通过量化结果、制作原型、控制变更等手段提升质量。</p>\n<ul>\n<li>不同的质量保障手段效率各不相同，多种缺陷检测办法结合、人工和计算机检测结合，效果会比单打独斗要好；然而没有任何一种错误检测办法可以解决全部问题</li>\n<li>越早引入软件的问题，修正代价越大，尽早开始代码质量保障工作</li>\n<li>需求或架构上的错误相比编码阶段会带来更广泛的影响</li>\n<li>改善质量可以降低开发成本</li>\n</ul>\n<h3 id=\"协同构建\"><a href=\"#协同构建\" class=\"headerlink\" title=\"协同构建\"></a>协同构建</h3><p>协同构建即在同行的帮助下完成代码构建。方式包括但不限于结对编程、正式检查、非正式技术复查、文档阅读等等。<strong>结对编程</strong>和<strong>技术性复查</strong>可以缩短开发周期，排查出更多错误，减少代码的维护时间。同时，同行间的协同构建也有助于快速提升公司开发者的开发水平。</p>\n<ul>\n<li>结对编程<ul>\n<li>结对编程中，一名程序员敲代码，另外一名注意有没有出现错误，以及考虑策略性问题</li>\n<li>成功秘诀<ul>\n<li>事先确定编程规范，避免琐碎争吵</li>\n<li>不编程的成员不能变成旁观者</li>\n<li>不需要在简单问题上使用结对编程</li>\n<li>灵活对结对成员轮换，让大家熟悉不同系统</li>\n<li>避免新手组队</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>正式检查<ul>\n<li>一种特殊的复查，与会主持人负责组织事宜，按计划、概述、准备、与会人（非作者）阐述代码、详查报告、跟进等步骤推进</li>\n<li>针对代码而非作者</li>\n<li>最终由作者负责如何处理缺陷</li>\n</ul>\n</li>\n<li>走查<ul>\n<li>走查是形式和流程都比较宽松的代码复查方式，时间较短，重点也在检查错误而非修正它们</li>\n</ul>\n</li>\n<li>代码阅读<ul>\n<li>类似Code Review，关注点主要在代码本身，而非会议</li>\n</ul>\n</li>\n<li>公开演示：类似showcase</li>\n</ul>\n<h3 id=\"开发者测试\"><a href=\"#开发者测试\" class=\"headerlink\" title=\"开发者测试\"></a>开发者测试</h3><p>测试分单元测试、组件测试、集成测试、回归测试、系统测试，前两部分通常由开发者进行，后三部分由专门的测试人员进行。测试按是否了解测试对象内部工作原理也可以分为黑盒测试和白盒测试。最后要注意，<strong>测试 ≠ 调试</strong>。</p>\n<p>对于开发者而言，测试天生有些特别：</p>\n<ul>\n<li>测试的目标是找出错误而非实现功能</li>\n<li>测试绝不可能彻底证明程序里没有错误</li>\n<li>测试无法改善软件质量，它本身只是一个指示器</li>\n</ul>\n<p>开发者测试在整个项目时间中大概占8% - 25%，在测试时有一些tips：</p>\n<ul>\n<li>写代码前先写测试用例，不会比后写多花功夫</li>\n<li>不止进行“干净测试”，也要考虑“肮脏测试”</li>\n<li>很容易对测试覆盖率过度乐观</li>\n</ul>\n<p>在现实世界中，要穷尽所有可能的输入是不可能的，<strong>测试不可能完全</strong>，有些方法会起到作用：</p>\n<ul>\n<li>使用<strong>路径数</strong>计算计算用例的<strong>最少</strong>数目，它可以保证所有代码的执行<ul>\n<li>通过子程序时，开始记1</li>\n<li>遇到<code>if</code>、<code>while</code>、<code>repeat</code>、<code>for</code>、<code>and</code>、<code>or</code>或等价物时，+1</li>\n<li>遇到每一个<code>case</code>语句，+1；没有缺省分支时，再+1</li>\n</ul>\n</li>\n<li><strong>数据流测试</strong>可以覆盖到数据的变化情况<ul>\n<li>数据有<strong>已定义</strong>、<strong>已使用</strong>、<strong>已销毁</strong>状态</li>\n<li>子程序控制流有<strong>已进入</strong>、<strong>已退出</strong>状态</li>\n<li>测试所有的<strong>已定义</strong>、<strong>已定义-已使用</strong>组合，注意其他的组合顺序</li>\n</ul>\n</li>\n<li>一个好的测试用例可以覆盖可数据数据的一大部分</li>\n<li>用启发式方法去<strong>猜测错误</strong></li>\n<li>留意<strong>边界值</strong>，如数组边界的off-by-one错误</li>\n<li>考察<strong>好数据</strong>和<strong>坏数据</strong><ul>\n<li>好数据：期望输入、最小正常值、最大正常值、旧数据兼容性</li>\n<li>坏数据：没有数据、过多数据、无效数据、长度错误、未初始化</li>\n</ul>\n</li>\n<li>使用容易验证结果的测试数据</li>\n</ul>\n<p>关于错误，也有一些先验的规律：</p>\n<ul>\n<li>符合八二法则、<strong>绝大多数错误通常和几个具有严重缺陷的子程序有关</strong></li>\n<li>大多数错误影响范围有限</li>\n<li>大多数构建错误来自编程人员的错误，多从自身想问题</li>\n<li>笔误是一个常见的问题根源</li>\n<li>错误理解需求也是常见原因</li>\n<li>大多数的错误都较易修正</li>\n<li>业界经验是，平均1000行代码发现1-25个错误，发布产品大概是1000行代码0.5个，</li>\n<li>同样留意，测试用例本身是否有误</li>\n</ul>\n<p>在当前的编程环境和工作条件下，容易找到很多测试框架，它们会包含脚手架、diff工具、测试数据生成器、覆盖率监测、日志记录、系统干扰器等。另外，自动化测试、测试问题复盘等对测试质量也有提升帮助。</p>\n<h3 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h3><p>调试（debug）是寻找错误根本原因和纠正错误的过程。它和测试一样，本身不是提升代码质量的方法，而是诊断代码缺陷的手段。</p>\n<ul>\n<li>调试の误区<ul>\n<li>纯靠猜测找到问题所在</li>\n<li>不去花时间理解程序和问题</li>\n<li>暂时性的掩盖问题</li>\n<li>把问题推给硬件，而不思考是不是出在自己身上</li>\n</ul>\n</li>\n<li>寻找缺陷的步骤<ul>\n<li>让错误状态稳定下来 &#x3D;&gt; 稳定复现</li>\n<li>收集相关数据，构造错误原因假说</li>\n<li>通过测试或检查代码证实或证伪假说</li>\n</ul>\n</li>\n<li>一个无法稳定重现的问题，可能和初始化或和时间有关系</li>\n<li>寻找缺陷的tips<ul>\n<li>构建缺陷假说时，要能合理解释所有测试用例</li>\n<li>定位缺陷困难时，及时补充更多的测试用例复现问题，用<strong>多视图</strong>的方式盲人摸象定位缺陷</li>\n<li>测试用例过于发散时，及时用用例否定一些假说</li>\n<li><strong>二分法</strong>缩小嫌疑范围</li>\n<li>检查<strong>最近修改</strong>或<strong>最近出过错</strong>的代码</li>\n<li>小黄鸭调试法</li>\n<li>暂时休息一下</li>\n<li>蛮力调试<ul>\n<li>抛弃有问题的代码，从头设计和编码</li>\n<li>抛弃整个程序，从头开始设计和编码</li>\n<li>不放过任何一个编译器错误</li>\n<li>手动遍历所有的循环</li>\n<li>更换编译环境或比那一起</li>\n<li>持续自动化测试</li>\n<li>显示代码中所有的打印日志信息</li>\n</ul>\n</li>\n<li>给启发式调试法一个deadline</li>\n<li>调试中避免心理惯性：人们总期望一个新现象类似他们见过的某种现象</li>\n</ul>\n</li>\n<li>修正缺陷<ul>\n<li>修正问题前确保已经很好地理解了</li>\n<li>理解程序而不仅是问题</li>\n<li>验证对错误的分析或理解</li>\n<li>保留最初的源代码</li>\n<li>治本，而不要治标</li>\n<li>一次只改一个地方</li>\n<li>搜寻代码中还有没有类似的缺陷</li>\n</ul>\n</li>\n<li>调试工具<ul>\n<li>源代码diff</li>\n<li>编译警告信息</li>\n<li>lint和代码自动修正</li>\n<li>性能剖测（profile）</li>\n<li>测试脚手架</li>\n<li>调试器</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"重构\"><a href=\"#重构\" class=\"headerlink\" title=\"重构\"></a>重构</h3><blockquote>\n<p>更多重构介绍可以参考这篇blog<a href=\"https://shenlvmeng.github.io/blog/2020/08/17/refactoring-design-improvement/\">重构 —— 代码的实用性与艺术性</a></p>\n</blockquote>\n<p>重构即在<strong>不改变软件外部行为的基础上，改变其内部结构</strong>。即便是管理完善的项目，每个月都会发生需求变化，稳定不变的需求是个童话。</p>\n<p>代码出现以下“坏味道”（smell）时，代表需要重构了。</p>\n<ul>\n<li>代码重复</li>\n<li>子程序冗长</li>\n<li>嵌套过深</li>\n<li>内聚性差</li>\n<li>参数列表过长</li>\n<li>类和继承关系不合理</li>\n<li>基本数据类型过多</li>\n<li>“流浪数据”传递</li>\n<li>无所事事的类</li>\n<li>命名不当</li>\n<li>难理解的注释</li>\n<li>全局变量</li>\n<li>子程序需要前置或后置处理</li>\n<li>过早设计或过度设计</li>\n<li>…</li>\n</ul>\n<p>重构分级别有下面一些手段</p>\n<ul>\n<li>数据级<ul>\n<li>具名常量</li>\n<li>更可读的变量</li>\n<li>函数替代表达式</li>\n<li>中间变量</li>\n<li>减少重复使用变量</li>\n<li>类型码转成类或枚举类型</li>\n<li>类封装</li>\n</ul>\n</li>\n<li>语句级<ul>\n<li>分解布尔表达式</li>\n<li>用可读名字的布尔函数替代布尔表达式</li>\n<li>合并条件语句中的重复代码片段</li>\n<li><code>break</code>或<code>return</code>替代循环控制变量</li>\n<li>多态替换条件语句</li>\n<li>null对象替代空值检测</li>\n</ul>\n</li>\n<li>子程序<ul>\n<li>内莲花</li>\n<li>提炼子程序</li>\n<li>转化为类</li>\n<li>增&#x2F;删参数</li>\n<li>合并&#x2F;拆分子程序</li>\n<li>读写操作分离</li>\n<li>传递成员&#x2F;类</li>\n</ul>\n</li>\n<li>类实现<ul>\n<li>值&#x2F;引用对象转化</li>\n<li>成员函数&#x2F;成员数据位置移动</li>\n<li>相似代码提炼到基类</li>\n<li>差异代码拆分到派生类</li>\n</ul>\n</li>\n<li>类接口<ul>\n<li>类拆分&#x2F;合并</li>\n<li>删除类</li>\n<li>去掉中间人</li>\n<li>继承替代委托</li>\n<li>委托替代继承</li>\n<li>引入外部成员函数</li>\n<li>引入扩展类</li>\n<li>封装不使用的成员函数</li>\n</ul>\n</li>\n<li>系统级<ul>\n<li>为无法控制的数据创建索引源</li>\n<li>工厂模式</li>\n<li>异常&#x2F;错误处理代码选型</li>\n</ul>\n</li>\n</ul>\n<p>要想让重构不影响日常功能开发，需要考虑</p>\n<ul>\n<li>有一个代码版本管理工具</li>\n<li>重构步伐小一点</li>\n<li>同一时间只做一个重构</li>\n<li><strong>重新测试</strong></li>\n<li>增加测试用例</li>\n<li>检查代码更改</li>\n<li>根据重构风险选择重构方法</li>\n<li>不要把重构当成糟糕设计的挡箭牌</li>\n<li>避免用重构代替重写</li>\n</ul>\n<p>重构可以在修改代码的时候进行，不论是增加修改子程序还是类，或者是修复缺陷。对于从未重构的糟糕代码，可以用一部分混乱的代码隔离复杂度，把理想规整的代码和混乱不堪的真实世界隔离开。</p>\n<h3 id=\"代码调整策略\"><a href=\"#代码调整策略\" class=\"headerlink\" title=\"代码调整策略\"></a>代码调整策略</h3><p>代码调整指出于<strong>性能</strong>考虑，对代码进行实现上的调整。本章主要讨论策略。</p>\n<ul>\n<li>动手前的考虑<ul>\n<li><strong>性能≠代码速度</strong></li>\n<li>想清楚你确实在解决一个需要解决的问题</li>\n</ul>\n</li>\n<li>调整考量<ul>\n<li>程序设计：设计架构时考虑整体性能，再为每个子系统、类设计要达到的资源占用目标</li>\n<li>和操作系统的交互</li>\n<li>代码编译</li>\n<li>硬件</li>\n<li>类和子程序设计</li>\n<li>代码调整</li>\n</ul>\n</li>\n<li>帕累托法则，又称八二法则，程序中20%的子程序耗费了80%的执行时间</li>\n<li>一些<strong>错误认知</strong><ul>\n<li>减少代码行数就可以减少资源占用</li>\n<li>特定的写法会比其他的更快，代码也会更小（<em>要看编译环境</em>）</li>\n<li>应当随时随地优化（<em>不成熟的优化不如不优化</em>）</li>\n<li>运行速度和正确性同样重要</li>\n</ul>\n</li>\n<li>先提升代码可维护性，在程序完成且表现正确后，再去提升系统性能</li>\n<li>常见的低效率来源<ul>\n<li>IO操作</li>\n<li>内存分页</li>\n<li>系统API调用</li>\n<li>脚本语言</li>\n</ul>\n</li>\n<li>性能测量：没有准确的性能测量就不要去做优化</li>\n<li>代码调整需要反复尝试，才能达到理想的性能提高</li>\n</ul>\n<h3 id=\"代码调整技术\"><a href=\"#代码调整技术\" class=\"headerlink\" title=\"代码调整技术\"></a>代码调整技术</h3><p>文接上章，本章讨论具体调整手段。</p>\n<ul>\n<li>代码调整和重构相反，大多数情况下是以牺牲程序可读性为代价换取更高的性能</li>\n<li>调整手段<ul>\n<li>逻辑<ul>\n<li>知道答案后停止判断</li>\n<li>按照出现频率调整判断顺序，把容易为真的判断放在最前面</li>\n<li>表驱动法代替复杂表达式</li>\n<li>惰性求值</li>\n</ul>\n</li>\n<li>循环<ul>\n<li>把判断提出循环体</li>\n<li>展开小循环</li>\n<li>合并循环</li>\n<li>减少循环体内的操作</li>\n<li>用哨兵值提前结束循环</li>\n<li>把最忙的循环放在最内侧</li>\n<li>用低强度的计算代替高强度计算，如加法替代乘法，乘法代替幂运算</li>\n</ul>\n</li>\n<li>数据<ul>\n<li>使用整型而非浮点数</li>\n<li>减少数组维度</li>\n<li>使用辅助索引</li>\n<li>使用缓存</li>\n</ul>\n</li>\n<li>表达式<ul>\n<li>利用恒等式简化代码复杂度</li>\n<li>削弱计算强度</li>\n<li>编译期初始化</li>\n<li>小心系统函数，为了兼容最糟情况，系统函数会比较复杂</li>\n<li>事先算出结果</li>\n<li>删除公共表达式</li>\n</ul>\n</li>\n<li>子程序<ul>\n<li>子程序改为内联</li>\n</ul>\n</li>\n<li>用低级语言重写</li>\n</ul>\n</li>\n<li>再次强调，<strong>没有性能优化测量就没有代码调整</strong></li>\n</ul>\n<h2 id=\"系统考虑\"><a href=\"#系统考虑\" class=\"headerlink\" title=\"系统考虑\"></a>系统考虑</h2><p>这一部分站在系统的角度考虑构建过程中的程序规模、集成、工具等问题。</p>\n<h3 id=\"程序规模带来的影响\"><a href=\"#程序规模带来的影响\" class=\"headerlink\" title=\"程序规模带来的影响\"></a>程序规模带来的影响</h3><p>软件规模的扩大可能会为你带来意料之外的大量问题。</p>\n<ul>\n<li>如果你习惯于开发小项目，那么你的第一个大型项目很可能会严重失控</li>\n<li><strong>沟通交流</strong>：项目成员的扩大带来的交流路径不是加性的，是<strong>乘性</strong>的</li>\n<li><strong>错误</strong>：项目规模的扩大也会带来更高的缺陷密度</li>\n<li><strong>生产率</strong>：大项目会带来更低的生产率</li>\n<li><strong>工作量</strong>：软件构建的工作量和项目大小是线性关系，而其他活动的工作量则是非线性增加</li>\n<li>不同规模的代码从小到大可以称作程序、产品、系统、系统产品，没能意识到它们间的不同也是估算偏差的出现来源</li>\n<li>项目越正规，就越重视<strong>方法论</strong>，不得不写的文档也会更多，撰写的文档也会更正规</li>\n</ul>\n<h3 id=\"构建管理\"><a href=\"#构建管理\" class=\"headerlink\" title=\"构建管理\"></a>构建管理</h3><p>构建管理是软件管理中的一部分。</p>\n<ul>\n<li>鼓励良好的编程实践<ul>\n<li>逐行复查</li>\n<li>代码签名</li>\n<li>鼓励最佳实践</li>\n</ul>\n</li>\n<li>配置管理：系统化定义项目工件和处理流程<ul>\n<li>需求和设计变更<ul>\n<li>遵循系统化的变更手续</li>\n<li>成组变更</li>\n<li>评估变更成本</li>\n<li>坏味道：频繁大量变更</li>\n</ul>\n</li>\n<li>软件变更：版本控制软件</li>\n<li>机器配置变更：机器镜像</li>\n</ul>\n</li>\n<li>评估构建进度表<ul>\n<li>评估项目规模和工作量是软件项目管理中最具挑战性的部分，平均水平的大型软件都要超时1年，超预算100%才能完成</li>\n<li>清楚说明软件需求</li>\n<li>使用不同方法评估再对比</li>\n<li>定期更新评估</li>\n<li>以下因素会影响软件开发进度，但不易被量化<ul>\n<li>开发者的经验和能力</li>\n<li>团队的动力</li>\n<li>管理质量</li>\n<li>可重用的代码数目</li>\n<li>人员流动性</li>\n<li>需求变更</li>\n<li>文档量</li>\n<li>分级安全环境</li>\n</ul>\n</li>\n<li>如果进度落后了要怎么办<ul>\n<li>扩充团队在<strong>项目任务不能分割并一一击破</strong>时，只会增加项目交流复杂度，并加速项目延期</li>\n<li>缩减项目范围，有限保证核心功能</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>度量：对项目特征进行度量可以评估项目进度和风险，当然保证ddl比收集度量数据更重要</li>\n<li>把程序员当人看<ul>\n<li>程序员1天大概有30%时间花费在“对项目没有直接好处”的非技术活动中</li>\n<li><strong>不同程序员间的努力和能力差异很大</strong>，不同团队在软件质量和生产率的差异上也很大，好的和坏的程序员都倾向于聚集在一起</li>\n<li>在代码风格的信仰问题上，使用“建议”或大多数人达成统一的指导规范</li>\n<li>优良的物理工作环境有助于提升程序员的生产率和生产质量</li>\n</ul>\n</li>\n<li>管理你的管理者：向上管理</li>\n</ul>\n<h3 id=\"集成\"><a href=\"#集成\" class=\"headerlink\" title=\"集成\"></a>集成</h3><p>集成方式也会影响到集成的质量。从频率上分，有<strong>阶段式集成</strong>和<strong>增量集成</strong>，在阶段式集成中，分为单元开发和系统集成两个阶段。增量集成中，程序是一点一点写出来并一点点拼接起来的。对比阶段式集成，增量集成有下面一些好处：</p>\n<ul>\n<li>易于定位错误</li>\n<li>更早在项目中取得系统级结果</li>\n<li>对项目结果更好的监控</li>\n<li>能在更短的开发计划中建造出整个系统</li>\n</ul>\n<p>而增量集成有下面一些常见策略：</p>\n<ul>\n<li><strong>自顶向下集成</strong>：先集成系统设计，再集成具体实现；优点是能更早有整个系统的大局观，缺点是在前期会加入很多底层的mock代码，且将调试过程推迟到项目后期</li>\n<li><strong>自底向上集成</strong>：和自顶向下相反，优点是很容易定位错误，缺点是丧失全局的认识，系统设计的问题在后期修改成本较高</li>\n<li><strong>三明治集成</strong>：先集成顶部的高层业务对象和底部的基础工具类，再集成中间层代码，整合了自顶向下和自底向上</li>\n<li><strong>风险导向的集成</strong>：鉴别不同类的风险级别，先集成风险高的</li>\n<li><strong>功能导向的集成</strong>：一次集成一组功能，它基本上不需要脚手架，且每次集成都能增强系统的功能性，且和面向对象设计比较好协同工作</li>\n<li><strong>T型集成</strong>：在集成高层对象后，先选中某个特定功能块，完成一次所有类的集成，这样可以作为MVP演练整个系统</li>\n</ul>\n<p>结合<strong>冒烟测试</strong>的“<strong>每日构建</strong>”（daily build）是软件集成的一种最佳实践。它能让产品每天都有进步，且让项目保持一个固定的脉搏。做好daily build，有下面一些建议</p>\n<ul>\n<li>不放过失败的build，保证每次build都能通过冒烟测试</li>\n<li>每天进行冒烟测试</li>\n<li>冒烟测试需要和代码一样“与时俱进”</li>\n<li>让daily build和冒烟测试<strong>自动化</strong></li>\n<li>要求开发人员构建前进行冒烟测试</li>\n<li>将修订保持合适的合并节奏，不要太密，也不要太疏</li>\n<li>在早上发布build，给潜在问题留下修复时间</li>\n<li>顶住需求压力，保证daily build和冒烟测试</li>\n</ul>\n<p>在daily build的基础上，可以很轻易地做到1日多次的<strong>持续集成</strong>。</p>\n<h3 id=\"编程工具\"><a href=\"#编程工具\" class=\"headerlink\" title=\"编程工具\"></a>编程工具</h3><blockquote>\n<p>工欲善其事，必先利其器</p>\n</blockquote>\n<p>现代化的编程环境下，有很多可以采用的编程工具：</p>\n<ul>\n<li>设计工具</li>\n<li>源代码工具<ul>\n<li>IDE</li>\n<li>文本替换工具</li>\n<li>diff工具</li>\n<li>merge工具</li>\n<li>源代码美化器</li>\n<li>接口文档生成</li>\n<li>代码模板&#x2F;代码生成</li>\n<li>命令行</li>\n<li>代码质量分析<ul>\n<li>linter</li>\n<li>metrics报告</li>\n</ul>\n</li>\n<li>重构代码<ul>\n<li>重构器</li>\n<li>代码翻译器</li>\n</ul>\n</li>\n<li>版本控制工具</li>\n<li>数据字典</li>\n</ul>\n</li>\n<li>可执行码工具<ul>\n<li>目标码生成<ul>\n<li>编译器、链接器</li>\n<li>build工具，如make、ant</li>\n</ul>\n</li>\n<li>程序库&#x2F;第三方库</li>\n<li>代码生成向导</li>\n<li>安装指引</li>\n</ul>\n</li>\n<li>调试</li>\n<li>测试</li>\n<li>代码调整<ul>\n<li>性能剖测</li>\n<li>汇编和反汇编</li>\n</ul>\n</li>\n</ul>\n<p>在Unix这样的工具导向环境下就更容易孕育编程工具，如grep、diff、sort、make、tar、line、sed、awk、vi等。几乎所有的大型组织都有自己的内部工具和支持团队，不少比市面上的还要优秀。针对特定项目，有时候也会开发特定的项目工具，如航天、保险、医疗等。对于个人开发，也可以使用脚本这种自动执行重复性杂务的工具。</p>\n<p>最后要澄清一个事实，<strong>编程工具并不能消灭人在编程里的核心地位</strong>，只是不断<strong>重塑</strong>（reshape）编程的含义。连接到其他软硬件的复杂接口，规章制度、业务规则这些计算机编程之外的复杂之源还是要人来应对。而被用来填补真实世界和解决问题的计算机之间鸿沟的人，被称作程序员。</p>\n<h2 id=\"软件工艺\"><a href=\"#软件工艺\" class=\"headerlink\" title=\"软件工艺\"></a>软件工艺</h2><p>编程是硬件与艺术的融合体，软件工艺是编程美学的一种体现。</p>\n<h3 id=\"布局与风格\"><a href=\"#布局与风格\" class=\"headerlink\" title=\"布局与风格\"></a>布局与风格</h3><p>编排出色的代码会带来<strong>视觉</strong>上和<strong>思维</strong>上的愉悦。</p>\n<ul>\n<li>基本原则<ul>\n<li>好的布局可以凸显程序的逻辑结构，也更符合人类直觉</li>\n<li><strong>傻子都会写计算机理解的代码，而优秀程序员写的是人能看懂的代码</strong></li>\n<li>高手的机型并非天生优于新手，而是高手具备某种知识结构，这种结构有助于高手记住特定类型的信息；因此当信息符合这些结构时，就可以被轻易的理解</li>\n<li>布局非信仰，要保持头脑开放，接受已被证实更好的方法</li>\n</ul>\n</li>\n<li>布局技术<ul>\n<li><strong>空白</strong><ul>\n<li>分组</li>\n<li>空行</li>\n<li>缩进</li>\n</ul>\n</li>\n<li>括号</li>\n</ul>\n</li>\n<li>布局风格：同一层级的语句缩进相同<ul>\n<li>纯块结构</li>\n<li>模仿块结构</li>\n<li>花括号指定边界</li>\n<li>行尾布局（不推荐）</li>\n</ul>\n</li>\n<li>控制结构布局<ul>\n<li>段落间的空行</li>\n<li>复杂的表达式拆分条件到多行</li>\n<li>不用<code>goto</code></li>\n</ul>\n</li>\n<li>单行语句布局<ul>\n<li>控制长度</li>\n<li>使用空格</li>\n<li>后续行缩进统一</li>\n<li>后续行结尾统一</li>\n<li><strong>一行一条语句</strong><ul>\n<li>减少复杂度</li>\n<li>读代码仅需自上而下</li>\n<li>不要在单行中多个操作</li>\n</ul>\n</li>\n<li>一行一个声明</li>\n</ul>\n</li>\n<li>注释风格<ul>\n<li>缩进和代码一致</li>\n<li>用空行和代码隔开</li>\n</ul>\n</li>\n<li>子程序布局<ul>\n<li>空行分段</li>\n<li>参数按标准缩进</li>\n</ul>\n</li>\n<li>类布局<ul>\n<li>头部注释 -&gt; 构造函数&#x2F;析构函数 -&gt; public子程序 -&gt; protected子程序 -&gt; private子程序和成员</li>\n<li>文件布局<ul>\n<li>一个文件一个类</li>\n<li>文件命名和类有关</li>\n<li>在文件中清晰分隔各子程序</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"自说明代码\"><a href=\"#自说明代码\" class=\"headerlink\" title=\"自说明代码\"></a>自说明代码</h3><p>本节专注于文档的特殊补充形式，即“注释”。</p>\n<ul>\n<li>在代码中起主要作用的并非注释，而是<strong>好的编程风格</strong></li>\n<li>注释的哲学<ul>\n<li>注释能提供更高层级的抽象</li>\n<li>重复注释根本没用</li>\n<li>注释写的不合适只会起反作用</li>\n</ul>\n</li>\n<li>注释类别：在代码完工后，只允许出现后三种<ul>\n<li>重复代码（Bad case）</li>\n<li>解释代码：当代码过于复杂到需要解释时，最好是改进代码，而不是添加注释</li>\n<li>代码标记，如<code>TODO</code>，<code>FIXME</code></li>\n<li>概述代码</li>\n<li>意图说明</li>\n<li>传达代码以外的信息，如版权声明、保密要求</li>\n</ul>\n</li>\n<li>高效注释<ul>\n<li>用伪代码法减少注释时间</li>\n<li>将注释如何到开发风格中</li>\n</ul>\n</li>\n<li>注释技术<ul>\n<li>注释单行<ul>\n<li>去掉无关注是</li>\n<li>减少行尾注释</li>\n<li>行尾注释只用于数据声明、维护标记、标记行尾等场景</li>\n</ul>\n</li>\n<li>注释代码段<ul>\n<li>应表达<strong>why</strong>而非<strong>how</strong></li>\n<li>代码本身应尽力组做好说明</li>\n<li>注明非常规用法</li>\n<li>错误或语言环境独特点要加注释</li>\n</ul>\n</li>\n<li>注释数据声明<ul>\n<li>数值单位</li>\n<li>允许范围</li>\n<li>输入限制</li>\n<li>全局数据</li>\n</ul>\n</li>\n<li>注释控制结构<ul>\n<li>循环结束的行尾注释是代码太复杂的征兆</li>\n</ul>\n</li>\n<li>注释子程序<ul>\n<li>注释要靠近说明的代码</li>\n<li>用简短的话进行说明</li>\n<li>注释声明参数</li>\n<li>可以使用Javadoc这种工具</li>\n<li>说明子程序的全局作用</li>\n</ul>\n</li>\n<li>注释类、文件、程序</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"个人性格\"><a href=\"#个人性格\" class=\"headerlink\" title=\"个人性格\"></a>个人性格</h3><p>软件工程是纯粹的脑力劳动。软件工程师研究工具和原材料的本质时，实际上是在研究人的智力、性格这种无形的东西。</p>\n<ul>\n<li>编程工作本质上是项难以监督的工作，你也需要对自己负责</li>\n<li>聪明和谦虚</li>\n<li>求知欲<ul>\n<li>形成自我意识</li>\n<li>实验</li>\n<li>学习成功项目</li>\n<li>阅读文档</li>\n<li>和同行交流</li>\n</ul>\n</li>\n<li>不屈不挠的诚实感</li>\n<li>交流和合作：<strong>编程首先是与人交流，然后才是和计算机交流</strong></li>\n<li>创造力和纪律</li>\n<li>懒惰：避免“实在懒”，追求“开明懒”和“一劳永逸的懒”</li>\n<li>可能不那么明显的性格<ul>\n<li>坚持：要时不时抬头开清方向</li>\n<li>经验：不同于其他行业，<strong>软件开发行业的经验比书本知识价值要小，基础知识变化很快</strong>，不存在越老越吃香的情况。不持续学习跟上潮流，仅靠经验吃饭，会被逐渐淘汰。</li>\n</ul>\n</li>\n<li>习惯<ul>\n<li>好习惯很重要</li>\n<li>不要用“没有习惯”替代“坏习惯”</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"软件工艺探讨的话题\"><a href=\"#软件工艺探讨的话题\" class=\"headerlink\" title=\"软件工艺探讨的话题\"></a>软件工艺探讨的话题</h3><p>《代码大全》全书都着重于软件构建的细节，本章从抽象的关注点出发，看看哪些方面会影响软件的工艺。</p>\n<ul>\n<li>软件开发的核心是致力于<strong>降低复杂度</strong>，管理复杂度是软件的核心使命，之前各章节提过了很多具体办法。各种形式的抽象都是管理复杂度的强大工具。<ul>\n<li>划分子系统</li>\n<li>仔细定义类接口</li>\n<li>保持接口抽象性</li>\n<li>避免全局变量</li>\n<li>避免深层次继承</li>\n<li>避免深度嵌套和循环</li>\n<li>不用<code>goto</code></li>\n<li>子程序短小精悍</li>\n<li>使用清晰明了的变量名</li>\n<li>使用规范和约定减少理解负担</li>\n</ul>\n</li>\n<li>软件开发和其<strong>过程</strong>密不可分，在多程序员参与的项目里，组织性的重要性超过了个人技能<ul>\n<li>坏的过程只会损耗脑力，好的过程则可以开发脑力到极限</li>\n</ul>\n</li>\n<li>首先为人写程序，然后才是机器，强调代码可读性，便于与同行沟通</li>\n<li>深入一门语言去编程，不浮于表面<ul>\n<li>杰出的程序员会考虑他们要干什么，然后才是怎么用手头的工具实现目标</li>\n</ul>\n</li>\n<li>借助<strong>规范</strong>集中注意力</li>\n<li>基于问题域编程<ul>\n<li>将程序划分为不同层级的抽象<ul>\n<li>第0层：操作系统的操作和机器指令</li>\n<li>第1层：编程语言结构和工具</li>\n<li>第2层：底层实现结构，如算法和数据结构</li>\n<li>第3层：低层问题域，这一层已经有问题域相关的操作原语可以使用</li>\n<li>第4层：高层问题域，你的非技术用户某种程度也应该可以看懂你的代码</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>编程是科学和艺术融合的一门工程学科</li>\n<li><strong>迭代</strong>在软件开发中是很正常的现象。软件设计是一个逐步精化的过程。</li>\n<li>将软件和信仰分离开<ul>\n<li>不要盲目跟风</li>\n<li>保持折中态度</li>\n<li>权衡各种技术，再做决定</li>\n<li>基于实验，保持开放心态</li>\n</ul>\n</li>\n</ul>\n<p>–END–</p>\n",
            "tags": [
                "编程",
                "范式",
                "设计",
                "艺术",
                "质量"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2022/03/03/all-about-code/",
            "url": "http://shenlvmeng.github.com/blog/2022/03/03/all-about-code/",
            "title": "关于编码的一切 ——《代码大全》 上",
            "date_published": "2022-03-03T15:09:50.000Z",
            "content_html": "<blockquote>\n<p>拿到它的时候，它已印刷了13年之久；能在京东上找到，也是极大的幸运。</p>\n</blockquote>\n<p>《代码大全》是一部又大又全的工具书，它涵盖了关于编程各个环节的充分经验，可以作为日程编程工作的指导。将其他教我如何编程的书中的内容做了一个打包。数月研读下来，难免有所遗忘。这里将其中的精华尽量记录下来，也作为对全书内容的一个回顾。</p>\n<h2 id=\"打好基础\"><a href=\"#打好基础\" class=\"headerlink\" title=\"打好基础\"></a>打好基础</h2><p>第1部分主要围绕构建为读者讲解什么是构建，和关于构建我们需要了解和准备的。也为后面展开具体编程细节和设计艺术打基础。</p>\n<h3 id=\"走进软件构建\"><a href=\"#走进软件构建\" class=\"headerlink\" title=\"走进软件构建\"></a>走进软件构建</h3><p>构建是软件开发的核心，构建的质量对软件质量有实质影响。</p>\n<h3 id=\"隐喻理解软件开发\"><a href=\"#隐喻理解软件开发\" class=\"headerlink\" title=\"隐喻理解软件开发\"></a>隐喻理解软件开发</h3><p>用隐喻可以帮助理解软件开发的过程。</p>\n<ul>\n<li>一个好的隐喻应该是简单的，忽略了不必要的细节，对概念进行内化和抽象，让人从更高层面思考问题，从而避免低层次错误</li>\n<li>隐喻更像<strong>启示</strong>，而非<em>算法</em></li>\n<li>对于编程来说，还是将问题概念化</li>\n<li>有一些常见的软件隐喻<ul>\n<li>写作&#x2F;耕作：这些隐喻不太合适</li>\n<li>养殖：增量、迭代、自适应、演进的成长概念</li>\n<li>建造：规划设计文档，使用现成组件</li>\n</ul>\n</li>\n<li>组合各种隐喻，不要过度引申隐喻，带来误导</li>\n</ul>\n<h3 id=\"提前准备\"><a href=\"#提前准备\" class=\"headerlink\" title=\"提前准备\"></a>提前准备</h3><p>提前准备，降低风险。</p>\n<ul>\n<li>前期准备的必要性<ul>\n<li>降低风险</li>\n<li>通过逻辑、类比、数据说服项目经理<ul>\n<li>开始大项目前需要制定计划</li>\n<li>程序员是食物链的最后一环，架构师吃掉需求，设计师吃掉架构，程序员消化设计</li>\n<li>发现错误的时间要尽可能接近引入错误的时间，可以尽量降低修复时间</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>判别你所在的软件领域<ul>\n<li>在软件开发中，适用迭代式开发法比适用序列式开发法的情况多得多</li>\n</ul>\n</li>\n<li>先清楚定义问题</li>\n<li>再正确认清需求<ul>\n<li>正式详尽地描述需求，是项目成功的关键<ul>\n<li>面向目标、契约式编程</li>\n</ul>\n</li>\n<li>稳定需求是可望而不可即的<ul>\n<li><strong>开发过程会帮助客户更好地理解自己的需求，这也是需求变更的主要来源</strong></li>\n</ul>\n</li>\n<li>应对需求变更<ul>\n<li>核对当前需求的质量（<em>需要有一个需求质量的核对表</em>），及时回退到需求设计环节</li>\n<li>确保每个人都知道变更的代价</li>\n<li>建立变更的控制流程</li>\n<li>要放弃么？</li>\n<li>考虑项目的商业价值</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>考虑架构设计<ul>\n<li>架构指整个系统的设计约束，不会细节到子系统或类的设计约束</li>\n<li>架构的组成部分<ul>\n<li>程序组织</li>\n<li>主要的类和类的继承体系</li>\n<li>数据结构设计</li>\n<li>业务规则描述</li>\n<li>UI设计</li>\n<li>资源管理：数据库连接、线程、句柄</li>\n<li>安全</li>\n<li>性能</li>\n<li>可扩展性</li>\n<li>国际化</li>\n<li>错误处理：纠正还是检测、主动还是被动</li>\n<li>输入输出</li>\n<li>容错性</li>\n<li>过度工程：明确设立期望目标</li>\n<li>“买”还是“造”：如果架构选择自己做，那么一定要证明自己定制的组件在某方面胜过现有的</li>\n<li>变更策略：如何应对变更</li>\n</ul>\n</li>\n<li>架构的总体质量<ul>\n<li>和嗦、所解决的问题和谐一致，看起来自然</li>\n<li>描述所有主要的决策动机</li>\n<li>优秀的架构很大程度和机器与编程语言无关</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>投入的时间一般在20%-30%</li>\n</ul>\n<h3 id=\"关键的构建决策\"><a href=\"#关键的构建决策\" class=\"headerlink\" title=\"关键的构建决策\"></a>关键的构建决策</h3><p>选择语言、技术、构建实践。</p>\n<ul>\n<li>高级语言表达力更强<ul>\n<li><strong>你思考的能力取决于你是否知道可以表达该思想的词汇</strong></li>\n</ul>\n</li>\n<li>提前讲好使用的<strong>编程约定</strong>，去统一编程语言的细节</li>\n<li>找准在技术浪潮中的位置<ul>\n<li>如果在浪潮后期，就可以持续使用稳定的功能；在浪潮前期，则需要花时间找到文档中没有说明的编程语言特性</li>\n<li>“深入一种语言去编程”，<strong>程序员现决定想表达的思想是什么，再决定如何使用特定语言的工具去表达这些思想</strong></li>\n</ul>\n</li>\n<li>选择构建实践</li>\n</ul>\n<h2 id=\"创建高质量代码\"><a href=\"#创建高质量代码\" class=\"headerlink\" title=\"创建高质量代码\"></a>创建高质量代码</h2><p>这一部分主要讲解类和子程序的设计和编码。</p>\n<h3 id=\"如何做设计\"><a href=\"#如何做设计\" class=\"headerlink\" title=\"如何做设计\"></a>如何做设计</h3><p>一些启发式准则和idea</p>\n<ul>\n<li>设计的挑战<ul>\n<li>有的问题需要“解决”一边，才能明确定义它，然后再次解决</li>\n<li>设计成功应该是组织良好且清爽的，不过设计过程却并非如此</li>\n<li>设计需要取舍，受到限制</li>\n<li>设计需要启发式思维，但也是不断评估、讨论、调试实验中诞生的</li>\n</ul>\n</li>\n<li>设计的关键概念<ul>\n<li>管理复杂度<ul>\n<li>软件开发的本质复杂性来自复杂无序的现实世界，精确完整地识别依赖关系和意外情况，设计完全正确而不是部分正确的方案</li>\n<li>软件需要管理复杂度，在组织程序的时候便于在一个时刻专注于一个特定的部分，另外不遗漏暂时忽视的部分</li>\n<li>应对复杂度：减少本质复杂度到最小、避免偶然复杂度的无谓增长</li>\n</ul>\n</li>\n<li>理想的设计特征<ul>\n<li>最小复杂度</li>\n<li>易于维护</li>\n<li>松耦合</li>\n<li>可扩展、可重用</li>\n<li>高扇入（类被其他类大量使用）、低扇出（类少量使用其他类）</li>\n<li>可移植性</li>\n<li>精简性</li>\n<li>标准化</li>\n</ul>\n</li>\n<li>设计的层次<ul>\n<li>软件系统 &gt; 子系统或包 &gt; 类 &gt; 子程序 &gt; 子程序内</li>\n<li>常用子系统：业务规则、用户界面、数据库访问、OS抽象层</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>设计构造块：启发式方法<ul>\n<li>寻找现实对象：想想系统要模仿什么<ul>\n<li>辨识对象和其属性</li>\n<li>确定可以对对象做的操作</li>\n<li>确定对象能对其他对象进行的操作</li>\n<li>确定对象的可见范围</li>\n<li>定义对象接口</li>\n</ul>\n</li>\n<li>形成一致的<strong>抽象</strong>：让你关注某概念的时候忽略不必要的细节</li>\n<li><strong>封装</strong>实现细节：封装帮你掩盖不需要你看到的复杂度</li>\n<li><strong>继承</strong>能简化设计就继承</li>\n<li>隐藏秘密信息<ul>\n<li>保证接口最小且完备</li>\n<li>隐藏复杂度和变化源</li>\n</ul>\n</li>\n<li>找出容易改变的区域<ul>\n<li>业务规则、硬件依赖、输入输出、非标准的预演特性、状态变量、糟糕或复杂的设计</li>\n<li>将容易变化的部分隔离开，让变化的影响范围和变化的可能性成反比</li>\n</ul>\n</li>\n<li>保持松散耦合<ul>\n<li>耦合种类：简单数据参数、简单对象、对象参数、语义耦合（过多假设）</li>\n</ul>\n</li>\n<li>了解常用的设计模式<ul>\n<li>设计模式提供了现成的抽象来减少复杂度</li>\n<li>设计模式将抽象SOP化</li>\n<li>设计模式可以起到启发性作用</li>\n<li>设计模式将设计对话提高到更高层次来简化交流</li>\n</ul>\n</li>\n<li>其他启发式方法<ul>\n<li>高内聚</li>\n<li>契约式设计</li>\n<li>TDD</li>\n<li><strong>创建中央控制点，集中管控</strong></li>\n<li>拿不准时，使用蛮力突破</li>\n<li>画一个图</li>\n<li>设计模块化</li>\n</ul>\n</li>\n<li>使用启发式方法的原则<ul>\n<li>先理解问题</li>\n<li>找出现有数据和未知量之间的联系</li>\n<li>寻找之前的类似问题，或者解决一些相关问题</li>\n<li>执行计划</li>\n<li>回顾解</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>设计实践<ul>\n<li>迭代：第二个尝试往往会好于第一个</li>\n<li>分而治之，增量式改进</li>\n<li>自上而下设计和自下而上设计</li>\n<li>建立试验性原型：原型要足够简单可抛弃，又足以验证效果</li>\n<li>记录你的设计成果：wiki、邮件、UML图</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"设计类\"><a href=\"#设计类\" class=\"headerlink\" title=\"设计类\"></a>设计类</h3><ul>\n<li><strong>类是一组数据和子程序的聚合，有内聚的明确定义的职责</strong></li>\n<li>抽象数据类型（ADT）<ul>\n<li>ADT可以让你像现实世界一样操作实体，而不必在底层实现上摆弄实体</li>\n<li>ADT的好处<ul>\n<li>隐藏实现细节</li>\n<li>改动不需要影响整个程序</li>\n<li>接口语义更强</li>\n<li>更容易提高性能</li>\n</ul>\n</li>\n<li>在非面向对象环境，也可以使用ADT</li>\n</ul>\n</li>\n<li>良好的类接口<ul>\n<li>好的抽象<ul>\n<li>类接口应该有一致的抽象层次</li>\n<li>要理解类的抽象是什么</li>\n<li>考虑提供成对的服务，如打开&#x2F;关闭、添加&#x2F;删除</li>\n<li>尽可能让接口可编程，而不仅是表达语义</li>\n<li>谨防在修改时破坏接口抽象</li>\n<li>同时考虑抽象性和内聚性</li>\n</ul>\n</li>\n<li>好的封装<ul>\n<li>封装比抽象更强，它直接阻止你看到细节</li>\n<li>尽可能限制类和成员的可访问性</li>\n<li>不要公开暴露成员数据</li>\n<li>不要将实现细节暴露在接口上</li>\n<li>不要对类的使用者做任何假设</li>\n<li>让阅读代码比编写更方便，代码的阅读次数比编写多得多</li>\n<li>不要<strong>透过</strong>接口来编程，仅仅看类的接口文档无法得知如何使用一个类的话，正确的做法不是拉出类的源代码，查看内部实现，而是联系类作者。对于类作者来讲，正确的做法不是面对面告诉答案，而是去修改类的接口文档</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>设计和实现<ul>\n<li>通过<strong>包含</strong>来实现“有一个”的关系<ul>\n<li>警惕超过<strong>7</strong>个成员的类</li>\n</ul>\n</li>\n<li>通过<strong>继承</strong>实现“是一个”的关系<ul>\n<li>用public继承</li>\n<li>要么使用继承并详细说明，要么就不要使用它</li>\n<li>遵循Liskov替换原则，即对基类的子程序，在它的所有派生类上含义都应该是相同的，在调用时只用看基类无需考虑是哪一个派生类</li>\n<li>只继承需要继承的部分</li>\n<li>只有一个实例的类值得怀疑</li>\n<li>只有一个派生类的类也值得怀疑</li>\n<li>派生中覆盖了某个子程序，但是其中没做任何操作，也值得怀疑<ul>\n<li>很可能修改了基类接口的语义，慢慢地从基类接口很难理解派生类上的行为</li>\n</ul>\n</li>\n<li>避免过深地继承：降低复杂度</li>\n<li>尽量使用<strong>多态</strong>，避免类型检查</li>\n<li>适度使用继承<ul>\n<li>多个类共享数据而非行为 &#x3D;&gt; 创建类包含的公用对象</li>\n<li>多个类共享行为而非数据 &#x3D;&gt; 都从基类派生，在基类中定义公用的子程序</li>\n<li>多个类既公用数据也公用行为 &#x3D;&gt; 都从基类派生，在基类中定义公用的子程序和数据</li>\n<li>通过基类控制接口 &#x3D;&gt; 继承</li>\n<li>自己控制接口 &#x3D;&gt; 包含</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>成员函数和数据成员<ul>\n<li>减少子程序</li>\n<li>进制不必要的成员和运算符</li>\n<li>减少对其他类子程序的间接调用</li>\n</ul>\n</li>\n<li>构造函数<ul>\n<li>尽可能早构造函数中初始化所有数据成员</li>\n<li><strong>用私有构造函数来实现单例数据</strong></li>\n<li>优先使用深拷贝，除非需要，才使用浅拷贝</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>创建类的原因<ul>\n<li>为现实&#x2F;抽象世界的对象建模</li>\n<li>降低&#x2F;隔离复杂度</li>\n<li>隐藏实现细节</li>\n<li>限制变动的影响范围</li>\n<li>建立中心控制点</li>\n<li>将相关操作包装在一起</li>\n<li>避免的类：万能类、无关紧要类、动词命名类</li>\n</ul>\n</li>\n<li>超越类：包</li>\n</ul>\n<h3 id=\"设计子程序\"><a href=\"#设计子程序\" class=\"headerlink\" title=\"设计子程序\"></a>设计子程序</h3><ul>\n<li>子程序是为了实现特定目的编写的方法或过程</li>\n<li>编写子程序的正当理由<ul>\n<li>降低复杂度</li>\n<li>引入中间、易懂的抽象</li>\n<li>避免代码重复</li>\n<li>支持派生类覆盖</li>\n<li>隐藏指针操作</li>\n<li>改善性能</li>\n<li>增加可读性</li>\n</ul>\n</li>\n<li>子程序上的设计<ul>\n<li><strong>一个子程序只做一件事</strong></li>\n<li><strong>考虑靠近纯函数或纯副作用函数</strong></li>\n<li>内聚性<ul>\n<li>功能上的、顺序上的、通信上的</li>\n<li>避免临时的内聚性（只是需要同时执行才放在一起操作的子程序），如贫血的<code>startup()</code>方法</li>\n<li>避免逻辑上的、巧合的内聚性</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>起个好名字<ul>\n<li>描述所做的事情，而非做事情的过程</li>\n<li>避免使用模糊的动词</li>\n<li>不要仅用数字区分子程序名</li>\n<li>函数名不要过长</li>\n<li>考虑描述返回值</li>\n<li>使用预期强烈的动词 + 宾语</li>\n<li>使用对仗词，如add&#x2F;remove</li>\n<li><strong>为常用操作统一命名</strong></li>\n</ul>\n</li>\n<li>子程序长度：最好少于100行，可以接受100 - 200行</li>\n<li>子程序入参<ul>\n<li>按输入、修改、输出顺序排列参数</li>\n<li>如果子程序使用了相似的参数，考虑让他们的排列顺序一致</li>\n<li>删掉没有使用到的参数</li>\n<li>不要给入参重新赋值</li>\n<li>限制入参数（有的说3个，有的说7个）</li>\n<li>考虑给参数名增加前缀、后缀</li>\n<li><strong>入参和子程序需要在一个抽象层级下</strong></li>\n<li>使用具名参数</li>\n</ul>\n</li>\n<li>宏子程序和内联子程序<ul>\n<li>将宏表达式整个包含在括号内</li>\n<li>一般来讲，是不会用宏代替子程序的</li>\n<li>节制使用inline子程序，在确认有性能改进后再使用inline子程序</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"防御式编程\"><a href=\"#防御式编程\" class=\"headerlink\" title=\"防御式编程\"></a>防御式编程</h3><p>防御式编程让错误更容易发现和修改，并减小破坏。</p>\n<ul>\n<li>断言<ul>\n<li>主要用于开发和维护的阶段</li>\n<li>用错误处理代码处理预期中的状况，用断言处理绝不该出现的状况</li>\n<li>避免把需要执行的代码放在断言中</li>\n<li>对于高健壮性代码，应该先断言再处理错误</li>\n</ul>\n</li>\n<li>错误处理技术<ul>\n<li>返回中立值，如空串、0</li>\n<li>换用下一个正确数据，如获取温度</li>\n<li>返回上一个正确数据，如屏幕重绘</li>\n<li>使用最接近的合法值</li>\n<li>打印警告信息到日志文件中</li>\n<li>返回错误码</li>\n<li>显示出错信息</li>\n<li>关闭程序</li>\n<li>平衡正确性和健壮性</li>\n</ul>\n</li>\n<li>异常<ul>\n<li>通知程序其他部分，发生了不可忽略的错误</li>\n<li>只在真正例外的情况下才抛出异常</li>\n<li>避免再构造函数或析构函数中抛出异常</li>\n<li>在恰当抽象层次抛出异常</li>\n<li>在异常信息中加上导致异常的所有信息</li>\n<li>避免空的<code>catch</code>语句</li>\n<li>异常标准化 &amp; 异常报告机制</li>\n</ul>\n</li>\n<li>辅助调试的代码<ul>\n<li>进攻式编程：让问题更早暴露</li>\n<li>方便地移除调试代码</li>\n</ul>\n</li>\n<li>保留防御式代码的程度<ul>\n<li>保留检查重要错误的代码</li>\n<li>去掉检查细微错误的代码</li>\n<li>保留让程序稳妥崩溃的代码</li>\n<li>记录错误信息</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"伪代码编写\"><a href=\"#伪代码编写\" class=\"headerlink\" title=\"伪代码编写\"></a>伪代码编写</h3><ul>\n<li>创建一个类<ul>\n<li>创建类的总体设计</li>\n<li>创建类中的子程序</li>\n<li>复审并测试</li>\n</ul>\n</li>\n<li>伪代码<ul>\n<li>使用类似英语的用法描述准确操作</li>\n<li>避免使用特定编程语言的语法元素，防止陷入到代码本身的层级上设计</li>\n<li>在略高于代码的层次上进行设计</li>\n</ul>\n</li>\n<li>通过伪代码创建子程序<ul>\n<li>检查先决条件</li>\n<li>定义子程序要解决的问题</li>\n<li>决定如何测试</li>\n<li>在第三方库中搜寻可用功能</li>\n<li>考虑错误处理</li>\n<li>编写伪代码</li>\n<li>将伪代码转为高层次的注释</li>\n<li>在注释下填充代码</li>\n<li>检查代码是否需要进一步分解</li>\n<li>使用lint或编译器检查错误</li>\n<li>去掉冗余注释</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><p>这一部分深入到代码细节，围绕如何正确使用变量展开。</p>\n<h3 id=\"一般事项\"><a href=\"#一般事项\" class=\"headerlink\" title=\"一般事项\"></a>一般事项</h3><ul>\n<li>初始化的一些建议<ul>\n<li>声明的时候初始化</li>\n<li>靠近变量使用的时候初始化</li>\n<li>考虑对常量使用<code>final</code>或<code>const</code></li>\n<li>注意累加器和计数器的重置</li>\n<li>用可执行代码初始化</li>\n<li>检查合法性</li>\n</ul>\n</li>\n<li>作用域<ul>\n<li>将变量引用点集中起来可以提高可读性，这样可以减少大脑缓存</li>\n<li>减少变量的“存活时间”（从第一条引用语句到最后一条）</li>\n<li>减少作用域的一些原则<ul>\n<li>循环开始时初始化循环变量</li>\n<li>变量使用前再赋值</li>\n<li>对于变量先采用最严格的可见性，再逐渐放宽</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>持续性<ul>\n<li>子程序内&#x2F;手动回收前&#x2F;程序运行时&#x2F;持久存储</li>\n<li>为变量选择合适的持续性</li>\n</ul>\n</li>\n<li>绑定时间<ul>\n<li>编码时&#x2F;编译时&#x2F;加载时&#x2F;实例化时&#x2F;运行时</li>\n<li><strong>越晚绑定越有灵活</strong></li>\n<li>选择合适的灵活度</li>\n</ul>\n</li>\n<li>和控制结构匹配的数据结构<ul>\n<li>序列型数据 -&gt; 顺序语句</li>\n<li>选择型数据 -&gt; <code>if case</code>语句</li>\n<li>迭代型数据 -&gt; 循环语句</li>\n</ul>\n</li>\n<li>变量单一用途<ul>\n<li>只用作一件事</li>\n<li>使用所有已声明变量</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"取名\"><a href=\"#取名\" class=\"headerlink\" title=\"取名\"></a>取名</h3><p>取名是个学问。</p>\n<ul>\n<li>几个原则<ul>\n<li><strong>信达雅</strong></li>\n<li><strong>以问题为导向</strong>，面向目的而不是手段</li>\n<li>适当的长度，小于20个字符，大于8个字符</li>\n<li>作用域越小，变量名越短；使用较少的变量或全局变量适用较长的名字</li>\n<li>使用限定词（如min、avg、max）和对仗词</li>\n</ul>\n</li>\n<li>特定类型的变量名<ul>\n<li>循环下标：<code>i</code>,<code>j</code>,<code>k</code>，在嵌套循环时建议使用表意的变量名</li>\n<li>状态变量：取个比<code>xxxflag</code>更好的名字</li>\n<li>临时变量：避免用临时名字</li>\n<li>布尔变量：名字要蕴含真假的意义<ul>\n<li><code>done</code>&#x2F;<code>error</code>&#x2F;<code>found</code>&#x2F;<code>success</code></li>\n<li><strong>不建议使用<code>is</code>前缀</strong></li>\n<li>使用表示<strong>肯定</strong>的名字，理解成本低</li>\n</ul>\n</li>\n<li>枚举变量：缺少组前缀的需要加上前缀</li>\n<li>常量：不使用magic number或magic string</li>\n</ul>\n</li>\n<li>组内需要确定一个命名规范</li>\n<li>标准前缀<ul>\n<li>用户自定义类型缩写，UDT缩写</li>\n<li>正交化、便于检索</li>\n</ul>\n</li>\n<li>如何缩写<ul>\n<li>使用标准缩写</li>\n<li>去掉非前置元音</li>\n<li>去掉虚词，<code>and</code>等</li>\n<li>去掉无用后缀</li>\n<li>使用每个单词的第一或前几个字母</li>\n<li>不提倡语音缩写</li>\n<li>缩写要能读出来</li>\n<li>避免容易看错或读错的字符组合</li>\n</ul>\n</li>\n<li>应该避免的名字<ul>\n<li>令人误解</li>\n<li>具有不同含义但有相似名字</li>\n<li>发音相近</li>\n<li>出现数字，这是不好的征兆</li>\n<li>拼写错误</li>\n<li>仅靠大小写区分</li>\n<li>使用易混淆的字符，如<code>0</code>和<code>o</code>，<code>1</code>和<code>l</code></li>\n</ul>\n</li>\n<li>代码阅读次数要远远多于编写次数</li>\n</ul>\n<h3 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h3><ul>\n<li>数值<ul>\n<li>避免magic number</li>\n<li>避免除0</li>\n<li>避免混合类型比较哦</li>\n</ul>\n</li>\n<li>整数<ul>\n<li>检查整数除法</li>\n<li>检查整数溢出</li>\n</ul>\n</li>\n<li>浮点数<ul>\n<li>避免数据级相差巨大的数之间的加减</li>\n<li>避免相等比较</li>\n<li>避免舍入误差</li>\n</ul>\n</li>\n<li>字符串<ul>\n<li>避免magic string</li>\n<li>考虑国际化</li>\n<li>unicode支持</li>\n<li>C语言的字符串<ul>\n<li>注意字符串指针和字符数组的差异</li>\n<li>注意字符串长度声明为CONSTANT + 1</li>\n<li>用<code>null</code>初始化避免无结束符</li>\n<li>建议使用字符数组</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>布尔变量<ul>\n<li>使用布尔中间变量简化复杂判断</li>\n</ul>\n</li>\n<li>枚举类型<ul>\n<li>带来类型提示和提升可读性</li>\n<li>简化修改</li>\n<li>作为布尔变量的可扩展性方案</li>\n<li>枚举类型的第一个元素留作非法制</li>\n</ul>\n</li>\n<li>具名常量：“参数化”程序<ul>\n<li>统一使用</li>\n</ul>\n</li>\n<li>数组<ul>\n<li>确认数组下标</li>\n<li>顺序访问元素，不建议随机访问</li>\n<li>数组边界点</li>\n</ul>\n</li>\n<li>自定义类型：<code>typedef</code>作为类的轻量级方案</li>\n</ul>\n<h3 id=\"不常见的数据类型\"><a href=\"#不常见的数据类型\" class=\"headerlink\" title=\"不常见的数据类型\"></a>不常见的数据类型</h3><ul>\n<li>结构体：数据组合，没有行为的类<ul>\n<li><strong>用前一问：可以用类么</strong></li>\n<li>简化数据块操作</li>\n<li>简化参数列表</li>\n</ul>\n</li>\n<li>指针：灵活但容易出错<ul>\n<li><strong>用前一问：有访问器子程序或防御式编程么</strong></li>\n<li>标识内存中<strong>某个位置</strong>有<strong>某种内容</strong></li>\n<li>一般技巧<ul>\n<li>同时声明和定义</li>\n<li>使用前检查</li>\n<li>使用前判断内存是否损毁</li>\n<li>在提高代码清晰度上，不要节约使用指针</li>\n<li>简化指针表达式</li>\n<li>正确删除链表中的指针</li>\n<li>删除或释放前设为空值</li>\n<li>删除前检查是否非法</li>\n<li>统一跟踪分配情况</li>\n<li>统一在子程序里，集中实现上述策略</li>\n</ul>\n</li>\n<li>C++指针<ul>\n<li>理解指针和引用</li>\n<li><strong>指针用于“按引用传递”，const引用用于“按值传递”</strong></li>\n<li>使用<code>shared_ptr</code></li>\n</ul>\n</li>\n<li>C指针<ul>\n<li>使用显式类型</li>\n<li>避免强制类型转换</li>\n<li>遵循参数传递的<code>*</code>规则</li>\n<li>内存分配时使用<code>sizeof()</code>确定变量大小</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>全局数据：风险较大<ul>\n<li><strong>用前一问：有更好的方法么</strong></li>\n<li>常见问题<ul>\n<li>多线程重入问题</li>\n<li>阻碍代码重用</li>\n<li>破坏模块化和智力上的可管理性</li>\n</ul>\n</li>\n<li>使用理由<ul>\n<li>简化极常用的数据使用</li>\n<li>消除流浪数据（调用链中间的子程序不使用数据）</li>\n</ul>\n</li>\n<li>用访问器子程序取代全局数据<ul>\n<li>在访问前锁定控制</li>\n<li>在访问器子程序里构建一个抽象层</li>\n<li>对数据的所有访问限制在一个抽象层</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"语句\"><a href=\"#语句\" class=\"headerlink\" title=\"语句\"></a>语句</h2><p>在了解了数据视角的变量元素后，这一部分围绕语句组织展开。</p>\n<h3 id=\"直线型代码\"><a href=\"#直线型代码\" class=\"headerlink\" title=\"直线型代码\"></a>直线型代码</h3><ul>\n<li>直线型代码即按先后顺序放置语句和语句块</li>\n<li>必须明确先后顺序的语句<ul>\n<li><strong>想办法明确展示语句的依赖关系</strong><ul>\n<li>组织代码</li>\n<li>使用子程序名&#x2F;子程序参数凸显依赖</li>\n<li>使用注释</li>\n<li>通过断言或错误处理来检查</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>顺序无关的语句<ul>\n<li>使代码易于从上向下阅读，避免跳来跳去</li>\n<li>将相关语句组织在一起</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"条件语句\"><a href=\"#条件语句\" class=\"headerlink\" title=\"条件语句\"></a>条件语句</h3><ul>\n<li><code>if</code>语句<ul>\n<li><code>if-then</code>语句<ul>\n<li>先写正常代码，再写不常见情况</li>\n<li>不要在<code>if</code>后跟随空子句</li>\n<li>看看是不是不需要<code>else</code>子句</li>\n</ul>\n</li>\n<li><code>if-then-else</code>语句<ul>\n<li>利用布尔函数简化复杂的检测</li>\n<li>把常见情况放在最前面</li>\n<li>检查是否考虑了所有情况</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>case</code>语句<ul>\n<li>选择最有效的排列顺序，如执行频率</li>\n<li>简化每种case下的操作</li>\n<li><strong>最好能搭配枚举类型一起使用</strong></li>\n<li>使用<code>default</code>子句检查默认情况或错误</li>\n<li>注意有些语言的<code>case</code>会有fallthrough，需要加<code>break</code></li>\n</ul>\n</li>\n<li>循环语句<ul>\n<li>分为计数循环、连续求值循环、无限循环、迭代器循环。分别适用<code>for</code>、<code>while</code>、<code>foreach</code>语句</li>\n<li>循环控制<ul>\n<li>应该把循环体看作黑盒子，外围程序只知道它的控制条件</li>\n<li>合理判断使用<code>for</code>和<code>while</code>的地方</li>\n<li>尽量避免空循环</li>\n<li>循环内务（包括索引增加）要么放在循环开始，要么放在循环最后</li>\n<li>让循环终止条件看起来明显</li>\n<li>不要为了终止循环改动<code>for</code>循环的下标</li>\n<li>小心散布了很多<code>break</code>的循环，小心谨慎使用<code>break</code>和<code>continue</code></li>\n<li>检查循环端点是否会有off-by-one的问题</li>\n<li>在嵌套循环中使用有意义的变量名增强可读性</li>\n<li>循环要尽可能短，便于一目了然</li>\n<li>把嵌套限制在3层以内</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"不常见的控制结构\"><a href=\"#不常见的控制结构\" class=\"headerlink\" title=\"不常见的控制结构\"></a>不常见的控制结构</h3><ul>\n<li>多处返回：指程序中途的return或exit<ul>\n<li>只在能增强可读性时，使用中途的<code>return</code></li>\n<li>用防卫子句提前退出，简化复杂的错误处理</li>\n<li>减少程序中的<code>return</code>数目</li>\n</ul>\n</li>\n<li>递归：将复杂问题分而治之<ul>\n<li>确认终止条件</li>\n<li>使用安全计数器防止出现无穷递归</li>\n<li>把递归限制在一个子程序里，避免循环调用</li>\n<li>留意栈空间</li>\n<li>可以用循环结构等价式的先考虑循环结构，如阶乘和斐波那契数列</li>\n</ul>\n</li>\n<li><code>goto</code><ul>\n<li>反对随意使用<code>goto</code></li>\n<li><code>goto</code>灵活度太高，不容易用好，在可以使用其他控制结构时，不使用<code>goto</code></li>\n<li>在错误处理中，可以用状态变量、<code>try finally</code>语句实现跳出正常流</li>\n<li>如果在那1%的情况下需要使用<code>goto</code>，注意以下几点<ul>\n<li>尽量一个子程序只使用一个<code>goto</code></li>\n<li>尽量向前跳转而非向后</li>\n<li>确保所有的goto标号都被执行到</li>\n<li><strong>确认<code>goto</code>不会产生执行不到的代码</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"表驱动法\"><a href=\"#表驱动法\" class=\"headerlink\" title=\"表驱动法\"></a>表驱动法</h3><p>表驱动法是<strong>空间换时间</strong>的一种编程模式，使用数据结构模拟逻辑结构，将大部分复杂度放到容易被理解的数据结构中，从而提升代码可读性。下面是一个代码范例。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (((<span class=\"string\">&#x27;a&#x27;</span> &lt;= inputChar) &amp;&amp; (inputChar &lt;= <span class=\"string\">&#x27;z&#x27;</span>)) ||</span><br><span class=\"line\">  ((<span class=\"string\">&#x27;A&#x27;</span> &lt;= inputChar) &amp;&amp; (inputChar &lt;= <span class=\"string\">&#x27;Z&#x27;</span>)))  &#123;</span><br><span class=\"line\">  charType = CharacterType.Letter;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((inputChar == <span class=\"string\">&#x27; &#x27;</span>) || (inputChar == <span class=\"string\">&#x27;,&#x27;</span>) ||</span><br><span class=\"line\">  (inputChar = <span class=\"string\">&#x27;.&#x27;</span>) || (inputChar == <span class=\"string\">&#x27;!&#x27;</span>) || (inputChar == <span class=\"string\">&#x27;(&#x27;</span>) ||</span><br><span class=\"line\">  (inputChar = <span class=\"string\">&#x27;)&#x27;</span>) || (inputChar == <span class=\"string\">&#x27;:&#x27;</span>) || (inputChar == <span class=\"string\">&#x27;;&#x27;</span>) ||</span><br><span class=\"line\">  (inputChar = <span class=\"string\">&#x27;?&#x27;</span>) || (inputChar == <span class=\"string\">&#x27;-&#x27;</span>)) &#123;</span><br><span class=\"line\">  charType = CharacterType.Punctuation;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((<span class=\"string\">&#x27;0&#x27;</span> &lt;= inputChar) &amp;&amp; (inputChar &lt;= <span class=\"string\">&#x27;9&#x27;</span>)) &#123;</span><br><span class=\"line\">  charType = CharacterType.Digit;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用一个查询表建立每个字符和它的字符类型的关联后，代码可以简化为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">charType = charTypeTable[inputChar];</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查表方法<ul>\n<li>直接访问：如查询每月天数，或不同年龄对应的保险费率<ul>\n<li>有的时候键值要预先处理后才能直接使用，如可能很多年龄对应相似的费率，这时最好先将年龄<strong>换算</strong>到一个更好的key上</li>\n<li>进一步，我们可以把键值转换提取为独立的子程序</li>\n</ul>\n</li>\n<li>索引访问表：和直接访问的区别在于，对于不易<strong>换算</strong>到键值的情况，提供一个额外的索引表，先<strong>映射</strong>到索引表再查到数据</li>\n<li>阶梯访问表：主要针对表中的记录是对<strong>数据范围</strong>而非<strong>数据点</strong>生效的情况，使用端点作为key<ul>\n<li>留心端点带来的off-by-one情况</li>\n<li>可以使用二分查找代替顺序查找</li>\n<li>也可以使用索引访问技术</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"一般性问题\"><a href=\"#一般性问题\" class=\"headerlink\" title=\"一般性问题\"></a>一般性问题</h3><h4 id=\"布尔表达式\"><a href=\"#布尔表达式\" class=\"headerlink\" title=\"布尔表达式\"></a>布尔表达式</h4><ul>\n<li>使用<code>true</code>或<code>false</code>作判断</li>\n<li>简化复杂的表达式<ul>\n<li>使用中间变量或布尔函数</li>\n<li>使用决策表替代复杂的判断逻辑</li>\n</ul>\n</li>\n<li>编写<strong>肯定</strong>的布尔表达式，会让布尔表达式更易理解</li>\n<li>用括号分割较长的布尔表达式</li>\n<li>注意短路求值或惰性求值的情况</li>\n<li><strong>按照数轴的顺序编写数值表达式</strong>，类似<code>MIN_VALUE &lt;= i and i &lt;= MAX_VALUE</code>，可读性好很多</li>\n<li>在C语言中最好把常量放在左边</li>\n<li>注意区分Java中<code>a==b</code>和<code>a.equals(b)</code></li>\n</ul>\n<h4 id=\"空语句\"><a href=\"#空语句\" class=\"headerlink\" title=\"空语句\"></a>空语句</h4><ul>\n<li>小心使用</li>\n<li>使用<code>doNothing()</code>函数或<code>noop()</code>函数</li>\n<li>考虑能否换用非空的循环体</li>\n</ul>\n<h4 id=\"优化深层嵌套\"><a href=\"#优化深层嵌套\" class=\"headerlink\" title=\"优化深层嵌套\"></a>优化深层嵌套</h4><ul>\n<li>优化重复的<code>if</code>检查</li>\n<li>使用<code>break</code>简化嵌套<code>if</code>，如防卫子句</li>\n<li>转换成一组<code>if-then-else</code>结构</li>\n<li>转换成<code>case</code>语句</li>\n<li>将深度嵌套的语句抽离成子程序</li>\n<li>借助多态</li>\n<li>借助异常来跳出正常流</li>\n</ul>\n<h4 id=\"结构化编程\"><a href=\"#结构化编程\" class=\"headerlink\" title=\"结构化编程\"></a>结构化编程</h4><p>结构化编程的思路是仅使用<strong>顺序</strong>、<strong>选择</strong>、<strong>迭代</strong>的思路描述程序流，避免使用<code>break</code>，<code>continue</code>，<code>return</code>，<code>try-catch</code>来打断。</p>\n<h4 id=\"降低复杂度\"><a href=\"#降低复杂度\" class=\"headerlink\" title=\"降低复杂度\"></a>降低复杂度</h4><ul>\n<li><strong>程序复杂度的一个衡量标准是，为了理解程序，必须在同一时间记忆的智力实体数目</strong>，即理解程序花费的精力</li>\n<li>控制流的复杂度和不可靠的代码以及频繁出现的错误息息相关</li>\n<li>可以通过计算子程序的“决策点”粗估子程序的复杂度<ul>\n<li>从1开始，遇到<code>if</code>，<code>while</code>，<code>repeat</code>，<code>for</code>，<code>and</code>，<code>or</code>加一，为每一种<code>case</code>加一</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "编程",
                "范式",
                "设计"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2021/03/22/clean-architecture/",
            "url": "http://shenlvmeng.github.com/blog/2021/03/22/clean-architecture/",
            "title": "《架构整洁之道》—— 软件设计的思考",
            "date_published": "2021-03-22T15:47:20.000Z",
            "content_html": "<blockquote>\n<p>全文参考自马丁大叔的《架构整洁之道》，书中文笔清爽易懂，不过在后半段有点条理不清流于术而非道</p>\n</blockquote>\n<p>在编程领域，问题就像一个生命体一样，是在不断繁殖和进化的。它甚至经常不会人们预期中一般发展。作为一名出色的软件工程师或架构师，你需要有超出普通程序员的视角，考虑系统宏观的未来的发展。你的使命是，在这种恶劣的开发环境下，绘制一幅相对最优的图纸，用最少的时间、人力、金钱构建和维护一个随时可能融化在熵增热汤里的软件系统。和现实物理世界里的架构师类似，你需要了解编程世界里的一般规律，帮助你挑选武器（技术），修炼秘籍（方法论），在不同的江湖里（业务）打造不同的门派（软件系统）。</p>\n<p>开卷有益，祝你练武愉快~</p>\n<h2 id=\"你要做什么\"><a href=\"#你要做什么\" class=\"headerlink\" title=\"你要做什么\"></a>你要做什么</h2><p>简而言之，架构师的终极目标就是<strong>用最少的人力成本来满足构建和维护软件系统的需求</strong>。糟糕的架构设计会让软件在成功之前，就带来高昂的边际人力成本，即开发新需求的开支越来越大（因为程序员的时间都耗费在系统的修修补补上了）。然而，这种日益增长的边际人力成本现象并不少见。来源于类似龟兔赛跑中兔子的盲目自信，实际上，<strong>无论从短期还是长期看，胡乱编写代码的工作速度其实比循规蹈矩更慢</strong>。</p>\n<p>架构师存在的一个必要性就是，软件存在着两种价值维度：</p>\n<ul>\n<li><strong>行为价值（现在时）</strong>：即实现功能和弥补bug。这类价值是<strong>紧急却并不总是重要的</strong>。</li>\n<li><strong>架构价值（将来时）</strong>：即软件是否足够“软”（易于被修改），这类价值是<strong>重要却并不总是紧急的</strong>。</li>\n</ul>\n<p>很现实的一点是，在公司中，<strong>团队之间的抗争本来就是无穷无尽的</strong>。你作为研发团队的一员，职责的一部分就是避免你的代码在抗争的风吹雨打下变成一坨没人爱的shit。</p>\n<h2 id=\"编程范式\"><a href=\"#编程范式\" class=\"headerlink\" title=\"编程范式\"></a>编程范式</h2><p>没错，架构师们也有祖师爷。在1958到1968年期间，3大编程范式就已经陆续出现了。</p>\n<ul>\n<li><strong>结构化编程</strong>，由Dijkstra在1968年提出，并发扬光大，<strong>它对程序控制权的直接转移（程序语句）进行了限制和规范</strong></li>\n<li><strong>面向对象编程</strong>，最早在1966年提出，Ole Johan Dahl和Kriste Nygaard注意到，函数调用堆栈可以被放到堆内存中，从而在函数返回后继续保留。<strong>它对程序控制权的间接转移（函数调用）进行了限制和规范</strong></li>\n<li><strong>函数式编程</strong>，启发自Alonzo Church于1936年发明的lambda演算，发扬于1958年的LISP语言。<strong>它对程序的赋值进行了限制和规范</strong></li>\n</ul>\n<p>值得思考是，三大范式做的都是<strong>限制和规范</strong>，即告诉我们<strong>不能做什么</strong>，而不是可以做什么。另外，多态带来的架构边界飞跃，函数式编程带来的数据访问限制，结构化编程带来的算法拆解为我们架构软件提供了强大武器。这也与软件架构的三个关注点所契合：</p>\n<ul>\n<li><strong>功能性</strong>，即完整的功能实现</li>\n<li><strong>组件独立性</strong>，即合适的耦合度与细粒度</li>\n<li><strong>数据管理</strong>，即良好的数据结构设计</li>\n</ul>\n<h3 id=\"结构化编程\"><a href=\"#结构化编程\" class=\"headerlink\" title=\"结构化编程\"></a>结构化编程</h3><p>Dijkstra在1950年代思考编程时，得出过一个结论：编程是一项<strong>难度很大</strong>的活动。他倾向于把编程类比为数学推导过程，并发现<code>goto</code>的<strong>某些使用</strong>会导致<strong>模块无法被递归拆解成更小的单元</strong>。然而，去掉这些使用的<code>goto</code>可以被<strong>顺序结构、分支结构、循环结构这三种最小集</strong>等价表示出来。从而，大问题可以被逐步拆解为小问题。</p>\n<p>不过，事情也并非这么理想，当程序复杂后，我们不可能像Dijkstra一样，用严格的数学推导形式化证明编程的正确性。相反，类似实验学科的<strong>无法被证伪即正确</strong>，我们现今依旧使用着Dijkstra的结构化编程思路将大问题拆解为小问题。</p>\n<blockquote>\n<p>有趣的是，“无法被证伪即正确”和Dijkstra的一个观点<strong>“测试只能展示bug的存在，并不能证明不存在bug”</strong>不谋而合</p>\n</blockquote>\n<p>简而言之，去掉goto糟粕诞生的结构化编程中，最有价值的地方就是，它赋予我们创造<strong>可证伪程序单元</strong>的能力，从而架构起大程序。在架构设计领域，<strong>功能性拆解仍然是最佳实践之一</strong>。</p>\n<blockquote>\n<p>什么？什么叫做可证伪？你应该写过单元测试吧。</p>\n</blockquote>\n<h3 id=\"面向对象编程\"><a href=\"#面向对象编程\" class=\"headerlink\" title=\"面向对象编程\"></a>面向对象编程</h3><p>什么是面向对象？有人说面向对象是“数据和函数的组合”，也有人说是“对真实世界的一种建模方式”。但这两种理解要么片面，要么虚无缥缈。为了总结这种范式，我们先从它的3大特征入手：</p>\n<ul>\n<li><strong>封装</strong>，即将一组关联数据和函数圈起来。然而这种特性，从C语言起就支持（struct + 头文件），很难说它是面向对象编程的必要条件</li>\n<li><strong>继承</strong>，即可以在某个作用域对外部定义的一组变量与函数进行覆盖。不过C语言也能模拟出这种能力，看起来也比较勉强。</li>\n<li><strong>多态</strong>，即在同一接口描述下的不同具体实现形式，C语言起也做了支持（STDOUT），然而使用函数指针显式实现多态问题就在于指针的<strong>危险性</strong>。而面向对象编程对这种程序间接控制权的转移做了约束。</li>\n</ul>\n<p>传统的函数调用树中，系统行为决定了自上而下的控制流，而控制流决定了<strong>源代码依赖</strong>（代码实现）是自上而下的，比如在C中会使用<code>#include</code>引入依赖。此时不论是代码实现还是代码执行都是自上而下的。然而在<strong>多态</strong>的帮助下，底层函数需要依赖高层接口实现，作为高层函数的插件引入，从而将这种依赖关系和控制流反向，即<strong>依赖反转</strong>。实际上，借助安全便利的多态实现，可以轻松将依赖关系反转。</p>\n<p>从而架构师可以<strong>完全控制</strong>这种方式下，系统中所有的源代码依赖关系，进而随意更改源代码依赖关系。让每个组件都有<strong>独立部署</strong>和<strong>独立开发</strong>能力。好了，我们现在可以说明面向对象编程的含义了：</p>\n<p>面向对象编程就是以多态为手段来对源代码中的依赖关系进行控制的能力。这种能力让架构师可以构建<strong>插件式架构</strong>，让高层<strong>策略性组件</strong>和底层<strong>实现性组件</strong>相分离。借助接口，底层实现性组件作为插件，可以独立于高层组件开发和部署。</p>\n<h3 id=\"函数式编程\"><a href=\"#函数式编程\" class=\"headerlink\" title=\"函数式编程\"></a>函数式编程</h3><p>函数式编程依据的原理早在编程之前就已出现，相对前两种范式，函数式编程的风格可能相对陌生一点。在这类风格中，变量都是不可变的。从而让竞争问题、死锁问题、并发更新问题不复存在。一个架构良好的系统，需要将状态修改的部分和不需要修改的部分隔离开，然后用类似事务型内存的方式来保护可变量。另外，架构师应该着力于将大部分逻辑归于不可变组件中，可变组件的逻辑越少越好。</p>\n<p>书中还提到了只包含CR的事件溯源存储逻辑，即通过事务日志的方式保存当前状态。因为不存在更改和删除，从而不存在并发问题。也是一种很新颖的思路。</p>\n<p>回顾上面的三种编程范式，都在说什么<strong>不应该做</strong>。也即编程好似在充满死路的熵增旷野中，只有沿着相对安全的几个大方向才可拨开迷雾。</p>\n<h2 id=\"设计原则\"><a href=\"#设计原则\" class=\"headerlink\" title=\"设计原则\"></a>设计原则</h2><p>软件的中层需要具有良好的可读性、可扩展性。这里就不得不提到SOLID原则：</p>\n<ul>\n<li>SRP：<strong>单一职责原则</strong>，每个模块有且只有一个需要被改变的理由</li>\n<li>OCP：<strong>开闭原则</strong>，对扩展开放，对修改封闭</li>\n<li>LSP：<strong>里氏替换原则</strong>，子类型应该能够无无缝替换类型使用</li>\n<li>ISP：<strong>接口隔离原则</strong>，依赖的模块不要包含不需要的接口</li>\n<li>DIP：<strong>依赖反转原则</strong>，高层策略性代码不要依赖底层实现性代码</li>\n</ul>\n<h3 id=\"SRP\"><a href=\"#SRP\" class=\"headerlink\" title=\"SRP\"></a>SRP</h3><p>任何一个软件模块（一组紧密相关的函数和数据结构）都应该只对一个行为者负责。实际上，代码和数据就是靠着和某一类行为者的相关性组合起来的。我们需要<strong>将服务不同行为者的代码进行切分</strong>。</p>\n<h3 id=\"OCP\"><a href=\"#OCP\" class=\"headerlink\" title=\"OCP\"></a>OCP</h3><p>设计良好的软件应该易于扩展，同时抗拒修改。实现方式可以通过将系统划分为一系列组件，并且将依赖关系按层次组织，使得高阶组件不会因为低阶组件修改受到影响。</p>\n<h3 id=\"LSP\"><a href=\"#LSP\" class=\"headerlink\" title=\"LSP\"></a>LSP</h3><p>里氏替换原则表示，子类型应该能够被当做父类型使用。它实际上表示了一种面向接口设计的设计原则。一旦违背了这种可替换性，就会不得不在系统架构中增加大量复杂的应对机制。</p>\n<h3 id=\"ISP\"><a href=\"#ISP\" class=\"headerlink\" title=\"ISP\"></a>ISP</h3><p>ISP告诉我们任何软件设计如果依赖了不需要的东西，都是不好的迹象，很容易带来不必要的麻烦。</p>\n<h3 id=\"DIP\"><a href=\"#DIP\" class=\"headerlink\" title=\"DIP\"></a>DIP</h3><p>DIP告诉我们，应该多引用抽象类型，而不是具体实现。因为软件是经常变动的，而抽象出共性的接口则是较少变化的。从而可以衍生出一些守则，譬如：</p>\n<ul>\n<li>应该多使用抽象接口，避免使用多变的实现类</li>\n<li>不要在实现类上创建衍生类</li>\n<li>不要覆盖具体实现的函数</li>\n</ul>\n<p>不过当然了，还是得有人做实现的脏活累活的</p>\n<h2 id=\"组件构建\"><a href=\"#组件构建\" class=\"headerlink\" title=\"组件构建\"></a>组件构建</h2><h3 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h3><p>组件是构建软件的最小单元，同时也是源代码的集合。在早期会使用链接技术将程序和库函数链接起来，而后随着机器性能的增长，我们会在程序运行中插入动态链接文件，如今这种组件化插件式架构是最常见的软件构建形式。</p>\n<h3 id=\"组件聚合\"><a href=\"#组件聚合\" class=\"headerlink\" title=\"组件聚合\"></a>组件聚合</h3><p>和类相似，组件也有一些原则指引我们的构建工作。</p>\n<ul>\n<li>REP：复用&#x2F;发布原则，即可以一起发布的最小粒度就是复用的最小粒度，也即按可以同时发布聚合</li>\n<li>CCP：共同闭包原则，即因为同一原因修改的放在一起，反之不要放在一起，也即按变更原因聚合</li>\n<li>CRP：共同复用原则，即会被一起复用的放在一起，反之不要放在一起，也即按减少无用耦合聚合</li>\n</ul>\n<p>这三大原则相互牵制，在项目的不同阶段，某一原则重要性也会不同；比如在项目早期CCP就会更重要，而后REP会比较重要。</p>\n<h3 id=\"组合耦合\"><a href=\"#组合耦合\" class=\"headerlink\" title=\"组合耦合\"></a>组合耦合</h3><p>本节提出了一些可以定量衡量耦合健康度的指标，比较新颖。</p>\n<ul>\n<li>无依赖环原则：依赖关系中不能有环，会不利于厘清依赖关系；可以通过<strong>依赖反转</strong>或<strong>创建第三方依赖组件</strong>解决。循环依赖关系务必持续监控。</li>\n<li>稳定依赖原则：依赖关系必须指向稳定的方向，简单点说就是让经常变更的组件依赖于不经常变更的组件。一个组件的位置稳定性可以通过入向和出向依赖算出，它要能和组件的实际稳定性匹配。</li>\n<li>稳定抽象原则：抽象化程度需要和稳定性程度一直，即经常变更的组件要容易变更，即更具体实现；反之，稳定的组件要不容易变更，即更抽象。结合上条看，依赖关系应该指向更抽象的方向。</li>\n</ul>\n<p>使用位置稳定性指标I和抽象程度A，可以绘制一个坐标系。在主序列上的是最健康的，相反的两块痛苦区和无用区则是不健康的表现。用偏离主序列线的距离可以大致衡量依赖关系的健康程度。结合发布版本的变化来看，还可以得到变化趋势。</p>\n<h2 id=\"软件架构\"><a href=\"#软件架构\" class=\"headerlink\" title=\"软件架构\"></a>软件架构</h2><p>软件架构目的就是方便在工作中更好地对组件进行研发、部署、运行和维护。其中的策略就是<strong>保留尽可能多的可选项</strong>。让系统最大化程序员的生产力，同时最小化系统运营成本：</p>\n<ul>\n<li>开发：系统架构需要方便开发团队对它的开发，不同的团队结构应该采用不同的架构设计，比如团队的大小就会影响架构的选择</li>\n<li>部署：一键式部署</li>\n<li>运行：几乎任何运行问题都可以通过增加硬件来解决</li>\n<li>维护：减小新功能和系统缺陷占用的人力资源</li>\n</ul>\n<p>保持可选项，忽略那些无关紧要的实现细节。任何软件系统都可以拆解成<strong>策略</strong>（业务的宏观逻辑和流程）和<strong>细节</strong>（具体操作行为）。而<strong>策略才是系统的真正价值所在</strong>。细节是指那些和策略交互的东西，包括:</p>\n<ul>\n<li>I&#x2F;O设备</li>\n<li>数据库</li>\n<li>Web系统</li>\n<li>服务器</li>\n<li>框架</li>\n<li>交互协议</li>\n</ul>\n<p>在设计时，可以尽量拖延上面这些的设计，这样我们做出的决策才不会依赖各种很容易变化的信息。另一方面，也可以<strong>增加实现底层的可替换性</strong>。举个具体例子：<strong>设备无关性</strong>。</p>\n<h3 id=\"独立性\"><a href=\"#独立性\" class=\"headerlink\" title=\"独立性\"></a>独立性</h3><p>一个良好的架构应支持下面几点：</p>\n<ul>\n<li>系统用例：设计良好的架构需要能够<strong>看起来</strong>就可以反映系统的设计意图，比如一个购物车应用架构应该看起来就该是用来实现购物车的</li>\n<li>系统运行：可以解耦出多个独立服务，然后通过某种网络协议通信，这种架构即微服务</li>\n<li>系统维护</li>\n<li>系统开发</li>\n<li>系统部署：理想的独立部署应该能够做到<strong>热更新</strong></li>\n</ul>\n<p>要注意留意表面的重复和实际的重复，如果两段代码变更速率和缘由不同，那么就不算是真正的重复。</p>\n<h3 id=\"划分边界\"><a href=\"#划分边界\" class=\"headerlink\" title=\"划分边界\"></a>划分边界</h3><ul>\n<li>设计良好的系统架构不应该依赖细节，而应该尽可能推迟细节性的决策。通过划清边界，可以推迟和延后细节性的决策，从而节省大量时间，避免问题。</li>\n<li>边界线应该画在不相干的事情中间，譬如GUI和业务逻辑</li>\n<li>针对核心业务逻辑的插件式架构可以提高可维护性和可扩展性</li>\n</ul>\n<h3 id=\"边界剖析\"><a href=\"#边界剖析\" class=\"headerlink\" title=\"边界剖析\"></a>边界剖析</h3><p>简言之，应该尽可能从底层组件指向高层组件。</p>\n<h3 id=\"策略和层次\"><a href=\"#策略和层次\" class=\"headerlink\" title=\"策略和层次\"></a>策略和层次</h3><ul>\n<li>变更原因、时间和层次不同的策略应该属于不同的组件</li>\n<li>按距离系统输入、输出距离的远近，可以确定策略的层次</li>\n<li>源码间的依赖关系，应该主要和组件所在的层次挂钩</li>\n<li>低层组件应该以插件的方式依赖高层组件</li>\n</ul>\n<h3 id=\"业务逻辑\"><a href=\"#业务逻辑\" class=\"headerlink\" title=\"业务逻辑\"></a>业务逻辑</h3><p><strong>业务逻辑是程序中真正用于或者体现赚钱&#x2F;省钱的逻辑与过程</strong>。其中关键逻辑和关键数据紧密组合成为<strong>业务实体</strong>。业务实体应该只有高层逻辑，没有具体实现。而<strong>用例</strong>是业务实体在不同侧面的具体体现。通过用例可以规范用户和业务实体的交互方式。</p>\n<h3 id=\"“尖叫”的软件架构\"><a href=\"#“尖叫”的软件架构\" class=\"headerlink\" title=\"“尖叫”的软件架构\"></a>“尖叫”的软件架构</h3><p>“尖叫”即所见即所得。软件架构本身就足以能够体现其用途。一个良好的架构设计应该围绕用例展开，推迟和延后框架的选择，不要过度拘泥于框架。<strong>框架只是一个可选项</strong>，是一个工具，而不是一种信念，更不是一种架构。</p>\n<h3 id=\"整洁架构\"><a href=\"#整洁架构\" class=\"headerlink\" title=\"整洁架构\"></a>整洁架构</h3><p>一些常见的系统架构通常具有以下特点：</p>\n<ul>\n<li>独立于框架</li>\n<li>可被测试</li>\n<li>独立于UI</li>\n<li>独立于数据库</li>\n<li>独立于外部接口</li>\n</ul>\n<h3 id=\"Main组件\"><a href=\"#Main组件\" class=\"headerlink\" title=\"Main组件\"></a>Main组件</h3><ul>\n<li>Main组件包含了系统中最细节化最底层的策略，它应该在做完脏活累活后，将程序的控制权交给最高抽象层的代码去执行</li>\n<li>针对不同系统可以配置不同的Main组件，即将Main组件视为应用程序的一个插件</li>\n</ul>\n<h3 id=\"服务：微观和宏观\"><a href=\"#服务：微观和宏观\" class=\"headerlink\" title=\"服务：微观和宏观\"></a>服务：微观和宏观</h3><ul>\n<li>系统的架构边界事实上并不落在服务之间，而是<strong>穿透</strong>所有服务，在服务内以组件形式存在</li>\n<li>服务可以提升系统的可扩展性和可开发性，不过服务却并不能代表整个系统的架构设计</li>\n</ul>\n<h3 id=\"整洁的嵌入式架构\"><a href=\"#整洁的嵌入式架构\" class=\"headerlink\" title=\"整洁的嵌入式架构\"></a>整洁的嵌入式架构</h3><ul>\n<li>固件即对平台或硬件的强依赖代码，在固件和软件之间可以设置HAL（硬件抽象层），为它上层的软件提供服务，它可以帮助软件<em>脱离</em>目标硬件平台来测试</li>\n<li>类似地，我们还可以引入OSAL（操作系统抽象层）来减少软件对操作系统的依赖</li>\n</ul>\n<h2 id=\"实现细节\"><a href=\"#实现细节\" class=\"headerlink\" title=\"实现细节\"></a>实现细节</h2><p>那么什么算是实现细节呢？</p>\n<ul>\n<li><strong>数据库</strong>，数据的组织结构和模型都是系统架构的一部分，但是从磁盘中存储&#x2F;读取数据的机制或手段则没那么重要，就比如数据库或静态文件</li>\n<li><strong>Web</strong>，Web只是UI，只是一种I&#x2F;O设备</li>\n<li><strong>应用框架</strong>，框架被创造的目的是解决作者遇到的问题，它要求我们去阅读文档，按照作者的要求整合到我们的应用中，可以使用但是不要被框架绑定</li>\n</ul>\n<h3 id=\"案例：视频销售网站\"><a href=\"#案例：视频销售网站\" class=\"headerlink\" title=\"案例：视频销售网站\"></a>案例：视频销售网站</h3><ul>\n<li>系统架构设计的第一步是识别系统中的各种角色和用例</li>\n</ul>\n<p><em>–END–</em></p>\n",
            "tags": [
                "设计",
                "架构",
                "组件"
            ]
        }
    ]
}