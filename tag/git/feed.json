{
    "version": "https://jsonfeed.org/version/1",
    "title": "Shenlvmeng's Blog • All posts by \"git\" tag",
    "description": "Be sharp, my friend.",
    "home_page_url": "http://shenlvmeng.github.com/blog",
    "items": [
        {
            "id": "http://shenlvmeng.github.com/blog/2019/11/15/degit-improvement/",
            "url": "http://shenlvmeng.github.com/blog/2019/11/15/degit-improvement/",
            "title": "degit认识和改造",
            "date_published": "2019-11-15T13:51:58.000Z",
            "content_html": "<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>近日写了一个chrome插件的starter-boilerplate。但这类boilerplate被人们使用的方式常常是整合在cli库中。由于仓库本身的模板性质和git历史存在，并不合适使用npm分发或<code>git clone</code>快速搭建项目骨架。</p>\n<p>碰巧此前学习svelte的时候接触到了<a href=\"https://github.com/Rich-Harris/degit\">degit</a>，degit做的事很简单，<strong>复制git仓库代码</strong>。这也正是一个称职的boilerplate发挥光和热的方式。</p>\n<h2 id=\"degit使用\"><a href=\"#degit使用\" class=\"headerlink\" title=\"degit使用\"></a>degit使用</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">degit user/repo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># these commands are equivalent</span></span><br><span class=\"line\">degit github:user/repo</span><br><span class=\"line\">degit git@github.com:user/repo</span><br><span class=\"line\">degit https://github.com/user/repo</span><br><span class=\"line\"></span><br><span class=\"line\">degit user/repo my-new-project</span><br></pre></td></tr></table></figure>\n\n<p>上面是一个degit的基本用法，类似<code>git clone</code>指定仓库地址和本地目录名，默认将项目当前<code>master</code>分支的代码拷贝到本地。还可以在仓库后使用<code>#</code>分隔，指定分支名、tag名或commit hash。目前（2019&#x2F;11&#x2F;12）degit支持github、gitlab、BitBucket以及Sourcehut，暂不支持私有仓库。</p>\n<p>在一些情况下，我们可能希望在拷贝完代码后进行一些后置操作，如拷贝关联仓库或删除不必要文件等。对此，degit设计了<strong>actions</strong>来支持，可以在当前目录的<code>degit.json</code>中声明。目前actions只有<code>clone</code>和<code>remove</code>两种。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// degit.json</span></span><br><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;action&quot;</span>: <span class=\"string\">&quot;clone&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;src&quot;</span>: <span class=\"string\">&quot;user/another-repo&quot;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;action&quot;</span>: <span class=\"string\">&quot;remove&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;files&quot;</span>: [<span class=\"string\">&quot;LICENSE&quot;</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"degit优势\"><a href=\"#degit优势\" class=\"headerlink\" title=\"degit优势\"></a>degit优势</h2><p>如README中提到的，degit和<code>git clone --depth 1</code>还是有所区别的：</p>\n<ul>\n<li><code>git clone</code>后，终归还是会有个<code>.git</code>目录，需要手动重置</li>\n<li>degit在实现时增加了缓存策略，在有些情况下不需要重复下载代码，速度更快</li>\n<li>“更少的字数”（<code>degit user/repo</code>而不是<code>git clone --depth 1 git@github.com:user/repo</code>）</li>\n<li>灵活度更高，如前后置操作如actions的支持</li>\n<li>更好的可扩展性，未来可以在degit基础上实现交互等更复杂的设计</li>\n</ul>\n<h2 id=\"degit原理\"><a href=\"#degit原理\" class=\"headerlink\" title=\"degit原理\"></a>degit原理</h2><p>那么degit快在哪里？它的思路借鉴于<a href=\"https://github.com/vutran/zel\">zel</a>和<a href=\"https://github.com/lukeed/gittar\">gittar</a>，即方便快捷地从git仓库中下载需要的源代码。原理上，<strong>利用某些git平台url的特定规则，从平台下载tar.gz包，再本地解压</strong>。</p>\n<p>degit实现集中在<code>src/index.js</code>中。<code>src/bin.js</code>只用来实现cli部分的入口代码，<code>src/utils.js</code>则包含了一些工具函数。</p>\n<h3 id=\"入口\"><a href=\"#入口\" class=\"headerlink\" title=\"入口\"></a>入口</h3><p>在<code>src/bin.js</code>中，流程分下面几步：</p>\n<ol>\n<li>利用<a href=\"https://github.com/lukeed/mri\">mri</a>做了基本的参数处理</li>\n<li>实例化Degit对象，注册logger的监听方法</li>\n<li>调用<code>clone</code>方法</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> d = <span class=\"title function_\">degit</span>(src, args);</span><br><span class=\"line\"></span><br><span class=\"line\">    d.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;info&#x27;</span>, <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(chalk.<span class=\"title function_\">cyan</span>(<span class=\"string\">`&gt; <span class=\"subst\">$&#123;event.message.replace(<span class=\"string\">&#x27;options.&#x27;</span>, <span class=\"string\">&#x27;--&#x27;</span>)&#125;</span>`</span>));</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    d.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;warn&#x27;</span>, <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(</span><br><span class=\"line\">            chalk.<span class=\"title function_\">magenta</span>(<span class=\"string\">`! <span class=\"subst\">$&#123;event.message.replace(<span class=\"string\">&#x27;options.&#x27;</span>, <span class=\"string\">&#x27;--&#x27;</span>)&#125;</span>`</span>)</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    d.<span class=\"title function_\">clone</span>(dest)</span><br><span class=\"line\">        <span class=\"comment\">// .then(() =&gt; &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// &#125;)</span></span><br><span class=\"line\">        .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(chalk.<span class=\"title function_\">red</span>(<span class=\"string\">`! <span class=\"subst\">$&#123;err.message.replace(<span class=\"string\">&#x27;options.&#x27;</span>, <span class=\"string\">&#x27;--&#x27;</span>)&#125;</span>`</span>));</span><br><span class=\"line\">            process.<span class=\"title function_\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Degit初始化\"><a href=\"#Degit初始化\" class=\"headerlink\" title=\"Degit初始化\"></a>Degit初始化</h3><p>对象实例包含下面几个成员，其中repo信息需要处理后才能拿到。</p>\n<ul>\n<li><code>src</code>，string，用户输入的仓库地址</li>\n<li><code>cache</code>，boolean，是否使用缓存，来自命令行<code>-c</code>或<code>--cache</code>参数</li>\n<li><code>force</code>，boolean，目标文件夹有内容时，是否覆盖，来自<code>-f</code>或<code>--force</code>参数</li>\n<li><code>verbose</code>，boolean，是否打印详细日志，来自<code>-v</code>或<code>--verbose</code>参数</li>\n<li><code>repo</code>，处理<code>src</code>拿到仓库的详情，包括<ul>\n<li><code>site</code>，网页域名</li>\n<li><code>user</code>，用户&#x2F;组织名</li>\n<li><code>name</code>，仓库名</li>\n<li><code>ref</code>，分支、tag、commit hash</li>\n<li><code>url</code>，完整的HTTP url</li>\n</ul>\n</li>\n<li><code>directiveActions</code>，actions配置对应的处理函数，包含<ul>\n<li><code>clone</code>，递归处理src的仓库</li>\n<li><code>remove</code>，调用<code>remove</code>方法移除指定文件</li>\n</ul>\n</li>\n</ul>\n<p>repo信息来自src经过正则匹配出的详细信息。由于要利用一些git平台的url拼接规则，需要排除已知平台以外的url。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 支持的范围</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> supported = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([<span class=\"string\">&#x27;github&#x27;</span>, <span class=\"string\">&#x27;gitlab&#x27;</span>, <span class=\"string\">&#x27;bitbucket&#x27;</span>, <span class=\"string\">&#x27;git.sr.ht&#x27;</span>]);</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">parse</span>(<span class=\"params\">src</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> match = <span class=\"regexp\">/^(?:https:\\/\\/([^/]+)\\/|git@([^/]+)[:/]|([^/]+)[:/])?([^/\\s]+)\\/([^/\\s#]+)(?:#(.+))?/</span>.<span class=\"title function_\">exec</span>(</span><br><span class=\"line\">        src</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!match) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DegitError</span>(<span class=\"string\">`could not parse <span class=\"subst\">$&#123;src&#125;</span>`</span>, &#123;</span><br><span class=\"line\">            <span class=\"attr\">code</span>: <span class=\"string\">&#x27;BAD_SRC&#x27;</span>,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> site = (match[<span class=\"number\">1</span>] || match[<span class=\"number\">2</span>] || match[<span class=\"number\">3</span>] || <span class=\"string\">&#x27;github&#x27;</span>).<span class=\"title function_\">replace</span>(</span><br><span class=\"line\">        <span class=\"regexp\">/\\.(com|org)$/</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"comment\">// 排除范围外的url</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!supported.<span class=\"title function_\">has</span>(site)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DegitError</span>(</span><br><span class=\"line\">            <span class=\"string\">`degit supports GitHub, GitLab, Sourcehut and BitBucket`</span>,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">code</span>: <span class=\"string\">&#x27;UNSUPPORTED_HOST&#x27;</span>,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 匹配出用户名、仓库名、分支/tag/commit hash名</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> user = match[<span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> name = match[<span class=\"number\">5</span>].<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\.git$/</span>, <span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ref = match[<span class=\"number\">6</span>] || <span class=\"string\">&#x27;master&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 完整的仓库地址，需要http开头的</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> url = <span class=\"string\">`https://<span class=\"subst\">$&#123;site&#125;</span>.<span class=\"subst\">$&#123;</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">        site === <span class=\"string\">&#x27;bitbucket&#x27;</span> ? <span class=\"string\">&#x27;org&#x27;</span> : site === <span class=\"string\">&#x27;git.sr.ht&#x27;</span> ? <span class=\"string\">&#x27;&#x27;</span> : <span class=\"string\">&#x27;com&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">    &#125;</span>/<span class=\"subst\">$&#123;user&#125;</span>/<span class=\"subst\">$&#123;name&#125;</span>`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; site, user, name, ref, url &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"仓库下载\"><a href=\"#仓库下载\" class=\"headerlink\" title=\"仓库下载\"></a>仓库下载</h3><p>下载仓库流程如下：</p>\n<p><img src=\"https://s2.ax1x.com/2019/11/15/Mdbl6S.png\" alt=\"degit流程\"></p>\n<h4 id=\"获取缓存信息\"><a href=\"#获取缓存信息\" class=\"headerlink\" title=\"获取缓存信息\"></a>获取缓存信息</h4><p>degit的缓存放在<code>/home</code>或<code>/tmp</code>下的<code>.degit</code>目录下，按照<code>site/user/name</code>的目录组织。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 缓存目录</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> base = path.<span class=\"title function_\">join</span>(homeOrTmp, <span class=\"string\">&#x27;.degit&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> dir = path.<span class=\"title function_\">join</span>(base, repo.<span class=\"property\">site</span>, repo.<span class=\"property\">user</span>, repo.<span class=\"property\">name</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> cached = <span class=\"title function_\">tryRequire</span>(path.<span class=\"title function_\">join</span>(dir, <span class=\"string\">&#x27;map.json&#x27;</span>)) || &#123;&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>目录下有一个<code>map.json</code>和缓存的代码tar.gz包，包名格式为<code>&lt;commit-hash&gt;.tar.gz</code>。在map.json保存着此前使用过的分支名&#x2F;tag名&#x2F;简写commit名到commit hash的最新映射关系。形如下方：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;master&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;4e3a4089b4f0275964eb10a432dc1c15526a0b4d&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>这一步会尝试使用parse好的<code>site</code>、<code>user</code>、<code>name</code>属性找已有的缓存的<code>map.json</code>。没有找到时返回<code>&#123;&#125;</code>。</p>\n<h4 id=\"获取commit-hash\"><a href=\"#获取commit-hash\" class=\"headerlink\" title=\"获取commit hash\"></a>获取commit hash</h4><p>这一步分两种情况;</p>\n<ul>\n<li>使用缓存时，直接从上一步拿到的<code>map.json</code>里面找<code>ref</code>对应的commit hash</li>\n<li>不使用缓存时，需要从远端仓库拿分支名&#x2F;tag名到commit hash的对应关系（使用<code>git ls-remote</code>完成）。之后格式化为结构化数据并从中寻找<code>ref</code>对应的commit hash。如果中途失败，则fallback到使用缓存的方式。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fetchRefs</span>(<span class=\"params\">repo</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; stdout &#125; = <span class=\"keyword\">await</span> <span class=\"title function_\">exec</span>(<span class=\"string\">`git ls-remote <span class=\"subst\">$&#123;repo.url&#125;</span>`</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> stdout</span><br><span class=\"line\">            .<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">            .<span class=\"title function_\">filter</span>(<span class=\"title class_\">Boolean</span>)</span><br><span class=\"line\">            .<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">row</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">const</span> [hash, ref] = row.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;\\t&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 格式化过程</span></span><br><span class=\"line\">                <span class=\"comment\">// ...</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 错误处理</span></span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这一步若未找到hash，则无法构造下载的url，从而需要抛出错误。</p>\n<h4 id=\"构造下载地址\"><a href=\"#构造下载地址\" class=\"headerlink\" title=\"构造下载地址\"></a>构造下载地址</h4><p>根据不同的git平台固定的源码tar.gz归档url规则，构造下载的url，这也是degit思路的基础。目前支持gitlab、bucket、github风格的url。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 即将下载的tar.gz文件路径</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> file = <span class=\"string\">`<span class=\"subst\">$&#123;dir&#125;</span>/<span class=\"subst\">$&#123;hash&#125;</span>.tar.gz`</span>;</span><br><span class=\"line\"><span class=\"comment\">// 下载的url</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> url =</span><br><span class=\"line\">    repo.<span class=\"property\">site</span> === <span class=\"string\">&#x27;gitlab&#x27;</span></span><br><span class=\"line\">        ? <span class=\"string\">`<span class=\"subst\">$&#123;repo.url&#125;</span>/repository/archive.tar.gz?ref=<span class=\"subst\">$&#123;hash&#125;</span>`</span></span><br><span class=\"line\">        : repo.<span class=\"property\">site</span> === <span class=\"string\">&#x27;bitbucket&#x27;</span></span><br><span class=\"line\">        ? <span class=\"string\">`<span class=\"subst\">$&#123;repo.url&#125;</span>/get/<span class=\"subst\">$&#123;hash&#125;</span>.tar.gz`</span></span><br><span class=\"line\">        : <span class=\"string\">`<span class=\"subst\">$&#123;repo.url&#125;</span>/archive/<span class=\"subst\">$&#123;hash&#125;</span>.tar.gz`</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建目录并下载\"><a href=\"#创建目录并下载\" class=\"headerlink\" title=\"创建目录并下载\"></a>创建目录并下载</h4><p>不使用缓存时，会在创建缓存目录并下载。另外，指定<code>-f</code>或<code>--force</code>参数，会覆盖已有文件路径。最后使用https模块下载文件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">cache</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            fs.<span class=\"title function_\">statSync</span>(file);</span><br><span class=\"line\">            <span class=\"comment\">// ...</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">mkdirp</span>(path.<span class=\"title function_\">dirname</span>(file));</span><br><span class=\"line\">            <span class=\"comment\">// ...</span></span><br><span class=\"line\">            <span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(url, file);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 错误处理</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"更新缓存\"><a href=\"#更新缓存\" class=\"headerlink\" title=\"更新缓存\"></a>更新缓存</h4><p>下载成功会更新本地缓存，保证以后使用缓存时能使用尽量新的包。</p>\n<ol>\n<li>当前使用包的commit hash如果和指定分支&#x2F;tag&#x2F;commit hash对应的hash一致，则不需要更新</li>\n<li>在需要更新时，检查老的hash是否还有使用，如果没有使用，则清除hash对应的tar.gz包</li>\n<li>更新map.json里的对应关系</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateCache</span>(<span class=\"params\">dir, repo, hash, cached</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cached[repo.<span class=\"property\">ref</span>] === hash) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> oldHash = cached[repo.<span class=\"property\">ref</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldHash) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> used = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> cached) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cached[key] === hash) &#123;</span><br><span class=\"line\">                used = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!used) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// we no longer need this tar file</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                fs.<span class=\"title function_\">unlinkSync</span>(path.<span class=\"title function_\">join</span>(dir, <span class=\"string\">`<span class=\"subst\">$&#123;oldHash&#125;</span>.tar.gz`</span>));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// ignore</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cached[repo.<span class=\"property\">ref</span>] = hash;</span><br><span class=\"line\">    fs.<span class=\"title function_\">writeFileSync</span>(</span><br><span class=\"line\">        path.<span class=\"title function_\">join</span>(dir, <span class=\"string\">&#x27;map.json&#x27;</span>),</span><br><span class=\"line\">        <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(cached, <span class=\"literal\">null</span>, <span class=\"string\">&#x27;  &#x27;</span>)</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"解压tar-gz包\"><a href=\"#解压tar-gz包\" class=\"headerlink\" title=\"解压tar.gz包\"></a>解压tar.gz包</h4><p>创建cli中输入的目标目录，并将已下载到缓存中tar.gz包解压到目标路径下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">mkdirp</span>(dest);</span><br><span class=\"line\"><span class=\"keyword\">await</span> <span class=\"title function_\">untar</span>(file, dest);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"actions处理\"><a href=\"#actions处理\" class=\"headerlink\" title=\"actions处理\"></a><code>actions</code>处理</h4><p>如果在当前目录下获取到了<code>degit.json</code>，则执行后续的<code>clone</code>或<code>remove</code>操作。</p>\n<ul>\n<li>clone，在目标目录下继续一遍clone流程</li>\n<li>remove，删除指定文件或文件夹</li>\n</ul>\n<h2 id=\"degit改造\"><a href=\"#degit改造\" class=\"headerlink\" title=\"degit改造\"></a>degit改造</h2><p>degit虽好，但从上面也可以看到，支持仓库比较有限，且不支持私有仓库。在公司内部，无法从url推断git仓库类型时，degit就无法工作了。不过，借助degit本身的设计，稍微改造上面提到的“degit初始化”，“构造下载地址”部分，就可以让degit通过传参url风格的形式支持私有仓库。</p>\n<ul>\n<li>新增<code>-s</code>或<code>--style</code>命令行入参，表示git仓库url的风格，目前设计有github、gitlab、bitbucket这几个degit原始就支持的形式。</li>\n<li>解析仓库地址信息时，若有style入参，则先判断是否在上述允许范围内；保留原有从域名解析style的部分，新增若未解析出style，则从入参里取；最后再抛出不支持的仓库地址错误</li>\n<li>解析返回数据结构中，新增<code>style</code>字段表示url风格，原有的<code>site</code>为避免歧义，直接使用域名代替原有的域名前缀</li>\n<li>在构造下载地址时，直接根据style字段拼接url</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">parse</span>(<span class=\"params\">src, style</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (style &amp;&amp; !supportedGitStyle.<span class=\"title function_\">has</span>(style)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DegitError</span>(<span class=\"string\">`degit supports styles of github, gitlab, bitbucket`</span>, &#123;</span><br><span class=\"line\">            <span class=\"attr\">code</span>: <span class=\"string\">&#x27;UNSUPPORTED_STYLE&#x27;</span>,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> site = match[<span class=\"number\">1</span>] || match[<span class=\"number\">2</span>] || match[<span class=\"number\">3</span>] || <span class=\"string\">&#x27;github.com&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> gitStyle =</span><br><span class=\"line\">        style ||</span><br><span class=\"line\">        (match[<span class=\"number\">1</span>] || match[<span class=\"number\">2</span>] || match[<span class=\"number\">3</span>] || <span class=\"string\">&#x27;gitlab&#x27;</span>).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\.(com|org)$/</span>, <span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!supportedGitRepo.<span class=\"title function_\">has</span>(gitStyle)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DegitError</span>(</span><br><span class=\"line\">            <span class=\"string\">`degit supports GitHub, GitLab, Sourcehut and BitBucket without -s/--style parameters`</span>,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">code</span>: <span class=\"string\">&#x27;UNSUPPORTED_HOST&#x27;</span>,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> user = match[<span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> name = match[<span class=\"number\">5</span>].<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\.git$/</span>, <span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ref = match[<span class=\"number\">6</span>] || <span class=\"string\">&#x27;master&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> url = <span class=\"string\">`https://<span class=\"subst\">$&#123;site&#125;</span>/<span class=\"subst\">$&#123;user&#125;</span>/<span class=\"subst\">$&#123;name&#125;</span>`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; site, user, name, ref, url, <span class=\"attr\">style</span>: gitStyle &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 拼接url处</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> url =</span><br><span class=\"line\">    repo.<span class=\"property\">style</span> === <span class=\"string\">&#x27;gitlab&#x27;</span></span><br><span class=\"line\">        ? <span class=\"string\">`<span class=\"subst\">$&#123;repo.url&#125;</span>/repository/archive.tar.gz?ref=<span class=\"subst\">$&#123;hash&#125;</span>`</span></span><br><span class=\"line\">        : repo.<span class=\"property\">style</span> === <span class=\"string\">&#x27;bitbucket&#x27;</span></span><br><span class=\"line\">        ? <span class=\"string\">`<span class=\"subst\">$&#123;repo.url&#125;</span>/get/<span class=\"subst\">$&#123;hash&#125;</span>.tar.gz`</span></span><br><span class=\"line\">        : <span class=\"string\">`<span class=\"subst\">$&#123;repo.url&#125;</span>/archive/<span class=\"subst\">$&#123;hash&#125;</span>.tar.gz`</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"可能存在的问题\"><a href=\"#可能存在的问题\" class=\"headerlink\" title=\"可能存在的问题\"></a>可能存在的问题</h3><p>绝大多数私有仓库，都会对用户身份做校验，直接访问tar.gz链接会报401错误。这需要根据不同的内部平台自己做处理了。</p>\n<p>因为特殊原因，改造后的包和代码不提供。</p>\n<p><em>–END–</em></p>\n",
            "tags": [
                "脚手架",
                "degit",
                "git"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2018/08/16/git-workflow/",
            "url": "http://shenlvmeng.github.com/blog/2018/08/16/git-workflow/",
            "title": "git工作流最佳实践",
            "date_published": "2018-08-16T15:28:34.000Z",
            "content_html": "<blockquote>\n<p>参考：<a href=\"https://github.com/xirong/my-git/blob/master/git-workflow-tutorial.md\">my-git&#x2F;git-workflow-tutorial.md at master · xirong&#x2F;my-git</a></p>\n</blockquote>\n<p>git工作流有多种使用方法，在实际工作中的不良工作习惯，会造成很让人头大的麻烦。下面距离一些常用的工作流。</p>\n<h3 id=\"集中式\"><a href=\"#集中式\" class=\"headerlink\" title=\"集中式\"></a>集中式</h3><p>类似SVN，集中式工作流以中央仓库作为项目所有修改的单点实体，只用到master这一个分支。<strong>开发者提交功能修改到中央库前，采用<code>rebase</code>的方式“在其基础上添加自己的修改”，得到完美的线性历史；遇到冲突时，通过<code>git status</code>和<code>git add</code>合并冲突</strong>。最后<code>git rebase --continue</code>即可。遇到困难无法进行下去时，<code>git rebase --abort</code>就可以撤回到rebase前的状态。</p>\n<p>在这种工作流下，使用<code>rebase</code>参数比不使用的<code>git pull</code>好处在于，rebase后的提交记录会少一次累赘的“合并提交”。</p>\n<h3 id=\"功能分支\"><a href=\"#功能分支\" class=\"headerlink\" title=\"功能分支\"></a>功能分支</h3><p>git相较SVN强大在分布式的特征。功能分支工作流主要针对新增功能集成到正式项目。功能分支工作流仍然以中央仓库为基础，但不是直接提交本地历史到各自的本地master分支，而是在开发新功能时<strong>创建新的分支，描述新功能</strong>。不同的功能分支相互隔离，同时也保证master分支的代码一定没有问题。一旦功能分支push到master，意味着功能与其他开发者共享。</p>\n<p>合并到master分支的过程通过创建pull request进行，在pull request请求中，让其他开发者有机会先去review变更。Pull request被接受后，剩下的工作就和集中式很像了，拉取master分支代码，合并，提交。</p>\n<p>工作流程上：</p>\n<ol>\n<li>先checkout功能分支</li>\n<li>做本地开发提交，以及<code>push -u</code>推送到远端分支（<code>-u</code>是跟踪远端对应分支的意思）</li>\n<li>完成开发后，提交pull request，请求合并远端功能分支到master，团队其他成员可以进行评论</li>\n<li>在接受前，团队<strong>所有成员</strong>有需要，可以提交自己的修改到该功能分支，也会显示在pull request里</li>\n<li>在pull-request被接受后，在本地master上可以用pull或者<code>pull -r</code>的方式合并功能分支，前者更像功能和原来代码的合并，后者更偏向线型的提交历史</li>\n</ol>\n<h3 id=\"gitflow\"><a href=\"#gitflow\" class=\"headerlink\" title=\"gitflow\"></a>gitflow</h3><p>Gitflow工作流通过为功能开发、发布准备和维护分配独立的分支，让发布迭代过程更流畅。相较功能分支更复杂，但也更健壮。仍然用中央仓库作为所有开发者的交互中心。相对于使用仅有的一个master分支，Gitflow工作流使用两个分支来记录项目的历史。master分支存储了正式发布的历史，而<strong>develop分支作为功能的集成分支。</strong>从而可以在master的<strong>所有提交附上版本号</strong>。</p>\n<p>每个新功能位于一个自己的分支，有着和功能分支一样的开发工作流，唯一不同的是，功能分支不是从master分支上拉出新分支，而是使用develop分支作为父分支。每次合并都位于develop分支。</p>\n<p>一旦develop分支上有了做一次发布（或者说快到了既定的发布日）的足够功能，就<strong>从develop分支上checkout一个发布分支release</strong>。从这个时间点开始之后新的功能不能再加到这个分支上——这个分支只应该做Bug修复、文档生成和其它面向发布任务。在release工作完成后，合并release分支到master，并加上tag。同时，<strong>release上做的修改要合并会develop分支</strong>。最后删除release分支。</p>\n<p>维护分支或说是热修复（hotfix）分支用于给产品发布版本（production releases）快速生成补丁，这是唯一可以直接从master分支fork出来的分支。修改完成后，修改应该立马合并回master和develop。master也应该为合并生成新的tag。</p>\n<h3 id=\"forking\"><a href=\"#forking\" class=\"headerlink\" title=\"forking\"></a>forking</h3><p>Forking工作流是分布式工作流，可以安全可靠地管理大团队的开发者（developer）和不信任贡献者（contributor）的提交。这种工作流不是使用单个服务端仓库作为『中央』代码基线，而让各个开发者都有一个服务端仓库。这意味着各个代码贡献者有2个Git仓库而不是1个：一个本地私有的，另一个服务端公开的。Forking工作流的一个主要优势是，贡献的代码可以被集成，而不需要所有人都能push代码到仅有的中央仓库中。开发者push到自己的服务端仓库，而只有项目维护者才能push到正式仓库。</p>\n<p>新开发者想要在项目上工作时，不是直接从正式仓库克隆，而是fork正式项目在服务器上创建一个拷贝。这个仓库拷贝作为他个人公开仓库 —— 其它开发者不允许push到这个仓库，<strong>但可以pull下来修改</strong>。要提交本地修改时，push提交到自己公开仓库中 —— 而不是正式仓库中。 然后，给正式仓库发起一个pull request，让项目维护者知道有更新已经准备好可以集成了。为了集成功能到正式代码库，<strong>维护者pull贡献者的变更到自己的本地仓库中</strong>，检查变更以确保不会让项目出错， 合并变更到自己本地的master分支， 然后push master分支到服务器的正式仓库中。到此，贡献的提交成为了项目的一部分，其它的开发者应该执行pull操作与正式仓库同步自己本地仓库。</p>\n<p>具体来说，大致有下面几步：</p>\n<ol>\n<li>开发者fork正式仓库</li>\n<li>开发者clone自己的fork出来的仓库，与之前工作流不一样的是，<strong>Forking工作流需要2个远程别名 —— 一个指向正式仓库，另一个指向开发者自己的服务端仓库。</strong>，像下面这样  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add upstream https://bitbucket.org/maintainer/repo</span><br></pre></td></tr></table></figure></li>\n<li>开发者修改都是私有的，如果项目往前走了，可以用git pull获得新的提交</li>\n<li>开发者准备分享新功能时，需要先push到自己的公开仓库中，然后发起pull request通知项目维护者，集成开发者的功能分支</li>\n<li>项目维护者通过GUI岔开pull request或者pull代码到自己的本地仓库，再手动合并。</li>\n<li>开发者通过<code>pull upstream master</code>的方式拉取项目最新进展</li>\n</ol>\n<h3 id=\"pull-request\"><a href=\"#pull-request\" class=\"headerlink\" title=\"pull request\"></a>pull request</h3><p>pull request用于合并不同分支或不同仓库的代码，并在合并前进行一些讨论和代码微调，在上面不同工作流的情况下具体功能体现也不同。</p>\n<p>上面几种工作流范式只是几种标准的建议，正式的项目版本管理中，可以糅合上面的一些特点。</p>\n",
            "tags": [
                "git",
                "工作流",
                "pull request"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2018/08/16/some-tips-3/",
            "url": "http://shenlvmeng.github.com/blog/2018/08/16/some-tips-3/",
            "title": "工作中的遇到的一些小知识 3",
            "date_published": "2018-08-16T15:11:29.000Z",
            "content_html": "<h2 id=\"git-case-sensitive\"><a href=\"#git-case-sensitive\" class=\"headerlink\" title=\"git case sensitive\"></a>git case sensitive</h2><p>git本身是大小写敏感的。但在大小写不敏感的系统里，需要用hack方法记录仅修改文件名大小写的改动。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">mv</span> file.txt temp.txt</span><br><span class=\"line\">git <span class=\"built_in\">mv</span> temp.txt File.txt</span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;Renamed file.txt to File.txt&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"webpack的一些经验\"><a href=\"#webpack的一些经验\" class=\"headerlink\" title=\"webpack的一些经验\"></a>webpack的一些经验</h2><p><strong>DefinePlugin</strong></p>\n<p>允许创建一个在编译时可以配置的全局常量。在构建区分环境的包时很有用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> webpack.<span class=\"title class_\">DefinePlugin</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">PRODUCTION</span>: <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(<span class=\"literal\">true</span>),</span><br><span class=\"line\">  <span class=\"attr\">VERSION</span>: <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(<span class=\"string\">&quot;5fa3b9&quot;</span>),</span><br><span class=\"line\">  <span class=\"attr\">BROWSER_SUPPORTS_HTML5</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">TWO</span>: <span class=\"string\">&quot;1+1&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;typeof window&quot;</span>: <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(<span class=\"string\">&quot;object&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>注意：这个插件直接执行文本替换。因此：</p>\n<ul>\n<li>如果这个值是一个字符串，它会被当作一个代码片段来使用。</li>\n<li>如果这个值不是字符串，它会被转化为字符串(包括函数)。</li>\n<li>如果这个值是一个对象，它所有的 key 会被同样的方式定义。</li>\n<li>如果在一个 key 前面加了 typeof,它会被定义为 typeof 调用</li>\n</ul>\n<p><strong>resolve alias</strong></p>\n<p>创建import或require的别名，来确保模块引入变得更简单。例如，一些位于 src&#x2F; 文件夹下的常用模块：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">alias</span>: &#123;</span><br><span class=\"line\">    @: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;src/&#x27;</span>),</span><br><span class=\"line\">    <span class=\"title class_\">Utilities</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;src/utilities/&#x27;</span>),</span><br><span class=\"line\">    <span class=\"title class_\">Templates</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;src/templates/&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"z-index可能的坑\"><a href=\"#z-index可能的坑\" class=\"headerlink\" title=\"z-index可能的坑\"></a>z-index可能的坑</h2><p><strong>使用前提：z-index只能在position属性值为relative或absolute或fixed的元素上有效。</strong></p>\n<p>z-index值只决定同一父元素中的同级子元素的堆叠顺序。父元素的z-index值（如果有）为子元素定义了堆叠顺序（css版堆叠“拼爹”）。向上追溯找不到含有z-index值的父元素的情况下，则可以视为自由的z-index元素，它可以与父元素的同级兄弟定位元素或其他自由的定位元素来比较z-index的值，决定其堆叠顺序。同级元素的z-index值如果相同，则堆叠顺序由元素在文档中的先后位置决定，后出现的会在上面。</p>\n<h2 id=\"git-submodule\"><a href=\"#git-submodule\" class=\"headerlink\" title=\"git submodule\"></a>git submodule</h2><blockquote>\n<p>参考：<a href=\"https://yihui.name/cn/2017/03/git-submodule/\">GIT 子模块</a></p>\n</blockquote>\n<p>最新一个项目里要复用已有的一个git库的代码，具体来说就是要将之前在WebView的内容复刻到PC版完成（这个需求貌似应该还挺常见的）。为了保证代码复用性，选择了<code>git submodule</code>的方法。这也是我此前从没用过的一个命令。</p>\n<p>简单来说，是一个 GIT 仓库下面某个文件夹的来源可以跟本库的来源不同，这个文件夹连接着别的库，由别的库负责按本控制和管理。是不是和npm包管理的形式比较像。子模块可以手动添加，也可以在克隆一个主库的时候就直接实体化。具体来说，有四种情况：</p>\n<ul>\n<li>克隆库的时候要初始化子模块 &#x3D;&gt; 加上<code>--recursive</code>参数 <code>git clone --recursive git@github.com:shenlvmeng/trace-maker.git</code></li>\n<li>初始化已有库的子模块 &#x3D;&gt; <code>git submodule update --init --recursive</code></li>\n<li>从子模块的源更新该子模块 &#x3D;&gt; <code>git submodule update --recursive --remote</code></li>\n<li>添加一个新的子模块 &#x3D;&gt; <code>git submodule add &lt;git address&gt; &lt;folder address&gt;</code></li>\n</ul>\n<p>已有有git submodule的库内，<code>.gitmodules</code>是下面的样子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[submodule &quot;wheel&quot;]</span><br><span class=\"line\">    path = wheel</span><br><span class=\"line\">    url = git@github.com:shenlvmeng/wheel.git</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"npm-install\"><a href=\"#npm-install\" class=\"headerlink\" title=\"npm install\"></a>npm install</h2><p>npm install后跟的绝不仅仅只是包名，还可以通过ssh、http的形式引入npm包，唯一的要求是有<code>package.json</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install (with no args, <span class=\"keyword\">in</span> package <span class=\"built_in\">dir</span>)</span><br><span class=\"line\">npm install [&lt;@scope&gt;/]&lt;name&gt;</span><br><span class=\"line\">npm install [&lt;@scope&gt;/]&lt;name&gt;@&lt;tag&gt;</span><br><span class=\"line\">npm install [&lt;@scope&gt;/]&lt;name&gt;@&lt;version&gt;</span><br><span class=\"line\">npm install [&lt;@scope&gt;/]&lt;name&gt;@&lt;version range&gt;</span><br><span class=\"line\">npm install &lt;git-host&gt;:&lt;git-user&gt;/&lt;repo-name&gt;</span><br><span class=\"line\">npm install &lt;git repo url&gt;</span><br><span class=\"line\">npm install &lt;tarball file&gt;</span><br><span class=\"line\">npm install &lt;tarball url&gt;</span><br><span class=\"line\">npm install &lt;folder&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">alias</span>: npm i</span><br></pre></td></tr></table></figure>\n\n<p>一个<strong>package</strong>可以是下面的形式：</p>\n<ol>\n<li>包含<code>package.json</code>的工程文件夹</li>\n<li>gzip过的“1”的压缩包</li>\n<li>指向“2”的url</li>\n<li>发布在npm-registry的<code>&lt;name&gt;@&lt;registry&gt;</code>字符串</li>\n<li>发布在npm-registry的<code>&lt;name&gt;@&lt;tag&gt;</code>字符串</li>\n<li>发布在npm-registry的<code>&lt;name&gt;</code>字符串(最新版本)</li>\n<li>一个指向“1”的合法git地址</li>\n</ol>\n<h2 id=\"cleave-js\"><a href=\"#cleave-js\" class=\"headerlink\" title=\"cleave.js\"></a>cleave.js</h2><p>一个自动格式化输入框的工具，有npm包、script标签等几种引用形式，还有react的使用方式。</p>\n<p>地址：<a href=\"https://nosir.github.io/cleave.js/\">Format your &lt;input&#x2F;&gt; content when you are typing</a></p>\n<h2 id=\"object-fit-amp-object-position\"><a href=\"#object-fit-amp-object-position\" class=\"headerlink\" title=\"object-fit &amp; object-position\"></a>object-fit &amp; object-position</h2><p>这两个CSS属性分别用于指定替换元素在其盒模型内的覆盖大小和对齐方式。使用效果很类似<code>background-size</code>和<code>background-position</code>。替换元素即内容不受CSS视觉格式化控制的元素，如image、iframe、video、textarea等。</p>\n<p>这使得本来自己决定模型大小的元素可以受CSS控制决定位置排布和大小。在需要自适应元素大小的场景下很好用，比如用户头像展示等。</p>\n<p>唯一的小小缺憾可能是IE11还不支持这两个属性，以及Edge只支持对<code>&lt;img&gt;</code>使用。</p>\n<h2 id=\"移动端触摸默认行为优化\"><a href=\"#移动端触摸默认行为优化\" class=\"headerlink\" title=\"移动端触摸默认行为优化\"></a>移动端触摸默认行为优化</h2><ul>\n<li><code>user-select: none</code> 禁止用户选择</li>\n<li><code>-webkit-touch-callout: none</code> 防止长按contextmenu弹出。类似的还有<code>contextmenu</code>事件里的<code>e.preventDefault()</code></li>\n<li><code>-webkit-tap-highlight-color: transparent</code> 删除可点击元素默认的黑影</li>\n</ul>\n<h2 id=\"上传进度条\"><a href=\"#上传进度条\" class=\"headerlink\" title=\"上传进度条\"></a>上传进度条</h2><p>利用xhr事件的onprogress事件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhr.<span class=\"property\">onprogress</span> = <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (e.<span class=\"property\">lengthComputable</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e.<span class=\"property\">loaded</span>+  <span class=\"string\">&quot; / &quot;</span> + e.<span class=\"property\">total</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">xhr.<span class=\"property\">onloadstart</span> = <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;start&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">xhr.<span class=\"property\">onloadend</span> = <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;end&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"不显示滚动条\"><a href=\"#不显示滚动条\" class=\"headerlink\" title=\"不显示滚动条\"></a>不显示滚动条</h2><p>基于Webkit的浏览器，可以使用CSS的方式隐藏滚动条。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp;::-webkit-scrollbar &#123;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"attribute\">background</span>: transparent;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"keyup无法prevent-default\"><a href=\"#keyup无法prevent-default\" class=\"headerlink\" title=\"keyup无法prevent default\"></a>keyup无法prevent default</h2><blockquote>\n<p>keyup fires after the default action.</p>\n</blockquote>\n<blockquote>\n<p>keydown and keypress are where you can prevent the default.<br>If those aren’t stopped, then the default happens and keyup is fired.</p>\n</blockquote>\n<p>来源：<a href=\"https://stackoverflow.com/questions/16052592/javascript-prevent-default-for-keyup/16052627\">jquery - javascript prevent default for keyup - StackOverflow</a></p>\n<h2 id=\"mixin-in-react\"><a href=\"#mixin-in-react\" class=\"headerlink\" title=\"mixin in react\"></a>mixin in react</h2><p>版本16之前，可以用mixin特性。16之后使用高阶组件HOC + ES6 class语法实现。<a href=\"https://reactjs.org/docs/higher-order-components.html\">参考</a>。</p>\n<h2 id=\"user-select在Edge浏览器下的适配问题\"><a href=\"#user-select在Edge浏览器下的适配问题\" class=\"headerlink\" title=\"user-select在Edge浏览器下的适配问题\"></a><code>user-select</code>在Edge浏览器下的适配问题</h2><p>设置<code>user-select</code>为<code>none</code>在Edge浏览器下会导致input无法输入内容。可以用下面的写法，避免对<code>input</code>标签应用该属性。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*<span class=\"selector-pseudo\">:not</span>(<span class=\"selector-tag\">input</span>) &#123;</span><br><span class=\"line\">  user-select: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>参考：<a href=\"https://stackoverflow.com/questions/49614065/cant-type-in-input-field-using-microsoft-edge-and-safari\">html - Can’t type in input field using Microsoft Edge and Safari - StackOverflow</a></p>\n<h2 id=\"浏览器跨tab通信\"><a href=\"#浏览器跨tab通信\" class=\"headerlink\" title=\"浏览器跨tab通信\"></a>浏览器跨tab通信</h2><p>最近业务遇到了一个需求：同一浏览器上多tab用户信息同步的问题，所有这个域名下的需要强制一样的用户信息，避免困惑。</p>\n<p>跨tab通信主流方案有两种：</p>\n<ul>\n<li>localStorage，利用window的<code>storage</code>事件，传递信息</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Broadcast_Channel_API\">BroadcastChannel</a>，新的API，通过<code>postMessage</code>和<code>onMessage</code>完成双向通讯</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bc = <span class=\"keyword\">new</span> <span class=\"title class_\">BroadcastChannel</span>(<span class=\"string\">&#x27;test_channel&#x27;</span>);</span><br><span class=\"line\">bc.<span class=\"title function_\">postMessage</span>(<span class=\"string\">&#x27;This is a test message.&#x27;</span>); <span class=\"comment\">/* send */</span></span><br><span class=\"line\">bc.<span class=\"property\">onmessage</span> = <span class=\"keyword\">function</span> (<span class=\"params\">ev</span>) &#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(ev); &#125; <span class=\"comment\">/* receive */</span></span><br></pre></td></tr></table></figure>\n\n<p>后者还未得到广泛支持，需要前者进行polyfill。</p>\n<h2 id=\"aos\"><a href=\"#aos\" class=\"headerlink\" title=\"aos\"></a>aos</h2><p>Animation on scroll。<a href=\"https://github.com/michalsnik/aos\">michalsnik&#x2F;aos at master · Animate on scroll library</a>.元素滚动至中的CSS动画，适合实现官网、落地页等效果。</p>\n<h2 id=\"extract-text-webpack-plugin\"><a href=\"#extract-text-webpack-plugin\" class=\"headerlink\" title=\"extract-text-webpack-plugin\"></a>extract-text-webpack-plugin</h2><p>抽出CSS&#x2F;Less&#x2F;Sass等样式作为单独文件，用于那些需要提前加载样式的页面。详细用法见<a href=\"https://github.com/webpack-contrib/extract-text-webpack-plugin\">github</a></p>\n<p>坑：</p>\n<ol>\n<li>不支持webpack4.x，报内部错误（2018&#x2F;07&#x2F;30） &#x3D;&gt; 使用@next下载最新版</li>\n<li>报错<code>Module build failed: ReferenceError: window is not defined</code> &#x3D;&gt; style-loader在extract-text-webpack-plugin中只做fallback项使用，见<a href=\"https://github.com/webpack-contrib/extract-text-webpack-plugin/issues/503\">issue#503</a></li>\n</ol>\n<h2 id=\"常见调试技巧\"><a href=\"#常见调试技巧\" class=\"headerlink\" title=\"常见调试技巧\"></a>常见调试技巧</h2><ul>\n<li>代码中插入debugger可以在该位置触发断点调试</li>\n<li><code>console.dir</code>可以打印对象结构，大多数情况和<code>console.log</code>表现一致，在document等DOM元素上表现不同</li>\n</ul>\n<h2 id=\"react组件复用设计思路\"><a href=\"#react组件复用设计思路\" class=\"headerlink\" title=\"react组件复用设计思路\"></a>react组件复用设计思路</h2><ul>\n<li>当设计的组件为自闭型时，通过传入数据（<strong>不要传入功能</strong>）props的方式定制组件</li>\n<li>当设计的组件在有些场景下需要外部传入功能才能完整时，使用继承的方式实现</li>\n<li>在可以拆分出原子组件，<strong>且有此必要的时候</strong>，使用原子组件拼装业务组件</li>\n<li>HOC优于mixin</li>\n</ul>\n",
            "tags": [
                "git",
                "webpack",
                "z-index",
                "git submodule",
                "object-fit",
                "object-position",
                "BroadcastChannel",
                "extract-text-webpack-plugin"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2014/12/09/git-learning-1/",
            "url": "http://shenlvmeng.github.com/blog/2014/12/09/git-learning-1/",
            "title": "git学习笔记 1 —— 基础",
            "date_published": "2014-12-09T11:29:00.000Z",
            "content_html": "<p>因个人兴趣，从暑期开始做起web后台开发工作。这数月过来，无数次提交，更改，撤销更改等动作，让我深感学习版本控制的必要性。在学长的推荐下，以<a href=\"http://git-scm.com/book/zh/v1\" title=\"Git Book\">Git-Book</a>为基础开始学习git。Git-Book是本很好的教材，深入浅出，条理清晰。对比而言，很适合初学者使用。</p>\n<p>git为版本控制而生，是DVCS的一种。早期的数据库形式被用户机——CVCS服务器形式所取代。这种模式下，中央宕机会造成成很大损失。考虑到这点，分布式版本控制系统（DVCS）出现，在DVCS下，各用户机亦保存有文件的各版本，即使服务器宕机，也可以通过各用户机恢复。git是DVCS的一种。</p>\n<p>git起源于Linux的维护工作。诞生于2005年。建立在Linux经验的基础上，git有几个很明显的特征：追求速度，简单设计，非线性开发需求，完全分布式。因此，它能在简化操作的同时，简化开发者的工作量。</p>\n<p>学习git之前，要先建立对git几个特点的认识。这将将极大程度上有利于之后的进展。</p>\n<ul>\n<li>git记录文件的整体快照而非文件的局部改动。若文件改动，git将记载新文件；反之，git将只储存指向旧文件的指针。</li>\n<li>git继承了DVCS的特点，操作的本地性极强。不需要联网也可以使用git来保存甚至提交自己所做的改动</li>\n<li>git十分强调文件数据的完整性，用SHA-1算法得到文件校验得到一个Hash值表示文件。任意文件都有唯一的40bits十六进制字符串对应。</li>\n<li>git的各种操作绝大多数都是向数据库中添加数据，这意味着几乎所有操作都可以恢复。不用担心覆盖掉正确版本。</li>\n<li><span style=\"color: #ff6600;\">git管理下的文件只有三种状态——修改，暂存，提交。</span>这点很重要。git只对提交态的文件版本负责。<br>在了解了git的基础知识后，就可以在你的主机上安装git了。由于Linux环境下对git的使用较频繁，且我自己也在Linux环境下使用git，下面对Linux做重点介绍。</li>\n</ul>\n<h2 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h2><h3 id=\"源代码安装\"><a href=\"#源代码安装\" class=\"headerlink\" title=\"源代码安装\"></a>源代码安装</h3><p>先安装依赖包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//使用yum的系统</span><br><span class=\"line\">$ yum install curl-devel expat-devel gettext-devel \\ openssl-devel zlib-devel </span><br><span class=\"line\">//使用apt-get的系统</span><br><span class=\"line\">$ apt-get install libcurl4-gnutls-dev libexpat1-dev gettext \\ libz-dev libssl-dev</span><br></pre></td></tr></table></figure>\n<p>之后下载最新源代码并编译安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ tar -zxf git-1.7.2.2.tar.gz </span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> git-1.7.2.2 </span><br><span class=\"line\">$ make prefix=/usr/local all </span><br><span class=\"line\">$ sudo make prefix=/usr/local install</span><br><span class=\"line\">//将git仓库克隆到本地，方便日后更新</span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> git://git.kernel.org/pub/scm/git/git.git</span><br></pre></td></tr></table></figure>\n<h3 id=\"傻瓜安装\"><a href=\"#傻瓜安装\" class=\"headerlink\" title=\"傻瓜安装\"></a>傻瓜安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//区别同上</span><br><span class=\"line\">$ yum install git-core</span><br><span class=\"line\">$ apt-get install git</span><br></pre></td></tr></table></figure>\n<h2 id=\"Mac与Windows\"><a href=\"#Mac与Windows\" class=\"headerlink\" title=\"Mac与Windows\"></a>Mac与Windows</h2><p>Mac可以通过MacPorts或者下载git图形化工具完成git安装。Windows可以通过安装msysgit使用git命令。</p>\n<p>在使用git前，可以通过git config更改个人用户名及电子邮箱地址。这样每次的提交会出现你个人的标识。</p>\n",
            "tags": [
                "git"
            ]
        }
    ]
}