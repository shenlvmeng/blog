<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://shenlvmeng.github.com/blog</id>
    <title>Shenlvmeng&#39;s Blog • Posts by &#34;git&#34; tag</title>
    <link href="http://shenlvmeng.github.com/blog" />
    <updated>2019-11-15T13:51:58.000Z</updated>
    <category term="总结" />
    <category term="制度" />
    <category term="道德" />
    <category term="文官" />
    <category term="万历" />
    <category term="明朝" />
    <category term="读书笔记" />
    <category term="展望" />
    <category term="2018" />
    <category term="2019" />
    <category term="flag" />
    <category term="2020" />
    <category term="2021" />
    <category term="2022" />
    <category term="2023" />
    <category term="面试" />
    <category term="前端" />
    <category term="FAQ" />
    <category term="HTML" />
    <category term="CSS" />
    <category term="style guide" />
    <category term="编程" />
    <category term="范式" />
    <category term="设计" />
    <category term="艺术" />
    <category term="质量" />
    <category term="async_hooks" />
    <category term="cls-hooked" />
    <category term="logId" />
    <category term="录音" />
    <category term="getUserMedia" />
    <category term="AudioContext" />
    <category term="PCM" />
    <category term="WAVE" />
    <category term="二叉搜索树" />
    <category term="算法" />
    <category term="回忆" />
    <category term="老朋友" />
    <category term="C" />
    <category term="Hash" />
    <category term="布隆过滤器" />
    <category term="字符串检索" />
    <category term="canvas" />
    <category term="流程图" />
    <category term="d3" />
    <category term="g6" />
    <category term="zrender" />
    <category term="processOn" />
    <category term="SDN" />
    <category term="cbench" />
    <category term="安装说明" />
    <category term="绘图" />
    <category term="动画" />
    <category term="攻略" />
    <category term="流水账" />
    <category term="成都" />
    <category term="重庆" />
    <category term="武汉" />
    <category term="重构" />
    <category term="代码" />
    <category term="代码风格" />
    <category term="数据可视化" />
    <category term="爬虫" />
    <category term="chrome" />
    <category term="crx" />
    <category term="扩展" />
    <category term="CORS" />
    <category term="跨域" />
    <category term="盒模型" />
    <category term="浮动" />
    <category term="Reactive Programming" />
    <category term="JavaScript" />
    <category term="Cycle.js" />
    <category term="Dart" />
    <category term="最佳实践" />
    <category term="引流" />
    <category term="universal-link" />
    <category term="app-link" />
    <category term="脚手架" />
    <category term="degit" />
    <category term="git" />
    <category term="设计模式" />
    <category term="类" />
    <category term="接口" />
    <category term="抽象类" />
    <category term="DOM" />
    <category term="Docker" />
    <category term="ONOS" />
    <category term="控制器" />
    <category term="虚拟化" />
    <category term="笔记" />
    <category term="UX" />
    <category term="UED" />
    <category term="准则" />
    <category term="Java" />
    <category term="Ruby" />
    <category term="反射" />
    <category term="编程范式" />
    <category term="鸭子类型" />
    <category term="管理" />
    <category term="效率" />
    <category term="知识工作者" />
    <category term="卓有成效" />
    <category term="Elm" />
    <category term="框架" />
    <category term="函数式编程" />
    <category term="虚网映射" />
    <category term="Javascript" />
    <category term="并发" />
    <category term="event loop" />
    <category term="覆盖率" />
    <category term="端到端测试" />
    <category term="istanbul" />
    <category term="istanbuljs" />
    <category term="JavaSript" />
    <category term="Express" />
    <category term="源码" />
    <category term="代码覆盖率" />
    <category term="istanbul-middleware" />
    <category term="代码插桩" />
    <category term="require钩子" />
    <category term="babel-plugin-istanbul" />
    <category term="css" />
    <category term="html5" />
    <category term="flex" />
    <category term="javascript" />
    <category term="roadmap" />
    <category term="闭包" />
    <category term="Haskell" />
    <category term="monad" />
    <category term="后端" />
    <category term="管理后台" />
    <category term="egg.js" />
    <category term="工作流" />
    <category term="pull request" />
    <category term="golang" />
    <category term="语言学习" />
    <category term="黑客与画家" />
    <category term="创业" />
    <category term="骑行" />
    <category term="海南" />
    <category term="图文" />
    <category term="reflow" />
    <category term="repaint" />
    <category term="命名法" />
    <category term="成功学" />
    <category term="自我建设" />
    <category term="HTTP" />
    <category term="HTTP/2" />
    <category term="SPDY" />
    <category term="QUIC" />
    <category term="HTTPS" />
    <category term="状态码" />
    <category term="网络攻击" />
    <category term="介绍" />
    <category term="图片渲染" />
    <category term="html2canvas" />
    <category term="dom-to-image" />
    <category term="electron" />
    <category term="indexedDB" />
    <category term="异步" />
    <category term="Generator" />
    <category term="thunk" />
    <category term="async" />
    <category term="函数表达式" />
    <category term="对象" />
    <category term="继承" />
    <category term="类型转换" />
    <category term="==" />
    <category term="类型判断" />
    <category term="猫" />
    <category term="杀手" />
    <category term="管理学" />
    <category term="领导力" />
    <category term="梯队" />
    <category term="移动端" />
    <category term="UI" />
    <category term="自适应" />
    <category term="rem" />
    <category term="Electron" />
    <category term="GUI" />
    <category term="gpx" />
    <category term="template" />
    <category term="Electron Builder" />
    <category term="PWA" />
    <category term="方法论" />
    <category term="夜话" />
    <category term="多线" />
    <category term="生活" />
    <category term="密码" />
    <category term="密钥" />
    <category term="技改" />
    <category term="Vue" />
    <category term="gulp" />
    <category term="瀑布流" />
    <category term="电影" />
    <category term="PHP" />
    <category term="参考" />
    <category term="思维" />
    <category term="学习能力" />
    <category term="右脑" />
    <category term="经济学" />
    <category term="宏观经济学" />
    <category term="术语" />
    <category term="GDP" />
    <category term="CPI" />
    <category term="储蓄" />
    <category term="投资" />
    <category term="金融市场" />
    <category term="股票" />
    <category term="债券" />
    <category term="美联储" />
    <category term="失业" />
    <category term="货币" />
    <category term="现值" />
    <category term="准备金" />
    <category term="货币中性" />
    <category term="通货膨胀" />
    <category term="汇率" />
    <category term="购买力" />
    <category term="净出口" />
    <category term="资产净流出" />
    <category term="总需求" />
    <category term="总供给" />
    <category term="流动性偏好" />
    <category term="乘数效应" />
    <category term="菲利普斯曲线" />
    <category term="微观经济学" />
    <category term="供求" />
    <category term="贸易" />
    <category term="市场" />
    <category term="税" />
    <category term="剩余" />
    <category term="外部性" />
    <category term="公共物品" />
    <category term="公共资源" />
    <category term="生产成本" />
    <category term="利润" />
    <category term="垄断" />
    <category term="价格歧视" />
    <category term="寡头" />
    <category term="垄断竞争" />
    <category term="生产要素市场" />
    <category term="贫困" />
    <category term="消费者选择理论" />
    <category term="不对称信息" />
    <category term="政治经济学" />
    <category term="行为经济学" />
    <category term="VSCode" />
    <category term="编辑器" />
    <category term="IDE" />
    <category term="hybrid" />
    <category term="JSBridge" />
    <category term="Web Worker" />
    <category term="Service Worker" />
    <category term="习惯" />
    <category term="lint" />
    <category term="editorconfig" />
    <category term="commit message" />
    <category term="量子物理" />
    <category term="史话" />
    <category term="埋点" />
    <category term="raven.js" />
    <category term="前端监控" />
    <category term="文本编辑器" />
    <category term="quill" />
    <category term="结构化数据" />
    <category term="React" />
    <category term="Hooks" />
    <category term="函数组件" />
    <category term="复用" />
    <category term="状态管理" />
    <category term="redux" />
    <category term="MobX" />
    <category term="代码质量" />
    <category term="重来" />
    <category term="requestAnimationFrame" />
    <category term="TypeScript" />
    <category term="路书" />
    <category term="gpx解析" />
    <category term="EXIF" />
    <category term="人类" />
    <category term="生存" />
    <category term="基因" />
    <category term="响应式编程" />
    <category term="RxJS" />
    <category term="成长" />
    <category term="业务" />
    <category term="思想" />
    <category term="程序设计" />
    <category term="心理学" />
    <category term="自我" />
    <category term="社会思维" />
    <category term="社会影响" />
    <category term="文化" />
    <category term="性别" />
    <category term="从众" />
    <category term="说服" />
    <category term="临床诊断" />
    <category term="陪审团" />
    <category term="司法" />
    <category term="物质主义" />
    <category term="健康" />
    <category term="社会关系" />
    <category term="偏见" />
    <category term="攻击行为" />
    <category term="亲密关系" />
    <category term="友谊" />
    <category term="爱情" />
    <category term="利他" />
    <category term="冲突" />
    <category term="和解" />
    <category term="软技能" />
    <category term="理财" />
    <category term="健身" />
    <category term="自我营销" />
    <category term="学习" />
    <category term="商业模式" />
    <category term="产品" />
    <category term="校园网" />
    <category term="互联网" />
    <category term="技术" />
    <category term="web开发" />
    <category term="哲思" />
    <category term="择偶观" />
    <category term="validator" />
    <category term="大文件" />
    <category term="visibilityChange" />
    <category term="IntersectionObserver" />
    <category term="图种" />
    <category term="draggable" />
    <category term="webpack" />
    <category term="z-index" />
    <category term="git submodule" />
    <category term="object-fit" />
    <category term="object-position" />
    <category term="BroadcastChannel" />
    <category term="extract-text-webpack-plugin" />
    <category term="lottie" />
    <category term="backface-visibility" />
    <category term="egret" />
    <category term="mock" />
    <category term="SSO" />
    <category term="autoprefixer" />
    <category term="polyfill" />
    <category term="Android" />
    <category term="ffmpeg" />
    <category term="React Hooks" />
    <category term="rollup" />
    <category term="CDN" />
    <category term="DNS" />
    <category term="CNAME" />
    <category term="架构" />
    <category term="组件" />
    <category term="ssh" />
    <category term="fis-receiver" />
    <category term="tmux" />
    <category term="origami" />
    <category term="promise" />
    <category term="encodeURI" />
    <category term="encodeURIComponent" />
    <category term="axios" />
    <category term="charles" />
    <category term="黑色幽默" />
    <category term="朋友" />
    <category term="梦" />
    <category term="濒死" />
    <category term="江南" />
    <category term="苏州" />
    <category term="无锡" />
    <category term="宜兴" />
    <category term="湖州" />
    <category term="南浔" />
    <category term="游记" />
    <category term="随笔" />
    <category term="群众" />
    <category term="理论" />
    <category term="实效" />
    <category term="测试" />
    <category term="长沙" />
    <category term="杭州" />
    <category term="湖南" />
    <category term="核酸" />
    <category term="美食" />
    <category term="云南" />
    <category term="丽江" />
    <category term="大理" />
    <category term="青岛" />
    <category term="济南" />
    <category term="山东" />
    <category term="西北" />
    <category term="银川" />
    <category term="西宁" />
    <category term="青海湖" />
    <category term="西海镇" />
    <category term="茶卡盐湖" />
    <category term="厦门" />
    <category term="感受" />
    <category term="C语言" />
    <category term="树" />
    <category term="主干开发" />
    <category term="GitFlow" />
    <category term="GithubFlow" />
    <category term="typescript" />
    <category term="类型系统" />
    <category term="webrtc" />
    <category term="RTMP" />
    <category term="首屏时间" />
    <category term="性能优化" />
    <category term="公司" />
    <category term="个人发展" />
    <category term="战略" />
    <category term="晋升" />
    <category term="哲学" />
    <category term="幸福" />
    <category term="人生" />
    <category term="叔本华" />
    <category term="Unix" />
    <category term="Rollup" />
    <category term="mouseout" />
    <category term="mouseleave" />
    <category term="lint-staged" />
    <category term="吸顶" />
    <category term="图片组件" />
    <category term="形式系统" />
    <category term="不完全性" />
    <category term="隐喻" />
    <category term="哥德尔" />
    <category term="巴赫" />
    <category term="埃舍尔" />
    <category term="济州" />
    <category term="西归浦" />
    <category term="城山" />
    <category term="咸德" />
    <category term="人工智能" />
    <category term="心智" />
    <category term="自指" />
    <category term="图灵" />
    <category term="马列主义" />
    <category term="恩格斯" />
    <category term="家庭" />
    <category term="国家" />
    <category term="阶级" />
    <category term="氏族" />
    <category term="哲学史" />
    <category term="孔子" />
    <category term="老子" />
    <category term="儒家" />
    <category term="道家" />
    <category term="佛教" />
    <category term="禅宗" />
    <category term="理学" />
    <category term="心学" />
    <entry>
        <id>http://shenlvmeng.github.com/blog/2019/11/15/degit-improvement/</id>
        <title>degit认识和改造</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2019/11/15/degit-improvement/"/>
        <content type="html">&lt;h2 id=&#34;背景&#34;&gt;&lt;a href=&#34;#背景&#34; class=&#34;headerlink&#34; title=&#34;背景&#34;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;近日写了一个chrome插件的starter-boilerplate。但这类boilerplate被人们使用的方式常常是整合在cli库中。由于仓库本身的模板性质和git历史存在，并不合适使用npm分发或&lt;code&gt;git clone&lt;/code&gt;快速搭建项目骨架。&lt;/p&gt;
&lt;p&gt;碰巧此前学习svelte的时候接触到了&lt;a href=&#34;https://github.com/Rich-Harris/degit&#34;&gt;degit&lt;/a&gt;，degit做的事很简单，&lt;strong&gt;复制git仓库代码&lt;/strong&gt;。这也正是一个称职的boilerplate发挥光和热的方式。&lt;/p&gt;
&lt;h2 id=&#34;degit使用&#34;&gt;&lt;a href=&#34;#degit使用&#34; class=&#34;headerlink&#34; title=&#34;degit使用&#34;&gt;&lt;/a&gt;degit使用&lt;/h2&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;degit user/repo&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# these commands are equivalent&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;degit github:user/repo&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;degit git@github.com:user/repo&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;degit https://github.com/user/repo&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;degit user/repo my-new-project&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上面是一个degit的基本用法，类似&lt;code&gt;git clone&lt;/code&gt;指定仓库地址和本地目录名，默认将项目当前&lt;code&gt;master&lt;/code&gt;分支的代码拷贝到本地。还可以在仓库后使用&lt;code&gt;#&lt;/code&gt;分隔，指定分支名、tag名或commit hash。目前（2019&amp;#x2F;11&amp;#x2F;12）degit支持github、gitlab、BitBucket以及Sourcehut，暂不支持私有仓库。&lt;/p&gt;
&lt;p&gt;在一些情况下，我们可能希望在拷贝完代码后进行一些后置操作，如拷贝关联仓库或删除不必要文件等。对此，degit设计了&lt;strong&gt;actions&lt;/strong&gt;来支持，可以在当前目录的&lt;code&gt;degit.json&lt;/code&gt;中声明。目前actions只有&lt;code&gt;clone&lt;/code&gt;和&lt;code&gt;remove&lt;/code&gt;两种。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// degit.json&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;action&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;clone&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;src&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;user/another-repo&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;action&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;remove&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;files&amp;quot;&lt;/span&gt;: [&lt;span class=&#34;string&#34;&gt;&amp;quot;LICENSE&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;degit优势&#34;&gt;&lt;a href=&#34;#degit优势&#34; class=&#34;headerlink&#34; title=&#34;degit优势&#34;&gt;&lt;/a&gt;degit优势&lt;/h2&gt;&lt;p&gt;如README中提到的，degit和&lt;code&gt;git clone --depth 1&lt;/code&gt;还是有所区别的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git clone&lt;/code&gt;后，终归还是会有个&lt;code&gt;.git&lt;/code&gt;目录，需要手动重置&lt;/li&gt;
&lt;li&gt;degit在实现时增加了缓存策略，在有些情况下不需要重复下载代码，速度更快&lt;/li&gt;
&lt;li&gt;“更少的字数”（&lt;code&gt;degit user/repo&lt;/code&gt;而不是&lt;code&gt;git clone --depth 1 git@github.com:user/repo&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;灵活度更高，如前后置操作如actions的支持&lt;/li&gt;
&lt;li&gt;更好的可扩展性，未来可以在degit基础上实现交互等更复杂的设计&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;degit原理&#34;&gt;&lt;a href=&#34;#degit原理&#34; class=&#34;headerlink&#34; title=&#34;degit原理&#34;&gt;&lt;/a&gt;degit原理&lt;/h2&gt;&lt;p&gt;那么degit快在哪里？它的思路借鉴于&lt;a href=&#34;https://github.com/vutran/zel&#34;&gt;zel&lt;/a&gt;和&lt;a href=&#34;https://github.com/lukeed/gittar&#34;&gt;gittar&lt;/a&gt;，即方便快捷地从git仓库中下载需要的源代码。原理上，&lt;strong&gt;利用某些git平台url的特定规则，从平台下载tar.gz包，再本地解压&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;degit实现集中在&lt;code&gt;src/index.js&lt;/code&gt;中。&lt;code&gt;src/bin.js&lt;/code&gt;只用来实现cli部分的入口代码，&lt;code&gt;src/utils.js&lt;/code&gt;则包含了一些工具函数。&lt;/p&gt;
&lt;h3 id=&#34;入口&#34;&gt;&lt;a href=&#34;#入口&#34; class=&#34;headerlink&#34; title=&#34;入口&#34;&gt;&lt;/a&gt;入口&lt;/h3&gt;&lt;p&gt;在&lt;code&gt;src/bin.js&lt;/code&gt;中，流程分下面几步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;利用&lt;a href=&#34;https://github.com/lukeed/mri&#34;&gt;mri&lt;/a&gt;做了基本的参数处理&lt;/li&gt;
&lt;li&gt;实例化Degit对象，注册logger的监听方法&lt;/li&gt;
&lt;li&gt;调用&lt;code&gt;clone&lt;/code&gt;方法&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; d = &lt;span class=&#34;title function_&#34;&gt;degit&lt;/span&gt;(src, args);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    d.&lt;span class=&#34;title function_&#34;&gt;on&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;info&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;event&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;error&lt;/span&gt;(chalk.&lt;span class=&#34;title function_&#34;&gt;cyan&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;`&amp;gt; &lt;span class=&#34;subst&#34;&gt;$&amp;#123;event.message.replace(&lt;span class=&#34;string&#34;&gt;&amp;#x27;options.&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;--&amp;#x27;&lt;/span&gt;)&amp;#125;&lt;/span&gt;`&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    d.&lt;span class=&#34;title function_&#34;&gt;on&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;warn&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;event&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;error&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            chalk.&lt;span class=&#34;title function_&#34;&gt;magenta&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;`! &lt;span class=&#34;subst&#34;&gt;$&amp;#123;event.message.replace(&lt;span class=&#34;string&#34;&gt;&amp;#x27;options.&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;--&amp;#x27;&lt;/span&gt;)&amp;#125;&lt;/span&gt;`&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    d.&lt;span class=&#34;title function_&#34;&gt;clone&lt;/span&gt;(dest)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// .then(() =&amp;gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// &amp;#125;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        .&lt;span class=&#34;title function_&#34;&gt;catch&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;err&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;error&lt;/span&gt;(chalk.&lt;span class=&#34;title function_&#34;&gt;red&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;`! &lt;span class=&#34;subst&#34;&gt;$&amp;#123;err.message.replace(&lt;span class=&#34;string&#34;&gt;&amp;#x27;options.&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;--&amp;#x27;&lt;/span&gt;)&amp;#125;&lt;/span&gt;`&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            process.&lt;span class=&#34;title function_&#34;&gt;exit&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Degit初始化&#34;&gt;&lt;a href=&#34;#Degit初始化&#34; class=&#34;headerlink&#34; title=&#34;Degit初始化&#34;&gt;&lt;/a&gt;Degit初始化&lt;/h3&gt;&lt;p&gt;对象实例包含下面几个成员，其中repo信息需要处理后才能拿到。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;src&lt;/code&gt;，string，用户输入的仓库地址&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cache&lt;/code&gt;，boolean，是否使用缓存，来自命令行&lt;code&gt;-c&lt;/code&gt;或&lt;code&gt;--cache&lt;/code&gt;参数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;force&lt;/code&gt;，boolean，目标文件夹有内容时，是否覆盖，来自&lt;code&gt;-f&lt;/code&gt;或&lt;code&gt;--force&lt;/code&gt;参数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;verbose&lt;/code&gt;，boolean，是否打印详细日志，来自&lt;code&gt;-v&lt;/code&gt;或&lt;code&gt;--verbose&lt;/code&gt;参数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;repo&lt;/code&gt;，处理&lt;code&gt;src&lt;/code&gt;拿到仓库的详情，包括&lt;ul&gt;
&lt;li&gt;&lt;code&gt;site&lt;/code&gt;，网页域名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;user&lt;/code&gt;，用户&amp;#x2F;组织名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt;，仓库名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ref&lt;/code&gt;，分支、tag、commit hash&lt;/li&gt;
&lt;li&gt;&lt;code&gt;url&lt;/code&gt;，完整的HTTP url&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;directiveActions&lt;/code&gt;，actions配置对应的处理函数，包含&lt;ul&gt;
&lt;li&gt;&lt;code&gt;clone&lt;/code&gt;，递归处理src的仓库&lt;/li&gt;
&lt;li&gt;&lt;code&gt;remove&lt;/code&gt;，调用&lt;code&gt;remove&lt;/code&gt;方法移除指定文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;repo信息来自src经过正则匹配出的详细信息。由于要利用一些git平台的url拼接规则，需要排除已知平台以外的url。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 支持的范围&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; supported = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Set&lt;/span&gt;([&lt;span class=&#34;string&#34;&gt;&amp;#x27;github&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;gitlab&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;bitbucket&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;git.sr.ht&amp;#x27;&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;parse&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;src&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; match = &lt;span class=&#34;regexp&#34;&gt;/^(?:https:\/\/([^/]+)\/|git@([^/]+)[:/]|([^/]+)[:/])?([^/\s]+)\/([^/\s#]+)(?:#(.+))?/&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;exec&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        src&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!match) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;DegitError&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;`could not parse &lt;span class=&#34;subst&#34;&gt;$&amp;#123;src&amp;#125;&lt;/span&gt;`&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;code&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;BAD_SRC&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; site = (match[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] || match[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;] || match[&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;] || &lt;span class=&#34;string&#34;&gt;&amp;#x27;github&amp;#x27;&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;replace&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;regexp&#34;&gt;/\.(com|org)$/&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 排除范围外的url&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!supported.&lt;span class=&#34;title function_&#34;&gt;has&lt;/span&gt;(site)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;DegitError&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;`degit supports GitHub, GitLab, Sourcehut and BitBucket`&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;attr&#34;&gt;code&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;UNSUPPORTED_HOST&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 匹配出用户名、仓库名、分支/tag/commit hash名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; user = match[&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; name = match[&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;].&lt;span class=&#34;title function_&#34;&gt;replace&lt;/span&gt;(&lt;span class=&#34;regexp&#34;&gt;/\.git$/&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; ref = match[&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;] || &lt;span class=&#34;string&#34;&gt;&amp;#x27;master&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 完整的仓库地址，需要http开头的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; url = &lt;span class=&#34;string&#34;&gt;`https://&lt;span class=&#34;subst&#34;&gt;$&amp;#123;site&amp;#125;&lt;/span&gt;.&lt;span class=&#34;subst&#34;&gt;$&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;subst&#34;&gt;&lt;span class=&#34;string&#34;&gt;        site === &lt;span class=&#34;string&#34;&gt;&amp;#x27;bitbucket&amp;#x27;&lt;/span&gt; ? &lt;span class=&#34;string&#34;&gt;&amp;#x27;org&amp;#x27;&lt;/span&gt; : site === &lt;span class=&#34;string&#34;&gt;&amp;#x27;git.sr.ht&amp;#x27;&lt;/span&gt; ? &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt; : &lt;span class=&#34;string&#34;&gt;&amp;#x27;com&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;subst&#34;&gt;&lt;span class=&#34;string&#34;&gt;    &amp;#125;&lt;/span&gt;/&lt;span class=&#34;subst&#34;&gt;$&amp;#123;user&amp;#125;&lt;/span&gt;/&lt;span class=&#34;subst&#34;&gt;$&amp;#123;name&amp;#125;&lt;/span&gt;`&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123; site, user, name, ref, url &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;仓库下载&#34;&gt;&lt;a href=&#34;#仓库下载&#34; class=&#34;headerlink&#34; title=&#34;仓库下载&#34;&gt;&lt;/a&gt;仓库下载&lt;/h3&gt;&lt;p&gt;下载仓库流程如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.ax1x.com/2019/11/15/Mdbl6S.png&#34; alt=&#34;degit流程&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;获取缓存信息&#34;&gt;&lt;a href=&#34;#获取缓存信息&#34; class=&#34;headerlink&#34; title=&#34;获取缓存信息&#34;&gt;&lt;/a&gt;获取缓存信息&lt;/h4&gt;&lt;p&gt;degit的缓存放在&lt;code&gt;/home&lt;/code&gt;或&lt;code&gt;/tmp&lt;/code&gt;下的&lt;code&gt;.degit&lt;/code&gt;目录下，按照&lt;code&gt;site/user/name&lt;/code&gt;的目录组织。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 缓存目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; base = path.&lt;span class=&#34;title function_&#34;&gt;join&lt;/span&gt;(homeOrTmp, &lt;span class=&#34;string&#34;&gt;&amp;#x27;.degit&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; dir = path.&lt;span class=&#34;title function_&#34;&gt;join&lt;/span&gt;(base, repo.&lt;span class=&#34;property&#34;&gt;site&lt;/span&gt;, repo.&lt;span class=&#34;property&#34;&gt;user&lt;/span&gt;, repo.&lt;span class=&#34;property&#34;&gt;name&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; cached = &lt;span class=&#34;title function_&#34;&gt;tryRequire&lt;/span&gt;(path.&lt;span class=&#34;title function_&#34;&gt;join&lt;/span&gt;(dir, &lt;span class=&#34;string&#34;&gt;&amp;#x27;map.json&amp;#x27;&lt;/span&gt;)) || &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;目录下有一个&lt;code&gt;map.json&lt;/code&gt;和缓存的代码tar.gz包，包名格式为&lt;code&gt;&amp;lt;commit-hash&amp;gt;.tar.gz&lt;/code&gt;。在map.json保存着此前使用过的分支名&amp;#x2F;tag名&amp;#x2F;简写commit名到commit hash的最新映射关系。形如下方：&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;master&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;4e3a4089b4f0275964eb10a432dc1c15526a0b4d&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这一步会尝试使用parse好的&lt;code&gt;site&lt;/code&gt;、&lt;code&gt;user&lt;/code&gt;、&lt;code&gt;name&lt;/code&gt;属性找已有的缓存的&lt;code&gt;map.json&lt;/code&gt;。没有找到时返回&lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;获取commit-hash&#34;&gt;&lt;a href=&#34;#获取commit-hash&#34; class=&#34;headerlink&#34; title=&#34;获取commit hash&#34;&gt;&lt;/a&gt;获取commit hash&lt;/h4&gt;&lt;p&gt;这一步分两种情况;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用缓存时，直接从上一步拿到的&lt;code&gt;map.json&lt;/code&gt;里面找&lt;code&gt;ref&lt;/code&gt;对应的commit hash&lt;/li&gt;
&lt;li&gt;不使用缓存时，需要从远端仓库拿分支名&amp;#x2F;tag名到commit hash的对应关系（使用&lt;code&gt;git ls-remote&lt;/code&gt;完成）。之后格式化为结构化数据并从中寻找&lt;code&gt;ref&lt;/code&gt;对应的commit hash。如果中途失败，则fallback到使用缓存的方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;fetchRefs&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;repo&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &amp;#123; stdout &amp;#125; = &lt;span class=&#34;keyword&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;exec&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;`git ls-remote &lt;span class=&#34;subst&#34;&gt;$&amp;#123;repo.url&amp;#125;&lt;/span&gt;`&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; stdout&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            .&lt;span class=&#34;title function_&#34;&gt;split&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;\n&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            .&lt;span class=&#34;title function_&#34;&gt;filter&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;Boolean&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            .&lt;span class=&#34;title function_&#34;&gt;map&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;row&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; [hash, ref] = row.&lt;span class=&#34;title function_&#34;&gt;split&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;\t&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// 格式化过程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 错误处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这一步若未找到hash，则无法构造下载的url，从而需要抛出错误。&lt;/p&gt;
&lt;h4 id=&#34;构造下载地址&#34;&gt;&lt;a href=&#34;#构造下载地址&#34; class=&#34;headerlink&#34; title=&#34;构造下载地址&#34;&gt;&lt;/a&gt;构造下载地址&lt;/h4&gt;&lt;p&gt;根据不同的git平台固定的源码tar.gz归档url规则，构造下载的url，这也是degit思路的基础。目前支持gitlab、bucket、github风格的url。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 即将下载的tar.gz文件路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; file = &lt;span class=&#34;string&#34;&gt;`&lt;span class=&#34;subst&#34;&gt;$&amp;#123;dir&amp;#125;&lt;/span&gt;/&lt;span class=&#34;subst&#34;&gt;$&amp;#123;hash&amp;#125;&lt;/span&gt;.tar.gz`&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 下载的url&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; url =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    repo.&lt;span class=&#34;property&#34;&gt;site&lt;/span&gt; === &lt;span class=&#34;string&#34;&gt;&amp;#x27;gitlab&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ? &lt;span class=&#34;string&#34;&gt;`&lt;span class=&#34;subst&#34;&gt;$&amp;#123;repo.url&amp;#125;&lt;/span&gt;/repository/archive.tar.gz?ref=&lt;span class=&#34;subst&#34;&gt;$&amp;#123;hash&amp;#125;&lt;/span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        : repo.&lt;span class=&#34;property&#34;&gt;site&lt;/span&gt; === &lt;span class=&#34;string&#34;&gt;&amp;#x27;bitbucket&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ? &lt;span class=&#34;string&#34;&gt;`&lt;span class=&#34;subst&#34;&gt;$&amp;#123;repo.url&amp;#125;&lt;/span&gt;/get/&lt;span class=&#34;subst&#34;&gt;$&amp;#123;hash&amp;#125;&lt;/span&gt;.tar.gz`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        : &lt;span class=&#34;string&#34;&gt;`&lt;span class=&#34;subst&#34;&gt;$&amp;#123;repo.url&amp;#125;&lt;/span&gt;/archive/&lt;span class=&#34;subst&#34;&gt;$&amp;#123;hash&amp;#125;&lt;/span&gt;.tar.gz`&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;创建目录并下载&#34;&gt;&lt;a href=&#34;#创建目录并下载&#34; class=&#34;headerlink&#34; title=&#34;创建目录并下载&#34;&gt;&lt;/a&gt;创建目录并下载&lt;/h4&gt;&lt;p&gt;不使用缓存时，会在创建缓存目录并下载。另外，指定&lt;code&gt;-f&lt;/code&gt;或&lt;code&gt;--force&lt;/code&gt;参数，会覆盖已有文件路径。最后使用https模块下载文件。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;cache&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            fs.&lt;span class=&#34;title function_&#34;&gt;statSync&lt;/span&gt;(file);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (err) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;mkdirp&lt;/span&gt;(path.&lt;span class=&#34;title function_&#34;&gt;dirname&lt;/span&gt;(file));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;fetch&lt;/span&gt;(url, file);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (err) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 错误处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;更新缓存&#34;&gt;&lt;a href=&#34;#更新缓存&#34; class=&#34;headerlink&#34; title=&#34;更新缓存&#34;&gt;&lt;/a&gt;更新缓存&lt;/h4&gt;&lt;p&gt;下载成功会更新本地缓存，保证以后使用缓存时能使用尽量新的包。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当前使用包的commit hash如果和指定分支&amp;#x2F;tag&amp;#x2F;commit hash对应的hash一致，则不需要更新&lt;/li&gt;
&lt;li&gt;在需要更新时，检查老的hash是否还有使用，如果没有使用，则清除hash对应的tar.gz包&lt;/li&gt;
&lt;li&gt;更新map.json里的对应关系&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;updateCache&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;dir, repo, hash, cached&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (cached[repo.&lt;span class=&#34;property&#34;&gt;ref&lt;/span&gt;] === hash) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; oldHash = cached[repo.&lt;span class=&#34;property&#34;&gt;ref&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (oldHash) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; used = &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; key &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; cached) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (cached[key] === hash) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                used = &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!used) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// we no longer need this tar file&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                fs.&lt;span class=&#34;title function_&#34;&gt;unlinkSync&lt;/span&gt;(path.&lt;span class=&#34;title function_&#34;&gt;join&lt;/span&gt;(dir, &lt;span class=&#34;string&#34;&gt;`&lt;span class=&#34;subst&#34;&gt;$&amp;#123;oldHash&amp;#125;&lt;/span&gt;.tar.gz`&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (err) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;// ignore&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cached[repo.&lt;span class=&#34;property&#34;&gt;ref&lt;/span&gt;] = hash;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fs.&lt;span class=&#34;title function_&#34;&gt;writeFileSync&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        path.&lt;span class=&#34;title function_&#34;&gt;join&lt;/span&gt;(dir, &lt;span class=&#34;string&#34;&gt;&amp;#x27;map.json&amp;#x27;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title class_&#34;&gt;JSON&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;stringify&lt;/span&gt;(cached, &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;  &amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;解压tar-gz包&#34;&gt;&lt;a href=&#34;#解压tar-gz包&#34; class=&#34;headerlink&#34; title=&#34;解压tar.gz包&#34;&gt;&lt;/a&gt;解压tar.gz包&lt;/h4&gt;&lt;p&gt;创建cli中输入的目标目录，并将已下载到缓存中tar.gz包解压到目标路径下。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;mkdirp&lt;/span&gt;(dest);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;untar&lt;/span&gt;(file, dest);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;actions处理&#34;&gt;&lt;a href=&#34;#actions处理&#34; class=&#34;headerlink&#34; title=&#34;actions处理&#34;&gt;&lt;/a&gt;&lt;code&gt;actions&lt;/code&gt;处理&lt;/h4&gt;&lt;p&gt;如果在当前目录下获取到了&lt;code&gt;degit.json&lt;/code&gt;，则执行后续的&lt;code&gt;clone&lt;/code&gt;或&lt;code&gt;remove&lt;/code&gt;操作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;clone，在目标目录下继续一遍clone流程&lt;/li&gt;
&lt;li&gt;remove，删除指定文件或文件夹&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;degit改造&#34;&gt;&lt;a href=&#34;#degit改造&#34; class=&#34;headerlink&#34; title=&#34;degit改造&#34;&gt;&lt;/a&gt;degit改造&lt;/h2&gt;&lt;p&gt;degit虽好，但从上面也可以看到，支持仓库比较有限，且不支持私有仓库。在公司内部，无法从url推断git仓库类型时，degit就无法工作了。不过，借助degit本身的设计，稍微改造上面提到的“degit初始化”，“构造下载地址”部分，就可以让degit通过传参url风格的形式支持私有仓库。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新增&lt;code&gt;-s&lt;/code&gt;或&lt;code&gt;--style&lt;/code&gt;命令行入参，表示git仓库url的风格，目前设计有github、gitlab、bitbucket这几个degit原始就支持的形式。&lt;/li&gt;
&lt;li&gt;解析仓库地址信息时，若有style入参，则先判断是否在上述允许范围内；保留原有从域名解析style的部分，新增若未解析出style，则从入参里取；最后再抛出不支持的仓库地址错误&lt;/li&gt;
&lt;li&gt;解析返回数据结构中，新增&lt;code&gt;style&lt;/code&gt;字段表示url风格，原有的&lt;code&gt;site&lt;/code&gt;为避免歧义，直接使用域名代替原有的域名前缀&lt;/li&gt;
&lt;li&gt;在构造下载地址时，直接根据style字段拼接url&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;parse&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;src, style&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (style &amp;amp;&amp;amp; !supportedGitStyle.&lt;span class=&#34;title function_&#34;&gt;has&lt;/span&gt;(style)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;DegitError&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;`degit supports styles of github, gitlab, bitbucket`&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;code&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;UNSUPPORTED_STYLE&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; site = match[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] || match[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;] || match[&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;] || &lt;span class=&#34;string&#34;&gt;&amp;#x27;github.com&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; gitStyle =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        style ||&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        (match[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] || match[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;] || match[&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;] || &lt;span class=&#34;string&#34;&gt;&amp;#x27;gitlab&amp;#x27;&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;replace&lt;/span&gt;(&lt;span class=&#34;regexp&#34;&gt;/\.(com|org)$/&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!supportedGitRepo.&lt;span class=&#34;title function_&#34;&gt;has&lt;/span&gt;(gitStyle)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;DegitError&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;`degit supports GitHub, GitLab, Sourcehut and BitBucket without -s/--style parameters`&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;attr&#34;&gt;code&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;UNSUPPORTED_HOST&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; user = match[&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; name = match[&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;].&lt;span class=&#34;title function_&#34;&gt;replace&lt;/span&gt;(&lt;span class=&#34;regexp&#34;&gt;/\.git$/&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; ref = match[&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;] || &lt;span class=&#34;string&#34;&gt;&amp;#x27;master&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; url = &lt;span class=&#34;string&#34;&gt;`https://&lt;span class=&#34;subst&#34;&gt;$&amp;#123;site&amp;#125;&lt;/span&gt;/&lt;span class=&#34;subst&#34;&gt;$&amp;#123;user&amp;#125;&lt;/span&gt;/&lt;span class=&#34;subst&#34;&gt;$&amp;#123;name&amp;#125;&lt;/span&gt;`&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123; site, user, name, ref, url, &lt;span class=&#34;attr&#34;&gt;style&lt;/span&gt;: gitStyle &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 拼接url处&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; url =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    repo.&lt;span class=&#34;property&#34;&gt;style&lt;/span&gt; === &lt;span class=&#34;string&#34;&gt;&amp;#x27;gitlab&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ? &lt;span class=&#34;string&#34;&gt;`&lt;span class=&#34;subst&#34;&gt;$&amp;#123;repo.url&amp;#125;&lt;/span&gt;/repository/archive.tar.gz?ref=&lt;span class=&#34;subst&#34;&gt;$&amp;#123;hash&amp;#125;&lt;/span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        : repo.&lt;span class=&#34;property&#34;&gt;style&lt;/span&gt; === &lt;span class=&#34;string&#34;&gt;&amp;#x27;bitbucket&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ? &lt;span class=&#34;string&#34;&gt;`&lt;span class=&#34;subst&#34;&gt;$&amp;#123;repo.url&amp;#125;&lt;/span&gt;/get/&lt;span class=&#34;subst&#34;&gt;$&amp;#123;hash&amp;#125;&lt;/span&gt;.tar.gz`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        : &lt;span class=&#34;string&#34;&gt;`&lt;span class=&#34;subst&#34;&gt;$&amp;#123;repo.url&amp;#125;&lt;/span&gt;/archive/&lt;span class=&#34;subst&#34;&gt;$&amp;#123;hash&amp;#125;&lt;/span&gt;.tar.gz`&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;可能存在的问题&#34;&gt;&lt;a href=&#34;#可能存在的问题&#34; class=&#34;headerlink&#34; title=&#34;可能存在的问题&#34;&gt;&lt;/a&gt;可能存在的问题&lt;/h3&gt;&lt;p&gt;绝大多数私有仓库，都会对用户身份做校验，直接访问tar.gz链接会报401错误。这需要根据不同的内部平台自己做处理了。&lt;/p&gt;
&lt;p&gt;因为特殊原因，改造后的包和代码不提供。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;–END–&lt;/em&gt;&lt;/p&gt;
</content>
        <category term="脚手架" />
        <category term="degit" />
        <category term="git" />
        <updated>2019-11-15T13:51:58.000Z</updated>
    </entry>
    <entry>
        <id>http://shenlvmeng.github.com/blog/2018/08/16/git-workflow/</id>
        <title>git工作流最佳实践</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2018/08/16/git-workflow/"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;参考：&lt;a href=&#34;https://github.com/xirong/my-git/blob/master/git-workflow-tutorial.md&#34;&gt;my-git&amp;#x2F;git-workflow-tutorial.md at master · xirong&amp;#x2F;my-git&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;git工作流有多种使用方法，在实际工作中的不良工作习惯，会造成很让人头大的麻烦。下面距离一些常用的工作流。&lt;/p&gt;
&lt;h3 id=&#34;集中式&#34;&gt;&lt;a href=&#34;#集中式&#34; class=&#34;headerlink&#34; title=&#34;集中式&#34;&gt;&lt;/a&gt;集中式&lt;/h3&gt;&lt;p&gt;类似SVN，集中式工作流以中央仓库作为项目所有修改的单点实体，只用到master这一个分支。&lt;strong&gt;开发者提交功能修改到中央库前，采用&lt;code&gt;rebase&lt;/code&gt;的方式“在其基础上添加自己的修改”，得到完美的线性历史；遇到冲突时，通过&lt;code&gt;git status&lt;/code&gt;和&lt;code&gt;git add&lt;/code&gt;合并冲突&lt;/strong&gt;。最后&lt;code&gt;git rebase --continue&lt;/code&gt;即可。遇到困难无法进行下去时，&lt;code&gt;git rebase --abort&lt;/code&gt;就可以撤回到rebase前的状态。&lt;/p&gt;
&lt;p&gt;在这种工作流下，使用&lt;code&gt;rebase&lt;/code&gt;参数比不使用的&lt;code&gt;git pull&lt;/code&gt;好处在于，rebase后的提交记录会少一次累赘的“合并提交”。&lt;/p&gt;
&lt;h3 id=&#34;功能分支&#34;&gt;&lt;a href=&#34;#功能分支&#34; class=&#34;headerlink&#34; title=&#34;功能分支&#34;&gt;&lt;/a&gt;功能分支&lt;/h3&gt;&lt;p&gt;git相较SVN强大在分布式的特征。功能分支工作流主要针对新增功能集成到正式项目。功能分支工作流仍然以中央仓库为基础，但不是直接提交本地历史到各自的本地master分支，而是在开发新功能时&lt;strong&gt;创建新的分支，描述新功能&lt;/strong&gt;。不同的功能分支相互隔离，同时也保证master分支的代码一定没有问题。一旦功能分支push到master，意味着功能与其他开发者共享。&lt;/p&gt;
&lt;p&gt;合并到master分支的过程通过创建pull request进行，在pull request请求中，让其他开发者有机会先去review变更。Pull request被接受后，剩下的工作就和集中式很像了，拉取master分支代码，合并，提交。&lt;/p&gt;
&lt;p&gt;工作流程上：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先checkout功能分支&lt;/li&gt;
&lt;li&gt;做本地开发提交，以及&lt;code&gt;push -u&lt;/code&gt;推送到远端分支（&lt;code&gt;-u&lt;/code&gt;是跟踪远端对应分支的意思）&lt;/li&gt;
&lt;li&gt;完成开发后，提交pull request，请求合并远端功能分支到master，团队其他成员可以进行评论&lt;/li&gt;
&lt;li&gt;在接受前，团队&lt;strong&gt;所有成员&lt;/strong&gt;有需要，可以提交自己的修改到该功能分支，也会显示在pull request里&lt;/li&gt;
&lt;li&gt;在pull-request被接受后，在本地master上可以用pull或者&lt;code&gt;pull -r&lt;/code&gt;的方式合并功能分支，前者更像功能和原来代码的合并，后者更偏向线型的提交历史&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;gitflow&#34;&gt;&lt;a href=&#34;#gitflow&#34; class=&#34;headerlink&#34; title=&#34;gitflow&#34;&gt;&lt;/a&gt;gitflow&lt;/h3&gt;&lt;p&gt;Gitflow工作流通过为功能开发、发布准备和维护分配独立的分支，让发布迭代过程更流畅。相较功能分支更复杂，但也更健壮。仍然用中央仓库作为所有开发者的交互中心。相对于使用仅有的一个master分支，Gitflow工作流使用两个分支来记录项目的历史。master分支存储了正式发布的历史，而&lt;strong&gt;develop分支作为功能的集成分支。&lt;/strong&gt;从而可以在master的&lt;strong&gt;所有提交附上版本号&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;每个新功能位于一个自己的分支，有着和功能分支一样的开发工作流，唯一不同的是，功能分支不是从master分支上拉出新分支，而是使用develop分支作为父分支。每次合并都位于develop分支。&lt;/p&gt;
&lt;p&gt;一旦develop分支上有了做一次发布（或者说快到了既定的发布日）的足够功能，就&lt;strong&gt;从develop分支上checkout一个发布分支release&lt;/strong&gt;。从这个时间点开始之后新的功能不能再加到这个分支上——这个分支只应该做Bug修复、文档生成和其它面向发布任务。在release工作完成后，合并release分支到master，并加上tag。同时，&lt;strong&gt;release上做的修改要合并会develop分支&lt;/strong&gt;。最后删除release分支。&lt;/p&gt;
&lt;p&gt;维护分支或说是热修复（hotfix）分支用于给产品发布版本（production releases）快速生成补丁，这是唯一可以直接从master分支fork出来的分支。修改完成后，修改应该立马合并回master和develop。master也应该为合并生成新的tag。&lt;/p&gt;
&lt;h3 id=&#34;forking&#34;&gt;&lt;a href=&#34;#forking&#34; class=&#34;headerlink&#34; title=&#34;forking&#34;&gt;&lt;/a&gt;forking&lt;/h3&gt;&lt;p&gt;Forking工作流是分布式工作流，可以安全可靠地管理大团队的开发者（developer）和不信任贡献者（contributor）的提交。这种工作流不是使用单个服务端仓库作为『中央』代码基线，而让各个开发者都有一个服务端仓库。这意味着各个代码贡献者有2个Git仓库而不是1个：一个本地私有的，另一个服务端公开的。Forking工作流的一个主要优势是，贡献的代码可以被集成，而不需要所有人都能push代码到仅有的中央仓库中。开发者push到自己的服务端仓库，而只有项目维护者才能push到正式仓库。&lt;/p&gt;
&lt;p&gt;新开发者想要在项目上工作时，不是直接从正式仓库克隆，而是fork正式项目在服务器上创建一个拷贝。这个仓库拷贝作为他个人公开仓库 —— 其它开发者不允许push到这个仓库，&lt;strong&gt;但可以pull下来修改&lt;/strong&gt;。要提交本地修改时，push提交到自己公开仓库中 —— 而不是正式仓库中。 然后，给正式仓库发起一个pull request，让项目维护者知道有更新已经准备好可以集成了。为了集成功能到正式代码库，&lt;strong&gt;维护者pull贡献者的变更到自己的本地仓库中&lt;/strong&gt;，检查变更以确保不会让项目出错， 合并变更到自己本地的master分支， 然后push master分支到服务器的正式仓库中。到此，贡献的提交成为了项目的一部分，其它的开发者应该执行pull操作与正式仓库同步自己本地仓库。&lt;/p&gt;
&lt;p&gt;具体来说，大致有下面几步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;开发者fork正式仓库&lt;/li&gt;
&lt;li&gt;开发者clone自己的fork出来的仓库，与之前工作流不一样的是，&lt;strong&gt;Forking工作流需要2个远程别名 —— 一个指向正式仓库，另一个指向开发者自己的服务端仓库。&lt;/strong&gt;，像下面这样  &lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;git remote add upstream https://bitbucket.org/maintainer/repo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;开发者修改都是私有的，如果项目往前走了，可以用git pull获得新的提交&lt;/li&gt;
&lt;li&gt;开发者准备分享新功能时，需要先push到自己的公开仓库中，然后发起pull request通知项目维护者，集成开发者的功能分支&lt;/li&gt;
&lt;li&gt;项目维护者通过GUI岔开pull request或者pull代码到自己的本地仓库，再手动合并。&lt;/li&gt;
&lt;li&gt;开发者通过&lt;code&gt;pull upstream master&lt;/code&gt;的方式拉取项目最新进展&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;pull-request&#34;&gt;&lt;a href=&#34;#pull-request&#34; class=&#34;headerlink&#34; title=&#34;pull request&#34;&gt;&lt;/a&gt;pull request&lt;/h3&gt;&lt;p&gt;pull request用于合并不同分支或不同仓库的代码，并在合并前进行一些讨论和代码微调，在上面不同工作流的情况下具体功能体现也不同。&lt;/p&gt;
&lt;p&gt;上面几种工作流范式只是几种标准的建议，正式的项目版本管理中，可以糅合上面的一些特点。&lt;/p&gt;
</content>
        <category term="git" />
        <category term="工作流" />
        <category term="pull request" />
        <updated>2018-08-16T15:28:34.000Z</updated>
    </entry>
    <entry>
        <id>http://shenlvmeng.github.com/blog/2018/08/16/some-tips-3/</id>
        <title>工作中的遇到的一些小知识 3</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2018/08/16/some-tips-3/"/>
        <content type="html">&lt;h2 id=&#34;git-case-sensitive&#34;&gt;&lt;a href=&#34;#git-case-sensitive&#34; class=&#34;headerlink&#34; title=&#34;git case sensitive&#34;&gt;&lt;/a&gt;git case sensitive&lt;/h2&gt;&lt;p&gt;git本身是大小写敏感的。但在大小写不敏感的系统里，需要用hack方法记录仅修改文件名大小写的改动。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;git &lt;span class=&#34;built_in&#34;&gt;mv&lt;/span&gt; file.txt temp.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;git &lt;span class=&#34;built_in&#34;&gt;mv&lt;/span&gt; temp.txt File.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;git commit -m &lt;span class=&#34;string&#34;&gt;&amp;quot;Renamed file.txt to File.txt&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;webpack的一些经验&#34;&gt;&lt;a href=&#34;#webpack的一些经验&#34; class=&#34;headerlink&#34; title=&#34;webpack的一些经验&#34;&gt;&lt;/a&gt;webpack的一些经验&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;DefinePlugin&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;允许创建一个在编译时可以配置的全局常量。在构建区分环境的包时很有用。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; webpack.&lt;span class=&#34;title class_&#34;&gt;DefinePlugin&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;PRODUCTION&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;JSON&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;stringify&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;VERSION&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;JSON&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;stringify&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;5fa3b9&amp;quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;BROWSER_SUPPORTS_HTML5&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;TWO&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;1+1&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;typeof window&amp;quot;&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;JSON&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;stringify&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;object&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;注意：这个插件直接执行文本替换。因此：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果这个值是一个字符串，它会被当作一个代码片段来使用。&lt;/li&gt;
&lt;li&gt;如果这个值不是字符串，它会被转化为字符串(包括函数)。&lt;/li&gt;
&lt;li&gt;如果这个值是一个对象，它所有的 key 会被同样的方式定义。&lt;/li&gt;
&lt;li&gt;如果在一个 key 前面加了 typeof,它会被定义为 typeof 调用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;resolve alias&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;创建import或require的别名，来确保模块引入变得更简单。例如，一些位于 src&amp;#x2F; 文件夹下的常用模块：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;alias&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    @: path.&lt;span class=&#34;title function_&#34;&gt;resolve&lt;/span&gt;(__dirname, &lt;span class=&#34;string&#34;&gt;&amp;#x27;src/&amp;#x27;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;Utilities&lt;/span&gt;: path.&lt;span class=&#34;title function_&#34;&gt;resolve&lt;/span&gt;(__dirname, &lt;span class=&#34;string&#34;&gt;&amp;#x27;src/utilities/&amp;#x27;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;Templates&lt;/span&gt;: path.&lt;span class=&#34;title function_&#34;&gt;resolve&lt;/span&gt;(__dirname, &lt;span class=&#34;string&#34;&gt;&amp;#x27;src/templates/&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;z-index可能的坑&#34;&gt;&lt;a href=&#34;#z-index可能的坑&#34; class=&#34;headerlink&#34; title=&#34;z-index可能的坑&#34;&gt;&lt;/a&gt;z-index可能的坑&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;使用前提：z-index只能在position属性值为relative或absolute或fixed的元素上有效。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;z-index值只决定同一父元素中的同级子元素的堆叠顺序。父元素的z-index值（如果有）为子元素定义了堆叠顺序（css版堆叠“拼爹”）。向上追溯找不到含有z-index值的父元素的情况下，则可以视为自由的z-index元素，它可以与父元素的同级兄弟定位元素或其他自由的定位元素来比较z-index的值，决定其堆叠顺序。同级元素的z-index值如果相同，则堆叠顺序由元素在文档中的先后位置决定，后出现的会在上面。&lt;/p&gt;
&lt;h2 id=&#34;git-submodule&#34;&gt;&lt;a href=&#34;#git-submodule&#34; class=&#34;headerlink&#34; title=&#34;git submodule&#34;&gt;&lt;/a&gt;git submodule&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;参考：&lt;a href=&#34;https://yihui.name/cn/2017/03/git-submodule/&#34;&gt;GIT 子模块&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最新一个项目里要复用已有的一个git库的代码，具体来说就是要将之前在WebView的内容复刻到PC版完成（这个需求貌似应该还挺常见的）。为了保证代码复用性，选择了&lt;code&gt;git submodule&lt;/code&gt;的方法。这也是我此前从没用过的一个命令。&lt;/p&gt;
&lt;p&gt;简单来说，是一个 GIT 仓库下面某个文件夹的来源可以跟本库的来源不同，这个文件夹连接着别的库，由别的库负责按本控制和管理。是不是和npm包管理的形式比较像。子模块可以手动添加，也可以在克隆一个主库的时候就直接实体化。具体来说，有四种情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;克隆库的时候要初始化子模块 &amp;#x3D;&amp;gt; 加上&lt;code&gt;--recursive&lt;/code&gt;参数 &lt;code&gt;git clone --recursive git@github.com:shenlvmeng/trace-maker.git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;初始化已有库的子模块 &amp;#x3D;&amp;gt; &lt;code&gt;git submodule update --init --recursive&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;从子模块的源更新该子模块 &amp;#x3D;&amp;gt; &lt;code&gt;git submodule update --recursive --remote&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;添加一个新的子模块 &amp;#x3D;&amp;gt; &lt;code&gt;git submodule add &amp;lt;git address&amp;gt; &amp;lt;folder address&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;已有有git submodule的库内，&lt;code&gt;.gitmodules&lt;/code&gt;是下面的样子：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[submodule &amp;quot;wheel&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    path = wheel&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    url = git@github.com:shenlvmeng/wheel.git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;npm-install&#34;&gt;&lt;a href=&#34;#npm-install&#34; class=&#34;headerlink&#34; title=&#34;npm install&#34;&gt;&lt;/a&gt;npm install&lt;/h2&gt;&lt;p&gt;npm install后跟的绝不仅仅只是包名，还可以通过ssh、http的形式引入npm包，唯一的要求是有&lt;code&gt;package.json&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;npm install (with no args, &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; package &lt;span class=&#34;built_in&#34;&gt;dir&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;npm install [&amp;lt;@scope&amp;gt;/]&amp;lt;name&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;npm install [&amp;lt;@scope&amp;gt;/]&amp;lt;name&amp;gt;@&amp;lt;tag&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;npm install [&amp;lt;@scope&amp;gt;/]&amp;lt;name&amp;gt;@&amp;lt;version&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;npm install [&amp;lt;@scope&amp;gt;/]&amp;lt;name&amp;gt;@&amp;lt;version range&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;npm install &amp;lt;git-host&amp;gt;:&amp;lt;git-user&amp;gt;/&amp;lt;repo-name&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;npm install &amp;lt;git repo url&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;npm install &amp;lt;tarball file&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;npm install &amp;lt;tarball url&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;npm install &amp;lt;folder&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;alias&lt;/span&gt;: npm i&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;一个&lt;strong&gt;package&lt;/strong&gt;可以是下面的形式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;包含&lt;code&gt;package.json&lt;/code&gt;的工程文件夹&lt;/li&gt;
&lt;li&gt;gzip过的“1”的压缩包&lt;/li&gt;
&lt;li&gt;指向“2”的url&lt;/li&gt;
&lt;li&gt;发布在npm-registry的&lt;code&gt;&amp;lt;name&amp;gt;@&amp;lt;registry&amp;gt;&lt;/code&gt;字符串&lt;/li&gt;
&lt;li&gt;发布在npm-registry的&lt;code&gt;&amp;lt;name&amp;gt;@&amp;lt;tag&amp;gt;&lt;/code&gt;字符串&lt;/li&gt;
&lt;li&gt;发布在npm-registry的&lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt;字符串(最新版本)&lt;/li&gt;
&lt;li&gt;一个指向“1”的合法git地址&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;cleave-js&#34;&gt;&lt;a href=&#34;#cleave-js&#34; class=&#34;headerlink&#34; title=&#34;cleave.js&#34;&gt;&lt;/a&gt;cleave.js&lt;/h2&gt;&lt;p&gt;一个自动格式化输入框的工具，有npm包、script标签等几种引用形式，还有react的使用方式。&lt;/p&gt;
&lt;p&gt;地址：&lt;a href=&#34;https://nosir.github.io/cleave.js/&#34;&gt;Format your &amp;lt;input&amp;#x2F;&amp;gt; content when you are typing&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;object-fit-amp-object-position&#34;&gt;&lt;a href=&#34;#object-fit-amp-object-position&#34; class=&#34;headerlink&#34; title=&#34;object-fit &amp;amp; object-position&#34;&gt;&lt;/a&gt;object-fit &amp;amp; object-position&lt;/h2&gt;&lt;p&gt;这两个CSS属性分别用于指定替换元素在其盒模型内的覆盖大小和对齐方式。使用效果很类似&lt;code&gt;background-size&lt;/code&gt;和&lt;code&gt;background-position&lt;/code&gt;。替换元素即内容不受CSS视觉格式化控制的元素，如image、iframe、video、textarea等。&lt;/p&gt;
&lt;p&gt;这使得本来自己决定模型大小的元素可以受CSS控制决定位置排布和大小。在需要自适应元素大小的场景下很好用，比如用户头像展示等。&lt;/p&gt;
&lt;p&gt;唯一的小小缺憾可能是IE11还不支持这两个属性，以及Edge只支持对&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;使用。&lt;/p&gt;
&lt;h2 id=&#34;移动端触摸默认行为优化&#34;&gt;&lt;a href=&#34;#移动端触摸默认行为优化&#34; class=&#34;headerlink&#34; title=&#34;移动端触摸默认行为优化&#34;&gt;&lt;/a&gt;移动端触摸默认行为优化&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;user-select: none&lt;/code&gt; 禁止用户选择&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-webkit-touch-callout: none&lt;/code&gt; 防止长按contextmenu弹出。类似的还有&lt;code&gt;contextmenu&lt;/code&gt;事件里的&lt;code&gt;e.preventDefault()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-webkit-tap-highlight-color: transparent&lt;/code&gt; 删除可点击元素默认的黑影&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;上传进度条&#34;&gt;&lt;a href=&#34;#上传进度条&#34; class=&#34;headerlink&#34; title=&#34;上传进度条&#34;&gt;&lt;/a&gt;上传进度条&lt;/h2&gt;&lt;p&gt;利用xhr事件的onprogress事件。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;xhr.&lt;span class=&#34;property&#34;&gt;onprogress&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;e&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (e.&lt;span class=&#34;property&#34;&gt;lengthComputable&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(e.&lt;span class=&#34;property&#34;&gt;loaded&lt;/span&gt;+  &lt;span class=&#34;string&#34;&gt;&amp;quot; / &amp;quot;&lt;/span&gt; + e.&lt;span class=&#34;property&#34;&gt;total&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;xhr.&lt;span class=&#34;property&#34;&gt;onloadstart&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;e&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;start&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;xhr.&lt;span class=&#34;property&#34;&gt;onloadend&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;e&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;end&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;不显示滚动条&#34;&gt;&lt;a href=&#34;#不显示滚动条&#34; class=&#34;headerlink&#34; title=&#34;不显示滚动条&#34;&gt;&lt;/a&gt;不显示滚动条&lt;/h2&gt;&lt;p&gt;基于Webkit的浏览器，可以使用CSS的方式隐藏滚动条。&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;amp;::-webkit-scrollbar &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attribute&#34;&gt;width&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attribute&#34;&gt;height&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attribute&#34;&gt;background&lt;/span&gt;: transparent;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;keyup无法prevent-default&#34;&gt;&lt;a href=&#34;#keyup无法prevent-default&#34; class=&#34;headerlink&#34; title=&#34;keyup无法prevent default&#34;&gt;&lt;/a&gt;keyup无法prevent default&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;keyup fires after the default action.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;keydown and keypress are where you can prevent the default.&lt;br&gt;If those aren’t stopped, then the default happens and keyup is fired.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;来源：&lt;a href=&#34;https://stackoverflow.com/questions/16052592/javascript-prevent-default-for-keyup/16052627&#34;&gt;jquery - javascript prevent default for keyup - StackOverflow&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;mixin-in-react&#34;&gt;&lt;a href=&#34;#mixin-in-react&#34; class=&#34;headerlink&#34; title=&#34;mixin in react&#34;&gt;&lt;/a&gt;mixin in react&lt;/h2&gt;&lt;p&gt;版本16之前，可以用mixin特性。16之后使用高阶组件HOC + ES6 class语法实现。&lt;a href=&#34;https://reactjs.org/docs/higher-order-components.html&#34;&gt;参考&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;user-select在Edge浏览器下的适配问题&#34;&gt;&lt;a href=&#34;#user-select在Edge浏览器下的适配问题&#34; class=&#34;headerlink&#34; title=&#34;user-select在Edge浏览器下的适配问题&#34;&gt;&lt;/a&gt;&lt;code&gt;user-select&lt;/code&gt;在Edge浏览器下的适配问题&lt;/h2&gt;&lt;p&gt;设置&lt;code&gt;user-select&lt;/code&gt;为&lt;code&gt;none&lt;/code&gt;在Edge浏览器下会导致input无法输入内容。可以用下面的写法，避免对&lt;code&gt;input&lt;/code&gt;标签应用该属性。&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;*&lt;span class=&#34;selector-pseudo&#34;&gt;:not&lt;/span&gt;(&lt;span class=&#34;selector-tag&#34;&gt;input&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  user-select: none;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;参考：&lt;a href=&#34;https://stackoverflow.com/questions/49614065/cant-type-in-input-field-using-microsoft-edge-and-safari&#34;&gt;html - Can’t type in input field using Microsoft Edge and Safari - StackOverflow&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;浏览器跨tab通信&#34;&gt;&lt;a href=&#34;#浏览器跨tab通信&#34; class=&#34;headerlink&#34; title=&#34;浏览器跨tab通信&#34;&gt;&lt;/a&gt;浏览器跨tab通信&lt;/h2&gt;&lt;p&gt;最近业务遇到了一个需求：同一浏览器上多tab用户信息同步的问题，所有这个域名下的需要强制一样的用户信息，避免困惑。&lt;/p&gt;
&lt;p&gt;跨tab通信主流方案有两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;localStorage，利用window的&lt;code&gt;storage&lt;/code&gt;事件，传递信息&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Broadcast_Channel_API&#34;&gt;BroadcastChannel&lt;/a&gt;，新的API，通过&lt;code&gt;postMessage&lt;/code&gt;和&lt;code&gt;onMessage&lt;/code&gt;完成双向通讯&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; bc = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;BroadcastChannel&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;test_channel&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;bc.&lt;span class=&#34;title function_&#34;&gt;postMessage&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;This is a test message.&amp;#x27;&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;/* send */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;bc.&lt;span class=&#34;property&#34;&gt;onmessage&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;ev&lt;/span&gt;) &amp;#123; &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(ev); &amp;#125; &lt;span class=&#34;comment&#34;&gt;/* receive */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;后者还未得到广泛支持，需要前者进行polyfill。&lt;/p&gt;
&lt;h2 id=&#34;aos&#34;&gt;&lt;a href=&#34;#aos&#34; class=&#34;headerlink&#34; title=&#34;aos&#34;&gt;&lt;/a&gt;aos&lt;/h2&gt;&lt;p&gt;Animation on scroll。&lt;a href=&#34;https://github.com/michalsnik/aos&#34;&gt;michalsnik&amp;#x2F;aos at master · Animate on scroll library&lt;/a&gt;.元素滚动至中的CSS动画，适合实现官网、落地页等效果。&lt;/p&gt;
&lt;h2 id=&#34;extract-text-webpack-plugin&#34;&gt;&lt;a href=&#34;#extract-text-webpack-plugin&#34; class=&#34;headerlink&#34; title=&#34;extract-text-webpack-plugin&#34;&gt;&lt;/a&gt;extract-text-webpack-plugin&lt;/h2&gt;&lt;p&gt;抽出CSS&amp;#x2F;Less&amp;#x2F;Sass等样式作为单独文件，用于那些需要提前加载样式的页面。详细用法见&lt;a href=&#34;https://github.com/webpack-contrib/extract-text-webpack-plugin&#34;&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;坑：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不支持webpack4.x，报内部错误（2018&amp;#x2F;07&amp;#x2F;30） &amp;#x3D;&amp;gt; 使用@next下载最新版&lt;/li&gt;
&lt;li&gt;报错&lt;code&gt;Module build failed: ReferenceError: window is not defined&lt;/code&gt; &amp;#x3D;&amp;gt; style-loader在extract-text-webpack-plugin中只做fallback项使用，见&lt;a href=&#34;https://github.com/webpack-contrib/extract-text-webpack-plugin/issues/503&#34;&gt;issue#503&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;常见调试技巧&#34;&gt;&lt;a href=&#34;#常见调试技巧&#34; class=&#34;headerlink&#34; title=&#34;常见调试技巧&#34;&gt;&lt;/a&gt;常见调试技巧&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;代码中插入debugger可以在该位置触发断点调试&lt;/li&gt;
&lt;li&gt;&lt;code&gt;console.dir&lt;/code&gt;可以打印对象结构，大多数情况和&lt;code&gt;console.log&lt;/code&gt;表现一致，在document等DOM元素上表现不同&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;react组件复用设计思路&#34;&gt;&lt;a href=&#34;#react组件复用设计思路&#34; class=&#34;headerlink&#34; title=&#34;react组件复用设计思路&#34;&gt;&lt;/a&gt;react组件复用设计思路&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;当设计的组件为自闭型时，通过传入数据（&lt;strong&gt;不要传入功能&lt;/strong&gt;）props的方式定制组件&lt;/li&gt;
&lt;li&gt;当设计的组件在有些场景下需要外部传入功能才能完整时，使用继承的方式实现&lt;/li&gt;
&lt;li&gt;在可以拆分出原子组件，&lt;strong&gt;且有此必要的时候&lt;/strong&gt;，使用原子组件拼装业务组件&lt;/li&gt;
&lt;li&gt;HOC优于mixin&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="git" />
        <category term="webpack" />
        <category term="z-index" />
        <category term="git submodule" />
        <category term="object-fit" />
        <category term="object-position" />
        <category term="BroadcastChannel" />
        <category term="extract-text-webpack-plugin" />
        <updated>2018-08-16T15:11:29.000Z</updated>
    </entry>
    <entry>
        <id>http://shenlvmeng.github.com/blog/2014/12/09/git-learning-1/</id>
        <title>git学习笔记 1 —— 基础</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2014/12/09/git-learning-1/"/>
        <content type="html">&lt;p&gt;因个人兴趣，从暑期开始做起web后台开发工作。这数月过来，无数次提交，更改，撤销更改等动作，让我深感学习版本控制的必要性。在学长的推荐下，以&lt;a href=&#34;http://git-scm.com/book/zh/v1&#34; title=&#34;Git Book&#34;&gt;Git-Book&lt;/a&gt;为基础开始学习git。Git-Book是本很好的教材，深入浅出，条理清晰。对比而言，很适合初学者使用。&lt;/p&gt;
&lt;p&gt;git为版本控制而生，是DVCS的一种。早期的数据库形式被用户机——CVCS服务器形式所取代。这种模式下，中央宕机会造成成很大损失。考虑到这点，分布式版本控制系统（DVCS）出现，在DVCS下，各用户机亦保存有文件的各版本，即使服务器宕机，也可以通过各用户机恢复。git是DVCS的一种。&lt;/p&gt;
&lt;p&gt;git起源于Linux的维护工作。诞生于2005年。建立在Linux经验的基础上，git有几个很明显的特征：追求速度，简单设计，非线性开发需求，完全分布式。因此，它能在简化操作的同时，简化开发者的工作量。&lt;/p&gt;
&lt;p&gt;学习git之前，要先建立对git几个特点的认识。这将将极大程度上有利于之后的进展。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;git记录文件的整体快照而非文件的局部改动。若文件改动，git将记载新文件；反之，git将只储存指向旧文件的指针。&lt;/li&gt;
&lt;li&gt;git继承了DVCS的特点，操作的本地性极强。不需要联网也可以使用git来保存甚至提交自己所做的改动&lt;/li&gt;
&lt;li&gt;git十分强调文件数据的完整性，用SHA-1算法得到文件校验得到一个Hash值表示文件。任意文件都有唯一的40bits十六进制字符串对应。&lt;/li&gt;
&lt;li&gt;git的各种操作绝大多数都是向数据库中添加数据，这意味着几乎所有操作都可以恢复。不用担心覆盖掉正确版本。&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color: #ff6600;&#34;&gt;git管理下的文件只有三种状态——修改，暂存，提交。&lt;/span&gt;这点很重要。git只对提交态的文件版本负责。&lt;br&gt;在了解了git的基础知识后，就可以在你的主机上安装git了。由于Linux环境下对git的使用较频繁，且我自己也在Linux环境下使用git，下面对Linux做重点介绍。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Linux&#34;&gt;&lt;a href=&#34;#Linux&#34; class=&#34;headerlink&#34; title=&#34;Linux&#34;&gt;&lt;/a&gt;Linux&lt;/h2&gt;&lt;h3 id=&#34;源代码安装&#34;&gt;&lt;a href=&#34;#源代码安装&#34; class=&#34;headerlink&#34; title=&#34;源代码安装&#34;&gt;&lt;/a&gt;源代码安装&lt;/h3&gt;&lt;p&gt;先安装依赖包&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;//使用yum的系统&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ yum install curl-devel expat-devel gettext-devel \ openssl-devel zlib-devel &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//使用apt-get的系统&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ apt-get install libcurl4-gnutls-dev libexpat1-dev gettext \ libz-dev libssl-dev&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;之后下载最新源代码并编译安装&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ tar -zxf git-1.7.2.2.tar.gz &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ &lt;span class=&#34;built_in&#34;&gt;cd&lt;/span&gt; git-1.7.2.2 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ make prefix=/usr/local all &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ sudo make prefix=/usr/local install&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//将git仓库克隆到本地，方便日后更新&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ git &lt;span class=&#34;built_in&#34;&gt;clone&lt;/span&gt; git://git.kernel.org/pub/scm/git/git.git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;傻瓜安装&#34;&gt;&lt;a href=&#34;#傻瓜安装&#34; class=&#34;headerlink&#34; title=&#34;傻瓜安装&#34;&gt;&lt;/a&gt;傻瓜安装&lt;/h3&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;//区别同上&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ yum install git-core&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ apt-get install git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;Mac与Windows&#34;&gt;&lt;a href=&#34;#Mac与Windows&#34; class=&#34;headerlink&#34; title=&#34;Mac与Windows&#34;&gt;&lt;/a&gt;Mac与Windows&lt;/h2&gt;&lt;p&gt;Mac可以通过MacPorts或者下载git图形化工具完成git安装。Windows可以通过安装msysgit使用git命令。&lt;/p&gt;
&lt;p&gt;在使用git前，可以通过git config更改个人用户名及电子邮箱地址。这样每次的提交会出现你个人的标识。&lt;/p&gt;
</content>
        <category term="git" />
        <updated>2014-12-09T11:29:00.000Z</updated>
    </entry>
</feed>
