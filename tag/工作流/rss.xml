<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Shenlvmeng&#39;s Blog • Posts by &#34;工作流&#34; tag</title>
        <link>http://shenlvmeng.github.com/blog</link>
        <description>Be sharp, my friend.</description>
        <language>zh-CN</language>
        <pubDate>Fri, 10 Sep 2021 10:44:08 +0800</pubDate>
        <lastBuildDate>Fri, 10 Sep 2021 10:44:08 +0800</lastBuildDate>
        <category>总结</category>
        <category>制度</category>
        <category>道德</category>
        <category>文官</category>
        <category>万历</category>
        <category>明朝</category>
        <category>读书笔记</category>
        <category>展望</category>
        <category>2018</category>
        <category>2019</category>
        <category>flag</category>
        <category>2020</category>
        <category>2021</category>
        <category>2022</category>
        <category>2023</category>
        <category>面试</category>
        <category>前端</category>
        <category>FAQ</category>
        <category>HTML</category>
        <category>CSS</category>
        <category>style guide</category>
        <category>编程</category>
        <category>范式</category>
        <category>设计</category>
        <category>艺术</category>
        <category>质量</category>
        <category>async_hooks</category>
        <category>cls-hooked</category>
        <category>logId</category>
        <category>录音</category>
        <category>getUserMedia</category>
        <category>AudioContext</category>
        <category>PCM</category>
        <category>WAVE</category>
        <category>二叉搜索树</category>
        <category>算法</category>
        <category>回忆</category>
        <category>老朋友</category>
        <category>C</category>
        <category>Hash</category>
        <category>布隆过滤器</category>
        <category>字符串检索</category>
        <category>canvas</category>
        <category>流程图</category>
        <category>d3</category>
        <category>g6</category>
        <category>zrender</category>
        <category>processOn</category>
        <category>SDN</category>
        <category>cbench</category>
        <category>安装说明</category>
        <category>绘图</category>
        <category>动画</category>
        <category>攻略</category>
        <category>流水账</category>
        <category>成都</category>
        <category>重庆</category>
        <category>武汉</category>
        <category>重构</category>
        <category>代码</category>
        <category>代码风格</category>
        <category>数据可视化</category>
        <category>爬虫</category>
        <category>chrome</category>
        <category>crx</category>
        <category>扩展</category>
        <category>CORS</category>
        <category>跨域</category>
        <category>盒模型</category>
        <category>浮动</category>
        <category>Reactive Programming</category>
        <category>JavaScript</category>
        <category>Cycle.js</category>
        <category>Dart</category>
        <category>最佳实践</category>
        <category>引流</category>
        <category>universal-link</category>
        <category>app-link</category>
        <category>脚手架</category>
        <category>degit</category>
        <category>git</category>
        <category>设计模式</category>
        <category>类</category>
        <category>接口</category>
        <category>抽象类</category>
        <category>DOM</category>
        <category>Docker</category>
        <category>ONOS</category>
        <category>控制器</category>
        <category>虚拟化</category>
        <category>笔记</category>
        <category>UX</category>
        <category>UED</category>
        <category>准则</category>
        <category>Java</category>
        <category>Ruby</category>
        <category>反射</category>
        <category>编程范式</category>
        <category>鸭子类型</category>
        <category>管理</category>
        <category>效率</category>
        <category>知识工作者</category>
        <category>卓有成效</category>
        <category>Elm</category>
        <category>框架</category>
        <category>函数式编程</category>
        <category>虚网映射</category>
        <category>Javascript</category>
        <category>并发</category>
        <category>event loop</category>
        <category>覆盖率</category>
        <category>端到端测试</category>
        <category>istanbul</category>
        <category>istanbuljs</category>
        <category>JavaSript</category>
        <category>Express</category>
        <category>源码</category>
        <category>代码覆盖率</category>
        <category>istanbul-middleware</category>
        <category>代码插桩</category>
        <category>require钩子</category>
        <category>babel-plugin-istanbul</category>
        <category>css</category>
        <category>html5</category>
        <category>flex</category>
        <category>javascript</category>
        <category>roadmap</category>
        <category>闭包</category>
        <category>Haskell</category>
        <category>monad</category>
        <category>后端</category>
        <category>管理后台</category>
        <category>egg.js</category>
        <category>工作流</category>
        <category>pull request</category>
        <category>golang</category>
        <category>语言学习</category>
        <category>黑客与画家</category>
        <category>创业</category>
        <category>骑行</category>
        <category>海南</category>
        <category>图文</category>
        <category>reflow</category>
        <category>repaint</category>
        <category>命名法</category>
        <category>成功学</category>
        <category>自我建设</category>
        <category>HTTP</category>
        <category>HTTP/2</category>
        <category>SPDY</category>
        <category>QUIC</category>
        <category>HTTPS</category>
        <category>状态码</category>
        <category>网络攻击</category>
        <category>介绍</category>
        <category>图片渲染</category>
        <category>html2canvas</category>
        <category>dom-to-image</category>
        <category>electron</category>
        <category>indexedDB</category>
        <category>异步</category>
        <category>Generator</category>
        <category>thunk</category>
        <category>async</category>
        <category>函数表达式</category>
        <category>对象</category>
        <category>继承</category>
        <category>类型转换</category>
        <category>==</category>
        <category>类型判断</category>
        <category>猫</category>
        <category>杀手</category>
        <category>管理学</category>
        <category>领导力</category>
        <category>梯队</category>
        <category>移动端</category>
        <category>UI</category>
        <category>自适应</category>
        <category>rem</category>
        <category>Electron</category>
        <category>GUI</category>
        <category>gpx</category>
        <category>template</category>
        <category>Electron Builder</category>
        <category>PWA</category>
        <category>方法论</category>
        <category>夜话</category>
        <category>多线</category>
        <category>生活</category>
        <category>密码</category>
        <category>密钥</category>
        <category>技改</category>
        <category>Vue</category>
        <category>gulp</category>
        <category>瀑布流</category>
        <category>电影</category>
        <category>PHP</category>
        <category>参考</category>
        <category>思维</category>
        <category>学习能力</category>
        <category>右脑</category>
        <category>经济学</category>
        <category>宏观经济学</category>
        <category>术语</category>
        <category>GDP</category>
        <category>CPI</category>
        <category>储蓄</category>
        <category>投资</category>
        <category>金融市场</category>
        <category>股票</category>
        <category>债券</category>
        <category>美联储</category>
        <category>失业</category>
        <category>货币</category>
        <category>现值</category>
        <category>准备金</category>
        <category>货币中性</category>
        <category>通货膨胀</category>
        <category>汇率</category>
        <category>购买力</category>
        <category>净出口</category>
        <category>资产净流出</category>
        <category>总需求</category>
        <category>总供给</category>
        <category>流动性偏好</category>
        <category>乘数效应</category>
        <category>菲利普斯曲线</category>
        <category>微观经济学</category>
        <category>供求</category>
        <category>贸易</category>
        <category>市场</category>
        <category>税</category>
        <category>剩余</category>
        <category>外部性</category>
        <category>公共物品</category>
        <category>公共资源</category>
        <category>生产成本</category>
        <category>利润</category>
        <category>垄断</category>
        <category>价格歧视</category>
        <category>寡头</category>
        <category>垄断竞争</category>
        <category>生产要素市场</category>
        <category>贫困</category>
        <category>消费者选择理论</category>
        <category>不对称信息</category>
        <category>政治经济学</category>
        <category>行为经济学</category>
        <category>VSCode</category>
        <category>编辑器</category>
        <category>IDE</category>
        <category>hybrid</category>
        <category>JSBridge</category>
        <category>Web Worker</category>
        <category>Service Worker</category>
        <category>习惯</category>
        <category>lint</category>
        <category>editorconfig</category>
        <category>commit message</category>
        <category>量子物理</category>
        <category>史话</category>
        <category>埋点</category>
        <category>raven.js</category>
        <category>前端监控</category>
        <category>文本编辑器</category>
        <category>quill</category>
        <category>结构化数据</category>
        <category>React</category>
        <category>Hooks</category>
        <category>函数组件</category>
        <category>复用</category>
        <category>状态管理</category>
        <category>redux</category>
        <category>MobX</category>
        <category>代码质量</category>
        <category>重来</category>
        <category>requestAnimationFrame</category>
        <category>TypeScript</category>
        <category>路书</category>
        <category>gpx解析</category>
        <category>EXIF</category>
        <category>人类</category>
        <category>生存</category>
        <category>基因</category>
        <category>响应式编程</category>
        <category>RxJS</category>
        <category>成长</category>
        <category>业务</category>
        <category>思想</category>
        <category>程序设计</category>
        <category>心理学</category>
        <category>自我</category>
        <category>社会思维</category>
        <category>社会影响</category>
        <category>文化</category>
        <category>性别</category>
        <category>从众</category>
        <category>说服</category>
        <category>临床诊断</category>
        <category>陪审团</category>
        <category>司法</category>
        <category>物质主义</category>
        <category>健康</category>
        <category>社会关系</category>
        <category>偏见</category>
        <category>攻击行为</category>
        <category>亲密关系</category>
        <category>友谊</category>
        <category>爱情</category>
        <category>利他</category>
        <category>冲突</category>
        <category>和解</category>
        <category>软技能</category>
        <category>理财</category>
        <category>健身</category>
        <category>自我营销</category>
        <category>学习</category>
        <category>商业模式</category>
        <category>产品</category>
        <category>校园网</category>
        <category>互联网</category>
        <category>技术</category>
        <category>web开发</category>
        <category>哲思</category>
        <category>择偶观</category>
        <category>validator</category>
        <category>大文件</category>
        <category>visibilityChange</category>
        <category>IntersectionObserver</category>
        <category>图种</category>
        <category>draggable</category>
        <category>webpack</category>
        <category>z-index</category>
        <category>git submodule</category>
        <category>object-fit</category>
        <category>object-position</category>
        <category>BroadcastChannel</category>
        <category>extract-text-webpack-plugin</category>
        <category>lottie</category>
        <category>backface-visibility</category>
        <category>egret</category>
        <category>mock</category>
        <category>SSO</category>
        <category>autoprefixer</category>
        <category>polyfill</category>
        <category>Android</category>
        <category>ffmpeg</category>
        <category>React Hooks</category>
        <category>rollup</category>
        <category>CDN</category>
        <category>DNS</category>
        <category>CNAME</category>
        <category>架构</category>
        <category>组件</category>
        <category>ssh</category>
        <category>fis-receiver</category>
        <category>tmux</category>
        <category>origami</category>
        <category>promise</category>
        <category>encodeURI</category>
        <category>encodeURIComponent</category>
        <category>axios</category>
        <category>charles</category>
        <category>黑色幽默</category>
        <category>朋友</category>
        <category>梦</category>
        <category>濒死</category>
        <category>江南</category>
        <category>苏州</category>
        <category>无锡</category>
        <category>宜兴</category>
        <category>湖州</category>
        <category>南浔</category>
        <category>游记</category>
        <category>随笔</category>
        <category>群众</category>
        <category>理论</category>
        <category>实效</category>
        <category>测试</category>
        <category>长沙</category>
        <category>杭州</category>
        <category>湖南</category>
        <category>核酸</category>
        <category>美食</category>
        <category>云南</category>
        <category>丽江</category>
        <category>大理</category>
        <category>青岛</category>
        <category>济南</category>
        <category>山东</category>
        <category>西北</category>
        <category>银川</category>
        <category>西宁</category>
        <category>青海湖</category>
        <category>西海镇</category>
        <category>茶卡盐湖</category>
        <category>厦门</category>
        <category>感受</category>
        <category>C语言</category>
        <category>树</category>
        <category>主干开发</category>
        <category>GitFlow</category>
        <category>GithubFlow</category>
        <category>typescript</category>
        <category>类型系统</category>
        <category>webrtc</category>
        <category>RTMP</category>
        <category>首屏时间</category>
        <category>性能优化</category>
        <category>公司</category>
        <category>个人发展</category>
        <category>战略</category>
        <category>晋升</category>
        <category>哲学</category>
        <category>幸福</category>
        <category>人生</category>
        <category>叔本华</category>
        <category>Unix</category>
        <category>Rollup</category>
        <category>mouseout</category>
        <category>mouseleave</category>
        <category>lint-staged</category>
        <category>吸顶</category>
        <category>图片组件</category>
        <category>形式系统</category>
        <category>不完全性</category>
        <category>隐喻</category>
        <category>哥德尔</category>
        <category>巴赫</category>
        <category>埃舍尔</category>
        <category>济州</category>
        <category>西归浦</category>
        <category>城山</category>
        <category>咸德</category>
        <category>人工智能</category>
        <category>心智</category>
        <category>自指</category>
        <category>图灵</category>
        <item>
            <guid isPermalink="true">http://shenlvmeng.github.com/blog/2021/09/10/trunk-based-development/</guid>
            <title>Trunk Based Development（主干开发）介绍</title>
            <link>http://shenlvmeng.github.com/blog/2021/09/10/trunk-based-development/</link>
            <category>工作流</category>
            <category>主干开发</category>
            <category>GitFlow</category>
            <category>GithubFlow</category>
            <pubDate>Fri, 10 Sep 2021 10:44:08 +0800</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;主干开发是相对&lt;a href=&#34;https://nvie.com/posts/a-successful-git-branching-model/&#34;&gt;GitFlow&lt;/a&gt;和&lt;a href=&#34;https://guides.github.com/introduction/flow/&#34;&gt;Github Flow&lt;/a&gt;更贴合CI&amp;#x2F;CD（持续集成&amp;#x2F;持续分发）的高效版本控制管理实践，也更贴合Devops团队。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;背景&#34;&gt;&lt;a href=&#34;#背景&#34; class=&#34;headerlink&#34; title=&#34;背景&#34;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;在软件开发的早年期间，GitFlow和GithubFlow被用来在软件开发中做版本控制管理。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GitFlow工作流中，分为主干分支（&lt;code&gt;master&lt;/code&gt;）、开发分支（&lt;code&gt;dev&lt;/code&gt;）、特性分支、分布分支、热修分支等，这些分支都是长期存在的，并在需求开发完成&amp;#x2F;bug修复完成&amp;#x2F;代码发布等特定时候执行代码的CR（Code Review）和合码工作。且在合并时，由仓库的核心成员或者管理员们把握代码质量。随着项目的扩大，冲突的几率提高，每次代码合码时候的工作量也大大提升，带来了额外的仓库维护成本。Github Flow便随着Github逐渐流行起来。&lt;br&gt;&lt;img src=&#34;https://nvie.com/img/git-model@2x.png&#34; alt=&#34;GitFlow&#34;&gt;&lt;/li&gt;
&lt;li&gt;Github Flow工作流中，只有一个主干分支（&lt;code&gt;master&lt;/code&gt;），一些特性分支以及发布时会用到的分布分支。开发者可以自由从主干分支签出特性分支开发、调试，并在需求完成后合入主干分支。一定程度上减少了长期存在分支的维护成本，但同样的，CR依然是项目管理者进行，特性分支合码时代码量依然有可能很大，团队内规范不好的话，也容易导致合码后主干分支不可发布。&lt;br&gt;&lt;img src=&#34;https://images.prismic.io/launchdarkly/bf307def-6bfc-4d27-ac8b-f4dd1a403935_TrunkBasedDev-01+%283%29.png?auto=compress,format&#34; alt=&#34;Merge Conflict&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;主干开发（Trunk Based Development）是一种更敏捷的git工作流，所有的开发者都可以合码到主干分支，结合CI&amp;#x2F;CD流程，有助于团队快速迭代。&lt;/p&gt;
&lt;h2 id=&#34;什么是主干开发&#34;&gt;&lt;a href=&#34;#什么是主干开发&#34; class=&#34;headerlink&#34; title=&#34;什么是主干开发&#34;&gt;&lt;/a&gt;什么是主干开发&lt;/h2&gt;&lt;p&gt;主干开发和CI&amp;#x2F;CD相互依赖相辅相成。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进行主干开发才能保证CI&amp;#x2F;CD，即每天充分多次的集成乃至发布&lt;/li&gt;
&lt;li&gt;CI&amp;#x2F;CD过程中的&lt;strong&gt;快速&lt;/strong&gt;自动化测试可以保证主干分支的可发布性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在主干开发中每位或者每小组开发者将自己的工作分成小份，然后以每天至少一次的形式从自己的分支合并到主干，由于每次合并代码量不大，CR时间以及CI时间都会缩短。一个典型的主干开发时间轴如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cloud.google.com/architecture/devops/images/devops-tech-trunk-based-development-typical-trunk-timeline.svg&#34; alt=&#34;主干开发时间轴&#34;&gt;&lt;/p&gt;
&lt;p&gt;在主干开发中，某些情况下需要从主干分支中选出最佳的bug修复合并到对应版本中，但如果每天发布多次，则根本不需要发布分支，可直接从主干中部署。这样做的最大优势在于减少开发线，频繁执行小批量合并，将代码保持最新。从而降低团队的合码成本。&lt;/p&gt;
&lt;h2 id=&#34;如何实现主干开发&#34;&gt;&lt;a href=&#34;#如何实现主干开发&#34; class=&#34;headerlink&#34; title=&#34;如何实现主干开发&#34;&gt;&lt;/a&gt;如何实现主干开发&lt;/h2&gt;&lt;p&gt;在进行主干开发时，开发者需要了解如何拆解工作为小份，同时，还需要让构建流程保持通过，如果CI失败，开发者需要立即停止当前工作修复问题，无法短期修复时，也要还原相应更改。通常来讲，主干开发有下面这样的特征：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;仓库里的活跃分支不超过3个&lt;/li&gt;
&lt;li&gt;分支的合码频率不少于每天1次，即分支的生存周期不超过1天&lt;/li&gt;
&lt;li&gt;没有代码冻结期或集成期&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在实践中，有下面一些tips：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;小commit，多合码&lt;/strong&gt;：将每次合码改动限制在少量的commit和较少的代码改动上，保证合码时轻松；主干分支应该有频繁的小批量改动合码&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最少1天1合码&lt;/strong&gt;：每天合并或关闭待合并分支，有效减少合码压力，提高增量发布敏捷度&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;同步Code Review&lt;/strong&gt;：主干分支的每次合码需要保证CR的及时响应，这可以借助一些代码分析工具的辅助&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;全面的自动化测试覆盖&lt;/strong&gt;：确保有全面的自动化单元测试套件，保证测试通过后再合并代码，这也是保证主干分支可发布的基础&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;构建快速&lt;/strong&gt;：降低CI成本，构建和测试需要在几分钟内完成&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同时也带来两个新概念&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;分支抽象&lt;/strong&gt;：在主干开发中，合码频率很高，有些大需求可能没有办法在1天内就完成合码，对于未完成的需求，可以在代码中先埋下未使用的新特性，等待需求完成后，再使用埋好的新功能。这种在源代码中提前埋下“代码分支”的方式成为抽象分支（Branch by abstraction）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://featureflags.io/&#34;&gt;&lt;strong&gt;特性开关&lt;/strong&gt;&lt;/a&gt;：在分支抽象的基础上，有些合并到主干的改动不一定想让所有用户都看见，可以在代码中预先埋入分支语句，再从配置中读取当前是否使用特性。这样可以实现功能灵活切换、实现ab-test等效果&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://images.prismic.io/launchdarkly/7ad744e0-5c46-4a2f-b08d-6013a95e89c5_TrunkBasedDev-02+%283%29.png?auto=compress,format&#34; alt=&#34;feature-flags&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;标准开发流&#34;&gt;&lt;a href=&#34;#标准开发流&#34; class=&#34;headerlink&#34; title=&#34;标准开发流&#34;&gt;&lt;/a&gt;标准开发流&lt;/h2&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;git checkout master &amp;amp;&amp;amp; git pull --prune&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;git checkout -b &amp;lt;feat/branch&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# coding&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;git push -u origin &amp;lt;feat/branch&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# after any updates&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;git push&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# or add --force if rebased during updates&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;git push -f&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ol&gt;
&lt;li&gt;更新本地master分支&lt;/li&gt;
&lt;li&gt;签出特性分支&lt;/li&gt;
&lt;li&gt;编码&lt;/li&gt;
&lt;li&gt;推送本地分支到远端&lt;/li&gt;
&lt;li&gt;提MR，如果MR后有更新，继续push，当rebase master遇到冲突时，推送需要增加&lt;code&gt;-f&lt;/code&gt;参数&lt;/li&gt;
&lt;li&gt;合码&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;注：因为主干开发每次合码量不大，建议使用&lt;code&gt;rebase&lt;/code&gt;解决冲突&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;主干开发的好处&#34;&gt;&lt;a href=&#34;#主干开发的好处&#34; class=&#34;headerlink&#34; title=&#34;主干开发的好处&#34;&gt;&lt;/a&gt;主干开发的好处&lt;/h2&gt;&lt;p&gt;主干开发的最大好处在于对CI的亲和度。可以想象开发者完成当日工作，当日合码，当日测试通过完成集成，达到可发布状态。很大程度减少了合码的痛苦。进而有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;持续CI&lt;/li&gt;
&lt;li&gt;持续CR&lt;/li&gt;
&lt;li&gt;持续CD&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a href=&#34;#总结&#34; class=&#34;headerlink&#34; title=&#34;总结&#34;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;非常适用于敏捷开发中，对于团队成员能力过关（要懂得怎样拆分需求）、测试有着良好建设的团队来讲，是种提效的好方式，值得一试。相反如果成员拆分不够良好、代码review不够及时，测试不够自动化和系统，则不适用主干开发。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;&lt;a href=&#34;#参考&#34; class=&#34;headerlink&#34; title=&#34;参考&#34;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.atlassian.com/continuous-delivery/continuous-integration/trunk-based-development&#34;&gt;Trunk-based development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.google.com/architecture/devops/devops-tech-trunk-based-development&#34;&gt;DevOps技术：主干开发&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://trunkbaseddevelopment.com/&#34;&gt;Trunk Based Development: Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://launchdarkly.com/blog/git-branching-strategies-vs-trunk-based-development/&#34;&gt;Git Branching Strategies vs. Trunk-Based Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://launchdarkly.com/blog/what-are-feature-flags/&#34;&gt;What Are Feature Flags?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://shenlvmeng.github.com/blog/2018/08/16/git-workflow/</guid>
            <title>git工作流最佳实践</title>
            <link>http://shenlvmeng.github.com/blog/2018/08/16/git-workflow/</link>
            <category>git</category>
            <category>工作流</category>
            <category>pull request</category>
            <pubDate>Thu, 16 Aug 2018 23:28:34 +0800</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;参考：&lt;a href=&#34;https://github.com/xirong/my-git/blob/master/git-workflow-tutorial.md&#34;&gt;my-git&amp;#x2F;git-workflow-tutorial.md at master · xirong&amp;#x2F;my-git&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;git工作流有多种使用方法，在实际工作中的不良工作习惯，会造成很让人头大的麻烦。下面距离一些常用的工作流。&lt;/p&gt;
&lt;h3 id=&#34;集中式&#34;&gt;&lt;a href=&#34;#集中式&#34; class=&#34;headerlink&#34; title=&#34;集中式&#34;&gt;&lt;/a&gt;集中式&lt;/h3&gt;&lt;p&gt;类似SVN，集中式工作流以中央仓库作为项目所有修改的单点实体，只用到master这一个分支。&lt;strong&gt;开发者提交功能修改到中央库前，采用&lt;code&gt;rebase&lt;/code&gt;的方式“在其基础上添加自己的修改”，得到完美的线性历史；遇到冲突时，通过&lt;code&gt;git status&lt;/code&gt;和&lt;code&gt;git add&lt;/code&gt;合并冲突&lt;/strong&gt;。最后&lt;code&gt;git rebase --continue&lt;/code&gt;即可。遇到困难无法进行下去时，&lt;code&gt;git rebase --abort&lt;/code&gt;就可以撤回到rebase前的状态。&lt;/p&gt;
&lt;p&gt;在这种工作流下，使用&lt;code&gt;rebase&lt;/code&gt;参数比不使用的&lt;code&gt;git pull&lt;/code&gt;好处在于，rebase后的提交记录会少一次累赘的“合并提交”。&lt;/p&gt;
&lt;h3 id=&#34;功能分支&#34;&gt;&lt;a href=&#34;#功能分支&#34; class=&#34;headerlink&#34; title=&#34;功能分支&#34;&gt;&lt;/a&gt;功能分支&lt;/h3&gt;&lt;p&gt;git相较SVN强大在分布式的特征。功能分支工作流主要针对新增功能集成到正式项目。功能分支工作流仍然以中央仓库为基础，但不是直接提交本地历史到各自的本地master分支，而是在开发新功能时&lt;strong&gt;创建新的分支，描述新功能&lt;/strong&gt;。不同的功能分支相互隔离，同时也保证master分支的代码一定没有问题。一旦功能分支push到master，意味着功能与其他开发者共享。&lt;/p&gt;
&lt;p&gt;合并到master分支的过程通过创建pull request进行，在pull request请求中，让其他开发者有机会先去review变更。Pull request被接受后，剩下的工作就和集中式很像了，拉取master分支代码，合并，提交。&lt;/p&gt;
&lt;p&gt;工作流程上：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先checkout功能分支&lt;/li&gt;
&lt;li&gt;做本地开发提交，以及&lt;code&gt;push -u&lt;/code&gt;推送到远端分支（&lt;code&gt;-u&lt;/code&gt;是跟踪远端对应分支的意思）&lt;/li&gt;
&lt;li&gt;完成开发后，提交pull request，请求合并远端功能分支到master，团队其他成员可以进行评论&lt;/li&gt;
&lt;li&gt;在接受前，团队&lt;strong&gt;所有成员&lt;/strong&gt;有需要，可以提交自己的修改到该功能分支，也会显示在pull request里&lt;/li&gt;
&lt;li&gt;在pull-request被接受后，在本地master上可以用pull或者&lt;code&gt;pull -r&lt;/code&gt;的方式合并功能分支，前者更像功能和原来代码的合并，后者更偏向线型的提交历史&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;gitflow&#34;&gt;&lt;a href=&#34;#gitflow&#34; class=&#34;headerlink&#34; title=&#34;gitflow&#34;&gt;&lt;/a&gt;gitflow&lt;/h3&gt;&lt;p&gt;Gitflow工作流通过为功能开发、发布准备和维护分配独立的分支，让发布迭代过程更流畅。相较功能分支更复杂，但也更健壮。仍然用中央仓库作为所有开发者的交互中心。相对于使用仅有的一个master分支，Gitflow工作流使用两个分支来记录项目的历史。master分支存储了正式发布的历史，而&lt;strong&gt;develop分支作为功能的集成分支。&lt;/strong&gt;从而可以在master的&lt;strong&gt;所有提交附上版本号&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;每个新功能位于一个自己的分支，有着和功能分支一样的开发工作流，唯一不同的是，功能分支不是从master分支上拉出新分支，而是使用develop分支作为父分支。每次合并都位于develop分支。&lt;/p&gt;
&lt;p&gt;一旦develop分支上有了做一次发布（或者说快到了既定的发布日）的足够功能，就&lt;strong&gt;从develop分支上checkout一个发布分支release&lt;/strong&gt;。从这个时间点开始之后新的功能不能再加到这个分支上——这个分支只应该做Bug修复、文档生成和其它面向发布任务。在release工作完成后，合并release分支到master，并加上tag。同时，&lt;strong&gt;release上做的修改要合并会develop分支&lt;/strong&gt;。最后删除release分支。&lt;/p&gt;
&lt;p&gt;维护分支或说是热修复（hotfix）分支用于给产品发布版本（production releases）快速生成补丁，这是唯一可以直接从master分支fork出来的分支。修改完成后，修改应该立马合并回master和develop。master也应该为合并生成新的tag。&lt;/p&gt;
&lt;h3 id=&#34;forking&#34;&gt;&lt;a href=&#34;#forking&#34; class=&#34;headerlink&#34; title=&#34;forking&#34;&gt;&lt;/a&gt;forking&lt;/h3&gt;&lt;p&gt;Forking工作流是分布式工作流，可以安全可靠地管理大团队的开发者（developer）和不信任贡献者（contributor）的提交。这种工作流不是使用单个服务端仓库作为『中央』代码基线，而让各个开发者都有一个服务端仓库。这意味着各个代码贡献者有2个Git仓库而不是1个：一个本地私有的，另一个服务端公开的。Forking工作流的一个主要优势是，贡献的代码可以被集成，而不需要所有人都能push代码到仅有的中央仓库中。开发者push到自己的服务端仓库，而只有项目维护者才能push到正式仓库。&lt;/p&gt;
&lt;p&gt;新开发者想要在项目上工作时，不是直接从正式仓库克隆，而是fork正式项目在服务器上创建一个拷贝。这个仓库拷贝作为他个人公开仓库 —— 其它开发者不允许push到这个仓库，&lt;strong&gt;但可以pull下来修改&lt;/strong&gt;。要提交本地修改时，push提交到自己公开仓库中 —— 而不是正式仓库中。 然后，给正式仓库发起一个pull request，让项目维护者知道有更新已经准备好可以集成了。为了集成功能到正式代码库，&lt;strong&gt;维护者pull贡献者的变更到自己的本地仓库中&lt;/strong&gt;，检查变更以确保不会让项目出错， 合并变更到自己本地的master分支， 然后push master分支到服务器的正式仓库中。到此，贡献的提交成为了项目的一部分，其它的开发者应该执行pull操作与正式仓库同步自己本地仓库。&lt;/p&gt;
&lt;p&gt;具体来说，大致有下面几步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;开发者fork正式仓库&lt;/li&gt;
&lt;li&gt;开发者clone自己的fork出来的仓库，与之前工作流不一样的是，&lt;strong&gt;Forking工作流需要2个远程别名 —— 一个指向正式仓库，另一个指向开发者自己的服务端仓库。&lt;/strong&gt;，像下面这样  &lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;git remote add upstream https://bitbucket.org/maintainer/repo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;开发者修改都是私有的，如果项目往前走了，可以用git pull获得新的提交&lt;/li&gt;
&lt;li&gt;开发者准备分享新功能时，需要先push到自己的公开仓库中，然后发起pull request通知项目维护者，集成开发者的功能分支&lt;/li&gt;
&lt;li&gt;项目维护者通过GUI岔开pull request或者pull代码到自己的本地仓库，再手动合并。&lt;/li&gt;
&lt;li&gt;开发者通过&lt;code&gt;pull upstream master&lt;/code&gt;的方式拉取项目最新进展&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;pull-request&#34;&gt;&lt;a href=&#34;#pull-request&#34; class=&#34;headerlink&#34; title=&#34;pull request&#34;&gt;&lt;/a&gt;pull request&lt;/h3&gt;&lt;p&gt;pull request用于合并不同分支或不同仓库的代码，并在合并前进行一些讨论和代码微调，在上面不同工作流的情况下具体功能体现也不同。&lt;/p&gt;
&lt;p&gt;上面几种工作流范式只是几种标准的建议，正式的项目版本管理中，可以糅合上面的一些特点。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
