{
    "version": "https://jsonfeed.org/version/1",
    "title": "Shenlvmeng's Blog • All posts by \"工作流\" tag",
    "description": "Be sharp, my friend.",
    "home_page_url": "http://shenlvmeng.github.com/blog",
    "items": [
        {
            "id": "http://shenlvmeng.github.com/blog/2021/09/10/trunk-based-development/",
            "url": "http://shenlvmeng.github.com/blog/2021/09/10/trunk-based-development/",
            "title": "Trunk Based Development（主干开发）介绍",
            "date_published": "2021-09-10T02:44:08.000Z",
            "content_html": "<blockquote>\n<p>主干开发是相对<a href=\"https://nvie.com/posts/a-successful-git-branching-model/\">GitFlow</a>和<a href=\"https://guides.github.com/introduction/flow/\">Github Flow</a>更贴合CI&#x2F;CD（持续集成&#x2F;持续分发）的高效版本控制管理实践，也更贴合Devops团队。</p>\n</blockquote>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在软件开发的早年期间，GitFlow和GithubFlow被用来在软件开发中做版本控制管理。</p>\n<ul>\n<li>GitFlow工作流中，分为主干分支（<code>master</code>）、开发分支（<code>dev</code>）、特性分支、分布分支、热修分支等，这些分支都是长期存在的，并在需求开发完成&#x2F;bug修复完成&#x2F;代码发布等特定时候执行代码的CR（Code Review）和合码工作。且在合并时，由仓库的核心成员或者管理员们把握代码质量。随着项目的扩大，冲突的几率提高，每次代码合码时候的工作量也大大提升，带来了额外的仓库维护成本。Github Flow便随着Github逐渐流行起来。<br><img src=\"https://nvie.com/img/git-model@2x.png\" alt=\"GitFlow\"></li>\n<li>Github Flow工作流中，只有一个主干分支（<code>master</code>），一些特性分支以及发布时会用到的分布分支。开发者可以自由从主干分支签出特性分支开发、调试，并在需求完成后合入主干分支。一定程度上减少了长期存在分支的维护成本，但同样的，CR依然是项目管理者进行，特性分支合码时代码量依然有可能很大，团队内规范不好的话，也容易导致合码后主干分支不可发布。<br><img src=\"https://images.prismic.io/launchdarkly/bf307def-6bfc-4d27-ac8b-f4dd1a403935_TrunkBasedDev-01+%283%29.png?auto=compress,format\" alt=\"Merge Conflict\"></li>\n</ul>\n<p>主干开发（Trunk Based Development）是一种更敏捷的git工作流，所有的开发者都可以合码到主干分支，结合CI&#x2F;CD流程，有助于团队快速迭代。</p>\n<h2 id=\"什么是主干开发\"><a href=\"#什么是主干开发\" class=\"headerlink\" title=\"什么是主干开发\"></a>什么是主干开发</h2><p>主干开发和CI&#x2F;CD相互依赖相辅相成。</p>\n<ul>\n<li>进行主干开发才能保证CI&#x2F;CD，即每天充分多次的集成乃至发布</li>\n<li>CI&#x2F;CD过程中的<strong>快速</strong>自动化测试可以保证主干分支的可发布性</li>\n</ul>\n<p>在主干开发中每位或者每小组开发者将自己的工作分成小份，然后以每天至少一次的形式从自己的分支合并到主干，由于每次合并代码量不大，CR时间以及CI时间都会缩短。一个典型的主干开发时间轴如下：</p>\n<p><img src=\"https://cloud.google.com/architecture/devops/images/devops-tech-trunk-based-development-typical-trunk-timeline.svg\" alt=\"主干开发时间轴\"></p>\n<p>在主干开发中，某些情况下需要从主干分支中选出最佳的bug修复合并到对应版本中，但如果每天发布多次，则根本不需要发布分支，可直接从主干中部署。这样做的最大优势在于减少开发线，频繁执行小批量合并，将代码保持最新。从而降低团队的合码成本。</p>\n<h2 id=\"如何实现主干开发\"><a href=\"#如何实现主干开发\" class=\"headerlink\" title=\"如何实现主干开发\"></a>如何实现主干开发</h2><p>在进行主干开发时，开发者需要了解如何拆解工作为小份，同时，还需要让构建流程保持通过，如果CI失败，开发者需要立即停止当前工作修复问题，无法短期修复时，也要还原相应更改。通常来讲，主干开发有下面这样的特征：</p>\n<ul>\n<li>仓库里的活跃分支不超过3个</li>\n<li>分支的合码频率不少于每天1次，即分支的生存周期不超过1天</li>\n<li>没有代码冻结期或集成期</li>\n</ul>\n<p>在实践中，有下面一些tips：</p>\n<ul>\n<li><strong>小commit，多合码</strong>：将每次合码改动限制在少量的commit和较少的代码改动上，保证合码时轻松；主干分支应该有频繁的小批量改动合码</li>\n<li><strong>最少1天1合码</strong>：每天合并或关闭待合并分支，有效减少合码压力，提高增量发布敏捷度</li>\n<li><strong>同步Code Review</strong>：主干分支的每次合码需要保证CR的及时响应，这可以借助一些代码分析工具的辅助</li>\n<li><strong>全面的自动化测试覆盖</strong>：确保有全面的自动化单元测试套件，保证测试通过后再合并代码，这也是保证主干分支可发布的基础</li>\n<li><strong>构建快速</strong>：降低CI成本，构建和测试需要在几分钟内完成</li>\n</ul>\n<p>同时也带来两个新概念</p>\n<ul>\n<li><strong>分支抽象</strong>：在主干开发中，合码频率很高，有些大需求可能没有办法在1天内就完成合码，对于未完成的需求，可以在代码中先埋下未使用的新特性，等待需求完成后，再使用埋好的新功能。这种在源代码中提前埋下“代码分支”的方式成为抽象分支（Branch by abstraction）</li>\n<li><a href=\"https://featureflags.io/\"><strong>特性开关</strong></a>：在分支抽象的基础上，有些合并到主干的改动不一定想让所有用户都看见，可以在代码中预先埋入分支语句，再从配置中读取当前是否使用特性。这样可以实现功能灵活切换、实现ab-test等效果</li>\n</ul>\n<p><img src=\"https://images.prismic.io/launchdarkly/7ad744e0-5c46-4a2f-b08d-6013a95e89c5_TrunkBasedDev-02+%283%29.png?auto=compress,format\" alt=\"feature-flags\"></p>\n<h2 id=\"标准开发流\"><a href=\"#标准开发流\" class=\"headerlink\" title=\"标准开发流\"></a>标准开发流</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master &amp;&amp; git pull --prune</span><br><span class=\"line\">git checkout -b &lt;feat/branch&gt;</span><br><span class=\"line\"><span class=\"comment\"># coding</span></span><br><span class=\"line\">git push -u origin &lt;feat/branch&gt;</span><br><span class=\"line\"><span class=\"comment\"># after any updates</span></span><br><span class=\"line\">git push</span><br><span class=\"line\"><span class=\"comment\"># or add --force if rebased during updates</span></span><br><span class=\"line\">git push -f</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>更新本地master分支</li>\n<li>签出特性分支</li>\n<li>编码</li>\n<li>推送本地分支到远端</li>\n<li>提MR，如果MR后有更新，继续push，当rebase master遇到冲突时，推送需要增加<code>-f</code>参数</li>\n<li>合码</li>\n</ol>\n<blockquote>\n<p>注：因为主干开发每次合码量不大，建议使用<code>rebase</code>解决冲突</p>\n</blockquote>\n<h2 id=\"主干开发的好处\"><a href=\"#主干开发的好处\" class=\"headerlink\" title=\"主干开发的好处\"></a>主干开发的好处</h2><p>主干开发的最大好处在于对CI的亲和度。可以想象开发者完成当日工作，当日合码，当日测试通过完成集成，达到可发布状态。很大程度减少了合码的痛苦。进而有：</p>\n<ul>\n<li>持续CI</li>\n<li>持续CR</li>\n<li>持续CD</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>非常适用于敏捷开发中，对于团队成员能力过关（要懂得怎样拆分需求）、测试有着良好建设的团队来讲，是种提效的好方式，值得一试。相反如果成员拆分不够良好、代码review不够及时，测试不够自动化和系统，则不适用主干开发。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://www.atlassian.com/continuous-delivery/continuous-integration/trunk-based-development\">Trunk-based development</a></li>\n<li><a href=\"https://cloud.google.com/architecture/devops/devops-tech-trunk-based-development\">DevOps技术：主干开发</a></li>\n<li><a href=\"https://trunkbaseddevelopment.com/\">Trunk Based Development: Introduction</a></li>\n<li><a href=\"https://launchdarkly.com/blog/git-branching-strategies-vs-trunk-based-development/\">Git Branching Strategies vs. Trunk-Based Development</a></li>\n<li><a href=\"https://launchdarkly.com/blog/what-are-feature-flags/\">What Are Feature Flags?</a></li>\n</ul>\n",
            "tags": [
                "工作流",
                "主干开发",
                "GitFlow",
                "GithubFlow"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2018/08/16/git-workflow/",
            "url": "http://shenlvmeng.github.com/blog/2018/08/16/git-workflow/",
            "title": "git工作流最佳实践",
            "date_published": "2018-08-16T15:28:34.000Z",
            "content_html": "<blockquote>\n<p>参考：<a href=\"https://github.com/xirong/my-git/blob/master/git-workflow-tutorial.md\">my-git&#x2F;git-workflow-tutorial.md at master · xirong&#x2F;my-git</a></p>\n</blockquote>\n<p>git工作流有多种使用方法，在实际工作中的不良工作习惯，会造成很让人头大的麻烦。下面距离一些常用的工作流。</p>\n<h3 id=\"集中式\"><a href=\"#集中式\" class=\"headerlink\" title=\"集中式\"></a>集中式</h3><p>类似SVN，集中式工作流以中央仓库作为项目所有修改的单点实体，只用到master这一个分支。<strong>开发者提交功能修改到中央库前，采用<code>rebase</code>的方式“在其基础上添加自己的修改”，得到完美的线性历史；遇到冲突时，通过<code>git status</code>和<code>git add</code>合并冲突</strong>。最后<code>git rebase --continue</code>即可。遇到困难无法进行下去时，<code>git rebase --abort</code>就可以撤回到rebase前的状态。</p>\n<p>在这种工作流下，使用<code>rebase</code>参数比不使用的<code>git pull</code>好处在于，rebase后的提交记录会少一次累赘的“合并提交”。</p>\n<h3 id=\"功能分支\"><a href=\"#功能分支\" class=\"headerlink\" title=\"功能分支\"></a>功能分支</h3><p>git相较SVN强大在分布式的特征。功能分支工作流主要针对新增功能集成到正式项目。功能分支工作流仍然以中央仓库为基础，但不是直接提交本地历史到各自的本地master分支，而是在开发新功能时<strong>创建新的分支，描述新功能</strong>。不同的功能分支相互隔离，同时也保证master分支的代码一定没有问题。一旦功能分支push到master，意味着功能与其他开发者共享。</p>\n<p>合并到master分支的过程通过创建pull request进行，在pull request请求中，让其他开发者有机会先去review变更。Pull request被接受后，剩下的工作就和集中式很像了，拉取master分支代码，合并，提交。</p>\n<p>工作流程上：</p>\n<ol>\n<li>先checkout功能分支</li>\n<li>做本地开发提交，以及<code>push -u</code>推送到远端分支（<code>-u</code>是跟踪远端对应分支的意思）</li>\n<li>完成开发后，提交pull request，请求合并远端功能分支到master，团队其他成员可以进行评论</li>\n<li>在接受前，团队<strong>所有成员</strong>有需要，可以提交自己的修改到该功能分支，也会显示在pull request里</li>\n<li>在pull-request被接受后，在本地master上可以用pull或者<code>pull -r</code>的方式合并功能分支，前者更像功能和原来代码的合并，后者更偏向线型的提交历史</li>\n</ol>\n<h3 id=\"gitflow\"><a href=\"#gitflow\" class=\"headerlink\" title=\"gitflow\"></a>gitflow</h3><p>Gitflow工作流通过为功能开发、发布准备和维护分配独立的分支，让发布迭代过程更流畅。相较功能分支更复杂，但也更健壮。仍然用中央仓库作为所有开发者的交互中心。相对于使用仅有的一个master分支，Gitflow工作流使用两个分支来记录项目的历史。master分支存储了正式发布的历史，而<strong>develop分支作为功能的集成分支。</strong>从而可以在master的<strong>所有提交附上版本号</strong>。</p>\n<p>每个新功能位于一个自己的分支，有着和功能分支一样的开发工作流，唯一不同的是，功能分支不是从master分支上拉出新分支，而是使用develop分支作为父分支。每次合并都位于develop分支。</p>\n<p>一旦develop分支上有了做一次发布（或者说快到了既定的发布日）的足够功能，就<strong>从develop分支上checkout一个发布分支release</strong>。从这个时间点开始之后新的功能不能再加到这个分支上——这个分支只应该做Bug修复、文档生成和其它面向发布任务。在release工作完成后，合并release分支到master，并加上tag。同时，<strong>release上做的修改要合并会develop分支</strong>。最后删除release分支。</p>\n<p>维护分支或说是热修复（hotfix）分支用于给产品发布版本（production releases）快速生成补丁，这是唯一可以直接从master分支fork出来的分支。修改完成后，修改应该立马合并回master和develop。master也应该为合并生成新的tag。</p>\n<h3 id=\"forking\"><a href=\"#forking\" class=\"headerlink\" title=\"forking\"></a>forking</h3><p>Forking工作流是分布式工作流，可以安全可靠地管理大团队的开发者（developer）和不信任贡献者（contributor）的提交。这种工作流不是使用单个服务端仓库作为『中央』代码基线，而让各个开发者都有一个服务端仓库。这意味着各个代码贡献者有2个Git仓库而不是1个：一个本地私有的，另一个服务端公开的。Forking工作流的一个主要优势是，贡献的代码可以被集成，而不需要所有人都能push代码到仅有的中央仓库中。开发者push到自己的服务端仓库，而只有项目维护者才能push到正式仓库。</p>\n<p>新开发者想要在项目上工作时，不是直接从正式仓库克隆，而是fork正式项目在服务器上创建一个拷贝。这个仓库拷贝作为他个人公开仓库 —— 其它开发者不允许push到这个仓库，<strong>但可以pull下来修改</strong>。要提交本地修改时，push提交到自己公开仓库中 —— 而不是正式仓库中。 然后，给正式仓库发起一个pull request，让项目维护者知道有更新已经准备好可以集成了。为了集成功能到正式代码库，<strong>维护者pull贡献者的变更到自己的本地仓库中</strong>，检查变更以确保不会让项目出错， 合并变更到自己本地的master分支， 然后push master分支到服务器的正式仓库中。到此，贡献的提交成为了项目的一部分，其它的开发者应该执行pull操作与正式仓库同步自己本地仓库。</p>\n<p>具体来说，大致有下面几步：</p>\n<ol>\n<li>开发者fork正式仓库</li>\n<li>开发者clone自己的fork出来的仓库，与之前工作流不一样的是，<strong>Forking工作流需要2个远程别名 —— 一个指向正式仓库，另一个指向开发者自己的服务端仓库。</strong>，像下面这样  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add upstream https://bitbucket.org/maintainer/repo</span><br></pre></td></tr></table></figure></li>\n<li>开发者修改都是私有的，如果项目往前走了，可以用git pull获得新的提交</li>\n<li>开发者准备分享新功能时，需要先push到自己的公开仓库中，然后发起pull request通知项目维护者，集成开发者的功能分支</li>\n<li>项目维护者通过GUI岔开pull request或者pull代码到自己的本地仓库，再手动合并。</li>\n<li>开发者通过<code>pull upstream master</code>的方式拉取项目最新进展</li>\n</ol>\n<h3 id=\"pull-request\"><a href=\"#pull-request\" class=\"headerlink\" title=\"pull request\"></a>pull request</h3><p>pull request用于合并不同分支或不同仓库的代码，并在合并前进行一些讨论和代码微调，在上面不同工作流的情况下具体功能体现也不同。</p>\n<p>上面几种工作流范式只是几种标准的建议，正式的项目版本管理中，可以糅合上面的一些特点。</p>\n",
            "tags": [
                "git",
                "工作流",
                "pull request"
            ]
        }
    ]
}