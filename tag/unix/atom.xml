<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://shenlvmeng.github.com/blog</id>
    <title>Shenlvmeng&#39;s Blog • Posts by &#34;unix&#34; tag</title>
    <link href="http://shenlvmeng.github.com/blog" />
    <updated>2021-01-29T13:45:15.000Z</updated>
    <category term="总结" />
    <category term="制度" />
    <category term="道德" />
    <category term="文官" />
    <category term="万历" />
    <category term="明朝" />
    <category term="读书笔记" />
    <category term="展望" />
    <category term="2018" />
    <category term="2019" />
    <category term="flag" />
    <category term="2020" />
    <category term="2021" />
    <category term="2022" />
    <category term="2023" />
    <category term="面试" />
    <category term="前端" />
    <category term="FAQ" />
    <category term="HTML" />
    <category term="CSS" />
    <category term="style guide" />
    <category term="编程" />
    <category term="范式" />
    <category term="设计" />
    <category term="艺术" />
    <category term="质量" />
    <category term="async_hooks" />
    <category term="cls-hooked" />
    <category term="logId" />
    <category term="录音" />
    <category term="getUserMedia" />
    <category term="AudioContext" />
    <category term="PCM" />
    <category term="WAVE" />
    <category term="二叉搜索树" />
    <category term="算法" />
    <category term="回忆" />
    <category term="老朋友" />
    <category term="C" />
    <category term="Hash" />
    <category term="布隆过滤器" />
    <category term="字符串检索" />
    <category term="canvas" />
    <category term="流程图" />
    <category term="d3" />
    <category term="g6" />
    <category term="zrender" />
    <category term="processOn" />
    <category term="SDN" />
    <category term="cbench" />
    <category term="安装说明" />
    <category term="绘图" />
    <category term="动画" />
    <category term="攻略" />
    <category term="流水账" />
    <category term="成都" />
    <category term="重庆" />
    <category term="武汉" />
    <category term="重构" />
    <category term="代码" />
    <category term="代码风格" />
    <category term="数据可视化" />
    <category term="爬虫" />
    <category term="chrome" />
    <category term="crx" />
    <category term="扩展" />
    <category term="CORS" />
    <category term="跨域" />
    <category term="盒模型" />
    <category term="浮动" />
    <category term="Reactive Programming" />
    <category term="JavaScript" />
    <category term="Cycle.js" />
    <category term="Dart" />
    <category term="最佳实践" />
    <category term="引流" />
    <category term="universal-link" />
    <category term="app-link" />
    <category term="脚手架" />
    <category term="degit" />
    <category term="git" />
    <category term="设计模式" />
    <category term="类" />
    <category term="接口" />
    <category term="抽象类" />
    <category term="DOM" />
    <category term="Docker" />
    <category term="ONOS" />
    <category term="控制器" />
    <category term="虚拟化" />
    <category term="笔记" />
    <category term="UX" />
    <category term="UED" />
    <category term="准则" />
    <category term="Java" />
    <category term="Ruby" />
    <category term="反射" />
    <category term="编程范式" />
    <category term="鸭子类型" />
    <category term="管理" />
    <category term="效率" />
    <category term="知识工作者" />
    <category term="卓有成效" />
    <category term="Elm" />
    <category term="框架" />
    <category term="函数式编程" />
    <category term="虚网映射" />
    <category term="Javascript" />
    <category term="并发" />
    <category term="event loop" />
    <category term="覆盖率" />
    <category term="端到端测试" />
    <category term="istanbul" />
    <category term="istanbuljs" />
    <category term="JavaSript" />
    <category term="Express" />
    <category term="源码" />
    <category term="代码覆盖率" />
    <category term="istanbul-middleware" />
    <category term="代码插桩" />
    <category term="require钩子" />
    <category term="babel-plugin-istanbul" />
    <category term="css" />
    <category term="html5" />
    <category term="flex" />
    <category term="javascript" />
    <category term="roadmap" />
    <category term="闭包" />
    <category term="Haskell" />
    <category term="monad" />
    <category term="后端" />
    <category term="管理后台" />
    <category term="egg.js" />
    <category term="工作流" />
    <category term="pull request" />
    <category term="golang" />
    <category term="语言学习" />
    <category term="黑客与画家" />
    <category term="创业" />
    <category term="骑行" />
    <category term="海南" />
    <category term="图文" />
    <category term="reflow" />
    <category term="repaint" />
    <category term="命名法" />
    <category term="成功学" />
    <category term="自我建设" />
    <category term="HTTP" />
    <category term="HTTP/2" />
    <category term="SPDY" />
    <category term="QUIC" />
    <category term="HTTPS" />
    <category term="状态码" />
    <category term="网络攻击" />
    <category term="介绍" />
    <category term="图片渲染" />
    <category term="html2canvas" />
    <category term="dom-to-image" />
    <category term="electron" />
    <category term="indexedDB" />
    <category term="异步" />
    <category term="Generator" />
    <category term="thunk" />
    <category term="async" />
    <category term="函数表达式" />
    <category term="对象" />
    <category term="继承" />
    <category term="类型转换" />
    <category term="==" />
    <category term="类型判断" />
    <category term="猫" />
    <category term="杀手" />
    <category term="管理学" />
    <category term="领导力" />
    <category term="梯队" />
    <category term="移动端" />
    <category term="UI" />
    <category term="自适应" />
    <category term="rem" />
    <category term="Electron" />
    <category term="GUI" />
    <category term="gpx" />
    <category term="template" />
    <category term="Electron Builder" />
    <category term="PWA" />
    <category term="方法论" />
    <category term="夜话" />
    <category term="多线" />
    <category term="生活" />
    <category term="密码" />
    <category term="密钥" />
    <category term="技改" />
    <category term="Vue" />
    <category term="gulp" />
    <category term="瀑布流" />
    <category term="电影" />
    <category term="PHP" />
    <category term="参考" />
    <category term="思维" />
    <category term="学习能力" />
    <category term="右脑" />
    <category term="经济学" />
    <category term="宏观经济学" />
    <category term="术语" />
    <category term="GDP" />
    <category term="CPI" />
    <category term="储蓄" />
    <category term="投资" />
    <category term="金融市场" />
    <category term="股票" />
    <category term="债券" />
    <category term="美联储" />
    <category term="失业" />
    <category term="货币" />
    <category term="现值" />
    <category term="准备金" />
    <category term="货币中性" />
    <category term="通货膨胀" />
    <category term="汇率" />
    <category term="购买力" />
    <category term="净出口" />
    <category term="资产净流出" />
    <category term="总需求" />
    <category term="总供给" />
    <category term="流动性偏好" />
    <category term="乘数效应" />
    <category term="菲利普斯曲线" />
    <category term="微观经济学" />
    <category term="供求" />
    <category term="贸易" />
    <category term="市场" />
    <category term="税" />
    <category term="剩余" />
    <category term="外部性" />
    <category term="公共物品" />
    <category term="公共资源" />
    <category term="生产成本" />
    <category term="利润" />
    <category term="垄断" />
    <category term="价格歧视" />
    <category term="寡头" />
    <category term="垄断竞争" />
    <category term="生产要素市场" />
    <category term="贫困" />
    <category term="消费者选择理论" />
    <category term="不对称信息" />
    <category term="政治经济学" />
    <category term="行为经济学" />
    <category term="VSCode" />
    <category term="编辑器" />
    <category term="IDE" />
    <category term="hybrid" />
    <category term="JSBridge" />
    <category term="Web Worker" />
    <category term="Service Worker" />
    <category term="习惯" />
    <category term="lint" />
    <category term="editorconfig" />
    <category term="commit message" />
    <category term="量子物理" />
    <category term="史话" />
    <category term="埋点" />
    <category term="raven.js" />
    <category term="前端监控" />
    <category term="文本编辑器" />
    <category term="quill" />
    <category term="结构化数据" />
    <category term="React" />
    <category term="Hooks" />
    <category term="函数组件" />
    <category term="复用" />
    <category term="状态管理" />
    <category term="redux" />
    <category term="MobX" />
    <category term="代码质量" />
    <category term="重来" />
    <category term="requestAnimationFrame" />
    <category term="TypeScript" />
    <category term="路书" />
    <category term="gpx解析" />
    <category term="EXIF" />
    <category term="人类" />
    <category term="生存" />
    <category term="基因" />
    <category term="响应式编程" />
    <category term="RxJS" />
    <category term="成长" />
    <category term="业务" />
    <category term="思想" />
    <category term="程序设计" />
    <category term="心理学" />
    <category term="自我" />
    <category term="社会思维" />
    <category term="社会影响" />
    <category term="文化" />
    <category term="性别" />
    <category term="从众" />
    <category term="说服" />
    <category term="临床诊断" />
    <category term="陪审团" />
    <category term="司法" />
    <category term="物质主义" />
    <category term="健康" />
    <category term="社会关系" />
    <category term="偏见" />
    <category term="攻击行为" />
    <category term="亲密关系" />
    <category term="友谊" />
    <category term="爱情" />
    <category term="利他" />
    <category term="冲突" />
    <category term="和解" />
    <category term="软技能" />
    <category term="理财" />
    <category term="健身" />
    <category term="自我营销" />
    <category term="学习" />
    <category term="商业模式" />
    <category term="产品" />
    <category term="校园网" />
    <category term="互联网" />
    <category term="技术" />
    <category term="web开发" />
    <category term="哲思" />
    <category term="择偶观" />
    <category term="validator" />
    <category term="大文件" />
    <category term="visibilityChange" />
    <category term="IntersectionObserver" />
    <category term="图种" />
    <category term="draggable" />
    <category term="webpack" />
    <category term="z-index" />
    <category term="git submodule" />
    <category term="object-fit" />
    <category term="object-position" />
    <category term="BroadcastChannel" />
    <category term="extract-text-webpack-plugin" />
    <category term="lottie" />
    <category term="backface-visibility" />
    <category term="egret" />
    <category term="mock" />
    <category term="SSO" />
    <category term="autoprefixer" />
    <category term="polyfill" />
    <category term="Android" />
    <category term="ffmpeg" />
    <category term="React Hooks" />
    <category term="rollup" />
    <category term="CDN" />
    <category term="DNS" />
    <category term="CNAME" />
    <category term="架构" />
    <category term="组件" />
    <category term="ssh" />
    <category term="fis-receiver" />
    <category term="tmux" />
    <category term="origami" />
    <category term="promise" />
    <category term="encodeURI" />
    <category term="encodeURIComponent" />
    <category term="axios" />
    <category term="charles" />
    <category term="黑色幽默" />
    <category term="朋友" />
    <category term="梦" />
    <category term="濒死" />
    <category term="江南" />
    <category term="苏州" />
    <category term="无锡" />
    <category term="宜兴" />
    <category term="湖州" />
    <category term="南浔" />
    <category term="游记" />
    <category term="随笔" />
    <category term="群众" />
    <category term="理论" />
    <category term="实效" />
    <category term="测试" />
    <category term="长沙" />
    <category term="杭州" />
    <category term="湖南" />
    <category term="核酸" />
    <category term="美食" />
    <category term="云南" />
    <category term="丽江" />
    <category term="大理" />
    <category term="青岛" />
    <category term="济南" />
    <category term="山东" />
    <category term="西北" />
    <category term="银川" />
    <category term="西宁" />
    <category term="青海湖" />
    <category term="西海镇" />
    <category term="茶卡盐湖" />
    <category term="厦门" />
    <category term="感受" />
    <category term="C语言" />
    <category term="树" />
    <category term="主干开发" />
    <category term="GitFlow" />
    <category term="GithubFlow" />
    <category term="typescript" />
    <category term="类型系统" />
    <category term="webrtc" />
    <category term="RTMP" />
    <category term="首屏时间" />
    <category term="性能优化" />
    <category term="公司" />
    <category term="个人发展" />
    <category term="战略" />
    <category term="晋升" />
    <category term="哲学" />
    <category term="幸福" />
    <category term="人生" />
    <category term="叔本华" />
    <category term="Unix" />
    <category term="Rollup" />
    <category term="mouseout" />
    <category term="mouseleave" />
    <category term="lint-staged" />
    <category term="吸顶" />
    <category term="图片组件" />
    <category term="形式系统" />
    <category term="不完全性" />
    <category term="隐喻" />
    <category term="哥德尔" />
    <category term="巴赫" />
    <category term="埃舍尔" />
    <entry>
        <id>http://shenlvmeng.github.com/blog/2021/01/29/zen-of-unix/</id>
        <title>Unix编程艺术集萃</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2021/01/29/zen-of-unix/"/>
        <content type="html">&lt;p&gt;这本书从Unix的设计理念等各方面讲起，内容充实有趣，尽管介绍细节的部分对于不太了解Unix的人呢来讲有些生涩，但在道的介绍上有不少可取之处。由于某人的出现，生活中多了新的追求，比想象中多用了一些时间看完了它。下面摘取一些其中精华的观点，力图尽量还原书中的本意。&lt;/p&gt;
&lt;h2 id=&#34;Context&#34;&gt;&lt;a href=&#34;#Context&#34; class=&#34;headerlink&#34; title=&#34;Context&#34;&gt;&lt;/a&gt;Context&lt;/h2&gt;&lt;h3 id=&#34;哲学&#34;&gt;&lt;a href=&#34;#哲学&#34; class=&#34;headerlink&#34; title=&#34;哲学&#34;&gt;&lt;/a&gt;哲学&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;每过18个月，就有一半的知识会过时&lt;/li&gt;
&lt;li&gt;X致力提供一套“机制，而不是策略”&lt;/li&gt;
&lt;li&gt;提供机制而不是方针的哲学让Unix长期保鲜&lt;/li&gt;
&lt;li&gt;Unix传统将重点放在尽力使各程序接口相对小巧、简洁、正交&lt;/li&gt;
&lt;li&gt;Unix管道发明人Doug McIlroy曾说过：&lt;ul&gt;
&lt;li&gt;让每个程序就做好一件事&lt;/li&gt;
&lt;li&gt;假定每个程序的输出都会成为另个程序的输入&lt;/li&gt;
&lt;li&gt;尽早将设计和编译的软件投入使用&lt;/li&gt;
&lt;li&gt;优先使用工具而不是拙劣的帮助来减轻编程任务的负担&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Rob Pike曾从不同的角度表述了Unix的哲学&lt;ul&gt;
&lt;li&gt;你无法断定程序会在什么地方好费时间，所以别急于找地方改代码，除非你已经证实那儿就是瓶颈所在&lt;/li&gt;
&lt;li&gt;没对代码估量最耗时的部分前，别去优化速度&lt;/li&gt;
&lt;li&gt;花哨的算法在n很小的时候通常很慢，而n一般很小&lt;/li&gt;
&lt;li&gt;花哨的算法比简单算法更容易出bug、更难实现&lt;/li&gt;
&lt;li&gt;编程的核心是数据结构，而不是算法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;书中对Unix的哲学，总结为下面这些点&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;模块原则&lt;/strong&gt;，使用简洁的接口拼接简单的部件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;清晰原则&lt;/strong&gt;，清晰胜于机巧，程序是写给人看的&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;组合原则&lt;/strong&gt;，设计时要考虑拼接组合&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分离原则&lt;/strong&gt;，策略和机制分离，接口和引擎分离&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;简洁原则&lt;/strong&gt;，设计要简洁，复杂度能低则低&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;吝啬原则&lt;/strong&gt;，除非没有办法，不要写大程序&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;透明性原则&lt;/strong&gt;，设计要有&lt;strong&gt;可见性&lt;/strong&gt;（如输入输出、打点上报），便于审查和调试&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;健壮原则&lt;/strong&gt;，健壮源于透明和简洁&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;表示原则&lt;/strong&gt;，把知识转移到数据中，保证逻辑的简朴而健壮&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;通俗原则&lt;/strong&gt;，即最少惊奇原则，接口设计避免标新立异，缓和学习曲线&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缄默原则&lt;/strong&gt;，设计良好的程序将用户的注意力视为有限的宝贵资源&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;补救原则&lt;/strong&gt;，出现异常时，马上退出并给出错误信息&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;经济原则&lt;/strong&gt;，宁花机器1分，不花程序员1秒&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;生成原则&lt;/strong&gt;，避免手工hack，编写程序去生成程序&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优化原则&lt;/strong&gt;，过早优化会妨碍全局优化，先制作原型，再精雕细琢；先可用，再优化&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多样原则&lt;/strong&gt;，不相信“不二法门”的断言&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;扩展原则&lt;/strong&gt;，未来总比预想来得要快&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unix哲学一言以蔽之，即KISS（Keep It Simple, Stupid!）&lt;/li&gt;
&lt;li&gt;善用他人写好的工具，尽可能将一切自动化&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;历史&#34;&gt;&lt;a href=&#34;#历史&#34; class=&#34;headerlink&#34; title=&#34;历史&#34;&gt;&lt;/a&gt;历史&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;计算机不应仅被视为一种逻辑设备而更应视为社群的立足点&lt;/li&gt;
&lt;li&gt;1985年IEEE支持的POSIX标准表述了BSD和SVR3（System V Release3）调用的交集&lt;/li&gt;
&lt;li&gt;1987年初，GNU C编译器第一版问世&lt;/li&gt;
&lt;li&gt;1995年，Linux找到自己的杀手级应用——开源的web服务器Apache&lt;/li&gt;
&lt;li&gt;过度依赖任何一种技术或者商业模式都是错误的&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Unix哲学和其他哲学的对比&#34;&gt;&lt;a href=&#34;#Unix哲学和其他哲学的对比&#34; class=&#34;headerlink&#34; title=&#34;Unix哲学和其他哲学的对比&#34;&gt;&lt;/a&gt;Unix哲学和其他哲学的对比&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;统一性理念：一切皆文件 &amp;amp; 管道概念&lt;/li&gt;
&lt;li&gt;多任务能力：抢先式多任务&lt;/li&gt;
&lt;li&gt;协作进程：低价的进程生成和简便的进程间通讯&lt;/li&gt;
&lt;li&gt;内部边界：程序员最清楚一切&lt;/li&gt;
&lt;li&gt;文件属性和记录结构：没有文件属性&lt;/li&gt;
&lt;li&gt;减少使用不透明的二进制文件格式&lt;/li&gt;
&lt;li&gt;首选CLI命令行界面&lt;/li&gt;
&lt;li&gt;Unix是程序员写给程序员的&lt;/li&gt;
&lt;li&gt;开发的门槛：轻松编程&lt;/li&gt;
&lt;li&gt;操作系统的比较&lt;ul&gt;
&lt;li&gt;MacOS：MacOS有一个自己的界面方针，非常详细地说明了应用程序GUI的表现形式和行为模式&lt;/li&gt;
&lt;li&gt;Windows NT：有注册表蠕变现象，不过支持了Cygwin，实现了Unix API的兼容&lt;/li&gt;
&lt;li&gt;MVS：一切皆批处理&lt;/li&gt;
&lt;li&gt;Linux：贴近终端用户的愿望使得Linux开发者比专有Unix更注重系统安装的平稳性和软件发布问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Design&#34;&gt;&lt;a href=&#34;#Design&#34; class=&#34;headerlink&#34; title=&#34;Design&#34;&gt;&lt;/a&gt;Design&lt;/h2&gt;&lt;h3 id=&#34;模块性&#34;&gt;&lt;a href=&#34;#模块性&#34; class=&#34;headerlink&#34; title=&#34;模块性&#34;&gt;&lt;/a&gt;模块性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;展开来说就是，要编写复杂软件又不至于一败涂地的唯一方法就是用定义清晰的接口把若干简单模块组合起来&lt;/li&gt;
&lt;li&gt;Unix程序员骨子里的传统是：更加笃信重视模块化、更注重正交性和紧凑性等问题&lt;/li&gt;
&lt;li&gt;封装良好的模块不会过多向外披露自身的细节&lt;/li&gt;
&lt;li&gt;缺陷个数随着模块的代码行数会先减小，随后按代码行数的平方上升&lt;/li&gt;
&lt;li&gt;紧凑性和正交性&lt;ul&gt;
&lt;li&gt;人类短期记忆能够容纳的不连续信息数就是7，加2或减2&lt;/li&gt;
&lt;li&gt;紧凑性：有经验的用户通常不需要操作手册，让人乐于使用，不会在想法和工作间格格不入；紧凑不等于薄弱；一个功能子集，能够满足专家用户80%以上的一般需求&lt;/li&gt;
&lt;li&gt;正交性：任何操作均无副作用，改变每个属性的方法有且仅有一个；重构代码就是改变代码的结构和组织，而不改变其外在行为&lt;/li&gt;
&lt;li&gt;任何一个知识点在系统内都应当有一个&lt;strong&gt;唯一&lt;/strong&gt;、明确、权威的表述（Single Point of Truth, SPOT）&lt;/li&gt;
&lt;li&gt;提高紧凑性的精妙但强大的办法就是围绕“解决一个定义明确的问题”的强核心算法组织设计，避免臆断和捏造。形式化往往能极其明晰地阐述一项任务，与形式法相对的是&lt;strong&gt;试探法&lt;/strong&gt;——凭经验法则得到的解决方案，这种思路的问题是回增生出大量特例和边界情况&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;“限制不仅提倡了经济性，而且某种程度上提倡了设计的优雅”。要达到这种简洁性，尽量不要去想一种语言或操作系统最多能做多少事情，而是尽量去想这种语言或操作系统最少能做的事情——不是带着假想行动&lt;/li&gt;
&lt;li&gt;设计有自顶向下和自底向上两种思路，前者通常先考虑主事件循环，再插入具体事件；后者通常先考虑封装具体任务，再按次序粘合在一起&lt;/li&gt;
&lt;li&gt;出于自我保护，程序员尽量双管齐下——一方面以自顶向下的应用逻辑表达抽象规范，另一方面以函数或库来手机底层的域原语（原子操作）&lt;/li&gt;
&lt;li&gt;实际代码往往是自顶向下和自底向上的综合产物。同一个项目经常同时兼有，这就导致了“胶合层”的出现&lt;/li&gt;
&lt;li&gt;胶合层是个挺讨厌的东西，必须尽可能薄，这一点极为重要。薄胶合层原则可以看做是分离原则的升华。策略（应用逻辑）应该与机制（原子操作集）清晰地分离和解耦。&lt;/li&gt;
&lt;li&gt;“完美之道，不在无可增加，而在无可删减”&lt;/li&gt;
&lt;li&gt;OO语言鼓励“具有厚重的胶合和复杂层次”的体系。当问题域真的很复杂、确实需要大量抽象时，这可能是好事，但如果编程员到头来用复杂的方法来做简单的事情——仅仅是为他们能够这样做，结果便适得其反&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;全局变量意味着代码不能重入&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;“就我个人而言，如果局部变量太多，我倾向于拆分子程序。另一个方法是看代码行是否存在（太多）缩进。我几乎从来不看代码长度。——Ken Thompson”&lt;/li&gt;
&lt;li&gt;如果通过电话向另一个程序员描述说不清楚，API可能就是太复杂，设计太糟糕了。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;文本化&#34;&gt;&lt;a href=&#34;#文本化&#34; class=&#34;headerlink&#34; title=&#34;文本化&#34;&gt;&lt;/a&gt;文本化&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;序列化有时被称为列集（marshaling），其反向操作（载入）过程称为散集（unmarshaling）&lt;/li&gt;
&lt;li&gt;互用性、透明性、可扩展性和经济性都是设计文本格式和应用协议需要考虑的问题&lt;/li&gt;
&lt;li&gt;设计一个文本协议往往可以微系统的未来省不少力气；使用二进制协议的唯一正当理由是：如果要处理&lt;strong&gt;大批量&lt;/strong&gt;的数据集，因而确实关注能否在介质上获得最大位密度，或是关心数据转化时的时间或指令开销。大图像和多媒体数据的格式有时可以算是前者的例子，对延时有严格要求的网络协议有则算作后者的例子&lt;/li&gt;
&lt;li&gt;文本格式的位密度未必一定比二进制格式低多少；设计紧凑二进制格式的思路往往不能够兼顾干净扩展的要求&lt;/li&gt;
&lt;li&gt;数据文件元格式是一套句法和词法约定，已经正式标准化或者通过实践得到充分确定&lt;ul&gt;
&lt;li&gt;DSV：冒号是默认的分隔符&lt;/li&gt;
&lt;li&gt;RFC 822：字段名不得包含空格，通常用横线代替，空格和tab作为当前逻辑行的延续&lt;/li&gt;
&lt;li&gt;XML：需要文档类型定义（如XHTML）和相关应用逻辑赋予其语义。通常可以语法检查就能发现形式问题或数据错误&lt;/li&gt;
&lt;li&gt;Unix文本文件约定&lt;ul&gt;
&lt;li&gt;如果可能，以新行符结束的每一行只存一个记录&lt;/li&gt;
&lt;li&gt;每行建议少于80字符&lt;/li&gt;
&lt;li&gt;用&lt;code&gt;#&lt;/code&gt;开始注释&lt;/li&gt;
&lt;li&gt;支持反斜线&lt;code&gt;\&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;用冒号或连续空白作为字段分隔符&lt;/li&gt;
&lt;li&gt;在节格式中，支持连续行&lt;/li&gt;
&lt;li&gt;要么包含一个版本号，要么将格式设计成相互独立的自描述字节块&lt;/li&gt;
&lt;li&gt;不要只压缩或者二进制编码文件的一部分&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;应用协议设计：如果应用协议是文本式的，那仅凭肉眼就能容易地分析，例：SMTP、POP3、IMAP&lt;/li&gt;
&lt;li&gt;应用协议元格式：应用协议元格式是为了简化网络间事务处理的序列化操作而发展出来的，因为网络带宽要比存储昂贵得多，所以需要重视事务处理的经济性&lt;/li&gt;
&lt;li&gt;目前还没有个制订较完善的元协议非常适合真正的P2P应用，不像客户端-服务器应用——HTTP在这一领域的游刃有余&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;透明性&#34;&gt;&lt;a href=&#34;#透明性&#34; class=&#34;headerlink&#34; title=&#34;透明性&#34;&gt;&lt;/a&gt;透明性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;如果软件系统包含的功是为了帮助人们对软件建立正确的“做什么、怎样做”的心理模型而设计，这个软件系统就是可显的&lt;/li&gt;
&lt;li&gt;用户喜欢UI中的透明性和可显性，是因为这意味着学习曲线比较平缓，而“最小立异原则”就是一个体现&lt;/li&gt;
&lt;li&gt;优雅是力量与简洁的结合。优雅的代码事半功倍；优雅的代码不仅正确，而且&lt;strong&gt;显然&lt;/strong&gt;正确；优雅的代码不仅将算法传达给计算机，同时也把简洁和信心传递给阅读代码的人&lt;/li&gt;
&lt;li&gt;编写透明、可显的系统而节省的精力，将来完全可能就是自己的财富&lt;/li&gt;
&lt;li&gt;用户的注意力是宝贵的，让Unix工具正常运行的最好策略是在大部分时间里沉默&lt;/li&gt;
&lt;li&gt;真正的聪明是找到方法，可以访问部分细节，但是又不让它们太显眼&lt;/li&gt;
&lt;li&gt;为透明性和可显性而设计&lt;ul&gt;
&lt;li&gt;不要在具体操作的代码上叠放太多的抽象层&lt;/li&gt;
&lt;li&gt;透明性和可显性同模块性一样，主要是设计的特性而不是代码的特性&lt;ul&gt;
&lt;li&gt;程序调用层级最大深度是多少？&lt;/li&gt;
&lt;li&gt;代码是否有强大而明显的不变性质&lt;/li&gt;
&lt;li&gt;API的各函数调用是否正交&lt;/li&gt;
&lt;li&gt;程序的数据结构或分类和它们代表的外部实体间，是否有一一映射关系&lt;/li&gt;
&lt;li&gt;有多少魔法数字&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;隐藏&lt;/strong&gt;细节和&lt;strong&gt;无法访问&lt;/strong&gt;细节有着重要区别&lt;/li&gt;
&lt;li&gt;透明的系统更容易实施恢复措施，首先就是更能抵抗bug的破坏&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unix程序员的品性：“宁愿抛弃、重建代码也不远修补蹩脚的代码”&lt;/li&gt;
&lt;li&gt;选择简单的算法&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;多路程序控制&#34;&gt;&lt;a href=&#34;#多路程序控制&#34; class=&#34;headerlink&#34; title=&#34;多路程序控制&#34;&gt;&lt;/a&gt;多路程序控制&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Unix最具特点的程序模块化技法就是将大型程序分解成多个合作进程&lt;/li&gt;
&lt;li&gt;Unix的设计风格强调用定义良好的进程间通信或共享文件来联通小型进程。因此，Unix操作系统提倡把程序分解成更简单的子进程，并专注考虑它们之间的接口&lt;ul&gt;
&lt;li&gt;降低进程生成的开销&lt;/li&gt;
&lt;li&gt;提供方法（shellout、IO重定向、管道、消息传递、套接字）简化进程通信&lt;/li&gt;
&lt;li&gt;提倡使用简单透明的文本数据格式来通信&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;真正的难题不在协议语法而是&lt;strong&gt;协议逻辑&lt;/strong&gt;——协议必须既有充分的表达能力又有防范死锁的能力&lt;/li&gt;
&lt;li&gt;Unix的IPC分类&lt;ul&gt;
&lt;li&gt;最简单的形式：调用另一个程序来完成任务；专门程序通常借由文件系统和父进程通信&lt;/li&gt;
&lt;li&gt;管道、重定向和过滤器：过滤器即从标准输入顺序读数据，然后向标准输出写数据；管道操作把程序的标准输出连接到另一个程序的标准输入&lt;/li&gt;
&lt;li&gt;包装器：包装器或者将调用程序专用化，或者为它创建新的接口&lt;/li&gt;
&lt;li&gt;从进程：子程序通过连接到标准输入和标准输出的管道，交互地和调用程序收发数据&lt;/li&gt;
&lt;li&gt;对等进程通信：需要对等的通道&lt;ul&gt;
&lt;li&gt;临时文件：最古老的的IPC技法，灵活但有风险&lt;/li&gt;
&lt;li&gt;信号：每个信号都对机收进程产生默认作用，进程可以声明&lt;strong&gt;信号处理程序&lt;/strong&gt;，让信号处理程序覆盖信号的默认行为&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SIGHUP&lt;/code&gt;，重新初始化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SIGTERM&lt;/code&gt;，温和的终止&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SIGKILL&lt;/code&gt;，立即杀死进程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;套接字：套接字类似文件描述符，创建时可以指定&lt;strong&gt;协议族&lt;/strong&gt;来告诉网络层如何解释套接字名称&lt;/li&gt;
&lt;li&gt;共享内存：共享内存通常依靠&lt;code&gt;mmap&lt;/code&gt;，把文件映射成可以被多个进程共享的内存&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;微型语言&#34;&gt;&lt;a href=&#34;#微型语言&#34; class=&#34;headerlink&#34; title=&#34;微型语言&#34;&gt;&lt;/a&gt;微型语言&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;程序员每百行代码出错率和所使用的编程语言在很大程度上无关&lt;/li&gt;
&lt;li&gt;有两个好方法和一个坏方法做好微型语言的设计&lt;ul&gt;
&lt;li&gt;预先认识到可以使用微型语言设计把变成问题的规格说明提升一个层次&lt;/li&gt;
&lt;li&gt;注意到规格说明文件格式越来越像微型语言——规格中蕴含着行为&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;错误&lt;/strong&gt;的方法是通过扩展变成微型语言&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;微型语言的范畴从声明性发展到命令性，从而逐渐具有通用性，当他们明确为完备图灵机时，它们就是解释器&lt;/li&gt;
&lt;li&gt;样例&lt;ul&gt;
&lt;li&gt;SNG，PNG的纯文本表达&lt;/li&gt;
&lt;li&gt;正则表达式&lt;/li&gt;
&lt;li&gt;Glade，描述GUI界面的XML文件&lt;/li&gt;
&lt;li&gt;m4，一套宏指令集，规定文本串扩展成其他文本串的方式&lt;/li&gt;
&lt;li&gt;XSLT，描述XML数据的变换&lt;/li&gt;
&lt;li&gt;awk，将文本输入变换成文本输出&lt;/li&gt;
&lt;li&gt;PostScript，向成像设备描述排班文本和图片的微型语言&lt;/li&gt;
&lt;li&gt;bc、dc，任意精度计算&lt;/li&gt;
&lt;li&gt;Emacs Lisp&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;设计微型语言&lt;ul&gt;
&lt;li&gt;控制复杂度，声明性微型语言应该具有一个明确、一直、类自然语言的语法被人类所阅读&lt;/li&gt;
&lt;li&gt;扩展和嵌入脚本语言，实现命令性语言&lt;/li&gt;
&lt;li&gt;编写自定义语法&lt;/li&gt;
&lt;li&gt;慎用宏&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;生成&#34;&gt;&lt;a href=&#34;#生成&#34; class=&#34;headerlink&#34; title=&#34;生成&#34;&gt;&lt;/a&gt;生成&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;人类其实更善于肉眼观察数据而不是推导控制流程&lt;/li&gt;
&lt;li&gt;数据比程序逻辑更易驾驭&lt;/li&gt;
&lt;li&gt;数据驱动编程：把代码和代码作用的数据结构分清楚，始终把问题层次往上推，尽量把程序逻辑转移到数据中&lt;/li&gt;
&lt;li&gt;专用代码的生成：尽可能少干活，让数据塑造代码，依靠工具，分离机制和策略&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;配置&#34;&gt;&lt;a href=&#34;#配置&#34; class=&#34;headerlink&#34; title=&#34;配置&#34;&gt;&lt;/a&gt;配置&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;无论何时想增加配置选项，最好考虑下下面的问题&lt;ul&gt;
&lt;li&gt;能省掉这个功能么&lt;/li&gt;
&lt;li&gt;能否有无伤大雅的方式改变程序常规行为&lt;/li&gt;
&lt;li&gt;选项是否过于花哨&lt;/li&gt;
&lt;li&gt;需不需要一个独立的额外程序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unix的程序配置信息一般在以下5个位置&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/etc&lt;/code&gt;下的运行控制文件&lt;/li&gt;
&lt;li&gt;系统设置的环境变量&lt;/li&gt;
&lt;li&gt;用户主目录下的运行控制文件（通常用&lt;code&gt;.&lt;/code&gt;开头）&lt;/li&gt;
&lt;li&gt;用户设置的环境变量&lt;/li&gt;
&lt;li&gt;启动程序命令行参数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可执行未见后面加&lt;code&gt;rc&lt;/code&gt;表示“运行控制”（命名来自CTSS的runcom命令脚本功能）&lt;/li&gt;
&lt;li&gt;一些最为常见的系统环境变量：&lt;code&gt;USER&lt;/code&gt;，&lt;code&gt;LOGNAME&lt;/code&gt;，&lt;code&gt;HOME&lt;/code&gt;，&lt;code&gt;LINES&lt;/code&gt;，&lt;code&gt;SHELL&lt;/code&gt;，&lt;code&gt;PATH&lt;/code&gt;等&lt;/li&gt;
&lt;li&gt;常见的从&lt;code&gt;-a&lt;/code&gt;到&lt;code&gt;-z&lt;/code&gt;的命令行选项的可能含义&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-a&lt;/code&gt;，所有、添加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-b&lt;/code&gt;，缓冲区、批处理&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-c&lt;/code&gt;，命令、检查&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-d&lt;/code&gt;，调试、删除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-D&lt;/code&gt;，定义&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-e&lt;/code&gt;，执行、编辑&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-f&lt;/code&gt;，文件、强制执行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-g&lt;/code&gt;，全局&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-h&lt;/code&gt;，头部、帮助&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-i&lt;/code&gt;，初始化、交互式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-k&lt;/code&gt;，保留、杀死&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-l&lt;/code&gt;，列表、登录、加载&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-m&lt;/code&gt;，消息、邮件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-n&lt;/code&gt;，数字、否&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-o&lt;/code&gt;，输出&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-p&lt;/code&gt;，端口&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-q&lt;/code&gt;，安静&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-r&lt;/code&gt;，递归&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-s&lt;/code&gt;，缄默，大小&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-t&lt;/code&gt;，标记&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-u&lt;/code&gt;，用户&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-v&lt;/code&gt;，冗长&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-V&lt;/code&gt;，版本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-w&lt;/code&gt;，宽度&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-y&lt;/code&gt;，是&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-z&lt;/code&gt;，启用压缩&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;接口设计&#34;&gt;&lt;a href=&#34;#接口设计&#34; class=&#34;headerlink&#34; title=&#34;接口设计&#34;&gt;&lt;/a&gt;接口设计&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;从最小立异原则出发，启动后程序通常从下列来源获得输入或命令&lt;ul&gt;
&lt;li&gt;程序标准输入端的数据和命令&lt;/li&gt;
&lt;li&gt;通过IPC的输入&lt;/li&gt;
&lt;li&gt;已知位置的文件和设备&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最小立异原则不应被理解为在设计中号召机械的保守主义，新颖性提高了用户与接口最初几次的交互成本，但是糟糕的设计永远使接口令人痛苦而多余&lt;/li&gt;
&lt;li&gt;“我们提倡以共生和委派策略来提高代码的复用并降低软件复杂度”&lt;/li&gt;
&lt;li&gt;最小立异原则目的就是为了减少用户在使用接口时必须学习的复杂过程&lt;/li&gt;
&lt;li&gt;Unix接口设计历史：CLI &amp;#x3D;&amp;gt; X&lt;/li&gt;
&lt;li&gt;接口的5种度量标准：&lt;strong&gt;简洁、表现力、易用、透明和脚本化能力&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;简洁：事务处理需要的时间和复杂度需要有上限&lt;/li&gt;
&lt;li&gt;表现力：接口可以触发广泛的行为&lt;/li&gt;
&lt;li&gt;易用性：接口要求用户记忆的东西较少&lt;/li&gt;
&lt;li&gt;透明度：用户使用接口时，几乎不用记忆什么问题、数据或者程序状态&lt;/li&gt;
&lt;li&gt;脚本能力：容易被其他程序使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CLI和可视化接口的对比&lt;ul&gt;
&lt;li&gt;CLI更具表达力、脚本化能力、简洁性，适用于举例：SQL&lt;/li&gt;
&lt;li&gt;可视化接口透明度、易用性较好，适用性举例：画图、网页浏览器&lt;/li&gt;
&lt;li&gt;随着用户越来越熟练，对CLI接口的抵触也越少&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unix接口设计模式&lt;ul&gt;
&lt;li&gt;过滤器：接受输入，转换成其他格式，再输出到标准输出端；宽进严出、不丢弃不需要的信息、不增加无用数据&lt;/li&gt;
&lt;li&gt;cantrip（没有输入输出）、源模式（无输入且输出在启动条件中控制）、接收器模式（接收输入但不发送东西到输出）、编译器模式（无标准输入输出，但会发送信息到标准错误端）&lt;/li&gt;
&lt;li&gt;ed模式（编辑器模式）&lt;/li&gt;
&lt;li&gt;roguelike模式（来自BSD的地牢探险游戏rogue，用字符阵列显示界面UI），如vi、emacs，没有鼠标参与，适合指法熟练的人&lt;/li&gt;
&lt;li&gt;引擎和接口分离，又或者模型和视图分离，了解MVC模式的人自然了解&lt;ul&gt;
&lt;li&gt;配置者、执行者&lt;/li&gt;
&lt;li&gt;假脱机、守护进程&lt;/li&gt;
&lt;li&gt;驱动、引擎&lt;/li&gt;
&lt;li&gt;客户端、服务端&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;基于语言的接口模式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;浏览器作为通用前端&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;如果程序没有什么有趣的或者惊奇的东西要说就应该闭嘴&lt;/strong&gt;（有点意思）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;优化&#34;&gt;&lt;a href=&#34;#优化&#34; class=&#34;headerlink&#34; title=&#34;优化&#34;&gt;&lt;/a&gt;优化&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Unix的经验告诉我们最主要的就是如何知道何时不去优化&lt;/li&gt;
&lt;li&gt;最强大的优化技术就是&lt;strong&gt;不去优化&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;先估量，后优化，直觉是糟糕的向导&lt;/li&gt;
&lt;li&gt;最有效的代码优化方法是保持代码短小简单&lt;/li&gt;
&lt;li&gt;核心数据结构必须留在最快的缓存&lt;/li&gt;
&lt;li&gt;吞吐量和延迟时间的权衡是普遍现象，例TCP、UDP&lt;/li&gt;
&lt;li&gt;对于减少延迟来说，阻塞或等待中间结果都是致命的&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;按需计算&lt;/strong&gt;出昂贵的结果，再&lt;strong&gt;缓存&lt;/strong&gt;起来之后使用，可以兼得&lt;strong&gt;低延迟&lt;/strong&gt;和&lt;strong&gt;高吞吐&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;复杂度&#34;&gt;&lt;a href=&#34;#复杂度&#34; class=&#34;headerlink&#34; title=&#34;复杂度&#34;&gt;&lt;/a&gt;复杂度&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;简单即美即雅即善，而复杂即丑即怪即恶&lt;/li&gt;
&lt;li&gt;程序员为了理解一个程序，会建立思维模型并调试之；程序的复杂度即模型建立和程序调试的困难程度&lt;/li&gt;
&lt;li&gt;Unix思想的一个主题就是&lt;strong&gt;工具小巧锐利，设计从零开始，接口简单一致&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;偶然复杂度&lt;/strong&gt;的产生是因为没有找到实现规定功能集合的最简方法，可以通过良好设计去除；&lt;strong&gt;选择复杂度&lt;/strong&gt;和期望的功能相关联，只能通过修改工程目标解决&lt;/li&gt;
&lt;li&gt;计算资源以及人类的思考，同财富一样，不是靠储藏而是靠消费来证明价值的&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;选择需要管理的上下文环境，并且按照边界所允许的最小化方式构建程序&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Implementation&#34;&gt;&lt;a href=&#34;#Implementation&#34; class=&#34;headerlink&#34; title=&#34;Implementation&#34;&gt;&lt;/a&gt;Implementation&lt;/h2&gt;&lt;h3 id=&#34;语言&#34;&gt;&lt;a href=&#34;#语言&#34; class=&#34;headerlink&#34; title=&#34;语言&#34;&gt;&lt;/a&gt;语言&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;C和C++以增加实现时间和（特别是）调试时间为代价来优化效率&lt;/li&gt;
&lt;li&gt;C的内存管理是复杂性和错误的渊薮&lt;/li&gt;
&lt;li&gt;C语言最佳之处是资源效率和接近机器语言，糟糕的地方是槟城简直是资源管理的炼狱&lt;/li&gt;
&lt;li&gt;C++试图满足所有人的所有要求&lt;/li&gt;
&lt;li&gt;Perl是增强版的shell，它为替代&lt;code&gt;awk&lt;/code&gt;而设计，适合大量使用正则表达式的地方&lt;/li&gt;
&lt;li&gt;Java的设计目标是“write once, run anywhere”，但它并没有实现这两个最初的设计目标&lt;/li&gt;
&lt;li&gt;Java对小项目是大材小用&lt;/li&gt;
&lt;li&gt;Emacs Lisp传统上只用于为Emacs编辑器编写本身的控制程序&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;重用&#34;&gt;&lt;a href=&#34;#重用&#34; class=&#34;headerlink&#34; title=&#34;重用&#34;&gt;&lt;/a&gt;重用&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;重新发明轮子之所以糟糕不仅因为浪费时间，还因为它浪费的时间往往是平方级&lt;/li&gt;
&lt;li&gt;避免重新发明轮子的有效方法就是借用别人的设计和实现，即重用代码&lt;/li&gt;
&lt;li&gt;文档并不能传达代码具现的所有细微差别之处&lt;/li&gt;
&lt;li&gt;开放源码和代码重用的关系，许多地方很像浪漫爱情和有性生殖的关系&lt;/li&gt;
&lt;li&gt;设计最好的实践需要情感的投入；软件开发者，同其他任何类型的工匠和技师一样；他们想要成为艺术家，这并不是什么私密。他们有艺术家的动力和需求，也拥有听众的欲望&lt;/li&gt;
&lt;li&gt;开放源码是从意识形态上解决这些所有问题的优先方法&lt;/li&gt;
&lt;li&gt;发布不够格软件的作者会承受许多的社会压力来修正或撤回代码（不一定）&lt;/li&gt;
&lt;li&gt;阅读代码是为未来而投资&lt;/li&gt;
&lt;li&gt;&lt;h2 id=&#34;许可证-许可证能够授权代码以某种形式使用，否则在版权法之下是禁止或者需要付费的-非商业使用的许可证并不等同于开源许可证&#34;&gt;&lt;a href=&#34;#许可证-许可证能够授权代码以某种形式使用，否则在版权法之下是禁止或者需要付费的-非商业使用的许可证并不等同于开源许可证&#34; class=&#34;headerlink&#34; title=&#34;许可证- 许可证能够授权代码以某种形式使用，否则在版权法之下是禁止或者需要付费的- 非商业使用的许可证并不等同于开源许可证&#34;&gt;&lt;/a&gt;许可证&lt;br&gt;- 许可证能够授权代码以某种形式使用，否则在版权法之下是禁止或者需要付费的&lt;br&gt;- 非商业使用的许可证并不等同于开源许可证&lt;/h2&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Community&#34;&gt;&lt;a href=&#34;#Community&#34; class=&#34;headerlink&#34; title=&#34;Community&#34;&gt;&lt;/a&gt;Community&lt;/h2&gt;&lt;h3 id=&#34;可移植性&#34;&gt;&lt;a href=&#34;#可移植性&#34; class=&#34;headerlink&#34; title=&#34;可移植性&#34;&gt;&lt;/a&gt;可移植性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;C语言基于早期Ken Thompson的B语言解析器，脱胎于BCPL（Basic Common Programming Language），因此这个C代表Common（通用）&lt;/li&gt;
&lt;li&gt;在IETF传统中，标准必须来自于一个可用原型实现的经验；不幸的是，这并不是标准通常发展的方式&lt;/li&gt;
&lt;li&gt;搞笑RFC大概是唯一能够立即成为RFC的提议，比如RFC 1149（IP数据报的信鸽传递），RFC 2324（超文本咖啡壶控制协议）&lt;/li&gt;
&lt;li&gt;对于具备提倡标准资格的RFC，其规格必须稳定，经过同行评审，并且已经吸引了互联网社区的极大兴趣&lt;/li&gt;
&lt;li&gt;IETF标准化过程有意提倡由实践而非理论驱动的标准化过程&lt;/li&gt;
&lt;li&gt;国际化的首要动作：&lt;strong&gt;分离信息库（配置）和代码&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;“暗含的意思就是，成为标准的最好方法就是发布一个高质量的开源实现” —— Henry Spencer&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;文档&#34;&gt;&lt;a href=&#34;#文档&#34; class=&#34;headerlink&#34; title=&#34;文档&#34;&gt;&lt;/a&gt;文档&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;“一切皆HTML，所有引用都是URL”&lt;/li&gt;
&lt;li&gt;绝大多数软件的文档都是由技术人员写给可能连最小公分母都不知道的普通大众的——渊博者写给无知者&lt;/li&gt;
&lt;li&gt;编写Unix文档的最佳实践&lt;ul&gt;
&lt;li&gt;数量多不会被认为是质量高&lt;/li&gt;
&lt;li&gt;信息密度适中，少用屏幕截图&lt;/li&gt;
&lt;li&gt;没人喜欢庞大的文档，考虑提供快速的摘要&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;开放源码&#34;&gt;&lt;a href=&#34;#开放源码&#34; class=&#34;headerlink&#34; title=&#34;开放源码&#34;&gt;&lt;/a&gt;开放源码&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;开源开发的规则&lt;ul&gt;
&lt;li&gt;源码公开&lt;/li&gt;
&lt;li&gt;尽早发布，经常发布&lt;/li&gt;
&lt;li&gt;给贡献以表扬&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;major.minor.patch&lt;/code&gt;，补丁号修正错误和次要功能；次版本号为兼容的新功能；主版本号为不兼容的更改&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;发布前对文档和README进行拼写检查&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;基于所需功能而不是平台来编写移植层（面向接口编程）&lt;ul&gt;
&lt;li&gt;“&lt;code&gt;#ifdef&lt;/code&gt;和&lt;code&gt;#if&lt;/code&gt;是最后一招，这通常是思路不当、产品过度差异化，无理由‘优化’或是无用垃圾聚集的先兆” —— Doug Mcllroy&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;选择一个编码规范（lint）&lt;/li&gt;
&lt;li&gt;常见的标准文件命名规范&lt;ul&gt;
&lt;li&gt;README&lt;/li&gt;
&lt;li&gt;INSTALL&lt;/li&gt;
&lt;li&gt;AUTHORS&lt;/li&gt;
&lt;li&gt;NEWS&lt;/li&gt;
&lt;li&gt;HISTORY&lt;/li&gt;
&lt;li&gt;CHANGES&lt;/li&gt;
&lt;li&gt;COPYING 项目许可证条款&lt;/li&gt;
&lt;li&gt;LICENSE&lt;/li&gt;
&lt;li&gt;FAQ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;以版本号来命名目录，考虑多版本在同一系统共存&lt;/li&gt;
&lt;li&gt;在设计讨论中更广泛的参与常常是件好事，但是如果列表相对开放，迟早就会有些用户在其上询问一些初级问题&lt;/li&gt;
&lt;li&gt;开源许可证&lt;ul&gt;
&lt;li&gt;MIT：授予无限权利的拷贝、使用、修改和对修改的再发布，只要在所有修改版本中保留版权和许可证条款&lt;/li&gt;
&lt;li&gt;BSD：授予无限权利的拷贝、使用、修改和对修改的再发布，只要在所有修改版本中保留版权和许可证条款；同时在广告和软件包相关文档中包含致谢&lt;/li&gt;
&lt;li&gt;Artistic：授予无限权利的拷贝、使用和本地修改的权利。允许在发行修改后的二进制版本，但是限制源码再发行&lt;/li&gt;
&lt;li&gt;GPL、Mozilla&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;未来&#34;&gt;&lt;a href=&#34;#未来&#34; class=&#34;headerlink&#34; title=&#34;未来&#34;&gt;&lt;/a&gt;未来&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;分离机制（配置）与策略（算法）成为一个明确准则&lt;/li&gt;
&lt;li&gt;Unix文件仅仅是个字节大袋子，而没有其他文件属性&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;开放源码将软件业转变为服务业&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;–END–&lt;/em&gt;&lt;/p&gt;
</content>
        <category term="设计模式" />
        <category term="Unix" />
        <updated>2021-01-29T13:45:15.000Z</updated>
    </entry>
</feed>
