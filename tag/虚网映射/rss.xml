<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Shenlvmeng&#39;s Blog • Posts by &#34;虚网映射&#34; tag</title>
        <link>http://shenlvmeng.github.com/blog</link>
        <description>Be sharp, my friend.</description>
        <language>zh-CN</language>
        <pubDate>Sat, 27 Feb 2016 21:51:39 +0800</pubDate>
        <lastBuildDate>Sat, 27 Feb 2016 21:51:39 +0800</lastBuildDate>
        <category>总结</category>
        <category>制度</category>
        <category>道德</category>
        <category>文官</category>
        <category>万历</category>
        <category>明朝</category>
        <category>读书笔记</category>
        <category>展望</category>
        <category>2018</category>
        <category>2019</category>
        <category>flag</category>
        <category>2020</category>
        <category>2021</category>
        <category>2022</category>
        <category>2023</category>
        <category>面试</category>
        <category>前端</category>
        <category>FAQ</category>
        <category>HTML</category>
        <category>CSS</category>
        <category>style guide</category>
        <category>编程</category>
        <category>范式</category>
        <category>设计</category>
        <category>艺术</category>
        <category>质量</category>
        <category>async_hooks</category>
        <category>cls-hooked</category>
        <category>logId</category>
        <category>录音</category>
        <category>getUserMedia</category>
        <category>AudioContext</category>
        <category>PCM</category>
        <category>WAVE</category>
        <category>二叉搜索树</category>
        <category>算法</category>
        <category>回忆</category>
        <category>老朋友</category>
        <category>C</category>
        <category>Hash</category>
        <category>布隆过滤器</category>
        <category>字符串检索</category>
        <category>canvas</category>
        <category>流程图</category>
        <category>d3</category>
        <category>g6</category>
        <category>zrender</category>
        <category>processOn</category>
        <category>SDN</category>
        <category>cbench</category>
        <category>安装说明</category>
        <category>绘图</category>
        <category>动画</category>
        <category>攻略</category>
        <category>流水账</category>
        <category>成都</category>
        <category>重庆</category>
        <category>武汉</category>
        <category>重构</category>
        <category>代码</category>
        <category>代码风格</category>
        <category>数据可视化</category>
        <category>爬虫</category>
        <category>chrome</category>
        <category>crx</category>
        <category>扩展</category>
        <category>CORS</category>
        <category>跨域</category>
        <category>盒模型</category>
        <category>浮动</category>
        <category>Reactive Programming</category>
        <category>JavaScript</category>
        <category>Cycle.js</category>
        <category>Dart</category>
        <category>最佳实践</category>
        <category>引流</category>
        <category>universal-link</category>
        <category>app-link</category>
        <category>脚手架</category>
        <category>degit</category>
        <category>git</category>
        <category>设计模式</category>
        <category>类</category>
        <category>接口</category>
        <category>抽象类</category>
        <category>DOM</category>
        <category>Docker</category>
        <category>ONOS</category>
        <category>控制器</category>
        <category>虚拟化</category>
        <category>笔记</category>
        <category>UX</category>
        <category>UED</category>
        <category>准则</category>
        <category>Java</category>
        <category>Ruby</category>
        <category>反射</category>
        <category>编程范式</category>
        <category>鸭子类型</category>
        <category>管理</category>
        <category>效率</category>
        <category>知识工作者</category>
        <category>卓有成效</category>
        <category>Elm</category>
        <category>框架</category>
        <category>函数式编程</category>
        <category>虚网映射</category>
        <category>Javascript</category>
        <category>并发</category>
        <category>event loop</category>
        <category>覆盖率</category>
        <category>端到端测试</category>
        <category>istanbul</category>
        <category>istanbuljs</category>
        <category>JavaSript</category>
        <category>Express</category>
        <category>源码</category>
        <category>代码覆盖率</category>
        <category>istanbul-middleware</category>
        <category>代码插桩</category>
        <category>require钩子</category>
        <category>babel-plugin-istanbul</category>
        <category>css</category>
        <category>html5</category>
        <category>flex</category>
        <category>javascript</category>
        <category>roadmap</category>
        <category>闭包</category>
        <category>Haskell</category>
        <category>monad</category>
        <category>后端</category>
        <category>管理后台</category>
        <category>egg.js</category>
        <category>工作流</category>
        <category>pull request</category>
        <category>golang</category>
        <category>语言学习</category>
        <category>黑客与画家</category>
        <category>创业</category>
        <category>骑行</category>
        <category>海南</category>
        <category>图文</category>
        <category>reflow</category>
        <category>repaint</category>
        <category>命名法</category>
        <category>成功学</category>
        <category>自我建设</category>
        <category>HTTP</category>
        <category>HTTP/2</category>
        <category>SPDY</category>
        <category>QUIC</category>
        <category>HTTPS</category>
        <category>状态码</category>
        <category>网络攻击</category>
        <category>介绍</category>
        <category>图片渲染</category>
        <category>html2canvas</category>
        <category>dom-to-image</category>
        <category>electron</category>
        <category>indexedDB</category>
        <category>异步</category>
        <category>Generator</category>
        <category>thunk</category>
        <category>async</category>
        <category>函数表达式</category>
        <category>对象</category>
        <category>继承</category>
        <category>类型转换</category>
        <category>==</category>
        <category>类型判断</category>
        <category>猫</category>
        <category>杀手</category>
        <category>管理学</category>
        <category>领导力</category>
        <category>梯队</category>
        <category>移动端</category>
        <category>UI</category>
        <category>自适应</category>
        <category>rem</category>
        <category>Electron</category>
        <category>GUI</category>
        <category>gpx</category>
        <category>template</category>
        <category>Electron Builder</category>
        <category>PWA</category>
        <category>方法论</category>
        <category>夜话</category>
        <category>多线</category>
        <category>生活</category>
        <category>密码</category>
        <category>密钥</category>
        <category>技改</category>
        <category>Vue</category>
        <category>gulp</category>
        <category>瀑布流</category>
        <category>电影</category>
        <category>PHP</category>
        <category>参考</category>
        <category>思维</category>
        <category>学习能力</category>
        <category>右脑</category>
        <category>经济学</category>
        <category>宏观经济学</category>
        <category>术语</category>
        <category>GDP</category>
        <category>CPI</category>
        <category>储蓄</category>
        <category>投资</category>
        <category>金融市场</category>
        <category>股票</category>
        <category>债券</category>
        <category>美联储</category>
        <category>失业</category>
        <category>货币</category>
        <category>现值</category>
        <category>准备金</category>
        <category>货币中性</category>
        <category>通货膨胀</category>
        <category>汇率</category>
        <category>购买力</category>
        <category>净出口</category>
        <category>资产净流出</category>
        <category>总需求</category>
        <category>总供给</category>
        <category>流动性偏好</category>
        <category>乘数效应</category>
        <category>菲利普斯曲线</category>
        <category>微观经济学</category>
        <category>供求</category>
        <category>贸易</category>
        <category>市场</category>
        <category>税</category>
        <category>剩余</category>
        <category>外部性</category>
        <category>公共物品</category>
        <category>公共资源</category>
        <category>生产成本</category>
        <category>利润</category>
        <category>垄断</category>
        <category>价格歧视</category>
        <category>寡头</category>
        <category>垄断竞争</category>
        <category>生产要素市场</category>
        <category>贫困</category>
        <category>消费者选择理论</category>
        <category>不对称信息</category>
        <category>政治经济学</category>
        <category>行为经济学</category>
        <category>VSCode</category>
        <category>编辑器</category>
        <category>IDE</category>
        <category>hybrid</category>
        <category>JSBridge</category>
        <category>Web Worker</category>
        <category>Service Worker</category>
        <category>习惯</category>
        <category>lint</category>
        <category>editorconfig</category>
        <category>commit message</category>
        <category>量子物理</category>
        <category>史话</category>
        <category>埋点</category>
        <category>raven.js</category>
        <category>前端监控</category>
        <category>文本编辑器</category>
        <category>quill</category>
        <category>结构化数据</category>
        <category>React</category>
        <category>Hooks</category>
        <category>函数组件</category>
        <category>复用</category>
        <category>状态管理</category>
        <category>redux</category>
        <category>MobX</category>
        <category>代码质量</category>
        <category>重来</category>
        <category>requestAnimationFrame</category>
        <category>TypeScript</category>
        <category>路书</category>
        <category>gpx解析</category>
        <category>EXIF</category>
        <category>人类</category>
        <category>生存</category>
        <category>基因</category>
        <category>响应式编程</category>
        <category>RxJS</category>
        <category>成长</category>
        <category>业务</category>
        <category>思想</category>
        <category>程序设计</category>
        <category>心理学</category>
        <category>自我</category>
        <category>社会思维</category>
        <category>社会影响</category>
        <category>文化</category>
        <category>性别</category>
        <category>从众</category>
        <category>说服</category>
        <category>临床诊断</category>
        <category>陪审团</category>
        <category>司法</category>
        <category>物质主义</category>
        <category>健康</category>
        <category>社会关系</category>
        <category>偏见</category>
        <category>攻击行为</category>
        <category>亲密关系</category>
        <category>友谊</category>
        <category>爱情</category>
        <category>利他</category>
        <category>冲突</category>
        <category>和解</category>
        <category>软技能</category>
        <category>理财</category>
        <category>健身</category>
        <category>自我营销</category>
        <category>学习</category>
        <category>商业模式</category>
        <category>产品</category>
        <category>校园网</category>
        <category>互联网</category>
        <category>技术</category>
        <category>web开发</category>
        <category>哲思</category>
        <category>择偶观</category>
        <category>validator</category>
        <category>大文件</category>
        <category>visibilityChange</category>
        <category>IntersectionObserver</category>
        <category>图种</category>
        <category>draggable</category>
        <category>webpack</category>
        <category>z-index</category>
        <category>git submodule</category>
        <category>object-fit</category>
        <category>object-position</category>
        <category>BroadcastChannel</category>
        <category>extract-text-webpack-plugin</category>
        <category>lottie</category>
        <category>backface-visibility</category>
        <category>egret</category>
        <category>mock</category>
        <category>SSO</category>
        <category>autoprefixer</category>
        <category>polyfill</category>
        <category>Android</category>
        <category>ffmpeg</category>
        <category>React Hooks</category>
        <category>rollup</category>
        <category>CDN</category>
        <category>DNS</category>
        <category>CNAME</category>
        <category>架构</category>
        <category>组件</category>
        <category>ssh</category>
        <category>fis-receiver</category>
        <category>tmux</category>
        <category>origami</category>
        <category>promise</category>
        <category>encodeURI</category>
        <category>encodeURIComponent</category>
        <category>axios</category>
        <category>charles</category>
        <category>黑色幽默</category>
        <category>朋友</category>
        <category>梦</category>
        <category>濒死</category>
        <category>江南</category>
        <category>苏州</category>
        <category>无锡</category>
        <category>宜兴</category>
        <category>湖州</category>
        <category>南浔</category>
        <category>游记</category>
        <category>随笔</category>
        <category>群众</category>
        <category>理论</category>
        <category>实效</category>
        <category>测试</category>
        <category>长沙</category>
        <category>杭州</category>
        <category>湖南</category>
        <category>核酸</category>
        <category>美食</category>
        <category>云南</category>
        <category>丽江</category>
        <category>大理</category>
        <category>青岛</category>
        <category>济南</category>
        <category>山东</category>
        <category>西北</category>
        <category>银川</category>
        <category>西宁</category>
        <category>青海湖</category>
        <category>西海镇</category>
        <category>茶卡盐湖</category>
        <category>厦门</category>
        <category>感受</category>
        <category>C语言</category>
        <category>树</category>
        <category>主干开发</category>
        <category>GitFlow</category>
        <category>GithubFlow</category>
        <category>typescript</category>
        <category>类型系统</category>
        <category>webrtc</category>
        <category>RTMP</category>
        <category>首屏时间</category>
        <category>性能优化</category>
        <category>公司</category>
        <category>个人发展</category>
        <category>战略</category>
        <category>晋升</category>
        <category>哲学</category>
        <category>幸福</category>
        <category>人生</category>
        <category>叔本华</category>
        <category>Unix</category>
        <category>Rollup</category>
        <category>mouseout</category>
        <category>mouseleave</category>
        <category>lint-staged</category>
        <category>吸顶</category>
        <category>图片组件</category>
        <category>形式系统</category>
        <category>不完全性</category>
        <category>隐喻</category>
        <category>哥德尔</category>
        <category>巴赫</category>
        <category>埃舍尔</category>
        <category>济州</category>
        <category>西归浦</category>
        <category>城山</category>
        <category>咸德</category>
        <category>人工智能</category>
        <category>心智</category>
        <category>自指</category>
        <category>图灵</category>
        <category>马列主义</category>
        <category>恩格斯</category>
        <category>家庭</category>
        <category>国家</category>
        <category>阶级</category>
        <category>氏族</category>
        <category>哲学史</category>
        <category>孔子</category>
        <category>老子</category>
        <category>儒家</category>
        <category>道家</category>
        <category>佛教</category>
        <category>禅宗</category>
        <category>理学</category>
        <category>心学</category>
        <item>
            <guid isPermalink="true">http://shenlvmeng.github.com/blog/2016/02/27/vnm-test-learning/</guid>
            <title>vnm test学习</title>
            <link>http://shenlvmeng.github.com/blog/2016/02/27/vnm-test-learning/</link>
            <category>算法</category>
            <category>C</category>
            <category>虚网映射</category>
            <pubDate>Sat, 27 Feb 2016 21:51:39 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;师兄给了一个虚网映射的仿真（cpp），和之前的embed-detail的C语言仿真工具很像，经过一周左右的学习，挖掘出了其中虚网映射部分的内容，在此整理，以作日后学习。鉴于之前embed-detail的学习总结很繁琐，这里的总结只做精要的介绍。&lt;/p&gt;
&lt;h2 id=&#34;数据结构&#34;&gt;&lt;a href=&#34;#数据结构&#34; class=&#34;headerlink&#34; title=&#34;数据结构&#34;&gt;&lt;/a&gt;数据结构&lt;/h2&gt;&lt;p&gt;这一部分在Utility.h中完成，是对映射种种数据容器的整理。&lt;/p&gt;
&lt;h3 id=&#34;节点：&#34;&gt;&lt;a href=&#34;#节点：&#34; class=&#34;headerlink&#34; title=&#34;节点：&#34;&gt;&lt;/a&gt;节点：&lt;/h3&gt;&lt;p&gt;编号，CPU，带宽和，优先度&lt;/p&gt;
&lt;h3 id=&#34;最短路：&#34;&gt;&lt;a href=&#34;#最短路：&#34; class=&#34;headerlink&#34; title=&#34;最短路：&#34;&gt;&lt;/a&gt;最短路：&lt;/h3&gt;&lt;p&gt;跳数，带宽，路径列表，下一跳&lt;/p&gt;
&lt;h3 id=&#34;映射结果（单节点）：&#34;&gt;&lt;a href=&#34;#映射结果（单节点）：&#34; class=&#34;headerlink&#34; title=&#34;映射结果（单节点）：&#34;&gt;&lt;/a&gt;映射结果（单节点）：&lt;/h3&gt;&lt;p&gt;物理节点对象，虚拟节点编号，所属根节点，到根节点跳数，Node_list中序号，Node_list总数&lt;/p&gt;
&lt;h3 id=&#34;（类）物理拓扑：&#34;&gt;&lt;a href=&#34;#（类）物理拓扑：&#34; class=&#34;headerlink&#34; title=&#34;（类）物理拓扑：&#34;&gt;&lt;/a&gt;（类）物理拓扑：&lt;/h3&gt;&lt;p&gt;节点总数，边总数，资源，节点资源，边资源；&lt;/p&gt;
&lt;p&gt;节点群（一维向量），边群（二维向量），最短路群（二维结构向量）；&lt;/p&gt;
&lt;h4 id=&#34;方法：&#34;&gt;&lt;a href=&#34;#方法：&#34; class=&#34;headerlink&#34; title=&#34;方法：&#34;&gt;&lt;/a&gt;方法：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;初始化，&lt;/li&gt;
&lt;li&gt;节点排序算法，&lt;/li&gt;
&lt;li&gt;Floyd算法,&lt;/li&gt;
&lt;li&gt;找到节点序号对应的下标，&lt;/li&gt;
&lt;li&gt;计算网络资源&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;（类）虚拟拓扑（继承物理拓扑）：&#34;&gt;&lt;a href=&#34;#（类）虚拟拓扑（继承物理拓扑）：&#34; class=&#34;headerlink&#34; title=&#34;（类）虚拟拓扑（继承物理拓扑）：&#34;&gt;&lt;/a&gt;（类）虚拟拓扑（继承物理拓扑）：&lt;/h3&gt;&lt;p&gt;&amp;#x2F;&amp;#x2F;同物理拓扑&lt;/p&gt;
&lt;p&gt;允许最大跳数，分割率，拓扑类型，起始时间，映射时间，存活时间，消耗，节点消耗，链路消耗，收入，收入支出比，是否匹配成功，是否起请求截止，是否delay过，是否失败&lt;/p&gt;
&lt;p&gt;满足约束条件的节点群（二维向量），结果群（结果向量），最短路群（二维链表向量）&lt;/p&gt;
&lt;h4 id=&#34;方法：-1&#34;&gt;&lt;a href=&#34;#方法：-1&#34; class=&#34;headerlink&#34; title=&#34;方法：&#34;&gt;&lt;/a&gt;方法：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;读入拓扑，&lt;/li&gt;
&lt;li&gt;初始化，&lt;/li&gt;
&lt;li&gt;计算最短路径和，&lt;/li&gt;
&lt;li&gt;查找结点是否已经映射，&lt;/li&gt;
&lt;li&gt;匹配节点（包含匹配边），&lt;/li&gt;
&lt;li&gt;匹配边，&lt;/li&gt;
&lt;li&gt;匹配过程（包含匹配节点），&lt;/li&gt;
&lt;li&gt;分配或释放资源（匹配过程中完成），&lt;/li&gt;
&lt;li&gt;打印结果，&lt;/li&gt;
&lt;li&gt;计算收入支出，&lt;/li&gt;
&lt;li&gt;计算收入，&lt;/li&gt;
&lt;li&gt;释放虚网的所有资源&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;核心方法分析&#34;&gt;&lt;a href=&#34;#核心方法分析&#34; class=&#34;headerlink&#34; title=&#34;核心方法分析&#34;&gt;&lt;/a&gt;核心方法分析&lt;/h2&gt;&lt;p&gt;这一部分在Utility.cpp中完成，是对映射种种方法的实现。&lt;/p&gt;
&lt;h3 id=&#34;（物理网络）&#34;&gt;&lt;a href=&#34;#（物理网络）&#34; class=&#34;headerlink&#34; title=&#34;（物理网络）&#34;&gt;&lt;/a&gt;（物理网络）&lt;/h3&gt;&lt;p&gt;1. 初始化：开辟最短路群空间，计算链路CPU&amp;#x2F;带宽和&amp;#x2F;PR值&lt;/p&gt;
&lt;p&gt;2. 计算资源：节点，链路资源相加。&lt;/p&gt;
&lt;h3 id=&#34;（虚拟网络）&#34;&gt;&lt;a href=&#34;#（虚拟网络）&#34; class=&#34;headerlink&#34; title=&#34;（虚拟网络）&#34;&gt;&lt;/a&gt;（虚拟网络）&lt;/h3&gt;&lt;p&gt;1. 读入文件：读入节点数，链路数，开始时间，存活时间等。&lt;/p&gt;
&lt;p&gt;2. 初始化：填充Node_list&lt;/p&gt;
&lt;p&gt;3. 查找结点是否已被映射：for 循环遍历暴力查找&lt;/p&gt;
&lt;p&gt;4. 匹配节点：读入物理网络和参照物理网络，当前结点所属根节点，已映射节点数。&lt;/p&gt;
&lt;p&gt;（1）打印&lt;/p&gt;
&lt;p&gt;（2）从可行最短跳（虚拟网络中的跳数）到最大允许跳开始循环&lt;/p&gt;
&lt;p&gt;（2.1）从可行节点（Node_list）中查找满足CPU要求的节点&lt;/p&gt;
&lt;p&gt;（2.2）查找匹配边（Match_Edge），若有打印信息并返回&lt;/p&gt;
&lt;p&gt;（3）打印失败信息返回&lt;/p&gt;
&lt;p&gt;5. 匹配链路：读入物理网络预期参照，当前结点编号和下标，已映射节点数。&lt;/p&gt;
&lt;p&gt;（1）循环寻找所有与该节点关联的节点&lt;/p&gt;
&lt;p&gt;（1.1）若有关联，清空并循环更新最短路向量&lt;/p&gt;
&lt;p&gt;（1.2）循环检测带宽是否满足要求&lt;/p&gt;
&lt;p&gt;（2）循环还原减少的带宽资源&lt;/p&gt;
&lt;p&gt;（3）返回成功标记&lt;/p&gt;
&lt;p&gt;6. 匹配：读入物理拓扑，完成一个虚网的匹配&lt;/p&gt;
&lt;p&gt;（1）建立物理拓扑最短路矩阵&lt;/p&gt;
&lt;p&gt;（2）初始化最短路群，root, chosen_num（已选中节点数）&lt;/p&gt;
&lt;p&gt;（3）初始化根节点result类实例，若无备选节点，返回 0&lt;/p&gt;
&lt;p&gt;（4）循环寻找可行的根节点直到遍历完成&lt;/p&gt;
&lt;p&gt;（4.1）以当前父节点为基础开始匹配子节点，循环&lt;/p&gt;
&lt;p&gt;（4.1.1）循环寻找父节点的关联的子节点&lt;/p&gt;
&lt;p&gt;（4.1.1.1）若某节点无匹配物理节点，循环释放资源，返回 0&lt;/p&gt;
&lt;p&gt;（4.1.1.2）若找到，更新result群向量，调用匹配节点，找到对应物理节点序号&lt;/p&gt;
&lt;p&gt;（4.1.1.2.1）若成功返回，继续更新result，最短路矩阵，更新底层资源&lt;/p&gt;
&lt;p&gt;（4.1.1.2.2）若不成功，回退chosen_num，释放资源，更新root，最短路&lt;/p&gt;
&lt;p&gt;（4.1.2）若未回退到根节点，不用调整根节点，继续从下个父节点开始匹配，直到匹配完成&lt;/p&gt;
&lt;p&gt;（4.2）若匹配未完成，释放根节点和其余资源&lt;/p&gt;
&lt;p&gt;（5）若匹配成功计算收入支出返回回退次数，否则释放资源，返回 0；&lt;/p&gt;
&lt;p&gt;7. 资源管理：通过标记值区分占用或是释放，循环更新节点和链路资源&lt;/p&gt;
&lt;p&gt;8. 打印，计算收入支出&lt;/p&gt;
&lt;p&gt;9. 释放虚网资源：循环释放，返回释放资源值&lt;/p&gt;
&lt;h2 id=&#34;主程序&#34;&gt;&lt;a href=&#34;#主程序&#34; class=&#34;headerlink&#34; title=&#34;主程序&#34;&gt;&lt;/a&gt;主程序&lt;/h2&gt;&lt;p&gt;这一部分在VNM.cpp中完成，是时间窗模型下虚网映射的实现。步骤如下：&lt;/p&gt;
&lt;p&gt;1. 初始化临时变量，&lt;/p&gt;
&lt;p&gt;2. 从文件中读入底层物理网络，虚网请求&lt;/p&gt;
&lt;p&gt;3.  打印初始信息，计算物理资源&lt;/p&gt;
&lt;p&gt;4. 循环到所有请求都被处理完成或是有finish标记&lt;/p&gt;
&lt;p&gt;4.1 循环计算该窗口内待映射请求数&lt;/p&gt;
&lt;p&gt;4.2 循环这些请求&lt;/p&gt;
&lt;p&gt;4.2.1 挑出未延迟且未成功的&lt;/p&gt;
&lt;p&gt;4.2.1.1 初始化虚网，打印信息&lt;/p&gt;
&lt;p&gt;4.2.1.2 开始匹配，计算时间&lt;/p&gt;
&lt;p&gt;4.2.1.3 计算收入，更改标记为映射完成或延迟&lt;/p&gt;
&lt;p&gt;4.2.1.4 计算当前物理资源，写入到文件&lt;/p&gt;
&lt;p&gt;4.2.2 挑出匹配成功且到期的请求&lt;/p&gt;
&lt;p&gt;4.2.2.1 更新它们的R&amp;#x2F;S和完成数目&lt;/p&gt;
&lt;p&gt;4.2.2.2 释放它们的资源&lt;/p&gt;
&lt;p&gt;4.2.3 挑出delay过久的请求，置为失败，更新资源和计数器&lt;/p&gt;
&lt;p&gt;4.3 计算该时间窗内的支出，收入等数据，更新finish和计数器&lt;/p&gt;
&lt;p&gt;4.4 打印该时间窗测试数据到文件&lt;/p&gt;
&lt;p&gt;4.5 更新时间窗时间&lt;/p&gt;
&lt;p&gt;5. 关闭文件，打印当前时间&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://shenlvmeng.github.com/blog/2015/01/31/embed-c/</guid>
            <title>虚网映射仿真包 embed.c 代码分析</title>
            <link>http://shenlvmeng.github.com/blog/2015/01/31/embed-c/</link>
            <category>算法</category>
            <category>虚网映射</category>
            <pubDate>Sat, 31 Jan 2015 13:03:23 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;此次论文仿真中，需要对虚网映射的过程进行改进。在原先只考量CPU和带宽的基础上为链路增加VLAN属性，并在映射过程中分配VLAN、检测VLAN是否用尽。经过三天的阅读，这里把仿真包里embed.c这个主要文件的各函数分析在下面，方便日后修改。&lt;/p&gt;
&lt;h2 id=&#34;数据结构&#34;&gt;&lt;a href=&#34;#数据结构&#34; class=&#34;headerlink&#34; title=&#34;数据结构&#34;&gt;&lt;/a&gt;数据结构&lt;/h2&gt;&lt;p&gt;数据结构存储在embed.h中。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;struct_link 描述物理链路，有from、to、带宽三个属性&lt;/li&gt;
&lt;li&gt;request 虚网请求，有split, node, links, CPU[], bw等多个属性。&lt;/li&gt;
&lt;li&gt;substrate_network 底层物理网络，有nodes, struct_link links等属性&lt;/li&gt;
&lt;li&gt;s2v_node 被映射了虚网的物理节点的状态&lt;/li&gt;
&lt;li&gt;s2v_link 被映射了虚网的物理链路的状态&lt;/li&gt;
&lt;li&gt;path 逻辑链路映射成的多段物理链路&lt;/li&gt;
&lt;li&gt;req2sub 描述虚网映射的实时映射关系&lt;/li&gt;
&lt;li&gt;shortest_path 最短路径，通过Floyd算出（用于链路映射）&lt;/li&gt;
&lt;li&gt;bneck 瓶颈节点&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;相关函数&#34;&gt;&lt;a href=&#34;#相关函数&#34; class=&#34;headerlink&#34; title=&#34;相关函数&#34;&gt;&lt;/a&gt;相关函数&lt;/h2&gt;&lt;h3 id=&#34;节点映射&#34;&gt;&lt;a href=&#34;#节点映射&#34; class=&#34;headerlink&#34; title=&#34;节点映射&#34;&gt;&lt;/a&gt;节点映射&lt;/h3&gt;&lt;h4 id=&#34;find-proper-node&#34;&gt;&lt;a href=&#34;#find-proper-node&#34; class=&#34;headerlink&#34; title=&#34;find_proper_node&#34;&gt;&lt;/a&gt;find_proper_node&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;目标&lt;/strong&gt;：在当前底层物理网络中寻找rest_cou最适合（rest_cpu和request CPU最近，且大于它）当前虚节点的节点。&lt;/p&gt;
&lt;h4 id=&#34;find-MinNeighborResource-node&#34;&gt;&lt;a href=&#34;#find-MinNeighborResource-node&#34; class=&#34;headerlink&#34; title=&#34;find_MinNeighborResource_node&#34;&gt;&lt;/a&gt;find_MinNeighborResource_node&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;目标&lt;/strong&gt;：在当前底层物理网络中寻找rest_cpu满足要求，且自资源最不丰富的物理节点&lt;/p&gt;
&lt;p&gt;衡量标准：节点rest_cpu * sum(rest_bw)&lt;/p&gt;
&lt;h4 id=&#34;find-MaxNeighborResource-node&#34;&gt;&lt;a href=&#34;#find-MaxNeighborResource-node&#34; class=&#34;headerlink&#34; title=&#34;find_MaxNeighborResource_node&#34;&gt;&lt;/a&gt;find_MaxNeighborResource_node&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;目标&lt;/strong&gt;：在当前底层物理网络中寻找除了exclude节点外的rest_cpu满足要求的，且自资源最丰富的物理&lt;/p&gt;
&lt;p&gt;节点&lt;/p&gt;
&lt;p&gt;衡量标准：同上&lt;/p&gt;
&lt;h4 id=&#34;find-available-node&#34;&gt;&lt;a href=&#34;#find-available-node&#34; class=&#34;headerlink&#34; title=&#34;find_available_node&#34;&gt;&lt;/a&gt;find_available_node&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;目标&lt;/strong&gt;：在当前底层物理网络中，从一随机起点出发，寻找第一个rest_cpu满足要求的物理节点&lt;/p&gt;
&lt;h4 id=&#34;map-node-greedy&#34;&gt;&lt;a href=&#34;#map-node-greedy&#34; class=&#34;headerlink&#34; title=&#34;map_node_greedy&#34;&gt;&lt;/a&gt;map_node_greedy&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;目标&lt;/strong&gt;：在当前物理网络中，为特定index的虚网映射进行节点映射，哟西按占用资源最丰富的节点，成功则更新物理网络的状态（s2v_node, s2v_link），失败则对已映射的节点进行拆除。&lt;/p&gt;
&lt;h4 id=&#34;map-node-star&#34;&gt;&lt;a href=&#34;#map-node-star&#34; class=&#34;headerlink&#34; title=&#34;map_node_star&#34;&gt;&lt;/a&gt;map_node_star&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;目标&lt;/strong&gt;：在当前物理网络中，为第一个请求节点分配资源最丰富的节点，其余逻辑节点随机分配，成功则更新物理网络的状态（s2v_node, s2v_link），失败则对已映射的节点进行拆除。&lt;/p&gt;
&lt;h3 id=&#34;链路映射&#34;&gt;&lt;a href=&#34;#链路映射&#34; class=&#34;headerlink&#34; title=&#34;链路映射&#34;&gt;&lt;/a&gt;链路映射&lt;/h3&gt;&lt;p&gt;由于链路映射算法大多很复杂，这里将算法流程也一并列在下方。&lt;/p&gt;
&lt;h4 id=&#34;unsplittable-flow&#34;&gt;&lt;a href=&#34;#unsplittable-flow&#34; class=&#34;headerlink&#34; title=&#34;unsplittable_flow&#34;&gt;&lt;/a&gt;unsplittable_flow&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;目标&lt;/strong&gt;：为不可分割流进行链路映射&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;算法流程&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;0  初始化变量，位置分配内存空间&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1  死循环&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1.1  找到请求中状态满足要求（完成了节点映射）且收益最大的请求，直到状态全部更新&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1.1.1    存储id,改变其标志位&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1.2  判断该请求状态，与是否可分割&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1.2.1    找到该请求的所有逻辑链路&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1.2.1.1      找到它们的起始、终结物理节点&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1.2.1.2      判断它们是否已找到之间的最短路，否则继续寻找&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1.2.1.2.1        Floyd矩阵找下一跳&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1.2.1.2.2        下一跳若不可达，break&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1.2.1.2.3        寻找有没有实体链路对应Floyd的下一跳&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1.2.1.2.4        如果没有，或者有但是rest_bw不够，break&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1.2.1.2.5        吧路过链路的可用带宽减少，将当前链路存入到路径数组中&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1.2.1.3      如果上一步失败，给sub1(底层物理网络)划分内存空间，在sub1里删除上步出现问题的链路&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1.2.1.4      在sub1里算出Floyd矩阵，并存储在临时变量里&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1.2.1.4.1        一个类似于1.2.1.2的循环&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1.2.1.4.1.1          若还不行，break到1.2.1.4.2；若可以减少可用带宽，存入到路径&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1.2.1.4.2        返回错误物理链路、虚拟链路、虚网请求id&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1.2.1.5      存储当前算出的路径，与逻辑链路一一对应&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2  将状态标志位全部清零&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3  死循环&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3.1    找到请求中状态满足要求（完成了节点映射）且收益最大的请求，直到状态全部更新&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3.1.1      存储id, 改变标志位&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3.2    判断该请求状态，与是否可分割&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3.2.1      更新时间与链路状态值&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3.2.2      为请求内的spath赋值(len, bw)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3.2.2.1        为spath内的各段物理链路赋值&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3.2.2.2        更新物理网络链路状态&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4  释放临时变量空间&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5  返回-1(虚网请求成功标志)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;multicommodity-flow&#34;&gt;&lt;a href=&#34;#multicommodity-flow&#34; class=&#34;headerlink&#34; title=&#34;multicommodity_flow&#34;&gt;&lt;/a&gt;multicommodity_flow&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;目标&lt;/strong&gt;：打印基本信息&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;算法流程&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1  打开测试文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2  指定范围内检测有误状态符合条件的请求，&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3  若没有，则返回-2并关闭文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4  打印出满足要求的链路总数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5  打印基本信息到文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6  打印ARC COSTS到文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7  打印ARC CAPACITIES到文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8  打印NODE INJECTIONS到文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9  打印ARC MUTUAL到文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10 打印NETWORK TOPOLOGY到文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11 打印LOWER AND UPPER BOUNDS到文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12 打印SIDE CONSTRAINTS到文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13 关闭文件对象&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14 运行lintest文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15 返回 0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;检测&#34;&gt;&lt;a href=&#34;#检测&#34; class=&#34;headerlink&#34; title=&#34;检测&#34;&gt;&lt;/a&gt;检测&lt;/h3&gt;&lt;h4 id=&#34;check-flow&#34;&gt;&lt;a href=&#34;#check-flow&#34; class=&#34;headerlink&#34; title=&#34;check_flow&#34;&gt;&lt;/a&gt;check_flow&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;目标&lt;/strong&gt;：检查映射情况&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;算法流程&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1  打开test文件，初始化变量&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2  查找STATUS字段，停在此处&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3  若不可执行，且阶段 0，则关闭文件，返回 -3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4  若不可执行，且阶段 1，则继续&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4.1    查找VARIABLE字段&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4.2    在每条链路上查找已使用过的情况，为s2v_link赋值&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4.3    查找SIDE CONSTRAINTS字段&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4.3.1      找到过载最严重的链路&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4.3.2      找到该链路占用最多贷款的租户ID，及其占用带宽，并确定请求ID和虚拟链路ID&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5  其余情况，查找OPTIMAL字段，若找到，则继续&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5.1    查找VARAIABLE字段&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5.2    在每条链路上查找已使用过的情况，为s2v_link赋值&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5.3    为v2s赋值&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6  关闭文件，释放内存&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7 打印租户ID或-1（成功标志）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;资源分配&#34;&gt;&lt;a href=&#34;#资源分配&#34; class=&#34;headerlink&#34; title=&#34;资源分配&#34;&gt;&lt;/a&gt;资源分配&lt;/h3&gt;&lt;p&gt;同样，算法复杂，将具体流程列在下面&lt;/p&gt;
&lt;h4 id=&#34;allocate&#34;&gt;&lt;a href=&#34;#allocate&#34; class=&#34;headerlink&#34; title=&#34;allocate&#34;&gt;&lt;/a&gt;allocate&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;目标&lt;/strong&gt;：整合节点、链路映射完成虚网映射的核心部分&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;算法流程：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1  为变量s2v_node,s2v_link,v2s划分空间，赋初值&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2  为节点数组req_count清零&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3  将请求按收入大小排序，找出最大收入者，为它进行节点映射，知道请求的节点映射全部完成&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4  若全部未完成节点映射，返回-1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5  初始化链路映射相关变量&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6  找到瓶颈节点，并进行链路映射（尝试）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7  若映射成功或链路可分割，用新方法找到瓶颈节点&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8  循环：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8.1    如果上一步尝试成功，为s2v_node, s2v_link赋值，跳出循环&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8.2    否则，计算这一批次的cost之和&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8.3    找出剩余资源最少的节点ID，及其剩余资源&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8.4    随机从上面移除一个虚拟节点&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8.5    找到这个节点以外资源最丰富的节点，成功则映射到这个新节点；否则映射请求失败&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8.6    检查有误未完成链路请求的虚网请求，无则跳出循环&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8.7    若时间正忙而无法映射，try=门限+1，找到未完成的请求ID&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8.8    cost清零，try+1，打印try次数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8.9    若try &amp;gt; 尝试门限，释放资源，更改状态，还原try&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8.10   否则，找到瓶颈链路上的任一节点外的资源最丰富的节点&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8.10.1     若找到，则映射；否则这个请求失败&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8.11   检查链路映射是否完成，为s2v_node, s2v_link, v2s赋值&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9  检查当前瓶颈节点，尝试链路映射&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10 为s2v_node, s2v_link等赋值，用cost防止重复操作&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11 检查新映射是否cost更低，是则更新&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12 #允许迁移则继续向下&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13 计算原始cost，释放原始映射资源，进行新的映射&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14 新的映射成功则计算新cost，否则返回 0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15 新的cost是否更小，是则迁移，否则不做操作&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16 还原s2v_node, ltmp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17 用unsplittable映射计算一次cost，若新的cost更小，则迁移；否则不作操作&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18 更新s2v_node, s2v_link v2s&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19 返回 0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;辅助&#34;&gt;&lt;a href=&#34;#辅助&#34; class=&#34;headerlink&#34; title=&#34;辅助&#34;&gt;&lt;/a&gt;辅助&lt;/h3&gt;&lt;h4 id=&#34;calculate-cost&#34;&gt;&lt;a href=&#34;#calculate-cost&#34; class=&#34;headerlink&#34; title=&#34;calculate_cost&#34;&gt;&lt;/a&gt;calculate_cost&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;目标&lt;/strong&gt;：返回指定范围内的虚网请求cost之和。cost算法同上&lt;/p&gt;
&lt;p&gt;筛选标准：完成链路映射&lt;/p&gt;
&lt;h4 id=&#34;exist-req&#34;&gt;&lt;a href=&#34;#exist-req&#34; class=&#34;headerlink&#34; title=&#34;exist_req&#34;&gt;&lt;/a&gt;exist_req&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;目标&lt;/strong&gt;：查找是否存在完成了节点映射，未完成链路映射的请求。存在，则返回0，否则返回-1。&lt;/p&gt;
&lt;h4 id=&#34;主函数-main&#34;&gt;&lt;a href=&#34;#主函数-main&#34; class=&#34;headerlink&#34; title=&#34;主函数 main&#34;&gt;&lt;/a&gt;主函数 main&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;算法流程&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1  为v2s, s2v_node, s2v_link, sub, req 赋初值&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2  打开底层网络文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3  为sub赋node(sub.s2v_nod(req_count,rest_cpu,cpu),sub.link(from,to,s2v_l,rest_bw))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4  关闭文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5  循环打各req的文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5.1   为req的revenue/nodes,links,split,time,duration,topo)赋值&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5.2   循环为req的cpu,link.from,link.to,link.bw赋值&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5.3   计算出revenue&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6  关闭文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7  为临时变量s2v_node/ltmp2/v2stmp2/spath分配内存空间&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8  计算得到spath值&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9  初始化临时变量&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10 循环：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10.1   循环检测所有完成链路映射的请求，为done_count+1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10.2   更新done,rev,cost,map状态，若映射完成则释放资源&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10.3   计算当前req.rev/cost/count&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10.4   写入当前数据到文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11 为当前所有请求进行映射&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12 依次次检测所有请求状态，更新未请求成功的状态与错误计数器&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13 打开stat文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14 为成功的虚网请求释放资源&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15 计算当前req,dev/cost/count&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16 写入当前数据到stat文件/trace文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17 关闭文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18 返回 0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
    </channel>
</rss>
