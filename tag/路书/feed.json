{
    "version": "https://jsonfeed.org/version/1",
    "title": "Shenlvmeng's Blog • All posts by \"路书\" tag",
    "description": "Be sharp, my friend.",
    "home_page_url": "http://shenlvmeng.github.com/blog",
    "items": [
        {
            "id": "http://shenlvmeng.github.com/blog/2019/09/01/roadmap-refactor-log/",
            "url": "http://shenlvmeng.github.com/blog/2019/09/01/roadmap-refactor-log/",
            "title": "roadmap工程化改造",
            "date_published": "2019-09-01T09:25:31.000Z",
            "content_html": "<blockquote>\n<p><a href=\"https://github.com/shenlvmeng/roadmap\">roadmap</a>最近使用typescript重构到了1.0.0版本，下面是一些记录</p>\n</blockquote>\n<p>1.0.0项目由两部分组成：<strong>Electron程序</strong>、<strong>web网页</strong>。两者不直接关联，通过配置文件<code>roadmap.config.json</code>解耦。</p>\n<p>另外，Electron程序和web网页属于两套开发流程，互不干扰，在使用配置文件作为接口的基础上，可以独立开发和升级。</p>\n<h2 id=\"Electron程序\"><a href=\"#Electron程序\" class=\"headerlink\" title=\"Electron程序\"></a>Electron程序</h2><p>提供给用户程序，通过输入地图配置、gpx文件、定位图片物料，产出<code>roadmap.config.json</code>。整体使用Electron + webpack + TypeScript的脚手架。</p>\n<p>Electron工作重点在gpx文件转换和图片压缩：</p>\n<ul>\n<li>gpx文件使用<code>parse-gpx</code>库解析，产出JSON字符串</li>\n<li>图片压缩，保留EXIF信息的图片压缩，产出压缩后的图片</li>\n</ul>\n<p>最后加上用户的输入，综合产出<code>roadmap.config.json</code>。</p>\n<h3 id=\"gpx解析\"><a href=\"#gpx解析\" class=\"headerlink\" title=\"gpx解析\"></a>gpx解析</h3><blockquote>\n<p>见src&#x2F;main&#x2F;gpx2json.ts</p>\n</blockquote>\n<p>使用<code>parse-gpx</code>库解析，将经纬度坐标换算到百度地图坐标，产出保留经纬度、海拔信息的结构体，储存为JSON文件，便于网页读取。</p>\n<h3 id=\"图片压缩\"><a href=\"#图片压缩\" class=\"headerlink\" title=\"图片压缩\"></a>图片压缩</h3><blockquote>\n<p>见src&#x2F;renderer&#x2F;image.ts</p>\n</blockquote>\n<p>带有EXIF信息的图片通常体积很大，不适合直接放在网页，会严重拖慢网页加载速度。而经过调研，常见的图片压缩工具都不会保留图片EXIF信息，即使保留也不会保留我们需要的经纬度、海拔信息。</p>\n<p>另外，满足要求的图片压缩工具（如Adobe PhotoShop）没法整合在整个流程中。因此需要自己实现。</p>\n<p>思路是：</p>\n<ul>\n<li>读取原始图片中的EXIF信息</li>\n<li>借助canvas压缩图片体积、同时调整图片尺寸</li>\n<li>再度组合EXIF信息和压缩后的图片，得到保留完整EXIF信息的压缩图片</li>\n</ul>\n<h3 id=\"网页模板\"><a href=\"#网页模板\" class=\"headerlink\" title=\"网页模板\"></a>网页模板</h3><p>使用<code>html-loader</code>加载已经产出好的<code>output.html</code>，读取为字符串，直接输出到指定目录即可。</p>\n<p>网页模板的开发流程见portal一节。</p>\n<h3 id=\"产物\"><a href=\"#产物\" class=\"headerlink\" title=\"产物\"></a>产物</h3><blockquote>\n<p>样例见src&#x2F;test&#x2F;portal</p>\n</blockquote>\n<p>产物生成在桌面的roadmap-output文件夹，<strong>新生成的文件夹会覆盖老的</strong>。内容如下：</p>\n<ul>\n<li><code>index.html</code> 目标网页</li>\n<li><code>roadmap.config.json</code> 配置信息</li>\n<li><code>data</code><ul>\n<li><code>xx.json</code> gpx内容</li>\n<li><code>images</code> 图片信息</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"roadmap-config-json\"><a href=\"#roadmap-config-json\" class=\"headerlink\" title=\"roadmap.config.json\"></a>roadmap.config.json</h2><p>用于解耦。包含了基础的配置信息</p>\n<ul>\n<li>city 默认定位的中心城市</li>\n<li>title 网页标题</li>\n<li>gpxCount gpx路径数</li>\n<li>imgTitles 图片标题，不需要和图片一一对应</li>\n</ul>\n<h2 id=\"web网页（portal）\"><a href=\"#web网页（portal）\" class=\"headerlink\" title=\"web网页（portal）\"></a>web网页（portal）</h2><p>web网页为了便于迭代，使用了和Electron程序独立的webpack工程。在<code>config</code>中有独立的webpack配置，有独立的webpack调试、打包命令。</p>\n<p>工程位于<code>src/portal</code>，使用TypeScript。产物位于<code>portal</code>目录下，由Electron程序引用。</p>\n<p>在portal工程的webpack配置中：</p>\n<ul>\n<li>使用<code>MiniCssExtractPlugin</code>抽出css为css资源文件，加载时的避免样式闪动</li>\n<li>使用<code>HtmlWebpackInlineSourcePlugin</code>将引用的css和js文件inline，使得Electron程序只需引用一个HTML文件即可</li>\n<li>需要配置html-loader的<code>attr</code>，避免web网页在加载时，里面的<code>&lt;img&gt;</code>标签的<code>src</code>属性被解析</li>\n</ul>\n<h3 id=\"gps轨迹\"><a href=\"#gps轨迹\" class=\"headerlink\" title=\"gps轨迹\"></a>gps轨迹</h3><p>使用百度地图API绘制polyline实现，Electron程序生成的JSON中，已经提前转成百度地图坐标地址。</p>\n<h3 id=\"图床\"><a href=\"#图床\" class=\"headerlink\" title=\"图床\"></a>图床</h3><p>图片存储于免费的<a href=\"https://imgchr.com/\">路过图床</a>，因为不支持自定义访问路径，因此需要将上传图床后的路径保存为图片的title，在网页加载时，通过压缩图的title找到图片在图床上的对应地址（这个地方的设计待优化，所以暂时未开放）。</p>\n<p>图片的位置使用EXIF.js读取压缩图片的EXIF信息拿到，转换坐标后绘制在地图上。</p>\n",
            "tags": [
                "Electron",
                "TypeScript",
                "路书",
                "gpx解析",
                "EXIF"
            ]
        }
    ]
}