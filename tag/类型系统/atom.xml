<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://shenlvmeng.github.com/blog</id>
    <title>Shenlvmeng&#39;s Blog • Posts by &#34;类型系统&#34; tag</title>
    <link href="http://shenlvmeng.github.com/blog" />
    <updated>2019-07-28T14:23:01.000Z</updated>
    <category term="总结" />
    <category term="制度" />
    <category term="道德" />
    <category term="文官" />
    <category term="万历" />
    <category term="明朝" />
    <category term="读书笔记" />
    <category term="展望" />
    <category term="2018" />
    <category term="2019" />
    <category term="flag" />
    <category term="2020" />
    <category term="2021" />
    <category term="2022" />
    <category term="2023" />
    <category term="面试" />
    <category term="前端" />
    <category term="FAQ" />
    <category term="HTML" />
    <category term="CSS" />
    <category term="style guide" />
    <category term="编程" />
    <category term="范式" />
    <category term="设计" />
    <category term="艺术" />
    <category term="质量" />
    <category term="async_hooks" />
    <category term="cls-hooked" />
    <category term="logId" />
    <category term="录音" />
    <category term="getUserMedia" />
    <category term="AudioContext" />
    <category term="PCM" />
    <category term="WAVE" />
    <category term="二叉搜索树" />
    <category term="算法" />
    <category term="回忆" />
    <category term="老朋友" />
    <category term="C" />
    <category term="Hash" />
    <category term="布隆过滤器" />
    <category term="字符串检索" />
    <category term="canvas" />
    <category term="流程图" />
    <category term="d3" />
    <category term="g6" />
    <category term="zrender" />
    <category term="processOn" />
    <category term="SDN" />
    <category term="cbench" />
    <category term="安装说明" />
    <category term="绘图" />
    <category term="动画" />
    <category term="攻略" />
    <category term="流水账" />
    <category term="成都" />
    <category term="重庆" />
    <category term="武汉" />
    <category term="重构" />
    <category term="代码" />
    <category term="代码风格" />
    <category term="数据可视化" />
    <category term="爬虫" />
    <category term="chrome" />
    <category term="crx" />
    <category term="扩展" />
    <category term="CORS" />
    <category term="跨域" />
    <category term="盒模型" />
    <category term="浮动" />
    <category term="Reactive Programming" />
    <category term="JavaScript" />
    <category term="Cycle.js" />
    <category term="Dart" />
    <category term="最佳实践" />
    <category term="引流" />
    <category term="universal-link" />
    <category term="app-link" />
    <category term="脚手架" />
    <category term="degit" />
    <category term="git" />
    <category term="设计模式" />
    <category term="类" />
    <category term="接口" />
    <category term="抽象类" />
    <category term="DOM" />
    <category term="Docker" />
    <category term="ONOS" />
    <category term="控制器" />
    <category term="虚拟化" />
    <category term="笔记" />
    <category term="UX" />
    <category term="UED" />
    <category term="准则" />
    <category term="Java" />
    <category term="Ruby" />
    <category term="反射" />
    <category term="编程范式" />
    <category term="鸭子类型" />
    <category term="管理" />
    <category term="效率" />
    <category term="知识工作者" />
    <category term="卓有成效" />
    <category term="Elm" />
    <category term="框架" />
    <category term="函数式编程" />
    <category term="虚网映射" />
    <category term="Javascript" />
    <category term="并发" />
    <category term="event loop" />
    <category term="覆盖率" />
    <category term="端到端测试" />
    <category term="istanbul" />
    <category term="istanbuljs" />
    <category term="JavaSript" />
    <category term="Express" />
    <category term="源码" />
    <category term="代码覆盖率" />
    <category term="istanbul-middleware" />
    <category term="代码插桩" />
    <category term="require钩子" />
    <category term="babel-plugin-istanbul" />
    <category term="css" />
    <category term="html5" />
    <category term="flex" />
    <category term="javascript" />
    <category term="roadmap" />
    <category term="闭包" />
    <category term="Haskell" />
    <category term="monad" />
    <category term="后端" />
    <category term="管理后台" />
    <category term="egg.js" />
    <category term="工作流" />
    <category term="pull request" />
    <category term="golang" />
    <category term="语言学习" />
    <category term="黑客与画家" />
    <category term="创业" />
    <category term="骑行" />
    <category term="海南" />
    <category term="图文" />
    <category term="reflow" />
    <category term="repaint" />
    <category term="命名法" />
    <category term="成功学" />
    <category term="自我建设" />
    <category term="HTTP" />
    <category term="HTTP/2" />
    <category term="SPDY" />
    <category term="QUIC" />
    <category term="HTTPS" />
    <category term="状态码" />
    <category term="网络攻击" />
    <category term="介绍" />
    <category term="图片渲染" />
    <category term="html2canvas" />
    <category term="dom-to-image" />
    <category term="electron" />
    <category term="indexedDB" />
    <category term="异步" />
    <category term="Generator" />
    <category term="thunk" />
    <category term="async" />
    <category term="函数表达式" />
    <category term="对象" />
    <category term="继承" />
    <category term="类型转换" />
    <category term="==" />
    <category term="类型判断" />
    <category term="猫" />
    <category term="杀手" />
    <category term="管理学" />
    <category term="领导力" />
    <category term="梯队" />
    <category term="移动端" />
    <category term="UI" />
    <category term="自适应" />
    <category term="rem" />
    <category term="Electron" />
    <category term="GUI" />
    <category term="gpx" />
    <category term="template" />
    <category term="Electron Builder" />
    <category term="PWA" />
    <category term="方法论" />
    <category term="夜话" />
    <category term="多线" />
    <category term="生活" />
    <category term="密码" />
    <category term="密钥" />
    <category term="技改" />
    <category term="Vue" />
    <category term="gulp" />
    <category term="瀑布流" />
    <category term="电影" />
    <category term="PHP" />
    <category term="参考" />
    <category term="思维" />
    <category term="学习能力" />
    <category term="右脑" />
    <category term="经济学" />
    <category term="宏观经济学" />
    <category term="术语" />
    <category term="GDP" />
    <category term="CPI" />
    <category term="储蓄" />
    <category term="投资" />
    <category term="金融市场" />
    <category term="股票" />
    <category term="债券" />
    <category term="美联储" />
    <category term="失业" />
    <category term="货币" />
    <category term="现值" />
    <category term="准备金" />
    <category term="货币中性" />
    <category term="通货膨胀" />
    <category term="汇率" />
    <category term="购买力" />
    <category term="净出口" />
    <category term="资产净流出" />
    <category term="总需求" />
    <category term="总供给" />
    <category term="流动性偏好" />
    <category term="乘数效应" />
    <category term="菲利普斯曲线" />
    <category term="微观经济学" />
    <category term="供求" />
    <category term="贸易" />
    <category term="市场" />
    <category term="税" />
    <category term="剩余" />
    <category term="外部性" />
    <category term="公共物品" />
    <category term="公共资源" />
    <category term="生产成本" />
    <category term="利润" />
    <category term="垄断" />
    <category term="价格歧视" />
    <category term="寡头" />
    <category term="垄断竞争" />
    <category term="生产要素市场" />
    <category term="贫困" />
    <category term="消费者选择理论" />
    <category term="不对称信息" />
    <category term="政治经济学" />
    <category term="行为经济学" />
    <category term="VSCode" />
    <category term="编辑器" />
    <category term="IDE" />
    <category term="hybrid" />
    <category term="JSBridge" />
    <category term="Web Worker" />
    <category term="Service Worker" />
    <category term="习惯" />
    <category term="lint" />
    <category term="editorconfig" />
    <category term="commit message" />
    <category term="量子物理" />
    <category term="史话" />
    <category term="埋点" />
    <category term="raven.js" />
    <category term="前端监控" />
    <category term="文本编辑器" />
    <category term="quill" />
    <category term="结构化数据" />
    <category term="React" />
    <category term="Hooks" />
    <category term="函数组件" />
    <category term="复用" />
    <category term="状态管理" />
    <category term="redux" />
    <category term="MobX" />
    <category term="代码质量" />
    <category term="重来" />
    <category term="requestAnimationFrame" />
    <category term="TypeScript" />
    <category term="路书" />
    <category term="gpx解析" />
    <category term="EXIF" />
    <category term="人类" />
    <category term="生存" />
    <category term="基因" />
    <category term="响应式编程" />
    <category term="RxJS" />
    <category term="成长" />
    <category term="业务" />
    <category term="思想" />
    <category term="程序设计" />
    <category term="心理学" />
    <category term="自我" />
    <category term="社会思维" />
    <category term="社会影响" />
    <category term="文化" />
    <category term="性别" />
    <category term="从众" />
    <category term="说服" />
    <category term="临床诊断" />
    <category term="陪审团" />
    <category term="司法" />
    <category term="物质主义" />
    <category term="健康" />
    <category term="社会关系" />
    <category term="偏见" />
    <category term="攻击行为" />
    <category term="亲密关系" />
    <category term="友谊" />
    <category term="爱情" />
    <category term="利他" />
    <category term="冲突" />
    <category term="和解" />
    <category term="软技能" />
    <category term="理财" />
    <category term="健身" />
    <category term="自我营销" />
    <category term="学习" />
    <category term="商业模式" />
    <category term="产品" />
    <category term="校园网" />
    <category term="互联网" />
    <category term="技术" />
    <category term="web开发" />
    <category term="哲思" />
    <category term="择偶观" />
    <category term="validator" />
    <category term="大文件" />
    <category term="visibilityChange" />
    <category term="IntersectionObserver" />
    <category term="图种" />
    <category term="draggable" />
    <category term="webpack" />
    <category term="z-index" />
    <category term="git submodule" />
    <category term="object-fit" />
    <category term="object-position" />
    <category term="BroadcastChannel" />
    <category term="extract-text-webpack-plugin" />
    <category term="lottie" />
    <category term="backface-visibility" />
    <category term="egret" />
    <category term="mock" />
    <category term="SSO" />
    <category term="autoprefixer" />
    <category term="polyfill" />
    <category term="Android" />
    <category term="ffmpeg" />
    <category term="React Hooks" />
    <category term="rollup" />
    <category term="CDN" />
    <category term="DNS" />
    <category term="CNAME" />
    <category term="架构" />
    <category term="组件" />
    <category term="ssh" />
    <category term="fis-receiver" />
    <category term="tmux" />
    <category term="origami" />
    <category term="promise" />
    <category term="encodeURI" />
    <category term="encodeURIComponent" />
    <category term="axios" />
    <category term="charles" />
    <category term="黑色幽默" />
    <category term="朋友" />
    <category term="梦" />
    <category term="濒死" />
    <category term="江南" />
    <category term="苏州" />
    <category term="无锡" />
    <category term="宜兴" />
    <category term="湖州" />
    <category term="南浔" />
    <category term="游记" />
    <category term="随笔" />
    <category term="群众" />
    <category term="理论" />
    <category term="实效" />
    <category term="测试" />
    <category term="长沙" />
    <category term="杭州" />
    <category term="湖南" />
    <category term="核酸" />
    <category term="美食" />
    <category term="云南" />
    <category term="丽江" />
    <category term="大理" />
    <category term="青岛" />
    <category term="济南" />
    <category term="山东" />
    <category term="西北" />
    <category term="银川" />
    <category term="西宁" />
    <category term="青海湖" />
    <category term="西海镇" />
    <category term="茶卡盐湖" />
    <category term="厦门" />
    <category term="感受" />
    <category term="C语言" />
    <category term="树" />
    <category term="主干开发" />
    <category term="GitFlow" />
    <category term="GithubFlow" />
    <category term="typescript" />
    <category term="类型系统" />
    <category term="webrtc" />
    <category term="RTMP" />
    <category term="首屏时间" />
    <category term="性能优化" />
    <category term="公司" />
    <category term="个人发展" />
    <category term="战略" />
    <category term="晋升" />
    <category term="哲学" />
    <category term="幸福" />
    <category term="人生" />
    <category term="叔本华" />
    <category term="Unix" />
    <category term="Rollup" />
    <category term="mouseout" />
    <category term="mouseleave" />
    <category term="lint-staged" />
    <category term="吸顶" />
    <category term="图片组件" />
    <category term="形式系统" />
    <category term="不完全性" />
    <category term="隐喻" />
    <category term="哥德尔" />
    <category term="巴赫" />
    <category term="埃舍尔" />
    <category term="济州" />
    <category term="西归浦" />
    <category term="城山" />
    <category term="咸德" />
    <category term="人工智能" />
    <category term="心智" />
    <category term="自指" />
    <category term="图灵" />
    <category term="马列主义" />
    <category term="恩格斯" />
    <category term="家庭" />
    <category term="国家" />
    <category term="阶级" />
    <category term="氏族" />
    <category term="哲学史" />
    <category term="孔子" />
    <category term="老子" />
    <category term="儒家" />
    <category term="道家" />
    <category term="佛教" />
    <category term="禅宗" />
    <category term="理学" />
    <category term="心学" />
    <category term="计算机" />
    <category term="微机原理" />
    <category term="门" />
    <category term="操作系统" />
    <category term="数字电路" />
    <category term="2024" />
    <category term="政府" />
    <category term="经济" />
    <category term="消费" />
    <category term="土地金融" />
    <category term="饮食" />
    <category term="蛋白质" />
    <category term="碳水" />
    <category term="慢性病" />
    <category term="三高" />
    <category term="肿瘤" />
    <category term="启蒙" />
    <category term="社会主义" />
    <category term="当代史" />
    <category term="共产党" />
    <category term="南明" />
    <category term="清" />
    <category term="顾诚" />
    <entry>
        <id>http://shenlvmeng.github.com/blog/2019/07/28/typescript-restudy/</id>
        <title>TypeScript再学习</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2019/07/28/typescript-restudy/"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;尽管项目中已经用上了TypeScript，但是主要场景下对TS的高级特性设计较少，再看过&lt;a href=&#34;https://github.com/LeetCode-OpenSource/hire/blob/master/typescript_zh.md&#34;&gt;leetcode&lt;/a&gt;面试题后，觉得自己的了解程度还远远不够。于是参考&lt;a href=&#34;https://github.com/basarat/typescript-book/&#34;&gt;《TypeScript Deep Dive》&lt;/a&gt;这本开源书（&lt;a href=&#34;https://jkchao.github.io/typescript-book-chinese/&#34;&gt;中文版&lt;/a&gt;）开始再学习&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;TypeScript Playground: &lt;a href=&#34;http://www.typescriptlang.org/play/&#34;&gt;http://www.typescriptlang.org/play/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;TypeScript项目&#34;&gt;&lt;a href=&#34;#TypeScript项目&#34; class=&#34;headerlink&#34; title=&#34;TypeScript项目&#34;&gt;&lt;/a&gt;TypeScript项目&lt;/h2&gt;&lt;h3 id=&#34;编译&#34;&gt;&lt;a href=&#34;#编译&#34; class=&#34;headerlink&#34; title=&#34;编译&#34;&gt;&lt;/a&gt;编译&lt;/h3&gt;&lt;p&gt;TS的编译过程主要通过&lt;code&gt;tsconfig.json&lt;/code&gt;文件来配置（当然你也可以通过命令行的方式指定）。TS有些自己的默认配置，你也可以在&lt;code&gt;complierOptions&lt;/code&gt;下自定义你的配置。&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;compilerOptions&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/* 基本选项 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;target&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;es5&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;                       &lt;span class=&#34;comment&#34;&gt;// 指定 ECMAScript 目标版本: &amp;#x27;ES3&amp;#x27; (default), &amp;#x27;ES5&amp;#x27;, &amp;#x27;ES2015&amp;#x27;, &amp;#x27;ES2016&amp;#x27;, &amp;#x27;ES2017&amp;#x27;, or &amp;#x27;ESNEXT&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;module&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;commonjs&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;                  &lt;span class=&#34;comment&#34;&gt;// 指定使用模块: &amp;#x27;commonjs&amp;#x27;, &amp;#x27;amd&amp;#x27;, &amp;#x27;system&amp;#x27;, &amp;#x27;umd&amp;#x27; or &amp;#x27;es2015&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;lib&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;                             &lt;span class=&#34;comment&#34;&gt;// 指定要包含在编译中的库文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;allowJs&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;                       &lt;span class=&#34;comment&#34;&gt;// 允许编译 javascript 文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;checkJs&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;                       &lt;span class=&#34;comment&#34;&gt;// 报告 javascript 文件中的错误&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;jsx&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;preserve&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;                     &lt;span class=&#34;comment&#34;&gt;// 指定 jsx 代码的生成: &amp;#x27;preserve&amp;#x27;, &amp;#x27;react-native&amp;#x27;, or &amp;#x27;react&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;declaration&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;                   &lt;span class=&#34;comment&#34;&gt;// 生成相应的 &amp;#x27;.d.ts&amp;#x27; 文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;sourceMap&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;                     &lt;span class=&#34;comment&#34;&gt;// 生成相应的 &amp;#x27;.map&amp;#x27; 文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;outFile&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;./&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;                       &lt;span class=&#34;comment&#34;&gt;// 将输出文件合并为一个文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;outDir&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;./&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;                        &lt;span class=&#34;comment&#34;&gt;// 指定输出目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;rootDir&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;./&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;                       &lt;span class=&#34;comment&#34;&gt;// 用来控制输出目录结构 --outDir.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;removeComments&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;                &lt;span class=&#34;comment&#34;&gt;// 删除编译后的所有的注释&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;noEmit&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;                        &lt;span class=&#34;comment&#34;&gt;// 不生成输出文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;importHelpers&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;                 &lt;span class=&#34;comment&#34;&gt;// 从 tslib 导入辅助工具函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;isolatedModules&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;               &lt;span class=&#34;comment&#34;&gt;// 将每个文件做为单独的模块 （与 &amp;#x27;ts.transpileModule&amp;#x27; 类似）.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/* 严格的类型检查选项 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;strict&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;                        &lt;span class=&#34;comment&#34;&gt;// 启用所有严格类型检查选项&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;noImplicitAny&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;                 &lt;span class=&#34;comment&#34;&gt;// 在表达式和声明上有隐含的 any类型时报错&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;strictNullChecks&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;              &lt;span class=&#34;comment&#34;&gt;// 启用严格的 null 检查&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;noImplicitThis&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;                &lt;span class=&#34;comment&#34;&gt;// 当 this 表达式值为 any 类型的时候，生成一个错误&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;alwaysStrict&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;                  &lt;span class=&#34;comment&#34;&gt;// 以严格模式检查每个模块，并在每个文件里加入 &amp;#x27;use strict&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/* 额外的检查 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;noUnusedLocals&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;                &lt;span class=&#34;comment&#34;&gt;// 有未使用的变量时，抛出错误&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;noUnusedParameters&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;            &lt;span class=&#34;comment&#34;&gt;// 有未使用的参数时，抛出错误&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;noImplicitReturns&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;             &lt;span class=&#34;comment&#34;&gt;// 并不是所有函数里的代码都有返回值时，抛出错误&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;noFallthroughCasesInSwitch&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;    &lt;span class=&#34;comment&#34;&gt;// 报告 switch 语句的 fallthrough 错误。（即，不允许 switch 的 case 语句贯穿）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/* 模块解析选项 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;moduleResolution&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;node&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;            &lt;span class=&#34;comment&#34;&gt;// 选择模块解析策略： &amp;#x27;node&amp;#x27; (Node.js) or &amp;#x27;classic&amp;#x27; (TypeScript pre-1.6)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;baseUrl&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;./&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;                       &lt;span class=&#34;comment&#34;&gt;// 用于解析非相对模块名称的基目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;paths&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;                           &lt;span class=&#34;comment&#34;&gt;// 模块名到基于 baseUrl 的路径映射的列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;rootDirs&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;                        &lt;span class=&#34;comment&#34;&gt;// 根文件夹列表，其组合内容表示项目运行时的结构内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;typeRoots&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;                       &lt;span class=&#34;comment&#34;&gt;// 包含类型声明的文件列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;types&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;                           &lt;span class=&#34;comment&#34;&gt;// 需要包含的类型声明文件名列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;allowSyntheticDefaultImports&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;comment&#34;&gt;// 允许从没有设置默认导出的模块中默认导入。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/* Source Map Options */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;sourceRoot&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;./&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;                    &lt;span class=&#34;comment&#34;&gt;// 指定调试器应该找到 TypeScript 文件而不是源文件的位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;mapRoot&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;./&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;                       &lt;span class=&#34;comment&#34;&gt;// 指定调试器应该找到映射文件而不是生成文件的位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;inlineSourceMap&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;               &lt;span class=&#34;comment&#34;&gt;// 生成单个 soucemaps 文件，而不是将 sourcemaps 生成不同的文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;inlineSources&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;                 &lt;span class=&#34;comment&#34;&gt;// 将代码与 sourcemaps 生成到一个文件中，要求同时设置了 --inlineSourceMap 或 --sourceMap 属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/* 其他选项 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;experimentalDecorators&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;        &lt;span class=&#34;comment&#34;&gt;// 启用装饰器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;emitDecoratorMetadata&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;/span&gt;          &lt;span class=&#34;comment&#34;&gt;// 为装饰器提供元数据的支持&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;TS有几种不同的编译方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运行&lt;code&gt;tsc&lt;/code&gt;，自动定位当前目录下tsconfig.json&lt;/li&gt;
&lt;li&gt;运行&lt;code&gt;tsc -p [your path]&lt;/code&gt;，手动指定config路径&lt;/li&gt;
&lt;li&gt;运行&lt;code&gt;tsc -w&lt;/code&gt;进入观测模式，在文件更改时自动重新编译&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你可以通过不同方式指定要编译的文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;files&lt;/code&gt;直接指定要编译的文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;include&lt;/code&gt;指定包含的文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exclude&lt;/code&gt;指定排除的文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;配置值可以是glob格式。&lt;/p&gt;
&lt;h3 id=&#34;声明空间&#34;&gt;&lt;a href=&#34;#声明空间&#34; class=&#34;headerlink&#34; title=&#34;声明空间&#34;&gt;&lt;/a&gt;声明空间&lt;/h3&gt;&lt;p&gt;TypeScript中有两种声明空间：&lt;strong&gt;类型声明空间&lt;/strong&gt;和&lt;strong&gt;变量声明空间&lt;/strong&gt;。前者只能用作类型注解，后者可以用来当做变量使用。&lt;/p&gt;
&lt;h3 id=&#34;文件模块&#34;&gt;&lt;a href=&#34;#文件模块&#34; class=&#34;headerlink&#34; title=&#34;文件模块&#34;&gt;&lt;/a&gt;文件模块&lt;/h3&gt;&lt;p&gt;TS中有多种模块系统选项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AMD：仅在浏览器端使用&lt;/li&gt;
&lt;li&gt;SystemJS：已被ES模块替代&lt;/li&gt;
&lt;li&gt;ES模块：当前的支持有限&lt;/li&gt;
&lt;li&gt;CommonJS：当前比较好的一个选择&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般在工程中使用ES模块语法，模块选项使用CommonJS。TS中对类型也可以同样适用import和export。&lt;/p&gt;
&lt;h4 id=&#34;路径&#34;&gt;&lt;a href=&#34;#路径&#34; class=&#34;headerlink&#34; title=&#34;路径&#34;&gt;&lt;/a&gt;路径&lt;/h4&gt;&lt;p&gt;通常情况由&lt;code&gt;moduleResolution&lt;/code&gt;选项指定。这个选项在&lt;code&gt;tsconfig.json&lt;/code&gt;中声明。在声明&lt;code&gt;module: commonjs&lt;/code&gt;时，&lt;code&gt;moduleResolution&lt;/code&gt;自动指定为&lt;code&gt;node&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;导入路径分两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相对路径，使用&lt;code&gt;./&lt;/code&gt;或是&lt;code&gt;../&lt;/code&gt;与文件、文件夹名称组成&lt;/li&gt;
&lt;li&gt;动态路径，TS模块解析将会模仿&lt;a href=&#34;https://nodejs.org/api/modules.html#modules_all_together&#34;&gt;Node模块解析规则&lt;/a&gt;，即去当前目录、所有父目录的node_modules下寻找对应路径模块&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你本身对node下的模块查找很熟悉，那么恭喜，你已经掌握了TS的模块查找。&lt;/p&gt;
&lt;h4 id=&#34;global-d-ts&#34;&gt;&lt;a href=&#34;#global-d-ts&#34; class=&#34;headerlink&#34; title=&#34;global.d.ts&#34;&gt;&lt;/a&gt;&lt;code&gt;global.d.ts&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;在项目中可以通过&lt;code&gt;declare module &amp;#39;somepath&amp;#39; &amp;#123;&amp;#125;&lt;/code&gt;的方式声明一个全局模块，这样的一个&lt;code&gt;global.d.ts&lt;/code&gt;是声明全局类型的好地方。从js迁移到ts的项目通常需要一个这样的声明&lt;/p&gt;
&lt;h3 id=&#34;命名空间&#34;&gt;&lt;a href=&#34;#命名空间&#34; class=&#34;headerlink&#34; title=&#34;命名空间&#34;&gt;&lt;/a&gt;命名空间&lt;/h3&gt;&lt;p&gt;TypeScript下可以使用&lt;code&gt;namespace&lt;/code&gt;拆分变量的命名空间。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Logger&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;msg&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(msg);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;error&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;msg&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;error&lt;/span&gt;(msg);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// usage&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Logger&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;A message&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Logger&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;error&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;An error&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;namespace&lt;/code&gt;支持嵌套定义，在&lt;strong&gt;快速演示&lt;/strong&gt;和&lt;strong&gt;移植旧的JavaScript&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;动态导入&#34;&gt;&lt;a href=&#34;#动态导入&#34; class=&#34;headerlink&#34; title=&#34;动态导入&#34;&gt;&lt;/a&gt;动态导入&lt;/h3&gt;&lt;p&gt;在使用ES的动态导入功能时，为了保证TS在转换代码时保留&lt;code&gt;import()&lt;/code&gt;语句，&lt;code&gt;tsconfig.json&lt;/code&gt;中的&lt;code&gt;module&lt;/code&gt;需要是&lt;code&gt;esnext&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;类型系统&#34;&gt;&lt;a href=&#34;#类型系统&#34; class=&#34;headerlink&#34; title=&#34;类型系统&#34;&gt;&lt;/a&gt;类型系统&lt;/h2&gt;&lt;h3 id=&#34;概览&#34;&gt;&lt;a href=&#34;#概览&#34; class=&#34;headerlink&#34; title=&#34;概览&#34;&gt;&lt;/a&gt;概览&lt;/h3&gt;&lt;h4 id=&#34;基本注解&#34;&gt;&lt;a href=&#34;#基本注解&#34; class=&#34;headerlink&#34; title=&#34;基本注解&#34;&gt;&lt;/a&gt;基本注解&lt;/h4&gt;&lt;p&gt;包括JS的&lt;strong&gt;原始类型&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;string&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;number&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;object&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;其他基本类型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;数组类型&lt;/strong&gt;在元素类型后追加&lt;code&gt;[]&lt;/code&gt;实现。&lt;strong&gt;键值对&lt;/strong&gt;类型使用&lt;code&gt;&amp;#123;[key: string]: any&amp;#125;&lt;/code&gt;实现。&lt;/p&gt;
&lt;p&gt;你可以使用&lt;code&gt;interface&lt;/code&gt;封装自己的类型：&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;User&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;name&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;age&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;school&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;name&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;location&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;postcode&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;tags&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;name&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;[]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;另外，对于临时的类型需要。可以直接使用&lt;strong&gt;内联&lt;/strong&gt;的方式注解类型。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;user&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;name&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;title&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;name&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;foo&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;title&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;CEO&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;特殊类型&#34;&gt;&lt;a href=&#34;#特殊类型&#34; class=&#34;headerlink&#34; title=&#34;特殊类型&#34;&gt;&lt;/a&gt;特殊类型&lt;/h4&gt;&lt;p&gt;除了上面的基本类型，还有一些常用的特殊类型。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;any&lt;/strong&gt;意味着任意类型，&lt;code&gt;any&lt;/code&gt;类型可以兼容任何TypeScript中的类型。因此：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;任意类型都可以赋值给&lt;code&gt;any&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;any&lt;/code&gt;也可以赋值给任意类型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;初学者在从JavaScript迁移到TypeScript时，通常要借助&lt;code&gt;any&lt;/code&gt;的帮助。但实际上使用&lt;code&gt;any&lt;/code&gt;就代表告诉TypeScript编译器不要进行任何类型检查。&lt;/p&gt;
&lt;p&gt;在&lt;a href=&#34;https://devblogs.microsoft.com/typescript/announcing-typescript-3-0-rc-2/&#34;&gt;TypeScript 3.0&lt;/a&gt;特性中，出现了和&lt;code&gt;any&lt;/code&gt;类似的&lt;code&gt;unknown&lt;/code&gt;关键字。但是后者是type safe的.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;任何类型都可以赋值给&lt;code&gt;unknown&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unknown&lt;/code&gt;在类型检查后才能赋值给任意类型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外在设置编译属性&lt;code&gt;strictNullChecks&lt;/code&gt;为&lt;code&gt;false&lt;/code&gt;时，字面量&lt;code&gt;null&lt;/code&gt;和&lt;code&gt;undefined&lt;/code&gt;也可以赋值给任意类型变量。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;void&lt;/code&gt;用来表示一个函数没有返回值，&lt;code&gt;never&lt;/code&gt;表示不会发生的类型。例如抛出错误的函数、死循环函数的返回值类型、以及字面量空数组的元素类型。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; emptyArr = []; &lt;span class=&#34;comment&#34;&gt;// never[]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;func&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;never&lt;/span&gt; = (&lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Error&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Throw an error&amp;#x27;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;never&lt;/code&gt;类型间可以相互赋值，但不能和其他类型相互赋值。&lt;/p&gt;
&lt;h4 id=&#34;泛型&#34;&gt;&lt;a href=&#34;#泛型&#34; class=&#34;headerlink&#34; title=&#34;泛型&#34;&gt;&lt;/a&gt;泛型&lt;/h4&gt;&lt;p&gt;计算机算法在对封装类型操作时，往往不依赖于元素类型，这种情况下使用泛型描述，TypeScript会帮助推断元素类型，保证类型安全。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; reverse&amp;lt;T&amp;gt;(&lt;span class=&#34;attr&#34;&gt;items&lt;/span&gt;: T[]): T[] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; res1 = &lt;span class=&#34;title function_&#34;&gt;reverse&lt;/span&gt;([&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;res1[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] = &lt;span class=&#34;string&#34;&gt;&amp;#x27;1&amp;#x27;&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// Error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;res1[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] = &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// ok&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;高级类型&#34;&gt;&lt;a href=&#34;#高级类型&#34; class=&#34;headerlink&#34; title=&#34;高级类型&#34;&gt;&lt;/a&gt;高级类型&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;交叉类型&lt;/strong&gt;，写作&lt;code&gt;A &amp;amp; B&lt;/code&gt;，表示同时具有&lt;code&gt;A&lt;/code&gt;和&lt;code&gt;B&lt;/code&gt;两种类型的属性，新类型的对象可以使用A或者B的功能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;联合类型&lt;/strong&gt;，写作&lt;code&gt;A | B&lt;/code&gt;，表示是&lt;code&gt;A&lt;/code&gt;或&lt;code&gt;B&lt;/code&gt;其中一种类型，较常用在入参的内联描述中。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; extend&amp;lt;T, U&amp;gt;(&lt;span class=&#34;attr&#34;&gt;first&lt;/span&gt;: T, &lt;span class=&#34;attr&#34;&gt;second&lt;/span&gt;: U): T &amp;amp; U &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;res&lt;/span&gt;: &lt;span class=&#34;language-xml&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;T&lt;/span&gt; &amp;amp; &lt;span class=&#34;attr&#34;&gt;U&lt;/span&gt;&amp;gt;&lt;/span&gt; = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-xml&#34;&gt;    return &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-xml&#34;&gt;        ...first,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-xml&#34;&gt;        ...second&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-xml&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-xml&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-xml&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-xml&#34;&gt;function batchOperate(id: string | string[]) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-xml&#34;&gt;    operate([].concat(id));&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-xml&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;元组类型&lt;/strong&gt;，这不是一种新类型，它用来描述不同类型元素的集合，就像宽容的JS数组一样。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; user = [&lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;userInfo&lt;/span&gt;: user = [&lt;span class=&#34;string&#34;&gt;&amp;#x27;John&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;32&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; [userName, age] = userInfo;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;类型别名&#34;&gt;&lt;a href=&#34;#类型别名&#34; class=&#34;headerlink&#34; title=&#34;类型别名&#34;&gt;&lt;/a&gt;类型别名&lt;/h4&gt;&lt;p&gt;除开interface，还有&lt;code&gt;type&lt;/code&gt;可以更快捷地定义类型别名。在结合上述高级属性使用时，类型别名&lt;code&gt;type&lt;/code&gt;会是不错的选择。对比&lt;code&gt;interface&lt;/code&gt;和&lt;code&gt;type&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;interface&lt;/code&gt;定义基本的层级结构，它可以和&lt;code&gt;implements&lt;/code&gt;以及&lt;code&gt;extends&lt;/code&gt;配合使用&lt;/li&gt;
&lt;li&gt;在需要的类型不需要从头构造，而是从已有类型推导出来时，使用&lt;code&gt;type&lt;/code&gt;，它更像是给这些computed type一个语义化的名字&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;枚举&#34;&gt;&lt;a href=&#34;#枚举&#34; class=&#34;headerlink&#34; title=&#34;枚举&#34;&gt;&lt;/a&gt;枚举&lt;/h3&gt;&lt;p&gt;枚举是常见的组织互斥的一组常量的方式。TypeScript中用&lt;code&gt;enum&lt;/code&gt;关键字表示。默认的枚举是&lt;strong&gt;数字类型&lt;/strong&gt;的，即使用数字作为索引值；&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Color&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;Red&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;Green&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;Blue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; col = &lt;span class=&#34;title class_&#34;&gt;Color&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;Red&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; anotherCol = &lt;span class=&#34;title class_&#34;&gt;Color&lt;/span&gt;[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]; &lt;span class=&#34;comment&#34;&gt;// &amp;#x27;Red&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;col = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;// ok&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在使用数字类型时，枚举值可以用数字代替。默认情况下，枚举值&lt;strong&gt;从0开始&lt;/strong&gt;，当然可以用&lt;code&gt; = 1&lt;/code&gt;修改默认的枚举值。下面有一个枚举值和标记的组合用法。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AnimalFlags&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;None&lt;/span&gt;        = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;HasClaws&lt;/span&gt;    = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;CanFly&lt;/span&gt;      = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;EatsFish&lt;/span&gt;    = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;Endangered&lt;/span&gt;  = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Animal&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;flags&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;AnimalFlags&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  [&lt;span class=&#34;attr&#34;&gt;key&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;]: &lt;span class=&#34;built_in&#34;&gt;any&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在不同的&lt;code&gt;Animal&lt;/code&gt;的&lt;code&gt;flags&lt;/code&gt;做位运算时可以非常方便地完成布尔代数的一些操作。&lt;/p&gt;
&lt;p&gt;另外，枚举类型的值可以通过赋值成为字符串类型。在使用常量枚举时，TypeScript会将所有出现枚举的位置都替换成内联的常量，而不需要查找枚举变量，从而提高性能提升。&lt;/p&gt;
&lt;h3 id=&#34;从JavaScript中迁移&#34;&gt;&lt;a href=&#34;#从JavaScript中迁移&#34; class=&#34;headerlink&#34; title=&#34;从JavaScript中迁移&#34;&gt;&lt;/a&gt;从JavaScript中迁移&lt;/h3&gt;&lt;p&gt;总的来说有下面几步：&lt;/p&gt;
&lt;p&gt;Step1：添加&lt;code&gt;tsconfig.json&lt;/code&gt;文件。&lt;/p&gt;
&lt;p&gt;Step2：修改文件拓展名为&lt;code&gt;ts&lt;/code&gt;，使用&lt;code&gt;any&lt;/code&gt;避免干扰你主要工作的报错，记得在之后规范&lt;/p&gt;
&lt;p&gt;Step3：写新的TypeScript代码，减少&lt;code&gt;any&lt;/code&gt;使用&lt;/p&gt;
&lt;p&gt;Step4：回头为你的老代码添加类型&lt;/p&gt;
&lt;p&gt;Step5：为你的第三方库引用类型声明，绝大多数优秀的JS库都已经有人帮忙写好&lt;a href=&#34;https://github.com/DefinitelyTyped/DefinitelyTyped&#34;&gt;类型声明&lt;/a&gt;了&lt;/p&gt;
&lt;p&gt;Step6：对于那些没有声明的第三方库，需要你自己书写类型声明或者&lt;code&gt;declare module yourmodule&lt;/code&gt;一劳永逸&lt;/p&gt;
&lt;p&gt;上面提到的类型声明，即DefinitelyTyped通过npm包的方式引入，包有固定前缀&lt;code&gt;@types&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;有些类型声明的引入会带来全局scope的定义，可以通过在&lt;code&gt;tsconfig.json&lt;/code&gt;里配置&lt;code&gt;types&lt;/code&gt;来限制引入的声明文件&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;compilerOptions&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;types&amp;quot;&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;string&#34;&gt;&amp;quot;jquery&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;类型声明文件&#34;&gt;&lt;a href=&#34;#类型声明文件&#34; class=&#34;headerlink&#34; title=&#34;类型声明文件&#34;&gt;&lt;/a&gt;类型声明文件&lt;/h3&gt;&lt;p&gt;通过&lt;code&gt;declare&lt;/code&gt;关键字告诉TypeScript，你正在表述其他位置已经存在的全局变量。强烈建议把所有的声都放在以&lt;code&gt;.d.ts&lt;/code&gt;结尾的文件名的文件内。环境声明不会被编译成代码。&lt;/p&gt;
&lt;p&gt;在这样的模块、变量、类型声明文件里，&lt;code&gt;interface&lt;/code&gt;是最常见的。用户代码中可以用类实现这些接口。但是请记住，&lt;code&gt;interface&lt;/code&gt;旨在声明JavaScript中可能存在的数据结构。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Point&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;x&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;y&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;z&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// New member&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;MyPoint&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Point&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// ERROR : missing member `z`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;x&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;y&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;lib-d-ts&#34;&gt;&lt;a href=&#34;#lib-d-ts&#34; class=&#34;headerlink&#34; title=&#34;lib.d.ts&#34;&gt;&lt;/a&gt;&lt;code&gt;lib.d.ts&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;为了便于你能快速开始书写类型检查的代码，TypeScript自带了BOM的变量声明（包含window、document、math等）位于&lt;code&gt;lib.d.ts&lt;/code&gt;中。你可以在你的项目下添加&lt;code&gt;global.d.ts&lt;/code&gt;，对已有的全局变量做自己的拓展。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Window&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;(): &lt;span class=&#34;built_in&#34;&gt;void&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;DateConstructor&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;lastDay&lt;/span&gt;(): &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;window&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Date&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;lastDay&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;你在自己定义的&lt;code&gt;global.d.ts&lt;/code&gt;中可以通过拓展global，修改全局空间内的类型定义。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;declare&lt;/span&gt; &lt;span class=&#34;variable language_&#34;&gt;global&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;String&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;endsWith&lt;/span&gt;(&lt;span class=&#34;attr&#34;&gt;suffix&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;): &lt;span class=&#34;built_in&#34;&gt;boolean&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;编译选项&#34;&gt;&lt;a href=&#34;#编译选项&#34; class=&#34;headerlink&#34; title=&#34;编译选项&#34;&gt;&lt;/a&gt;编译选项&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;指定&lt;code&gt;--noLib&lt;/code&gt;可以排除TypeScript自动引入的&lt;code&gt;lib.d.ts&lt;/code&gt;，这通常出现在&lt;ul&gt;
&lt;li&gt;运行JavaScript的环境和标准浏览器相距甚远&lt;/li&gt;
&lt;li&gt;你希望严格控制全局变量的使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;指定&lt;code&gt;--lib&lt;/code&gt;可以对编译环境进行细粒度控制引入的包类型&lt;ul&gt;
&lt;li&gt;tsc中，&lt;code&gt;tsc --target es5 --lib dom,es6&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;也可以在&lt;code&gt;tsconfig.json&lt;/code&gt;中声明&lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;&amp;quot;compilerOptions&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;lib&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;dom&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;es6&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果没有指定&lt;code&gt;--lib&lt;/code&gt;，TypeScript会根据当前编译选项中的&lt;code&gt;target&lt;/code&gt;导入默认库。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--target&lt;/code&gt;为es5时，导入es5、dom、scriptdom&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--target&lt;/code&gt;为es6时，导入es6、dom、dom.iterable、scripthost&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;函数&#34;&gt;&lt;a href=&#34;#函数&#34; class=&#34;headerlink&#34; title=&#34;函数&#34;&gt;&lt;/a&gt;函数&lt;/h3&gt;&lt;p&gt;函数注解可以使用内联或&lt;code&gt;interface&lt;/code&gt;的方式。通常编译器可以根据代码自动推断函数的返回类型。函数入参的可选参数通过类型注解前的&lt;code&gt;?&lt;/code&gt;说明。另外，TypeScript允许你&lt;strong&gt;声明&lt;/strong&gt;函数重载，注意，这里只是声明，重载需要自己实现。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;adult&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;itself: human&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;adult&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;itself: human, mate: human, children: human[]&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;adult&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;itself: human, mate?: human, children?: human[]&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!mate) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123; itself &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    itself,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    mate,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;children&lt;/span&gt;: children || []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;adult&lt;/span&gt;(yourself, anotherGuy); &lt;span class=&#34;comment&#34;&gt;// Error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;可调用的&#34;&gt;&lt;a href=&#34;#可调用的&#34; class=&#34;headerlink&#34; title=&#34;可调用的&#34;&gt;&lt;/a&gt;可调用的&lt;/h4&gt;&lt;p&gt;可以用类型别名或接口表示可调用的类型。函数重载和构造函数定义都可以在其中实现。使用&lt;code&gt;new&lt;/code&gt;作为前缀后，需要使用&lt;code&gt;new&lt;/code&gt;关键字去调用这个函数。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Overloaded&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  (&lt;span class=&#34;attr&#34;&gt;foo&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;) =&amp;gt; &lt;span class=&#34;built_in&#34;&gt;void&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;foo: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ConstructorFunc&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; (): &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;除此之外，还可以使用箭头函数作内联函数注解，但这种时候无法表示重载。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;foo&lt;/span&gt;: &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;bar: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; = &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;bar&lt;/span&gt; =&amp;gt;&lt;/span&gt; bar.&lt;span class=&#34;title function_&#34;&gt;toString&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;字面量类型&#34;&gt;&lt;a href=&#34;#字面量类型&#34; class=&#34;headerlink&#34; title=&#34;字面量类型&#34;&gt;&lt;/a&gt;字面量类型&lt;/h3&gt;&lt;p&gt;字面量 + 联合类型构成TS中常用的字面量类型。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Seasons&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;spring&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;summer&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;autumn&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;winter&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; binary = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; | &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; bools = &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt; | &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;很多时候字面量类型会通过&lt;code&gt;keyof&lt;/code&gt;一个键值对的形式来构造。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 用于创建字符串列表映射至 `K: V` 的函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; strEnum&amp;lt;T &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;&amp;gt;(&lt;span class=&#34;attr&#34;&gt;o&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Array&lt;/span&gt;&amp;lt;T&amp;gt;): &amp;#123; [K &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; T]: K &amp;#125; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; o.&lt;span class=&#34;title function_&#34;&gt;reduce&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;res, key&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    res[key] = key;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;, &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;create&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 创建 K: V&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Direction&lt;/span&gt; = &lt;span class=&#34;title function_&#34;&gt;strEnum&lt;/span&gt;([&lt;span class=&#34;string&#34;&gt;&amp;#x27;North&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;South&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;East&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;West&amp;#x27;&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 创建一个类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Direction&lt;/span&gt; = keyof &lt;span class=&#34;keyword&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Direction&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;类型断言&#34;&gt;&lt;a href=&#34;#类型断言&#34; class=&#34;headerlink&#34; title=&#34;类型断言&#34;&gt;&lt;/a&gt;类型断言&lt;/h3&gt;&lt;p&gt;TypeScript有自己的类型推断，但是允许你使用&lt;strong&gt;类型断言&lt;/strong&gt;去覆盖。通过&lt;code&gt;as Something&lt;/code&gt;或&lt;code&gt;&amp;lt;Something&amp;gt;&lt;/code&gt;的方式。但是后者接近JSX语法，所以更多使用前者。&lt;/p&gt;
&lt;p&gt;断言是编译时的，为编译器提供分析代码的方法。TypeScript在进行类型断言时，会判断源类型&lt;code&gt;S&lt;/code&gt;是否是目标类型&lt;code&gt;T&lt;/code&gt;的子集，若不是则不能成功断言。&lt;/p&gt;
&lt;h3 id=&#34;类型保护&#34;&gt;&lt;a href=&#34;#类型保护&#34; class=&#34;headerlink&#34; title=&#34;类型保护&#34;&gt;&lt;/a&gt;类型保护&lt;/h3&gt;&lt;p&gt;使用JS中&lt;code&gt;typeof&lt;/code&gt;和&lt;code&gt;instanceof&lt;/code&gt;可以帮助TypeScript推导出条件语句内的变量类型。使用&lt;code&gt;in&lt;/code&gt;操作符，也可以帮助TypeScript判断类型。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; A &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;x&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; B &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;y&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;doStuff&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;q: A | B&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;string&#34;&gt;&amp;#x27;x&amp;#x27;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; q) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// q: A&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// q: B&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在联合类型中，如果有类型使用字面量，TypeScript甚至可以通过判断字面量确定变量类型。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Foo&lt;/span&gt; = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;kind&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;foo&amp;#x27;&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// 字面量类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;foo&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Bar&lt;/span&gt; = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;kind&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;bar&amp;#x27;&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// 字面量类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;bar&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;doStuff&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;arg: Foo | Bar&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (arg.&lt;span class=&#34;property&#34;&gt;kind&lt;/span&gt; === &lt;span class=&#34;string&#34;&gt;&amp;#x27;foo&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(arg.&lt;span class=&#34;property&#34;&gt;foo&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;// ok&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(arg.&lt;span class=&#34;property&#34;&gt;bar&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;// Error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 一定是 Bar&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(arg.&lt;span class=&#34;property&#34;&gt;foo&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;// Error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(arg.&lt;span class=&#34;property&#34;&gt;bar&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;// ok&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;最后，弥补JS中plain object没有&lt;code&gt;instanceof&lt;/code&gt;或&lt;code&gt;typeof&lt;/code&gt;自我检查的漏洞。TypeScript提供了&lt;code&gt;is&lt;/code&gt;允许自定义类型判断。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 仅仅是一个 interface&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Foo&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;foo&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;common&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Bar&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;bar&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;common&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 用户自己定义的类型保护！&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;isFoo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;arg: Foo | Bar&lt;/span&gt;): arg is &lt;span class=&#34;title class_&#34;&gt;Foo&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; (arg &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Foo&lt;/span&gt;).&lt;span class=&#34;property&#34;&gt;foo&lt;/span&gt; !== &lt;span class=&#34;literal&#34;&gt;undefined&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;类型推断&#34;&gt;&lt;a href=&#34;#类型推断&#34; class=&#34;headerlink&#34; title=&#34;类型推断&#34;&gt;&lt;/a&gt;类型推断&lt;/h3&gt;&lt;p&gt;TypeScript可以根据一些规则推断出变量类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义变量&lt;/li&gt;
&lt;li&gt;函数返回&lt;/li&gt;
&lt;li&gt;赋值&lt;/li&gt;
&lt;li&gt;结构化（数组元素、对象属性）&lt;/li&gt;
&lt;li&gt;解构&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在推断不出类型或使用第三方JS库时，类型会被判定为&lt;code&gt;any&lt;/code&gt;。开启编译选项&lt;code&gt;noImplicitAny&lt;/code&gt;可以避免这种问题。&lt;/p&gt;
&lt;h3 id=&#34;类型兼容&#34;&gt;&lt;a href=&#34;#类型兼容&#34; class=&#34;headerlink&#34; title=&#34;类型兼容&#34;&gt;&lt;/a&gt;类型兼容&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;结构化：只要对象结构匹配，名称无关紧要&lt;/li&gt;
&lt;li&gt;多态性：子类实例可以复制给基类实例，相反则不行&lt;/li&gt;
&lt;li&gt;函数&lt;ul&gt;
&lt;li&gt;返回类型：数据较多的可以赋值给数据较少的&lt;/li&gt;
&lt;li&gt;入参：入参较少的可以赋值给入参较多的&lt;/li&gt;
&lt;li&gt;可选参数、Rest参数：可以相互赋值（可选和必选仅在&lt;code&gt;strictNullChecks&lt;/code&gt;选中时相互兼容）&lt;/li&gt;
&lt;li&gt;入参类型：父类子类相互兼容（牺牲安全性确保便利性）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;枚举：和数字类型兼容、不同枚举间不兼容&lt;/li&gt;
&lt;li&gt;类：仅比较&lt;strong&gt;实例成员和实例方法&lt;/strong&gt;，不比较构造函数和静态成员，&lt;code&gt;private&lt;/code&gt;和&lt;code&gt;protected&lt;/code&gt;成员必须来自相同的类&lt;/li&gt;
&lt;li&gt;泛型：泛型对兼容性没有影响（这可能会带来一些潜在问题）&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Poin2D&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;x&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;y&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;iTakePoint2D&lt;/span&gt; = (&lt;span class=&#34;params&#34;&gt;point: Point2D&lt;/span&gt;) =&amp;gt; &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;iTakePoint3D&lt;/span&gt; = (&lt;span class=&#34;params&#34;&gt;point: Point3D&lt;/span&gt;) =&amp;gt; &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;iTakePoint3D = iTakePoint2D; &lt;span class=&#34;comment&#34;&gt;// ok, 这是合理的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;iTakePoint2D = iTakePoint3D; &lt;span class=&#34;comment&#34;&gt;// also ok，为什么？&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;readonly&#34;&gt;&lt;a href=&#34;#readonly&#34; class=&#34;headerlink&#34; title=&#34;readonly&#34;&gt;&lt;/a&gt;readonly&lt;/h3&gt;&lt;p&gt;用&lt;code&gt;readonly&lt;/code&gt;标记接口属性，表示预期不可修改。获取使用&lt;code&gt;Readonly&lt;/code&gt;封装一个泛型&lt;code&gt;T&lt;/code&gt;，表示泛型内的属性均不可修改。同样地，你可以为索引签名声明&lt;code&gt;readonly&lt;/code&gt;，表示所有索引元素均不可修改。还有些情况下，如果属性配置了&lt;code&gt;getter&lt;/code&gt;，但没有&lt;code&gt;setter&lt;/code&gt;也会被认为是只读的。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Foo&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;readonly&lt;/span&gt; [&lt;span class=&#34;attr&#34;&gt;x&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;]: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;readonly&lt;/code&gt;和&lt;code&gt;const&lt;/code&gt;的主要不同在于，前者用来修改属性，后者用于变量。&lt;/p&gt;
&lt;h3 id=&#34;索引签名&#34;&gt;&lt;a href=&#34;#索引签名&#34; class=&#34;headerlink&#34; title=&#34;索引签名&#34;&gt;&lt;/a&gt;索引签名&lt;/h3&gt;&lt;p&gt;索引即数组或键值对的索引。TypeScript中索引类型只能是&lt;code&gt;string&lt;/code&gt;或&lt;code&gt;number&lt;/code&gt;类型。这意味着，也可以使用字面量类型作为索引类型。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Index&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;a&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;b&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;c&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;FromIndex&lt;/span&gt; = &amp;#123; [k &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Index&lt;/span&gt;]?: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;good&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;FromIndex&lt;/span&gt; = &amp;#123; &lt;span class=&#34;attr&#34;&gt;b&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;c&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在一些特殊场景下，可以同时支持&lt;code&gt;string&lt;/code&gt;和&lt;code&gt;number&lt;/code&gt;类型。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ArrStr&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  [&lt;span class=&#34;attr&#34;&gt;key&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;]: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; | &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// 必须包括所用成员类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  [&lt;span class=&#34;attr&#34;&gt;index&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;]: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// 字符串索引类型的子级&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;流动的类型&#34;&gt;&lt;a href=&#34;#流动的类型&#34; class=&#34;headerlink&#34; title=&#34;流动的类型&#34;&gt;&lt;/a&gt;流动的类型&lt;/h3&gt;&lt;p&gt;&lt;code&gt;typeof&lt;/code&gt;可以捕获变量、类成员类型。使用&lt;code&gt;typeof&lt;/code&gt;在捕获一个字符串字面量时，得到的类型是字面量类型。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; foo = &lt;span class=&#34;number&#34;&gt;123&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;bar&lt;/span&gt;: &lt;span class=&#34;keyword&#34;&gt;typeof&lt;/span&gt; foo; &lt;span class=&#34;comment&#34;&gt;// &amp;#x27;bar&amp;#x27; 类型与 &amp;#x27;foo&amp;#x27; 类型相同（在这里是： &amp;#x27;number&amp;#x27;）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 捕获字符串的类型与值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; faz = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Hello World&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 使用一个捕获的类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;baz&lt;/span&gt;: &lt;span class=&#34;keyword&#34;&gt;typeof&lt;/span&gt; faz;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// bar 仅能被赋值 &amp;#x27;Hello World&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;baz = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Hello World&amp;#x27;&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// ok&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;baz = &lt;span class=&#34;string&#34;&gt;&amp;#x27;anything else&amp;#x27;&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// Error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;使用&lt;code&gt;keyof&lt;/code&gt;捕获一个类型的键。&lt;/p&gt;
&lt;h3 id=&#34;ThisType&#34;&gt;&lt;a href=&#34;#ThisType&#34; class=&#34;headerlink&#34; title=&#34;ThisType&#34;&gt;&lt;/a&gt;ThisType&lt;/h3&gt;&lt;p&gt;在对象字面量方法的类型定义上声明&lt;code&gt;ThisType()&lt;/code&gt;可以修改发放内&lt;code&gt;this&lt;/code&gt;的类型，这常被用在&lt;code&gt;this&lt;/code&gt;值被重新绑定的情况。&lt;/p&gt;
&lt;h2 id=&#34;Tips&#34;&gt;&lt;a href=&#34;#Tips&#34; class=&#34;headerlink&#34; title=&#34;Tips&#34;&gt;&lt;/a&gt;Tips&lt;/h2&gt;&lt;h3 id=&#34;bind的隐患&#34;&gt;&lt;a href=&#34;#bind的隐患&#34; class=&#34;headerlink&#34; title=&#34;bind的隐患&#34;&gt;&lt;/a&gt;&lt;code&gt;bind&lt;/code&gt;的隐患&lt;/h3&gt;&lt;p&gt;在&lt;code&gt;lib.d.ts&lt;/code&gt;中，对&lt;code&gt;bind&lt;/code&gt;的定义如下:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;attr&#34;&gt;thisArg&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;any&lt;/span&gt;, ...&lt;span class=&#34;attr&#34;&gt;argArray&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;any&lt;/span&gt;[]): &lt;span class=&#34;built_in&#34;&gt;any&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;由于返回值是&lt;code&gt;any&lt;/code&gt;类型，意味着bind返回的函数将失去类型检查（最新的TS 3.2已经优化了这个问题）。&lt;/p&gt;
&lt;h3 id=&#34;柯里化函数&#34;&gt;&lt;a href=&#34;#柯里化函数&#34; class=&#34;headerlink&#34; title=&#34;柯里化函数&#34;&gt;&lt;/a&gt;柯里化函数&lt;/h3&gt;&lt;p&gt;用一系列箭头表示。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 一个柯里化函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;add&lt;/span&gt; = (&lt;span class=&#34;params&#34;&gt;x: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;&lt;/span&gt;) =&amp;gt; &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;y: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; x + y;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 简单使用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;add&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;123&lt;/span&gt;)(&lt;span class=&#34;number&#34;&gt;456&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 部分应用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; add123 = &lt;span class=&#34;title function_&#34;&gt;add&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;123&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// fully apply the function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;add123&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;456&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;一些建议&#34;&gt;&lt;a href=&#34;#一些建议&#34; class=&#34;headerlink&#34; title=&#34;一些建议&#34;&gt;&lt;/a&gt;一些建议&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;使用继承而不是&lt;code&gt;as&lt;/code&gt;来实现泛型实例化&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;as&lt;/code&gt;来初始化对象字面量的空对象&lt;/li&gt;
&lt;li&gt;尝试使用类组织代码&lt;/li&gt;
&lt;li&gt;小心使用&lt;code&gt;setter&lt;/code&gt;，不要牺牲代码可读性&lt;/li&gt;
&lt;li&gt;在参数名可以很好提高可读性、入参很多时，考虑让函数接受一个对象参数&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Reflect-Metadata&#34;&gt;&lt;a href=&#34;#Reflect-Metadata&#34; class=&#34;headerlink&#34; title=&#34;Reflect Metadata&#34;&gt;&lt;/a&gt;Reflect Metadata&lt;/h3&gt;&lt;p&gt;Reflect Metadata是ES7的提案，用于在声明时添加和读取元数据。Reflect Metadata的API可以用于类或类属性上，&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Reflect&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;metadata&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;inClass&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;A&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Test&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;meta&#34;&gt;@Reflect&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;metadata&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;inMethod&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;B&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;hello&lt;/span&gt;(): &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;hello world&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;Reflect&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;getMetadata&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;inClass&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;title class_&#34;&gt;Test&lt;/span&gt;)); &lt;span class=&#34;comment&#34;&gt;// &amp;#x27;A&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;Reflect&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;getMetadata&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;inMethod&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Test&lt;/span&gt;(), &lt;span class=&#34;string&#34;&gt;&amp;#x27;hello&amp;#x27;&lt;/span&gt;)); &lt;span class=&#34;comment&#34;&gt;// &amp;#x27;B&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;因此可以通过&lt;code&gt;Reflect.getMetadata&lt;/code&gt;的API来获取类相关的元数据。&lt;/p&gt;
&lt;h4 id=&#34;自定义metadatakey&#34;&gt;&lt;a href=&#34;#自定义metadatakey&#34; class=&#34;headerlink&#34; title=&#34;自定义metadatakey&#34;&gt;&lt;/a&gt;自定义&lt;code&gt;metadatakey&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;可以定义自己的reflect metadata。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;classDecorator&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;): &lt;span class=&#34;title class_&#34;&gt;ClassDecorator&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;target&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 在类上定义元数据，key 为 `classMetaData`，value 为 `a`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;Reflect&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;defineMetadata&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;classMetaData&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;a&amp;#x27;&lt;/span&gt;, target);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;methodDecorator&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;): &lt;span class=&#34;title class_&#34;&gt;MethodDecorator&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;target, key, descriptor&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 在类的原型属性 &amp;#x27;someMethod&amp;#x27; 上定义元数据，key 为 `methodMetaData`，value 为 `b`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;Reflect&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;defineMetadata&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;methodMetaData&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;b&amp;#x27;&lt;/span&gt;, target, key);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@classDecorator&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;SomeClass&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;meta&#34;&gt;@methodDecorator&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;someMethod&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Reflect&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;getMetadata&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;classMetaData&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;title class_&#34;&gt;SomeClass&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;// &amp;#x27;a&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Reflect&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;getMetadata&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;methodMetaData&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;SomeClass&lt;/span&gt;(), &lt;span class=&#34;string&#34;&gt;&amp;#x27;someMethod&amp;#x27;&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;// &amp;#x27;b&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;可以借助Reflect Metadata的这个特点，实现诸如控制反转、依赖注入、装饰器等功能。&lt;/p&gt;
&lt;h3 id=&#34;条件类型&#34;&gt;&lt;a href=&#34;#条件类型&#34; class=&#34;headerlink&#34; title=&#34;条件类型&#34;&gt;&lt;/a&gt;条件类型&lt;/h3&gt;&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;T &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; U ? &lt;span class=&#34;attr&#34;&gt;X&lt;/span&gt;: Y&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;TypeScript 2.8的一个&lt;a href=&#34;https://github.com/Microsoft/TypeScript/pull/21496&#34;&gt;PR&lt;/a&gt;里第一次提到条件类型。条件类型主要规则如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;上式表示&lt;strong&gt;T如果可以赋值给U&lt;/strong&gt;，返回类型&lt;code&gt;X&lt;/code&gt;，否则返回&lt;code&gt;Y&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;U&lt;/code&gt;中出现&lt;code&gt;infer&lt;/code&gt;时，TypeScript会去推断&lt;code&gt;infer&lt;/code&gt;后的类型变量（假设是&lt;code&gt;V&lt;/code&gt;），如果&lt;code&gt;V&lt;/code&gt;出在协变位置，则返回&lt;code&gt;V&lt;/code&gt;所有可能性的联合类型，如果&lt;code&gt;V&lt;/code&gt;出现在逆变位置，则返回&lt;code&gt;V&lt;/code&gt;所有可能性的交叉类型（参考：&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%8D%8F%E5%8F%98%E4%B8%8E%E9%80%86%E5%8F%98&#34;&gt;协变与逆变&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;分布条件类型&#34;&gt;&lt;a href=&#34;#分布条件类型&#34; class=&#34;headerlink&#34; title=&#34;分布条件类型&#34;&gt;&lt;/a&gt;分布条件类型&lt;/h4&gt;&lt;p&gt;在检查类型（&lt;code&gt;extends&lt;/code&gt;前的类型参数）是原始类型（即没有被泛型等封装）时，称为分布条件类型（Distributive conditional types）。在实例化为实际类型时，联合类型会被拆分开。&lt;/p&gt;
&lt;p&gt;例如，&lt;code&gt;T&lt;/code&gt;实例化为&lt;code&gt;A | B | C&lt;/code&gt;时，&lt;code&gt;T extends U ? X : Y&lt;/code&gt;会被解析成&lt;code&gt;(A extends U ? X : Y) | (B extends U ? X : Y) | (C extends U ? X : Y)&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;FunctionPropertyNames&lt;/span&gt;&amp;lt;T&amp;gt; = &amp;#123; [K &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; keyof T]: T[K] &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Function&lt;/span&gt; ? K : &lt;span class=&#34;built_in&#34;&gt;never&lt;/span&gt; &amp;#125;[keyof T];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;FunctionProperties&lt;/span&gt;&amp;lt;T&amp;gt; = &lt;span class=&#34;title class_&#34;&gt;Pick&lt;/span&gt;&amp;lt;T, &lt;span class=&#34;title class_&#34;&gt;FunctionPropertyNames&lt;/span&gt;&amp;lt;T&amp;gt;&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;NonFunctionPropertyNames&lt;/span&gt;&amp;lt;T&amp;gt; = &amp;#123; [K &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; keyof T]: T[K] &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Function&lt;/span&gt; ? &lt;span class=&#34;built_in&#34;&gt;never&lt;/span&gt; : K &amp;#125;[keyof T];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;NonFunctionProperties&lt;/span&gt;&amp;lt;T&amp;gt; = &lt;span class=&#34;title class_&#34;&gt;Pick&lt;/span&gt;&amp;lt;T, &lt;span class=&#34;title class_&#34;&gt;NonFunctionPropertyNames&lt;/span&gt;&amp;lt;T&amp;gt;&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Part&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;name&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;subparts&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Part&lt;/span&gt;[];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;updatePart&lt;/span&gt;(&lt;span class=&#34;attr&#34;&gt;newName&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;): &lt;span class=&#34;built_in&#34;&gt;void&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;variable constant_&#34;&gt;T40&lt;/span&gt; = &lt;span class=&#34;title class_&#34;&gt;FunctionPropertyNames&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;Part&lt;/span&gt;&amp;gt;;  &lt;span class=&#34;comment&#34;&gt;// &amp;quot;updatePart&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;variable constant_&#34;&gt;T41&lt;/span&gt; = &lt;span class=&#34;title class_&#34;&gt;NonFunctionPropertyNames&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;Part&lt;/span&gt;&amp;gt;;  &lt;span class=&#34;comment&#34;&gt;// &amp;quot;id&amp;quot; | &amp;quot;name&amp;quot; | &amp;quot;subparts&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;variable constant_&#34;&gt;T42&lt;/span&gt; = &lt;span class=&#34;title class_&#34;&gt;FunctionProperties&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;Part&lt;/span&gt;&amp;gt;;  &lt;span class=&#34;comment&#34;&gt;// &amp;#123; updatePart(newName: string): void &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;variable constant_&#34;&gt;T43&lt;/span&gt; = &lt;span class=&#34;title class_&#34;&gt;NonFunctionProperties&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;Part&lt;/span&gt;&amp;gt;;  &lt;span class=&#34;comment&#34;&gt;// &amp;#123; id: number, name: string, subparts: Part[] &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;infer&#34;&gt;&lt;a href=&#34;#infer&#34; class=&#34;headerlink&#34; title=&#34;infer&#34;&gt;&lt;/a&gt;&lt;code&gt;infer&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;如上文所说，&lt;code&gt;infer&lt;/code&gt;最初出现是用来表示&lt;code&gt;extends&lt;/code&gt;条件语句中待推断的类型。下文中若T满足&lt;code&gt;(param: infer P) =&amp;gt; any&lt;/code&gt;类型，则推出&lt;code&gt;P&lt;/code&gt;类型。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ParamType&lt;/span&gt;&amp;lt;T&amp;gt; = T &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; (&lt;span class=&#34;attr&#34;&gt;param&lt;/span&gt;: infer P) =&amp;gt; &lt;span class=&#34;built_in&#34;&gt;any&lt;/span&gt; ? P : T;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;infer&lt;/code&gt;有下面一些常规使用场景。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 获取返回值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ReturnType&lt;/span&gt;&amp;lt;T&amp;gt; = T &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; (...&lt;span class=&#34;attr&#34;&gt;args&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;any&lt;/span&gt;[]) =&amp;gt; infer P ? P : &lt;span class=&#34;built_in&#34;&gt;any&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 获取构造函数的入参或实例类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Constructor&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; (...&lt;span class=&#34;attr&#34;&gt;args&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;any&lt;/span&gt;[]) =&amp;gt; &lt;span class=&#34;built_in&#34;&gt;any&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 获取参数类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ConstructorParameters&lt;/span&gt;&amp;lt;T &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; (...&lt;span class=&#34;attr&#34;&gt;args&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;any&lt;/span&gt;[]) =&amp;gt; &lt;span class=&#34;built_in&#34;&gt;any&lt;/span&gt;&amp;gt; = T &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; (...&lt;span class=&#34;attr&#34;&gt;args&lt;/span&gt;: infer P) =&amp;gt; &lt;span class=&#34;built_in&#34;&gt;any&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ? P&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  : &lt;span class=&#34;built_in&#34;&gt;never&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 获取实例类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;InstanceType&lt;/span&gt;&amp;lt;T &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; (...&lt;span class=&#34;attr&#34;&gt;args&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;any&lt;/span&gt;[]) =&amp;gt; &lt;span class=&#34;built_in&#34;&gt;any&lt;/span&gt;&amp;gt; = T &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; (...&lt;span class=&#34;attr&#34;&gt;args&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;any&lt;/span&gt;[]) =&amp;gt; infer R ? R : &lt;span class=&#34;built_in&#34;&gt;any&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;联合&lt;code&gt;infer&lt;/code&gt;和分布条件类型，可以实现一些骚操作，如tuple、intersection、union之间的转换。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; tupleToIntersection&amp;lt;T&amp;gt; = T[&lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;]；&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; unionToIntersection&amp;lt;T&amp;gt; = (T &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;any&lt;/span&gt; ? &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;k: T&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;void&lt;/span&gt; : &lt;span class=&#34;built_in&#34;&gt;never&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; (&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;k: infer R&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;void&lt;/span&gt;) ? R : &lt;span class=&#34;built_in&#34;&gt;never&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;如原文列的&lt;a href=&#34;https://github.com/LeetCode-OpenSource/hire/blob/master/typescript_zh.md&#34;&gt;LeetCode TypeScript面试题&lt;/a&gt;。借助强大的条件类型和&lt;code&gt;infer&lt;/code&gt;就能实现。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt;&amp;lt;T&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  payload?: T;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 预期的类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Result&lt;/span&gt; = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  asyncMethod&amp;lt;T, U&amp;gt;(&lt;span class=&#34;attr&#34;&gt;input&lt;/span&gt;: T): &lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt;&amp;lt;U&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  syncMethod&amp;lt;T, U&amp;gt;(&lt;span class=&#34;attr&#34;&gt;action&lt;/span&gt;: T): &lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt;&amp;lt;U&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Module&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;count&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;message&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  asyncMethod&amp;lt;T, U&amp;gt;(&lt;span class=&#34;attr&#34;&gt;input&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Promise&lt;/span&gt;&amp;lt;T&amp;gt;): &lt;span class=&#34;title class_&#34;&gt;Promise&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt;&amp;lt;U&amp;gt;&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  syncMethod&amp;lt;T, U&amp;gt;(&lt;span class=&#34;attr&#34;&gt;action&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt;&amp;lt;T&amp;gt;): &lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt;&amp;lt;U&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;FuncNames&lt;/span&gt;&amp;lt;T&amp;gt; = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  [K &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; keyof T]: T[K] &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Function&lt;/span&gt; ? K : &lt;span class=&#34;built_in&#34;&gt;never&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;[keyof T]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;FuncProperties&lt;/span&gt;&amp;lt;T&amp;gt; = &lt;span class=&#34;title class_&#34;&gt;Pick&lt;/span&gt;&amp;lt;T, &lt;span class=&#34;title class_&#34;&gt;FuncNames&lt;/span&gt;&amp;lt;T&amp;gt;&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;UnPackedParams&lt;/span&gt;&amp;lt;T&amp;gt; = T &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Promise&lt;/span&gt;&amp;lt;infer R&amp;gt; ? R :&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  T &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt;&amp;lt;infer R&amp;gt; ? R : T;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;UnPackedReturn&lt;/span&gt;&amp;lt;T&amp;gt; = T &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Promise&lt;/span&gt;&amp;lt;infer R&amp;gt; ? R : T;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;UnPackedFunction&lt;/span&gt;&amp;lt;T&amp;gt; = T &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; (&lt;span class=&#34;attr&#34;&gt;params&lt;/span&gt;: infer U) =&amp;gt; infer R ? &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;params: UnPackedParams&amp;lt;U&amp;gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;UnPackedReturn&lt;/span&gt;&amp;lt;R&amp;gt; : &lt;span class=&#34;built_in&#34;&gt;never&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Resolve&lt;/span&gt;&amp;lt;T&amp;gt; = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  [K &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; keyof T]: &lt;span class=&#34;title class_&#34;&gt;UnPackedFunction&lt;/span&gt;&amp;lt;T[K]&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 修改 Connect 的类型，让 connected 的类型变成预期的类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Connect&lt;/span&gt; = &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;module&lt;/span&gt;: Module&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Resolve&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;FuncProperties&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;Module&lt;/span&gt;&amp;gt;&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;TypeScript编译原理&#34;&gt;&lt;a href=&#34;#TypeScript编译原理&#34; class=&#34;headerlink&#34; title=&#34;TypeScript编译原理&#34;&gt;&lt;/a&gt;TypeScript编译原理&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;这部分内容较为简要。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;编译器源文件位于&lt;code&gt;src/compiler&lt;/code&gt;下，主要由以下部分组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;扫描器 Scanner&lt;/li&gt;
&lt;li&gt;解析器 Parser&lt;/li&gt;
&lt;li&gt;绑定器 Binder&lt;/li&gt;
&lt;li&gt;检查器 Checker&lt;/li&gt;
&lt;li&gt;发射器 Emitter&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;处理流程分下面几步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Source --扫描器--&amp;gt; Token流&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Token流 --解析器--&amp;gt; AST(抽象语法树)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AST --绑定器--&amp;gt; Symbols&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AST + 符号 --检查器--&amp;gt; 类型验证&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AST + 检查器 --发射器--&amp;gt; JavaScript代码&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;重要文件&#34;&gt;&lt;a href=&#34;#重要文件&#34; class=&#34;headerlink&#34; title=&#34;重要文件&#34;&gt;&lt;/a&gt;重要文件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;core.ts&lt;/code&gt; TypeScript编译器使用的核心工具集&lt;/li&gt;
&lt;li&gt;&lt;code&gt;types.ts&lt;/code&gt; 包含整个编译器使用的关键数据结构和接口&lt;/li&gt;
&lt;li&gt;&lt;code&gt;system.ts&lt;/code&gt; 控制编译器和操作系统的所有交互&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;程序与抽象语法树&#34;&gt;&lt;a href=&#34;#程序与抽象语法树&#34; class=&#34;headerlink&#34; title=&#34;程序与抽象语法树&#34;&gt;&lt;/a&gt;程序与抽象语法树&lt;/h3&gt;&lt;p&gt;这里的“程序”指一个“编译上下文”。它包含SourceFile和编译选项。TypeScript有API获取SourceFile列表，每个SourceFile都是一棵抽象语法树的根节点。&lt;/p&gt;
&lt;h4 id=&#34;节点&#34;&gt;&lt;a href=&#34;#节点&#34; class=&#34;headerlink&#34; title=&#34;节点&#34;&gt;&lt;/a&gt;节点&lt;/h4&gt;&lt;p&gt;节点（Node）是AST的基本组成单位。Node有一些关键成员：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TextRange&lt;/code&gt; 标识节点在源文件的起止位置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;parent?: Node&lt;/code&gt; 标识节点在AST中的父节点&lt;/li&gt;
&lt;li&gt;标志（flags）和修饰符（modifier）等有助于节点遍历的成员&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面有一些常用工具函数的用法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ts.forEachChild&lt;/code&gt; 用来访问任一节点的所有子节点。这个函数会根据每个节点的&lt;code&gt;node.kind&lt;/code&gt;判断node类型，然后再在子节点上调用cbNode。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ts.SyntaxKind&lt;/code&gt;是一个节点类型的常量枚举，用以表示不同的语法树节点&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ts.getLeadingCommentRanges&lt;/code&gt;和&lt;code&gt;ts.getTrailingCommentRanges&lt;/code&gt;分别获取给定位置第一个换行符到token和之前的注释范围。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ts.getStart&lt;/code&gt;和&lt;code&gt;ts.getFullStart&lt;/code&gt;分别获取一个token文本开始位置和上一个重要token开始扫描的位置&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;SyntaxKind&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;Unknown&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;EndOfFileToken&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;SingleLineCommentTrivia&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;扫描器与解析器&#34;&gt;&lt;a href=&#34;#扫描器与解析器&#34; class=&#34;headerlink&#34; title=&#34;扫描器与解析器&#34;&gt;&lt;/a&gt;扫描器与解析器&lt;/h3&gt;&lt;p&gt;扫描器用于读取文本，并转换为Token流。扫描器由解析器（&lt;code&gt;parser.ts&lt;/code&gt;）创建，为了避免创建扫描器的开销。&lt;code&gt;parser.ts&lt;/code&gt;创建的扫描器是单例。&lt;/p&gt;
&lt;p&gt;扫描器&lt;code&gt;scanner.ts&lt;/code&gt;本身提供API给出扫描过程中的各种信息。尽管解析器创建的扫描器是单例，你仍可以使用&lt;code&gt;createScanner&lt;/code&gt;创建自己的扫描器，并调用&lt;code&gt;setText&lt;/code&gt;、&lt;code&gt;setTextPos&lt;/code&gt;随意扫描文件的不同位置。&lt;/p&gt;
&lt;p&gt;解析器由程序经由&lt;code&gt;CompilerHost&lt;/code&gt;创建，&lt;code&gt;CompileHost&lt;/code&gt;通过&lt;code&gt;getSourceFile&lt;/code&gt;准备好待编译文件，再交由解析器处理。解析器根据内部扫描器得到的Token构造一个SourceFile下的语法树。&lt;/p&gt;
&lt;p&gt;解析器使用&lt;code&gt;parseSourceFileWorker&lt;/code&gt;和&lt;code&gt;parseStatements&lt;/code&gt;创建根节点和其余节点。具体解析每种节点的过程写在&lt;code&gt;parseXxx&lt;/code&gt;中。&lt;/p&gt;
&lt;h3 id=&#34;绑定器&#34;&gt;&lt;a href=&#34;#绑定器&#34; class=&#34;headerlink&#34; title=&#34;绑定器&#34;&gt;&lt;/a&gt;绑定器&lt;/h3&gt;&lt;p&gt;绑定器主要职责是创建&lt;em&gt;符号&lt;/em&gt;（Symbol）。符号将AST的声明节点和其他声明连接到相同实体上。绑定器会在检查器内被调用，检查器又被程序调用。&lt;/p&gt;
&lt;p&gt;绑定器有几个重要函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bindSourceFile&lt;/code&gt;，检查&lt;code&gt;file.locals&lt;/code&gt;是否定义，没有则交给内部函数&lt;code&gt;bind&lt;/code&gt;处理。&lt;code&gt;bindSourceFile&lt;/code&gt;内部还定义了许多别的内部变量，通过闭包被其他内部函数使用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bind&lt;/code&gt;处理任意节点绑定，先分配&lt;code&gt;node.parent&lt;/code&gt;，在交给&lt;code&gt;bindWorker&lt;/code&gt;做主要工作，之后调用&lt;code&gt;bindChildren&lt;/code&gt;执行子节点的绑定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bindWorker&lt;/code&gt;根据节点类型，委托工作给特定的&lt;code&gt;bindXXX&lt;/code&gt;函数完成。在&lt;code&gt;bindXXX&lt;/code&gt;内最常用的是&lt;code&gt;createSymbol&lt;/code&gt;函数&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;createSymbol&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;flags: SymbolFlags, name: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;&lt;/span&gt;): &lt;span class=&#34;title class_&#34;&gt;Symbol&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  symbolCount++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Symbol&lt;/span&gt;(flags, name);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;绑定器会调用&lt;code&gt;addDeclarationToSymbol&lt;/code&gt;绑定一个节点到符号，并把节点添加成符号的一个声明。声明就是一个有可选名字的节点。&lt;/p&gt;
&lt;h3 id=&#34;检查器与发射器&#34;&gt;&lt;a href=&#34;#检查器与发射器&#34; class=&#34;headerlink&#34; title=&#34;检查器与发射器&#34;&gt;&lt;/a&gt;检查器与发射器&lt;/h3&gt;&lt;p&gt;检查器由程序初始化。在发射器中，类型检查在&lt;code&gt;getDiagnostics&lt;/code&gt;中发生，函数被调用时会返回一个&lt;code&gt;EmitResolver&lt;/code&gt;。这是一个&lt;code&gt;createTypeChecker&lt;/code&gt;的本地函数集合。&lt;/p&gt;
&lt;p&gt;TypeScript有两个发射器，&lt;code&gt;emitter.ts&lt;/code&gt;完成TS到JavaScript，&lt;code&gt;declarationEmitter.ts&lt;/code&gt;为&lt;code&gt;.ts&lt;/code&gt;创建声明文件(&lt;code&gt;.d.ts&lt;/code&gt;)。&lt;/p&gt;
&lt;p&gt;程序（Program）通过&lt;code&gt;emit&lt;/code&gt;函数，把工作委托给&lt;code&gt;emitter.ts&lt;/code&gt;的&lt;code&gt;emitFiles&lt;/code&gt;函数。&lt;code&gt;emitFiles&lt;/code&gt;中借助&lt;code&gt;emitJavaScript&lt;/code&gt;完成主要工作，&lt;/p&gt;
&lt;p&gt;&lt;code&gt;emitJavaScript&lt;/code&gt;中有大量内部函数，之后借给&lt;code&gt;emitSourceFile&lt;/code&gt;发射文本，该函数设置&lt;code&gt;currentSourceFile&lt;/code&gt;后交给本地的&lt;code&gt;emit&lt;/code&gt;函数处理。在&lt;code&gt;emitJavaScriptWorker&lt;/code&gt;中会根据不同符号类型调用不同发射器处理。在&lt;code&gt;emitJavaScript&lt;/code&gt;的过程中，&lt;code&gt;initializeEmitterWithSourceMaps&lt;/code&gt;使用带有sourceMap的版本覆盖部分本地函数，使大多数发射器代码无需考虑SourceMap。&lt;/p&gt;
&lt;h2 id=&#34;FAQ&#34;&gt;&lt;a href=&#34;#FAQ&#34; class=&#34;headerlink&#34; title=&#34;FAQ&#34;&gt;&lt;/a&gt;FAQ&lt;/h2&gt;&lt;h3 id=&#34;类型系统的行为&#34;&gt;&lt;a href=&#34;#类型系统的行为&#34; class=&#34;headerlink&#34; title=&#34;类型系统的行为&#34;&gt;&lt;/a&gt;类型系统的行为&lt;/h3&gt;&lt;p&gt;首先有几个需要格外说明的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TypeScript使用&lt;strong&gt;结构化类型&lt;/strong&gt;，即类型间的成员类型兼容即类型兼容。&lt;/li&gt;
&lt;li&gt;TypeScript的类型时&lt;em&gt;编译时&lt;/em&gt;的，在运行时并没有类型信息，无法从反射或元数据中拿到。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此外有些常见问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;没有setter的getter并没有体现出只读属性&lt;/strong&gt;，这在TypeScript2.0+已修复&lt;/li&gt;
&lt;li&gt;更少参数的函数可以赋值给更多参数的函数；返回值更多的函数可以复制给返回值更少的函数&lt;/li&gt;
&lt;li&gt;任何类型都可以等价替代没有属性的interface&lt;/li&gt;
&lt;li&gt;类型别名只是别名而已，进行类型判断时使用的是别名对应的类型&lt;/li&gt;
&lt;li&gt;由于结构化类型，两个不同名但是结构相同的类型，实际上是相互兼容的，有个&lt;a href=&#34;https://github.com/Microsoft/TypeScript/issues/202&#34;&gt;相关issue&lt;/a&gt;，但是尚没有结论&lt;/li&gt;
&lt;li&gt;由于TS的类型只存在于编译时，不能用运行时的&lt;code&gt;typeof&lt;/code&gt;或&lt;code&gt;instanceof&lt;/code&gt;判断类型。同样地，错误的TS类型转化也不会造成运行时的错误&lt;/li&gt;
&lt;li&gt;重载的最后一个声明签名对签名本身没有影响，所以为了获得重载本身的行为，需要添加额外的重载&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;createLog&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;message: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;&lt;/span&gt;): &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;createLog&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;source: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;, message: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;&lt;/span&gt;): &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;createLog&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;source: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;, message?: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;&lt;/span&gt;): &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;一些常见的Feature-Request&#34;&gt;&lt;a href=&#34;#一些常见的Feature-Request&#34; class=&#34;headerlink&#34; title=&#34;一些常见的Feature Request&#34;&gt;&lt;/a&gt;一些常见的Feature Request&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tc39/proposal-optional-chaining&#34;&gt;安全的导航操作符&lt;/a&gt;，类似&lt;code&gt;a?.b?.c&lt;/code&gt;，目前已在tc39的Stage 3阶段，将并入TS的3.7.0版本&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Microsoft/TypeScript/issues/8&#34;&gt;代码压缩&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Microsoft/TypeScript/issues/212&#34;&gt;bind(), call(), apply()返回的函数无类型&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;其他问题&#34;&gt;&lt;a href=&#34;#其他问题&#34; class=&#34;headerlink&#34; title=&#34;其他问题&#34;&gt;&lt;/a&gt;其他问题&lt;/h3&gt;&lt;h4 id=&#34;空类的行为很奇怪&#34;&gt;&lt;a href=&#34;#空类的行为很奇怪&#34; class=&#34;headerlink&#34; title=&#34;空类的行为很奇怪&#34;&gt;&lt;/a&gt;空类的行为很奇怪&lt;/h4&gt;&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Empty&lt;/span&gt; &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;e&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Empty&lt;/span&gt; = &lt;span class=&#34;variable language_&#34;&gt;window&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;和之前提到的一样，&lt;strong&gt;任何内容都可以赋值给空接口&lt;/strong&gt;。所以一般来说，永远不要声明一个没有任何属性的类，对于子类而是如此。&lt;/p&gt;
&lt;h4 id=&#34;如何比较类&#34;&gt;&lt;a href=&#34;#如何比较类&#34; class=&#34;headerlink&#34; title=&#34;如何比较类&#34;&gt;&lt;/a&gt;如何比较类&lt;/h4&gt;&lt;p&gt;TypeScript中，类进行结构上的比较，但是对于&lt;code&gt;private&lt;/code&gt;和&lt;code&gt;protected&lt;/code&gt;属性除外。类在比较时，如果有成员是&lt;code&gt;private&lt;/code&gt;或&lt;code&gt;protected&lt;/code&gt;，它们必须来自同一个声明。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Alpha&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;x&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Bravo&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;x&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Charlie&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;x&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Delta&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;x&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; a = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Alpha&lt;/span&gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  b = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Bravo&lt;/span&gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  c = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Charlie&lt;/span&gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  d = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Delta&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a = b; &lt;span class=&#34;comment&#34;&gt;// OK&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;c = d; &lt;span class=&#34;comment&#34;&gt;// Error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;class和typeof-class的区别&#34;&gt;&lt;a href=&#34;#class和typeof-class的区别&#34; class=&#34;headerlink&#34; title=&#34;class和typeof class的区别&#34;&gt;&lt;/a&gt;&lt;code&gt;class&lt;/code&gt;和&lt;code&gt;typeof class&lt;/code&gt;的区别&lt;/h4&gt;&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;MyClass&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;someMethod&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;x&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;MyClass&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Cannot assign &amp;#x27;typeof MyClass&amp;#x27; to MyClass? Huh?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x = &lt;span class=&#34;title class_&#34;&gt;MyClass&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上面混用了类型名和类本身，在JavaScript中，类仅仅是一个函数而已。而在TypeScript中，类名表示类实例的类型。&lt;/p&gt;
&lt;h4 id=&#34;子类的属性在constructor中会被父类同名属性覆盖&#34;&gt;&lt;a href=&#34;#子类的属性在constructor中会被父类同名属性覆盖&#34; class=&#34;headerlink&#34; title=&#34;子类的属性在constructor中会被父类同名属性覆盖&#34;&gt;&lt;/a&gt;子类的属性在constructor中会被父类同名属性覆盖&lt;/h4&gt;&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Base&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Default value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    myColor = &lt;span class=&#34;string&#34;&gt;&amp;#x27;blue&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;myColor&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Derived&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_ inherited__&#34;&gt;Base&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     myColor = &lt;span class=&#34;string&#34;&gt;&amp;#x27;red&amp;#x27;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Prints &amp;quot;blue&amp;quot;, expected &amp;quot;red&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; x = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Derived&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;直接原因是在子类constructor中，父类的constructor要先执行。见&lt;a href=&#34;https://stackoverflow.com/questions/43595943/why-are-derived-class-property-values-not-seen-in-the-base-class-constructor&#34;&gt;Stack Overflow&lt;/a&gt;的解释。&lt;/p&gt;
&lt;h4 id=&#34;interface和declare-class的区别&#34;&gt;&lt;a href=&#34;#interface和declare-class的区别&#34; class=&#34;headerlink&#34; title=&#34;interface和declare class的区别&#34;&gt;&lt;/a&gt;&lt;code&gt;interface&lt;/code&gt;和&lt;code&gt;declare class&lt;/code&gt;的区别&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;interface&lt;/code&gt;用来声明一种类型，不会生成实际代码。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;declare class&lt;/code&gt;用来描述一个已有类的结构&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;为什么我导入的模块在编译后被删除了&#34;&gt;&lt;a href=&#34;#为什么我导入的模块在编译后被删除了&#34; class=&#34;headerlink&#34; title=&#34;为什么我导入的模块在编译后被删除了&#34;&gt;&lt;/a&gt;为什么我导入的模块在编译后被删除了&lt;/h4&gt;&lt;p&gt;TypeScript默认导入的模块不包含副作用，所以会移除不用于任何表达式的模块导入。使用&lt;code&gt;import &amp;#39;xxx&amp;#39;;&lt;/code&gt;强制导入有副作用的模块。&lt;/p&gt;
&lt;h4 id=&#34;tsconfig-json&#34;&gt;&lt;a href=&#34;#tsconfig-json&#34; class=&#34;headerlink&#34; title=&#34;tsconfig.json&#34;&gt;&lt;/a&gt;&lt;code&gt;tsconfig.json&lt;/code&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;为什么exclude中的文件仍然会被编译器选中？&lt;ul&gt;
&lt;li&gt;当exclude的文件被其他include文件依赖时，仍然会被包含进来&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;除了&lt;code&gt;include&lt;/code&gt;外，还有没有指定包含文件的方式&lt;ul&gt;
&lt;li&gt;&lt;code&gt;files&lt;/code&gt;指定文件列表&lt;/li&gt;
&lt;li&gt;目录中添加&lt;code&gt;///&amp;lt;reference path=&amp;quot;&amp;quot;&amp;gt;&lt;/code&gt;引入&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="typescript" />
        <category term="类型系统" />
        <updated>2019-07-28T14:23:01.000Z</updated>
    </entry>
</feed>
