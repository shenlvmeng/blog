{
    "version": "https://jsonfeed.org/version/1",
    "title": "Shenlvmeng's Blog • All posts by \"processon\" tag",
    "description": "Be sharp, my friend.",
    "home_page_url": "http://shenlvmeng.github.com/blog",
    "items": [
        {
            "id": "http://shenlvmeng.github.com/blog/2018/06/26/canvas-flowchart-compare/",
            "url": "http://shenlvmeng.github.com/blog/2018/06/26/canvas-flowchart-compare/",
            "title": "流程图JS实现方案对比",
            "date_published": "2018-06-26T13:09:27.000Z",
            "content_html": "<p>实现流程图和类流程图的工具主要需要解决<strong>数据 -&gt; 图形</strong>和<strong>交互</strong>两方面问题。在实现图形元素时也有canvas，SVG，canvas with DOM，SVG with DOM，DOM with canvas一些实现方式。</p>\n<p>canvas和SVG的实现方式区别比较明显：</p>\n<ul>\n<li>大规模元素、频繁重绘上，canvas完胜</li>\n<li>强调光影效果上，canvas小胜</li>\n<li>强调导出图片上，canvas小胜</li>\n<li>强调元素可交互上，SVG完胜</li>\n<li>强调画图元素可缩放上，SVG完胜</li>\n</ul>\n<p>使用SVG实现时，元素规模大以及频繁重绘时会出现卡顿现象，在大规模元素场景下交互也会有卡顿。使用canvas实现时，保证流程图元素的可交互性将成为头疼的难题，开发者需要自己模拟浏览器的一部分行为。</p>\n<p>下面是一些流程图实现基础的对比。</p>\n<h2 id=\"d3\"><a href=\"#d3\" class=\"headerlink\" title=\"d3\"></a>d3</h2><p>d3着眼在数据可视化，重点在使用不同layout组织数据，完成可视化。</p>\n<p>d3最初是天然支持SVG的，这点从类jQuery的API也能看出来。d3和canvas的结合上，绘制需要<a href=\"https://bl.ocks.org/mbostock/1276463\">额外的data binding</a>操作，周期性地将虚拟的DOM节点映射到canvas上，重绘得到下一帧画面。要实现canvas可交互的话也需要一些<a href=\"https://medium.freecodecamp.org/d3-and-canvas-in-3-steps-8505c8b27444\">hack的手段</a>。基于d3实现流程图并不划算。</p>\n<h2 id=\"zrender\"><a href=\"#zrender\" class=\"headerlink\" title=\"zrender\"></a>zrender</h2><p>zrender是一个canvas画图的基础库。它并不负责数据的组织和渲染，需要自己完成这一部分工作。但是zrender提供了让canvas可交互的重要功能。</p>\n<p>zrender下，mixin了Eventful特性的元素上可以监听交互事件。Eventful只是为元素提供了类似EventEmitter的功能。真正实现元素可交互的handler。</p>\n<p>handler内会拦截发生在canvas内的<code>click</code>&#x2F;<code>mousedown</code>&#x2F;<code>mouseup</code>&#x2F;<code>mousewheel</code>&#x2F;<code>dblclick</code>&#x2F;<code>contextmenu</code>事件，交予prototype内对应的处理方法处理，handler内有下面几个关键方法：</p>\n<ul>\n<li><code>mousemove</code>，监听canvas内mousemove事件，调用<code>findHover</code>得到当前位置对应的元素，根据情况调用<code>dispatchToElement</code>方法，分发<code>mouseout</code>，<code>mouseover</code>，<code>mousemove</code>给刚才得到的元素实例</li>\n<li><code>dispatchToElement</code>，分发事件到对应实例，将事件对象封装，trigger实例的对应事件handler，并通过<code>el.parent</code>向上冒泡</li>\n<li><code>findHover</code>，指定x, y坐标寻找该坐标位置的元素。从storage中拿到所有的displayable的list。挨个调用<code>isHover</code>判断displayable和[x, y]坐标的关系</li>\n<li><code>isHover</code>函数，根据displayable的rectHover属性，即是否使用包围盒检测鼠标进入。调用displayable的<code>rectContain</code>或<code>contain</code>检测是否在其中。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isHover</span>(<span class=\"params\">displayable, x, y</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (displayable[displayable.<span class=\"property\">rectHover</span> ? <span class=\"string\">&#x27;rectContain&#x27;</span> : <span class=\"string\">&#x27;contain&#x27;</span>](x, y)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> el = displayable;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> isSilent;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (el) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// If clipped by ancestor.</span></span><br><span class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">FIXME:</span> If clipPath has neither stroke nor fill,</span></span><br><span class=\"line\">            <span class=\"comment\">// el.clipPath.contain(x, y) will always return false.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (el.<span class=\"property\">clipPath</span> &amp;&amp; !el.<span class=\"property\">clipPath</span>.<span class=\"title function_\">contain</span>(x, y))  &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (el.<span class=\"property\">silent</span>) &#123;</span><br><span class=\"line\">                isSilent = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            el = el.<span class=\"property\">parent</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> isSilent ? <span class=\"variable constant_\">SILENT</span> : <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>先简单看下storage，因为zrender里绘制的元素之间没有逻辑关联，因此需要有一个全局存储storage去统一管理加入的Group或Shape。storage的<code>getDisplayList</code>方法返回所有图形的绘制队列。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">getDisplayList</span>: <span class=\"keyword\">function</span> (<span class=\"params\">update, includeIgnore</span>) &#123;</span><br><span class=\"line\">    includeIgnore = includeIgnore || <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (update) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">updateDisplayList</span>(includeIgnore);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_displayList</span>;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p><em>注：方法中提到的<code>updateDisplayList</code>用于更新图形的绘制队列，在每次绘制前调用，它会深度优先遍历整个树，更新所有的变换后，根据优先级排序得到新的绘制队列。</em></p>\n<p>在displayable的基类中，<code>contain</code>方法只是单纯调用了<code>rectContain</code>（子类都有区别于<code>rectContain</code>的自己的实现）。在<code>rectContain</code>中，获取到坐标相对于图形的坐标（<code>transformCoordToLocal</code>）和图形的包围盒（<code>getBoundingRect</code>）。这里先说简单的<code>RectContain</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">rectContain</span>: <span class=\"keyword\">function</span> (<span class=\"params\">x, y</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> coord = <span class=\"variable language_\">this</span>.<span class=\"title function_\">transformCoordToLocal</span>(x, y);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rect = <span class=\"variable language_\">this</span>.<span class=\"title function_\">getBoundingRect</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rect.<span class=\"title function_\">contain</span>(coord[<span class=\"number\">0</span>], coord[<span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>getBoundingRect</code>是各自类自己实现的。除了个别情况，如Text，形状都基于Path类。在Path的<code>getBoundingRect</code>中可以看到，path的绘制又额外包装了一层<code>PathProxy</code>，<code>getBoundingRect</code>也是使用的<code>PathProxy</code>的方法。在实现上，PathProxy把绘制路径的操作命令拆分成了命令数组。通过记录每一段子路径上x、y的最大最小值，再将所有这些极值比较得到最后的最值。在PathProxy返回结果后，根据描边粗细得到最终结果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">getBoundingRect</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// _rect变量做缓存用，计算完成后只在重绘时置空，避免重复计算</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> rect = <span class=\"variable language_\">this</span>.<span class=\"property\">_rect</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> style = <span class=\"variable language_\">this</span>.<span class=\"property\">style</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> needsUpdateRect = !rect;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (needsUpdateRect) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> path = <span class=\"variable language_\">this</span>.<span class=\"property\">path</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!path) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Create path on demand.</span></span><br><span class=\"line\">            path = <span class=\"variable language_\">this</span>.<span class=\"property\">path</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">PathProxy</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">__dirtyPath</span>) &#123;</span><br><span class=\"line\">            path.<span class=\"title function_\">beginPath</span>();</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"title function_\">buildPath</span>(path, <span class=\"variable language_\">this</span>.<span class=\"property\">shape</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        rect = path.<span class=\"title function_\">getBoundingRect</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_rect</span> = rect;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (style.<span class=\"title function_\">hasStroke</span>()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Return rect with stroke</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> rectWithStroke;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> rect;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p><code>Displayable</code>继承自<code>Element</code>，<code>Element</code>通过mixin得到来自<code>Transformable</code>中的<code>transformCoordToLocal</code>方法。这里要说到，zrender中元素和Group都有一个构造时的初始位置，而后的所有变化都是作为transform叠加在元素上的。例如拖拽元素对应的是“原始位置 + transform”而不是一个“新位置”。</p>\n<p>在每次变换后，<code>Transformable</code>中的<code>updateTransform</code>方法都会调用，设置自身<code>invTransform</code>属性为这次变化的逆矩阵。在<code>transformCoordToLocal</code>中对向量[x, y]应用这个逆矩阵即可得到点相对于当前形状的位置（可以理解成将点逆变换到形状变换前的位置）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transformableProto.<span class=\"property\">updateTransform</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    m = m || matrix.<span class=\"title function_\">create</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保存这个变换矩阵</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">transform</span> = m;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">invTransform</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">invTransform</span> || matrix.<span class=\"title function_\">create</span>();</span><br><span class=\"line\">    matrix.<span class=\"title function_\">invert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">invTransform</span>, m);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">transformableProto.<span class=\"property\">transformCoordToLocal</span> = <span class=\"keyword\">function</span> (<span class=\"params\">x, y</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> v2 = [x, y];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> invTransform = <span class=\"variable language_\">this</span>.<span class=\"property\">invTransform</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (invTransform) &#123;</span><br><span class=\"line\">        vector.<span class=\"title function_\">applyTransform</span>(v2, v2, invTransform);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> v2;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>综合这两个方法即可判断点是否在某元素的包围盒中。</p>\n<p>判断<code>contain</code>时，首先需要满足<code>rectContain</code>的关系。之后根据描边和填充情况，执行<code>contain/path</code>下对应的<code>contain</code>或<code>containStroke</code>方法。前者实际上是后者stroke为0时的特殊情况。除了path外，可以判断点是否在元素图形内的所有元素在<code>contain</code>下都有对应文件。基本所有的包含都可以转化为指定闭合路径是否包含指定点的问题。</p>\n<p>zrender利用<a href=\"https://en.wikipedia.org/wiki/Point_in_polygon\">PIP</a>（point-in-polygon）问题<a href=\"https://www.quora.com/How-do-I-know-a-point-is-inside-a-closed-curve-or-not#\">winding number</a>的解法判断点是否在path中；canvas提供的API中也有<code>isPointInPath</code>和<code>isPointInStroke</code>，不过只能针对当前的path。</p>\n<p>综上，zrender可以实现canvas内的元素和交互。</p>\n<h2 id=\"g6\"><a href=\"#g6\" class=\"headerlink\" title=\"g6\"></a>g6</h2><p>g6是antv的一部分，是一个canvas实现的展示关系型数据的JS可视化库。使用canvas的原因应该也在展示大量数据和重绘上更流畅。</p>\n<p>使用canvas实现时，g6一样会遇到zrender遇到的实现元素可交互的难题。从处理event的event.js中能看到，关联事件和元素的实现在<code>_getEventObj</code>处完成，剩下的步骤只是额外的封装操作：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Util</span>.<span class=\"title function_\">each</span>(<span class=\"title class_\">MouseEventTypes</span>, <span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    _events.<span class=\"title function_\">push</span>(<span class=\"title class_\">Util</span>.<span class=\"title function_\">addEventListener</span>(el, item, <span class=\"function\"><span class=\"params\">ev</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> oldEventObj = <span class=\"variable language_\">this</span>.<span class=\"property\">_currentEventObj</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">_oldEventObj</span> = oldEventObj;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">_processEventObj</span>(ev);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> currentEventObj = <span class=\"variable language_\">this</span>.<span class=\"property\">_currentEventObj</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">_processEventObj</span>(<span class=\"params\">ev</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> graph = <span class=\"variable language_\">this</span>.<span class=\"property\">graph</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> canvas = graph.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;_canvas&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> frontCanvas = graph.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;_frontCanvas&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> evObj = <span class=\"variable language_\">this</span>.<span class=\"title function_\">_getEventObj</span>(ev, canvas);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> frontEvObj = <span class=\"variable language_\">this</span>.<span class=\"title function_\">_getEventObj</span>(ev, frontCanvas);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">_getEventObj</span>(<span class=\"params\">ev, canvas</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> graph = <span class=\"variable language_\">this</span>.<span class=\"property\">graph</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> clientX = ev.<span class=\"property\">clientX</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> clientY = ev.<span class=\"property\">clientY</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> canvasPoint = canvas.<span class=\"title function_\">getPointByClient</span>(clientX, clientY);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> point = <span class=\"variable language_\">this</span>.<span class=\"title function_\">_parsePoint</span>(canvasPoint.<span class=\"property\">x</span>, canvasPoint.<span class=\"property\">y</span>); <span class=\"comment\">// 根据pixel ratio做一个转换</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> shape = canvas.<span class=\"title function_\">getShape</span>(canvasPoint.<span class=\"property\">x</span>, canvasPoint.<span class=\"property\">y</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> item = graph.<span class=\"title function_\">getItemByShape</span>(shape);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>p.s. 另说一点，frontCanvas的作用是绘制拖拽状态中的元素和辅助线等信息。</p>\n<p>最关键的方法<code>getPointByClient</code>和<code>getShape</code>来自Graph的<code>canvas</code>属性，这个属性通过‘@antv&#x2F;g’（G2）的canvas构造得来。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> G = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@antv/g&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Canvas</span> = G.<span class=\"property\">Canvas</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在G2中，Canvas继承自Group，可以认为Canvas本身已经扮演了根节点的角色。Canvas判断坐标对应元素的方法<code>getShape(x,y)</code>也来自Group。此方法遍历Group下所有元素（包括单个元素或Group），判断点[x, y]是否在范围内：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">find</span>(<span class=\"params\">children, x, y</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> rst;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = children.<span class=\"property\">length</span> - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> child = children[i];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (child.<span class=\"property\">__cfg</span>.<span class=\"property\">visible</span> &amp;&amp; child.<span class=\"property\">__cfg</span>.<span class=\"property\">capture</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 是Group就继续向下寻找</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (child.<span class=\"property\">isGroup</span>) &#123;</span><br><span class=\"line\">        rst = child.<span class=\"title function_\">getShape</span>(x, y);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (child.<span class=\"title function_\">isHit</span>(x, y)) &#123;</span><br><span class=\"line\">        rst = child;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rst) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> rst;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>关键的<code>child.isHit</code>方法类似zrender里的<code>contain</code>方法。区别使用包围盒还是自身范围判断。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">isHit</span>(<span class=\"params\">x, y</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> self = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> v = [ x, y, <span class=\"number\">1</span> ];</span><br><span class=\"line\">    self.<span class=\"title function_\">invert</span>(v); <span class=\"comment\">// canvas</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (self.<span class=\"title function_\">isHitBox</span>()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> box = self.<span class=\"title function_\">getBBox</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (box &amp;&amp; !<span class=\"title class_\">Inside</span>.<span class=\"title function_\">box</span>(box.<span class=\"property\">minX</span>, box.<span class=\"property\">maxX</span>, box.<span class=\"property\">minY</span>, box.<span class=\"property\">maxY</span>, v[<span class=\"number\">0</span>], v[<span class=\"number\">1</span>])) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> clip = self.<span class=\"property\">__attrs</span>.<span class=\"property\">clip</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (clip) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (clip.<span class=\"title function_\">inside</span>(x, y)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.<span class=\"title function_\">isPointInPath</span>(v[<span class=\"number\">0</span>], v[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.<span class=\"title function_\">isPointInPath</span>(v[<span class=\"number\">0</span>], v[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用包围盒时用<code>getBBox()</code>判断，类似zrender；否则使用<code>isPointInPath</code>。这点上g2不同，它只对特殊的闭合曲线如圆、矩形、贝塞尔曲线等等进行自己的实现。对一般性的path，直接使用上面提到的canvas的API来判断。</p>\n<h2 id=\"processOn\"><a href=\"#processOn\" class=\"headerlink\" title=\"processOn\"></a>processOn</h2><p>processOn严格意义上是一个产品，类似于在线的visio，编辑很流畅。使用DOM + canvas实现。具体来说：</p>\n<ul>\n<li>DOM绘制每个元素占位，响应交互</li>\n<li>canvas绘制每个DOM内的图形本身</li>\n</ul>\n<p>这么做的好处在有二：1. 天然解决了元素交互的问题；2. 更平滑的元素拖拽效果。</p>\n<p>类似的还有jsPlumb这样的使用SVG的方案，使用SVG的优势体现在交互更容易实现。</p>\n",
            "tags": [
                "canvas",
                "流程图",
                "d3",
                "g6",
                "zrender",
                "processOn"
            ]
        }
    ]
}