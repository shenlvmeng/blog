<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://shenlvmeng.github.com/blog</id>
    <title>Shenlvmeng&#39;s Blog • Posts by &#34;类型判断&#34; tag</title>
    <link href="http://shenlvmeng.github.com/blog" />
    <updated>2017-03-01T04:06:13.000Z</updated>
    <category term="总结" />
    <category term="制度" />
    <category term="道德" />
    <category term="文官" />
    <category term="万历" />
    <category term="明朝" />
    <category term="读书笔记" />
    <category term="展望" />
    <category term="2018" />
    <category term="2019" />
    <category term="flag" />
    <category term="2020" />
    <category term="2021" />
    <category term="2022" />
    <category term="2023" />
    <category term="面试" />
    <category term="前端" />
    <category term="FAQ" />
    <category term="HTML" />
    <category term="CSS" />
    <category term="style guide" />
    <category term="编程" />
    <category term="范式" />
    <category term="设计" />
    <category term="艺术" />
    <category term="质量" />
    <category term="async_hooks" />
    <category term="cls-hooked" />
    <category term="logId" />
    <category term="录音" />
    <category term="getUserMedia" />
    <category term="AudioContext" />
    <category term="PCM" />
    <category term="WAVE" />
    <category term="二叉搜索树" />
    <category term="算法" />
    <category term="回忆" />
    <category term="老朋友" />
    <category term="C" />
    <category term="Hash" />
    <category term="布隆过滤器" />
    <category term="字符串检索" />
    <category term="canvas" />
    <category term="流程图" />
    <category term="d3" />
    <category term="g6" />
    <category term="zrender" />
    <category term="processOn" />
    <category term="SDN" />
    <category term="cbench" />
    <category term="安装说明" />
    <category term="绘图" />
    <category term="动画" />
    <category term="攻略" />
    <category term="流水账" />
    <category term="成都" />
    <category term="重庆" />
    <category term="武汉" />
    <category term="重构" />
    <category term="代码" />
    <category term="代码风格" />
    <category term="数据可视化" />
    <category term="爬虫" />
    <category term="chrome" />
    <category term="crx" />
    <category term="扩展" />
    <category term="CORS" />
    <category term="跨域" />
    <category term="盒模型" />
    <category term="浮动" />
    <category term="Reactive Programming" />
    <category term="JavaScript" />
    <category term="Cycle.js" />
    <category term="Dart" />
    <category term="最佳实践" />
    <category term="引流" />
    <category term="universal-link" />
    <category term="app-link" />
    <category term="脚手架" />
    <category term="degit" />
    <category term="git" />
    <category term="设计模式" />
    <category term="类" />
    <category term="接口" />
    <category term="抽象类" />
    <category term="DOM" />
    <category term="Docker" />
    <category term="ONOS" />
    <category term="控制器" />
    <category term="虚拟化" />
    <category term="笔记" />
    <category term="UX" />
    <category term="UED" />
    <category term="准则" />
    <category term="Java" />
    <category term="Ruby" />
    <category term="反射" />
    <category term="编程范式" />
    <category term="鸭子类型" />
    <category term="管理" />
    <category term="效率" />
    <category term="知识工作者" />
    <category term="卓有成效" />
    <category term="Elm" />
    <category term="框架" />
    <category term="函数式编程" />
    <category term="虚网映射" />
    <category term="Javascript" />
    <category term="并发" />
    <category term="event loop" />
    <category term="覆盖率" />
    <category term="端到端测试" />
    <category term="istanbul" />
    <category term="istanbuljs" />
    <category term="JavaSript" />
    <category term="Express" />
    <category term="源码" />
    <category term="代码覆盖率" />
    <category term="istanbul-middleware" />
    <category term="代码插桩" />
    <category term="require钩子" />
    <category term="babel-plugin-istanbul" />
    <category term="css" />
    <category term="html5" />
    <category term="flex" />
    <category term="javascript" />
    <category term="roadmap" />
    <category term="闭包" />
    <category term="Haskell" />
    <category term="monad" />
    <category term="后端" />
    <category term="管理后台" />
    <category term="egg.js" />
    <category term="工作流" />
    <category term="pull request" />
    <category term="golang" />
    <category term="语言学习" />
    <category term="黑客与画家" />
    <category term="创业" />
    <category term="骑行" />
    <category term="海南" />
    <category term="图文" />
    <category term="reflow" />
    <category term="repaint" />
    <category term="命名法" />
    <category term="成功学" />
    <category term="自我建设" />
    <category term="HTTP" />
    <category term="HTTP/2" />
    <category term="SPDY" />
    <category term="QUIC" />
    <category term="HTTPS" />
    <category term="状态码" />
    <category term="网络攻击" />
    <category term="介绍" />
    <category term="图片渲染" />
    <category term="html2canvas" />
    <category term="dom-to-image" />
    <category term="electron" />
    <category term="indexedDB" />
    <category term="异步" />
    <category term="Generator" />
    <category term="thunk" />
    <category term="async" />
    <category term="函数表达式" />
    <category term="对象" />
    <category term="继承" />
    <category term="类型转换" />
    <category term="==" />
    <category term="类型判断" />
    <category term="猫" />
    <category term="杀手" />
    <category term="管理学" />
    <category term="领导力" />
    <category term="梯队" />
    <category term="移动端" />
    <category term="UI" />
    <category term="自适应" />
    <category term="rem" />
    <category term="Electron" />
    <category term="GUI" />
    <category term="gpx" />
    <category term="template" />
    <category term="Electron Builder" />
    <category term="PWA" />
    <category term="方法论" />
    <category term="夜话" />
    <category term="多线" />
    <category term="生活" />
    <category term="密码" />
    <category term="密钥" />
    <category term="技改" />
    <category term="Vue" />
    <category term="gulp" />
    <category term="瀑布流" />
    <category term="电影" />
    <category term="PHP" />
    <category term="参考" />
    <category term="思维" />
    <category term="学习能力" />
    <category term="右脑" />
    <category term="经济学" />
    <category term="宏观经济学" />
    <category term="术语" />
    <category term="GDP" />
    <category term="CPI" />
    <category term="储蓄" />
    <category term="投资" />
    <category term="金融市场" />
    <category term="股票" />
    <category term="债券" />
    <category term="美联储" />
    <category term="失业" />
    <category term="货币" />
    <category term="现值" />
    <category term="准备金" />
    <category term="货币中性" />
    <category term="通货膨胀" />
    <category term="汇率" />
    <category term="购买力" />
    <category term="净出口" />
    <category term="资产净流出" />
    <category term="总需求" />
    <category term="总供给" />
    <category term="流动性偏好" />
    <category term="乘数效应" />
    <category term="菲利普斯曲线" />
    <category term="微观经济学" />
    <category term="供求" />
    <category term="贸易" />
    <category term="市场" />
    <category term="税" />
    <category term="剩余" />
    <category term="外部性" />
    <category term="公共物品" />
    <category term="公共资源" />
    <category term="生产成本" />
    <category term="利润" />
    <category term="垄断" />
    <category term="价格歧视" />
    <category term="寡头" />
    <category term="垄断竞争" />
    <category term="生产要素市场" />
    <category term="贫困" />
    <category term="消费者选择理论" />
    <category term="不对称信息" />
    <category term="政治经济学" />
    <category term="行为经济学" />
    <category term="VSCode" />
    <category term="编辑器" />
    <category term="IDE" />
    <category term="hybrid" />
    <category term="JSBridge" />
    <category term="Web Worker" />
    <category term="Service Worker" />
    <category term="习惯" />
    <category term="lint" />
    <category term="editorconfig" />
    <category term="commit message" />
    <category term="量子物理" />
    <category term="史话" />
    <category term="埋点" />
    <category term="raven.js" />
    <category term="前端监控" />
    <category term="文本编辑器" />
    <category term="quill" />
    <category term="结构化数据" />
    <category term="React" />
    <category term="Hooks" />
    <category term="函数组件" />
    <category term="复用" />
    <category term="状态管理" />
    <category term="redux" />
    <category term="MobX" />
    <category term="代码质量" />
    <category term="重来" />
    <category term="requestAnimationFrame" />
    <category term="TypeScript" />
    <category term="路书" />
    <category term="gpx解析" />
    <category term="EXIF" />
    <category term="人类" />
    <category term="生存" />
    <category term="基因" />
    <category term="响应式编程" />
    <category term="RxJS" />
    <category term="成长" />
    <category term="业务" />
    <category term="思想" />
    <category term="程序设计" />
    <category term="心理学" />
    <category term="自我" />
    <category term="社会思维" />
    <category term="社会影响" />
    <category term="文化" />
    <category term="性别" />
    <category term="从众" />
    <category term="说服" />
    <category term="临床诊断" />
    <category term="陪审团" />
    <category term="司法" />
    <category term="物质主义" />
    <category term="健康" />
    <category term="社会关系" />
    <category term="偏见" />
    <category term="攻击行为" />
    <category term="亲密关系" />
    <category term="友谊" />
    <category term="爱情" />
    <category term="利他" />
    <category term="冲突" />
    <category term="和解" />
    <category term="软技能" />
    <category term="理财" />
    <category term="健身" />
    <category term="自我营销" />
    <category term="学习" />
    <category term="商业模式" />
    <category term="产品" />
    <category term="校园网" />
    <category term="互联网" />
    <category term="技术" />
    <category term="web开发" />
    <category term="哲思" />
    <category term="择偶观" />
    <category term="validator" />
    <category term="大文件" />
    <category term="visibilityChange" />
    <category term="IntersectionObserver" />
    <category term="图种" />
    <category term="draggable" />
    <category term="webpack" />
    <category term="z-index" />
    <category term="git submodule" />
    <category term="object-fit" />
    <category term="object-position" />
    <category term="BroadcastChannel" />
    <category term="extract-text-webpack-plugin" />
    <category term="lottie" />
    <category term="backface-visibility" />
    <category term="egret" />
    <category term="mock" />
    <category term="SSO" />
    <category term="autoprefixer" />
    <category term="polyfill" />
    <category term="Android" />
    <category term="ffmpeg" />
    <category term="React Hooks" />
    <category term="rollup" />
    <category term="CDN" />
    <category term="DNS" />
    <category term="CNAME" />
    <category term="架构" />
    <category term="组件" />
    <category term="ssh" />
    <category term="fis-receiver" />
    <category term="tmux" />
    <category term="origami" />
    <category term="promise" />
    <category term="encodeURI" />
    <category term="encodeURIComponent" />
    <category term="axios" />
    <category term="charles" />
    <category term="黑色幽默" />
    <category term="朋友" />
    <category term="梦" />
    <category term="濒死" />
    <category term="江南" />
    <category term="苏州" />
    <category term="无锡" />
    <category term="宜兴" />
    <category term="湖州" />
    <category term="南浔" />
    <category term="游记" />
    <category term="随笔" />
    <category term="群众" />
    <category term="理论" />
    <category term="实效" />
    <category term="测试" />
    <category term="长沙" />
    <category term="杭州" />
    <category term="湖南" />
    <category term="核酸" />
    <category term="美食" />
    <category term="云南" />
    <category term="丽江" />
    <category term="大理" />
    <category term="青岛" />
    <category term="济南" />
    <category term="山东" />
    <category term="西北" />
    <category term="银川" />
    <category term="西宁" />
    <category term="青海湖" />
    <category term="西海镇" />
    <category term="茶卡盐湖" />
    <category term="厦门" />
    <category term="感受" />
    <category term="C语言" />
    <category term="树" />
    <category term="主干开发" />
    <category term="GitFlow" />
    <category term="GithubFlow" />
    <category term="typescript" />
    <category term="类型系统" />
    <category term="webrtc" />
    <category term="RTMP" />
    <category term="首屏时间" />
    <category term="性能优化" />
    <category term="公司" />
    <category term="个人发展" />
    <category term="战略" />
    <category term="晋升" />
    <category term="哲学" />
    <category term="幸福" />
    <category term="人生" />
    <category term="叔本华" />
    <category term="Unix" />
    <category term="Rollup" />
    <category term="mouseout" />
    <category term="mouseleave" />
    <category term="lint-staged" />
    <category term="吸顶" />
    <category term="图片组件" />
    <category term="形式系统" />
    <category term="不完全性" />
    <category term="隐喻" />
    <category term="哥德尔" />
    <category term="巴赫" />
    <category term="埃舍尔" />
    <entry>
        <id>http://shenlvmeng.github.com/blog/2017/03/01/js-type-and-equal-judgement/</id>
        <title>JavaScript类型与类型转换</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2017/03/01/js-type-and-equal-judgement/"/>
        <content type="html">&lt;h2 id=&#34;引子&#34;&gt;&lt;a href=&#34;#引子&#34; class=&#34;headerlink&#34; title=&#34;引子&#34;&gt;&lt;/a&gt;引子&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;ECMAScript的变量是松散类型的，所谓松散类型就是可以用来保存任何类型的数据。换句话说，每个变量仅仅是一个用于保存值的占位符而已。&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;Nicolas C.Zakas &lt;/strong&gt;&lt;cite&gt;--JavaScript高级程序设计&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;p&gt;由于JavaScript是一种松散类型的语言，即变量在使用时，并不需要事先知道它的类型。因此不同变量间的比较往往要作类型转换，这也是一些常见quiz的由来。&lt;br&gt;比如下面的一道面试题：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//请写出下面语句的输出结果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ([]) &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);               &lt;span class=&#34;comment&#34;&gt;// 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&amp;#123;&amp;#125;) &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;);               &lt;span class=&#34;comment&#34;&gt;// 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ([] == &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;) &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;);       &lt;span class=&#34;comment&#34;&gt;// 无&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&amp;#123;&amp;#125; == &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;) &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;)；      &lt;span class=&#34;comment&#34;&gt;// 无&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt; == &lt;span class=&#34;literal&#34;&gt;undefined&lt;/span&gt;) &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;) &lt;span class=&#34;comment&#34;&gt;// 5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;title class_&#34;&gt;NaN&lt;/span&gt; == &lt;span class=&#34;title class_&#34;&gt;NaN&lt;/span&gt;) &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;)        &lt;span class=&#34;comment&#34;&gt;// 无&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;string&#34;&gt;&amp;quot;5&amp;quot;&lt;/span&gt; == &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;) &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;)          &lt;span class=&#34;comment&#34;&gt;// 7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//下面的结果你能写出来么&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;([] + &amp;#123;&amp;#125;); &lt;span class=&#34;comment&#34;&gt;// &amp;quot;[object Object]&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&amp;#123;&amp;#125; + []); &lt;span class=&#34;comment&#34;&gt;// &amp;quot;[object Object]&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&amp;#123;&amp;#125; - []); &lt;span class=&#34;comment&#34;&gt;// -0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;([] - &amp;#123;&amp;#125;); &lt;span class=&#34;comment&#34;&gt;// NaN&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;([] + []); &lt;span class=&#34;comment&#34;&gt;// &amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;([] - []); &lt;span class=&#34;comment&#34;&gt;// 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&amp;#123;&amp;#125; + &amp;#123;&amp;#125;); &lt;span class=&#34;comment&#34;&gt;// &amp;quot;[object Object][object Object]&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&amp;#123;&amp;#125; - &amp;#123;&amp;#125;); &lt;span class=&#34;comment&#34;&gt;// NaN&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//下面的呢&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;           &lt;span class=&#34;comment&#34;&gt;// &amp;quot;object&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&amp;#125; &lt;span class=&#34;comment&#34;&gt;// &amp;quot;function&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[] &lt;span class=&#34;keyword&#34;&gt;instanceof&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Array&lt;/span&gt;   &lt;span class=&#34;comment&#34;&gt;// &amp;quot;true&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;instanceof&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;  &lt;span class=&#34;comment&#34;&gt;// &amp;quot;true&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;怎么样？是不是有点晕，下面我们一部分一部分地来解释JavaScript中一些类型和相等相关的“潜规则”。&lt;/p&gt;
&lt;h2 id=&#34;数据类型&#34;&gt;&lt;a href=&#34;#数据类型&#34; class=&#34;headerlink&#34; title=&#34;数据类型&#34;&gt;&lt;/a&gt;数据类型&lt;/h2&gt;&lt;p&gt;让我们先从JavaScript的数据类型开始。JavaScript中&lt;em&gt;只有&lt;/em&gt;5种基本类型和引用类型。其中5种基本类型分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Undefined&lt;/li&gt;
&lt;li&gt;Null&lt;/li&gt;
&lt;li&gt;Number&lt;/li&gt;
&lt;li&gt;Boolean&lt;/li&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除此之外只有1种引用类型——Object，Object本质上是由一组无序的键值对组成。5种基本类型是按值访问的，引用类型Object是按引用访问的。&lt;/p&gt;
&lt;p&gt;可以使用typeof操作符监测变量的基本类型。*它可以判断变量是否为除null的其他5种基本类型以及function类型。除此之外都会返回”object”*。之所以null的typeof结果也为”object”，是因为null实际上表示引用指向空对象。&lt;/p&gt;
&lt;p&gt;使用instanceof可以判断引用类型的具体值。使用方法类似于A instanceof B的形式。当B为“Object”时，表达式永远返回true。因为根据规定，所有引用类型的值都是Object的实例。&lt;/p&gt;
&lt;p&gt;下面是几个例子。通过instanceof操作符可以很方便地区分空数组和空对象（当然还有Object.prototype.toString.call()和[].concat()两种方法。）&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;([] &lt;span class=&#34;keyword&#34;&gt;instanceof&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Array&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;regexp&#34;&gt;/w+/g&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;instanceof&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;RegExp&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;类型转换&#34;&gt;&lt;a href=&#34;#类型转换&#34; class=&#34;headerlink&#34; title=&#34;类型转换&#34;&gt;&lt;/a&gt;类型转换&lt;/h2&gt;&lt;h3 id=&#34;to-Boolean类型&#34;&gt;&lt;a href=&#34;#to-Boolean类型&#34; class=&#34;headerlink&#34; title=&#34;to Boolean类型&#34;&gt;&lt;/a&gt;to Boolean类型&lt;/h3&gt;&lt;p&gt;Boolean类型是ECMAScript中使用最多的类型之一。类型只有true和false两个字面量。&lt;b&gt;true不一定等于1，false也不一定等于0&lt;/b&gt;.可以通过调用Boolean()函数将其他类型转型为Boolean类型。规则如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;String类型：非空字符串&amp;#x3D;&amp;gt;true，空字符串&amp;#x3D;&amp;gt;false&lt;/li&gt;
&lt;li&gt;Number类型：非零数字（包括Inifity）&amp;#x3D;&amp;gt;true, 0和NaN&amp;#x3D;&amp;gt;false&lt;/li&gt;
&lt;li&gt;Object类型：任何对象&amp;#x3D;&amp;gt;true, null&amp;#x3D;&amp;gt;false&lt;/li&gt;
&lt;li&gt;Undefined：false&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在使用if()语句或三元操作符等情况要求Boolean类型时，括号内的表达式将会自动使用Boolean()函数转换为布尔类型。&lt;/p&gt;
&lt;h3 id=&#34;to-String类型&#34;&gt;&lt;a href=&#34;#to-String类型&#34; class=&#34;headerlink&#34; title=&#34;to String类型&#34;&gt;&lt;/a&gt;to String类型&lt;/h3&gt;&lt;p&gt;有两种方法可以将值转为字符串，一种是使用几乎所有值都有的toString方法，对于null和undefined使用另一种——String()函数。&lt;/p&gt;
&lt;p&gt;前者适用于除null和undefined外的所有值，甚至String本身（返回一个自身的副本）。有些toString()方法接收一个基数作为参数（如Number）对Object使用toString方法时，会根据对象内toString的定义决定。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Array返回逗号隔开的不包括外侧中括号的字符串&lt;/li&gt;
&lt;li&gt;Function返回Function定义的字符串&lt;/li&gt;
&lt;li&gt;普通Object返回”[object Object]”&lt;/li&gt;
&lt;li&gt;null和undefined分别返回”null”和”undefined”&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;to-Number类型&#34;&gt;&lt;a href=&#34;#to-Number类型&#34; class=&#34;headerlink&#34; title=&#34;to Number类型&#34;&gt;&lt;/a&gt;to Number类型&lt;/h3&gt;&lt;p&gt;可以使用Number(), parseInt()和parseFloat()三个函数做强制转换。转换到Number类型的规则要更好理解些。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;是Boolean类型时，true和false分别转换到1和0&lt;/li&gt;
&lt;li&gt;数字类型时，返回本身&lt;/li&gt;
&lt;li&gt;null时返回0&lt;/li&gt;
&lt;li&gt;undefined时返回NaN&lt;/li&gt;
&lt;li&gt;对字符串使用类似于parseInt和parseFloat类似的方法（可以识别0x这样的进制前缀&lt;b&gt;甚至Infinity这样的字符串&lt;/b&gt;）&lt;/li&gt;
&lt;li&gt;对象使用valueOf()方法，再使用之前的规则；如果结果是NaN，再使用toString()方法作转换&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;类型转换场景&#34;&gt;&lt;a href=&#34;#类型转换场景&#34; class=&#34;headerlink&#34; title=&#34;类型转换场景&#34;&gt;&lt;/a&gt;类型转换场景&lt;/h2&gt;&lt;h3 id=&#34;一元加减&#34;&gt;&lt;a href=&#34;#一元加减&#34; class=&#34;headerlink&#34; title=&#34;一元加减&#34;&gt;&lt;/a&gt;一元加减&lt;/h3&gt;&lt;p&gt;一元加减只需对操作数强制转换到Number类型。向下面这样的例子：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; s1 = &lt;span class=&#34;string&#34;&gt;&amp;quot;01&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; s2 = &lt;span class=&#34;string&#34;&gt;&amp;quot;1.1&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; s3 = &lt;span class=&#34;string&#34;&gt;&amp;quot;z&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; b = &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; f = &lt;span class=&#34;number&#34;&gt;1.1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; o = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;valueOf&lt;/span&gt;: &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; -&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;s1 = +s1; &lt;span class=&#34;comment&#34;&gt;// 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;s2 = +s2; &lt;span class=&#34;comment&#34;&gt;// 1.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;s3 = -s3; &lt;span class=&#34;comment&#34;&gt;// NaN&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b = +b;   &lt;span class=&#34;comment&#34;&gt;// 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;f = +f;	  &lt;span class=&#34;comment&#34;&gt;// 1.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;o = -o;	  &lt;span class=&#34;comment&#34;&gt;// 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;加性操作符&#34;&gt;&lt;a href=&#34;#加性操作符&#34; class=&#34;headerlink&#34; title=&#34;加性操作符&#34;&gt;&lt;/a&gt;加性操作符&lt;/h3&gt;&lt;p&gt;ECMAScript中规定的加减法这两个操作符有一些特殊行为，不仅处理数值的加减，还处理字符串的加减。因此转换规则还有些复杂。&lt;/p&gt;
&lt;h4 id=&#34;加法&#34;&gt;&lt;a href=&#34;#加法&#34; class=&#34;headerlink&#34; title=&#34;加法&#34;&gt;&lt;/a&gt;加法&lt;/h4&gt;&lt;p&gt;优先做数值加减，无法完成时做字符串拼接。两个操作数都是&lt;b&gt;数值&lt;/b&gt;时，执行常规的加法计算。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个操作数为NaN时，返回NaN&lt;/li&gt;
&lt;li&gt;Inifity + -Inifity，返回NaN&lt;/li&gt;
&lt;li&gt;+0 加 -0，返回+0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只要有一个操作数为&lt;b&gt;字符串&lt;/b&gt;类型，应用下面规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;两个都是字符串时，则将它们拼接起来。&lt;/li&gt;
&lt;li&gt;一个是字符串时，先将另一个转换为字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;布尔值和null以及undefined在另一个操作数是数值类型时转换为&lt;b&gt;数值类型&lt;/b&gt;，反之转换为&lt;b&gt;字符串类型&lt;/b&gt;。&lt;br&gt;一个操作数为对象时，转换为&lt;b&gt;字符串类型&lt;/b&gt;。&lt;/p&gt;
&lt;h4 id=&#34;减法&#34;&gt;&lt;a href=&#34;#减法&#34; class=&#34;headerlink&#34; title=&#34;减法&#34;&gt;&lt;/a&gt;减法&lt;/h4&gt;&lt;p&gt;与加法类似，除了数值相减减法也需要做一些类型转换。但是和加法不一样的是，&lt;em&gt;减法返回的一定是Number类型&lt;/em&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个数值为NaN时，结果为NaN&lt;/li&gt;
&lt;li&gt;同号的Infinity相减返回NaN（如Infinity - Infinity），异号的Infinity相减等于第一个操作数&lt;/li&gt;
&lt;li&gt;除了-0减+0返回-0，其余0间相减均返回+0&lt;/li&gt;
&lt;li&gt;操作数出现字符串、布尔值、null、undefined时，做Number转换再进行数值减法&lt;/li&gt;
&lt;li&gt;对象先尝试用valueOf方法获得对象数值，若无此方法则调用toString方法，并转换得到的字符串。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;关系操作符&#34;&gt;&lt;a href=&#34;#关系操作符&#34; class=&#34;headerlink&#34; title=&#34;关系操作符&#34;&gt;&lt;/a&gt;关系操作符&lt;/h3&gt;&lt;p&gt;关系操作符即大于（&amp;gt;）、小于（&amp;lt;）、大于等于（&amp;gt;&amp;#x3D;）和小于等于（&amp;lt;&amp;#x3D;）。在操作数并非纯数值时，ECMAScript也会进行数据转换或一些奇怪的操作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;两个操作数都是数值时，进行数值比较&lt;/li&gt;
&lt;li&gt;两个操作数都是字符串时，按照对应字符编码顺序比较&lt;/li&gt;
&lt;li&gt;一个操作数是数值时，转换另一个为数值再比较&lt;/li&gt;
&lt;li&gt;一个操作数是对象时，优先使用valueOf方法比较数值，没有该方法时再使用toString方法&lt;/li&gt;
&lt;li&gt;任何数和NaN比较都会返回false&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;相等和全等&#34;&gt;&lt;a href=&#34;#相等和全等&#34; class=&#34;headerlink&#34; title=&#34;相等和全等&#34;&gt;&lt;/a&gt;相等和全等&lt;/h2&gt;&lt;p&gt;相等和全等用于确认两个变量是否相等。对此ECMAScript提供两组操作符：-相等-和-全等-。相等先转换类型后比较，全等仅比较不转换类型。由于情况较多较复杂，这里单独列一节。&lt;/p&gt;
&lt;p&gt;ECMAScript中相等操作符为&amp;#x3D;&amp;#x3D;。不相等操作符为!&amp;#x3D;。它们都会先强制转型变量再相互比较。转换规则如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先将&lt;b&gt;布尔值&lt;/b&gt;转换为数值，false转换为0，true转换为1&lt;/li&gt;
&lt;li&gt;&lt;b&gt;字符串&lt;/b&gt;和&lt;b&gt;数值&lt;/b&gt;比较时，将字符串转换为数值&lt;/li&gt;
&lt;li&gt;两个操作数都是&lt;b&gt;对象&lt;/b&gt;时，判断它们是否指向同一个对象（只比较引用）&lt;/li&gt;
&lt;li&gt;只有一个操作数是&lt;b&gt;对象&lt;/b&gt;时，调用valueOf()或toString()方法获得基本类型值&lt;/li&gt;
&lt;li&gt;&lt;b&gt;null&lt;/b&gt;和&lt;b&gt;undefined&lt;/b&gt;是相等的&lt;/li&gt;
&lt;li&gt;&lt;b&gt;null&lt;/b&gt;和&lt;b&gt;undefined&lt;/b&gt;在比较时不会被转换&lt;/li&gt;
&lt;li&gt;NaN出现时，相等操作符返回false&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;全等操作符为&amp;#x3D;&amp;#x3D;&amp;#x3D;，对象的不全等操作符为!&amp;#x3D;&amp;#x3D;。它们不会转换变量类型，相比较类型后比较值。因此行为更容易预测。&lt;/p&gt;
</content>
        <category term="JavaScript" />
        <category term="类型转换" />
        <category term="==" />
        <category term="类型判断" />
        <updated>2017-03-01T04:06:13.000Z</updated>
    </entry>
</feed>
