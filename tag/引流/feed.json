{
    "version": "https://jsonfeed.org/version/1",
    "title": "Shenlvmeng's Blog • All posts by \"引流\" tag",
    "description": "Be sharp, my friend.",
    "home_page_url": "http://shenlvmeng.github.com/blog",
    "items": [
        {
            "id": "http://shenlvmeng.github.com/blog/2021/12/20/deep-link-note/",
            "url": "http://shenlvmeng.github.com/blog/2021/12/20/deep-link-note/",
            "title": "deeplink技术分析",
            "date_published": "2021-12-20T14:48:09.000Z",
            "content_html": "<p><a href=\"https://en.wikipedia.org/wiki/Deep_linking\">deep link</a>是指可以从任何渠道，包括短信、应用内、网页中直接跳转到应用app内的特定页面的技术。它一定程度上打破了移动端app间“孤岛”的局面，实现了快捷的跳转。根据是否安装app，主要有下面两种行为：</p>\n<ul>\n<li>已安装，唤起app并跳转到特定页面</li>\n<li>未安装，跳转到App Store或下载页面引导用户下载安装，在下载后的第一次打开自动跳转到特定深度页面，这种情况也叫<strong>deferred deep link</strong></li>\n</ul>\n<p><img src=\"https://support.staffbase.com/hc/article_attachments/115003896431/deeplink_deeplink-browser-app.png\" alt=\"deep-link-info\"></p>\n<h2 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h2><p>deep link可以应用在很多常见的场景下，如</p>\n<ul>\n<li>社交分享</li>\n<li>广告引流</li>\n<li>web和app互通</li>\n<li>裂变活动</li>\n<li>短信、邮件营销</li>\n</ul>\n<p>在web和app互通场景下，可以很方便地实现从外部回流页回到app内特定位置，如：</p>\n<ul>\n<li>电商类app：分享H5跳转到特定商品页</li>\n<li>游戏类app：分享H5跳转到特定房间或任务</li>\n<li>直播类app：分享H5跳转到特定直播间</li>\n</ul>\n<p>deep link缩短了操作路径，减少了用户操作成本，从而降低用户流失率，帮助app拉新和留存。</p>\n<h2 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h2><p>常见的实现方式有下面几种</p>\n<ul>\n<li>URL scheme，iOS和Android下的通用方式，打开前会询问是否打开某app</li>\n<li><a href=\"https://developer.chrome.com/docs/multidevice/android/intents/\">Chrome Intent</a>，Chrome 25+无法通过URL scheme 唤起 App，必须使用Intent</li>\n<li>Universal Link，适用于iOS 9及更高版本，点击http&#x2F;https即跳转，操作丝滑</li>\n<li>App Links，适用于Android 6及更高版本，点击http&#x2F;https即跳转，操作丝滑</li>\n</ul>\n<p>除了上面几种，还有<a href=\"https://developer.apple.com/documentation/webkit/promoting_apps_with_smart_app_banners\">Smart App Banners</a>、剪贴板等方案</p>\n<h3 id=\"URL-scheme\"><a href=\"#URL-scheme\" class=\"headerlink\" title=\"URL scheme\"></a>URL scheme</h3><p>格式形如<code>[scheme:][//authority][path][?query][#fragment]</code>，一般使用在iOS 9和Android 6之前。方法通用，但有以下问题：</p>\n<ul>\n<li>本身没有规范，难以获知要跳转的path或query</li>\n<li>功能不全，app越复杂，scheme就越复杂</li>\n<li>会被拦截，包括浏览器或应用的webview，如微信</li>\n<li>打开app失败后，iOS会有错误弹窗，体验不好<ul>\n<li>提示网页无效</li>\n</ul>\n</li>\n<li>URL scheme可能重复</li>\n</ul>\n<p>常见Scheme URL</p>\n<table>\n<thead>\n<tr>\n<th>微信</th>\n<th>电商</th>\n<th>浏览器</th>\n<th>系统</th>\n<th>其他</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>weixin:&#x2F;&#x2F;dl&#x2F;scan 扫一扫<br />weixin:&#x2F;&#x2F;dl&#x2F;moments 朋友圈<br /> weixin:&#x2F;&#x2F;dl&#x2F;settings 设置</td>\n<td>淘宝：taobao:&#x2F;&#x2F;<br />支付宝：alipay:&#x2F;&#x2F;<br />美团：imeituan:&#x2F;&#x2F;</td>\n<td>Chrome：googlechrome:&#x2F;&#x2F;<br />UC 浏览器：ucbrowser:&#x2F;&#x2F;</td>\n<td>邮箱：mailto:&#x2F;&#x2F;<br />短信：message:&#x2F;&#x2F;<br />App Store：itms-appss:&#x2F;&#x2F;  macappstores:&#x2F;&#x2F;</td>\n<td>飞书：lark:&#x2F;&#x2F;<br />微博：sinaweibo:&#x2F;&#x2F;</td>\n</tr>\n</tbody></table>\n<h3 id=\"Chrome-Intent\"><a href=\"#Chrome-Intent\" class=\"headerlink\" title=\"Chrome Intent\"></a>Chrome Intent</h3><p>Chrome 25+无法通过iframe的src启动Android app。改为构造形如下面的intent锚点。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">intent:  </span><br><span class=\"line\">   HOST/URI-path // Optional host  </span><br><span class=\"line\">   #Intent;  </span><br><span class=\"line\">      package=\\[string\\];  </span><br><span class=\"line\">      action=\\[string\\];  </span><br><span class=\"line\">      category=\\[string\\];  </span><br><span class=\"line\">      component=\\[string\\];  </span><br><span class=\"line\">      scheme=\\[string\\];  </span><br><span class=\"line\">   end;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>end</code>前添加<code>S.browser_fallback_url=[encoded_full_url]</code>可以指定唤起失败的地址。一个构造好的intent形如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">intent://path#Intent;scheme=xxx;package=com. xxx;S.browser_fallback_url=https://xxx;end</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Universal-Link\"><a href=\"#Universal-Link\" class=\"headerlink\" title=\"Universal Link\"></a>Universal Link</h3><blockquote>\n<p><a href=\"https://developer.apple.com/ios/universal-links/\">官方介绍</a></p>\n</blockquote>\n<p>Universal Link，即通用链接，是iOS 9推出的通过HTTPS链接来启动app的特性。既可以打开app，在没有安装时，则打开特定网页。对比URL Scheme优势在于：</p>\n<ul>\n<li>无缝切换，不弹窗确认</li>\n<li>兼容性好，未安装时直接打开网页</li>\n<li>使用通用的HTTP协议，不用担心scheme重复</li>\n<li>通过网站的配置文件和app关联，保证安全</li>\n</ul>\n<p>在网站下根目录或<code>.well-known</code>路径下需要有<code>apple-app-association</code>（无后缀名）JSON文件。例如，知乎的配置文件为<a href=\"https://oia.zhihu.com/apple-app-site-association%E3%80%82%E5%9C%A8%E9%85%8D%E7%BD%AE%E6%97%B6%EF%BC%8C\">https://oia.zhihu.com/apple-app-site-association。在配置时，</a></p>\n<ul>\n<li>需要保证有一个HTTPS的域名，最好和web网页域名区分开，保证web网页的正常访问</li>\n<li>在开发者中心 ，Identifiers下 AppIDs 找到自己的App ID，编辑打开Associated Domains服务</li>\n<li>打开工程配置中的 Associated Domains ，在其中的 Domains 中填入你想支持的域名，必须以<code>applinks:</code>为前缀</li>\n<li>配置<code>apple-app-site-association</code>文件，不带任何后缀，上传该文件到服务器的根目录或者<code>.well-known</code>目录下</li>\n</ul>\n<p><img src=\"https://docs-assets.developer.apple.com/published/4cbbb0bb235bdd82277b0f8d294afab8/13300/supporting-associated-domains-1@2x.png\"></p>\n<p>在网站下配置好Universal Link后，用户点击网站链接后，即会直接跳转到App，而不需要经过浏览器。当然，微信等app还是会拦截Universal Link的行为，需要在微信注册自己的应用id和Universal Link。</p>\n<h3 id=\"App-Links\"><a href=\"#App-Links\" class=\"headerlink\" title=\"App Links\"></a>App Links</h3><blockquote>\n<p><a href=\"https://developer.android.google.cn/studio/write/app-link-indexing\">官方介绍</a></p>\n</blockquote>\n<p>App Links，类似Universal Link，是Android 6（Android M）及以上操作系统中适用的HTTPS路径链接。可以直接将用户带入到Android app内的特定页面中，实现上，网站配置文件名为<code>assetlink</code>，只能放在<code>.well-known</code>目录下。如<a href=\"https://vt.tiktok.com/.well-known/assetlinks.json%E3%80%82%E4%B8%8D%E8%BF%87%EF%BC%8C%E5%9B%BD%E4%BA%A7%E7%9A%84%E5%AE%89%E5%8D%93%E7%89%88%E6%9C%AC%E4%BB%A5%E5%8F%8A%E5%BE%AE%E4%BF%A1%E7%AD%89app%E4%BE%9D%E6%97%A7%E4%BC%9A%E6%8B%A6%E6%88%AA%E3%80%82\">https://vt.tiktok.com/.well-known/assetlinks.json。不过，国产的安卓版本以及微信等app依旧会拦截。</a></p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><ul>\n<li>Android webview本身支持唤醒第三方app，但如果设置了自定义WebViewClient则需要自己处理，具体是指在<code>shouldOverrideUrlLoading</code>方法中决定如何处理</li>\n<li>Smart App Banners，在网页里增加一个<code>&lt;meta&gt;</code>标签，可以在打开页面时，检测手机是否安装某个app，并且在页面顶部显示一个Banner显示App的基本信息，安装时显示打开，未安装时显示安装</li>\n</ul>\n<h2 id=\"相关产品或开源库\"><a href=\"#相关产品或开源库\" class=\"headerlink\" title=\"相关产品或开源库\"></a>相关产品或开源库</h2><p>结合点击行为、重定向行为、来源去向分析、落地页等，还可以做很多事情，市面上也有下面一些产品：</p>\n<ul>\n<li><a href=\"https://www.mob.com/mobService/moblink\">MobLink</a></li>\n<li><a href=\"https://www.linkedme.cc/link-page.html\">LinkedMe</a></li>\n<li><a href=\"https://www.openinstall.io/deeplinking.html\">openinstall</a></li>\n</ul>\n<p>另外，也有一些开源库实现web跳转app</p>\n<ul>\n<li><a href=\"https://github.com/suanmei/callapp-lib\">https://github.com/suanmei/callapp-lib</a></li>\n<li><a href=\"https://github.com/jawidx/web-launch-app\">https://github.com/jawidx/web-launch-app</a></li>\n<li><a href=\"https://github.com/luojinghui/web-open-app\">https://github.com/luojinghui/web-open-app</a></li>\n</ul>\n<p><em>–END–</em></p>\n",
            "tags": [
                "引流",
                "universal-link",
                "app-link"
            ]
        }
    ]
}