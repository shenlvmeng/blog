{
    "version": "https://jsonfeed.org/version/1",
    "title": "Shenlvmeng's Blog • All posts by \"思想\" tag",
    "description": "Be sharp, my friend.",
    "home_page_url": "http://shenlvmeng.github.com/blog",
    "items": [
        {
            "id": "http://shenlvmeng.github.com/blog/2018/05/01/sicp-note/",
            "url": "http://shenlvmeng.github.com/blog/2018/05/01/sicp-note/",
            "title": "SICP大纲",
            "date_published": "2018-05-01T09:18:04.000Z",
            "content_html": "<blockquote>\n<p>本文是《计算机程序的构造和解释》的笔记</p>\n</blockquote>\n<h2 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h2><p>序中其实也包含了很多睿智的观点，值得细细体会。</p>\n<ul>\n<li>“每一个计算机程序都是现实中的或者精神中的某个过程的一个模型”</li>\n<li>“我们很少能通过自己的程序将这种过程模拟到永远令人满意的程度”</li>\n<li>“不幸的是，随着程序变得更大更复杂（实际上它们几乎总是如此），这种描述本身的适宜性，一致性和正确性也都变得非常值得怀疑了”</li>\n<li>“如何利用一些已经证明和有价值的组织技术，将这些结构组合成更大的结构，这些都是至关重要的”</li>\n<li>“将我们的Lisp程序变换到‘机器’程序的过程本身也是抽象模型，是通过程序设计做出来的。研究和构造它们，能使人更加深刻地理解与任何模型的程序设计有关的程序组织问题”</li>\n<li>“计算机永远都不够大也不够快。硬件技术的每一次突破都带来了更大规模的程序设计事业，新的组织原理，以及更加丰富的抽象模型。每个读者都应该反复问自己‘到哪里才是头儿，到哪里才是头儿’——但是不要问的过于频繁，以免忽略了程序设计的乐趣，使自己陷入一种喜忧参半的呆滞状态中”</li>\n<li>“Pascal是为了建造金字塔——壮丽辉煌，令人震撼，是由各就其位的沉重巨石筑起的静态结构，而Lisp则是为了构造有机体——同样壮丽辉煌并令人震撼，由各就其位但却永不静止的无数简单的有机体片段构成的动态结构”</li>\n<li>“Lisp程序大大抬高了函数库的地位，使其可用性超越了催生它们的那些具体应用”</li>\n<li>“采用100个函数在一种数据结构上操作，远远优于用10个函数在10个数据结构上操作。作为这些情况的必然后果，金字塔矗立在那里千年不变，而有机体则必须演化，否则会死亡”</li>\n<li>“在任何非常大的程序设计工作中，一条有用的组织原则就是通过发明新语言，去控制和隔离作业模块之间的信息流动”</li>\n</ul>\n<h2 id=\"过程抽象\"><a href=\"#过程抽象\" class=\"headerlink\" title=\"过程抽象\"></a>过程抽象</h2><ul>\n<li>应用序和正则序</li>\n<li>递归和迭代在展开式上的区分，以及尾递归</li>\n<li>过程（函数）作为入参、返回值</li>\n<li>匿名函数和高阶函数</li>\n</ul>\n<h2 id=\"数据抽象\"><a href=\"#数据抽象\" class=\"headerlink\" title=\"数据抽象\"></a>数据抽象</h2><ul>\n<li>构造函数和方法函数</li>\n<li><code>cons</code>和<code>car</code>、<code>cdr</code></li>\n<li>序对和list（层次化数据）</li>\n<li>表操作和表映射</li>\n<li>序列化操作</li>\n<li>符号数据（类似字符串）</li>\n<li>数据的多种表示（类型）与通用操作</li>\n</ul>\n<h2 id=\"模块化、对象和状态\"><a href=\"#模块化、对象和状态\" class=\"headerlink\" title=\"模块化、对象和状态\"></a>模块化、对象和状态</h2><ul>\n<li>面向对象和面向流</li>\n<li>从时间角度理解赋值和局部状态</li>\n<li>赋值的利与弊</li>\n<li>赋值带来的环境模型解释（作用域、作用域链）<ul>\n<li>局部状态</li>\n<li>作用域模型的解释</li>\n</ul>\n</li>\n<li>变动的表<ul>\n<li>区分共享和相等（相同的指针、相同的值）</li>\n<li>队列与键值对</li>\n</ul>\n</li>\n<li>描述约束系统</li>\n<li>并发（交错进行的读写操作）<ul>\n<li>串行化和串行化组</li>\n<li>mutex(mutual exclusion)和实现</li>\n<li>死锁（多共享资源）<ul>\n<li>按顺序获取资源列表</li>\n<li>死锁恢复</li>\n<li>屏障同步</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>流<ul>\n<li>延时求值的表序列</li>\n<li>延时求值的原理</li>\n<li>无穷流的构造</li>\n<li>流操作和组合</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"元语言设计\"><a href=\"#元语言设计\" class=\"headerlink\" title=\"元语言设计\"></a>元语言设计</h2><ul>\n<li>求值器（解释器）的工作与意义<ul>\n<li>在基本过程上提供组合与抽象构建一个语言<ul>\n<li>表达式的嵌套</li>\n<li>变量维护</li>\n<li>过程复合</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>求值器内核<ul>\n<li>eval 过程体解释</li>\n<li>apply 过程求值解释</li>\n<li>表达式规范化和实现 &#x2F; 派生表达式</li>\n<li>环境模型的数据结构</li>\n<li>求值器程序初始化</li>\n</ul>\n</li>\n<li>数据即程序<ul>\n<li>图灵机和停机问题</li>\n</ul>\n</li>\n<li>内部定义<ul>\n<li>内部定义是否应该具有时序</li>\n<li>Y结合子与lambda演算</li>\n</ul>\n</li>\n<li>语法分析与执行分离</li>\n<li>惰性求值<ul>\n<li>thunk化，关联表达式和环境</li>\n<li>惰性的表</li>\n</ul>\n</li>\n<li>非确定性求值（满足约束的所有可行解）<ul>\n<li>amb和自动回溯</li>\n<li>amb实现，成功与失败继续过程</li>\n</ul>\n</li>\n<li>逻辑语言设计<ul>\n<li>类SQL语言基于amb的实现</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"解释与编译\"><a href=\"#解释与编译\" class=\"headerlink\" title=\"解释与编译\"></a>解释与编译</h2><ul>\n<li>机器描述<ul>\n<li>基本指令与子程序（label）</li>\n<li>堆栈实现递归</li>\n</ul>\n</li>\n<li>基本指令的实现<ul>\n<li>类汇编语言</li>\n</ul>\n</li>\n<li>内存管理<ul>\n<li>表与堆栈的实现</li>\n<li>garbage collection机制</li>\n</ul>\n</li>\n<li>解释<ul>\n<li>基础操作实现</li>\n<li>尾递归优化解释</li>\n</ul>\n</li>\n<li>编译<ul>\n<li>与解释有何区别，各自优势</li>\n<li>env&#x2F;argl&#x2F;proc&#x2F;val&#x2F;continue寄存器</li>\n<li>编译器结构<ul>\n<li>语法分派</li>\n<li>入参：target（存储表达式值的寄存器）与linkage（continue寄存器）</li>\n<li>指令序列的结构与构造，分析指令序列，<code>preserving</code>机制避免无谓的堆栈操作</li>\n</ul>\n</li>\n<li>表达式的编译<ul>\n<li>linkage的编译，检查<code>next</code>或<code>return</code>的情况</li>\n<li>简单、条件表达式、表达式序列的编译</li>\n<li>lambda表达式的编译</li>\n</ul>\n</li>\n<li>过程的编译<ul>\n<li>入参的处理</li>\n<li>尾递归</li>\n</ul>\n</li>\n<li>指令序列的组合</li>\n<li>代码编译的实例</li>\n<li>优化变量查找<ul>\n<li>词法地址</li>\n</ul>\n</li>\n<li>解释与编译<ul>\n<li>解释：机器语言 -&gt; 用户程序</li>\n<li>编译：用户程序 -&gt; 机器语言</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>最后吐槽下，书是本好书，就是翻译的不太给力，在有些地方强行提高了理解难度。</p>\n",
            "tags": [
                "编程",
                "思想",
                "程序设计"
            ]
        }
    ]
}