<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://shenlvmeng.github.com/blog</id>
    <title>Shenlvmeng&#39;s Blog • Posts by &#34;dart&#34; tag</title>
    <link href="http://shenlvmeng.github.com/blog" />
    <updated>2019-06-24T16:51:28.000Z</updated>
    <category term="总结" />
    <category term="制度" />
    <category term="道德" />
    <category term="文官" />
    <category term="万历" />
    <category term="明朝" />
    <category term="读书笔记" />
    <category term="展望" />
    <category term="2018" />
    <category term="2019" />
    <category term="flag" />
    <category term="2020" />
    <category term="2021" />
    <category term="2022" />
    <category term="2023" />
    <category term="面试" />
    <category term="前端" />
    <category term="FAQ" />
    <category term="HTML" />
    <category term="CSS" />
    <category term="style guide" />
    <category term="编程" />
    <category term="范式" />
    <category term="设计" />
    <category term="艺术" />
    <category term="质量" />
    <category term="async_hooks" />
    <category term="cls-hooked" />
    <category term="logId" />
    <category term="录音" />
    <category term="getUserMedia" />
    <category term="AudioContext" />
    <category term="PCM" />
    <category term="WAVE" />
    <category term="二叉搜索树" />
    <category term="算法" />
    <category term="回忆" />
    <category term="老朋友" />
    <category term="C" />
    <category term="Hash" />
    <category term="布隆过滤器" />
    <category term="字符串检索" />
    <category term="canvas" />
    <category term="流程图" />
    <category term="d3" />
    <category term="g6" />
    <category term="zrender" />
    <category term="processOn" />
    <category term="SDN" />
    <category term="cbench" />
    <category term="安装说明" />
    <category term="绘图" />
    <category term="动画" />
    <category term="攻略" />
    <category term="流水账" />
    <category term="成都" />
    <category term="重庆" />
    <category term="武汉" />
    <category term="重构" />
    <category term="代码" />
    <category term="代码风格" />
    <category term="数据可视化" />
    <category term="爬虫" />
    <category term="chrome" />
    <category term="crx" />
    <category term="扩展" />
    <category term="CORS" />
    <category term="跨域" />
    <category term="盒模型" />
    <category term="浮动" />
    <category term="Reactive Programming" />
    <category term="JavaScript" />
    <category term="Cycle.js" />
    <category term="Dart" />
    <category term="最佳实践" />
    <category term="引流" />
    <category term="universal-link" />
    <category term="app-link" />
    <category term="脚手架" />
    <category term="degit" />
    <category term="git" />
    <category term="设计模式" />
    <category term="类" />
    <category term="接口" />
    <category term="抽象类" />
    <category term="DOM" />
    <category term="Docker" />
    <category term="ONOS" />
    <category term="控制器" />
    <category term="虚拟化" />
    <category term="笔记" />
    <category term="UX" />
    <category term="UED" />
    <category term="准则" />
    <category term="Java" />
    <category term="Ruby" />
    <category term="反射" />
    <category term="编程范式" />
    <category term="鸭子类型" />
    <category term="管理" />
    <category term="效率" />
    <category term="知识工作者" />
    <category term="卓有成效" />
    <category term="Elm" />
    <category term="框架" />
    <category term="函数式编程" />
    <category term="虚网映射" />
    <category term="Javascript" />
    <category term="并发" />
    <category term="event loop" />
    <category term="覆盖率" />
    <category term="端到端测试" />
    <category term="istanbul" />
    <category term="istanbuljs" />
    <category term="JavaSript" />
    <category term="Express" />
    <category term="源码" />
    <category term="代码覆盖率" />
    <category term="istanbul-middleware" />
    <category term="代码插桩" />
    <category term="require钩子" />
    <category term="babel-plugin-istanbul" />
    <category term="css" />
    <category term="html5" />
    <category term="flex" />
    <category term="javascript" />
    <category term="roadmap" />
    <category term="闭包" />
    <category term="Haskell" />
    <category term="monad" />
    <category term="后端" />
    <category term="管理后台" />
    <category term="egg.js" />
    <category term="工作流" />
    <category term="pull request" />
    <category term="golang" />
    <category term="语言学习" />
    <category term="黑客与画家" />
    <category term="创业" />
    <category term="骑行" />
    <category term="海南" />
    <category term="图文" />
    <category term="reflow" />
    <category term="repaint" />
    <category term="命名法" />
    <category term="成功学" />
    <category term="自我建设" />
    <category term="HTTP" />
    <category term="HTTP/2" />
    <category term="SPDY" />
    <category term="QUIC" />
    <category term="HTTPS" />
    <category term="状态码" />
    <category term="网络攻击" />
    <category term="介绍" />
    <category term="图片渲染" />
    <category term="html2canvas" />
    <category term="dom-to-image" />
    <category term="electron" />
    <category term="indexedDB" />
    <category term="异步" />
    <category term="Generator" />
    <category term="thunk" />
    <category term="async" />
    <category term="函数表达式" />
    <category term="对象" />
    <category term="继承" />
    <category term="类型转换" />
    <category term="==" />
    <category term="类型判断" />
    <category term="猫" />
    <category term="杀手" />
    <category term="管理学" />
    <category term="领导力" />
    <category term="梯队" />
    <category term="移动端" />
    <category term="UI" />
    <category term="自适应" />
    <category term="rem" />
    <category term="Electron" />
    <category term="GUI" />
    <category term="gpx" />
    <category term="template" />
    <category term="Electron Builder" />
    <category term="PWA" />
    <category term="方法论" />
    <category term="夜话" />
    <category term="多线" />
    <category term="生活" />
    <category term="密码" />
    <category term="密钥" />
    <category term="技改" />
    <category term="Vue" />
    <category term="gulp" />
    <category term="瀑布流" />
    <category term="电影" />
    <category term="PHP" />
    <category term="参考" />
    <category term="思维" />
    <category term="学习能力" />
    <category term="右脑" />
    <category term="经济学" />
    <category term="宏观经济学" />
    <category term="术语" />
    <category term="GDP" />
    <category term="CPI" />
    <category term="储蓄" />
    <category term="投资" />
    <category term="金融市场" />
    <category term="股票" />
    <category term="债券" />
    <category term="美联储" />
    <category term="失业" />
    <category term="货币" />
    <category term="现值" />
    <category term="准备金" />
    <category term="货币中性" />
    <category term="通货膨胀" />
    <category term="汇率" />
    <category term="购买力" />
    <category term="净出口" />
    <category term="资产净流出" />
    <category term="总需求" />
    <category term="总供给" />
    <category term="流动性偏好" />
    <category term="乘数效应" />
    <category term="菲利普斯曲线" />
    <category term="微观经济学" />
    <category term="供求" />
    <category term="贸易" />
    <category term="市场" />
    <category term="税" />
    <category term="剩余" />
    <category term="外部性" />
    <category term="公共物品" />
    <category term="公共资源" />
    <category term="生产成本" />
    <category term="利润" />
    <category term="垄断" />
    <category term="价格歧视" />
    <category term="寡头" />
    <category term="垄断竞争" />
    <category term="生产要素市场" />
    <category term="贫困" />
    <category term="消费者选择理论" />
    <category term="不对称信息" />
    <category term="政治经济学" />
    <category term="行为经济学" />
    <category term="VSCode" />
    <category term="编辑器" />
    <category term="IDE" />
    <category term="hybrid" />
    <category term="JSBridge" />
    <category term="Web Worker" />
    <category term="Service Worker" />
    <category term="习惯" />
    <category term="lint" />
    <category term="editorconfig" />
    <category term="commit message" />
    <category term="量子物理" />
    <category term="史话" />
    <category term="埋点" />
    <category term="raven.js" />
    <category term="前端监控" />
    <category term="文本编辑器" />
    <category term="quill" />
    <category term="结构化数据" />
    <category term="React" />
    <category term="Hooks" />
    <category term="函数组件" />
    <category term="复用" />
    <category term="状态管理" />
    <category term="redux" />
    <category term="MobX" />
    <category term="代码质量" />
    <category term="重来" />
    <category term="requestAnimationFrame" />
    <category term="TypeScript" />
    <category term="路书" />
    <category term="gpx解析" />
    <category term="EXIF" />
    <category term="人类" />
    <category term="生存" />
    <category term="基因" />
    <category term="响应式编程" />
    <category term="RxJS" />
    <category term="成长" />
    <category term="业务" />
    <category term="思想" />
    <category term="程序设计" />
    <category term="心理学" />
    <category term="自我" />
    <category term="社会思维" />
    <category term="社会影响" />
    <category term="文化" />
    <category term="性别" />
    <category term="从众" />
    <category term="说服" />
    <category term="临床诊断" />
    <category term="陪审团" />
    <category term="司法" />
    <category term="物质主义" />
    <category term="健康" />
    <category term="社会关系" />
    <category term="偏见" />
    <category term="攻击行为" />
    <category term="亲密关系" />
    <category term="友谊" />
    <category term="爱情" />
    <category term="利他" />
    <category term="冲突" />
    <category term="和解" />
    <category term="软技能" />
    <category term="理财" />
    <category term="健身" />
    <category term="自我营销" />
    <category term="学习" />
    <category term="商业模式" />
    <category term="产品" />
    <category term="校园网" />
    <category term="互联网" />
    <category term="技术" />
    <category term="web开发" />
    <category term="哲思" />
    <category term="择偶观" />
    <category term="validator" />
    <category term="大文件" />
    <category term="visibilityChange" />
    <category term="IntersectionObserver" />
    <category term="图种" />
    <category term="draggable" />
    <category term="webpack" />
    <category term="z-index" />
    <category term="git submodule" />
    <category term="object-fit" />
    <category term="object-position" />
    <category term="BroadcastChannel" />
    <category term="extract-text-webpack-plugin" />
    <category term="lottie" />
    <category term="backface-visibility" />
    <category term="egret" />
    <category term="mock" />
    <category term="SSO" />
    <category term="autoprefixer" />
    <category term="polyfill" />
    <category term="Android" />
    <category term="ffmpeg" />
    <category term="React Hooks" />
    <category term="rollup" />
    <category term="CDN" />
    <category term="DNS" />
    <category term="CNAME" />
    <category term="架构" />
    <category term="组件" />
    <category term="ssh" />
    <category term="fis-receiver" />
    <category term="tmux" />
    <category term="origami" />
    <category term="promise" />
    <category term="encodeURI" />
    <category term="encodeURIComponent" />
    <category term="axios" />
    <category term="charles" />
    <category term="黑色幽默" />
    <category term="朋友" />
    <category term="梦" />
    <category term="濒死" />
    <category term="江南" />
    <category term="苏州" />
    <category term="无锡" />
    <category term="宜兴" />
    <category term="湖州" />
    <category term="南浔" />
    <category term="游记" />
    <category term="随笔" />
    <category term="群众" />
    <category term="理论" />
    <category term="实效" />
    <category term="测试" />
    <category term="长沙" />
    <category term="杭州" />
    <category term="湖南" />
    <category term="核酸" />
    <category term="美食" />
    <category term="云南" />
    <category term="丽江" />
    <category term="大理" />
    <category term="青岛" />
    <category term="济南" />
    <category term="山东" />
    <category term="西北" />
    <category term="银川" />
    <category term="西宁" />
    <category term="青海湖" />
    <category term="西海镇" />
    <category term="茶卡盐湖" />
    <category term="厦门" />
    <category term="感受" />
    <category term="C语言" />
    <category term="树" />
    <category term="主干开发" />
    <category term="GitFlow" />
    <category term="GithubFlow" />
    <category term="typescript" />
    <category term="类型系统" />
    <category term="webrtc" />
    <category term="RTMP" />
    <category term="首屏时间" />
    <category term="性能优化" />
    <category term="公司" />
    <category term="个人发展" />
    <category term="战略" />
    <category term="晋升" />
    <category term="哲学" />
    <category term="幸福" />
    <category term="人生" />
    <category term="叔本华" />
    <category term="Unix" />
    <category term="Rollup" />
    <category term="mouseout" />
    <category term="mouseleave" />
    <category term="lint-staged" />
    <category term="吸顶" />
    <category term="图片组件" />
    <category term="形式系统" />
    <category term="不完全性" />
    <category term="隐喻" />
    <category term="哥德尔" />
    <category term="巴赫" />
    <category term="埃舍尔" />
    <category term="济州" />
    <category term="西归浦" />
    <category term="城山" />
    <category term="咸德" />
    <category term="人工智能" />
    <category term="心智" />
    <category term="自指" />
    <category term="图灵" />
    <category term="马列主义" />
    <category term="恩格斯" />
    <category term="家庭" />
    <category term="国家" />
    <category term="阶级" />
    <category term="氏族" />
    <category term="哲学史" />
    <category term="孔子" />
    <category term="老子" />
    <category term="儒家" />
    <category term="道家" />
    <category term="佛教" />
    <category term="禅宗" />
    <category term="理学" />
    <category term="心学" />
    <category term="计算机" />
    <category term="微机原理" />
    <category term="门" />
    <category term="操作系统" />
    <category term="数字电路" />
    <category term="2024" />
    <category term="政府" />
    <category term="经济" />
    <category term="消费" />
    <category term="土地金融" />
    <category term="饮食" />
    <category term="蛋白质" />
    <category term="碳水" />
    <category term="慢性病" />
    <category term="三高" />
    <category term="肿瘤" />
    <entry>
        <id>http://shenlvmeng.github.com/blog/2019/06/25/dart-best-practice/</id>
        <title>Dart快速入门 效率篇</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2019/06/25/dart-best-practice/"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;参考自&lt;a href=&#34;https://dart.dev/guides/language/effective-dart&#34;&gt;Effective Dart&lt;/a&gt;，截至2019&amp;#x2F;06&amp;#x2F;12&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;通用原则&#34;&gt;&lt;a href=&#34;#通用原则&#34; class=&#34;headerlink&#34; title=&#34;通用原则&#34;&gt;&lt;/a&gt;通用原则&lt;/h2&gt;&lt;p&gt;类似其他编程语言，有下面两点注意事项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Be consistent, 统一风格&lt;/li&gt;
&lt;li&gt;Be brief, 保持精简，DRY&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;最佳实践&#34;&gt;&lt;a href=&#34;#最佳实践&#34; class=&#34;headerlink&#34; title=&#34;最佳实践&#34;&gt;&lt;/a&gt;最佳实践&lt;/h2&gt;&lt;p&gt;指南以下面的关键词开头：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;要&lt;/strong&gt;，一定遵守，下面没有前缀的就是以此开头&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不要&lt;/strong&gt;，这么做不是个好主意&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;，应该遵守，当不遵守时确保有合理理由&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;，和上面相反，除非有足够好的理由，否则不应该这么做&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;考虑&lt;/strong&gt;，根据实际情况而定&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同时会提到下面这些客体：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;库成员&lt;/strong&gt;，顶级变量、getter、setter、函数&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;类成员&lt;/strong&gt;，类变量、getter、setter、函数&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;成员&lt;/strong&gt;，库成员或类成员&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;变量&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;属性&lt;/strong&gt;，类中的成员变量、getter、setter，顶级变量、getter、setter&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;样式&#34;&gt;&lt;a href=&#34;#样式&#34; class=&#34;headerlink&#34; title=&#34;样式&#34;&gt;&lt;/a&gt;样式&lt;/h3&gt;&lt;h4 id=&#34;标识符&#34;&gt;&lt;a href=&#34;#标识符&#34; class=&#34;headerlink&#34; title=&#34;标识符&#34;&gt;&lt;/a&gt;标识符&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;类名用UpperCamelCase风格&lt;/li&gt;
&lt;li&gt;库和文件名用lowercase_with_underscores风格&lt;/li&gt;
&lt;li&gt;导入前缀用lowercase_with_underscores风格&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;package:javascript_utils/javascript_utils.dart&amp;#x27;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; js_utils;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;其他标识符使用lowerCamelCase风格&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用lowerCamelCase风格命名常量&lt;ul&gt;
&lt;li&gt;原因：CAPS_STYLE可读性差&amp;#x2F;可能会用于final变量&amp;#x2F;和枚举不搭&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;把超过2个字母的缩略词当做一般单词来做首字母大写&lt;ul&gt;
&lt;li&gt;原因：提高可读性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不要&lt;/strong&gt;在标识符前加前缀&lt;ul&gt;
&lt;li&gt;举例：&lt;code&gt;kTimes&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;顺序&#34;&gt;&lt;a href=&#34;#顺序&#34; class=&#34;headerlink&#34; title=&#34;顺序&#34;&gt;&lt;/a&gt;顺序&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;把”dart:”导入语句放在最前&lt;/li&gt;
&lt;li&gt;把”package:”放在相对导入前&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;把第三方”package:”导入放在其他语句前&lt;/li&gt;
&lt;li&gt;export语句放在最后&lt;/li&gt;
&lt;li&gt;按字母序排序&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;格式化&#34;&gt;&lt;a href=&#34;#格式化&#34; class=&#34;headerlink&#34; title=&#34;格式化&#34;&gt;&lt;/a&gt;格式化&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;使用dartfmt帮你美化&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;考虑&lt;/strong&gt;让你的代码更容易美化&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;每行超过80字符&lt;/li&gt;
&lt;li&gt;所有控制结构都使用大括号&lt;ul&gt;
&lt;li&gt;只有if语句写成1行时可以省略&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;文档&#34;&gt;&lt;a href=&#34;#文档&#34; class=&#34;headerlink&#34; title=&#34;文档&#34;&gt;&lt;/a&gt;文档&lt;/h3&gt;&lt;h4 id=&#34;注释&#34;&gt;&lt;a href=&#34;#注释&#34; class=&#34;headerlink&#34; title=&#34;注释&#34;&gt;&lt;/a&gt;注释&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;使用句子的形式表达注释&lt;/li&gt;
&lt;li&gt;用单行注释符表达注释&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;文档注释&#34;&gt;&lt;a href=&#34;#文档注释&#34; class=&#34;headerlink&#34; title=&#34;文档注释&#34;&gt;&lt;/a&gt;文档注释&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;用&lt;code&gt;///&lt;/code&gt;表达文档注释&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;为公开API书写注释&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;考虑&lt;/strong&gt;为私有API书写注释&lt;/li&gt;
&lt;li&gt;用一句话为文档注释开头&lt;/li&gt;
&lt;li&gt;类似git commit message，第一行后空出一行独立成段&lt;/li&gt;
&lt;li&gt;去掉能从上下文直接读出的冗余信息&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用第三人称动词开头表示函数、方法注释&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用名词短语开头表示变量、成员、getter、setter注释&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用名词短语开头表示库、类型注释&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;考虑&lt;/strong&gt;在注释中添加示例代码&lt;/li&gt;
&lt;li&gt;在注释中用&lt;code&gt;[]&lt;/code&gt;方括号引用作用域里的标识符&lt;/li&gt;
&lt;li&gt;使用简短平实的语言描述参数、返回值和异常&lt;/li&gt;
&lt;li&gt;在注解（annotation）前添加注释&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Markdown&#34;&gt;&lt;a href=&#34;#Markdown&#34; class=&#34;headerlink&#34; title=&#34;Markdown&#34;&gt;&lt;/a&gt;Markdown&lt;/h4&gt;&lt;p&gt;Dart允许在comment中使用Markdown格式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;滥用markdown&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;使用html格式化文本&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用反引号（```）格式化代码&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;行文&#34;&gt;&lt;a href=&#34;#行文&#34; class=&#34;headerlink&#34; title=&#34;行文&#34;&gt;&lt;/a&gt;行文&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;简洁清晰&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;使用缩写和首字母缩略词&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用“this”而不是“the”来引用实例成员&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;实践&#34;&gt;&lt;a href=&#34;#实践&#34; class=&#34;headerlink&#34; title=&#34;实践&#34;&gt;&lt;/a&gt;实践&lt;/h3&gt;&lt;p&gt;下面的规则是书写Dart代码时需要知道的指导原则，尤其是维护你类库的人。&lt;/p&gt;
&lt;h4 id=&#34;库&#34;&gt;&lt;a href=&#34;#库&#34; class=&#34;headerlink&#34; title=&#34;库&#34;&gt;&lt;/a&gt;库&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;出于历史原因，Dart允许通过&lt;code&gt;part of&lt;/code&gt;的方式使用库的一部分文件，使用时通过路径而不是变量名引用&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;library&lt;/span&gt; my_library;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// good case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;part&lt;/span&gt; of &lt;span class=&#34;string&#34;&gt;&amp;quot;../../my_library.dart&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// bad case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;part&lt;/span&gt; of my_library&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不要从库的&lt;code&gt;src&lt;/code&gt;文件夹下引用代码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用相对路径应用库，但是不要跨&lt;code&gt;src&lt;/code&gt;文件夹引用&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;字符串&#34;&gt;&lt;a href=&#34;#字符串&#34; class=&#34;headerlink&#34; title=&#34;字符串&#34;&gt;&lt;/a&gt;字符串&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;在长字符串场景下，使用邻接字符串而不是“+”链接&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// good case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;raiseAlarm(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;#x27;ERROR: Parts of the spaceship are on fire. Other &amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;#x27;parts are overrun by martians. Unclear which are which.&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用插值构造字符串&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;在插值中使用多余的大括号（对于简单的变量）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;集合&#34;&gt;&lt;a href=&#34;#集合&#34; class=&#34;headerlink&#34; title=&#34;集合&#34;&gt;&lt;/a&gt;集合&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;尽可能使用字面量形式定义集合，必要时提供泛型类型即可&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// good case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; points = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; userMap = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// bad case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; points = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;List&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; userMap = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;Map&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;不使用length属性判断集合是否为空，Dart提供了&lt;code&gt;isEmpty&lt;/code&gt;和&lt;code&gt;isNotEmpty&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;考虑&lt;/strong&gt;使用高阶函数来明确表达你的意图&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; aquaticNames = animals&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .where((animal) =&amp;gt; animal.isAquatic)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .map((animal) =&amp;gt; animal.name);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;在&lt;code&gt;Iterable.forEach()&lt;/code&gt;中使用函数声明，Dart里的&lt;code&gt;for-in&lt;/code&gt;循环可以很好完成该工作，当然函数本身已经定义好除外。&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// good case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; person &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; people) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;people.forEach(&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;iterable.toList&lt;/code&gt;替代&lt;code&gt;List.from&lt;/code&gt;，只在改变list类型时使用&lt;code&gt;List.from&lt;/code&gt;&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Creates a List&amp;lt;int&amp;gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; iterable = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Prints &amp;quot;List&amp;lt;int&amp;gt;&amp;quot;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(iterable.toList().runtimeType);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Prints &amp;quot;List&amp;lt;dynamic&amp;gt;&amp;quot;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;List&lt;/span&gt;.from(iterable).runtimeType);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Use it with a type&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; numbers = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2.3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;]; &lt;span class=&#34;comment&#34;&gt;// List&amp;lt;num&amp;gt;.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;numbers.removeAt(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;// Now it only contains integers.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; ints = &lt;span class=&#34;built_in&#34;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;&amp;gt;.from(numbers);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;使用高级的&lt;code&gt;whereType&lt;/code&gt;方法从collection中过滤出特定类型元素&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; objects = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; ints = objects.whereType&amp;lt;&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;有类似用法时，不使用&lt;code&gt;cast()&lt;/code&gt;方法&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; stuff = &amp;lt;&lt;span class=&#34;built_in&#34;&gt;dynamic&lt;/span&gt;&amp;gt;[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Good case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; ints = &lt;span class=&#34;built_in&#34;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;&amp;gt;.from(stuff);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Bad case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; ints = stuff.toList().cast&amp;lt;&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;使用&lt;code&gt;cast()&lt;/code&gt;方法，用该方法可能更慢且更有风险，通常情况下有下面一些备选方案&lt;ul&gt;
&lt;li&gt;创建有正确类型的list&lt;/li&gt;
&lt;li&gt;使用每个集合元素时进行casting操作&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Good case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; printEvens(&lt;span class=&#34;built_in&#34;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;Object&lt;/span&gt;&amp;gt; objects) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// We happen to know the list only contains ints.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; n &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; objects) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ((n &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;).isEven) &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Bad case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; printEvens(&lt;span class=&#34;built_in&#34;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;Object&lt;/span&gt;&amp;gt; objects) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// We happen to know the list only contains ints.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; n &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; objects.cast&amp;lt;&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;&amp;gt;()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (n.isEven) &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;真正想要强制类型转换时，使用附加类型的&lt;code&gt;List.from&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;函数&#34;&gt;&lt;a href=&#34;#函数&#34; class=&#34;headerlink&#34; title=&#34;函数&#34;&gt;&lt;/a&gt;函数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;使用函数声明形式命名有名函数（不要使用lambda表达式）&lt;/li&gt;
&lt;li&gt;当有有名函数可以完成任务时，不要创建lambda表达式&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Good case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;names.forEach(&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Bad case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;names.forEach((name) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(name);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;参数&#34;&gt;&lt;a href=&#34;#参数&#34; class=&#34;headerlink&#34; title=&#34;参数&#34;&gt;&lt;/a&gt;参数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;=&lt;/code&gt;分隔入参和它的默认值&lt;/li&gt;
&lt;li&gt;不要显式地使用&lt;code&gt;null&lt;/code&gt;作为默认值（直接不指定即可）&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; error([&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt; message]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  stderr.write(message ?? &lt;span class=&#34;string&#34;&gt;&amp;#x27;\n&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;变量&#34;&gt;&lt;a href=&#34;#变量&#34; class=&#34;headerlink&#34; title=&#34;变量&#34;&gt;&lt;/a&gt;变量&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;不要显式地使用null初始化变量（语言保证了行为可靠性，不需要再显式设置成null）&lt;/li&gt;
&lt;li&gt;不要存储computed value（即可以推算出的值） ，减少冗余信息，保证数据唯一可信源，使用getter和setter去动态推导出它们&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;考虑&lt;/strong&gt;忽略局部变量的类型，Dart有强大的静态分析工具帮你推断类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;成员&#34;&gt;&lt;a href=&#34;#成员&#34; class=&#34;headerlink&#34; title=&#34;成员&#34;&gt;&lt;/a&gt;成员&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;不要创建没必要的getter和setter&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用final限定只读属性&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;考虑&lt;/strong&gt;使用&lt;code&gt;=&amp;gt;&lt;/code&gt;实现只有单一返回语句的函数，对于多行语句建议还是老老实实使用花括号&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;get&lt;/span&gt; width =&amp;gt; right - left;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt; ready(&lt;span class=&#34;built_in&#34;&gt;num&lt;/span&gt; time) =&amp;gt; minTime == &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt; || minTime &amp;lt;= time;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;containsValue(&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt; value) =&amp;gt; getValues().contains(value);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;不要使用&lt;code&gt;this.&lt;/code&gt;访问成员，除非遇到变量冲突&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Good case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Box&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; value;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; clear() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    update(&lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; update(value) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.value = value;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Bad case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Box&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; value;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; clear() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.update(&lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; update(value) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.value = value;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;尽可能地在定义变量时初始化该值&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;构造函数&#34;&gt;&lt;a href=&#34;#构造函数&#34; class=&#34;headerlink&#34; title=&#34;构造函数&#34;&gt;&lt;/a&gt;构造函数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;尽可能使用更简洁的初始化形式&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Point&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;num&lt;/span&gt; x, y;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Point(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.x, &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;不要在初始化形式中定义类型&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;;&lt;/code&gt;代替&lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;表示空方法&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Point&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; x, y;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Point(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.x, &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;不要使用可选的&lt;code&gt;new&lt;/code&gt;来返回一个对象&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Widget build(BuildContext context) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; Row(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    children: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      RaisedButton(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        child: Text(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Increment&amp;#x27;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      ),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      Text(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Click!&amp;#x27;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;不要无谓地使用&lt;code&gt;const&lt;/code&gt;（基本上const可能出现在所有你能使用&lt;code&gt;new&lt;/code&gt;的地方），因为有些语境已经隐式包含了const语义&lt;ul&gt;
&lt;li&gt;字面量集合&lt;/li&gt;
&lt;li&gt;const构造函数调用&lt;/li&gt;
&lt;li&gt;metadata注解&lt;/li&gt;
&lt;li&gt;switch的每一个case&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;异常处理&#34;&gt;&lt;a href=&#34;#异常处理&#34; class=&#34;headerlink&#34; title=&#34;异常处理&#34;&gt;&lt;/a&gt;异常处理&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;不要在&lt;code&gt;on&lt;/code&gt;以外的语句中丢弃错误，因为在没有&lt;code&gt;on&lt;/code&gt;限定时，catch会捕获&lt;em&gt;所有&lt;/em&gt;异常&lt;/li&gt;
&lt;li&gt;要只在编程错误时抛出Error的异常&lt;/li&gt;
&lt;li&gt;不要显式地捕获Error及其子类&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;rethrow&lt;/code&gt;重新抛出异常&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;异步&#34;&gt;&lt;a href=&#34;#异步&#34; class=&#34;headerlink&#34; title=&#34;异步&#34;&gt;&lt;/a&gt;异步&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用&lt;code&gt;async&lt;/code&gt;和&lt;code&gt;await&lt;/code&gt;提升你的异步代码可读性&lt;/li&gt;
&lt;li&gt;只在必要的时候使用&lt;code&gt;async&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;代码块中使用了&lt;code&gt;await&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;希望返回一个Future&lt;/li&gt;
&lt;li&gt;希望更方便地处理异步中出现的Error&lt;/li&gt;
&lt;li&gt;异步事件发生具有先后顺序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;考虑&lt;/strong&gt;使用高阶函数处理stream&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;直接使用&lt;code&gt;Completer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;用&lt;code&gt;Future&amp;lt;T&amp;gt;&lt;/code&gt;而不是&lt;code&gt;T&lt;/code&gt;判断&lt;code&gt;FutureOr&amp;lt;T&amp;gt;&lt;/code&gt;的具体类型&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;API设计&#34;&gt;&lt;a href=&#34;#API设计&#34; class=&#34;headerlink&#34; title=&#34;API设计&#34;&gt;&lt;/a&gt;API设计&lt;/h3&gt;&lt;h4 id=&#34;命名&#34;&gt;&lt;a href=&#34;#命名&#34; class=&#34;headerlink&#34; title=&#34;命名&#34;&gt;&lt;/a&gt;命名&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;使用一致的术语&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;缩写，只使用广为人知的缩写&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;把描述中心词放在最后&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;考虑&lt;/strong&gt;尽量让代码看起来像普通的句子&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用名词短语命名非布尔类型的成员或变量&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用非命令式短语命名布尔类型成员或变量&lt;ul&gt;
&lt;li&gt;比如配合be动词的不同时态，&lt;code&gt;isEnabled&lt;/code&gt;, &lt;code&gt;hasShown&lt;/code&gt;等&lt;/li&gt;
&lt;li&gt;配合助动词，比如&lt;code&gt;hasChildren&lt;/code&gt;, &lt;code&gt;canSave&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有可能的情况下，&lt;strong&gt;考虑&lt;/strong&gt;省去上一种情况里的动词&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用正向含义的布尔类型变量&amp;#x2F;方法名&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用命令式动词命名带有副作用的函数和方法&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;考虑&lt;/strong&gt;使用名词短语或非命令式动词命名返回数据为主要功能的方法或函数&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;list.elementAt(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;string.codeUnitAt(&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;考虑&lt;/strong&gt;使用命令式动词表示你需要对方法所做工作有所关心&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;使用&lt;em&gt;get&lt;/em&gt;开头的命名，它通常能用getter代替&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用&lt;code&gt;to___()&lt;/code&gt;来命名类型转换&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用&lt;code&gt;as___()&lt;/code&gt;来命名类型快照&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;在命名中使用方法、函数的入参&lt;/li&gt;
&lt;li&gt;使用助记符命名类型参数&lt;ul&gt;
&lt;li&gt;&lt;code&gt;E&lt;/code&gt;代表集合元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;K&lt;/code&gt;和&lt;code&gt;V&lt;/code&gt;代表key和value&lt;/li&gt;
&lt;li&gt;&lt;code&gt;R&lt;/code&gt;代表return type&lt;/li&gt;
&lt;li&gt;&lt;code&gt;T&lt;/code&gt;, &lt;code&gt;S&lt;/code&gt;和&lt;code&gt;U&lt;/code&gt;命名单一通用且上下文表意清晰的泛型&lt;/li&gt;
&lt;li&gt;除上面情况外，可以使用完整词汇作为泛型类型名&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;库-1&#34;&gt;&lt;a href=&#34;#库-1&#34; class=&#34;headerlink&#34; title=&#34;库&#34;&gt;&lt;/a&gt;库&lt;/h4&gt;&lt;p&gt;下划线开头的成员表示成员是私有的，这个特性是内置在Dart语言中的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用私有声明，未用&lt;code&gt;_&lt;/code&gt;开头的库中的公开声明、顶级定义表示其他库可以访问这些成员，同时也会受到库实现契约的约束。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;考虑&lt;/strong&gt;在同一个库内定义多个类，这样便于在类之间共享私有变量&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;类&#34;&gt;&lt;a href=&#34;#类&#34; class=&#34;headerlink&#34; title=&#34;类&#34;&gt;&lt;/a&gt;类&lt;/h4&gt;&lt;p&gt;Dart是纯OOP的语言，它的所有对象都是类实例。当然不像Java，Dart也允许你定义顶级的变量、函数…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;定义一个函数就可以实现的只有一个实现方法的抽象类&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; Predicate&amp;lt;E&amp;gt; = &lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;Function&lt;/span&gt;(E element);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Predicate&lt;/span&gt;&amp;lt;&lt;span class=&#34;title&#34;&gt;E&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt; test(E element);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;定义只有静态成员的类，可以使用顶级变量、函数更方便地实现等价效果。当然，如果变量属于一个组，可以这么实现&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;不必要地定义子类&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;实现一个不作为接口的类&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;mixin不设计用作mixin的类&lt;/li&gt;
&lt;li&gt;在你的类支持拓展时，定义好文档&lt;/li&gt;
&lt;li&gt;在你的类作为接口存在时，定义好文档&lt;/li&gt;
&lt;li&gt;在你的类作为mixin存在时，定义好文档&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;构造函数-1&#34;&gt;&lt;a href=&#34;#构造函数-1&#34; class=&#34;headerlink&#34; title=&#34;构造函数&#34;&gt;&lt;/a&gt;构造函数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;考虑&lt;/strong&gt;在类支持的情况下，让构造函数成为const&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;成员-1&#34;&gt;&lt;a href=&#34;#成员-1&#34; class=&#34;headerlink&#34; title=&#34;成员&#34;&gt;&lt;/a&gt;成员&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;考虑&lt;/strong&gt;尽可能地把成员变量和顶级变量定义为final类型&lt;/li&gt;
&lt;li&gt;使用setter和getter定义computed value&lt;/li&gt;
&lt;li&gt;不要使用没有getter的setter&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;在返回bool，double，int，num的方法里返回null&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;在方法中返回this，只为了串联调用函数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;类型&#34;&gt;&lt;a href=&#34;#类型&#34; class=&#34;headerlink&#34; title=&#34;类型&#34;&gt;&lt;/a&gt;类型&lt;/h4&gt;&lt;p&gt;Dart中的类型可以帮助使用者理解你API中的静态类型设计，它分两种：类型注解和类型参数。前一种放在变量名前注解变量类型，后一种作为泛型参数传入。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt; isEmpty(&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt; parameter) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt; result = parameter.length == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;&amp;gt; ints = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在未指定类型时，Dart会从上下文自动推断或者使用缺省的&lt;code&gt;dynamic&lt;/code&gt;类型。&lt;/p&gt;
&lt;p&gt;简言之，Dart提供了强大的类型推导简化了你声明类型的负担，但同时不声明类型会降低API的可读性，下面一些guideline帮你在两点间找到一个平衡。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;对于类型表意不清晰的public属性和顶级变量使用类型注解&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Future&amp;lt;&lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt;&amp;gt; install(PackageId id, &lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt; destination) =&amp;gt; ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; screenWidth = &lt;span class=&#34;number&#34;&gt;640&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// Inferred as int.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;考虑&lt;/strong&gt;对于类型表意不清晰的private属性添加类型注解&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;为局部变量添加类型注解，如果你需要静态类型提供的便利，可以借助&lt;code&gt;is&lt;/code&gt;限制变量类型&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;在方法表达式上使用类型，考虑到方法表达式通常作为方法入参，类型可以自动推断，不需要类型注解&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;冗余的泛型和类型注解&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Good case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;Set&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt;&amp;gt; things = &lt;span class=&#34;built_in&#34;&gt;Set&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Bad case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;Set&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt;&amp;gt; things = &lt;span class=&#34;built_in&#34;&gt;Set&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;在不希望使用Dart推断的类型时，使用类型注解&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用显示的dynamic代替Dart推断失败回退的dynamic&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;在Function类型注解中添加函数类型签名&lt;/li&gt;
&lt;li&gt;不要为setter指定返回值&lt;/li&gt;
&lt;li&gt;使用新式的typeof判断类型&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; Comparison&amp;lt;T&amp;gt; = &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;Function&lt;/span&gt;(T, T);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;Object&lt;/code&gt;代替&lt;code&gt;dynamic&lt;/code&gt;表示可以接受任何对象&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;Future&amp;lt;void&amp;gt;&lt;/code&gt;作为无返回值的异步函数返回类型&lt;/li&gt;
&lt;li&gt;不使用&lt;code&gt;FutureOr&amp;lt;T&amp;gt;&lt;/code&gt;作为返回值&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;参数-1&#34;&gt;&lt;a href=&#34;#参数-1&#34; class=&#34;headerlink&#34; title=&#34;参数&#34;&gt;&lt;/a&gt;参数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;位置参数作为可选布尔参数，这样可读性比较差&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Bad case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Task(&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Task(&lt;span class=&#34;keyword&#34;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ListBox(&lt;span class=&#34;keyword&#34;&gt;false&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Button(&lt;span class=&#34;keyword&#34;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Good case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;将用户想忽略的参数放在位置可选参数的前列&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;使用强制的无意义的参数&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Bad case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;string.substring(start, &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;使用&lt;strong&gt;左闭右开&lt;/strong&gt;区间表示两个参数代表的范围&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;相同判断&#34;&gt;&lt;a href=&#34;#相同判断&#34; class=&#34;headerlink&#34; title=&#34;相同判断&#34;&gt;&lt;/a&gt;相同判断&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;覆写&lt;code&gt;==&lt;/code&gt;的同时覆写&lt;code&gt;hashCode&lt;/code&gt;，默认的哈希函数实现了恒等式哈希。&lt;strong&gt;任何两个相等的两个对象必须具有相同的哈希值&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;==&lt;/code&gt;需要遵循数学的相等规则&lt;ul&gt;
&lt;li&gt;自反，a &amp;#x3D;&amp;#x3D; a&lt;/li&gt;
&lt;li&gt;对称，a &amp;#x3D;&amp;#x3D; b &amp;#x3D;&amp;gt; b &amp;#x3D;&amp;#x3D; a&lt;/li&gt;
&lt;li&gt;传递，a &amp;#x3D;&amp;#x3D; b &amp;amp;&amp;amp; b &amp;#x3D;&amp;#x3D; c &amp;#x3D;&amp;gt; a &amp;#x3D;&amp;#x3D; c&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;为可变对象自定义相等函数，&lt;code&gt;hashCode&lt;/code&gt;函数会增加你的工作量&lt;/li&gt;
&lt;li&gt;不要在自定义&lt;code&gt;==&lt;/code&gt;中判断null，Dart也已经替你做了这部分工作&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Dart" />
        <category term="最佳实践" />
        <updated>2019-06-24T16:51:28.000Z</updated>
    </entry>
    <entry>
        <id>http://shenlvmeng.github.com/blog/2019/06/16/dart-lang-intro/</id>
        <title>Dart快速入门 语法篇</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2019/06/16/dart-lang-intro/"/>
        <content type="html">&lt;h2 id=&#34;入门&#34;&gt;&lt;a href=&#34;#入门&#34; class=&#34;headerlink&#34; title=&#34;入门&#34;&gt;&lt;/a&gt;入门&lt;/h2&gt;&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 定义个方法。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;printNumber(&lt;span class=&#34;built_in&#34;&gt;num&lt;/span&gt; aNumber) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;The number is &lt;span class=&#34;subst&#34;&gt;$aNumber&lt;/span&gt;.&amp;#x27;&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;// 在控制台打印内容。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 这是程序执行的入口。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; number = &lt;span class=&#34;number&#34;&gt;42&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// 定义并初始化一个变量。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  printNumber(number); &lt;span class=&#34;comment&#34;&gt;// 调用一个方法。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;注释：&lt;code&gt;//&lt;/code&gt;或&lt;code&gt;/* ... */&lt;/code&gt;，同其他主流语言&lt;/li&gt;
&lt;li&gt;类型：num、String、int、bool等&lt;/li&gt;
&lt;li&gt;字面量：42，’Hello world!’&lt;/li&gt;
&lt;li&gt;函数：类似&lt;code&gt;print()&lt;/code&gt;的形式&lt;/li&gt;
&lt;li&gt;字符串插值&lt;/li&gt;
&lt;li&gt;入口方法：&lt;code&gt;main&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;基本理念&#34;&gt;&lt;a href=&#34;#基本理念&#34; class=&#34;headerlink&#34; title=&#34;基本理念&#34;&gt;&lt;/a&gt;基本理念&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;所有可以用变量引用的都是对象，每个对象都是一个类的实例&lt;/strong&gt;，例如数字、方法、null，&lt;strong&gt;所有对象都继承Object类&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Dart是&lt;strong&gt;强类型语言&lt;/strong&gt;。但是不强制使用类型标注，因为它可以通过推导得到变量类型。在你明确不希望有类型时，使用&lt;code&gt;dynamic&lt;/code&gt;关键字表示动态类型&lt;/li&gt;
&lt;li&gt;Dart支持泛型，比如&lt;code&gt;List&amp;lt;int&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Dart支持顶级方法&lt;code&gt;main()&lt;/code&gt;，支持类的静态方法、实例方法，也可以在函数内使用函数&lt;/li&gt;
&lt;li&gt;类似地，Dart支持全局变量、局部变量和在类中定义的成员变量&lt;/li&gt;
&lt;li&gt;Dart&lt;strong&gt;没有&lt;/strong&gt;public、protected、private的区分，如果标识符以&lt;code&gt;_&lt;/code&gt;开头，那么该标识符就是私有的&lt;/li&gt;
&lt;li&gt;Dart的变量名只能以&lt;strong&gt;下划线和字母&lt;/strong&gt;开头，后跟&lt;strong&gt;字符或数字&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Dart区分语句块和表达式，只有表达式有值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;关键字&#34;&gt;&lt;a href=&#34;#关键字&#34; class=&#34;headerlink&#34; title=&#34;关键字&#34;&gt;&lt;/a&gt;关键字&lt;/h2&gt;&lt;p&gt;分为三类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于只在特定上下文环境下生效的&lt;strong&gt;上下文关键字&lt;/strong&gt;，可以用作标识符&lt;/li&gt;
&lt;li&gt;对于&lt;strong&gt;内置标识符&lt;/strong&gt;，为了便于移植JavaScript代码到Dart，这些关键字不可用作类或类型名或import的前缀&lt;/li&gt;
&lt;li&gt;其他关键字为保留字&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;变量&#34;&gt;&lt;a href=&#34;#变量&#34; class=&#34;headerlink&#34; title=&#34;变量&#34;&gt;&lt;/a&gt;变量&lt;/h2&gt;&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; name = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Dart&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt; name = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Dart&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Dynamic name = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Dart&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;根据&lt;em&gt;基本理念&lt;/em&gt;，变量都是存储值的引用。使用&lt;code&gt;var&lt;/code&gt;修饰时，变量类型会自动推导；也可以显示声明变量类型，或者使用&lt;code&gt;dynamic&lt;/code&gt;关键字表示变量可能有多种类型。&lt;/p&gt;
&lt;p&gt;任何没有初始化的变量默认值都为null。&lt;/p&gt;
&lt;p&gt;常量使用&lt;code&gt;final&lt;/code&gt;或&lt;code&gt;const&lt;/code&gt;（实例变量只能用&lt;code&gt;final&lt;/code&gt;）。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; name = &lt;span class=&#34;string&#34;&gt;&amp;#x27;foo&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt; title = &lt;span class=&#34;string&#34;&gt;&amp;#x27;FE&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; foo = &lt;span class=&#34;number&#34;&gt;10000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;double&lt;/span&gt; percent = &lt;span class=&#34;number&#34;&gt;0.314&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; bar = &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt;[];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; baz = []; &lt;span class=&#34;comment&#34;&gt;// 和上面一个效果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;final变量只能赋值一次，const变量是编译时常量。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const&lt;/code&gt;除了用来定义不变量，还可以用来创建不变的值，以及定义创建常量的构造函数。在这么用时可以省略构造过程，像上面的baz变量一样&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;内置类型&#34;&gt;&lt;a href=&#34;#内置类型&#34; class=&#34;headerlink&#34; title=&#34;内置类型&#34;&gt;&lt;/a&gt;内置类型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;numbers&lt;/li&gt;
&lt;li&gt;strings&lt;/li&gt;
&lt;li&gt;booleans&lt;/li&gt;
&lt;li&gt;lists (也被称之为 arrays)&lt;/li&gt;
&lt;li&gt;maps&lt;/li&gt;
&lt;li&gt;runes (用于在字符串中表示 Unicode 字符)&lt;/li&gt;
&lt;li&gt;symbols&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;再次重申，Dart中变量都是一个对象，所以你都可以使用构造函数来初始化。&lt;/p&gt;
&lt;h3 id=&#34;Number&#34;&gt;&lt;a href=&#34;#Number&#34; class=&#34;headerlink&#34; title=&#34;Number&#34;&gt;&lt;/a&gt;Number&lt;/h3&gt;&lt;p&gt;有&lt;code&gt;int&lt;/code&gt;和&lt;code&gt;double&lt;/code&gt;两种类型。提供了原生操作符和&lt;code&gt;abs()&lt;/code&gt;等常用函数，整数和浮点数的字面量初始化类似js。&lt;/p&gt;
&lt;p&gt;字符串和数字互转：&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// String -&amp;gt; int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; one = &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;.parse(&lt;span class=&#34;string&#34;&gt;&amp;#x27;1&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt;(one == &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// String -&amp;gt; double&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; onePointOne = &lt;span class=&#34;built_in&#34;&gt;double&lt;/span&gt;.parse(&lt;span class=&#34;string&#34;&gt;&amp;#x27;1.1&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt;(onePointOne == &lt;span class=&#34;number&#34;&gt;1.1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// int -&amp;gt; String&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt; oneAsString = &lt;span class=&#34;number&#34;&gt;1.&lt;/span&gt;toString();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt;(oneAsString == &lt;span class=&#34;string&#34;&gt;&amp;#x27;1&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// double -&amp;gt; String&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt; piAsString = &lt;span class=&#34;number&#34;&gt;3.14159&lt;/span&gt;.toStringAsFixed(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt;(piAsString == &lt;span class=&#34;string&#34;&gt;&amp;#x27;3.14&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;String&#34;&gt;&lt;a href=&#34;#String&#34; class=&#34;headerlink&#34; title=&#34;String&#34;&gt;&lt;/a&gt;String&lt;/h3&gt;&lt;p&gt;Dart的字符串是UTF-16编码的字符序列。可以使用单引号或双引号创建。字符串中用&lt;code&gt;$&amp;#123;expr&amp;#125;&lt;/code&gt;的语法使用表达式，**如果表达式是一个标识符，可以省去&lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;**，对&lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;内的表达式，Dart使用&lt;code&gt;toString()&lt;/code&gt;方法转成字符串使用。&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/code&gt;或&lt;code&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/code&gt;表示多行字符串。使用&lt;code&gt;r&amp;#39;&amp;#39;&lt;/code&gt;表示纯字符串。&lt;/p&gt;
&lt;h3 id=&#34;Boolean&#34;&gt;&lt;a href=&#34;#Boolean&#34; class=&#34;headerlink&#34; title=&#34;Boolean&#34;&gt;&lt;/a&gt;Boolean&lt;/h3&gt;&lt;p&gt;布尔类型有两个字面量值，&lt;code&gt;true&lt;/code&gt;和&lt;code&gt;false&lt;/code&gt;。和JavaScript不同的是，在&lt;code&gt;if&lt;/code&gt;语句等使用bool类型的地方，&lt;strong&gt;只有&lt;code&gt;true&lt;/code&gt;被认为是true，其余所有值都是false&lt;/strong&gt;。这也是为了避免JavaScript中判断true、false时坑爹的地方。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;JS prints this line.&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Dart in production mode prints this line.&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// However, in checked mode, if (1) throws an&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// exception because 1 is not boolean.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;List&#34;&gt;&lt;a href=&#34;#List&#34; class=&#34;headerlink&#34; title=&#34;List&#34;&gt;&lt;/a&gt;List&lt;/h3&gt;&lt;p&gt;List的字面量写法和JavaScript一样。Dart会做类型推导，在元素类型不一致时报错。你可以使用const语句定义一个不变的List对象。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; list = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; list = &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;2.3后，Dart支持&lt;code&gt;...&lt;/code&gt;解构操作符，以及对空列表兼容的&lt;code&gt;...?&lt;/code&gt;。同时支持collection if和collection for语法。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; nav = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;#x27;Home&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;#x27;Furniture&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;#x27;Plants&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (promoActive) &lt;span class=&#34;string&#34;&gt;&amp;#x27;Outlet&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; listOfInts = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; listOfStrings = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;#x27;#0&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; listOfInts) &lt;span class=&#34;string&#34;&gt;&amp;#x27;#&lt;span class=&#34;subst&#34;&gt;$i&lt;/span&gt;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Set&#34;&gt;&lt;a href=&#34;#Set&#34; class=&#34;headerlink&#34; title=&#34;Set&#34;&gt;&lt;/a&gt;Set&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;2.2版本后支持&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一组元素唯一的无序列表。字面量写法类似数学中集合的定义方法。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; halogens = &amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;#x27;fluorine&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;chlorine&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;bromine&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;iodine&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;astatine&amp;#x27;&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;也可以使用构造函数的方式创建。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; elements = &amp;lt;&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt;&amp;gt;&amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;elements.add(&lt;span class=&#34;string&#34;&gt;&amp;#x27;fluorine&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;elements.addAll(halogens);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;类似List，2.3之后有&lt;code&gt;...&lt;/code&gt;和&lt;code&gt;...?&lt;/code&gt;的语法支持。&lt;/p&gt;
&lt;h3 id=&#34;Map&#34;&gt;&lt;a href=&#34;#Map&#34; class=&#34;headerlink&#34; title=&#34;Map&#34;&gt;&lt;/a&gt;Map&lt;/h3&gt;&lt;p&gt;表达键值对数据，每个键只出现一次，且&lt;strong&gt;可以是任意类型&lt;/strong&gt;。类似Set，可以使用字面量和构造函数两种方式构造。使用字面量时，Dart会做类型推导。&lt;/p&gt;
&lt;p&gt;Map的设置和JavaScript类似，另外类似List，2.3之后有&lt;code&gt;...&lt;/code&gt;和&lt;code&gt;...?&lt;/code&gt;的语法支持。&lt;/p&gt;
&lt;h3 id=&#34;Rune&#34;&gt;&lt;a href=&#34;#Rune&#34; class=&#34;headerlink&#34; title=&#34;Rune&#34;&gt;&lt;/a&gt;Rune&lt;/h3&gt;&lt;p&gt;Dart用Rune类型表示UTF-32的字符，如emoji等。&lt;/p&gt;
&lt;h3 id=&#34;Symbol&#34;&gt;&lt;a href=&#34;#Symbol&#34; class=&#34;headerlink&#34; title=&#34;Symbol&#34;&gt;&lt;/a&gt;Symbol&lt;/h3&gt;&lt;p&gt;用来代表Dart中声明的操作符或标识符，可以在标识符前添加&lt;code&gt;#&lt;/code&gt;获取标识符的Symbol对象。&lt;/p&gt;
&lt;h2 id=&#34;方法&#34;&gt;&lt;a href=&#34;#方法&#34; class=&#34;headerlink&#34; title=&#34;方法&#34;&gt;&lt;/a&gt;方法&lt;/h2&gt;&lt;p&gt;类似JavaScript，Dart中的Function也是对象并具有Function类型。推荐使用显式类型声明方法。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt; isNoble(&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; atomicNumber) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; _nobleGases[atomicNumber] != &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Dart支持箭头函数。&lt;/p&gt;
&lt;h3 id=&#34;可选参数&#34;&gt;&lt;a href=&#34;#可选参数&#34; class=&#34;headerlink&#34; title=&#34;可选参数&#34;&gt;&lt;/a&gt;可选参数&lt;/h3&gt;&lt;p&gt;可选参数分两种：命名参数、位置参数。&lt;/p&gt;
&lt;p&gt;命名参数使用&lt;code&gt;param: value&lt;/code&gt;指定，在调用时使用&lt;code&gt;&amp;#123;param1, param2&amp;#125;&lt;/code&gt;的形式传递参数。支持在参数前添加&lt;code&gt;@required&lt;/code&gt;表示参数必选。&lt;/p&gt;
&lt;p&gt;位置参数使用&lt;code&gt;[]&lt;/code&gt;包裹方法参数，使用时不传参数即可。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;enableFlags(bold: &lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;, hidden: &lt;span class=&#34;keyword&#34;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;enableFlags(&amp;#123;&lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt; bold, &lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt; hidden&amp;#125;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt; say(&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt; from, &lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt; msg, [&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt; device]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt;(say(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Bob&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;Howdy&amp;#x27;&lt;/span&gt;) == &lt;span class=&#34;string&#34;&gt;&amp;#x27;Bob says Howdy&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;定义方法时，可以使用&lt;code&gt;=&lt;/code&gt;定义可选参数的默认值。否则默认值为null。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt; say(&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt; from, &lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt; msg,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt; device = &lt;span class=&#34;string&#34;&gt;&amp;#x27;carrier pigeon&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt; mood]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; result = &lt;span class=&#34;string&#34;&gt;&amp;#x27;&lt;span class=&#34;subst&#34;&gt;$from&lt;/span&gt; says &lt;span class=&#34;subst&#34;&gt;$msg&lt;/span&gt;&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (device != &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    result = &lt;span class=&#34;string&#34;&gt;&amp;#x27;&lt;span class=&#34;subst&#34;&gt;$result&lt;/span&gt; with a &lt;span class=&#34;subst&#34;&gt;$device&lt;/span&gt;&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (mood != &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    result = &lt;span class=&#34;string&#34;&gt;&amp;#x27;&lt;span class=&#34;subst&#34;&gt;$result&lt;/span&gt; (in a &lt;span class=&#34;subst&#34;&gt;$mood&lt;/span&gt; mood)&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt;(say(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Bob&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;Howdy&amp;#x27;&lt;/span&gt;) ==&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;#x27;Bob says Howdy with a carrier pigeon&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;main函数&#34;&gt;&lt;a href=&#34;#main函数&#34; class=&#34;headerlink&#34; title=&#34;main函数&#34;&gt;&lt;/a&gt;main函数&lt;/h3&gt;&lt;p&gt;每个应用都需要有顶级的&lt;code&gt;main()&lt;/code&gt;函数作为入口，返回值void类型，并且有可选的&lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt;参数（用于解析命令行输入的参数数据）。如&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;querySelector&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;#sample_text_id&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ..text = &lt;span class=&#34;string&#34;&gt;&amp;quot;Click me!&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ..onClick.listen(reverseText);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;上面的&lt;code&gt;..&lt;/code&gt;语法为级联调用，表示在一个对象上执行多个操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;第一公民&#34;&gt;&lt;a href=&#34;#第一公民&#34; class=&#34;headerlink&#34; title=&#34;第一公民&#34;&gt;&lt;/a&gt;第一公民&lt;/h3&gt;&lt;p&gt;类似JavaScript，Dart中Function可以作为参数、返回值、变量、对象使用。同样也有匿名函数可以使用，区别是箭头后是语句块时，不使用箭头，只在之后是表达式时使用箭头。&lt;/p&gt;
&lt;h3 id=&#34;作用域与闭包&#34;&gt;&lt;a href=&#34;#作用域与闭包&#34; class=&#34;headerlink&#34; title=&#34;作用域与闭包&#34;&gt;&lt;/a&gt;作用域与闭包&lt;/h3&gt;&lt;p&gt;Dart是静态作用域，即变量的作用域在写代码时就确定了，作用域层级即大括号的层级。&lt;/p&gt;
&lt;p&gt;类似JavaScript，Dart的闭包意味着方法可以封闭其作用域内的变量。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/// &lt;span class=&#34;language-markdown&#34;&gt;Returns a function that adds [addBy] to the&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/// &lt;span class=&#34;language-markdown&#34;&gt;function&amp;#x27;s argument.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;Function&lt;/span&gt; makeAdder(&lt;span class=&#34;built_in&#34;&gt;num&lt;/span&gt; addBy) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;num&lt;/span&gt; i) =&amp;gt; addBy + i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// Create a function that adds 2.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; add2 = makeAdder(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// Create a function that adds 4.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; add4 = makeAdder(&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt;(add2(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;) == &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt;(add4(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;) == &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;返回值&#34;&gt;&lt;a href=&#34;#返回值&#34; class=&#34;headerlink&#34; title=&#34;返回值&#34;&gt;&lt;/a&gt;返回值&lt;/h3&gt;&lt;p&gt;所有函数&lt;strong&gt;必须返回一个值&lt;/strong&gt;，否则默认&lt;code&gt;return null&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;操作符&#34;&gt;&lt;a href=&#34;#操作符&#34; class=&#34;headerlink&#34; title=&#34;操作符&#34;&gt;&lt;/a&gt;操作符&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;~/&lt;/code&gt;返回取整截断的商&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;==&lt;/code&gt;判断相等性&lt;ul&gt;
&lt;li&gt;会调用左侧对象的&lt;code&gt;==&lt;/code&gt;方法，和后面的对象对比&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;类型转换：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;as&lt;/code&gt;，类型转换，类似typescript中的as&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is&lt;/code&gt; 判断对象是否是指定类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is!&lt;/code&gt; 判断对象是否不是指定类型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;??=&lt;/code&gt;在value不是null时赋值给变量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;expr1 ?? expr2&lt;/code&gt;表示如果expr1是非null则返回其值，否则执行expr2并返回&lt;/li&gt;
&lt;li&gt;&lt;code&gt;..&lt;/code&gt; 级联操作符，表示在一个对象上连续调用多个函数以及访问成员变量，可以嵌套&lt;/li&gt;
&lt;li&gt;&lt;code&gt;?.&lt;/code&gt;和&lt;code&gt;.&lt;/code&gt;类似，但是在左侧操作对象为null时返回null&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; addressBook = (&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; AddressBookBuilder()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      ..name = &lt;span class=&#34;string&#34;&gt;&amp;#x27;jenny&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      ..email = &lt;span class=&#34;string&#34;&gt;&amp;#x27;jenny@example.com&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      ..phone = (&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; PhoneNumberBuilder()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ..number = &lt;span class=&#34;string&#34;&gt;&amp;#x27;415-555-0100&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ..label = &lt;span class=&#34;string&#34;&gt;&amp;#x27;home&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          .build())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .build();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;流程控制&#34;&gt;&lt;a href=&#34;#流程控制&#34; class=&#34;headerlink&#34; title=&#34;流程控制&#34;&gt;&lt;/a&gt;流程控制&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;for循环中，Dart会自动捕获当时的index索引值，避免JavaScript中问题。对interable的对象可以使用&lt;code&gt;forEach()&lt;/code&gt;方法遍历，对List、Set还支持&lt;code&gt;for-in&lt;/code&gt;形式的遍历&lt;/li&gt;
&lt;li&gt;&lt;code&gt;switch&lt;/code&gt;中的每个case（除了空case）都必须有&lt;code&gt;break&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;assert&lt;/code&gt;在检查模式下会被跳过&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;异常&#34;&gt;&lt;a href=&#34;#异常&#34; class=&#34;headerlink&#34; title=&#34;异常&#34;&gt;&lt;/a&gt;异常&lt;/h2&gt;&lt;p&gt;和JavaScript中的异常类似。&lt;/p&gt;
&lt;p&gt;不一样的是，可以使用&lt;code&gt;on&lt;/code&gt;或&lt;code&gt;catch&lt;/code&gt;捕获异常，可以通过&lt;code&gt;rethrow&lt;/code&gt;在其中重新抛出异常。&lt;/p&gt;
&lt;h2 id=&#34;类&#34;&gt;&lt;a href=&#34;#类&#34; class=&#34;headerlink&#34; title=&#34;类&#34;&gt;&lt;/a&gt;类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;构造方式类似ES6中引入JavaScript Class。&lt;/li&gt;
&lt;li&gt;用成员方式声明的类变量在定义时初始化，也就是在构造函数前&lt;/li&gt;
&lt;li&gt;可以使用Object的runtimeType属性来判断实例的类型&lt;/li&gt;
&lt;li&gt;使用const关键字结合构造函数可以构造出不可变的对象实例&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;构造函数&#34;&gt;&lt;a href=&#34;#构造函数&#34; class=&#34;headerlink&#34; title=&#34;构造函数&#34;&gt;&lt;/a&gt;构造函数&lt;/h3&gt;&lt;p&gt;使用和类名同名的方法作为构造函数（或者使用&lt;em&gt;命名构造函数&lt;/em&gt;）。因为把构造函数参数赋值给实例变量的场景太常见了，Dart提供了下面的语法糖。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Point&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;num&lt;/span&gt; x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;num&lt;/span&gt; y;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// Syntactic sugar for setting x and y&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// before the constructor body runs.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Point(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.x, &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;可以使用命名构造函数实现多个构造函数。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Point&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;num&lt;/span&gt; x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;num&lt;/span&gt; y;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Point(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.x, &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// Named constructor&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Point.fromJson(&lt;span class=&#34;built_in&#34;&gt;Map&lt;/span&gt; json) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x = json[&lt;span class=&#34;string&#34;&gt;&amp;#x27;x&amp;#x27;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    y = json[&lt;span class=&#34;string&#34;&gt;&amp;#x27;y&amp;#x27;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;子类不会从父类继承构造函数&lt;/strong&gt;，在未定义构造函数时，会有一个默认构造函数，这个函数没有参数，且会调起父类的没有参数的构造函数。&lt;/p&gt;
&lt;p&gt;在有初始化参数列表（initializer list）的情况下，初始化参数列表在父类构造函数前执行。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;初始化参数列表&lt;/li&gt;
&lt;li&gt;父类无参构造函数&lt;/li&gt;
&lt;li&gt;子类无参构造函数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;父类没有无参构造函数时，需要手动调用父类的其他构造函数。&lt;/p&gt;
&lt;h4 id=&#34;初始化列表&#34;&gt;&lt;a href=&#34;#初始化列表&#34; class=&#34;headerlink&#34; title=&#34;初始化列表&#34;&gt;&lt;/a&gt;初始化列表&lt;/h4&gt;&lt;p&gt;在执行父类构造函数前，可以初始化实例参数。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Point&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;num&lt;/span&gt; x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;num&lt;/span&gt; y;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Point(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.x, &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// Initializer list sets instance variables before&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// the constructor body runs.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Point.fromJson(&lt;span class=&#34;built_in&#34;&gt;Map&lt;/span&gt; jsonMap)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      : x = jsonMap[&lt;span class=&#34;string&#34;&gt;&amp;#x27;x&amp;#x27;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        y = jsonMap[&lt;span class=&#34;string&#34;&gt;&amp;#x27;y&amp;#x27;&lt;/span&gt;] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;In Point.fromJson(): (&lt;span class=&#34;subst&#34;&gt;$x&lt;/span&gt;, &lt;span class=&#34;subst&#34;&gt;$y&lt;/span&gt;)&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在冒号右边用逗号隔开初始化表达式。注意：等号右边无法访问&lt;code&gt;this&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;重定向构造函数&#34;&gt;&lt;a href=&#34;#重定向构造函数&#34; class=&#34;headerlink&#34; title=&#34;重定向构造函数&#34;&gt;&lt;/a&gt;重定向构造函数&lt;/h4&gt;&lt;p&gt;重定向构造函数没有代码，&lt;strong&gt;在构造函数声明后&lt;/strong&gt;，用冒号调用其他构造函数&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Point&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;num&lt;/span&gt; x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;num&lt;/span&gt; y;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// The main constructor for this class.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Point(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.x, &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// Delegates to the main constructor.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Point.alongXAxis(&lt;span class=&#34;built_in&#34;&gt;num&lt;/span&gt; x) : &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;(x, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;常量构造函数&#34;&gt;&lt;a href=&#34;#常量构造函数&#34; class=&#34;headerlink&#34; title=&#34;常量构造函数&#34;&gt;&lt;/a&gt;常量构造函数&lt;/h4&gt;&lt;p&gt;如果类支持提供状态不变的对象，需要定义一个&lt;code&gt;const&lt;/code&gt;构造函数，且所有类变量都要是&lt;code&gt;final&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ImmutablePoint&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;num&lt;/span&gt; x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;num&lt;/span&gt; y;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; ImmutablePoint(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.x, &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; ImmutablePoint origin =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; ImmutablePoint(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;工厂构造函数&#34;&gt;&lt;a href=&#34;#工厂构造函数&#34; class=&#34;headerlink&#34; title=&#34;工厂构造函数&#34;&gt;&lt;/a&gt;工厂构造函数&lt;/h4&gt;&lt;p&gt;当你的构造函数不需要返回新对象，而从其他地方获取时（如缓存），使用工厂构造函数。**工厂构造函数内无法访问&lt;code&gt;this&lt;/code&gt;**。调用时方式和普通构造函数等同。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Logger&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt; name;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt; mute = &lt;span class=&#34;keyword&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// _cache is library-private, thanks to the _ in front&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// of its name.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;Map&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt;, Logger&amp;gt; _cache =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;lt;&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt;, Logger&amp;gt;&amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;factory&lt;/span&gt; Logger(&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt; name) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (_cache.containsKey(name)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; _cache[name];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; logger = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Logger._internal(name);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      _cache[name] = logger;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; logger;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Logger._internal(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; logger = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Logger(&lt;span class=&#34;string&#34;&gt;&amp;#x27;UI&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;方法-1&#34;&gt;&lt;a href=&#34;#方法-1&#34; class=&#34;headerlink&#34; title=&#34;方法&#34;&gt;&lt;/a&gt;方法&lt;/h3&gt;&lt;p&gt;类方法可以访问&lt;code&gt;this&lt;/code&gt;，另外对于类对象的每个属性都有隐含的getter和setter（final除外）。也可以显式使用&lt;code&gt;get&lt;/code&gt;和&lt;code&gt;set&lt;/code&gt;定义getter和setter的行为。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Rectangle&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;num&lt;/span&gt; left;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;num&lt;/span&gt; top;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;num&lt;/span&gt; width;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;num&lt;/span&gt; height;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Rectangle(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.left, &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.top, &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.width, &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.height);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// Define two calculated properties: right and bottom.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;get&lt;/span&gt; right             =&amp;gt; left + width;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;set&lt;/span&gt; right(&lt;span class=&#34;built_in&#34;&gt;num&lt;/span&gt; value)  =&amp;gt; left = value - width;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;get&lt;/span&gt; bottom            =&amp;gt; top + height;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;set&lt;/span&gt; bottom(&lt;span class=&#34;built_in&#34;&gt;num&lt;/span&gt; value) =&amp;gt; top = value - height;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;Dart使用&lt;code&gt;extends&lt;/code&gt;继承，用&lt;code&gt;super&lt;/code&gt;指代父类，用&lt;code&gt;@overide&lt;/code&gt;注解重载操作。&lt;/li&gt;
&lt;li&gt;Dart中有抽象类&amp;#x2F;抽象方法，设计和使用类似Java的抽象类&amp;#x2F;抽象方法。如果你希望抽象类可实例化，可以定义一个工厂工造函数。&lt;/li&gt;
&lt;li&gt;每个类都隐式的定义了一个包含所有实例成员的接口，通过使用&lt;code&gt;implement&lt;/code&gt;实现若干其他类的API（不包括构造函数）&lt;/li&gt;
&lt;li&gt;可以重载一些操作符，如&lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;[]&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;等，实现在特定类上的特定表现&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Vector&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; y;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; Vector(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.x, &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;/// &lt;span class=&#34;language-markdown&#34;&gt;Overrides + (a + b).&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Vector &lt;span class=&#34;keyword&#34;&gt;operator&lt;/span&gt; +(Vector v) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Vector(x + v.x, y + v.y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;/// &lt;span class=&#34;language-markdown&#34;&gt;Overrides - (a - b).&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Vector &lt;span class=&#34;keyword&#34;&gt;operator&lt;/span&gt; -(Vector v) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Vector(x - v.x, y - v.y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;有意思的是，Dart提供&lt;code&gt;noSuchMethod()&lt;/code&gt;方法，在访问不存在的类实例或方法时被调用。如果没有填写，默认使用Object的同名方法。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;@proxy&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class A &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  void noSuchMethod(Invocation inv) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     print(&amp;#x27;You tried to use a non-existent member: &amp;#x27; +&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#x27;$&amp;#123;inv.memberName&amp;#125;&amp;#x27;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;枚举&#34;&gt;&lt;a href=&#34;#枚举&#34; class=&#34;headerlink&#34; title=&#34;枚举&#34;&gt;&lt;/a&gt;枚举&lt;/h3&gt;&lt;p&gt;枚举是特殊的类，使用&lt;code&gt;enum&lt;/code&gt;关键字定义。每个枚举值都有index属性的&lt;code&gt;getter&lt;/code&gt;函数，枚举的&lt;code&gt;values&lt;/code&gt;常量可以返回所有枚举值。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;enum&lt;/span&gt; Color &amp;#123; red, green, blue &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt;(Color.red.index == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;List&lt;/span&gt;&amp;lt;Color&amp;gt; colors = Color.values;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt;(colors[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;] == Color.blue);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;mixin&#34;&gt;&lt;a href=&#34;#mixin&#34; class=&#34;headerlink&#34; title=&#34;mixin&#34;&gt;&lt;/a&gt;mixin&lt;/h3&gt;&lt;p&gt;Dart中提供了&lt;strong&gt;多类继承&lt;/strong&gt;中重用类代码的mixin，用&lt;code&gt;with&lt;/code&gt;结合mixin类实现，这种类没有构造函数。除非你想像正常类一样使用mixin，否则使用&lt;code&gt;mixin&lt;/code&gt;关键字。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;mixin&lt;/span&gt; Musical &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt; canPlayPiano = &lt;span class=&#34;keyword&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt; canCompose = &lt;span class=&#34;keyword&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt; canConduct = &lt;span class=&#34;keyword&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; entertainMe() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (canPlayPiano) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Playing piano&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (canConduct) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Waving hands&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Humming to self&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当限制mixin只在特定类中使用时，结合&lt;code&gt;on&lt;/code&gt;让mixin也能调用父类方法。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;mixin&lt;/span&gt; MusicalPerformer &lt;span class=&#34;keyword&#34;&gt;on&lt;/span&gt; Musician &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// ···&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;类变量、函数&#34;&gt;&lt;a href=&#34;#类变量、函数&#34; class=&#34;headerlink&#34; title=&#34;类变量、函数&#34;&gt;&lt;/a&gt;类变量、函数&lt;/h3&gt;&lt;p&gt;使用&lt;code&gt;static&lt;/code&gt;前缀修饰，表示类级别的变量、函数。类变量只在第一次使用时初始化。静态方法无法访问this。&lt;/p&gt;
&lt;h2 id=&#34;泛型&#34;&gt;&lt;a href=&#34;#泛型&#34; class=&#34;headerlink&#34; title=&#34;泛型&#34;&gt;&lt;/a&gt;泛型&lt;/h2&gt;&lt;p&gt;使用泛型的两个动机：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有助于IDE、环境、同事帮你定位问题和代码自动生成&lt;/li&gt;
&lt;li&gt;减少重复代码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;List和Map的泛型定义类似C++风格。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; names = &amp;lt;&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt;&amp;gt;[&lt;span class=&#34;string&#34;&gt;&amp;#x27;Seth&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;Kathy&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;Lars&amp;#x27;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; pages = &amp;lt;&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt;&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;#x27;index.html&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;Homepage&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;#x27;robots.txt&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;Hints for web robots&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;#x27;humans.txt&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;We are people, not machines&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; names = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; views = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;Map&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;, View&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(names &lt;span class=&#34;keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt;&amp;gt;); &lt;span class=&#34;comment&#34;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在泛型中使用&lt;code&gt;extends&lt;/code&gt;可以限制泛型的具体类型。在1.21之后，Dart支持泛型函数。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;T first&amp;lt;T&amp;gt;(&lt;span class=&#34;built_in&#34;&gt;List&lt;/span&gt;&amp;lt;T&amp;gt; ts) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// ...Do some initial work or error checking, then...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  T tmp ?= ts[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// ...Do some additional checking or processing...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; tmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;包管理&#34;&gt;&lt;a href=&#34;#包管理&#34; class=&#34;headerlink&#34; title=&#34;包管理&#34;&gt;&lt;/a&gt;包管理&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;import&lt;/code&gt;和&lt;code&gt;library&lt;/code&gt;引入和导出模块。&lt;code&gt;_&lt;/code&gt;开头的标识符只在库内部可见。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;dart:html&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;dart:io&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;package:mylib/mylib.dart&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;package:utils/utils.dart&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;package:lib2/lib2.dart&amp;#x27;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; lib2;  &lt;span class=&#34;comment&#34;&gt;// 指定库前缀，避免重名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;package:lib1/lib1.dart&amp;#x27;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;show&lt;/span&gt; foo; &lt;span class=&#34;comment&#34;&gt;// 部分导入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;dart:&lt;/code&gt;开头代表内置库，&lt;code&gt;package:&lt;/code&gt;开头代表外部库。外部库使用&lt;code&gt;pub&lt;/code&gt;包管理器管理。&lt;/p&gt;
&lt;h3 id=&#34;懒加载库&#34;&gt;&lt;a href=&#34;#懒加载库&#34; class=&#34;headerlink&#34; title=&#34;懒加载库&#34;&gt;&lt;/a&gt;懒加载库&lt;/h3&gt;&lt;p&gt;懒加载即在使用时再加载库，如优化app启动时间，加载很可能用不到的功能。&lt;/p&gt;
&lt;p&gt;加载时使用&lt;code&gt;deferred as&lt;/code&gt;导入，使用&lt;code&gt;loadLibrary()&lt;/code&gt;方法加载。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;package:deferred/hello.dart&amp;#x27;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;deferred&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; hello;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;greet() &lt;span class=&#34;keyword&#34;&gt;async&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;await&lt;/span&gt; hello.loadLibrary();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  hello.printGreeting();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;异步支持&#34;&gt;&lt;a href=&#34;#异步支持&#34; class=&#34;headerlink&#34; title=&#34;异步支持&#34;&gt;&lt;/a&gt;异步支持&lt;/h2&gt;&lt;p&gt;Dart中返回&lt;code&gt;Future&lt;/code&gt;和&lt;code&gt;Stream&lt;/code&gt;的方法都是异步的，意味着设置好耗时操作（I&amp;#x2F;O）后就返回。类似ES7中的&lt;code&gt;await&lt;/code&gt;和&lt;code&gt;async&lt;/code&gt;，你也可以像组织同步代码一样组织你的异步代码。&lt;/p&gt;
&lt;p&gt;Dart中声明异步方法是&lt;strong&gt;在函数名后加入async&lt;/strong&gt;，这类方法返回一个&lt;code&gt;Future&lt;/code&gt;对象，了解JS中&lt;code&gt;Promise&lt;/code&gt;的同学可以很快理解Future是做什么的。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;checkVersion() &lt;span class=&#34;keyword&#34;&gt;async&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; version = &lt;span class=&#34;keyword&#34;&gt;await&lt;/span&gt; lookUpVersion();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (version == expectedVersion) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Do something.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Do something else.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在返回值是Stream时，使用&lt;code&gt;await for&lt;/code&gt;的形式接收Stream中的数据。另外别忘了用&lt;code&gt;async&lt;/code&gt;修饰外界函数。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Future main() &lt;span class=&#34;keyword&#34;&gt;async&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; request &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; requestServer) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    handleRequest(request);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;生成器函数&#34;&gt;&lt;a href=&#34;#生成器函数&#34; class=&#34;headerlink&#34; title=&#34;生成器函数&#34;&gt;&lt;/a&gt;生成器函数&lt;/h2&gt;&lt;p&gt;惰性生产数据，类似ES6中的&lt;code&gt;function*&lt;/code&gt;。Dart提供两种类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同步：返回Iterator&lt;/li&gt;
&lt;li&gt;异步：返回Stream&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;Iterable&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;&amp;gt; naturalsDownFrom(&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; n) &lt;span class=&#34;keyword&#34;&gt;sync&lt;/span&gt;* &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (n &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;yield&lt;/span&gt; n;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;yield&lt;/span&gt;* naturalsDownFrom(n - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Stream&amp;lt;&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;&amp;gt; asynchronousNaturalsTo(&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; n) &lt;span class=&#34;keyword&#34;&gt;async&lt;/span&gt;* &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; k = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (k &amp;lt; n) &lt;span class=&#34;keyword&#34;&gt;yield&lt;/span&gt; k++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;可调用的类&#34;&gt;&lt;a href=&#34;#可调用的类&#34; class=&#34;headerlink&#34; title=&#34;可调用的类&#34;&gt;&lt;/a&gt;可调用的类&lt;/h2&gt;&lt;p&gt;类中实现了&lt;code&gt;call()&lt;/code&gt;方法时，类实例可以当做方法调用。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;WannabeFunction&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  call(&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; a, &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; b) =&amp;gt; a + b;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; wf = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; WannabeFunction();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;wf(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;// 7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;类型别名&#34;&gt;&lt;a href=&#34;#类型别名&#34; class=&#34;headerlink&#34; title=&#34;类型别名&#34;&gt;&lt;/a&gt;类型别名&lt;/h2&gt;&lt;p&gt;类似typescript中的interface定义，Dart可以借助&lt;code&gt;typedef&lt;/code&gt;进行一些更复杂的类型判断。typedef只是类型别名的一种说法。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; Compare(&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; a, &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; b);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; sort(&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; a, &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; b) =&amp;gt; a - b;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt;(sort &lt;span class=&#34;keyword&#34;&gt;is&lt;/span&gt; Compare); &lt;span class=&#34;comment&#34;&gt;// True!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;元数据&#34;&gt;&lt;a href=&#34;#元数据&#34; class=&#34;headerlink&#34; title=&#34;元数据&#34;&gt;&lt;/a&gt;元数据&lt;/h2&gt;&lt;p&gt;使用元数据给代码添加额外信息，也能便于文档自动生成。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@deprecated&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@override&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@proxy&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你还可以自定义自己的元数据注解：&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;library&lt;/span&gt; todo;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;todo&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt; who;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt; what;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; todo(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.who, &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.what);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// another file&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;todo.dart&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@todo&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;seth&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;make this do something&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; doSomething() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;do something&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;注释&#34;&gt;&lt;a href=&#34;#注释&#34; class=&#34;headerlink&#34; title=&#34;注释&#34;&gt;&lt;/a&gt;注释&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;单行，&lt;code&gt;//&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;多行，&lt;code&gt;/**/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;文档注释， &lt;code&gt;///&lt;/code&gt;开头，或&lt;code&gt;/**&lt;/code&gt;开头，&lt;code&gt;*/&lt;/code&gt;结束&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;遵守规范的注释风格会有助于文档自动生成。&lt;/p&gt;
</content>
        <category term="Dart" />
        <updated>2019-06-15T16:13:19.000Z</updated>
    </entry>
</feed>
