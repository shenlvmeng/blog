{
    "version": "https://jsonfeed.org/version/1",
    "title": "Shenlvmeng's Blog • All posts by \"dart\" tag",
    "description": "Be sharp, my friend.",
    "home_page_url": "http://shenlvmeng.github.com/blog",
    "items": [
        {
            "id": "http://shenlvmeng.github.com/blog/2019/06/25/dart-best-practice/",
            "url": "http://shenlvmeng.github.com/blog/2019/06/25/dart-best-practice/",
            "title": "Dart快速入门 效率篇",
            "date_published": "2019-06-24T16:51:28.000Z",
            "content_html": "<blockquote>\n<p>参考自<a href=\"https://dart.dev/guides/language/effective-dart\">Effective Dart</a>，截至2019&#x2F;06&#x2F;12</p>\n</blockquote>\n<h2 id=\"通用原则\"><a href=\"#通用原则\" class=\"headerlink\" title=\"通用原则\"></a>通用原则</h2><p>类似其他编程语言，有下面两点注意事项：</p>\n<ul>\n<li>Be consistent, 统一风格</li>\n<li>Be brief, 保持精简，DRY</li>\n</ul>\n<h2 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h2><p>指南以下面的关键词开头：</p>\n<ul>\n<li><strong>要</strong>，一定遵守，下面没有前缀的就是以此开头</li>\n<li><strong>不要</strong>，这么做不是个好主意</li>\n<li><strong>推荐</strong>，应该遵守，当不遵守时确保有合理理由</li>\n<li><strong>避免</strong>，和上面相反，除非有足够好的理由，否则不应该这么做</li>\n<li><strong>考虑</strong>，根据实际情况而定</li>\n</ul>\n<p>同时会提到下面这些客体：</p>\n<ul>\n<li><strong>库成员</strong>，顶级变量、getter、setter、函数</li>\n<li><strong>类成员</strong>，类变量、getter、setter、函数</li>\n<li><strong>成员</strong>，库成员或类成员</li>\n<li><strong>变量</strong></li>\n<li><strong>属性</strong>，类中的成员变量、getter、setter，顶级变量、getter、setter</li>\n</ul>\n<h3 id=\"样式\"><a href=\"#样式\" class=\"headerlink\" title=\"样式\"></a>样式</h3><h4 id=\"标识符\"><a href=\"#标识符\" class=\"headerlink\" title=\"标识符\"></a>标识符</h4><ul>\n<li>类名用UpperCamelCase风格</li>\n<li>库和文件名用lowercase_with_underscores风格</li>\n<li>导入前缀用lowercase_with_underscores风格<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:javascript_utils/javascript_utils.dart&#x27;</span> <span class=\"keyword\">as</span> js_utils;</span><br></pre></td></tr></table></figure></li>\n<li>其他标识符使用lowerCamelCase风格</li>\n<li><strong>推荐</strong>使用lowerCamelCase风格命名常量<ul>\n<li>原因：CAPS_STYLE可读性差&#x2F;可能会用于final变量&#x2F;和枚举不搭</li>\n</ul>\n</li>\n<li>把超过2个字母的缩略词当做一般单词来做首字母大写<ul>\n<li>原因：提高可读性</li>\n</ul>\n</li>\n<li><strong>不要</strong>在标识符前加前缀<ul>\n<li>举例：<code>kTimes</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"顺序\"><a href=\"#顺序\" class=\"headerlink\" title=\"顺序\"></a>顺序</h4><ul>\n<li>把”dart:”导入语句放在最前</li>\n<li>把”package:”放在相对导入前</li>\n<li><strong>推荐</strong>把第三方”package:”导入放在其他语句前</li>\n<li>export语句放在最后</li>\n<li>按字母序排序</li>\n</ul>\n<h4 id=\"格式化\"><a href=\"#格式化\" class=\"headerlink\" title=\"格式化\"></a>格式化</h4><ul>\n<li>使用dartfmt帮你美化</li>\n<li><strong>考虑</strong>让你的代码更容易美化</li>\n<li><strong>避免</strong>每行超过80字符</li>\n<li>所有控制结构都使用大括号<ul>\n<li>只有if语句写成1行时可以省略</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"文档\"><a href=\"#文档\" class=\"headerlink\" title=\"文档\"></a>文档</h3><h4 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h4><ul>\n<li>使用句子的形式表达注释</li>\n<li>用单行注释符表达注释</li>\n</ul>\n<h4 id=\"文档注释\"><a href=\"#文档注释\" class=\"headerlink\" title=\"文档注释\"></a>文档注释</h4><ul>\n<li>用<code>///</code>表达文档注释</li>\n<li><strong>推荐</strong>为公开API书写注释</li>\n<li><strong>考虑</strong>为私有API书写注释</li>\n<li>用一句话为文档注释开头</li>\n<li>类似git commit message，第一行后空出一行独立成段</li>\n<li>去掉能从上下文直接读出的冗余信息</li>\n<li><strong>推荐</strong>使用第三人称动词开头表示函数、方法注释</li>\n<li><strong>推荐</strong>使用名词短语开头表示变量、成员、getter、setter注释</li>\n<li><strong>推荐</strong>使用名词短语开头表示库、类型注释</li>\n<li><strong>考虑</strong>在注释中添加示例代码</li>\n<li>在注释中用<code>[]</code>方括号引用作用域里的标识符</li>\n<li>使用简短平实的语言描述参数、返回值和异常</li>\n<li>在注解（annotation）前添加注释</li>\n</ul>\n<h4 id=\"Markdown\"><a href=\"#Markdown\" class=\"headerlink\" title=\"Markdown\"></a>Markdown</h4><p>Dart允许在comment中使用Markdown格式。</p>\n<ul>\n<li><strong>避免</strong>滥用markdown</li>\n<li><strong>避免</strong>使用html格式化文本</li>\n<li><strong>推荐</strong>使用反引号（```）格式化代码</li>\n</ul>\n<h4 id=\"行文\"><a href=\"#行文\" class=\"headerlink\" title=\"行文\"></a>行文</h4><ul>\n<li><strong>推荐</strong>简洁清晰</li>\n<li><strong>避免</strong>使用缩写和首字母缩略词</li>\n<li><strong>推荐</strong>使用“this”而不是“the”来引用实例成员</li>\n</ul>\n<h3 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h3><p>下面的规则是书写Dart代码时需要知道的指导原则，尤其是维护你类库的人。</p>\n<h4 id=\"库\"><a href=\"#库\" class=\"headerlink\" title=\"库\"></a>库</h4><ul>\n<li><p>出于历史原因，Dart允许通过<code>part of</code>的方式使用库的一部分文件，使用时通过路径而不是变量名引用</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">library</span> my_library;</span><br><span class=\"line\"><span class=\"comment\">// good case</span></span><br><span class=\"line\"><span class=\"keyword\">part</span> of <span class=\"string\">&quot;../../my_library.dart&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad case</span></span><br><span class=\"line\"><span class=\"keyword\">part</span> of my_library</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>不要从库的<code>src</code>文件夹下引用代码</p>\n</li>\n<li><p><strong>推荐</strong>使用相对路径应用库，但是不要跨<code>src</code>文件夹引用</p>\n</li>\n</ul>\n<h4 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h4><ul>\n<li>在长字符串场景下，使用邻接字符串而不是“+”链接<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// good case</span></span><br><span class=\"line\">raiseAlarm(</span><br><span class=\"line\">    <span class=\"string\">&#x27;ERROR: Parts of the spaceship are on fire. Other &#x27;</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;parts are overrun by martians. Unclear which are which.&#x27;</span>);</span><br></pre></td></tr></table></figure></li>\n<li><strong>推荐</strong>使用插值构造字符串</li>\n<li><strong>避免</strong>在插值中使用多余的大括号（对于简单的变量）</li>\n</ul>\n<h4 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h4><ul>\n<li>尽可能使用字面量形式定义集合，必要时提供泛型类型即可<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// good case</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> points = [];</span><br><span class=\"line\"><span class=\"keyword\">var</span> userMap = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bad case</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> points = <span class=\"keyword\">new</span> <span class=\"built_in\">List</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> userMap = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br></pre></td></tr></table></figure></li>\n<li>不使用length属性判断集合是否为空，Dart提供了<code>isEmpty</code>和<code>isNotEmpty</code></li>\n<li><strong>考虑</strong>使用高阶函数来明确表达你的意图<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> aquaticNames = animals</span><br><span class=\"line\">    .where((animal) =&gt; animal.isAquatic)</span><br><span class=\"line\">    .map((animal) =&gt; animal.name);</span><br></pre></td></tr></table></figure></li>\n<li><strong>避免</strong>在<code>Iterable.forEach()</code>中使用函数声明，Dart里的<code>for-in</code>循环可以很好完成该工作，当然函数本身已经定义好除外。<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// good case</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> person <span class=\"keyword\">in</span> people) &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">people.forEach(<span class=\"built_in\">print</span>);</span><br></pre></td></tr></table></figure></li>\n<li>使用<code>iterable.toList</code>替代<code>List.from</code>，只在改变list类型时使用<code>List.from</code><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Creates a List&lt;int&gt;:</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iterable = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Prints &quot;List&lt;int&gt;&quot;:</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(iterable.toList().runtimeType);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Prints &quot;List&lt;dynamic&gt;&quot;:</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">List</span>.from(iterable).runtimeType);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Use it with a type</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2.3</span>, <span class=\"number\">4</span>]; <span class=\"comment\">// List&lt;num&gt;.</span></span><br><span class=\"line\">numbers.removeAt(<span class=\"number\">1</span>); <span class=\"comment\">// Now it only contains integers.</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ints = <span class=\"built_in\">List</span>&lt;<span class=\"built_in\">int</span>&gt;.from(numbers);</span><br></pre></td></tr></table></figure></li>\n<li>使用高级的<code>whereType</code>方法从collection中过滤出特定类型元素<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> objects = [<span class=\"number\">1</span>, <span class=\"string\">&quot;a&quot;</span>, <span class=\"number\">2</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> ints = objects.whereType&lt;<span class=\"built_in\">int</span>&gt;();</span><br></pre></td></tr></table></figure></li>\n<li>有类似用法时，不使用<code>cast()</code>方法<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> stuff = &lt;<span class=\"built_in\">dynamic</span>&gt;[<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Good case</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ints = <span class=\"built_in\">List</span>&lt;<span class=\"built_in\">int</span>&gt;.from(stuff);</span><br><span class=\"line\"><span class=\"comment\">// Bad case</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ints = stuff.toList().cast&lt;<span class=\"built_in\">int</span>&gt;();</span><br></pre></td></tr></table></figure></li>\n<li><strong>避免</strong>使用<code>cast()</code>方法，用该方法可能更慢且更有风险，通常情况下有下面一些备选方案<ul>\n<li>创建有正确类型的list</li>\n<li>使用每个集合元素时进行casting操作<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Good case</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> printEvens(<span class=\"built_in\">List</span>&lt;<span class=\"built_in\">Object</span>&gt; objects) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// We happen to know the list only contains ints.</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> n <span class=\"keyword\">in</span> objects) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((n <span class=\"keyword\">as</span> <span class=\"built_in\">int</span>).isEven) <span class=\"built_in\">print</span>(n);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Bad case</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> printEvens(<span class=\"built_in\">List</span>&lt;<span class=\"built_in\">Object</span>&gt; objects) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// We happen to know the list only contains ints.</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> n <span class=\"keyword\">in</span> objects.cast&lt;<span class=\"built_in\">int</span>&gt;()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n.isEven) <span class=\"built_in\">print</span>(n);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>真正想要强制类型转换时，使用附加类型的<code>List.from</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h4><ul>\n<li>使用函数声明形式命名有名函数（不要使用lambda表达式）</li>\n<li>当有有名函数可以完成任务时，不要创建lambda表达式<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Good case</span></span><br><span class=\"line\">names.forEach(<span class=\"built_in\">print</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Bad case</span></span><br><span class=\"line\">names.forEach((name) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(name);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h4><ul>\n<li>使用<code>=</code>分隔入参和它的默认值</li>\n<li>不要显式地使用<code>null</code>作为默认值（直接不指定即可）<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> error([<span class=\"built_in\">String</span> message]) &#123;</span><br><span class=\"line\">  stderr.write(message ?? <span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h4><ul>\n<li>不要显式地使用null初始化变量（语言保证了行为可靠性，不需要再显式设置成null）</li>\n<li>不要存储computed value（即可以推算出的值） ，减少冗余信息，保证数据唯一可信源，使用getter和setter去动态推导出它们</li>\n<li><strong>考虑</strong>忽略局部变量的类型，Dart有强大的静态分析工具帮你推断类型。</li>\n</ul>\n<h4 id=\"成员\"><a href=\"#成员\" class=\"headerlink\" title=\"成员\"></a>成员</h4><ul>\n<li>不要创建没必要的getter和setter</li>\n<li><strong>推荐</strong>使用final限定只读属性</li>\n<li><strong>考虑</strong>使用<code>=&gt;</code>实现只有单一返回语句的函数，对于多行语句建议还是老老实实使用花括号<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">get</span> width =&gt; right - left;</span><br><span class=\"line\"><span class=\"built_in\">bool</span> ready(<span class=\"built_in\">num</span> time) =&gt; minTime == <span class=\"keyword\">null</span> || minTime &lt;= time;</span><br><span class=\"line\">containsValue(<span class=\"built_in\">String</span> value) =&gt; getValues().contains(value);</span><br></pre></td></tr></table></figure></li>\n<li>不要使用<code>this.</code>访问成员，除非遇到变量冲突<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Good case</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Box</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> value;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">void</span> clear() &#123;</span><br><span class=\"line\">    update(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">void</span> update(value) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Bad case</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Box</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> value;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">void</span> clear() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.update(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">void</span> update(value) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>尽可能地在定义变量时初始化该值</li>\n</ul>\n<h4 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h4><ul>\n<li>尽可能使用更简洁的初始化形式<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">num</span> x, y;</span><br><span class=\"line\">  Point(<span class=\"keyword\">this</span>.x, <span class=\"keyword\">this</span>.y);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>不要在初始化形式中定义类型</li>\n<li>使用<code>;</code>代替<code>&#123;&#125;</code>表示空方法<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">int</span> x, y;</span><br><span class=\"line\">  Point(<span class=\"keyword\">this</span>.x, <span class=\"keyword\">this</span>.y);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>不要使用可选的<code>new</code>来返回一个对象<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Widget build(BuildContext context) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> Row(</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">      RaisedButton(</span><br><span class=\"line\">        child: Text(<span class=\"string\">&#x27;Increment&#x27;</span>),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      Text(<span class=\"string\">&#x27;Click!&#x27;</span>),</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>不要无谓地使用<code>const</code>（基本上const可能出现在所有你能使用<code>new</code>的地方），因为有些语境已经隐式包含了const语义<ul>\n<li>字面量集合</li>\n<li>const构造函数调用</li>\n<li>metadata注解</li>\n<li>switch的每一个case</li>\n<li>…</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h4><ul>\n<li>不要在<code>on</code>以外的语句中丢弃错误，因为在没有<code>on</code>限定时，catch会捕获<em>所有</em>异常</li>\n<li>要只在编程错误时抛出Error的异常</li>\n<li>不要显式地捕获Error及其子类</li>\n<li>使用<code>rethrow</code>重新抛出异常</li>\n</ul>\n<h4 id=\"异步\"><a href=\"#异步\" class=\"headerlink\" title=\"异步\"></a>异步</h4><ul>\n<li><strong>推荐</strong>使用<code>async</code>和<code>await</code>提升你的异步代码可读性</li>\n<li>只在必要的时候使用<code>async</code><ul>\n<li>代码块中使用了<code>await</code></li>\n<li>希望返回一个Future</li>\n<li>希望更方便地处理异步中出现的Error</li>\n<li>异步事件发生具有先后顺序</li>\n</ul>\n</li>\n<li><strong>考虑</strong>使用高阶函数处理stream</li>\n<li><strong>避免</strong>直接使用<code>Completer</code></li>\n<li>用<code>Future&lt;T&gt;</code>而不是<code>T</code>判断<code>FutureOr&lt;T&gt;</code>的具体类型</li>\n</ul>\n<h3 id=\"API设计\"><a href=\"#API设计\" class=\"headerlink\" title=\"API设计\"></a>API设计</h3><h4 id=\"命名\"><a href=\"#命名\" class=\"headerlink\" title=\"命名\"></a>命名</h4><ul>\n<li>使用一致的术语</li>\n<li><strong>避免</strong>缩写，只使用广为人知的缩写</li>\n<li><strong>推荐</strong>把描述中心词放在最后</li>\n<li><strong>考虑</strong>尽量让代码看起来像普通的句子</li>\n<li><strong>推荐</strong>使用名词短语命名非布尔类型的成员或变量</li>\n<li><strong>推荐</strong>使用非命令式短语命名布尔类型成员或变量<ul>\n<li>比如配合be动词的不同时态，<code>isEnabled</code>, <code>hasShown</code>等</li>\n<li>配合助动词，比如<code>hasChildren</code>, <code>canSave</code></li>\n</ul>\n</li>\n<li>有可能的情况下，<strong>考虑</strong>省去上一种情况里的动词</li>\n<li><strong>推荐</strong>使用正向含义的布尔类型变量&#x2F;方法名</li>\n<li><strong>推荐</strong>使用命令式动词命名带有副作用的函数和方法</li>\n<li><strong>考虑</strong>使用名词短语或非命令式动词命名返回数据为主要功能的方法或函数<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list.elementAt(<span class=\"number\">3</span>)</span><br><span class=\"line\">string.codeUnitAt(<span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure></li>\n<li><strong>考虑</strong>使用命令式动词表示你需要对方法所做工作有所关心</li>\n<li><strong>避免</strong>使用<em>get</em>开头的命名，它通常能用getter代替</li>\n<li><strong>推荐</strong>使用<code>to___()</code>来命名类型转换</li>\n<li><strong>推荐</strong>使用<code>as___()</code>来命名类型快照</li>\n<li><strong>避免</strong>在命名中使用方法、函数的入参</li>\n<li>使用助记符命名类型参数<ul>\n<li><code>E</code>代表集合元素</li>\n<li><code>K</code>和<code>V</code>代表key和value</li>\n<li><code>R</code>代表return type</li>\n<li><code>T</code>, <code>S</code>和<code>U</code>命名单一通用且上下文表意清晰的泛型</li>\n<li>除上面情况外，可以使用完整词汇作为泛型类型名</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"库-1\"><a href=\"#库-1\" class=\"headerlink\" title=\"库\"></a>库</h4><p>下划线开头的成员表示成员是私有的，这个特性是内置在Dart语言中的。</p>\n<ul>\n<li><strong>推荐</strong>使用私有声明，未用<code>_</code>开头的库中的公开声明、顶级定义表示其他库可以访问这些成员，同时也会受到库实现契约的约束。</li>\n<li><strong>考虑</strong>在同一个库内定义多个类，这样便于在类之间共享私有变量</li>\n</ul>\n<h4 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h4><p>Dart是纯OOP的语言，它的所有对象都是类实例。当然不像Java，Dart也允许你定义顶级的变量、函数…</p>\n<ul>\n<li><strong>避免</strong>定义一个函数就可以实现的只有一个实现方法的抽象类<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> Predicate&lt;E&gt; = <span class=\"built_in\">bool</span> <span class=\"built_in\">Function</span>(E element);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Predicate</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">bool</span> test(E element);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><strong>避免</strong>定义只有静态成员的类，可以使用顶级变量、函数更方便地实现等价效果。当然，如果变量属于一个组，可以这么实现</li>\n<li><strong>避免</strong>不必要地定义子类</li>\n<li><strong>避免</strong>实现一个不作为接口的类</li>\n<li><strong>避免</strong>mixin不设计用作mixin的类</li>\n<li>在你的类支持拓展时，定义好文档</li>\n<li>在你的类作为接口存在时，定义好文档</li>\n<li>在你的类作为mixin存在时，定义好文档</li>\n</ul>\n<h4 id=\"构造函数-1\"><a href=\"#构造函数-1\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h4><ul>\n<li><strong>考虑</strong>在类支持的情况下，让构造函数成为const</li>\n</ul>\n<h4 id=\"成员-1\"><a href=\"#成员-1\" class=\"headerlink\" title=\"成员\"></a>成员</h4><ul>\n<li><strong>考虑</strong>尽可能地把成员变量和顶级变量定义为final类型</li>\n<li>使用setter和getter定义computed value</li>\n<li>不要使用没有getter的setter</li>\n<li><strong>避免</strong>在返回bool，double，int，num的方法里返回null</li>\n<li><strong>避免</strong>在方法中返回this，只为了串联调用函数</li>\n</ul>\n<h4 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h4><p>Dart中的类型可以帮助使用者理解你API中的静态类型设计，它分两种：类型注解和类型参数。前一种放在变量名前注解变量类型，后一种作为泛型参数传入。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">bool</span> isEmpty(<span class=\"built_in\">String</span> parameter) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">bool</span> result = parameter.length == <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">List</span>&lt;<span class=\"built_in\">int</span>&gt; ints = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br></pre></td></tr></table></figure>\n\n<p>在未指定类型时，Dart会从上下文自动推断或者使用缺省的<code>dynamic</code>类型。</p>\n<p>简言之，Dart提供了强大的类型推导简化了你声明类型的负担，但同时不声明类型会降低API的可读性，下面一些guideline帮你在两点间找到一个平衡。</p>\n<ul>\n<li><strong>推荐</strong>对于类型表意不清晰的public属性和顶级变量使用类型注解<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Future&lt;<span class=\"built_in\">bool</span>&gt; install(PackageId id, <span class=\"built_in\">String</span> destination) =&gt; ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> screenWidth = <span class=\"number\">640</span>; <span class=\"comment\">// Inferred as int.</span></span><br></pre></td></tr></table></figure></li>\n<li><strong>考虑</strong>对于类型表意不清晰的private属性添加类型注解</li>\n<li><strong>避免</strong>为局部变量添加类型注解，如果你需要静态类型提供的便利，可以借助<code>is</code>限制变量类型</li>\n<li><strong>避免</strong>在方法表达式上使用类型，考虑到方法表达式通常作为方法入参，类型可以自动推断，不需要类型注解</li>\n<li><strong>避免</strong>冗余的泛型和类型注解<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Good case</span></span><br><span class=\"line\"><span class=\"built_in\">Set</span>&lt;<span class=\"built_in\">String</span>&gt; things = <span class=\"built_in\">Set</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Bad case</span></span><br><span class=\"line\"><span class=\"built_in\">Set</span>&lt;<span class=\"built_in\">String</span>&gt; things = <span class=\"built_in\">Set</span>&lt;<span class=\"built_in\">String</span>&gt;();</span><br></pre></td></tr></table></figure></li>\n<li>在不希望使用Dart推断的类型时，使用类型注解</li>\n<li><strong>推荐</strong>使用显示的dynamic代替Dart推断失败回退的dynamic</li>\n<li><strong>推荐</strong>在Function类型注解中添加函数类型签名</li>\n<li>不要为setter指定返回值</li>\n<li>使用新式的typeof判断类型<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> Comparison&lt;T&gt; = <span class=\"built_in\">int</span> <span class=\"built_in\">Function</span>(T, T);</span><br></pre></td></tr></table></figure></li>\n<li>使用<code>Object</code>代替<code>dynamic</code>表示可以接受任何对象</li>\n<li>使用<code>Future&lt;void&gt;</code>作为无返回值的异步函数返回类型</li>\n<li>不使用<code>FutureOr&lt;T&gt;</code>作为返回值</li>\n</ul>\n<h4 id=\"参数-1\"><a href=\"#参数-1\" class=\"headerlink\" title=\"参数\"></a>参数</h4><ul>\n<li><strong>避免</strong>位置参数作为可选布尔参数，这样可读性比较差<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Bad case</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Task(<span class=\"keyword\">true</span>);</span><br><span class=\"line\"><span class=\"keyword\">new</span> Task(<span class=\"keyword\">false</span>);</span><br><span class=\"line\"><span class=\"keyword\">new</span> ListBox(<span class=\"keyword\">false</span>, <span class=\"keyword\">true</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\"><span class=\"keyword\">new</span> Button(<span class=\"keyword\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Good case</span></span><br></pre></td></tr></table></figure></li>\n<li><strong>避免</strong>将用户想忽略的参数放在位置可选参数的前列</li>\n<li><strong>避免</strong>使用强制的无意义的参数<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Bad case</span></span><br><span class=\"line\">string.substring(start, <span class=\"keyword\">null</span>)</span><br></pre></td></tr></table></figure></li>\n<li>使用<strong>左闭右开</strong>区间表示两个参数代表的范围</li>\n</ul>\n<h4 id=\"相同判断\"><a href=\"#相同判断\" class=\"headerlink\" title=\"相同判断\"></a>相同判断</h4><ul>\n<li>覆写<code>==</code>的同时覆写<code>hashCode</code>，默认的哈希函数实现了恒等式哈希。<strong>任何两个相等的两个对象必须具有相同的哈希值</strong>。</li>\n<li><code>==</code>需要遵循数学的相等规则<ul>\n<li>自反，a &#x3D;&#x3D; a</li>\n<li>对称，a &#x3D;&#x3D; b &#x3D;&gt; b &#x3D;&#x3D; a</li>\n<li>传递，a &#x3D;&#x3D; b &amp;&amp; b &#x3D;&#x3D; c &#x3D;&gt; a &#x3D;&#x3D; c</li>\n</ul>\n</li>\n<li><strong>避免</strong>为可变对象自定义相等函数，<code>hashCode</code>函数会增加你的工作量</li>\n<li>不要在自定义<code>==</code>中判断null，Dart也已经替你做了这部分工作</li>\n</ul>\n",
            "tags": [
                "Dart",
                "最佳实践"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2019/06/16/dart-lang-intro/",
            "url": "http://shenlvmeng.github.com/blog/2019/06/16/dart-lang-intro/",
            "title": "Dart快速入门 语法篇",
            "date_published": "2019-06-15T16:13:19.000Z",
            "content_html": "<h2 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h2><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义个方法。</span></span><br><span class=\"line\">printNumber(<span class=\"built_in\">num</span> aNumber) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;The number is <span class=\"subst\">$aNumber</span>.&#x27;</span>); <span class=\"comment\">// 在控制台打印内容。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这是程序执行的入口。</span></span><br><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> number = <span class=\"number\">42</span>; <span class=\"comment\">// 定义并初始化一个变量。</span></span><br><span class=\"line\">  printNumber(number); <span class=\"comment\">// 调用一个方法。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注释：<code>//</code>或<code>/* ... */</code>，同其他主流语言</li>\n<li>类型：num、String、int、bool等</li>\n<li>字面量：42，’Hello world!’</li>\n<li>函数：类似<code>print()</code>的形式</li>\n<li>字符串插值</li>\n<li>入口方法：<code>main</code></li>\n</ul>\n<h2 id=\"基本理念\"><a href=\"#基本理念\" class=\"headerlink\" title=\"基本理念\"></a>基本理念</h2><ul>\n<li><strong>所有可以用变量引用的都是对象，每个对象都是一个类的实例</strong>，例如数字、方法、null，<strong>所有对象都继承Object类</strong></li>\n<li>Dart是<strong>强类型语言</strong>。但是不强制使用类型标注，因为它可以通过推导得到变量类型。在你明确不希望有类型时，使用<code>dynamic</code>关键字表示动态类型</li>\n<li>Dart支持泛型，比如<code>List&lt;int&gt;</code></li>\n<li>Dart支持顶级方法<code>main()</code>，支持类的静态方法、实例方法，也可以在函数内使用函数</li>\n<li>类似地，Dart支持全局变量、局部变量和在类中定义的成员变量</li>\n<li>Dart<strong>没有</strong>public、protected、private的区分，如果标识符以<code>_</code>开头，那么该标识符就是私有的</li>\n<li>Dart的变量名只能以<strong>下划线和字母</strong>开头，后跟<strong>字符或数字</strong></li>\n<li>Dart区分语句块和表达式，只有表达式有值。</li>\n</ul>\n<h2 id=\"关键字\"><a href=\"#关键字\" class=\"headerlink\" title=\"关键字\"></a>关键字</h2><p>分为三类：</p>\n<ul>\n<li>对于只在特定上下文环境下生效的<strong>上下文关键字</strong>，可以用作标识符</li>\n<li>对于<strong>内置标识符</strong>，为了便于移植JavaScript代码到Dart，这些关键字不可用作类或类型名或import的前缀</li>\n<li>其他关键字为保留字</li>\n</ul>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;Dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">String</span> name = <span class=\"string\">&#x27;Dart&#x27;</span>;</span><br><span class=\"line\">Dynamic name = <span class=\"string\">&#x27;Dart&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>根据<em>基本理念</em>，变量都是存储值的引用。使用<code>var</code>修饰时，变量类型会自动推导；也可以显示声明变量类型，或者使用<code>dynamic</code>关键字表示变量可能有多种类型。</p>\n<p>任何没有初始化的变量默认值都为null。</p>\n<p>常量使用<code>final</code>或<code>const</code>（实例变量只能用<code>final</code>）。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> name = <span class=\"string\">&#x27;foo&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"built_in\">String</span> title = <span class=\"string\">&#x27;FE&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = <span class=\"number\">10000</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">double</span> percent = <span class=\"number\">0.314</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">final</span> bar = <span class=\"keyword\">const</span>[];</span><br><span class=\"line\"><span class=\"keyword\">const</span> baz = []; <span class=\"comment\">// 和上面一个效果</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>final变量只能赋值一次，const变量是编译时常量。</li>\n<li><code>const</code>除了用来定义不变量，还可以用来创建不变的值，以及定义创建常量的构造函数。在这么用时可以省略构造过程，像上面的baz变量一样</li>\n</ul>\n<h2 id=\"内置类型\"><a href=\"#内置类型\" class=\"headerlink\" title=\"内置类型\"></a>内置类型</h2><ul>\n<li>numbers</li>\n<li>strings</li>\n<li>booleans</li>\n<li>lists (也被称之为 arrays)</li>\n<li>maps</li>\n<li>runes (用于在字符串中表示 Unicode 字符)</li>\n<li>symbols</li>\n</ul>\n<p>再次重申，Dart中变量都是一个对象，所以你都可以使用构造函数来初始化。</p>\n<h3 id=\"Number\"><a href=\"#Number\" class=\"headerlink\" title=\"Number\"></a>Number</h3><p>有<code>int</code>和<code>double</code>两种类型。提供了原生操作符和<code>abs()</code>等常用函数，整数和浮点数的字面量初始化类似js。</p>\n<p>字符串和数字互转：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// String -&gt; int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> one = <span class=\"built_in\">int</span>.parse(<span class=\"string\">&#x27;1&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">assert</span>(one == <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// String -&gt; double</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> onePointOne = <span class=\"built_in\">double</span>.parse(<span class=\"string\">&#x27;1.1&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">assert</span>(onePointOne == <span class=\"number\">1.1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// int -&gt; String</span></span><br><span class=\"line\"><span class=\"built_in\">String</span> oneAsString = <span class=\"number\">1.</span>toString();</span><br><span class=\"line\"><span class=\"keyword\">assert</span>(oneAsString == <span class=\"string\">&#x27;1&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// double -&gt; String</span></span><br><span class=\"line\"><span class=\"built_in\">String</span> piAsString = <span class=\"number\">3.14159</span>.toStringAsFixed(<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"keyword\">assert</span>(piAsString == <span class=\"string\">&#x27;3.14&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h3><p>Dart的字符串是UTF-16编码的字符序列。可以使用单引号或双引号创建。字符串中用<code>$&#123;expr&#125;</code>的语法使用表达式，**如果表达式是一个标识符，可以省去<code>&#123;&#125;</code>**，对<code>&#123;&#125;</code>内的表达式，Dart使用<code>toString()</code>方法转成字符串使用。</p>\n<p>使用<code>&#39;&#39;&#39;</code>或<code>&quot;&quot;&quot;</code>表示多行字符串。使用<code>r&#39;&#39;</code>表示纯字符串。</p>\n<h3 id=\"Boolean\"><a href=\"#Boolean\" class=\"headerlink\" title=\"Boolean\"></a>Boolean</h3><p>布尔类型有两个字面量值，<code>true</code>和<code>false</code>。和JavaScript不同的是，在<code>if</code>语句等使用bool类型的地方，<strong>只有<code>true</code>被认为是true，其余所有值都是false</strong>。这也是为了避免JavaScript中判断true、false时坑爹的地方。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;JS prints this line.&#x27;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Dart in production mode prints this line.&#x27;</span>);</span><br><span class=\"line\">  <span class=\"comment\">// However, in checked mode, if (1) throws an</span></span><br><span class=\"line\">  <span class=\"comment\">// exception because 1 is not boolean.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h3><p>List的字面量写法和JavaScript一样。Dart会做类型推导，在元素类型不一致时报错。你可以使用const语句定义一个不变的List对象。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> list = <span class=\"keyword\">const</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br></pre></td></tr></table></figure>\n\n<p>2.3后，Dart支持<code>...</code>解构操作符，以及对空列表兼容的<code>...?</code>。同时支持collection if和collection for语法。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> nav = [</span><br><span class=\"line\">  <span class=\"string\">&#x27;Home&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;Furniture&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;Plants&#x27;</span>,</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (promoActive) <span class=\"string\">&#x27;Outlet&#x27;</span></span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"keyword\">var</span> listOfInts = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> listOfStrings = [</span><br><span class=\"line\">  <span class=\"string\">&#x27;#0&#x27;</span>,</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> listOfInts) <span class=\"string\">&#x27;#<span class=\"subst\">$i</span>&#x27;</span></span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h3><blockquote>\n<p>2.2版本后支持</p>\n</blockquote>\n<p>一组元素唯一的无序列表。字面量写法类似数学中集合的定义方法。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> halogens = &#123;<span class=\"string\">&#x27;fluorine&#x27;</span>, <span class=\"string\">&#x27;chlorine&#x27;</span>, <span class=\"string\">&#x27;bromine&#x27;</span>, <span class=\"string\">&#x27;iodine&#x27;</span>, <span class=\"string\">&#x27;astatine&#x27;</span>&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>也可以使用构造函数的方式创建。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> elements = &lt;<span class=\"built_in\">String</span>&gt;&#123;&#125;;</span><br><span class=\"line\">elements.add(<span class=\"string\">&#x27;fluorine&#x27;</span>);</span><br><span class=\"line\">elements.addAll(halogens);</span><br></pre></td></tr></table></figure>\n\n<p>类似List，2.3之后有<code>...</code>和<code>...?</code>的语法支持。</p>\n<h3 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h3><p>表达键值对数据，每个键只出现一次，且<strong>可以是任意类型</strong>。类似Set，可以使用字面量和构造函数两种方式构造。使用字面量时，Dart会做类型推导。</p>\n<p>Map的设置和JavaScript类似，另外类似List，2.3之后有<code>...</code>和<code>...?</code>的语法支持。</p>\n<h3 id=\"Rune\"><a href=\"#Rune\" class=\"headerlink\" title=\"Rune\"></a>Rune</h3><p>Dart用Rune类型表示UTF-32的字符，如emoji等。</p>\n<h3 id=\"Symbol\"><a href=\"#Symbol\" class=\"headerlink\" title=\"Symbol\"></a>Symbol</h3><p>用来代表Dart中声明的操作符或标识符，可以在标识符前添加<code>#</code>获取标识符的Symbol对象。</p>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><p>类似JavaScript，Dart中的Function也是对象并具有Function类型。推荐使用显式类型声明方法。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">bool</span> isNoble(<span class=\"built_in\">int</span> atomicNumber) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> _nobleGases[atomicNumber] != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Dart支持箭头函数。</p>\n<h3 id=\"可选参数\"><a href=\"#可选参数\" class=\"headerlink\" title=\"可选参数\"></a>可选参数</h3><p>可选参数分两种：命名参数、位置参数。</p>\n<p>命名参数使用<code>param: value</code>指定，在调用时使用<code>&#123;param1, param2&#125;</code>的形式传递参数。支持在参数前添加<code>@required</code>表示参数必选。</p>\n<p>位置参数使用<code>[]</code>包裹方法参数，使用时不传参数即可。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enableFlags(bold: <span class=\"keyword\">true</span>, hidden: <span class=\"keyword\">false</span>);</span><br><span class=\"line\">enableFlags(&#123;<span class=\"built_in\">bool</span> bold, <span class=\"built_in\">bool</span> hidden&#125;) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">String</span> say(<span class=\"built_in\">String</span> from, <span class=\"built_in\">String</span> msg, [<span class=\"built_in\">String</span> device]) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">assert</span>(say(<span class=\"string\">&#x27;Bob&#x27;</span>, <span class=\"string\">&#x27;Howdy&#x27;</span>) == <span class=\"string\">&#x27;Bob says Howdy&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>定义方法时，可以使用<code>=</code>定义可选参数的默认值。否则默认值为null。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span> say(<span class=\"built_in\">String</span> from, <span class=\"built_in\">String</span> msg,</span><br><span class=\"line\">    [<span class=\"built_in\">String</span> device = <span class=\"string\">&#x27;carrier pigeon&#x27;</span>, <span class=\"built_in\">String</span> mood]) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = <span class=\"string\">&#x27;<span class=\"subst\">$from</span> says <span class=\"subst\">$msg</span>&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (device != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    result = <span class=\"string\">&#x27;<span class=\"subst\">$result</span> with a <span class=\"subst\">$device</span>&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (mood != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    result = <span class=\"string\">&#x27;<span class=\"subst\">$result</span> (in a <span class=\"subst\">$mood</span> mood)&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">assert</span>(say(<span class=\"string\">&#x27;Bob&#x27;</span>, <span class=\"string\">&#x27;Howdy&#x27;</span>) ==</span><br><span class=\"line\">    <span class=\"string\">&#x27;Bob says Howdy with a carrier pigeon&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"main函数\"><a href=\"#main函数\" class=\"headerlink\" title=\"main函数\"></a>main函数</h3><p>每个应用都需要有顶级的<code>main()</code>函数作为入口，返回值void类型，并且有可选的<code>List&lt;String&gt;</code>参数（用于解析命令行输入的参数数据）。如</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> main() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">querySelector</span>(<span class=\"string\">&quot;#sample_text_id&quot;</span>)</span><br><span class=\"line\">    ..text = <span class=\"string\">&quot;Click me!&quot;</span></span><br><span class=\"line\">    ..onClick.listen(reverseText);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>上面的<code>..</code>语法为级联调用，表示在一个对象上执行多个操作。</p>\n</blockquote>\n<h3 id=\"第一公民\"><a href=\"#第一公民\" class=\"headerlink\" title=\"第一公民\"></a>第一公民</h3><p>类似JavaScript，Dart中Function可以作为参数、返回值、变量、对象使用。同样也有匿名函数可以使用，区别是箭头后是语句块时，不使用箭头，只在之后是表达式时使用箭头。</p>\n<h3 id=\"作用域与闭包\"><a href=\"#作用域与闭包\" class=\"headerlink\" title=\"作用域与闭包\"></a>作用域与闭包</h3><p>Dart是静态作用域，即变量的作用域在写代码时就确定了，作用域层级即大括号的层级。</p>\n<p>类似JavaScript，Dart的闭包意味着方法可以封闭其作用域内的变量。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// <span class=\"language-markdown\">Returns a function that adds [addBy] to the</span></span></span><br><span class=\"line\"><span class=\"comment\">/// <span class=\"language-markdown\">function&#x27;s argument.</span></span></span><br><span class=\"line\"><span class=\"built_in\">Function</span> makeAdder(<span class=\"built_in\">num</span> addBy) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (<span class=\"built_in\">num</span> i) =&gt; addBy + i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main() &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Create a function that adds 2.</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> add2 = makeAdder(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Create a function that adds 4.</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> add4 = makeAdder(<span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">assert</span>(add2(<span class=\"number\">3</span>) == <span class=\"number\">5</span>);</span><br><span class=\"line\">  <span class=\"keyword\">assert</span>(add4(<span class=\"number\">3</span>) == <span class=\"number\">7</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h3><p>所有函数<strong>必须返回一个值</strong>，否则默认<code>return null</code>。</p>\n<h2 id=\"操作符\"><a href=\"#操作符\" class=\"headerlink\" title=\"操作符\"></a>操作符</h2><ul>\n<li><code>~/</code>返回取整截断的商</li>\n<li>使用<code>==</code>判断相等性<ul>\n<li>会调用左侧对象的<code>==</code>方法，和后面的对象对比</li>\n</ul>\n</li>\n<li>类型转换：<ul>\n<li><code>as</code>，类型转换，类似typescript中的as</li>\n<li><code>is</code> 判断对象是否是指定类型</li>\n<li><code>is!</code> 判断对象是否不是指定类型</li>\n</ul>\n</li>\n<li><code>??=</code>在value不是null时赋值给变量</li>\n<li><code>expr1 ?? expr2</code>表示如果expr1是非null则返回其值，否则执行expr2并返回</li>\n<li><code>..</code> 级联操作符，表示在一个对象上连续调用多个函数以及访问成员变量，可以嵌套</li>\n<li><code>?.</code>和<code>.</code>类似，但是在左侧操作对象为null时返回null<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> addressBook = (<span class=\"keyword\">new</span> AddressBookBuilder()</span><br><span class=\"line\">      ..name = <span class=\"string\">&#x27;jenny&#x27;</span></span><br><span class=\"line\">      ..email = <span class=\"string\">&#x27;jenny@example.com&#x27;</span></span><br><span class=\"line\">      ..phone = (<span class=\"keyword\">new</span> PhoneNumberBuilder()</span><br><span class=\"line\">            ..number = <span class=\"string\">&#x27;415-555-0100&#x27;</span></span><br><span class=\"line\">            ..label = <span class=\"string\">&#x27;home&#x27;</span>)</span><br><span class=\"line\">          .build())</span><br><span class=\"line\">    .build();</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"流程控制\"><a href=\"#流程控制\" class=\"headerlink\" title=\"流程控制\"></a>流程控制</h2><ul>\n<li>for循环中，Dart会自动捕获当时的index索引值，避免JavaScript中问题。对interable的对象可以使用<code>forEach()</code>方法遍历，对List、Set还支持<code>for-in</code>形式的遍历</li>\n<li><code>switch</code>中的每个case（除了空case）都必须有<code>break</code></li>\n<li><code>assert</code>在检查模式下会被跳过</li>\n</ul>\n<h2 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h2><p>和JavaScript中的异常类似。</p>\n<p>不一样的是，可以使用<code>on</code>或<code>catch</code>捕获异常，可以通过<code>rethrow</code>在其中重新抛出异常。</p>\n<h2 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h2><ul>\n<li>构造方式类似ES6中引入JavaScript Class。</li>\n<li>用成员方式声明的类变量在定义时初始化，也就是在构造函数前</li>\n<li>可以使用Object的runtimeType属性来判断实例的类型</li>\n<li>使用const关键字结合构造函数可以构造出不可变的对象实例</li>\n</ul>\n<h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><p>使用和类名同名的方法作为构造函数（或者使用<em>命名构造函数</em>）。因为把构造函数参数赋值给实例变量的场景太常见了，Dart提供了下面的语法糖。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">num</span> x;</span><br><span class=\"line\">  <span class=\"built_in\">num</span> y;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Syntactic sugar for setting x and y</span></span><br><span class=\"line\">  <span class=\"comment\">// before the constructor body runs.</span></span><br><span class=\"line\">  Point(<span class=\"keyword\">this</span>.x, <span class=\"keyword\">this</span>.y);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以使用命名构造函数实现多个构造函数。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">num</span> x;</span><br><span class=\"line\">  <span class=\"built_in\">num</span> y;</span><br><span class=\"line\"></span><br><span class=\"line\">  Point(<span class=\"keyword\">this</span>.x, <span class=\"keyword\">this</span>.y);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Named constructor</span></span><br><span class=\"line\">  Point.fromJson(<span class=\"built_in\">Map</span> json) &#123;</span><br><span class=\"line\">    x = json[<span class=\"string\">&#x27;x&#x27;</span>];</span><br><span class=\"line\">    y = json[<span class=\"string\">&#x27;y&#x27;</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>子类不会从父类继承构造函数</strong>，在未定义构造函数时，会有一个默认构造函数，这个函数没有参数，且会调起父类的没有参数的构造函数。</p>\n<p>在有初始化参数列表（initializer list）的情况下，初始化参数列表在父类构造函数前执行。</p>\n<ol>\n<li>初始化参数列表</li>\n<li>父类无参构造函数</li>\n<li>子类无参构造函数</li>\n</ol>\n<p>父类没有无参构造函数时，需要手动调用父类的其他构造函数。</p>\n<h4 id=\"初始化列表\"><a href=\"#初始化列表\" class=\"headerlink\" title=\"初始化列表\"></a>初始化列表</h4><p>在执行父类构造函数前，可以初始化实例参数。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">num</span> x;</span><br><span class=\"line\">  <span class=\"built_in\">num</span> y;</span><br><span class=\"line\"></span><br><span class=\"line\">  Point(<span class=\"keyword\">this</span>.x, <span class=\"keyword\">this</span>.y);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Initializer list sets instance variables before</span></span><br><span class=\"line\">  <span class=\"comment\">// the constructor body runs.</span></span><br><span class=\"line\">  Point.fromJson(<span class=\"built_in\">Map</span> jsonMap)</span><br><span class=\"line\">      : x = jsonMap[<span class=\"string\">&#x27;x&#x27;</span>],</span><br><span class=\"line\">        y = jsonMap[<span class=\"string\">&#x27;y&#x27;</span>] &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;In Point.fromJson(): (<span class=\"subst\">$x</span>, <span class=\"subst\">$y</span>)&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在冒号右边用逗号隔开初始化表达式。注意：等号右边无法访问<code>this</code>。</p>\n<h4 id=\"重定向构造函数\"><a href=\"#重定向构造函数\" class=\"headerlink\" title=\"重定向构造函数\"></a>重定向构造函数</h4><p>重定向构造函数没有代码，<strong>在构造函数声明后</strong>，用冒号调用其他构造函数</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">num</span> x;</span><br><span class=\"line\">  <span class=\"built_in\">num</span> y;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// The main constructor for this class.</span></span><br><span class=\"line\">  Point(<span class=\"keyword\">this</span>.x, <span class=\"keyword\">this</span>.y);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Delegates to the main constructor.</span></span><br><span class=\"line\">  Point.alongXAxis(<span class=\"built_in\">num</span> x) : <span class=\"keyword\">this</span>(x, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"常量构造函数\"><a href=\"#常量构造函数\" class=\"headerlink\" title=\"常量构造函数\"></a>常量构造函数</h4><p>如果类支持提供状态不变的对象，需要定义一个<code>const</code>构造函数，且所有类变量都要是<code>final</code>。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImmutablePoint</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"built_in\">num</span> x;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"built_in\">num</span> y;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ImmutablePoint(<span class=\"keyword\">this</span>.x, <span class=\"keyword\">this</span>.y);</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ImmutablePoint origin =</span><br><span class=\"line\">      <span class=\"keyword\">const</span> ImmutablePoint(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"工厂构造函数\"><a href=\"#工厂构造函数\" class=\"headerlink\" title=\"工厂构造函数\"></a>工厂构造函数</h4><p>当你的构造函数不需要返回新对象，而从其他地方获取时（如缓存），使用工厂构造函数。**工厂构造函数内无法访问<code>this</code>**。调用时方式和普通构造函数等同。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Logger</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"built_in\">String</span> name;</span><br><span class=\"line\">  <span class=\"built_in\">bool</span> mute = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// _cache is library-private, thanks to the _ in front</span></span><br><span class=\"line\">  <span class=\"comment\">// of its name.</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, Logger&gt; _cache =</span><br><span class=\"line\">      &lt;<span class=\"built_in\">String</span>, Logger&gt;&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">factory</span> Logger(<span class=\"built_in\">String</span> name) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_cache.containsKey(name)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> _cache[name];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">final</span> logger = <span class=\"keyword\">new</span> Logger._internal(name);</span><br><span class=\"line\">      _cache[name] = logger;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> logger;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  Logger._internal(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> logger = <span class=\"keyword\">new</span> Logger(<span class=\"string\">&#x27;UI&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方法-1\"><a href=\"#方法-1\" class=\"headerlink\" title=\"方法\"></a>方法</h3><p>类方法可以访问<code>this</code>，另外对于类对象的每个属性都有隐含的getter和setter（final除外）。也可以显式使用<code>get</code>和<code>set</code>定义getter和setter的行为。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">num</span> left;</span><br><span class=\"line\">  <span class=\"built_in\">num</span> top;</span><br><span class=\"line\">  <span class=\"built_in\">num</span> width;</span><br><span class=\"line\">  <span class=\"built_in\">num</span> height;</span><br><span class=\"line\"></span><br><span class=\"line\">  Rectangle(<span class=\"keyword\">this</span>.left, <span class=\"keyword\">this</span>.top, <span class=\"keyword\">this</span>.width, <span class=\"keyword\">this</span>.height);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Define two calculated properties: right and bottom.</span></span><br><span class=\"line\">  <span class=\"built_in\">num</span> <span class=\"keyword\">get</span> right             =&gt; left + width;</span><br><span class=\"line\">      <span class=\"keyword\">set</span> right(<span class=\"built_in\">num</span> value)  =&gt; left = value - width;</span><br><span class=\"line\">  <span class=\"built_in\">num</span> <span class=\"keyword\">get</span> bottom            =&gt; top + height;</span><br><span class=\"line\">      <span class=\"keyword\">set</span> bottom(<span class=\"built_in\">num</span> value) =&gt; top = value - height;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Dart使用<code>extends</code>继承，用<code>super</code>指代父类，用<code>@overide</code>注解重载操作。</li>\n<li>Dart中有抽象类&#x2F;抽象方法，设计和使用类似Java的抽象类&#x2F;抽象方法。如果你希望抽象类可实例化，可以定义一个工厂工造函数。</li>\n<li>每个类都隐式的定义了一个包含所有实例成员的接口，通过使用<code>implement</code>实现若干其他类的API（不包括构造函数）</li>\n<li>可以重载一些操作符，如<code>+</code>, <code>-</code>, <code>[]</code>, <code>&gt;&gt;</code>等，实现在特定类上的特定表现</li>\n</ul>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vector</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"built_in\">int</span> x;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"built_in\">int</span> y;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> Vector(<span class=\"keyword\">this</span>.x, <span class=\"keyword\">this</span>.y);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/// <span class=\"language-markdown\">Overrides + (a + b).</span></span></span><br><span class=\"line\">  Vector <span class=\"keyword\">operator</span> +(Vector v) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Vector(x + v.x, y + v.y);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/// <span class=\"language-markdown\">Overrides - (a - b).</span></span></span><br><span class=\"line\">  Vector <span class=\"keyword\">operator</span> -(Vector v) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Vector(x - v.x, y - v.y);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>有意思的是，Dart提供<code>noSuchMethod()</code>方法，在访问不存在的类实例或方法时被调用。如果没有填写，默认使用Object的同名方法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@proxy</span><br><span class=\"line\">class A &#123;</span><br><span class=\"line\">  void noSuchMethod(Invocation inv) &#123;</span><br><span class=\"line\">     print(&#x27;You tried to use a non-existent member: &#x27; +</span><br><span class=\"line\">        &#x27;$&#123;inv.memberName&#125;&#x27;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h3><p>枚举是特殊的类，使用<code>enum</code>关键字定义。每个枚举值都有index属性的<code>getter</code>函数，枚举的<code>values</code>常量可以返回所有枚举值。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> Color &#123; red, green, blue &#125;</span><br><span class=\"line\"><span class=\"keyword\">assert</span>(Color.red.index == <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">List</span>&lt;Color&gt; colors = Color.values;</span><br><span class=\"line\"><span class=\"keyword\">assert</span>(colors[<span class=\"number\">2</span>] == Color.blue);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"mixin\"><a href=\"#mixin\" class=\"headerlink\" title=\"mixin\"></a>mixin</h3><p>Dart中提供了<strong>多类继承</strong>中重用类代码的mixin，用<code>with</code>结合mixin类实现，这种类没有构造函数。除非你想像正常类一样使用mixin，否则使用<code>mixin</code>关键字。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">mixin</span> Musical &#123;</span><br><span class=\"line\">  <span class=\"built_in\">bool</span> canPlayPiano = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">  <span class=\"built_in\">bool</span> canCompose = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">  <span class=\"built_in\">bool</span> canConduct = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">void</span> entertainMe() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (canPlayPiano) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Playing piano&#x27;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (canConduct) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Waving hands&#x27;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Humming to self&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当限制mixin只在特定类中使用时，结合<code>on</code>让mixin也能调用父类方法。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">mixin</span> MusicalPerformer <span class=\"keyword\">on</span> Musician &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ···</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"类变量、函数\"><a href=\"#类变量、函数\" class=\"headerlink\" title=\"类变量、函数\"></a>类变量、函数</h3><p>使用<code>static</code>前缀修饰，表示类级别的变量、函数。类变量只在第一次使用时初始化。静态方法无法访问this。</p>\n<h2 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h2><p>使用泛型的两个动机：</p>\n<ul>\n<li>有助于IDE、环境、同事帮你定位问题和代码自动生成</li>\n<li>减少重复代码</li>\n</ul>\n<p>List和Map的泛型定义类似C++风格。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> names = &lt;<span class=\"built_in\">String</span>&gt;[<span class=\"string\">&#x27;Seth&#x27;</span>, <span class=\"string\">&#x27;Kathy&#x27;</span>, <span class=\"string\">&#x27;Lars&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> pages = &lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">String</span>&gt;&#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;index.html&#x27;</span>: <span class=\"string\">&#x27;Homepage&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;robots.txt&#x27;</span>: <span class=\"string\">&#x27;Hints for web robots&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;humans.txt&#x27;</span>: <span class=\"string\">&#x27;We are people, not machines&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> names = <span class=\"keyword\">new</span> <span class=\"built_in\">List</span>&lt;<span class=\"built_in\">String</span>&gt;();</span><br><span class=\"line\"><span class=\"keyword\">var</span> views = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">int</span>, View&gt;();</span><br><span class=\"line\"><span class=\"built_in\">print</span>(names <span class=\"keyword\">is</span> <span class=\"built_in\">List</span>&lt;<span class=\"built_in\">String</span>&gt;); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>在泛型中使用<code>extends</code>可以限制泛型的具体类型。在1.21之后，Dart支持泛型函数。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T first&lt;T&gt;(<span class=\"built_in\">List</span>&lt;T&gt; ts) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...Do some initial work or error checking, then...</span></span><br><span class=\"line\">  T tmp ?= ts[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"comment\">// ...Do some additional checking or processing...</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> tmp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"包管理\"><a href=\"#包管理\" class=\"headerlink\" title=\"包管理\"></a>包管理</h2><p>使用<code>import</code>和<code>library</code>引入和导出模块。<code>_</code>开头的标识符只在库内部可见。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;dart:html&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;dart:io&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:mylib/mylib.dart&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:utils/utils.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:lib2/lib2.dart&#x27;</span> <span class=\"keyword\">as</span> lib2;  <span class=\"comment\">// 指定库前缀，避免重名</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:lib1/lib1.dart&#x27;</span> <span class=\"keyword\">show</span> foo; <span class=\"comment\">// 部分导入</span></span><br></pre></td></tr></table></figure>\n\n<p><code>dart:</code>开头代表内置库，<code>package:</code>开头代表外部库。外部库使用<code>pub</code>包管理器管理。</p>\n<h3 id=\"懒加载库\"><a href=\"#懒加载库\" class=\"headerlink\" title=\"懒加载库\"></a>懒加载库</h3><p>懒加载即在使用时再加载库，如优化app启动时间，加载很可能用不到的功能。</p>\n<p>加载时使用<code>deferred as</code>导入，使用<code>loadLibrary()</code>方法加载。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:deferred/hello.dart&#x27;</span> <span class=\"keyword\">deferred</span> <span class=\"keyword\">as</span> hello;</span><br><span class=\"line\"></span><br><span class=\"line\">greet() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> hello.loadLibrary();</span><br><span class=\"line\">  hello.printGreeting();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"异步支持\"><a href=\"#异步支持\" class=\"headerlink\" title=\"异步支持\"></a>异步支持</h2><p>Dart中返回<code>Future</code>和<code>Stream</code>的方法都是异步的，意味着设置好耗时操作（I&#x2F;O）后就返回。类似ES7中的<code>await</code>和<code>async</code>，你也可以像组织同步代码一样组织你的异步代码。</p>\n<p>Dart中声明异步方法是<strong>在函数名后加入async</strong>，这类方法返回一个<code>Future</code>对象，了解JS中<code>Promise</code>的同学可以很快理解Future是做什么的。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">checkVersion() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> version = <span class=\"keyword\">await</span> lookUpVersion();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (version == expectedVersion) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Do something.</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Do something else.</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在返回值是Stream时，使用<code>await for</code>的形式接收Stream中的数据。另外别忘了用<code>async</code>修饰外界函数。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Future main() <span class=\"keyword\">async</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> request <span class=\"keyword\">in</span> requestServer) &#123;</span><br><span class=\"line\">    handleRequest(request);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"生成器函数\"><a href=\"#生成器函数\" class=\"headerlink\" title=\"生成器函数\"></a>生成器函数</h2><p>惰性生产数据，类似ES6中的<code>function*</code>。Dart提供两种类型：</p>\n<ul>\n<li>同步：返回Iterator</li>\n<li>异步：返回Stream</li>\n</ul>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Iterable</span>&lt;<span class=\"built_in\">int</span>&gt; naturalsDownFrom(<span class=\"built_in\">int</span> n) <span class=\"keyword\">sync</span>* &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> n;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span>* naturalsDownFrom(n - <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Stream&lt;<span class=\"built_in\">int</span>&gt; asynchronousNaturalsTo(<span class=\"built_in\">int</span> n) <span class=\"keyword\">async</span>* &#123;</span><br><span class=\"line\">  <span class=\"built_in\">int</span> k = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (k &lt; n) <span class=\"keyword\">yield</span> k++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"可调用的类\"><a href=\"#可调用的类\" class=\"headerlink\" title=\"可调用的类\"></a>可调用的类</h2><p>类中实现了<code>call()</code>方法时，类实例可以当做方法调用。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WannabeFunction</span> </span>&#123;</span><br><span class=\"line\">  call(<span class=\"built_in\">int</span> a, <span class=\"built_in\">int</span> b) =&gt; a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> wf = <span class=\"keyword\">new</span> WannabeFunction();</span><br><span class=\"line\">wf(<span class=\"number\">3</span>, <span class=\"number\">4</span>); <span class=\"comment\">// 7</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类型别名\"><a href=\"#类型别名\" class=\"headerlink\" title=\"类型别名\"></a>类型别名</h2><p>类似typescript中的interface定义，Dart可以借助<code>typedef</code>进行一些更复杂的类型判断。typedef只是类型别名的一种说法。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">int</span> Compare(<span class=\"built_in\">int</span> a, <span class=\"built_in\">int</span> b);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">int</span> sort(<span class=\"built_in\">int</span> a, <span class=\"built_in\">int</span> b) =&gt; a - b;</span><br><span class=\"line\"></span><br><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">assert</span>(sort <span class=\"keyword\">is</span> Compare); <span class=\"comment\">// True!</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"元数据\"><a href=\"#元数据\" class=\"headerlink\" title=\"元数据\"></a>元数据</h2><p>使用元数据给代码添加额外信息，也能便于文档自动生成。</p>\n<ul>\n<li><code>@deprecated</code></li>\n<li><code>@override</code></li>\n<li><code>@proxy</code></li>\n</ul>\n<p>你还可以自定义自己的元数据注解：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">library</span> todo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">todo</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"built_in\">String</span> who;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"built_in\">String</span> what;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> todo(<span class=\"keyword\">this</span>.who, <span class=\"keyword\">this</span>.what);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// another file</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;todo.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@todo</span>(<span class=\"string\">&#x27;seth&#x27;</span>, <span class=\"string\">&#x27;make this do something&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">void</span> doSomething() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;do something&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><ul>\n<li>单行，<code>//</code></li>\n<li>多行，<code>/**/</code></li>\n<li>文档注释， <code>///</code>开头，或<code>/**</code>开头，<code>*/</code>结束</li>\n</ul>\n<p>遵守规范的注释风格会有助于文档自动生成。</p>\n",
            "tags": [
                "Dart"
            ]
        }
    ]
}