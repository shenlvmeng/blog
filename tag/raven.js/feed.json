{
    "version": "https://jsonfeed.org/version/1",
    "title": "Shenlvmeng's Blog • All posts by \"raven.js\" tag",
    "description": "Be sharp, my friend.",
    "home_page_url": "http://shenlvmeng.github.com/blog",
    "items": [
        {
            "id": "http://shenlvmeng.github.com/blog/2017/12/11/raven/",
            "url": "http://shenlvmeng.github.com/blog/2017/12/11/raven/",
            "title": "Sentry Raven.js学习",
            "date_published": "2017-12-11T15:03:47.000Z",
            "content_html": "<p>最近看看要不要在网上学习下性能监测和告警的解决方案，加在项目里。已经调研了一下才发现，项目里已经用上Raven.js了。实际上，各大公司也都有自己的实现方式，除了sentry的Raven.js外，还有腾讯的badjs，淘宝的JSTracker，阿里巴巴的FdSafe，支付宝的saijs等。早在几年前，就已经有许多解决方案了。</p>\n<p>异常监测和信息采集的需要实现的主要功能点包括：</p>\n<ul>\n<li>前端SDK实现包括错误拦截和监控，错误信息包装、信息上报、API设计等</li>\n<li>提供一个可视化的管理后台</li>\n<li>可以正确定位错误位置</li>\n<li>可以对上报的日志进行筛选、查询、聚类等操作</li>\n<li>可以用邮件、短信或集成在其他平台中通知开发者</li>\n</ul>\n<p>从一个前端初学者的角度，下面更多聊一下前端SDK的细节。</p>\n<h3 id=\"前端SDK实现\"><a href=\"#前端SDK实现\" class=\"headerlink\" title=\"前端SDK实现\"></a>前端SDK实现</h3><p>前端实现上的技术重点有三：<strong>错误捕获和封装</strong>，<strong>AJAX上报</strong>和<strong>JSON字符串化参数</strong>。</p>\n<p>在raven-js的<code>vendor</code>目录下，引用<code>json-stringify-safe</code>和<code>Tracekit</code>。前者为了避免<code>JSON.stringify</code>中出现的循环引用的情况，下面主要介绍后者。</p>\n<h4 id=\"Tracekit\"><a href=\"#Tracekit\" class=\"headerlink\" title=\"Tracekit\"></a>Tracekit</h4><p>常见的方案就是拦截<code>window.onerror</code>方法，在做完自己的工作后，调用原来的<code>window.onerror</code>。自己的工作里包括对错误信息的同一美化和包装。raven.js在这里是借助Tracekit.js完成的。</p>\n<p>Tracekit主要分为两部分，<code>Tracekit.report()</code>和<code>Tracekit.computeStackTraceWrapper()</code>。前者主要用来绑定和解绑错误监听函数、拦截错误；后者主要用来格式化错误信息。</p>\n<p><strong><code>Tracekit.report()</code></strong></p>\n<p>在<code>report()</code>里，整体的设计和基本的观察者设计模式一样，内部成员<code>handlers</code>保存所有的事件消费者，与事件处理函数相关的有四个：</p>\n<ul>\n<li><code>subscribe()</code>，绑定一个监听错误的函数，并在绑定第一个函数时替换原有的<code>window.onerror</code></li>\n<li><code>unsubscribe()</code>，解绑一个监听错误的函数，需要提供函数的引用</li>\n<li><code>unsubscribeAll()</code>，解绑所有监听错误的函数，还原原有的<code>window.onerror</code></li>\n<li><code>notifyHandlers()</code>，触发错误时，将处理过的错误分发给各handlers</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">notifyHandlers</span>(<span class=\"params\">stack, isWindowError</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> exception = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isWindowError &amp;&amp; !<span class=\"title class_\">TraceKit</span>.<span class=\"property\">collectWindowErrors</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> handlers) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (handlers.<span class=\"title function_\">hasOwnProperty</span>(i)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                handlers[i].<span class=\"title function_\">apply</span>(<span class=\"literal\">null</span>, [stack].<span class=\"title function_\">concat</span>(_slice.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>, <span class=\"number\">2</span>)));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (inner) &#123;</span><br><span class=\"line\">                exception = inner;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (exception) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> exception;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>另外，函数<code>installGlobalHandler()</code>和<code>uninstallGlobalHandler()</code>就是上文中用来拦截<code>window.onerror</code>的函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">installGlobalHandler</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_onErrorHandlerInstalled) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    _oldOnerrorHandler = _window.<span class=\"property\">onerror</span>;</span><br><span class=\"line\">    _window.<span class=\"property\">onerror</span> = traceKitWindowOnError;</span><br><span class=\"line\">    _onErrorHandlerInstalled = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">uninstallGlobalHandler</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!_onErrorHandlerInstalled) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    _window.<span class=\"property\">onerror</span> = _oldOnerrorHandler;</span><br><span class=\"line\">    _onErrorHandlerInstalled = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    _oldOnerrorHandler = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>report()</code>中最主要的函数是<code>traceKitWindowOnError()</code>。它的工作流程如下：</p>\n<ol>\n<li>查看lastException是否有正在处理的error，如果有则说明是当前错误引起的，使用<code>computeStackTrace.augmentStackTraceWithInitialElement()</code>追加到当前的错误栈前。调用<code>processLastException()</code>，将lastException的信息交给handler处理，并将lastException置空。</li>\n<li>如果lastException为空，且Error为错误对象，使用<code>computeStackTrace()</code>格式化错误信息，再交给错误消费者。</li>\n<li>如果lastException为空，且Error不是错误对象（如字符串），则自行包装错误信息，交给消费者</li>\n<li>使用原来的<code>window.onerror()</code>处理事件</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">traceKitWindowOnError</span>(<span class=\"params\">message, url, lineNo, colNo, ex</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> stack = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lastExceptionStack) &#123;</span><br><span class=\"line\">        <span class=\"title class_\">TraceKit</span>.<span class=\"property\">computeStackTrace</span>.<span class=\"title function_\">augmentStackTraceWithInitialElement</span>(</span><br><span class=\"line\">            lastExceptionStack,</span><br><span class=\"line\">            url,</span><br><span class=\"line\">            lineNo,</span><br><span class=\"line\">            message</span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"title function_\">processLastException</span>();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ex &amp;&amp; utils.<span class=\"title function_\">isError</span>(ex)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// non-string `ex` arg; attempt to extract stack trace</span></span><br><span class=\"line\">        stack = <span class=\"title class_\">TraceKit</span>.<span class=\"title function_\">computeStackTrace</span>(ex);</span><br><span class=\"line\">        <span class=\"title function_\">notifyHandlers</span>(stack, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 自行封装</span></span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">        <span class=\"title function_\">notifyHandlers</span>(stack, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_oldOnerrorHandler) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _oldOnerrorHandler.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, <span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Tracekit.computeStackTraceWrapper()</strong></p>\n<p>这一部分主要由下面几个函数组成：</p>\n<ul>\n<li><code>computeStackTraceFromStackProp()</code>，处理Chrome和Gecko浏览器下的错误信息格式化</li>\n<li><code>computeStackTraceByWalkingCallerChain()</code>，处理IE和Safari浏览器下的错误信息格式化</li>\n<li><code>augmentStackTraceWithInitialElement()</code>，在当前错误栈底新增新的错误信息，用于<code>computeStackTraceByWalkingCallerChain()</code>和第一部分的<code>processLastException()</code></li>\n<li><code>computeStackTrace()</code>，格式化错误栈信息</li>\n</ul>\n<p>其中<code>computeStackTraceFromStackProp()</code>通过换行符得到stack信息，并通过正则格式化所需要的错误信息，<code>computeStackTraceByWalkingCallerChain()</code>是利用<code>arguments.caller</code>得到错误栈信息并格式化。</p>\n<p><code>computeStackTrace()</code>代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">computeStackTrace</span>(<span class=\"params\">ex, depth</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> stack = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    depth = depth == <span class=\"literal\">null</span> ? <span class=\"number\">0</span> : +depth;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        stack = <span class=\"title function_\">computeStackTraceFromStackProp</span>(ex);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (stack) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> stack;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title class_\">TraceKit</span>.<span class=\"property\">debug</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        stack = <span class=\"title function_\">computeStackTraceByWalkingCallerChain</span>(ex, depth + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (stack) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> stack;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title class_\">TraceKit</span>.<span class=\"property\">debug</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: ex.<span class=\"property\">name</span>,</span><br><span class=\"line\">        <span class=\"attr\">message</span>: ex.<span class=\"property\">message</span>,</span><br><span class=\"line\">        <span class=\"attr\">url</span>: <span class=\"title function_\">getLocationHref</span>()</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>除了Tracekit所做的工作外，raven本身也对console的log&#x2F;warning&#x2F;assert&#x2F;error方法，<code>setTimeout</code>，<code>setInterval</code>,<code>requestAnimationFrame()</code>以及各种事件handler进行了拦截。</p>\n<p>这里有个坑，跨域的问题无法拦截错误，解决办法就是对跨域的script标签加入crossorigin属性，并在后台配置<code>Access-Control-Allow-Origin=*</code></p>\n<h4 id=\"Raven\"><a href=\"#Raven\" class=\"headerlink\" title=\"Raven\"></a>Raven</h4><p>实际上，Tracekit本身已经完成对<strong>错误捕获和封装</strong>。Raven为了便于在管理后台展示和管理，进一步提出了DSN、context等设计。raven-js的源码主要在<code>src/raven.js</code>中。剩下两部分也是在其中实现的。下面分部分介绍一些：</p>\n<p><strong>DSN</strong></p>\n<p>DSN（Data Source Name）是Sentry对一个项目的定义。它由协议、端口、用户、密码、后台Sentry服务器地址、项目名组成。通过<code>Raven.config()</code>设置。在<code>config()</code>中通过正则匹配用户输入的DSN字符串，得到后台地址。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">config</span>: <span class=\"keyword\">function</span>(<span class=\"params\">dsn, options</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!dsn) <span class=\"keyword\">return</span> self;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> globalOptions = self.<span class=\"property\">_globalOptions</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置全局参数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">each</span>(options, <span class=\"keyword\">function</span>(<span class=\"params\">key, value</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// tags and extra are special and need to be put into context</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key === <span class=\"string\">&#x27;tags&#x27;</span> || key === <span class=\"string\">&#x27;extra&#x27;</span> || key === <span class=\"string\">&#x27;user&#x27;</span>) &#123;</span><br><span class=\"line\">          self.<span class=\"property\">_globalContext</span>[key] = value;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          globalOptions[key] = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    self.<span class=\"title function_\">setDSN</span>(dsn);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 屏蔽跨域的无效错误</span></span><br><span class=\"line\">    globalOptions.<span class=\"property\">ignoreErrors</span>.<span class=\"title function_\">push</span>(<span class=\"regexp\">/^Script error\\.?$/</span>);</span><br><span class=\"line\">    globalOptions.<span class=\"property\">ignoreErrors</span>.<span class=\"title function_\">push</span>(<span class=\"regexp\">/^Javascript error: Script error\\.? on line 0$/</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// return for chaining</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> self;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n<p><strong>安装和卸载</strong></p>\n<p>在<code>install()</code>和<code>uninstall()</code>函数中完成。</p>\n<p><code>install()</code>中完成了下面的工作：</p>\n<ul>\n<li>借助Tracekit监听了全局的错误事件</li>\n<li>监听try catch和一些浏览器事件过程（如console，click，fetch等）中的信息</li>\n<li>安装插件</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">install</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (self.<span class=\"title function_\">isSetup</span>() &amp;&amp; !self.<span class=\"property\">_isRavenInstalled</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 订阅所有错误事件</span></span><br><span class=\"line\">        <span class=\"title class_\">TraceKit</span>.<span class=\"property\">report</span>.<span class=\"title function_\">subscribe</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            self.<span class=\"property\">_handleOnErrorStackInfo</span>.<span class=\"title function_\">apply</span>(self, <span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 下方的函数会修改原回调函数</span></span><br><span class=\"line\">        <span class=\"comment\">// 需要修改函数的toString方法</span></span><br><span class=\"line\">        self.<span class=\"title function_\">_patchFunctionToString</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 封装定时器和事件回调函数以提供更好的错误监控</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (self.<span class=\"property\">_globalOptions</span>.<span class=\"property\">instrument</span> &amp;&amp; self.<span class=\"property\">_globalOptions</span>.<span class=\"property\">instrument</span>.<span class=\"property\">tryCatch</span>) &#123;</span><br><span class=\"line\">            self.<span class=\"title function_\">_instrumentTryCatch</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 一些浏览器原生方法的封装，以捕获事件</span></span><br><span class=\"line\">        <span class=\"comment\">// 设置里可关闭</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (self.<span class=\"property\">_globalOptions</span>.<span class=\"property\">autoBreadcrumbs</span>) self.<span class=\"title function_\">_instrumentBreadcrumbs</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 安装所有插件</span></span><br><span class=\"line\">        self.<span class=\"title function_\">_drainPlugins</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 更新状态</span></span><br><span class=\"line\">        self.<span class=\"property\">_isRavenInstalled</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title class_\">Error</span>.<span class=\"property\">stackTraceLimit</span> = self.<span class=\"property\">_globalOptions</span>.<span class=\"property\">stackTraceLimit</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>uninstall</code>中还原了对浏览器原方法的修改，并卸载了Tracekit的report。</p>\n<p><strong>封装函数</strong></p>\n<p>相关函数：<code>context()</code>和<code>wrap()</code>。完成的主要工作是对浏览器原生方法的拦截，使得能更好地捕获其中的错误，在对象内部使用。</p>\n<p><strong>capture相关</strong></p>\n<p>用来捕获事件，有三种用法。</p>\n<ul>\n<li><code>captureException()</code>，最典型的用法，借助Tracekit捕获页面的异常，之后进一步封装成frame后交给<code>_send()</code>发送</li>\n<li><code>captureMessage()</code>，最常用的用法，类似埋点，将信息封装成frame后交给<code>_send()</code>发送</li>\n<li><code>captureBreadcrumb</code>，类似<code>captureMessage()</code>，不过储存信息在<code>this._breadcrumbs</code>，并不交给<code>_send()</code></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">captureException</span>: <span class=\"keyword\">function</span>(<span class=\"params\">ex, options</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ex不是错误时的处理</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Get actual Error from ErrorEvent</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isErrorEvent</span>(ex)) ex = ex.<span class=\"property\">error</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Store the raw exception object for potential debugging and introspection</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_lastCapturedException</span> = ex;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// TraceKit.report will re-raise any exception passed to it,</span></span><br><span class=\"line\">    <span class=\"comment\">// which means you have to wrap it in try/catch. Instead, we</span></span><br><span class=\"line\">    <span class=\"comment\">// can wrap it here and only re-raise if TraceKit.report</span></span><br><span class=\"line\">    <span class=\"comment\">// raises an exception different from the one we asked to</span></span><br><span class=\"line\">    <span class=\"comment\">// report on.</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> stack = <span class=\"title class_\">TraceKit</span>.<span class=\"title function_\">computeStackTrace</span>(ex);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">_handleStackInfo</span>(stack, options);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (ex1) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ex !== ex1) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> ex1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>值得注意的是<code>captureMessage</code>中可以设置rate，使一些消息不上报。白名单、正则过滤也是在这里完成的。<code>captureException</code>则是在<code>_processException</code>中完成的。</p>\n<p><strong>设置context</strong></p>\n<p>context包括三部分：</p>\n<ul>\n<li>tags，用于从不同维度标识错误或信息，使用<code>setTagsContext()</code>全局配置</li>\n<li>users，用于标识错误来源，使用<code>setUsersContext()</code>配置</li>\n<li>extra，用来携带额外的信息，这部分信息不会被索引，使用<code>setExtraContext()</code>配置</li>\n</ul>\n<p>它们都放在<code>Raven._globalContext</code>中。涉及的函数还有<code>clearContext()</code>和<code>getContext()</code>。</p>\n<p>同时<code>environment</code>和<code>release</code>也放在<code>Raven._globalContext</code>中，可以通过<code>setEnvironment</code>和<code>setRelease</code>设置</p>\n<p><strong>BreadCrumb</strong></p>\n<p>这部分功能是在<code>_instrumentTryCatch</code>和<code>_instrumentBreadcrumbs</code>方法里实现的。它们通过重写原方法，捕获其中的错误和事件。在卸载时，通过<code>restoreBuiltin</code>还原。</p>\n<p><strong>发送</strong></p>\n<ul>\n<li>在<code>send()</code>方法中，会使用封装好的数据附加上<code>_globalOptions</code>中的数据，附带浏览器的状态信息（<code>_getHttpdata()</code>中实现）之后交由<code>_sendProcessedPayload()</code>。</li>\n<li>在<code>_sendProcessedPayload()</code>中，会裁剪过长的信息（message, stack, url, referer等）添加请求头，设置发送目标，传入成功和失败回调调用发送函数<code>_makeRequest()</code>。</li>\n<li>在<code>_makeRequest()</code>中，为了跨域发送，会优先尝试fetch，然后尝试带有withCredentials字段的XMLHttpRequest，最后采用XDomainRequest对象发送。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">_makeRequest</span>: <span class=\"keyword\">function</span>(<span class=\"params\">opts</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Auth is intentionally sent as part of query string (NOT as custom HTTP header) to avoid preflight CORS requests</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> url = opts.<span class=\"property\">url</span> + <span class=\"string\">&#x27;?&#x27;</span> + <span class=\"title function_\">urlencode</span>(opts.<span class=\"property\">auth</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">supportsFetch</span>()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _window</span><br><span class=\"line\">            .<span class=\"title function_\">fetch</span>(url, &#123;</span><br><span class=\"line\">                <span class=\"attr\">method</span>: <span class=\"string\">&#x27;POST&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">body</span>: <span class=\"title function_\">stringify</span>(opts.<span class=\"property\">data</span>)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            .<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\">response</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (response.<span class=\"property\">ok</span>) &#123;</span><br><span class=\"line\">                    opts.<span class=\"property\">onSuccess</span> &amp;&amp; opts.<span class=\"title function_\">onSuccess</span>();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// ..</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            [<span class=\"string\">&#x27;catch&#x27;</span>](<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                opts.<span class=\"property\">onError</span> &amp;&amp;</span><br><span class=\"line\">                    opts.<span class=\"title function_\">onError</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Sentry error code: network unavailable&#x27;</span>));</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> request = _window.<span class=\"property\">XMLHttpRequest</span> &amp;&amp; <span class=\"keyword\">new</span> _window.<span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!request) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// if browser doesn&#x27;t support CORS (e.g. IE7), we are out of luck</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> hasCORS = <span class=\"string\">&#x27;withCredentials&#x27;</span> <span class=\"keyword\">in</span> request || <span class=\"keyword\">typeof</span> <span class=\"title class_\">XDomainRequest</span> !== <span class=\"string\">&#x27;undefined&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!hasCORS) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"string\">&#x27;withCredentials&#x27;</span> <span class=\"keyword\">in</span> request) &#123;</span><br><span class=\"line\">        request.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (request.<span class=\"property\">readyState</span> !== <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (request.<span class=\"property\">status</span> === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">                opts.<span class=\"property\">onSuccess</span> &amp;&amp; opts.<span class=\"title function_\">onSuccess</span>();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (opts.<span class=\"property\">onError</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> err = <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Sentry error code: &#x27;</span> + request.<span class=\"property\">status</span>);</span><br><span class=\"line\">                err.<span class=\"property\">request</span> = request;</span><br><span class=\"line\">                opts.<span class=\"title function_\">onError</span>(err);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        request = <span class=\"keyword\">new</span> <span class=\"title class_\">XDomainRequest</span>();</span><br><span class=\"line\">        <span class=\"comment\">// xdomainrequest cannot go http -&gt; https (or vice versa),</span></span><br><span class=\"line\">        <span class=\"comment\">// so always use protocol relative</span></span><br><span class=\"line\">        url = url.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/^https?:/</span>, <span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// onreadystatechange not supported by XDomainRequest</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (opts.<span class=\"property\">onSuccess</span>) &#123;</span><br><span class=\"line\">            request.<span class=\"property\">onload</span> = opts.<span class=\"property\">onSuccess</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (opts.<span class=\"property\">onError</span>) &#123;</span><br><span class=\"line\">            request.<span class=\"property\">onerror</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> err = <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Sentry error code: XDomainRequest&#x27;</span>);</span><br><span class=\"line\">                err.<span class=\"property\">request</span> = request;</span><br><span class=\"line\">                opts.<span class=\"title function_\">onError</span>(err);</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    request.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;POST&#x27;</span>, url);</span><br><span class=\"line\">    request.<span class=\"title function_\">send</span>(<span class=\"title function_\">stringify</span>(opts.<span class=\"property\">data</span>));</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>至此，<strong>错误捕获和封装</strong>，<strong>AJAX上报</strong>和<strong>JSON字符串化参数</strong>都已完成。</p>\n<h3 id=\"可视化后台\"><a href=\"#可视化后台\" class=\"headerlink\" title=\"可视化后台\"></a>可视化后台</h3><p>在自己设计异常监控系统时，需要和后台商量好接口的设定。用Express + React&#x2F;Vue等方案快速搭建。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"https://sentry.io/\">sentry.io</a></li>\n<li><a href=\"https://github.com/getsentry/raven-js\">getsentry&#x2F;raven-js</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/26085642\">前端异常监控系统的落地</a></li>\n</ul>\n",
            "tags": [
                "埋点",
                "raven.js",
                "前端监控"
            ]
        }
    ]
}