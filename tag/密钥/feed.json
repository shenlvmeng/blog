{
    "version": "https://jsonfeed.org/version/1",
    "title": "Shenlvmeng's Blog • All posts by \"密钥\" tag",
    "description": "Be sharp, my friend.",
    "home_page_url": "http://shenlvmeng.github.com/blog",
    "items": [
        {
            "id": "http://shenlvmeng.github.com/blog/2018/10/30/password-tech-note/",
            "url": "http://shenlvmeng.github.com/blog/2018/10/30/password-tech-note/",
            "title": "《图解密码技术》总结整理",
            "date_published": "2018-10-29T16:07:43.000Z",
            "content_html": "<blockquote>\n<p>本文来自<a href=\"https://book.douban.com/subject/26265544/\">《图解密码技术》</a>一书</p>\n</blockquote>\n<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><ul>\n<li>信源、信宿、信道</li>\n<li>加密、解密、密钥</li>\n<li>对称密码、公钥密码、混合密码</li>\n<li>单向散列（hash）函数、信息认证</li>\n<li>数字签名 &#x2F; 篡改和否认</li>\n<li>伪随机数</li>\n</ul>\n<p>信息传递时面临的风险：</p>\n<ul>\n<li>窃听 -&gt; 对称、公钥密码</li>\n<li>篡改 -&gt; 散列函数、消息认证、数字签名</li>\n<li>伪装 -&gt; 消息认证、数字签名</li>\n<li>否认 -&gt; 数字签名</li>\n</ul>\n<p>有悖常识的几点：</p>\n<ul>\n<li>不要使用保密的加密算法</li>\n<li>使用低强度密码不如不用</li>\n<li>任何密码都有可能被破解</li>\n<li>密码只是安全的一部分（社工）</li>\n</ul>\n<h2 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h2><ul>\n<li>凯撒密码 &#x2F; 平移 &#x2F; 暴力破解</li>\n<li>简单替换密码 &#x2F; 替换 &#x2F; 频率分析</li>\n<li>Enigma &#x2F; 加密密码的密码 &#x2F; 针对每日密钥的破解</li>\n</ul>\n<h2 id=\"对称密码\"><a href=\"#对称密码\" class=\"headerlink\" title=\"对称密码\"></a>对称密码</h2><ul>\n<li>编码和异或</li>\n<li>一次性密码和它的问题</li>\n<li><strong>使用对称密码时，我们通常默认密钥配送问题已解决</strong></li>\n</ul>\n<h3 id=\"DES\"><a href=\"#DES\" class=\"headerlink\" title=\"DES\"></a>DES</h3><p>全称Data Encryption Standard。于1977年在美国发明并使用。目前可以被暴力破解，因此不应再使用了。</p>\n<ul>\n<li>DES以<strong>64bit</strong>为一个单位，使用和明文等长的密钥。</li>\n<li>密钥每8位包含1位纠错码</li>\n<li>基本结构使用Feistel网络<ul>\n<li>加密&#x2F;解密步骤以轮为单位，DES有16轮</li>\n<li>每轮运算不加密右半侧，同时右半侧比特和该轮密钥通过轮函数得到本轮加密左侧的密钥，和左侧做异或得到左侧密文</li>\n<li>每轮加密后，进行左右对调，保证右侧的保密</li>\n<li><strong>解密时用相同结构</strong>，反向使用子密钥和轮函数即可</li>\n<li>轮函数可以任意复杂</li>\n</ul>\n</li>\n<li>差分分析和线性分析衡量分组密码强度</li>\n</ul>\n<p><strong>三重DES</strong></p>\n<p>由IBM开发，步骤为DES加密 -&gt; DES解密 -&gt; DES加密。密钥长度是原来三倍，即168比特。</p>\n<ul>\n<li>三步使用同一密钥，即向下兼容DES</li>\n<li>根据1、3步是否使用同一密钥，分为DES-EDE2和DES-EDE3</li>\n<li>处理速度慢</li>\n</ul>\n<h3 id=\"AES\"><a href=\"#AES\" class=\"headerlink\" title=\"AES\"></a>AES</h3><p>全称Advanced Encrytion Standard，用来取代DES。由NIST开于1997年开始募集，将作为国家标准。算法要求开源免费，并在社群里公开评审，最终于2000年确定为Rijndael。</p>\n<ul>\n<li>基本结构为SPN结构</li>\n<li>明文分组长度固定为<strong>128bit</strong>、密钥长度可以是128、192、256比特三种</li>\n<li>每轮分为SubBytes、ShiftRows、MixColumns、AddRoundKey四步<ul>\n<li>SubBytes，将4字节 * 4字节的矩阵与一个转换矩阵相乘，得到替换后的矩阵</li>\n<li>ShiftRows，逐行做平移</li>\n<li>MixColumns，逐列做矩阵运算</li>\n<li>AddRoundKey，和轮密钥矩阵做对应位上的异或运算</li>\n</ul>\n</li>\n<li>解密时，除了AddRoundKey一步，其余均需要做逆运算</li>\n<li>目前还没有针对Rijndael的有效攻击</li>\n<li><strong>避免使用DES，选择AES</strong></li>\n</ul>\n<h2 id=\"分组密码的迭代模式\"><a href=\"#分组密码的迭代模式\" class=\"headerlink\" title=\"分组密码的迭代模式\"></a>分组密码的迭代模式</h2><p>分组密码只能加密<strong>固定长度</strong>的密码。因此，需要有<strong>模式</strong>来迭代加密任意长度的明文。与分组密码相对的是流密码，对数据进行连续处理。</p>\n<h3 id=\"ECB\"><a href=\"#ECB\" class=\"headerlink\" title=\"ECB\"></a>ECB</h3><p>全称为Electronic CodeBook。是最简单直接的分组方式。将明文分组加密后直接得到对应位置的密文。不足的位用特定数据<strong>填充</strong>。</p>\n<ul>\n<li>问题很明显，<strong>不要使用</strong></li>\n<li>相同的明文分组会得到相同的密文分组</li>\n<li>攻击者无需破译密码也可通过修改密文操纵明文，比如替换或删除分组</li>\n</ul>\n<h3 id=\"CBC\"><a href=\"#CBC\" class=\"headerlink\" title=\"CBC\"></a>CBC</h3><p>全称Cipher Block Chaining。和ECB的最大不同在于明文分组加密前会和上一个密文分组做一次异或运算。开头的明文分组会和一个随机序列做XOR。</p>\n<ul>\n<li>一个密文分组的损坏会影响关联的两个分组的解密</li>\n<li>比特的缺失将会影响整个密文的解密</li>\n<li>操纵初始化向量反转某一位比特可以反转第一个密文分组的某一位</li>\n<li>填充提示攻击，攻击padding部分</li>\n<li>SSL&#x2F;TLS使用CBC模式保证通信机密</li>\n<li><strong>CTS</strong>使用最后一个密文填充不足的明文部分</li>\n</ul>\n<h3 id=\"CFB\"><a href=\"#CFB\" class=\"headerlink\" title=\"CFB\"></a>CFB</h3><p>全程Cipher FeedBack模式。和CBC模式的区别在密文分组先加密，再和下一个明文做异或运算。实际上明文分组和密文分组间只相差了一个异或运算。很类似一次性密码本的模式。</p>\n<ul>\n<li>解密时，需要对密文分组和初始向量做<strong>加密</strong>操作</li>\n<li><strong>重放</strong>攻击，替换密文分组为原有分组，可使得解密出的明文为原有明文</li>\n</ul>\n<h3 id=\"OFB\"><a href=\"#OFB\" class=\"headerlink\" title=\"OFB\"></a>OFB</h3><p>全称Output-FeedBack模式。和CFB很像，区别在于OFB每次做XOR的密钥流仅来自于上一次的密钥，<strong>和密文分组无关</strong>。因为密钥流可以提前准备好，分组加密过程可以是并行的。</p>\n<ul>\n<li>第一次的密钥来自初始化向量</li>\n<li>速度快</li>\n<li>如果碰巧密钥加密后和加密前一样，那么之后的密钥就会是同一个值</li>\n</ul>\n<h3 id=\"CTR\"><a href=\"#CTR\" class=\"headerlink\" title=\"CTR\"></a>CTR</h3><p>全称CounTeR。CTR和OFB类似，区别在于它的密钥流来自于累加的计数器。密文分组来自于密钥流和明文分组的XOR运算。</p>\n<ul>\n<li>计数器由nonce和序号两部分各8字节组成，nonce是随机生成的，序号是从1累加的。</li>\n<li>和OFB一样，加密解密速度快，结构简单</li>\n<li>CTR的密钥流在选定nonce后就确定了，因此可以以<strong>任意顺序并行</strong>加密、解密</li>\n</ul>\n<h2 id=\"公钥密码\"><a href=\"#公钥密码\" class=\"headerlink\" title=\"公钥密码\"></a>公钥密码</h2><p>解决了对称密码的密钥配送问题。</p>\n<h3 id=\"密钥配送问题\"><a href=\"#密钥配送问题\" class=\"headerlink\" title=\"密钥配送问题\"></a>密钥配送问题</h3><ul>\n<li><strong>事先共享</strong>，在现实生活中传送</li>\n<li><strong>密钥配送中心</strong>，集中式管理用户密钥，用其加密临时的会话密钥</li>\n<li><strong>使用Diffie-Hellman密钥交换</strong></li>\n<li><strong>使用公钥密码</strong></li>\n</ul>\n<h3 id=\"公钥密码-1\"><a href=\"#公钥密码-1\" class=\"headerlink\" title=\"公钥密码\"></a>公钥密码</h3><p>使用加密密钥（公钥）加密，使用解密密钥（私钥）解密，避免密钥的泄露。</p>\n<ul>\n<li>发送者使用加密密钥</li>\n<li>接收者使用解密密钥</li>\n<li>加密密钥可以公开</li>\n<li>解密密钥一定要保密</li>\n</ul>\n<p>目前所使用的公钥密码RSA来自于1978年的发明。流程上，</p>\n<ul>\n<li><strong>接收者</strong>生成公私钥对，发送公钥给发送者</li>\n<li>发送者使用公钥加密明文</li>\n<li>接收者使用私钥解密密文</li>\n</ul>\n<p>公钥密码有两个问题：</p>\n<ul>\n<li>认证公钥的合法性</li>\n<li>处理速度慢</li>\n</ul>\n<h3 id=\"RSA\"><a href=\"#RSA\" class=\"headerlink\" title=\"RSA\"></a>RSA</h3><p>利用了数论中求解离散对数困难且耗时的特点。</p>\n<ul>\n<li><strong>加密</strong>，使用<code>密文=明文 ^ E mod N</code>。E和N组合成公钥。</li>\n<li><strong>解密</strong>，使用<code>明文=密文 ^ D mod N</code>。D和N组合成密钥。</li>\n</ul>\n<p>生成N、E、D和顺序如下：</p>\n<ol>\n<li>寻找互质的两个大数p和q，N为二者的乘积</li>\n<li>p-1和q-1的最小公倍数记为L</li>\n<li>寻找比L小的和L互质的数，即为E</li>\n<li>寻找比L小的和E乘积取模L为1的数，即为D</li>\n</ol>\n<p>因为解密时有对N取模操作，因此加密的明文不能大于N。</p>\n<p><strong>攻击方式</strong></p>\n<ul>\n<li>破解密文 -&gt; 求解离散对数很难</li>\n<li>暴力破解D -&gt; 比特位太长，很难破解</li>\n<li>通过E求解D，只要知道p和q就能算出D -&gt; 不知道p和q的组合 -&gt; <strong>对N质因数分解很难</strong></li>\n</ul>\n<p><strong>中间人攻击</strong>里，攻击者可以替换掉原本的公钥，发送给接收者，使用自己的私钥解密，从而实现攻击。这时需要<strong>证书</strong>保证公钥的权威性。</p>\n<p><strong>选择密文攻击</strong>里，攻击者可以利用服务端返回的错误消息收集加密算法信息。RSA-OAEP会在明文开头加上明文散列值和填充位，解密时发现散列值和内容对不上时，会隐藏错误信息。</p>\n<p>除了RSA外，还有ElGamal方式、Robin方式、ECC（椭圆曲线密码）等公钥密码。它们分别利用了mod N下求离散对数，mod N下求平方根，和椭圆曲线上做乘法运算逆运算在数学上很难求解的特点。</p>\n<h3 id=\"FAQ\"><a href=\"#FAQ\" class=\"headerlink\" title=\"FAQ\"></a>FAQ</h3><p>Q: 和对称密码的强度对比<br>A: 达到同等强度，RSA大致需要密钥是AES长度的20倍</p>\n<p>Q: RSA使用的质数会用完么<br>A: 512bit的质数数目大约是10 ^ 150。足够使用。</p>\n<p>Q: RSA破解难度如何？<br>A: 和大整数质因数分解一样难度</p>\n<p>Q: 要保证RSA强度，N的长度要达到多少位<br>A: 2048bit，4096bit更好</p>\n<h2 id=\"混合密码系统\"><a href=\"#混合密码系统\" class=\"headerlink\" title=\"混合密码系统\"></a>混合密码系统</h2><ul>\n<li>用对称密码加密明文</li>\n<li>用公钥密码加密上述对称密码的密钥（通常用随机数生成器得到，只用于此次会话）</li>\n<li>公钥密码的密钥由外部赋予（证书）</li>\n</ul>\n<p>密码软件PGP、HTTPS中使用的SSL&#x2F;TLS就使用了混合密码系统。当然它们还包含数字签名、认证、私钥管理等更多处理。</p>\n<p>类似混合密码系统，后面要介绍的数字签名、证书、消息认证、伪随机数生成也都是<strong>基础密码技术的组合</strong>。</p>\n<h2 id=\"单向散列函数\"><a href=\"#单向散列函数\" class=\"headerlink\" title=\"单向散列函数\"></a>单向散列函数</h2><ul>\n<li>将任意长度的消息转换到<strong>固定长度</strong>散列</li>\n<li>具有抗碰撞性，即找到具有相同散列函数的消息很困难</li>\n<li>单向性，即无法从三列中还原原信息</li>\n</ul>\n<h3 id=\"MD4、MD5\"><a href=\"#MD4、MD5\" class=\"headerlink\" title=\"MD4、MD5\"></a>MD4、MD5</h3><p>全称Message Digest。由Rivest设计于1990和1991年。能够产生<strong>128bit</strong>的散列值。它们的强抗碰撞性已被攻破，<strong>不建议使用</strong>。</p>\n<h3 id=\"RIPEMD-160\"><a href=\"#RIPEMD-160\" class=\"headerlink\" title=\"RIPEMD-160\"></a>RIPEMD-160</h3><p>1996年设计，是欧盟RIPE项目的修订版，能产生160bit长度的散列值。比特币中使用的散列函数就是RIPEMD-160。</p>\n<h3 id=\"SHA\"><a href=\"#SHA\" class=\"headerlink\" title=\"SHA\"></a>SHA</h3><p>SHA于1993年由NIST设计，在1995年发布了SHA-1修订版，能够产生<strong>160bit</strong>的散列值。它的强抗碰撞性已被攻破，<strong>也不建议使用</strong>。</p>\n<p>SHA-2于2002年发布，它是包括SHA-256，SHA-384和SHA-512的集合，分别产生<strong>256、384和512bit</strong>的散列值。目前未被攻破。SHA-2的几种散列长度来自SHA-256和SHA-512的组合。</p>\n<p>SHA-3作为SHA-1的升级替代算法，和AES一样，由NIST公开选拔，并在2012年确定为一个叫<strong>Keccak</strong>的算法。之后会和SHA-2并存一段时间。</p>\n<h3 id=\"Keccak\"><a href=\"#Keccak\" class=\"headerlink\" title=\"Keccak\"></a>Keccak</h3><p>Keccak可以输入<strong>任意长度</strong>的数据，产生<strong>任意长度</strong>的散列值。实现上，Keccak采用海绵结构，有<strong>吸收</strong>和<strong>挤出</strong>两阶段。</p>\n<ul>\n<li>吸收阶段，按分组长度r逐段读入消息内容，和内部状态做异或运算，之后和长度为c的内部状态一起交给函数f做“搅拌”。完成一轮处理，输出作为内部状态继读入输入的消息分组。</li>\n<li>挤出阶段，内部消息r和c逐段和函数f做运算，一段段输出散列值。</li>\n</ul>\n<p>Keccak的双工结构下，输入和输出可以同时进行。Keccak内部状态由5 * 5 * z的一个三维比特数组组成，共有b个bit。Keccak的本质就是实现一个充分搅拌上述数组的函数f。SHA-3中使用的是Keccak-f[1600]函数。其中b就是内部状态的bit数。函数的每一轮包含θ、ρ、π、χ、ι5步。循环轮数为12 + 2 * log2(b &#x2F; 25)。</p>\n<ul>\n<li>θ，将不同两个column的各5个bit通过异或运算加起来，再和当前位做异或替换</li>\n<li>ρ，各比特沿z轴方向进行平移</li>\n<li>π，对一个slice上的5 * 5个比特做旋转、轮换操作</li>\n<li>χ，对一个row上的各位做某个逻辑运算</li>\n<li>ι，用某个轮常数对所有比特做异或运算，避免对称性</li>\n</ul>\n<p>Keccak采用的海绵结构和此前各散列算法使用的MD结构（循环执行压缩函数）方法截然不同，这也是它最后成为标准的一个原因。目前还未出现针对Keccak的有效攻击手段。</p>\n<h3 id=\"攻击方式\"><a href=\"#攻击方式\" class=\"headerlink\" title=\"攻击方式\"></a>攻击方式</h3><p>利用文件的冗余性，构造<strong>一大堆</strong>和想要内容一样的数据，找到和原内容散列值一样的结果。</p>\n<ul>\n<li>原像攻击，给定散列值，找到具有该散列值的任意消息</li>\n<li>第二原像攻击，给定消息1，找到和消息1有相同散列值的消息2</li>\n<li>生日攻击，攻击散列算法的“强抗碰撞性”（寻找两个具有相同散列值的消息），利用了从有N个元素的集合中依次取并放回M个元素，两次取到同一元素的概率约为根号N的特点。大大减少暴力破解需要的次数。</li>\n</ul>\n<h2 id=\"消息认证\"><a href=\"#消息认证\" class=\"headerlink\" title=\"消息认证\"></a>消息认证</h2><p>可以同时防止消息的伪装和篡改。消息认证码简称MAC（Message Authentication Code）。可以简单理解成<strong>需要密钥参与的单向散列过程</strong>。在使用时：</p>\n<ul>\n<li>发送者伴随消息发送计算出的MAC</li>\n<li>接受者对消息通过共享密钥计算出MAC值，进行对比，一致则表示认证成功</li>\n<li><strong>这个密钥不能被中间人获取！</strong></li>\n</ul>\n<p>使用消息认证码（MAC）机制的场景有：</p>\n<ul>\n<li>SWIFT</li>\n<li>IPSec</li>\n<li>SSL&#x2F;TLS</li>\n</ul>\n<p>在认证加密时，Encrypt-then-MAC表示对密文计算MAC值，从而能判断密文是由知道明文和密钥的人生成的。除了Encrypt-then-MAC外，还有Encrypt-and-MAC和MAC-then-Encrypt两种方式。</p>\n<h3 id=\"HMAC\"><a href=\"#HMAC\" class=\"headerlink\" title=\"HMAC\"></a>HMAC</h3><p>HMAC即Hash MAC，是使用单向散列函数构造认证码的方法。分为下面几步：</p>\n<ol>\n<li>在密钥后填充0到长度达到单向散列函数的分组长度</li>\n<li>填充后的密钥和ipad序列做XOR运算，ipad序列是00110110为单位循环的比特序列</li>\n<li>组合在消息<strong>头部</strong>，并计算出散列值</li>\n<li>填充后的密钥和opad做XOR运算，opad是01011100位单位循环的比特序列</li>\n<li>结果拼在散列值<strong>后面</strong></li>\n<li>根据5的结果计算最终的散列值</li>\n</ol>\n<h3 id=\"应对攻击方式\"><a href=\"#应对攻击方式\" class=\"headerlink\" title=\"应对攻击方式\"></a>应对攻击方式</h3><ul>\n<li>消息认证需要解决<strong>重放攻击</strong>的问题，即再次发送相同的消息和MAC值。可以在消息中额外带上序号、时间戳，或先发送一个nonce一次性随机数保证相同的消息也会有完全不同的MAC值。</li>\n<li><strong>密钥推测攻击</strong>，应保证不能根据MAC值推测出双方使用的密钥，必须使用安全、高强度的伪随机数生成器。</li>\n</ul>\n<p>另外，消息认证无法解决下面的问题：</p>\n<ul>\n<li>向第三方证明，密钥的共享只在通信的双方，无法证明给第三方</li>\n<li>同样的，不能防止通信的一方<strong>否认</strong>消息</li>\n</ul>\n<h2 id=\"数字签名\"><a href=\"#数字签名\" class=\"headerlink\" title=\"数字签名\"></a>数字签名</h2><p>和公钥密码<strong>相反</strong>的使用方式：</p>\n<ul>\n<li>发布者使用私钥加密消息，私钥保密</li>\n<li>使用发布者的公钥可以解密消息，公钥公开</li>\n</ul>\n<p>签名有两种方式：<strong>对消息签名</strong>和<strong>对消息的散列值签名</strong>。它们主要区别在签名的对象不同。基本过程是：</p>\n<ol>\n<li>生成公、私钥对，发送公钥给接收者</li>\n<li>使用私钥加密消息&#x2F;消息的hash值，得到签名</li>\n<li>发送消息和签名给接收者</li>\n<li>接收者使用公钥解密，对比消息&#x2F;消息hash值，验证发送者身份</li>\n</ol>\n<p>在签名中，密钥只是起着“保证消息发送者的可靠来源目的的”，被复制并不影响它发挥作用。同时，由于不知道私钥，修改消息后无法伪造消息的签名。</p>\n<p>实际应用数字签名的地方有很多：</p>\n<ul>\n<li>安全信息公告</li>\n<li>软件下载</li>\n<li>公钥证书，确保公钥的合法来源</li>\n<li>SSL&#x2F;TLS，交换公钥的过程</li>\n</ul>\n<p>数字签名基于公钥密码，因此数字签名的实现方式因采用的公钥密码而异，如RSA、ElGamal、ECDSA（椭圆曲线密码）。对数字签名的攻击可以基于单向散列函数或是公钥密码。</p>\n<ul>\n<li><strong>不要对不清楚来源的数据做数字签名</strong></li>\n<li><strong>对消息的散列值函数做数字签名</strong></li>\n</ul>\n<p>数字签名无法解决<strong>验证签名正确性的公钥被伪造</strong>的问题，因为公钥正确性也依赖于数字签名技术。这里需要<strong>证书</strong>以及<strong>公钥基础设施PKI</strong>这种社会学的基础设施辅助。</p>\n<h2 id=\"证书\"><a href=\"#证书\" class=\"headerlink\" title=\"证书\"></a>证书</h2><p>证书即<strong>公钥证书</strong>，用来验证公钥密码和数字签名的公钥，由认证机构（CA）发布，认证机构可以是政府机关、一般企业或个人。证书的发布过程包括：</p>\n<ol>\n<li>申请人生成一对密钥，并把公钥发送给CA</li>\n<li>CA验证申请人身份</li>\n<li>通过验证后，CA使用自己的私钥对公钥施加数字签名并生成证书</li>\n<li>使用申请人证书的使用者通过CA的公钥验证申请人的公钥是否合法</li>\n<li>验证通过后，使用公钥完成公钥密码或数字签名</li>\n</ol>\n<p>PKI是为了能够更有效运用公钥制定的一系列规范的总称。PKI组成要素有3个：使用PKI的用户、认证机构、仓库。</p>\n<ul>\n<li>用户，分为注册公钥的用户和使用注册公钥的用户</li>\n<li>CA，包括生成密钥、验证本人身份、验证公钥合法性、作废证书</li>\n<li>仓库，是保存证书的数据库</li>\n</ul>\n<p>其中认证机构做了以下事情：</p>\n<ul>\n<li><strong>生成密钥对</strong>，可以由用户或是CA生成，若是CA生成，需要根据规范发送私钥给用户</li>\n<li><strong>注册证书</strong>，用户根据规范申请证书，认证机构根据业务准则生成符合X.509规范的证书</li>\n<li><strong>作废证书</strong>，因为私钥丢失等原因需要作废证书时，需要认证机构制作CRL（Certificate Revocation List，证书作废清单），PKI用户总需要从CA获取最新的CRL，以确认自己拿到的公钥证书是否有效。</li>\n</ul>\n<p><strong>认证机构的证书认证</strong></p>\n<p>认证机构的公钥证书可以由其他的认证机构施加数字签名。这个关系可以嵌套很多层，比如部门认证机构、分公司认证机构、总公司认证机构。一直往上直到根CA，可以对自己的公钥做自签名。</p>\n<p>从而，在验证证书合法性上，也会出现<strong>从上至下</strong>的验证过程。</p>\n<h3 id=\"证书的攻击\"><a href=\"#证书的攻击\" class=\"headerlink\" title=\"证书的攻击\"></a>证书的攻击</h3><p>对证书的攻击即对数字签名的攻击。</p>\n<ul>\n<li>对施加数字签名前的公钥攻击</li>\n<li>注册相似人名进行攻击</li>\n<li>窃取CA的私钥</li>\n<li>伪装成CA发放证书进行攻击，认证机构本身的可信度也很重要</li>\n<li>利用发送CRL的时间间隔，窃取了使用者的私钥，当使用者联系CA发布CRL时，有一定的时间间隔</li>\n<li>同样利用CRL，使用合法私钥发送消息后，发送CRL作废自己的公钥，<strong>否认</strong>自己之前发送的消息</li>\n</ul>\n<p><strong>不可能在完全不可信的状态下创建出信任关系，除非以已经存在的信任关系为基础。</strong></p>\n<h2 id=\"密钥\"><a href=\"#密钥\" class=\"headerlink\" title=\"密钥\"></a>密钥</h2><ul>\n<li><p>密钥长度（DES：56bit，三重DES：112bit或168bit，AES：128、192、256bit</p>\n</li>\n<li><p>对称密码和公钥密码<strong>用于确保机密性</strong>，消息认证码和数字签名使用的密码<strong>用于认证，防止篡改内容和伪装身份</strong></p>\n</li>\n<li><p>只使用一次的密钥称为<strong>会话密钥</strong>，重复使用的密钥称为<strong>主密钥</strong>。</p>\n</li>\n<li><p><strong>密码学用途的随机数生成器必须为密码学用途专门设计</strong></p>\n</li>\n<li><p>定期改变会话密钥可以减少密钥泄露的损失</p>\n</li>\n<li><p>保存密钥时，使用KEK（Key Encrypting Key）方式保存密钥可以减少管理密钥的数目。</p>\n</li>\n</ul>\n<h3 id=\"Diffie-Hellman密钥交换\"><a href=\"#Diffie-Hellman密钥交换\" class=\"headerlink\" title=\"Diffie-Hellman密钥交换\"></a>Diffie-Hellman密钥交换</h3><p>Diffie-Hellman密钥交换里，通信的双方通过交换一些可以公开的消息，就能够生成共享的密钥。</p>\n<ol>\n<li>确定一个非常大的质数P，寻找P的生成元（原根）G</li>\n<li>通信双方各自找1个1 ~ P-2的随机数A、B，生成G ^ A mod P与G ^ B mod P，发送给对方</li>\n<li>对方用收到的数字根据自己选的随机数做乘方运算，得到相等的值作为密钥</li>\n</ol>\n<p>它同样利用了离散对数问题难以快速求解的特点。这种交换方法可以做中间人攻击，可以用数字签名、证书等方式应对。</p>\n<h3 id=\"基于口令的密码（PBE）\"><a href=\"#基于口令的密码（PBE）\" class=\"headerlink\" title=\"基于口令的密码（PBE）\"></a>基于口令的密码（PBE）</h3><p>基于口令的密码避免了：记忆CEK -&gt; 记忆KEK -&gt; 记忆KEK的KEK的死循环。使用好记忆的口令配合盐生成CEK。使用过程如下：</p>\n<ol>\n<li>使用随机数生成器生成盐（随机数），加上用户口令，使用单向散列函数得到KEK</li>\n<li>使用KEK加密会话使用的CEK</li>\n<li>保存好盐以及使用KEK加密的会话秘钥</li>\n</ol>\n<ul>\n<li>盐的目的是避免字典攻击</li>\n<li>口令虽然便于生成，但是强度不高，因此需要格外地小心保管</li>\n<li>可以对KEK迭代使用单向散列函数得到最后的KEK（拉伸），这将加大攻击者的攻击负担</li>\n</ul>\n<h3 id=\"生成安全的口令\"><a href=\"#生成安全的口令\" class=\"headerlink\" title=\"生成安全的口令\"></a>生成安全的口令</h3><ul>\n<li>使用<strong>只有自己</strong>知道的信息<ul>\n<li>不包括别人见过的信息</li>\n<li>不包括可以很容易推测的信息</li>\n</ul>\n</li>\n<li>不应该重复使用口令，容易受牵连影响</li>\n<li>物理保存是可以的，但要注意安全</li>\n<li>可以使用口令生成和管理工具（比如1Password）</li>\n</ul>\n<h2 id=\"随机数生成\"><a href=\"#随机数生成\" class=\"headerlink\" title=\"随机数生成\"></a>随机数生成</h2><p>随机数生成在密码学中很常用：</p>\n<ul>\n<li>生成密钥</li>\n<li>生成分组密码的初始化向量</li>\n<li>生成CTR模式的nonce</li>\n<li>生成盐</li>\n</ul>\n<p>随机数至少需要具有下面的属性：</p>\n<ul>\n<li>随机等概性</li>\n<li>无状态，即无法从上一个推测下一个，生成序列无法重现</li>\n</ul>\n<p>由于计算机构成的抽象世界是<strong>离散的</strong>，内部状态有限，不能满足无状态的特点，因此只能称作<strong>伪随机数生成器</strong>。基于计算机硬件的随机数生成器可以认为是“真”随机数，它通常提前储存在一个随机数池中，在需要的时候直接从池中取用。伪随机数生成器根据随机的种子（seed）通过算法将内部状态转化为最终的随机数。</p>\n<ul>\n<li><strong>线性同余法</strong>，以当前随机数为内部状态（初始值为种子），(A x Rn + C) mod M，计算下一个值。其中A、C、M都需要事先选好，线性同余法生成的随机数数列具有可预测性，即不需要知道种子也可以推测下随机数值</li>\n<li><strong>单向散列函数</strong>，利用单向散列函数保护内部状态，以种子为初始值，逐次递加得到新的内部状态，再通过单向散列函数输出为随机数</li>\n<li><strong>密码法</strong>，类似单向散列函数，使用密钥加密内部状态输出也可以作为随机数，此时保护内部状态的加密算法和密钥</li>\n<li><strong>ANSI X9.17</strong>中，使用AES和三重DES作为密码算法<ol>\n<li>初始化内部状态</li>\n<li>使用当前时间生成掩码</li>\n<li>掩码和内部状态做XOR</li>\n<li>加密3的输出，作为随机数输出</li>\n<li>对加密后的输出与掩码做XOR</li>\n<li>加密5的结果作为新的内部状态</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"PGP介绍\"><a href=\"#PGP介绍\" class=\"headerlink\" title=\"PGP介绍\"></a>PGP介绍</h2><p>PGP全程Pretty Good Privacy，编写于1990年，具备现代密码软件所需的几乎所有功能。OpenPGP是一对密文和数字签名进行定义的标准规格。</p>\n<h3 id=\"加密和解密\"><a href=\"#加密和解密\" class=\"headerlink\" title=\"加密和解密\"></a>加密和解密</h3><p>加密时，使用混合密码系统的流程：</p>\n<ol>\n<li>用伪随机数生成会话密钥</li>\n<li>用<strong>接收者</strong>的公钥加密会话密钥</li>\n<li>压缩消息，并使用对称密码加密，密钥为上面生成的会话密钥</li>\n<li>将加密后的密钥和密文拼接在一起</li>\n<li>将4的结果转换为文本数据，即为报文数据</li>\n</ol>\n<p>解密时，PGP的私钥通过用户口令加密保存。在收到密文时：</p>\n<ol>\n<li>输入接收者的口令</li>\n<li>求口令的散列值，生成用户解密私钥的秘钥</li>\n<li>解密得到私钥</li>\n<li>将报文数据转换为二进制，并拆解成加密的会话密钥和压缩的密文</li>\n<li>用自己的私钥解密得到会话密钥</li>\n<li>用会话密钥解密密文</li>\n<li>解压缩明文得到原始消息</li>\n</ol>\n<h3 id=\"生成数字签名\"><a href=\"#生成数字签名\" class=\"headerlink\" title=\"生成数字签名\"></a>生成数字签名</h3><p>同样，生成数字签名时：</p>\n<ol>\n<li>输入接收者的口令</li>\n<li>求口令的散列值，生成用户解密私钥的秘钥</li>\n<li>解密得到私钥</li>\n<li>使用单向散列函数计算消息散列值</li>\n<li>对散列值签名，即使用私钥加密</li>\n<li>拼合签名和消息，进行压缩</li>\n<li><em>（可选）</em>转换二进制为文本数据，即最后的报文数据</li>\n</ol>\n<p>类似地，验证时：</p>\n<ol>\n<li>转换为二进制文件，解压缩数据</li>\n<li>分解出签名和消息两部分</li>\n<li>使用公钥解密签名，得到散列值</li>\n<li>使用单向散列函数计算消息散列值，对比3中的散列值</li>\n<li>相等即验证成功</li>\n</ol>\n<h3 id=\"生成数字签名并加密\"><a href=\"#生成数字签名并加密\" class=\"headerlink\" title=\"生成数字签名并加密\"></a>生成数字签名并加密</h3><p>实际情况下，我们往往需要使用加密算法加密数字签名中的原消息。实现步骤是上两节的组合。即先进行数字签名，再对签名结果加密。</p>\n<p>验证过程是相反的，先解密密文得到签名结果，再验证数字签名。</p>\n<h3 id=\"信任网\"><a href=\"#信任网\" class=\"headerlink\" title=\"信任网\"></a>信任网</h3><p>PGP确认公钥合法性的方法不依赖于认证机构颁发证书，而是采用所有者信任级别构成信任网（也叫信任圈、朋友圈）的方式，让用户自己决定该信任谁。建立信任有三种方式：</p>\n<ul>\n<li>通过自己的签名来确认。用户在通过其他方式（比如线下）确认公钥可信任后，对该公钥加上自己的数字签名。由于PGP中，使用者本人的公钥是绝对信任，被施加签名的公钥因此可信任。<em>注意：这并不代表被施加签名的公钥所有者被<strong>完全</strong>信任</em></li>\n<li>通过自己完全信任的数字签名进行确认。即<strong>完全信任</strong>某个公钥进行的数字签名，用户可对当前信任的每个公钥所有者设置信任级别，级别为<strong>完全信任</strong>时，所有者公钥施加签名的公钥也会被信任。</li>\n<li>通过有限信任的多个数字签名进行确认。在设置信任级别为<strong>有限信任</strong>时，有限信任的公钥<strong>都</strong>施加数字签名后，新的公钥才会被信任。</li>\n</ul>\n<p>通过上面三种方式，PGP使用者可以构建起自己的信任网，从而根据自己的决定信任某个公钥。</p>\n<h2 id=\"SSL-x2F-TLS\"><a href=\"#SSL-x2F-TLS\" class=\"headerlink\" title=\"SSL&#x2F;TLS\"></a>SSL&#x2F;TLS</h2><p>TLS是SSL的后续版本，但在大多数情况下，可以统一写成SSL&#x2F;TLS。<strong>SSL&#x2F;TLS可以承载应用层协议，保证应用层传输的安全性，HTTP就是其中一种</strong>。其余SSL&#x2F;TLS可以承载的应用层协议还包括SMTP、POP3等等。</p>\n<p>SSL于1994年在网景公司开发，在1995年发布了SSL3.0版本，后被发现会导致POODLE攻击。TLS是IETF在1999年作为SSL3.1发布。2006年发布TLS1.1，之后又发布了TLS1.2。</p>\n<p>HTTPS中SSL&#x2F;TLS要保证以下三点：</p>\n<ul>\n<li>保证消息传输中<strong>不被窃听</strong> -&gt; <strong>对称密码</strong>加密消息，<strong>公钥密码</strong>加密对称密码的密钥</li>\n<li>保证消息传输中<strong>不被篡改</strong> -&gt; <strong>消息认证</strong>码</li>\n<li>保证消息传输<strong>双方的合法性</strong> -&gt; <strong>数字签名</strong>生成证书</li>\n</ul>\n<h3 id=\"通信过程\"><a href=\"#通信过程\" class=\"headerlink\" title=\"通信过程\"></a>通信过程</h3><p>下面的流程以TLS1.2为例。TLS协议分为两层：</p>\n<ul>\n<li><strong>TLS握手协议</strong>，位于上层，处理除加密的部分。可以进一步分为：<ul>\n<li><strong>握手协议</strong>，负责在客户端和服务器间协商密码算法和共享密钥</li>\n<li><strong>密码规格变更协议</strong>，向通信对象传达变更密码方式</li>\n<li><strong>警告协议</strong>，在发生错误时将错误传达给对方</li>\n<li><strong>应用数据协议</strong>，将TLS上承载的应用数据传达给通信对象</li>\n</ul>\n</li>\n<li><strong>TLS记录协议</strong>，位于底层，处理加密的部分。使用了对称密码和消息认证码，但具体的算法和密钥需要通信双方具体协商</li>\n</ul>\n<h3 id=\"TLS记录协议\"><a href=\"#TLS记录协议\" class=\"headerlink\" title=\"TLS记录协议\"></a>TLS记录协议</h3><p>记录协议负责数据的压缩、加密、数据认证，工作方式如下：</p>\n<ol>\n<li>分割消息为较小的片段，再分段压缩，<strong>压缩方式需要协商决定</strong></li>\n<li>对压缩过的消息进行消息认证，加上MAC值。为了避免重放攻击，在计算MAC值时，加上了片段的编号。其中的<strong>单向散列函数的算法、使用的密钥都需要协商确定</strong></li>\n<li>把MAC值和压缩过的消息片段组合在一起，使用对称密码加密。迭代模式使用CBC模式，CBC模式的初始化向量通过主密码生成。<strong>对称密码的算法、密钥则需要协商决定</strong></li>\n<li>上述经过加密的数据，再加上<strong>数据类型、版本号、压缩后的长度</strong>，构成最终的报文数据。数据类型就是之前提到的TLS握手协议的4类子协议</li>\n</ol>\n<h3 id=\"握手协议\"><a href=\"#握手协议\" class=\"headerlink\" title=\"握手协议\"></a>握手协议</h3><p>握手协议负责生成对称密码中的共享密钥以及交换证书。因为握手的整个过程都是明文进行的，因此需要使用公钥密码或是Diffie-Hellman密钥交换。整个握手协议有下面几步：</p>\n<ol>\n<li><strong>ClientHello</strong>，客户端发送一些信息给服务器，便于协商算法和密钥</li>\n</ol>\n<ul>\n<li>可用版本号，即支持的SSL&#x2F;TLS版本号</li>\n<li>客户端生成的随机数，在后面的步骤会用到</li>\n<li>会话ID，在需要重新使用以前的会话时用到</li>\n<li>客户端可用的密码套件清单</li>\n<li>客户端可用的压缩方式清单</li>\n<li>当前时间</li>\n</ul>\n<ol start=\"2\">\n<li><strong>ServerHello</strong>，服务器根据客户端传来的信息，选择合适的算法和密码套件，返回的消息中带有下面几条</li>\n</ol>\n<ul>\n<li>使用的版本号</li>\n<li>服务端生成的随机数，后面步骤会用到</li>\n<li>会话ID，作用同上</li>\n<li>使用的密码套件</li>\n<li>使用的压缩方式</li>\n<li>当前时间</li>\n</ul>\n<ol start=\"3\">\n<li><strong>Certificate</strong>，<strong>非匿名通信</strong>时，服务器发送自己的证书，以及对服务器证书签名的CA的证书</li>\n<li><strong>ServerKeyExchange</strong>，当Certificate消息不足时，服务器通过此消息传递额外信息</li>\n<li><strong>CertificateRequest</strong>，需要进行<strong>客户端认证</strong>时，服务端发送此消息，并带上服务器能理解的证书类型、CA名称清单。</li>\n<li><strong>ServerHelloDone</strong>，服务器发送此消息结束服务器的返回</li>\n<li><strong>Certificate</strong>，作为CertificateRequest的回应，客户端发送自己的证书，交给服务器验证</li>\n<li><strong>ClientKeyExchange</strong>，密码套件包含RSA时，会发送<strong>经过服务器公钥加密的预备主密码</strong>；密码套件包含Diffie-Hellman密钥交换时，会发送Diffie-Hellman密钥交换中的公开值。<strong>预备主密码（pre-master secret）</strong>是客户端生成的随机数，之后会用做生成主密码的种子。根据预备主密码，通信双方计算出<strong>相同的主密码</strong>。主密码会用做以下用途：</li>\n</ol>\n<ul>\n<li>对称密码的密钥</li>\n<li>消息认证码的密钥</li>\n<li>CBC模式中的初始化向量</li>\n</ul>\n<ol start=\"9\">\n<li><strong>CertificateVerify</strong>，在服务器发送CertificateRequest时，通过此消息发送客户端使用自己私钥签名的主密码和握手协议传输消息的散列值。证明自己是客户端证书的持有人。</li>\n<li><strong>ChangeCipherSpec</strong>，客户端发送，表示切换密码开始，实际上是密码规格变更协议的一类报文</li>\n<li><strong>Finished</strong>，握手结束，此时已使用切换后的密码套件来加密发送。</li>\n<li><strong>ChangeCipherSpec</strong>，<strong>Finished</strong>。来自服务器，作用同上。</li>\n</ol>\n<p>通过上面的步骤，双方达成了下面的目标：</p>\n<ul>\n<li>客户端获得了服务器的公钥，完成了服务器认证</li>\n<li>服务器获得了客户端公钥，完成了客户端认证（如果需要的话）</li>\n<li>生成了对称密码的密钥</li>\n<li>生成了消息认证码中的共享密钥</li>\n</ul>\n<h3 id=\"密码规格变更协议\"><a href=\"#密码规格变更协议\" class=\"headerlink\" title=\"密码规格变更协议\"></a>密码规格变更协议</h3><p>用于在一开始从明文通信切换到使用密码套件沟通。</p>\n<h3 id=\"警告协议\"><a href=\"#警告协议\" class=\"headerlink\" title=\"警告协议\"></a>警告协议</h3><p>用在握手协议异常、消息认证码错误、无法解压数据等异常情况。</p>\n<h3 id=\"应用数据协议\"><a href=\"#应用数据协议\" class=\"headerlink\" title=\"应用数据协议\"></a>应用数据协议</h3><p>通信对象间传递应用数据。</p>\n<h3 id=\"主密码\"><a href=\"#主密码\" class=\"headerlink\" title=\"主密码\"></a>主密码</h3><p>主密码根据预备主密码（pre-master secret）或Diffie-Hellman密钥交换的公开值生成。生成的主密码用于生成<strong>对称密码的密钥、消息认证码的密钥、CBC模式的初始化向量</strong>。</p>\n<h3 id=\"对SSL-x2F-TLS的攻击\"><a href=\"#对SSL-x2F-TLS的攻击\" class=\"headerlink\" title=\"对SSL&#x2F;TLS的攻击\"></a>对SSL&#x2F;TLS的攻击</h3><ul>\n<li>SSL&#x2F;TLS框架性的特点让它不依赖于某个特定的密码技术，因此对特定密码技术的攻击对SSL&#x2F;TLS本身影响不大</li>\n<li>心脏出血漏洞，发现于2014年，利用TLS心跳拓展对请求的数据大小没有检查，可以获取内存中与请求无关的信息。是OpenSSL实现的漏洞。</li>\n<li>POODLE攻击，利用CBC中的填充提示攻击，发现于2014年SSL3.0中。</li>\n<li>FREAK攻击，可以在密码套件协商时，利用中间人攻击，强制使用强度很低的RSA Export Suites。从而在加密后，暴力破解明文。</li>\n<li>对伪随机数生成器的攻击</li>\n<li>利用之前提过的CRL</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>密码技术因为人类的不完美而必定不会完美。</p>\n<ul>\n<li><strong>对称密码</strong>，使用相同密钥加密、解密，保证消息<strong>机密性</strong>。目前主要使用AES。</li>\n<li><strong>公钥密码</strong>，使用不同密钥加密、解密，作用同上。使用最广泛的是RSA，还有相关的Diffie-Hellman密钥交换</li>\n<li><strong>单向散列函数</strong>，将消息转为固定长度散列值的技术，保证消息<strong>完整性</strong>，目前使用SHA2和SHA3（Keccak）</li>\n<li><strong>消息认证码</strong>，结合单向散列函数和对称密码，保证消息<strong>完整性</strong>并<strong>认证消息</strong>，但无法防御<strong>否认</strong>。目前主要使用HMAC</li>\n<li><strong>数字签名</strong>，结合单向散列函数和公钥秘钥，保证<strong>完整性</strong>，<strong>不可否认性</strong>和<strong>认证消息</strong>。是公钥证书采用的技术</li>\n<li><strong>伪随机数生成器</strong>，配合上述技术使用，需要保证<strong>不可预测性</strong>和<strong>不可重现性</strong></li>\n</ul>\n<p>密码技术从某种角度看是一种压缩技术：</p>\n<ul>\n<li>密钥是机密性的压缩</li>\n<li>散列值是消息完整性的压缩</li>\n<li>认证值时认证的压缩</li>\n<li>随机数种子是不可预测性的压缩</li>\n</ul>\n<h3 id=\"比特币\"><a href=\"#比特币\" class=\"headerlink\" title=\"比特币\"></a>比特币</h3><p>比特币来自于Satoshi Nakamoto（中本聪，化名）的一篇论文，并于2009年开始实际运用。比特币是一种<strong>基于P2P网络的支付结算系统</strong>。用户通过它进行进行价值转移。</p>\n<ul>\n<li><strong>地址</strong>，将公钥使用散列函数求散列值得到，地址都以1开头，剩下内容 不包含O，0,1和I。</li>\n<li><strong>钱包</strong>，即比特币客户端，可以生成密钥对，公钥用于收款，密钥用于付款</li>\n<li><strong>区块链</strong>，保存了比特币所有交易记录的账簿，若干交易组成一个区块，在区块头有所有交易的散列值，以及上一个区块的散列值，有交易添加时会触发区块头的散列值变化，并链式传递下去</li>\n<li><strong>交易</strong>，收、付款方各自生成密钥对，付款方创建交易“地址A向地址B转账x BTC”，<strong>并用自己的私钥签署数字签名</strong>，之后广播至P2P网络中，完成交易。比特币使用的数字签名基于椭圆曲线DSA，方程为x^2 &#x3D; y^3 + 7</li>\n<li><strong>挖矿</strong>，向区块链中添加新区块的行为被称为挖矿，第一个挖矿成功的矿工会获得挖矿奖励和区块所有交易的手续费。为了证明自己确实完成了规定工作，矿工需要进行<strong>工作量证明</strong>（PoW），即生成的区块头中，前一区块头的散列值必须以若干位的0开头，这个工作需要投入大量的计算资源。区块大约每10分钟添加一个，为了避免通货膨胀，所需的0的个数会不断调整。<ul>\n<li>根据协议规定，挖矿奖励每4年减少一半</li>\n<li>当区块链上同时出现分支时，P2P网络会选择计算量大的分支进行工作</li>\n</ul>\n</li>\n<li>比特币的匿名性只限于交易地址</li>\n</ul>\n<h2 id=\"附录：椭圆曲线\"><a href=\"#附录：椭圆曲线\" class=\"headerlink\" title=\"附录：椭圆曲线\"></a>附录：椭圆曲线</h2><ul>\n<li>椭圆曲线（EC）源自于求椭圆弧长的椭圆积分的反函数。</li>\n<li>定义椭圆曲线上的加法运算</li>\n<li>椭圆曲线上的离散对数（ECDLP） - 已知点G和点xG，求整数x</li>\n<li>有限域上的离散对数，对点进行模运算</li>\n<li>椭圆曲线Diffie-Hellman密钥交换</li>\n<li>椭圆曲线ElGamal密码</li>\n<li>椭圆曲线DSA（ECDSA）</li>\n</ul>\n",
            "tags": [
                "算法",
                "密码",
                "密钥"
            ]
        }
    ]
}