{
    "version": "https://jsonfeed.org/version/1",
    "title": "Shenlvmeng's Blog • All posts by \"创业\" tag",
    "description": "Be sharp, my friend.",
    "home_page_url": "http://shenlvmeng.github.com/blog",
    "items": [
        {
            "id": "http://shenlvmeng.github.com/blog/2017/07/10/hacker-and-artist/",
            "url": "http://shenlvmeng.github.com/blog/2017/07/10/hacker-and-artist/",
            "title": "黑客与画家 —— 关于编程和创业",
            "date_published": "2017-07-10T13:21:02.000Z",
            "content_html": "<p>《黑客与画家》是Paul Graham的博文集。出版于2006年。它从一个“黑客”的角度阐述了编程，互联网程序等时兴的概念。深刻新鲜而发人深省。其对工作、语言的认识别具特色，而在学校教育和贫富分化等方面的认识却略显偏颇。</p>\n<p>全书大致分为3部分</p>\n<ul>\n<li>1-4章解释黑客如何成长以及如何看待世界</li>\n<li>5-9章介绍创业、工作的方法论</li>\n<li>10-15章讨论编程语言的特点和使用方法</li>\n</ul>\n<p>下面仅摘出些句子。个人评注已加粗。</p>\n<h2 id=\"为什么书呆子不受欢迎\"><a href=\"#为什么书呆子不受欢迎\" class=\"headerlink\" title=\"为什么书呆子不受欢迎\"></a>为什么书呆子不受欢迎</h2><ul>\n<li>在人产生良知前，折磨是种娱乐。</li>\n<li>学校的真正目的是把儿童都关在一个地方，以便大人们白天可以腾出手来把事情做完（<strong>哈哈哈</strong>）</li>\n</ul>\n<h2 id=\"黑客与画家\"><a href=\"#黑客与画家\" class=\"headerlink\" title=\"黑客与画家\"></a>黑客与画家</h2><ul>\n<li>编程语言是用来帮助思考程序的，而不是用来表达你已经想好的程序</li>\n<li>大多数黑客不是通过大学课程学会编程的，他们从实践中学习，13岁时就已经自己动手写程序了。</li>\n<li>debug对我来说属于轻松的工作</li>\n<li>软件的部分功能就是解释自身，软件的使用方式最好能符合用户的直觉，源代码应该可以自己解释自己</li>\n<li>程序是写出来给人看的，附带能在机器上运行</li>\n</ul>\n<h2 id=\"不能说的话\"><a href=\"#不能说的话\" class=\"headerlink\" title=\"不能说的话\"></a>不能说的话</h2><ul>\n<li>（流行）第一批的接收者总是带有很强的抱负心，他们有自觉的精英意识，想把自己与普通人区分开来</li>\n<li>流行趋势确立以后，第二接收者就加入进来了，他们接受流行，不是因为想要与众不同，而是害怕与众不同</li>\n<li>与笨蛋辩论，你也会变成笨蛋</li>\n</ul>\n<h2 id=\"良好的坏习惯\"><a href=\"#良好的坏习惯\" class=\"headerlink\" title=\"良好的坏习惯\"></a>良好的坏习惯</h2><ul>\n<li>在我看来，一个人们拥有言论自由和行动自由的社会，往往最有可能采纳最优方案（<strong>真的么？</strong>）</li>\n</ul>\n<h2 id=\"另一条路\"><a href=\"#另一条路\" class=\"headerlink\" title=\"另一条路\"></a>另一条路</h2><ul>\n<li>（互联网程序）不需要为新版本付出额外的费用，或者做额外的准备，甚至可能你都不知道软件已经升级了</li>\n<li>互联网软件则完全不同，修改起来很方便。软件的发布过程可以分解成一系列的渐进式修改（<strong>快步小跑</strong>）</li>\n<li>软件应该做到用户认为它可以做到的事情。但是，你不知道用户到底怎么想</li>\n<li>没有盗版是一种“优势”，但也是一个问题。一定数量的盗版对软件公司时有好处的。因为不管你的软件定价多少，有些用户永远不会购买</li>\n<li>要求用户做得越多，你担的风险就越大</li>\n<li>管理企业其实很简单，只要记住两点就可以了：做出用户喜欢的产品，保证开支小于收入</li>\n<li>从制造简洁的产品开始着手，首先要保证你自己愿意使用。然后，迅速作出1.0版，并不断加以改进</li>\n<li><strong>无论如何，你都要使用自己的软件</strong></li>\n</ul>\n<h2 id=\"如何创造财富\"><a href=\"#如何创造财富\" class=\"headerlink\" title=\"如何创造财富\"></a>如何创造财富</h2><div class=\"tip\">注意：标题不等于“如何致富”</div>\n\n<ul>\n<li>从经济学观点看，你可以把创业想象成一个压缩过程</li>\n<li>如果你想赚100万美元，就不得不忍受相当于100万美元的痛苦。创业公司将你所有的压力压缩到三四年</li>\n<li>通过创造有价值的东西而致富，优势不仅在于它合法，还在于它更简单，因为你只需要做出别人需要的东西就可以了</li>\n<li>金钱不是财富，而只是我们用来转移财富所有权的东西</li>\n<li>公司就是许多人聚在一起创造财富的地方，能够制造更多人们需要的东西</li>\n<li>人们需要的东西就是财富</li>\n<li>上班的日子不如上学的日子有趣，但是有人付钱给你，而不是你付钱给学校</li>\n<li>创造财富是大多数公司盈利的手段</li>\n<li>上班的日子为什么会差别这么大？不要搞糊涂了，你现在已经从顾客变成了仆人</li>\n<li>收入和风险是对称的，所以如果有巨大的获利可能，就必然存在巨大的失败可能。如果你有一个令你感到安全的工作，你是不会致富的</li>\n<li>创业的付出和回报虽然总体上是成比例的，但是在个体上是不成比例的</li>\n<li>只有在快速获得巨大利益的激励下，你才会去挑战那些困难的问题，否则你根本不愿意去碰它们</li>\n</ul>\n<h2 id=\"关注贫富分化\"><a href=\"#关注贫富分化\" class=\"headerlink\" title=\"关注贫富分化\"></a>关注贫富分化</h2><ul>\n<li>进入社会以后，你不能总是靠父母养活，如果你需要什么东西，要么你自己做出来，要么做其他东西与需要的人交换金钱，再用金钱去买你想要的东西</li>\n<li>技术肯定加剧了有技术者与无技术者之间的生产效率差异</li>\n<li>技术在加大收入差距的同时，缩小了大部分的其他差距</li>\n</ul>\n<h2 id=\"防止垃圾邮件的一种方法\"><a href=\"#防止垃圾邮件的一种方法\" class=\"headerlink\" title=\"防止垃圾邮件的一种方法\"></a>防止垃圾邮件的一种方法</h2><ul>\n<li>我对贝叶斯方法寄予厚望，因为它的过滤能力可以随着垃圾邮件一起进化</li>\n</ul>\n<h2 id=\"设计者的品味\"><a href=\"#设计者的品味\" class=\"headerlink\" title=\"设计者的品味\"></a>设计者的品味</h2><ul>\n<li>他想要的学生不仅应该技术过硬，还应当能够使用技术做出优美的产品</li>\n<li>你需要的是咬牙向前冲刺的痛苦，而不是脚被钉子扎破的痛苦。解决难题的痛苦对设计师有好处，但是对付挑剔的客户的痛苦或者对付质量低劣的建材的痛苦就是另外一回事了</li>\n<li>在历史的任何时刻都有一些热点项目，一些团体在这些项目上做出伟大的成绩。如果你远离这些中心，几乎不可能单靠自己就取得伟大成果</li>\n</ul>\n<h2 id=\"编程语言解析\"><a href=\"#编程语言解析\" class=\"headerlink\" title=\"编程语言解析\"></a>编程语言解析</h2><ul>\n<li>程序员的时间要比计算机的时间昂贵得多</li>\n<li>长期使用某种语言，你就会慢慢按照这种语言的思维模式进行思考</li>\n<li>有些人认为编程语言应该防止程序员干蠢事，另一些人则认为程序员应该可以用编程语言干一切他们想干的事（<strong>即静态类型语言和动态类型语言</strong>）</li>\n<li>事实上，有两种程度的面向对象编程：某些语言允许你以这种风格编程，另一些语言则强迫你一定要这样编程</li>\n</ul>\n<h2 id=\"一百年后的编程语言\"><a href=\"#一百年后的编程语言\" class=\"headerlink\" title=\"一百年后的编程语言\"></a>一百年后的编程语言</h2><ul>\n<li>当我说Java不会成功时，我的意思是它和Cobol一样，进化之路已经走到了尽头（<strong>哦？</strong>）</li>\n<li>一种语言的内核设计越小、越干净，它的生命力就越顽强</li>\n<li>（<strong>用足够灵活的语言，聪明的程序员能写多好，笨的程序员就能写多烂</strong>）</li>\n<li>一百年后的程序员最需要的编程语言就是可以让你毫不费力写出程序第一版的编程语言</li>\n</ul>\n<h2 id=\"拒绝平庸\"><a href=\"#拒绝平庸\" class=\"headerlink\" title=\"拒绝平庸\"></a>拒绝平庸</h2><ul>\n<li>Lisp很值得学习。你掌握它之后，会感动它给你带来的极大启发</li>\n<li>大概在1960年，Lisp语言引入了垃圾回收机制。……闭包是20世纪60年代Lisp语言引入的功能……宏也是60年代中期Lisp语言引入的，现在还是一片处女地（这里的“宏”为Lisp中的<code>defmacro</code>）</li>\n<li>这里有一个评估竞争对手的妙招——关注他们的招聘职位</li>\n</ul>\n<h2 id=\"书呆子的复仇\"><a href=\"#书呆子的复仇\" class=\"headerlink\" title=\"书呆子的复仇\"></a>书呆子的复仇</h2><ul>\n<li>符号（Symbol）实际上是一种指针，指向存储在散列表中的字符串</li>\n<li>列表是Lisp的基本数据结构</li>\n<li>让客户感到满意才是你的设计方向。只要赢得用户，其他的事情就会接踵而至</li>\n<li>JavaScript的写法比Lisp和Ruby稍微长一点，因为JavaScript依然区分语句和表达式</li>\n<li>所有这些语言都是图灵等价的</li>\n<li>“任何C或Fortran程序复杂到一定程度之后，都会包含一个临时开发的、只有一半功能的、不完全符合规格的、到处都是bug的、运行速度很慢的Common Lisp实现。”</li>\n<li>想解决一个困难的问题，有三条路：1）使用一种强大的语言，2）为这个难题写一个事实上的解释器，3）你自己变成这个难题的人肉编译器（<strong>翻译过来就是语言本身&#x2F;设计模式&#x2F;问题抽象</strong>）</li>\n</ul>\n<h2 id=\"梦寐以求的编程语言\"><a href=\"#梦寐以求的编程语言\" class=\"headerlink\" title=\"梦寐以求的编程语言\"></a>梦寐以求的编程语言</h2><ul>\n<li>优秀的函数库的重要性将超过语言本身</li>\n<li>就算委员会只有两个人，还是会妨碍“再设计”，典型例子就是软件内部的各个接口有不同的人负责。这时除非两个人都同意改变接口，否则接口就无法改变</li>\n</ul>\n<h2 id=\"设计与研究\"><a href=\"#设计与研究\" class=\"headerlink\" title=\"设计与研究\"></a>设计与研究</h2><ul>\n<li>“用户需要的设计”≠“用户要求的设计”</li>\n<li>设计必须以人为本</li>\n<li>在软件领域，贴近用户的设计思想被归纳为“弱即是强”模式。</li>\n<li>一种功能有限但易于使用的软件可能对用户有更大吸引力</li>\n<li>先做出原型，在逐步加工做出成品，这种方式有利于鼓舞士气，因为它使得你随时都可以看到工作的成效</li>\n</ul>\n",
            "tags": [
                "编程",
                "黑客与画家",
                "创业"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2015/01/14/some-thinking-1/",
            "url": "http://shenlvmeng.github.com/blog/2015/01/14/some-thinking-1/",
            "title": "与师兄之泛谈",
            "date_published": "2015-01-13T16:21:27.000Z",
            "content_html": "<p>近日，和做产品经理的师兄一同返校。聊了许多，顿觉收获颇大，在此以故事的形式一并记之，想到哪儿写到哪儿，以励后进。</p>\n<p>师兄本科写了四年的代码，保研去了经管院，实习先后去过咨询公司，外企，互联网三巨头BAT，也算是对产品和商业模式有了些自己的认识与理解。最后借现在这家创业公司的环境，实践以前之所学。</p>\n<h3 id=\"关于创业\"><a href=\"#关于创业\" class=\"headerlink\" title=\"关于创业\"></a>关于创业</h3><p>创业分五个阶段，第一个阶段，产品由无到有，几个核心成员借由最初的idea，用技术完成一个雏形。这个阶段用技术去证实这个产品是可行的，因此技术占了这个阶段绝大多数工作。产品雏形是它的终点；第二阶段，产品雏形出现以后，团队开始扩张，初创成员开始出现分歧，技术以外的部门诸如融资、营销等会加入团队，这是个不稳定期，需要有“领导”角色的产生和团队内的磨合。一个较为成熟的商业模式在这个阶段形成（注：商业模式的规划是一开始就要做的）。一般，A轮融资发生在这之间，股权的划分也是对团队的考验。成熟的商业产品和商业模型是它的终点；第三阶段，有了融资和统一的产品规划后，将这个商业模式做大，通过烧钱推广产品。这个阶段里，我们会用数据去衡量产品的发展前景，运维、行政等部门又会加入。当用户数出现质的提升时，证明商业模式在社会上可行。这也标志着第三阶段的结束。在这之后，公司一般会迎来B轮融资，以千万起。而大多数公司都倒在第二、三阶段。</p>\n<p>第四阶段，商业模式被证明可行后，在各个维度上推广复制，开辟到不同城市、不同周边领域。利用融资继续扩大规模，一般到此，创业者会获得真正的财政自由；第五阶段，公司继续扩张，迎接IPO。在这两个阶段间遇到的困难会大大小于前三个阶段。</p>\n<p>综上来看，难倒大多数创业者的门槛反而成了团队内的团结统一。的确，扪心自问真正信得过的合作伙伴太少了，剩下的就好好珍惜吧。现在，我就在一家创业公司的第二阶段，面临着产品从雏形到成熟过程，尽管技术团队人很少，暂时也没有一套成熟的工作模式。不过这种创业的氛围恐怕也能让我学到不少。包括和PM的沟通，技术和需求间的取舍等。如果这条路能跟着走下去的话，学到的将是BAT教不了我的。</p>\n<h3 id=\"关于开源软件与商业模式\"><a href=\"#关于开源软件与商业模式\" class=\"headerlink\" title=\"关于开源软件与商业模式\"></a>关于开源软件与商业模式</h3><p>正巧这阵在做一个开源小工具，和同寝的技术一起合作开发。就顺便问起了小团队开源开发需要注意的地方。师兄提到，开源软件并非只有免费公益这么简单，从商业模式角度去考虑，这是推广市场或积累口碑的最好选择。以Symbian和Android为例，后起的Android为何为打败Symbian，开源占了很大一部分原因。可是开源的同时，Google难道就没有收益么？正是因为Google核心的商业模式在其搜索引擎上，Android是自带Google搜索的，这才是它关心的；而且Android的知识产权是Google的，这将给Google隐形的收益。以CSDN为例，里面有许多写技术博客的开发者，在开源自己产品的同时，获得了转发，评论等社会影响力，这笔关注在求职或是发表言论将会发挥到它的作用。</p>\n<p>所以，有时问题换个层面去思考，会得到很有意思的结果。在开发开源产品的时候，从商业模式上去考量，会得到以前从不会想到的一些问题。合理的商业模式将使产品被用户所接受，甚至会给自己带来收益。</p>\n<h3 id=\"关于眼界与技术\"><a href=\"#关于眼界与技术\" class=\"headerlink\" title=\"关于眼界与技术\"></a>关于眼界与技术</h3><p>自然科学，社会科学，人文科学这对于一个大学生来说都是需要的。不同的方面的了解将会使你对问题有不同的认知方式。这也正是综合性大学在学生培养上的天生优势。北邮是所很靠谱的理工科大学，所以培养出的学生严谨有余，而灵活、情怀不足。社科赋予人对社会和人际的了解，人文赋予人对艺术和设计上的了解。在创业型公司里，工作中出现的问题种类会比大公司多，多方面的掌握有时会给我们很大的启示。</p>\n<p>在说到创业时，师兄突然感慨似乎我们都陷入了完全做好准备再出发的怪圈，许多半路出家边走边学的人却提前取得了成功。难道是研究生严谨学术的氛围使得毕业生们都不肯轻易出手么？研究生的两年半里，不要把眼光限得太死，不要抱着技术不放手，要勇敢接受新事物，展示自己的学习能力，接触更多方面的人，这可能是现阶段对我最好的启示。</p>\n<p>而那个开源小项目，可能也得重新思考了。</p>\n",
            "tags": [
                "创业",
                "商业模式",
                "产品"
            ]
        }
    ]
}