<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Shenlvmeng&#39;s Blog • Posts by &#34;golang&#34; tag</title>
        <link>http://shenlvmeng.github.com/blog</link>
        <description>Be sharp, my friend.</description>
        <language>zh-CN</language>
        <pubDate>Tue, 24 Dec 2019 23:03:54 +0800</pubDate>
        <lastBuildDate>Tue, 24 Dec 2019 23:03:54 +0800</lastBuildDate>
        <category>总结</category>
        <category>制度</category>
        <category>道德</category>
        <category>文官</category>
        <category>万历</category>
        <category>明朝</category>
        <category>读书笔记</category>
        <category>展望</category>
        <category>2018</category>
        <category>2019</category>
        <category>flag</category>
        <category>2020</category>
        <category>2021</category>
        <category>2022</category>
        <category>2023</category>
        <category>面试</category>
        <category>前端</category>
        <category>FAQ</category>
        <category>HTML</category>
        <category>CSS</category>
        <category>style guide</category>
        <category>编程</category>
        <category>范式</category>
        <category>设计</category>
        <category>艺术</category>
        <category>质量</category>
        <category>async_hooks</category>
        <category>cls-hooked</category>
        <category>logId</category>
        <category>录音</category>
        <category>getUserMedia</category>
        <category>AudioContext</category>
        <category>PCM</category>
        <category>WAVE</category>
        <category>二叉搜索树</category>
        <category>算法</category>
        <category>回忆</category>
        <category>老朋友</category>
        <category>C</category>
        <category>Hash</category>
        <category>布隆过滤器</category>
        <category>字符串检索</category>
        <category>canvas</category>
        <category>流程图</category>
        <category>d3</category>
        <category>g6</category>
        <category>zrender</category>
        <category>processOn</category>
        <category>SDN</category>
        <category>cbench</category>
        <category>安装说明</category>
        <category>绘图</category>
        <category>动画</category>
        <category>攻略</category>
        <category>流水账</category>
        <category>成都</category>
        <category>重庆</category>
        <category>武汉</category>
        <category>重构</category>
        <category>代码</category>
        <category>代码风格</category>
        <category>数据可视化</category>
        <category>爬虫</category>
        <category>chrome</category>
        <category>crx</category>
        <category>扩展</category>
        <category>CORS</category>
        <category>跨域</category>
        <category>盒模型</category>
        <category>浮动</category>
        <category>Reactive Programming</category>
        <category>JavaScript</category>
        <category>Cycle.js</category>
        <category>Dart</category>
        <category>最佳实践</category>
        <category>引流</category>
        <category>universal-link</category>
        <category>app-link</category>
        <category>脚手架</category>
        <category>degit</category>
        <category>git</category>
        <category>设计模式</category>
        <category>类</category>
        <category>接口</category>
        <category>抽象类</category>
        <category>DOM</category>
        <category>Docker</category>
        <category>ONOS</category>
        <category>控制器</category>
        <category>虚拟化</category>
        <category>笔记</category>
        <category>UX</category>
        <category>UED</category>
        <category>准则</category>
        <category>Java</category>
        <category>Ruby</category>
        <category>反射</category>
        <category>编程范式</category>
        <category>鸭子类型</category>
        <category>管理</category>
        <category>效率</category>
        <category>知识工作者</category>
        <category>卓有成效</category>
        <category>Elm</category>
        <category>框架</category>
        <category>函数式编程</category>
        <category>虚网映射</category>
        <category>Javascript</category>
        <category>并发</category>
        <category>event loop</category>
        <category>覆盖率</category>
        <category>端到端测试</category>
        <category>istanbul</category>
        <category>istanbuljs</category>
        <category>JavaSript</category>
        <category>Express</category>
        <category>源码</category>
        <category>代码覆盖率</category>
        <category>istanbul-middleware</category>
        <category>代码插桩</category>
        <category>require钩子</category>
        <category>babel-plugin-istanbul</category>
        <category>css</category>
        <category>html5</category>
        <category>flex</category>
        <category>javascript</category>
        <category>roadmap</category>
        <category>闭包</category>
        <category>Haskell</category>
        <category>monad</category>
        <category>后端</category>
        <category>管理后台</category>
        <category>egg.js</category>
        <category>工作流</category>
        <category>pull request</category>
        <category>golang</category>
        <category>语言学习</category>
        <category>黑客与画家</category>
        <category>创业</category>
        <category>骑行</category>
        <category>海南</category>
        <category>图文</category>
        <category>reflow</category>
        <category>repaint</category>
        <category>命名法</category>
        <category>成功学</category>
        <category>自我建设</category>
        <category>HTTP</category>
        <category>HTTP/2</category>
        <category>SPDY</category>
        <category>QUIC</category>
        <category>HTTPS</category>
        <category>状态码</category>
        <category>网络攻击</category>
        <category>介绍</category>
        <category>图片渲染</category>
        <category>html2canvas</category>
        <category>dom-to-image</category>
        <category>electron</category>
        <category>indexedDB</category>
        <category>异步</category>
        <category>Generator</category>
        <category>thunk</category>
        <category>async</category>
        <category>函数表达式</category>
        <category>对象</category>
        <category>继承</category>
        <category>类型转换</category>
        <category>==</category>
        <category>类型判断</category>
        <category>猫</category>
        <category>杀手</category>
        <category>管理学</category>
        <category>领导力</category>
        <category>梯队</category>
        <category>移动端</category>
        <category>UI</category>
        <category>自适应</category>
        <category>rem</category>
        <category>Electron</category>
        <category>GUI</category>
        <category>gpx</category>
        <category>template</category>
        <category>Electron Builder</category>
        <category>PWA</category>
        <category>方法论</category>
        <category>夜话</category>
        <category>多线</category>
        <category>生活</category>
        <category>密码</category>
        <category>密钥</category>
        <category>技改</category>
        <category>Vue</category>
        <category>gulp</category>
        <category>瀑布流</category>
        <category>电影</category>
        <category>PHP</category>
        <category>参考</category>
        <category>思维</category>
        <category>学习能力</category>
        <category>右脑</category>
        <category>经济学</category>
        <category>宏观经济学</category>
        <category>术语</category>
        <category>GDP</category>
        <category>CPI</category>
        <category>储蓄</category>
        <category>投资</category>
        <category>金融市场</category>
        <category>股票</category>
        <category>债券</category>
        <category>美联储</category>
        <category>失业</category>
        <category>货币</category>
        <category>现值</category>
        <category>准备金</category>
        <category>货币中性</category>
        <category>通货膨胀</category>
        <category>汇率</category>
        <category>购买力</category>
        <category>净出口</category>
        <category>资产净流出</category>
        <category>总需求</category>
        <category>总供给</category>
        <category>流动性偏好</category>
        <category>乘数效应</category>
        <category>菲利普斯曲线</category>
        <category>微观经济学</category>
        <category>供求</category>
        <category>贸易</category>
        <category>市场</category>
        <category>税</category>
        <category>剩余</category>
        <category>外部性</category>
        <category>公共物品</category>
        <category>公共资源</category>
        <category>生产成本</category>
        <category>利润</category>
        <category>垄断</category>
        <category>价格歧视</category>
        <category>寡头</category>
        <category>垄断竞争</category>
        <category>生产要素市场</category>
        <category>贫困</category>
        <category>消费者选择理论</category>
        <category>不对称信息</category>
        <category>政治经济学</category>
        <category>行为经济学</category>
        <category>VSCode</category>
        <category>编辑器</category>
        <category>IDE</category>
        <category>hybrid</category>
        <category>JSBridge</category>
        <category>Web Worker</category>
        <category>Service Worker</category>
        <category>习惯</category>
        <category>lint</category>
        <category>editorconfig</category>
        <category>commit message</category>
        <category>量子物理</category>
        <category>史话</category>
        <category>埋点</category>
        <category>raven.js</category>
        <category>前端监控</category>
        <category>文本编辑器</category>
        <category>quill</category>
        <category>结构化数据</category>
        <category>React</category>
        <category>Hooks</category>
        <category>函数组件</category>
        <category>复用</category>
        <category>状态管理</category>
        <category>redux</category>
        <category>MobX</category>
        <category>代码质量</category>
        <category>重来</category>
        <category>requestAnimationFrame</category>
        <category>TypeScript</category>
        <category>路书</category>
        <category>gpx解析</category>
        <category>EXIF</category>
        <category>人类</category>
        <category>生存</category>
        <category>基因</category>
        <category>响应式编程</category>
        <category>RxJS</category>
        <category>成长</category>
        <category>业务</category>
        <category>思想</category>
        <category>程序设计</category>
        <category>心理学</category>
        <category>自我</category>
        <category>社会思维</category>
        <category>社会影响</category>
        <category>文化</category>
        <category>性别</category>
        <category>从众</category>
        <category>说服</category>
        <category>临床诊断</category>
        <category>陪审团</category>
        <category>司法</category>
        <category>物质主义</category>
        <category>健康</category>
        <category>社会关系</category>
        <category>偏见</category>
        <category>攻击行为</category>
        <category>亲密关系</category>
        <category>友谊</category>
        <category>爱情</category>
        <category>利他</category>
        <category>冲突</category>
        <category>和解</category>
        <category>软技能</category>
        <category>理财</category>
        <category>健身</category>
        <category>自我营销</category>
        <category>学习</category>
        <category>商业模式</category>
        <category>产品</category>
        <category>校园网</category>
        <category>互联网</category>
        <category>技术</category>
        <category>web开发</category>
        <category>哲思</category>
        <category>择偶观</category>
        <category>validator</category>
        <category>大文件</category>
        <category>visibilityChange</category>
        <category>IntersectionObserver</category>
        <category>图种</category>
        <category>draggable</category>
        <category>webpack</category>
        <category>z-index</category>
        <category>git submodule</category>
        <category>object-fit</category>
        <category>object-position</category>
        <category>BroadcastChannel</category>
        <category>extract-text-webpack-plugin</category>
        <category>lottie</category>
        <category>backface-visibility</category>
        <category>egret</category>
        <category>mock</category>
        <category>SSO</category>
        <category>autoprefixer</category>
        <category>polyfill</category>
        <category>Android</category>
        <category>ffmpeg</category>
        <category>React Hooks</category>
        <category>rollup</category>
        <category>CDN</category>
        <category>DNS</category>
        <category>CNAME</category>
        <category>架构</category>
        <category>组件</category>
        <category>ssh</category>
        <category>fis-receiver</category>
        <category>tmux</category>
        <category>origami</category>
        <category>promise</category>
        <category>encodeURI</category>
        <category>encodeURIComponent</category>
        <category>axios</category>
        <category>charles</category>
        <category>黑色幽默</category>
        <category>朋友</category>
        <category>梦</category>
        <category>濒死</category>
        <category>江南</category>
        <category>苏州</category>
        <category>无锡</category>
        <category>宜兴</category>
        <category>湖州</category>
        <category>南浔</category>
        <category>游记</category>
        <category>随笔</category>
        <category>群众</category>
        <category>理论</category>
        <category>实效</category>
        <category>测试</category>
        <category>长沙</category>
        <category>杭州</category>
        <category>湖南</category>
        <category>核酸</category>
        <category>美食</category>
        <category>云南</category>
        <category>丽江</category>
        <category>大理</category>
        <category>青岛</category>
        <category>济南</category>
        <category>山东</category>
        <category>西北</category>
        <category>银川</category>
        <category>西宁</category>
        <category>青海湖</category>
        <category>西海镇</category>
        <category>茶卡盐湖</category>
        <category>厦门</category>
        <category>感受</category>
        <category>C语言</category>
        <category>树</category>
        <category>主干开发</category>
        <category>GitFlow</category>
        <category>GithubFlow</category>
        <category>typescript</category>
        <category>类型系统</category>
        <category>webrtc</category>
        <category>RTMP</category>
        <category>首屏时间</category>
        <category>性能优化</category>
        <category>公司</category>
        <category>个人发展</category>
        <category>战略</category>
        <category>晋升</category>
        <category>哲学</category>
        <category>幸福</category>
        <category>人生</category>
        <category>叔本华</category>
        <category>Unix</category>
        <category>Rollup</category>
        <category>mouseout</category>
        <category>mouseleave</category>
        <category>lint-staged</category>
        <category>吸顶</category>
        <category>图片组件</category>
        <category>形式系统</category>
        <category>不完全性</category>
        <category>隐喻</category>
        <category>哥德尔</category>
        <category>巴赫</category>
        <category>埃舍尔</category>
        <category>济州</category>
        <category>西归浦</category>
        <category>城山</category>
        <category>咸德</category>
        <category>人工智能</category>
        <category>心智</category>
        <category>自指</category>
        <category>图灵</category>
        <category>马列主义</category>
        <category>恩格斯</category>
        <category>家庭</category>
        <category>国家</category>
        <category>阶级</category>
        <category>氏族</category>
        <category>哲学史</category>
        <category>孔子</category>
        <category>老子</category>
        <category>儒家</category>
        <category>道家</category>
        <category>佛教</category>
        <category>禅宗</category>
        <category>理学</category>
        <category>心学</category>
        <category>计算机</category>
        <category>微机原理</category>
        <category>门</category>
        <category>操作系统</category>
        <category>数字电路</category>
        <category>2024</category>
        <category>政府</category>
        <category>经济</category>
        <category>消费</category>
        <category>土地金融</category>
        <category>饮食</category>
        <category>蛋白质</category>
        <category>碳水</category>
        <category>慢性病</category>
        <category>三高</category>
        <category>肿瘤</category>
        <category>启蒙</category>
        <category>社会主义</category>
        <category>当代史</category>
        <category>共产党</category>
        <category>南明</category>
        <category>清</category>
        <category>顾诚</category>
        <item>
            <guid isPermalink="true">http://shenlvmeng.github.com/blog/2019/12/24/golang-learning/</guid>
            <title>go语言入门学习</title>
            <link>http://shenlvmeng.github.com/blog/2019/12/24/golang-learning/</link>
            <category>golang</category>
            <category>语言学习</category>
            <pubDate>Tue, 24 Dec 2019 23:03:54 +0800</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;更多：&lt;a href=&#34;https://golang.org/&#34;&gt;go官网&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;题解：&lt;a href=&#34;https://github.com/shenlvmeng/go-learning-exercise&#34;&gt;https://github.com/shenlvmeng/go-learning-exercise&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;历史&#34;&gt;&lt;a href=&#34;#历史&#34; class=&#34;headerlink&#34; title=&#34;历史&#34;&gt;&lt;/a&gt;历史&lt;/h2&gt;&lt;p&gt;Go语言构想与2007年9月，于2009年11月发布。主要思想来自3种语言：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C，基础语法和编译&lt;/li&gt;
&lt;li&gt;Pascal，包概念&lt;/li&gt;
&lt;li&gt;CSP（Communication Sequential Process），并发思想&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go项目诞生是为了解决Google中系统复杂性太高的问题。因此，简单性是Go思想的重要部分。设计上，Go&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;没有隐式类型转换&lt;/li&gt;
&lt;li&gt;没有构造和析构函数&lt;/li&gt;
&lt;li&gt;没有运算符重载&lt;/li&gt;
&lt;li&gt;没有形参默认值&lt;/li&gt;
&lt;li&gt;没有继承&lt;/li&gt;
&lt;li&gt;没有泛型&lt;/li&gt;
&lt;li&gt;没有异常&lt;/li&gt;
&lt;li&gt;没有宏（macro）&lt;/li&gt;
&lt;li&gt;没有函数注记&lt;/li&gt;
&lt;li&gt;没有线程局部存储&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;快速开始&#34;&gt;&lt;a href=&#34;#快速开始&#34; class=&#34;headerlink&#34; title=&#34;快速开始&#34;&gt;&lt;/a&gt;快速开始&lt;/h2&gt;&lt;h3 id=&#34;范例1：Hello-world&#34;&gt;&lt;a href=&#34;#范例1：Hello-world&#34; class=&#34;headerlink&#34; title=&#34;范例1：Hello world&#34;&gt;&lt;/a&gt;范例1：Hello world&lt;/h3&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fmt.Println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Hello world!&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在诸多语言中，C对Go的影响是最深的。&lt;code&gt;.go&lt;/code&gt;文件需要经过编译成二进制文件才可以运行。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;go run&lt;/code&gt;可以直接运行&lt;code&gt;.go&lt;/code&gt;文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;go build&lt;/code&gt;可以编译生成二进制文件，并在之后直接执行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在代码结构上，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先声明当前包名，其中命名为&lt;code&gt;main&lt;/code&gt;的包名代表代码是可执行程序，而非一个库文件&lt;/li&gt;
&lt;li&gt;再&lt;code&gt;import&lt;/code&gt;依赖包，go自带100+内置包。在编译时，编译器会抛弃未被使用的包，减少体积&lt;/li&gt;
&lt;li&gt;接下来是程序代码，命名为&lt;code&gt;main&lt;/code&gt;的函数是执行的入口&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go代码有着标准的代码格式，并可以通过&lt;code&gt;gofmt&lt;/code&gt;格式化代码。&lt;strong&gt;代码中不需要在行尾写分号&lt;/strong&gt;，后面紧跟特定token的换行符会自动转成分号。因此，Go代码中换行会影响代码编译。&lt;/p&gt;
&lt;h3 id=&#34;范例2：命令行参数&#34;&gt;&lt;a href=&#34;#范例2：命令行参数&#34; class=&#34;headerlink&#34; title=&#34;范例2：命令行参数&#34;&gt;&lt;/a&gt;范例2：命令行参数&lt;/h3&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// version 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;os&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; s, sep &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i:= &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; i &amp;lt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(os.Args); i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        s += setp + os.Args[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        setp = &lt;span class=&#34;string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fmt.Println(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;切片（slice）是序列数组元素的表示方式，可以用&lt;code&gt;s[i]&lt;/code&gt;或&lt;code&gt;s[m:n]&lt;/code&gt;（m或n缺失是表示头和尾元素位置）获取1或n-m个元素。使用&lt;code&gt;len(s)&lt;/code&gt;获取长度。&lt;/li&gt;
&lt;li&gt;注释以&lt;code&gt;//&lt;/code&gt;开头&lt;/li&gt;
&lt;li&gt;import多个库时，可以用&lt;code&gt;()&lt;/code&gt;包裹列表的形式声明，这种写法更为常见&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;var&lt;/code&gt;开头表示变量声明，未指定初始值的变量会隐式初始化为当前类型的“零值”（0或’’等）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:=&lt;/code&gt;式的声明可以省去&lt;code&gt;var&lt;/code&gt;更快地为一组变量初始化&lt;/li&gt;
&lt;li&gt;go中的&lt;strong&gt;for循环是唯一的循环语句&lt;/strong&gt;，分为以下三部分。缺失initialization和condition时可以表示while循环&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; initialization; condition; post &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// zero or more statements&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// version 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;os&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    s, sep := &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; _, arg := os.Args[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        s += sep + arg&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        sep = &lt;span class=&#34;string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fmt.Println(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;在循环中，&lt;code&gt;range&lt;/code&gt;可以生产一对值，index和value&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_&lt;/code&gt;专门用来替代不需要使用的变量名，否则go会报错&lt;/li&gt;
&lt;li&gt;另外也可以直接用&lt;code&gt;strings.Join&lt;/code&gt;方法实现效果&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;范例3：寻找重复行&#34;&gt;&lt;a href=&#34;#范例3：寻找重复行&#34; class=&#34;headerlink&#34; title=&#34;范例3：寻找重复行&#34;&gt;&lt;/a&gt;范例3：寻找重复行&lt;/h3&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;bufio&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;os&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    counts = &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;map&lt;/span&gt;[&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;]&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    input = bufio.NewScanner(os.Stdin)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; input.Scan() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        counts[input.Text()]++&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; line, n := &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; counts &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; n &amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            fmt.Printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d\t%s\n&amp;quot;&lt;/span&gt;, n, line)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;同&lt;code&gt;for&lt;/code&gt;循环一样，&lt;code&gt;if&lt;/code&gt;语句也不需要&lt;code&gt;()&lt;/code&gt;包裹&lt;/li&gt;
&lt;li&gt;内置的&lt;code&gt;make&lt;/code&gt;函数可以创建一个新的map。map也可以被&lt;code&gt;for&lt;/code&gt;循环遍历，每次循环的pair分别是key和value&lt;/li&gt;
&lt;li&gt;&lt;code&gt;counts[input.Text()]&lt;/code&gt;中当key不存在时，会返回零值0&lt;/li&gt;
&lt;li&gt;bufio库可以更方便地帮忙处理程序的输入（input）和输出（output）&lt;ul&gt;
&lt;li&gt;&lt;code&gt;input.Scan()&lt;/code&gt;获取下一行，并自动去掉末尾换行符，在没有内容时返回&lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;input.Text()&lt;/code&gt;获取当前位置的文本&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Printf&lt;/code&gt;和C语言风格类似，里面行如&lt;code&gt;%s&lt;/code&gt;，&lt;code&gt;%v&lt;/code&gt;的特殊符号称为&lt;em&gt;verbs&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从文件中寻找代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    counts := &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;map&lt;/span&gt;[&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;]&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    files := os.Args[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(files) == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        countlines(os.Stdin, counts)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; _, file := &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; files &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            f, err := os.Open(file)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; err != &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                fmt.Fprintf(os.Stderr, &lt;span class=&#34;string&#34;&gt;&amp;quot;dup: %v\n&amp;quot;&lt;/span&gt;, err)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            countLines(f, counts)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            f.Close()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; line, n := &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; counts &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; n &amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            fmt.Printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d\t%s\n&amp;quot;&lt;/span&gt;, n, lines)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;countlines&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(f *os.File, counts &lt;span class=&#34;keyword&#34;&gt;map&lt;/span&gt;[&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;]&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    input := bufio.NewScanner(f)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; input.Scan() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        counts[input.Text()]++&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// error handling&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;除了上面的流模式读取文件外，还可以直接把整个文件直接读进内存，再将二进制数据string化并处理。此处可以使用&lt;code&gt;io/ioutil&lt;/code&gt;中的&lt;code&gt;ReadFile&lt;/code&gt;方法。转换过程用&lt;code&gt;string(data)&lt;/code&gt;完成。&lt;/p&gt;
&lt;p&gt;日常使用时，通常借助bufio，ioutil等高层级API就可以完成任务，而不需要深入实现内部。&lt;/p&gt;
&lt;h3 id=&#34;范例4：Gif&#34;&gt;&lt;a href=&#34;#范例4：Gif&#34; class=&#34;headerlink&#34; title=&#34;范例4：Gif&#34;&gt;&lt;/a&gt;范例4：Gif&lt;/h3&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;image&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;image/color&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;image/gif&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;io&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;math&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;math/rand&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;os&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; palette = []color.Color&amp;#123;color.White, color.Black&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	whiteIndex = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	blackIndex = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	lissajous(os.Stdout)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;lissajous&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(out io.Writer)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		cycles  = &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		res     = &lt;span class=&#34;number&#34;&gt;0.001&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		size    = &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		nframes = &lt;span class=&#34;number&#34;&gt;64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		delay   = &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	freq := rand.Float64() * &lt;span class=&#34;number&#34;&gt;3.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	anim := gif.GIF&amp;#123;LoopCount: nframes&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	phase := &lt;span class=&#34;number&#34;&gt;0.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i := &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; nframes; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		rect := image.Rect(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;*size+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;*size+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		img := image.NewPaletted(rect, palette)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; t := &lt;span class=&#34;number&#34;&gt;0.0&lt;/span&gt;; t &amp;lt; cycles*&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;*math.Pi; t += res &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			x := math.Sin(t)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			y := math.Sin(t*freq + phase)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			img.SetColorIndex(size+&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;(x*size+&lt;span class=&#34;number&#34;&gt;0.5&lt;/span&gt;), size+&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;(y*size+&lt;span class=&#34;number&#34;&gt;0.5&lt;/span&gt;), blackIndex)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		phase += &lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		anim.Delay = &lt;span class=&#34;built_in&#34;&gt;append&lt;/span&gt;(anim.Delay, delay)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		anim.Image = &lt;span class=&#34;built_in&#34;&gt;append&lt;/span&gt;(anim.Image, img)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	gif.EncodeAll(out, &amp;amp;anim)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;const&lt;/code&gt;声明常量，常量的值只能是number，string或boolean&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gif.GIF&amp;#123;...&amp;#125;&lt;/code&gt;是合成字面量的写法，其类型是struct，可以字面量声明其field，未声明fields均为零值（zero value）&lt;/li&gt;
&lt;li&gt;image库API可以操作图像&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;范例5：fetch&#34;&gt;&lt;a href=&#34;#范例5：fetch&#34; class=&#34;headerlink&#34; title=&#34;范例5：fetch&#34;&gt;&lt;/a&gt;范例5：fetch&lt;/h3&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;io&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;net/http&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;os&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;strings&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; prefix = &lt;span class=&#34;string&#34;&gt;&amp;quot;http://&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; _, url := &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; os.Args[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; !strings.HasPrefix(url, prefix) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			url = prefix + url&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		resp, err := http.Get(url)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; err != &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			fmt.Fprintf(os.Stderr, &lt;span class=&#34;string&#34;&gt;&amp;quot;fetch: %v\n&amp;quot;&lt;/span&gt;, err)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			os.Exit(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		_, err = io.Copy(os.Stdout, resp.Body)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		resp.Body.Close()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; err != &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			fmt.Fprintf(os.Stderr, &lt;span class=&#34;string&#34;&gt;&amp;quot;fetch: reading %s: %v\n&amp;quot;&lt;/span&gt;, url, err)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;和网络相关的API都位于net库中，如&lt;code&gt;http.Get(url)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;os.Exit(1)&lt;/code&gt;代表异常退出&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;范例6：并行fetch&#34;&gt;&lt;a href=&#34;#范例6：并行fetch&#34; class=&#34;headerlink&#34; title=&#34;范例6：并行fetch&#34;&gt;&lt;/a&gt;范例6：并行fetch&lt;/h3&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;io&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;io/ioutil&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;net/http&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;os&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	start := time.Now()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	ch := &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; _, url := &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; os.Args[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;go&lt;/span&gt; fetch(url, ch)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; os.Args[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		fmt.Println(&amp;lt;-ch)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	fmt.Printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%.2fs elapse\n&amp;quot;&lt;/span&gt;, time.Since(start).Seconds())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;fetch&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(url &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;, ch &lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt;&amp;lt;- &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	start := time.Now()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	res, err := http.Get(url)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; err != &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		ch &amp;lt;- fmt.Sprint(err)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	nbytes, err := io.Copy(ioutil.Discard, res.Body)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	res.Body.Close()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; err != &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		ch &amp;lt;- fmt.Sprintf(&lt;span class=&#34;string&#34;&gt;&amp;quot;while reading %s: %v&amp;quot;&lt;/span&gt;, url, err)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	secs := time.Since(start).Seconds()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	ch &amp;lt;- fmt.Sprintf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%.2fs %7d %s&amp;quot;&lt;/span&gt;, secs, nbytes, url)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;goroutine是go中并行执行函数的表示，channel是goroutine间相互沟通的方式，传递特定类型数据。&lt;strong&gt;goroutine相互沟通时，沟通的两者会对其他goroutine block&lt;/strong&gt;，保证没有冲突&lt;ul&gt;
&lt;li&gt;goroutine使用&lt;code&gt;go&lt;/code&gt;创建，channel使用&lt;code&gt;chan&lt;/code&gt;创建，&lt;code&gt;ch &amp;lt;-&lt;/code&gt;表示向channel发送，&lt;code&gt;&amp;lt;- ch&lt;/code&gt;表示从channel接收&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ioutil.Discard&lt;/code&gt;输出流会直接丢弃流内容&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;范例7：web-server&#34;&gt;&lt;a href=&#34;#范例7：web-server&#34; class=&#34;headerlink&#34; title=&#34;范例7：web server&#34;&gt;&lt;/a&gt;范例7：web server&lt;/h3&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;log&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;net/http&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	http.HandleFunc(&lt;span class=&#34;string&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;, handler)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	log.Fatal(http.ListenAndServe(&lt;span class=&#34;string&#34;&gt;&amp;quot;localhost:8000&amp;quot;&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;handler&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	fmt.Fprintf(w, &lt;span class=&#34;string&#34;&gt;&amp;quot;Path = %q\n&amp;quot;&lt;/span&gt;, r.URL.Path)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;http&lt;/code&gt;库的&lt;code&gt;HandleFunc&lt;/code&gt;和&lt;code&gt;ListenAndServer&lt;/code&gt;可以便捷地启动一个服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;log&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;net/http&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;sync&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; mu sync.Mutex&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; count &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	http.HandleFunc(&lt;span class=&#34;string&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;, handle)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	http.HandleFunc(&lt;span class=&#34;string&#34;&gt;&amp;quot;/count&amp;quot;&lt;/span&gt;, counter)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	log.Fatal(http.ListenAndServe(&lt;span class=&#34;string&#34;&gt;&amp;quot;localhost:8000&amp;quot;&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;handle&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	mu.Lock()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	count++&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	mu.Unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	fmt.Fprintf(w, &lt;span class=&#34;string&#34;&gt;&amp;quot;path = %q\n&amp;quot;&lt;/span&gt;, r.URL.Path)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;counter&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	mu.Lock()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	fmt.Fprintf(w, &lt;span class=&#34;string&#34;&gt;&amp;quot;count %d\n&amp;quot;&lt;/span&gt;, count)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	mu.Unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;server会为每个请求创建一个新的goroutine处理，为了避免并发读写count时的bug，使用了mutex锁保证读写是都是串行的&lt;/li&gt;
&lt;li&gt;&lt;code&gt;os.Stdout&lt;/code&gt;,&lt;code&gt;ioutil.Discard&lt;/code&gt;, &lt;code&gt;http.ResponseWriter&lt;/code&gt;都实现了&lt;code&gt;io.Writer&lt;/code&gt;接口，因此可以用在任何需要输出流的地方&lt;/li&gt;
&lt;li&gt;if语句前可以增加前置语句，如&lt;code&gt;if err:=xxx; err != nil&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;杂项&#34;&gt;&lt;a href=&#34;#杂项&#34; class=&#34;headerlink&#34; title=&#34;杂项&#34;&gt;&lt;/a&gt;杂项&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;go中的&lt;code&gt;switch&lt;/code&gt;没有fall through机制，若需要，需要显示声明&lt;code&gt;fallthrough&lt;/code&gt;。&lt;code&gt;case&lt;/code&gt;支持表达式，&lt;code&gt;switch&lt;/code&gt;后支持没有操作数，此时的switch称为tagless switch。&lt;code&gt;break&lt;/code&gt;, &lt;code&gt;continue&lt;/code&gt;, &lt;code&gt;goto&lt;/code&gt;命令如常&lt;/li&gt;
&lt;li&gt;go中有命名类型，类似ts中的&lt;code&gt;interface&lt;/code&gt;，行如&lt;code&gt;type Point struct &amp;#123; X, Y int &amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;go中有指针，&lt;code&gt;*&lt;/code&gt;表示去指针对应的值，&lt;code&gt;&amp;amp;&lt;/code&gt;表示取变量的指针，另外&lt;strong&gt;不支持指针上的算术运算&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;go中的方法指命名类型上的函数，interface意义如常&lt;/li&gt;
&lt;li&gt;可以去&lt;a href=&#34;https://golang.org/pkg&#34;&gt;这里&lt;/a&gt;寻找标准库的包，或去&lt;a href=&#34;https://godoc.org/&#34;&gt;这里&lt;/a&gt;寻找社区贡献的包&lt;/li&gt;
&lt;li&gt;注释风格同其他语言，&lt;code&gt;//&lt;/code&gt;表示单行注释，&lt;code&gt;/* */&lt;/code&gt;表示多行注释。不支持嵌套注释&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;程序结构&#34;&gt;&lt;a href=&#34;#程序结构&#34; class=&#34;headerlink&#34; title=&#34;程序结构&#34;&gt;&lt;/a&gt;程序结构&lt;/h2&gt;&lt;h3 id=&#34;命名&#34;&gt;&lt;a href=&#34;#命名&#34; class=&#34;headerlink&#34; title=&#34;命名&#34;&gt;&lt;/a&gt;命名&lt;/h3&gt;&lt;p&gt;和JS类似&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以**Unicode字母或下划线&lt;code&gt;_&lt;/code&gt;**开头&lt;/li&gt;
&lt;li&gt;后跟&lt;strong&gt;Unicode字母或数字或下划线&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;大小写敏感&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;go目前（2020&amp;#x2F;01&amp;#x2F;01）有25个不允许用来命名的&lt;strong&gt;关键字&lt;/strong&gt;，其中几个可能是对前端较难想到的是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;select&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chan&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;range&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fallthrough&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，还有一些预定义常量、类型、函数&lt;strong&gt;可以用来命名&lt;/strong&gt;，但很容易造成误解，下面举些例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;常量：&lt;code&gt;true&lt;/code&gt; &lt;code&gt;iota&lt;/code&gt; &lt;code&gt;nil&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;类型：&lt;code&gt;int&lt;/code&gt; &lt;code&gt;complex128&lt;/code&gt; &lt;code&gt;uintptr&lt;/code&gt; &lt;code&gt;rune&lt;/code&gt; &lt;code&gt;error&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;函数：&lt;code&gt;make&lt;/code&gt; &lt;code&gt;len&lt;/code&gt; &lt;code&gt;imag&lt;/code&gt; &lt;code&gt;panic&lt;/code&gt; &lt;code&gt;close&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;包名始终小写&lt;/strong&gt;，在函数域内命名的函数只在函数域内可见，否则&lt;strong&gt;在整个包域内可见&lt;/strong&gt;。整个包内声明的变量用首字母区分可见性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;首字母大写的可以被其他包访问&lt;/strong&gt;，如&lt;code&gt;fmt.FPrintf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;反之则只在包内可见&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;命名长度没有限制，但建议&lt;em&gt;scope越大的变量命名越长&lt;/em&gt;。Go使用驼峰风格的变量命名，首字母缩略词和首字母&lt;strong&gt;同大写或同小写&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;声明&#34;&gt;&lt;a href=&#34;#声明&#34; class=&#34;headerlink&#34; title=&#34;声明&#34;&gt;&lt;/a&gt;声明&lt;/h3&gt;&lt;p&gt;声明有4钟：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;var&lt;/code&gt; 变量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const&lt;/code&gt; 常量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;type&lt;/code&gt; 类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;func&lt;/code&gt; 函数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;声明在函数域内可见，或在整个包域内可见。函数返回可以是一组变量。&lt;/p&gt;
&lt;h3 id=&#34;变量&#34;&gt;&lt;a href=&#34;#变量&#34; class=&#34;headerlink&#34; title=&#34;变量&#34;&gt;&lt;/a&gt;变量&lt;/h3&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; name &lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; = expression&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Go中的变量声明如上所示，其中的&lt;code&gt;type&lt;/code&gt;部分或&lt;code&gt;expression&lt;/code&gt;部分可以省略，&lt;strong&gt;但是不能同时省略&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;type缺失时，name的类型由expression字面量或返回值决定&lt;/li&gt;
&lt;li&gt;expression缺失时，name的值&lt;strong&gt;自动设置为type类型的“零值”（zero value）&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;数值零值为0，字符串零值为&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;，布尔类型零值为&lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;其余接口或引用类型零值为&lt;code&gt;nil&lt;/code&gt;，如指针、map、切片、函数、channel&lt;/li&gt;
&lt;li&gt;聚合类型的零值即其所有组成元素的零值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以，&lt;strong&gt;Go中不存在未初始化的变量&lt;/strong&gt;。包级别变量在&lt;code&gt;main&lt;/code&gt;函数开始前初始化，局部变量在声明过程中初始化。一组变量可以同时被初始化。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; b, f, s = &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1.3&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; f, err = os.Open(name)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;简写式&#34;&gt;&lt;a href=&#34;#简写式&#34; class=&#34;headerlink&#34; title=&#34;简写式&#34;&gt;&lt;/a&gt;简写式&lt;/h4&gt;&lt;p&gt;在&lt;strong&gt;函数域&lt;/strong&gt;内的&lt;strong&gt;局部变量声明&lt;/strong&gt;可以使用简写式，即&lt;code&gt;:=&lt;/code&gt;。在已知变量初始值时可以省去写&lt;code&gt;var&lt;/code&gt;。在初始值并不重要或最好显式写明类型时，还是使用&lt;code&gt;var foo type&lt;/code&gt;的形式比较好。和&lt;code&gt;var&lt;/code&gt;声明一样，也可以同时用简写式声明多个局部变量。但要注意，不要把这种写法和&lt;em&gt;元组赋值（tuple assignment）&lt;/em&gt;搞混了。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// multiple initialzier expression&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;i, j := &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// tuple assignment&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;i, j = j, i&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;另外，简写式声明里可以写&lt;strong&gt;部分&lt;/strong&gt;已经声明的局部变量，在这里会当做赋值处理。但是简写式声明中要&lt;strong&gt;至少包含一个未声明变量&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;in, err := os.OpenFile(infile)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;out, err := os.OpenFile(outfile)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;指针&#34;&gt;&lt;a href=&#34;#指针&#34; class=&#34;headerlink&#34; title=&#34;指针&#34;&gt;&lt;/a&gt;指针&lt;/h4&gt;&lt;p&gt;Go中的指针和C中类似，用&lt;code&gt;&amp;amp;&lt;/code&gt;表示取一个&lt;strong&gt;变量&lt;/strong&gt;的地址，用&lt;code&gt;*&lt;/code&gt;表示访问某个地址所在的位置。指针的零值为&lt;code&gt;nil&lt;/code&gt;，因此可以用&lt;code&gt;p != nil&lt;/code&gt;来判断指针是否指向变量。&lt;/p&gt;
&lt;h4 id=&#34;new函数&#34;&gt;&lt;a href=&#34;#new函数&#34; class=&#34;headerlink&#34; title=&#34;new函数&#34;&gt;&lt;/a&gt;&lt;code&gt;new&lt;/code&gt;函数&lt;/h4&gt;&lt;p&gt;可以通过&lt;code&gt;new&lt;/code&gt;函数，声明类型&lt;code&gt;T&lt;/code&gt;创建新的&lt;strong&gt;匿名&lt;/strong&gt;变量，函数返回变量的指针即&lt;code&gt;*T&lt;/code&gt;类型。这在不需要变量名时很好用。每次调用&lt;code&gt;new&lt;/code&gt;函数新建变量时，返回的地址&lt;strong&gt;不同&lt;/strong&gt;，&lt;strong&gt;除非类型不附加任何信息&lt;/strong&gt;，如&lt;code&gt;struct &amp;#123;&amp;#125;&lt;/code&gt;或&lt;code&gt;[0]int&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;p := &lt;span class=&#34;built_in&#34;&gt;new&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;*p = &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;另外，由于&lt;code&gt;new&lt;/code&gt;只是预定义函数，所以可以用来做变量名。&lt;/p&gt;
&lt;h4 id=&#34;生命周期&#34;&gt;&lt;a href=&#34;#生命周期&#34; class=&#34;headerlink&#34; title=&#34;生命周期&#34;&gt;&lt;/a&gt;生命周期&lt;/h4&gt;&lt;p&gt;生命周期即变量从创建到被回收的时间。包级别的变量会在整个程序执行过程中存在。局部变量则会在&lt;em&gt;未被引用（unreachable）&lt;/em&gt;时释放内存。Go中的垃圾回收机制会自动帮你完成这件事。但是如果有下面这种情况出现，则会阻止垃圾回收释放内存。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; global *&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; x &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	x = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	global = &amp;amp;x&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在上述情况下，&lt;code&gt;x&lt;/code&gt;局部变量从&lt;code&gt;f&lt;/code&gt;函数中&lt;strong&gt;逃逸&lt;/strong&gt;，并不会在&lt;code&gt;f&lt;/code&gt;函数返回时被回收，持久存储在堆（heap）中。应尽量避免这种情况带来的额外内存损耗。&lt;/p&gt;
&lt;h3 id=&#34;赋值&#34;&gt;&lt;a href=&#34;#赋值&#34; class=&#34;headerlink&#34; title=&#34;赋值&#34;&gt;&lt;/a&gt;赋值&lt;/h3&gt;&lt;p&gt;和其余语言赋值没什么太大区别。&lt;/p&gt;
&lt;p&gt;不同的是，额外增加了&lt;strong&gt;元组赋值&lt;/strong&gt;。&lt;code&gt;=&lt;/code&gt;右侧的一组变量会先求值，再赋给左侧变量。建议在不需要复杂运算时使用。同时，有些表达式和函数也会返回一组值，此时需要用元组赋值的方式接收。在不需要某个变量时，可以使用&lt;code&gt;_&lt;/code&gt;占位。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;x, y= y, x&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;f, err = os.Open(&lt;span class=&#34;string&#34;&gt;&amp;quot;foo.txt&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;v, ok = m[key]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;v, ok = x.(T)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;v, ok = &amp;lt;- ch&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;可赋值性&#34;&gt;&lt;a href=&#34;#可赋值性&#34; class=&#34;headerlink&#34; title=&#34;可赋值性&#34;&gt;&lt;/a&gt;可赋值性&lt;/h4&gt;&lt;p&gt;除了一些显式的赋值外，还有函数返回、字面量声明等。Go中的赋值&lt;strong&gt;当且仅当&lt;/strong&gt;&lt;code&gt;=&lt;/code&gt;左右的值和变量&lt;strong&gt;类型相同&lt;/strong&gt;才可进行（对于&lt;code&gt;==&lt;/code&gt;和&lt;code&gt;!=&lt;/code&gt;的判断也是这样）。&lt;code&gt;nil&lt;/code&gt;可以赋值给任何复杂类型或引用类型。&lt;/p&gt;
&lt;h3 id=&#34;类型声明&#34;&gt;&lt;a href=&#34;#类型声明&#34; class=&#34;headerlink&#34; title=&#34;类型声明&#34;&gt;&lt;/a&gt;类型声明&lt;/h3&gt;&lt;p&gt;Go中可以定义类型。Go中的类型定义储存值的符号、它们的大小、固有操作以及方法，使用&lt;code&gt;type name underlying-name&lt;/code&gt;声明。它通常出现在包级别，有些也会通过首字母大写的形式export出去。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; Celsius &lt;span class=&#34;type&#34;&gt;float64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; Fahrenheit &lt;span class=&#34;type&#34;&gt;float64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CTOF&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(c Celsius)&lt;/span&gt;&lt;/span&gt; Fahrenheit &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; Fahrenheit(c * &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt; / &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt; + &lt;span class=&#34;number&#34;&gt;32&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;FTOC&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(f Fahrenheit)&lt;/span&gt;&lt;/span&gt; Celsius &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; Celsius((f - &lt;span class=&#34;number&#34;&gt;32&lt;/span&gt;) * &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt; / &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;两个有着相同底层类型的命名类型并不是同一种类型&lt;/strong&gt;，也不能直接相互赋值和比较。但是可以使用&lt;strong&gt;强制类型转换&lt;/strong&gt;转换到想同类型来比较。所有的类型&lt;code&gt;T&lt;/code&gt;都有对应的强制类型转换操作&lt;code&gt;T(x)&lt;/code&gt;。两个有相同类层类型或指向相同底层类型的未命名指针可以相互强制转换。另外，Go中的强制类型转换从不会在运行时出错。&lt;/p&gt;
&lt;p&gt;比较特别的是，类型上还可以声明方法。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;(c Celsius)&lt;/span&gt;&lt;/span&gt; String() &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; fmt.Sprintf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%g°C&amp;quot;&lt;/span&gt;, c)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;包和文件&#34;&gt;&lt;a href=&#34;#包和文件&#34; class=&#34;headerlink&#34; title=&#34;包和文件&#34;&gt;&lt;/a&gt;包和文件&lt;/h3&gt;&lt;p&gt;Go中的包即其他语言中的库、模块。以实现模块化、封装、分发和重用。和Java类似，一个包的代码&lt;strong&gt;可以存放在多个文件内&lt;/strong&gt;，通常位于同一个文件夹下。每个包都有相互隔离的命名空间，需要用·&lt;code&gt;image.Decode&lt;/code&gt;的形式使用。需要&lt;code&gt;export&lt;/code&gt;的变量、类型、函数使用&lt;strong&gt;首字母大写&lt;/strong&gt;的形式。&lt;/p&gt;
&lt;p&gt;建议在每个export出去的变量、类型、函数前使用注释说明。另外，建议在包开头留下&lt;em&gt;doc comment&lt;/em&gt;，或将更多注释放在&lt;code&gt;doc.go&lt;/code&gt;中。&lt;/p&gt;
&lt;h4 id=&#34;import&#34;&gt;&lt;a href=&#34;#import&#34; class=&#34;headerlink&#34; title=&#34;import&#34;&gt;&lt;/a&gt;import&lt;/h4&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;os&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;strconv&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;shenlvmeng/learning/tempconv&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; _, arg := &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; os.Args[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		t, err := strconv.ParseFloat(arg, &lt;span class=&#34;number&#34;&gt;64&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; err != &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			fmt.Fprintf(os.Strerr, &lt;span class=&#34;string&#34;&gt;&amp;quot;convert error: %v\n&amp;quot;&lt;/span&gt;, err)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			os.Exit(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		f := temconv.Fahrenheit(t)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		c := tempconv.Celsius(c)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		fmt.Printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%s = %s, %s = %s\n&amp;quot;&lt;/span&gt;, f, tempconv.FTOC(f), c, tempconv.CTOF(c))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;每一个包都有自己的import路径，Go语言标准并不定义如何解释import路径，这一步交给解释工具完成。每个包的包名通常和路径的最后一段同名。为避免包名冲突，import可以指定包的别名。&lt;/p&gt;
&lt;p&gt;在引用了未被使用的包时会报错。，借助&lt;code&gt;goimports&lt;/code&gt;等工具和正确的IDE配置，可以在保存代码时自动标准化代码格式。&lt;/p&gt;
&lt;h4 id=&#34;包初始化&#34;&gt;&lt;a href=&#34;#包初始化&#34; class=&#34;headerlink&#34; title=&#34;包初始化&#34;&gt;&lt;/a&gt;包初始化&lt;/h4&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; a = b + c &lt;span class=&#34;comment&#34;&gt;//third&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; b = f() &lt;span class=&#34;comment&#34;&gt;// second&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; c = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;// first&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;初始化时，先按照依赖的顺序初始化包级别变量。而&lt;code&gt;.go&lt;/code&gt;文件的处理顺序则按照传给go编译器的顺序。初始化的过程是自底向上的，即当所有依赖包都初始化完成后，才会初始化&lt;code&gt;main&lt;/code&gt;包，再执行&lt;code&gt;main&lt;/code&gt;函数。对于初始化过程复杂的变量，可以在&lt;code&gt;init&lt;/code&gt;函数中声明，而&lt;code&gt;init&lt;/code&gt;是在程序启动时，按照声明的顺序一个一个执行的。&lt;/p&gt;
&lt;h3 id=&#34;作用域&#34;&gt;&lt;a href=&#34;#作用域&#34; class=&#34;headerlink&#34; title=&#34;作用域&#34;&gt;&lt;/a&gt;作用域&lt;/h3&gt;&lt;p&gt;作用域是编译时的，和运行时的生命周期概念相对应。作用域描述一个声明的可见范围。和C系列语言类似，用大括号&lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;包裹会形成&lt;strong&gt;词法块作用域&lt;/strong&gt;。Go在&lt;strong&gt;全局作用域&lt;/strong&gt;下预定义了一些常量、函数、类型等。在函数外声明的作用域是包级别的，&lt;code&gt;import&lt;/code&gt;进来的包作用域是文件级别的。局部声明只在块作用域内。内部作用域会覆盖外部作用域的同名声明。&lt;/p&gt;
&lt;p&gt;另外，Go中还有一些&lt;strong&gt;隐式&lt;/strong&gt;的作用域，比如&lt;code&gt;for&lt;/code&gt;，&lt;code&gt;if&lt;/code&gt;，&lt;code&gt;switch&lt;/code&gt;表达式中的作用域。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	x := &lt;span class=&#34;string&#34;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i:= &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(x); i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		x := x[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; x != &lt;span class=&#34;string&#34;&gt;&amp;quot;o&amp;quot;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			x := x + &lt;span class=&#34;string&#34;&gt;&amp;#x27;A&amp;#x27;&lt;/span&gt; - &lt;span class=&#34;string&#34;&gt;&amp;#x27;a&amp;#x27;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;// 类似upperCase&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			fmt.Prinf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%c&amp;quot;&lt;/span&gt;, x)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上面的&lt;code&gt;for&lt;/code&gt;和&lt;code&gt;if&lt;/code&gt;内部的x是一个单独的作用域。另外注意，简写式中会声明局部变量，会覆盖外部的同名变量，可能会带来意料之外的结果。可以通过&lt;code&gt;var xxx type&lt;/code&gt;的形式声明变量。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; cwd &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	cwd, err := os.Getwd() &lt;span class=&#34;comment&#34;&gt;// compile error: unused cwd&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; err != &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		log.Fatalf(&lt;span class=&#34;string&#34;&gt;&amp;quot;os.Getwd failed: %v&amp;quot;&lt;/span&gt;, err)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;基础数据结构&#34;&gt;&lt;a href=&#34;#基础数据结构&#34; class=&#34;headerlink&#34; title=&#34;基础数据结构&#34;&gt;&lt;/a&gt;基础数据结构&lt;/h2&gt;&lt;p&gt;Go有4大类数据类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基础类型&lt;/strong&gt;，即数字、字符串、布尔值&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;聚合类型&lt;/strong&gt;，即数组、struct&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;引用类型&lt;/strong&gt;，包括函数、指针、slice、map、channel&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;接口类型&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这一部分先说基础类型&lt;/p&gt;
&lt;h3 id=&#34;整型&#34;&gt;&lt;a href=&#34;#整型&#34; class=&#34;headerlink&#34; title=&#34;整型&#34;&gt;&lt;/a&gt;整型&lt;/h3&gt;&lt;p&gt;Go的数字类型包含了不同size的整型、浮点数和复数，以及它们的有无符号性。&lt;/p&gt;
&lt;p&gt;整型有8、16、32、64四种长度，以及对应的signed和unsigned。组合一下即下面8种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int8&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int16&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int32&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int64&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uint8&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uint16&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uint32&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uint64&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，&lt;code&gt;rune&lt;/code&gt;是&lt;code&gt;int32&lt;/code&gt;的别称，通常用来表示1个Unicode字符，&lt;code&gt;byte&lt;/code&gt;是&lt;code&gt;unit8&lt;/code&gt;的别称。&lt;code&gt;uintptr&lt;/code&gt;用来表示一个可以承载任意指针值的无符号整型。&lt;/p&gt;
&lt;p&gt;Go中对整型的处理和C风格很像。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用首位表示符号位（signed int中）&lt;/li&gt;
&lt;li&gt;类型承载范围和C一样，如int8表示-128到127&lt;/li&gt;
&lt;li&gt;和C一样的操作符以及优先级，唯一区别是&lt;code&gt;&amp;amp;^&lt;/code&gt;表示位清除，&lt;code&gt;x &amp;amp;^ y&lt;/code&gt;表示根据y各位将x各位清0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;左移位，空位取0，&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;右移位，无符号数补零，&lt;strong&gt;有符号数补符号位&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;整型间除法会清除小数部分&lt;/li&gt;
&lt;li&gt;取余&lt;code&gt;%&lt;/code&gt;运算结果符号和被除数有关&lt;/li&gt;
&lt;li&gt;超过位数的会溢出&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt;开头表示八进制（通常用来表示POSIX系统中文件权限设置），&lt;code&gt;0x&lt;/code&gt;表示十六进制&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不一样的是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相同类型才可比较大小，否则需要用&lt;code&gt;int()&lt;/code&gt;强制转换为1种类型再比较。某些类型转换只改变值的使用方式，有些则会改变值，如&lt;code&gt;int&lt;/code&gt;和&lt;code&gt;float&lt;/code&gt;之间的转换&lt;/li&gt;
&lt;li&gt;用&lt;code&gt;%d&lt;/code&gt;, &lt;code&gt;%o&lt;/code&gt;, &lt;code&gt;%x&lt;/code&gt;分别表示整型、八进制和十六进制数&lt;/li&gt;
&lt;li&gt;用&lt;code&gt;%c&lt;/code&gt;表示显示对应的Unicode字符，&lt;code&gt;%q&lt;/code&gt;显示带引号版本&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;浮点数&#34;&gt;&lt;a href=&#34;#浮点数&#34; class=&#34;headerlink&#34; title=&#34;浮点数&#34;&gt;&lt;/a&gt;浮点数&lt;/h3&gt;&lt;p&gt;浮点数有&lt;code&gt;float32&lt;/code&gt;和&lt;code&gt;float64&lt;/code&gt;两种类型，服从IEEE754标准。为保证精确性，通常使用&lt;code&gt;flaot64&lt;/code&gt;。另外，还有以下特点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.&lt;/code&gt;前后的0可以省略&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%g&lt;/code&gt;, &lt;code&gt;%e&lt;/code&gt;和&lt;code&gt;%f&lt;/code&gt;分别打印最合适展示精确度版本、指数版本和原始版本&lt;/li&gt;
&lt;li&gt;有&lt;code&gt;+Inf&lt;/code&gt;, &lt;code&gt;-Inf&lt;/code&gt;和&lt;code&gt;NaN&lt;/code&gt;特殊值，表现类似JS&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;复数&#34;&gt;&lt;a href=&#34;#复数&#34; class=&#34;headerlink&#34; title=&#34;复数&#34;&gt;&lt;/a&gt;复数&lt;/h3&gt;&lt;p&gt;Go有两种复数类型：&lt;code&gt;complex64&lt;/code&gt;和&lt;code&gt;complex128&lt;/code&gt;，它们其实是由&lt;code&gt;float32&lt;/code&gt;和&lt;code&gt;float64&lt;/code&gt;组成的。复数可以通过&lt;code&gt;complex&lt;/code&gt;内置函数初始化，或者直接使用字面量。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; x &lt;span class=&#34;type&#34;&gt;complex128&lt;/span&gt; = &lt;span class=&#34;built_in&#34;&gt;complex&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;) &lt;span class=&#34;comment&#34;&gt;// 1 + 2i&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;y := &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt; - &lt;span class=&#34;number&#34;&gt;4i&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;复数间可以判断相等性，无法判断大小。&lt;code&gt;math/cmplx&lt;/code&gt;包里包含一些复数的数学运算。&lt;/p&gt;
&lt;h3 id=&#34;布尔类型&#34;&gt;&lt;a href=&#34;#布尔类型&#34; class=&#34;headerlink&#34; title=&#34;布尔类型&#34;&gt;&lt;/a&gt;布尔类型&lt;/h3&gt;&lt;p&gt;即type &lt;code&gt;bool&lt;/code&gt;，和其他语言类似，有短路行为，&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;比&lt;code&gt;||&lt;/code&gt;优先级更高。&lt;code&gt;bool&lt;/code&gt;类型和整型之间不能相互隐式转换。&lt;/p&gt;
&lt;h3 id=&#34;字符串&#34;&gt;&lt;a href=&#34;#字符串&#34; class=&#34;headerlink&#34; title=&#34;字符串&#34;&gt;&lt;/a&gt;字符串&lt;/h3&gt;&lt;p&gt;字符串表示&lt;strong&gt;一组不可修改的比特位序列&lt;/strong&gt;，但通常用来承载可读的Unicode编码点。&lt;code&gt;len&lt;/code&gt;返回字符串长度，&lt;code&gt;[i]&lt;/code&gt;返回第&lt;code&gt;i&lt;/code&gt;个&lt;strong&gt;字节&lt;/strong&gt;处的值。越界读取会导致panic。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;s[i:j]&lt;/code&gt;表示自带的substring操作，其中&lt;code&gt;i&lt;/code&gt;和&lt;code&gt;j&lt;/code&gt;均可省略&lt;/li&gt;
&lt;li&gt;字符串间可以比较大小和相等性，其中大小通过逐字节子母序比较&lt;/li&gt;
&lt;li&gt;&lt;code&gt;+&lt;/code&gt;可表示字符串拼接&lt;/li&gt;
&lt;li&gt;不可变性：不允许修改字符串的值（如&lt;code&gt;s[0] = &amp;#39;L&amp;#39;&lt;/code&gt;），这使得Go可以在底层复用字符串，节省内存&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;字面量字符串&#34;&gt;&lt;a href=&#34;#字面量字符串&#34; class=&#34;headerlink&#34; title=&#34;字面量字符串&#34;&gt;&lt;/a&gt;字面量字符串&lt;/h4&gt;&lt;p&gt;用双引号&lt;code&gt;&amp;quot;&lt;/code&gt;包裹，UTF-8编码。双引号中的反斜线&lt;code&gt;\&lt;/code&gt;有特殊含义。如&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\n&lt;/code&gt;表示换行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\t&lt;/code&gt;表示制表符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\x&lt;/code&gt;表示后接十六进制的高低位&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\ooo&lt;/code&gt;表示三个八进制位&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由反引号&amp;#96;&amp;#96; &amp;#96;包裹的表示纯文本字面量，其中的换行和格式也会被跨平台保留。可以用来书写多行字符串。&lt;/p&gt;
&lt;h4 id=&#34;Unicode表示&#34;&gt;&lt;a href=&#34;#Unicode表示&#34; class=&#34;headerlink&#34; title=&#34;Unicode表示&#34;&gt;&lt;/a&gt;Unicode表示&lt;/h4&gt;&lt;p&gt;Go中使用UTF-8变长编码：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0xxxxxxx&lt;/code&gt;表示ASCII码&lt;/li&gt;
&lt;li&gt;&lt;code&gt;11xxxxxx 10xxxxxx&lt;/code&gt; 表示两字节长度&lt;/li&gt;
&lt;li&gt;&lt;code&gt;110xxxxx 10xxxxxx 10xxxxxx&lt;/code&gt;表示三字节长度&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx&lt;/code&gt; 表示四字节长度&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以由&lt;code&gt;\uhhhh&lt;/code&gt;表示16比特或&lt;code&gt;\U&lt;/code&gt;表示32比特，如世界：&lt;code&gt;\u4e16\u754c&lt;/code&gt;。&lt;code&gt;unicode&lt;/code&gt;包和&lt;code&gt;unicode/utf8&lt;/code&gt;包提供了编解码工具。&lt;code&gt;utf6.DecodeRuneInString&lt;/code&gt;可以读取一个自然字符的数据，而非一个字节一个字节读取，&lt;code&gt;utf8.RuneCountInString&lt;/code&gt;返回字符串的自然字符长度。幸运的是，&lt;code&gt;range&lt;/code&gt;循环会自动调用utf8解码其中的自然字符。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;unicode/uft8&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;s := &lt;span class=&#34;string&#34;&gt;&amp;quot;Hello, 世界&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fmt.Println(&lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(s)) &lt;span class=&#34;comment&#34;&gt;// 13&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fmt.Println(utf8.RuneCountInString(s) &lt;span class=&#34;comment&#34;&gt;// 9)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;当Go Unicode解析失败时，会使用特殊的Unicode占位符&lt;code&gt;\ufffd&lt;/code&gt;，显示为带有问号的特殊字符。另外，&lt;code&gt;rune[]&lt;/code&gt;可以直接将字符串转成编码后的每个Unicode编码点。这个rune数组进行&lt;code&gt;string()&lt;/code&gt;强制类型转换后即原始字符串。当然你也可以直接&lt;code&gt;string()&lt;/code&gt;装换一个整型数，不合规的整形数会得到上面提到的特殊字符。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;s := &lt;span class=&#34;string&#34;&gt;&amp;quot;世界&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;r := []&lt;span class=&#34;type&#34;&gt;rune&lt;/span&gt;(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fmt.Println(&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;(r))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fmt.Println(&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;65&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fmt.Printlf(&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;12341234&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;字符串和Byte-Slices&#34;&gt;&lt;a href=&#34;#字符串和Byte-Slices&#34; class=&#34;headerlink&#34; title=&#34;字符串和Byte Slices&#34;&gt;&lt;/a&gt;字符串和Byte Slices&lt;/h4&gt;&lt;p&gt;&lt;code&gt;bytes&lt;/code&gt;, &lt;code&gt;strings&lt;/code&gt;, &lt;code&gt;strconv&lt;/code&gt;, &lt;code&gt;unicode&lt;/code&gt;是和string相关的几个包。&lt;code&gt;strings&lt;/code&gt;提供基本的字符串搜索、比较、修改等操作，&lt;code&gt;bytes&lt;/code&gt;提供修改字节数组的一些操作。有时，使用&lt;code&gt;byte.Buffer&lt;/code&gt;类型，在操作字符串字节时会更有效率。&lt;code&gt;strconv&lt;/code&gt;提供了将其他类型转成字符串和修饰字符串的操作函数。&lt;code&gt;unicode&lt;/code&gt;提供了一些以rune为中心的函数，如&lt;code&gt;IsDigit&lt;/code&gt;, &lt;code&gt;IsLetter&lt;/code&gt;, &lt;code&gt;isUpper&lt;/code&gt;等。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// basename removes directory and filename suffix&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;basename&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(s &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	slash := strings.LastIndex(s, &lt;span class=&#34;string&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	s = s[slash+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; dot := strings.LastIndex(s, &lt;span class=&#34;string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;); dot &amp;gt;= &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		s = s[:dot]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; s&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;path&lt;/code&gt;和&lt;code&gt;path/filepath&lt;/code&gt;包提供了更多文件夹和目录的操作函数。&lt;/p&gt;
&lt;p&gt;尽管字符串中的字节序列是不可更改的。&lt;strong&gt;其对应的字节序列数组则是可以自由修改的&lt;/strong&gt;。&lt;code&gt;[]byte(s)&lt;/code&gt;会分配一个字符串&lt;code&gt;s&lt;/code&gt;的字节序列拷贝，也可以对应用&lt;code&gt;string(b)&lt;/code&gt;还原。&lt;code&gt;bytes&lt;/code&gt;包提供的&lt;code&gt;Buffer&lt;/code&gt;类型可以很方便地承载&lt;code&gt;[]byte&lt;/code&gt;类型。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;intsToString&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(values []&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; buf bytes.Buffer&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	buf.WriteByte(&lt;span class=&#34;string&#34;&gt;&amp;#x27;[&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i, v := &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; values &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; i &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			buf.WriteString(&lt;span class=&#34;string&#34;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		fmt.Fprintf(&amp;amp;buf, &lt;span class=&#34;string&#34;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;, v)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	buf.WriteByte(&lt;span class=&#34;string&#34;&gt;&amp;#x27;]&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; buf.String()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上述函数中，&lt;code&gt;WriteString&lt;/code&gt;和&lt;code&gt;WriteByte&lt;/code&gt;用于向Buffer中写入字节或字节序列，该类型还有许多其他应用场景。&lt;/p&gt;
&lt;h4 id=&#34;字符串和整型间的转换&#34;&gt;&lt;a href=&#34;#字符串和整型间的转换&#34; class=&#34;headerlink&#34; title=&#34;字符串和整型间的转换&#34;&gt;&lt;/a&gt;字符串和整型间的转换&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;字符串 -&amp;gt; 整型&lt;/strong&gt;，&lt;code&gt;fmt.Sprintf&lt;/code&gt;或&lt;code&gt;strconv.Itoa&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;整型 -&amp;gt; 字符串&lt;/strong&gt;，&lt;code&gt;strconv.FormatInt&lt;/code&gt;或&lt;code&gt;strconv.FormatUint&lt;/code&gt;或&lt;code&gt;strconv.ParseInt&lt;/code&gt;或&lt;code&gt;Atoi&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;常量&#34;&gt;&lt;a href=&#34;#常量&#34; class=&#34;headerlink&#34; title=&#34;常量&#34;&gt;&lt;/a&gt;常量&lt;/h3&gt;&lt;p&gt;常量有以下几个基本特点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编译时即对编译器可知&lt;/li&gt;
&lt;li&gt;必须是基础类型：boolean，string或number&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;常量使用&lt;code&gt;const&lt;/code&gt;声明，形式看起来和使用&lt;code&gt;var&lt;/code&gt;类似，不过值是常量。对常量进行的所有操作，如数学运算、逻辑运算、比较、内置函数求值，都是在编译期就确定了。&lt;/p&gt;
&lt;p&gt;常量可以组声明，声明时可以不显式声明类型，此时将使用右侧操作数推断常量类型。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	noDelay time.Duration = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	timeout = &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt; * time.Minute&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fmt.Printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%T %[1]v\n&amp;quot;&lt;/span&gt;, noDelay) &lt;span class=&#34;comment&#34;&gt;// &amp;quot;time.Duration 0&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fmt.Printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%T %[1]v\n&amp;quot;&lt;/span&gt;, timeout) &lt;span class=&#34;comment&#34;&gt;// &amp;quot;time.Duration 5m0s&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;还有个不常用的点：组声明时，&lt;strong&gt;除了第一个常量，剩下的常量可以不写右侧操作数&lt;/strong&gt;，此时会使用&lt;strong&gt;上一个常量&lt;/strong&gt;来初始化。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	a = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	b&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	c = &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	d&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;常量生成器iota&#34;&gt;&lt;a href=&#34;#常量生成器iota&#34; class=&#34;headerlink&#34; title=&#34;常量生成器iota&#34;&gt;&lt;/a&gt;常量生成器&lt;code&gt;iota&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;&lt;code&gt;iota&lt;/code&gt;即常量生成器，它从0开始，每次常量声明后加一。利用这个规律可以方便地生成一组常量枚举。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Sunday Weekday = &lt;span class=&#34;literal&#34;&gt;iota&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Monday&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Tuesday&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Wednesday&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Thursday&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Friday&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Saturday&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; _ = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; (&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt; * itoa)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	KB&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	MB&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	GB&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	TB&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	PB&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	EB&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	ZB&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	YB&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;无类型常量&#34;&gt;&lt;a href=&#34;#无类型常量&#34; class=&#34;headerlink&#34; title=&#34;无类型常量&#34;&gt;&lt;/a&gt;无类型常量&lt;/h4&gt;&lt;p&gt;常量和变量不一样的点在，&lt;strong&gt;常量是可以不声明类型的&lt;/strong&gt;，根据常量限定的类型，有下面一些类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无类型整型&lt;/li&gt;
&lt;li&gt;无类型Boolean&lt;/li&gt;
&lt;li&gt;无类型rune&lt;/li&gt;
&lt;li&gt;无类型浮点数&lt;/li&gt;
&lt;li&gt;无类型复数&lt;/li&gt;
&lt;li&gt;无类型字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;常量在使用时，会&lt;strong&gt;隐式&lt;/strong&gt;转换成需要的类型，并在无法转换时抛出错误。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; f &lt;span class=&#34;type&#34;&gt;float64&lt;/span&gt; = &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt; + i &lt;span class=&#34;comment&#34;&gt;// complex -&amp;gt; float64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;f = &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;// integer -&amp;gt; float64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;f = &lt;span class=&#34;number&#34;&gt;1e123&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;// float -&amp;gt; float64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;f = &lt;span class=&#34;string&#34;&gt;&amp;#x27;a&amp;#x27;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;// rune -&amp;gt; float64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;实际上，这些无类型常量有一个隐含类型，如:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无类型整型 -&amp;gt; &lt;code&gt;int&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;无类型浮点数 -&amp;gt; &lt;code&gt;float64&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;无类型复数 -&amp;gt; &lt;code&gt;complex128&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;无类型rune -&amp;gt; &lt;code&gt;int32&lt;/code&gt;（&lt;code&gt;rune&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;聚合类型&#34;&gt;&lt;a href=&#34;#聚合类型&#34; class=&#34;headerlink&#34; title=&#34;聚合类型&#34;&gt;&lt;/a&gt;聚合类型&lt;/h2&gt;&lt;p&gt;基本类型是数据结构的组成“原子”。原子的组合就构成了“分子”——聚合类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;array&lt;/li&gt;
&lt;li&gt;slices&lt;/li&gt;
&lt;li&gt;maps&lt;/li&gt;
&lt;li&gt;structs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中array和structs是聚合类型的基础，它们都有着&lt;strong&gt;固定大小&lt;/strong&gt;。而slice和map则是动态大小。&lt;/p&gt;
&lt;h3 id=&#34;array&#34;&gt;&lt;a href=&#34;#array&#34; class=&#34;headerlink&#34; title=&#34;array&#34;&gt;&lt;/a&gt;array&lt;/h3&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; a [&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;]&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fmt.Println(a[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fmt.Println(f[&lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(a)&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;类似C风格，array表示由0或多个同一类型元素组成的&lt;strong&gt;定长序列&lt;/strong&gt;。声明数组时，需要使用&lt;strong&gt;常量表达式&lt;/strong&gt;作为数组长度。当数组元素全部列出时，可以用&lt;code&gt;...&lt;/code&gt;代替长度。元素未声明初始值时，按零值（zero value）处理。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; q [&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;]&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; = [&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;]&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fmt.Println(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]) &lt;span class=&#34;comment&#34;&gt;// 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;q = [...]&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;另外，当元素较多时，还可以用index到value的键值对形式声明，未声明的值为零值。下面的例子中，&lt;code&gt;r&lt;/code&gt;长度100，除了最后一个元素为-1之外，其余都为0.&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;r := [...]&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&#34;number&#34;&gt;99&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;若数组数组具有可比性，则数组也具有&lt;strong&gt;可比性&lt;/strong&gt;。另外，不同长度的数组是不同类型。&lt;code&gt;[4]int&lt;/code&gt;和&lt;code&gt;[3]int&lt;/code&gt;不是同一类型。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;crypto/sha256&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	c1 := sha256.Sum256(&lt;span class=&#34;string&#34;&gt;&amp;quot;x&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	c2 := sha256.Sum256(&lt;span class=&#34;string&#34;&gt;&amp;quot;X&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	fmt.Printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;\t\n&amp;quot;&lt;/span&gt;, c1 == c2)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Go中将数组作为参数传递时，&lt;strong&gt;传递的是复制的新数组，而不是传入数组的引用&lt;/strong&gt;，这是Go和其他语言不大一样的地方。当然可以通过传入数组指针的方式，实现在函数内修改数组内容。由于数组是定长的，在更多时候，函数参数使用slice类型传入。&lt;/p&gt;
&lt;h3 id=&#34;slice&#34;&gt;&lt;a href=&#34;#slice&#34; class=&#34;headerlink&#34; title=&#34;slice&#34;&gt;&lt;/a&gt;slice&lt;/h3&gt;&lt;p&gt;slice和array类型紧密相关，使用&lt;code&gt;[]T&lt;/code&gt;声明。每个slice的底层都基于一个array。slice只是一个指针指向array中的某一个元素作为开始，除此之外，它还有&lt;code&gt;len&lt;/code&gt;和&lt;code&gt;cap&lt;/code&gt;函数分别用来表示切片长度，和切片最大容量（从切片开始到底层array结尾）。&lt;/p&gt;
&lt;p&gt;因此不同slice可以共享同一个array，它们之间可以相互重叠。&lt;code&gt;s[i:j]&lt;/code&gt;是从创建slice的方式，遵从左闭右开原则，&lt;code&gt;i&lt;/code&gt;和&lt;code&gt;j&lt;/code&gt;均可省略，省略时分别表示0和数组最末尾元素。&lt;strong&gt;创建可以基于一个array变量或一个array指针或其他slice&lt;/strong&gt;。创建超过array范围会引起panic，只超过&lt;code&gt;len(s)&lt;/code&gt;则会拓展这个slice。因为string实际上是&lt;code&gt;[]byte&lt;/code&gt;切片，所以&lt;code&gt;s[i:j]&lt;/code&gt;和&lt;code&gt;substring&lt;/code&gt;是一个意思。&lt;/p&gt;
&lt;p&gt;从上面可以看到，slice即一个指向数组元素的指针，所以传递一个slice时，可以修改底层array的值。下面这个反转数组的函数不限数组长度：&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(s []&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i, j := &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(s)&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;; i &amp;lt; j; i, j = i+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, j&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		s[i], s[j] := s[j], s[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;s := []&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt; ,&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;reverse(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fmt.Println(s) &lt;span class=&#34;comment&#34;&gt;// [5 4 3 2 1]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上面的&lt;code&gt;s&lt;/code&gt;是一个切片字面量，和array的区别在于没有声明长度。这种写法实际上会生成以后面值为全部元素的数组，并把切片指向这个数组。类似地，还可以使用&lt;code&gt;make&lt;/code&gt;创建一个切片。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;([]T, &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;([]T, &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;cap&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;由于切片只是引用，从效率和可理解性上考虑，&lt;strong&gt;切片间不具有可比性&lt;/strong&gt;。不过切片可以和&lt;code&gt;nil&lt;/code&gt;比较，&lt;code&gt;nil&lt;/code&gt;表示空切片，而非“没有元素”的切片。不过Go中slice相关的函数对待这两种切片行为一样。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; s []&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;// s == nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;S = &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;// s == nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;s = []&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt;) &lt;span class=&#34;comment&#34;&gt;// s == nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;s = []&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;#123;&amp;#125; &lt;span class=&#34;comment&#34;&gt;// len(s) == 0, s != nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;append和copy&#34;&gt;&lt;a href=&#34;#append和copy&#34; class=&#34;headerlink&#34; title=&#34;append和copy&#34;&gt;&lt;/a&gt;&lt;code&gt;append&lt;/code&gt;和&lt;code&gt;copy&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;&lt;code&gt;append&lt;/code&gt;函数可以操作slice。如果append之后，slice长度超过了底层array的长度，&lt;code&gt;append&lt;/code&gt;会自动拓展底层array长度。另外，append不仅可以追加单个元素，还可以追加任意个元素，或解构后的slice。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; runes []&lt;span class=&#34;type&#34;&gt;rune&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; _, r := &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Hello, 世界&amp;quot;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	runes = &lt;span class=&#34;built_in&#34;&gt;append&lt;/span&gt;(runes, r)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fmt.Printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%q\n&amp;quot;&lt;/span&gt;, runes)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; x []&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x = &lt;span class=&#34;built_in&#34;&gt;append&lt;/span&gt;(x, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x = &lt;span class=&#34;built_in&#34;&gt;append&lt;/span&gt;(x, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x = &lt;span class=&#34;built_in&#34;&gt;append&lt;/span&gt;(x, x...)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在不借助&lt;code&gt;append&lt;/code&gt;实现类似&lt;code&gt;append&lt;/code&gt;功能时，就需要自己借助&lt;code&gt;cap(x)&lt;/code&gt;和&lt;code&gt;make&lt;/code&gt;完成底层array的长度扩充。如同下面的一段代码。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;appendInt&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(x []&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;, y ...&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; z []&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	zlen := &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(x) + &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(y)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; zlen &amp;lt;= &lt;span class=&#34;built_in&#34;&gt;cap&lt;/span&gt;(x) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		z = x[:zlen]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		zcap := zlen&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; zcap &amp;lt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; * &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(x) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			zcap := &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; * &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(x)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		z = &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;([]&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;, zlen, zcap)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;copy&lt;/span&gt;(z, x)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;copy&lt;/span&gt;(z[&lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(x)], y)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; z&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上面的&lt;code&gt;...&lt;/code&gt;表示剩余参数，&lt;/p&gt;
&lt;p&gt;借助&lt;code&gt;copy&lt;/code&gt;还能实现一些slice的原址操作。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;remove&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(slice []&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;, i &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; []&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;copy&lt;/span&gt;(slice[i:], slice[i+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; slice[:&lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(slice)&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;map&#34;&gt;&lt;a href=&#34;#map&#34; class=&#34;headerlink&#34; title=&#34;map&#34;&gt;&lt;/a&gt;map&lt;/h3&gt;&lt;p&gt;map即键值对，其中&lt;strong&gt;key要求具有可比较性&lt;/strong&gt;。map有两种构造方式：&lt;code&gt;make&lt;/code&gt;或字面量：&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ages := &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;map&lt;/span&gt;[&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;]&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ages := &lt;span class=&#34;keyword&#34;&gt;map&lt;/span&gt;[&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;]&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;Alice&amp;quot;&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;18&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;Bob&amp;quot;&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;27&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;map使用&lt;strong&gt;下标访问&lt;/strong&gt;，使用&lt;code&gt;delete&lt;/code&gt;删除键。另外，&lt;strong&gt;访问不存在的key时，值是&lt;code&gt;value&lt;/code&gt;类型的零值&lt;/strong&gt;。因此可以免去一些多余的初始化步骤。由于map的值并不是变量，所以不能用&lt;code&gt;&amp;amp;&lt;/code&gt;获取地址。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ages[&lt;span class=&#34;string&#34;&gt;&amp;quot;Cindy&amp;quot;&lt;/span&gt;] = &lt;span class=&#34;number&#34;&gt;23&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;delete&lt;/span&gt;(ages, &lt;span class=&#34;string&#34;&gt;&amp;quot;bob&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 新的key&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ages[&lt;span class=&#34;string&#34;&gt;&amp;quot;Dred&amp;quot;&lt;/span&gt;] += &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;// 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;_ := &amp;amp;ages[&lt;span class=&#34;string&#34;&gt;&amp;quot;Cindy&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;map在遍历时，顺序是随机的。因此如果需要确定顺序，需要事先手动排序。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;sort&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; names []&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; name := &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; ages &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	names = &lt;span class=&#34;built_in&#34;&gt;append&lt;/span&gt;(names, name)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sort.Strings(names)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; _, names := &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; names &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	fmt.Printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%s\t%d\n&amp;quot;&lt;/span&gt;, name, ages[name])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;map的&lt;code&gt;delete&lt;/code&gt;，&lt;code&gt;len&lt;/code&gt;，&lt;code&gt;range&lt;/code&gt;和取值操作都可以对零值&lt;code&gt;nil&lt;/code&gt;进行，但是存储到&lt;code&gt;nil&lt;/code&gt;map时会报错。由于访问map不存在的key会返回默认的零值，所以下标操作用第二个参数返回是否对应的key，*且参数通常命名&lt;code&gt;ok&lt;/code&gt;*。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; age, ok := ages[&lt;span class=&#34;string&#34;&gt;&amp;quot;Ed&amp;quot;&lt;/span&gt;]; !ok &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Go中没有&lt;code&gt;set&lt;/code&gt;类型，可以用&lt;code&gt;map[string]bool&lt;/code&gt;等价。当key可能不可比较时（如用slice做key），可以用额外的序列化使用。&lt;/p&gt;
&lt;h3 id=&#34;struct&#34;&gt;&lt;a href=&#34;#struct&#34; class=&#34;headerlink&#34; title=&#34;struct&#34;&gt;&lt;/a&gt;struct&lt;/h3&gt;&lt;p&gt;struct类似ts中的&lt;code&gt;interface&lt;/code&gt;。由&lt;strong&gt;零&lt;/strong&gt;或多个fields组成，每个field使用&lt;strong&gt;点&lt;/strong&gt;来访问。struct和field都是变量，所以可以用&lt;code&gt;&amp;amp;&lt;/code&gt;获取地址。对地址也可以使用点来访问field。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; Employee &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Id &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Name &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Address &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	DoB time.Time&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Position &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Salary &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; e Employee&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;e.Salary = &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;pos := &amp;amp;e.Position&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;*pos = &lt;span class=&#34;string&#34;&gt;&amp;quot;Senior &amp;quot;&lt;/span&gt; + *pos&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;相同类型的两个key可以&lt;strong&gt;在一起声明&lt;/strong&gt;。在Go的struct中，&lt;strong&gt;field的组合和排序都意味着不同的type&lt;/strong&gt;。和包一样，大写的field被导出可被访问，这也是Go的一种通用的设计。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; Employee2 &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Id &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Name, Address &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	DoB time.Time&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Position &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Salary &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;struct类型的field不能自指，但是允许包含自己类型的&lt;strong&gt;指针&lt;/strong&gt;，比如最经典的二叉树场景。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; tree &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	value &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	left, right *tree&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;struct的零值由各field零值组成，不是nil，没有field的空struct写作&lt;code&gt;struct&amp;#123;&amp;#125;&lt;/code&gt;。不携带信息，但可能在有些地方会有用。&lt;/p&gt;
&lt;h4 id=&#34;字面量struct&#34;&gt;&lt;a href=&#34;#字面量struct&#34; class=&#34;headerlink&#34; title=&#34;字面量struct&#34;&gt;&lt;/a&gt;字面量struct&lt;/h4&gt;&lt;p&gt;两种声明方式：&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; Point &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt;&amp;#123; X, Y &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;p := Point&amp;#123;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;anim := git.GIF&amp;#123;LoopCount: nframes&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;将所有fields&lt;strong&gt;按顺序&lt;/strong&gt;声明，struct的fields有任何改动都需要修改，所以通常只在小规模struct以及包内部使用&lt;/li&gt;
&lt;li&gt;使用键值对方式声明，可以省略field，且对顺序不敏感&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，在Go中，所有的函数参数传递都是&lt;strong&gt;传值&lt;/strong&gt;。因此，如果函数内部需要修改struct时，不能传递struct类型，而需要传递指针。由于struct传递指针的场景比较多，所以提供了类似&lt;code&gt;p := &amp;amp;Point&amp;#123;1, 1&amp;#125;&lt;/code&gt;的简写语法糖。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;AwardAnnualPrize&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(e *Employee)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	e.Salary = e.Salary * &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; + &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;如果struct的所有field都具有可比性，则struct也具有可比性，可以比较是否相等。因此，struct在有些情况可以用来作为map的key。&lt;/p&gt;
&lt;h4 id=&#34;struct嵌入与匿名域&#34;&gt;&lt;a href=&#34;#struct嵌入与匿名域&#34; class=&#34;headerlink&#34; title=&#34;struct嵌入与匿名域&#34;&gt;&lt;/a&gt;struct嵌入与匿名域&lt;/h4&gt;&lt;p&gt;匿名域用于struct之间的组合，可以达到&lt;em&gt;类似&lt;/em&gt;类继承的效果。在struct声明中，如果field类型是有名称的，则可以忽略掉field名，得到一个匿名域。匿名域类型或类型内的各field对应用struct可见。有点类似TS中&lt;code&gt;interface&lt;/code&gt;的&lt;code&gt;extends&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; Point &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	X, Y &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; Circle &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Point&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Radius: &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; Wheel &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Circle&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Spokes &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; w Wheel&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;w.X = &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;w.Y = &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;w.Radius = &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;w.Spokes = &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;换种说法，匿名域就是向下访问时可以省去不写的中间域。即使中间域类型是首字母小写不对外可见的，只要剩下域对外可见也可以访问。struct这种&lt;strong&gt;组合&lt;/strong&gt;思想是Go在面向对象上的核心。&lt;/p&gt;
&lt;h3 id=&#34;JSON&#34;&gt;&lt;a href=&#34;#JSON&#34; class=&#34;headerlink&#34; title=&#34;JSON&#34;&gt;&lt;/a&gt;JSON&lt;/h3&gt;&lt;p&gt;编解码JSON数据的方法都位于&lt;code&gt;encoding/json&lt;/code&gt;，其中编解码整块数据的函数分别为&lt;code&gt;json.Marshal&lt;/code&gt;和&lt;code&gt;json.Unmarshal&lt;/code&gt;，前者传入Go数据结构，返回压缩后的JSON字符串，使用&lt;code&gt;json.MarshalIndent&lt;/code&gt;可以返回美化后的JSON字符串。编码时，&lt;strong&gt;只有被导出的域才会出现在JSON字符串中&lt;/strong&gt;。且field之后的&lt;em&gt;field tag&lt;/em&gt;可以作为metadata修改JSON行为，如指定被JSON字符串化之后的key名。或用下面的&lt;code&gt;omitempty&lt;/code&gt;忽略掉零值的key。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; Movie &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Title &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Year &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;`json:&amp;quot;released&amp;quot;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Color &lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;`json:&amp;quot;color,omitempty&amp;quot;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Actors []&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;相反，在解码JSON数据时，需要显式声明struct结构来接收JSON数据。&lt;code&gt;json.Unmarshal&lt;/code&gt;方法的第二个入参即struct的指针。在解析JSON时，对key是不区分大小写的，因此只需要对&lt;code&gt;a_b&lt;/code&gt;类型的JSON key指定&lt;em&gt;field tag&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;对于stream格式的JSON数据，使用&lt;code&gt;json.Encode&lt;/code&gt;和&lt;code&gt;json.Decode&lt;/code&gt;编解码。&lt;/p&gt;
&lt;h3 id=&#34;HTML和文本模板&#34;&gt;&lt;a href=&#34;#HTML和文本模板&#34; class=&#34;headerlink&#34; title=&#34;HTML和文本模板&#34;&gt;&lt;/a&gt;HTML和文本模板&lt;/h3&gt;&lt;p&gt;&lt;code&gt;text/template&lt;/code&gt;和&lt;code&gt;html/template&lt;/code&gt;用于文本模板和HTML模板。它们都使用双花括号包裹带有逻辑的简单语句。其中，&lt;code&gt;html/template&lt;/code&gt;还会默认对文本做escape脱敏处理（对&lt;code&gt;template.HTML&lt;/code&gt;不会escape）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;template.New&lt;/code&gt;创建模板&lt;/li&gt;
&lt;li&gt;&lt;code&gt;template.Funcs&lt;/code&gt;向模板内插入函数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;template.Must&lt;/code&gt;保证模板有内容&lt;/li&gt;
&lt;li&gt;&lt;code&gt;template.Parse&lt;/code&gt;解析模板&lt;/li&gt;
&lt;li&gt;使用模板的&lt;code&gt;Execute&lt;/code&gt;方法生成解析后内容&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; report = template.Must(template.New(&lt;span class=&#34;string&#34;&gt;&amp;quot;issueList&amp;quot;&lt;/span&gt;)).Funcs(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	template.FuncMap(&lt;span class=&#34;string&#34;&gt;&amp;quot;daysAgo&amp;quot;&lt;/span&gt;: daysAgo)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;).Parse(templ)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	result, err := github.SearchIssues(os.Args[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; err != &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		log.Fatal(err)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; err := report.Execute(os.Stdout, result); err != &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		log.Fatal(err)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;函数&#34;&gt;&lt;a href=&#34;#函数&#34; class=&#34;headerlink&#34; title=&#34;函数&#34;&gt;&lt;/a&gt;函数&lt;/h2&gt;&lt;h3 id=&#34;声明-1&#34;&gt;&lt;a href=&#34;#声明-1&#34; class=&#34;headerlink&#34; title=&#34;声明&#34;&gt;&lt;/a&gt;声明&lt;/h3&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;add&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;(x, y &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; (z &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;) &amp;#123; z = x - y; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(x &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;, _ &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; x &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;zero&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;相同类型入参可以聚合&lt;code&gt;x, y int&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;返回值为多个时，需要用&lt;code&gt;()&lt;/code&gt;包裹&lt;/li&gt;
&lt;li&gt;返回值也可以给予变量名，这种情况下，相当于提前为返回值声明变量&lt;/li&gt;
&lt;li&gt;入参是&lt;strong&gt;传值&lt;/strong&gt;，即入参会复制一份传递给函数内部，只有像slice、map、function、channel这种引用实现的类型在函数内改变会影响外部值&lt;/li&gt;
&lt;li&gt;只有函数声明，没有函数体的函数表示函数由其他语言实现，如&lt;code&gt;func Sin(x float64) float64&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;递归&#34;&gt;&lt;a href=&#34;#递归&#34; class=&#34;headerlink&#34; title=&#34;递归&#34;&gt;&lt;/a&gt;递归&lt;/h3&gt;&lt;p&gt;Go的递归和其他语言无异。不同的是，传统语言的函数递归借助&lt;strong&gt;定长的栈&lt;/strong&gt;实现，大小从64KB到2MB不等，而Go使用&lt;strong&gt;变长栈&lt;/strong&gt;实现，避免的栈溢出的情况。&lt;/p&gt;
&lt;h3 id=&#34;多返回值&#34;&gt;&lt;a href=&#34;#多返回值&#34; class=&#34;headerlink&#34; title=&#34;多返回值&#34;&gt;&lt;/a&gt;多返回值&lt;/h3&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Size&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(rect image.Rectangle)&lt;/span&gt;&lt;/span&gt; (width, height &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Go支持同时返回多个返回值。同类型返回值可以压缩，还可以声明有名称的返回值。在多返回值时，还可以直接传递给需要多个入参的函数，&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;log.Println(findLinks(url))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 等同于&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;links, err := findLinks(url)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;log.Println(links, err)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;返回值有名称时，会&lt;strong&gt;作为函数体内最外层变量出现&lt;/strong&gt;。因此，不需要显示&lt;code&gt;return&lt;/code&gt;返回值，这种现象也称为“裸返回”（&lt;em&gt;bare return&lt;/em&gt;）。由于裸返回时，&lt;code&gt;return&lt;/code&gt;后不会跟随返回值，不利于代码可读性，所以只在需要的时候使用它。&lt;/p&gt;
&lt;h3 id=&#34;错误&#34;&gt;&lt;a href=&#34;#错误&#34; class=&#34;headerlink&#34; title=&#34;错误&#34;&gt;&lt;/a&gt;错误&lt;/h3&gt;&lt;p&gt;函数&lt;em&gt;返回&lt;/em&gt;错误在Go中是普遍现象。有时，错误类型只需要有1种，这时通常用&lt;code&gt;bool&lt;/code&gt;类型的&lt;code&gt;ok&lt;/code&gt;表示。如对&lt;code&gt;map&lt;/code&gt;类型的变量的访问。但大多数时候，错误原因可能要有比较多种，这时可以用&lt;code&gt;error&lt;/code&gt;类型的&lt;code&gt;err&lt;/code&gt;表示。&lt;/p&gt;
&lt;p&gt;在Go中较少使用exception表示失败（尽管Go也有exception机制），Go只在真正的bug处，才使用异常打印stack trace信息。在Go中较常出现的是普通的error类型，它只作为普通控制流的一部分。&lt;/p&gt;
&lt;h4 id=&#34;处理策略&#34;&gt;&lt;a href=&#34;#处理策略&#34; class=&#34;headerlink&#34; title=&#34;处理策略&#34;&gt;&lt;/a&gt;处理策略&lt;/h4&gt;&lt;p&gt;error处理由调用方负责，有5种策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;向上传递&lt;/strong&gt;，在没有error时，可以用&lt;code&gt;fmt.Errorf&lt;/code&gt;制造一个自定义错误信息的错误。Go建议仔细设计错误信息内容，&lt;strong&gt;不使用大写字母，不使用换行&lt;/strong&gt;。建议函数的每一层补充上更多信息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;重试&lt;/strong&gt;，在有些场景下，如测试服务端连接&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;退出&lt;/strong&gt;，严重问题时，可以用&lt;code&gt;os.Exit(1)&lt;/code&gt;退出，或者用&lt;code&gt;log.Fatalf&lt;/code&gt;打印错误信息后退出&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;打印日志后继续&lt;/strong&gt;，对于简单问题，可以打印日志后继续流程&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;忽略&lt;/strong&gt;，在特殊情况下，可以直接忽略，如错误确实不会影响功能实现&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go建议是使用函数时考虑错误处理的场景。&lt;/p&gt;
&lt;h4 id=&#34;EOF&#34;&gt;&lt;a href=&#34;#EOF&#34; class=&#34;headerlink&#34; title=&#34;EOF&#34;&gt;&lt;/a&gt;EOF&lt;/h4&gt;&lt;p&gt;EOF（End Of File）是一种特殊的错误类型，&lt;code&gt;io.EOF&lt;/code&gt;表示输入流没有更多内容了。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;in := bufio.NewReader(os.Stdin)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    r, _, err := is.ReadRune()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; err == io.EOF &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;作为值的函数&#34;&gt;&lt;a href=&#34;#作为值的函数&#34; class=&#34;headerlink&#34; title=&#34;作为值的函数&#34;&gt;&lt;/a&gt;作为值的函数&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;这一章很类似JS或TS&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Go中函数是&lt;em&gt;一级成员&lt;/em&gt;。这意味着，它可以作为一种类型，传递给变量、入参或者返回，就像其他值的类型一样。函数是一种引用类型，所以可以为&lt;code&gt;nil&lt;/code&gt;，但是&lt;strong&gt;执行&lt;code&gt;nil&lt;/code&gt;会导致panic&lt;/strong&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; f &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;f(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;) &lt;span class=&#34;comment&#34;&gt;// call of nil panic&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;再次基础上，就可以对函数做更灵活而精准的设计，拆分函数关注点和抽象层次。构造出更灵活的程序。以&lt;code&gt;strings.Map&lt;/code&gt;为例&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;add1&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(r &lt;span class=&#34;type&#34;&gt;rune&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;rune&lt;/span&gt; &amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; r + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fmt.Println(strings.Map(add1, &lt;span class=&#34;string&#34;&gt;&amp;quot;Admin&amp;quot;&lt;/span&gt;)) &lt;span class=&#34;comment&#34;&gt;// Benjo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;匿名函数&#34;&gt;&lt;a href=&#34;#匿名函数&#34; class=&#34;headerlink&#34; title=&#34;匿名函数&#34;&gt;&lt;/a&gt;匿名函数&lt;/h4&gt;&lt;p&gt;Go中只能在包级别声明有名函数，而匿名函数可以在块作用域、函数作用域内声明。因此，&lt;strong&gt;高阶函数&lt;/strong&gt;、&lt;strong&gt;闭包&lt;/strong&gt;等概念Go中也有。由于这些概念JS中也有，这里就不再赘述。&lt;/p&gt;
&lt;h3 id=&#34;循环变量捕获&#34;&gt;&lt;a href=&#34;#循环变量捕获&#34; class=&#34;headerlink&#34; title=&#34;循环变量捕获&#34;&gt;&lt;/a&gt;循环变量捕获&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;JS也有类似问题，不过原因不同&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 一段会有问题的代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; rmdirs []&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; _, dir := &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; tempDirs() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    os.MkdirAll(dir, &lt;span class=&#34;number&#34;&gt;0755&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    rmdirs = &lt;span class=&#34;built_in&#34;&gt;append&lt;/span&gt;(rmdirs, &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        os.RemoveAll(dir)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上面的for循环中，循环变量&lt;code&gt;dir&lt;/code&gt;在&lt;code&gt;append&lt;/code&gt;的回调中有使用，我们回忆一下，for循环中循环变量位于for语句块外，在整个for循环后才销毁。所以这会导致每一个回调执行时，dir都被更新为最新的值。将dir在循环体内再次赋值即可。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; rmdirs []&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; _, dir := &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; tempDirs() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 可以运行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    dir := dir&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    os.MkdirAll(dir, &lt;span class=&#34;number&#34;&gt;0755&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    rmdirs = &lt;span class=&#34;built_in&#34;&gt;append&lt;/span&gt;(rmdirs, &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        os.RemoveAll(dir)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;变长参数&#34;&gt;&lt;a href=&#34;#变长参数&#34; class=&#34;headerlink&#34; title=&#34;变长参数&#34;&gt;&lt;/a&gt;变长参数&lt;/h3&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(vals ...&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    total := &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; _, val := &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; vals &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        total += val&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; total&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;类似JS中的剩余参数，Go中也使用&lt;code&gt;rest ...type&lt;/code&gt;表示函数的剩余入参。rest需要声明类型，rest为slice类型。要注意的是，这种函数和直接传入一个slice参数的函数类型并不一样。另外，在剩余参数类型不明确时，可以用&lt;code&gt;interface&amp;#123;&amp;#125;&lt;/code&gt;表示。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 在变量后使用`...`表示解构&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;val := []&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fmt.Println(sum(values...))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;延迟函数调用（Deferred-Function-Calls）&#34;&gt;&lt;a href=&#34;#延迟函数调用（Deferred-Function-Calls）&#34; class=&#34;headerlink&#34; title=&#34;延迟函数调用（Deferred Function Calls）&#34;&gt;&lt;/a&gt;延迟函数调用（Deferred Function Calls）&lt;/h3&gt;&lt;p&gt;在语句前加上&lt;code&gt;defer&lt;/code&gt;标识符，会让&lt;code&gt;defer&lt;/code&gt;后的&lt;strong&gt;函数调用&lt;/strong&gt;推迟到所在函数的**&lt;code&gt;return&lt;/code&gt;之后**执行。&lt;code&gt;defer&lt;/code&gt;后的函数和表达式会立即求值。&lt;code&gt;defer&lt;/code&gt;的函数调用在函数panic后仍然会被调用。可以用来执行一些释放资源的操作，如以下场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;open和close&lt;/li&gt;
&lt;li&gt;connect和disconnect&lt;/li&gt;
&lt;li&gt;lock和unlock&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; mu sync.Mutex&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; m = &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;map&lt;/span&gt;[&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;]&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;lookup&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(key &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    mu.Lock()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;defer&lt;/span&gt; mu.Unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; m[key]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;最合适的使用时机是在刚刚获得资源之后&lt;/strong&gt;。还可以利用defer完成&lt;em&gt;进入&lt;/em&gt;和&lt;em&gt;离开&lt;/em&gt;函数的成对操作做一些调试。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;bigSlowOperation&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;defer&lt;/span&gt; trace(&lt;span class=&#34;string&#34;&gt;&amp;quot;bigSlowOperation&amp;quot;&lt;/span&gt;)()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    time.Sleep(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt; * time.Second)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;trace&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(msg &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    start := time.Now()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    log.Printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;enter %s&amp;quot;&lt;/span&gt;, msg)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        log.Printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;exit %s (%s)&amp;quot;&lt;/span&gt;, msg, time.Since(start))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;由于defer在函数最后执行的特点，甚至可以在defer中&lt;strong&gt;获取和修改函数返回值&lt;/strong&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;triple&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(x &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; (result &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;defer&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123; result += x &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; double(x)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fmt.Println(triple(&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;)) &lt;span class=&#34;comment&#34;&gt;// &amp;quot;12&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;同时也由于defer的这个特点，在for循环中使用defer一定要谨慎。&lt;/p&gt;
&lt;h3 id=&#34;panic&#34;&gt;&lt;a href=&#34;#panic&#34; class=&#34;headerlink&#34; title=&#34;panic&#34;&gt;&lt;/a&gt;panic&lt;/h3&gt;&lt;p&gt;Go中的panic类似于其他语言的exception，它一般代表程序中存在bug和不应该出现的情况。panic后，正常程序执行停止，&lt;strong&gt;defer的函数被倒序执行&lt;/strong&gt;，然后函数崩溃并带有错误信息。&lt;/p&gt;
&lt;p&gt;除了系统触发的panic，还可以直接通过&lt;code&gt;panic(&amp;quot;certain message&amp;quot;)&lt;/code&gt;手动触发一个panic。一些包中以&lt;strong&gt;Must&lt;/strong&gt;开头的API通常表示，在不符合规范的时候API会panic。&lt;strong&gt;建议只在内部可信任环境下使用这种API&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;recover&#34;&gt;&lt;a href=&#34;#recover&#34; class=&#34;headerlink&#34; title=&#34;recover&#34;&gt;&lt;/a&gt;recover&lt;/h3&gt;&lt;p&gt;就像其他语言中的try catch一样，Go中的panic同样有机制去妥善处理。Go有内置的&lt;code&gt;recover&lt;/code&gt;函数，可以用于在panic中恢复。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;recover&lt;/code&gt;需要在defer的函数中使用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;recover&lt;/code&gt;函数会返回panic的value，在没有panic的情况下，该函数返回&lt;code&gt;nil&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面是一些使用&lt;code&gt;recover&lt;/code&gt;的建议：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不要毫无条件地从panic中recover，这可能会掩盖一些潜在的bug或资源泄露&lt;/li&gt;
&lt;li&gt;在panic后，可以使用&lt;code&gt;runtime.Stack&lt;/code&gt;这样的方法打印一下错误的详细信息，再recover&lt;/li&gt;
&lt;li&gt;可以定义一些外部不可见的类型，在调用panic时传入，在recover返回时判断类型，从而做到针对特定情况panic执行recover，其余情况仍旧panic&lt;/li&gt;
&lt;li&gt;对于预期中的error不使用panic&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;soleTitle&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(doc *html.Node)&lt;/span&gt;&lt;/span&gt; (title &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;, err &lt;span class=&#34;type&#34;&gt;error&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; bailout &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;defer&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt; p := &lt;span class=&#34;built_in&#34;&gt;recover&lt;/span&gt;(); p &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// no panic&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; bailout&amp;#123;&amp;#125;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            err = fmt.Errorf(&lt;span class=&#34;string&#34;&gt;&amp;quot;multiple titles&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;panic&lt;/span&gt;(p) &lt;span class=&#34;comment&#34;&gt;// resume panic&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;方法&#34;&gt;&lt;a href=&#34;#方法&#34; class=&#34;headerlink&#34; title=&#34;方法&#34;&gt;&lt;/a&gt;方法&lt;/h2&gt;&lt;p&gt;Go也有OOP的特性，即&lt;em&gt;对象&lt;/em&gt;上具有&lt;em&gt;方法&lt;/em&gt;，方法需要关联在一个特定类型上。&lt;/p&gt;
&lt;h3 id=&#34;声明-2&#34;&gt;&lt;a href=&#34;#声明-2&#34; class=&#34;headerlink&#34; title=&#34;声明&#34;&gt;&lt;/a&gt;声明&lt;/h3&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;math&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; Point &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt;&amp;#123; X, Y &lt;span class=&#34;type&#34;&gt;float64&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;(p Point)&lt;/span&gt;&lt;/span&gt; Distance(q Point) &lt;span class=&#34;type&#34;&gt;float64&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; math.Hypot(q.X-p.X, q.Y-p.Y)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;声明里，在普通声明的函数名前，增加函数绑定的类型receiver，即完成了方法的声明。Go中没有&lt;code&gt;this&lt;/code&gt;和&lt;code&gt;self&lt;/code&gt;这样的保留字。类型receiver中的变量，即方法可以访问的类型变量。变量名由于会比较常用，所以通常取类型首字母。&lt;/p&gt;
&lt;p&gt;其他方法的行为类似其他OOP语言：诸如方法名和函数名不在一个命名空间，所以可以重名；方法名之间不能重名；&lt;strong&gt;方法名不能和属性名相同&lt;/strong&gt;。由于Go中声明命名类型比较自由，而方法可以很方便绑定在命名类型上，所以可以给基础类型，如数字、字符串等，增加新方法。&lt;/p&gt;
&lt;h3 id=&#34;指针receiver&#34;&gt;&lt;a href=&#34;#指针receiver&#34; class=&#34;headerlink&#34; title=&#34;指针receiver&#34;&gt;&lt;/a&gt;指针receiver&lt;/h3&gt;&lt;p&gt;上面提到，访问方法需要一个receiver。除了变量本身，指针也可以作为receiver。在Go中函数入参都是传值的，也就是传入值的复制。所以除了map、slice这种引用类型，其余类型的值在方法内改变并不会影响到外部。如果需要方法改变receiver本身的话，可以指定将方法绑定在指针类型上。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;(p *Point)&lt;/span&gt;&lt;/span&gt; ScaleBy(factor &lt;span class=&#34;type&#34;&gt;float64&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    p.X *= factor&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    p.Y *= factor&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;t := &amp;amp;Point&amp;#123;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;r.ScaleBy(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fmt.Println(*r)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;通常会规定，如果类型上有方法是指针类型的receiver，所有的方法都需要有一个指针类型receiver。类似struct一节介绍的，如果变量具有类型&lt;code&gt;T&lt;/code&gt;，而方法的receiver是&lt;code&gt;*T&lt;/code&gt;，我们可以直接使用简写的&lt;code&gt;p.ScaleBy(2)&lt;/code&gt;而不需要写成&lt;code&gt;(&amp;amp;p).ScaleBy(2)&lt;/code&gt;。相反地，receiver要求类型&lt;code&gt;T&lt;/code&gt;，变量传入&lt;code&gt;*T&lt;/code&gt;也是可以的。&lt;/p&gt;
&lt;p&gt;但是，直接将字面量传入给指针类型的receiver是不允许的，如&lt;code&gt;Point&amp;#123;1, 2&amp;#125;.ScaleBy(2)&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;Nil是合法的Receiver&#34;&gt;&lt;a href=&#34;#Nil是合法的Receiver&#34; class=&#34;headerlink&#34; title=&#34;Nil是合法的Receiver&#34;&gt;&lt;/a&gt;Nil是合法的Receiver&lt;/h3&gt;&lt;p&gt;Go中，&lt;code&gt;nil&lt;/code&gt;在很多时候是合法的零值。同样也可以作为receiver。当然在你的命名类型中，最好对合法的&lt;code&gt;nil&lt;/code&gt;类型加以说明。Go的内置类型和操作，如slice，map、struct、append、make等也可以正常地处理&lt;code&gt;nil&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;组合和struct-embedding&#34;&gt;&lt;a href=&#34;#组合和struct-embedding&#34; class=&#34;headerlink&#34; title=&#34;组合和struct embedding&#34;&gt;&lt;/a&gt;组合和struct embedding&lt;/h3&gt;&lt;p&gt;在此前的struct一节中，已经介绍了Go的struct embedding设计。这里结合方法继续讨论一下。首先我们先回忆下struct embedding是啥。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;image/color&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; Point &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt;&amp;#123; X, Y &lt;span class=&#34;type&#34;&gt;float64&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; ColoredPoint &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Point&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Color color.RGBA&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; cp ColoredPoint&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cp.X = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fmt.Println(cp.Point.X)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cp.ScaleBy(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fmt.Print;n(cp.Y)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;匿名的field会直接将field类型中的&lt;strong&gt;成员和方法&lt;/strong&gt;都&lt;strong&gt;组合&lt;/strong&gt;（composite）进当前类型中（和TS中的extends有点像）。如上面的&lt;code&gt;ColoredPoint&lt;/code&gt;就直接拥有了&lt;code&gt;Point&lt;/code&gt;的&lt;code&gt;Distance&lt;/code&gt;和&lt;code&gt;ScaleBy&lt;/code&gt;功能（当然也可以访问Point）。Go更希望用&lt;strong&gt;组合&lt;/strong&gt;（composition）而非&lt;strong&gt;派生&lt;/strong&gt;（derivation）构造更复杂的类型。比如，上面的&lt;code&gt;ColoredPoint&lt;/code&gt;并不是一个&lt;code&gt;Point&lt;/code&gt;，并不能当做一个Point访问和使用。&lt;/p&gt;
&lt;p&gt;匿名field如果是指针类型，除了上面的特性，还能实现让两个变量共享一个底层的结构。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; ColoredPoint &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    *Point&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Color color.RGBA&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;p := ColoredPoint&amp;#123;&amp;amp;Point&amp;#123;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&amp;#125;, red&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;q := ColoredPoint&amp;#123;&amp;amp;Point&amp;#123;&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&amp;#125;, blue&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;p.Point = q.Point&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在访问receiver上的方法时，Go首先会去直接声明的field中寻找，然后再去embedded的field中寻找，再向下寻找。方法只能在命名类型和其指针类型上定义，但是借助struct embedding也可以实现，将&lt;strong&gt;功能聚合&lt;/strong&gt;在一起。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    mu sync.Mutex&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    mapping = &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;map&lt;/span&gt;[&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;]&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Lookup&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(key &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    mu.Lock()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    v := mapping[key]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    mu.Unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; v&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 重构后&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; cache = &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sync.Mutex&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    mapping &lt;span class=&#34;keyword&#34;&gt;map&lt;/span&gt;[&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;]&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    mapping: &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;map&lt;/span&gt;[&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;]&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Lookup&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(key &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cache.Lock()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    v := cache.mapping[key]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cache.Unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; v&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上面重写之后的代码表现力明显更好了。&lt;/p&gt;
&lt;h3 id=&#34;方法值（method-value）和方法表达式（method-expression）&#34;&gt;&lt;a href=&#34;#方法值（method-value）和方法表达式（method-expression）&#34; class=&#34;headerlink&#34; title=&#34;方法值（method value）和方法表达式（method expression）&#34;&gt;&lt;/a&gt;方法值（method value）和方法表达式（method expression）&lt;/h3&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;p := Point&amp;#123;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;q := Point&amp;#123;&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;distanceFromP := p.Distance&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fmt.Println(distanceFromP(q))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;time.AfterFunc(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt; * time.Second(), r.Launch)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;p.Distance&lt;/code&gt;会得到一个method value，它是一个绑定到了特定receiver上的一个方法，本身也是一个函数。可以当做函数类型的值用作入参或返回值。这个和JS还比较像。&lt;/p&gt;
&lt;p&gt;类似的，Go中还有method expression的概念。即直接用类型名加点（&lt;code&gt;.&lt;/code&gt;）访问方法得到一个method expression。它也是一个函数，可以&lt;strong&gt;看做是一个没有绑定receiver的方法&lt;/strong&gt;。调用函数时，传入的第一个入参会当做receiver，后续的作为方法入参。这个特性在需要根据情况灵活选择方法时很好用。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;(p Point)&lt;/span&gt;&lt;/span&gt; Add(q Point) Point &amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; Point&amp;#123;p.X + q.X, p.Y + q.Y&amp;#125; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;(p Point)&lt;/span&gt;&lt;/span&gt; Sub(q Point) Point &amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; Point&amp;#123;p.X - q.X, p.Y - q.Y&amp;#125; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; path []Point&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;(path Path)&lt;/span&gt;&lt;/span&gt; TranslateBy(offset Point, add &lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; op &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(p, q Point)&lt;/span&gt;&lt;/span&gt; Point&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; add &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        op = Point.Add&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        op = Point.Sub&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i := &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; path &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        path[i] = op(path[i], offset)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;一个实例：bitset&#34;&gt;&lt;a href=&#34;#一个实例：bitset&#34; class=&#34;headerlink&#34; title=&#34;一个实例：bitset&#34;&gt;&lt;/a&gt;一个实例：bitset&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bytes.Buffer&lt;/code&gt;经常用来拼接字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fmt&lt;/code&gt;的print打印字符串时会调用变量的&lt;code&gt;String&lt;/code&gt;方法&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;封装&#34;&gt;&lt;a href=&#34;#封装&#34; class=&#34;headerlink&#34; title=&#34;封装&#34;&gt;&lt;/a&gt;封装&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;首先，Go的封装细粒度只到package一层，package内不控制可见性&lt;/strong&gt;。所以当你想要控制可见性时，需要用拆分package实现。&lt;/p&gt;
&lt;p&gt;封装用来掩盖不需要像使用者展示的信息和细节。Go中唯一用来控制可见性的手段是一个&lt;strong&gt;大小写约定&lt;/strong&gt;：大写表示从包中导出，小写表示包内可见，对于struct中的field以及类型的method也是如此（包外访问不了，包内随便访问）。通常来讲，&lt;strong&gt;当需要封装对象时，我们都会使用struct&lt;/strong&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 建议&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; IntSet &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    words []&lt;span class=&#34;type&#34;&gt;uint64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 不建议&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; IntSet []&lt;span class=&#34;type&#34;&gt;uint64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;使用struct封装本来就很简单的类型有以下几个原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用方无法修改对象值，这样只用查阅更少的声明，就能得到对象值大致的可能范围&lt;/li&gt;
&lt;li&gt;对使用方掩盖实现细节，可以避免让使用方依赖那些可能改变的内容，也给开发者重构空间，开发者可以在不改变API兼容性的情况下灵活调整内部实现&lt;/li&gt;
&lt;li&gt;避免使用方任意修改对象值，造成更多边缘情况，提高程序编写难度和程序不稳定性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有时，封装也会暴露出一些&lt;strong&gt;getter&lt;/strong&gt;和&lt;strong&gt;setter&lt;/strong&gt;。通常命名上，会直接使用field的首字母大写形式，省去不必要的&lt;code&gt;Get&lt;/code&gt;，&lt;code&gt;Fetch&lt;/code&gt;，&lt;code&gt;Lookup&lt;/code&gt;前缀。实际上，Go并不禁止导出field，只是在有些情况下，导出field会影响代码可靠性。&lt;/p&gt;
&lt;p&gt;封装并不总是必要的。有时，底层数据结构是目标数据结构的&lt;strong&gt;充要表示&lt;/strong&gt;，不多不少，场景变数不多，这时可以不用struct封装。但是，像IntSet这种，实现细节变数多，程序实现稳定性低，需要被保护起来，避免影响使用者。从而要采取封装的方式，把那些变数变得“不透明”。&lt;/p&gt;
&lt;h2 id=&#34;接口（interface）&#34;&gt;&lt;a href=&#34;#接口（interface）&#34; class=&#34;headerlink&#34; title=&#34;接口（interface）&#34;&gt;&lt;/a&gt;接口（interface）&lt;/h2&gt;&lt;p&gt;如其他OOP语言一样，Go中也有用于标识抽象类型的接口描述。不同的是，Go中的接口都是&lt;strong&gt;隐式&lt;/strong&gt;满足的，松耦合。&lt;/p&gt;
&lt;h3 id=&#34;作为约定的接口&#34;&gt;&lt;a href=&#34;#作为约定的接口&#34; class=&#34;headerlink&#34; title=&#34;作为约定的接口&#34;&gt;&lt;/a&gt;作为约定的接口&lt;/h3&gt;&lt;p&gt;之前介绍过的所有类型都是&lt;strong&gt;具体类型&lt;/strong&gt;（concrete type），具体类型指数据表示和行为实现在类型确定后，就已一清二楚。为了保证语言灵活性，Go中还有&lt;strong&gt;接口类型&lt;/strong&gt;（interface type）。这种类型不暴露内在结构和实现细节，而是给出接口输入输出，作为一种&lt;strong&gt;约定&lt;/strong&gt;交由具体实现方完成，从而实现依赖反转（DI）。这一概念的设计上和其他OOP语言无二。不过在使用上，Go并不要求实现方明确依赖关系，只需实现约定即可。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; fmt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Fprintf&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(w io.Writer, format &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;, args ...&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;)&lt;/span&gt;&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;type&#34;&gt;error&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(format &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;, args ...&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;)&lt;/span&gt;&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;type&#34;&gt;error&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; Fprintf(os.Stdout, format, args...)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Sprintf&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(format &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;, args ...&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &amp;#123;&amp;#125;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; buf bytes.Buffer&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Fprintf(&amp;amp;buf, format, args...)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; buf.String()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; io&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; Writer &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...comments&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Write(p []&lt;span class=&#34;type&#34;&gt;byte&lt;/span&gt;) (n &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;, err &lt;span class=&#34;type&#34;&gt;error&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;同样的，实现&lt;code&gt;String&lt;/code&gt;方法也让类型隐式满足了&lt;code&gt;fmt.Stringer&lt;/code&gt;的定义。Go中单方法interface的命名，通常以动词的名词形态为主。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; fmt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; Stringer &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    String() &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;接口中也有类似struct embedding的&lt;strong&gt;嵌入式写法&lt;/strong&gt;，简化interface的组合成本。另外，interface中方法的顺序不影响interface类型。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; io&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; Reader &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Read(p []&lt;span class=&#34;type&#34;&gt;byte&lt;/span&gt;) (n &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;, err &lt;span class=&#34;type&#34;&gt;error&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; Closer &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Close() &lt;span class=&#34;type&#34;&gt;error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; ReadWriter &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Reader&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Writer&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;接口的满足&#34;&gt;&lt;a href=&#34;#接口的满足&#34; class=&#34;headerlink&#34; title=&#34;接口的满足&#34;&gt;&lt;/a&gt;接口的满足&lt;/h3&gt;&lt;p&gt;Go中变量可以是接口类型，在给接口类型变量赋值时，需要检查值的方法是否满足了接口的类型定义，这一点和其他OOP语言相似。要注意，尽管Go有将变量&lt;code&gt;T&lt;/code&gt;转成&lt;code&gt;*T&lt;/code&gt;的隐式转换，但是类型&lt;code&gt;T&lt;/code&gt;的方法和&lt;code&gt;*T&lt;/code&gt;的方法receiver并不同。而通常具体类型中会在接口声明的方法中做一些写操作，因而指定receiver为指针类型，这有可能会导致无法满足接口定义。&lt;/p&gt;
&lt;p&gt;接口覆盖了其包裹的内部类型，所以，&lt;strong&gt;即使内部类型满足其他方法，赋值给接口类型后，也只能方法接口拥有的方法&lt;/strong&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; w io.Writer&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;w = os.Stdout&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;w.Write([]&lt;span class=&#34;type&#34;&gt;byte&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;)) &lt;span class=&#34;comment&#34;&gt;// OK&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;w.Close() &lt;span class=&#34;comment&#34;&gt;// compile error: io.Writer lacks Close method&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Go中还有一个通用的不可或缺的类型&lt;code&gt;interface&amp;#123;&amp;#125;&lt;/code&gt;它表示对类型没有任何要求，同时也意味着该类型变量上无法执行任何操作，类似ts中的&lt;code&gt;Unknown&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; any &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;any = &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;any = &lt;span class=&#34;number&#34;&gt;12.34&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;any = &lt;span class=&#34;string&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;any = &lt;span class=&#34;built_in&#34;&gt;new&lt;/span&gt;(bytes.Buffer)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Go中具体类型对接口类型的满足都是隐式的，无需显式声明。所以一个具体类型可能会同时满足很多接口类型。可以把接口类型认为是将一些具体类型中公共的部分抽象出来的共同行为，将之作为&lt;strong&gt;grouping&lt;/strong&gt;出来的共性。&lt;/p&gt;
&lt;h4 id=&#34;使用flag-Value解析命令行参数&#34;&gt;&lt;a href=&#34;#使用flag-Value解析命令行参数&#34; class=&#34;headerlink&#34; title=&#34;使用flag.Value解析命令行参数&#34;&gt;&lt;/a&gt;使用&lt;code&gt;flag.Value&lt;/code&gt;解析命令行参数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fmt.Sscanf&lt;/code&gt;可以从输入中按格式解析出特定类型参数&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;接口值&#34;&gt;&lt;a href=&#34;#接口值&#34; class=&#34;headerlink&#34; title=&#34;接口值&#34;&gt;&lt;/a&gt;接口值&lt;/h3&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; w io.Writer&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;w = os.Stdout&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;w = &lt;span class=&#34;built_in&#34;&gt;new&lt;/span&gt;(bytes.Buffer)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;w = &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Go中，接口类型可以作为变量的合法类型。接口类型值因此具有&lt;strong&gt;动态类型&lt;/strong&gt;和&lt;strong&gt;动态值&lt;/strong&gt;。在Go中可以近似用类型描述符（type descriptor）表示，其中type表示具体类型，value表示具体值。在初始化时，type和value都是&lt;code&gt;nil&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;        +-----------+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;type    |    nil    |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        +-----------+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;value   |    nil    |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        +-----------+&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;而在第二和第三行，为w赋值为&lt;code&gt;os.Stdout&lt;/code&gt;以及&lt;code&gt;*bytes.Buffer&lt;/code&gt;类型时，type分别会变成&lt;code&gt;os.Stdout&lt;/code&gt;和&lt;code&gt;*bytes.Buffer&lt;/code&gt;，同时value也会被设置为对应初始值的指针。这个过程会完成类似于&lt;code&gt;io.Writer(os.Stdout)&lt;/code&gt;的隐式类型转换。此时访问&lt;code&gt;w&lt;/code&gt;的方法，会被动态分配到value上实现。而在最后又将&lt;code&gt;w&lt;/code&gt;还原为初始值&lt;code&gt;nil&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;接口类型之间&lt;strong&gt;不一定&lt;/strong&gt;可以比较，当接口值都为&lt;code&gt;nil&lt;/code&gt;或接口值对应的具体类型相同以及具体值相同时，接口值相同。然而，如果具体类型不可比较时（如slice，function等），接口类型也不可比较。Go的&lt;code&gt;fmt&lt;/code&gt;中，可以用&lt;code&gt;%T&lt;/code&gt;打印变量类型。&lt;/p&gt;
&lt;h4 id=&#34;陷阱：nil值可以存在于非nil的接口值中&#34;&gt;&lt;a href=&#34;#陷阱：nil值可以存在于非nil的接口值中&#34; class=&#34;headerlink&#34; title=&#34;陷阱：nil值可以存在于非nil的接口值中&#34;&gt;&lt;/a&gt;陷阱：nil值可以存在于非nil的接口值中&lt;/h4&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; debug = &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; buf *bytes.Buffer&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; debug &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        buf = &lt;span class=&#34;built_in&#34;&gt;new&lt;/span&gt;(bytes.Buffer)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    f(buf)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; debug &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(out io.Writer)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; out != &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        out.Write([]&lt;span class=&#34;type&#34;&gt;byte&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;woops!\n&amp;quot;&lt;/span&gt;)) &lt;span class=&#34;comment&#34;&gt;// panic: nil pointer derefence&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在上面的判断中，&lt;code&gt;out&lt;/code&gt;已经有了具体的类型，因此接口类型的&lt;code&gt;out&lt;/code&gt;不等于&lt;code&gt;nil&lt;/code&gt;，然而&lt;code&gt;out&lt;/code&gt;的具体值却是&lt;code&gt;nil&lt;/code&gt;，这使得&lt;code&gt;Write&lt;/code&gt;行为无法保证。解决办法是，在一开始为&lt;code&gt;buf&lt;/code&gt;声明为&lt;code&gt;io.Writer&lt;/code&gt;类型即可。&lt;/p&gt;
&lt;h3 id=&#34;sort-Interface&#34;&gt;&lt;a href=&#34;#sort-Interface&#34; class=&#34;headerlink&#34; title=&#34;sort.Interface&#34;&gt;&lt;/a&gt;&lt;code&gt;sort.Interface&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;Go使用sort包中的&lt;code&gt;sort.Interface&lt;/code&gt;实现排序功能。同时对于常见类型string、int等也有事先封装好的&lt;code&gt;sort.Strings()&lt;/code&gt;，&lt;code&gt;sort.Int()&lt;/code&gt;。对于自定义类型，在实现&lt;code&gt;sort.Interface&lt;/code&gt;接口后，也可使用&lt;code&gt;sort.Sort&lt;/code&gt;排序。接口定义如下：&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; sort&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; Interface &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Len() &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Less(i, j &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;) &lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Swap(i, j &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;三个方法分别用来&lt;strong&gt;返回长度&lt;/strong&gt;、&lt;strong&gt;比较大小&lt;/strong&gt;和&lt;strong&gt;交换顺序&lt;/strong&gt;。这也是排序的几个基本操作。下面给出了字符串排序的内部实现：&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; StringSlice []&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;(s StringSlice)&lt;/span&gt;&lt;/span&gt; Len() &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(s) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;(s StringSlice)&lt;/span&gt;&lt;/span&gt; Less(i, j &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;) &lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt; &amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; p[i] &amp;lt; p[j] &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;(s StringSlice)&lt;/span&gt;&lt;/span&gt; Swap(i, j &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;) &amp;#123; p[i], p[j] = p[j], p[i] &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;在排序struct等复杂类型slice时，建议定义指针类型数组，这样可以让swap时速度更快&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;sort还有一个方便的反向排序方法&lt;code&gt;sort.Reverse&lt;/code&gt;，它借助了struct embedding，用一个内部类型&lt;code&gt;reverse&lt;/code&gt;封装了外部实现接口的类型，另外，直接在&lt;code&gt;reverse&lt;/code&gt;上定义了Less，覆盖了&lt;code&gt;Interface&lt;/code&gt;的实现，从而实现了反向排序：&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; sort&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; reverse &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &amp;#123; Interface &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;(r reverse)&lt;/span&gt;&lt;/span&gt; Less (i, j &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;) &lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt; &amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; r.Interface.Less(j, i) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Reverse&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(i Interface)&lt;/span&gt;&lt;/span&gt; Interface &amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; reverse&amp;#123;i&amp;#125; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sort.Sort(sort.Reverse(byArtist(tracks)))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;除了slice类型外，其他实现了&lt;code&gt;sort.Interface&lt;/code&gt;接口的类型一样可以排序：&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; customSort &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    t []*Track&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    less &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(x, y *Track)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;(x customSort)&lt;/span&gt;&lt;/span&gt; Len() &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(x.t) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;(x customSort)&lt;/span&gt;&lt;/span&gt; Less(i, j &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;) &lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt; &amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; x.less(x.t[i], x.t[j]) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;(x customSort)&lt;/span&gt;&lt;/span&gt; Swap(i, j &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;) &amp;#123; x.t[i], x.t[j] = x.t[j], x.t[i] &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;http-Handler接口&#34;&gt;&lt;a href=&#34;#http-Handler接口&#34; class=&#34;headerlink&#34; title=&#34;http.Handler接口&#34;&gt;&lt;/a&gt;&lt;code&gt;http.Handler&lt;/code&gt;接口&lt;/h3&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; http&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; Handler &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ServeHTTP(w ResponseWriter, r *Request)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ListenAndServe&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(address &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;, h Handler)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;实现了这个接口的可以传递给&lt;code&gt;ListenAndServe&lt;/code&gt;。但通常用不到这种原始的方式。Go的http包提供的&lt;code&gt;ServeMux&lt;/code&gt;类型可以给请求分路，聚合一堆&lt;code&gt;http.Handlers&lt;/code&gt;。写起来像下面这样：&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    db := database&amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;quot;shoe&amp;quot;&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;socks&amp;quot;&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    mux := http.NewServeMux()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    mux.Handle(&lt;span class=&#34;string&#34;&gt;&amp;quot;/list&amp;quot;&lt;/span&gt;, http.HandlerFunc(db.list))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    mux.Handle(&lt;span class=&#34;string&#34;&gt;&amp;quot;/price&amp;quot;&lt;/span&gt;, http.HandlerFunc(db.price))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; database &lt;span class=&#34;keyword&#34;&gt;map&lt;/span&gt;[&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;]&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;(db database)&lt;/span&gt;&lt;/span&gt; list(w http.ResponseWriter, req *http.Request) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; item, price := &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; db &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        fmt.Fprintf(w, &lt;span class=&#34;string&#34;&gt;&amp;quot;%s: %s\n&amp;quot;&lt;/span&gt;, item, price)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;(db database)&lt;/span&gt;&lt;/span&gt; price(w http.ResponseWriter, req *http.Request) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;其中&lt;code&gt;http.HandlerFunc&lt;/code&gt;将传入的函数包裹成了满足&lt;code&gt;Handler&lt;/code&gt;接口的类型。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; http&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; HandlerFunc &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(w ResponseWriter, r *Request)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;(f HandlerFunc)&lt;/span&gt;&lt;/span&gt; ServeHTTP(w ResponseWriter, r *Request) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    f(w, r)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;对于上面的使用还是要写一些模板代码，对此可以将&lt;code&gt;mux.Handler&lt;/code&gt;简写成&lt;code&gt;mux.HandlerFunc(&amp;quot;list&amp;quot;, db.list)&lt;/code&gt;。可以再减少一点代码。实际上，http还提供了一个全局的&lt;code&gt;ServeMux&lt;/code&gt;对象实例&lt;code&gt;DefaultServeMux&lt;/code&gt;，不需要手动创建。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    db := database&amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;quot;shoes&amp;quot;&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;socks&amp;quot;&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    http.HandlerFunc(&lt;span class=&#34;string&#34;&gt;&amp;quot;/list&amp;quot;&lt;/span&gt;, db.list)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    http.HandlerFunc(&lt;span class=&#34;string&#34;&gt;&amp;quot;/price&amp;quot;&lt;/span&gt;, db.price)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    log.Fatal(http.ListenAndServe(&lt;span class=&#34;string&#34;&gt;&amp;quot;localhost:8000&amp;quot;&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;go中每一个handler都在一个单独的goroutine上，要妥善处理好并发的情况。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;error接口&#34;&gt;&lt;a href=&#34;#error接口&#34; class=&#34;headerlink&#34; title=&#34;error接口&#34;&gt;&lt;/a&gt;&lt;code&gt;error&lt;/code&gt;接口&lt;/h3&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Error() &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;error&lt;/code&gt;类型实现了&lt;code&gt;error&lt;/code&gt;接口。整个&lt;code&gt;errors&lt;/code&gt;包都围绕这个接口设计，除了&lt;code&gt;errors.New()&lt;/code&gt;方法，还可以直接通过&lt;code&gt;fmt.Errorf&lt;/code&gt;返回一个格式化后的error值。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; errors&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;New&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(text &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;error&lt;/span&gt; &amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;amp;errorString&amp;#123;text&amp;#125; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; errorString &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &amp;#123; text &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;(e *errorString)&lt;/span&gt;&lt;/span&gt; Error() &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt; &amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; e.text &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; fmt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;errors&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Errorf&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(format &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;, arags ...&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;error&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; errors.New(Sprintf(format, args...))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;简单的数学表达式求值器&#34;&gt;&lt;a href=&#34;#简单的数学表达式求值器&#34; class=&#34;headerlink&#34; title=&#34;简单的数学表达式求值器&#34;&gt;&lt;/a&gt;简单的数学表达式求值器&lt;/h3&gt;&lt;p&gt;递归的AST解析&lt;/p&gt;
&lt;p&gt;略。&lt;/p&gt;
&lt;h3 id=&#34;类型断言&#34;&gt;&lt;a href=&#34;#类型断言&#34; class=&#34;headerlink&#34; title=&#34;类型断言&#34;&gt;&lt;/a&gt;类型断言&lt;/h3&gt;&lt;p&gt;类型断言（type assertion），写作&lt;code&gt;x.(T)&lt;/code&gt;，通常用来将动态类型限定到更严格的类型。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;T&lt;/code&gt;是具体类型时，会判断&lt;code&gt;x&lt;/code&gt;类型是否和&lt;code&gt;T&lt;/code&gt;&lt;strong&gt;一致&lt;/strong&gt;，是则将&lt;code&gt;x&lt;/code&gt;类型设置为&lt;code&gt;T&lt;/code&gt;，否则&lt;code&gt;panic&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;T&lt;/code&gt;是抽象类型interface时，会判断&lt;code&gt;x&lt;/code&gt;是否&lt;strong&gt;满足&lt;/strong&gt;&lt;code&gt;T&lt;/code&gt;接口，是则将&lt;code&gt;x&lt;/code&gt;类型设置为接口&lt;code&gt;T&lt;/code&gt;，否则panic&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; w io.Writer&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;w = os.Stdout&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;f := w.(*os.File)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;c := w.(*bytes.Buffer) &lt;span class=&#34;comment&#34;&gt;// panic&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;w = &lt;span class=&#34;built_in&#34;&gt;new&lt;/span&gt;(ByteCounter)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rw := w.(io.ReadWriter) &lt;span class=&#34;comment&#34;&gt;// panic&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;当对&lt;code&gt;nil&lt;/code&gt;进行类型断言时时，断言一定失败&lt;/strong&gt;。另外，类型断言可以支持第二个返回参数&lt;code&gt;ok&lt;/code&gt;表示是否成功，此时不会panic。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; w, ok := w.(*os.File); ok &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...use w...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;应用：错误类型区分&#34;&gt;&lt;a href=&#34;#应用：错误类型区分&#34; class=&#34;headerlink&#34; title=&#34;应用：错误类型区分&#34;&gt;&lt;/a&gt;应用：错误类型区分&lt;/h4&gt;&lt;p&gt;借助类型断言，可以将判断抛出的具体错误类型，&lt;code&gt;os&lt;/code&gt;包提供了&lt;code&gt;IsExist&lt;/code&gt;，&lt;code&gt;isNotExist&lt;/code&gt;，&lt;code&gt;isPermission&lt;/code&gt;用来区分文件已存在，文件不存在，不允许几种错误。我们以文件不存在为例，此时抛出的&lt;code&gt;PathError&lt;/code&gt;类型错误包含了具体的错误类型。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; PathError &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Op &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Path &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Err &lt;span class=&#34;type&#34;&gt;error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 满足Error接口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;(e *PathError)&lt;/span&gt;&lt;/span&gt; Error() &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; e.Op + &lt;span class=&#34;string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt; + e.Path + &lt;span class=&#34;string&#34;&gt;&amp;quot;: &amp;quot;&lt;/span&gt; + e.Err.Error()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;_, err := os.Open(&lt;span class=&#34;string&#34;&gt;&amp;quot;/no/such/path&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fmt.Printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%#v\n&amp;quot;&lt;/span&gt;, err)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Output: &amp;amp;os.PathError&amp;#123;Op:&amp;quot;open&amp;quot;, Path:&amp;quot;/no/such/path&amp;quot;, Err:0x2&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;使用断言后，就可以从&lt;code&gt;err&lt;/code&gt;中拿到具体错误类型，从而判断是否是文件不存在导致的：&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;errors&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;syscall&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;IsNotExist&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(err &lt;span class=&#34;type&#34;&gt;error&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; pe, ok := err.(*PathError); ok &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        err = pe.Err&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; err == syscall.ENOENT || err == ErrNotExist&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;另外，建议在错误抛出时就进行检测，在聚合后，原始错误的数据结构可能会丢失从而无法判断。&lt;/p&gt;
&lt;h4 id=&#34;方法查询&#34;&gt;&lt;a href=&#34;#方法查询&#34; class=&#34;headerlink&#34; title=&#34;方法查询&#34;&gt;&lt;/a&gt;方法查询&lt;/h4&gt;&lt;p&gt;抽象类型如&lt;code&gt;io.Writer&lt;/code&gt;可能缺少使用者需要的方法如&lt;code&gt;io.WriteString&lt;/code&gt;（尽管满足&lt;code&gt;io.Writer&lt;/code&gt;的大多数具体类型除了必须满足的&lt;code&gt;Write&lt;/code&gt;方法外，都对写入字符串支持了&lt;code&gt;WriteString&lt;/code&gt;方法）。&lt;/p&gt;
&lt;p&gt;可以定义一个临时接口类型，判断满足抽象类型的变量是否具有指定方法。因为Go中接口的满足是隐式的（类似鸭子类型），不像许多强类型语言一样，需要显式声明。之前使用弱类型语言的可能能很好接受。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;writeString&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(w io.Writer, s &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; (n &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;, err &lt;span class=&#34;type&#34;&gt;error&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; stringWriter &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        WriteString(&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;) (n &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;, err &lt;span class=&#34;type&#34;&gt;error&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; sw, ok := w.(stringWriter); ok &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; sw.WriteString(s) &lt;span class=&#34;comment&#34;&gt;// 更有效率的方案&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; w.Write([]&lt;span class=&#34;type&#34;&gt;byte&lt;/span&gt;(s))  &lt;span class=&#34;comment&#34;&gt;// 兜底方案&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;实际上，&lt;code&gt;fmt.Sprintf&lt;/code&gt;打印不同类型的变量时，也借助了类型断言，对于特定类型调用特定方法，最后再使用&lt;strong&gt;反射&lt;/strong&gt;处理其他类型。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; fmt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;formatOnValue&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(x &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; err, ok := x.(&lt;span class=&#34;type&#34;&gt;error&lt;/span&gt;); ok &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; err.Error()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; str, ok := x.(Stringer); ok &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; str.String()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Type-switch&#34;&gt;&lt;a href=&#34;#Type-switch&#34; class=&#34;headerlink&#34; title=&#34;Type switch&#34;&gt;&lt;/a&gt;Type switch&lt;/h3&gt;&lt;p&gt;interface除了之前说的&lt;strong&gt;让多个具体类型有一致表现&lt;/strong&gt;的用法外，还可以作为&lt;strong&gt;可区分具体类型的合集&lt;/strong&gt;来使用。这种时候需要结合type switch的用法。如下所示：&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt; x.(&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt;: &lt;span class=&#34;comment&#34;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;type&#34;&gt;uint&lt;/span&gt;: &lt;span class=&#34;comment&#34;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt;: &lt;span class=&#34;comment&#34;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;: &lt;span class=&#34;comment&#34;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt;: &lt;span class=&#34;comment&#34;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;通常在确定了&lt;code&gt;x&lt;/code&gt;的类型后，还需要直接使用&lt;code&gt;x&lt;/code&gt;。此时可以写作&lt;code&gt;switch x:= x.(type)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这种用法和之前的用法不同在于：这里接口不作为有&lt;strong&gt;一致表现&lt;/strong&gt;而存在，它只是用来暂存将要区分开的具体类型，而这些具体类型往往时有&lt;strong&gt;不同表现&lt;/strong&gt;的。所以这种用法里的接口&lt;strong&gt;几乎没有方法&lt;/strong&gt;。换一种说法，之前的用法里，接口背后的具体类型细节需要被掩盖来使用，而这里需要使用具体类型的细节。&lt;/p&gt;
&lt;h3 id=&#34;一些忠告&#34;&gt;&lt;a href=&#34;#一些忠告&#34; class=&#34;headerlink&#34; title=&#34;一些忠告&#34;&gt;&lt;/a&gt;一些忠告&lt;/h3&gt;&lt;p&gt;和上一章方法类似，接口是一种很好使用的面向对象的特性。但&lt;strong&gt;不建议上来就从定义一堆接口&lt;/strong&gt;开始，这样通常会产生一大堆只有一个具体类型实现的接口。接口是抽象类型，是通过具体类型抽象得来的。通常是在&lt;strong&gt;需要用统一的方式处理不同类型&lt;/strong&gt;时，拿来使用。&lt;/p&gt;
&lt;p&gt;同时，大多数Go程序中，接口往往小且包含比较少的方法。像是&lt;code&gt;io.Writer&lt;/code&gt;或&lt;code&gt;fmt.Stringer&lt;/code&gt;。和方法一章一样，它们虽然是面向对象的特性，但是不是Go中一定要使用的语言特性。只在需要的时候使用。大多数时候，直接使用函数就足够了。在书中，方法如&lt;code&gt;input.Write&lt;/code&gt;的使用就远不如函数如&lt;code&gt;fmt.Printf&lt;/code&gt;来得频繁。&lt;/p&gt;
&lt;h2 id=&#34;goroutine和信道&#34;&gt;&lt;a href=&#34;#goroutine和信道&#34; class=&#34;headerlink&#34; title=&#34;goroutine和信道&#34;&gt;&lt;/a&gt;goroutine和信道&lt;/h2&gt;&lt;p&gt;Go支持两种并发编程的风格，第一种在本章介绍，通过goroutines和channels支持&lt;strong&gt;通信顺序进程（Communicating sequential processes，CSP）&lt;/strong&gt;，这种情况下，值会在goroutine间来回传递，而变量在多数情况下被限制自单个活动中。下一章介绍的共享变量风格的并发编程更接近传统的并发风格。&lt;/p&gt;
&lt;h3 id=&#34;认识goroutine&#34;&gt;&lt;a href=&#34;#认识goroutine&#34; class=&#34;headerlink&#34; title=&#34;认识goroutine&#34;&gt;&lt;/a&gt;认识goroutine&lt;/h3&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;go&lt;/span&gt; spinner(&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt; * time.Millisecond)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; n = &lt;span class=&#34;number&#34;&gt;45&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fibN := fib(n) &lt;span class=&#34;comment&#34;&gt;// slow&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fmt.Printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;\rFibonacci(%d) = %d\n&amp;quot;&lt;/span&gt;, n, fibN)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;spinner&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(delay time.Duration)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; _, r = &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;`-\|/`&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            fmt.Printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;\r%c&amp;quot;&lt;/span&gt;, r)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            time.Sleep(delay)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;fib&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(x &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; x &amp;lt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; x&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; fib(x&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;) + fib(x&lt;span class=&#34;number&#34;&gt;-2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;goroutine类似线程，有着定量而非定性的差异&lt;/li&gt;
&lt;li&gt;&lt;code&gt;main&lt;/code&gt;函数也会启动一个&lt;em&gt;main goroutine&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;goroutine通过&lt;code&gt;go&lt;/code&gt;启动一个函数或方法调用，并在声明后立即返回&lt;/li&gt;
&lt;li&gt;除了&lt;code&gt;main&lt;/code&gt;函数返回或程序结束（&lt;code&gt;os.Exit&lt;/code&gt;）外，一个goroutine没有办法直接停止另一个，但可以通过传值的方式间接实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;简单示例&#34;&gt;&lt;a href=&#34;#简单示例&#34; class=&#34;headerlink&#34; title=&#34;简单示例&#34;&gt;&lt;/a&gt;简单示例&lt;/h3&gt;&lt;p&gt;服务器处理请求是最典型的并发场景。&lt;/p&gt;
&lt;h4 id=&#34;1-Clock-Server&#34;&gt;&lt;a href=&#34;#1-Clock-Server&#34; class=&#34;headerlink&#34; title=&#34;1. Clock Server&#34;&gt;&lt;/a&gt;1. Clock Server&lt;/h4&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;io&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;log&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;net&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    listener, err := net.Listen(&lt;span class=&#34;string&#34;&gt;&amp;quot;tcp&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;localhost:8000&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; err != &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        log.Fatal(err)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        conn, err := listener.Accept()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; err != &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            log.Print(err)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        handleConn(conn) &lt;span class=&#34;comment&#34;&gt;// go handleConn(conn)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;handleConn&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(c net.Conn)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;defer&lt;/span&gt; c.Close()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        _, err := io.WriteString(c, time.Now().Format(&lt;span class=&#34;string&#34;&gt;&amp;quot;15:04:05\n&amp;quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; err != &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;// e.g. client disconnect&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        time.Sleep(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; * time.Second)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;listener.Accept&lt;/code&gt;会在接收到TCP连接请求前一直阻塞&lt;/li&gt;
&lt;li&gt;&lt;code&gt;time.Format&lt;/code&gt;方法通过一个&lt;strong&gt;特殊的样例&lt;/strong&gt;（15:04:05）表示要格式化的格式，&lt;code&gt;time.Parse&lt;/code&gt;也是如此&lt;/li&gt;
&lt;li&gt;client端可以用&lt;code&gt;net.Dial&lt;/code&gt;发起一个TCP连接请求&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上述的服务端是&lt;strong&gt;串行&lt;/strong&gt;处理client的请求，并每秒打印当前时间，在&lt;code&gt;handleConn(conn)&lt;/code&gt;前加上&lt;code&gt;go&lt;/code&gt;关键字后，即可让服务端&lt;strong&gt;并行&lt;/strong&gt;处理client的请求。&lt;/p&gt;
&lt;h4 id=&#34;2-Echo-Server&#34;&gt;&lt;a href=&#34;#2-Echo-Server&#34; class=&#34;headerlink&#34; title=&#34;2. Echo Server&#34;&gt;&lt;/a&gt;2. Echo Server&lt;/h4&gt;&lt;p&gt;上面的例子是在一个连接中使用一个goroutine，当然每个连接也可以创建多个goroutine。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// server&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;echo&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(c net.Conn, shout &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;, delay time.Duration)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fmt.Fprintln(c, &lt;span class=&#34;string&#34;&gt;&amp;quot;\t&amp;quot;&lt;/span&gt;, strings.ToUpper(shout))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    time.Sleep(delay)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fmt.Fprintln(c, &lt;span class=&#34;string&#34;&gt;&amp;quot;\t&amp;quot;&lt;/span&gt;, shout)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    time.Sleep(delay)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fmt.Fprintln(c, &lt;span class=&#34;string&#34;&gt;&amp;quot;\t&amp;quot;&lt;/span&gt;, strings.ToLower(shout))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;handleConn&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(c net.Conn)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    input := bufio.NewScanner(c)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; input.Scan() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        echo(c, input.Text(), &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;*time.Second) &lt;span class=&#34;comment&#34;&gt;// go echo(...)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    c.Close()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// client&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    conn, err := net.Dial(&lt;span class=&#34;string&#34;&gt;&amp;quot;tcp&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;localhost:8000&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; err != &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        log.Fatal(err)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;defer&lt;/span&gt; conn.Close()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;go&lt;/span&gt; mustCopy(os.Stdout, conn)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    mustCopy(conn, os.Stdin)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在&lt;code&gt;echo&lt;/code&gt;前加上&lt;code&gt;go&lt;/code&gt;即可让服务器同时相应多个请求，返回“回声”。同理，在client端打印服务端返回的代码前加上&lt;code&gt;go&lt;/code&gt;即可让使用者输入的同时打印返回的“回声”。&lt;/p&gt;
&lt;h3 id=&#34;信道（channel）&#34;&gt;&lt;a href=&#34;#信道（channel）&#34; class=&#34;headerlink&#34; title=&#34;信道（channel）&#34;&gt;&lt;/a&gt;信道（channel）&lt;/h3&gt;&lt;p&gt;&lt;code&gt;go&lt;/code&gt;启动并行的活动，信道作为活动间通信的通道，借助它可以发送和接收消息。信道通过&lt;code&gt;make&lt;/code&gt;构造，需要指定传输消息的类型，作为信道类型。可以使用&lt;code&gt;close&lt;/code&gt;关闭信道。后续的&lt;strong&gt;发送&lt;/strong&gt;操作会panic，&lt;strong&gt;接收&lt;/strong&gt;操作会得所有到已发送的值，而再之后的后续&lt;strong&gt;接收&lt;/strong&gt;操作只能得到信道类型对应的&lt;em&gt;零值&lt;/em&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ch := &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ch &amp;lt;- x&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x = &amp;lt;-ch&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 直接丢弃channel来的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;-ch&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;close&lt;/span&gt;(ch)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;信道还分为有缓冲区和无缓冲区两种类型，上述的&lt;code&gt;make&lt;/code&gt;构造的都是无缓冲区的信道，指定第二个参数可以构造有缓冲区的信道。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ch = &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;) &lt;span class=&#34;comment&#34;&gt;// 无缓冲区&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ch = &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &lt;span class=&#34;comment&#34;&gt;// 无缓冲区&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ch = &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;) &lt;span class=&#34;comment&#34;&gt;// 有缓冲区&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;无缓冲信道（Unbuffered-Channels）&#34;&gt;&lt;a href=&#34;#无缓冲信道（Unbuffered-Channels）&#34; class=&#34;headerlink&#34; title=&#34;无缓冲信道（Unbuffered Channels）&#34;&gt;&lt;/a&gt;无缓冲信道（Unbuffered Channels）&lt;/h4&gt;&lt;p&gt;向无缓冲区&lt;strong&gt;发送消息&lt;/strong&gt;会&lt;strong&gt;阻塞发送所在的goroutine&lt;/strong&gt;，直到对应的goroutine在同一个信道上执行接收操作。相反地，&lt;strong&gt;接收消息&lt;/strong&gt;在先的话，也会阻塞直到同一个信道上执行了发送操作。这种机制会&lt;strong&gt;同步&lt;/strong&gt;两个goroutine的执行进度。如果发送信息在先，则接收信息会在发送所在的goroutine之前发生。从而，我们可以基于这个假设的前提保证一些事实。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    conn, err := net.Dial(&lt;span class=&#34;string&#34;&gt;&amp;quot;tcp&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;localhost:8000&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; err != &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        log.Fatal(err)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    done := &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        io.Copy(os.Stdout, conn)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        log.Println(&lt;span class=&#34;string&#34;&gt;&amp;quot;done&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        done &amp;lt;- &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;&amp;#123;&amp;#125; &lt;span class=&#34;comment&#34;&gt;// signal the main goroutine&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    mustCopy(conn, os.Stdin)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    conn.Close()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;-done &lt;span class=&#34;comment&#34;&gt;// wait for background goroutine to finish&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上述程序里，会在接收完服务端返回后，才会关闭客户端。这里需要的是一个&lt;strong&gt;事件&lt;/strong&gt;，使用的信道类型其实并不重要，所以使用了&lt;code&gt;struct&amp;#123;&amp;#125;&lt;/code&gt;。实际应用中会使用&lt;code&gt;bool&lt;/code&gt;或是&lt;code&gt;int&lt;/code&gt;这样的简单类型。&lt;/p&gt;
&lt;h4 id=&#34;流水线&#34;&gt;&lt;a href=&#34;#流水线&#34; class=&#34;headerlink&#34; title=&#34;流水线&#34;&gt;&lt;/a&gt;流水线&lt;/h4&gt;&lt;p&gt;借助上面提到的无缓冲区信道，可以实现多个goroutine之间的接续传递，也可以叫做&lt;em&gt;流水线&lt;/em&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;+-----------+         +-----------+         +-----------+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|  Counter  |   --&amp;gt;   |  Squarer  |   --&amp;gt;   |  Printer  |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+-----------+         +-----------+         +-----------+&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    naturals: &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    squares: &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Counter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; x := &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; x &amp;lt; &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt; ;x++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            naturals &amp;lt;- x&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;close&lt;/span&gt;(naturals)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Squarer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            x := &amp;lt;-naturals&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            squares &amp;lt;- x * x&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        fmt.Println(&amp;lt;-squares)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上面的流水线中，Counter在打印100个自然数后，会关闭信道。会有之前所说的一些特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;向关闭信道写入消息会panic&lt;/li&gt;
&lt;li&gt;从关闭信道读取信息会得到所有未发送的消息，再之后只能得到零值&lt;/li&gt;
&lt;li&gt;关闭信道不会影响其他goroutine执行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以在上面的程序中，Printer会继续打印0，只有Counter正常退出。Go中没有&lt;em&gt;直接&lt;/em&gt;的获取信道是否关闭的方法，但是对于从信道中读取消息有第二个&lt;code&gt;ok&lt;/code&gt;参数，为&lt;code&gt;false&lt;/code&gt;时表示信道已关闭且&lt;strong&gt;读取完所有消息&lt;/strong&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;x, ok := naturals&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; !ok &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上面的模板代码，go用&lt;code&gt;range&lt;/code&gt;已封装好，不必重复书写。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; x := &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; naturals &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        squares &amp;lt;- x * x&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; x := &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; squares &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fmt.Println(x)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;不是所有信道在不用后都要显式关闭&lt;/strong&gt;，只在需要传达信道关闭信息时再手动&lt;code&gt;close&lt;/code&gt;关闭。其余的信道会在gc过程中回收。但这不意味着文件读取也可以不显式关闭：文件的读写操作后一定要执行关闭操作。关闭一个已关闭的信道会panic，关闭&lt;code&gt;nil&lt;/code&gt;的信道也是一样。&lt;/p&gt;
&lt;h4 id=&#34;单向信道&#34;&gt;&lt;a href=&#34;#单向信道&#34; class=&#34;headerlink&#34; title=&#34;单向信道&#34;&gt;&lt;/a&gt;单向信道&lt;/h4&gt;&lt;p&gt;以上一小节为例，有三个goroutine，函数签名如下：&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;counter&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(out &lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;squarer&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(out, in &lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;printer&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(in &lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;其中的信道入参分别用来&lt;strong&gt;接收&lt;/strong&gt;&lt;em&gt;或&lt;/em&gt;&lt;strong&gt;发送&lt;/strong&gt;消息（绝大多数信道也是如此）。因此对于这两种信道的细分，go类型系统提供了&lt;strong&gt;单向信道类型&lt;/strong&gt;，即只读或只写。同时提供了类型助记符：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;chan&amp;lt;-&lt;/code&gt;表示只读，只可读取消息，不可关闭&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;-chan&lt;/code&gt;表示只写，只可发送消息&lt;strong&gt;和关闭&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;违背只读只写上述规则，会在编译期间抛出错误。同时，&lt;strong&gt;双向信道可以隐式covert到单向信道，反之不可以&lt;/strong&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    naturals := &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    squares := &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;go&lt;/span&gt; counter(naturals)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;go&lt;/span&gt; squarer(squares, naturals)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    printer(squares)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;缓冲信道（Buffered-Channel）&#34;&gt;&lt;a href=&#34;#缓冲信道（Buffered-Channel）&#34; class=&#34;headerlink&#34; title=&#34;缓冲信道（Buffered Channel）&#34;&gt;&lt;/a&gt;缓冲信道（Buffered Channel）&lt;/h4&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ch = &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;可以用队列类别缓冲信道，不同的是缓冲信道和goroutine是紧密相连的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;写操作会在&lt;strong&gt;队列充满&lt;/strong&gt;时阻塞&lt;/li&gt;
&lt;li&gt;读操作会在&lt;strong&gt;队列为空&lt;/strong&gt;时阻塞&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过&lt;code&gt;cap&lt;/code&gt;和&lt;code&gt;len&lt;/code&gt;可以查看缓冲信道的实时容量和长度。虽然缓冲信道可以按队列去理解，但是不要把它拿去当队列来用。那么和无缓冲信道相比，缓冲信道应用场景有什么不同呢？&lt;/p&gt;
&lt;p&gt;我们用流水线举例，流水线上的各道工序复杂程度有难有易，如果工作空间有限，每一道工序后都需要在下一道工序空闲时才能交付，一些简单工序就需要等待。这时就像&lt;strong&gt;无缓冲信道&lt;/strong&gt;。假设工作空间宽裕，每道工序完成后，如果下游还未就绪，可以先放在空闲空间下，直接继续工作。这就是&lt;strong&gt;缓冲信道&lt;/strong&gt;，多出来的工作空间即&lt;strong&gt;缓冲区&lt;/strong&gt;，工序即&lt;strong&gt;goroutine&lt;/strong&gt;。缓冲区可以弥补上下游工序工作效率的&lt;em&gt;些微差异&lt;/em&gt;，缓冲区越大，可以容忍的效率差异就越大。如果工序间有明显差异，比如始终更快或更慢，此时增加缓冲区无法提供帮助，可以采用增加工序工人来提高工作效率，即&lt;strong&gt;在同一信道上使用更多goroutine&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;从上面的比喻，可以得出两种信道的区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无缓冲信道重点在&lt;strong&gt;同步&lt;/strong&gt;，它可以确保上下游goroutine的同步性&lt;/li&gt;
&lt;li&gt;缓冲信道则使用了队列来&lt;strong&gt;解耦&lt;/strong&gt;上下游goroutine，使之不因为阻塞影响工作效率&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以，我们假设有多个网站&lt;em&gt;镜像&lt;/em&gt;来为网络请求提供服务，就可以使用缓冲信道，优先响应的可以直接提供服务，且在响应后可以继续工作。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;mirroredQuery&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    responses := &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123; responses &amp;lt;- request(&lt;span class=&#34;string&#34;&gt;&amp;quot;asia.gopl.io&amp;quot;&lt;/span&gt;) &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123; responses &amp;lt;- request(&lt;span class=&#34;string&#34;&gt;&amp;quot;europe.gopl.io&amp;quot;&lt;/span&gt;) &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123; responses &amp;lt;- request(&lt;span class=&#34;string&#34;&gt;&amp;quot;america.gopl.io&amp;quot;&lt;/span&gt;) &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;lt;-responses&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(hostname &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; (res &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;) &amp;#123; &lt;span class=&#34;comment&#34;&gt;/* ... */&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;并行循环&#34;&gt;&lt;a href=&#34;#并行循环&#34; class=&#34;headerlink&#34; title=&#34;并行循环&#34;&gt;&lt;/a&gt;并行循环&lt;/h3&gt;&lt;p&gt;有些任务可以拆分成等效的&lt;strong&gt;相互独立&lt;/strong&gt;的小任务，这种情况也被称为“令人尴尬的并行”，是最简单的并行工作场景，它的工作量和并行数呈线性关系。我们假设有一个并行处理图片缩小的程序，能返回缩小后的文件总体积，并在合适的时候停止。在程序编写过程中，会遇到一些问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有错误出现时，未关闭剩余信道，导致goroutine泄露，并造成程序不响应或内存耗尽&lt;/li&gt;
&lt;li&gt;for循环结合延迟执行代码时，循环描述体中的变量陷阱&lt;/li&gt;
&lt;li&gt;要支持任意长度的图片列表，不能写死缓存信道的容量&lt;/li&gt;
&lt;li&gt;无从直接得知goroutine是否执行完成&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最终得到下面的最终版本：&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;makeThumbnails&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(filenames &amp;lt;-&lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int64&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sizes := &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int64&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; wg sync.WaitGroup&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; f := &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; filenames &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        wg.Add(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// worker&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// avoid loop variable pitfall&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;go&lt;/span&gt; runc(f &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 记录任务完成&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;defer&lt;/span&gt; wg.Done()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            thumb, err := thumbnail.ImageFile(f)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; err != &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                log.Println(err)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            info, _ = os.Stat(thumb)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            sizes &amp;lt;- info.Size()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// closer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 必须写成goroutine的形式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        wg.Wait()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;close&lt;/span&gt;(sizes)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; total &lt;span class=&#34;type&#34;&gt;int64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; size := &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; sizes &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        total += size&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; total&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上面程序里面有几点需要特别说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一个for循环会将信道输入的图片文件列表转成任务的列表，然后再启动一个goroutine负责关闭信道，最后从信道中拿出所有的大小加总返回&lt;/li&gt;
&lt;li&gt;关闭函数必须写成goroutine的形式。因为&lt;code&gt;sizes&lt;/code&gt;的range结束依赖于&lt;code&gt;sizes&lt;/code&gt;信道的关闭，同时&lt;code&gt;sizes&lt;/code&gt;信道又必须&lt;strong&gt;等待&lt;/strong&gt;所有图片处理任务执行完之后再关闭。等待和加总图片大小需要并行，所以需要一个新的goroutine去做&lt;/li&gt;
&lt;li&gt;任务完成借助&lt;code&gt;sync.WaitGroup&lt;/code&gt;完成，&lt;code&gt;wg.Wait()&lt;/code&gt;会阻塞直到&lt;code&gt;wg.Done()&lt;/code&gt;将所有任务清零&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;样例：并发web爬虫&#34;&gt;&lt;a href=&#34;#样例：并发web爬虫&#34; class=&#34;headerlink&#34; title=&#34;样例：并发web爬虫&#34;&gt;&lt;/a&gt;样例：并发web爬虫&lt;/h3&gt;&lt;p&gt;将第5章中的&lt;code&gt;worklist&lt;/code&gt;由&lt;code&gt;slice&lt;/code&gt;改为&lt;code&gt;channel&lt;/code&gt;，让爬取网页内容的过程并发执行即可得到一个并发的web爬虫。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;crawl&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(url &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; []&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fmt.Println(url)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    list, err := links.Extract(url)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; err != &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        log.Print(err)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; list&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 无缓冲信道，也可以使用缓冲信道&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    worklist := &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; []&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 初始化channel&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123; worklist &amp;lt;- os.Args[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:] &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    seen := &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;map&lt;/span&gt;[&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;]&lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 从channel中读取&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; list := &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; worklist &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; _, link := &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; list &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; !seen[link] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                seen[link] = &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(link &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    worklist &amp;lt;- crawl(link)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;(link)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上面的程序在执行了一段时间后，会因为客观限制出现报错信息。这是因为程序&lt;strong&gt;过于并发&lt;/strong&gt;了。由于硬件资源的限制，当并发数超过一定界限后，程序性能反而不如以前甚至会无法运行。因此需要手动限制并发量。这里有两种思路：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过限制发放许可证（token）的方式限制爬取goroutine是否执行，许可证数量有限，许可证用完后，阻止goroutine执行。当然作为信道的token，是在多个爬取goroutine间共享的。&lt;/li&gt;
&lt;li&gt;限制爬取goroutine总数，只创建固定个数的goroutine&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 信号量，占有表示被使用中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; tokens = &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;, &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;crawl&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(url)&lt;/span&gt;&lt;/span&gt; []&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fmt.Println(url)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    token &amp;lt;- &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    list, err := links.Extract(url)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;-tokens&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;将上面代码&lt;code&gt;main&lt;/code&gt;函数中的&lt;code&gt;worklist&lt;/code&gt;延迟在for循环内赋值，使用&lt;code&gt;n&lt;/code&gt;记录当前任务中的正在执行的任务数，可以实现在所有任务执行完成后退出程序。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; n &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    n++&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    seen := &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;map&lt;/span&gt;[&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;]&lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; ; n &amp;lt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; n-- &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        list := &amp;lt;-worklist&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; _, link := &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; list &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; !seen[link] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                seen[link] = &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                n++&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(link &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    worklist &amp;lt;- crawl(link)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;(link)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;select实现多工&#34;&gt;&lt;a href=&#34;#select实现多工&#34; class=&#34;headerlink&#34; title=&#34;select实现多工&#34;&gt;&lt;/a&gt;&lt;code&gt;select&lt;/code&gt;实现多工&lt;/h3&gt;&lt;p&gt;在之前的例子里，从信道中读取&amp;#x2F;写入值，会阻塞当前goroutine进度。如果需要同时接收两个信道的值，需要&lt;code&gt;select&lt;/code&gt;语句块。&lt;code&gt;select&lt;/code&gt;语句块使用类似&lt;code&gt;switch&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &amp;lt;- ch1:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; x := &amp;lt;- ch2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; ch3 &amp;lt;- y:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;每一个&lt;code&gt;case&lt;/code&gt;可以是接收或是发送消息的语句，&lt;code&gt;select&lt;/code&gt;语句在其中一个case发生后，才会继续（&lt;code&gt;select&amp;#123;&amp;#125;&lt;/code&gt;会一直等待程序执行）。&lt;code&gt;default&lt;/code&gt;可以指定没有任何一个case发生时的处理方式。&lt;/p&gt;
&lt;p&gt;原文中给出的&lt;code&gt;time.Tick&lt;/code&gt;例子会返回一个channel，并以设定的时间间隔发送消息。但是，再不从channel读取信息后，会造成goroutine泄露。因此只在整个生命周期都需要时才会使用。倒计时这种场景下建议使用更复杂的方式：&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ticker := time.NewTicker(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; * time.Second)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;- ticker.C&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ticker.Stop()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;对于一个nil信道的发送和接收会一直阻塞，select中的case也不会被选中。利用这个特性可以实现取消等功能。&lt;/p&gt;
&lt;h3 id=&#34;并发目录遍历&#34;&gt;&lt;a href=&#34;#并发目录遍历&#34; class=&#34;headerlink&#34; title=&#34;并发目录遍历&#34;&gt;&lt;/a&gt;并发目录遍历&lt;/h3&gt;&lt;p&gt;借助&lt;code&gt;ioutil.ReadDir&lt;/code&gt;可以实现遍历根文件夹下所有文件体积的功能。下面是一个纯单线程版本。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;walkDir&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(dir &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;, fileSizes &lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt;&amp;lt;- &lt;span class=&#34;type&#34;&gt;int64&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; _, entry := &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; dirents(dir) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; entry.IsDir() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            subdir := filepath.Join(dir, entry.Name())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            walkDir(subdir, fileSizes)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            fileSIzes &amp;lt;- entry.Size()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;dirents&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(dir &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; []os.FileInfo &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    entries, err := ioutil.ReadDir(dir)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; err != &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        fmt.Fprintf(os.Stderr, &lt;span class=&#34;string&#34;&gt;&amp;quot;du1: %v\n&amp;quot;&lt;/span&gt;, err)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; entries&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上面的版本可以实现功能，但是速度很慢，而且不能实时显示进度。这里我们用&lt;code&gt;time.Ticker&lt;/code&gt;定时打印进度，同时通过命令行参数&lt;code&gt;p&lt;/code&gt;控制。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; progress = flag.Bool(&lt;span class=&#34;string&#34;&gt;&amp;quot;v&amp;quot;&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;show progress&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; tick &amp;lt;-&lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; time.Time&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; *progress &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        tick = time.Tick(&lt;span class=&#34;number&#34;&gt;500&lt;/span&gt; * time.Millisecond)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; nFiles, nBytes &lt;span class=&#34;type&#34;&gt;int64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;loop:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; size, ok := fileSizes:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; !ok &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt; loop&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            nFiles++&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            nBytes += size&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &amp;lt;-tick:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            printDiskUsage(nFiles, nBytes)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    printDiskUsage(nFiles, nBytes) &lt;span class=&#34;comment&#34;&gt;// final print&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;其中&lt;code&gt;if *progress&lt;/code&gt;语句在没有传递&lt;code&gt;-p&lt;/code&gt;参数时，不会为tick赋值，而nil的tick值会让select中永远不会进入这个case，从而不打印进度。&lt;/p&gt;
&lt;p&gt;在遍历根目录下的递归调用&lt;code&gt;walkDir&lt;/code&gt;中，也可以使用goroutine，并通过&lt;code&gt;sync.WaitGroup&lt;/code&gt;保证执行完成后关闭&lt;code&gt;fileSizes&lt;/code&gt;信道。当然，无限制的创建goroutine会出现和上上小节一样的问题，所以也需要&lt;em&gt;信号量（semaphore）&lt;/em&gt;，保证不至于创建过多goroutine。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; sema = &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;, &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;dirents&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(dir &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; []os.FileInfo &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sema &amp;lt;- &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;&amp;#123;&amp;#125; &lt;span class=&#34;comment&#34;&gt;// 获取token&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;defer&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123; &amp;lt;-sema &amp;#125;() &lt;span class=&#34;comment&#34;&gt;// 释放token&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;取消&#34;&gt;&lt;a href=&#34;#取消&#34; class=&#34;headerlink&#34; title=&#34;取消&#34;&gt;&lt;/a&gt;取消&lt;/h3&gt;&lt;p&gt;一样的，一个goroutine没有直接关闭另一个goroutine的办法。按照之前提到的&lt;strong&gt;通过信道传递消息&lt;/strong&gt;的思路，但是一个信道只会被消费一次，我们这里的场景需要&lt;strong&gt;广播&lt;/strong&gt;更合适。&lt;/p&gt;
&lt;p&gt;之前提到，一个被关闭的信道在传递完信道内的消息后，后续再从这个信道获取值，会立即返回一个零值。可以利用这个特性，在执行取消操作后，将信道关闭即可，可以写出下面这样的函数。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; done = &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;cancelled&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &amp;lt;- done:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;然后在程序的&lt;strong&gt;瓶颈处&lt;/strong&gt;，检查这个函数的返回值，一旦返回&lt;code&gt;true&lt;/code&gt;则立即中止程序。比如，之前提到获取token的函数里。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;dirents&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(dir &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; []os.FileInfo &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; sema &amp;lt;- &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;&amp;#123;&amp;#125;: &lt;span class=&#34;comment&#34;&gt;// acquire token&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &amp;lt;-done:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;defer&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123; &amp;lt;-sema &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;按上面这种方式退出程序后，有可能出现goroutine还没有妥善关闭的情况，可以在调试时，程序的最后用&lt;code&gt;panic&lt;/code&gt;打印系统信息，查看具体情况。&lt;/p&gt;
&lt;h3 id=&#34;样例：聊天服务器&#34;&gt;&lt;a href=&#34;#样例：聊天服务器&#34; class=&#34;headerlink&#34; title=&#34;样例：聊天服务器&#34;&gt;&lt;/a&gt;样例：聊天服务器&lt;/h3&gt;&lt;p&gt;聊天服务器也是并发和各种信道常用的场景，它包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户的接入、退出&lt;/li&gt;
&lt;li&gt;用户信息的广播&lt;/li&gt;
&lt;li&gt;用户session的维护&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们可以用一个信道表示一个接入的用户，在一个全局的文件中处理用户登入、登出，即信道的信息维护，这里可以用map表示，对于接收到的消息，像注册的所有信道逐个发送，即广播。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; client &lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt;&amp;lt;- &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;// 只写信道&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    entering = &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; client)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    messages = &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    leaving = &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; client)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;broadcaster&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    clients := &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;map&lt;/span&gt;[client]&lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt;) &lt;span class=&#34;comment&#34;&gt;// 用户session维护&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; cli := &amp;lt;-entering:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            clients[cli] = &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; cli := &amp;lt;-leaving:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;delete&lt;/span&gt;(clients, cli)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;close&lt;/span&gt;(cli)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; msg := &amp;lt;-messages:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; cli := &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; clients &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                cli &amp;lt;- msg&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;同时，启动一个tcp服务器，单独启动一个goroutine负责上面的信道管理，另外对于每一个接入的连接，启动一个独立的goroutine处理。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    listener, err := net.Listen(&lt;span class=&#34;string&#34;&gt;&amp;quot;tcp&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;localhost:8000&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; err != &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        log.Fatal(err)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;go&lt;/span&gt; broadcaster()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        conn, err := listener.Accept()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; err != &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            log.Print(err)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;go&lt;/span&gt; handleConn(conn)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在处理tcp连接的函数里，负责接入客户端，同时将连接中的内容写入到&lt;code&gt;messages&lt;/code&gt;信道中，以便广播给其他客户端。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;handleConn&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(conn net.Conn)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ch := &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;go&lt;/span&gt; clientWriter(conn, ch)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 唯一标识生成，也可以使用其他规则&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    who := conn.RemoteAddr().String()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ch &amp;lt;- &lt;span class=&#34;string&#34;&gt;&amp;quot;You are &amp;quot;&lt;/span&gt; + who&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    messages &amp;lt;- who + &lt;span class=&#34;string&#34;&gt;&amp;quot; has arrived&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    entering &amp;lt;- ch&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    input := bufio.NewScanner(conn)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; input.Scan() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        messages &amp;lt;- who + &lt;span class=&#34;string&#34;&gt;&amp;quot;: &amp;quot;&lt;/span&gt; + input.Text()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    leaving &amp;lt;- ch&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    messages &amp;lt;- who + &lt;span class=&#34;string&#34;&gt;&amp;quot; has left&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    conn.Close()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;clientWriter&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(conn net.Conn, ch &lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; msg := &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; ch &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        fmt.Fprintln(conn, msg)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上面的map没有使用lock操作，是因为它的读写都限制在了一个goroutine内，因此是&lt;strong&gt;并发安全&lt;/strong&gt;的，其他并发使用的信道和&lt;code&gt;net.Conn&lt;/code&gt;也是并发安全的。&lt;/p&gt;
&lt;h2 id=&#34;并发和共享变量&#34;&gt;&lt;a href=&#34;#并发和共享变量&#34; class=&#34;headerlink&#34; title=&#34;并发和共享变量&#34;&gt;&lt;/a&gt;并发和共享变量&lt;/h2&gt;&lt;p&gt;使用信道在goroutine间沟通是一种并发的范式，其中也略过了一些关键而细小的问题，这些在后面这种并发编程模式中会经常讨论。&lt;/p&gt;
&lt;h3 id=&#34;竞险（race-conditions）&#34;&gt;&lt;a href=&#34;#竞险（race-conditions）&#34; class=&#34;headerlink&#34; title=&#34;竞险（race conditions）&#34;&gt;&lt;/a&gt;竞险（race conditions）&lt;/h3&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; bank&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; balance &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Deposit&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(amount &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    balance += amount&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Balance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; balance &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上面以银行为例，实际上给出了一个可以读写的变量。在串行执行场景下，不会有问题。在并发场景下，对&lt;code&gt;balance&lt;/code&gt;读写的同时进行，就会造成一些问题。这种情况也叫&lt;strong&gt;数据争用（data race）&lt;/strong&gt;，即&lt;strong&gt;有两个goroutine并发访问一个变量，且至少有一个是写操作&lt;/strong&gt;。这种数据争用有时候还会带来未定义的行为。&lt;/p&gt;
&lt;p&gt;在使用共享变量的模式并发编程时，如果不小心处理，很容易遇到数据争用的情况。然而，绝大多数的数据争用都“来者不善”，以至于我们要留心发生数据争用的场景：&lt;strong&gt;有两个goroutine并发访问一个变量，且至少有一个是写操作&lt;/strong&gt;。下面有三种方式去避免：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;不要写变量&lt;/strong&gt;，比如将变量初始化好之后，使之只读或不可变&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免在多个goroutine上操作变量&lt;/strong&gt;，将操作限制在一个goroutine上，就像前一章中的broadcaster，这样的goroutine也叫做&lt;em&gt;调度者goroutine&lt;/em&gt;。Go中有句箴言总结的很好：&lt;strong&gt;不要通过共享变量传递消息，通过传递消息来共享变量&lt;/strong&gt;。这里的传递消息就是指通过信道发送和接收。当实在无法限制多个goroutine访问一个变量，也尽量限制访问，通过信道传递给其他goroutine，达到&lt;strong&gt;串行限制（serial confinement）&lt;/strong&gt;的效果。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在同一时间仅允许一个goroutine访问变量&lt;/strong&gt;，即后面会提到的&lt;strong&gt;互斥锁&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;互斥锁（sync-Mutex）&#34;&gt;&lt;a href=&#34;#互斥锁（sync-Mutex）&#34; class=&#34;headerlink&#34; title=&#34;互斥锁（sync.Mutex）&#34;&gt;&lt;/a&gt;互斥锁（&lt;code&gt;sync.Mutex&lt;/code&gt;）&lt;/h3&gt;&lt;p&gt;互斥锁和之前提到的信号量（counting semaphore）很类似，更像是一个容量为1的信号量，即&lt;em&gt;二进制信号量（binary semaphore）&lt;/em&gt;。每次执行后续操作前，都需要从一个全局信道中获取token，&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sema = &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    balance &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Deposit&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(amount &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sema &amp;lt;- &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;&amp;#123;&amp;#125; &lt;span class=&#34;comment&#34;&gt;// 占用token&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    balance = balance + amount&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;-sema &lt;span class=&#34;comment&#34;&gt;// 释放token&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Balance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sema &amp;lt;- &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;&amp;#123;&amp;#125; &lt;span class=&#34;comment&#34;&gt;// 占用token&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    b := balance&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;-sema &lt;span class=&#34;comment&#34;&gt;// 释放token&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; b&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;将上面的信号量表示使用&lt;code&gt;sync.Mutex&lt;/code&gt;替代就是互斥锁的使用方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;var sema = make(chan struct&amp;#123;&amp;#125;, 1)&lt;/code&gt; &amp;#x3D;&amp;gt; &lt;code&gt;var mu sync.Mutex&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sema &amp;lt;- struct&amp;#123;&amp;#125;&amp;#123;&amp;#125;&lt;/code&gt; &amp;#x3D;&amp;gt; &lt;code&gt;mu.Lock()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;-sema&lt;/code&gt; &amp;#x3D;&amp;gt; &lt;code&gt;mu.Unlock()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通常来说，互斥锁使用的范围很小，这一区域也叫临界区（critical section），被mutex守护的共享变量会紧跟在&lt;code&gt;Lock&lt;/code&gt;之后。在程序较长时，为了避免在所有返回处显式&lt;code&gt;Unlock&lt;/code&gt;可以使用&lt;code&gt;defer&lt;/code&gt;，这会稍微增加一些显式&lt;code&gt;Unlock&lt;/code&gt;的成本，但会让代码更简洁。&lt;/p&gt;
&lt;p&gt;另外，互斥锁是不可重入的，即不能对一个已经上锁的共享变量上锁，这会导致死锁，因此确保互斥锁和其守护的变量不被导出。&lt;/p&gt;
&lt;h3 id=&#34;读-x2F-写互斥锁（sync-RWMutex）&#34;&gt;&lt;a href=&#34;#读-x2F-写互斥锁（sync-RWMutex）&#34; class=&#34;headerlink&#34; title=&#34;读&amp;#x2F;写互斥锁（sync.RWMutex）&#34;&gt;&lt;/a&gt;读&amp;#x2F;写互斥锁（&lt;code&gt;sync.RWMutex&lt;/code&gt;）&lt;/h3&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; mu sync.RWMutex&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; balance &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Balance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    mu.RLock()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;defer&lt;/span&gt; mu.RUnlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; balance&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;sync.RWMutex&lt;/code&gt;可以限制写操作，而允许多个读操作同时进行。&lt;code&gt;RLock&lt;/code&gt;方法开启，&lt;code&gt;RUnlock&lt;/code&gt;关闭互斥锁。注意，只在确定没有对共享变量写操作发生的时候使用&lt;code&gt;RLock&lt;/code&gt;方法，我们不能简单的假设一个&lt;strong&gt;逻辑&lt;/strong&gt;读操作，在背后没有注入写入缓存或更新计数器等行为。如果不确定，请使用完整的互斥锁。&lt;/p&gt;
&lt;p&gt;同时，&lt;code&gt;sync.RWMutex&lt;/code&gt;只在大多数读操作在争用锁时会比较合适。其更复杂的实现，让它在其他场景下工作慢于普通的互斥锁。&lt;/p&gt;
&lt;h3 id=&#34;内存同步&#34;&gt;&lt;a href=&#34;#内存同步&#34; class=&#34;headerlink&#34; title=&#34;内存同步&#34;&gt;&lt;/a&gt;内存同步&lt;/h3&gt;&lt;p&gt;上面提到的对于&lt;code&gt;Balance&lt;/code&gt;这个只读的函数也使用的互斥锁或者信道来限制多个goroutine访问共享变量，其中一个明显的原因是：读取操作发生在写操作如&lt;code&gt;Withdraw&lt;/code&gt;或&lt;code&gt;Deposit&lt;/code&gt;中间时，也会造成问题。另一个不那么明显的原因是，类似互斥锁、信道这种同步操作也会同步内存。&lt;/p&gt;
&lt;p&gt;简单点说，在现代CPU架构中，多个处理器内很可能有缓存，每个goroutine对共享变量的修改很可能在多个缓存中，而对其他goroutine不可见，直到同步操作把缓存中的修改同步到主内存中，保证对所有goroutine可见且一致。&lt;/p&gt;
&lt;p&gt;同一个goroutine内部是串行稳定的，但goroutine之间无法保证顺序。还有一种&lt;strong&gt;错误&lt;/strong&gt;认识，goroutine的代码会&lt;strong&gt;逐行交错&lt;/strong&gt;（interleaving）执行。但在现代的CPU架构和编译器中，并不是这么实现的。总而言之，把对变量的使用限制在同一个goroutine内，对其他变量使用互斥锁。&lt;/p&gt;
&lt;h3 id=&#34;懒初始化（sync-Once）&#34;&gt;&lt;a href=&#34;#懒初始化（sync-Once）&#34; class=&#34;headerlink&#34; title=&#34;懒初始化（sync.Once）&#34;&gt;&lt;/a&gt;懒初始化（&lt;code&gt;sync.Once&lt;/code&gt;）&lt;/h3&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; icons &lt;span class=&#34;keyword&#34;&gt;map&lt;/span&gt;[&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;]image.Image&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;loadIcons&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 初始化写操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Icon&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(name &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; image.Image &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; icons == &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        loadIcons()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; icons[name]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;通常来说，我们会推迟一个计算量比较大的初始化操作到使用时才进行，如上面&lt;code&gt;Icon&lt;/code&gt;函数做的那样。很显然&lt;code&gt;Icon&lt;/code&gt;函数不是并发安全的。在其中混有读写操作，且和外界共享icons变量。这时我们需要在初始化的时候对&lt;code&gt;loadIcons&lt;/code&gt;函数加锁。加锁时要区分&lt;code&gt;icons&lt;/code&gt;的是否初始化状态，可以对只读操作使用读&amp;#x2F;写锁，再对写入操作使用互斥锁。像下面这样：&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; mu sync.RWMutex&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Icon&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(name &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; image.Image &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    mu.RLock()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; icons == &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        icon := icons[name]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        mu.RUnlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; icon&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    mu.RUnlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    mu.Lock()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 因为在Lock前，有短暂的Unlock的时间段，有可能会被其他goroutine初始化，因此需要再次判断&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; icons == &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        loadIcons()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    icon := icons[name]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    mu.Unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; icon&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;实际上，上面就是一个只做一次的操作（通常是初始化操作），为了维护一个是否完成的bool值，额外增加了一些操作，较容易出错。go对这种情况提供了&lt;code&gt;sync.Once&lt;/code&gt;支持，在&lt;code&gt;Do&lt;/code&gt;方法中传入只执行的函数，这个互斥锁会在第一次执行时上锁并将对变量的改动同步到其他goroutine中，同时维护一个bool值，在后续的执行中，直接跳过这一步。重写之后的&lt;code&gt;Icon&lt;/code&gt;变得简单了很多。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; loadIconsOnce sync.Once&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; icons &lt;span class=&#34;keyword&#34;&gt;map&lt;/span&gt;[&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;]image.Image&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 并发安全&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Icon&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(name &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; image.Image &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    loadIconsOnce.Do(loadIcons)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; icons[name]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;竞险检测器&#34;&gt;&lt;a href=&#34;#竞险检测器&#34; class=&#34;headerlink&#34; title=&#34;竞险检测器&#34;&gt;&lt;/a&gt;竞险检测器&lt;/h3&gt;&lt;p&gt;很多时候goroutine访问共享变量导致的竞险并不那么容易发现和避免。Go的配套工具链提供了&lt;code&gt;-race&lt;/code&gt;标志位用来检查程序中可能存在的竞险情况，在&lt;code&gt;go run&lt;/code&gt;, &lt;code&gt;go build&lt;/code&gt;, &lt;code&gt;go test&lt;/code&gt;后添加都可以。它可以记录对共享变量所做的所有读写操作以及对应的goroutine，还有程序中由&lt;code&gt;sync&lt;/code&gt;和信道触发的同步操作。竞险检测器在分析这些事件流的时候可以给出包含共享变量和对其读写goroutine报告。在绝大多数情况下已经足够你查问题了。&lt;/p&gt;
&lt;p&gt;竞险检测器只能报告程序覆盖到代码的竞险情况，所以尽量让测试覆盖到所有代码。竞险检查会稍微占用更多时间和内存，但是是可以接受的。&lt;/p&gt;
&lt;h3 id=&#34;样例：并发无阻塞缓存&#34;&gt;&lt;a href=&#34;#样例：并发无阻塞缓存&#34; class=&#34;headerlink&#34; title=&#34;样例：并发无阻塞缓存&#34;&gt;&lt;/a&gt;样例：并发无阻塞缓存&lt;/h3&gt;&lt;p&gt;实现这么一个并发数据结构，大抵有两种构建思路：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用有锁的共享变量&lt;/li&gt;
&lt;li&gt;借助信道和通信实现串行化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不同场景下，他们实现的复杂度可能会稍有不同。&lt;/p&gt;
&lt;h3 id=&#34;goroutine和线程&#34;&gt;&lt;a href=&#34;#goroutine和线程&#34; class=&#34;headerlink&#34; title=&#34;goroutine和线程&#34;&gt;&lt;/a&gt;goroutine和线程&lt;/h3&gt;&lt;p&gt;goroutine和线程有些很多小地方上的区别，这些区别让goroutine和线程有着较大区别。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线程的栈一般是固定的（通常是2MB），goroutine的栈是灵活的，从较少的大小开始（通常是2KB），可以扩大和缩小&lt;/li&gt;
&lt;li&gt;goroutine有自己的调度机制（m:n调度），把m个goroutine复用或调度到n的操作系统的线程&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GOMAXPROCS&lt;/code&gt;环境变量决定了Go代码可以使用多少个操作系统线程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后，goroutine没有其他操作系统或编程语言中用来支持多线程的为每个线程添加一个唯一标识的设计。这个是特别设计的，用来避免线程池的滥用。Go更推荐只由入参显式决定函数表现的风格，避免让函数收到执行线程的影响。&lt;/p&gt;
&lt;h2 id=&#34;包和Go工具&#34;&gt;&lt;a href=&#34;#包和Go工具&#34; class=&#34;headerlink&#34; title=&#34;包和Go工具&#34;&gt;&lt;/a&gt;包和Go工具&lt;/h2&gt;&lt;p&gt;如今中小型的程序可能会包含10000个函数，其中绝大多数来自其他人的包。包可以将程序中相互关联的特性整理到独立的单元中，进而在组织或社区中重用、分享。包名和导出的类型、变量、函数名都应简短清晰，Go使用首字母大小写控制可见性，从而掩盖实现细节，保证稳定性或实现互斥锁。&lt;/p&gt;
&lt;p&gt;Go的构建速度算是比较快的。主要有3个原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go在每个文件开头都显式列出了引入的文件，无需读取整个文件&lt;/li&gt;
&lt;li&gt;Go中没有引入是一个有向无环图，因此可以并行编译&lt;/li&gt;
&lt;li&gt;编译好的Go包的目标文件会包含自身和&lt;strong&gt;自身的依赖&lt;/strong&gt;，每一次的import只需读取一遍目标文件即可&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;import路径&#34;&gt;&lt;a href=&#34;#import路径&#34; class=&#34;headerlink&#34; title=&#34;import路径&#34;&gt;&lt;/a&gt;import路径&lt;/h3&gt;&lt;p&gt;Go的语言规范并没有规定import路径，路径的实现是由相关工具决定的。但是为了避免冲突，除了标准包以外的包，都需要以域名或组织名开头，如&lt;code&gt;encoding/json&lt;/code&gt;，&lt;code&gt;golang.org/x/net/html&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;声明和import&#34;&gt;&lt;a href=&#34;#声明和import&#34; class=&#34;headerlink&#34; title=&#34;声明和import&#34;&gt;&lt;/a&gt;声明和import&lt;/h3&gt;&lt;p&gt;每一个Go文件的开头，都需要以&lt;code&gt;package xxx&lt;/code&gt;的形式标识包名。通常，包名是import路径的最后一段。但是有3个例外情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;main&lt;/code&gt;包名表示告诉&lt;code&gt;go build&lt;/code&gt;需要构建一个可执行文件&lt;/li&gt;
&lt;li&gt;目录下包含&lt;code&gt;_test&lt;/code&gt;后缀文件名的，在执行&lt;code&gt;go test&lt;/code&gt;时会额外被构建用于测试的包&lt;/li&gt;
&lt;li&gt;有的报名后面会跟版本号，这个时候以没有版本号的作为包名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在import时，如果引入包较多时，可以用圆括号列表形式引入。列表间可以用空行隔开，通常用来分组域名，这个在按照字母顺序排序import时有用——排序会在每组内进行。如果不同域内的包名一样，如&lt;code&gt;math/rand&lt;/code&gt;和&lt;code&gt;crypto/rand&lt;/code&gt;，可以用重命名引入（renaming import）。像下面这样&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;crypto/rand&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    mrand &lt;span class=&#34;string&#34;&gt;&amp;quot;math/rand&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这种重命名只在当前文件内有效。重命名通常可以避免包名冲突，或者简化一些复杂的包名，在简化时，注意对同样的原名，使用同样的缩写名。&lt;code&gt;go build&lt;/code&gt;会报告编译中循环依赖。&lt;/p&gt;
&lt;h3 id=&#34;空导入&#34;&gt;&lt;a href=&#34;#空导入&#34; class=&#34;headerlink&#34; title=&#34;空导入&#34;&gt;&lt;/a&gt;空导入&lt;/h3&gt;&lt;p&gt;有的时候，我们的引入的&lt;strong&gt;目的在包的副作用&lt;/strong&gt;，如其中全局变量的初始化或&lt;code&gt;init&lt;/code&gt;函数的执行。这个时候可以用空白标识符&lt;code&gt;_&lt;/code&gt;进行重命名即可，如&lt;code&gt;import _ &amp;quot;image/png&amp;quot;&lt;/code&gt;。这种即空导入。&lt;/p&gt;
&lt;p&gt;在书中例子里，对&lt;code&gt;image/png&lt;/code&gt;的空导入，实现了png解码相关配置的全局注册（&lt;code&gt;image.RegisterFormat&lt;/code&gt;），从而可以解码png图片。类似的思路在&lt;code&gt;database/sql&lt;/code&gt;包中也有用到。&lt;/p&gt;
&lt;h3 id=&#34;命名-1&#34;&gt;&lt;a href=&#34;#命名-1&#34; class=&#34;headerlink&#34; title=&#34;命名&#34;&gt;&lt;/a&gt;命名&lt;/h3&gt;&lt;p&gt;对于包名，有下面一些建议的命名规范：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用简短明了的包名&lt;/li&gt;
&lt;li&gt;使用有描述性且没有歧义的名字，且最好不要使用经常会用来命名局部变量的包名，如&lt;code&gt;path&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;包名通常使用单数形式，需要和其他情况区分开时，如&lt;code&gt;strings&lt;/code&gt;，&lt;code&gt;bytes&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;避免使用具有隐藏含义的名称，如&lt;code&gt;temp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于包中的成员名：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;考虑和包名一起构成完整的含义，不需要包含包名，如&lt;code&gt;flat.Int&lt;/code&gt;，&lt;code&gt;http.Get&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;有的包名表示一种类型，在内部会有对应的类型定义和&lt;code&gt;New&lt;/code&gt;操作&lt;/li&gt;
&lt;li&gt;即使对于有着很多成员的包，其最关键的几个方法仍然是最简单的&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Go工具&#34;&gt;&lt;a href=&#34;#Go工具&#34; class=&#34;headerlink&#34; title=&#34;Go工具&#34;&gt;&lt;/a&gt;Go工具&lt;/h3&gt;&lt;p&gt;Go工具像一个瑞士军刀，它的各个子命令提供了诸如包管理器（&lt;code&gt;go get&lt;/code&gt;）、构建系统（&lt;code&gt;go build&lt;/code&gt;, &lt;code&gt;go run&lt;/code&gt;, &lt;code&gt;go install&lt;/code&gt;）、测试驱动（&lt;code&gt;go test&lt;/code&gt;）等等。&lt;/p&gt;
&lt;h4 id=&#34;工作区组织&#34;&gt;&lt;a href=&#34;#工作区组织&#34; class=&#34;headerlink&#34; title=&#34;工作区组织&#34;&gt;&lt;/a&gt;工作区组织&lt;/h4&gt;&lt;p&gt;日常经常使用的是&lt;code&gt;GOPATH&lt;/code&gt;环境变量，用于说明当前工作区的根路径。&lt;code&gt;GOROOT&lt;/code&gt;表示go源码的根路径，&lt;code&gt;GOOS&lt;/code&gt;表示操作系统，&lt;code&gt;GOARCH&lt;/code&gt;表示处理器架构。更多配置可以执行&lt;code&gt;go env&lt;/code&gt;查看。&lt;/p&gt;
&lt;h4 id=&#34;包下载&#34;&gt;&lt;a href=&#34;#包下载&#34; class=&#34;headerlink&#34; title=&#34;包下载&#34;&gt;&lt;/a&gt;包下载&lt;/h4&gt;&lt;p&gt;执行&lt;code&gt;go get&lt;/code&gt;下载，下载时不仅包含源码的拷贝，还包含源码的版本控制信息。Go工具会自动判断流行的代码托管方式。对于不那么有名的托管网站，需要自己显式说明保本控制的协议，可以通过&lt;code&gt;go help importpath&lt;/code&gt;查看细节。&lt;/p&gt;
&lt;p&gt;Go工具在访问包的导入路径域名如&lt;code&gt;golang.org&lt;/code&gt;时，会试图从网页的&lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt;标签中寻找类似下面这样指示目标路径的信息。&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;go-import&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;content&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;golang.org/x/net git https://go.googlesource.com/net&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;另外，执行&lt;code&gt;go get -u&lt;/code&gt;时会获取所有包的最新版本，在需要锁定版本时比较麻烦，可以借助&lt;em&gt;vendor&lt;/em&gt;解决，在&lt;code&gt;go help gopath&lt;/code&gt;中有介绍。&lt;/p&gt;
&lt;h4 id=&#34;包构建&#34;&gt;&lt;a href=&#34;#包构建&#34; class=&#34;headerlink&#34; title=&#34;包构建&#34;&gt;&lt;/a&gt;包构建&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;go build&lt;/code&gt;构建时，对于库类型代码只会检查错误，对于main包，则会构建可执行文件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一个目录包含一个包&lt;/strong&gt;，因此导入时，要么指定导入路径，要么指定相对路径，否则会以当前目录为基础构建。构建得到的可执行文件名称是go文件的前缀。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;go build&lt;/code&gt;构建时，会丢弃已编译的代码，只保留可执行文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;go install&lt;/code&gt;构建时，会保留已编译的代码，编译好的包位于&lt;code&gt;$GOPATH/pkg&lt;/code&gt;下，编译得到的执行文件位于&lt;code&gt;$GOPATH/bin&lt;/code&gt;下。再之后，&lt;code&gt;go build&lt;/code&gt;和&lt;code&gt;go install&lt;/code&gt;不会编译未被改变的包或命令，从而让执行过程更快。&lt;code&gt;go build -i&lt;/code&gt;可以安装项目的所有依赖&lt;/li&gt;
&lt;li&gt;修改&lt;code&gt;GOOS&lt;/code&gt;和&lt;code&gt;GOARCH&lt;/code&gt;可以改变包目标的平台和架构，默认只会针对当前平台和架构打包。&lt;/li&gt;
&lt;li&gt;文件末尾以诸如&lt;code&gt;_linux.go&lt;/code&gt;，&lt;code&gt;axm_amd64.s&lt;/code&gt;结尾时，只会在打对应平台包的时候才会编译此文件。另外还可以以&lt;code&gt;// +build linux darwin&lt;/code&gt;的注释形式做到更好的细粒度。&lt;code&gt;// +build ignore&lt;/code&gt;表示编译时跳过该文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;go doc go/build&lt;/code&gt;下有更多介绍。&lt;/p&gt;
&lt;h4 id=&#34;包文档&#34;&gt;&lt;a href=&#34;#包文档&#34; class=&#34;headerlink&#34; title=&#34;包文档&#34;&gt;&lt;/a&gt;包文档&lt;/h4&gt;&lt;p&gt;Go建议在导出的包成员和包声明前使用描述用途和用法的注释。注释宜简单且清晰，对于大段的注释，使用同名的文档文件（通常名为&lt;code&gt;doc.go&lt;/code&gt;）进行说明。如果行为本身就足够明显，就不需要写注释。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;go doc&lt;/code&gt;命令可以查看包、包成员、包方法的文档。还有个很相似的命令&lt;code&gt;godoc&lt;/code&gt;，它可以托管一个能够查看当前工作目录下文档的服务器。&lt;/p&gt;
&lt;h4 id=&#34;内部包&#34;&gt;&lt;a href=&#34;#内部包&#34; class=&#34;headerlink&#34; title=&#34;内部包&#34;&gt;&lt;/a&gt;内部包&lt;/h4&gt;&lt;p&gt;有些包可能希望导出只对个别信任的包可见，对于这种包，导入路径中需要包含&lt;code&gt;internal&lt;/code&gt;。这些内部包只对&lt;code&gt;internal&lt;/code&gt;的父目录下文件可见，如&lt;code&gt;net/http/internal/chunked&lt;/code&gt;对&lt;code&gt;net/http/httputil&lt;/code&gt;可见，但对&lt;code&gt;net/url&lt;/code&gt;不可见。&lt;/p&gt;
&lt;h4 id=&#34;查询包&#34;&gt;&lt;a href=&#34;#查询包&#34; class=&#34;headerlink&#34; title=&#34;查询包&#34;&gt;&lt;/a&gt;查询包&lt;/h4&gt;&lt;p&gt;&lt;code&gt;go list&lt;/code&gt;工具可以查询包的导入路径。使用&lt;code&gt;...&lt;/code&gt;通配符可以查到更多内容。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;go list github.com/go-sql-driver/mysql&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;go list ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;go list gopl.io/ch3/...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;go list ...xml...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;结合&lt;code&gt;-json&lt;/code&gt;可以打印json格式的包详情，或者结合&lt;code&gt;-f&lt;/code&gt;加上&lt;code&gt;text/template&lt;/code&gt;语法打印特定格式的字符串。&lt;/p&gt;
&lt;p&gt;更多使用方式查看&lt;code&gt;go help list&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;测试&#34;&gt;&lt;a href=&#34;#测试&#34; class=&#34;headerlink&#34; title=&#34;测试&#34;&gt;&lt;/a&gt;测试&lt;/h2&gt;&lt;p&gt;同行评审和测试是两种避免代码错误的方式。Go尽量让写自动化测试代码不是一件很困难的事。在Go中进行测试，你需要了解的只不过是普通的Go语法规范和一些约定而已。&lt;/p&gt;
&lt;h3 id=&#34;go-test工具&#34;&gt;&lt;a href=&#34;#go-test工具&#34; class=&#34;headerlink&#34; title=&#34;go test工具&#34;&gt;&lt;/a&gt;&lt;code&gt;go test&lt;/code&gt;工具&lt;/h3&gt;&lt;p&gt;Go的测试都借助&lt;code&gt;go test&lt;/code&gt;完成。所有和测试相关的文件必须以&lt;code&gt;_test.go&lt;/code&gt;结尾，这些文件不会在打包时包括进去，只会在运行测试时运行。在文件中有三类函数会被特殊处理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;测试函数：必须以&lt;code&gt;Test&lt;/code&gt;开头，表示检测一些逻辑的正确性，运行后会给出&lt;code&gt;PASS&lt;/code&gt;或&lt;code&gt;FAIL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;基准测试函数：必须以&lt;code&gt;Benchmark&lt;/code&gt;开头，表示测量一些操作的性能，运行后会给出运行时间&lt;/li&gt;
&lt;li&gt;样例函数：必须以&lt;code&gt;Example&lt;/code&gt;开头，表示提供一些格式化的文档&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;go test&lt;/code&gt;运行完成时，会生成一个临时的&lt;code&gt;main&lt;/code&gt;包，构建并运行，最后给出结果并清理现场&lt;/p&gt;
&lt;h3 id=&#34;测试函数&#34;&gt;&lt;a href=&#34;#测试函数&#34; class=&#34;headerlink&#34; title=&#34;测试函数&#34;&gt;&lt;/a&gt;测试函数&lt;/h3&gt;&lt;p&gt;测试函数均以&lt;code&gt;Test&lt;/code&gt;开头，函数入参是test包提供的用来打印错误或其他日志的工具集。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;testing&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;TestSin&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(t *test.T)&lt;/span&gt;&lt;/span&gt; &amp;#123; &lt;span class=&#34;comment&#34;&gt;/* ... */&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;接着就像写普通Go代码一样去执行case就行了。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; word&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;testing&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;TestPalindrome&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(t *testing.T)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; !IsPalindrome(&lt;span class=&#34;string&#34;&gt;&amp;quot;kayak&amp;quot;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        t.Error(&lt;span class=&#34;string&#34;&gt;`IsPalindrome(&amp;quot;kayak&amp;quot;) = false`&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;运行时，结合&lt;code&gt;-v&lt;/code&gt;标记可以打印详细信息，结合&lt;code&gt;-run&lt;/code&gt;标识可以只运行符合指定模式的case。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;go &lt;span class=&#34;built_in&#34;&gt;test&lt;/span&gt; -v -run=&lt;span class=&#34;string&#34;&gt;&amp;quot;French|Canal&amp;quot;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;case之间的代码相似性很高，建议用配置的方式批量运行case，减少模板代码书写。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;TestPalindrome&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(t *tesing.T)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; tests = []&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        input &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        want &lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;quot;A man, a plan, a canal: Panama&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; _, test := &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; tests &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; got := IsPalindrome(test.input); got != test.want &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            t.Errorf(&lt;span class=&#34;string&#34;&gt;&amp;quot;IsPalindrome(%q) = %v&amp;quot;&lt;/span&gt;, test.input, got)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;go test&lt;/code&gt;在运行测试时，每个case的错误不会中断其他case的执行，也不会panic，来保证一次运行能获得所有case的执行结果。对于需要中断的情况，可以使用&lt;code&gt;t.Fatal&lt;/code&gt;或者&lt;code&gt;t.Fatalf&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;随机化测试&#34;&gt;&lt;a href=&#34;#随机化测试&#34; class=&#34;headerlink&#34; title=&#34;随机化测试&#34;&gt;&lt;/a&gt;随机化测试&lt;/h4&gt;&lt;p&gt;不同于上面提到的选择特定case进行测试。随机化测试可以覆盖更广的范围。在验证随机化测试是否符合预期上，有两种思路：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用另外一种方式给出结果，对比两种方式的结果是否相同&lt;/li&gt;
&lt;li&gt;使用固定的模式生成随机化case，使其预期结果可以事先推导出来&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，在随机化测试时还要考虑能否再次复现问题case的情况。&lt;/p&gt;
&lt;h4 id=&#34;测试一个命令&#34;&gt;&lt;a href=&#34;#测试一个命令&#34; class=&#34;headerlink&#34; title=&#34;测试一个命令&#34;&gt;&lt;/a&gt;测试一个命令&lt;/h4&gt;&lt;p&gt;对于&lt;code&gt;go test&lt;/code&gt;而言，&lt;code&gt;main&lt;/code&gt;包只是一个库，可以将&lt;code&gt;main&lt;/code&gt;函数中需要测试的逻辑抽离成函数，在&lt;code&gt;*_test.go&lt;/code&gt;中测试即可。最好将&lt;code&gt;log.Fatal&lt;/code&gt;或者&lt;code&gt;os.Exit&lt;/code&gt;这种中断程序执行的语句放在&lt;code&gt;main&lt;/code&gt;函数中，避免中断测试流程。&lt;/p&gt;
&lt;h4 id=&#34;白盒测试&#34;&gt;&lt;a href=&#34;#白盒测试&#34; class=&#34;headerlink&#34; title=&#34;白盒测试&#34;&gt;&lt;/a&gt;白盒测试&lt;/h4&gt;&lt;p&gt;白盒测试即在对测试对象有清楚认识的情形下进行测试；黑盒测试则相反，更站在客户端的角度去测试包。在白盒测试下，我们可以修改原先包的一些实现方式，使之更易被测试。比如，可以将其中会有副作用的部分，如发邮件、写数据库、发短信的函数覆盖。（类似mock的思路）&lt;/p&gt;
&lt;p&gt;但是，在覆盖后，别忘了还原回去，避免影响后续测试。类似下面这样：&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;TestCheckQuotaNotificationUser&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(t *testing.T)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    saved := notifyUser&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;defer&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123; notifyUser = saved &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    notifyUser = &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(user, msg &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        notifiedUser, notifiedMsg = user, msg&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这种覆盖方式正常情况下不会有风险，因为&lt;code&gt;go test&lt;/code&gt;通常不会并行运行多个测试。&lt;/p&gt;
&lt;h4 id=&#34;外部测试包&#34;&gt;&lt;a href=&#34;#外部测试包&#34; class=&#34;headerlink&#34; title=&#34;外部测试包&#34;&gt;&lt;/a&gt;外部测试包&lt;/h4&gt;&lt;p&gt;上面提到的都是直接在包下新建&lt;code&gt;*_test.go&lt;/code&gt;文件的方式进行测试。有些情况下，如果测试文件内需要引用更高层包，会产生循环引用，这是上一章提到不允许的。这时可以定义为外部包。如：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;net/url&lt;/code&gt;下的测试文件导入了&lt;code&gt;net/http&lt;/code&gt;包，而&lt;code&gt;net/http&lt;/code&gt;包中又导入了&lt;code&gt;net/url&lt;/code&gt;。这个时候在&lt;code&gt;net/url&lt;/code&gt;下的测试文件使用&lt;code&gt;package url_test&lt;/code&gt;声明，表示是另一个包&lt;code&gt;net/url_test&lt;/code&gt;。然后，通过导入&lt;code&gt;net/url&lt;/code&gt;和&lt;code&gt;net/http&lt;/code&gt;的方式进行测试。就可以避免循环引用。&lt;/p&gt;
&lt;p&gt;可以通过&lt;code&gt;go list -f&lt;/code&gt;指定&lt;code&gt;.GoFiles&lt;/code&gt;，&lt;code&gt;.TestGoFiles&lt;/code&gt;和&lt;code&gt;.XTestGoFiles&lt;/code&gt;分别查看包中的源文件、测试文件和外部测试包文件。&lt;/p&gt;
&lt;p&gt;然而，外部测试包并不能访问到包内对外不可见的变量或函数。这个时候，可以在包内创建一个后门测试文件，用于导出一些内部变量或函数对外部包测试可见，通常命名为&lt;code&gt;export_test.go&lt;/code&gt;。这类文件内不包含实际的测试。如&lt;code&gt;fmt&lt;/code&gt;包下的&lt;code&gt;export_test.go&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; fmt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; IsSpace = isSpace&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;写高效的测试&#34;&gt;&lt;a href=&#34;#写高效的测试&#34; class=&#34;headerlink&#34; title=&#34;写高效的测试&#34;&gt;&lt;/a&gt;写高效的测试&lt;/h4&gt;&lt;p&gt;Go在设计上和其他很多语言不同，并不包含一个大而全的测试框架，也没有创建、清除操作，和常用的断言、判断方法等。Go认为写case是作者自己的事，而且就像写普通的程序一样，不要有死记硬背和长篇大论，只需简明扼要地表达测试意图。&lt;/p&gt;
&lt;p&gt;在写测试代码时，避免过早抽象，先想着把功能实现，然后再想怎么通过抽象减少重复和复杂度。&lt;/p&gt;
&lt;h4 id=&#34;避免“脆弱”的测试&#34;&gt;&lt;a href=&#34;#避免“脆弱”的测试&#34; class=&#34;headerlink&#34; title=&#34;避免“脆弱”的测试&#34;&gt;&lt;/a&gt;避免“脆弱”的测试&lt;/h4&gt;&lt;p&gt;有两种应用：一种是真正bug很多的（buggy），另一种是合理改动也过不了case的（brittle）。而这里过不了case可能只是因为判断逻辑写的不够宽容，死抠细节导致很容易过时。避免这种情况一个很直接的办法是只检查你关心的特性，使用更简单和时间稳定的方式检查，如不要依赖字符串匹配。去检查本质。&lt;/p&gt;
&lt;h3 id=&#34;覆盖率&#34;&gt;&lt;a href=&#34;#覆盖率&#34; class=&#34;headerlink&#34; title=&#34;覆盖率&#34;&gt;&lt;/a&gt;覆盖率&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Testing shows the presence, not the absence of bugs —— Edsger Dijkstra&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;覆盖率一定程度上能对测试的覆盖程度有启发性的指示作用。使用&lt;code&gt;go test -coverprofile&lt;/code&gt;可以指定覆盖率数据输出，如果不需要输出，只看摘要，可以只用&lt;code&gt;go test -cover&lt;/code&gt;。使用&lt;code&gt;go tool cover&lt;/code&gt;可以显示覆盖率使用介绍。&lt;/p&gt;
&lt;p&gt;最后要说明的是，被覆盖到的代码并不是没有bug，测试是一种&lt;strong&gt;务实&lt;/strong&gt;的努力。它是在写测试代价和失败代价的中间的一个折中。&lt;/p&gt;
&lt;h3 id=&#34;性能测试函数&#34;&gt;&lt;a href=&#34;#性能测试函数&#34; class=&#34;headerlink&#34; title=&#34;性能测试函数&#34;&gt;&lt;/a&gt;性能测试函数&lt;/h3&gt;&lt;p&gt;这类函数都以&lt;code&gt;Benchmark&lt;/code&gt;开头，和测试函数类似，函数入参是&lt;code&gt;*testing.B&lt;/code&gt;类型的变量。默认情况下，不会执行任何性能测试，需要指定&lt;code&gt;-bench&lt;/code&gt;值，去匹配对应函数执行，“&lt;code&gt;.&lt;/code&gt;”表示匹配所有。如&lt;code&gt;go test -bench=.&lt;/code&gt;性能测试函数写法如下：&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;testing&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;BenchmarkIsPalindrome&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(b *testing.B)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i := &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; b.N; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        IsPalindrome(&lt;span class=&#34;string&#34;&gt;&amp;quot;A man, a plan, a canal: Panama&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;之所以需要自己在基准测试函数中写循环，而不集成在测试驱动中，是避免一些一次性操作影响执行时间测量。&lt;code&gt;-benchmem&lt;/code&gt;标识会显示内存分配的使用情况。性能测试函数可以用来对比两种策略或算法的相对时间优劣，以及通过调整循环次数，整体上考察代码设计。&lt;/p&gt;
&lt;h3 id=&#34;性能侧写（Profilling）&#34;&gt;&lt;a href=&#34;#性能侧写（Profilling）&#34; class=&#34;headerlink&#34; title=&#34;性能侧写（Profilling）&#34;&gt;&lt;/a&gt;性能侧写（Profilling）&lt;/h3&gt;&lt;p&gt;性能测试函数能帮你发现整体的性能好坏，但不能告诉你哪里做得不够好。&lt;/p&gt;
&lt;p&gt;Knuth曾说过“不要过早优化”，然而结合上下文的原话的意思则是，寻找性能优化点并不那么容易，程序员们在写需求前浪费了大量时间在寻找优化点上，先把事情做出来，不要杞人忧天过早优化。但是优秀的程序员会努力找到优化点并改善之。&lt;/p&gt;
&lt;p&gt;寻找关键点的方式就叫&lt;em&gt;profiling&lt;/em&gt;。profile通过采样的方式给出占用时间、资源最多的对象，从而可以对应去优化。Go提供3种profile&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU profile，标记占用CPU时间最长的函数&lt;/li&gt;
&lt;li&gt;heap profile，标记分配内存最多的声明&lt;/li&gt;
&lt;li&gt;blocking profile，标记阻塞goroutine时间最久的操作&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对应在&lt;code&gt;go test&lt;/code&gt;上的标识为&lt;code&gt;-cpuprofile&lt;/code&gt;，&lt;code&gt;-memprofile&lt;/code&gt;，&lt;code&gt;-blockprofile&lt;/code&gt;。借助&lt;code&gt;go tool pprof&lt;/code&gt;可以打印侧写数据，以及可视化数据。&lt;/p&gt;
&lt;h3 id=&#34;样例函数&#34;&gt;&lt;a href=&#34;#样例函数&#34; class=&#34;headerlink&#34; title=&#34;样例函数&#34;&gt;&lt;/a&gt;样例函数&lt;/h3&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ExampleIsPalindrome&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fmt.Println(IsPalindrome(&lt;span class=&#34;string&#34;&gt;&amp;quot;A man, a plan, a canal: Panama&amp;quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fmt.Println(IsPalindrome(&lt;span class=&#34;string&#34;&gt;&amp;quot;palindrome&amp;quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Output:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;最后一种会被&lt;code&gt;go test&lt;/code&gt;特殊处理的是样例函数，这类函数以&lt;code&gt;Example&lt;/code&gt;开头，并没有入参，也没有返回。它的作用主要有以下3点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文档记录，且更能传达意图，同时由于样例函数是实际的Go代码，对比文档，随着代码演化，不会有过期风险。命名单纯叫&lt;code&gt;Example&lt;/code&gt;的函数作为整个包的样例函数。&lt;/li&gt;
&lt;li&gt;函数最火包含&lt;code&gt;// Output:&lt;/code&gt;注释的话，&lt;code&gt;go test&lt;/code&gt;会检查标准输出是否能匹配注释中的输出&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;godoc&lt;/code&gt;中可以作为playground，提供给用户动态编辑、运行的功能&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;反射&#34;&gt;&lt;a href=&#34;#反射&#34; class=&#34;headerlink&#34; title=&#34;反射&#34;&gt;&lt;/a&gt;反射&lt;/h2&gt;&lt;p&gt;反射能在&lt;strong&gt;运行时&lt;/strong&gt;不知道变量类型情况下去修改和查询变量值。反射还能让我们将类型作为第一成员的值来使用。类似&lt;code&gt;fmt.Sprintf&lt;/code&gt;和&lt;code&gt;text/template&lt;/code&gt;中就有用到这个特性&lt;/p&gt;
&lt;h3 id=&#34;reflect-Type和reflect-Value&#34;&gt;&lt;a href=&#34;#reflect-Type和reflect-Value&#34; class=&#34;headerlink&#34; title=&#34;reflect.Type和reflect.Value&#34;&gt;&lt;/a&gt;&lt;code&gt;reflect.Type&lt;/code&gt;和&lt;code&gt;reflect.Value&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;reflect.Type&lt;/code&gt;和&lt;code&gt;reflect.Value&lt;/code&gt;分别表示变量的类型和值。其中类型通过&lt;code&gt;reflect.TypeOf&lt;/code&gt;得到，得到的&lt;code&gt;reflect.Type&lt;/code&gt;可以保存任何类型值。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;t := reflect.TypeOf(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;) &lt;span class=&#34;comment&#34;&gt;// a reflect.Type&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fmt.Println(t.String()) &lt;span class=&#34;comment&#34;&gt;// &amp;quot;int&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fmt.Println(t) &lt;span class=&#34;comment&#34;&gt;// &amp;quot;int&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;返回的类型总是interface的动态类型，所以总是确切类型。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;reflect.ValueOf&lt;/code&gt;可以得到任意类型的变量值。返回的&lt;code&gt;reflect.Value&lt;/code&gt;满足&lt;code&gt;fmt.Stringer&lt;/code&gt;接口，不过打印出来的是变量类型。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;v := reflect.ValueOf(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;) &lt;span class=&#34;comment&#34;&gt;// a reflect.Value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fmt.Println(v) &lt;span class=&#34;comment&#34;&gt;// &amp;quot;3&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fmt.Printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%v\n&amp;quot;&lt;/span&gt;, v) &lt;span class=&#34;comment&#34;&gt;// &amp;quot;3&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fmt.Println(v.String()) &lt;span class=&#34;comment&#34;&gt;// &amp;quot;&amp;lt;int Value&amp;gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;reflect.Value.Interface&lt;/code&gt;方法返回一个保存相同值的&lt;code&gt;interface&amp;#123;&amp;#125;&lt;/code&gt;类型。它和&lt;code&gt;reflect.Value&lt;/code&gt;不同在于，一个&lt;code&gt;interface&amp;#123;&amp;#125;&lt;/code&gt;类型的变量掩盖了外部表现和内部实现细节，因此无从对其操作。&amp;#96;&amp;#96;reflect.Value&lt;code&gt;的&lt;/code&gt;Kind&amp;#96;方法可以返回类型的底层表示方法，因此使用时，可以只关心Go中定义的类型。&lt;/p&gt;
&lt;h3 id=&#34;递归值输出函数Display&#34;&gt;&lt;a href=&#34;#递归值输出函数Display&#34; class=&#34;headerlink&#34; title=&#34;递归值输出函数Display&#34;&gt;&lt;/a&gt;递归值输出函数&lt;code&gt;Display&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;利用上面提到的&lt;code&gt;Kind&lt;/code&gt;方法，可以实现递归打印任意类型值的函数。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(path &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;, v reflect.Value)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt; v.Kind()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; reflect.Invalid:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        fmt.Printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%s = invalid\n&amp;quot;&lt;/span&gt;, path)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; reflect.Slice, reflect.Array:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i := &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; v.Len(); i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            display(fmt.Sprintf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%s[%d]&amp;quot;&lt;/span&gt;, path, i), v.Index(i))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; reflect.Struct:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i := &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; v.NumField(); i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            fieldPath := fmt.Sprintf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%s.%s&amp;quot;&lt;/span&gt;, path, v.Type().Field(i).Name)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            display(fieldPath, v.Field(i))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; reflect.Map:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; _, key := &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; v.MapKeys() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            display(fmt.Sprintf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%s[%s]&amp;quot;&lt;/span&gt;, path, formatAtom(key), v.MapIndex(key)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; reflect.Ptr:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; v.IsNil() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            fmt.Printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%s = nil\n&amp;quot;&lt;/span&gt;, path)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            display(fmt.Sprintf(&lt;span class=&#34;string&#34;&gt;&amp;quot;(*%s)&amp;quot;&lt;/span&gt;, path), v.Elem())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; reflect.Interface:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; v.IsNil() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            fmt.Printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%s = nil\n&amp;quot;&lt;/span&gt;, path)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            fmt.Printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%s.type = %s\n&amp;quot;&lt;/span&gt;, path, v.Elem().Type())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            display(path+&lt;span class=&#34;string&#34;&gt;&amp;quot;.value&amp;quot;&lt;/span&gt;, v.Elem())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt;: &lt;span class=&#34;comment&#34;&gt;// 基础类型、信道、函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        fmt.Printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%s = %s\n&amp;quot;&lt;/span&gt;, path, formatAtom(v))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上面用到了许多&lt;code&gt;reflect.Value&lt;/code&gt;的方法，不是所有的都安全：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;v.Index()&lt;/code&gt;和&lt;code&gt;v.Len()&lt;/code&gt;类似&lt;code&gt;len()&lt;/code&gt;和&lt;code&gt;[i]&lt;/code&gt;下标取值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v.NumbField()&lt;/code&gt;返回结构体中的字段数目，&lt;code&gt;v.Field(i)&lt;/code&gt;则返回第i位的&lt;code&gt;reflect.Value&lt;/code&gt;类型值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v.MapKeys()&lt;/code&gt;返回无序的map key&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v.IsNil()&lt;/code&gt;和&lt;code&gt;v.Elem()&lt;/code&gt;分别判断是否为空和获取值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上述方法在遇到有环的数据结构时，会无限打印，可以借助下一章里的&lt;code&gt;unsafe&lt;/code&gt;包解决。&lt;/p&gt;
&lt;h3 id=&#34;使用reflect-Value设置变量&#34;&gt;&lt;a href=&#34;#使用reflect-Value设置变量&#34; class=&#34;headerlink&#34; title=&#34;使用reflect.Value设置变量&#34;&gt;&lt;/a&gt;使用&lt;code&gt;reflect.Value&lt;/code&gt;设置变量&lt;/h3&gt;&lt;p&gt;Go中的变量都是有地址的，可以通过这个地址去修改变量的值。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;x := &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a := reflect.ValueOf(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b := reflect.ValueOf(x)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;c := reflect.ValueOf(&amp;amp;x)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;d := c.Elem() &lt;span class=&#34;comment&#34;&gt;// variable&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上面的&lt;code&gt;d&lt;/code&gt;即变量&lt;code&gt;x&lt;/code&gt;。借助这个方式我们可以用&lt;code&gt;Addr()&lt;/code&gt;获取地址，用&lt;code&gt;Interface()&lt;/code&gt;获取&lt;code&gt;interface&amp;#123;&amp;#125;&lt;/code&gt;类型的值，再使用类型断言转成具体的变量类型。像下面这样。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;px := d.Addr().Interface().(*&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;*px = &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fmt.Println(x) &lt;span class=&#34;comment&#34;&gt;// 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;又或者，可以通过&lt;code&gt;Set&lt;/code&gt;方法设置一个&lt;code&gt;reflect.Value&lt;/code&gt;。针对特定类型，还有&lt;code&gt;SetInt&lt;/code&gt;、&lt;code&gt;SetUint&lt;/code&gt;、&lt;code&gt;SetString&lt;/code&gt;这样的方法。注意，这些方法只使用在特定类型上，对于&lt;code&gt;interface&amp;#123;&amp;#125;&lt;/code&gt;或其他类型使用，会引起panic。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;d.Set(reflect.ValueOf(&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; y &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ry := reflect.ValueOf(&amp;amp;y).Elem()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ry.SetInt(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;) &lt;span class=&#34;comment&#34;&gt;// panic: SetInt called on interface Value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ry.SetInt(reflect.Value(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;)) &lt;span class=&#34;comment&#34;&gt;// OK, y = int(3)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;另外，反射不能更新那些没有对外导出的结构体字段，尽管这些字段可以在发射中读取到。&lt;code&gt;CanSet()&lt;/code&gt;可以判断一个&lt;code&gt;reflect.Value&lt;/code&gt;是否可以修改，类似的，&lt;code&gt;CanAddr()&lt;/code&gt;可以判断一个&lt;code&gt;reflect.Value&lt;/code&gt;是否可以获取到地址。&lt;/p&gt;
&lt;p&gt;利用上面的特性，可以实现encoding&amp;#x2F;json中类似的解析JSON字符串的效果。&lt;/p&gt;
&lt;h3 id=&#34;访问结构体的field-tag&#34;&gt;&lt;a href=&#34;#访问结构体的field-tag&#34; class=&#34;headerlink&#34; title=&#34;访问结构体的field tag&#34;&gt;&lt;/a&gt;访问结构体的field tag&lt;/h3&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; data &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Labels []&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;`http:&amp;quot;l&amp;quot;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    MaxResults &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;`http:&amp;quot;max&amp;quot;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Exact &lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;`http:&amp;quot;x&amp;quot;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;我们在JSON一节提到，可以在结构体后使用&lt;em&gt;field tag&lt;/em&gt;作为JSON解析过程中的metadata。实际上，除了&lt;code&gt;json&lt;/code&gt;还可以设置其他tag。这个tag也可以通过反射特性拿到。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;reflect.Type&lt;/code&gt;的&lt;code&gt;Field()&lt;/code&gt;方法可以返回一个&lt;code&gt;reflect.StructField&lt;/code&gt;类型，其中包含了字段名、字段类型以及可选的标签。其中&lt;code&gt;Tag&lt;/code&gt;字段即field tag对应的字符串，它的&lt;code&gt;Get&lt;/code&gt;方法可以返回特定标识后的标签值。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Unpack&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(req *http.Request, ptr &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;error&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; err := req.ParseForm(); err != &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; err&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fields := &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;map&lt;/span&gt;[&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;]reflect.Value)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    v := reflect.ValueOf(ptr).Elem()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i := &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; v.NumField(); i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        fieldInfo := v.Type().Field(i) &lt;span class=&#34;comment&#34;&gt;// reflect.StructField类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        tag := fieldInfo.Tag &lt;span class=&#34;comment&#34;&gt;// reflect.StructTag类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        name := tag.Get(&lt;span class=&#34;string&#34;&gt;&amp;quot;http&amp;quot;&lt;/span&gt;) &lt;span class=&#34;comment&#34;&gt;// 获取http标识&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; name == &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            name = strings.ToLower(fieldInfo.Name)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        field[name] = v.Field(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;展示类型的方法&#34;&gt;&lt;a href=&#34;#展示类型的方法&#34; class=&#34;headerlink&#34; title=&#34;展示类型的方法&#34;&gt;&lt;/a&gt;展示类型的方法&lt;/h3&gt;&lt;p&gt;&lt;code&gt;reflect.Type&lt;/code&gt;和&lt;code&gt;reflect.Value&lt;/code&gt;都有一个&lt;code&gt;Method()&lt;/code&gt;方法。&lt;code&gt;reflect.Type&lt;/code&gt;中的方法返回&lt;code&gt;reflect.Method&lt;/code&gt;实例，结构体中包含方法名和方法类型。&lt;code&gt;reflect.Value&lt;/code&gt;中的&lt;code&gt;Method()&lt;/code&gt;方法则返回一个&lt;code&gt;reflect.Value&lt;/code&gt;类型，即一个绑定到receiver上的方法。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Print&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(x &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    v := reflect.ValueOf(x)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    t := v.Type()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fmt.Println(&lt;span class=&#34;string&#34;&gt;&amp;quot;type %s\n&amp;quot;&lt;/span&gt;, t)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i := &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; v.NumMethod(); i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        methType := v.Method(i).Type()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        fmt.Printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;func (%s) %s%s\n&amp;quot;&lt;/span&gt;, t, t.Method(i).Name, strings.TrimPrefix(methType.String(), &lt;span class=&#34;string&#34;&gt;&amp;quot;func&amp;quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;一些忠告-1&#34;&gt;&lt;a href=&#34;#一些忠告-1&#34; class=&#34;headerlink&#34; title=&#34;一些忠告&#34;&gt;&lt;/a&gt;一些忠告&lt;/h3&gt;&lt;p&gt;反射在规范的类型系统外，引入了更高自由度和编程的灵活性，但同时也带来了弱类型解释型语言（没错，JS就是你）的弊病：编译期问题会变成运行时问题、代码可读性变差、性能更差。&lt;/p&gt;
&lt;p&gt;反射虽然提供了很强大的功能，但是失去了类型的保护，需要额外处理类型的边界case，否则很容易在运行时出现panic。而这些在使用特定类型时会在编译期就被发现。因此，在使用时，建议将包中使用反射的部分完全封装在内，不对外暴露，同时做一些额外的动态检查。同时，在出错时，给出类型上更友好的提示。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;fmt.Printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d %s\n&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;42&lt;/span&gt;) &lt;span class=&#34;comment&#34;&gt;// &amp;quot;%!d(string=hello) %!s(int=42)&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;另外，&lt;code&gt;interface&amp;#123;&amp;#125;&lt;/code&gt;类型和大量出现的反射代码会让代码安逸理解，需要辅以更加完善的文档和注释来解释。&lt;/p&gt;
&lt;p&gt;最后，基于反射的函数执行速度比普通基于特定类型的函数慢至少一两个级别。因此，尽量不要在代码执行的关键路径上使用反射实现，类似测试代码这种小数据量和执行覆盖频率的代码就可以使用。&lt;/p&gt;
&lt;h2 id=&#34;低阶特性&#34;&gt;&lt;a href=&#34;#低阶特性&#34; class=&#34;headerlink&#34; title=&#34;低阶特性&#34;&gt;&lt;/a&gt;低阶特性&lt;/h2&gt;&lt;p&gt;Go已经尽量掩盖了它在底层的实现，用来避免出现难以调试的神秘问题。但在有些时候，比如为了追求性能，或者希望和操作系统底层交互，可能希望绕开这个限制。这一章的内容介绍的&lt;code&gt;unsafe&lt;/code&gt;包提供了这么一个窗口，&lt;code&gt;cgo&lt;/code&gt;工具可以将创建C库和Go的绑定关系。&lt;/p&gt;
&lt;h3 id=&#34;unsafe-Sizeof，unsafe-Alignof和unsafe-Offsetof&#34;&gt;&lt;a href=&#34;#unsafe-Sizeof，unsafe-Alignof和unsafe-Offsetof&#34; class=&#34;headerlink&#34; title=&#34;unsafe.Sizeof，unsafe.Alignof和unsafe.Offsetof&#34;&gt;&lt;/a&gt;&lt;code&gt;unsafe.Sizeof&lt;/code&gt;，&lt;code&gt;unsafe.Alignof&lt;/code&gt;和&lt;code&gt;unsafe.Offsetof&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;这三个API能让你了解一些Go在内存结构上的一些细节。其中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Sizeof&lt;/code&gt;返回操作数在内存中占用的大小&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Alignof&lt;/code&gt;返回操作数“对齐”需要的内存大小&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Offsetof&lt;/code&gt;返回结构体中字段在结构体内存的偏移量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这几个API并不像它们名字里写的不安全，对于了解底层的内存表示是有帮助的，比如在需要优化内存性能时。&lt;/p&gt;
&lt;h3 id=&#34;unsafe-Pointer&#34;&gt;&lt;a href=&#34;#unsafe-Pointer&#34; class=&#34;headerlink&#34; title=&#34;unsafe.Pointer&#34;&gt;&lt;/a&gt;&lt;code&gt;unsafe.Pointer&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;unsafe.Pointer&lt;/code&gt;是一个可以指向任意类型变量的指针，同时&lt;strong&gt;也可以把&lt;code&gt;unsafe.Pointer&lt;/code&gt;类型指针转换回特定类型指针&lt;/strong&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; math&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Float64bits&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(f &lt;span class=&#34;type&#34;&gt;float64&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;uint64&lt;/span&gt; &amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; *(*&lt;span class=&#34;type&#34;&gt;uint64&lt;/span&gt;)(unsafe.Pointer(&amp;amp;f)) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fmt.Printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%#016x\n&amp;quot;&lt;/span&gt;, Float64bits(&lt;span class=&#34;number&#34;&gt;1.0&lt;/span&gt;)) &lt;span class=&#34;comment&#34;&gt;// &amp;quot;03xff00000000000000&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;同时&lt;code&gt;unsafe.Pointer&lt;/code&gt;可以转换为&lt;code&gt;uintptr&lt;/code&gt;类型，这个类型用整数表示了地址。这个整数类型足够大，足以表示任何类型的指针。但在使用时要多加注意，因为Go的垃圾回收机制使得一个变量的地址很可能会在运行过程中改变，从而使之前的&lt;code&gt;uintptr&lt;/code&gt;类型变量失去意义。建议尽可能减少&lt;code&gt;unsafe.Pointer&lt;/code&gt;到&lt;code&gt;uintptr&lt;/code&gt;和对&lt;code&gt;uintptr&lt;/code&gt;的使用。如果有包返回了一个&lt;code&gt;uintptr&lt;/code&gt;类型，建议立即将其转换为&lt;code&gt;unsafe.Pointer&lt;/code&gt;类型，确保指针能指向同一个变量。&lt;/p&gt;
&lt;h3 id=&#34;cgo&#34;&gt;&lt;a href=&#34;#cgo&#34; class=&#34;headerlink&#34; title=&#34;cgo&#34;&gt;&lt;/a&gt;cgo&lt;/h3&gt;&lt;p&gt;使用cgo可以在go中使用C语言，反之亦然，这里从略，具体参考&lt;a href=&#34;https://golang.org/cmd/cgo%E3%80%82&#34;&gt;https://golang.org/cmd/cgo。&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;再一些忠告&#34;&gt;&lt;a href=&#34;#再一些忠告&#34; class=&#34;headerlink&#34; title=&#34;再一些忠告&#34;&gt;&lt;/a&gt;再一些忠告&lt;/h3&gt;&lt;p&gt;&lt;code&gt;unsafe&lt;/code&gt;包和&lt;code&gt;reflect&lt;/code&gt;包很像，提供了一些高级特性，但是更甚。它绕开了语言对不可控因素的隔离，会带来一些风险。所以，在特殊场景下，经过仔细考量和验证证实，使用&lt;code&gt;unsafe&lt;/code&gt;确实会带来关键性能提升时，再在代码的关键位置使用&lt;code&gt;unsafe&lt;/code&gt;，同时，尽量保证对代码其他地方透明。&lt;/p&gt;
&lt;p&gt;最后，忘掉最后两章吧，先去踏踏实实写一些Go程序，在能用上&lt;code&gt;reflect&lt;/code&gt;和&lt;code&gt;unsafe&lt;/code&gt;的时候，你自然回想起来的。&lt;/p&gt;
&lt;p&gt;祝，happy Go programming。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;-END-&lt;/em&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
