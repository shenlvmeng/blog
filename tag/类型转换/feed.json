{
    "version": "https://jsonfeed.org/version/1",
    "title": "Shenlvmeng's Blog • All posts by \"类型转换\" tag",
    "description": "Be sharp, my friend.",
    "home_page_url": "http://shenlvmeng.github.com/blog",
    "items": [
        {
            "id": "http://shenlvmeng.github.com/blog/2017/03/01/js-type-and-equal-judgement/",
            "url": "http://shenlvmeng.github.com/blog/2017/03/01/js-type-and-equal-judgement/",
            "title": "JavaScript类型与类型转换",
            "date_published": "2017-03-01T04:06:13.000Z",
            "content_html": "<h2 id=\"引子\"><a href=\"#引子\" class=\"headerlink\" title=\"引子\"></a>引子</h2><blockquote><p>ECMAScript的变量是松散类型的，所谓松散类型就是可以用来保存任何类型的数据。换句话说，每个变量仅仅是一个用于保存值的占位符而已。</p>\n<footer><strong>Nicolas C.Zakas </strong><cite>--JavaScript高级程序设计</cite></footer></blockquote>\n<p>由于JavaScript是一种松散类型的语言，即变量在使用时，并不需要事先知道它的类型。因此不同变量间的比较往往要作类型转换，这也是一些常见quiz的由来。<br>比如下面的一道面试题：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//请写出下面语句的输出结果</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ([]) <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>);               <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (&#123;&#125;) <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>);               <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ([] == <span class=\"literal\">true</span>) <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>);       <span class=\"comment\">// 无</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (&#123;&#125; == <span class=\"literal\">true</span>) <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">4</span>)；      <span class=\"comment\">// 无</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">null</span> == <span class=\"literal\">undefined</span>) <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">5</span>) <span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"title class_\">NaN</span> == <span class=\"title class_\">NaN</span>) <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">6</span>)        <span class=\"comment\">// 无</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">&quot;5&quot;</span> == <span class=\"number\">5</span>) <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">7</span>)          <span class=\"comment\">// 7</span></span><br><span class=\"line\"><span class=\"comment\">//下面的结果你能写出来么</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>([] + &#123;&#125;); <span class=\"comment\">// &quot;[object Object]&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(&#123;&#125; + []); <span class=\"comment\">// &quot;[object Object]&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(&#123;&#125; - []); <span class=\"comment\">// -0</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>([] - &#123;&#125;); <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>([] + []); <span class=\"comment\">// &quot;&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>([] - []); <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(&#123;&#125; + &#123;&#125;); <span class=\"comment\">// &quot;[object Object][object Object]&quot;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(&#123;&#125; - &#123;&#125;); <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"comment\">//下面的呢</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">null</span>           <span class=\"comment\">// &quot;object&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;&#125; <span class=\"comment\">// &quot;function&quot;</span></span><br><span class=\"line\">[] <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span>   <span class=\"comment\">// &quot;true&quot;</span></span><br><span class=\"line\">&#123;&#125; <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Object</span>  <span class=\"comment\">// &quot;true&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>怎么样？是不是有点晕，下面我们一部分一部分地来解释JavaScript中一些类型和相等相关的“潜规则”。</p>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><p>让我们先从JavaScript的数据类型开始。JavaScript中<em>只有</em>5种基本类型和引用类型。其中5种基本类型分别是：</p>\n<ul>\n<li>Undefined</li>\n<li>Null</li>\n<li>Number</li>\n<li>Boolean</li>\n<li>String</li>\n</ul>\n<p>除此之外只有1种引用类型——Object，Object本质上是由一组无序的键值对组成。5种基本类型是按值访问的，引用类型Object是按引用访问的。</p>\n<p>可以使用typeof操作符监测变量的基本类型。*它可以判断变量是否为除null的其他5种基本类型以及function类型。除此之外都会返回”object”*。之所以null的typeof结果也为”object”，是因为null实际上表示引用指向空对象。</p>\n<p>使用instanceof可以判断引用类型的具体值。使用方法类似于A instanceof B的形式。当B为“Object”时，表达式永远返回true。因为根据规定，所有引用类型的值都是Object的实例。</p>\n<p>下面是几个例子。通过instanceof操作符可以很方便地区分空数组和空对象（当然还有Object.prototype.toString.call()和[].concat()两种方法。）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>([] <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"regexp\">/w+/g</span> <span class=\"keyword\">instanceof</span> <span class=\"title class_\">RegExp</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h2><h3 id=\"to-Boolean类型\"><a href=\"#to-Boolean类型\" class=\"headerlink\" title=\"to Boolean类型\"></a>to Boolean类型</h3><p>Boolean类型是ECMAScript中使用最多的类型之一。类型只有true和false两个字面量。<b>true不一定等于1，false也不一定等于0</b>.可以通过调用Boolean()函数将其他类型转型为Boolean类型。规则如下：</p>\n<ul>\n<li>String类型：非空字符串&#x3D;&gt;true，空字符串&#x3D;&gt;false</li>\n<li>Number类型：非零数字（包括Inifity）&#x3D;&gt;true, 0和NaN&#x3D;&gt;false</li>\n<li>Object类型：任何对象&#x3D;&gt;true, null&#x3D;&gt;false</li>\n<li>Undefined：false</li>\n</ul>\n<p>在使用if()语句或三元操作符等情况要求Boolean类型时，括号内的表达式将会自动使用Boolean()函数转换为布尔类型。</p>\n<h3 id=\"to-String类型\"><a href=\"#to-String类型\" class=\"headerlink\" title=\"to String类型\"></a>to String类型</h3><p>有两种方法可以将值转为字符串，一种是使用几乎所有值都有的toString方法，对于null和undefined使用另一种——String()函数。</p>\n<p>前者适用于除null和undefined外的所有值，甚至String本身（返回一个自身的副本）。有些toString()方法接收一个基数作为参数（如Number）对Object使用toString方法时，会根据对象内toString的定义决定。</p>\n<ul>\n<li>Array返回逗号隔开的不包括外侧中括号的字符串</li>\n<li>Function返回Function定义的字符串</li>\n<li>普通Object返回”[object Object]”</li>\n<li>null和undefined分别返回”null”和”undefined”</li>\n</ul>\n<h3 id=\"to-Number类型\"><a href=\"#to-Number类型\" class=\"headerlink\" title=\"to Number类型\"></a>to Number类型</h3><p>可以使用Number(), parseInt()和parseFloat()三个函数做强制转换。转换到Number类型的规则要更好理解些。</p>\n<ul>\n<li>是Boolean类型时，true和false分别转换到1和0</li>\n<li>数字类型时，返回本身</li>\n<li>null时返回0</li>\n<li>undefined时返回NaN</li>\n<li>对字符串使用类似于parseInt和parseFloat类似的方法（可以识别0x这样的进制前缀<b>甚至Infinity这样的字符串</b>）</li>\n<li>对象使用valueOf()方法，再使用之前的规则；如果结果是NaN，再使用toString()方法作转换</li>\n</ul>\n<h2 id=\"类型转换场景\"><a href=\"#类型转换场景\" class=\"headerlink\" title=\"类型转换场景\"></a>类型转换场景</h2><h3 id=\"一元加减\"><a href=\"#一元加减\" class=\"headerlink\" title=\"一元加减\"></a>一元加减</h3><p>一元加减只需对操作数强制转换到Number类型。向下面这样的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"string\">&quot;01&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> s2 = <span class=\"string\">&quot;1.1&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> s3 = <span class=\"string\">&quot;z&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"number\">1.1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;</span><br><span class=\"line\">    <span class=\"attr\">valueOf</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">s1 = +s1; <span class=\"comment\">// 1</span></span><br><span class=\"line\">s2 = +s2; <span class=\"comment\">// 1.1</span></span><br><span class=\"line\">s3 = -s3; <span class=\"comment\">// NaN</span></span><br><span class=\"line\">b = +b;   <span class=\"comment\">// 0</span></span><br><span class=\"line\">f = +f;\t  <span class=\"comment\">// 1.1</span></span><br><span class=\"line\">o = -o;\t  <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"加性操作符\"><a href=\"#加性操作符\" class=\"headerlink\" title=\"加性操作符\"></a>加性操作符</h3><p>ECMAScript中规定的加减法这两个操作符有一些特殊行为，不仅处理数值的加减，还处理字符串的加减。因此转换规则还有些复杂。</p>\n<h4 id=\"加法\"><a href=\"#加法\" class=\"headerlink\" title=\"加法\"></a>加法</h4><p>优先做数值加减，无法完成时做字符串拼接。两个操作数都是<b>数值</b>时，执行常规的加法计算。</p>\n<ul>\n<li>一个操作数为NaN时，返回NaN</li>\n<li>Inifity + -Inifity，返回NaN</li>\n<li>+0 加 -0，返回+0</li>\n</ul>\n<p>只要有一个操作数为<b>字符串</b>类型，应用下面规则：</p>\n<ul>\n<li>两个都是字符串时，则将它们拼接起来。</li>\n<li>一个是字符串时，先将另一个转换为字符串</li>\n</ul>\n<p>布尔值和null以及undefined在另一个操作数是数值类型时转换为<b>数值类型</b>，反之转换为<b>字符串类型</b>。<br>一个操作数为对象时，转换为<b>字符串类型</b>。</p>\n<h4 id=\"减法\"><a href=\"#减法\" class=\"headerlink\" title=\"减法\"></a>减法</h4><p>与加法类似，除了数值相减减法也需要做一些类型转换。但是和加法不一样的是，<em>减法返回的一定是Number类型</em>。</p>\n<ul>\n<li>一个数值为NaN时，结果为NaN</li>\n<li>同号的Infinity相减返回NaN（如Infinity - Infinity），异号的Infinity相减等于第一个操作数</li>\n<li>除了-0减+0返回-0，其余0间相减均返回+0</li>\n<li>操作数出现字符串、布尔值、null、undefined时，做Number转换再进行数值减法</li>\n<li>对象先尝试用valueOf方法获得对象数值，若无此方法则调用toString方法，并转换得到的字符串。</li>\n</ul>\n<h3 id=\"关系操作符\"><a href=\"#关系操作符\" class=\"headerlink\" title=\"关系操作符\"></a>关系操作符</h3><p>关系操作符即大于（&gt;）、小于（&lt;）、大于等于（&gt;&#x3D;）和小于等于（&lt;&#x3D;）。在操作数并非纯数值时，ECMAScript也会进行数据转换或一些奇怪的操作。</p>\n<ul>\n<li>两个操作数都是数值时，进行数值比较</li>\n<li>两个操作数都是字符串时，按照对应字符编码顺序比较</li>\n<li>一个操作数是数值时，转换另一个为数值再比较</li>\n<li>一个操作数是对象时，优先使用valueOf方法比较数值，没有该方法时再使用toString方法</li>\n<li>任何数和NaN比较都会返回false</li>\n</ul>\n<h2 id=\"相等和全等\"><a href=\"#相等和全等\" class=\"headerlink\" title=\"相等和全等\"></a>相等和全等</h2><p>相等和全等用于确认两个变量是否相等。对此ECMAScript提供两组操作符：-相等-和-全等-。相等先转换类型后比较，全等仅比较不转换类型。由于情况较多较复杂，这里单独列一节。</p>\n<p>ECMAScript中相等操作符为&#x3D;&#x3D;。不相等操作符为!&#x3D;。它们都会先强制转型变量再相互比较。转换规则如下：</p>\n<ul>\n<li>先将<b>布尔值</b>转换为数值，false转换为0，true转换为1</li>\n<li><b>字符串</b>和<b>数值</b>比较时，将字符串转换为数值</li>\n<li>两个操作数都是<b>对象</b>时，判断它们是否指向同一个对象（只比较引用）</li>\n<li>只有一个操作数是<b>对象</b>时，调用valueOf()或toString()方法获得基本类型值</li>\n<li><b>null</b>和<b>undefined</b>是相等的</li>\n<li><b>null</b>和<b>undefined</b>在比较时不会被转换</li>\n<li>NaN出现时，相等操作符返回false</li>\n</ul>\n<p>全等操作符为&#x3D;&#x3D;&#x3D;，对象的不全等操作符为!&#x3D;&#x3D;。它们不会转换变量类型，相比较类型后比较值。因此行为更容易预测。</p>\n",
            "tags": [
                "JavaScript",
                "类型转换",
                "==",
                "类型判断"
            ]
        }
    ]
}