{
    "version": "https://jsonfeed.org/version/1",
    "title": "Shenlvmeng's Blog • All posts by \"lint\" tag",
    "description": "Be sharp, my friend.",
    "home_page_url": "http://shenlvmeng.github.com/blog",
    "items": [
        {
            "id": "http://shenlvmeng.github.com/blog/2017/04/13/project-habits/",
            "url": "http://shenlvmeng.github.com/blog/2017/04/13/project-habits/",
            "title": "提升项目可维护性的一些习惯",
            "date_published": "2017-04-13T09:42:38.000Z",
            "content_html": "<p><img src=\"/blog/images/poster/project-habits.jpeg\"></p>\n<blockquote><p>软件生命周期中80%的成本消耗在了维护上</p>\n<footer><strong>《Java语言编码规范》</strong></footer></blockquote>\n\n<p>在前端编码时，经常遇到多人协作的情况，一些工具可以很好地提升代码维护成本。这里把最近的学习中遇到的几个分享在下面。</p>\n<h3 id=\"EditorConfig\"><a href=\"#EditorConfig\" class=\"headerlink\" title=\"EditorConfig\"></a>EditorConfig</h3><p><img src=\"/blog/images/editorconfig.png\"></p>\n<p><a href=\"http://editorconfig.org/\">EditorConfig</a>是一套在编辑器间统一代码格式的解决方案。一个EditorConfig项目由<code>.editorconfig</code>自定义文件格式。相应的编辑器插件会按照配置文件格式化文档。</p>\n<p>EditorConfig的语法类似<code>.gitignore</code>，比较好理解。下面是官网给出了规定Python和JavaScript文件格式的<code>.editorconfig</code>文件样例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># EditorConfig is awesome: http://EditorConfig.org</span><br><span class=\"line\"></span><br><span class=\"line\"># top-most EditorConfig file</span><br><span class=\"line\">root = true</span><br><span class=\"line\"></span><br><span class=\"line\"># Unix-style newlines with a newline ending every file</span><br><span class=\"line\">[*]</span><br><span class=\"line\">end_of_line = lf</span><br><span class=\"line\">insert_final_newline = true</span><br><span class=\"line\"></span><br><span class=\"line\"># Matches multiple files with brace expansion notation</span><br><span class=\"line\"># Set default charset</span><br><span class=\"line\">[*.&#123;js,py&#125;]</span><br><span class=\"line\">charset = utf-8</span><br><span class=\"line\"></span><br><span class=\"line\"># 4 space indentation</span><br><span class=\"line\">[*.py]</span><br><span class=\"line\">indent_style = space</span><br><span class=\"line\">indent_size = 4</span><br><span class=\"line\"></span><br><span class=\"line\"># Tab indentation (no size specified)</span><br><span class=\"line\">[Makefile]</span><br><span class=\"line\">indent_style = tab</span><br><span class=\"line\"></span><br><span class=\"line\"># Indentation override for all JS under lib directory</span><br><span class=\"line\">[lib/**.js]</span><br><span class=\"line\">indent_style = space</span><br><span class=\"line\">indent_size = 2</span><br><span class=\"line\"></span><br><span class=\"line\"># Matches the exact files either package.json or .travis.yml</span><br><span class=\"line\">[&#123;package.json,.travis.yml&#125;]</span><br><span class=\"line\">indent_style = space</span><br><span class=\"line\">indent_size = 2</span><br></pre></td></tr></table></figure>\n\n<p>不过通常的项目用不到这么复杂的配置文件。<a href=\"https://github.com/angular/angular.js/blob/master/.editorconfig\">这里</a>是Angular的配置文件，<a href=\"https://github.com/vuejs/vue/blob/1.1/.editorconfig\">这里</a>是曾经Vue.js的配置文件。官网给出了完整的使用EditorConfig的<a href=\"https://github.com/editorconfig/editorconfig/wiki/Projects-Using-EditorConfig\">工程列表</a>。</p>\n<h4 id=\"存放位置\"><a href=\"#存放位置\" class=\"headerlink\" title=\"存放位置\"></a>存放位置</h4><p>打开一个文件时，EditorConfig插件会去打开文件的目录和其每一级父目录查找<code>.editorconfig</code>文件，直到有一个配置文件<code>root=true</code>。</p>\n<p>读取顺序从上到下，路径最短的文件最后被读取，优先级最高。</p>\n<h4 id=\"关于文件格式\"><a href=\"#关于文件格式\" class=\"headerlink\" title=\"关于文件格式\"></a>关于文件格式</h4><p>EditorConfig文件使用<a href=\"https://zh.wikipedia.org/wiki/INI%E6%96%87%E4%BB%B6\">INI格式</a>，目的是可以和<a href=\"https://docs.python.org/2/library/configparser.html\">Python Config Library</a>兼容。每个分段（原文：‘section’）由一个<a href=\"https://en.wikipedia.org/wiki/Glob_(programming)\">globs</a>开头。斜杠(<code>/</code>)作为路径分隔符，<code>#</code>或者<code>;</code>作为注释。注释应该单独占一行。EditorConfig文件使用UTF-8格式、CRLF或LF作为换行符。</p>\n<h5 id=\"通配符\"><a href=\"#通配符\" class=\"headerlink\" title=\"通配符\"></a>通配符</h5><p>EditorConfig目前支持下面这些通配符：</p>\n<ul>\n<li><code>*</code>\t匹配除&#x2F;之外的任意字符串</li>\n<li><code>**</code>\t匹配任意字符串</li>\n<li><code>?</code>\t匹配任意单个字符</li>\n<li><code>[name]</code>\t匹配name字符</li>\n<li><code>[!name]</code>\t匹配非name字符</li>\n<li><code>&#123;s1,s3,s3&#125;</code>\t匹配任意给定的字符串（0.11.0起支持）</li>\n<li><code>&#123;num1..num2&#125;</code>匹配<em>num1</em>和<em>num2</em>间的整数</li>\n</ul>\n<p>最后特殊字符可以用<code>\\</code>转义.</p>\n<h5 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h5><p>目前<a href=\"https://github.com/editorconfig/editorconfig/wiki/EditorConfig-Properties\">普遍支持的属性</a>包括下面这些：</p>\n<ul>\n<li>root：表明是最顶层的配置文件，发现设为true时，才会停止查找.editorconfig文件。</li>\n<li>indent_style：可以选择tab或space</li>\n<li>indent_size：设置整数表示规定每级缩进的列数或空格数。如果设定为tab，则会使用tab_width的值（如果已指定）。</li>\n<li>tab_width：设置整数用于指定替代tab的列数。默认值就是indent_size的值，一般无需指定。</li>\n<li>end_of_line：定义换行符，支持lf、cr和crlf。</li>\n<li>charset：编码格式，支持latin1、utf-8、utf-8-bom、utf-16be和utf-16le，不建议使用uft-8-bom。</li>\n<li>trim_trailing_whitespace：设为true表示会除去换行行首的任意空白字符，false反之。</li>\n<li>insert_final_newline：设为true表明使文件以一个空白行结尾，false反之。</li>\n</ul>\n<h4 id=\"支持情况\"><a href=\"#支持情况\" class=\"headerlink\" title=\"支持情况\"></a>支持情况</h4><p>目前已有大量的IDE或文本编辑器支持EditorConfig配置。有些不需要下载插件，有些则需要。详情可参见<a href=\"(http://editorconfig.org/\">官网</a>。</p>\n<h3 id=\"eslint\"><a href=\"#eslint\" class=\"headerlink\" title=\"eslint\"></a>eslint</h3><p><a href=\"http://eslint.org/\">ESLint</a>是非常流行的一个JavaScript代码检查器。便于在运行前检查出代码中潜在的错误。它的作者是Nicholas Zakas，红宝书的作者。网站也有<a href=\"http://eslint.cn/\">中译版</a>。</p>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p>安装eslint前，需要有node.js的环境，之后通过npm安装即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g eslint</span><br></pre></td></tr></table></figure>\n\n<p>当然也可以本地安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install eslint --save-dev</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><p>安装完成后，需要在项目目录下生成<code>.eslintrc</code>配置文件才可以使用<code>eslint</code>命令。这一步可以通过<code>eslint --init</code>按着引导完成，也可以根据自己需要修改。eslint推荐使用了一些规则，可以通过下面这样开启（<code>extends</code>的属性还可以是<code>all</code>，即启用所有规则，<strong>不推荐使用</strong>）：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;extends&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span> <span class=\"string\">&quot;eslint:recommended&quot;</span> <span class=\"punctuation\">]</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>配置项里，还可以通过<code>env</code>指令<a href=\"http://eslint.cn/docs/user-guide/configuring#specifying-environments\">代码环境</a>，像下面这样：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;env&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;browser&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;node&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>同样，具体的<a href=\"http://eslint.cn/docs/rules/\">规则</a>也是可以配置的，每个规则的配置项都有一个默认值，规则键对应的值为数值时，是下面的意思</p>\n<ul>\n<li>0 Disable the rule</li>\n<li>1 Warn about the rule</li>\n<li>2 Throw error about the rule</li>\n</ul>\n<p>对应的值为数组时，则会更改规则配置项的原默认值，如下面例子中的<code>quote</code>规则：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;rules&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">// 使用默认的分号规则，违背时会有警告消息</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;semi&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\">// 使用双引号包裹字符串，违背是会抛出错误</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;quotes&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"number\">2</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;double&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>关于eslint的更多配置项，可参考<a href=\"http://eslint.cn/docs/user-guide/configuring\">官网</a>。</p>\n<p>若项目中使用到了ES6语法，则还需要安装<code>babel-eslint</code>包，并指定<code>.eslintrc</code>中<code>parser</code>和<code>parseOptions</code>两项。具体的配置大概是下面这样：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;extends&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span> <span class=\"string\">&quot;eslint:recommended&quot;</span> <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;parser&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;babel-eslint&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;parserOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        ecmaVersion<span class=\"punctuation\">:</span> <span class=\"number\">6</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  \t...</span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>ESLint 支持几种格式的配置文件：</p>\n<ul>\n<li>JavaScript - 使用<code>.eslintrc.js</code>然后输出一个配置对象。</li>\n<li>YAML - 使用<code>.eslintrc.yaml</code>或<code>.eslintrc.yml</code>去定义配置的结构。</li>\n<li>JSON - 使用<code>.eslintrc.json</code>去定义配置的结构ESLint的JSON文件允许JavaScript风格的注释。</li>\n<li>Deprecated - 使用<code>.eslintrc</code>，可以使JSON也可以是YAML。</li>\n<li>package.json - 在<code>package.json</code>里创建一个<code>eslintConfig</code>属性，在那里定义你的配置。</li>\n</ul>\n<p>如果同一个目录下有多个配置文件，ESLint只会使用一个，优先级是上面列表从上到下的顺序。</p>\n<h4 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h4><p>可以在文件中书写注释在运行时更改eslint的配置（实际上几乎所有的配置项都可以在注释中通过<code>eslint-xxx</code>这样的形式修改）。</p>\n<p>当文件中出现已考虑到的规则例外时，可以通过<code>/*eslint quotes: [&quot;error&quot;, &quot;double&quot;]*/</code>或<code>/*eslint eqeqeq: 0, curly: 2*/</code>这样的形式临时添加例外。</p>\n<p>当文件出现不想被检测到的规则例外时，可以通过<code>/*eslint-disable*/</code>和<code>/*eslint-enable*/</code>避免警告。单行例外可以使用<code>/*eslint-disable-line*/</code>更详细的配置可以参见<a href=\"http://eslint.cn/docs/user-guide/configuring#disabling-rules-with-inline-comments\">文档</a>。</p>\n<h4 id=\"sublime插件\"><a href=\"#sublime插件\" class=\"headerlink\" title=\"sublime插件\"></a>sublime插件</h4><p>上面说的这些工作，在配置完成后，需要在命令行中通过<code>eslint xxx.file</code>这样的形式lint。借助编辑器的插件可以获得可视化的lint结果，妈妈再也不用担心我的找不到错误了（误）。因为个人原因，下面仅以sublime为例。</p>\n<p>下载eslint for sublime插件前，需要下载Sublime-Linter。因为前者利用了后者作为lint的平台。在<code>Ctrl+Shift+P</code>找到<code>Package Controll: Install Packages</code>后（什么？你没有装Package Control？），搜索Sublime-Linter下载安装即可。完成后，可以在<code>Prefences -&gt; Package Settings</code>或<code>Tools</code>选项卡中找到Sublime Linter的身影。</p>\n<p>之后同样的方式搜索Sublime-contrib-eslint下载安装即可。建议在安装前去<a href=\"https://github.com/roadhump/SublimeLinter-eslint\">官网</a>看看，避免遇到不必要的问题。</p>\n<p>这些工作完成后了，可以选择SublimeLinter的mode为load&#x2F;save，之后在文件载入和保存时都会对文件进行lint操作，并将违背规则的地方标出。</p>\n<h3 id=\"Commit-message规范\"><a href=\"#Commit-message规范\" class=\"headerlink\" title=\"Commit message规范\"></a>Commit message规范</h3><p><img src=\"/blog/images/git-commit.png\"></p>\n<p>git每次修改后需要填写commit message才能提交。这一步可以通过给<code>git commit</code>添加<code>-m</code>参数完成，像下面那样，也可以在<code>git commit</code>打开的vi界面下填写多行文本。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">&#x27;some commit message&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>git并没有对commit message的风格做出规范，可以用中文，可以用英文，甚至当你不知道该写些什么的时候，还可以去某些<a href=\"http://whatthecommit.com/index.txt\">网站</a>参考。</p>\n<p>但是在团队协作中，还是建议清晰明了地书写此次commit的目的和做的修改。实际上，commit message规范这种事一直在做。比如<a href=\"https://eggjs.org/zh-cn/contributing.html#commit-%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83\">egg.js</a>, <a href=\"https://github.com/conventional-changelog/conventional-changelog/blob/v0.5.3/conventions/angular.md\">Angular</a>或者更加简洁的规范：<a href=\"https://github.com/thoughtbot/dotfiles/blob/master/gitmessage\">这样</a>或<a href=\"https://github.com/erlang/otp/wiki/Writing-good-commit-messages\">这样</a>。其中Angular的规范应用较广，还有<a href=\"http://commitizen.github.io/cz-cli/\">commitizen</a>工具帮助生成changelog和检查commit message样式。</p>\n<h5 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a>格式</h5><p>根据Angular的规范，commmit message包括三个部分：<strong>Header</strong>, <strong>Body</strong>和<strong>Footer</strong>。其中Header是必需的，Body和Footer则不是。模板像下面这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class=\"line\">// 空行</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">// 空行</span><br><span class=\"line\">&lt;footer&gt;</span><br></pre></td></tr></table></figure>\n\n<p>模板中，<strong>type</strong>为提交commit的类型，<strong>只有</strong>下面这些选择：</p>\n<ul>\n<li>feat: 新功能</li>\n<li>fix: 修复问题</li>\n<li>docs: 修改文档</li>\n<li>style: 修改代码格式，不影响代码逻辑</li>\n<li>refactor: 重构代码，理论上不影响现有功能</li>\n<li>perf: 提升性能</li>\n<li>test: 增加修改测试用例</li>\n<li>chore: 修改工具相关（包括但不限于文档、代码生成等）</li>\n<li>deps: 升级依赖</li>\n</ul>\n<p>其中前两种commit一定会出现在changelog中。</p>\n<p><strong>scope</strong>为修改文件的范围（包括但不限于doc, middleware, core, config, plugin）；<strong>subject</strong>用一句话清楚的描述这次提交做了什么，首字母小写；<strong>body</strong>作为subject的补充，增加原因和目的等具体内容，可以不写。</p>\n<p><strong>footer</strong>部分中，<strong>当有非兼容修改(Breaking Change)时必须在这里描述清楚</strong>，或者描述关联issue。下面是一个完整的例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fix($compile): [BREAKING_CHANGE] couple of unit tests for IE9</span><br><span class=\"line\">Older IEs serialize html uppercased, but IE9 does not...</span><br><span class=\"line\">Would be better to expect case insensitive, unfortunately jasmine does</span><br><span class=\"line\">not allow to user regexps for throw expectations.</span><br><span class=\"line\">Document change on eggjs/egg#123</span><br><span class=\"line\">Closes #392</span><br><span class=\"line\">BREAKING CHANGE:</span><br><span class=\"line\">  Breaks foo.bar api, foo.baz should be used instead</span><br></pre></td></tr></table></figure>\n\n<p>代码用于撤销此前commit所做修改时，message用revert开头，后面跟着被撤销commit的Header。像下面这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">revert: feat(pencil): add &#x27;graphiteWidth&#x27; option</span><br><span class=\"line\"></span><br><span class=\"line\">This reverts commit 667ecc1654a317a13331b17617d973392f415f02.</span><br></pre></td></tr></table></figure>\n\n<p>如果当前commit与被撤销的commit，在同一个发布（release）里面，那么它们都不会出现在Change log中。</p>\n<h5 id=\"Commitizen\"><a href=\"#Commitizen\" class=\"headerlink\" title=\"Commitizen\"></a>Commitizen</h5><p><a href=\"http://commitizen.github.io/cz-cli/\">Commitizen</a>就是方便你做出上面提交的工具，可以通过npm安装。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g commitizen</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，使用<code>git cz</code>代替<code>git commit</code>命令来提交改动。之后会出现指引帮助你完成一次合格的提交。</p>\n<p><img src=\"/blog/images/commitizen.png\"></p>\n<p>commitizen的插件cz-conventional-changelog可以帮助我们完成commit message，首先通过下面的命令安装并配置cz-conventional-changelog。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cz-conventional-changelog</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;&#123; &quot;path&quot;: &quot;cz-conventional-changelog&quot; &#125;&#x27;</span> &gt; ~/.czrc</span><br></pre></td></tr></table></figure>\n\n<p>之后运行下面的命令即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">commitizen init cz-conventional-changelog --save-dev --save-exact</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"http://editorconfig.org/\">EditorConfig</a></li>\n<li><a href=\"http://eslint.cn/\">ESLint中文站</a></li>\n<li><a href=\"https://github.com/roadhump/SublimeLinter-eslint\">roadhump&#x2F;SublimeLinter-eslint: This linter plugin for SublimeLinter provides an interface to ESLint</a></li>\n<li><a href=\"http://jonathancreamer.com/setup-eslint-with-es6-in-sublime-text/\">Setup ESLint with ES6 in Sublime Text</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html\">Commit message 和 Change log 编写指南</a></li>\n<li><a href=\"https://eggjs.org/zh-cn/contributing.html\">egg.js代码贡献规范</a></li>\n<li><a href=\"http://commitizen.github.io/cz-cli/\">Commitizen</a></li>\n</ul>\n",
            "tags": [
                "习惯",
                "lint",
                "editorconfig",
                "commit message"
            ]
        }
    ]
}