<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Shenlvmeng&#39;s Blog • Posts by &#34;技术&#34; tag</title>
        <link>http://shenlvmeng.github.com/blog</link>
        <description>Be sharp, my friend.</description>
        <language>zh-CN</language>
        <pubDate>Mon, 02 Feb 2015 23:39:56 +0800</pubDate>
        <lastBuildDate>Mon, 02 Feb 2015 23:39:56 +0800</lastBuildDate>
        <category>总结</category>
        <category>制度</category>
        <category>道德</category>
        <category>文官</category>
        <category>万历</category>
        <category>明朝</category>
        <category>读书笔记</category>
        <category>展望</category>
        <category>2018</category>
        <category>2019</category>
        <category>flag</category>
        <category>2020</category>
        <category>2021</category>
        <category>2022</category>
        <category>2023</category>
        <category>面试</category>
        <category>前端</category>
        <category>FAQ</category>
        <category>HTML</category>
        <category>CSS</category>
        <category>style guide</category>
        <category>编程</category>
        <category>范式</category>
        <category>设计</category>
        <category>艺术</category>
        <category>质量</category>
        <category>async_hooks</category>
        <category>cls-hooked</category>
        <category>logId</category>
        <category>录音</category>
        <category>getUserMedia</category>
        <category>AudioContext</category>
        <category>PCM</category>
        <category>WAVE</category>
        <category>二叉搜索树</category>
        <category>算法</category>
        <category>回忆</category>
        <category>老朋友</category>
        <category>C</category>
        <category>Hash</category>
        <category>布隆过滤器</category>
        <category>字符串检索</category>
        <category>canvas</category>
        <category>流程图</category>
        <category>d3</category>
        <category>g6</category>
        <category>zrender</category>
        <category>processOn</category>
        <category>SDN</category>
        <category>cbench</category>
        <category>安装说明</category>
        <category>绘图</category>
        <category>动画</category>
        <category>攻略</category>
        <category>流水账</category>
        <category>成都</category>
        <category>重庆</category>
        <category>武汉</category>
        <category>重构</category>
        <category>代码</category>
        <category>代码风格</category>
        <category>数据可视化</category>
        <category>爬虫</category>
        <category>chrome</category>
        <category>crx</category>
        <category>扩展</category>
        <category>CORS</category>
        <category>跨域</category>
        <category>盒模型</category>
        <category>浮动</category>
        <category>Reactive Programming</category>
        <category>JavaScript</category>
        <category>Cycle.js</category>
        <category>Dart</category>
        <category>最佳实践</category>
        <category>引流</category>
        <category>universal-link</category>
        <category>app-link</category>
        <category>脚手架</category>
        <category>degit</category>
        <category>git</category>
        <category>设计模式</category>
        <category>类</category>
        <category>接口</category>
        <category>抽象类</category>
        <category>DOM</category>
        <category>Docker</category>
        <category>ONOS</category>
        <category>控制器</category>
        <category>虚拟化</category>
        <category>笔记</category>
        <category>UX</category>
        <category>UED</category>
        <category>准则</category>
        <category>Java</category>
        <category>Ruby</category>
        <category>反射</category>
        <category>编程范式</category>
        <category>鸭子类型</category>
        <category>管理</category>
        <category>效率</category>
        <category>知识工作者</category>
        <category>卓有成效</category>
        <category>Elm</category>
        <category>框架</category>
        <category>函数式编程</category>
        <category>虚网映射</category>
        <category>Javascript</category>
        <category>并发</category>
        <category>event loop</category>
        <category>覆盖率</category>
        <category>端到端测试</category>
        <category>istanbul</category>
        <category>istanbuljs</category>
        <category>JavaSript</category>
        <category>Express</category>
        <category>源码</category>
        <category>代码覆盖率</category>
        <category>istanbul-middleware</category>
        <category>代码插桩</category>
        <category>require钩子</category>
        <category>babel-plugin-istanbul</category>
        <category>css</category>
        <category>html5</category>
        <category>flex</category>
        <category>javascript</category>
        <category>roadmap</category>
        <category>闭包</category>
        <category>Haskell</category>
        <category>monad</category>
        <category>后端</category>
        <category>管理后台</category>
        <category>egg.js</category>
        <category>工作流</category>
        <category>pull request</category>
        <category>golang</category>
        <category>语言学习</category>
        <category>黑客与画家</category>
        <category>创业</category>
        <category>骑行</category>
        <category>海南</category>
        <category>图文</category>
        <category>reflow</category>
        <category>repaint</category>
        <category>命名法</category>
        <category>成功学</category>
        <category>自我建设</category>
        <category>HTTP</category>
        <category>HTTP/2</category>
        <category>SPDY</category>
        <category>QUIC</category>
        <category>HTTPS</category>
        <category>状态码</category>
        <category>网络攻击</category>
        <category>介绍</category>
        <category>图片渲染</category>
        <category>html2canvas</category>
        <category>dom-to-image</category>
        <category>electron</category>
        <category>indexedDB</category>
        <category>异步</category>
        <category>Generator</category>
        <category>thunk</category>
        <category>async</category>
        <category>函数表达式</category>
        <category>对象</category>
        <category>继承</category>
        <category>类型转换</category>
        <category>==</category>
        <category>类型判断</category>
        <category>猫</category>
        <category>杀手</category>
        <category>管理学</category>
        <category>领导力</category>
        <category>梯队</category>
        <category>移动端</category>
        <category>UI</category>
        <category>自适应</category>
        <category>rem</category>
        <category>Electron</category>
        <category>GUI</category>
        <category>gpx</category>
        <category>template</category>
        <category>Electron Builder</category>
        <category>PWA</category>
        <category>方法论</category>
        <category>夜话</category>
        <category>多线</category>
        <category>生活</category>
        <category>密码</category>
        <category>密钥</category>
        <category>技改</category>
        <category>Vue</category>
        <category>gulp</category>
        <category>瀑布流</category>
        <category>电影</category>
        <category>PHP</category>
        <category>参考</category>
        <category>思维</category>
        <category>学习能力</category>
        <category>右脑</category>
        <category>经济学</category>
        <category>宏观经济学</category>
        <category>术语</category>
        <category>GDP</category>
        <category>CPI</category>
        <category>储蓄</category>
        <category>投资</category>
        <category>金融市场</category>
        <category>股票</category>
        <category>债券</category>
        <category>美联储</category>
        <category>失业</category>
        <category>货币</category>
        <category>现值</category>
        <category>准备金</category>
        <category>货币中性</category>
        <category>通货膨胀</category>
        <category>汇率</category>
        <category>购买力</category>
        <category>净出口</category>
        <category>资产净流出</category>
        <category>总需求</category>
        <category>总供给</category>
        <category>流动性偏好</category>
        <category>乘数效应</category>
        <category>菲利普斯曲线</category>
        <category>微观经济学</category>
        <category>供求</category>
        <category>贸易</category>
        <category>市场</category>
        <category>税</category>
        <category>剩余</category>
        <category>外部性</category>
        <category>公共物品</category>
        <category>公共资源</category>
        <category>生产成本</category>
        <category>利润</category>
        <category>垄断</category>
        <category>价格歧视</category>
        <category>寡头</category>
        <category>垄断竞争</category>
        <category>生产要素市场</category>
        <category>贫困</category>
        <category>消费者选择理论</category>
        <category>不对称信息</category>
        <category>政治经济学</category>
        <category>行为经济学</category>
        <category>VSCode</category>
        <category>编辑器</category>
        <category>IDE</category>
        <category>hybrid</category>
        <category>JSBridge</category>
        <category>Web Worker</category>
        <category>Service Worker</category>
        <category>习惯</category>
        <category>lint</category>
        <category>editorconfig</category>
        <category>commit message</category>
        <category>量子物理</category>
        <category>史话</category>
        <category>埋点</category>
        <category>raven.js</category>
        <category>前端监控</category>
        <category>文本编辑器</category>
        <category>quill</category>
        <category>结构化数据</category>
        <category>React</category>
        <category>Hooks</category>
        <category>函数组件</category>
        <category>复用</category>
        <category>状态管理</category>
        <category>redux</category>
        <category>MobX</category>
        <category>代码质量</category>
        <category>重来</category>
        <category>requestAnimationFrame</category>
        <category>TypeScript</category>
        <category>路书</category>
        <category>gpx解析</category>
        <category>EXIF</category>
        <category>人类</category>
        <category>生存</category>
        <category>基因</category>
        <category>响应式编程</category>
        <category>RxJS</category>
        <category>成长</category>
        <category>业务</category>
        <category>思想</category>
        <category>程序设计</category>
        <category>心理学</category>
        <category>自我</category>
        <category>社会思维</category>
        <category>社会影响</category>
        <category>文化</category>
        <category>性别</category>
        <category>从众</category>
        <category>说服</category>
        <category>临床诊断</category>
        <category>陪审团</category>
        <category>司法</category>
        <category>物质主义</category>
        <category>健康</category>
        <category>社会关系</category>
        <category>偏见</category>
        <category>攻击行为</category>
        <category>亲密关系</category>
        <category>友谊</category>
        <category>爱情</category>
        <category>利他</category>
        <category>冲突</category>
        <category>和解</category>
        <category>软技能</category>
        <category>理财</category>
        <category>健身</category>
        <category>自我营销</category>
        <category>学习</category>
        <category>商业模式</category>
        <category>产品</category>
        <category>校园网</category>
        <category>互联网</category>
        <category>技术</category>
        <category>web开发</category>
        <category>哲思</category>
        <category>择偶观</category>
        <category>validator</category>
        <category>大文件</category>
        <category>visibilityChange</category>
        <category>IntersectionObserver</category>
        <category>图种</category>
        <category>draggable</category>
        <category>webpack</category>
        <category>z-index</category>
        <category>git submodule</category>
        <category>object-fit</category>
        <category>object-position</category>
        <category>BroadcastChannel</category>
        <category>extract-text-webpack-plugin</category>
        <category>lottie</category>
        <category>backface-visibility</category>
        <category>egret</category>
        <category>mock</category>
        <category>SSO</category>
        <category>autoprefixer</category>
        <category>polyfill</category>
        <category>Android</category>
        <category>ffmpeg</category>
        <category>React Hooks</category>
        <category>rollup</category>
        <category>CDN</category>
        <category>DNS</category>
        <category>CNAME</category>
        <category>架构</category>
        <category>组件</category>
        <category>ssh</category>
        <category>fis-receiver</category>
        <category>tmux</category>
        <category>origami</category>
        <category>promise</category>
        <category>encodeURI</category>
        <category>encodeURIComponent</category>
        <category>axios</category>
        <category>charles</category>
        <category>黑色幽默</category>
        <category>朋友</category>
        <category>梦</category>
        <category>濒死</category>
        <category>江南</category>
        <category>苏州</category>
        <category>无锡</category>
        <category>宜兴</category>
        <category>湖州</category>
        <category>南浔</category>
        <category>游记</category>
        <category>随笔</category>
        <category>群众</category>
        <category>理论</category>
        <category>实效</category>
        <category>测试</category>
        <category>长沙</category>
        <category>杭州</category>
        <category>湖南</category>
        <category>核酸</category>
        <category>美食</category>
        <category>云南</category>
        <category>丽江</category>
        <category>大理</category>
        <category>青岛</category>
        <category>济南</category>
        <category>山东</category>
        <category>西北</category>
        <category>银川</category>
        <category>西宁</category>
        <category>青海湖</category>
        <category>西海镇</category>
        <category>茶卡盐湖</category>
        <category>厦门</category>
        <category>感受</category>
        <category>C语言</category>
        <category>树</category>
        <category>主干开发</category>
        <category>GitFlow</category>
        <category>GithubFlow</category>
        <category>typescript</category>
        <category>类型系统</category>
        <category>webrtc</category>
        <category>RTMP</category>
        <category>首屏时间</category>
        <category>性能优化</category>
        <category>公司</category>
        <category>个人发展</category>
        <category>战略</category>
        <category>晋升</category>
        <category>哲学</category>
        <category>幸福</category>
        <category>人生</category>
        <category>叔本华</category>
        <category>Unix</category>
        <category>Rollup</category>
        <category>mouseout</category>
        <category>mouseleave</category>
        <category>lint-staged</category>
        <category>吸顶</category>
        <category>图片组件</category>
        <category>形式系统</category>
        <category>不完全性</category>
        <category>隐喻</category>
        <category>哥德尔</category>
        <category>巴赫</category>
        <category>埃舍尔</category>
        <category>济州</category>
        <category>西归浦</category>
        <category>城山</category>
        <category>咸德</category>
        <category>人工智能</category>
        <category>心智</category>
        <category>自指</category>
        <category>图灵</category>
        <category>马列主义</category>
        <category>恩格斯</category>
        <category>家庭</category>
        <category>国家</category>
        <category>阶级</category>
        <category>氏族</category>
        <category>哲学史</category>
        <category>孔子</category>
        <category>老子</category>
        <category>儒家</category>
        <category>道家</category>
        <category>佛教</category>
        <category>禅宗</category>
        <category>理学</category>
        <category>心学</category>
        <category>计算机</category>
        <category>微机原理</category>
        <category>门</category>
        <category>操作系统</category>
        <category>数字电路</category>
        <category>2024</category>
        <category>政府</category>
        <category>经济</category>
        <category>消费</category>
        <category>土地金融</category>
        <category>饮食</category>
        <category>蛋白质</category>
        <category>碳水</category>
        <category>慢性病</category>
        <category>三高</category>
        <category>肿瘤</category>
        <category>启蒙</category>
        <category>社会主义</category>
        <category>当代史</category>
        <category>共产党</category>
        <category>南明</category>
        <category>清</category>
        <category>顾诚</category>
        <item>
            <guid isPermalink="true">http://shenlvmeng.github.com/blog/2015/02/02/some-thinking-5/</guid>
            <title>重构与复提产品有感</title>
            <link>http://shenlvmeng.github.com/blog/2015/02/02/some-thinking-5/</link>
            <category>重构</category>
            <category>产品</category>
            <category>技术</category>
            <pubDate>Mon, 02 Feb 2015 23:39:56 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;2月2日，二月份第一个工作日。老大道佳和同事阳仔来了，技术组的三人总算全部到齐。再加上辰光大师兄，讨论时总算有了许多技术成分加入。此时，对产品未来开发的开发变得有了冲击和富有信息量起来。期间，道佳和阳仔（其实阳仔能力很强）提到了代码重构的概念。自己之前也有所感悟，这次找到共鸣有些高兴。&lt;/p&gt;
&lt;h2 id=&#34;关于重构&#34;&gt;&lt;a href=&#34;#关于重构&#34; class=&#34;headerlink&#34; title=&#34;关于重构&#34;&gt;&lt;/a&gt;关于重构&lt;/h2&gt;&lt;p&gt;有前几篇日记的缺点做借鉴，这里分点列出我的想法，力避废话和漫无头绪。&lt;/p&gt;
&lt;h4 id=&#34;重构是经常出现的&#34;&gt;&lt;a href=&#34;#重构是经常出现的&#34; class=&#34;headerlink&#34; title=&#34;重构是经常出现的&#34;&gt;&lt;/a&gt;重构是经常出现的&lt;/h4&gt;&lt;p&gt;起因是，身为技术的我们接手的是外包团队的一期作品，随着更高产品需求的提出，代码自然做了一番又一番的增删改查，渐渐地，我们愈发察觉到推倒重来似乎比继续修改来得更长远和轻松。今天对员工权限模糊问题的讨论是压倒骆驼的最后一根稻草。在讨论时，道佳提到重构是程序员避不开的环节，所谓两月一重构。我认为很有道理，诚如辰光在之前所说，产品的商业模式是会随市场反响改变的。这样，阳仔的事例就很好解释了——他在之前的创业团队当过技术，写代码时，他说到“我写的代码只能用2个月，这两个月后恐怕需要你们找跟你们一起做下去的技术重新写一遍。”&lt;/p&gt;
&lt;h4 id=&#34;重构来自新需求或新思想&#34;&gt;&lt;a href=&#34;#重构来自新需求或新思想&#34; class=&#34;headerlink&#34; title=&#34;重构来自新需求或新思想&#34;&gt;&lt;/a&gt;重构来自新需求或新思想&lt;/h4&gt;&lt;p&gt;产品在推出后，导向不可避免受到外界的影响。补丁打多了，衣服自然变得不适合穿。老版的代码经常跟不上方向的迅速变化，重构是最理想也是最有效的解决办法，治标且治本。另外，这里新思想是指对数据结构或身份权限等基本模型有了更深的认识抑或外界因素迫使基本模型做出适应（如用户量的庞大将考验数据表的设计），这次我们将要作出的重构一部分就是因为这个原因。&lt;/p&gt;
&lt;h4 id=&#34;重构是产品与技术的平衡点&#34;&gt;&lt;a href=&#34;#重构是产品与技术的平衡点&#34; class=&#34;headerlink&#34; title=&#34;重构是产品与技术的平衡点&#34;&gt;&lt;/a&gt;重构是产品与技术的平衡点&lt;/h4&gt;&lt;p&gt;产品设计和技术开发的思路刚好是两个不同方向。产品设计讲究MVP（Minimum Viable Product ），意为产品的最初设计一定要抓住核心，把产品的主要价值展现出来即可。拿给用户反馈后，再看情况做后续设计。因为，这样在成本上最节省，且成功概率最大。“迭代”一词在这里是最佳的形容，推出&amp;#x3D;&amp;gt;反馈&amp;#x3D;&amp;gt;复推出，如此周而复始，雪球越滚越大。归功于互联网的快速，可以“小步快跑”的传统行业互联网化将有很美好的场景（可惜的是，汽车等传统行业做不到），在短期内滚成很大规模。因此，初期产品追求短小而精悍，很忌讳全面。&lt;/p&gt;
&lt;p&gt;理想化的技术恰相反，毕竟只有对产品有了全面细致的思考，才能使保证产品在技术上的长时间可靠性。如，模型设计，数据表设计。这些正像大厦的地基，地基牢固，楼才搭得高。可是，绝大多数情况，产品等不了那么久，没有全面思考调研的时间，只能像上文提到那样，先做出突出主体的一部分。这样技术就不得不在新需求的压力下，对地基进行小范围修改，以保证产品的可靠性。可以想见，这样搭上去的楼注定不会牢固。&lt;/p&gt;
&lt;p&gt;重构恰好是两者中的平衡点。重构给了技术喘口气的时间，也能满足产品方面的新需求。正是由于它的普遍存在性。很多公司其实是一边打补丁，一边给自己铺后路设计新技术架构的。&lt;/p&gt;
&lt;h2 id=&#34;MVP与产品成功三内因&#34;&gt;&lt;a href=&#34;#MVP与产品成功三内因&#34; class=&#34;headerlink&#34; title=&#34;MVP与产品成功三内因&#34;&gt;&lt;/a&gt;MVP与产品成功三内因&lt;/h2&gt;&lt;p&gt;上文中也提到了，产品的设计是有讲究的。在初期设计时，一定要把握住MVP的思路，只呈现核心价值，用最小可验证产品证明它的可行性。微信就是个很典型的例子，1.0只推出了聊天功能，之后的摇一摇，朋友圈，支付等都是一点一点加上去的。充分的缓冲时间和较快的互联网产品周期，让它能稳步上升。它的内因是，未来无法预知，最小代价实验，随机应变是最放心的。好的产品经理不用识别未来，只要能识别好产品现在的走向就不错了。反过来看初期，若有的产品设计的面面俱到或是团队承诺已考虑到未来，多半走不远。&lt;/p&gt;
&lt;p&gt;产品在设计上有成功的三内因。一，满足刚需；二，用户黏性；三，用户体验。这里以师兄提到的找朋友出去玩的app来讨论。&lt;/p&gt;
&lt;h4 id=&#34;满足刚需&#34;&gt;&lt;a href=&#34;#满足刚需&#34; class=&#34;headerlink&#34; title=&#34;满足刚需&#34;&gt;&lt;/a&gt;满足刚需&lt;/h4&gt;&lt;p&gt;刚需是什么？就是在某种场景下，满足某一部分人的必需。以例子为例，它满足了在找不到熟人却想进行体育活动等时的需求。刚需最好别无取代，当有所取代时，可以尝试缩小用户群，提高针对性。&lt;/p&gt;
&lt;h4 id=&#34;用户黏性&#34;&gt;&lt;a href=&#34;#用户黏性&#34; class=&#34;headerlink&#34; title=&#34;用户黏性&#34;&gt;&lt;/a&gt;用户黏性&lt;/h4&gt;&lt;p&gt;满足了刚需，就会有人用。但这还不够，足够的用户黏性才能保证产品活下去。黏性的最好衡量因素就是使用频次。以例子为例，休闲活动对于大多数人来说一周一到两次，这样的频次实在不算高。&lt;/p&gt;
&lt;h4 id=&#34;用户体验&#34;&gt;&lt;a href=&#34;#用户体验&#34; class=&#34;headerlink&#34; title=&#34;用户体验&#34;&gt;&lt;/a&gt;用户体验&lt;/h4&gt;&lt;p&gt;用户体验即产品价值。价值&amp;#x3D;值 - 价，只有用户使用产品时的显性+隐性花费小于得到的体验，才会被留下来。即产品大于用户的预期。它是用户黏性的保证。&lt;/p&gt;
&lt;p&gt;写了这么多篇日记，似乎以产品为多了。道佳、阳仔过来后，但愿在技术上也能得到真知灼见。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://shenlvmeng.github.com/blog/2015/01/30/some-thinking-4/</guid>
            <title>技术总结和补充</title>
            <link>http://shenlvmeng.github.com/blog/2015/01/30/some-thinking-4/</link>
            <category>总结</category>
            <category>技术</category>
            <category>web开发</category>
            <pubDate>Fri, 30 Jan 2015 01:00:57 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;技术总结&#34;&gt;&lt;a href=&#34;#技术总结&#34; class=&#34;headerlink&#34; title=&#34;技术总结&#34;&gt;&lt;/a&gt;技术总结&lt;/h2&gt;&lt;p&gt;在和辰光师兄共事这么久后，深感自己在技术外的眼界（诸如产品、商业模式甚至更广的看法）和收获今非昔比。但是，对于追求实效和本质的我来说，技术的本质不能忘。若这些日子以来，只是富士康式地劳动，而不去反思技术，便丧失了实习的大部分意义。因此，尽管web编程，php后台，前端设计这些我以后可能用不上，但是开发思想是共通的，这里总结写收获在下面，希望日后再翻起，会觉得有所帮助。&lt;/p&gt;
&lt;h3 id=&#34;关于调试技巧&#34;&gt;&lt;a href=&#34;#关于调试技巧&#34; class=&#34;headerlink&#34; title=&#34;关于调试技巧&#34;&gt;&lt;/a&gt;关于调试技巧&lt;/h3&gt;&lt;p&gt;开发和调试一定是共存的。因为大家的运气不会好到一次通过。适当的调试技巧有助于更快地完成需求（即设计的功能）。web编程的调试较有IDE环境的调试要更困难些，因为它project的概念并不明显，且web编程是多种语言的综合。包括php,asp等后台技术，html,javascript,css等前端技术。在没有编程环境下的调试，web也有它自己的style.&lt;/p&gt;
&lt;h4 id=&#34;工具&#34;&gt;&lt;a href=&#34;#工具&#34; class=&#34;headerlink&#34; title=&#34;工具&#34;&gt;&lt;/a&gt;工具&lt;/h4&gt;&lt;p&gt;浏览器的开发者工具是调试的利器。里面提供的element，network，sources，console等功能可以在前、后端给开发者反馈。以下就我的实践分别介绍之。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Element里可以看到网页源代码，各标签的格式。这里主要完成：1. 对css或是class样式设计进行反馈，开发者可以实时改变样式，所见即所得。觉得合适后，直接在后台照抄Element里的设置即可。2.观察有无标签错位或是id,class有误的情况，这个是html代码不能直接给你答案的。综上，前端应用较多&lt;/li&gt;
&lt;li&gt;Network里可以看到页面呈现过程中所接受的文件。这个对于后台尤其是ajax开发则来说是极其重要的。这里有几点可以注意的：1.接受到的究竟是哪些文件，有需要的文件没有接收到么；2.点击文件后看到的内容是不是想要的，能不能反映问题。之所以说ajax很需要它。因为普适的var_dump大法在这里只有借用Network才能看到结果。&lt;/li&gt;
&lt;li&gt;Sources主要用在对代码尤其是js代码段进行带断点的调试，alert大法固然好用，复杂的循环或选择结构存在时，断点会让你方便许多&lt;/li&gt;
&lt;li&gt;Console也是前端大杀器。主要用于js调试。1.它能显示js error，这些会让js实效，但是它在页面是绝不会呈现出来的。2.能直接通过cli的方式检测js语句是否正确，磨刀不误砍柴工，这能让你能提高你写js时的成功率。&lt;/li&gt;
&lt;li&gt;剩下的就是Resources最常用，主要是因为它的记录cookie和session的功用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;方法&#34;&gt;&lt;a href=&#34;#方法&#34; class=&#34;headerlink&#34; title=&#34;方法&#34;&gt;&lt;/a&gt;方法&lt;/h4&gt;&lt;p&gt;网页的呈现一般在编写完代码之后，除了浏览器的开发者工具外，php和js也有类似于printf，cout大法这样的调试方法。（说到这，顺便吐槽一句，IE的F12经常崩溃，chrome的Ctrl+Alt+I就从未遇到过这样的问题。且chrome的还有测试移动端甚至网速的定制，很对我胃口）php里最常用的就是var_dump()+die，它比printf强大的地方在于，它能把变量的详细情况呈现出来，谁用谁知道。js我没有研究过，但是alert()+return false（后一部分可以不要）已经很够用了。&lt;/p&gt;
&lt;h4 id=&#34;思路&#34;&gt;&lt;a href=&#34;#思路&#34; class=&#34;headerlink&#34; title=&#34;思路&#34;&gt;&lt;/a&gt;思路&lt;/h4&gt;&lt;p&gt;1.当程序原理上正确无误时，所有问题总会有原因。&lt;/p&gt;
&lt;p&gt;2.二分法在猜测上总是效率最高的，优先将断点设置在段的中间位置。一步步寻找，答案就出来了。&lt;/p&gt;
&lt;h3 id=&#34;关于常见问题&#34;&gt;&lt;a href=&#34;#关于常见问题&#34; class=&#34;headerlink&#34; title=&#34;关于常见问题&#34;&gt;&lt;/a&gt;关于常见问题&lt;/h3&gt;&lt;p&gt;错误是web编程里的家常便饭（其他编程也是如此）。但实际上，很多错误的起因却是一样的。这里列举一些常见问题的原因。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不匹配问题。这类问题包括大括号不匹配（很常见），标签不匹配，特殊语句不匹配。页面乱码或错得离谱时，很可能就是它导致的。&lt;/li&gt;
&lt;li&gt;有多余的无意义字母夹杂。这类问题包括夹杂在关键字里，夹杂在标签里，夹杂在语句里，夹杂在变量里甚至夹杂在空白处。第一、二、四种情况会报错xxx未定义，第三、五种情况则和具体位置有关。因为web编程多半使用vim远程完成，快捷命令极多的vim会让这种情况较为常见。&lt;/li&gt;
&lt;li&gt;没有预防特殊情况。包括空值或者负值等临界情况。这类问题比较隐蔽，一般不会出现，但是出现就可能导致重要问题。不过，比较好的是，加上检验语句还是不费功夫的。&lt;/li&gt;
&lt;li&gt;缺少空格。看起来可笑，实际却很常见。尤其在sql语句的处理上最甚。因为后台的sql基本上都是拼接而成的。所以字符串连接时若缺少了空格就会报sql错误。暴露数据库是很危险的。其他的，若html标签的属性间忘了加空格，属性值就会不起效果。&lt;/li&gt;
&lt;li&gt;误删或错误字符。这个也很常见。短的包括尖括号导致失配，长的包括语句段。不过好处在于，vim的u命令是很好用的。实在不行，还有git一直在监控。&lt;/li&gt;
&lt;li&gt;。。。。。。&lt;br&gt;一般的错误问题都不会太大，多半是马虎粗心导致，掌握好上面说的调试方法，还是比较容易发现并修复的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;关于对vim和git的理解&#34;&gt;&lt;a href=&#34;#关于对vim和git的理解&#34; class=&#34;headerlink&#34; title=&#34;关于对vim和git的理解&#34;&gt;&lt;/a&gt;关于对vim和git的理解&lt;/h3&gt;&lt;p&gt;因为需要在服务器上做操作，我学会了vim，并爱上了它。因为团队开发需要对项目的版本进行管理，我又学会了git，并爱上了它。它俩有个共同点，就是注重效率和轻便，但是功能强大。以下，分别谈点自己的认识。&lt;/p&gt;
&lt;p&gt;从vim开始。vim不是编译器，更不是IDE，它只是个文本编辑器。但是配合了插件的vim使用起来和IDE一样顺手，甚至更方便。vim的特点很明显：1.纯命令行操作，鼠标可以扔掉了；2.极多的快捷键，若能熟练掌握，会相当方便。第二点是vim上手难的原因，但也是它厉害的原因。删除、选定、查询、替换等复杂的功能，vim几乎都能一键完成。我现在正在使用的vim配合了cscope.nerdtree,ctag。cscope可以寻找变量或函数的定义，nerdtree可以切换工作目录，ctag可以查看变量，函数列表，通过部分文字在工作环境下查询文件。这让代码的编写很是轻松。另外，vim的fold，补全等功能和配色也让它在快捷的同时达到了IDE的效果。桌面环境很吃资源，vim的存在让web程序员们能愉快地编程。&lt;/p&gt;
&lt;p&gt;git是种习惯，而不只是工具。git的本地commit和鼓励分支的特点不止影响了技术。文档尤其是编程格外需要数据的安全性和可恢复性。git这个版本控制工具让程序员们可以无后顾之忧地修改文件，并且让团队间的合作变得简单可行。因为有rebase，git的本地提交的弊端被很好弥补了，多次细致的提交能让代码改变更易阅读；另外，由于git存储文件的思想和指针很类似，因此它鼓励分支并不会加重自己的负担，从而让项目开发限制更小。&lt;/p&gt;
&lt;p&gt;对于技术方面的整理就先到这么多，有些积累说得清，有些积累说不清，说得清的我尽量写在这里，说不清的希望也当成为习惯留在脑海。&lt;/p&gt;
&lt;h2 id=&#34;补充：商业模式&#34;&gt;&lt;a href=&#34;#补充：商业模式&#34; class=&#34;headerlink&#34; title=&#34;补充：商业模式&#34;&gt;&lt;/a&gt;补充：商业模式&lt;/h2&gt;&lt;p&gt;之前和辰光师兄交流时谈到的商业模式难以抄袭的问题，忘记记录下来，今日偶然想到，仍觉很有道理。这里补充记录下我的理解。&lt;/p&gt;
&lt;p&gt;互联网产品的同质性很严重，越来越难难找到独一无二的产品。因为，只要有产品出现，简单的复制技术，就可很快的推出相仿的山寨版。阿里、腾讯、百度就可如此，技术的复制是很快的，流量和用户习惯又由他们把握。所以，这个年代，即使互联网市场风生水起，光靠点子进行互联网创业，最好的归宿也只有被BAT三家收购，卖个好价钱。这自然是创业者不想见到的。既然技术的抄袭难以避免，为何美团和饿了么仍然活得好好的，滴滴和快的也能共存，因为商业模式是抄不了的。&lt;/p&gt;
&lt;p&gt;我们不妨对比一下，技术的抄袭抄过去的就可以了，我雇两倍的人、出两倍的价钱挖人才，就肯定能在同样时间做出更好的作品。商业模式的抄袭抄过去的一定不管用，因为，你只能看到竞争对手过去的规划，而不能看到他将来的举动。所以，这种抄袭是不靠谱的，只能跟着原创者的屁股后面走。正因此，做产品不只是技术问题，好的商业模式规划能让产品升华。&lt;/p&gt;
&lt;p&gt;推而广之，这是否能应用到其他方面呢。总结起来就是，你很难做第二个谁谁谁。正是因为你猜不透他下一步要做什么，上一步在以后的规划中起着什么作用。这也从另一方面体现出实现规划的重要性。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://shenlvmeng.github.com/blog/2015/01/20/some-thinking-3/</guid>
            <title>与师兄之泛谈 2</title>
            <link>http://shenlvmeng.github.com/blog/2015/01/20/some-thinking-3/</link>
            <category>产品</category>
            <category>互联网</category>
            <category>技术</category>
            <pubDate>Tue, 20 Jan 2015 00:50:48 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;今晚与师兄两人回校，聊起互联网分工时，师兄不免又多说了许多。说着说着，话题又过渡到人生道路上。因觉得颇有共鸣，这里依旧流水账般，记在下面。&lt;/p&gt;
&lt;h2 id=&#34;关于互联网分工&#34;&gt;&lt;a href=&#34;#关于互联网分工&#34; class=&#34;headerlink&#34; title=&#34;关于互联网分工&#34;&gt;&lt;/a&gt;关于互联网分工&lt;/h2&gt;&lt;h4 id=&#34;产品&#34;&gt;&lt;a href=&#34;#产品&#34; class=&#34;headerlink&#34; title=&#34;产品&#34;&gt;&lt;/a&gt;产品&lt;/h4&gt;&lt;p&gt;个人认为，互联网分工的必要组成部分是产品，产品分PM和PD两种，PM和PD上有产品总监。PD即Product Designer，产品经理。负责具象化用户需求，交给技术去实现。话说起来简单，但实际上，具象化需求不是那么好做的，产品总监提出大体构想后，PM多半会召集身边各部门开会，并去整理会议上各方杂乱的美好设想。首先，总监的构想有时会很模糊，甚至会有方向上的错误；其次，会议上各方的建议并不能覆盖所有细节，尤其是枯燥的细节。毕竟产品做不好是PD背锅。接下来，整合好的具体需求是不能直接拿给技术看的，否则&lt;del&gt;很容易被砍死。&lt;/del&gt;PD需要融合、简化需求，减轻技术团队的压力。产品，做出来才是真的。接下来，把任务交给PM。除此以外，PD需要尽量为自己所带领的技术团队争取资源，作为挡箭牌处理和营销以及运维的关系甚至办公室政治，这也是让产品成功的重要一点。综上，PD是个多方受压的角色，一旦失误很容易背锅，同时它也是产品流程的重要一环，把控好产品方向，安抚好烦躁的程序员，着实压力巨大。所以，有句古话说得好，PD常有，好的PD不常有。&lt;/p&gt;
&lt;p&gt;PM即Project Manager，项目经理。和PD在互联网产品开发中是多对一（多PD）或一对一的关系。PM需要将需求进一步细化到技术上，拆分成各个部分，交给手下的技术团队完成。同时，PM负责把握工程的时间进度。时间过了deadline是没法交差的。PM不一定得很懂技术，但一定得能让技术团队信服（虽然大多数的PM都很懂技术）。否则，手下心不齐，三天两头添乱，PM是很不好受的。毕竟产品开发不完，是它背锅。相比PD，PM距离技术更近，也会经常参与技术团队的开发。&lt;/p&gt;
&lt;h4 id=&#34;营销&#34;&gt;&lt;a href=&#34;#营销&#34; class=&#34;headerlink&#34; title=&#34;营销&#34;&gt;&lt;/a&gt;营销&lt;/h4&gt;&lt;p&gt;产品从设计到原型结束后，交给营销团队推广拉客。营销部门只负责拉客，并不负责接客。因为它的kpi是按照入驻用户数来计算的。营销又称销售，它做的工作和安利很像，负责为产品招揽足够数量的客户。为了保证每月或每天kpi的硬性要求，营销会将产品好的一面，甚至没有的一面展示出来。这里遇到了两个矛盾：第一，为了产品能卖得更好，营销部门会向PD施压，改变产品需求，使得更种各样的用户都能入驻。万一这时PD不够“硬”，技术团队就要&lt;del&gt;砍人&lt;/del&gt;了。第二，营销的kpi不包括客户流失率，毕竟不是它负责接客，不负责任的拉客和承诺很容易招揽垃圾用户和愤怒的用户，这就要考验运营部门的智慧了，它要努力把人留下来，并用甜美的笑容迎接客户的怒骂。可见，运营部门也是个很考验心理素质的地方。&lt;/p&gt;
&lt;h4 id=&#34;运营与技术&#34;&gt;&lt;a href=&#34;#运营与技术&#34; class=&#34;headerlink&#34; title=&#34;运营与技术&#34;&gt;&lt;/a&gt;运营与技术&lt;/h4&gt;&lt;p&gt;营销说完了，下面是运营。运营的KPI包括客户流失率。上面说过，用户反馈的所以负面意见90%都由运营部门的客服来扛着。产品当然不会做出的第一版就很完美，因为用户是不会接触到产品原型开发的。运营吃的营销的亏，会扔给产品和技术。埋怨产品是怎么设计的，并向PD施压，要求改变产品需求（这话听得怎么那么耳熟），因为用户反馈blablabla。这时，重复修改是无法避免的，PD再调整，PM下的程序员免不了做重复工作。如果调整得不好，&lt;del&gt;技术砍死产品经理就会发生&lt;/del&gt;。&lt;/p&gt;
&lt;p&gt;技术分两种。第一种是学术型技术，多半不会和产品、营销、运维三个部门一起提，即真正的技术。它是埋头做的，不一定短时间内就会生效的。大公司里会分成专门的部门。第二种是工程型技术，和产品在一起提到，很多互联网公司会有“技术池”这个概念，即程序员们的工作并不固定，自己自由选择或分从分配到某个产品线，和某个PD合作。&lt;/p&gt;
&lt;p&gt;综上，我们看到，产品、运营、销售是三个相互坑与被坑的角色，矛盾统一的是它们的目标一致——这个产品的前景。换句话说，它们是一条绳上的蚂蚱，相互间痛并快乐着。高工资不是白拿的，它们的压力透过文字就可以辨别出。&lt;/p&gt;
&lt;h2 id=&#34;关于悲惨的程序员&#34;&gt;&lt;a href=&#34;#关于悲惨的程序员&#34; class=&#34;headerlink&#34; title=&#34;关于悲惨的程序员&#34;&gt;&lt;/a&gt;关于悲惨的程序员&lt;/h2&gt;&lt;p&gt;程序员的悲惨，其实是不需要这段文字就能看出来的。对需求的重复修改是程序员即普通技术的噩梦。技术（以下均指普通技术）的KPI是按照需求数量来计算的。PM把需求分解，按照难度打分后，交给技术完成，很像完成成就。如果PD或PM的功底不够，产品细化的不够狠，技术的KPI就会比较难看。这还不算悲惨。如果PD不够“硬”，产品原型还没出来，就被销售改了几个需求，技术的开发工作就会重复进行，而新的实现方法是不计入KPI的。不计入KPI倒可以忍，改得晚，deadline就在眼前才是最要命的。实际上，程序员加班并不是工作量大，而是重复工作太多了。而PD里有许多应届，出色的PD少，这也就成了业界程序员的常态。&lt;/p&gt;
&lt;p&gt;产品推出后，运营也加入了挤压产品、技术的队伍，技术又会针对客户的反馈进行修改。大家也猜到了，这个修改也是不计入KPI的。如此多的工作，却对KPI毫无贡献，悲惨的程序员该怎么想呢？呆不下去就走呗！这也是互联网离职率高的重要原因。&lt;/p&gt;
&lt;p&gt;以上讲了技术跟错了产品和产品经理的悲剧。好的产品新修改多，重复修改少，KPI高，年终奖拿到手软，不好的产品线注定会多处很多重复修改，却，见不到用户量的大提升。如果我们隐忍的程序员还没有放弃，产品线终于崩溃了。这时，技术面临两种命运，一，等着被随机分配到另一个产品线上，用鸟枪法找一个靠谱的产品和产品经理；二，原来工作努力上进，口碑好，被好的产品线挑走，从此人生改变。可见，对于技术来讲，找一个信得过的产品是多么重要；幸运的是，对于产品经理来说，找一个信得过的技术也是很重要的（产品实现不了是它背锅）。说到底，这里做事还是看人。&lt;/p&gt;
&lt;h2 id=&#34;关于技术的前途&#34;&gt;&lt;a href=&#34;#关于技术的前途&#34; class=&#34;headerlink&#34; title=&#34;关于技术的前途&#34;&gt;&lt;/a&gt;关于技术的前途&lt;/h2&gt;&lt;p&gt;工科学校出身，有技术功底，出去最有可能就是技术了。那该选择什么道路，能避免上面的悲惨命运呢？上面也提到了，说大了，技术无非两种，研发型和工程型。前者强调在深度，后者强调在广度。因此，对于前者，在知识上的精深，对高深技术的掌握很重要，Google、微软中国这样的公司将是理想的归宿，尤其是对于技术痴迷者。若出世没那么厉害，互联网等公司的研发岗也是不错的选择。这一切的前提是，得好好学习。&lt;/p&gt;
&lt;p&gt;工程岗，又称技术民工。在知识上的灵活，对多领域的技术掌握、有工程技术实践经验很重要。因为，技术毕竟不能干一辈子。长期来看，管理岗位是理想选择；短期来看，PM是最好的跳板，如果因为产品线大限已到，或是因为其他原因调岗后，能因为之前的经验升任PM。那恭喜，你终于能翻身农奴把歌唱，由被坑的角色，转成坑人的角色了。不过，这个几率在你跟对产品线才会比较大。&lt;/p&gt;
&lt;p&gt;看来，说到底，还是得跟对人。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
