<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://shenlvmeng.github.com/blog</id>
    <title>Shenlvmeng&#39;s Blog • Posts by &#34;读书笔记&#34; tag</title>
    <link href="http://shenlvmeng.github.com/blog" />
    <updated>2021-11-24T15:07:36.000Z</updated>
    <category term="总结" />
    <category term="制度" />
    <category term="道德" />
    <category term="文官" />
    <category term="万历" />
    <category term="明朝" />
    <category term="读书笔记" />
    <category term="展望" />
    <category term="2018" />
    <category term="2019" />
    <category term="flag" />
    <category term="2020" />
    <category term="2021" />
    <category term="2022" />
    <category term="2023" />
    <category term="面试" />
    <category term="前端" />
    <category term="FAQ" />
    <category term="HTML" />
    <category term="CSS" />
    <category term="style guide" />
    <category term="编程" />
    <category term="范式" />
    <category term="设计" />
    <category term="艺术" />
    <category term="质量" />
    <category term="async_hooks" />
    <category term="cls-hooked" />
    <category term="logId" />
    <category term="录音" />
    <category term="getUserMedia" />
    <category term="AudioContext" />
    <category term="PCM" />
    <category term="WAVE" />
    <category term="二叉搜索树" />
    <category term="算法" />
    <category term="回忆" />
    <category term="老朋友" />
    <category term="C" />
    <category term="Hash" />
    <category term="布隆过滤器" />
    <category term="字符串检索" />
    <category term="canvas" />
    <category term="流程图" />
    <category term="d3" />
    <category term="g6" />
    <category term="zrender" />
    <category term="processOn" />
    <category term="SDN" />
    <category term="cbench" />
    <category term="安装说明" />
    <category term="绘图" />
    <category term="动画" />
    <category term="攻略" />
    <category term="流水账" />
    <category term="成都" />
    <category term="重庆" />
    <category term="武汉" />
    <category term="重构" />
    <category term="代码" />
    <category term="代码风格" />
    <category term="数据可视化" />
    <category term="爬虫" />
    <category term="chrome" />
    <category term="crx" />
    <category term="扩展" />
    <category term="CORS" />
    <category term="跨域" />
    <category term="盒模型" />
    <category term="浮动" />
    <category term="Reactive Programming" />
    <category term="JavaScript" />
    <category term="Cycle.js" />
    <category term="Dart" />
    <category term="最佳实践" />
    <category term="引流" />
    <category term="universal-link" />
    <category term="app-link" />
    <category term="脚手架" />
    <category term="degit" />
    <category term="git" />
    <category term="设计模式" />
    <category term="类" />
    <category term="接口" />
    <category term="抽象类" />
    <category term="DOM" />
    <category term="Docker" />
    <category term="ONOS" />
    <category term="控制器" />
    <category term="虚拟化" />
    <category term="笔记" />
    <category term="UX" />
    <category term="UED" />
    <category term="准则" />
    <category term="Java" />
    <category term="Ruby" />
    <category term="反射" />
    <category term="编程范式" />
    <category term="鸭子类型" />
    <category term="管理" />
    <category term="效率" />
    <category term="知识工作者" />
    <category term="卓有成效" />
    <category term="Elm" />
    <category term="框架" />
    <category term="函数式编程" />
    <category term="虚网映射" />
    <category term="Javascript" />
    <category term="并发" />
    <category term="event loop" />
    <category term="覆盖率" />
    <category term="端到端测试" />
    <category term="istanbul" />
    <category term="istanbuljs" />
    <category term="JavaSript" />
    <category term="Express" />
    <category term="源码" />
    <category term="代码覆盖率" />
    <category term="istanbul-middleware" />
    <category term="代码插桩" />
    <category term="require钩子" />
    <category term="babel-plugin-istanbul" />
    <category term="css" />
    <category term="html5" />
    <category term="flex" />
    <category term="javascript" />
    <category term="roadmap" />
    <category term="闭包" />
    <category term="Haskell" />
    <category term="monad" />
    <category term="后端" />
    <category term="管理后台" />
    <category term="egg.js" />
    <category term="工作流" />
    <category term="pull request" />
    <category term="golang" />
    <category term="语言学习" />
    <category term="黑客与画家" />
    <category term="创业" />
    <category term="骑行" />
    <category term="海南" />
    <category term="图文" />
    <category term="reflow" />
    <category term="repaint" />
    <category term="命名法" />
    <category term="成功学" />
    <category term="自我建设" />
    <category term="HTTP" />
    <category term="HTTP/2" />
    <category term="SPDY" />
    <category term="QUIC" />
    <category term="HTTPS" />
    <category term="状态码" />
    <category term="网络攻击" />
    <category term="介绍" />
    <category term="图片渲染" />
    <category term="html2canvas" />
    <category term="dom-to-image" />
    <category term="electron" />
    <category term="indexedDB" />
    <category term="异步" />
    <category term="Generator" />
    <category term="thunk" />
    <category term="async" />
    <category term="函数表达式" />
    <category term="对象" />
    <category term="继承" />
    <category term="类型转换" />
    <category term="==" />
    <category term="类型判断" />
    <category term="猫" />
    <category term="杀手" />
    <category term="管理学" />
    <category term="领导力" />
    <category term="梯队" />
    <category term="移动端" />
    <category term="UI" />
    <category term="自适应" />
    <category term="rem" />
    <category term="Electron" />
    <category term="GUI" />
    <category term="gpx" />
    <category term="template" />
    <category term="Electron Builder" />
    <category term="PWA" />
    <category term="方法论" />
    <category term="夜话" />
    <category term="多线" />
    <category term="生活" />
    <category term="密码" />
    <category term="密钥" />
    <category term="技改" />
    <category term="Vue" />
    <category term="gulp" />
    <category term="瀑布流" />
    <category term="电影" />
    <category term="PHP" />
    <category term="参考" />
    <category term="思维" />
    <category term="学习能力" />
    <category term="右脑" />
    <category term="经济学" />
    <category term="宏观经济学" />
    <category term="术语" />
    <category term="GDP" />
    <category term="CPI" />
    <category term="储蓄" />
    <category term="投资" />
    <category term="金融市场" />
    <category term="股票" />
    <category term="债券" />
    <category term="美联储" />
    <category term="失业" />
    <category term="货币" />
    <category term="现值" />
    <category term="准备金" />
    <category term="货币中性" />
    <category term="通货膨胀" />
    <category term="汇率" />
    <category term="购买力" />
    <category term="净出口" />
    <category term="资产净流出" />
    <category term="总需求" />
    <category term="总供给" />
    <category term="流动性偏好" />
    <category term="乘数效应" />
    <category term="菲利普斯曲线" />
    <category term="微观经济学" />
    <category term="供求" />
    <category term="贸易" />
    <category term="市场" />
    <category term="税" />
    <category term="剩余" />
    <category term="外部性" />
    <category term="公共物品" />
    <category term="公共资源" />
    <category term="生产成本" />
    <category term="利润" />
    <category term="垄断" />
    <category term="价格歧视" />
    <category term="寡头" />
    <category term="垄断竞争" />
    <category term="生产要素市场" />
    <category term="贫困" />
    <category term="消费者选择理论" />
    <category term="不对称信息" />
    <category term="政治经济学" />
    <category term="行为经济学" />
    <category term="VSCode" />
    <category term="编辑器" />
    <category term="IDE" />
    <category term="hybrid" />
    <category term="JSBridge" />
    <category term="Web Worker" />
    <category term="Service Worker" />
    <category term="习惯" />
    <category term="lint" />
    <category term="editorconfig" />
    <category term="commit message" />
    <category term="量子物理" />
    <category term="史话" />
    <category term="埋点" />
    <category term="raven.js" />
    <category term="前端监控" />
    <category term="文本编辑器" />
    <category term="quill" />
    <category term="结构化数据" />
    <category term="React" />
    <category term="Hooks" />
    <category term="函数组件" />
    <category term="复用" />
    <category term="状态管理" />
    <category term="redux" />
    <category term="MobX" />
    <category term="代码质量" />
    <category term="重来" />
    <category term="requestAnimationFrame" />
    <category term="TypeScript" />
    <category term="路书" />
    <category term="gpx解析" />
    <category term="EXIF" />
    <category term="人类" />
    <category term="生存" />
    <category term="基因" />
    <category term="响应式编程" />
    <category term="RxJS" />
    <category term="成长" />
    <category term="业务" />
    <category term="思想" />
    <category term="程序设计" />
    <category term="心理学" />
    <category term="自我" />
    <category term="社会思维" />
    <category term="社会影响" />
    <category term="文化" />
    <category term="性别" />
    <category term="从众" />
    <category term="说服" />
    <category term="临床诊断" />
    <category term="陪审团" />
    <category term="司法" />
    <category term="物质主义" />
    <category term="健康" />
    <category term="社会关系" />
    <category term="偏见" />
    <category term="攻击行为" />
    <category term="亲密关系" />
    <category term="友谊" />
    <category term="爱情" />
    <category term="利他" />
    <category term="冲突" />
    <category term="和解" />
    <category term="软技能" />
    <category term="理财" />
    <category term="健身" />
    <category term="自我营销" />
    <category term="学习" />
    <category term="商业模式" />
    <category term="产品" />
    <category term="校园网" />
    <category term="互联网" />
    <category term="技术" />
    <category term="web开发" />
    <category term="哲思" />
    <category term="择偶观" />
    <category term="validator" />
    <category term="大文件" />
    <category term="visibilityChange" />
    <category term="IntersectionObserver" />
    <category term="图种" />
    <category term="draggable" />
    <category term="webpack" />
    <category term="z-index" />
    <category term="git submodule" />
    <category term="object-fit" />
    <category term="object-position" />
    <category term="BroadcastChannel" />
    <category term="extract-text-webpack-plugin" />
    <category term="lottie" />
    <category term="backface-visibility" />
    <category term="egret" />
    <category term="mock" />
    <category term="SSO" />
    <category term="autoprefixer" />
    <category term="polyfill" />
    <category term="Android" />
    <category term="ffmpeg" />
    <category term="React Hooks" />
    <category term="rollup" />
    <category term="CDN" />
    <category term="DNS" />
    <category term="CNAME" />
    <category term="架构" />
    <category term="组件" />
    <category term="ssh" />
    <category term="fis-receiver" />
    <category term="tmux" />
    <category term="origami" />
    <category term="promise" />
    <category term="encodeURI" />
    <category term="encodeURIComponent" />
    <category term="axios" />
    <category term="charles" />
    <category term="黑色幽默" />
    <category term="朋友" />
    <category term="梦" />
    <category term="濒死" />
    <category term="江南" />
    <category term="苏州" />
    <category term="无锡" />
    <category term="宜兴" />
    <category term="湖州" />
    <category term="南浔" />
    <category term="游记" />
    <category term="随笔" />
    <category term="群众" />
    <category term="理论" />
    <category term="实效" />
    <category term="测试" />
    <category term="长沙" />
    <category term="杭州" />
    <category term="湖南" />
    <category term="核酸" />
    <category term="美食" />
    <category term="云南" />
    <category term="丽江" />
    <category term="大理" />
    <category term="青岛" />
    <category term="济南" />
    <category term="山东" />
    <category term="西北" />
    <category term="银川" />
    <category term="西宁" />
    <category term="青海湖" />
    <category term="西海镇" />
    <category term="茶卡盐湖" />
    <category term="厦门" />
    <category term="感受" />
    <category term="C语言" />
    <category term="树" />
    <category term="主干开发" />
    <category term="GitFlow" />
    <category term="GithubFlow" />
    <category term="typescript" />
    <category term="类型系统" />
    <category term="webrtc" />
    <category term="RTMP" />
    <category term="首屏时间" />
    <category term="性能优化" />
    <category term="公司" />
    <category term="个人发展" />
    <category term="战略" />
    <category term="晋升" />
    <category term="哲学" />
    <category term="幸福" />
    <category term="人生" />
    <category term="叔本华" />
    <category term="Unix" />
    <category term="Rollup" />
    <category term="mouseout" />
    <category term="mouseleave" />
    <category term="lint-staged" />
    <category term="吸顶" />
    <category term="图片组件" />
    <category term="形式系统" />
    <category term="不完全性" />
    <category term="隐喻" />
    <category term="哥德尔" />
    <category term="巴赫" />
    <category term="埃舍尔" />
    <category term="济州" />
    <category term="西归浦" />
    <category term="城山" />
    <category term="咸德" />
    <category term="人工智能" />
    <category term="心智" />
    <category term="自指" />
    <category term="图灵" />
    <category term="马列主义" />
    <category term="恩格斯" />
    <category term="家庭" />
    <category term="国家" />
    <category term="阶级" />
    <category term="氏族" />
    <entry>
        <id>http://shenlvmeng.github.com/blog/2021/11/24/leadership-pipeline/</id>
        <title>《领导梯队》—— 领导力模型构建</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2021/11/24/leadership-pipeline/"/>
        <content type="html">&lt;p&gt;对于很多从一线成长到管理岗位的员工来讲，管理工作和管理能力的阶段多少要靠自己领悟。可能从日常工作、文档培训中形成了管理工作懵懂认识，不成熟的归纳认知很可能会让你卡在某个阶段无法提升，又找不到办法。《领导梯队》这本书从基层开始分析管理路线上每一个阶段的做事思路，或许不能适应在所有场景下，但最起码能给人一种启示——什么才叫管理，以及想走管理路线的话，可以做些什么。当然，做事过犹不及，作为技术人员，理清管理思路后，别忘了你的本职工作。至少在前几个阶段，对你的技术能力是有要求的。&lt;/p&gt;
&lt;h2 id=&#34;序和导论&#34;&gt;&lt;a href=&#34;#序和导论&#34; class=&#34;headerlink&#34; title=&#34;序和导论&#34;&gt;&lt;/a&gt;序和导论&lt;/h2&gt;&lt;p&gt;在讨论领导梯队和领导力模型之前，我们要认清下面一些现状：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在快速发展的行业里（如互联网），是缺乏领导人才的&lt;/li&gt;
&lt;li&gt;一味地引入，忽视内部培养，无法建立完善而持久的领导梯队&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，公司需要一个领导力发展模型，模型从个人贡献者到CEO可以分为6个阶段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;个人贡献者到一线经理&lt;/li&gt;
&lt;li&gt;一线经理到部门总监&lt;/li&gt;
&lt;li&gt;部门总监到事业部副总经理&lt;/li&gt;
&lt;li&gt;事业部副总经理到事业部总经理&lt;/li&gt;
&lt;li&gt;事业部总经理到集团高管&lt;/li&gt;
&lt;li&gt;集团高管到CEO&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;角色负责的范围逐渐扩大，在&lt;strong&gt;工作技能&lt;/strong&gt;、&lt;strong&gt;时间管理&lt;/strong&gt;、&lt;strong&gt;工作理念&lt;/strong&gt;三方面的要求也各有侧重。&lt;/p&gt;
&lt;p&gt;最后，书中提到的领导力模型和阶段并非适用于所有场景，需要根据实际情况灵活调整。毕竟人是复杂的，管理也是。&lt;/p&gt;
&lt;h2 id=&#34;概述&#34;&gt;&lt;a href=&#34;#概述&#34; class=&#34;headerlink&#34; title=&#34;概述&#34;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;这里具体介绍了领导力发展的6个阶段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从管理自我到管理他人&lt;ul&gt;
&lt;li&gt;从专业化、职业化思路转变到&lt;strong&gt;通过他人完成任务&lt;/strong&gt;作为自己取得成功的关键&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;从管理他人到管理经理人员&lt;ul&gt;
&lt;li&gt;负责选拔人才成为一线经理&lt;/li&gt;
&lt;li&gt;帮助一线经理清除“依靠自己获得成功”的错误观念&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;从管理经理人员到管理职能部门&lt;ul&gt;
&lt;li&gt;战略眼光&lt;/li&gt;
&lt;li&gt;跨层级沟通&lt;/li&gt;
&lt;li&gt;和其他部门合作，基于工作需要帮自己部门争取资源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;从管理职能部门到事业部总经理&lt;ul&gt;
&lt;li&gt;清楚管理工作和市场结果的关系&lt;/li&gt;
&lt;li&gt;从盈利和长远发展出发&lt;/li&gt;
&lt;li&gt;兼顾长远和近期目标&lt;/li&gt;
&lt;li&gt;更多时间用来分析反思&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;从事业部总经理到集团高管&lt;ul&gt;
&lt;li&gt;资金调拨和人才配置&lt;/li&gt;
&lt;li&gt;培养事业部经理&lt;/li&gt;
&lt;li&gt;评估业务投资组合策略&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;从集团高管到CEO&lt;ul&gt;
&lt;li&gt;从管理技能转变到经营理念&lt;/li&gt;
&lt;li&gt;远大抱负、权衡取舍、外部视角&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在小公司里，可能不会有这么多领导力的层级。&lt;/p&gt;
&lt;h2 id=&#34;管理自我到管理他人&#34;&gt;&lt;a href=&#34;#管理自我到管理他人&#34; class=&#34;headerlink&#34; title=&#34;管理自我到管理他人&#34;&gt;&lt;/a&gt;管理自我到管理他人&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;关键词：团队努力、计划、沟通&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;随着个人贡献者能力的提升，一部分人会被提拔到职业生涯里第一个领导岗位上。在这个岗位上获得成功需要心态上的一大转变，即&lt;strong&gt;工作成功不再通过自己亲自做获得，而是通过下述和团队的努力获得&lt;/strong&gt;。在这个位置，经理身上需要承担一些管理动作，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;制定计划&lt;/li&gt;
&lt;li&gt;工作涉及&lt;/li&gt;
&lt;li&gt;人员选拔&lt;/li&gt;
&lt;li&gt;授权&lt;/li&gt;
&lt;li&gt;绩效监督、评估&lt;/li&gt;
&lt;li&gt;辅导和反馈收集&lt;/li&gt;
&lt;li&gt;沟通和氛围营造&lt;/li&gt;
&lt;li&gt;获取资源&lt;/li&gt;
&lt;li&gt;奖励和激励&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在时间管理上，需要划分出更多时间做：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;执行计划&lt;/li&gt;
&lt;li&gt;和下属沟通&lt;/li&gt;
&lt;li&gt;和兄弟部门、客户、供应商等沟通&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这一阶段可以采用下面一些手段帮助经理对齐领导力模型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;准备：提前对齐岗位期望&lt;/li&gt;
&lt;li&gt;监督：通过旁听、360评估、和同行比较等方法&lt;/li&gt;
&lt;li&gt;干预：oneone沟通，引导&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一线经理是未来领导者的摇篮，在选拔这类人才时，可以考察此人帮助别人成功的意愿以及是否可以从帮助别人获得满足。&lt;/p&gt;
&lt;h2 id=&#34;管理他人到管理经理&#34;&gt;&lt;a href=&#34;#管理他人到管理经理&#34; class=&#34;headerlink&#34; title=&#34;管理他人到管理经理&#34;&gt;&lt;/a&gt;管理他人到管理经理&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;关键词：授权、选培一线经理、部门协作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个过程通常代表着从一线经理到部门总监。工作上也主要围绕着一线经理展开，主要职责是整合工作、分配资源和培训管理者。要敢于&lt;strong&gt;授权&lt;/strong&gt;，同时建设授权后的问责系统，另外开始培养战略和文化的问题。作为一个部门总监，至少需要以下几个技能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选拔和培养有能力的一线经理&lt;ul&gt;
&lt;li&gt;建设性批评、就事论事&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;让一线经理对管理工作负责&lt;ul&gt;
&lt;li&gt;对齐期望，减少越俎代庖&lt;/li&gt;
&lt;li&gt;调整不合适的一线经理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在部门配置资源&lt;ul&gt;
&lt;li&gt;根据部门情况调配资源（薪水、项目等）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;协调下属部门和其他部门的管辖&lt;ul&gt;
&lt;li&gt;信息共享，鼓励团结协作&lt;/li&gt;
&lt;li&gt;context、not control&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中第一项能力最为重要，要善于授权，培养&lt;strong&gt;大局观&lt;/strong&gt;。寻找对管理工作有真正热情的人。在交流时，把一线经理当成一个团队而非一线员工。部门总监是第一个完全依靠管理技能而非从事专业技术工作的管理层级，要能够传递高层战略到基层员工，也要能将基层员工的执行能力反馈给战略制定者。&lt;/p&gt;
&lt;h2 id=&#34;管理经理到管理职能部门&#34;&gt;&lt;a href=&#34;#管理经理到管理职能部门&#34; class=&#34;headerlink&#34; title=&#34;管理经理到管理职能部门&#34;&gt;&lt;/a&gt;管理经理到管理职能部门&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;关键词：信息收集、全局观、战略思维、成熟度&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;职能主管这个层级会有多种信息来源，需要能够熟练地收集和理解信息，沟通上从交谈转为倾听，要能积极倾听开放思想。另外，职能主管需要认识到，他不再是职能部门的一员，而是该部门的领导者。他需要拥有&lt;strong&gt;战略性思维&lt;/strong&gt;，可以胸怀&lt;strong&gt;全局&lt;/strong&gt;把握整体，而不是依赖以往领域的经验做事：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;长期思维（3-5年）&lt;/li&gt;
&lt;li&gt;关注业界最新发展动态&lt;ul&gt;
&lt;li&gt;技术方面&lt;/li&gt;
&lt;li&gt;经营方面&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;全面了解商业模式和战略目标&lt;ul&gt;
&lt;li&gt;业务目标&lt;/li&gt;
&lt;li&gt;市场定位&lt;/li&gt;
&lt;li&gt;战略变动&lt;/li&gt;
&lt;li&gt;如何盈利&lt;/li&gt;
&lt;li&gt;团队优势&lt;/li&gt;
&lt;li&gt;所在部门可以做出的贡献&lt;/li&gt;
&lt;li&gt;其他部门的贡献&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;将职能部门的所有方面纳入战略考虑，这也要求了解之前不甚熟悉的其他职能领域&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个称职的事业部副总应该是&lt;strong&gt;成熟&lt;/strong&gt;的。这体现在：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;谦逊好学、坦诚清晰&lt;/li&gt;
&lt;li&gt;善于授权、相信他人&lt;/li&gt;
&lt;li&gt;乐于沟通，善于表达&lt;/li&gt;
&lt;li&gt;和兄弟职能部门保持合作而不是竞争，因为个人成功和进步只有在企业成功时才有可能实现&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;与之相反，可能会出现下面这些bad case：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无法从项目运作导向转变到战略导向&lt;/li&gt;
&lt;li&gt;不重视不熟悉或是不感兴趣的工作&lt;/li&gt;
&lt;li&gt;表现不成熟&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;管理职能部门到事业部总经理&#34;&gt;&lt;a href=&#34;#管理职能部门到事业部总经理&#34; class=&#34;headerlink&#34; title=&#34;管理职能部门到事业部总经理&#34;&gt;&lt;/a&gt;管理职能部门到事业部总经理&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;关键词：时间管理、工作透明、部门权衡、视野开阔&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;相对职能主管，事业部总经理工作的曝光度要高得多，他有很强的掌控权，也对成本和收入直接负责。副总经理需要制定业务战略和整合各部门工作。对比职能主管的部门策略思维，事业部总经理的&lt;strong&gt;业务战略&lt;/strong&gt;思维要求他拥有更广泛的视野，综合无数外部因素，考虑本行业甚至全球事务。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何实现业务增长&lt;/li&gt;
&lt;li&gt;如何提高盈利水平&lt;/li&gt;
&lt;li&gt;如何增强竞争优势&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个思维模式的转变是有难度的，也是必须完成的。&lt;/p&gt;
&lt;p&gt;事业部总经理需要处理错综复杂的各种问题，兼顾短期和长期目标。为了了解业务的方方面面，保证视野开阔，他还需要时间学习很多新知识。&lt;strong&gt;时间管理&lt;/strong&gt;成为一个难题。事业部总经理不能单单依靠个人能力获得成功，他需要把部门经理整合成高效团队，重视和平衡所有部门，并把具体工作授权给它们。事业部总经理的关注对比副总经理更为强烈，在项目、计划和人员管理上也有很大权限，这也让他的一举一动十分透明。做每一个决定前都要认真考虑。&lt;/p&gt;
&lt;p&gt;自我提升上，可以借助&lt;strong&gt;协同三角形&lt;/strong&gt;模型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;战略方向&lt;ul&gt;
&lt;li&gt;竞争优势：产品、市场、客户&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;人员能力&lt;ul&gt;
&lt;li&gt;经验&lt;/li&gt;
&lt;li&gt;技能&lt;/li&gt;
&lt;li&gt;思维模式&lt;/li&gt;
&lt;li&gt;视角&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;组织能力&lt;ul&gt;
&lt;li&gt;组织结构&lt;/li&gt;
&lt;li&gt;工作设计&lt;/li&gt;
&lt;li&gt;工作流程&lt;/li&gt;
&lt;li&gt;权力配置&lt;/li&gt;
&lt;li&gt;人员配置&lt;/li&gt;
&lt;li&gt;组织文化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以通过考虑一些问题来实现上面的思考方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们有合适的产品么&lt;/li&gt;
&lt;li&gt;我们的竞争优势能报纸么&lt;/li&gt;
&lt;li&gt;我们的客户细分市场何合适么&lt;/li&gt;
&lt;li&gt;员工是否有创新意识&lt;/li&gt;
&lt;li&gt;我们是否有客户导向的思维模式&lt;/li&gt;
&lt;li&gt;我们的产品研发部门是否有足够授权&lt;/li&gt;
&lt;li&gt;我们的各部门是否可以有效组织&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;事业部总经理到集团高管&#34;&gt;&lt;a href=&#34;#事业部总经理到集团高管&#34; class=&#34;headerlink&#34; title=&#34;事业部总经理到集团高管&#34;&gt;&lt;/a&gt;事业部总经理到集团高管&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;关键词：集团战略、新机会、选培事业部总经理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;晋升到集团高管后，脱离了具体某项业务。要学会&lt;strong&gt;从集团的角度&lt;/strong&gt;出发制定战略，辅导培训事业部总经理。具体体现在&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;和事业部领导班子保持交流，选拔和培养总经理&lt;/li&gt;
&lt;li&gt;评估各事业部的战略规划，批准它们的业务规划而不是亲自管理&lt;/li&gt;
&lt;li&gt;超越财务结果评价事业部总经理&lt;/li&gt;
&lt;li&gt;监督各业务部门奉行公司的价值观和各项政策&lt;/li&gt;
&lt;li&gt;在必要的时候使用兼并收购的方式补充业务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;集团高管还要能抽出时间发现行业里的潜在机会和新商机。&lt;/p&gt;
&lt;p&gt;一个合格的集团高管需要有下面的标准：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;业绩优异&lt;/li&gt;
&lt;li&gt;出色的战略能力&lt;/li&gt;
&lt;li&gt;有效的人才培养&lt;/li&gt;
&lt;li&gt;对客户满意充满激情&lt;/li&gt;
&lt;li&gt;敏锐的商业头脑&lt;/li&gt;
&lt;li&gt;愿意共享资源&lt;/li&gt;
&lt;li&gt;践行公司价值观&lt;/li&gt;
&lt;li&gt;关心公司成功&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;从集团高管到首席执行官&#34;&gt;&lt;a href=&#34;#从集团高管到首席执行官&#34; class=&#34;headerlink&#34; title=&#34;从集团高管到首席执行官&#34;&gt;&lt;/a&gt;从集团高管到首席执行官&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;关键词：可持续发展、执行力、组织能力培养、长期思想&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首席执行官受到各方的密切关注，不容出错。在领导力模型里面临下面一些挑战：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;平衡长短期利益，实现可持续发展&lt;/li&gt;
&lt;li&gt;设定公司发展的方向，承担风险，深思熟虑&lt;ul&gt;
&lt;li&gt;公司方向、行业变化、商业模式、竞争格局&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;培养组织能力，保证人才供给&lt;/li&gt;
&lt;li&gt;确保战略执行到位，对如何盈利有与生俱来的直觉&lt;ul&gt;
&lt;li&gt;我的表现如何&lt;/li&gt;
&lt;li&gt;我了解公司的情况么&lt;/li&gt;
&lt;li&gt;有向上反馈渠道么&lt;/li&gt;
&lt;li&gt;董事会履行自己授权么&lt;/li&gt;
&lt;li&gt;我的团队高效有活力么&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;处理好全球化和外部关系&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;培养首席执行官没有捷径，一个首席执行官需要经历领导力模型的大多数阶段，他的理想路径包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在核心业务部门的多个职位工作过&lt;/li&gt;
&lt;li&gt;有海外任职经历&lt;/li&gt;
&lt;li&gt;领导业务部门实现突破性增长&lt;/li&gt;
&lt;li&gt;领导新兴业务和振兴衰落业务&lt;/li&gt;
&lt;li&gt;主管过公司的人力资源&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;首席执行官的工作目标通常都需要&lt;strong&gt;较长的时间&lt;/strong&gt;才能逐步达成，工作理念上也要有所转变。&lt;/p&gt;
&lt;h2 id=&#34;诊断问题&#34;&gt;&lt;a href=&#34;#诊断问题&#34; class=&#34;headerlink&#34; title=&#34;诊断问题&#34;&gt;&lt;/a&gt;诊断问题&lt;/h2&gt;&lt;p&gt;在上面介绍完了整个领导力模型后，这里可以比照着整个模型，定期做整个组织的审视，很容易发现人员错误配置在某一层级的情况。通常因为在快速晋升的过程中，遗漏或仓促跳过了一些发展阶段，做事思路还没有转变。这会引起：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;虽然短期业务看着不错，对长期可持续发展却没有帮助&lt;/li&gt;
&lt;li&gt;越俎代庖和工作效率下降&lt;/li&gt;
&lt;li&gt;对员工职业发展不利&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在评估时，可以通过和个体以及个体的上下级沟通，判断在领导技能、时间管理、工作理念几方面是否和层级相匹配。&lt;/p&gt;
&lt;h2 id=&#34;改善业绩评估&#34;&gt;&lt;a href=&#34;#改善业绩评估&#34; class=&#34;headerlink&#34; title=&#34;改善业绩评估&#34;&gt;&lt;/a&gt;改善业绩评估&lt;/h2&gt;&lt;p&gt;在日常的绩效评估中，可以加入领导模型的能力评估。避免出现职责断裂或者重叠的情况。可以用圆圈标识一个员工的7项绩效内容期望。当达到&lt;strong&gt;全面绩效&lt;/strong&gt;时，可以考虑将他人名到一个新的领导岗位。每提升到一个新的领导层级，从会出现绩效缺口。在培训工作持续进行时后，培训对象会逐渐取得全面绩效。这个时候对其进行超常规能力的测试，如果结果表明候选人已做好准备，就可以继续升职。这个测试可以通过让同一层级的领导者组成团队，完成一项高度挑战性任务来实施。&lt;/p&gt;
&lt;h2 id=&#34;继任计划&#34;&gt;&lt;a href=&#34;#继任计划&#34; class=&#34;headerlink&#34; title=&#34;继任计划&#34;&gt;&lt;/a&gt;继任计划&lt;/h2&gt;&lt;p&gt;继任计划是指在各级领导梯队中培养高绩效人员，确保充足的人才储备。整体思路是关注&lt;strong&gt;绩效&lt;/strong&gt;和&lt;strong&gt;潜能&lt;/strong&gt;，适配公司的实际情况，定期审视领导梯队继任计划。&lt;/p&gt;
&lt;p&gt;潜能上分3档：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;转型潜能&lt;/strong&gt;：3-5年甚至更短时间可以从事下一层工作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;成长潜能&lt;/strong&gt;：不久可以从事同一层级的更重要工作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;熟练潜能&lt;/strong&gt;：可以更好完成当前层级的相同工作&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从潜能和绩效两个维度，可以划分出9类员工。针对不同方格内的员工，着重培养领导力和提升绩效。&lt;/p&gt;
&lt;p&gt;好的继任计划要求适用在所有业务和职能、贴合公司实际、可以公开讨论。&lt;/p&gt;
&lt;h2 id=&#34;梯队的潜在缺陷&#34;&gt;&lt;a href=&#34;#梯队的潜在缺陷&#34; class=&#34;headerlink&#34; title=&#34;梯队的潜在缺陷&#34;&gt;&lt;/a&gt;梯队的潜在缺陷&lt;/h2&gt;&lt;p&gt;领导梯队也有遇到问题的时候，通常可能来自下面这些情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选错人才&lt;ul&gt;
&lt;li&gt;在上一个层级做出成绩，不代表他的领导技能、时间管理、工作理念都已达到下一层级的要求&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;让表现不佳者在岗位停留太久&lt;ul&gt;
&lt;li&gt;判断一名管理者是否还依赖上一级的领导技能、时间管理、工作理念&lt;/li&gt;
&lt;li&gt;观察管理者直接下属的职业发展和业绩&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不善于倾听反馈&lt;ul&gt;
&lt;li&gt;开阔心胸&lt;/li&gt;
&lt;li&gt;选择性听取&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不善于定义工作&lt;ul&gt;
&lt;li&gt;明确责任边界&lt;/li&gt;
&lt;li&gt;对齐责任边界&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个组织能需要有一个领导力框架，它能给绩效评估标准，提供更多的讨论问题的角度。通常一个团队内缺乏坦诚也是缺陷即将出现的危险信号。&lt;/p&gt;
&lt;h2 id=&#34;职能主管发展路线&#34;&gt;&lt;a href=&#34;#职能主管发展路线&#34; class=&#34;headerlink&#34; title=&#34;职能主管发展路线&#34;&gt;&lt;/a&gt;职能主管发展路线&lt;/h2&gt;&lt;p&gt;除了上面提到的领导力模型之外，还有职能方向的支线，即从集团职能主管到企业职能主管。集团职能主管和事业部总经理很像，但又不太一样：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事业部总经理将智能战略纳入到整体业务计划中，但职能直观则将每一个事业部的职能战略纳入到集团整体的职能战略中&lt;/li&gt;
&lt;li&gt;两者都要有商业思维，职能主管也要从“我们能这么做么”转变到“我们这样做能赚钱么”&lt;/li&gt;
&lt;li&gt;职能主管通常同时向集团职能主管和事业部总经理负责，这需要他能灵活处理各种人群和利益关系，并且知道怎么妥协&lt;/li&gt;
&lt;li&gt;集团职能主管主要为集团高管提供咨询意见而不是产品和其他内容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作为集团职能主管，要避免出现下面的情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;给所有人承诺，却从不兑现&lt;ul&gt;
&lt;li&gt;集团职能主管要能够分解复杂关系，划清责任边界，获知业务优先级、自己优先级，最后做出果断的决定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;过度干涉职能部门经历的工作&lt;/li&gt;
&lt;li&gt;整天围着集团高管转&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;企业职能主管一般指CFO、CTO、COO、总法律顾问这些。他们的目的是将自己的职能和公司联系在一起，因此他们必须设定职能发展方向、学会服务整个公司而不仅是自己的职能、了解公司外部环境。要能满足下面一些要求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;商业竞争中如何发挥职能的支持获得竞争优势&lt;/li&gt;
&lt;li&gt;了解所在职能在业界的发展状况&lt;/li&gt;
&lt;li&gt;向集团高管提供所在职能领域或一般性领域的发展机会&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面是一些对于企业职能主管的发展建议：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;尽早获取专家对职能部门的建议&lt;/li&gt;
&lt;li&gt;和CEO和各层级关键领导对齐你的目标和计划&lt;/li&gt;
&lt;li&gt;定期和各层级部门交流&lt;/li&gt;
&lt;li&gt;学会管理时间&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;教练辅导&#34;&gt;&lt;a href=&#34;#教练辅导&#34; class=&#34;headerlink&#34; title=&#34;教练辅导&#34;&gt;&lt;/a&gt;教练辅导&lt;/h2&gt;&lt;p&gt;教练辅导即用一种富有激励的方式，将上面的领导力模型指引给员工或是管理者。可以通过一些问题确定此人的领导能力、时间管理和工作理念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;谈谈你的职业发展&lt;ul&gt;
&lt;li&gt;经历的每一个职务&lt;/li&gt;
&lt;li&gt;工作具体内容&lt;/li&gt;
&lt;li&gt;工作成就&lt;/li&gt;
&lt;li&gt;重大挑战&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;现在职位的工作&lt;ul&gt;
&lt;li&gt;面临的问题、挑战&lt;/li&gt;
&lt;li&gt;取得的成就&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;工作日程&lt;/li&gt;
&lt;li&gt;主要依靠的技能&lt;/li&gt;
&lt;li&gt;工作信念是什么&lt;/li&gt;
&lt;li&gt;职业抱负是什么&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有些时候，自己进行教练辅导会比聘用不专业的教练要更好。&lt;/p&gt;
&lt;h2 id=&#34;领导力模型惠及全员&#34;&gt;&lt;a href=&#34;#领导力模型惠及全员&#34; class=&#34;headerlink&#34; title=&#34;领导力模型惠及全员&#34;&gt;&lt;/a&gt;领导力模型惠及全员&lt;/h2&gt;&lt;p&gt;略&lt;/p&gt;
&lt;p&gt;&lt;em&gt;–END–&lt;/em&gt;&lt;/p&gt;
</content>
        <category term="读书笔记" />
        <category term="管理学" />
        <category term="领导力" />
        <category term="梯队" />
        <updated>2021-11-24T15:07:36.000Z</updated>
    </entry>
    <entry>
        <id>http://shenlvmeng.github.com/blog/2019/03/12/wisdom-of-life-pessimistic-life/</id>
        <title>《人生的智慧》 ——幸福与人生</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2019/03/12/wisdom-of-life-pessimistic-life/"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;“在读完叔本华的书第一页以后，就知道得很清楚，我要把他写的所有东西都读完为止；他说的每一个字词我都要听” —— 尼采&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;尽管是出自腰封上的促销的话，尼采的推介语比“当代名家们”写的“此书甚好读世之绝有”格调就要高很多了。《人生的智慧》一书取自于叔本华晚年最后一部巨著《附录和补遗》的一部分，包含了他对《作为意欲和表象的世界》其中哲学观点的补充，以及回首一生的一些更广泛的思考。对比哲学形而上学的深奥探讨，这本书讨论的事情与世俗生活甚是接近，叔本华在书中放弃了居高临下的审视态度，用他擅长的冷峻客观的笔法努力将讨论变得清晰简明。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“看到我最后的小孩的诞生，我是多么的高兴。随着这一部著作的完成，我在这个世界上的使命也就终于完成了。我的却感到了如释重负，这一重负在24年来，一直沉重地压在我的双肩。 —— 叔本华”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;《人生的智慧》书中延续了叔本华形而上学和悲观主义哲学。叔本华认为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;意志可以脱离客观实在而存在，甚至能超越人的理性&lt;/li&gt;
&lt;li&gt;同时他将极端悲观主义与之联系，认为人意志的存在是一切痛苦的根源&lt;/li&gt;
&lt;li&gt;世界为意志表象，而人生只是表象的一种状态；从而生活在表象的世界中，一切都是虚幻泡影，现实的生活没有任何意义&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在这本书中字里行间都渗透着他上面的认识，幸运的是，书写的角度足够世俗，逐一探讨关于人性、人格、地位、荣耀、名声等长久困惑人们的问题，认为&lt;strong&gt;有智慧的人应该以超然而明智的态度对待世务&lt;/strong&gt;。通篇在论述道理时，并不像苦口婆心的教导或谆谆教诲的指引。你能感受到他只是静静地表达自己的思想，不把它强加给你；但当你合上书后，那些思想结晶却已让你心悦诚服地接受。&lt;/p&gt;
&lt;p&gt;全书分为下面几节展开。&lt;/p&gt;
&lt;h2 id=&#34;基本的划分&#34;&gt;&lt;a href=&#34;#基本的划分&#34; class=&#34;headerlink&#34; title=&#34;基本的划分&#34;&gt;&lt;/a&gt;基本的划分&lt;/h2&gt;&lt;p&gt;除开外在的财与名外，内在的健壮充实、精神世界的高追求和高禀赋更有助于找到幸福。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;人的命运决定于&lt;strong&gt;人的自身&lt;/strong&gt;，&lt;strong&gt;人拥有的身外之物&lt;/strong&gt;，&lt;strong&gt;人向其他人展示的样子&lt;/strong&gt;；这也是后面论述的划分&lt;/li&gt;
&lt;li&gt;人的内心快乐异或痛苦首先都是人的感觉、意愿、思想的结果，人身外的所有事物都只是间接地发挥作用&lt;/li&gt;
&lt;li&gt;一个人精神能力的界限决定性地限定了他领略高级快乐的能力&lt;/li&gt;
&lt;li&gt;人的自身是具有&lt;strong&gt;绝对价值&lt;/strong&gt;且&lt;strong&gt;他人无法得到的&lt;/strong&gt;，这和后两点完全不同。&lt;strong&gt;人的自身对人的幸福而言比人所拥有的财富重要得多。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;我们不应该把这一说法错误地理解为：我们应该忽略赚取那些必须和适合的东西，但真正的财富，亦即过分的丰裕盈余，对我们幸福帮助不大&lt;/li&gt;
&lt;li&gt;人拥有的财产、物品和人的名誉、声望是互为影响、促进的关系&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;人的自身&#34;&gt;&lt;a href=&#34;#人的自身&#34; class=&#34;headerlink&#34; title=&#34;人的自身&#34;&gt;&lt;/a&gt;人的自身&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;无论身在何处，我们只能在我们自身寻找或者获得幸福 ——《旅行者》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;每个人都必须成为和做最好的自己，一个人越能做到这一点，在身上就越能够找到乐趣和幸福的源泉。精神需求（即陶冶自己）有助于摆脱无聊、摆脱庸俗，追求真正的幸福。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对人的幸福起着首要和关键作用的是主体的好处，即健康的身体和心灵。&lt;/li&gt;
&lt;li&gt;让我们幸福或者不幸福的事情不是那些客观、真实的事物本身，而是我们对这些事物的理解和把握&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;人类幸福的两个死敌就是痛苦和无聊。还有我们成功远离其中一个的时候，也就在同等程度接近了另一个&lt;/strong&gt;。外在原因是生活的艰辛和匮乏造成了痛苦，而相反丰裕和安定就会产生无聊；内在原因是&lt;strong&gt;一个人对痛苦的感受能力与对无聊的感受能力成反比&lt;/strong&gt;。精神迟钝就不易感到痛苦的忧伤，后果就是内在空虚，外在体现一刻不停地关注外在世界的各种事情；精神敏锐的人思想活跃，奔涌不息，很少感到无聊，但相反更易提高了对精神痛苦的敏感性。&lt;/li&gt;
&lt;li&gt;正是由于内在空虚，人们才追求社交、娱乐和五花八门的奢侈&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一个人自身拥有越丰富，对身外之物的需求就越少，别人对他来说就越不重要&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;愚蠢的人饱受无聊之苦 —— 塞内加&lt;br&gt;愚人的生活比死亡还要糟糕 —— 耶稣·西拉克&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;思想狭隘的人更容易受到无聊侵袭，他们会为意欲找到一些琐碎、微小和暂时的动因，以图刺激意欲并以此刺激智力活动起来。因为没有动因时意欲就休息了，智力也就放假了。对于这种人，&lt;strong&gt;闲暇&lt;/strong&gt;只会造就无用的家伙。&lt;/li&gt;
&lt;li&gt;为了争取外在之物而失去了内在的东西，比如为了荣耀、地位、排场、头衔、名声牺牲自己全部或大部分的宁静、闲暇和独立——这是极度愚蠢的行为&lt;/li&gt;
&lt;li&gt;人的快乐分三种：&lt;strong&gt;机体新陈代谢能力带来的快乐&lt;/strong&gt;，如吃喝；&lt;strong&gt;发挥肌肉力量带来的快乐&lt;/strong&gt;，如狩猎；&lt;strong&gt;施展感觉能力方面的快乐&lt;/strong&gt;，如思考观察。感受能力约卓越，我们享受的精神快乐就越大。&lt;/li&gt;
&lt;li&gt;精神生活是“天才”的唯一目标，生活知识他们实现自己目标的一种手段。这类人即使有最良好的性格脾气，也不会对朋友、家庭、集体表现出其他人都有的休戚与共。因为他们自给自足，只有拥有自身内在，失去了其他一切也能得到安慰。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一个内在丰富的人需要闲暇去培养和发展自己的精神才能，享受自己的内在财富。&lt;/strong&gt;闲暇即自我。&lt;/li&gt;
&lt;li&gt;闲暇是反命运的。因为人的天然使命就是花费时间去获得自己和家人赖以生存的东西，而不是自由发挥自己的智力。因此需要闲暇是一个人的幸运。因为这体现了他不同常人的禀赋。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;人所拥有的财产&#34;&gt;&lt;a href=&#34;#人所拥有的财产&#34; class=&#34;headerlink&#34; title=&#34;人所拥有的财产&#34;&gt;&lt;/a&gt;人所拥有的财产&lt;/h2&gt;&lt;p&gt;财富应该是手段而不是目的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个人拥有财产的方面是否得到满足由他期待得到的财产和他已经拥有的财产之间的关系所决定&lt;/li&gt;
&lt;li&gt;我们感到不满足的根源，在于我们不断推高我们的期望。&lt;/li&gt;
&lt;li&gt;我们应把现有的财富视为抵御众多可能发生的不行和灾祸的城墙&lt;/li&gt;
&lt;li&gt;（赚钱）这苦役本是凡夫俗子的天然命运。只有得到命运如此垂青和眷顾的人，才可能是真正自由的人，是“自己的主人”。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;人所展现的表象&#34;&gt;&lt;a href=&#34;#人所展现的表象&#34; class=&#34;headerlink&#34; title=&#34;人所展现的表象&#34;&gt;&lt;/a&gt;人所展现的表象&lt;/h2&gt;&lt;p&gt;正视、珍视自我认知，不要狂热地活在他人的看法里。珍惜自己的个性，尤其是较好的一面。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;他人的看法就其本身而言，对我们的幸福并非至关重要。（我们会受到他人看法的影响）从我们的角度出发，应该抑制这一人性的弱点，尽量降低我们对待别人意见的敏感程度。&lt;/li&gt;
&lt;li&gt;每个人首要并确实是活在自己的皮囊里，而不是活在他人的见解中。据此，&lt;strong&gt;正确评估自己本身的价值和看待他人对自己的看法，对我们的幸福大有裨益&lt;/strong&gt;。把别人的意见和看法看得太过重要是人们普遍犯下的错误&lt;/li&gt;
&lt;li&gt;虚荣使人健谈，骄傲使人沉默&lt;/li&gt;
&lt;li&gt;如果我们善意地忽略自己的优点，他人就会真心、坦率地把我们认定为就是这个样子&lt;/li&gt;
&lt;li&gt;个性远远优于民族性&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;你必须强迫自己接受应有的骄傲 —— 贺拉斯&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;（注：即对自己应有的心安理得）&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;地位&#34;&gt;&lt;a href=&#34;#地位&#34; class=&#34;headerlink&#34; title=&#34;地位&#34;&gt;&lt;/a&gt;地位&lt;/h3&gt;&lt;p&gt;地位对于增进幸福的目的而言，没有什么意义。然而大众缺乏判断力，记忆力也不强，这也是地位意义不大的原因。&lt;/p&gt;
&lt;h3 id=&#34;名誉&#34;&gt;&lt;a href=&#34;#名誉&#34; class=&#34;headerlink&#34; title=&#34;名誉&#34;&gt;&lt;/a&gt;名誉&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;名誉在客观上是他人对我们的价值的看法，主观上则是我们对于他人看法的顾忌&lt;/strong&gt;。每一个人为了维持名誉，需要完成在他所占据的独特位置上，人们要求他和期望他做好的事情。而他通常也会重视别人的这些看法，即“名誉感”或“羞耻感”。&lt;/p&gt;
&lt;h4 id=&#34;公民名誉&#34;&gt;&lt;a href=&#34;#公民名誉&#34; class=&#34;headerlink&#34; title=&#34;公民名誉&#34;&gt;&lt;/a&gt;公民名誉&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;之所以有名誉，归根到底是因为人们确信一个人的性格是不会改变的&lt;/li&gt;
&lt;li&gt;公民名誉即道德&lt;/li&gt;
&lt;li&gt;名誉只是标明这个人不是一个例外，声望却标明这个人是一个例外。因此，声望是要争取的，而名誉只需保有就行了。&lt;/li&gt;
&lt;li&gt;名誉的价值是间接的&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;公职名誉&#34;&gt;&lt;a href=&#34;#公职名誉&#34; class=&#34;headerlink&#34; title=&#34;公职名誉&#34;&gt;&lt;/a&gt;公职名誉&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;公职名誉要求担任公职的人，除了保有公民名誉，还要对其职位保持尊敬&lt;/li&gt;
&lt;li&gt;自愿为国家服务的人亦都享有公职荣誉&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;性别名誉&#34;&gt;&lt;a href=&#34;#性别名誉&#34; class=&#34;headerlink&#34; title=&#34;性别名誉&#34;&gt;&lt;/a&gt;性别名誉&lt;/h4&gt;&lt;p&gt;&lt;em&gt;（注：这一部分论述的是传统社会中的性别名誉）&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;女性名誉远比男性名誉重要，因为女性与异性之间的关系在女性生活中是头等大事&lt;/li&gt;
&lt;li&gt;女性从男性哪里要求和期待一切东西，而男性从女性哪里首要和直接地只要求得到一样东西——女性本身。可以说，女性名誉的价值只是一种习俗的常规意义上的价值&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;骑士名誉&#34;&gt;&lt;a href=&#34;#骑士名誉&#34; class=&#34;headerlink&#34; title=&#34;骑士名誉&#34;&gt;&lt;/a&gt;骑士名誉&lt;/h4&gt;&lt;p&gt;这类名誉在西方历史中较为典型。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;骑士名誉跟一个人自身价值或道德本性没有关系，只和他人对我们的看法和行为有关。只要因为他人的污言秽语或行动冒犯丧失了骑士名誉，我们能做的只有诉诸身体和暴力，通过决斗的方式恢复名誉。&lt;/li&gt;
&lt;li&gt;骑士名誉是自大和愚蠢的象征。看似匪夷所思，实际也在我们生活中时常出现。一个真正珍视自己价值的人，面对空穴来风的侮辱、诋毁会淡然处之，但如果做不到这一点，那精明和修养会帮他掩藏起怒气&lt;/li&gt;
&lt;li&gt;我们应该避免对一些身体冲撞做过度解读，这会带来真正的祸害&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;民族荣誉&#34;&gt;&lt;a href=&#34;#民族荣誉&#34; class=&#34;headerlink&#34; title=&#34;民族荣誉&#34;&gt;&lt;/a&gt;民族荣誉&lt;/h4&gt;&lt;p&gt;民族荣誉上，武力是唯一的裁决者。相比可信任来说，令人生畏是民族荣誉和国家荣誉更需要的。&lt;/p&gt;
&lt;h3 id=&#34;名声&#34;&gt;&lt;a href=&#34;#名声&#34; class=&#34;headerlink&#34; title=&#34;名声&#34;&gt;&lt;/a&gt;名声&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;石头扔进泥淖，是不会弄出涟漪的 —— 谚语&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;名誉包含人们在同等处境下必须具备的素质；而名声涉及的素质是我们不可能要求人们一定具备的。这可以是行为业绩或思想作品。行为业绩一方面有赖机遇，另一方面总是跟随动因，所以往往不能持久。而思想作品通常开始声音微弱，而后历久弥新逐渐响亮起来。&lt;/li&gt;
&lt;li&gt;名声维持的越久，到来得就越迟。人类精神思想最高级的产物一般都不会受大众欢迎，根本原因就是每一个人只能真正理解和欣赏自己同类&lt;/li&gt;
&lt;li&gt;名誉是作为信用预先支付的，而名声只能是顶住嫉妒，经过争取得来的。要创作优秀的作品，避免低劣的作品，创作者就必须地址和鄙视大众和其代言人的批判。从而&lt;strong&gt;名声总是逃离追逐它的人，却会尾随对它毫不在意的人&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;有价值和让人幸福的不是名声，而是借以获得名声的东西&lt;/strong&gt;，或更准确的说，让人得到幸福的是产生这些优点和贡献的思想与能力。&lt;/li&gt;
&lt;li&gt;大众的头脑是可怜、凄凉的舞台，这里不可能有真正的幸福。既然人们一般都缺乏独立判断，尤其缺乏欣赏高级别和高难度成就的能力，所以，人们总是听从他人的权威&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;建议和格言&#34;&gt;&lt;a href=&#34;#建议和格言&#34; class=&#34;headerlink&#34; title=&#34;建议和格言&#34;&gt;&lt;/a&gt;建议和格言&lt;/h2&gt;&lt;p&gt;聊了上面一些原则性的话题，下面谈一些建议。&lt;/p&gt;
&lt;h3 id=&#34;泛论&#34;&gt;&lt;a href=&#34;#泛论&#34; class=&#34;headerlink&#34; title=&#34;泛论&#34;&gt;&lt;/a&gt;泛论&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;理性的人寻求的不是快乐，而只是没有痛苦&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;（注：叔本华的悲观主义认知）&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;缺少痛苦的程度是衡量一个人生活幸福的标准。而没有痛苦的状态是真正的最大的幸福。&lt;/li&gt;
&lt;li&gt;正是奋力争取幸福快乐、荣耀排场带来了巨大的不幸&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;我们所说的社交、聚会、沙龙，是悲惨的一出戏，一台糟糕的话剧，乏味、无趣，依靠机械、服饰和包装暂时地撑持。 ——《格言和随想》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;一般来说，人们常做的一大蠢事就是过分地为生活未雨绸缪&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;对待自己&#34;&gt;&lt;a href=&#34;#对待自己&#34; class=&#34;headerlink&#34; title=&#34;对待自己&#34;&gt;&lt;/a&gt;对待自己&lt;/h3&gt;&lt;p&gt;对自己负责，自给自足。冷静、理性地使用自己的思想能力。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对自己生命计划有一个大概的了解，能够比任何一切都更有效地增强自己的勇气&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;人生智慧的重要一点是在关注现在和计划将来两者之间达成恰到好处的平衡&lt;/strong&gt;。我们的存在唯独就在这一时间。&lt;/li&gt;
&lt;li&gt;只有人挣脱了所有各种可能的期望和要求&lt;em&gt;（注：这当然不现实）&lt;/em&gt;，返回赤裸和冰冷的存在本身，人才领会精神上的安宁，而精神上的安宁却是幸福的构成基础&lt;/li&gt;
&lt;li&gt;思想活动要和实际活动相结合&lt;em&gt;（注：学而不思则罔，思而不学则殆）&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;要&lt;strong&gt;勤于反省&lt;/strong&gt;，不要随波逐流&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;谁要是不热爱独处，他也就不热爱自由&lt;/strong&gt;。社交聚会要求人们做出牺牲，而一个人越具备独特的个性，他就越难做出这样的牺牲。社交聚会一旦人多势众，平庸就会占据上风。有深度的交谈和充满思想的想法，只能属于有思想丰富的人所组成的聚会。而在泛泛的社交聚会上，人们对有思想见识的谈话绝对深恶痛绝，所以在这种社交场合要取悦他人。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;一个完全依靠自己，一切称得上属于他的东西都存在于他的自身的人是不可能不幸福的 —— 西塞罗&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;只有那些依靠自己，总的来说能够成为自己的人才是处境最妙的&lt;/strong&gt;。促使人们热衷与人交往的原因，就是人们无法忍受孤独或无法在孤独中忍受自己。而人们单调的个性使他们无法忍受自己，人的群居生活可被视为人与人相互间的精神取暖。&lt;/li&gt;
&lt;li&gt;一个人的高贵本性首先反映在这个人无法从他人的交往中得到乐趣&lt;em&gt;（注：持保留意见）&lt;/em&gt;。虽然生活在众人之中，但他不可以成为众人的一份子，而是要与众人更多地保持某种纯粹客观的联系&lt;em&gt;（注：从某种角度讲，就是缺乏人情味。我认为在叔本华所推介的精神高尚境界以及世俗感情间找到一个平衡点才是最适宜的）&lt;/em&gt;。&lt;/li&gt;
&lt;li&gt;嫉妒对人来说是自然的，但嫉妒既是一种罪恶又是一种不行。&lt;em&gt;（注：叔本人也没有给出有效地克服这种感情的办法）&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;不要老是紧张兮兮不断回头重新考虑已经付诸实行的事情和担忧可能遭遇到的危险，应该给思考贴上封条，确信已经考虑到了一切，并以此得到安慰&lt;/li&gt;
&lt;li&gt;遭遇不幸时，要能积极主动地面对生活，把握住自己的情绪，改变能改变的&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;任何关乎我们痛苦和快乐的事情都应该以理性和判断力去观察和考虑&lt;/strong&gt;，对其不掺杂个人情绪的思考。与此同时，&lt;strong&gt;千万不要让想象力介入思考&lt;/strong&gt;，因为想象力无法对事情做出判断，智慧毫无益处地扰乱我们的情绪。&lt;/li&gt;
&lt;li&gt;在夜晚，我们的理解力和判断力就变得疲倦和呆滞，已无法深入事情的本质。因此&lt;strong&gt;夜晚并不适宜思考严肃的，尤其令人不悦的事情&lt;/strong&gt;。早上适合人们从事工作和创造，不管是精神上还是体力上的。因为早晨是一天的青年期，一切都是明亮、新鲜和轻松的。&lt;/li&gt;
&lt;li&gt;只在恰当的时间里操心、享受、忍耐一样事情，其他的则完全不要想&lt;em&gt;（注：想清楚自己为何烦忧，逐个击破，不要带着包袱前进）&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;生命在于运动 —— 亚里士多德&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;我们的生存从本质上就是不停歇、不安的。&lt;strong&gt;去操劳、去克服困难是人的一种需要。持久的享受和完全的满足所带来的停滞和静态，会让人无法忍受&lt;/strong&gt;。克服障碍是人的本能，没有机会时，人们也会依照自己的个性去制造这样的机会&lt;/li&gt;
&lt;li&gt;肌肉会疲劳，精神操劳得厉害也会变衰弱。我们不应强制性地、持续不停顿和在不适宜的时间用脑，&lt;strong&gt;我们一定要给予大脑必需的、充足的睡眠，借此修养、恢复&lt;/strong&gt;。睡眠是我们提前借取的一小段死亡，以此获得和更新被白天所耗尽了的生命。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;看待他人&#34;&gt;&lt;a href=&#34;#看待他人&#34; class=&#34;headerlink&#34; title=&#34;看待他人&#34;&gt;&lt;/a&gt;看待他人&lt;/h3&gt;&lt;p&gt;他人是固执的，不要抱太高的期望。要谨慎机灵，避免受伤。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为了在人群中生存，我们必须容许和承认别人以既定的个性存在。&lt;strong&gt;我们关心的只是如何以一个人的本性和特质所允许的方式利用这个人，既不应该希望改变也不可以干脆谴责这个人的本性&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;人与人在精神、气质上的同声相应或大相径庭，会轻易和很快在人们的交谈中显现出来。同类的两个人很容易就谈论的一切达成某种程度的和谐一致。&lt;/li&gt;
&lt;li&gt;记忆中人会被理念化，这个美化工作需要很长时间才能完成。要想得到这个好处，方法之一就是尽量不要与人见面&lt;/li&gt;
&lt;li&gt;和别人说话时，会自然地把自己降到他人的水平。因此&lt;strong&gt;和庸俗的人交谈时，自己不同时变得庸俗简直就是不可能的事情&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;很难在高度尊敬一个人的同时，有非常喜爱他 —— 拉罗什富科&lt;br&gt;取悦我们所必需的思想深度刚好就是我们自己的思想深度 —— 《论精神》 第2篇，第10章&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;我们只能选择得到别人的尊敬，或是他们的喜爱。&lt;/strong&gt;别人对我们的喜爱总是出于私心，且并不总是值得我们自豪的。别人对我们的尊敬，情况相反，因为这是我们强行从别人哪里、违背他们意愿获得的。别人通常都把这尊敬掩藏起来。尊敬和我们的价值紧密相关，而喜爱则不是，因为&lt;strong&gt;喜爱是主观的，尊敬是客观的&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;大部分人都是如此主观，根本上除了他们自己外不会对别的感兴趣，结果就是别人说什么话马上就能让他们联想到自己。在这些人身上，意欲远远压倒了认识力，他们微弱的智力完全服务于意欲们甚至片刻也摆脱不了意欲的控制。&lt;strong&gt;占星术是一个极好的证明，由于人这种可鄙的主体性，所以把一切都与自己搭上关联。占星术把天体的运行和寒酸的自己拉上关系，也把它与尘世间的俗事、丑行联系在一起。这种情况古已有之&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对任何人都不可太过迁就和热情&lt;/strong&gt;。如果我们太过友好、礼貌和殷勤，我们反而有可能失去这些朋友。与人交往的优势全在于任何方面都不需要对方，&lt;strong&gt;并且让他们看到这一点&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;不尊崇别人的人会受到别人的尊崇 —— 意大利谚语&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;谁要是以为这世上魔鬼就是头上长角或者傻瓜就是身挂铃铛，他就会永远成为他们的猎物和玩物。与他人交往时，人们只是露出其中的一面。无论如何，对刚认识不久的人，都应注意不要评估太高。否则十有八九我们都会失望甚至蒙受损失。&lt;strong&gt;一个人会在细节小事上疏于防备，从而表露出自己的性格&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;没有哪条狗是坏到不会摇尾巴的 —— 意大利谚语&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;要具备某种不发自我们与生俱来的本性，而只是出自理想思考，完全从外在获得的性格，是件很困难的事。人的天性从来没有完全停止过对此的抗争。&lt;strong&gt;造作是我们对自己的某种自我谴责和贬低&lt;/strong&gt;。我们不能无条件放任自流，完全表现自己的样子。&lt;strong&gt;对否定属性的隐瞒是合理的，但是对肯定属性的冒充是不对的&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;以他人为镜，从中能清楚看到自己的缺点&lt;/li&gt;
&lt;li&gt;人与人最重要的关系和由此产生的联系不是理念上的&lt;em&gt;（注：即兴致相投）&lt;/em&gt;，而是以某种物质利益为基础。这点认识上的转变通常在年长时才会认识到。因为&lt;strong&gt;在这个贫穷和匮乏的世界，应付匮乏和需求的手段无论在何处都是最重要的，因此也是压倒一切的。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;在这个世界上流行的不是真正的尊重和真正的友谊，只是做得尽量逼真和自然地显示尊重和友谊的表面功夫。朋友间分隔太远或长时间不见会有损友情，&lt;strong&gt;甚至我们最亲爱的朋友随着岁月的流逝会逐渐变成抽象的概念，我们对他们的关切也越来越变得纯粹只是理性上的&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;从我们最好的朋友所遭遇的不幸，我们总能找到某样并不会使我们不悦的东西 —— 拉罗什富科&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;一个人表现出聪明和思想只能激起人们对他的憎恨和方案，并且这种感情还因为憎恨者和反感者没有正当理由说出来而变得更加强烈。&lt;strong&gt;显示自己的聪明智慧其实就是间接地指责别人愚蠢和无能&lt;/strong&gt;。每个人都会本能地靠近给他带来优越感的物体。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;要取悦别人的话，唯一的方式就是把自己裹以最傻呆的动物的外皮 —— 格拉西安&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;保持礼貌就是大家心照不宣订下这样一条协议：我们都将互相忽略和避免对方在道德上和智力上的可怜本质。&lt;/strong&gt;有礼貌是精明的做法，不礼貌的言行是愚蠢的。&lt;em&gt;（注：礼貌是人的一种保护措施，用光彩的外表掩饰贫乏难看，有棱有角的内在动物本性；在公众面前失去礼貌，就有如脱光衣服示众）&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;人的性格是不会改变的。&lt;strong&gt;一辈子也难改变一个人，能改变一个人的只有他自己&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;所有激烈的情绪都来自意欲，而认识力在本质上是冷静的&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;你的敌人不可以知道的东西，都不能告诉你的朋友 —— 阿拉伯谚语&lt;br&gt;如果保持沉默，那我的秘密就是我的囚徒；如果失口说出这个秘密，那我就变成了这秘密的囚徒 —— 阿拉伯谚语&lt;br&gt;沉默之树结出安宁之果 —— 阿拉伯谚语&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;选择沉默是精明所致，采用说话则是虚荣心使然。我们经常都有做出这两者的机会，但通常为求得瞬间的快意而选择说话，不惜舍弃沉默所带给我们的长久好处&lt;/li&gt;
&lt;li&gt;对不少人我们可以态度礼貌、声调友好地说出真正无礼的话语，而又避免直接的危险。&lt;em&gt;（注：因为这表示我们并没有诉诸自己的感情，没有情绪化）&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;看待命运&#34;&gt;&lt;a href=&#34;#看待命运&#34; class=&#34;headerlink&#34; title=&#34;看待命运&#34;&gt;&lt;/a&gt;看待命运&lt;/h3&gt;&lt;p&gt;要对可能面临的苦难有所认识和准备。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通常，外在的时间和我们的根本目的犹如两股向着不同方向牵引的力，这两股力形成的对角线就成了我们的生活轨迹。&lt;/li&gt;
&lt;li&gt;一个精明的人不会被事物恒久不变的表象欺骗，甚至能预见事物即将发生的变化方向&lt;/li&gt;
&lt;li&gt;时间索取的利息比任何一个高利贷都夸张&lt;/li&gt;
&lt;li&gt;总的来说，一个人在遭遇各种不幸横祸的时候，如果能够保持镇定自若，那就显示出他知道人生有可能遭遇的灾难是巨大和不可胜数的。&lt;/li&gt;
&lt;li&gt;我们对每天人际交往中遇到的琐细烦忧，不可以放在心上，放在脑子里，而应视这些东西为前进路上的小狮子，随脚踢开，千万不要认真回想和琢磨这些事情。&lt;/li&gt;
&lt;li&gt;一定程度的敬畏对于我们在这一世界的生存是必须的&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;人生的各个阶段&#34;&gt;&lt;a href=&#34;#人生的各个阶段&#34; class=&#34;headerlink&#34; title=&#34;人生的各个阶段&#34;&gt;&lt;/a&gt;人生的各个阶段&lt;/h2&gt;&lt;h3 id=&#34;童年期&#34;&gt;&lt;a href=&#34;#童年期&#34; class=&#34;headerlink&#34; title=&#34;童年期&#34;&gt;&lt;/a&gt;童年期&lt;/h3&gt;&lt;p&gt;懵懂，上帝视角观察生活，不被意欲牵扰。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;童年期我们更多处于认知而不是意欲的状态，因此也充满了幸福。这个时候，生活以其全部以呈现在我们眼前，一切都是那样的新颖、鲜活。在童年期和青年早期对事物的经验和认识构成了以后所有认识和经验的固定原型和类别。&lt;/li&gt;
&lt;li&gt;教育也忙于向我们灌输概念。不过这些概念并不会给我们真正本质的东西。这些东西就在我们对这个世界所作的直观把握中&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;所有事物的客体存在，亦即其纯粹在表象中的存在，总是令人愉快的，而这些事物的主体存在，亦即作为意欲存在时，却都沉浸在痛苦和悲哀中&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;在稍后的日子，我们有了对现实生活的渴望，急切期盼做事和受苦，这把我们拉进了喧嚷、骚动的人生。我们逐渐了解事物的另一面，即意欲的一面。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;青年期&#34;&gt;&lt;a href=&#34;#青年期&#34; class=&#34;headerlink&#34; title=&#34;青年期&#34;&gt;&lt;/a&gt;青年期&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在青年期困扰我们造成我们不幸福的原因是，我们对幸福的&lt;strong&gt;刻意追求&lt;/strong&gt;。无论处在何种环境，我们通常都会感到不满，那是因为我们把现在才首次了解到的、无处不在的人生的空虚和可怜归咎于我们的环境&lt;/li&gt;
&lt;li&gt;如果人的前半生特征是苦苦追求幸福而又无法满足，那人的后半生特征则变成了害怕遭遇不幸&lt;/li&gt;
&lt;li&gt;一个成熟的人从自己生活经验中获得的，首先是不再先入为主和想当然&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在年轻的时候，我们误以为生活中的重要人物和重要意义的时间会大张旗鼓地露面和轰轰烈烈地发生。到了老年后，对生活的回顾却显示这些人物和事件都是悄无声息、不为人注意地从后门进入我们的生活&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;中老年&#34;&gt;&lt;a href=&#34;#中老年&#34; class=&#34;headerlink&#34; title=&#34;中老年&#34;&gt;&lt;/a&gt;中老年&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;到了人生后半部分的人，看到了刺绣的背面，背面不那么美丽，但给人以教益，因为它让人看到刺绣品的总体针线&lt;/li&gt;
&lt;li&gt;我们在青年时代感到喜悦和朝气，部分原因是我们正在走着上坡的路，并没有看见死亡。从年轻的角度看，生活就是漫长无尽的将来；从老年的角度看，那不过是一段极其短暂的过去&lt;/li&gt;
&lt;li&gt;蓦然回首走过的一生，我们为什么觉得如此短暂呢？因为我们对这生活回忆不多，所以就觉得生活短暂了。这回忆漏掉了所有没多大意义和许多不愉快的事，剩下来的因此很少。很多开始有意义的事情，经过经常和无数次的重复后，慢慢成了没有意义。因为我们更能回忆我们的早年，而不是之后的时光。我们生活的时间越长，值得事后回想和重要有意义的事情就越少，唯有回想，才能让这些事留在记忆中。&lt;/li&gt;
&lt;li&gt;有时我们的回忆可以把某一幕尘封已久的往事栩栩如生地重现在眼前，仿佛发生在昨天，但我们无法回想起现在和当初发生这一幕往事间所流逝的漫长时间。这段时间无法像一副图画一目了然，并且这之间发生的事情也大都忘记了；对这些事情只保留抽象中的大概认识，纯粹某一概念而已。所以那过去很久的某一往事显得那样的接近，宛如发生在昨天，而其余的时间则消失无踪。&lt;/li&gt;
&lt;li&gt;青年人根据自己度过的为数不多的年岁估算将来，这些过去了的日子总是充满回忆，并因此显得漫长，因为&lt;strong&gt;新奇感&lt;/strong&gt;使所有一切都显得有意义。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;有时候，我们以为自己是在怀念某一处遥远的地方，但其实，我们只是怀念着我们在年轻、朝气蓬勃的时候。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;人只有在年轻时期才是充满意识地生活，到了老年只带着一半的意识活着。人们做他们不得不做的事，之后却不知道自己是否做了那些事情&lt;/li&gt;
&lt;li&gt;童年期，新奇感把一切事物都纳入我们的意识，因此每一天都是漫长的。&lt;strong&gt;我们在外出旅行的时候也遭遇同样的情形，所以，在旅行中度过的一个月似乎比在家的四个月还要长&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一年的感觉长短与这一年除以我们年龄所得的商成反比&lt;/strong&gt;；其次我们感受无聊的成都与我们的年龄成反比。在后半辈子，无聊也大都连带消失了。并且另一方面，我们的情欲及其痛苦也沉寂了。&lt;/li&gt;
&lt;li&gt;青年期占优势的是直观，在老年期占优势的是思想&lt;/li&gt;
&lt;li&gt;我们精神力最旺盛的时期，毫无疑问是青年期，最迟能延至35岁左右。从这个年纪开始，精神力就开始衰弱。&lt;/li&gt;
&lt;li&gt;在青年期，我们的知识总是支离破碎、残缺不全的。只有到了老年，我们才能对生活获得某一完整的、恰如其分的表象认识。人们在青年时代有更多的设想，但在老年阶段，有的更多是判断力、洞察力和对事物的根本认识&lt;/li&gt;
&lt;li&gt;我们经常低估我们在年轻时做出的成绩，也轻视那时候的判断力&lt;/li&gt;
&lt;li&gt;最奇怪的是，只有在生命临近完结之时，一个人才会真正认清和明白，甚至他自己、他就自己的木目标和方向，尤其在他与这个世界和他人的关系方面&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;每种快感的产生都只是一种需求的缓解&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;不管怎么说，青年期是躁动不安的时期，老年期是安宁的时期。青年人收到缤纷世界及其丰富形态的诱惑，他的想象力马上就夸大了这一世界所能给予的东西。在老年，人们得以更正确、更清晰地认清所有一切的客观面目。&lt;/li&gt;
&lt;li&gt;青年期和老年期的根本区别在青年期的前景就是生活，而老年期的前景却是死亡。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;附：叔本华的生平轶事&#34;&gt;&lt;a href=&#34;#附：叔本华的生平轶事&#34; class=&#34;headerlink&#34; title=&#34;附：叔本华的生平轶事&#34;&gt;&lt;/a&gt;附：叔本华的生平轶事&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;“在孩子们从生活原型中了解到生活之前，不应该从生活的复制品中认识生活的任何方面。因此，不要匆匆忙忙只是把书本放在孩子们的手中。……让他们永远直接从现实世界里提取概念”&lt;/li&gt;
&lt;li&gt;生来就注定要成就一番伟大事业的人，从青年时代起就会在内心秘密感到这一事实&lt;/li&gt;
&lt;li&gt;“设立国家的必要性就在于人们已经承认：人与人之间并没有什么公正可言”。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;–END–&lt;/em&gt;&lt;/p&gt;
</content>
        <category term="读书笔记" />
        <category term="哲学" />
        <category term="幸福" />
        <category term="人生" />
        <category term="叔本华" />
        <updated>2019-03-11T16:14:51.000Z</updated>
    </entry>
    <entry>
        <id>http://shenlvmeng.github.com/blog/2019/02/13/1587-a-year-of-no-significance/</id>
        <title>关于《万历十五年》的一些思考</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2019/02/13/1587-a-year-of-no-significance/"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;作为读书后的感受记录，照例先做概要，再谈感受。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我是在大学阶段知道《万历十五年》这本书的，当时作为《形势与政策》课的读书笔记建议书目之一。可见尽管写的四百多年前的事，对于当今还是有参考意义。如作者所说，全书介于学术著作和商业书籍之间，用有趣的具有复古气息的口气，从点到面地讲述了万历年间的诸多史事和几个典型人物，由浅入深、抽丝剥茧地探讨了传统社会存在的僵化问题，并给出现代社会以经验和教训。读毕感叹黄仁宇先生功底之深厚，著学之审慎。&lt;/p&gt;
&lt;h2 id=&#34;背景&#34;&gt;&lt;a href=&#34;#背景&#34; class=&#34;headerlink&#34; title=&#34;背景&#34;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;归根到底，还是过于依托世俗道德约束百官和平民，缺少法律的规矩约束，使得整个社会制度很容易跟不上经济发展和科学进步，而最终走向窠臼被淘汰。&lt;/li&gt;
&lt;li&gt;明朝的皇帝即使贵为天子，也不过是制度所需要的产物，他作为“天命”的象征，有天赋的最终仲裁和决定权，需要调和百官之间的关系；但同时也是传统道德的完美象征和百官楷模，需要严格依从传统和道德行事。&lt;/li&gt;
&lt;li&gt;文官们熟读孔孟之书，研究历史兴亡之道，从伦理道德出发解释日常事务，在面对违反伦常的虚伪矫情时，如果不力加诤谏而听之任之，必然会影响本朝安危&lt;/li&gt;
&lt;li&gt;宦官是皇帝和文官之间的协调者，一个优秀的皇帝会成为文官和太监间的平衡者，相互掣肘&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;申时行&#34;&gt;&lt;a href=&#34;#申时行&#34; class=&#34;headerlink&#34; title=&#34;申时行&#34;&gt;&lt;/a&gt;申时行&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在这种制度下，道德至高无上，它不仅可以指导行政，还可以代替行政&lt;/li&gt;
&lt;li&gt;一项政策能否付诸实施，实施后或成或败，全看它与所有文官的共同习惯是否相安无事。&lt;/li&gt;
&lt;li&gt;文官作为政策的实施者，朝廷最大的任务就是促进文官之间的互相信赖与和谐，鼓舞士气，发挥精神上的力量。&lt;/li&gt;
&lt;li&gt;理想和现实是脱节的，人们口头上的理想即为“阳”，人们不可告人的私欲即为“阴”，调节阴阳是一件麻烦事。因此，&lt;strong&gt;与其暴露各人的阴，毋宁提倡他们的阳&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;身为首辅最大的贡献，则在于是各种人才都能在政府中发挥长处，对他们起感化和领导的作用。&lt;/li&gt;
&lt;li&gt;申时行尽管意识到阴阳难以调节，问题症结所在，却没有能力改变制度。他决心做和事佬来调和阴阳，生平不愿宣扬别人的缺点，对于提拔自己的人，更不会妄加批判。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;万历&#34;&gt;&lt;a href=&#34;#万历&#34; class=&#34;headerlink&#34; title=&#34;万历&#34;&gt;&lt;/a&gt;万历&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;本朝的司法制度极为简单，缺乏判决争端的依据。以立储为例，假如帝国真正实行法治，继承皇位一事由一个独立性的法庭作出判决，那么皇帝委托律师根据文法和不成文法来做辩护，立幼而不立长是有胜诉可能的。但是&lt;strong&gt;本朝不是以法律治理臣民，而是以“四书”中的伦理作为主宰&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;文官已成一种强大的力量，强迫宝座上的皇帝在处理政务时摈弃他个人的意志，历任首辅又都以群臣的代言人自居。万历却无能为力，因为在制度中，皇帝作为仲裁者而非实施者，没有制定法律的力量，不能改造制度避免冲突发生。因此消极怠工的报复，目的并非恢复皇帝的权威而只是单纯发泄&lt;/li&gt;
&lt;li&gt;体制上有欠缺，文官们就需要精神力量来弥补组织上的不足。一方面，这些熟读经史的人以仁义道德相标榜，以治国平天下为己任；另一方面，体制上有存在如此多罅隙，给这些人强烈的引诱&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;长期的道德沦丧，即标志社会形态何其组织制度的脱节&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;海瑞&#34;&gt;&lt;a href=&#34;#海瑞&#34; class=&#34;headerlink&#34; title=&#34;海瑞&#34;&gt;&lt;/a&gt;海瑞&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;海瑞的一生体现了一个有教养的读书人服务公众牺牲自我的精神，但这种精神的实际作用却至为微薄。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;抽象的道德代替了法律，上至官僚下至村民，其判断是非的标准是“善恶”而非合法或非法。&lt;/li&gt;
&lt;li&gt;以熟读诗书的文人治理农民，他们不可能改进这个司法制度&lt;/li&gt;
&lt;li&gt;财政制度弊病在于缺乏弹性，不能适应环境而调整。政府不用技术和经济的力量来扶植民众，而单纯依靠政治上的压力和道德上的宣传，结果只能是事与愿违&lt;/li&gt;
&lt;li&gt;海瑞不相信为人处世应该有阴阳的分别，因此被称为奇特、怪僻而执拗。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;戚继光&#34;&gt;&lt;a href=&#34;#戚继光&#34; class=&#34;headerlink&#34; title=&#34;戚继光&#34;&gt;&lt;/a&gt;戚继光&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;明朝文官地位高于武官。大多数文官以中庸之道为处事的原则，标榜稳健和平，这和武官克敌制胜征战沙场的常态相矛盾。&lt;/li&gt;
&lt;li&gt;戚继光功成名遂，固然是本身的卓越才能使然，但是得到谭纶的支持也是必不可少的因素。&lt;/li&gt;
&lt;li&gt;戚继光是个复杂的人物，不能把她强行安放在用传统道德构成的标准框架里。他的天才，在于他发现面对落后的军事制度，帝国不允许也没有能力做全面的改革，能做的只有妥协；而他的成功也在于他善于在技术上调和各种矛盾，&lt;strong&gt;在组织制度上没办法，就在私人关系上寻找出路&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;戚继光的长处在于他没有把人事上的才能当成投机取巧和升官发财的本钱，而只是作为建立新军和保卫国家的手段&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;李贽&#34;&gt;&lt;a href=&#34;#李贽&#34; class=&#34;headerlink&#34; title=&#34;李贽&#34;&gt;&lt;/a&gt;李贽&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;大凡高度的概括，总带有想象的成分&lt;/li&gt;
&lt;li&gt;李贽视舍小节而顾大局的作法为正当，其前提是以公共利益为依托，在伦理上的解释则是公众道德不同于私人道德，目的纯正不妨手段不纯&lt;/li&gt;
&lt;li&gt;李贽是提倡实践的理论家，但并不表示自己有意于实践；他攻击虚伪的伦理道德，也拒绝以传统的历史观为自己的历史观，但更广泛的范围里仍然是儒家的信徒。&lt;/li&gt;
&lt;li&gt;张居正意识到必须要在组织上作部分的调整和改革，但是在理论上找不到更好的学说，就只能以自己的一身挺立于合法合合理之间。&lt;/li&gt;
&lt;li&gt;混合阴阳，在长时间里造成了法律和道德的脱节&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当一个人口众多的国家，个人行动全凭儒家简单粗浅而又无法固定的原则所限制，法律又毫无创造性，则社会发展的程度必然受到限制。&lt;strong&gt;即使宗旨善良，也不能补助技术之不及&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;–END–&lt;/em&gt;&lt;/p&gt;
</content>
        <category term="制度" />
        <category term="道德" />
        <category term="文官" />
        <category term="万历" />
        <category term="明朝" />
        <category term="读书笔记" />
        <updated>2019-02-13T15:18:30.000Z</updated>
    </entry>
    <entry>
        <id>http://shenlvmeng.github.com/blog/2018/11/22/selfish-gene/</id>
        <title>《自私的基因》——生命的必然性和偶然性</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2018/11/22/selfish-gene/"/>
        <content type="html">&lt;p&gt;《自私的基因》是道金斯在上世纪70年代写的一本关于生物学的经典著作。书中从“自私的”复制因子基因的角度出发，推导出生物学、社会学各个方面的规律猜想，乃至最后上升到对生命、人类产生的必然性和偶然性的大胆设想。全书从第5章起，开始引人入胜，内容渐入佳境，让人手不释卷。其中对于代际、两性出现、共生群居等方面的探讨，令我有三观再塑之感。尽管前几章对复制因子基因的“自私性”和生存机器铺垫甚多，有点拖沓，整体还是很值得一读的。另外，把《自私的基因》和《人类简史》连在一起思考，甚至有更奇妙更透彻的感觉。&lt;/p&gt;
&lt;h2 id=&#34;对“自私的基因”一词的解释&#34;&gt;&lt;a href=&#34;#对“自私的基因”一词的解释&#34; class=&#34;headerlink&#34; title=&#34;对“自私的基因”一词的解释&#34;&gt;&lt;/a&gt;对“自私的基因”一词的解释&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;生物的进化的最基本单位是基因而不是生物个体&lt;/strong&gt;。因为基因有复制性，可以控制个体性状。生物的生存繁衍等一切行为的本质是基因带来的。成功基因的标志是可以在复制中不断战胜其余复制因子，&lt;strong&gt;这个过程是“盲目的”。基因是不会做选择的，做选择的是自然环境&lt;/strong&gt;。经过自然选择留下来的成功基因，自然是生存能力最强，留下复制最多的，看上去也是最“自私的”。自私一词是有些感性，但是它是对成功基因最恰当的形容了。你可以把它和&lt;strong&gt;“不被淘汰”&lt;/strong&gt;等同。&lt;/p&gt;
&lt;h2 id=&#34;复制因子&#34;&gt;&lt;a href=&#34;#复制因子&#34; class=&#34;headerlink&#34; title=&#34;复制因子&#34;&gt;&lt;/a&gt;复制因子&lt;/h2&gt;&lt;p&gt;基因作为自然界诞生的产物，更通用的说法可以叫&lt;strong&gt;复制因子&lt;/strong&gt;。在复制因子出现之前，自然界一片混沌，各种大分子在“分子汤”内自由游荡，随意组合，我们很难把它们叫做“个体”。直到有一天（说得不大严谨）出现了第一个复制因子。它们不见得是分子汤里最大的，但是它有可贵的性质——能复制自身。这个偶然性虽然非常之小，但是&lt;strong&gt;一旦出现就会不可逆的扩张开来&lt;/strong&gt;。以至于复制因子一旦出现就会占据整个分子汤的主要地位，它会必然地在海洋里疯狂复制自己的拷贝。&lt;/p&gt;
&lt;p&gt;很有可能基因只不过是一种复制因子，在基因出现前甚至出现之初，可能甚至很可能有类似基因的其他复制因子。复制因子之间必定会有胜利和失败者，因为分子汤资源是有限的，不足以维持无限量的复制。现在看来，最终基因胜利了。在基因的竞争和演化中，逐渐出现了蛋白质的保护膜，更多的基因渐渐聚合起来，蛋白质分工逐渐明确，生存机器由此产生。&lt;strong&gt;人不过也是一种生存机器罢了&lt;/strong&gt;，“操纵”这个机器的是背后的基因。&lt;/p&gt;
&lt;p&gt;另外，复制过程当然不会是完美无缺的，因此产生的多样性，让生存机器间也出现了越来越大的形态差异。&lt;/p&gt;
&lt;h2 id=&#34;基因与染色体&#34;&gt;&lt;a href=&#34;#基因与染色体&#34; class=&#34;headerlink&#34; title=&#34;基因与染色体&#34;&gt;&lt;/a&gt;基因与染色体&lt;/h2&gt;&lt;p&gt;我们生物都是同一种复制因子——DNA的生存机器，基因在染色体中，它通过蛋白酶监督着蛋白质的生成，并通过蛋白质控制生物性状。基因对生物的控制是&lt;strong&gt;“单向”的&lt;/strong&gt;，也即后天所学是无法改变基因并遗传给后代的。个体的存活时间可能很有限，但是基因不断复制和交叉会一代代传递下去。&lt;/p&gt;
&lt;p&gt;基因的复制最好是完美无缺的，自然选择对失误的复制惩罚往往很严重，如染色体丢失、倒位很容易导致个体的死亡。但是也有些复制失误不会造成那么大问题，只是在个体的一生逐渐积累，这也就是衰老。成功基因的标志除了“自私”，即能传递自身，还要保证和其他基因的通力合作下，能让生存机器的死亡至少推迟在生殖以后。有种观点认为性“促进了在单个个体内积累以往出现在不同个体内的有利突变”。&lt;/p&gt;
&lt;p&gt;所谓&lt;strong&gt;进化就是指基因库中某些基因变多了，而另外的变少了的过程&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;基因机器&#34;&gt;&lt;a href=&#34;#基因机器&#34; class=&#34;headerlink&#34; title=&#34;基因机器&#34;&gt;&lt;/a&gt;基因机器&lt;/h2&gt;&lt;p&gt;基因通过合成蛋白质，进而由神经控制和激素控制控制生物个体。控制下个体的每一次行为都是一次选择，在自然选择后留下的都是适于当前环境的。动物的行为无论是利己的还是利他的，都在基因控制之下，基因是主要的策略制定者，大脑则是执行者，并接管了很多决策职能。&lt;/p&gt;
&lt;p&gt;一个生存机器对另外生存机器的行为或神经系统施加影响时，前者就是在和后者联络（communication）。这也让基因的影响力能辐射到另外的个体，产生相互的影响。即下章会提到的行为。&lt;/p&gt;
&lt;h2 id=&#34;博弈论下的动物行为&#34;&gt;&lt;a href=&#34;#博弈论下的动物行为&#34; class=&#34;headerlink&#34; title=&#34;博弈论下的动物行为&#34;&gt;&lt;/a&gt;博弈论下的动物行为&lt;/h2&gt;&lt;p&gt;动物间的搏斗是&lt;strong&gt;克制且按规则&lt;/strong&gt;进行的，因为不分青红皂白地杀死对手并无明显的好处，在一个庞大复杂的竞争系统中，除掉一个对手不见得就是好事，但是把特定对手杀死或者至少搏斗一番是个好主意。在行为双方都可以做选择时，博弈论的理论告诉我们，在大量样本的情况下，会有进化上的稳定策略（ESS）。而偏离ESS的行为将会受到自然选择的惩罚。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;（关于鹰和鸽子策略的探讨篇幅过长，建议网上查看，便于理解ESS）&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;进化中的稳定策略无处不在，且不止一种策略会留在最后的稳态中（稳定的多态性）。在行为双方能力不对称（这是常态）且行为双方有记忆时，开始个体的胜利或失败可能是完全偶然的，但是随着搏斗的进行，个体间会自动归类成等级，避免激烈的搏斗，从而产生了阶级。按照博弈论思路下的推导，一个种群内可能会从一个ESS跳到另一个ESS，伴随着环境不断进步。&lt;/p&gt;
&lt;p&gt;不过，面对和自己有着很多共同基因的近亲，这种讨论就失效了。基因 + 自然选择必然会留下特地照顾自身复制的基因。这方面讨论见下一章。&lt;/p&gt;
&lt;h2 id=&#34;亲代行为与计划生育&#34;&gt;&lt;a href=&#34;#亲代行为与计划生育&#34; class=&#34;headerlink&#34; title=&#34;亲代行为与计划生育&#34;&gt;&lt;/a&gt;亲代行为与计划生育&lt;/h2&gt;&lt;p&gt;经过自然选择的基因必然具有一个特质：最大程度的复制自身。基因有没有一些比较合情理的“识别”自身复制的方法呢？有，其中一个就是&lt;strong&gt;个体的近亲&lt;/strong&gt;。这显然是亲代对子代利他性行为普遍存在的原因。父母之爱是亲代之爱的一种特殊情况。亲代间基因的相似度显然是不同的，血缘关系越近，基因相似度越高，对应的 利他性行为也会越显著。很明显兄弟姐妹之爱不如父母之爱来得那么普遍（只从天生层面讲）。&lt;/p&gt;
&lt;p&gt;然而父母对子代的关心不会一直持续。因为父母对一个个体的关怀可以分为两个阶段：&lt;strong&gt;生育幼儿&lt;/strong&gt;，&lt;strong&gt;养育幼儿&lt;/strong&gt;。从基因“自私”的一面来讲，亲代理应最大限度生育后代。但是事实却不是这样，一大原因是野生动物生存困难，几乎永远不可能因衰老死亡，疾病、饥饿、捕食者种种隐私很容易导致野生个体死亡。而且可以观察到，野生生物通常会控制自己生育后代的数目，即“计划生育”，这是因为，计划生育在资源和生存条件恶劣的情况下，反而能最大限度增加子代的存活数。节制的剩余数目反而是当前环境的最优解。过度生育的个体会被自然选择惩罚。&lt;/p&gt;
&lt;h2 id=&#34;代际的竞争&#34;&gt;&lt;a href=&#34;#代际的竞争&#34; class=&#34;headerlink&#34; title=&#34;代际的竞争&#34;&gt;&lt;/a&gt;代际的竞争&lt;/h2&gt;&lt;p&gt;亲代对子代的投资往往是不均等的，同时对某个子代的投入，必然是以牺牲对其他子代投入为代价的。子代为了保证自己的存活，往往会竭尽所能甚至是欺骗。同时，亲代在自身随着衰老养育能力下降后，通常会有生殖能力逐渐消失的现象（尤其是雌性），因为此时对子女的投入不如对孙子孙女的投入平均回报大。雄性往往是逐渐衰退的，原因可能是，父亲对子女的投资额比不上母亲。幼儿的哺乳期不宜过长，到尚未出生的弟弟妹妹因为他继续吃奶蒙受的损失超过从他那里得来好处的数倍时，他就不应再吃下去了。广义的断奶由此出现。&lt;/p&gt;
&lt;p&gt;然而，子代为了自己利益的最大化，和亲代的目标必然有分歧，最终的结局是两方理想条件的某种妥协。我们不要指望子代个体本性里有利他主义的成分，&lt;strong&gt;道德准则和基因里的本性是两回事&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这里要再强调一下，从基因到个体的“自私”表现，都是经过自然选择的必然结果，不自私的基因和个体都在激烈的竞争中被淘汰了。&lt;/p&gt;
&lt;h2 id=&#34;两性&#34;&gt;&lt;a href=&#34;#两性&#34; class=&#34;headerlink&#34; title=&#34;两性&#34;&gt;&lt;/a&gt;两性&lt;/h2&gt;&lt;p&gt;生物大多有性别之分，尤其是有性生殖个体。在生殖上，可以说每个配偶的本性都应该会设法利用对方，迫使自己少投资，对方多投资。那两性是如何出现的呢？我们知道两种生殖细胞，一种细胞（卵细胞）较大，数量少，营养物质充足，不灵活；另外一种（精子）较小，数量巨大，身材瘦小，灵活。明显卵细胞一方投资较多，看起来是精子那一方占了便宜，为什么会这样呢？假设最开始两种生殖配子是差不多的性质，&lt;strong&gt;一旦这种配子间的分歧产生，性质偏向卵细胞的一方在诞生个体上就会更有优势，而偏向精子的一方在寻找对象上（量大，灵活）也会更有优势，而性质介于两者之间的生殖配子就会收到自然选择的惩罚&lt;/strong&gt;。从而这种差异就像脱缰的野马，一发不可收拾，到两者的形态到达再继续变化就要被惩罚的稳态，即现在这个模样。&lt;/p&gt;
&lt;p&gt;而精子代表的一方就成为了雄性，卵子一方成为了雌性。从上面的理论可以自然推测出，朝着尽量多诞生复制的目标下，雄性个体数目较之雌性个体会越来越少（因为雄性个体可以很轻易产生大量精子，对应到大范围的雌性）。但是现状很显然不是这样，男女比例是很接近的。原因是，生育一个儿子的基因较之生育女儿极有可能会复制自己出现在成为大量后代中。 在基因朝着多生育儿子的趋势前进时，自然地就平衡了之前男少女多的情况。&lt;strong&gt;生育相同数目的儿女的策略是进化上的稳定策略&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;对生育个体而言，他或她在其中投资的越少，所能生育的子女就越多。但是雌性&lt;strong&gt;由于卵细胞的存在&lt;/strong&gt;，个体往往从自己体内诞生，个体一旦死亡，自己比做父亲的要蒙受更大损失。顺便补充有趣的一点，在鱼类中情况是反过来的，有一种可能是，鱼类的交配过程是共同排出生殖细胞到水中完成交配，而不是在雌性个体内。这时情况就变了，谁先排出生殖细胞就更易把责任推给另一方（值得商榷），卵细胞相对较大，在水中不易散逸，精子则很容易散逸。所以雄鱼通常得等在雌性后面排出生殖细胞，而被迫承担养育责任。&lt;/p&gt;
&lt;p&gt;说回来，在交配完成后，双方都要冒着被对方抛弃的危险（雌性可以遗弃还未诞生的个体，所以雄性也有风险）。在这种博弈情况下，有一些常见策略，如“家庭幸福”和“大丈夫”。前者指在交配前，双方仔细观察对方忠诚和眷恋家庭生活的可能迹象，“订婚期”长对雄性个体也有利，因为他有上当受骗，抚养其他雄性个体所生子女的风险。在雄性有忠诚、薄情两种决策，雌性有忸怩、放荡两种决策下，较多忠诚和较多忸怩以及较少薄情和较少放荡会达到一种稳态。大丈夫策略下，则是根据雄性个体素质进行选择，保证子代更加健壮，从而更容易拥有交配权。素质判断的过程随着雄性偶尔的欺骗出现，会向着&lt;strong&gt;雄性某些表征愈发明显和雌性观察力愈发敏锐发展&lt;/strong&gt;。表征明显得有时甚至略显夸张，这一方面也是种“炫耀”，炫耀自己拥有一些&lt;strong&gt;累赘&lt;/strong&gt;也依然能活的很好。&lt;/p&gt;
&lt;p&gt;雌性因为卵子的自愿地位，不必像雄性个体那样，仅仅具有性吸引力就能保证自己的卵子有受精机会，所以在交配问题上更加挑剔（比如雌驴会避免和雄马交配，生育出没有生育能力的骡子），雄性则相反，需要具有更加吸引人（尤其是雌性）的种种性状。同时，凡是存在乱伦禁忌的地方，可以认为雌性会比雄性更严守此这种禁忌。&lt;/p&gt;
&lt;h2 id=&#34;共生和合作&#34;&gt;&lt;a href=&#34;#共生和合作&#34; class=&#34;headerlink&#34; title=&#34;共生和合作&#34;&gt;&lt;/a&gt;共生和合作&lt;/h2&gt;&lt;p&gt;生存机器间除了搏斗、亲代、有性参与的相互作用，还有共生和合作的存在。比如鸟群和鱼群的存在。有些群体个体会警告其余个体危险的存在等等。这些看似利他性行为实际都可以从有利自己生存的角度考虑。&lt;/p&gt;
&lt;p&gt;蚂蚁、蜜蜂、裸鼹鼠等物种的&lt;strong&gt;职虫不育性&lt;/strong&gt;是个很有趣的现象。它们的个体间营社会性生活。这其实是把生育和抚育策略结合在一起进化的结果。这个现象和雌虫的生殖特性密切相关。雌虫生育的个体都是&lt;strong&gt;单倍体&lt;/strong&gt;，兄弟姐妹间基因的相似度甚至高于自己生育的后代的相似度。相比自己繁殖养育，不如“耕耘”有生殖力的母体，趋势母体提高繁殖力，复制自己的基因。同时，往往这种生物生存的环境资源有限，外出繁育ROI较低。&lt;/p&gt;
&lt;p&gt;在共生现象中，双方都有骗子和傻瓜两种策略，但在斤斤计较策略存在的情况下，骗子策略会被渐渐战胜。有观点认为，人类细胞不过是共生微生物的结果，而我们本身也是不同基因共生的群体结果。&lt;/p&gt;
&lt;h2 id=&#34;推广到文化&#34;&gt;&lt;a href=&#34;#推广到文化&#34; class=&#34;headerlink&#34; title=&#34;推广到文化&#34;&gt;&lt;/a&gt;推广到文化&lt;/h2&gt;&lt;p&gt;正如《人类简史》里面所说，涉及到道德、规范、法律、文化的领域，就进入了人类的想象空间。复制因子的规律能否推广到“文化因子”（meme）中是个不错的尝试。不过meme本身是可以人为操纵，而不是“盲目的”。和基因不同，数学模型和概念在此很难有用武之地，试图对人类意识的探讨更易让类比有刻意引申之嫌。&lt;/p&gt;
&lt;h2 id=&#34;好人好报&#34;&gt;&lt;a href=&#34;#好人好报&#34; class=&#34;headerlink&#34; title=&#34;好人好报&#34;&gt;&lt;/a&gt;好人好报&lt;/h2&gt;&lt;p&gt;在个体合作时，基于合作和背叛两种基本元素，可以产生很多合作策略。当合作明确只能做一次时，双方会面临&lt;strong&gt;“囚徒困境”&lt;/strong&gt;，即个体的最优解不是整体的最优解。但是，&lt;strong&gt;合作明确会持续进行，且看不到终点时&lt;/strong&gt;（看不到终点很重要，因为有终点存在，整个信任就会从最后一次合作的倒推开始崩塌），这个“零和问题”变成了“&lt;strong&gt;非零和问题&lt;/strong&gt;”。这种情况下，拥有&lt;strong&gt;宽容&lt;/strong&gt;，&lt;strong&gt;善良&lt;/strong&gt;，&lt;strong&gt;不嫉妒&lt;/strong&gt;特质的合作策略会在各种策略中获胜，并最终达到稳态。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;描述过程见书第十二章，写的很有意思&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;总结来说，&lt;strong&gt;未知的&lt;/strong&gt;，&lt;strong&gt;长期的&lt;/strong&gt;，&lt;strong&gt;非零和&lt;/strong&gt;进化博弈下，好人会取得最终的胜利，并占据大多数。&lt;/p&gt;
&lt;h2 id=&#34;生命的必然和偶然&#34;&gt;&lt;a href=&#34;#生命的必然和偶然&#34; class=&#34;headerlink&#34; title=&#34;生命的必然和偶然&#34;&gt;&lt;/a&gt;生命的必然和偶然&lt;/h2&gt;&lt;p&gt;最后一章里，我们总结一下前面所有的结论，并试图给出更透彻、更明白的一些结论。首先，个体生物即载体以努力传播自己基因为任务，同时对基因有利对整个生命体也有利。基因所能影响的只有蛋白质合成，再操纵细胞乃至整个生存机器，并最终“从自身身体中逃逸出”，操作整个外部世界，如海狸的河坝。这里我们考虑一下“寄生”和“共生”的区别。通过一些例子来看，最终的区别是&lt;strong&gt;寄生个体将基因传递给后代的方式是否和宿主基因一样&lt;/strong&gt;。享有共同命运的寄生生物基因，最终会享有共同利益，停止寄生行为。比如绿色水螅和水藻的基因，以及甲虫和细菌的基因，寄生基因只能通过宿主的生殖细胞拥有未来。&lt;/p&gt;
&lt;p&gt;推广一下，&lt;strong&gt;我们自己的基因通力合作，不是因为它们共享同一个身体，而是它们共享同一条出路——精子和卵子&lt;/strong&gt;。如果能找到一条另外的出路，一些基因自然就会表现得不再合作。比如，人体内流感病毒的基因通过飞沫传递，狂犬病病毒之于狗也是这样。基因对于个体的控制比你想象得要厉害，给一个男人看女人身体的图片，便可以唤起其性冲动，甚至勃起，而这个过程中，他并没有被欺骗，认为图片是个真实的女人。虽然他知道是打印机打出的图片，他的神经系统依然有和面对真实女性一样的反应。我们的身体不过是“寄生”基因的集合体。自然选择偏向控制他人的基因，动物行为倾向于最大化此基因的生存。&lt;/p&gt;
&lt;p&gt;总结下，&lt;strong&gt;共生的基因共享离开当前基因载体的共同渠道&lt;/strong&gt;，个体如果想成为有效的基因载体，必须保证&lt;strong&gt;对所有其中的基因提供等概率的、通往未来的共同通道&lt;/strong&gt;。最后回答三个问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为什么基因汇聚在一起，形成细胞？&lt;/strong&gt;，单个基因操纵的化学反应通常不足以合成所需的最终产物，一种蛋白酶需要在其他基因存在的情况下才能生长繁荣。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为什么细胞会汇聚在一起，形成多细胞？&lt;/strong&gt;，一方面是体型的优势，另一方面是便于分工，让每一个部件处理特定任务时更有效率。&lt;/p&gt;
&lt;p&gt;最后一个，也是最有意思的问题。&lt;strong&gt;为什么生命体循环总有瓶颈般的受精卵阶段？&lt;/strong&gt;，不论大象、蚂蚁都是这样。原因是，从部分个体开始的繁殖只能获得很少一部分改变，彻底的改变，只能从“设计图纸”开始，&lt;strong&gt;保证每一个个体都拥有干净的起点&lt;/strong&gt;。瓶颈保证了生命循环继承的是图纸而不是成品。另外，这种瓶颈的存在，&lt;strong&gt;让生命循环定型，更有规律的重复&lt;/strong&gt;。&lt;strong&gt;基因这种精确的行为规划是胚胎得意进化形成复杂组织和器官的先决条件&lt;/strong&gt;，鹰的眼睛，燕子的翅膀，这些精确和复杂的器官不可能在没有时间规划下出现。最后，也是最关键一点，&lt;strong&gt;瓶颈的存在自然地带来的基因间的共同利益&lt;/strong&gt;，因为所有的基因都需要通过瓶颈传给下一代，别无选择。&lt;/p&gt;
&lt;p&gt;总结一下，生命循环成为“瓶颈状”，有生命的材料会渐渐聚在一起，形成独立而统一的生命体。生命材料越多，就有更多的载体细胞凝结努力，作用于特殊种类的细胞，使他们可以承载其共同的基因，通过瓶颈走向下一代。所有生命的基本单位和最初动力都是复制因子，没有任何复制过程是完美的，一些编译失去复制能力而灰飞烟灭。互惠的复制因子间可以帮助对方更好的生存，这些复制因子聚合一处形成了细胞，与而后形成的多细胞生命，由“瓶颈”生命循环进化而成的载体繁荣发展，逐渐变成愈加独立的载体。&lt;/p&gt;
</content>
        <category term="读书笔记" />
        <category term="人类" />
        <category term="生存" />
        <category term="基因" />
        <updated>2018-11-22T15:36:28.000Z</updated>
    </entry>
    <entry>
        <id>http://shenlvmeng.github.com/blog/2017/12/15/you-dont-know-js-part2/</id>
        <title>《You don&#39;t know JS》 下（类型文法&amp;异步&amp;ES6与未来）</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2017/12/15/you-dont-know-js-part2/"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;原作：&lt;a href=&#34;https://github.com/getify/You-Dont-Know-JS&#34;&gt;You-Dont-Know-JS&lt;/a&gt;&lt;br&gt;本文的99.9%的内容都来自《You dont know JS》的&lt;a href=&#34;https://github.com/getify/You-Dont-Know-JS/tree/1ed-zh-CN&#34;&gt;电子中文版&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;传送门：&lt;a href=&#34;https://shenlvmeng.github.io/blog/2017/12/13/you-dont-know-js-part1/&#34;&gt;《You don’t know JS》 上（入门&amp;amp;作用域&amp;amp;对象）&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;类型和文法&#34;&gt;&lt;a href=&#34;#类型和文法&#34; class=&#34;headerlink&#34; title=&#34;类型和文法&#34;&gt;&lt;/a&gt;类型和文法&lt;/h2&gt;&lt;h3 id=&#34;内建类型&#34;&gt;&lt;a href=&#34;#内建类型&#34; class=&#34;headerlink&#34; title=&#34;内建类型&#34;&gt;&lt;/a&gt;内建类型&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;7种类型&lt;/li&gt;
&lt;li&gt;值才有类型，变量没有&lt;/li&gt;
&lt;li&gt;&lt;code&gt;undefined&lt;/code&gt; ≠ is not defined（undeclared）。&lt;code&gt;undefined&lt;/code&gt;表示定义却没有赋值的变量类型。然而&lt;code&gt;typeof&lt;/code&gt;一个未声明的变量也会返回&lt;code&gt;undefined&lt;/code&gt;，这是&lt;code&gt;typeof&lt;/code&gt;的安全机制，它给了我们更多空间检查变量是否可用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;值&#34;&gt;&lt;a href=&#34;#值&#34; class=&#34;headerlink&#34; title=&#34;值&#34;&gt;&lt;/a&gt;值&lt;/h3&gt;&lt;p&gt;由于JS里String的只读性，所有String的相关方法都是返回一个新字符串。&lt;/p&gt;
&lt;p&gt;使用二进制浮点数的最出名（臭名昭著）的副作用是（记住，这是对 所有 使用 IEEE 754 的语言都成立的 —— 不是许多人认为&amp;#x2F;假装 仅 在 JavaScript 中存在的问题）：&lt;code&gt;0.1 + 0.2 === 0.3 // false&lt;/code&gt;。不过可以用&lt;code&gt;Number.EPSILON&lt;/code&gt;做最小误差得到足够精确的近似结果。ES6下已经可以用&lt;code&gt;Number.isInteger()&lt;/code&gt;和&lt;code&gt;Number.isSafeInteger()&lt;/code&gt;检查数字是不是整数&amp;#x2F;安全整数。&lt;/p&gt;
&lt;h4 id=&#34;特殊值&#34;&gt;&lt;a href=&#34;#特殊值&#34; class=&#34;headerlink&#34; title=&#34;特殊值&#34;&gt;&lt;/a&gt;特殊值&lt;/h4&gt;&lt;p&gt;&lt;code&gt;undefined&lt;/code&gt;和&lt;code&gt;null&lt;/code&gt;是JS里比较特殊的两类值，它们既是类型又是唯一的值。更加不幸的是，在非strict模式下，&lt;code&gt;undefined&lt;/code&gt;还可以作为标识符，像下面这样：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;literal&#34;&gt;undefined&lt;/span&gt; = &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;另外，在特别需要&lt;code&gt;undefined&lt;/code&gt;时，&lt;code&gt;void&lt;/code&gt;操作符会变得很有用。&lt;/p&gt;
&lt;p&gt;Infinity &amp;#x2F; Infinity &amp;#x3D;&amp;#x3D; undefined。&lt;/p&gt;
&lt;p&gt;针对一些特殊的等价情况（NaN和-0），ES6使用&lt;code&gt;Object.is()&lt;/code&gt;判断其相等性。&lt;/p&gt;
&lt;h4 id=&#34;值与引用&#34;&gt;&lt;a href=&#34;#值与引用&#34; class=&#34;headerlink&#34; title=&#34;值与引用&#34;&gt;&lt;/a&gt;值与引用&lt;/h4&gt;&lt;p&gt;在JS中没有指针，只有引用，同时页没有语法上的提示可以控制值和引用的赋值&amp;#x2F;传递。取而代之的是，值的类型用来唯一控制值是通过值拷贝，还是引用拷贝来赋予（复合值）。引用指向的是值本身而不是变量，不能使用一个引用来改变另一个引用所指向的值。&lt;/p&gt;
&lt;p&gt;底层的基本标量值是不可变的（String和Boolean也一样）。比如一个Number对象持有一个基本标量值2，那么这个Number对象就永远不能再持有另一个值；你只能用一个不同的值创建一个全新的Number对象：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;x&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x = x + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x; &lt;span class=&#34;comment&#34;&gt;// 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; a = &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; b = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Number&lt;/span&gt;( a ); &lt;span class=&#34;comment&#34;&gt;// 或等价的 `Object(a)`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;( b );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;( b ); &lt;span class=&#34;comment&#34;&gt;// 2, 不是 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在其中&lt;code&gt;x = x + 1&lt;/code&gt;这一步，包装值内的x被取出+1后，赋值给x，将其从一个引用变成一个基本标量值3。&lt;/p&gt;
&lt;h3 id=&#34;类型转换&#34;&gt;&lt;a href=&#34;#类型转换&#34; class=&#34;headerlink&#34; title=&#34;类型转换&#34;&gt;&lt;/a&gt;类型转换&lt;/h3&gt;&lt;p&gt;对于最简单的值，JSON字符串化行为基本上和&lt;code&gt;toString()&lt;/code&gt;转换是相同的，在对String字符串化时，结果也会包含&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;，如&lt;code&gt;JSON.stringify(&amp;quot;11&amp;quot;) // &amp;quot;&amp;quot;11&amp;quot;&amp;quot;&lt;/code&gt;。另外，对于JSON不安全值（即不能移植到消费JSON的语言中），有下面的处理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;忽略&lt;code&gt;undefined&lt;/code&gt;，&lt;code&gt;function&lt;/code&gt;，&lt;code&gt;symbol&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;Array&lt;/code&gt;中遇到这种类型的值，会被替换为null（避免修改位置信息）&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;Object&lt;/code&gt;的属性中遇到时，属性会被简单的忽略掉&lt;/li&gt;
&lt;li&gt;带有循环引用时，&lt;code&gt;JSON.stringify()&lt;/code&gt;会报错&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，对于有&lt;code&gt;toJSON()&lt;/code&gt;方法的对象，JSON字符串化会优先使用该方法。&lt;code&gt;JSON.stringify()&lt;/code&gt;的第二个参数可以指定Array或Function说明可以编辑的对象属性。第三个参数是填充符，填充在各级开头，用来友好展示结果，最多取入参的前10个字符。&lt;/p&gt;
&lt;p&gt;在对象上使用&lt;code&gt;toNumber&lt;/code&gt;和&lt;code&gt;toString&lt;/code&gt;方法，首先会找到其原始类型（&lt;code&gt;toPrimitives()&lt;/code&gt;），即使用其&lt;code&gt;valueOf()&lt;/code&gt;或&lt;code&gt;toString()&lt;/code&gt;方法（也会在&lt;code&gt;[[prototype]]&lt;/code&gt;上寻找）。&lt;/p&gt;
&lt;h4 id=&#34;gt-Number&#34;&gt;&lt;a href=&#34;#gt-Number&#34; class=&#34;headerlink&#34; title=&#34;-&amp;gt; Number&#34;&gt;&lt;/a&gt;-&amp;gt; Number&lt;/h4&gt;&lt;p&gt;可以用&lt;code&gt;Date.now()&lt;/code&gt;代替&lt;code&gt;+new Date()&lt;/code&gt;获取更好的语义。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;~&lt;/code&gt;除了可以用来检查&lt;code&gt;-1&lt;/code&gt;这个特殊的值，还可以通过&lt;code&gt;~~&lt;/code&gt;对小数取整，因为执行位操作时会先将数字转为Int32类型。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;parseInt&lt;/code&gt;以及&lt;code&gt;parseFloat&lt;/code&gt;和&lt;code&gt;+&lt;/code&gt;或&lt;code&gt;Number()&lt;/code&gt;强制类型转换存在区别。&lt;/strong&gt;它们的作用是，从字符串中解析出一个&lt;code&gt;number&lt;/code&gt;出来。两者是不能相互替换的。后者是不能&lt;em&gt;容忍&lt;/em&gt;非数字字符的。另外，**请在字符串上使用&lt;code&gt;parseInt&lt;/code&gt;和&lt;code&gt;parseFloat&lt;/code&gt;**，这也是它们的设计目的。对非字符串类型使用它们可能得到意外的结果：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;parseInt&lt;/span&gt;( &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;/&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;19&lt;/span&gt; ); &lt;span class=&#34;comment&#34;&gt;// 18，惊不惊喜，意不意外&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;原因是，parseInt会把第一个参数&lt;code&gt;toString&lt;/code&gt;（这不能责怪它，因为它本来就是设计对String使用的）。类似的例子还能举出很多：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;parseInt&lt;/span&gt;( &lt;span class=&#34;number&#34;&gt;0.000008&lt;/span&gt; );       &lt;span class=&#34;comment&#34;&gt;// 0   (&amp;quot;0&amp;quot; from &amp;quot;0.000008&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;parseInt&lt;/span&gt;( &lt;span class=&#34;number&#34;&gt;0.0000008&lt;/span&gt; );      &lt;span class=&#34;comment&#34;&gt;// 8   (&amp;quot;8&amp;quot; from &amp;quot;8e-7&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;parseInt&lt;/span&gt;( &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt; );      &lt;span class=&#34;comment&#34;&gt;// 250 (&amp;quot;fa&amp;quot; from &amp;quot;false&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;parseInt&lt;/span&gt;( &lt;span class=&#34;built_in&#34;&gt;parseInt&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt; );   &lt;span class=&#34;comment&#34;&gt;// 15  (&amp;quot;f&amp;quot; from &amp;quot;function..&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;parseInt&lt;/span&gt;( &lt;span class=&#34;string&#34;&gt;&amp;quot;0x10&amp;quot;&lt;/span&gt; );         &lt;span class=&#34;comment&#34;&gt;// 16&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;parseInt&lt;/span&gt;( &lt;span class=&#34;string&#34;&gt;&amp;quot;103&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; );       &lt;span class=&#34;comment&#34;&gt;// 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;另外，&lt;code&gt;parseInt&lt;/code&gt;会通过前缀试图猜测数字进制，默认是10进制。以&lt;code&gt;0x&lt;/code&gt;开头表示16进制，以&lt;code&gt;0b&lt;/code&gt;开头表示2进制，以&lt;code&gt;0o&lt;/code&gt;开头表示8进制。&lt;/p&gt;
&lt;h4 id=&#34;gt-Boolean&#34;&gt;&lt;a href=&#34;#gt-Boolean&#34; class=&#34;headerlink&#34; title=&#34;-&amp;gt; Boolean&#34;&gt;&lt;/a&gt;-&amp;gt; Boolean&lt;/h4&gt;&lt;p&gt;使用&lt;code&gt;!!&lt;/code&gt;强制转换类型。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;与&lt;code&gt;||&lt;/code&gt;在JS中的逻辑和C++以及Java中的不大一样，它并不一定返回boolean类型的值，而是根据比较的两个数判断返回哪一个。其中&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;可以用来进行短路操作。&lt;/p&gt;
&lt;p&gt;另外，对于Symbol来说，只能通过&lt;code&gt;String()&lt;/code&gt;的形式转为String类型，却不能转为Boolean类型。&lt;/p&gt;
&lt;h4 id=&#34;等价&#34;&gt;&lt;a href=&#34;#等价&#34; class=&#34;headerlink&#34; title=&#34;等价&#34;&gt;&lt;/a&gt;等价&lt;/h4&gt;&lt;p&gt;等价分为&lt;code&gt;==&lt;/code&gt;和&lt;code&gt;===&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;String&lt;/code&gt;和&lt;code&gt;Number&lt;/code&gt;进行比较时，会对&lt;code&gt;String&lt;/code&gt;使用强制类型转换（类似&lt;code&gt;+&lt;/code&gt;和&lt;code&gt;Number()&lt;/code&gt;）；&lt;/p&gt;
&lt;p&gt;在和&lt;code&gt;Boolean&lt;/code&gt;比较时，&lt;strong&gt;会首先把Boolean类型转为Number类型，再进行比较&lt;/strong&gt;。这会产生下面这样比较迷惑的情况：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;42&amp;quot;&lt;/span&gt; == &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;  &lt;span class=&#34;comment&#34;&gt;// false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;42&amp;quot;&lt;/span&gt; == &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;// false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在&lt;code&gt;Object&lt;/code&gt;和非&lt;code&gt;Object&lt;/code&gt;比较时，会先对&lt;code&gt;Object&lt;/code&gt;进行&lt;code&gt;toPrimtives&lt;/code&gt;，即先使用&lt;code&gt;valueOf()&lt;/code&gt;看能否转成基本类型，再使用&lt;code&gt;toString()&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;下面有一些疯狂的例子，但却可以由上面的规则解释：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; == &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;    &lt;span class=&#34;comment&#34;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt; == []     &lt;span class=&#34;comment&#34;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; == []         &lt;span class=&#34;comment&#34;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[] == ![];      &lt;span class=&#34;comment&#34;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; == [&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;];       &lt;span class=&#34;comment&#34;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; == []        &lt;span class=&#34;comment&#34;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; == [&lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;];   &lt;span class=&#34;comment&#34;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; == &lt;span class=&#34;string&#34;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;       &lt;span class=&#34;comment&#34;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;通过上面的坑可以看到，等号的两边总有&lt;code&gt;[]&lt;/code&gt;或&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;或&lt;code&gt;false&lt;/code&gt;或&lt;code&gt;0&lt;/code&gt;。建议在这些情况使用&lt;code&gt;===&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;下面是由Alex Dorey(@dorey on GitHub)制作的一个方便的表格，将各种比较进行了可视化：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/getify/You-Dont-Know-JS/raw/1ed-zh-CN/types%20%26%20grammar/fig1.png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;大小关系比较&#34;&gt;&lt;a href=&#34;#大小关系比较&#34; class=&#34;headerlink&#34; title=&#34;大小关系比较&#34;&gt;&lt;/a&gt;大小关系比较&lt;/h4&gt;&lt;p&gt;首先对值进行&lt;code&gt;toPrimitives&lt;/code&gt;转换，如果有一个不是String，则使用&lt;code&gt;Number&lt;/code&gt;类型比较。见下面的例子：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// toNumber&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; a = [ &lt;span class=&#34;number&#34;&gt;42&lt;/span&gt; ];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; b = [ &lt;span class=&#34;string&#34;&gt;&amp;quot;43&amp;quot;&lt;/span&gt; ];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a &amp;lt; b;  &lt;span class=&#34;comment&#34;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// toString&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; a = &amp;#123; &lt;span class=&#34;attr&#34;&gt;b&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;42&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; b = &amp;#123; &lt;span class=&#34;attr&#34;&gt;b&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;43&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a &amp;lt; b;  &lt;span class=&#34;comment&#34;&gt;// false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a == b; &lt;span class=&#34;comment&#34;&gt;// false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a &amp;gt; b;  &lt;span class=&#34;comment&#34;&gt;// false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a &amp;lt;= b; &lt;span class=&#34;comment&#34;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a &amp;gt;= b; &lt;span class=&#34;comment&#34;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在下面的例子里，a和b在比较时，都会转成”[object Object]”。而等价比较上会比较引用是否相同。因此都返回false，而JS中的&lt;code&gt;&amp;lt;=&lt;/code&gt;和&lt;code&gt;&amp;gt;=&lt;/code&gt;操作会去对应计算&lt;code&gt;&amp;gt;&lt;/code&gt;和&lt;code&gt;&amp;lt;&lt;/code&gt;的结果再取反，从而会得到两个&lt;code&gt;true&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;语法&#34;&gt;&lt;a href=&#34;#语法&#34; class=&#34;headerlink&#34; title=&#34;语法&#34;&gt;&lt;/a&gt;语法&lt;/h3&gt;&lt;h4 id=&#34;语句和表达式&#34;&gt;&lt;a href=&#34;#语句和表达式&#34; class=&#34;headerlink&#34; title=&#34;语句和表达式&#34;&gt;&lt;/a&gt;语句和表达式&lt;/h4&gt;&lt;p&gt;JS中的表达式都有一个隐式的返回值，但是它只会打印在控制台中，并不会真实返回。块语句的返回值是块中最后一个语句的返回值。ES7中可能会引入do语句显式地使用这个返回值。&lt;/p&gt;
&lt;p&gt;JS中的&lt;code&gt;++&lt;/code&gt;和C风格类似，表示自增，有前后之分。但是&lt;code&gt;++a++&lt;/code&gt;这种用法是不合法的。&lt;/p&gt;
&lt;p&gt;赋值表达式的返回是赋予的值，这在链式赋值时很好用：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; a, b, c;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a = b = c = &lt;span class=&#34;number&#34;&gt;42&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这里，&lt;code&gt;c = 42&lt;/code&gt;被求值得出42（带有将42赋值给c的副作用），然后&lt;code&gt;b = 42&lt;/code&gt;被求值得出42（带有将42赋值给b的副作用），而最后&lt;code&gt;a = 42&lt;/code&gt;被求值（带有将42赋值给a的副作用）。&lt;/p&gt;
&lt;p&gt;另一种用法是直接将之放在&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;和&lt;code&gt;||&lt;/code&gt;的前后，检查赋值语句的真值。&lt;/p&gt;
&lt;h4 id=&#34;上下文&#34;&gt;&lt;a href=&#34;#上下文&#34; class=&#34;headerlink&#34; title=&#34;上下文&#34;&gt;&lt;/a&gt;上下文&lt;/h4&gt;&lt;p&gt;&lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;包裹的内容作为表达式结果可以直接赋值给变量，但是直接声明时会被当做代码块，但是可能仍然是合法的，如：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;foo&lt;/span&gt;: &lt;span class=&#34;title function_&#34;&gt;bar&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因为，JS中允许使用语句标签，便于&lt;code&gt;break&lt;/code&gt;和&lt;code&gt;continue&lt;/code&gt;跳转（JS中没有&lt;code&gt;goto&lt;/code&gt;）。而JSON中带有&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;的键则不会被这么解释，因为语句标签不允许出现引号。&lt;/p&gt;
&lt;p&gt;我们现在来解决下面的问题：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[] + &amp;#123;&amp;#125;; &lt;span class=&#34;comment&#34;&gt;// &amp;quot;[object Object]&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&amp;#125; + []; &lt;span class=&#34;comment&#34;&gt;// 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;为什么交换顺序会对&lt;code&gt;+&lt;/code&gt;的规则有影响？在第一个式子里一切都是正常的，&lt;code&gt;[]&lt;/code&gt;转换成&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;，&lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;转换成&lt;code&gt;[object Object]&lt;/code&gt;；在第二个式子里，&lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;被理解成一个空代码块儿，&lt;code&gt;[]&lt;/code&gt;被强制转换为0。&lt;/p&gt;
&lt;h4 id=&#34;操作符优先级&#34;&gt;&lt;a href=&#34;#操作符优先级&#34; class=&#34;headerlink&#34; title=&#34;操作符优先级&#34;&gt;&lt;/a&gt;操作符优先级&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;优先于&lt;code&gt;||&lt;/code&gt;。&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence&#34;&gt;这里&lt;/a&gt;有完整的表格。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;和&lt;code&gt;||&lt;/code&gt;有短接的特点，即当第一个表达式为true或false时直接返回结果。&lt;/li&gt;
&lt;li&gt;赋值表达式和三元表达式&lt;code&gt;? : &lt;/code&gt;一样是从右向左结合的&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;ASI（自动分号）&#34;&gt;&lt;a href=&#34;#ASI（自动分号）&#34; class=&#34;headerlink&#34; title=&#34;ASI（自动分号）&#34;&gt;&lt;/a&gt;ASI（自动分号）&lt;/h4&gt;&lt;p&gt;尽量避免ASI，只在确认没有歧义的地方依赖ASI。&lt;/p&gt;
&lt;h4 id=&#34;错误&#34;&gt;&lt;a href=&#34;#错误&#34; class=&#34;headerlink&#34; title=&#34;错误&#34;&gt;&lt;/a&gt;错误&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;JS有早期错误一说，即运行前编译期间的错误&lt;/li&gt;
&lt;li&gt;&lt;code&gt;let&lt;/code&gt;会造成块域内的TDZ（Temporal Dead Zone，时间死区），&lt;code&gt;typeof&lt;/code&gt;在此时会报错，而不会返回&lt;code&gt;undefined&lt;/code&gt;。TDZ是指变量还没到能使用它的时候，还需要初始化。下面还有一个例子：&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; b = &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt; a = &lt;span class=&#34;number&#34;&gt;42&lt;/span&gt;, b = a + b + &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt; &lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ..&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;ES6提供了剩余参数来代替原有的&lt;code&gt;arguments&lt;/code&gt;对象，这更加安全。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;finally&lt;/code&gt;子句&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;try catch&lt;/code&gt;在和&lt;code&gt;finally&lt;/code&gt;一起使用时，&lt;code&gt;finally&lt;/code&gt;的语句一定会被执行，而且一定会在&lt;code&gt;try&lt;/code&gt;语句执行完后立即执行，即使&lt;code&gt;try&lt;/code&gt;中有&lt;code&gt;return&lt;/code&gt;或者&lt;code&gt;throw&lt;/code&gt;、&lt;code&gt;continue&lt;/code&gt;等控制语句。可以在&lt;code&gt;finally&lt;/code&gt;中修改&lt;code&gt;try&lt;/code&gt;中的结果，但是最后不要这么做，因为会影响程序可读性。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;42&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;finally&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;( &lt;span class=&#34;string&#34;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;( &lt;span class=&#34;string&#34;&gt;&amp;quot;never runs&amp;quot;&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;( &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;() );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Hello&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Uncaught Exception: 42&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;宿主环境&#34;&gt;&lt;a href=&#34;#宿主环境&#34; class=&#34;headerlink&#34; title=&#34;宿主环境&#34;&gt;&lt;/a&gt;宿主环境&lt;/h4&gt;&lt;p&gt;由于浏览器的遗留行为，使用id属性创建DOM元素会创建同名的全局变量。&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;typeof&lt;/span&gt; foo == &lt;span class=&#34;string&#34;&gt;&amp;quot;undefined&amp;quot;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    foo = &lt;span class=&#34;number&#34;&gt;42&lt;/span&gt;;       &lt;span class=&#34;comment&#34;&gt;// 永远不会运行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;( foo ); &lt;span class=&#34;comment&#34;&gt;// HTML元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;永远不要修改内建类型。&lt;/li&gt;
&lt;li&gt;JS的函数和变量声明提升只在同一&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签内&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;保留字&#34;&gt;&lt;a href=&#34;#保留字&#34; class=&#34;headerlink&#34; title=&#34;保留字&#34;&gt;&lt;/a&gt;保留字&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;Let this long package float, Goto private class if short. While protected with debugger case, Continue volatile interface. Instanceof super synchronized throw, Extends final export throws.&lt;/p&gt;
&lt;p&gt;Try import double enum?&lt;/p&gt;
&lt;p&gt;False, boolean, abstract function, Implements typeof transient break! Void static, default do, Switch int native new. Else, delete null public var In return for const, true, char …Finally catch byte.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;来自StackOverflow用户“art4theSould”创造性的一首&lt;a href=&#34;http://stackoverflow.com/questions/26255/reserved-keywords-in-javascript/12114140#12114140&#34;&gt;小诗&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;另外，在ES6+中，可以使用保留字作为对象字面量中的属性名或键。&lt;/p&gt;
&lt;h2 id=&#34;异步与性能&#34;&gt;&lt;a href=&#34;#异步与性能&#34; class=&#34;headerlink&#34; title=&#34;异步与性能&#34;&gt;&lt;/a&gt;异步与性能&lt;/h2&gt;&lt;p&gt;JS引擎对时间没有天生的感觉，只是一个任意JS代码段的按需执行环境。是周围的宿主环境在不停地安排“事件”（JS代码的执行）。举例来说，当你的JS程序发起一个从服务器取得数据的Ajax请求时，你在一个函数（通常称为回调）中建立好“应答”代码，然后JS引擎就会告诉宿主环境，“嘿，我就要暂时停止执行了，但不管你什么时候完成了这个网络请求，而且你还得到一些数据的话，请&lt;em&gt;回来调&lt;/em&gt;这个函数。”&lt;/p&gt;
&lt;p&gt;然后浏览器就会为网络的应答设置一个监听器，当它有东西要交给你的时候，它会通过将回调函数插入&lt;strong&gt;事件轮询&lt;/strong&gt;来安排它的执行。&lt;/p&gt;
&lt;p&gt;关于事件轮询队列，&lt;a href=&#34;https://shenlvmeng.github.io/blog/2017/02/27/event-loop/&#34;&gt;之前&lt;/a&gt;也有过一些介绍。&lt;/p&gt;
&lt;h3 id=&#34;异步概览&#34;&gt;&lt;a href=&#34;#异步概览&#34; class=&#34;headerlink&#34; title=&#34;异步概览&#34;&gt;&lt;/a&gt;异步概览&lt;/h3&gt;&lt;p&gt;异步≠并行。异步本质上还是串行的。工作依然有先后之分，没有线程、线程池的概念。从而，在JS中的函数都是原子的，即不会与别的函数的代码&lt;strong&gt;相互穿插&lt;/strong&gt;（除非使用&lt;code&gt;Generator&lt;/code&gt;）。&lt;/p&gt;
&lt;h4 id=&#34;并发&#34;&gt;&lt;a href=&#34;#并发&#34; class=&#34;headerlink&#34; title=&#34;并发&#34;&gt;&lt;/a&gt;并发&lt;/h4&gt;&lt;p&gt;并发是当两个或多个“进程”（或任务）在同一时间段内同时执行，而不管构成它们的每个操作是不是同时进行的。在JS中，单线程事件轮询是并发的一种表达。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不互动&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当程序中运行多个“进程”（或任务），如果它们之间没有逻辑联系，那么不互动是完全可以接受的。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; res = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;results&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    res.&lt;span class=&#34;property&#34;&gt;foo&lt;/span&gt; = results;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;bar&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;results&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    res.&lt;span class=&#34;property&#34;&gt;bar&lt;/span&gt; = results;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// ajax(..) 是某个包中任意的Ajax函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;ajax&lt;/span&gt;( &lt;span class=&#34;string&#34;&gt;&amp;quot;http://some.url.1&amp;quot;&lt;/span&gt;, foo );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;ajax&lt;/span&gt;( &lt;span class=&#34;string&#34;&gt;&amp;quot;http://some.url.2&amp;quot;&lt;/span&gt;, bar );&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;互动&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;相反，如果它们之间有依赖关系，或者前后次序而产生互动时，&lt;code&gt;let it alone&lt;/code&gt;就会出事。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; res = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;response&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;data&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    res.&lt;span class=&#34;title function_&#34;&gt;push&lt;/span&gt;( data );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// ajax(..) 是某个包中任意的Ajax函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;ajax&lt;/span&gt;( &lt;span class=&#34;string&#34;&gt;&amp;quot;http://some.url.1&amp;quot;&lt;/span&gt;, response );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;ajax&lt;/span&gt;( &lt;span class=&#34;string&#34;&gt;&amp;quot;http://some.url.2&amp;quot;&lt;/span&gt;, response );&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;协调&#34;&gt;&lt;a href=&#34;#协调&#34; class=&#34;headerlink&#34; title=&#34;协调&#34;&gt;&lt;/a&gt;协调&lt;/h4&gt;&lt;p&gt;跳过使用全局变量等丑陋的协作手段，有一种方法，将长时间处理的任务打断成多个小段的请求外加setTimeout，以便将任务穿插完成。&lt;/p&gt;
&lt;h4 id=&#34;Jobs&#34;&gt;&lt;a href=&#34;#Jobs&#34; class=&#34;headerlink&#34; title=&#34;Jobs&#34;&gt;&lt;/a&gt;Jobs&lt;/h4&gt;&lt;p&gt;ES6在事件轮询队列之上引入了一层新概念，称为“工作队列（Job queue）”。它和轮询队列的关系类似于Macrotask和Microtask。&lt;/p&gt;
&lt;h3 id=&#34;回调&#34;&gt;&lt;a href=&#34;#回调&#34; class=&#34;headerlink&#34; title=&#34;回调&#34;&gt;&lt;/a&gt;回调&lt;/h3&gt;&lt;h4 id=&#34;顺序的大脑&#34;&gt;&lt;a href=&#34;#顺序的大脑&#34; class=&#34;headerlink&#34; title=&#34;顺序的大脑&#34;&gt;&lt;/a&gt;顺序的大脑&lt;/h4&gt;&lt;p&gt;回调不符合正常思维逻辑顺序 &amp;amp; 回调地狱。&lt;/p&gt;
&lt;h4 id=&#34;信任问题&#34;&gt;&lt;a href=&#34;#信任问题&#34; class=&#34;headerlink&#34; title=&#34;信任问题&#34;&gt;&lt;/a&gt;信任问题&lt;/h4&gt;&lt;p&gt;&lt;em&gt;（本人并不完全赞同）&lt;/em&gt;回调遭受着&lt;em&gt;控制反转&lt;/em&gt;的蹂躏，它们隐含地将控制权交给第三方（通常第三方工具不受你控制！）来调用你程序的延续。&lt;/p&gt;
&lt;h3 id=&#34;Promise&#34;&gt;&lt;a href=&#34;#Promise&#34; class=&#34;headerlink&#34; title=&#34;Promise&#34;&gt;&lt;/a&gt;Promise&lt;/h3&gt;&lt;p&gt;Promise的&lt;code&gt;then&lt;/code&gt;和&lt;code&gt;catch&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;可靠的Promise&#34;&gt;&lt;a href=&#34;#可靠的Promise&#34; class=&#34;headerlink&#34; title=&#34;可靠的Promise&#34;&gt;&lt;/a&gt;可靠的Promise&lt;/h4&gt;&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; p3 = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Promise&lt;/span&gt;( &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;resolve,reject&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;resolve&lt;/span&gt;( &lt;span class=&#34;string&#34;&gt;&amp;quot;B&amp;quot;&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; p1 = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Promise&lt;/span&gt;( &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;resolve,reject&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;resolve&lt;/span&gt;( p3 );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; p2 = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Promise&lt;/span&gt;( &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;resolve,reject&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;resolve&lt;/span&gt;( &lt;span class=&#34;string&#34;&gt;&amp;quot;A&amp;quot;&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;p1.&lt;span class=&#34;title function_&#34;&gt;then&lt;/span&gt;( &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;v&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;( v );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;p2.&lt;span class=&#34;title function_&#34;&gt;then&lt;/span&gt;( &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;v&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;( v );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// A B  &amp;lt;-- 不是你可能期望的 B A&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这是因为p1由p3解析的结果所解析，这个过程是异步地。&lt;/p&gt;
&lt;p&gt;作者认为Promise在很大程度上，解决了下面的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调的太早&amp;#x2F;太晚（本人并不赞同）&lt;/li&gt;
&lt;li&gt;根本不调回调（勉强成立），Promise通知状态改变是由编程者自己代码控制的，用&lt;code&gt;resolve&lt;/code&gt;或&lt;code&gt;reject&lt;/code&gt;（用户只能借助外部环境API发起异步操作，resolve一样要么放在传统的回调，要么转交给第三方完成）。&lt;/li&gt;
&lt;li&gt;调太少或太多次（成立），一个Promise一旦resolve或者reject，状态就不再发生变化&lt;/li&gt;
&lt;li&gt;没能传入任何参数&amp;#x2F;环境（勉强成立），原因与第二条相同&lt;/li&gt;
&lt;li&gt;吞掉所有错误和异常（勉强成立），Promise中在catch字句里捕获异常。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Promise.resolve(p)&lt;/code&gt;会把thenable的入参&lt;code&gt;p&lt;/code&gt;转换为合法的Promise。这里猜测下这个&lt;code&gt;resolve(p)&lt;/code&gt;的实现（个人猜想）：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Promise&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;resolve&lt;/span&gt; = &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;thenable&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// if `thenable` is a promise, just return it&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// if `thenable` is plain, just resolve&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;typeof&lt;/span&gt; thenable.&lt;span class=&#34;property&#34;&gt;then&lt;/span&gt; != &lt;span class=&#34;string&#34;&gt;&amp;#x27;function&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Promise&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;resolve&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;resolve&lt;/span&gt;(thenable);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Promise&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;resolve, reject&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        thenable.&lt;span class=&#34;title function_&#34;&gt;then&lt;/span&gt;(resolve, reject);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 一个thenable的例子&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; p = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;then&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;cb, err&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title class_&#34;&gt;Math&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;random&lt;/span&gt; &amp;lt; &lt;span class=&#34;number&#34;&gt;0.5&lt;/span&gt; ? &lt;span class=&#34;title function_&#34;&gt;cb&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;42&lt;/span&gt;) : &lt;span class=&#34;title function_&#34;&gt;err&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;oops! Something bad happens.&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;链式调用&#34;&gt;&lt;a href=&#34;#链式调用&#34; class=&#34;headerlink&#34; title=&#34;链式调用&#34;&gt;&lt;/a&gt;链式调用&lt;/h4&gt;&lt;p&gt;看看RxJS的&lt;a href=&#34;http://reactivex.io/rxjs/manual/overview.html&#34;&gt;Introduction&lt;/a&gt;。就可以很轻松地理解Promise的流程和链式过程了。&lt;/p&gt;
&lt;h4 id=&#34;Promise模式&#34;&gt;&lt;a href=&#34;#Promise模式&#34; class=&#34;headerlink&#34; title=&#34;Promise模式&#34;&gt;&lt;/a&gt;Promise模式&lt;/h4&gt;&lt;p&gt;&lt;code&gt;Promise.all()&lt;/code&gt;和&lt;code&gt;Promise.race()&lt;/code&gt;。除了这两个官方钦定的方法外，其他的Promise库还实现了像是&lt;code&gt;any()&lt;/code&gt;，&lt;code&gt;none()&lt;/code&gt;，&lt;code&gt;first()&lt;/code&gt;，&lt;code&gt;last()&lt;/code&gt;这样的方法，看看RxJS的&lt;a href=&#34;http://reactivex.io/rxjs/manual/overview.html#categories-of-operators&#34;&gt;operators&lt;/a&gt;会有更多选择。&lt;/p&gt;
&lt;h4 id=&#34;Promise的限制&#34;&gt;&lt;a href=&#34;#Promise的限制&#34; class=&#34;headerlink&#34; title=&#34;Promise的限制&#34;&gt;&lt;/a&gt;Promise的限制&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;顺序的错误处理&lt;/li&gt;
&lt;li&gt;只能传单一的值（其实就是状态改变不可逆）&lt;/li&gt;
&lt;li&gt;单次解析（同上），文章也在&lt;a href=&#34;https://github.com/getify/You-Dont-Know-JS/blob/1ed-zh-CN/async%20%26%20performance/ch3.md#%E6%83%B0%E6%80%A7&#34;&gt;惰性&lt;/a&gt;的上方提到了观察者模式的RxJS，的确在设计时间概念的领域，RxJS要厉害多了&lt;/li&gt;
&lt;li&gt;惰性（生产生产Promise函数的工厂函数）&lt;/li&gt;
&lt;li&gt;不可反悔（即不能中途撤销）&lt;/li&gt;
&lt;li&gt;性能&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Generator&#34;&gt;&lt;a href=&#34;#Generator&#34; class=&#34;headerlink&#34; title=&#34;Generator&#34;&gt;&lt;/a&gt;Generator&lt;/h3&gt;&lt;p&gt;使用同步风格书写异步代码的基础在Generator。关于这部分的更详细介绍见本人之前参考阮一峰大神写的&lt;a href=&#34;https://shenlvmeng.github.io/blog/2017/03/29/javascript-async-programming-2/&#34;&gt;博文&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;打破运行至完成&#34;&gt;&lt;a href=&#34;#打破运行至完成&#34; class=&#34;headerlink&#34; title=&#34;打破运行至完成&#34;&gt;&lt;/a&gt;打破运行至完成&lt;/h4&gt;&lt;p&gt;generator（生成器）是一个可以和别的代码穿插执行的非原子的特殊函数。使用&lt;code&gt;new&lt;/code&gt;构造generator得到的只是一个迭代器，迭代器在执行到&lt;code&gt;yield&lt;/code&gt;时会让出执行权。真正执行这个迭代器需要用调用或者执行器的方式。&lt;/p&gt;
&lt;p&gt;yield和next是generator可以和外部甚至是其他generator双向通信。但是generator只是声明了自己将要以什么样的形式去执行。还需要一个下面这样的帮助函数去推动它执行：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;step&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;gen&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; it = &lt;span class=&#34;title function_&#34;&gt;gen&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; last;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 不论`yield`出什么，只管在下一次时直接把它塞回去！&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        last = it.&lt;span class=&#34;title function_&#34;&gt;next&lt;/span&gt;( last ).&lt;span class=&#34;property&#34;&gt;value&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;生成器&#34;&gt;&lt;a href=&#34;#生成器&#34; class=&#34;headerlink&#34; title=&#34;生成器&#34;&gt;&lt;/a&gt;生成器&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;可以把generator像状态机一样使用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for of&lt;/code&gt;需要迭代器的实现&lt;/li&gt;
&lt;li&gt;可以在generator上使用&lt;code&gt;for of&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;return&lt;/code&gt;而非&lt;code&gt;next&lt;/code&gt;可以终止生成器执行&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;在异步流程中使用generator&#34;&gt;&lt;a href=&#34;#在异步流程中使用generator&#34; class=&#34;headerlink&#34; title=&#34;在异步流程中使用generator&#34;&gt;&lt;/a&gt;在异步流程中使用generator&lt;/h4&gt;&lt;p&gt;generator的yield暂停特性不仅意味着我们可以从异步的函数调用那里得到&lt;em&gt;看起来&lt;/em&gt;同步的return值。&lt;/p&gt;
&lt;h4 id=&#34;带有promise的generator&#34;&gt;&lt;a href=&#34;#带有promise的generator&#34; class=&#34;headerlink&#34; title=&#34;带有promise的generator&#34;&gt;&lt;/a&gt;带有promise的generator&lt;/h4&gt;&lt;p&gt;在ES6的世界中最棒的就是将generator（看似同步的异步代码）与Promise（可靠性和可组合性）组合起来。&lt;/p&gt;
&lt;p&gt;co与koa。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ES7中的await和async&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;像下面这样，没有&lt;code&gt;run&lt;/code&gt;函数，没有生成器函数的&lt;code&gt;*&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;x,y&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;request&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;http://some.url.1/?x=&amp;quot;&lt;/span&gt; + x + &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;amp;y=&amp;quot;&lt;/span&gt; + y&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; text = &lt;span class=&#34;keyword&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;( &lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;31&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;( text );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (err) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;error&lt;/span&gt;( err );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;yield委托&#34;&gt;&lt;a href=&#34;#yield委托&#34; class=&#34;headerlink&#34; title=&#34;yield委托&#34;&gt;&lt;/a&gt;yield委托&lt;/h4&gt;&lt;p&gt;使用&lt;code&gt;yield * foo&lt;/code&gt;可以把其他的生成器函数整合进当前生成器中。除了生成器外，还可以委托一个非generator的iterator。错误可以委托，promise可以委托，委托还可以递归。&lt;/p&gt;
&lt;p&gt;结合yield可以很方便地协调多个generator&lt;/p&gt;
&lt;h4 id=&#34;thunk&#34;&gt;&lt;a href=&#34;#thunk&#34; class=&#34;headerlink&#34; title=&#34;thunk&#34;&gt;&lt;/a&gt;thunk&lt;/h4&gt;&lt;p&gt;同步的thunk即包装了所有预设形参的函数执行的函数。异步thunk指需要指定callback的包装所有其他预设形参异步函数的函数。像下面这样：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 同步thunk&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;x,y&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; x + y;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;fooThunk&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;( &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 异步thunk&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;x,y,cb&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;setTimeout&lt;/span&gt;( &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;cb&lt;/span&gt;( x + y );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;, &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;fooThunk&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;cb&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;( &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, cb );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;一旦来说会有一个工具thunkify帮你完成制造函数thunk的工作（放心，总会有人这么做的）。它的用法是下面这样的：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; fooThunkory = &lt;span class=&#34;title function_&#34;&gt;thunkify&lt;/span&gt;( foo );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; fooThunk1 = &lt;span class=&#34;title function_&#34;&gt;fooThunkory&lt;/span&gt;( &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; fooThunk2 = &lt;span class=&#34;title function_&#34;&gt;fooThunkory&lt;/span&gt;( &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 稍后&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;fooThunk1&lt;/span&gt;( &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;sum&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;( sum );     &lt;span class=&#34;comment&#34;&gt;// 7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;fooThunk2&lt;/span&gt;( &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;sum&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;( sum );     &lt;span class=&#34;comment&#34;&gt;// 11&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; );&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;包装函数生产一个thunkory，之后指定除cb以外的其他参数得到thunk函数。&lt;/p&gt;
&lt;p&gt;thunk和Promise本质上其实是等价的。只不过是回调所在的为之不一样罢了。所以使用Promise.wrap包装得到的promise还是thunkify包装得到的thunk函数其实都可以yield出来。因为，它们都能通过指定回调来让generator进一步推动下去。&lt;/p&gt;
&lt;p&gt;当然了无论是在可组合性还是错误处理上，Promise都有更胜一筹。所以，thunk通常作为替代性的前ES6方案。&lt;/p&gt;
&lt;h4 id=&#34;前ES6的Generator&#34;&gt;&lt;a href=&#34;#前ES6的Generator&#34; class=&#34;headerlink&#34; title=&#34;前ES6的Generator&#34;&gt;&lt;/a&gt;前ES6的Generator&lt;/h4&gt;&lt;p&gt;当然了Generator也是可以通过其他方式&lt;a href=&#34;https://github.com/getify/You-Dont-Know-JS/blob/1ed-zh-CN/async%20%26%20performance/ch4.md#%E5%89%8Des6%E6%97%B6%E4%BB%A3%E7%9A%84generator&#34;&gt;实现&lt;/a&gt;的。&lt;/p&gt;
&lt;h3 id=&#34;性能&#34;&gt;&lt;a href=&#34;#性能&#34; class=&#34;headerlink&#34; title=&#34;性能&#34;&gt;&lt;/a&gt;性能&lt;/h3&gt;&lt;h4 id=&#34;Web-Worker&#34;&gt;&lt;a href=&#34;#Web-Worker&#34; class=&#34;headerlink&#34; title=&#34;Web Worker&#34;&gt;&lt;/a&gt;Web Worker&lt;/h4&gt;&lt;p&gt;近HTML5时代被加入web平台的特性，称为“Web Worker”。这是一个浏览器（也就是宿主环境）特性，而且几乎和JS语言本身没有任何关系。&lt;a href=&#34;https://shenlvmeng.github.io/blog/2017/09/04/pwa-and-hybrid-brief/&#34;&gt;这里&lt;/a&gt;简单说了下它和Service Worker的区别。&lt;/p&gt;
&lt;h4 id=&#34;asm-js&#34;&gt;&lt;a href=&#34;#asm-js&#34; class=&#34;headerlink&#34; title=&#34;asm.js&#34;&gt;&lt;/a&gt;asm.js&lt;/h4&gt;&lt;p&gt;“&lt;a href=&#34;http://asmjs.org/&#34;&gt;asm.js&lt;/a&gt;”是可以被高度优化的JavaScript语言子集的标志。通过小心地回避那些特定的很难优化的（垃圾回收，强制转换，等等）机制和模式，asm.js风格的代码可以被JS引擎识别，而且用主动地底层优化进行特殊的处理。&lt;/p&gt;
&lt;h3 id=&#34;基准分析（BenchMark）和调优&#34;&gt;&lt;a href=&#34;#基准分析（BenchMark）和调优&#34; class=&#34;headerlink&#34; title=&#34;基准分析（BenchMark）和调优&#34;&gt;&lt;/a&gt;基准分析（BenchMark）和调优&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://benchmarkjs.com/&#34;&gt;Benchmark.js&lt;/a&gt;用统计学的方式避免时间戳测量语句性能时的不准确&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jsperf.com/&#34;&gt;jsPerf.com&lt;/a&gt;基于Benchmark.js的代码性能测试平台&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;编写好的测试&#34;&gt;&lt;a href=&#34;#编写好的测试&#34; class=&#34;headerlink&#34; title=&#34;编写好的测试&#34;&gt;&lt;/a&gt;编写好的测试&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;注意上下文的影响&lt;/li&gt;
&lt;li&gt;“过早的优化是万恶之源”&lt;/li&gt;
&lt;li&gt;尾部调用优化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ES6与未来&#34;&gt;&lt;a href=&#34;#ES6与未来&#34; class=&#34;headerlink&#34; title=&#34;ES6与未来&#34;&gt;&lt;/a&gt;ES6与未来&lt;/h2&gt;&lt;h3 id=&#34;ES？现在与未来&#34;&gt;&lt;a href=&#34;#ES？现在与未来&#34; class=&#34;headerlink&#34; title=&#34;ES？现在与未来&#34;&gt;&lt;/a&gt;ES？现在与未来&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;polyfill与转译&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;语法-1&#34;&gt;&lt;a href=&#34;#语法-1&#34; class=&#34;headerlink&#34; title=&#34;语法&#34;&gt;&lt;/a&gt;语法&lt;/h3&gt;&lt;p&gt;尽管ES6算是JS最新的官方特性，下面说的大部分特性已经被很经常地使用了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;块作用域（之前的部分已经提到过了）&lt;/li&gt;
&lt;li&gt;扩散、剩余，&lt;code&gt;...&lt;/code&gt;操作符，用在函数入参，数组和对象中&lt;/li&gt;
&lt;li&gt;函数默认参数值（是不是很神奇），默认参数值可以是合理的表达式甚至是函数调用&lt;/li&gt;
&lt;li&gt;解构赋值，也可以有默认参数值&lt;/li&gt;
&lt;li&gt;对象字面量拓展，简约声明&amp;#x2F;简约方法&amp;#x2F;getter，setter&amp;#x2F;计算型属性名&amp;#x2F;&lt;code&gt;__proto__&lt;/code&gt;&amp;#x2F;&lt;code&gt;super&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/getify/You-Dont-Know-JS/blob/1ed-zh-CN/es6%20%26%20beyond/ch2.md#%E6%A8%A1%E6%9D%BF%E5%AD%97%E9%9D%A2%E9%87%8F&#34;&gt;模板字面量&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;箭头函数，词法&lt;code&gt;this&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for of&lt;/code&gt;和iterator&lt;/li&gt;
&lt;li&gt;正则表达式拓展&lt;ul&gt;
&lt;li&gt;Unicode标识&lt;/li&gt;
&lt;li&gt;粘性标志&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数字，八进制&lt;/li&gt;
&lt;li&gt;Unicode&lt;ul&gt;
&lt;li&gt;合理的string长度，&lt;code&gt;String.prototype.normalize()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;charCodeAt&lt;/code&gt; &amp;#x3D;&amp;gt; &lt;code&gt;codePointAt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fromCharCode&lt;/code&gt; &amp;#x3D;&amp;gt; &lt;code&gt;fromCodePoint&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Unicode标识符名称&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Symbol，新的基本类型，它是一个新的包装器对象，可以认为每个&lt;code&gt;EVT_LOGIN&lt;/code&gt;持有一个不能被其他任何值所（有意或无意地）重复的值。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Symbol.for()&lt;/code&gt;先查询是否有一个同名的Symbol，如果有就返回，没有就创建一个&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;组织&#34;&gt;&lt;a href=&#34;#组织&#34; class=&#34;headerlink&#34; title=&#34;组织&#34;&gt;&lt;/a&gt;组织&lt;/h3&gt;&lt;h4 id=&#34;迭代器&#34;&gt;&lt;a href=&#34;#迭代器&#34; class=&#34;headerlink&#34; title=&#34;迭代器&#34;&gt;&lt;/a&gt;迭代器&lt;/h4&gt;&lt;p&gt;迭代器&lt;code&gt;Iterator&lt;/code&gt;接口有一个必选接口&lt;code&gt;next()&lt;/code&gt;，和两个可选接口&lt;code&gt;return()&lt;/code&gt;和&lt;code&gt;throw()&lt;/code&gt;，它的result被规定为包括属性&lt;code&gt;value&lt;/code&gt;和&lt;code&gt;done&lt;/code&gt;，下面是一个数组的迭代：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; arr = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; it = arr[&lt;span class=&#34;title class_&#34;&gt;Symbol&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;iterator&lt;/span&gt;]();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;it.&lt;span class=&#34;title function_&#34;&gt;next&lt;/span&gt;();      &lt;span class=&#34;comment&#34;&gt;// &amp;#123; value: 1, done: false &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;it.&lt;span class=&#34;title function_&#34;&gt;next&lt;/span&gt;();      &lt;span class=&#34;comment&#34;&gt;// &amp;#123; value: 2, done: false &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;it.&lt;span class=&#34;title function_&#34;&gt;next&lt;/span&gt;();      &lt;span class=&#34;comment&#34;&gt;// &amp;#123; value: 3, done: false &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;it.&lt;span class=&#34;title function_&#34;&gt;next&lt;/span&gt;();      &lt;span class=&#34;comment&#34;&gt;// &amp;#123; value: undefined, done: true &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;但通常使用&lt;code&gt;for of&lt;/code&gt;就足够了。我们可以依照这个接口，定义一个自己的迭代器：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Fib&lt;/span&gt; = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [&lt;span class=&#34;title class_&#34;&gt;Symbol&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;iterator&lt;/span&gt;]() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; n1 = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, n2 = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 使迭代器成为一个可迭代对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            [&lt;span class=&#34;title class_&#34;&gt;Symbol&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;iterator&lt;/span&gt;]() &amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;next&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; current = n2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                n2 = n1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                n1 = n1 + current;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123; &lt;span class=&#34;attr&#34;&gt;value&lt;/span&gt;: current, &lt;span class=&#34;attr&#34;&gt;done&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;(v) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;string&#34;&gt;&amp;quot;Fibonacci sequence abandoned.&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123; &lt;span class=&#34;attr&#34;&gt;value&lt;/span&gt;: v, &lt;span class=&#34;attr&#34;&gt;done&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;Generator-1&#34;&gt;&lt;a href=&#34;#Generator-1&#34; class=&#34;headerlink&#34; title=&#34;Generator&#34;&gt;&lt;/a&gt;Generator&lt;/h4&gt;&lt;p&gt;这个上一章已经提到了。它可以用来：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;生产一系列值，即状态机&lt;/li&gt;
&lt;li&gt;串行执行的任务队列，化&lt;em&gt;异步&lt;/em&gt;为&lt;em&gt;同步&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;模块&#34;&gt;&lt;a href=&#34;#模块&#34; class=&#34;headerlink&#34; title=&#34;模块&#34;&gt;&lt;/a&gt;模块&lt;/h4&gt;&lt;p&gt;&lt;code&gt;import&lt;/code&gt;和&lt;code&gt;export&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;类&#34;&gt;&lt;a href=&#34;#类&#34; class=&#34;headerlink&#34; title=&#34;类&#34;&gt;&lt;/a&gt;类&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;ES6引入了元属性的概念，用&lt;code&gt;new.target&lt;/code&gt;表示。在任意的构造器中，&lt;code&gt;new.target&lt;/code&gt;总是指向&lt;code&gt;new&lt;/code&gt;实际直接调用的构造器。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;集合&#34;&gt;&lt;a href=&#34;#集合&#34; class=&#34;headerlink&#34; title=&#34;集合&#34;&gt;&lt;/a&gt;集合&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;ArrayBuffer&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;它表示一组比特位，但是这些比特的实际意义是由结构化数组控制的，由它表示这些比特上的“视图”究竟是8位有符号整数还是字符串。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; buf = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ArrayBuffer&lt;/span&gt;( &lt;span class=&#34;number&#34;&gt;32&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;buf.&lt;span class=&#34;property&#34;&gt;byteLength&lt;/span&gt;;                     &lt;span class=&#34;comment&#34;&gt;// 32字节&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; arr = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Uint16Array&lt;/span&gt;( buf );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;arr.&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt;;                         &lt;span class=&#34;comment&#34;&gt;// 16&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;一个单独的缓冲可以连接多个视图&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; buf = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ArrayBuffer&lt;/span&gt;( &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; view8 = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Uint8Array&lt;/span&gt;( buf );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; view16 = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Uint16Array&lt;/span&gt;( buf );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;view16[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] = &lt;span class=&#34;number&#34;&gt;3085&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;view8[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;];                       &lt;span class=&#34;comment&#34;&gt;// 13&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;view8[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;];                       &lt;span class=&#34;comment&#34;&gt;// 12&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在ES6中可以使用下面的类型化数组构造器：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Int8Array（8位有符号整数），Uint8Array（8位无符号整数）&lt;/li&gt;
&lt;li&gt;Uint8ClampedArray（8位无符号整数，每个值都被卡在0 - 255范围内）&lt;/li&gt;
&lt;li&gt;Int16Array（16位有符号整数），Uint16Array（16位无符号整数）&lt;/li&gt;
&lt;li&gt;Int32Array（32位有符号整数），Uint32Array（32位无符号整数）&lt;/li&gt;
&lt;li&gt;Float32Array（32位浮点数，IEEE-754）&lt;/li&gt;
&lt;li&gt;Float64Array（64位浮点数，IEEE-754）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Maps&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;摆脱对象只能使用字符串做键值的限制。有&lt;code&gt;get&lt;/code&gt;、&lt;code&gt;set&lt;/code&gt;、&lt;code&gt;delete&lt;/code&gt;、&lt;code&gt;has&lt;/code&gt;、&lt;code&gt;clear&lt;/code&gt;等方法。类似地还有WeakMap，不过它只能使用对象做键。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sets&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个集合。类似Map，不过&lt;code&gt;set&lt;/code&gt;换成了&lt;code&gt;add&lt;/code&gt;，且没有&lt;code&gt;get&lt;/code&gt;。Set和Map都有自己的迭代器。也可以通过&lt;code&gt;keys&lt;/code&gt;，&lt;code&gt;values&lt;/code&gt;，&lt;code&gt;entries&lt;/code&gt;来访问里面的内容。&lt;/p&gt;
&lt;h3 id=&#34;新增API-amp-元编程&#34;&gt;&lt;a href=&#34;#新增API-amp-元编程&#34; class=&#34;headerlink&#34; title=&#34;新增API &amp;amp; 元编程&#34;&gt;&lt;/a&gt;新增API &amp;amp; 元编程&lt;/h3&gt;&lt;p&gt;略，参考&lt;a href=&#34;https://github.com/getify/You-Dont-Know-JS/blob/1ed-zh-CN/es6%20%26%20beyond/ch6.md&#34;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;ES6以后&#34;&gt;&lt;a href=&#34;#ES6以后&#34; class=&#34;headerlink&#34; title=&#34;ES6以后&#34;&gt;&lt;/a&gt;ES6以后&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;asnyc function&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Object.observe&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;指数运算符&lt;code&gt;**&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Array#includes&lt;/code&gt;替代&lt;code&gt;~Array.indexOf(value)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;SIMD（多个数据），用于多个元素的并行数学操作，参考下面&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; v1 = &lt;span class=&#34;variable constant_&#34;&gt;SIMD&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;float32x4&lt;/span&gt;( &lt;span class=&#34;number&#34;&gt;3.14159&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;21.0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;32.3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;55.55&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; v2 = &lt;span class=&#34;variable constant_&#34;&gt;SIMD&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;float32x4&lt;/span&gt;( &lt;span class=&#34;number&#34;&gt;2.1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3.2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4.3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5.4&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable constant_&#34;&gt;SIMD&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;float32x4&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;mul&lt;/span&gt;( v1, v2 );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// [ 6.597339, 67.2, 138.89, 299.97 ]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;WASM（Web Assembly）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;-END-&lt;/em&gt;&lt;/p&gt;
</content>
        <category term="读书笔记" />
        <category term="JavaScript" />
        <updated>2017-12-15T12:59:38.000Z</updated>
    </entry>
    <entry>
        <id>http://shenlvmeng.github.com/blog/2017/12/13/you-dont-know-js-part1/</id>
        <title>《You don&#39;t know JS》 上（入门&amp;作用域&amp;对象）</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2017/12/13/you-dont-know-js-part1/"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;原作：&lt;a href=&#34;https://github.com/getify/You-Dont-Know-JS&#34;&gt;You-Dont-Know-JS&lt;/a&gt;&lt;br&gt;本文的99.9%的内容都来自《You dont know JS》的&lt;a href=&#34;https://github.com/getify/You-Dont-Know-JS/tree/1ed-zh-CN&#34;&gt;电子中文版&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;传送门：&lt;a href=&#34;https://shenlvmeng.github.io/blog/2017/12/15/you-dont-know-js-part2/&#34;&gt;《You don’t know JS》 下（类型文法&amp;amp;异步&amp;amp;ES6与未来）&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;入门与进阶&#34;&gt;&lt;a href=&#34;#入门与进阶&#34; class=&#34;headerlink&#34; title=&#34;入门与进阶&#34;&gt;&lt;/a&gt;入门与进阶&lt;/h2&gt;&lt;h3 id=&#34;值和类型&#34;&gt;&lt;a href=&#34;#值和类型&#34; class=&#34;headerlink&#34; title=&#34;值和类型&#34;&gt;&lt;/a&gt;值和类型&lt;/h3&gt;&lt;p&gt;JavaScript只有带类型的值，没有带类型的变量。大家都知道JS的基本类型共6类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;undefined&lt;/li&gt;
&lt;li&gt;null&lt;/li&gt;
&lt;li&gt;boolean&lt;/li&gt;
&lt;li&gt;number&lt;/li&gt;
&lt;li&gt;string&lt;/li&gt;
&lt;li&gt;object&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是在ES6之后，需要新增一类&lt;code&gt;symbol&lt;/code&gt;。另外，对null使用&lt;code&gt;typeof&lt;/code&gt;将得到“object”的结果。&lt;/p&gt;
&lt;p&gt;JavaScript中对“falsy”的定义包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“”&lt;/li&gt;
&lt;li&gt;0, -0, NaN&lt;/li&gt;
&lt;li&gt;null, undefined&lt;/li&gt;
&lt;li&gt;false&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除此之外的值都是truthy。&lt;/p&gt;
&lt;p&gt;关于JavaScript中的&lt;code&gt;==&lt;/code&gt;和&lt;code&gt;===&lt;/code&gt;，作者的看法是在必要的时候&lt;code&gt;==&lt;/code&gt;会很好地改善程序。然而&lt;code&gt;==&lt;/code&gt;的&lt;a href=&#34;http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3&#34;&gt;判断规则&lt;/a&gt;比较复杂，可以总结出一些情况便于我们选择是否使用&lt;code&gt;==&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果一个比较的两个值之一可能是&lt;code&gt;true&lt;/code&gt;或&lt;code&gt;false&lt;/code&gt;，避免&amp;#x3D;&amp;#x3D;而使用&amp;#x3D;&amp;#x3D;&amp;#x3D;。&lt;/li&gt;
&lt;li&gt;如果一个比较的两个值之一可能是&lt;code&gt;0&lt;/code&gt;&amp;#x2F;&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;&amp;#x2F;&lt;code&gt;[]&lt;/code&gt;，避免&amp;#x3D;&amp;#x3D;而使用&amp;#x3D;&amp;#x3D;&amp;#x3D;。&lt;/li&gt;
&lt;li&gt;其他情况下，放心使用&lt;code&gt;==&lt;/code&gt;。不仅安全，在许多情况下它可以简化你的代码并改善可读性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;变量&#34;&gt;&lt;a href=&#34;#变量&#34; class=&#34;headerlink&#34; title=&#34;变量&#34;&gt;&lt;/a&gt;变量&lt;/h3&gt;&lt;p&gt;一个变量标识符必须以a-z，A-Z，$，或&lt;code&gt;_&lt;/code&gt;开头。它可以包含任意这些字符外加数字0-9，但不能使用保留字。&lt;/p&gt;
&lt;p&gt;变量作用域提升（var定义）和嵌套就不多说了。&lt;/p&gt;
&lt;h3 id=&#34;Strict模式&#34;&gt;&lt;a href=&#34;#Strict模式&#34; class=&#34;headerlink&#34; title=&#34;Strict模式&#34;&gt;&lt;/a&gt;Strict模式&lt;/h3&gt;&lt;p&gt;让代码更严谨，同样可以选择用在全局或是函数中。&lt;/p&gt;
&lt;h3 id=&#34;函数作为值&#34;&gt;&lt;a href=&#34;#函数作为值&#34; class=&#34;headerlink&#34; title=&#34;函数作为值&#34;&gt;&lt;/a&gt;函数作为值&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;IIFE&lt;/strong&gt;（立即执行函数）和&lt;strong&gt;闭包&lt;/strong&gt;是JS中值得玩味的特性。除了使用&lt;code&gt;()&lt;/code&gt;包裹，还可以用&lt;code&gt;void&lt;/code&gt;打头开始一个IIFE。&lt;/p&gt;
&lt;p&gt;闭包经常用来包装模块。&lt;/p&gt;
&lt;h3 id=&#34;this指代和prototype&#34;&gt;&lt;a href=&#34;#this指代和prototype&#34; class=&#34;headerlink&#34; title=&#34;this指代和prototype&#34;&gt;&lt;/a&gt;this指代和prototype&lt;/h3&gt;&lt;p&gt;略&lt;/p&gt;
&lt;h3 id=&#34;新的特性&#34;&gt;&lt;a href=&#34;#新的特性&#34; class=&#34;headerlink&#34; title=&#34;新的特性&#34;&gt;&lt;/a&gt;新的特性&lt;/h3&gt;&lt;p&gt;填充（polyfill）和转译（transpile）&lt;/p&gt;
&lt;h2 id=&#34;作用域与闭包&#34;&gt;&lt;a href=&#34;#作用域与闭包&#34; class=&#34;headerlink&#34; title=&#34;作用域与闭包&#34;&gt;&lt;/a&gt;作用域与闭包&lt;/h2&gt;&lt;h3 id=&#34;作用域&#34;&gt;&lt;a href=&#34;#作用域&#34; class=&#34;headerlink&#34; title=&#34;作用域&#34;&gt;&lt;/a&gt;作用域&lt;/h3&gt;&lt;p&gt;作用域与LHS，RHS。在非Strict模式下，如果到全局作用域还找不到变量，会在作用域内创建一个新的同名变量。在Strict模式下，不允许这种行为（意外地创建全局变量），此时会抛出ReferenceError，即找不到变量。如果找到了值，但是并不能对它做一些事情，就会抛出TypeError。&lt;/p&gt;
&lt;h3 id=&#34;词法作用域&#34;&gt;&lt;a href=&#34;#词法作用域&#34; class=&#34;headerlink&#34; title=&#34;词法作用域&#34;&gt;&lt;/a&gt;词法作用域&lt;/h3&gt;&lt;p&gt;JavaScript使用词法作用域，即变量和作用域在编写代码阶段已经确定。JS引擎也可以在这个阶段针对作用域和变量对代码进行优化，但是&lt;code&gt;eval()&lt;/code&gt;和&lt;code&gt;with()&lt;/code&gt;会在代码中动态改变作用域，从而使得引擎无法进行优化，使代码运行得更慢。在strict模式下，&lt;code&gt;eval()&lt;/code&gt;的不安全用法（修改作用域）以及&lt;code&gt;with()&lt;/code&gt;都是不允许使用的。&lt;/p&gt;
&lt;p&gt;词法作用域是编写时的，而动态作用域（和this）是运行时的。词法作用域关心的是函数&lt;strong&gt;在何处被声明&lt;/strong&gt;，但是动态作用域关心的是函数&lt;strong&gt;从何处被调用&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;this&lt;/code&gt;在JS中始终是运行时的，即根据运行时的调用情况有不同的值。在&lt;strong&gt;箭头函数&lt;/strong&gt;中则是词法this的，即声明时决定。&lt;/p&gt;
&lt;h3 id=&#34;块作用域&#34;&gt;&lt;a href=&#34;#块作用域&#34; class=&#34;headerlink&#34; title=&#34;块作用域&#34;&gt;&lt;/a&gt;块作用域&lt;/h3&gt;&lt;p&gt;封装、匿名函数、IIFE。&lt;/p&gt;
&lt;p&gt;for循环、if、while、switch等流程控制语句的&lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;，都是&lt;em&gt;假的&lt;/em&gt;块作用域，其中的内容都依附于外部的函数作用域。with（不建议使用），try catch，let，const可以形成新的块作用域。&lt;/p&gt;
&lt;p&gt;在ES6到ES5的转译时，具有块作用域的代码，会采用&lt;code&gt;try catch&lt;/code&gt;来实现：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// ES6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; a = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(a);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// ES5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;undefined&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt;(a) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    a = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(a);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;提升&#34;&gt;&lt;a href=&#34;#提升&#34; class=&#34;headerlink&#34; title=&#34;提升&#34;&gt;&lt;/a&gt;提升&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在代码被执行前，所有的声明，变量和函数，都会首先被处理。处理的只有“声明”，而没有“赋值”。&lt;/li&gt;
&lt;li&gt;函数提升优先于变量的提升&lt;/li&gt;
&lt;li&gt;后续的提升会覆盖此前的同名提升&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;闭包&#34;&gt;&lt;a href=&#34;#闭包&#34; class=&#34;headerlink&#34; title=&#34;闭包&#34;&gt;&lt;/a&gt;闭包&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;闭包就是函数能够记住并访问它的词法作用域，即使当这个函数在它的词法作用域之外执行时。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;循环加闭包会出现面试中的经典问题：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; i=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; i&amp;lt;=&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;setTimeout&lt;/span&gt;( &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;timer&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;( i );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;, i*&lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上面的代码为啥不好用？&lt;/p&gt;
&lt;p&gt;从之前关于作用域的讨论来看，每次setTimeout只是完成了函数声明，并丢进队列里而已。当定时器函数在其词法作用域外执行时，因为闭包的特点会保留有父级的作用域。而这5个函数都定义在同一个父级函数作用域内，对变量i的引用自然是同一个了。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; i=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; i&amp;lt;=&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    (&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;j&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;setTimeout&lt;/span&gt;( &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;timer&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;( j );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;, j*&lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;)( i );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;有IIFE的加持，父级作用域现在变成了每个IIFE而非for循环所在的作用域。即每个变量i来自不同的独立作用域，自然就可以得到理想的效果了。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; i=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; i&amp;lt;=&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;setTimeout&lt;/span&gt;( &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;timer&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;( i );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;, i*&lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;不就是想要个块作用域嘛，使用&lt;code&gt;let&lt;/code&gt;关键字后变量将不是只为循环声明一次，而是为每次迭代声明一次。每次都能得到一个新的块作用域，自然得到和IIFE一样的效果。&lt;/p&gt;
&lt;h2 id=&#34;this与对象&#34;&gt;&lt;a href=&#34;#this与对象&#34; class=&#34;headerlink&#34; title=&#34;this与对象&#34;&gt;&lt;/a&gt;&lt;code&gt;this&lt;/code&gt;与对象&lt;/h2&gt;&lt;h3 id=&#34;this是什么&#34;&gt;&lt;a href=&#34;#this是什么&#34; class=&#34;headerlink&#34; title=&#34;this是什么&#34;&gt;&lt;/a&gt;&lt;code&gt;this&lt;/code&gt;是什么&lt;/h3&gt;&lt;p&gt;也许JS已经入门的前端程序员们早就对this在不同环境下的不同值烂熟在心。但可能没有想过这种情况的本质：上一部分提到的&lt;strong&gt;JS中的this是运行时的&lt;/strong&gt;，和作用域完全不一样。&lt;/p&gt;
&lt;p&gt;对比一下按照传统OOP理解下的JS代码，从不同的角度看，能进一步得到对this的认识：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; a = &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;bar&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;bar&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;( &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;a&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;(); &lt;span class=&#34;comment&#34;&gt;//undefined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;num&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;( &lt;span class=&#34;string&#34;&gt;&amp;quot;foo: &amp;quot;&lt;/span&gt; + num );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 追踪 `foo` 被调用了多少次&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;count&lt;/span&gt;++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;foo.&lt;span class=&#34;property&#34;&gt;count&lt;/span&gt; = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (i=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (i &amp;gt; &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;( i );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// foo: 6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// foo: 7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// foo: 8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// foo: 9&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// `foo` 被调用了多少次？&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;( foo.&lt;span class=&#34;property&#34;&gt;count&lt;/span&gt; ); &lt;span class=&#34;comment&#34;&gt;// 0 -- 这他妈怎么回事……？&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;虽然看上去很愚蠢，但是从词法作用域的角度去理解，是不是能更清楚看到JS中&lt;code&gt;this&lt;/code&gt;的特殊之处。&lt;/p&gt;
&lt;h3 id=&#34;this豁然开朗&#34;&gt;&lt;a href=&#34;#this豁然开朗&#34; class=&#34;headerlink&#34; title=&#34;this豁然开朗&#34;&gt;&lt;/a&gt;&lt;code&gt;this&lt;/code&gt;豁然开朗&lt;/h3&gt;&lt;p&gt;根据上面的描述，&lt;code&gt;this&lt;/code&gt;是根据调用点确定含义的。下面的4个规则，在准备JS面试的时候肯定都见过：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;默认绑定，独立函数调用。可以认为这种this规则是在没有其他规则适用时的默认规则。此时&lt;code&gt;this&lt;/code&gt;指向全局对象，在strict mode下，&lt;code&gt;this&lt;/code&gt;指向undefined。&lt;/li&gt;
&lt;li&gt;隐含绑定，调用点有一个环境对象，即作为函数方法，但是下面的情况下会回退到默认绑定，因为调用点实际位于独立函数内&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;( &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;a&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; obj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;a&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;foo&lt;/span&gt;: foo&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; bar = obj.&lt;span class=&#34;property&#34;&gt;foo&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// 函数引用！&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; a = &lt;span class=&#34;string&#34;&gt;&amp;quot;oops, global&amp;quot;&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// `a`也是一个全局对象的属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;bar&lt;/span&gt;(); &lt;span class=&#34;comment&#34;&gt;// &amp;quot;oops, global&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;( &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;a&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;========&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;doFoo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;fn&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// `fn` 只不过 `foo` 的另一个引用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;fn&lt;/span&gt;(); &lt;span class=&#34;comment&#34;&gt;// &amp;lt;-- 调用点!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; obj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;a&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;foo&lt;/span&gt;: foo&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; a = &lt;span class=&#34;string&#34;&gt;&amp;quot;oops, global&amp;quot;&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// `a`也是一个全局对象的属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;doFoo&lt;/span&gt;( obj.&lt;span class=&#34;property&#34;&gt;foo&lt;/span&gt; ); &lt;span class=&#34;comment&#34;&gt;// &amp;quot;oops, global&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;显式绑定，&lt;code&gt;call&lt;/code&gt;与&lt;code&gt;apply&lt;/code&gt;可以显式attach context到函数上，使用&lt;code&gt;bind&lt;/code&gt;可以避免前面那种&lt;code&gt;this&lt;/code&gt;丢失的情况。&lt;/li&gt;
&lt;li&gt;new绑定，函数作为构造函数调用时，&lt;code&gt;this&lt;/code&gt;指向即将返回的新对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从优先级上看，new &amp;gt; 硬绑定 &amp;gt; 隐含绑定 &amp;gt; 默认绑定。其中“new &amp;gt; 硬绑定”有趣的一点是，使用&lt;code&gt;bind&lt;/code&gt;在第一个后的参数实际上会作为函数的默认入参（类似于函数柯里化），如下：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;p1,p2&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;val&lt;/span&gt; = p1 + p2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 在这里使用 `null` 是因为在这种场景下我们不关心 `this` 的硬绑定&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 而且反正它将会被 `new` 调用覆盖掉！&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; bar = foo.&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;( &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;p1&amp;quot;&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; baz = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;bar&lt;/span&gt;( &lt;span class=&#34;string&#34;&gt;&amp;quot;p2&amp;quot;&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;baz.&lt;span class=&#34;property&#34;&gt;val&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// p1p2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;除了上面的规则，还有一些特例：&lt;/p&gt;
&lt;p&gt;传递&lt;code&gt;null&lt;/code&gt;或&lt;code&gt;undefined&lt;/code&gt;给&lt;code&gt;call&lt;/code&gt;，&lt;code&gt;apply&lt;/code&gt;或&lt;code&gt;bind&lt;/code&gt;时，那么这些值会被忽略掉，取而代之的是&lt;strong&gt;默认绑定&lt;/strong&gt;规则将适用于这个调用。单纯使用apply数组化输入参数（现在已经可以用&lt;code&gt;[...foo]&lt;/code&gt;了）和bind柯里化函数时常用到。&lt;/p&gt;
&lt;p&gt;不过，这么做还是有风险，建议用&lt;code&gt;Object.create(null)&lt;/code&gt;创建的对象替代&lt;code&gt;null&lt;/code&gt;，既能表示无意义的值，又能避免&lt;strong&gt;默认绑定&lt;/strong&gt;的行为。&lt;/p&gt;
&lt;p&gt;作者给出了软绑定的工具方法，提高了硬绑定的灵活性，又避免了&lt;strong&gt;默认绑定&lt;/strong&gt;的问题。逻辑是在绑定时检查&lt;code&gt;this&lt;/code&gt;是否是全局对象，如果是才使用输入的&lt;code&gt;this&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!&lt;span class=&#34;title class_&#34;&gt;Function&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;softBind&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;Function&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;softBind&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;obj&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; fn = &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            curried = [].&lt;span class=&#34;property&#34;&gt;slice&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;call&lt;/span&gt;( &lt;span class=&#34;variable language_&#34;&gt;arguments&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; ),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            bound = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;bound&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; fn.&lt;span class=&#34;title function_&#34;&gt;apply&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    (!&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt; ||&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        (&lt;span class=&#34;keyword&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;variable language_&#34;&gt;window&lt;/span&gt; !== &lt;span class=&#34;string&#34;&gt;&amp;quot;undefined&amp;quot;&lt;/span&gt; &amp;amp;&amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt; === &lt;span class=&#34;variable language_&#34;&gt;window&lt;/span&gt;) ||&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        (&lt;span class=&#34;keyword&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;variable language_&#34;&gt;global&lt;/span&gt; !== &lt;span class=&#34;string&#34;&gt;&amp;quot;undefined&amp;quot;&lt;/span&gt; &amp;amp;&amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt; === &lt;span class=&#34;variable language_&#34;&gt;global&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    ) ? obj : &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    curried.&lt;span class=&#34;property&#34;&gt;concat&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;apply&lt;/span&gt;( curried, &lt;span class=&#34;variable language_&#34;&gt;arguments&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        bound.&lt;span class=&#34;property&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt; = &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;create&lt;/span&gt;( fn.&lt;span class=&#34;property&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; bound;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;p&gt;另外，前面提到的箭头函数具有词法&lt;code&gt;this&lt;/code&gt;，等同在调用前声明&lt;code&gt;self = this&lt;/code&gt;，再把&lt;code&gt;self&lt;/code&gt;传入的效果。&lt;/p&gt;
&lt;h3 id=&#34;对象&#34;&gt;&lt;a href=&#34;#对象&#34; class=&#34;headerlink&#34; title=&#34;对象&#34;&gt;&lt;/a&gt;对象&lt;/h3&gt;&lt;p&gt;内建对象中，只有&lt;code&gt;Date()&lt;/code&gt;是必须要使用&lt;code&gt;new&lt;/code&gt;创建的。&lt;/p&gt;
&lt;p&gt;对象的属性有两种访问方法：&lt;code&gt;.&lt;/code&gt;操作符或&lt;code&gt;[ ]&lt;/code&gt;操作符。不同的是&lt;code&gt;.&lt;/code&gt;操作符后只能使用标识符兼容的属性名，&lt;code&gt;[...]&lt;/code&gt;操作符后可以使用任何合理的UTF-8的字符串。另外，对象的属性名总是字符串，如果使用了其他类型值，会进行强制转换：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; myObject = &amp;#123; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;myObject[&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;] = &lt;span class=&#34;string&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;myObject[&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;] = &lt;span class=&#34;string&#34;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;myObject[myObject] = &lt;span class=&#34;string&#34;&gt;&amp;quot;baz&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;myObject[&lt;span class=&#34;string&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;];               &lt;span class=&#34;comment&#34;&gt;// &amp;quot;foo&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;myObject[&lt;span class=&#34;string&#34;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;];                  &lt;span class=&#34;comment&#34;&gt;// &amp;quot;bar&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;myObject[&lt;span class=&#34;string&#34;&gt;&amp;quot;[object Object]&amp;quot;&lt;/span&gt;];    &lt;span class=&#34;comment&#34;&gt;// &amp;quot;baz&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;计算型属性名&#34;&gt;&lt;a href=&#34;#计算型属性名&#34; class=&#34;headerlink&#34; title=&#34;计算型属性名&#34;&gt;&lt;/a&gt;计算型属性名&lt;/h4&gt;&lt;p&gt;ES6中新增了&lt;em&gt;计算型属性名&lt;/em&gt;，允许使用表达式作为一个键名称，表达式用&lt;code&gt;[ ]&lt;/code&gt;括起来。像下面这样：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; prefix = &lt;span class=&#34;string&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; myObject = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [prefix + &lt;span class=&#34;string&#34;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;]: &lt;span class=&#34;string&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [prefix + &lt;span class=&#34;string&#34;&gt;&amp;quot;baz&amp;quot;&lt;/span&gt;]: &lt;span class=&#34;string&#34;&gt;&amp;quot;world&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;myObject[&lt;span class=&#34;string&#34;&gt;&amp;quot;foobar&amp;quot;&lt;/span&gt;]; &lt;span class=&#34;comment&#34;&gt;// hello&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;myObject[&lt;span class=&#34;string&#34;&gt;&amp;quot;foobaz&amp;quot;&lt;/span&gt;]; &lt;span class=&#34;comment&#34;&gt;// world&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;深、浅复制与对象属性描述符（description），&lt;code&gt;writable&lt;/code&gt;和&lt;code&gt;configurable&lt;/code&gt;，&lt;code&gt;getOwnPropertyDescriptor()&lt;/code&gt;与&lt;code&gt;defineProperty()&lt;/code&gt;。在JS中，&lt;code&gt;delete&lt;/code&gt;仅用于直接从目标对象移除该对象的（可以被移除的）属性，与释放内存并无直接关系。&lt;/p&gt;
&lt;h4 id=&#34;Immutability&#34;&gt;&lt;a href=&#34;#Immutability&#34; class=&#34;headerlink&#34; title=&#34;Immutability&#34;&gt;&lt;/a&gt;Immutability&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;注意：所有这些方法创建的都是浅不可变性。也就是，它们仅影响对象和它的直属属性的性质。如果对象拥有对其他对象（数组、对象、函数等）的引用，那个对象的内容不会受影响，任然保持可变&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;属性描述符里的&lt;code&gt;writable&lt;/code&gt;和&lt;code&gt;configuratable&lt;/code&gt;限制了对属性和属性值的修改。&lt;code&gt;preventExtensions()&lt;/code&gt;方法可以防止对象被添加新属性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;seal()&lt;/code&gt; &amp;#x3D; &lt;code&gt;configuratable: false&lt;/code&gt; + &lt;code&gt;preventExtensions()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;freeze()&lt;/code&gt; &amp;#x3D; &lt;code&gt;seal()&lt;/code&gt; + &lt;code&gt;writable: false&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getter与setter&#34;&gt;&lt;a href=&#34;#getter与setter&#34; class=&#34;headerlink&#34; title=&#34;getter与setter&#34;&gt;&lt;/a&gt;getter与setter&lt;/h4&gt;&lt;p&gt;除了使用&lt;code&gt;defineProperty&lt;/code&gt;外，可以直接用字面量的形式，通过&lt;code&gt;get prop1()&lt;/code&gt;或&lt;code&gt;set prop1(val)&lt;/code&gt;的形式设置getter和setter。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;for in&lt;/code&gt;和&lt;code&gt;for of&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;混合（淆）“类”的对象&#34;&gt;&lt;a href=&#34;#混合（淆）“类”的对象&#34; class=&#34;headerlink&#34; title=&#34;混合（淆）“类”的对象&#34;&gt;&lt;/a&gt;混合（淆）“类”的对象&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;有些语言（比如Java）不给你选择，所以这根本没什么 选择性 —— 一切都是类。其他语言如C&amp;#x2F;C++或PHP同时给你过程式和面向类的语法，在使用哪种风格合适或混合风格上，留给开发者更多选择。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;类意味着拷贝。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当一个传统的类被实例化时，就发生了类的行为向实例中拷贝。当类被继承时，也发生父类的行为向子类的拷贝。多态也是拷贝行为的结果。&lt;/p&gt;
&lt;p&gt;但是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一，JavaScript并&lt;strong&gt;不会&lt;/strong&gt;自动地 （像类那样）在对象间创建拷贝；&lt;/li&gt;
&lt;li&gt;第二，显式mixin只能复制函数或对象的&lt;strong&gt;引用&lt;/strong&gt;，而不是自身。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;正如我们在第四章讲解的，在 JavaScript 中，对于对象来说没有抽象模式&amp;#x2F;蓝图，即没有面向类的语言中那样的称为类的东西。JavaScript 只有 对象。&lt;/p&gt;
&lt;p&gt;实际上，在所有语言中，JavaScript 几乎是独一无二的，也许是唯一的可以被称为“面向对象”的语言，因为可以根本没有类而直接创建对象的语言很少，而 JavaScript 就是其中之一。&lt;/p&gt;
&lt;p&gt;在 JavaScript 中，类不能（因为根本不存在）描述对象可以做什么。对象直接定义它自己的行为。这里 仅有 对象。&lt;/p&gt;
&lt;p&gt;总之，JavaScript中面向对象的部分和大多数OOP语言不完全一样。这使得在JS中模拟类编程将既累又会埋下很多坑。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;原型&#34;&gt;&lt;a href=&#34;#原型&#34; class=&#34;headerlink&#34; title=&#34;原型&#34;&gt;&lt;/a&gt;原型&lt;/h3&gt;&lt;p&gt;使用&lt;code&gt;[[get]]&lt;/code&gt;查询属性时，也会在&lt;code&gt;[[prototype]]&lt;/code&gt;链上寻找，因此修改对象属性的时候，应该注意&lt;strong&gt;属性遮蔽&lt;/strong&gt;（即在&lt;code&gt;[[prototype]]&lt;/code&gt;中找到）的情况。它会增加代码的复杂度和可读性，如下：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; anotherObject = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;a&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; myObject = &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;create&lt;/span&gt;( anotherObject );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;anotherObject.&lt;span class=&#34;property&#34;&gt;a&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;myObject.&lt;span class=&#34;property&#34;&gt;a&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;anotherObject.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;( &lt;span class=&#34;string&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt; ); &lt;span class=&#34;comment&#34;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;myObject.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;( &lt;span class=&#34;string&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt; ); &lt;span class=&#34;comment&#34;&gt;// false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;myObject.&lt;span class=&#34;property&#34;&gt;a&lt;/span&gt;++; &lt;span class=&#34;comment&#34;&gt;// 噢，隐式遮蔽！&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;anotherObject.&lt;span class=&#34;property&#34;&gt;a&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;myObject.&lt;span class=&#34;property&#34;&gt;a&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;myObject.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;( &lt;span class=&#34;string&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt; ); &lt;span class=&#34;comment&#34;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在&lt;code&gt;for in&lt;/code&gt;循环中，同样注意用&lt;code&gt;hasOwnProperty()&lt;/code&gt;排除&lt;code&gt;[[prototype]]&lt;/code&gt;上的属性。&lt;/p&gt;
&lt;p&gt;所有用&lt;code&gt;constructor&lt;/code&gt;构建的对象都有所指向的prototype，而在prototype中的&lt;code&gt;.constructor&lt;/code&gt;又会指回&lt;code&gt;constructor&lt;/code&gt;。但是这个关系是可以被覆盖的。&lt;/p&gt;
&lt;h3 id=&#34;原型继承&#34;&gt;&lt;a href=&#34;#原型继承&#34; class=&#34;headerlink&#34; title=&#34;原型继承&#34;&gt;&lt;/a&gt;原型继承&lt;/h3&gt;&lt;p&gt;作者认为，JS中的对象是通过链接组织起来的。说是原型继承，实际上就是在两个原型间建立了&lt;code&gt;[[prototype]]&lt;/code&gt;的关系。这个关系的建立方法很多，各有优劣。最简单的还是用ES5提供的&lt;code&gt;Object.create()&lt;/code&gt;方法，对&lt;code&gt;__proto__&lt;/code&gt;和&lt;code&gt;constructor&lt;/code&gt;等视而不见。它的polyfill像下面这样：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!&lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;create&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;create&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;o&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;F&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        F.&lt;span class=&#34;property&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt; = o;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;F&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;另外，&lt;code&gt;Object.create()&lt;/code&gt;第一个后面的参数可以用来声明对象属性描述符，不过用得不多。&lt;/p&gt;
&lt;h4 id=&#34;总结&#34;&gt;&lt;a href=&#34;#总结&#34; class=&#34;headerlink&#34; title=&#34;总结&#34;&gt;&lt;/a&gt;总结&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;虽然这些JavaScript机制看起来和传统面向类语言的“初始化类”和“类继承”类似，而在JavaScript中的关键区别是，没有拷贝发生。取而代之的是对象最终通过&lt;code&gt;[[Prototype]]&lt;/code&gt;链链接在一起。&lt;/p&gt;
&lt;p&gt;相反，“委托”是一个更确切的术语，因为这些关系不是拷贝而是委托链接。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从这个角度去看&lt;code&gt;new Foo()&lt;/code&gt;过程中发生的事，除了返回一个新的对象外，&lt;code&gt;Foo()&lt;/code&gt;还会将这个对象和&lt;code&gt;Foo.prototype&lt;/code&gt;链接起来（通过指定&lt;code&gt;[[prototype]]&lt;/code&gt;），&lt;code&gt;Foo.prototype&lt;/code&gt;和别的对象并没有本质区别。&lt;/p&gt;
&lt;h3 id=&#34;行为委托&#34;&gt;&lt;a href=&#34;#行为委托&#34; class=&#34;headerlink&#34; title=&#34;行为委托&#34;&gt;&lt;/a&gt;行为委托&lt;/h3&gt;&lt;p&gt;在上面一章提到，&lt;code&gt;[[prototype]]&lt;/code&gt;是存在于对象内部的引用另一个对象的内部连接。当一个属性&amp;#x2F;方法引用在一个对象上发生，而这样的属性&amp;#x2F;方法又不存在时，这个链接就会被使用。在这种情况下，&lt;code&gt;[[Prototype]]&lt;/code&gt;链接告诉引擎去那个被链接的对象上寻找该属性&amp;#x2F;方法。接下来，如果那个对象也不能满足查询，就沿着它的&lt;code&gt;[[Prototype]]&lt;/code&gt;查询，如此继续。这种对象间的一系列链接构成了所谓的“原形链”。&lt;/p&gt;
&lt;p&gt;其重要的实质&lt;strong&gt;全部在于被连接到其他对象的对象&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;下面是一段OLOO（链接到其他对象的对象）风格的例子：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Task&lt;/span&gt; = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;setID&lt;/span&gt;: &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;ID&lt;/span&gt;) &amp;#123; &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;id&lt;/span&gt; = &lt;span class=&#34;variable constant_&#34;&gt;ID&lt;/span&gt;; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;outputID&lt;/span&gt;: &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123; &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;( &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;id&lt;/span&gt; ); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 使 `XYZ` 委托到 `Task`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;variable constant_&#34;&gt;XYZ&lt;/span&gt; = &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;create&lt;/span&gt;( &lt;span class=&#34;title class_&#34;&gt;Task&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable constant_&#34;&gt;XYZ&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;prepareTask&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;ID,Label&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;setID&lt;/span&gt;( &lt;span class=&#34;variable constant_&#34;&gt;ID&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;label&lt;/span&gt; = &lt;span class=&#34;title class_&#34;&gt;Label&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable constant_&#34;&gt;XYZ&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;outputTaskDetails&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;outputID&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;( &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;label&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;它的特点在于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;状态保留在委托者上&lt;/li&gt;
&lt;li&gt;避免&lt;code&gt;[[prototype]]&lt;/code&gt;链上的重复命名&lt;/li&gt;
&lt;li&gt;行为委托用在内部实现，避免暴露在API的设计上&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;思维的转变&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;放弃传统OO思路在JS中的蹩脚实现（像下面这样），抓住&lt;code&gt;[[prototype]]&lt;/code&gt;链接对象以及“原型链”的特殊性，可以让思路更加自然且符合JS的特点（像下面的下面那样）。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;Foo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;who&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;me&lt;/span&gt; = who;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Foo&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;identify&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;I am &amp;quot;&lt;/span&gt; + &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;me&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;Bar&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;who&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;Foo&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;call&lt;/span&gt;( &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;, who );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Bar&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt; = &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;create&lt;/span&gt;( &lt;span class=&#34;title class_&#34;&gt;Foo&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Bar&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;speak&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;alert&lt;/span&gt;( &lt;span class=&#34;string&#34;&gt;&amp;quot;Hello, &amp;quot;&lt;/span&gt; + &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;identify&lt;/span&gt;() + &lt;span class=&#34;string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; b1 = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Bar&lt;/span&gt;( &lt;span class=&#34;string&#34;&gt;&amp;quot;b1&amp;quot;&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; b2 = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Bar&lt;/span&gt;( &lt;span class=&#34;string&#34;&gt;&amp;quot;b2&amp;quot;&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b1.&lt;span class=&#34;title function_&#34;&gt;speak&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b2.&lt;span class=&#34;title function_&#34;&gt;speak&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Foo&lt;/span&gt; = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;init&lt;/span&gt;: &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;who&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;me&lt;/span&gt; = who;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;identify&lt;/span&gt;: &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;I am &amp;quot;&lt;/span&gt; + &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;me&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Bar&lt;/span&gt; = &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;create&lt;/span&gt;( &lt;span class=&#34;title class_&#34;&gt;Foo&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Bar&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;speak&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;alert&lt;/span&gt;( &lt;span class=&#34;string&#34;&gt;&amp;quot;Hello, &amp;quot;&lt;/span&gt; + &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;identify&lt;/span&gt;() + &lt;span class=&#34;string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; b1 = &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;create&lt;/span&gt;( &lt;span class=&#34;title class_&#34;&gt;Bar&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b1.&lt;span class=&#34;title function_&#34;&gt;init&lt;/span&gt;( &lt;span class=&#34;string&#34;&gt;&amp;quot;b1&amp;quot;&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; b2 = &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;create&lt;/span&gt;( &lt;span class=&#34;title class_&#34;&gt;Bar&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b2.&lt;span class=&#34;title function_&#34;&gt;init&lt;/span&gt;( &lt;span class=&#34;string&#34;&gt;&amp;quot;b2&amp;quot;&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b1.&lt;span class=&#34;title function_&#34;&gt;speak&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b2.&lt;span class=&#34;title function_&#34;&gt;speak&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在这种委托的思路下，不存在严格的父子关系，甚至不存在继承和类的说法。全程通过&lt;code&gt;Object.create()&lt;/code&gt;建立起对象和对象的联系，连&lt;code&gt;new&lt;/code&gt;也是不建议使用的。&lt;/p&gt;
&lt;p&gt;但是这种思路也有个明显的问题，“子类”没法定义“父类”的同名方法，因为整个程序建立在&lt;code&gt;[[prototype]]&lt;/code&gt;联系的基础上，重复命名将会隔断连接。&lt;/p&gt;
&lt;p&gt;作者并不推荐匿名函数的使用，认为：1，追踪调试栈困难；2，难以自引用；3，代码变得不好理解。这点上我是保留意见的。&lt;/p&gt;
&lt;h3 id=&#34;类型自省&#34;&gt;&lt;a href=&#34;#类型自省&#34; class=&#34;headerlink&#34; title=&#34;类型自省&#34;&gt;&lt;/a&gt;类型自省&lt;/h3&gt;&lt;p&gt;类型自省即&lt;code&gt;instanceof&lt;/code&gt;，而这个操作符是依赖于&lt;code&gt;[[prototype]]&lt;/code&gt;中的constructor属性的，这个属性除了不可枚举外，相较其他属性并没有特别之处。重写或者&lt;code&gt;[[prototype]]&lt;/code&gt;的改变就可以改变它。因此，&lt;code&gt;instanceof&lt;/code&gt;在很多情况下可能并不会那么可靠。&lt;/p&gt;
&lt;p&gt;使用鸭子类型的类型自省就更加不可靠了。&lt;/p&gt;
&lt;p&gt;在作者提出的OLOO范式中，采取&lt;code&gt;isPrototypeOf()&lt;/code&gt;和&lt;code&gt;Object.getPrototypeOf()&lt;/code&gt;进行类型自省。&lt;/p&gt;
&lt;h3 id=&#34;新的class关键字&#34;&gt;&lt;a href=&#34;#新的class关键字&#34; class=&#34;headerlink&#34; title=&#34;新的class关键字&#34;&gt;&lt;/a&gt;新的&lt;code&gt;class&lt;/code&gt;关键字&lt;/h3&gt;&lt;p&gt;为了便于“类”思维编程者，&lt;code&gt;class&lt;/code&gt;可以说是一大福音。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不再有&lt;code&gt;.prototype&lt;/code&gt;的困扰&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extends&lt;/code&gt;一键式继承&lt;/li&gt;
&lt;li&gt;&lt;code&gt;super&lt;/code&gt;对多态的支持&lt;/li&gt;
&lt;li&gt;语法上使用更加贴近OOP语言&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但实际上，这里的&lt;code&gt;class&lt;/code&gt;只是语法糖，它还是没实现从类（“蓝图”）到实例（“建筑”）以及从父类到子类的复制，还建立在&lt;code&gt;[[prototype]]&lt;/code&gt;的基础上。&lt;a href=&#34;https://github.com/getify/You-Dont-Know-JS/blob/1ed-zh-CN/this%20%26%20object%20prototypes/apA.md&#34;&gt;原文&lt;/a&gt;给出了很多例子说明这点。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在传统面向类的语言中，你从不会在晚些时候调整类的定义，所以类设计模式不提供这样的能力。但是JS的一个最强大的部分就是它是动态的，而且任何对象的定义都是（除非你将它设定为不可变）不固定的可变的东西。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;换句话说，class 好像在告诉你：“动态太坏了，所以这可能不是一个好主意。这里有看似静态语法，把你的东西静态编码。”&lt;/p&gt;
&lt;p&gt;关于 JavaScript 的评论是多么悲伤啊：动态太难了，让我们假装成（但实际上不是！）静态吧。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
        <category term="读书笔记" />
        <category term="JavaScript" />
        <updated>2017-12-13T12:54:12.000Z</updated>
    </entry>
    <entry>
        <id>http://shenlvmeng.github.com/blog/2017/11/04/sapiens-a-brief-history-of-humankind/</id>
        <title>《人类简史》读书笔记</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2017/11/04/sapiens-a-brief-history-of-humankind/"/>
        <content type="html">&lt;p&gt;《人类简史》是几年前的畅销书，早有耳闻。它不是对智人几万年来的历史事件像讲故事似的一个个娓娓道来，反而从生物学、社会学、宗教、经济、人文等各个方面提出了相当有深度的观点和见解，包括认知革命、农业革命、帝国与金钱、科技革命等方面的理解让我大开眼界。虽然了解了人类在这些方面的种种真相，对日常生活似乎也不会有什么改善，这并不妨碍它成为一本好书。总而言之，《人类简史》值得一读。&lt;/p&gt;
&lt;h3 id=&#34;认知革命&#34;&gt;&lt;a href=&#34;#认知革命&#34; class=&#34;headerlink&#34; title=&#34;认知革命&#34;&gt;&lt;/a&gt;认知革命&lt;/h3&gt;&lt;p&gt;智人不过是地球生物发展长河中的一种物种而已，与它类似的还有尼安德特人、丹尼索瓦人、梭罗人等其他人种。然而随着智人向地球的各个大陆蔓延时，这些人种却渐渐消失在历史长河中。在这个过程中，智人似乎发生了认知革命，在智人之前，许多动物都有自己的语言，作者认为不同的是，首先智人的语言能够传达更多的信息，从而执行复杂的计划；其次&lt;strong&gt;只有智人可以谈论并不真正存在的事物，同时相信一些不大可能的事情&lt;/strong&gt;。“虚构”这件事的重点在于人类可以拥有想象，同时可以&lt;strong&gt;一起想象&lt;/strong&gt;，编制出共同的虚构故事。这种“想象的现实”也是人类后面建立秩序的基础。&lt;/p&gt;
&lt;p&gt;早期的智人（农业革命前）主要靠狩猎和采集生存，营群体游牧生存。不论从工作时间、生存本领还是幸福程度甚至都比现代人高。他们的营养充分、能够免受饥饿或营养不良的影响、由于不依赖单一作物，受自然灾害影响较小，也很少受传染病影响。在度过艰难的童年时光后，多半能活到不错的岁数。在这个阶段，智人的信仰为&lt;strong&gt;泛神论&lt;/strong&gt;，即一切皆有灵，几乎任何一个地点，任何一个动物，任何一个植物都有自己的声明和情感。&lt;/p&gt;
&lt;p&gt;随着智人向各个大陆迁移、在从大陆向太平洋岛屿迁移，这股毁天灭地的人类洪水带来了大批的动植物灭绝，尤其是大型陆地动物。&lt;/p&gt;
&lt;h3 id=&#34;农业革命&#34;&gt;&lt;a href=&#34;#农业革命&#34; class=&#34;headerlink&#34; title=&#34;农业革命&#34;&gt;&lt;/a&gt;农业革命&lt;/h3&gt;&lt;p&gt;作者认为，农业革命是史上最大的谎言，看上去是人类驯服的小麦和水稻，实际上却是小麦和水稻驯服了人类。农业革命包括农业作物的驯服（植物），包括小麦、水稻、玉米、马铃薯、豆类等，也包括动物的驯服，如牛、狗、羊、鸡等。主要发生在中东、中国、中美洲，原因很简单：&lt;strong&gt;大多数的动植物无法驯化，这些好驯化的动植物只生长在特定的地方&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;人类以小麦等为主食完全是巧合，人们发现在作物丰盛的情况下，终于不用再四处迁移，从而转而通过种植这些农业作物为生，永久聚落开始形成，生活方式的变化使得人类需要考虑自然灾害等的影响，需要预留多余的粮食，同时还要从早到晚照料这些作物免受其他物种侵袭。&lt;strong&gt;这似乎是一个陷阱&lt;/strong&gt;，智人的身体构造其实并不是为了成天弯腰除草和挑水准备的，身体劳累的同时，传染病和暴力行为也威胁到人类的生存。人类以为自己再辛苦点，生活就会更好，等到群落规模达到上百上千人的时候才发现已经无法回头到以狩猎和采集为生的生活，因为此时只有这些农作物能养活这么多人。可受苦的不只是人类，农业革命中的动物也在饱受着痛苦，只因人类需要它们来过上更好的生活。&lt;/p&gt;
&lt;p&gt;随着农民生产出来的食物越来越多，加上运输技术的成熟，住在一起的人越来越多，渐渐形成村落和城镇，这个速度快到人类根本没有进化出让这么多人协同工作的本能。幸运的是，智人是个可以讲“谎话”和相信“谎话”的物种。于是一系列“虚构的故事”帮助人类建立稳定的秩序。同时为了保证秩序不会崩塌，还需要暴力的维持。除了暴力还需要一些真正的信徒。为了做到这一点，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;第一，对外的说法绝对要坚持它们千真万确、绝非虚构，并永远强调下去&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;第二，在教育上也要彻底贯彻同一套原则，要在一切事物中融入这套由想象建构出的秩序&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后，想象构建的秩序深深与真实的世界结合，想象构建的秩序塑造了我们的欲望，想象出的秩序存在于人与人的思想连接。作为人类，我们已经不可能摆脱想象建构出的秩序，因为为了让所有人都摆脱，我们需要想象出更强大的东西，从而只是换了种想象而已。即使最后真正摆脱了这种秩序，所谓犬儒主义者，将不可能建立起稳定的帝国。&lt;/p&gt;
&lt;h3 id=&#34;记忆过载&#34;&gt;&lt;a href=&#34;#记忆过载&#34; class=&#34;headerlink&#34; title=&#34;记忆过载&#34;&gt;&lt;/a&gt;记忆过载&lt;/h3&gt;&lt;p&gt;随着人口规模越来越大，“虚构的故事”越来越多，秩序也越来越复杂。下面几个原因催生出新的表达方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;人类并不像蜜蜂，将秩序深植在基因之中，随着人死亡，秩序并不会遗传下去&lt;/li&gt;
&lt;li&gt;大脑容量有限，储存不了这么多信息&lt;/li&gt;
&lt;li&gt;人类大脑的演化并不是为了储存抽象信息设计的，只习惯于存储动植物、地形等具体信息&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;于是，数字和文字逐渐形成，让“虚构的故事”能够更久地传承下去，文字也从记录这些秩序逐渐发展到完备的可以表达日常的生活。在管理机构里，专门有人记忆这些秩序，便于随时取出使用。文字对人类的重要影响是，&lt;strong&gt;逐渐改变了人类思维和看待这个世界的方式，从过去的自由连接、整体思考到分割思考、官僚主义&lt;/strong&gt;。而数字符号更是如今程序语言的基石。&lt;/p&gt;
&lt;p&gt;历史从无正义，这些“想象的故事”并不公平，总把人分成一些其实并不存在的分类，上层人享有各种权力和特权，下等人有的只有歧视和压迫，阶级由此产生。有趣的是，大多数人都会认为只有自己社会的阶级才是自然的，而其他社会的阶级分法实在虚伪。不幸的是，复杂的人类社会似乎确实需要这种由想象建构出来的阶级制度和歧视，而这种歧视往往会造成恶性循环（被歧视-&amp;gt;没有发展机会-&amp;gt;缺乏教育、贫穷-&amp;gt;被歧视），成为底层人士被歧视的所谓客观道理。&lt;/p&gt;
&lt;p&gt;关于性别歧视和偏见，许多人认知的所谓“自然”和“不自然”并不是生物学的概念，而是人为（如基督教神学）想象出的规则，指的是“符合创造自然的神的旨意”。各种规定男人就该如何、女人就该怎样的法律、规范、权利和义务，反映的多半只是人类的想象，而不是生物天生的现实。&lt;/p&gt;
&lt;h3 id=&#34;人类的融合统一&#34;&gt;&lt;a href=&#34;#人类的融合统一&#34; class=&#34;headerlink&#34; title=&#34;人类的融合统一&#34;&gt;&lt;/a&gt;人类的融合统一&lt;/h3&gt;&lt;p&gt;农业革命后，人类社会规模变得更大，维系社会秩序的想象故事也更为精致。人类从出生到死亡被各种虚构的故事和规则围绕，人们往往遵照着这种人造而非天生的直觉，这种直觉就叫做“文化”。原本整个世界是可以大致划分成多个相互隔离并具有一定规模的世界的。随着亚非世界的发展，不断吞噬了其他世界。如今，几乎所有人类都认同同一套地缘政治体系，即地球被划分出不同的国家；使用同一套经济制度，采用同一套法律制度和科学体系。有三种秩序促成了现在的大统一：金钱、帝国、宗教。&lt;/p&gt;
&lt;p&gt;农业革命后，随着城镇和王国的出现，人类的分工越来越细，从前一个部落内就可以完成的需求，如今可能需要找完全的陌生人。以物易物的交易有诸多的问题，某些社会采用集中的以物易物系统，但是大多数社会通过发明“钱”的概念解决。这里的&lt;strong&gt;“钱”完全是一个概念，存在于人们共同想象中的概念&lt;/strong&gt;。金钱不仅能够交换物品，还能用来积累财富，相比农作物等，金钱要好储存多了，同时也更便于携带。金钱在转换、存储、运输上的优势，造就了现如今如此复杂的商业系统。可以说，“金钱是人类有史以来最成功的互信系统”。&lt;/p&gt;
&lt;p&gt;帝国是一种政治秩序，往往统治许多民族，有着灵活的疆域。它对人类最大的益处在，四处征服、掠夺财富后，不只是拿来养活军队，同时也赞助了艺术、科学、司法等的发展。全球的帝国有个共同点就是，在征服它国时，都带着“征服你们是为你们好”，“统治全世界，为全人类带来福祉”的动机，与排外相反，帝国展现更多的是&lt;strong&gt;包容&lt;/strong&gt;。在帝国的统治下，帝国中的“它们”也渐渐认同了“我们”的概念，和帝国融为一体。在公元前200年左右，大多数人已经活在各个帝国之下。现如今，似乎要形成一个全球性的帝国。&lt;/p&gt;
&lt;p&gt;宗教的特点有二：1. 认为世界上有一种超人类的秩序，2. 宗教会以此发展出具有约束力的规范和价值观。只有具有&lt;strong&gt;普世特征&lt;/strong&gt;和&lt;strong&gt;推广特质&lt;/strong&gt;的才算得上是宗教。偶像崇拜发展大致是从泛神论到多神论再到一神论。多神论认为世界由一群神威浩荡的神灵统治，而主宰世界的最高权利不带有私心和偏见，在需要时，和特定的神进行交易就可以得偿所愿。随着时间推移，许多多神论者开始对自己信仰的某位神灵越来越虔诚，也慢慢偏离多神论概念，形成一神论。一神论者通常认为自己信奉的神就是唯一的神，自然会批评其他的神不可信，这点不同于多神论。&lt;/p&gt;
&lt;p&gt;二元论宗教为了解决“恶的难题”，即为什么世界会有苦难，人为什么会犯错，应运而生。对二元论者来说，掌握世界的不是一个无所不能的神，还有不受控制的恶。佛教认为人遇到事情会产生欲念，欲念会造成不满，释迦牟尼认为重点要看清事情本质，而不是它带来的感受，在专注于实际感受而非欲求和幻想时，原来的欲求就换来了圆满和寂静，称为涅槃。&lt;/p&gt;
&lt;p&gt;后世的崇拜对象由神变成了人或是智人的群体，从而产生了人文主义，而根据人文主义者对人性定义的不同，又有自由人文主义、社会人文主义等。&lt;/p&gt;
&lt;h3 id=&#34;科学革命&#34;&gt;&lt;a href=&#34;#科学革命&#34; class=&#34;headerlink&#34; title=&#34;科学革命&#34;&gt;&lt;/a&gt;科学革命&lt;/h3&gt;&lt;p&gt;现代科学和以往的知识体系最大的不同在：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;愿意承认自己的无知&lt;/li&gt;
&lt;li&gt;以观察和数学为中心&lt;/li&gt;
&lt;li&gt;通过科学获得新能力（即技术）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是，若是假设我们并非无所不知，现有知识也非全对，那这也适用于那些让数百万人得以有效合作的虚构故事，社会秩序岂不是要崩溃。因此，要维持社会政治秩序稳定，只能依靠不科学的方法，别无选择。毕竟科学还是要依靠宗教、意识形态才能获得经费，并让研究正当化。&lt;/p&gt;
&lt;p&gt;在精确科学的趋势下，连生物学、经济学、社会学、心理学等学科也得依靠上数学工具，从而发展出数学的新分支——统计学。知识就是力量，意在考验科学的一大标准就是能否应用于实践。不能免俗的是，科学活动也像其他文化活动一样，收到经济、政治和宗教利益的影响，科学研究一定得和某些宗教或意识形态联手，才有蓬勃发展的可能。&lt;/p&gt;
&lt;p&gt;近现代，在欧洲，帝国带着征服的心态不断扩张。同时，不得不提的说资本主义的发展来自对未来的信任，&lt;strong&gt;信用-&amp;gt;贷款-&amp;gt;发展-&amp;gt;回报-&amp;gt;信用&lt;/strong&gt;的良性循环，现代经济建立在信任的基础上，使得饼越来越大，有钱也不是一件可耻的事。然而上面循环的一个基础就是：&lt;strong&gt;生产的利润必须再投资于提高产量&lt;/strong&gt;。这也是资本主义的原则，因此即使你是某个辛苦的工人，把收入的一部分拿出投资股票，你也算是个资本主义者。资本主义认为，经济发展就是至善。欧洲的商业型帝国就建立在资本主义的基础上，毕竟靠投资提高收入要好于缴税。&lt;/p&gt;
&lt;p&gt;哥伦布探索新大陆的举动，催生了帝国资本主义的奇妙循环：信贷-&amp;gt;新发现-&amp;gt;殖民地-&amp;gt;利润-&amp;gt;信任-&amp;gt;信贷。然而探险也是有风险的，股份有限公司随着产生，一次探险失败所有股东分担，避免血本无归。荷兰、英国等国家在此基础上，渐渐采用出售股份的方式，让部分债权人也能享有部分获利，这种股票的转手和买卖大行其道，从而催生了证券交易所，专门进行股票交易。以至于后面的战争也可能成为商品的一种。&lt;/p&gt;
&lt;p&gt;伴随科技革命的是工业的发展壮大。蒸汽机的出现前，只能靠人体来进行能量间的转化，学会驾驭和转化这些能量的同时，人类可以使用的能源也大大提升。工业催生了冷漠和传送带，一切都以产量为标的。与此同时，产生了全新的问题：&lt;strong&gt;谁来买这些产品？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为了避免这种灾难，一种伦理观便被发明出来：消费主义。有史以来，人们生活窘迫，多以勤俭为口号。然而消费主义的没得就是消费更多的产品和服务，鼓励所有人善待自己，宠爱自己，即使因此走上绝路，也在所不惜。在传统农业社会，饥荒的阴影挥之不去，而今天，肥胖却成为一大健康问题。资本主义和消费主义的伦理可以分为两面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有钱人的指导原则是——&lt;strong&gt;“投资”&lt;/strong&gt;！&lt;/li&gt;
&lt;li&gt;其他人的指导原则是——&lt;strong&gt;“购买”&lt;/strong&gt;！&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;现代生活&#34;&gt;&lt;a href=&#34;#现代生活&#34; class=&#34;headerlink&#34; title=&#34;现代生活&#34;&gt;&lt;/a&gt;现代生活&lt;/h3&gt;&lt;p&gt;随着工业的出现和发展，时刻表和生产线的概念随之出现，人们关心上下班时间，列车也开始设计列车时刻表，时间变得越来越精细。1847年，英国的火车业者齐聚一堂，同意以格林尼治天文台的时间为准，协调火车时刻表。最终在1880年，英国成为是一个统一全国时间的国家。而现代的一切都得按时完成，时间无所不在。&lt;/p&gt;
&lt;p&gt;工业革命后个人的力量逐渐摆脱家庭和社群，个人的命运不再完全由家庭长辈或是家族左右，人类的生活和思考方式也不再预设自己属于社群。家庭和社群力量减弱的同时，国家和市场力量变强，从而进一步使得个人不避依赖社群生存。如今，社群更多是发挥一些重要的情感功能。现代兴起了两大想象社群——“民族”和“消费大众”，前者是国家的想象社群，而后者是市场的想象社群。后者是指消费者们可能彼此并不认识，却因为相同的消费习惯和兴趣成为“同一伙人”（如粉丝）。&lt;/p&gt;
&lt;p&gt;过去两世纪，社会秩序变动不休。狄更斯曾在法国大革命时说过：“这是最好的年代，也是最坏的年代”。这句话同样可以用于现在。&lt;/p&gt;
&lt;p&gt;快乐并不存在于任何财富、健康和社群之类的客观条件，而是客观条件和主管期望之间是否相符。所谓的快乐更可能只是让个人对意义的错觉和现行的集体错觉达成同步而已。&lt;/p&gt;
</content>
        <category term="读书笔记" />
        <category term="人类" />
        <updated>2017-11-04T06:23:39.000Z</updated>
    </entry>
    <entry>
        <id>http://shenlvmeng.github.com/blog/2017/10/13/css-definitive-guide-content/</id>
        <title>《CSS权威指南》脉络</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2017/10/13/css-definitive-guide-content/"/>
        <content type="html">&lt;h3 id=&#34;CSS和文档&#34;&gt;&lt;a href=&#34;#CSS和文档&#34; class=&#34;headerlink&#34; title=&#34;CSS和文档&#34;&gt;&lt;/a&gt;CSS和文档&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;CSS的出现和特点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt;和&lt;code&gt;@import&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CSS注释&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;内联样式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;@import&lt;/code&gt;必须写在CSS文档的开头&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;选择器&#34;&gt;&lt;a href=&#34;#选择器&#34; class=&#34;headerlink&#34; title=&#34;选择器&#34;&gt;&lt;/a&gt;选择器&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;基本结构&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;元素选择器（分组选择器、通配选择器）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;类选择器&amp;#x2F;ID选择器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;属性选择器（具体属性、部分属性）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;后代选择器、兄弟选择器（&lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;伪类&amp;#x2F;伪元素选择器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;^=&lt;/code&gt;, &lt;code&gt;$=&lt;/code&gt;, &lt;code&gt;~=&lt;/code&gt;, &lt;code&gt;*=&lt;/code&gt;, &lt;code&gt;|=&lt;/code&gt;用在属性选择中的部分匹配里，eg：&lt;code&gt;span[class~=&amp;quot;bar&amp;quot;]&lt;/code&gt;，&lt;br&gt;其中&lt;code&gt;~=&lt;/code&gt;匹配空格隔开的字符，&lt;code&gt;*=&lt;/code&gt;匹配部分字符串，&lt;code&gt;|=&lt;/code&gt;匹配完整字符串或以字符串开头&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;常用的伪类选择器有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:link&lt;/code&gt; 拥有&lt;code&gt;href&lt;/code&gt;属性的&lt;strong&gt;未访问&lt;/strong&gt;地址&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:visited&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:focus&lt;/code&gt; 当前获得输入焦点的元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:hover&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:active&lt;/code&gt; 被用户激活的元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:first-child&lt;/code&gt; 第一个子元素，类似地还有&lt;code&gt;:last-child&lt;/code&gt;和&lt;code&gt;nth-child()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:lang()&lt;/code&gt; 根据语言选择&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:first-letter&lt;/code&gt;和&lt;code&gt;first-line&lt;/code&gt;针对元素第一个字母和第一行文本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:before&lt;/code&gt;和&lt;code&gt;:after&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;层叠关系&#34;&gt;&lt;a href=&#34;#层叠关系&#34; class=&#34;headerlink&#34; title=&#34;层叠关系&#34;&gt;&lt;/a&gt;层叠关系&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;优先级顺序（ID &amp;gt; 类、属性、伪类 &amp;gt; 元素、伪元素 &amp;gt; 通配或结合符&lt;code&gt;,&lt;/code&gt; &amp;gt; 继承的属性）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;内联样式和&lt;code&gt;!important&lt;/code&gt;的特殊性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;继承&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;层叠规则&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;来源权重关系（读者重要声明 &amp;gt; 创作者的重要声明 &amp;gt; 创作者正常声明 &amp;gt; 读者正常声明 &amp;gt; 用户代理声明）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;LVHA（&lt;code&gt;:link&lt;/code&gt; - &lt;code&gt;:visited&lt;/code&gt; - &lt;code&gt;:hover&lt;/code&gt; - &lt;code&gt;:active&lt;/code&gt;的声明顺序）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一个声明出现的越后，它的权重越大&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;值和单位&#34;&gt;&lt;a href=&#34;#值和单位&#34; class=&#34;headerlink&#34; title=&#34;值和单位&#34;&gt;&lt;/a&gt;值和单位&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;数字&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;百分数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;颜色（具名、rgb&amp;#x2F;rgba、十六进制）、Web安全颜色&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;长度单位（in&amp;#x2F;cm&amp;#x2F;mm&amp;#x2F;pt&amp;#x2F;pc&amp;#x2F;px，em&amp;#x2F;ex&amp;#x2F;rem&amp;#x2F;vw&amp;#x2F;vh&amp;#x2F;vmin&amp;#x2F;vmax）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;URL（&lt;code&gt;url(protocol://server/pathname)&lt;/code&gt;或&lt;code&gt;url(pathname)&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;关键字&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;角度&amp;#x2F;时间&amp;#x2F;频率&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CSS2.1中有一个所有属性共有的关键字：&lt;code&gt;inherit&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;字体&#34;&gt;&lt;a href=&#34;#字体&#34; class=&#34;headerlink&#34; title=&#34;字体&#34;&gt;&lt;/a&gt;字体&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;通用字体（serif&amp;#x2F;sans-serif&amp;#x2F;monospace&amp;#x2F;cursive&amp;#x2F;fantasy）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;指定字体&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;字体加粗（100~900，lighter&amp;#x2F;bolder）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;字体大小（xx-small ~ xx-large；绝对大小；百分数）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;字体风格和变形（font-style，font-variant）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;font&lt;/code&gt;属性（&lt;code&gt;[&amp;lt;font-style&amp;gt; || &amp;lt;font-variant&amp;gt; || &amp;lt;font-weight&amp;gt;]?&amp;lt;font-size&amp;gt;[/&amp;lt;line-height&amp;gt;]?&amp;lt;font-family&amp;gt;&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;font-face&lt;/code&gt;规则（&lt;code&gt;font-family&lt;/code&gt;，&lt;code&gt;font-style&lt;/code&gt;，&lt;code&gt;src&lt;/code&gt;等）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;衬线字体包括Times，Georgia；非衬线字体包括Helvetiva，Geneva，Verdana，Arial；Monospace字体包括Courier，Courier New&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;字体名称中包含空格或特殊字符时，建议用引号包裹&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一般地，400对应normal，700对应bold&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;字体大小是可以继承的，不过继承的是计算值而不是百分数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;italic&lt;/code&gt;是单独的字体风格，&lt;code&gt;oblique&lt;/code&gt;则是正常文本的倾斜版本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;small-caps&lt;/code&gt;表示小型大写字母&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;文本属性&#34;&gt;&lt;a href=&#34;#文本属性&#34; class=&#34;headerlink&#34; title=&#34;文本属性&#34;&gt;&lt;/a&gt;文本属性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;缩进（&lt;code&gt;text-indent&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;水平对齐（&lt;code&gt;text-align&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;垂直对齐（&lt;code&gt;line-height&lt;/code&gt;和&lt;code&gt;vertical-align&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;字间隔和字母间隔（&lt;code&gt;word-spacing&lt;/code&gt;和&lt;code&gt;letter-spacing&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;文本转换（&lt;code&gt;text-transfrom&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;文本装饰（&lt;code&gt;text-decoration&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;文本阴影（&lt;code&gt;text-shadow&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;空白符处理（&lt;code&gt;white-space&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;文本方向（&lt;code&gt;direction&lt;/code&gt;和&lt;code&gt;unicode-bidi&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;text-indent&lt;/code&gt;为负值时表示悬挂缩进效果&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;line-height&lt;/code&gt;有继承性，表示文本基线（baseline）间的距离，继承的仍然是计算值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;行内元素的行框由行间距和内容区组成&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;vertical-align&lt;/code&gt;只应用于行内元素、替换元素和单元格，且不能继承。它可以取百分数和长度值，相对于自身line-height计算。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在基线对齐时，将元素的&lt;strong&gt;底部&lt;/strong&gt;和行框的基线对齐&lt;/li&gt;
&lt;li&gt;取值为&lt;code&gt;sub&lt;/code&gt;或&lt;code&gt;super&lt;/code&gt;时，元素的基线（或底端）将升高或降低&lt;/li&gt;
&lt;li&gt;取值&lt;code&gt;bottom&lt;/code&gt;或&lt;code&gt;top&lt;/code&gt;时，相对行框的顶端和底端&lt;/li&gt;
&lt;li&gt;取值为&lt;code&gt;middle&lt;/code&gt;时，会把行内元素的中点与行框基线上方0.5ex（约为0.25em，因x-height而异）处对齐&lt;/li&gt;
&lt;li&gt;取值为数值时，会相对于父元素行框基线升高&lt;br&gt;最后，父元素的行框的行高会因此做调整&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;text-transform&lt;/code&gt;有&lt;code&gt;uppercase&lt;/code&gt;, &lt;code&gt;lowercase&lt;/code&gt;, &lt;code&gt;capitalize&lt;/code&gt;等几种选择，有继承性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;text-decoration&lt;/code&gt;有&lt;code&gt;underline&lt;/code&gt;, &lt;code&gt;overline&lt;/code&gt;, &lt;code&gt;line-through&lt;/code&gt;, &lt;code&gt;blink&lt;/code&gt;等几种选择，没有继承性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;text-shadow&lt;/code&gt;先确定阴影颜色，前两个长度值确定偏移距离，第三个值确定模糊半径，可以同时设置多个阴影效果&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;white-space&lt;/code&gt;行为如下表&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;值&lt;/th&gt;
&lt;th&gt;空白符&lt;/th&gt;
&lt;th&gt;换行符&lt;/th&gt;
&lt;th&gt;自动换行&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;pre-line&lt;/td&gt;
&lt;td&gt;合并&lt;/td&gt;
&lt;td&gt;保留&lt;/td&gt;
&lt;td&gt;允许&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;normal&lt;/td&gt;
&lt;td&gt;合并&lt;/td&gt;
&lt;td&gt;忽略&lt;/td&gt;
&lt;td&gt;允许&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nowrap&lt;/td&gt;
&lt;td&gt;合并&lt;/td&gt;
&lt;td&gt;忽略&lt;/td&gt;
&lt;td&gt;不允许&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pre&lt;/td&gt;
&lt;td&gt;保留&lt;/td&gt;
&lt;td&gt;保留&lt;/td&gt;
&lt;td&gt;不允许&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pre-wrap&lt;/td&gt;
&lt;td&gt;保留&lt;/td&gt;
&lt;td&gt;保留&lt;/td&gt;
&lt;td&gt;允许&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;盒模型&#34;&gt;&lt;a href=&#34;#盒模型&#34; class=&#34;headerlink&#34; title=&#34;盒模型&#34;&gt;&lt;/a&gt;盒模型&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;基本框与包含块&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;正常流&amp;#x2F;非替换元素&amp;#x2F;替换元素&amp;#x2F;块级元素&amp;#x2F;行内元素&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;水平属性（&lt;code&gt;width&lt;/code&gt;，&lt;code&gt;margin/border/padding-left/right&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;垂直属性（&lt;code&gt;height&lt;/code&gt;，&lt;code&gt;margin/border/padding-top/bottom&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;行内元素（em框、内容区、行间距、行内框、行框）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;元素的显示方式（&lt;code&gt;display&lt;/code&gt;，&lt;code&gt;inline-block&lt;/code&gt;和&lt;code&gt;run-in&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在水平属性中只有&lt;code&gt;width&lt;/code&gt;和外边距可以设置为&lt;code&gt;auto&lt;/code&gt;，其余属性必须设置为特定的值或默认为0。使用&lt;code&gt;auto&lt;/code&gt;将会弥补实际值和所需总和的差距，当格式化属性过度受限时，会强制把&lt;code&gt;margin-right&lt;/code&gt;设置为&lt;code&gt;auto&lt;/code&gt;。相反，不止一个&lt;code&gt;auto&lt;/code&gt;出现时，若&lt;code&gt;width&lt;/code&gt;不为&lt;code&gt;auto&lt;/code&gt;，则会将元素居中，出现三个&lt;code&gt;auto&lt;/code&gt;时，外边距都会设置为0。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;垂直属性类似上面，不一样的是，元素间的外边距会合并，留下较大的外边距。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于非替换元素，元素行内框高度等于&lt;code&gt;line-height&lt;/code&gt;的值；对于替换元素，则由内容区高度决定&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;行内元素的边框边界由&lt;code&gt;font-size&lt;/code&gt;决定，与&lt;code&gt;line-height&lt;/code&gt;无关。类似，内外边距不会影响行框的形成和布局。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;行内替换元素并没有自己的基线，所以说相对较好的方案是将其行内框底部和基线对齐。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;inline-block&lt;/code&gt;元素的&lt;code&gt;width&lt;/code&gt;未定义或声明为&lt;code&gt;auto&lt;/code&gt;时，元素会收缩来适应到框宽度刚好足够包含该内容&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;边距和边框&#34;&gt;&lt;a href=&#34;#边距和边框&#34; class=&#34;headerlink&#34; title=&#34;边距和边框&#34;&gt;&lt;/a&gt;边距和边框&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;基本元素框&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;外边距（负外边距和垂直外边距合并）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;行内元素的外边距&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;边框&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;内边距&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;行内元素的内边距&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;外边距的空白不能放置其他元素&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;内外边距设置为百分数时，相对于父元素的&lt;strong&gt;宽度&lt;/strong&gt;计算，这样做是为了避免高度上导致无限循环&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于行内元素，只有&lt;code&gt;line-height&lt;/code&gt;，&lt;code&gt;font-size&lt;/code&gt;和&lt;code&gt;vertical-align&lt;/code&gt;可以改变元素行高，为替换元素设置的外边距会影响行高&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;边框的默认属性为&lt;code&gt;none medium &amp;lt;color&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;元素的背景会延伸到内边距&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;左内&amp;#x2F;外边距应用到行内元素开始处，右内&amp;#x2F;外边距应用到行内元素结束处&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;背景与颜色&#34;&gt;&lt;a href=&#34;#背景与颜色&#34; class=&#34;headerlink&#34; title=&#34;背景与颜色&#34;&gt;&lt;/a&gt;背景与颜色&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;前景色（&lt;code&gt;color&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;背景色&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;背景图片&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;背景重复、背景定位（&lt;code&gt;background-position&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;背景大小（&lt;code&gt;background-size&lt;/code&gt;，CSS3新增）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一般来说，前景包括元素的&lt;strong&gt;文本和边框&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;前景色属性可以继承&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;所有背景属性都不可继承&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;背景图像放在指定的背景色之上&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;background&lt;/code&gt;简写属性为&lt;code&gt;background-color || background-image || background-repeat || background-attachment || background-position&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;浮动和定位&#34;&gt;&lt;a href=&#34;#浮动和定位&#34; class=&#34;headerlink&#34; title=&#34;浮动和定位&#34;&gt;&lt;/a&gt;浮动和定位&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;浮动元素&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;浮动定位规则&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;浮动行为和浮动内容的的重叠&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;清除（&lt;code&gt;clear&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;定位类型（&lt;code&gt;position&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;宽高限制（&lt;code&gt;max/min-width&lt;/code&gt;和&lt;code&gt;max/min-height&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;内容溢出（&lt;code&gt;overflow&lt;/code&gt;和&lt;code&gt;clip&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;元素可见性（&lt;code&gt;visibility&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;绝对定位、固定定位、相对定位&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;z-index&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;浮动元素的外边距不会合并&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;浮动的非替换元素需要指定&lt;code&gt;width&lt;/code&gt;，否则宽度将趋于0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;浮动元素的包含块为距离最近的块级祖先元素&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;行内框和浮动元素重叠时，边框和内容都在浮动内容之上；块级元素重叠时，内容在之上，边框和背景在之下显示&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;clear&lt;/code&gt;只应用于块级元素，清除区域不允许浮动元素进入&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;absolute&lt;/code&gt;元素会形成一个块级框&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;top&lt;/code&gt;等属性应用在&lt;code&gt;absolute&lt;/code&gt;元素时，描述其距离&lt;strong&gt;外边距边界&lt;/strong&gt;的距离&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可以通过&lt;code&gt;top&lt;/code&gt;, &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;, &lt;code&gt;bottom&lt;/code&gt;这样的定位信息确定绝对定位元素的内容区大小&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;clip&lt;/code&gt;通过&lt;code&gt;rect(top,right,bottom,left)&lt;/code&gt;确定绝对定位元素的剪裁区域&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;绝对定位元素的静态位置为其&lt;code&gt;position&lt;/code&gt;为&lt;code&gt;static&lt;/code&gt;时的位置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于绝对定位元素，垂直方向或水平方向设置&lt;code&gt;auto&lt;/code&gt;可以垂直或水平居中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于相对定位，如遇到过度受限的情况，一个值会设置为另一个的相反数，保证自洽。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;表布局&#34;&gt;&lt;a href=&#34;#表布局&#34; class=&#34;headerlink&#34; title=&#34;表布局&#34;&gt;&lt;/a&gt;表布局&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;表显示值（即相关&lt;code&gt;display&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;以行为主&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;匿名表对象插入法则&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;表标题&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;表单元格（&lt;code&gt;border-collapse&lt;/code&gt;, &lt;code&gt;border-spacing&lt;/code&gt;, &lt;code&gt;empty-cells&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;单元格边框合并&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;表大小（&lt;code&gt;table-layout&lt;/code&gt;, 高度, 对齐）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CSS的列和列组只能接受&lt;code&gt;border&lt;/code&gt;，&lt;code&gt;background&lt;/code&gt;，&lt;code&gt;width&lt;/code&gt;，&lt;code&gt;visibility&lt;/code&gt;四种属性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;单元格垂直对齐有4种可选值，&lt;code&gt;top&lt;/code&gt;, &lt;code&gt;bottom&lt;/code&gt;, &lt;code&gt;middle&lt;/code&gt;, &lt;code&gt;baseline&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;列表和生成内容&#34;&gt;&lt;a href=&#34;#列表和生成内容&#34; class=&#34;headerlink&#34; title=&#34;列表和生成内容&#34;&gt;&lt;/a&gt;列表和生成内容&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;列表类型、列表项图像、列表标志位置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;插入生成内容（&lt;code&gt;content&lt;/code&gt;，&lt;code&gt;attr(xxx)&lt;/code&gt;, &lt;code&gt;quote&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;计数器（&lt;code&gt;counter-reset&lt;/code&gt;, &lt;code&gt;counter-increment&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;列表样式可以简写为&lt;code&gt;&amp;lt;list-style-type&amp;gt; | &amp;lt;list-style-image&amp;gt; | &amp;lt;list-style-position&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在&lt;code&gt;quote&lt;/code&gt;属性里指定开闭字符串后，可以通过content，结合&lt;code&gt;:before&lt;/code&gt;，&lt;code&gt;:after&lt;/code&gt;伪类插入开闭quote的标记&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;用户界面样式&#34;&gt;&lt;a href=&#34;#用户界面样式&#34; class=&#34;headerlink&#34; title=&#34;用户界面样式&#34;&gt;&lt;/a&gt;用户界面样式&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;系统字体（如&lt;code&gt;caption&lt;/code&gt;等）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;系统颜色（已废弃）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;光标（&lt;code&gt;cursor&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;轮廓（&lt;code&gt;outline&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;cursor&lt;/code&gt;有下面一些常见的值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pointer&lt;/code&gt; 用在超链接上&lt;/li&gt;
&lt;li&gt;&lt;code&gt;text&lt;/code&gt; 用来纯文本上&lt;/li&gt;
&lt;li&gt;&lt;code&gt;move&lt;/code&gt; 用来指示目标可以被拖动，相关的还有&lt;code&gt;e-resize&lt;/code&gt;, &lt;code&gt;ne-resize&lt;/code&gt;, &lt;code&gt;se-resize&lt;/code&gt;等边缘的拖动标记&lt;/li&gt;
&lt;li&gt;&lt;code&gt;crosshair&lt;/code&gt; 用来指示可以选取范围，类似截屏的光标效果&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wait&lt;/code&gt; 显示等待标记&lt;/li&gt;
&lt;li&gt;&lt;code&gt;progress&lt;/code&gt; 指示等待的状态，同时表示可以进行其他操作&lt;/li&gt;
&lt;li&gt;&lt;code&gt;help&lt;/code&gt; 显示帮助光标&lt;/li&gt;
&lt;li&gt;&lt;code&gt;url()&lt;/code&gt; 自定义光标图像，建议设置缺省值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;outline&lt;/code&gt;的设置类似&lt;code&gt;border&lt;/code&gt;，由&lt;code&gt;outline-color&lt;/code&gt;, &lt;code&gt;outline-style&lt;/code&gt;, &lt;code&gt;outline-width&lt;/code&gt;组成&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;非屏幕媒体&#34;&gt;&lt;a href=&#34;#非屏幕媒体&#34; class=&#34;headerlink&#34; title=&#34;非屏幕媒体&#34;&gt;&lt;/a&gt;非屏幕媒体&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;分页媒体（&lt;code&gt;size&lt;/code&gt;和&lt;code&gt;page&lt;/code&gt;等）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;投影样式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;声音样式（&lt;code&gt;speak&lt;/code&gt;，&lt;code&gt;stress&lt;/code&gt;，&lt;code&gt;richness&lt;/code&gt;等）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可以在&lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt;标签的&lt;code&gt;media&lt;/code&gt;属性里指定媒体类型，或是在CSS文件中通过&lt;code&gt;@media xxx &amp;#123;&amp;#125;&lt;/code&gt;的形式指定&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="读书笔记" />
        <category term="CSS" />
        <category term="盒模型" />
        <category term="浮动" />
        <updated>2017-10-13T05:56:33.000Z</updated>
    </entry>
</feed>
