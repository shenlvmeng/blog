{
    "version": "https://jsonfeed.org/version/1",
    "title": "Shenlvmeng's Blog • All posts by \"egret\" tag",
    "description": "Be sharp, my friend.",
    "home_page_url": "http://shenlvmeng.github.com/blog",
    "items": [
        {
            "id": "http://shenlvmeng.github.com/blog/2018/10/01/some-tips-4/",
            "url": "http://shenlvmeng.github.com/blog/2018/10/01/some-tips-4/",
            "title": "工作中的遇到的一些小知识 4",
            "date_published": "2018-10-01T11:18:38.000Z",
            "content_html": "<h2 id=\"lottie-production环境下bug修复总结\"><a href=\"#lottie-production环境下bug修复总结\" class=\"headerlink\" title=\"lottie production环境下bug修复总结\"></a>lottie production环境下bug修复总结</h2><p>现象：<br>前段时间，用lottie-web做动画的时候，发现在有个别动画在本地测试时可以正常播放，打包上线后会报库代码内的错误</p>\n<p>猜测原因：<br>打包过程中的uglify有损压缩了lottie-web的代码，导致部分特性的bug</p>\n<p>修复方式：</p>\n<ol>\n<li>在webpack配置中，为lottie-web专门指定一个chunk</li>\n<li>在optimization中，指定一个lottie的cacheGroup，保证一个专门的chunk</li>\n<li>minimizer中uglifyJSConfig指定exclude为lottie的chunk名，避免被uglify</li>\n<li>resolve中，指定lottie-web resolve到’..&#x2F;node_modules&#x2F;lottie-web&#x2F;build&#x2F;player&#x2F;lottie.min.js’，使用压缩过的版本</li>\n</ol>\n<p>大致像下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">        <span class=\"attr\">lottie</span>: [<span class=\"string\">&#x27;lottie-web&#x27;</span>],</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">alias</span>: &#123;</span><br><span class=\"line\">            <span class=\"comment\">// ...</span></span><br><span class=\"line\">            <span class=\"string\">&#x27;lottie-web&#x27;</span>: path.<span class=\"title function_\">join</span>(__dirname, <span class=\"string\">&#x27;../node_modules/lottie-web/build/player/lottie.min.js&#x27;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">splitChunks</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">cacheGroups</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">lottie</span>: &#123;</span><br><span class=\"line\">                    <span class=\"attr\">chunks</span>: <span class=\"string\">&#x27;initial&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;lottie&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">test</span>: <span class=\"string\">&#x27;lottie&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">enforce</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">minimizer</span>: [</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">UglifyJsPlugin</span>(&#123;</span><br><span class=\"line\">                <span class=\"attr\">exclude</span>: <span class=\"regexp\">/lottie/</span>,</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>结果：<br>问题解决。</p>\n<h2 id=\"Android机型下rem适配不准的问题\"><a href=\"#Android机型下rem适配不准的问题\" class=\"headerlink\" title=\"Android机型下rem适配不准的问题\"></a>Android机型下rem适配不准的问题</h2><blockquote>\n<p>参考 <a href=\"https://www.jianshu.com/p/14f6ce51a75f\">https://www.jianshu.com/p/14f6ce51a75f</a></p>\n</blockquote>\n<p>通过比较<code>document.documentElement.style.fontSize</code>和<code>window.getComputedStyle(document.documentElement)[&#39;font-size&#39;]</code>，假设前者是a，后者是b，<code>a * a / b</code>计算得到和设计一致的尺寸。</p>\n<h2 id=\"3D旋转效果\"><a href=\"#3D旋转效果\" class=\"headerlink\" title=\"3D旋转效果\"></a>3D旋转效果</h2><p>利用CSS中的<code>backface-visibility: hidden;</code>属性，实现在<code>transform: rotateY(180deg)</code>时，页面翻转到不可见区域。</p>\n<h2 id=\"egret学习\"><a href=\"#egret学习\" class=\"headerlink\" title=\"egret学习\"></a>egret学习</h2><p>场景：H5小游戏开发</p>\n<p>投放场景：各种小游戏平台，也可以打包为Android、iOS、Windows Phone应用发布，甚至直接web访问H5页面</p>\n<p>开发语言：TypeScript</p>\n<p>开发方式：</p>\n<ul>\n<li>类Java的代码组织方式，MVC分离项目代码，M和C开发体验类似“用JavaScript写Java项目”。在View部分开发体验类似于用<code>canvas API写页面结构</code></li>\n<li>类Android的resource管理方式（定义json文件描述资源组和路径对应），在代码中用API动态分组或逐个load资源</li>\n<li>单一入口，流程上在stage加载完成后，load资源（同时给出loading页面），之后执行游戏逻辑</li>\n<li>使用dispatchEvent实现组件间的信息交流</li>\n</ul>\n<h3 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h3><p>入口文件为index.html。在其中引入manifest.json。读入所需的库文件后，根据DOM容器的<code>data-*</code>属性确定项目配置，以及项目入口<code>*.ts</code>（一般是<code>Main.ts</code>）。之后打包编译到<code>bin-debug</code>。</p>\n<p>业务逻辑放在<code>/src</code>下，资源文件放在<code>/resources</code>中，资源文件用类似于Android的形式进行存取管理。</p>\n<h3 id=\"视图\"><a href=\"#视图\" class=\"headerlink\" title=\"视图\"></a>视图</h3><p>Displayable元素可以添加到容器中显示。包含下面基类。</p>\n<ul>\n<li>displayableContainer 视图元素容器<ul>\n<li>stage</li>\n<li>scrollView</li>\n<li>sprite</li>\n</ul>\n</li>\n<li>bitmap</li>\n<li>bitmapText</li>\n<li>textField</li>\n<li>movieClip</li>\n<li>shape</li>\n</ul>\n<p>movieClip表示逐帧动画。生成方法如下：</p>\n<ol>\n<li><code>RES.getRes</code>获取资源</li>\n<li>使用factory方法构造movieClipData</li>\n<li>使用movieClipData构造movieClip</li>\n</ol>\n<p>简单动画用tween来实现。</p>\n<h3 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h3><ul>\n<li><code>egret publish</code>或run build。发布H5，runtime版本</li>\n<li>对应平台support工具，如Android、iOS、微信小程序</li>\n</ul>\n<p>不过在最新的egret launcher下，项目本身已经提供的发布到原生的快捷入口，参考<a href=\"http://developer.egret.com/cn/github/egret-docs/Native/native/projectsetting/index.html\">官方解释</a>。</p>\n<h3 id=\"难点\"><a href=\"#难点\" class=\"headerlink\" title=\"难点\"></a>难点</h3><p><strong>和React如何结合开发？</strong></p>\n<p>View层通过canvas、WebGL实现，不适合和React结合。</p>\n<p><strong>部署方式如何结合在App里</strong></p>\n<p>小游戏可以发布到HTML5平台，之后类似老的webview页面开发方式，部署到离线包平台或在线页面即可。</p>\n<h2 id=\"SSO实现方案\"><a href=\"#SSO实现方案\" class=\"headerlink\" title=\"SSO实现方案\"></a>SSO实现方案</h2><p>SSO - Single Sign On 单一站点登录。由一个站点的登录状态实现关联网站免登录。</p>\n<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>由sso.xxx.com记录用户登录态，其他需要使用同一登录态的网站需要同步该域名下的登录态cookie到自己的独立域名下。</p>\n<h3 id=\"实际场景\"><a href=\"#实际场景\" class=\"headerlink\" title=\"实际场景\"></a>实际场景</h3><p>一般公司内部的网站或ToC的集团网页间都有SSO控制，任意访问一个清除了所有cookie网页，观察network中开头的302报文即可发现实现SSO过程中的各跳转逻辑。</p>\n<p>实际步骤因实现而异：</p>\n<ol>\n<li>（转让控制权）访问目标网页，302到SSO的跳转特定页面，如jump.sso.xxx.com</li>\n<li>（写入cookie）302回目标网页的特定页面，如sso.mysite.com。该域名CNAME到sso.xxx.com的服务器</li>\n<li>（写入cookie）sso.mysite.com写入cookie到自己的同域名下，再次302到目标网页，完成SSO过程</li>\n</ol>\n<p>或者</p>\n<ol>\n<li>同上</li>\n<li>（写入cookie）jump.sso.xxx.com做cookie的检查确认，通过url的方式写入回调的user session，再302回mysite.com。</li>\n<li>（写入cookie）mysite.com的后台对应路由根据URL里的回调写入cookie，302到目标页面</li>\n</ol>\n<p>在写入cookie到新域名过程中，可以有不同的实现方式。</p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>第一步302到sso.xxx.com的时候已经可以带上xxx.com的cookie了，但是由于浏览器安全限制，并不能直接set cookie到独立域名下。需要再次302回原始域名，CNAME到sso的服务器，实现set cookie到独立域名。</p>\n<p>为了保证安全性，CNAME到sso的sso.mysite.com所传递的参数需要有安全机制保证。如时间戳、秘钥等保证请求的完整性。避免中间人伪造域名下的请求。同时，链接本身也应有<strong>时效性</strong>，在超过时间范围失效，避免拦截链接，实现钓鱼网站获取sso.xxx.com的登录态。</p>\n<p>具体步骤：</p>\n<ol>\n<li>302到jump.sso.xxx.com后，进行权限检查判断域名是否允许同步，匹配SSO的cookie域名下的cookie取交集，得到需要同步的cookie。</li>\n<li>通过以上两步后，302到sso.mysite.com，url中带上cookie和安全相关的参数</li>\n<li>根据安全参数校验、target是否允许同步，决定返回403还是302。</li>\n<li>通过校验后，同步登录态cookie，302到目标网页</li>\n</ol>\n<p>清除登录态时，如何做到相关域名的同时清除，还需要额外设计。</p>\n<p>当然，如果sso只在内网使用，在jump.sso.xxx.com做完安全验证后，通过url将结果交由sso.mysite.com设置登录态Cookie，要更为简洁。</p>\n<h2 id=\"git-branch-rename\"><a href=\"#git-branch-rename\" class=\"headerlink\" title=\"git branch rename\"></a>git branch rename</h2><p>如果分支在远端也有的话，工作需要分为本地和远端两部分。</p>\n<ol>\n<li>重命名本地分支</li>\n</ol>\n<ul>\n<li>如果就在该分支  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -m new-name</span><br></pre></td></tr></table></figure></li>\n<li>如果在其他分支  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -m old-name new-name</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"2\">\n<li>删除原分支，推送新分支<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin :old-name new-name</span><br></pre></td></tr></table></figure></li>\n<li>重置upstream设置<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin -u new-name</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"webpack无痛mock方案\"><a href=\"#webpack无痛mock方案\" class=\"headerlink\" title=\"webpack无痛mock方案\"></a>webpack无痛mock方案</h2><p>使用webpack-api-mocker实现，对比axios-mock-adapter和其余方案有几个优势：</p>\n<ul>\n<li>mock部分代码和业务代码分离开，让网络请求部分代码（&#x2F;apis）有清晰的逻辑，不混杂业务无关内容</li>\n<li>热更新，保存即生效</li>\n<li>本地dev环境无痛切换到production环境，无需修改任何代码</li>\n<li>基于webpack-dev-server，和整个项目耦合，无需本地起服务<br>本地开发时，配置webpack.dev.config.js，在devServer部分的配置中加入apiMocker即可。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> apiMocker = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;webpack-api-mocker&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">        <span class=\"title function_\">before</span>(<span class=\"params\">app</span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">apiMocker</span>(app, path.<span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;./mock/index.js&#x27;</span>))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> 对应的路径下，写入mock数据和路径即可，可以灵活组织各模块的mock数据：</span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;GET /user/info&#x27;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;code&quot;</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;message&quot;</span>: <span class=\"string\">&quot;success&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;data&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"comment\">// your mock data</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&#x27;POST /user/update&#x27;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;code&quot;</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;message&quot;</span>: <span class=\"string\">&quot;success&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;data&quot;</span>: <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = proxy;</span><br></pre></td></tr></table></figure>\n\n<p>更多使用，参考webpack-api-mocker文档。</p>\n<h2 id=\"webpack配置使用es6语法\"><a href=\"#webpack配置使用es6语法\" class=\"headerlink\" title=\"webpack配置使用es6语法\"></a>webpack配置使用es6语法</h2><p>如今现代的前端开发早已采用全es6的语法书写，然而webpack的配置文件需要通过node解析执行，一般还使用es5的语法书写。在需要使用<code>import</code>，<code>export</code>，数组、对象解构等最新特性时就很蛋疼。</p>\n<p>比如在最近的开发中，使用<code>webpack-api-mocker</code>时，希望拆分不同领域的接口到不同文件，最后通过对象结构的方式聚合在mocker的入口文件中。使用es5的语法就很麻烦。</p>\n<p>实际上，让webpack使用babel解析配置文件分两步即可：</p>\n<ol>\n<li><code>yarn add -D babel-register</code>，让webpack能够使用babel-loader转译配置文件</li>\n<li>修改配置文件后缀为，<code>webpack.config.babel.js</code>，webpack会使用<code>.js</code>前的字符串作为loader</li>\n</ol>\n<p>之后就可以愉快地使用es6语法写配置文件了。</p>\n<h2 id=\"autoprefixer-remove-webkit-box-orient解决方案\"><a href=\"#autoprefixer-remove-webkit-box-orient解决方案\" class=\"headerlink\" title=\"autoprefixer remove -webkit-box-orient解决方案\"></a>autoprefixer remove <code>-webkit-box-orient</code>解决方案</h2><p>autoprefixer是postcss的插件，会根据browser list，删除一些autodated的样式，其中就包括<code>-webkit-box-orient</code>这个用于hack实现多行省略号的CSS样式。</p>\n<p>几种方法：</p>\n<ul>\n<li>设置autoprefixer，<code>&#123;remove: false&#125;</code>，保留autodated的样式规则</li>\n<li>添加flexbox 2009老旧浏览器到broswer list中</li>\n<li>如下，通过注释临时disable autoprefixer</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* autoprefixer: ignore next */</span></span><br><span class=\"line\">-webkit-box-orient: vertical;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "rem",
                "lottie",
                "backface-visibility",
                "egret",
                "mock",
                "SSO",
                "autoprefixer"
            ]
        }
    ]
}