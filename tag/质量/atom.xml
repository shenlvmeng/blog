<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://shenlvmeng.github.com/blog</id>
    <title>Shenlvmeng&#39;s Blog • Posts by &#34;质量&#34; tag</title>
    <link href="http://shenlvmeng.github.com/blog" />
    <updated>2022-08-25T14:37:19.000Z</updated>
    <category term="总结" />
    <category term="制度" />
    <category term="道德" />
    <category term="文官" />
    <category term="万历" />
    <category term="明朝" />
    <category term="读书笔记" />
    <category term="展望" />
    <category term="flag" />
    <category term="2019" />
    <category term="2020" />
    <category term="2018" />
    <category term="2021" />
    <category term="2022" />
    <category term="2023" />
    <category term="面试" />
    <category term="前端" />
    <category term="FAQ" />
    <category term="HTML" />
    <category term="CSS" />
    <category term="style guide" />
    <category term="编程" />
    <category term="范式" />
    <category term="设计" />
    <category term="艺术" />
    <category term="质量" />
    <category term="回忆" />
    <category term="老朋友" />
    <category term="async_hooks" />
    <category term="cls-hooked" />
    <category term="logId" />
    <category term="二叉搜索树" />
    <category term="算法" />
    <category term="C" />
    <category term="Hash" />
    <category term="布隆过滤器" />
    <category term="字符串检索" />
    <category term="录音" />
    <category term="getUserMedia" />
    <category term="AudioContext" />
    <category term="PCM" />
    <category term="WAVE" />
    <category term="canvas" />
    <category term="流程图" />
    <category term="d3" />
    <category term="g6" />
    <category term="zrender" />
    <category term="processOn" />
    <category term="绘图" />
    <category term="动画" />
    <category term="SDN" />
    <category term="cbench" />
    <category term="安装说明" />
    <category term="攻略" />
    <category term="流水账" />
    <category term="成都" />
    <category term="重庆" />
    <category term="武汉" />
    <category term="架构" />
    <category term="组件" />
    <category term="重构" />
    <category term="代码" />
    <category term="代码风格" />
    <category term="CORS" />
    <category term="跨域" />
    <category term="数据可视化" />
    <category term="爬虫" />
    <category term="chrome" />
    <category term="crx" />
    <category term="扩展" />
    <category term="盒模型" />
    <category term="浮动" />
    <category term="Reactive Programming" />
    <category term="JavaScript" />
    <category term="Cycle.js" />
    <category term="Dart" />
    <category term="最佳实践" />
    <category term="引流" />
    <category term="universal-link" />
    <category term="app-link" />
    <category term="脚手架" />
    <category term="degit" />
    <category term="git" />
    <category term="设计模式" />
    <category term="类" />
    <category term="接口" />
    <category term="抽象类" />
    <category term="Docker" />
    <category term="ONOS" />
    <category term="控制器" />
    <category term="虚拟化" />
    <category term="DOM" />
    <category term="笔记" />
    <category term="UX" />
    <category term="UED" />
    <category term="准则" />
    <category term="Java" />
    <category term="Ruby" />
    <category term="反射" />
    <category term="编程范式" />
    <category term="鸭子类型" />
    <category term="管理" />
    <category term="效率" />
    <category term="知识工作者" />
    <category term="卓有成效" />
    <category term="Elm" />
    <category term="框架" />
    <category term="函数式编程" />
    <category term="虚网映射" />
    <category term="Javascript" />
    <category term="并发" />
    <category term="event loop" />
    <category term="JavaSript" />
    <category term="Express" />
    <category term="源码" />
    <category term="覆盖率" />
    <category term="端到端测试" />
    <category term="istanbul" />
    <category term="istanbuljs" />
    <category term="代码覆盖率" />
    <category term="istanbul-middleware" />
    <category term="代码插桩" />
    <category term="require钩子" />
    <category term="babel-plugin-istanbul" />
    <category term="css" />
    <category term="html5" />
    <category term="flex" />
    <category term="javascript" />
    <category term="roadmap" />
    <category term="闭包" />
    <category term="Haskell" />
    <category term="monad" />
    <category term="后端" />
    <category term="管理后台" />
    <category term="egg.js" />
    <category term="工作流" />
    <category term="pull request" />
    <category term="黑客与画家" />
    <category term="创业" />
    <category term="golang" />
    <category term="语言学习" />
    <category term="骑行" />
    <category term="海南" />
    <category term="图文" />
    <category term="reflow" />
    <category term="repaint" />
    <category term="命名法" />
    <category term="成功学" />
    <category term="自我建设" />
    <category term="HTTP" />
    <category term="HTTP/2" />
    <category term="SPDY" />
    <category term="QUIC" />
    <category term="HTTPS" />
    <category term="状态码" />
    <category term="网络攻击" />
    <category term="介绍" />
    <category term="图片渲染" />
    <category term="html2canvas" />
    <category term="dom-to-image" />
    <category term="electron" />
    <category term="indexedDB" />
    <category term="异步" />
    <category term="Generator" />
    <category term="thunk" />
    <category term="async" />
    <category term="函数表达式" />
    <category term="对象" />
    <category term="继承" />
    <category term="类型转换" />
    <category term="==" />
    <category term="类型判断" />
    <category term="猫" />
    <category term="杀手" />
    <category term="管理学" />
    <category term="领导力" />
    <category term="梯队" />
    <category term="移动端" />
    <category term="UI" />
    <category term="自适应" />
    <category term="rem" />
    <category term="Electron" />
    <category term="GUI" />
    <category term="gpx" />
    <category term="template" />
    <category term="Electron Builder" />
    <category term="PWA" />
    <category term="方法论" />
    <category term="夜话" />
    <category term="多线" />
    <category term="生活" />
    <category term="密码" />
    <category term="密钥" />
    <category term="技改" />
    <category term="Vue" />
    <category term="gulp" />
    <category term="瀑布流" />
    <category term="电影" />
    <category term="PHP" />
    <category term="参考" />
    <category term="思维" />
    <category term="学习能力" />
    <category term="右脑" />
    <category term="经济学" />
    <category term="宏观经济学" />
    <category term="术语" />
    <category term="GDP" />
    <category term="CPI" />
    <category term="储蓄" />
    <category term="投资" />
    <category term="金融市场" />
    <category term="股票" />
    <category term="债券" />
    <category term="美联储" />
    <category term="失业" />
    <category term="货币" />
    <category term="现值" />
    <category term="准备金" />
    <category term="货币中性" />
    <category term="通货膨胀" />
    <category term="汇率" />
    <category term="购买力" />
    <category term="净出口" />
    <category term="资产净流出" />
    <category term="总需求" />
    <category term="总供给" />
    <category term="流动性偏好" />
    <category term="乘数效应" />
    <category term="菲利普斯曲线" />
    <category term="微观经济学" />
    <category term="供求" />
    <category term="贸易" />
    <category term="市场" />
    <category term="税" />
    <category term="剩余" />
    <category term="外部性" />
    <category term="公共物品" />
    <category term="公共资源" />
    <category term="生产成本" />
    <category term="利润" />
    <category term="垄断" />
    <category term="价格歧视" />
    <category term="寡头" />
    <category term="垄断竞争" />
    <category term="生产要素市场" />
    <category term="贫困" />
    <category term="消费者选择理论" />
    <category term="不对称信息" />
    <category term="政治经济学" />
    <category term="行为经济学" />
    <category term="VSCode" />
    <category term="编辑器" />
    <category term="IDE" />
    <category term="习惯" />
    <category term="lint" />
    <category term="editorconfig" />
    <category term="commit message" />
    <category term="hybrid" />
    <category term="JSBridge" />
    <category term="Web Worker" />
    <category term="Service Worker" />
    <category term="文本编辑器" />
    <category term="quill" />
    <category term="结构化数据" />
    <category term="埋点" />
    <category term="raven.js" />
    <category term="前端监控" />
    <category term="React" />
    <category term="Hooks" />
    <category term="函数组件" />
    <category term="复用" />
    <category term="量子物理" />
    <category term="史话" />
    <category term="状态管理" />
    <category term="redux" />
    <category term="MobX" />
    <category term="代码质量" />
    <category term="重来" />
    <category term="requestAnimationFrame" />
    <category term="TypeScript" />
    <category term="路书" />
    <category term="gpx解析" />
    <category term="EXIF" />
    <category term="人类" />
    <category term="生存" />
    <category term="基因" />
    <category term="响应式编程" />
    <category term="RxJS" />
    <category term="成长" />
    <category term="业务" />
    <category term="思想" />
    <category term="程序设计" />
    <category term="心理学" />
    <category term="自我" />
    <category term="社会思维" />
    <category term="社会影响" />
    <category term="文化" />
    <category term="性别" />
    <category term="从众" />
    <category term="说服" />
    <category term="临床诊断" />
    <category term="陪审团" />
    <category term="司法" />
    <category term="物质主义" />
    <category term="健康" />
    <category term="软技能" />
    <category term="理财" />
    <category term="健身" />
    <category term="自我营销" />
    <category term="学习" />
    <category term="社会关系" />
    <category term="偏见" />
    <category term="攻击行为" />
    <category term="亲密关系" />
    <category term="友谊" />
    <category term="爱情" />
    <category term="利他" />
    <category term="冲突" />
    <category term="和解" />
    <category term="商业模式" />
    <category term="产品" />
    <category term="校园网" />
    <category term="互联网" />
    <category term="技术" />
    <category term="web开发" />
    <category term="哲思" />
    <category term="择偶观" />
    <category term="validator" />
    <category term="大文件" />
    <category term="visibilityChange" />
    <category term="IntersectionObserver" />
    <category term="图种" />
    <category term="draggable" />
    <category term="webpack" />
    <category term="z-index" />
    <category term="git submodule" />
    <category term="object-fit" />
    <category term="object-position" />
    <category term="BroadcastChannel" />
    <category term="extract-text-webpack-plugin" />
    <category term="lottie" />
    <category term="backface-visibility" />
    <category term="egret" />
    <category term="mock" />
    <category term="SSO" />
    <category term="autoprefixer" />
    <category term="polyfill" />
    <category term="Android" />
    <category term="ffmpeg" />
    <category term="React Hooks" />
    <category term="rollup" />
    <category term="Rollup" />
    <category term="mouseout" />
    <category term="mouseleave" />
    <category term="lint-staged" />
    <category term="吸顶" />
    <category term="图片组件" />
    <category term="CDN" />
    <category term="DNS" />
    <category term="CNAME" />
    <category term="ssh" />
    <category term="fis-receiver" />
    <category term="tmux" />
    <category term="origami" />
    <category term="promise" />
    <category term="encodeURI" />
    <category term="encodeURIComponent" />
    <category term="axios" />
    <category term="charles" />
    <category term="黑色幽默" />
    <category term="朋友" />
    <category term="梦" />
    <category term="濒死" />
    <category term="江南" />
    <category term="苏州" />
    <category term="无锡" />
    <category term="宜兴" />
    <category term="湖州" />
    <category term="南浔" />
    <category term="游记" />
    <category term="随笔" />
    <category term="群众" />
    <category term="理论" />
    <category term="实效" />
    <category term="测试" />
    <category term="长沙" />
    <category term="杭州" />
    <category term="湖南" />
    <category term="核酸" />
    <category term="美食" />
    <category term="青岛" />
    <category term="济南" />
    <category term="山东" />
    <category term="云南" />
    <category term="丽江" />
    <category term="大理" />
    <category term="西北" />
    <category term="银川" />
    <category term="西宁" />
    <category term="青海湖" />
    <category term="西海镇" />
    <category term="茶卡盐湖" />
    <category term="厦门" />
    <category term="感受" />
    <category term="C语言" />
    <category term="树" />
    <category term="主干开发" />
    <category term="GitFlow" />
    <category term="GithubFlow" />
    <category term="typescript" />
    <category term="类型系统" />
    <category term="首屏时间" />
    <category term="性能优化" />
    <category term="webrtc" />
    <category term="RTMP" />
    <category term="公司" />
    <category term="个人发展" />
    <category term="战略" />
    <category term="晋升" />
    <category term="哲学" />
    <category term="幸福" />
    <category term="人生" />
    <category term="叔本华" />
    <category term="Unix" />
    <entry>
        <id>http://shenlvmeng.github.com/blog/2022/08/25/all-about-code-2/</id>
        <title>关于编码的一切 ——《代码大全》 下</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2022/08/25/all-about-code-2/"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;文接&lt;a href=&#34;https://shenlvmeng.github.io/blog/2022/03/03/all-about-code/&#34;&gt;关于编码的一切 ——《代码大全》 下&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;软件质量&#34;&gt;&lt;a href=&#34;#软件质量&#34; class=&#34;headerlink&#34; title=&#34;软件质量&#34;&gt;&lt;/a&gt;软件质量&lt;/h2&gt;&lt;p&gt;在了解最基本的变量和语句组织后，这一部分围绕提高软件质量展开。&lt;/p&gt;
&lt;h3 id=&#34;概述&#34;&gt;&lt;a href=&#34;#概述&#34; class=&#34;headerlink&#34; title=&#34;概述&#34;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;软件的外在质量特性体现在：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;正确性&lt;/li&gt;
&lt;li&gt;可用性&lt;/li&gt;
&lt;li&gt;效率&lt;/li&gt;
&lt;li&gt;可靠性&lt;/li&gt;
&lt;li&gt;健壮性&lt;/li&gt;
&lt;li&gt;适应性&lt;/li&gt;
&lt;li&gt;完整性&lt;/li&gt;
&lt;li&gt;精确性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;内在质量特性体现在：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可维护性&lt;/li&gt;
&lt;li&gt;可扩展性&lt;/li&gt;
&lt;li&gt;可移植性&lt;/li&gt;
&lt;li&gt;可读性&lt;/li&gt;
&lt;li&gt;可测试性&lt;/li&gt;
&lt;li&gt;可理解性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而改善软件质量可以有很多技术：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确定目标&lt;/li&gt;
&lt;li&gt;测试策略&lt;/li&gt;
&lt;li&gt;非正式走查&lt;/li&gt;
&lt;li&gt;正式技术复查&lt;/li&gt;
&lt;li&gt;外部审查&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;开发过程中可以通过量化结果、制作原型、控制变更等手段提升质量。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不同的质量保障手段效率各不相同，多种缺陷检测办法结合、人工和计算机检测结合，效果会比单打独斗要好；然而没有任何一种错误检测办法可以解决全部问题&lt;/li&gt;
&lt;li&gt;越早引入软件的问题，修正代价越大，尽早开始代码质量保障工作&lt;/li&gt;
&lt;li&gt;需求或架构上的错误相比编码阶段会带来更广泛的影响&lt;/li&gt;
&lt;li&gt;改善质量可以降低开发成本&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;协同构建&#34;&gt;&lt;a href=&#34;#协同构建&#34; class=&#34;headerlink&#34; title=&#34;协同构建&#34;&gt;&lt;/a&gt;协同构建&lt;/h3&gt;&lt;p&gt;协同构建即在同行的帮助下完成代码构建。方式包括但不限于结对编程、正式检查、非正式技术复查、文档阅读等等。&lt;strong&gt;结对编程&lt;/strong&gt;和&lt;strong&gt;技术性复查&lt;/strong&gt;可以缩短开发周期，排查出更多错误，减少代码的维护时间。同时，同行间的协同构建也有助于快速提升公司开发者的开发水平。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;结对编程&lt;ul&gt;
&lt;li&gt;结对编程中，一名程序员敲代码，另外一名注意有没有出现错误，以及考虑策略性问题&lt;/li&gt;
&lt;li&gt;成功秘诀&lt;ul&gt;
&lt;li&gt;事先确定编程规范，避免琐碎争吵&lt;/li&gt;
&lt;li&gt;不编程的成员不能变成旁观者&lt;/li&gt;
&lt;li&gt;不需要在简单问题上使用结对编程&lt;/li&gt;
&lt;li&gt;灵活对结对成员轮换，让大家熟悉不同系统&lt;/li&gt;
&lt;li&gt;避免新手组队&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;正式检查&lt;ul&gt;
&lt;li&gt;一种特殊的复查，与会主持人负责组织事宜，按计划、概述、准备、与会人（非作者）阐述代码、详查报告、跟进等步骤推进&lt;/li&gt;
&lt;li&gt;针对代码而非作者&lt;/li&gt;
&lt;li&gt;最终由作者负责如何处理缺陷&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;走查&lt;ul&gt;
&lt;li&gt;走查是形式和流程都比较宽松的代码复查方式，时间较短，重点也在检查错误而非修正它们&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;代码阅读&lt;ul&gt;
&lt;li&gt;类似Code Review，关注点主要在代码本身，而非会议&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;公开演示：类似showcase&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;开发者测试&#34;&gt;&lt;a href=&#34;#开发者测试&#34; class=&#34;headerlink&#34; title=&#34;开发者测试&#34;&gt;&lt;/a&gt;开发者测试&lt;/h3&gt;&lt;p&gt;测试分单元测试、组件测试、集成测试、回归测试、系统测试，前两部分通常由开发者进行，后三部分由专门的测试人员进行。测试按是否了解测试对象内部工作原理也可以分为黑盒测试和白盒测试。最后要注意，&lt;strong&gt;测试 ≠ 调试&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;对于开发者而言，测试天生有些特别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;测试的目标是找出错误而非实现功能&lt;/li&gt;
&lt;li&gt;测试绝不可能彻底证明程序里没有错误&lt;/li&gt;
&lt;li&gt;测试无法改善软件质量，它本身只是一个指示器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;开发者测试在整个项目时间中大概占8% - 25%，在测试时有一些tips：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;写代码前先写测试用例，不会比后写多花功夫&lt;/li&gt;
&lt;li&gt;不止进行“干净测试”，也要考虑“肮脏测试”&lt;/li&gt;
&lt;li&gt;很容易对测试覆盖率过度乐观&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在现实世界中，要穷尽所有可能的输入是不可能的，&lt;strong&gt;测试不可能完全&lt;/strong&gt;，有些方法会起到作用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;strong&gt;路径数&lt;/strong&gt;计算计算用例的&lt;strong&gt;最少&lt;/strong&gt;数目，它可以保证所有代码的执行&lt;ul&gt;
&lt;li&gt;通过子程序时，开始记1&lt;/li&gt;
&lt;li&gt;遇到&lt;code&gt;if&lt;/code&gt;、&lt;code&gt;while&lt;/code&gt;、&lt;code&gt;repeat&lt;/code&gt;、&lt;code&gt;for&lt;/code&gt;、&lt;code&gt;and&lt;/code&gt;、&lt;code&gt;or&lt;/code&gt;或等价物时，+1&lt;/li&gt;
&lt;li&gt;遇到每一个&lt;code&gt;case&lt;/code&gt;语句，+1；没有缺省分支时，再+1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据流测试&lt;/strong&gt;可以覆盖到数据的变化情况&lt;ul&gt;
&lt;li&gt;数据有&lt;strong&gt;已定义&lt;/strong&gt;、&lt;strong&gt;已使用&lt;/strong&gt;、&lt;strong&gt;已销毁&lt;/strong&gt;状态&lt;/li&gt;
&lt;li&gt;子程序控制流有&lt;strong&gt;已进入&lt;/strong&gt;、&lt;strong&gt;已退出&lt;/strong&gt;状态&lt;/li&gt;
&lt;li&gt;测试所有的&lt;strong&gt;已定义&lt;/strong&gt;、&lt;strong&gt;已定义-已使用&lt;/strong&gt;组合，注意其他的组合顺序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一个好的测试用例可以覆盖可数据数据的一大部分&lt;/li&gt;
&lt;li&gt;用启发式方法去&lt;strong&gt;猜测错误&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;留意&lt;strong&gt;边界值&lt;/strong&gt;，如数组边界的off-by-one错误&lt;/li&gt;
&lt;li&gt;考察&lt;strong&gt;好数据&lt;/strong&gt;和&lt;strong&gt;坏数据&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;好数据：期望输入、最小正常值、最大正常值、旧数据兼容性&lt;/li&gt;
&lt;li&gt;坏数据：没有数据、过多数据、无效数据、长度错误、未初始化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用容易验证结果的测试数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于错误，也有一些先验的规律：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;符合八二法则、&lt;strong&gt;绝大多数错误通常和几个具有严重缺陷的子程序有关&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;大多数错误影响范围有限&lt;/li&gt;
&lt;li&gt;大多数构建错误来自编程人员的错误，多从自身想问题&lt;/li&gt;
&lt;li&gt;笔误是一个常见的问题根源&lt;/li&gt;
&lt;li&gt;错误理解需求也是常见原因&lt;/li&gt;
&lt;li&gt;大多数的错误都较易修正&lt;/li&gt;
&lt;li&gt;业界经验是，平均1000行代码发现1-25个错误，发布产品大概是1000行代码0.5个，&lt;/li&gt;
&lt;li&gt;同样留意，测试用例本身是否有误&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在当前的编程环境和工作条件下，容易找到很多测试框架，它们会包含脚手架、diff工具、测试数据生成器、覆盖率监测、日志记录、系统干扰器等。另外，自动化测试、测试问题复盘等对测试质量也有提升帮助。&lt;/p&gt;
&lt;h3 id=&#34;调试&#34;&gt;&lt;a href=&#34;#调试&#34; class=&#34;headerlink&#34; title=&#34;调试&#34;&gt;&lt;/a&gt;调试&lt;/h3&gt;&lt;p&gt;调试（debug）是寻找错误根本原因和纠正错误的过程。它和测试一样，本身不是提升代码质量的方法，而是诊断代码缺陷的手段。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调试の误区&lt;ul&gt;
&lt;li&gt;纯靠猜测找到问题所在&lt;/li&gt;
&lt;li&gt;不去花时间理解程序和问题&lt;/li&gt;
&lt;li&gt;暂时性的掩盖问题&lt;/li&gt;
&lt;li&gt;把问题推给硬件，而不思考是不是出在自己身上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;寻找缺陷的步骤&lt;ul&gt;
&lt;li&gt;让错误状态稳定下来 &amp;#x3D;&amp;gt; 稳定复现&lt;/li&gt;
&lt;li&gt;收集相关数据，构造错误原因假说&lt;/li&gt;
&lt;li&gt;通过测试或检查代码证实或证伪假说&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一个无法稳定重现的问题，可能和初始化或和时间有关系&lt;/li&gt;
&lt;li&gt;寻找缺陷的tips&lt;ul&gt;
&lt;li&gt;构建缺陷假说时，要能合理解释所有测试用例&lt;/li&gt;
&lt;li&gt;定位缺陷困难时，及时补充更多的测试用例复现问题，用&lt;strong&gt;多视图&lt;/strong&gt;的方式盲人摸象定位缺陷&lt;/li&gt;
&lt;li&gt;测试用例过于发散时，及时用用例否定一些假说&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;二分法&lt;/strong&gt;缩小嫌疑范围&lt;/li&gt;
&lt;li&gt;检查&lt;strong&gt;最近修改&lt;/strong&gt;或&lt;strong&gt;最近出过错&lt;/strong&gt;的代码&lt;/li&gt;
&lt;li&gt;小黄鸭调试法&lt;/li&gt;
&lt;li&gt;暂时休息一下&lt;/li&gt;
&lt;li&gt;蛮力调试&lt;ul&gt;
&lt;li&gt;抛弃有问题的代码，从头设计和编码&lt;/li&gt;
&lt;li&gt;抛弃整个程序，从头开始设计和编码&lt;/li&gt;
&lt;li&gt;不放过任何一个编译器错误&lt;/li&gt;
&lt;li&gt;手动遍历所有的循环&lt;/li&gt;
&lt;li&gt;更换编译环境或比那一起&lt;/li&gt;
&lt;li&gt;持续自动化测试&lt;/li&gt;
&lt;li&gt;显示代码中所有的打印日志信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;给启发式调试法一个deadline&lt;/li&gt;
&lt;li&gt;调试中避免心理惯性：人们总期望一个新现象类似他们见过的某种现象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修正缺陷&lt;ul&gt;
&lt;li&gt;修正问题前确保已经很好地理解了&lt;/li&gt;
&lt;li&gt;理解程序而不仅是问题&lt;/li&gt;
&lt;li&gt;验证对错误的分析或理解&lt;/li&gt;
&lt;li&gt;保留最初的源代码&lt;/li&gt;
&lt;li&gt;治本，而不要治标&lt;/li&gt;
&lt;li&gt;一次只改一个地方&lt;/li&gt;
&lt;li&gt;搜寻代码中还有没有类似的缺陷&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;调试工具&lt;ul&gt;
&lt;li&gt;源代码diff&lt;/li&gt;
&lt;li&gt;编译警告信息&lt;/li&gt;
&lt;li&gt;lint和代码自动修正&lt;/li&gt;
&lt;li&gt;性能剖测（profile）&lt;/li&gt;
&lt;li&gt;测试脚手架&lt;/li&gt;
&lt;li&gt;调试器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;重构&#34;&gt;&lt;a href=&#34;#重构&#34; class=&#34;headerlink&#34; title=&#34;重构&#34;&gt;&lt;/a&gt;重构&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;更多重构介绍可以参考这篇blog&lt;a href=&#34;https://shenlvmeng.github.io/blog/2020/08/17/refactoring-design-improvement/&#34;&gt;重构 —— 代码的实用性与艺术性&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;重构即在&lt;strong&gt;不改变软件外部行为的基础上，改变其内部结构&lt;/strong&gt;。即便是管理完善的项目，每个月都会发生需求变化，稳定不变的需求是个童话。&lt;/p&gt;
&lt;p&gt;代码出现以下“坏味道”（smell）时，代表需要重构了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代码重复&lt;/li&gt;
&lt;li&gt;子程序冗长&lt;/li&gt;
&lt;li&gt;嵌套过深&lt;/li&gt;
&lt;li&gt;内聚性差&lt;/li&gt;
&lt;li&gt;参数列表过长&lt;/li&gt;
&lt;li&gt;类和继承关系不合理&lt;/li&gt;
&lt;li&gt;基本数据类型过多&lt;/li&gt;
&lt;li&gt;“流浪数据”传递&lt;/li&gt;
&lt;li&gt;无所事事的类&lt;/li&gt;
&lt;li&gt;命名不当&lt;/li&gt;
&lt;li&gt;难理解的注释&lt;/li&gt;
&lt;li&gt;全局变量&lt;/li&gt;
&lt;li&gt;子程序需要前置或后置处理&lt;/li&gt;
&lt;li&gt;过早设计或过度设计&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;重构分级别有下面一些手段&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据级&lt;ul&gt;
&lt;li&gt;具名常量&lt;/li&gt;
&lt;li&gt;更可读的变量&lt;/li&gt;
&lt;li&gt;函数替代表达式&lt;/li&gt;
&lt;li&gt;中间变量&lt;/li&gt;
&lt;li&gt;减少重复使用变量&lt;/li&gt;
&lt;li&gt;类型码转成类或枚举类型&lt;/li&gt;
&lt;li&gt;类封装&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;语句级&lt;ul&gt;
&lt;li&gt;分解布尔表达式&lt;/li&gt;
&lt;li&gt;用可读名字的布尔函数替代布尔表达式&lt;/li&gt;
&lt;li&gt;合并条件语句中的重复代码片段&lt;/li&gt;
&lt;li&gt;&lt;code&gt;break&lt;/code&gt;或&lt;code&gt;return&lt;/code&gt;替代循环控制变量&lt;/li&gt;
&lt;li&gt;多态替换条件语句&lt;/li&gt;
&lt;li&gt;null对象替代空值检测&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;子程序&lt;ul&gt;
&lt;li&gt;内莲花&lt;/li&gt;
&lt;li&gt;提炼子程序&lt;/li&gt;
&lt;li&gt;转化为类&lt;/li&gt;
&lt;li&gt;增&amp;#x2F;删参数&lt;/li&gt;
&lt;li&gt;合并&amp;#x2F;拆分子程序&lt;/li&gt;
&lt;li&gt;读写操作分离&lt;/li&gt;
&lt;li&gt;传递成员&amp;#x2F;类&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;类实现&lt;ul&gt;
&lt;li&gt;值&amp;#x2F;引用对象转化&lt;/li&gt;
&lt;li&gt;成员函数&amp;#x2F;成员数据位置移动&lt;/li&gt;
&lt;li&gt;相似代码提炼到基类&lt;/li&gt;
&lt;li&gt;差异代码拆分到派生类&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;类接口&lt;ul&gt;
&lt;li&gt;类拆分&amp;#x2F;合并&lt;/li&gt;
&lt;li&gt;删除类&lt;/li&gt;
&lt;li&gt;去掉中间人&lt;/li&gt;
&lt;li&gt;继承替代委托&lt;/li&gt;
&lt;li&gt;委托替代继承&lt;/li&gt;
&lt;li&gt;引入外部成员函数&lt;/li&gt;
&lt;li&gt;引入扩展类&lt;/li&gt;
&lt;li&gt;封装不使用的成员函数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;系统级&lt;ul&gt;
&lt;li&gt;为无法控制的数据创建索引源&lt;/li&gt;
&lt;li&gt;工厂模式&lt;/li&gt;
&lt;li&gt;异常&amp;#x2F;错误处理代码选型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要想让重构不影响日常功能开发，需要考虑&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有一个代码版本管理工具&lt;/li&gt;
&lt;li&gt;重构步伐小一点&lt;/li&gt;
&lt;li&gt;同一时间只做一个重构&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;重新测试&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;增加测试用例&lt;/li&gt;
&lt;li&gt;检查代码更改&lt;/li&gt;
&lt;li&gt;根据重构风险选择重构方法&lt;/li&gt;
&lt;li&gt;不要把重构当成糟糕设计的挡箭牌&lt;/li&gt;
&lt;li&gt;避免用重构代替重写&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;重构可以在修改代码的时候进行，不论是增加修改子程序还是类，或者是修复缺陷。对于从未重构的糟糕代码，可以用一部分混乱的代码隔离复杂度，把理想规整的代码和混乱不堪的真实世界隔离开。&lt;/p&gt;
&lt;h3 id=&#34;代码调整策略&#34;&gt;&lt;a href=&#34;#代码调整策略&#34; class=&#34;headerlink&#34; title=&#34;代码调整策略&#34;&gt;&lt;/a&gt;代码调整策略&lt;/h3&gt;&lt;p&gt;代码调整指出于&lt;strong&gt;性能&lt;/strong&gt;考虑，对代码进行实现上的调整。本章主要讨论策略。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;动手前的考虑&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;性能≠代码速度&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;想清楚你确实在解决一个需要解决的问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;调整考量&lt;ul&gt;
&lt;li&gt;程序设计：设计架构时考虑整体性能，再为每个子系统、类设计要达到的资源占用目标&lt;/li&gt;
&lt;li&gt;和操作系统的交互&lt;/li&gt;
&lt;li&gt;代码编译&lt;/li&gt;
&lt;li&gt;硬件&lt;/li&gt;
&lt;li&gt;类和子程序设计&lt;/li&gt;
&lt;li&gt;代码调整&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;帕累托法则，又称八二法则，程序中20%的子程序耗费了80%的执行时间&lt;/li&gt;
&lt;li&gt;一些&lt;strong&gt;错误认知&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;减少代码行数就可以减少资源占用&lt;/li&gt;
&lt;li&gt;特定的写法会比其他的更快，代码也会更小（&lt;em&gt;要看编译环境&lt;/em&gt;）&lt;/li&gt;
&lt;li&gt;应当随时随地优化（&lt;em&gt;不成熟的优化不如不优化&lt;/em&gt;）&lt;/li&gt;
&lt;li&gt;运行速度和正确性同样重要&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;先提升代码可维护性，在程序完成且表现正确后，再去提升系统性能&lt;/li&gt;
&lt;li&gt;常见的低效率来源&lt;ul&gt;
&lt;li&gt;IO操作&lt;/li&gt;
&lt;li&gt;内存分页&lt;/li&gt;
&lt;li&gt;系统API调用&lt;/li&gt;
&lt;li&gt;脚本语言&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;性能测量：没有准确的性能测量就不要去做优化&lt;/li&gt;
&lt;li&gt;代码调整需要反复尝试，才能达到理想的性能提高&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;代码调整技术&#34;&gt;&lt;a href=&#34;#代码调整技术&#34; class=&#34;headerlink&#34; title=&#34;代码调整技术&#34;&gt;&lt;/a&gt;代码调整技术&lt;/h3&gt;&lt;p&gt;文接上章，本章讨论具体调整手段。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代码调整和重构相反，大多数情况下是以牺牲程序可读性为代价换取更高的性能&lt;/li&gt;
&lt;li&gt;调整手段&lt;ul&gt;
&lt;li&gt;逻辑&lt;ul&gt;
&lt;li&gt;知道答案后停止判断&lt;/li&gt;
&lt;li&gt;按照出现频率调整判断顺序，把容易为真的判断放在最前面&lt;/li&gt;
&lt;li&gt;表驱动法代替复杂表达式&lt;/li&gt;
&lt;li&gt;惰性求值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;循环&lt;ul&gt;
&lt;li&gt;把判断提出循环体&lt;/li&gt;
&lt;li&gt;展开小循环&lt;/li&gt;
&lt;li&gt;合并循环&lt;/li&gt;
&lt;li&gt;减少循环体内的操作&lt;/li&gt;
&lt;li&gt;用哨兵值提前结束循环&lt;/li&gt;
&lt;li&gt;把最忙的循环放在最内侧&lt;/li&gt;
&lt;li&gt;用低强度的计算代替高强度计算，如加法替代乘法，乘法代替幂运算&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数据&lt;ul&gt;
&lt;li&gt;使用整型而非浮点数&lt;/li&gt;
&lt;li&gt;减少数组维度&lt;/li&gt;
&lt;li&gt;使用辅助索引&lt;/li&gt;
&lt;li&gt;使用缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;表达式&lt;ul&gt;
&lt;li&gt;利用恒等式简化代码复杂度&lt;/li&gt;
&lt;li&gt;削弱计算强度&lt;/li&gt;
&lt;li&gt;编译期初始化&lt;/li&gt;
&lt;li&gt;小心系统函数，为了兼容最糟情况，系统函数会比较复杂&lt;/li&gt;
&lt;li&gt;事先算出结果&lt;/li&gt;
&lt;li&gt;删除公共表达式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;子程序&lt;ul&gt;
&lt;li&gt;子程序改为内联&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用低级语言重写&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;再次强调，&lt;strong&gt;没有性能优化测量就没有代码调整&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;系统考虑&#34;&gt;&lt;a href=&#34;#系统考虑&#34; class=&#34;headerlink&#34; title=&#34;系统考虑&#34;&gt;&lt;/a&gt;系统考虑&lt;/h2&gt;&lt;p&gt;这一部分站在系统的角度考虑构建过程中的程序规模、集成、工具等问题。&lt;/p&gt;
&lt;h3 id=&#34;程序规模带来的影响&#34;&gt;&lt;a href=&#34;#程序规模带来的影响&#34; class=&#34;headerlink&#34; title=&#34;程序规模带来的影响&#34;&gt;&lt;/a&gt;程序规模带来的影响&lt;/h3&gt;&lt;p&gt;软件规模的扩大可能会为你带来意料之外的大量问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果你习惯于开发小项目，那么你的第一个大型项目很可能会严重失控&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;沟通交流&lt;/strong&gt;：项目成员的扩大带来的交流路径不是加性的，是&lt;strong&gt;乘性&lt;/strong&gt;的&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;错误&lt;/strong&gt;：项目规模的扩大也会带来更高的缺陷密度&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;生产率&lt;/strong&gt;：大项目会带来更低的生产率&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;工作量&lt;/strong&gt;：软件构建的工作量和项目大小是线性关系，而其他活动的工作量则是非线性增加&lt;/li&gt;
&lt;li&gt;不同规模的代码从小到大可以称作程序、产品、系统、系统产品，没能意识到它们间的不同也是估算偏差的出现来源&lt;/li&gt;
&lt;li&gt;项目越正规，就越重视&lt;strong&gt;方法论&lt;/strong&gt;，不得不写的文档也会更多，撰写的文档也会更正规&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;构建管理&#34;&gt;&lt;a href=&#34;#构建管理&#34; class=&#34;headerlink&#34; title=&#34;构建管理&#34;&gt;&lt;/a&gt;构建管理&lt;/h3&gt;&lt;p&gt;构建管理是软件管理中的一部分。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;鼓励良好的编程实践&lt;ul&gt;
&lt;li&gt;逐行复查&lt;/li&gt;
&lt;li&gt;代码签名&lt;/li&gt;
&lt;li&gt;鼓励最佳实践&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;配置管理：系统化定义项目工件和处理流程&lt;ul&gt;
&lt;li&gt;需求和设计变更&lt;ul&gt;
&lt;li&gt;遵循系统化的变更手续&lt;/li&gt;
&lt;li&gt;成组变更&lt;/li&gt;
&lt;li&gt;评估变更成本&lt;/li&gt;
&lt;li&gt;坏味道：频繁大量变更&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;软件变更：版本控制软件&lt;/li&gt;
&lt;li&gt;机器配置变更：机器镜像&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;评估构建进度表&lt;ul&gt;
&lt;li&gt;评估项目规模和工作量是软件项目管理中最具挑战性的部分，平均水平的大型软件都要超时1年，超预算100%才能完成&lt;/li&gt;
&lt;li&gt;清楚说明软件需求&lt;/li&gt;
&lt;li&gt;使用不同方法评估再对比&lt;/li&gt;
&lt;li&gt;定期更新评估&lt;/li&gt;
&lt;li&gt;以下因素会影响软件开发进度，但不易被量化&lt;ul&gt;
&lt;li&gt;开发者的经验和能力&lt;/li&gt;
&lt;li&gt;团队的动力&lt;/li&gt;
&lt;li&gt;管理质量&lt;/li&gt;
&lt;li&gt;可重用的代码数目&lt;/li&gt;
&lt;li&gt;人员流动性&lt;/li&gt;
&lt;li&gt;需求变更&lt;/li&gt;
&lt;li&gt;文档量&lt;/li&gt;
&lt;li&gt;分级安全环境&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果进度落后了要怎么办&lt;ul&gt;
&lt;li&gt;扩充团队在&lt;strong&gt;项目任务不能分割并一一击破&lt;/strong&gt;时，只会增加项目交流复杂度，并加速项目延期&lt;/li&gt;
&lt;li&gt;缩减项目范围，有限保证核心功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;度量：对项目特征进行度量可以评估项目进度和风险，当然保证ddl比收集度量数据更重要&lt;/li&gt;
&lt;li&gt;把程序员当人看&lt;ul&gt;
&lt;li&gt;程序员1天大概有30%时间花费在“对项目没有直接好处”的非技术活动中&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不同程序员间的努力和能力差异很大&lt;/strong&gt;，不同团队在软件质量和生产率的差异上也很大，好的和坏的程序员都倾向于聚集在一起&lt;/li&gt;
&lt;li&gt;在代码风格的信仰问题上，使用“建议”或大多数人达成统一的指导规范&lt;/li&gt;
&lt;li&gt;优良的物理工作环境有助于提升程序员的生产率和生产质量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;管理你的管理者：向上管理&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;集成&#34;&gt;&lt;a href=&#34;#集成&#34; class=&#34;headerlink&#34; title=&#34;集成&#34;&gt;&lt;/a&gt;集成&lt;/h3&gt;&lt;p&gt;集成方式也会影响到集成的质量。从频率上分，有&lt;strong&gt;阶段式集成&lt;/strong&gt;和&lt;strong&gt;增量集成&lt;/strong&gt;，在阶段式集成中，分为单元开发和系统集成两个阶段。增量集成中，程序是一点一点写出来并一点点拼接起来的。对比阶段式集成，增量集成有下面一些好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;易于定位错误&lt;/li&gt;
&lt;li&gt;更早在项目中取得系统级结果&lt;/li&gt;
&lt;li&gt;对项目结果更好的监控&lt;/li&gt;
&lt;li&gt;能在更短的开发计划中建造出整个系统&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而增量集成有下面一些常见策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;自顶向下集成&lt;/strong&gt;：先集成系统设计，再集成具体实现；优点是能更早有整个系统的大局观，缺点是在前期会加入很多底层的mock代码，且将调试过程推迟到项目后期&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自底向上集成&lt;/strong&gt;：和自顶向下相反，优点是很容易定位错误，缺点是丧失全局的认识，系统设计的问题在后期修改成本较高&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;三明治集成&lt;/strong&gt;：先集成顶部的高层业务对象和底部的基础工具类，再集成中间层代码，整合了自顶向下和自底向上&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;风险导向的集成&lt;/strong&gt;：鉴别不同类的风险级别，先集成风险高的&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;功能导向的集成&lt;/strong&gt;：一次集成一组功能，它基本上不需要脚手架，且每次集成都能增强系统的功能性，且和面向对象设计比较好协同工作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;T型集成&lt;/strong&gt;：在集成高层对象后，先选中某个特定功能块，完成一次所有类的集成，这样可以作为MVP演练整个系统&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;结合&lt;strong&gt;冒烟测试&lt;/strong&gt;的“&lt;strong&gt;每日构建&lt;/strong&gt;”（daily build）是软件集成的一种最佳实践。它能让产品每天都有进步，且让项目保持一个固定的脉搏。做好daily build，有下面一些建议&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不放过失败的build，保证每次build都能通过冒烟测试&lt;/li&gt;
&lt;li&gt;每天进行冒烟测试&lt;/li&gt;
&lt;li&gt;冒烟测试需要和代码一样“与时俱进”&lt;/li&gt;
&lt;li&gt;让daily build和冒烟测试&lt;strong&gt;自动化&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;要求开发人员构建前进行冒烟测试&lt;/li&gt;
&lt;li&gt;将修订保持合适的合并节奏，不要太密，也不要太疏&lt;/li&gt;
&lt;li&gt;在早上发布build，给潜在问题留下修复时间&lt;/li&gt;
&lt;li&gt;顶住需求压力，保证daily build和冒烟测试&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在daily build的基础上，可以很轻易地做到1日多次的&lt;strong&gt;持续集成&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;编程工具&#34;&gt;&lt;a href=&#34;#编程工具&#34; class=&#34;headerlink&#34; title=&#34;编程工具&#34;&gt;&lt;/a&gt;编程工具&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;工欲善其事，必先利其器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;现代化的编程环境下，有很多可以采用的编程工具：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设计工具&lt;/li&gt;
&lt;li&gt;源代码工具&lt;ul&gt;
&lt;li&gt;IDE&lt;/li&gt;
&lt;li&gt;文本替换工具&lt;/li&gt;
&lt;li&gt;diff工具&lt;/li&gt;
&lt;li&gt;merge工具&lt;/li&gt;
&lt;li&gt;源代码美化器&lt;/li&gt;
&lt;li&gt;接口文档生成&lt;/li&gt;
&lt;li&gt;代码模板&amp;#x2F;代码生成&lt;/li&gt;
&lt;li&gt;命令行&lt;/li&gt;
&lt;li&gt;代码质量分析&lt;ul&gt;
&lt;li&gt;linter&lt;/li&gt;
&lt;li&gt;metrics报告&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;重构代码&lt;ul&gt;
&lt;li&gt;重构器&lt;/li&gt;
&lt;li&gt;代码翻译器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;版本控制工具&lt;/li&gt;
&lt;li&gt;数据字典&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可执行码工具&lt;ul&gt;
&lt;li&gt;目标码生成&lt;ul&gt;
&lt;li&gt;编译器、链接器&lt;/li&gt;
&lt;li&gt;build工具，如make、ant&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;程序库&amp;#x2F;第三方库&lt;/li&gt;
&lt;li&gt;代码生成向导&lt;/li&gt;
&lt;li&gt;安装指引&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;调试&lt;/li&gt;
&lt;li&gt;测试&lt;/li&gt;
&lt;li&gt;代码调整&lt;ul&gt;
&lt;li&gt;性能剖测&lt;/li&gt;
&lt;li&gt;汇编和反汇编&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在Unix这样的工具导向环境下就更容易孕育编程工具，如grep、diff、sort、make、tar、line、sed、awk、vi等。几乎所有的大型组织都有自己的内部工具和支持团队，不少比市面上的还要优秀。针对特定项目，有时候也会开发特定的项目工具，如航天、保险、医疗等。对于个人开发，也可以使用脚本这种自动执行重复性杂务的工具。&lt;/p&gt;
&lt;p&gt;最后要澄清一个事实，&lt;strong&gt;编程工具并不能消灭人在编程里的核心地位&lt;/strong&gt;，只是不断&lt;strong&gt;重塑&lt;/strong&gt;（reshape）编程的含义。连接到其他软硬件的复杂接口，规章制度、业务规则这些计算机编程之外的复杂之源还是要人来应对。而被用来填补真实世界和解决问题的计算机之间鸿沟的人，被称作程序员。&lt;/p&gt;
&lt;h2 id=&#34;软件工艺&#34;&gt;&lt;a href=&#34;#软件工艺&#34; class=&#34;headerlink&#34; title=&#34;软件工艺&#34;&gt;&lt;/a&gt;软件工艺&lt;/h2&gt;&lt;p&gt;编程是硬件与艺术的融合体，软件工艺是编程美学的一种体现。&lt;/p&gt;
&lt;h3 id=&#34;布局与风格&#34;&gt;&lt;a href=&#34;#布局与风格&#34; class=&#34;headerlink&#34; title=&#34;布局与风格&#34;&gt;&lt;/a&gt;布局与风格&lt;/h3&gt;&lt;p&gt;编排出色的代码会带来&lt;strong&gt;视觉&lt;/strong&gt;上和&lt;strong&gt;思维&lt;/strong&gt;上的愉悦。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基本原则&lt;ul&gt;
&lt;li&gt;好的布局可以凸显程序的逻辑结构，也更符合人类直觉&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;傻子都会写计算机理解的代码，而优秀程序员写的是人能看懂的代码&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;高手的机型并非天生优于新手，而是高手具备某种知识结构，这种结构有助于高手记住特定类型的信息；因此当信息符合这些结构时，就可以被轻易的理解&lt;/li&gt;
&lt;li&gt;布局非信仰，要保持头脑开放，接受已被证实更好的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;布局技术&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;空白&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;分组&lt;/li&gt;
&lt;li&gt;空行&lt;/li&gt;
&lt;li&gt;缩进&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;括号&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;布局风格：同一层级的语句缩进相同&lt;ul&gt;
&lt;li&gt;纯块结构&lt;/li&gt;
&lt;li&gt;模仿块结构&lt;/li&gt;
&lt;li&gt;花括号指定边界&lt;/li&gt;
&lt;li&gt;行尾布局（不推荐）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;控制结构布局&lt;ul&gt;
&lt;li&gt;段落间的空行&lt;/li&gt;
&lt;li&gt;复杂的表达式拆分条件到多行&lt;/li&gt;
&lt;li&gt;不用&lt;code&gt;goto&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;单行语句布局&lt;ul&gt;
&lt;li&gt;控制长度&lt;/li&gt;
&lt;li&gt;使用空格&lt;/li&gt;
&lt;li&gt;后续行缩进统一&lt;/li&gt;
&lt;li&gt;后续行结尾统一&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一行一条语句&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;减少复杂度&lt;/li&gt;
&lt;li&gt;读代码仅需自上而下&lt;/li&gt;
&lt;li&gt;不要在单行中多个操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一行一个声明&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注释风格&lt;ul&gt;
&lt;li&gt;缩进和代码一致&lt;/li&gt;
&lt;li&gt;用空行和代码隔开&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;子程序布局&lt;ul&gt;
&lt;li&gt;空行分段&lt;/li&gt;
&lt;li&gt;参数按标准缩进&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;类布局&lt;ul&gt;
&lt;li&gt;头部注释 -&amp;gt; 构造函数&amp;#x2F;析构函数 -&amp;gt; public子程序 -&amp;gt; protected子程序 -&amp;gt; private子程序和成员&lt;/li&gt;
&lt;li&gt;文件布局&lt;ul&gt;
&lt;li&gt;一个文件一个类&lt;/li&gt;
&lt;li&gt;文件命名和类有关&lt;/li&gt;
&lt;li&gt;在文件中清晰分隔各子程序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;自说明代码&#34;&gt;&lt;a href=&#34;#自说明代码&#34; class=&#34;headerlink&#34; title=&#34;自说明代码&#34;&gt;&lt;/a&gt;自说明代码&lt;/h3&gt;&lt;p&gt;本节专注于文档的特殊补充形式，即“注释”。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在代码中起主要作用的并非注释，而是&lt;strong&gt;好的编程风格&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;注释的哲学&lt;ul&gt;
&lt;li&gt;注释能提供更高层级的抽象&lt;/li&gt;
&lt;li&gt;重复注释根本没用&lt;/li&gt;
&lt;li&gt;注释写的不合适只会起反作用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注释类别：在代码完工后，只允许出现后三种&lt;ul&gt;
&lt;li&gt;重复代码（Bad case）&lt;/li&gt;
&lt;li&gt;解释代码：当代码过于复杂到需要解释时，最好是改进代码，而不是添加注释&lt;/li&gt;
&lt;li&gt;代码标记，如&lt;code&gt;TODO&lt;/code&gt;，&lt;code&gt;FIXME&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;概述代码&lt;/li&gt;
&lt;li&gt;意图说明&lt;/li&gt;
&lt;li&gt;传达代码以外的信息，如版权声明、保密要求&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;高效注释&lt;ul&gt;
&lt;li&gt;用伪代码法减少注释时间&lt;/li&gt;
&lt;li&gt;将注释如何到开发风格中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注释技术&lt;ul&gt;
&lt;li&gt;注释单行&lt;ul&gt;
&lt;li&gt;去掉无关注是&lt;/li&gt;
&lt;li&gt;减少行尾注释&lt;/li&gt;
&lt;li&gt;行尾注释只用于数据声明、维护标记、标记行尾等场景&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注释代码段&lt;ul&gt;
&lt;li&gt;应表达&lt;strong&gt;why&lt;/strong&gt;而非&lt;strong&gt;how&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;代码本身应尽力组做好说明&lt;/li&gt;
&lt;li&gt;注明非常规用法&lt;/li&gt;
&lt;li&gt;错误或语言环境独特点要加注释&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注释数据声明&lt;ul&gt;
&lt;li&gt;数值单位&lt;/li&gt;
&lt;li&gt;允许范围&lt;/li&gt;
&lt;li&gt;输入限制&lt;/li&gt;
&lt;li&gt;全局数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注释控制结构&lt;ul&gt;
&lt;li&gt;循环结束的行尾注释是代码太复杂的征兆&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注释子程序&lt;ul&gt;
&lt;li&gt;注释要靠近说明的代码&lt;/li&gt;
&lt;li&gt;用简短的话进行说明&lt;/li&gt;
&lt;li&gt;注释声明参数&lt;/li&gt;
&lt;li&gt;可以使用Javadoc这种工具&lt;/li&gt;
&lt;li&gt;说明子程序的全局作用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注释类、文件、程序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;个人性格&#34;&gt;&lt;a href=&#34;#个人性格&#34; class=&#34;headerlink&#34; title=&#34;个人性格&#34;&gt;&lt;/a&gt;个人性格&lt;/h3&gt;&lt;p&gt;软件工程是纯粹的脑力劳动。软件工程师研究工具和原材料的本质时，实际上是在研究人的智力、性格这种无形的东西。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编程工作本质上是项难以监督的工作，你也需要对自己负责&lt;/li&gt;
&lt;li&gt;聪明和谦虚&lt;/li&gt;
&lt;li&gt;求知欲&lt;ul&gt;
&lt;li&gt;形成自我意识&lt;/li&gt;
&lt;li&gt;实验&lt;/li&gt;
&lt;li&gt;学习成功项目&lt;/li&gt;
&lt;li&gt;阅读文档&lt;/li&gt;
&lt;li&gt;和同行交流&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不屈不挠的诚实感&lt;/li&gt;
&lt;li&gt;交流和合作：&lt;strong&gt;编程首先是与人交流，然后才是和计算机交流&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;创造力和纪律&lt;/li&gt;
&lt;li&gt;懒惰：避免“实在懒”，追求“开明懒”和“一劳永逸的懒”&lt;/li&gt;
&lt;li&gt;可能不那么明显的性格&lt;ul&gt;
&lt;li&gt;坚持：要时不时抬头开清方向&lt;/li&gt;
&lt;li&gt;经验：不同于其他行业，&lt;strong&gt;软件开发行业的经验比书本知识价值要小，基础知识变化很快&lt;/strong&gt;，不存在越老越吃香的情况。不持续学习跟上潮流，仅靠经验吃饭，会被逐渐淘汰。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;习惯&lt;ul&gt;
&lt;li&gt;好习惯很重要&lt;/li&gt;
&lt;li&gt;不要用“没有习惯”替代“坏习惯”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;软件工艺探讨的话题&#34;&gt;&lt;a href=&#34;#软件工艺探讨的话题&#34; class=&#34;headerlink&#34; title=&#34;软件工艺探讨的话题&#34;&gt;&lt;/a&gt;软件工艺探讨的话题&lt;/h3&gt;&lt;p&gt;《代码大全》全书都着重于软件构建的细节，本章从抽象的关注点出发，看看哪些方面会影响软件的工艺。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;软件开发的核心是致力于&lt;strong&gt;降低复杂度&lt;/strong&gt;，管理复杂度是软件的核心使命，之前各章节提过了很多具体办法。各种形式的抽象都是管理复杂度的强大工具。&lt;ul&gt;
&lt;li&gt;划分子系统&lt;/li&gt;
&lt;li&gt;仔细定义类接口&lt;/li&gt;
&lt;li&gt;保持接口抽象性&lt;/li&gt;
&lt;li&gt;避免全局变量&lt;/li&gt;
&lt;li&gt;避免深层次继承&lt;/li&gt;
&lt;li&gt;避免深度嵌套和循环&lt;/li&gt;
&lt;li&gt;不用&lt;code&gt;goto&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;子程序短小精悍&lt;/li&gt;
&lt;li&gt;使用清晰明了的变量名&lt;/li&gt;
&lt;li&gt;使用规范和约定减少理解负担&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;软件开发和其&lt;strong&gt;过程&lt;/strong&gt;密不可分，在多程序员参与的项目里，组织性的重要性超过了个人技能&lt;ul&gt;
&lt;li&gt;坏的过程只会损耗脑力，好的过程则可以开发脑力到极限&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;首先为人写程序，然后才是机器，强调代码可读性，便于与同行沟通&lt;/li&gt;
&lt;li&gt;深入一门语言去编程，不浮于表面&lt;ul&gt;
&lt;li&gt;杰出的程序员会考虑他们要干什么，然后才是怎么用手头的工具实现目标&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;借助&lt;strong&gt;规范&lt;/strong&gt;集中注意力&lt;/li&gt;
&lt;li&gt;基于问题域编程&lt;ul&gt;
&lt;li&gt;将程序划分为不同层级的抽象&lt;ul&gt;
&lt;li&gt;第0层：操作系统的操作和机器指令&lt;/li&gt;
&lt;li&gt;第1层：编程语言结构和工具&lt;/li&gt;
&lt;li&gt;第2层：底层实现结构，如算法和数据结构&lt;/li&gt;
&lt;li&gt;第3层：低层问题域，这一层已经有问题域相关的操作原语可以使用&lt;/li&gt;
&lt;li&gt;第4层：高层问题域，你的非技术用户某种程度也应该可以看懂你的代码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;编程是科学和艺术融合的一门工程学科&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;迭代&lt;/strong&gt;在软件开发中是很正常的现象。软件设计是一个逐步精化的过程。&lt;/li&gt;
&lt;li&gt;将软件和信仰分离开&lt;ul&gt;
&lt;li&gt;不要盲目跟风&lt;/li&gt;
&lt;li&gt;保持折中态度&lt;/li&gt;
&lt;li&gt;权衡各种技术，再做决定&lt;/li&gt;
&lt;li&gt;基于实验，保持开放心态&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;–END–&lt;/p&gt;
</content>
        <category term="编程" />
        <category term="范式" />
        <category term="设计" />
        <category term="艺术" />
        <category term="质量" />
        <updated>2022-08-25T14:37:19.000Z</updated>
    </entry>
</feed>
