<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Shenlvmeng&#39;s Blog • Posts by &#34;getusermedia&#34; tag</title>
        <link>http://shenlvmeng.github.com/blog</link>
        <description>Be sharp, my friend.</description>
        <language>zh-CN</language>
        <pubDate>Wed, 21 Nov 2018 23:04:53 +0800</pubDate>
        <lastBuildDate>Wed, 21 Nov 2018 23:04:53 +0800</lastBuildDate>
        <category>总结</category>
        <category>制度</category>
        <category>道德</category>
        <category>文官</category>
        <category>万历</category>
        <category>明朝</category>
        <category>读书笔记</category>
        <category>展望</category>
        <category>2018</category>
        <category>2019</category>
        <category>flag</category>
        <category>2020</category>
        <category>2021</category>
        <category>2022</category>
        <category>2023</category>
        <category>面试</category>
        <category>前端</category>
        <category>FAQ</category>
        <category>HTML</category>
        <category>CSS</category>
        <category>style guide</category>
        <category>编程</category>
        <category>范式</category>
        <category>设计</category>
        <category>艺术</category>
        <category>质量</category>
        <category>async_hooks</category>
        <category>cls-hooked</category>
        <category>logId</category>
        <category>录音</category>
        <category>getUserMedia</category>
        <category>AudioContext</category>
        <category>PCM</category>
        <category>WAVE</category>
        <category>二叉搜索树</category>
        <category>算法</category>
        <category>回忆</category>
        <category>老朋友</category>
        <category>C</category>
        <category>Hash</category>
        <category>布隆过滤器</category>
        <category>字符串检索</category>
        <category>canvas</category>
        <category>流程图</category>
        <category>d3</category>
        <category>g6</category>
        <category>zrender</category>
        <category>processOn</category>
        <category>SDN</category>
        <category>cbench</category>
        <category>安装说明</category>
        <category>绘图</category>
        <category>动画</category>
        <category>攻略</category>
        <category>流水账</category>
        <category>成都</category>
        <category>重庆</category>
        <category>武汉</category>
        <category>重构</category>
        <category>代码</category>
        <category>代码风格</category>
        <category>数据可视化</category>
        <category>爬虫</category>
        <category>chrome</category>
        <category>crx</category>
        <category>扩展</category>
        <category>CORS</category>
        <category>跨域</category>
        <category>盒模型</category>
        <category>浮动</category>
        <category>Reactive Programming</category>
        <category>JavaScript</category>
        <category>Cycle.js</category>
        <category>Dart</category>
        <category>最佳实践</category>
        <category>引流</category>
        <category>universal-link</category>
        <category>app-link</category>
        <category>脚手架</category>
        <category>degit</category>
        <category>git</category>
        <category>设计模式</category>
        <category>类</category>
        <category>接口</category>
        <category>抽象类</category>
        <category>DOM</category>
        <category>Docker</category>
        <category>ONOS</category>
        <category>控制器</category>
        <category>虚拟化</category>
        <category>笔记</category>
        <category>UX</category>
        <category>UED</category>
        <category>准则</category>
        <category>Java</category>
        <category>Ruby</category>
        <category>反射</category>
        <category>编程范式</category>
        <category>鸭子类型</category>
        <category>管理</category>
        <category>效率</category>
        <category>知识工作者</category>
        <category>卓有成效</category>
        <category>Elm</category>
        <category>框架</category>
        <category>函数式编程</category>
        <category>虚网映射</category>
        <category>Javascript</category>
        <category>并发</category>
        <category>event loop</category>
        <category>覆盖率</category>
        <category>端到端测试</category>
        <category>istanbul</category>
        <category>istanbuljs</category>
        <category>JavaSript</category>
        <category>Express</category>
        <category>源码</category>
        <category>代码覆盖率</category>
        <category>istanbul-middleware</category>
        <category>代码插桩</category>
        <category>require钩子</category>
        <category>babel-plugin-istanbul</category>
        <category>css</category>
        <category>html5</category>
        <category>flex</category>
        <category>javascript</category>
        <category>roadmap</category>
        <category>闭包</category>
        <category>Haskell</category>
        <category>monad</category>
        <category>后端</category>
        <category>管理后台</category>
        <category>egg.js</category>
        <category>工作流</category>
        <category>pull request</category>
        <category>golang</category>
        <category>语言学习</category>
        <category>黑客与画家</category>
        <category>创业</category>
        <category>骑行</category>
        <category>海南</category>
        <category>图文</category>
        <category>reflow</category>
        <category>repaint</category>
        <category>命名法</category>
        <category>成功学</category>
        <category>自我建设</category>
        <category>HTTP</category>
        <category>HTTP/2</category>
        <category>SPDY</category>
        <category>QUIC</category>
        <category>HTTPS</category>
        <category>状态码</category>
        <category>网络攻击</category>
        <category>介绍</category>
        <category>图片渲染</category>
        <category>html2canvas</category>
        <category>dom-to-image</category>
        <category>electron</category>
        <category>indexedDB</category>
        <category>异步</category>
        <category>Generator</category>
        <category>thunk</category>
        <category>async</category>
        <category>函数表达式</category>
        <category>对象</category>
        <category>继承</category>
        <category>类型转换</category>
        <category>==</category>
        <category>类型判断</category>
        <category>猫</category>
        <category>杀手</category>
        <category>管理学</category>
        <category>领导力</category>
        <category>梯队</category>
        <category>移动端</category>
        <category>UI</category>
        <category>自适应</category>
        <category>rem</category>
        <category>Electron</category>
        <category>GUI</category>
        <category>gpx</category>
        <category>template</category>
        <category>Electron Builder</category>
        <category>PWA</category>
        <category>方法论</category>
        <category>夜话</category>
        <category>多线</category>
        <category>生活</category>
        <category>密码</category>
        <category>密钥</category>
        <category>技改</category>
        <category>Vue</category>
        <category>gulp</category>
        <category>瀑布流</category>
        <category>电影</category>
        <category>PHP</category>
        <category>参考</category>
        <category>思维</category>
        <category>学习能力</category>
        <category>右脑</category>
        <category>经济学</category>
        <category>宏观经济学</category>
        <category>术语</category>
        <category>GDP</category>
        <category>CPI</category>
        <category>储蓄</category>
        <category>投资</category>
        <category>金融市场</category>
        <category>股票</category>
        <category>债券</category>
        <category>美联储</category>
        <category>失业</category>
        <category>货币</category>
        <category>现值</category>
        <category>准备金</category>
        <category>货币中性</category>
        <category>通货膨胀</category>
        <category>汇率</category>
        <category>购买力</category>
        <category>净出口</category>
        <category>资产净流出</category>
        <category>总需求</category>
        <category>总供给</category>
        <category>流动性偏好</category>
        <category>乘数效应</category>
        <category>菲利普斯曲线</category>
        <category>微观经济学</category>
        <category>供求</category>
        <category>贸易</category>
        <category>市场</category>
        <category>税</category>
        <category>剩余</category>
        <category>外部性</category>
        <category>公共物品</category>
        <category>公共资源</category>
        <category>生产成本</category>
        <category>利润</category>
        <category>垄断</category>
        <category>价格歧视</category>
        <category>寡头</category>
        <category>垄断竞争</category>
        <category>生产要素市场</category>
        <category>贫困</category>
        <category>消费者选择理论</category>
        <category>不对称信息</category>
        <category>政治经济学</category>
        <category>行为经济学</category>
        <category>VSCode</category>
        <category>编辑器</category>
        <category>IDE</category>
        <category>hybrid</category>
        <category>JSBridge</category>
        <category>Web Worker</category>
        <category>Service Worker</category>
        <category>习惯</category>
        <category>lint</category>
        <category>editorconfig</category>
        <category>commit message</category>
        <category>量子物理</category>
        <category>史话</category>
        <category>埋点</category>
        <category>raven.js</category>
        <category>前端监控</category>
        <category>文本编辑器</category>
        <category>quill</category>
        <category>结构化数据</category>
        <category>React</category>
        <category>Hooks</category>
        <category>函数组件</category>
        <category>复用</category>
        <category>状态管理</category>
        <category>redux</category>
        <category>MobX</category>
        <category>代码质量</category>
        <category>重来</category>
        <category>requestAnimationFrame</category>
        <category>TypeScript</category>
        <category>路书</category>
        <category>gpx解析</category>
        <category>EXIF</category>
        <category>人类</category>
        <category>生存</category>
        <category>基因</category>
        <category>响应式编程</category>
        <category>RxJS</category>
        <category>成长</category>
        <category>业务</category>
        <category>思想</category>
        <category>程序设计</category>
        <category>心理学</category>
        <category>自我</category>
        <category>社会思维</category>
        <category>社会影响</category>
        <category>文化</category>
        <category>性别</category>
        <category>从众</category>
        <category>说服</category>
        <category>临床诊断</category>
        <category>陪审团</category>
        <category>司法</category>
        <category>物质主义</category>
        <category>健康</category>
        <category>社会关系</category>
        <category>偏见</category>
        <category>攻击行为</category>
        <category>亲密关系</category>
        <category>友谊</category>
        <category>爱情</category>
        <category>利他</category>
        <category>冲突</category>
        <category>和解</category>
        <category>软技能</category>
        <category>理财</category>
        <category>健身</category>
        <category>自我营销</category>
        <category>学习</category>
        <category>商业模式</category>
        <category>产品</category>
        <category>校园网</category>
        <category>互联网</category>
        <category>技术</category>
        <category>web开发</category>
        <category>哲思</category>
        <category>择偶观</category>
        <category>validator</category>
        <category>大文件</category>
        <category>visibilityChange</category>
        <category>IntersectionObserver</category>
        <category>图种</category>
        <category>draggable</category>
        <category>webpack</category>
        <category>z-index</category>
        <category>git submodule</category>
        <category>object-fit</category>
        <category>object-position</category>
        <category>BroadcastChannel</category>
        <category>extract-text-webpack-plugin</category>
        <category>lottie</category>
        <category>backface-visibility</category>
        <category>egret</category>
        <category>mock</category>
        <category>SSO</category>
        <category>autoprefixer</category>
        <category>polyfill</category>
        <category>Android</category>
        <category>ffmpeg</category>
        <category>React Hooks</category>
        <category>rollup</category>
        <category>CDN</category>
        <category>DNS</category>
        <category>CNAME</category>
        <category>架构</category>
        <category>组件</category>
        <category>ssh</category>
        <category>fis-receiver</category>
        <category>tmux</category>
        <category>origami</category>
        <category>promise</category>
        <category>encodeURI</category>
        <category>encodeURIComponent</category>
        <category>axios</category>
        <category>charles</category>
        <category>黑色幽默</category>
        <category>朋友</category>
        <category>梦</category>
        <category>濒死</category>
        <category>江南</category>
        <category>苏州</category>
        <category>无锡</category>
        <category>宜兴</category>
        <category>湖州</category>
        <category>南浔</category>
        <category>游记</category>
        <category>随笔</category>
        <category>群众</category>
        <category>理论</category>
        <category>实效</category>
        <category>测试</category>
        <category>长沙</category>
        <category>杭州</category>
        <category>湖南</category>
        <category>核酸</category>
        <category>美食</category>
        <category>云南</category>
        <category>丽江</category>
        <category>大理</category>
        <category>青岛</category>
        <category>济南</category>
        <category>山东</category>
        <category>西北</category>
        <category>银川</category>
        <category>西宁</category>
        <category>青海湖</category>
        <category>西海镇</category>
        <category>茶卡盐湖</category>
        <category>厦门</category>
        <category>感受</category>
        <category>C语言</category>
        <category>树</category>
        <category>主干开发</category>
        <category>GitFlow</category>
        <category>GithubFlow</category>
        <category>typescript</category>
        <category>类型系统</category>
        <category>webrtc</category>
        <category>RTMP</category>
        <category>首屏时间</category>
        <category>性能优化</category>
        <category>公司</category>
        <category>个人发展</category>
        <category>战略</category>
        <category>晋升</category>
        <category>哲学</category>
        <category>幸福</category>
        <category>人生</category>
        <category>叔本华</category>
        <category>Unix</category>
        <category>Rollup</category>
        <category>mouseout</category>
        <category>mouseleave</category>
        <category>lint-staged</category>
        <category>吸顶</category>
        <category>图片组件</category>
        <category>形式系统</category>
        <category>不完全性</category>
        <category>隐喻</category>
        <category>哥德尔</category>
        <category>巴赫</category>
        <category>埃舍尔</category>
        <category>济州</category>
        <category>西归浦</category>
        <category>城山</category>
        <category>咸德</category>
        <item>
            <guid isPermalink="true">http://shenlvmeng.github.com/blog/2018/11/21/audio-recorder-improvement/</guid>
            <title>前端录音方案优化实践</title>
            <link>http://shenlvmeng.github.com/blog/2018/11/21/audio-recorder-improvement/</link>
            <category>录音</category>
            <category>getUserMedia</category>
            <category>AudioContext</category>
            <category>PCM</category>
            <category>WAVE</category>
            <pubDate>Wed, 21 Nov 2018 23:04:53 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;背景&#34;&gt;&lt;a href=&#34;#背景&#34; class=&#34;headerlink&#34; title=&#34;背景&#34;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;在视听类业务或重交互的业务场景下，有时需要在前端采集用户语音。前端实现录音功能可以使用&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder&#34;&gt;MediaRecorder&lt;/a&gt;，或&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia&#34;&gt;getUserMedia&lt;/a&gt;结合&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/AudioContext&#34;&gt;AudioContext&lt;/a&gt;。其中，前一种方法的支持度惨不忍睹，使用getUserMedia的方式是较为常用的选择。&lt;/p&gt;
&lt;p class=&#34;img-tip&#34; data-str=&#34;MediaRecorder支持度&#34;&gt;&lt;img src=&#39;https://sf3-ttcdn-tos.pstatp.com/img/tos-cn-v-0000/87e5a7855500447eb22349f29814bdf5~noop.png&#39; height=465 width=1261/&gt;&lt;/p&gt;

&lt;h2 id=&#34;现有问题&#34;&gt;&lt;a href=&#34;#现有问题&#34; class=&#34;headerlink&#34; title=&#34;现有问题&#34;&gt;&lt;/a&gt;现有问题&lt;/h2&gt;&lt;p&gt;在实现前端录音上，&lt;a href=&#34;https://github.com/mattdiamond/Recorderjs&#34;&gt;Recorder.js&lt;/a&gt;实现了一个基础可用版，不过它支持的可配置项很少，音频采样率、声道数、采样的比特位数都使用的采集配置的默认值。但在大多场景下，录音文件体积较大，4s的录音可以达到700 ~ 800KB，不利于网络传输，需要录音采集参数可配置，以优化文件体积。&lt;/p&gt;
&lt;p class=&#34;img-tip&#34; data-str=&#34;4s录音的文件体积&#34;&gt;&lt;img src=&#39;https://sf3-ttcdn-tos.pstatp.com/img/tos-cn-v-0000/c2f3c40147a4447fad41d3bea41c4256~noop.png&#39; height=94 width=1178/&gt;&lt;/p&gt;

&lt;p&gt;另外，有些场景录制的语音需要交给算法组做语音识别，对语音有特定要求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;采样率16000Hz&lt;/li&gt;
&lt;li&gt;单声道&lt;/li&gt;
&lt;li&gt;采样位数16bit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这时就需要一个优化的前端录音方案，支持根据输入配置修改音频流数据。&lt;/p&gt;
&lt;h2 id=&#34;优化&#34;&gt;&lt;a href=&#34;#优化&#34; class=&#34;headerlink&#34; title=&#34;优化&#34;&gt;&lt;/a&gt;优化&lt;/h2&gt;&lt;p&gt;这里将原有录音方案的几个关键代码流程整理如下：&lt;/p&gt;
&lt;p class=&#34;img-tip&#34; data-str=&#34;原有录音方案&#34;&gt;&lt;img src=&#39;https://sf3-ttcdn-tos.pstatp.com/img/tos-cn-v-0000/5379450a44474160b9fa09e7dc7ee31d~noop.png&#39; height=490 width=871/&gt;&lt;/p&gt;

&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先调用&lt;code&gt;getUserMedia&lt;/code&gt;获取音频流，并初始化一个&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioSourceNode&#34;&gt;&lt;code&gt;MediaStreamAudioSourceNode&lt;/code&gt;&lt;/a&gt;。使用&lt;code&gt;connect&lt;/code&gt;连接到&lt;code&gt;ScriptProcessorNode&lt;/code&gt;上，并连续触发&lt;code&gt;audioprocess&lt;/code&gt;事件。&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;onaudioprocess&lt;/code&gt;事件处理函数中，拿到录音数据。根据当前&lt;code&gt;recording&lt;/code&gt;的值判断是否写入&lt;code&gt;recBuffers&lt;/code&gt;中。&lt;code&gt;recording&lt;/code&gt;状态可以通过&lt;code&gt;record&lt;/code&gt;和&lt;code&gt;stop&lt;/code&gt;方法控制。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exportWAV&lt;/code&gt;方法会触发导出流程，导出步骤里&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mergeBuffers&lt;/code&gt;将&lt;code&gt;recBuffers&lt;/code&gt;数组扁平化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;interleave&lt;/code&gt;将各声道信息数组扁平化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;encodeWAV&lt;/code&gt;为即将生成的音频文件写入音频头&lt;/li&gt;
&lt;li&gt;最后&lt;code&gt;floatTo16bitPCM&lt;/code&gt;将音频设备采集的元素范围在[0,1]之间的Float32Array，转换成一个元素是16位有符号整数的Float32Array中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最后拿到的Blob类型数据可以本地播放或通过FormData上传服务端使用。&lt;br&gt;下面分几方面介绍录音方案优化的设计和实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;音频头拓展&#34;&gt;&lt;a href=&#34;#音频头拓展&#34; class=&#34;headerlink&#34; title=&#34;音频头拓展&#34;&gt;&lt;/a&gt;音频头拓展&lt;/h3&gt;&lt;p&gt;要支持可拓展的采样率、声道、采样比特数，wav音频头也要动态配置。&lt;/p&gt;
&lt;p&gt;WAVE格式是&lt;a href=&#34;https://en.wikipedia.org/wiki/Resource_Interchange_File_Format&#34;&gt;Resource Interchange File Format&lt;/a&gt;（RIFF）的一种，其基本块名称是“WAVE”，其中包含两个子块“fmt”和“data”。结构上由WAVE_HEADER、WAVE_FMT、WAVE_DATA、采样数据4个部分组成。可以看到实际上就是在PCM数据前面加了一个文件头。WAVE类型文件整体结构图如下：&lt;/p&gt;
&lt;p class=&#34;img-tip&#34; data-str=&#34;WAVE文件头示例&#34;&gt;&lt;img src=&#39;https://sf3-ttcdn-tos.pstatp.com/img/tos-cn-v-0000/e5c3f9bc6d3545308fb50fc10ce64790~noop.png&#39; height=449 width=673/&gt;&lt;/p&gt;

&lt;p&gt;其中和采样率、声道、采样位数相关的字段有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NumChannels&lt;/li&gt;
&lt;li&gt;SampleRate&lt;/li&gt;
&lt;li&gt;ByteRate，等于SampleRate * BlockAlign&lt;/li&gt;
&lt;li&gt;BlockAlign，等于ChannelCount * BitsPerSample &amp;#x2F; 8&lt;/li&gt;
&lt;li&gt;BitsPerSample&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这几个字段根据输入的配置项设置即可实现音频头拓展部分。&lt;br&gt;另外，需要注意的是其中字段有Big Endian和Little Endian的区分，对应在代码里，通过&lt;code&gt;setUint16&lt;/code&gt;和&lt;code&gt;setUIint32&lt;/code&gt;的最后一个入参决定。如下所示：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;encodeWAV&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;samples&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; buffer = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ArrayBuffer&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;44&lt;/span&gt; + samples.&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt; * &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; view = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;DataView&lt;/span&gt;(buffer);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/* RIFF identifier */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;writeString&lt;/span&gt;(view, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;RIFF&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/* RIFF chunk length */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    view.&lt;span class=&#34;title function_&#34;&gt;setUint32&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;36&lt;/span&gt; + samples.&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt; * &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/* RIFF type */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;writeString&lt;/span&gt;(view, &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;WAVE&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/* format chunk identifier */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;writeString&lt;/span&gt;(view, &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;fmt &amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/* format chunk length, PCM use 16 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    view.&lt;span class=&#34;title function_&#34;&gt;setUint32&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/* sample format (raw), PCM use 1 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    view.&lt;span class=&#34;title function_&#34;&gt;setUint16&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/* channel count */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    view.&lt;span class=&#34;title function_&#34;&gt;setUint16&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;22&lt;/span&gt;, numChannels, &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/* sample rate */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    view.&lt;span class=&#34;title function_&#34;&gt;setUint32&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;24&lt;/span&gt;, sampleRate, &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/* byte rate (sample rate * block align) */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    view.&lt;span class=&#34;title function_&#34;&gt;setUint32&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;28&lt;/span&gt;, sampleRate * numChannels * sampleBit / &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/* block align (channel count * bytes per sample) */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    view.&lt;span class=&#34;title function_&#34;&gt;setUint16&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;32&lt;/span&gt;, numChannels * sampleBit / &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/* bits per sample */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    view.&lt;span class=&#34;title function_&#34;&gt;setUint16&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;34&lt;/span&gt;, sampleBit, &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/* data chunk identifier */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;writeString&lt;/span&gt;(view, &lt;span class=&#34;number&#34;&gt;36&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;data&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/* data chunk length */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    view.&lt;span class=&#34;title function_&#34;&gt;setUint32&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;40&lt;/span&gt;, samples.&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt; * &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; view;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;采样率&#34;&gt;&lt;a href=&#34;#采样率&#34; class=&#34;headerlink&#34; title=&#34;采样率&#34;&gt;&lt;/a&gt;采样率&lt;/h3&gt;&lt;p&gt;通常前端录音的音频采样率是音频设备默认使用的44.1kHz（或48kHz）。开发者需要默认以外的采样率时（比如16kHz），可以在录音数据交给&lt;code&gt;encodeWAV&lt;/code&gt;封装前根据新的采样率做重采样。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;compress&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;samples, ratio&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; length = samples.&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt; / ratio;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; result = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Float32Array&lt;/span&gt;(length);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; index = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; index &amp;lt; length; index++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        result[index] = samples[index * ratio];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;重采样的原理上，程序根据重采样和原始采用率的比值，间隔采样音频原数据，丢弃掉其他采样点数据，从而模拟采样率的等比例下降。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;注：间隔丢弃原数据在重采样率是原采样率的整数倍分之一时（即1、1&amp;#x2F;2、1&amp;#x2F;3…）才不会损失用户音色。另外，重采样率比原采样率高时，需要在采样点中间额外插值，这里未实现；&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;声道数&#34;&gt;&lt;a href=&#34;#声道数&#34; class=&#34;headerlink&#34; title=&#34;声道数&#34;&gt;&lt;/a&gt;声道数&lt;/h3&gt;&lt;p&gt;在&lt;code&gt;audioprocess&lt;/code&gt;事件中，需要根据配置项中的声道数，从inputBuffer取对应声道数据，一般的处理下，会丢弃多余的声道数据。类似地，在存储声道数据时，也要灵活考虑配置项。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;node&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;onaudioprocess&lt;/span&gt; = &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;e&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;recording&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; buffer = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; channel = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; channel &amp;lt; &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;config&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;numChannels&lt;/span&gt;; channel++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        buffer.&lt;span class=&#34;title function_&#34;&gt;push&lt;/span&gt;(e.&lt;span class=&#34;property&#34;&gt;inputBuffer&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;getChannelData&lt;/span&gt;(channel));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;record&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;inputBuffer&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; channel = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; channel &amp;lt; numChannels; channel++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        recBuffers[channel].&lt;span class=&#34;title function_&#34;&gt;push&lt;/span&gt;(inputBuffer[channel]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    recLength += inputBuffer[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在最后导出时，根据声道数判断是否需要interleave的步骤。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (numChannels === &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    interleaved = &lt;span class=&#34;title function_&#34;&gt;interleave&lt;/span&gt;(buffers[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;], buffers[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [interleaved] = buffers;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;采样位数&#34;&gt;&lt;a href=&#34;#采样位数&#34; class=&#34;headerlink&#34; title=&#34;采样位数&#34;&gt;&lt;/a&gt;采样位数&lt;/h3&gt;&lt;p&gt;默认的采样位数是16位，在对音质或位数没有明确要求时，可以转成8位。&lt;/p&gt;
&lt;p&gt;PCM16LE格式的采样数据的取值范围是-32768到32767，而PCM8格式的采样数据的取值范围是0到255。因此PCM16LE转换到PCM8需要将-32768到32767的16bit有符号数值转换为0到255的8bit无符号数值。实现上，见下面的对比：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;floatTo16BitPCM&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;output, offset, input&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; initOffset = offset;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; input.&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt;; i++, initOffset += &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; s = &lt;span class=&#34;title class_&#34;&gt;Math&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;max&lt;/span&gt;(-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;title class_&#34;&gt;Math&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;min&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, input[i]));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        output.&lt;span class=&#34;title function_&#34;&gt;setInt16&lt;/span&gt;(initOffset, s &amp;lt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; ? s * &lt;span class=&#34;number&#34;&gt;0x8000&lt;/span&gt; : s * &lt;span class=&#34;number&#34;&gt;0x7FFF&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;floatTo8bitPCM&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;output, offset, input&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; initOffset = offset;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; input.&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt;; i++, initOffset++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; s = &lt;span class=&#34;title class_&#34;&gt;Math&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;max&lt;/span&gt;(-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;title class_&#34;&gt;Math&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;min&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, input[i]));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; val = s &amp;lt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; ? s * &lt;span class=&#34;number&#34;&gt;0x8000&lt;/span&gt; : s * &lt;span class=&#34;number&#34;&gt;0x7FFF&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        output.&lt;span class=&#34;title function_&#34;&gt;setInt8&lt;/span&gt;(initOffset, &lt;span class=&#34;built_in&#34;&gt;parseInt&lt;/span&gt;(val / &lt;span class=&#34;number&#34;&gt;256&lt;/span&gt; + &lt;span class=&#34;number&#34;&gt;128&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;), &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上方的&lt;code&gt;floatTo16BitPCM&lt;/code&gt;是转换音频采样数据到PCM数据的原始方法，下面的&lt;code&gt;floatTo8BitPCM&lt;/code&gt;方法中&lt;code&gt;parseInt(val / 256 + 128, 10)&lt;/code&gt;做了16位到8位的转换。最后在封装音频数据为Blob类型时，根据采样位数使用不同函数即可。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;encodeWAV&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;samples&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sampleBit === &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ? &lt;span class=&#34;title function_&#34;&gt;floatTo8bitPCM&lt;/span&gt;(view, &lt;span class=&#34;number&#34;&gt;44&lt;/span&gt;, samples)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        : &lt;span class=&#34;title function_&#34;&gt;floatTo16BitPCM&lt;/span&gt;(view, &lt;span class=&#34;number&#34;&gt;44&lt;/span&gt;, samples);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; view;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;其他&#34;&gt;&lt;a href=&#34;#其他&#34; class=&#34;headerlink&#34; title=&#34;其他&#34;&gt;&lt;/a&gt;其他&lt;/h3&gt;&lt;p&gt;最后，由于前端录音场景下，音频流基本都来自&lt;code&gt;getUserMedia&lt;/code&gt;，为了减少模板代码，库里封装了一个static方法，快捷地直接由&lt;code&gt;getUserMedia&lt;/code&gt;构造一个recorder对象。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;createFromUserMedia&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;config&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; stream = &lt;span class=&#34;keyword&#34;&gt;await&lt;/span&gt; navigator.&lt;span class=&#34;property&#34;&gt;mediaDevices&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;getUserMedia&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;audio&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;mandatory&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;attr&#34;&gt;googEchoCancellation&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;false&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;attr&#34;&gt;googAutoGainControl&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;false&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;attr&#34;&gt;googNoiseSuppression&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;false&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;attr&#34;&gt;googHighpassFilter&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;false&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;optional&lt;/span&gt;: []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;video&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; context = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AudioContext&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Recorder&lt;/span&gt;(context.&lt;span class=&#34;title function_&#34;&gt;createMediaStreamSource&lt;/span&gt;(stream, config));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;使用&#34;&gt;&lt;a href=&#34;#使用&#34; class=&#34;headerlink&#34; title=&#34;使用&#34;&gt;&lt;/a&gt;使用&lt;/h2&gt;&lt;p&gt;在之前提到了需要算法组音频识别的场景下，只需要在构造时指定配置项即可。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Recorder&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;./audio-recorder&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;recorder&lt;/span&gt; = &lt;span class=&#34;title class_&#34;&gt;Recorder&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;createFromUserMedia&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;sampleBit&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;, &lt;span class=&#34;comment&#34;&gt;// 可省略&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;numChannels&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;sampleRate&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;16000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;此时，一个500ms的录音大概15KB，换算下来4s大约120KB，比此前的体积小了很多。在不强调音质的场景下，表现要好许多。&lt;/p&gt;
&lt;h2 id=&#34;小结&#34;&gt;&lt;a href=&#34;#小结&#34; class=&#34;headerlink&#34; title=&#34;小结&#34;&gt;&lt;/a&gt;小结&lt;/h2&gt;&lt;p&gt;上面的录音方案优化实践主要包含下面几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WAVE音频头修改&lt;/li&gt;
&lt;li&gt;重采样音频数据&lt;/li&gt;
&lt;li&gt;丢弃多余的声道数据&lt;/li&gt;
&lt;li&gt;转换16位音频数据到8位&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;源码在&lt;a href=&#34;https://github.com/shenlvmeng/audio-recorder&#34;&gt;这里&lt;/a&gt;，欢迎使用与拍砖。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;&lt;a href=&#34;#参考&#34; class=&#34;headerlink&#34; title=&#34;参考&#34;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mattdiamond/Recorderjs&#34;&gt;mattdiamond&amp;#x2F;Recorderjs A plugin for recording&amp;#x2F;exporting the output of Web Audio API nodes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/leixiaohua1020/article/details/50534316&#34;&gt;视音频数据处理入门：PCM音频采样数据处理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://soundfile.sapp.org/doc/WaveFormat/&#34;&gt;Microsoft WAVE soundfile format&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
    </channel>
</rss>
