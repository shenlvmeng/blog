{
    "version": "https://jsonfeed.org/version/1",
    "title": "Shenlvmeng's Blog • All posts by \"git submodule\" tag",
    "description": "Be sharp, my friend.",
    "home_page_url": "http://shenlvmeng.github.com/blog",
    "items": [
        {
            "id": "http://shenlvmeng.github.com/blog/2018/08/16/some-tips-3/",
            "url": "http://shenlvmeng.github.com/blog/2018/08/16/some-tips-3/",
            "title": "工作中的遇到的一些小知识 3",
            "date_published": "2018-08-16T15:11:29.000Z",
            "content_html": "<h2 id=\"git-case-sensitive\"><a href=\"#git-case-sensitive\" class=\"headerlink\" title=\"git case sensitive\"></a>git case sensitive</h2><p>git本身是大小写敏感的。但在大小写不敏感的系统里，需要用hack方法记录仅修改文件名大小写的改动。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">mv</span> file.txt temp.txt</span><br><span class=\"line\">git <span class=\"built_in\">mv</span> temp.txt File.txt</span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;Renamed file.txt to File.txt&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"webpack的一些经验\"><a href=\"#webpack的一些经验\" class=\"headerlink\" title=\"webpack的一些经验\"></a>webpack的一些经验</h2><p><strong>DefinePlugin</strong></p>\n<p>允许创建一个在编译时可以配置的全局常量。在构建区分环境的包时很有用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> webpack.<span class=\"title class_\">DefinePlugin</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">PRODUCTION</span>: <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(<span class=\"literal\">true</span>),</span><br><span class=\"line\">  <span class=\"attr\">VERSION</span>: <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(<span class=\"string\">&quot;5fa3b9&quot;</span>),</span><br><span class=\"line\">  <span class=\"attr\">BROWSER_SUPPORTS_HTML5</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">TWO</span>: <span class=\"string\">&quot;1+1&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;typeof window&quot;</span>: <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(<span class=\"string\">&quot;object&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>注意：这个插件直接执行文本替换。因此：</p>\n<ul>\n<li>如果这个值是一个字符串，它会被当作一个代码片段来使用。</li>\n<li>如果这个值不是字符串，它会被转化为字符串(包括函数)。</li>\n<li>如果这个值是一个对象，它所有的 key 会被同样的方式定义。</li>\n<li>如果在一个 key 前面加了 typeof,它会被定义为 typeof 调用</li>\n</ul>\n<p><strong>resolve alias</strong></p>\n<p>创建import或require的别名，来确保模块引入变得更简单。例如，一些位于 src&#x2F; 文件夹下的常用模块：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">alias</span>: &#123;</span><br><span class=\"line\">    @: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;src/&#x27;</span>),</span><br><span class=\"line\">    <span class=\"title class_\">Utilities</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;src/utilities/&#x27;</span>),</span><br><span class=\"line\">    <span class=\"title class_\">Templates</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;src/templates/&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"z-index可能的坑\"><a href=\"#z-index可能的坑\" class=\"headerlink\" title=\"z-index可能的坑\"></a>z-index可能的坑</h2><p><strong>使用前提：z-index只能在position属性值为relative或absolute或fixed的元素上有效。</strong></p>\n<p>z-index值只决定同一父元素中的同级子元素的堆叠顺序。父元素的z-index值（如果有）为子元素定义了堆叠顺序（css版堆叠“拼爹”）。向上追溯找不到含有z-index值的父元素的情况下，则可以视为自由的z-index元素，它可以与父元素的同级兄弟定位元素或其他自由的定位元素来比较z-index的值，决定其堆叠顺序。同级元素的z-index值如果相同，则堆叠顺序由元素在文档中的先后位置决定，后出现的会在上面。</p>\n<h2 id=\"git-submodule\"><a href=\"#git-submodule\" class=\"headerlink\" title=\"git submodule\"></a>git submodule</h2><blockquote>\n<p>参考：<a href=\"https://yihui.name/cn/2017/03/git-submodule/\">GIT 子模块</a></p>\n</blockquote>\n<p>最新一个项目里要复用已有的一个git库的代码，具体来说就是要将之前在WebView的内容复刻到PC版完成（这个需求貌似应该还挺常见的）。为了保证代码复用性，选择了<code>git submodule</code>的方法。这也是我此前从没用过的一个命令。</p>\n<p>简单来说，是一个 GIT 仓库下面某个文件夹的来源可以跟本库的来源不同，这个文件夹连接着别的库，由别的库负责按本控制和管理。是不是和npm包管理的形式比较像。子模块可以手动添加，也可以在克隆一个主库的时候就直接实体化。具体来说，有四种情况：</p>\n<ul>\n<li>克隆库的时候要初始化子模块 &#x3D;&gt; 加上<code>--recursive</code>参数 <code>git clone --recursive git@github.com:shenlvmeng/trace-maker.git</code></li>\n<li>初始化已有库的子模块 &#x3D;&gt; <code>git submodule update --init --recursive</code></li>\n<li>从子模块的源更新该子模块 &#x3D;&gt; <code>git submodule update --recursive --remote</code></li>\n<li>添加一个新的子模块 &#x3D;&gt; <code>git submodule add &lt;git address&gt; &lt;folder address&gt;</code></li>\n</ul>\n<p>已有有git submodule的库内，<code>.gitmodules</code>是下面的样子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[submodule &quot;wheel&quot;]</span><br><span class=\"line\">    path = wheel</span><br><span class=\"line\">    url = git@github.com:shenlvmeng/wheel.git</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"npm-install\"><a href=\"#npm-install\" class=\"headerlink\" title=\"npm install\"></a>npm install</h2><p>npm install后跟的绝不仅仅只是包名，还可以通过ssh、http的形式引入npm包，唯一的要求是有<code>package.json</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install (with no args, <span class=\"keyword\">in</span> package <span class=\"built_in\">dir</span>)</span><br><span class=\"line\">npm install [&lt;@scope&gt;/]&lt;name&gt;</span><br><span class=\"line\">npm install [&lt;@scope&gt;/]&lt;name&gt;@&lt;tag&gt;</span><br><span class=\"line\">npm install [&lt;@scope&gt;/]&lt;name&gt;@&lt;version&gt;</span><br><span class=\"line\">npm install [&lt;@scope&gt;/]&lt;name&gt;@&lt;version range&gt;</span><br><span class=\"line\">npm install &lt;git-host&gt;:&lt;git-user&gt;/&lt;repo-name&gt;</span><br><span class=\"line\">npm install &lt;git repo url&gt;</span><br><span class=\"line\">npm install &lt;tarball file&gt;</span><br><span class=\"line\">npm install &lt;tarball url&gt;</span><br><span class=\"line\">npm install &lt;folder&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">alias</span>: npm i</span><br></pre></td></tr></table></figure>\n\n<p>一个<strong>package</strong>可以是下面的形式：</p>\n<ol>\n<li>包含<code>package.json</code>的工程文件夹</li>\n<li>gzip过的“1”的压缩包</li>\n<li>指向“2”的url</li>\n<li>发布在npm-registry的<code>&lt;name&gt;@&lt;registry&gt;</code>字符串</li>\n<li>发布在npm-registry的<code>&lt;name&gt;@&lt;tag&gt;</code>字符串</li>\n<li>发布在npm-registry的<code>&lt;name&gt;</code>字符串(最新版本)</li>\n<li>一个指向“1”的合法git地址</li>\n</ol>\n<h2 id=\"cleave-js\"><a href=\"#cleave-js\" class=\"headerlink\" title=\"cleave.js\"></a>cleave.js</h2><p>一个自动格式化输入框的工具，有npm包、script标签等几种引用形式，还有react的使用方式。</p>\n<p>地址：<a href=\"https://nosir.github.io/cleave.js/\">Format your &lt;input&#x2F;&gt; content when you are typing</a></p>\n<h2 id=\"object-fit-amp-object-position\"><a href=\"#object-fit-amp-object-position\" class=\"headerlink\" title=\"object-fit &amp; object-position\"></a>object-fit &amp; object-position</h2><p>这两个CSS属性分别用于指定替换元素在其盒模型内的覆盖大小和对齐方式。使用效果很类似<code>background-size</code>和<code>background-position</code>。替换元素即内容不受CSS视觉格式化控制的元素，如image、iframe、video、textarea等。</p>\n<p>这使得本来自己决定模型大小的元素可以受CSS控制决定位置排布和大小。在需要自适应元素大小的场景下很好用，比如用户头像展示等。</p>\n<p>唯一的小小缺憾可能是IE11还不支持这两个属性，以及Edge只支持对<code>&lt;img&gt;</code>使用。</p>\n<h2 id=\"移动端触摸默认行为优化\"><a href=\"#移动端触摸默认行为优化\" class=\"headerlink\" title=\"移动端触摸默认行为优化\"></a>移动端触摸默认行为优化</h2><ul>\n<li><code>user-select: none</code> 禁止用户选择</li>\n<li><code>-webkit-touch-callout: none</code> 防止长按contextmenu弹出。类似的还有<code>contextmenu</code>事件里的<code>e.preventDefault()</code></li>\n<li><code>-webkit-tap-highlight-color: transparent</code> 删除可点击元素默认的黑影</li>\n</ul>\n<h2 id=\"上传进度条\"><a href=\"#上传进度条\" class=\"headerlink\" title=\"上传进度条\"></a>上传进度条</h2><p>利用xhr事件的onprogress事件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhr.<span class=\"property\">onprogress</span> = <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (e.<span class=\"property\">lengthComputable</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e.<span class=\"property\">loaded</span>+  <span class=\"string\">&quot; / &quot;</span> + e.<span class=\"property\">total</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">xhr.<span class=\"property\">onloadstart</span> = <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;start&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">xhr.<span class=\"property\">onloadend</span> = <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;end&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"不显示滚动条\"><a href=\"#不显示滚动条\" class=\"headerlink\" title=\"不显示滚动条\"></a>不显示滚动条</h2><p>基于Webkit的浏览器，可以使用CSS的方式隐藏滚动条。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp;::-webkit-scrollbar &#123;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"attribute\">background</span>: transparent;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"keyup无法prevent-default\"><a href=\"#keyup无法prevent-default\" class=\"headerlink\" title=\"keyup无法prevent default\"></a>keyup无法prevent default</h2><blockquote>\n<p>keyup fires after the default action.</p>\n</blockquote>\n<blockquote>\n<p>keydown and keypress are where you can prevent the default.<br>If those aren’t stopped, then the default happens and keyup is fired.</p>\n</blockquote>\n<p>来源：<a href=\"https://stackoverflow.com/questions/16052592/javascript-prevent-default-for-keyup/16052627\">jquery - javascript prevent default for keyup - StackOverflow</a></p>\n<h2 id=\"mixin-in-react\"><a href=\"#mixin-in-react\" class=\"headerlink\" title=\"mixin in react\"></a>mixin in react</h2><p>版本16之前，可以用mixin特性。16之后使用高阶组件HOC + ES6 class语法实现。<a href=\"https://reactjs.org/docs/higher-order-components.html\">参考</a>。</p>\n<h2 id=\"user-select在Edge浏览器下的适配问题\"><a href=\"#user-select在Edge浏览器下的适配问题\" class=\"headerlink\" title=\"user-select在Edge浏览器下的适配问题\"></a><code>user-select</code>在Edge浏览器下的适配问题</h2><p>设置<code>user-select</code>为<code>none</code>在Edge浏览器下会导致input无法输入内容。可以用下面的写法，避免对<code>input</code>标签应用该属性。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*<span class=\"selector-pseudo\">:not</span>(<span class=\"selector-tag\">input</span>) &#123;</span><br><span class=\"line\">  user-select: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>参考：<a href=\"https://stackoverflow.com/questions/49614065/cant-type-in-input-field-using-microsoft-edge-and-safari\">html - Can’t type in input field using Microsoft Edge and Safari - StackOverflow</a></p>\n<h2 id=\"浏览器跨tab通信\"><a href=\"#浏览器跨tab通信\" class=\"headerlink\" title=\"浏览器跨tab通信\"></a>浏览器跨tab通信</h2><p>最近业务遇到了一个需求：同一浏览器上多tab用户信息同步的问题，所有这个域名下的需要强制一样的用户信息，避免困惑。</p>\n<p>跨tab通信主流方案有两种：</p>\n<ul>\n<li>localStorage，利用window的<code>storage</code>事件，传递信息</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Broadcast_Channel_API\">BroadcastChannel</a>，新的API，通过<code>postMessage</code>和<code>onMessage</code>完成双向通讯</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bc = <span class=\"keyword\">new</span> <span class=\"title class_\">BroadcastChannel</span>(<span class=\"string\">&#x27;test_channel&#x27;</span>);</span><br><span class=\"line\">bc.<span class=\"title function_\">postMessage</span>(<span class=\"string\">&#x27;This is a test message.&#x27;</span>); <span class=\"comment\">/* send */</span></span><br><span class=\"line\">bc.<span class=\"property\">onmessage</span> = <span class=\"keyword\">function</span> (<span class=\"params\">ev</span>) &#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(ev); &#125; <span class=\"comment\">/* receive */</span></span><br></pre></td></tr></table></figure>\n\n<p>后者还未得到广泛支持，需要前者进行polyfill。</p>\n<h2 id=\"aos\"><a href=\"#aos\" class=\"headerlink\" title=\"aos\"></a>aos</h2><p>Animation on scroll。<a href=\"https://github.com/michalsnik/aos\">michalsnik&#x2F;aos at master · Animate on scroll library</a>.元素滚动至中的CSS动画，适合实现官网、落地页等效果。</p>\n<h2 id=\"extract-text-webpack-plugin\"><a href=\"#extract-text-webpack-plugin\" class=\"headerlink\" title=\"extract-text-webpack-plugin\"></a>extract-text-webpack-plugin</h2><p>抽出CSS&#x2F;Less&#x2F;Sass等样式作为单独文件，用于那些需要提前加载样式的页面。详细用法见<a href=\"https://github.com/webpack-contrib/extract-text-webpack-plugin\">github</a></p>\n<p>坑：</p>\n<ol>\n<li>不支持webpack4.x，报内部错误（2018&#x2F;07&#x2F;30） &#x3D;&gt; 使用@next下载最新版</li>\n<li>报错<code>Module build failed: ReferenceError: window is not defined</code> &#x3D;&gt; style-loader在extract-text-webpack-plugin中只做fallback项使用，见<a href=\"https://github.com/webpack-contrib/extract-text-webpack-plugin/issues/503\">issue#503</a></li>\n</ol>\n<h2 id=\"常见调试技巧\"><a href=\"#常见调试技巧\" class=\"headerlink\" title=\"常见调试技巧\"></a>常见调试技巧</h2><ul>\n<li>代码中插入debugger可以在该位置触发断点调试</li>\n<li><code>console.dir</code>可以打印对象结构，大多数情况和<code>console.log</code>表现一致，在document等DOM元素上表现不同</li>\n</ul>\n<h2 id=\"react组件复用设计思路\"><a href=\"#react组件复用设计思路\" class=\"headerlink\" title=\"react组件复用设计思路\"></a>react组件复用设计思路</h2><ul>\n<li>当设计的组件为自闭型时，通过传入数据（<strong>不要传入功能</strong>）props的方式定制组件</li>\n<li>当设计的组件在有些场景下需要外部传入功能才能完整时，使用继承的方式实现</li>\n<li>在可以拆分出原子组件，<strong>且有此必要的时候</strong>，使用原子组件拼装业务组件</li>\n<li>HOC优于mixin</li>\n</ul>\n",
            "tags": [
                "git",
                "webpack",
                "z-index",
                "git submodule",
                "object-fit",
                "object-position",
                "BroadcastChannel",
                "extract-text-webpack-plugin"
            ]
        }
    ]
}