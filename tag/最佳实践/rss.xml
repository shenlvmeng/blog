<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Shenlvmeng&#39;s Blog • Posts by &#34;最佳实践&#34; tag</title>
        <link>http://shenlvmeng.github.com/blog</link>
        <description>Be sharp, my friend.</description>
        <language>zh-CN</language>
        <pubDate>Tue, 25 Jun 2019 00:51:28 +0800</pubDate>
        <lastBuildDate>Tue, 25 Jun 2019 00:51:28 +0800</lastBuildDate>
        <category>总结</category>
        <category>制度</category>
        <category>道德</category>
        <category>文官</category>
        <category>万历</category>
        <category>明朝</category>
        <category>读书笔记</category>
        <category>展望</category>
        <category>2018</category>
        <category>2019</category>
        <category>flag</category>
        <category>2020</category>
        <category>2021</category>
        <category>2022</category>
        <category>2023</category>
        <category>面试</category>
        <category>前端</category>
        <category>FAQ</category>
        <category>HTML</category>
        <category>CSS</category>
        <category>style guide</category>
        <category>编程</category>
        <category>范式</category>
        <category>设计</category>
        <category>艺术</category>
        <category>质量</category>
        <category>async_hooks</category>
        <category>cls-hooked</category>
        <category>logId</category>
        <category>录音</category>
        <category>getUserMedia</category>
        <category>AudioContext</category>
        <category>PCM</category>
        <category>WAVE</category>
        <category>二叉搜索树</category>
        <category>算法</category>
        <category>回忆</category>
        <category>老朋友</category>
        <category>C</category>
        <category>Hash</category>
        <category>布隆过滤器</category>
        <category>字符串检索</category>
        <category>canvas</category>
        <category>流程图</category>
        <category>d3</category>
        <category>g6</category>
        <category>zrender</category>
        <category>processOn</category>
        <category>SDN</category>
        <category>cbench</category>
        <category>安装说明</category>
        <category>绘图</category>
        <category>动画</category>
        <category>攻略</category>
        <category>流水账</category>
        <category>成都</category>
        <category>重庆</category>
        <category>武汉</category>
        <category>重构</category>
        <category>代码</category>
        <category>代码风格</category>
        <category>数据可视化</category>
        <category>爬虫</category>
        <category>chrome</category>
        <category>crx</category>
        <category>扩展</category>
        <category>CORS</category>
        <category>跨域</category>
        <category>盒模型</category>
        <category>浮动</category>
        <category>Reactive Programming</category>
        <category>JavaScript</category>
        <category>Cycle.js</category>
        <category>Dart</category>
        <category>最佳实践</category>
        <category>引流</category>
        <category>universal-link</category>
        <category>app-link</category>
        <category>脚手架</category>
        <category>degit</category>
        <category>git</category>
        <category>设计模式</category>
        <category>类</category>
        <category>接口</category>
        <category>抽象类</category>
        <category>DOM</category>
        <category>Docker</category>
        <category>ONOS</category>
        <category>控制器</category>
        <category>虚拟化</category>
        <category>笔记</category>
        <category>UX</category>
        <category>UED</category>
        <category>准则</category>
        <category>Java</category>
        <category>Ruby</category>
        <category>反射</category>
        <category>编程范式</category>
        <category>鸭子类型</category>
        <category>管理</category>
        <category>效率</category>
        <category>知识工作者</category>
        <category>卓有成效</category>
        <category>Elm</category>
        <category>框架</category>
        <category>函数式编程</category>
        <category>虚网映射</category>
        <category>Javascript</category>
        <category>并发</category>
        <category>event loop</category>
        <category>覆盖率</category>
        <category>端到端测试</category>
        <category>istanbul</category>
        <category>istanbuljs</category>
        <category>JavaSript</category>
        <category>Express</category>
        <category>源码</category>
        <category>代码覆盖率</category>
        <category>istanbul-middleware</category>
        <category>代码插桩</category>
        <category>require钩子</category>
        <category>babel-plugin-istanbul</category>
        <category>css</category>
        <category>html5</category>
        <category>flex</category>
        <category>javascript</category>
        <category>roadmap</category>
        <category>闭包</category>
        <category>Haskell</category>
        <category>monad</category>
        <category>后端</category>
        <category>管理后台</category>
        <category>egg.js</category>
        <category>工作流</category>
        <category>pull request</category>
        <category>golang</category>
        <category>语言学习</category>
        <category>黑客与画家</category>
        <category>创业</category>
        <category>骑行</category>
        <category>海南</category>
        <category>图文</category>
        <category>reflow</category>
        <category>repaint</category>
        <category>命名法</category>
        <category>成功学</category>
        <category>自我建设</category>
        <category>HTTP</category>
        <category>HTTP/2</category>
        <category>SPDY</category>
        <category>QUIC</category>
        <category>HTTPS</category>
        <category>状态码</category>
        <category>网络攻击</category>
        <category>介绍</category>
        <category>图片渲染</category>
        <category>html2canvas</category>
        <category>dom-to-image</category>
        <category>electron</category>
        <category>indexedDB</category>
        <category>异步</category>
        <category>Generator</category>
        <category>thunk</category>
        <category>async</category>
        <category>函数表达式</category>
        <category>对象</category>
        <category>继承</category>
        <category>类型转换</category>
        <category>==</category>
        <category>类型判断</category>
        <category>猫</category>
        <category>杀手</category>
        <category>管理学</category>
        <category>领导力</category>
        <category>梯队</category>
        <category>移动端</category>
        <category>UI</category>
        <category>自适应</category>
        <category>rem</category>
        <category>Electron</category>
        <category>GUI</category>
        <category>gpx</category>
        <category>template</category>
        <category>Electron Builder</category>
        <category>PWA</category>
        <category>方法论</category>
        <category>夜话</category>
        <category>多线</category>
        <category>生活</category>
        <category>密码</category>
        <category>密钥</category>
        <category>技改</category>
        <category>Vue</category>
        <category>gulp</category>
        <category>瀑布流</category>
        <category>电影</category>
        <category>PHP</category>
        <category>参考</category>
        <category>思维</category>
        <category>学习能力</category>
        <category>右脑</category>
        <category>经济学</category>
        <category>宏观经济学</category>
        <category>术语</category>
        <category>GDP</category>
        <category>CPI</category>
        <category>储蓄</category>
        <category>投资</category>
        <category>金融市场</category>
        <category>股票</category>
        <category>债券</category>
        <category>美联储</category>
        <category>失业</category>
        <category>货币</category>
        <category>现值</category>
        <category>准备金</category>
        <category>货币中性</category>
        <category>通货膨胀</category>
        <category>汇率</category>
        <category>购买力</category>
        <category>净出口</category>
        <category>资产净流出</category>
        <category>总需求</category>
        <category>总供给</category>
        <category>流动性偏好</category>
        <category>乘数效应</category>
        <category>菲利普斯曲线</category>
        <category>微观经济学</category>
        <category>供求</category>
        <category>贸易</category>
        <category>市场</category>
        <category>税</category>
        <category>剩余</category>
        <category>外部性</category>
        <category>公共物品</category>
        <category>公共资源</category>
        <category>生产成本</category>
        <category>利润</category>
        <category>垄断</category>
        <category>价格歧视</category>
        <category>寡头</category>
        <category>垄断竞争</category>
        <category>生产要素市场</category>
        <category>贫困</category>
        <category>消费者选择理论</category>
        <category>不对称信息</category>
        <category>政治经济学</category>
        <category>行为经济学</category>
        <category>VSCode</category>
        <category>编辑器</category>
        <category>IDE</category>
        <category>hybrid</category>
        <category>JSBridge</category>
        <category>Web Worker</category>
        <category>Service Worker</category>
        <category>习惯</category>
        <category>lint</category>
        <category>editorconfig</category>
        <category>commit message</category>
        <category>量子物理</category>
        <category>史话</category>
        <category>埋点</category>
        <category>raven.js</category>
        <category>前端监控</category>
        <category>文本编辑器</category>
        <category>quill</category>
        <category>结构化数据</category>
        <category>React</category>
        <category>Hooks</category>
        <category>函数组件</category>
        <category>复用</category>
        <category>状态管理</category>
        <category>redux</category>
        <category>MobX</category>
        <category>代码质量</category>
        <category>重来</category>
        <category>requestAnimationFrame</category>
        <category>TypeScript</category>
        <category>路书</category>
        <category>gpx解析</category>
        <category>EXIF</category>
        <category>人类</category>
        <category>生存</category>
        <category>基因</category>
        <category>响应式编程</category>
        <category>RxJS</category>
        <category>成长</category>
        <category>业务</category>
        <category>思想</category>
        <category>程序设计</category>
        <category>心理学</category>
        <category>自我</category>
        <category>社会思维</category>
        <category>社会影响</category>
        <category>文化</category>
        <category>性别</category>
        <category>从众</category>
        <category>说服</category>
        <category>临床诊断</category>
        <category>陪审团</category>
        <category>司法</category>
        <category>物质主义</category>
        <category>健康</category>
        <category>社会关系</category>
        <category>偏见</category>
        <category>攻击行为</category>
        <category>亲密关系</category>
        <category>友谊</category>
        <category>爱情</category>
        <category>利他</category>
        <category>冲突</category>
        <category>和解</category>
        <category>软技能</category>
        <category>理财</category>
        <category>健身</category>
        <category>自我营销</category>
        <category>学习</category>
        <category>商业模式</category>
        <category>产品</category>
        <category>校园网</category>
        <category>互联网</category>
        <category>技术</category>
        <category>web开发</category>
        <category>哲思</category>
        <category>择偶观</category>
        <category>validator</category>
        <category>大文件</category>
        <category>visibilityChange</category>
        <category>IntersectionObserver</category>
        <category>图种</category>
        <category>draggable</category>
        <category>webpack</category>
        <category>z-index</category>
        <category>git submodule</category>
        <category>object-fit</category>
        <category>object-position</category>
        <category>BroadcastChannel</category>
        <category>extract-text-webpack-plugin</category>
        <category>lottie</category>
        <category>backface-visibility</category>
        <category>egret</category>
        <category>mock</category>
        <category>SSO</category>
        <category>autoprefixer</category>
        <category>polyfill</category>
        <category>Android</category>
        <category>ffmpeg</category>
        <category>React Hooks</category>
        <category>rollup</category>
        <category>CDN</category>
        <category>DNS</category>
        <category>CNAME</category>
        <category>架构</category>
        <category>组件</category>
        <category>ssh</category>
        <category>fis-receiver</category>
        <category>tmux</category>
        <category>origami</category>
        <category>promise</category>
        <category>encodeURI</category>
        <category>encodeURIComponent</category>
        <category>axios</category>
        <category>charles</category>
        <category>黑色幽默</category>
        <category>朋友</category>
        <category>梦</category>
        <category>濒死</category>
        <category>江南</category>
        <category>苏州</category>
        <category>无锡</category>
        <category>宜兴</category>
        <category>湖州</category>
        <category>南浔</category>
        <category>游记</category>
        <category>随笔</category>
        <category>群众</category>
        <category>理论</category>
        <category>实效</category>
        <category>测试</category>
        <category>长沙</category>
        <category>杭州</category>
        <category>湖南</category>
        <category>核酸</category>
        <category>美食</category>
        <category>云南</category>
        <category>丽江</category>
        <category>大理</category>
        <category>青岛</category>
        <category>济南</category>
        <category>山东</category>
        <category>西北</category>
        <category>银川</category>
        <category>西宁</category>
        <category>青海湖</category>
        <category>西海镇</category>
        <category>茶卡盐湖</category>
        <category>厦门</category>
        <category>感受</category>
        <category>C语言</category>
        <category>树</category>
        <category>主干开发</category>
        <category>GitFlow</category>
        <category>GithubFlow</category>
        <category>typescript</category>
        <category>类型系统</category>
        <category>webrtc</category>
        <category>RTMP</category>
        <category>首屏时间</category>
        <category>性能优化</category>
        <category>公司</category>
        <category>个人发展</category>
        <category>战略</category>
        <category>晋升</category>
        <category>哲学</category>
        <category>幸福</category>
        <category>人生</category>
        <category>叔本华</category>
        <category>Unix</category>
        <category>Rollup</category>
        <category>mouseout</category>
        <category>mouseleave</category>
        <category>lint-staged</category>
        <category>吸顶</category>
        <category>图片组件</category>
        <category>形式系统</category>
        <category>不完全性</category>
        <category>隐喻</category>
        <category>哥德尔</category>
        <category>巴赫</category>
        <category>埃舍尔</category>
        <category>济州</category>
        <category>西归浦</category>
        <category>城山</category>
        <category>咸德</category>
        <category>人工智能</category>
        <category>心智</category>
        <category>自指</category>
        <category>图灵</category>
        <category>马列主义</category>
        <category>恩格斯</category>
        <category>家庭</category>
        <category>国家</category>
        <category>阶级</category>
        <category>氏族</category>
        <category>哲学史</category>
        <category>孔子</category>
        <category>老子</category>
        <category>儒家</category>
        <category>道家</category>
        <category>佛教</category>
        <category>禅宗</category>
        <category>理学</category>
        <category>心学</category>
        <category>计算机</category>
        <category>微机原理</category>
        <category>门</category>
        <category>操作系统</category>
        <category>数字电路</category>
        <category>2024</category>
        <item>
            <guid isPermalink="true">http://shenlvmeng.github.com/blog/2019/06/25/dart-best-practice/</guid>
            <title>Dart快速入门 效率篇</title>
            <link>http://shenlvmeng.github.com/blog/2019/06/25/dart-best-practice/</link>
            <category>Dart</category>
            <category>最佳实践</category>
            <pubDate>Tue, 25 Jun 2019 00:51:28 +0800</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;参考自&lt;a href=&#34;https://dart.dev/guides/language/effective-dart&#34;&gt;Effective Dart&lt;/a&gt;，截至2019&amp;#x2F;06&amp;#x2F;12&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;通用原则&#34;&gt;&lt;a href=&#34;#通用原则&#34; class=&#34;headerlink&#34; title=&#34;通用原则&#34;&gt;&lt;/a&gt;通用原则&lt;/h2&gt;&lt;p&gt;类似其他编程语言，有下面两点注意事项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Be consistent, 统一风格&lt;/li&gt;
&lt;li&gt;Be brief, 保持精简，DRY&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;最佳实践&#34;&gt;&lt;a href=&#34;#最佳实践&#34; class=&#34;headerlink&#34; title=&#34;最佳实践&#34;&gt;&lt;/a&gt;最佳实践&lt;/h2&gt;&lt;p&gt;指南以下面的关键词开头：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;要&lt;/strong&gt;，一定遵守，下面没有前缀的就是以此开头&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不要&lt;/strong&gt;，这么做不是个好主意&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;，应该遵守，当不遵守时确保有合理理由&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;，和上面相反，除非有足够好的理由，否则不应该这么做&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;考虑&lt;/strong&gt;，根据实际情况而定&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同时会提到下面这些客体：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;库成员&lt;/strong&gt;，顶级变量、getter、setter、函数&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;类成员&lt;/strong&gt;，类变量、getter、setter、函数&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;成员&lt;/strong&gt;，库成员或类成员&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;变量&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;属性&lt;/strong&gt;，类中的成员变量、getter、setter，顶级变量、getter、setter&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;样式&#34;&gt;&lt;a href=&#34;#样式&#34; class=&#34;headerlink&#34; title=&#34;样式&#34;&gt;&lt;/a&gt;样式&lt;/h3&gt;&lt;h4 id=&#34;标识符&#34;&gt;&lt;a href=&#34;#标识符&#34; class=&#34;headerlink&#34; title=&#34;标识符&#34;&gt;&lt;/a&gt;标识符&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;类名用UpperCamelCase风格&lt;/li&gt;
&lt;li&gt;库和文件名用lowercase_with_underscores风格&lt;/li&gt;
&lt;li&gt;导入前缀用lowercase_with_underscores风格&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;package:javascript_utils/javascript_utils.dart&amp;#x27;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; js_utils;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;其他标识符使用lowerCamelCase风格&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用lowerCamelCase风格命名常量&lt;ul&gt;
&lt;li&gt;原因：CAPS_STYLE可读性差&amp;#x2F;可能会用于final变量&amp;#x2F;和枚举不搭&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;把超过2个字母的缩略词当做一般单词来做首字母大写&lt;ul&gt;
&lt;li&gt;原因：提高可读性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不要&lt;/strong&gt;在标识符前加前缀&lt;ul&gt;
&lt;li&gt;举例：&lt;code&gt;kTimes&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;顺序&#34;&gt;&lt;a href=&#34;#顺序&#34; class=&#34;headerlink&#34; title=&#34;顺序&#34;&gt;&lt;/a&gt;顺序&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;把”dart:”导入语句放在最前&lt;/li&gt;
&lt;li&gt;把”package:”放在相对导入前&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;把第三方”package:”导入放在其他语句前&lt;/li&gt;
&lt;li&gt;export语句放在最后&lt;/li&gt;
&lt;li&gt;按字母序排序&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;格式化&#34;&gt;&lt;a href=&#34;#格式化&#34; class=&#34;headerlink&#34; title=&#34;格式化&#34;&gt;&lt;/a&gt;格式化&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;使用dartfmt帮你美化&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;考虑&lt;/strong&gt;让你的代码更容易美化&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;每行超过80字符&lt;/li&gt;
&lt;li&gt;所有控制结构都使用大括号&lt;ul&gt;
&lt;li&gt;只有if语句写成1行时可以省略&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;文档&#34;&gt;&lt;a href=&#34;#文档&#34; class=&#34;headerlink&#34; title=&#34;文档&#34;&gt;&lt;/a&gt;文档&lt;/h3&gt;&lt;h4 id=&#34;注释&#34;&gt;&lt;a href=&#34;#注释&#34; class=&#34;headerlink&#34; title=&#34;注释&#34;&gt;&lt;/a&gt;注释&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;使用句子的形式表达注释&lt;/li&gt;
&lt;li&gt;用单行注释符表达注释&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;文档注释&#34;&gt;&lt;a href=&#34;#文档注释&#34; class=&#34;headerlink&#34; title=&#34;文档注释&#34;&gt;&lt;/a&gt;文档注释&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;用&lt;code&gt;///&lt;/code&gt;表达文档注释&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;为公开API书写注释&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;考虑&lt;/strong&gt;为私有API书写注释&lt;/li&gt;
&lt;li&gt;用一句话为文档注释开头&lt;/li&gt;
&lt;li&gt;类似git commit message，第一行后空出一行独立成段&lt;/li&gt;
&lt;li&gt;去掉能从上下文直接读出的冗余信息&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用第三人称动词开头表示函数、方法注释&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用名词短语开头表示变量、成员、getter、setter注释&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用名词短语开头表示库、类型注释&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;考虑&lt;/strong&gt;在注释中添加示例代码&lt;/li&gt;
&lt;li&gt;在注释中用&lt;code&gt;[]&lt;/code&gt;方括号引用作用域里的标识符&lt;/li&gt;
&lt;li&gt;使用简短平实的语言描述参数、返回值和异常&lt;/li&gt;
&lt;li&gt;在注解（annotation）前添加注释&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Markdown&#34;&gt;&lt;a href=&#34;#Markdown&#34; class=&#34;headerlink&#34; title=&#34;Markdown&#34;&gt;&lt;/a&gt;Markdown&lt;/h4&gt;&lt;p&gt;Dart允许在comment中使用Markdown格式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;滥用markdown&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;使用html格式化文本&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用反引号（```）格式化代码&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;行文&#34;&gt;&lt;a href=&#34;#行文&#34; class=&#34;headerlink&#34; title=&#34;行文&#34;&gt;&lt;/a&gt;行文&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;简洁清晰&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;使用缩写和首字母缩略词&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用“this”而不是“the”来引用实例成员&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;实践&#34;&gt;&lt;a href=&#34;#实践&#34; class=&#34;headerlink&#34; title=&#34;实践&#34;&gt;&lt;/a&gt;实践&lt;/h3&gt;&lt;p&gt;下面的规则是书写Dart代码时需要知道的指导原则，尤其是维护你类库的人。&lt;/p&gt;
&lt;h4 id=&#34;库&#34;&gt;&lt;a href=&#34;#库&#34; class=&#34;headerlink&#34; title=&#34;库&#34;&gt;&lt;/a&gt;库&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;出于历史原因，Dart允许通过&lt;code&gt;part of&lt;/code&gt;的方式使用库的一部分文件，使用时通过路径而不是变量名引用&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;library&lt;/span&gt; my_library;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// good case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;part&lt;/span&gt; of &lt;span class=&#34;string&#34;&gt;&amp;quot;../../my_library.dart&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// bad case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;part&lt;/span&gt; of my_library&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不要从库的&lt;code&gt;src&lt;/code&gt;文件夹下引用代码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用相对路径应用库，但是不要跨&lt;code&gt;src&lt;/code&gt;文件夹引用&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;字符串&#34;&gt;&lt;a href=&#34;#字符串&#34; class=&#34;headerlink&#34; title=&#34;字符串&#34;&gt;&lt;/a&gt;字符串&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;在长字符串场景下，使用邻接字符串而不是“+”链接&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// good case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;raiseAlarm(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;#x27;ERROR: Parts of the spaceship are on fire. Other &amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;#x27;parts are overrun by martians. Unclear which are which.&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用插值构造字符串&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;在插值中使用多余的大括号（对于简单的变量）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;集合&#34;&gt;&lt;a href=&#34;#集合&#34; class=&#34;headerlink&#34; title=&#34;集合&#34;&gt;&lt;/a&gt;集合&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;尽可能使用字面量形式定义集合，必要时提供泛型类型即可&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// good case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; points = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; userMap = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// bad case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; points = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;List&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; userMap = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;Map&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;不使用length属性判断集合是否为空，Dart提供了&lt;code&gt;isEmpty&lt;/code&gt;和&lt;code&gt;isNotEmpty&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;考虑&lt;/strong&gt;使用高阶函数来明确表达你的意图&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; aquaticNames = animals&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .where((animal) =&amp;gt; animal.isAquatic)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .map((animal) =&amp;gt; animal.name);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;在&lt;code&gt;Iterable.forEach()&lt;/code&gt;中使用函数声明，Dart里的&lt;code&gt;for-in&lt;/code&gt;循环可以很好完成该工作，当然函数本身已经定义好除外。&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// good case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; person &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; people) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;people.forEach(&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;iterable.toList&lt;/code&gt;替代&lt;code&gt;List.from&lt;/code&gt;，只在改变list类型时使用&lt;code&gt;List.from&lt;/code&gt;&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Creates a List&amp;lt;int&amp;gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; iterable = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Prints &amp;quot;List&amp;lt;int&amp;gt;&amp;quot;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(iterable.toList().runtimeType);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Prints &amp;quot;List&amp;lt;dynamic&amp;gt;&amp;quot;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;List&lt;/span&gt;.from(iterable).runtimeType);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Use it with a type&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; numbers = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2.3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;]; &lt;span class=&#34;comment&#34;&gt;// List&amp;lt;num&amp;gt;.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;numbers.removeAt(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;// Now it only contains integers.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; ints = &lt;span class=&#34;built_in&#34;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;&amp;gt;.from(numbers);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;使用高级的&lt;code&gt;whereType&lt;/code&gt;方法从collection中过滤出特定类型元素&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; objects = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; ints = objects.whereType&amp;lt;&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;有类似用法时，不使用&lt;code&gt;cast()&lt;/code&gt;方法&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; stuff = &amp;lt;&lt;span class=&#34;built_in&#34;&gt;dynamic&lt;/span&gt;&amp;gt;[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Good case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; ints = &lt;span class=&#34;built_in&#34;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;&amp;gt;.from(stuff);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Bad case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; ints = stuff.toList().cast&amp;lt;&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;使用&lt;code&gt;cast()&lt;/code&gt;方法，用该方法可能更慢且更有风险，通常情况下有下面一些备选方案&lt;ul&gt;
&lt;li&gt;创建有正确类型的list&lt;/li&gt;
&lt;li&gt;使用每个集合元素时进行casting操作&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Good case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; printEvens(&lt;span class=&#34;built_in&#34;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;Object&lt;/span&gt;&amp;gt; objects) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// We happen to know the list only contains ints.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; n &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; objects) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ((n &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;).isEven) &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Bad case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; printEvens(&lt;span class=&#34;built_in&#34;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;Object&lt;/span&gt;&amp;gt; objects) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// We happen to know the list only contains ints.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; n &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; objects.cast&amp;lt;&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;&amp;gt;()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (n.isEven) &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;真正想要强制类型转换时，使用附加类型的&lt;code&gt;List.from&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;函数&#34;&gt;&lt;a href=&#34;#函数&#34; class=&#34;headerlink&#34; title=&#34;函数&#34;&gt;&lt;/a&gt;函数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;使用函数声明形式命名有名函数（不要使用lambda表达式）&lt;/li&gt;
&lt;li&gt;当有有名函数可以完成任务时，不要创建lambda表达式&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Good case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;names.forEach(&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Bad case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;names.forEach((name) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(name);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;参数&#34;&gt;&lt;a href=&#34;#参数&#34; class=&#34;headerlink&#34; title=&#34;参数&#34;&gt;&lt;/a&gt;参数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;=&lt;/code&gt;分隔入参和它的默认值&lt;/li&gt;
&lt;li&gt;不要显式地使用&lt;code&gt;null&lt;/code&gt;作为默认值（直接不指定即可）&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; error([&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt; message]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  stderr.write(message ?? &lt;span class=&#34;string&#34;&gt;&amp;#x27;\n&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;变量&#34;&gt;&lt;a href=&#34;#变量&#34; class=&#34;headerlink&#34; title=&#34;变量&#34;&gt;&lt;/a&gt;变量&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;不要显式地使用null初始化变量（语言保证了行为可靠性，不需要再显式设置成null）&lt;/li&gt;
&lt;li&gt;不要存储computed value（即可以推算出的值） ，减少冗余信息，保证数据唯一可信源，使用getter和setter去动态推导出它们&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;考虑&lt;/strong&gt;忽略局部变量的类型，Dart有强大的静态分析工具帮你推断类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;成员&#34;&gt;&lt;a href=&#34;#成员&#34; class=&#34;headerlink&#34; title=&#34;成员&#34;&gt;&lt;/a&gt;成员&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;不要创建没必要的getter和setter&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用final限定只读属性&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;考虑&lt;/strong&gt;使用&lt;code&gt;=&amp;gt;&lt;/code&gt;实现只有单一返回语句的函数，对于多行语句建议还是老老实实使用花括号&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;get&lt;/span&gt; width =&amp;gt; right - left;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt; ready(&lt;span class=&#34;built_in&#34;&gt;num&lt;/span&gt; time) =&amp;gt; minTime == &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt; || minTime &amp;lt;= time;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;containsValue(&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt; value) =&amp;gt; getValues().contains(value);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;不要使用&lt;code&gt;this.&lt;/code&gt;访问成员，除非遇到变量冲突&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Good case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Box&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; value;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; clear() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    update(&lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; update(value) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.value = value;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Bad case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Box&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; value;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; clear() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.update(&lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; update(value) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.value = value;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;尽可能地在定义变量时初始化该值&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;构造函数&#34;&gt;&lt;a href=&#34;#构造函数&#34; class=&#34;headerlink&#34; title=&#34;构造函数&#34;&gt;&lt;/a&gt;构造函数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;尽可能使用更简洁的初始化形式&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Point&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;num&lt;/span&gt; x, y;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Point(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.x, &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;不要在初始化形式中定义类型&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;;&lt;/code&gt;代替&lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;表示空方法&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Point&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; x, y;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Point(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.x, &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;不要使用可选的&lt;code&gt;new&lt;/code&gt;来返回一个对象&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Widget build(BuildContext context) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; Row(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    children: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      RaisedButton(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        child: Text(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Increment&amp;#x27;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      ),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      Text(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Click!&amp;#x27;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;不要无谓地使用&lt;code&gt;const&lt;/code&gt;（基本上const可能出现在所有你能使用&lt;code&gt;new&lt;/code&gt;的地方），因为有些语境已经隐式包含了const语义&lt;ul&gt;
&lt;li&gt;字面量集合&lt;/li&gt;
&lt;li&gt;const构造函数调用&lt;/li&gt;
&lt;li&gt;metadata注解&lt;/li&gt;
&lt;li&gt;switch的每一个case&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;异常处理&#34;&gt;&lt;a href=&#34;#异常处理&#34; class=&#34;headerlink&#34; title=&#34;异常处理&#34;&gt;&lt;/a&gt;异常处理&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;不要在&lt;code&gt;on&lt;/code&gt;以外的语句中丢弃错误，因为在没有&lt;code&gt;on&lt;/code&gt;限定时，catch会捕获&lt;em&gt;所有&lt;/em&gt;异常&lt;/li&gt;
&lt;li&gt;要只在编程错误时抛出Error的异常&lt;/li&gt;
&lt;li&gt;不要显式地捕获Error及其子类&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;rethrow&lt;/code&gt;重新抛出异常&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;异步&#34;&gt;&lt;a href=&#34;#异步&#34; class=&#34;headerlink&#34; title=&#34;异步&#34;&gt;&lt;/a&gt;异步&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用&lt;code&gt;async&lt;/code&gt;和&lt;code&gt;await&lt;/code&gt;提升你的异步代码可读性&lt;/li&gt;
&lt;li&gt;只在必要的时候使用&lt;code&gt;async&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;代码块中使用了&lt;code&gt;await&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;希望返回一个Future&lt;/li&gt;
&lt;li&gt;希望更方便地处理异步中出现的Error&lt;/li&gt;
&lt;li&gt;异步事件发生具有先后顺序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;考虑&lt;/strong&gt;使用高阶函数处理stream&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;直接使用&lt;code&gt;Completer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;用&lt;code&gt;Future&amp;lt;T&amp;gt;&lt;/code&gt;而不是&lt;code&gt;T&lt;/code&gt;判断&lt;code&gt;FutureOr&amp;lt;T&amp;gt;&lt;/code&gt;的具体类型&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;API设计&#34;&gt;&lt;a href=&#34;#API设计&#34; class=&#34;headerlink&#34; title=&#34;API设计&#34;&gt;&lt;/a&gt;API设计&lt;/h3&gt;&lt;h4 id=&#34;命名&#34;&gt;&lt;a href=&#34;#命名&#34; class=&#34;headerlink&#34; title=&#34;命名&#34;&gt;&lt;/a&gt;命名&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;使用一致的术语&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;缩写，只使用广为人知的缩写&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;把描述中心词放在最后&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;考虑&lt;/strong&gt;尽量让代码看起来像普通的句子&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用名词短语命名非布尔类型的成员或变量&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用非命令式短语命名布尔类型成员或变量&lt;ul&gt;
&lt;li&gt;比如配合be动词的不同时态，&lt;code&gt;isEnabled&lt;/code&gt;, &lt;code&gt;hasShown&lt;/code&gt;等&lt;/li&gt;
&lt;li&gt;配合助动词，比如&lt;code&gt;hasChildren&lt;/code&gt;, &lt;code&gt;canSave&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有可能的情况下，&lt;strong&gt;考虑&lt;/strong&gt;省去上一种情况里的动词&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用正向含义的布尔类型变量&amp;#x2F;方法名&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用命令式动词命名带有副作用的函数和方法&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;考虑&lt;/strong&gt;使用名词短语或非命令式动词命名返回数据为主要功能的方法或函数&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;list.elementAt(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;string.codeUnitAt(&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;考虑&lt;/strong&gt;使用命令式动词表示你需要对方法所做工作有所关心&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;使用&lt;em&gt;get&lt;/em&gt;开头的命名，它通常能用getter代替&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用&lt;code&gt;to___()&lt;/code&gt;来命名类型转换&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用&lt;code&gt;as___()&lt;/code&gt;来命名类型快照&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;在命名中使用方法、函数的入参&lt;/li&gt;
&lt;li&gt;使用助记符命名类型参数&lt;ul&gt;
&lt;li&gt;&lt;code&gt;E&lt;/code&gt;代表集合元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;K&lt;/code&gt;和&lt;code&gt;V&lt;/code&gt;代表key和value&lt;/li&gt;
&lt;li&gt;&lt;code&gt;R&lt;/code&gt;代表return type&lt;/li&gt;
&lt;li&gt;&lt;code&gt;T&lt;/code&gt;, &lt;code&gt;S&lt;/code&gt;和&lt;code&gt;U&lt;/code&gt;命名单一通用且上下文表意清晰的泛型&lt;/li&gt;
&lt;li&gt;除上面情况外，可以使用完整词汇作为泛型类型名&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;库-1&#34;&gt;&lt;a href=&#34;#库-1&#34; class=&#34;headerlink&#34; title=&#34;库&#34;&gt;&lt;/a&gt;库&lt;/h4&gt;&lt;p&gt;下划线开头的成员表示成员是私有的，这个特性是内置在Dart语言中的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用私有声明，未用&lt;code&gt;_&lt;/code&gt;开头的库中的公开声明、顶级定义表示其他库可以访问这些成员，同时也会受到库实现契约的约束。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;考虑&lt;/strong&gt;在同一个库内定义多个类，这样便于在类之间共享私有变量&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;类&#34;&gt;&lt;a href=&#34;#类&#34; class=&#34;headerlink&#34; title=&#34;类&#34;&gt;&lt;/a&gt;类&lt;/h4&gt;&lt;p&gt;Dart是纯OOP的语言，它的所有对象都是类实例。当然不像Java，Dart也允许你定义顶级的变量、函数…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;定义一个函数就可以实现的只有一个实现方法的抽象类&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; Predicate&amp;lt;E&amp;gt; = &lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;Function&lt;/span&gt;(E element);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Predicate&lt;/span&gt;&amp;lt;&lt;span class=&#34;title&#34;&gt;E&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt; test(E element);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;定义只有静态成员的类，可以使用顶级变量、函数更方便地实现等价效果。当然，如果变量属于一个组，可以这么实现&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;不必要地定义子类&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;实现一个不作为接口的类&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;mixin不设计用作mixin的类&lt;/li&gt;
&lt;li&gt;在你的类支持拓展时，定义好文档&lt;/li&gt;
&lt;li&gt;在你的类作为接口存在时，定义好文档&lt;/li&gt;
&lt;li&gt;在你的类作为mixin存在时，定义好文档&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;构造函数-1&#34;&gt;&lt;a href=&#34;#构造函数-1&#34; class=&#34;headerlink&#34; title=&#34;构造函数&#34;&gt;&lt;/a&gt;构造函数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;考虑&lt;/strong&gt;在类支持的情况下，让构造函数成为const&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;成员-1&#34;&gt;&lt;a href=&#34;#成员-1&#34; class=&#34;headerlink&#34; title=&#34;成员&#34;&gt;&lt;/a&gt;成员&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;考虑&lt;/strong&gt;尽可能地把成员变量和顶级变量定义为final类型&lt;/li&gt;
&lt;li&gt;使用setter和getter定义computed value&lt;/li&gt;
&lt;li&gt;不要使用没有getter的setter&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;在返回bool，double，int，num的方法里返回null&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;在方法中返回this，只为了串联调用函数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;类型&#34;&gt;&lt;a href=&#34;#类型&#34; class=&#34;headerlink&#34; title=&#34;类型&#34;&gt;&lt;/a&gt;类型&lt;/h4&gt;&lt;p&gt;Dart中的类型可以帮助使用者理解你API中的静态类型设计，它分两种：类型注解和类型参数。前一种放在变量名前注解变量类型，后一种作为泛型参数传入。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt; isEmpty(&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt; parameter) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt; result = parameter.length == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;&amp;gt; ints = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在未指定类型时，Dart会从上下文自动推断或者使用缺省的&lt;code&gt;dynamic&lt;/code&gt;类型。&lt;/p&gt;
&lt;p&gt;简言之，Dart提供了强大的类型推导简化了你声明类型的负担，但同时不声明类型会降低API的可读性，下面一些guideline帮你在两点间找到一个平衡。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;对于类型表意不清晰的public属性和顶级变量使用类型注解&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Future&amp;lt;&lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt;&amp;gt; install(PackageId id, &lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt; destination) =&amp;gt; ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; screenWidth = &lt;span class=&#34;number&#34;&gt;640&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// Inferred as int.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;考虑&lt;/strong&gt;对于类型表意不清晰的private属性添加类型注解&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;为局部变量添加类型注解，如果你需要静态类型提供的便利，可以借助&lt;code&gt;is&lt;/code&gt;限制变量类型&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;在方法表达式上使用类型，考虑到方法表达式通常作为方法入参，类型可以自动推断，不需要类型注解&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;冗余的泛型和类型注解&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Good case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;Set&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt;&amp;gt; things = &lt;span class=&#34;built_in&#34;&gt;Set&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Bad case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;Set&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt;&amp;gt; things = &lt;span class=&#34;built_in&#34;&gt;Set&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;在不希望使用Dart推断的类型时，使用类型注解&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用显示的dynamic代替Dart推断失败回退的dynamic&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;在Function类型注解中添加函数类型签名&lt;/li&gt;
&lt;li&gt;不要为setter指定返回值&lt;/li&gt;
&lt;li&gt;使用新式的typeof判断类型&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; Comparison&amp;lt;T&amp;gt; = &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;Function&lt;/span&gt;(T, T);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;Object&lt;/code&gt;代替&lt;code&gt;dynamic&lt;/code&gt;表示可以接受任何对象&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;Future&amp;lt;void&amp;gt;&lt;/code&gt;作为无返回值的异步函数返回类型&lt;/li&gt;
&lt;li&gt;不使用&lt;code&gt;FutureOr&amp;lt;T&amp;gt;&lt;/code&gt;作为返回值&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;参数-1&#34;&gt;&lt;a href=&#34;#参数-1&#34; class=&#34;headerlink&#34; title=&#34;参数&#34;&gt;&lt;/a&gt;参数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;位置参数作为可选布尔参数，这样可读性比较差&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Bad case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Task(&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Task(&lt;span class=&#34;keyword&#34;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ListBox(&lt;span class=&#34;keyword&#34;&gt;false&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Button(&lt;span class=&#34;keyword&#34;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Good case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;将用户想忽略的参数放在位置可选参数的前列&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;使用强制的无意义的参数&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Bad case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;string.substring(start, &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;使用&lt;strong&gt;左闭右开&lt;/strong&gt;区间表示两个参数代表的范围&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;相同判断&#34;&gt;&lt;a href=&#34;#相同判断&#34; class=&#34;headerlink&#34; title=&#34;相同判断&#34;&gt;&lt;/a&gt;相同判断&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;覆写&lt;code&gt;==&lt;/code&gt;的同时覆写&lt;code&gt;hashCode&lt;/code&gt;，默认的哈希函数实现了恒等式哈希。&lt;strong&gt;任何两个相等的两个对象必须具有相同的哈希值&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;==&lt;/code&gt;需要遵循数学的相等规则&lt;ul&gt;
&lt;li&gt;自反，a &amp;#x3D;&amp;#x3D; a&lt;/li&gt;
&lt;li&gt;对称，a &amp;#x3D;&amp;#x3D; b &amp;#x3D;&amp;gt; b &amp;#x3D;&amp;#x3D; a&lt;/li&gt;
&lt;li&gt;传递，a &amp;#x3D;&amp;#x3D; b &amp;amp;&amp;amp; b &amp;#x3D;&amp;#x3D; c &amp;#x3D;&amp;gt; a &amp;#x3D;&amp;#x3D; c&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;为可变对象自定义相等函数，&lt;code&gt;hashCode&lt;/code&gt;函数会增加你的工作量&lt;/li&gt;
&lt;li&gt;不要在自定义&lt;code&gt;==&lt;/code&gt;中判断null，Dart也已经替你做了这部分工作&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
    </channel>
</rss>
