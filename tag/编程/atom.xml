<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://shenlvmeng.github.com/blog</id>
    <title>Shenlvmeng&#39;s Blog • Posts by &#34;编程&#34; tag</title>
    <link href="http://shenlvmeng.github.com/blog" />
    <updated>2022-08-25T14:37:19.000Z</updated>
    <category term="总结" />
    <category term="制度" />
    <category term="道德" />
    <category term="文官" />
    <category term="万历" />
    <category term="明朝" />
    <category term="读书笔记" />
    <category term="展望" />
    <category term="2018" />
    <category term="2019" />
    <category term="flag" />
    <category term="2020" />
    <category term="2021" />
    <category term="2022" />
    <category term="2023" />
    <category term="面试" />
    <category term="前端" />
    <category term="FAQ" />
    <category term="HTML" />
    <category term="CSS" />
    <category term="style guide" />
    <category term="编程" />
    <category term="范式" />
    <category term="设计" />
    <category term="艺术" />
    <category term="质量" />
    <category term="async_hooks" />
    <category term="cls-hooked" />
    <category term="logId" />
    <category term="录音" />
    <category term="getUserMedia" />
    <category term="AudioContext" />
    <category term="PCM" />
    <category term="WAVE" />
    <category term="二叉搜索树" />
    <category term="算法" />
    <category term="回忆" />
    <category term="老朋友" />
    <category term="C" />
    <category term="Hash" />
    <category term="布隆过滤器" />
    <category term="字符串检索" />
    <category term="canvas" />
    <category term="流程图" />
    <category term="d3" />
    <category term="g6" />
    <category term="zrender" />
    <category term="processOn" />
    <category term="SDN" />
    <category term="cbench" />
    <category term="安装说明" />
    <category term="绘图" />
    <category term="动画" />
    <category term="攻略" />
    <category term="流水账" />
    <category term="成都" />
    <category term="重庆" />
    <category term="武汉" />
    <category term="重构" />
    <category term="代码" />
    <category term="代码风格" />
    <category term="数据可视化" />
    <category term="爬虫" />
    <category term="chrome" />
    <category term="crx" />
    <category term="扩展" />
    <category term="CORS" />
    <category term="跨域" />
    <category term="盒模型" />
    <category term="浮动" />
    <category term="Reactive Programming" />
    <category term="JavaScript" />
    <category term="Cycle.js" />
    <category term="Dart" />
    <category term="最佳实践" />
    <category term="引流" />
    <category term="universal-link" />
    <category term="app-link" />
    <category term="脚手架" />
    <category term="degit" />
    <category term="git" />
    <category term="设计模式" />
    <category term="类" />
    <category term="接口" />
    <category term="抽象类" />
    <category term="DOM" />
    <category term="Docker" />
    <category term="ONOS" />
    <category term="控制器" />
    <category term="虚拟化" />
    <category term="笔记" />
    <category term="UX" />
    <category term="UED" />
    <category term="准则" />
    <category term="Java" />
    <category term="Ruby" />
    <category term="反射" />
    <category term="编程范式" />
    <category term="鸭子类型" />
    <category term="管理" />
    <category term="效率" />
    <category term="知识工作者" />
    <category term="卓有成效" />
    <category term="Elm" />
    <category term="框架" />
    <category term="函数式编程" />
    <category term="虚网映射" />
    <category term="Javascript" />
    <category term="并发" />
    <category term="event loop" />
    <category term="覆盖率" />
    <category term="端到端测试" />
    <category term="istanbul" />
    <category term="istanbuljs" />
    <category term="JavaSript" />
    <category term="Express" />
    <category term="源码" />
    <category term="代码覆盖率" />
    <category term="istanbul-middleware" />
    <category term="代码插桩" />
    <category term="require钩子" />
    <category term="babel-plugin-istanbul" />
    <category term="css" />
    <category term="html5" />
    <category term="flex" />
    <category term="javascript" />
    <category term="roadmap" />
    <category term="闭包" />
    <category term="Haskell" />
    <category term="monad" />
    <category term="后端" />
    <category term="管理后台" />
    <category term="egg.js" />
    <category term="工作流" />
    <category term="pull request" />
    <category term="golang" />
    <category term="语言学习" />
    <category term="黑客与画家" />
    <category term="创业" />
    <category term="骑行" />
    <category term="海南" />
    <category term="图文" />
    <category term="reflow" />
    <category term="repaint" />
    <category term="命名法" />
    <category term="成功学" />
    <category term="自我建设" />
    <category term="HTTP" />
    <category term="HTTP/2" />
    <category term="SPDY" />
    <category term="QUIC" />
    <category term="HTTPS" />
    <category term="状态码" />
    <category term="网络攻击" />
    <category term="介绍" />
    <category term="图片渲染" />
    <category term="html2canvas" />
    <category term="dom-to-image" />
    <category term="electron" />
    <category term="indexedDB" />
    <category term="异步" />
    <category term="Generator" />
    <category term="thunk" />
    <category term="async" />
    <category term="函数表达式" />
    <category term="对象" />
    <category term="继承" />
    <category term="类型转换" />
    <category term="==" />
    <category term="类型判断" />
    <category term="猫" />
    <category term="杀手" />
    <category term="管理学" />
    <category term="领导力" />
    <category term="梯队" />
    <category term="移动端" />
    <category term="UI" />
    <category term="自适应" />
    <category term="rem" />
    <category term="Electron" />
    <category term="GUI" />
    <category term="gpx" />
    <category term="template" />
    <category term="Electron Builder" />
    <category term="PWA" />
    <category term="方法论" />
    <category term="夜话" />
    <category term="多线" />
    <category term="生活" />
    <category term="密码" />
    <category term="密钥" />
    <category term="技改" />
    <category term="Vue" />
    <category term="gulp" />
    <category term="瀑布流" />
    <category term="电影" />
    <category term="PHP" />
    <category term="参考" />
    <category term="思维" />
    <category term="学习能力" />
    <category term="右脑" />
    <category term="经济学" />
    <category term="宏观经济学" />
    <category term="术语" />
    <category term="GDP" />
    <category term="CPI" />
    <category term="储蓄" />
    <category term="投资" />
    <category term="金融市场" />
    <category term="股票" />
    <category term="债券" />
    <category term="美联储" />
    <category term="失业" />
    <category term="货币" />
    <category term="现值" />
    <category term="准备金" />
    <category term="货币中性" />
    <category term="通货膨胀" />
    <category term="汇率" />
    <category term="购买力" />
    <category term="净出口" />
    <category term="资产净流出" />
    <category term="总需求" />
    <category term="总供给" />
    <category term="流动性偏好" />
    <category term="乘数效应" />
    <category term="菲利普斯曲线" />
    <category term="微观经济学" />
    <category term="供求" />
    <category term="贸易" />
    <category term="市场" />
    <category term="税" />
    <category term="剩余" />
    <category term="外部性" />
    <category term="公共物品" />
    <category term="公共资源" />
    <category term="生产成本" />
    <category term="利润" />
    <category term="垄断" />
    <category term="价格歧视" />
    <category term="寡头" />
    <category term="垄断竞争" />
    <category term="生产要素市场" />
    <category term="贫困" />
    <category term="消费者选择理论" />
    <category term="不对称信息" />
    <category term="政治经济学" />
    <category term="行为经济学" />
    <category term="VSCode" />
    <category term="编辑器" />
    <category term="IDE" />
    <category term="hybrid" />
    <category term="JSBridge" />
    <category term="Web Worker" />
    <category term="Service Worker" />
    <category term="习惯" />
    <category term="lint" />
    <category term="editorconfig" />
    <category term="commit message" />
    <category term="量子物理" />
    <category term="史话" />
    <category term="埋点" />
    <category term="raven.js" />
    <category term="前端监控" />
    <category term="文本编辑器" />
    <category term="quill" />
    <category term="结构化数据" />
    <category term="React" />
    <category term="Hooks" />
    <category term="函数组件" />
    <category term="复用" />
    <category term="状态管理" />
    <category term="redux" />
    <category term="MobX" />
    <category term="代码质量" />
    <category term="重来" />
    <category term="requestAnimationFrame" />
    <category term="TypeScript" />
    <category term="路书" />
    <category term="gpx解析" />
    <category term="EXIF" />
    <category term="人类" />
    <category term="生存" />
    <category term="基因" />
    <category term="响应式编程" />
    <category term="RxJS" />
    <category term="成长" />
    <category term="业务" />
    <category term="思想" />
    <category term="程序设计" />
    <category term="心理学" />
    <category term="自我" />
    <category term="社会思维" />
    <category term="社会影响" />
    <category term="文化" />
    <category term="性别" />
    <category term="从众" />
    <category term="说服" />
    <category term="临床诊断" />
    <category term="陪审团" />
    <category term="司法" />
    <category term="物质主义" />
    <category term="健康" />
    <category term="社会关系" />
    <category term="偏见" />
    <category term="攻击行为" />
    <category term="亲密关系" />
    <category term="友谊" />
    <category term="爱情" />
    <category term="利他" />
    <category term="冲突" />
    <category term="和解" />
    <category term="软技能" />
    <category term="理财" />
    <category term="健身" />
    <category term="自我营销" />
    <category term="学习" />
    <category term="商业模式" />
    <category term="产品" />
    <category term="校园网" />
    <category term="互联网" />
    <category term="技术" />
    <category term="web开发" />
    <category term="哲思" />
    <category term="择偶观" />
    <category term="validator" />
    <category term="大文件" />
    <category term="visibilityChange" />
    <category term="IntersectionObserver" />
    <category term="图种" />
    <category term="draggable" />
    <category term="webpack" />
    <category term="z-index" />
    <category term="git submodule" />
    <category term="object-fit" />
    <category term="object-position" />
    <category term="BroadcastChannel" />
    <category term="extract-text-webpack-plugin" />
    <category term="lottie" />
    <category term="backface-visibility" />
    <category term="egret" />
    <category term="mock" />
    <category term="SSO" />
    <category term="autoprefixer" />
    <category term="polyfill" />
    <category term="Android" />
    <category term="ffmpeg" />
    <category term="React Hooks" />
    <category term="rollup" />
    <category term="CDN" />
    <category term="DNS" />
    <category term="CNAME" />
    <category term="架构" />
    <category term="组件" />
    <category term="ssh" />
    <category term="fis-receiver" />
    <category term="tmux" />
    <category term="origami" />
    <category term="promise" />
    <category term="encodeURI" />
    <category term="encodeURIComponent" />
    <category term="axios" />
    <category term="charles" />
    <category term="黑色幽默" />
    <category term="朋友" />
    <category term="梦" />
    <category term="濒死" />
    <category term="江南" />
    <category term="苏州" />
    <category term="无锡" />
    <category term="宜兴" />
    <category term="湖州" />
    <category term="南浔" />
    <category term="游记" />
    <category term="随笔" />
    <category term="群众" />
    <category term="理论" />
    <category term="实效" />
    <category term="测试" />
    <category term="长沙" />
    <category term="杭州" />
    <category term="湖南" />
    <category term="核酸" />
    <category term="美食" />
    <category term="云南" />
    <category term="丽江" />
    <category term="大理" />
    <category term="青岛" />
    <category term="济南" />
    <category term="山东" />
    <category term="西北" />
    <category term="银川" />
    <category term="西宁" />
    <category term="青海湖" />
    <category term="西海镇" />
    <category term="茶卡盐湖" />
    <category term="厦门" />
    <category term="感受" />
    <category term="C语言" />
    <category term="树" />
    <category term="主干开发" />
    <category term="GitFlow" />
    <category term="GithubFlow" />
    <category term="typescript" />
    <category term="类型系统" />
    <category term="webrtc" />
    <category term="RTMP" />
    <category term="首屏时间" />
    <category term="性能优化" />
    <category term="公司" />
    <category term="个人发展" />
    <category term="战略" />
    <category term="晋升" />
    <category term="哲学" />
    <category term="幸福" />
    <category term="人生" />
    <category term="叔本华" />
    <category term="Unix" />
    <category term="Rollup" />
    <category term="mouseout" />
    <category term="mouseleave" />
    <category term="lint-staged" />
    <category term="吸顶" />
    <category term="图片组件" />
    <category term="形式系统" />
    <category term="不完全性" />
    <category term="隐喻" />
    <category term="哥德尔" />
    <category term="巴赫" />
    <category term="埃舍尔" />
    <category term="济州" />
    <category term="西归浦" />
    <category term="城山" />
    <category term="咸德" />
    <category term="人工智能" />
    <category term="心智" />
    <category term="自指" />
    <category term="图灵" />
    <category term="马列主义" />
    <category term="恩格斯" />
    <category term="家庭" />
    <category term="国家" />
    <category term="阶级" />
    <category term="氏族" />
    <category term="哲学史" />
    <category term="孔子" />
    <category term="老子" />
    <category term="儒家" />
    <category term="道家" />
    <category term="佛教" />
    <category term="禅宗" />
    <category term="理学" />
    <category term="心学" />
    <category term="计算机" />
    <category term="微机原理" />
    <category term="门" />
    <category term="操作系统" />
    <category term="数字电路" />
    <category term="2024" />
    <entry>
        <id>http://shenlvmeng.github.com/blog/2022/08/25/all-about-code-2/</id>
        <title>关于编码的一切 ——《代码大全》 下</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2022/08/25/all-about-code-2/"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;文接&lt;a href=&#34;https://shenlvmeng.github.io/blog/2022/03/03/all-about-code/&#34;&gt;关于编码的一切 ——《代码大全》 下&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;软件质量&#34;&gt;&lt;a href=&#34;#软件质量&#34; class=&#34;headerlink&#34; title=&#34;软件质量&#34;&gt;&lt;/a&gt;软件质量&lt;/h2&gt;&lt;p&gt;在了解最基本的变量和语句组织后，这一部分围绕提高软件质量展开。&lt;/p&gt;
&lt;h3 id=&#34;概述&#34;&gt;&lt;a href=&#34;#概述&#34; class=&#34;headerlink&#34; title=&#34;概述&#34;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;软件的外在质量特性体现在：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;正确性&lt;/li&gt;
&lt;li&gt;可用性&lt;/li&gt;
&lt;li&gt;效率&lt;/li&gt;
&lt;li&gt;可靠性&lt;/li&gt;
&lt;li&gt;健壮性&lt;/li&gt;
&lt;li&gt;适应性&lt;/li&gt;
&lt;li&gt;完整性&lt;/li&gt;
&lt;li&gt;精确性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;内在质量特性体现在：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可维护性&lt;/li&gt;
&lt;li&gt;可扩展性&lt;/li&gt;
&lt;li&gt;可移植性&lt;/li&gt;
&lt;li&gt;可读性&lt;/li&gt;
&lt;li&gt;可测试性&lt;/li&gt;
&lt;li&gt;可理解性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而改善软件质量可以有很多技术：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确定目标&lt;/li&gt;
&lt;li&gt;测试策略&lt;/li&gt;
&lt;li&gt;非正式走查&lt;/li&gt;
&lt;li&gt;正式技术复查&lt;/li&gt;
&lt;li&gt;外部审查&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;开发过程中可以通过量化结果、制作原型、控制变更等手段提升质量。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不同的质量保障手段效率各不相同，多种缺陷检测办法结合、人工和计算机检测结合，效果会比单打独斗要好；然而没有任何一种错误检测办法可以解决全部问题&lt;/li&gt;
&lt;li&gt;越早引入软件的问题，修正代价越大，尽早开始代码质量保障工作&lt;/li&gt;
&lt;li&gt;需求或架构上的错误相比编码阶段会带来更广泛的影响&lt;/li&gt;
&lt;li&gt;改善质量可以降低开发成本&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;协同构建&#34;&gt;&lt;a href=&#34;#协同构建&#34; class=&#34;headerlink&#34; title=&#34;协同构建&#34;&gt;&lt;/a&gt;协同构建&lt;/h3&gt;&lt;p&gt;协同构建即在同行的帮助下完成代码构建。方式包括但不限于结对编程、正式检查、非正式技术复查、文档阅读等等。&lt;strong&gt;结对编程&lt;/strong&gt;和&lt;strong&gt;技术性复查&lt;/strong&gt;可以缩短开发周期，排查出更多错误，减少代码的维护时间。同时，同行间的协同构建也有助于快速提升公司开发者的开发水平。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;结对编程&lt;ul&gt;
&lt;li&gt;结对编程中，一名程序员敲代码，另外一名注意有没有出现错误，以及考虑策略性问题&lt;/li&gt;
&lt;li&gt;成功秘诀&lt;ul&gt;
&lt;li&gt;事先确定编程规范，避免琐碎争吵&lt;/li&gt;
&lt;li&gt;不编程的成员不能变成旁观者&lt;/li&gt;
&lt;li&gt;不需要在简单问题上使用结对编程&lt;/li&gt;
&lt;li&gt;灵活对结对成员轮换，让大家熟悉不同系统&lt;/li&gt;
&lt;li&gt;避免新手组队&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;正式检查&lt;ul&gt;
&lt;li&gt;一种特殊的复查，与会主持人负责组织事宜，按计划、概述、准备、与会人（非作者）阐述代码、详查报告、跟进等步骤推进&lt;/li&gt;
&lt;li&gt;针对代码而非作者&lt;/li&gt;
&lt;li&gt;最终由作者负责如何处理缺陷&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;走查&lt;ul&gt;
&lt;li&gt;走查是形式和流程都比较宽松的代码复查方式，时间较短，重点也在检查错误而非修正它们&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;代码阅读&lt;ul&gt;
&lt;li&gt;类似Code Review，关注点主要在代码本身，而非会议&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;公开演示：类似showcase&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;开发者测试&#34;&gt;&lt;a href=&#34;#开发者测试&#34; class=&#34;headerlink&#34; title=&#34;开发者测试&#34;&gt;&lt;/a&gt;开发者测试&lt;/h3&gt;&lt;p&gt;测试分单元测试、组件测试、集成测试、回归测试、系统测试，前两部分通常由开发者进行，后三部分由专门的测试人员进行。测试按是否了解测试对象内部工作原理也可以分为黑盒测试和白盒测试。最后要注意，&lt;strong&gt;测试 ≠ 调试&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;对于开发者而言，测试天生有些特别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;测试的目标是找出错误而非实现功能&lt;/li&gt;
&lt;li&gt;测试绝不可能彻底证明程序里没有错误&lt;/li&gt;
&lt;li&gt;测试无法改善软件质量，它本身只是一个指示器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;开发者测试在整个项目时间中大概占8% - 25%，在测试时有一些tips：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;写代码前先写测试用例，不会比后写多花功夫&lt;/li&gt;
&lt;li&gt;不止进行“干净测试”，也要考虑“肮脏测试”&lt;/li&gt;
&lt;li&gt;很容易对测试覆盖率过度乐观&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在现实世界中，要穷尽所有可能的输入是不可能的，&lt;strong&gt;测试不可能完全&lt;/strong&gt;，有些方法会起到作用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;strong&gt;路径数&lt;/strong&gt;计算计算用例的&lt;strong&gt;最少&lt;/strong&gt;数目，它可以保证所有代码的执行&lt;ul&gt;
&lt;li&gt;通过子程序时，开始记1&lt;/li&gt;
&lt;li&gt;遇到&lt;code&gt;if&lt;/code&gt;、&lt;code&gt;while&lt;/code&gt;、&lt;code&gt;repeat&lt;/code&gt;、&lt;code&gt;for&lt;/code&gt;、&lt;code&gt;and&lt;/code&gt;、&lt;code&gt;or&lt;/code&gt;或等价物时，+1&lt;/li&gt;
&lt;li&gt;遇到每一个&lt;code&gt;case&lt;/code&gt;语句，+1；没有缺省分支时，再+1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据流测试&lt;/strong&gt;可以覆盖到数据的变化情况&lt;ul&gt;
&lt;li&gt;数据有&lt;strong&gt;已定义&lt;/strong&gt;、&lt;strong&gt;已使用&lt;/strong&gt;、&lt;strong&gt;已销毁&lt;/strong&gt;状态&lt;/li&gt;
&lt;li&gt;子程序控制流有&lt;strong&gt;已进入&lt;/strong&gt;、&lt;strong&gt;已退出&lt;/strong&gt;状态&lt;/li&gt;
&lt;li&gt;测试所有的&lt;strong&gt;已定义&lt;/strong&gt;、&lt;strong&gt;已定义-已使用&lt;/strong&gt;组合，注意其他的组合顺序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一个好的测试用例可以覆盖可数据数据的一大部分&lt;/li&gt;
&lt;li&gt;用启发式方法去&lt;strong&gt;猜测错误&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;留意&lt;strong&gt;边界值&lt;/strong&gt;，如数组边界的off-by-one错误&lt;/li&gt;
&lt;li&gt;考察&lt;strong&gt;好数据&lt;/strong&gt;和&lt;strong&gt;坏数据&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;好数据：期望输入、最小正常值、最大正常值、旧数据兼容性&lt;/li&gt;
&lt;li&gt;坏数据：没有数据、过多数据、无效数据、长度错误、未初始化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用容易验证结果的测试数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于错误，也有一些先验的规律：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;符合八二法则、&lt;strong&gt;绝大多数错误通常和几个具有严重缺陷的子程序有关&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;大多数错误影响范围有限&lt;/li&gt;
&lt;li&gt;大多数构建错误来自编程人员的错误，多从自身想问题&lt;/li&gt;
&lt;li&gt;笔误是一个常见的问题根源&lt;/li&gt;
&lt;li&gt;错误理解需求也是常见原因&lt;/li&gt;
&lt;li&gt;大多数的错误都较易修正&lt;/li&gt;
&lt;li&gt;业界经验是，平均1000行代码发现1-25个错误，发布产品大概是1000行代码0.5个，&lt;/li&gt;
&lt;li&gt;同样留意，测试用例本身是否有误&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在当前的编程环境和工作条件下，容易找到很多测试框架，它们会包含脚手架、diff工具、测试数据生成器、覆盖率监测、日志记录、系统干扰器等。另外，自动化测试、测试问题复盘等对测试质量也有提升帮助。&lt;/p&gt;
&lt;h3 id=&#34;调试&#34;&gt;&lt;a href=&#34;#调试&#34; class=&#34;headerlink&#34; title=&#34;调试&#34;&gt;&lt;/a&gt;调试&lt;/h3&gt;&lt;p&gt;调试（debug）是寻找错误根本原因和纠正错误的过程。它和测试一样，本身不是提升代码质量的方法，而是诊断代码缺陷的手段。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调试の误区&lt;ul&gt;
&lt;li&gt;纯靠猜测找到问题所在&lt;/li&gt;
&lt;li&gt;不去花时间理解程序和问题&lt;/li&gt;
&lt;li&gt;暂时性的掩盖问题&lt;/li&gt;
&lt;li&gt;把问题推给硬件，而不思考是不是出在自己身上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;寻找缺陷的步骤&lt;ul&gt;
&lt;li&gt;让错误状态稳定下来 &amp;#x3D;&amp;gt; 稳定复现&lt;/li&gt;
&lt;li&gt;收集相关数据，构造错误原因假说&lt;/li&gt;
&lt;li&gt;通过测试或检查代码证实或证伪假说&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一个无法稳定重现的问题，可能和初始化或和时间有关系&lt;/li&gt;
&lt;li&gt;寻找缺陷的tips&lt;ul&gt;
&lt;li&gt;构建缺陷假说时，要能合理解释所有测试用例&lt;/li&gt;
&lt;li&gt;定位缺陷困难时，及时补充更多的测试用例复现问题，用&lt;strong&gt;多视图&lt;/strong&gt;的方式盲人摸象定位缺陷&lt;/li&gt;
&lt;li&gt;测试用例过于发散时，及时用用例否定一些假说&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;二分法&lt;/strong&gt;缩小嫌疑范围&lt;/li&gt;
&lt;li&gt;检查&lt;strong&gt;最近修改&lt;/strong&gt;或&lt;strong&gt;最近出过错&lt;/strong&gt;的代码&lt;/li&gt;
&lt;li&gt;小黄鸭调试法&lt;/li&gt;
&lt;li&gt;暂时休息一下&lt;/li&gt;
&lt;li&gt;蛮力调试&lt;ul&gt;
&lt;li&gt;抛弃有问题的代码，从头设计和编码&lt;/li&gt;
&lt;li&gt;抛弃整个程序，从头开始设计和编码&lt;/li&gt;
&lt;li&gt;不放过任何一个编译器错误&lt;/li&gt;
&lt;li&gt;手动遍历所有的循环&lt;/li&gt;
&lt;li&gt;更换编译环境或比那一起&lt;/li&gt;
&lt;li&gt;持续自动化测试&lt;/li&gt;
&lt;li&gt;显示代码中所有的打印日志信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;给启发式调试法一个deadline&lt;/li&gt;
&lt;li&gt;调试中避免心理惯性：人们总期望一个新现象类似他们见过的某种现象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修正缺陷&lt;ul&gt;
&lt;li&gt;修正问题前确保已经很好地理解了&lt;/li&gt;
&lt;li&gt;理解程序而不仅是问题&lt;/li&gt;
&lt;li&gt;验证对错误的分析或理解&lt;/li&gt;
&lt;li&gt;保留最初的源代码&lt;/li&gt;
&lt;li&gt;治本，而不要治标&lt;/li&gt;
&lt;li&gt;一次只改一个地方&lt;/li&gt;
&lt;li&gt;搜寻代码中还有没有类似的缺陷&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;调试工具&lt;ul&gt;
&lt;li&gt;源代码diff&lt;/li&gt;
&lt;li&gt;编译警告信息&lt;/li&gt;
&lt;li&gt;lint和代码自动修正&lt;/li&gt;
&lt;li&gt;性能剖测（profile）&lt;/li&gt;
&lt;li&gt;测试脚手架&lt;/li&gt;
&lt;li&gt;调试器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;重构&#34;&gt;&lt;a href=&#34;#重构&#34; class=&#34;headerlink&#34; title=&#34;重构&#34;&gt;&lt;/a&gt;重构&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;更多重构介绍可以参考这篇blog&lt;a href=&#34;https://shenlvmeng.github.io/blog/2020/08/17/refactoring-design-improvement/&#34;&gt;重构 —— 代码的实用性与艺术性&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;重构即在&lt;strong&gt;不改变软件外部行为的基础上，改变其内部结构&lt;/strong&gt;。即便是管理完善的项目，每个月都会发生需求变化，稳定不变的需求是个童话。&lt;/p&gt;
&lt;p&gt;代码出现以下“坏味道”（smell）时，代表需要重构了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代码重复&lt;/li&gt;
&lt;li&gt;子程序冗长&lt;/li&gt;
&lt;li&gt;嵌套过深&lt;/li&gt;
&lt;li&gt;内聚性差&lt;/li&gt;
&lt;li&gt;参数列表过长&lt;/li&gt;
&lt;li&gt;类和继承关系不合理&lt;/li&gt;
&lt;li&gt;基本数据类型过多&lt;/li&gt;
&lt;li&gt;“流浪数据”传递&lt;/li&gt;
&lt;li&gt;无所事事的类&lt;/li&gt;
&lt;li&gt;命名不当&lt;/li&gt;
&lt;li&gt;难理解的注释&lt;/li&gt;
&lt;li&gt;全局变量&lt;/li&gt;
&lt;li&gt;子程序需要前置或后置处理&lt;/li&gt;
&lt;li&gt;过早设计或过度设计&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;重构分级别有下面一些手段&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据级&lt;ul&gt;
&lt;li&gt;具名常量&lt;/li&gt;
&lt;li&gt;更可读的变量&lt;/li&gt;
&lt;li&gt;函数替代表达式&lt;/li&gt;
&lt;li&gt;中间变量&lt;/li&gt;
&lt;li&gt;减少重复使用变量&lt;/li&gt;
&lt;li&gt;类型码转成类或枚举类型&lt;/li&gt;
&lt;li&gt;类封装&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;语句级&lt;ul&gt;
&lt;li&gt;分解布尔表达式&lt;/li&gt;
&lt;li&gt;用可读名字的布尔函数替代布尔表达式&lt;/li&gt;
&lt;li&gt;合并条件语句中的重复代码片段&lt;/li&gt;
&lt;li&gt;&lt;code&gt;break&lt;/code&gt;或&lt;code&gt;return&lt;/code&gt;替代循环控制变量&lt;/li&gt;
&lt;li&gt;多态替换条件语句&lt;/li&gt;
&lt;li&gt;null对象替代空值检测&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;子程序&lt;ul&gt;
&lt;li&gt;内莲花&lt;/li&gt;
&lt;li&gt;提炼子程序&lt;/li&gt;
&lt;li&gt;转化为类&lt;/li&gt;
&lt;li&gt;增&amp;#x2F;删参数&lt;/li&gt;
&lt;li&gt;合并&amp;#x2F;拆分子程序&lt;/li&gt;
&lt;li&gt;读写操作分离&lt;/li&gt;
&lt;li&gt;传递成员&amp;#x2F;类&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;类实现&lt;ul&gt;
&lt;li&gt;值&amp;#x2F;引用对象转化&lt;/li&gt;
&lt;li&gt;成员函数&amp;#x2F;成员数据位置移动&lt;/li&gt;
&lt;li&gt;相似代码提炼到基类&lt;/li&gt;
&lt;li&gt;差异代码拆分到派生类&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;类接口&lt;ul&gt;
&lt;li&gt;类拆分&amp;#x2F;合并&lt;/li&gt;
&lt;li&gt;删除类&lt;/li&gt;
&lt;li&gt;去掉中间人&lt;/li&gt;
&lt;li&gt;继承替代委托&lt;/li&gt;
&lt;li&gt;委托替代继承&lt;/li&gt;
&lt;li&gt;引入外部成员函数&lt;/li&gt;
&lt;li&gt;引入扩展类&lt;/li&gt;
&lt;li&gt;封装不使用的成员函数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;系统级&lt;ul&gt;
&lt;li&gt;为无法控制的数据创建索引源&lt;/li&gt;
&lt;li&gt;工厂模式&lt;/li&gt;
&lt;li&gt;异常&amp;#x2F;错误处理代码选型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要想让重构不影响日常功能开发，需要考虑&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有一个代码版本管理工具&lt;/li&gt;
&lt;li&gt;重构步伐小一点&lt;/li&gt;
&lt;li&gt;同一时间只做一个重构&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;重新测试&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;增加测试用例&lt;/li&gt;
&lt;li&gt;检查代码更改&lt;/li&gt;
&lt;li&gt;根据重构风险选择重构方法&lt;/li&gt;
&lt;li&gt;不要把重构当成糟糕设计的挡箭牌&lt;/li&gt;
&lt;li&gt;避免用重构代替重写&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;重构可以在修改代码的时候进行，不论是增加修改子程序还是类，或者是修复缺陷。对于从未重构的糟糕代码，可以用一部分混乱的代码隔离复杂度，把理想规整的代码和混乱不堪的真实世界隔离开。&lt;/p&gt;
&lt;h3 id=&#34;代码调整策略&#34;&gt;&lt;a href=&#34;#代码调整策略&#34; class=&#34;headerlink&#34; title=&#34;代码调整策略&#34;&gt;&lt;/a&gt;代码调整策略&lt;/h3&gt;&lt;p&gt;代码调整指出于&lt;strong&gt;性能&lt;/strong&gt;考虑，对代码进行实现上的调整。本章主要讨论策略。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;动手前的考虑&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;性能≠代码速度&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;想清楚你确实在解决一个需要解决的问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;调整考量&lt;ul&gt;
&lt;li&gt;程序设计：设计架构时考虑整体性能，再为每个子系统、类设计要达到的资源占用目标&lt;/li&gt;
&lt;li&gt;和操作系统的交互&lt;/li&gt;
&lt;li&gt;代码编译&lt;/li&gt;
&lt;li&gt;硬件&lt;/li&gt;
&lt;li&gt;类和子程序设计&lt;/li&gt;
&lt;li&gt;代码调整&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;帕累托法则，又称八二法则，程序中20%的子程序耗费了80%的执行时间&lt;/li&gt;
&lt;li&gt;一些&lt;strong&gt;错误认知&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;减少代码行数就可以减少资源占用&lt;/li&gt;
&lt;li&gt;特定的写法会比其他的更快，代码也会更小（&lt;em&gt;要看编译环境&lt;/em&gt;）&lt;/li&gt;
&lt;li&gt;应当随时随地优化（&lt;em&gt;不成熟的优化不如不优化&lt;/em&gt;）&lt;/li&gt;
&lt;li&gt;运行速度和正确性同样重要&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;先提升代码可维护性，在程序完成且表现正确后，再去提升系统性能&lt;/li&gt;
&lt;li&gt;常见的低效率来源&lt;ul&gt;
&lt;li&gt;IO操作&lt;/li&gt;
&lt;li&gt;内存分页&lt;/li&gt;
&lt;li&gt;系统API调用&lt;/li&gt;
&lt;li&gt;脚本语言&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;性能测量：没有准确的性能测量就不要去做优化&lt;/li&gt;
&lt;li&gt;代码调整需要反复尝试，才能达到理想的性能提高&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;代码调整技术&#34;&gt;&lt;a href=&#34;#代码调整技术&#34; class=&#34;headerlink&#34; title=&#34;代码调整技术&#34;&gt;&lt;/a&gt;代码调整技术&lt;/h3&gt;&lt;p&gt;文接上章，本章讨论具体调整手段。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代码调整和重构相反，大多数情况下是以牺牲程序可读性为代价换取更高的性能&lt;/li&gt;
&lt;li&gt;调整手段&lt;ul&gt;
&lt;li&gt;逻辑&lt;ul&gt;
&lt;li&gt;知道答案后停止判断&lt;/li&gt;
&lt;li&gt;按照出现频率调整判断顺序，把容易为真的判断放在最前面&lt;/li&gt;
&lt;li&gt;表驱动法代替复杂表达式&lt;/li&gt;
&lt;li&gt;惰性求值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;循环&lt;ul&gt;
&lt;li&gt;把判断提出循环体&lt;/li&gt;
&lt;li&gt;展开小循环&lt;/li&gt;
&lt;li&gt;合并循环&lt;/li&gt;
&lt;li&gt;减少循环体内的操作&lt;/li&gt;
&lt;li&gt;用哨兵值提前结束循环&lt;/li&gt;
&lt;li&gt;把最忙的循环放在最内侧&lt;/li&gt;
&lt;li&gt;用低强度的计算代替高强度计算，如加法替代乘法，乘法代替幂运算&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数据&lt;ul&gt;
&lt;li&gt;使用整型而非浮点数&lt;/li&gt;
&lt;li&gt;减少数组维度&lt;/li&gt;
&lt;li&gt;使用辅助索引&lt;/li&gt;
&lt;li&gt;使用缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;表达式&lt;ul&gt;
&lt;li&gt;利用恒等式简化代码复杂度&lt;/li&gt;
&lt;li&gt;削弱计算强度&lt;/li&gt;
&lt;li&gt;编译期初始化&lt;/li&gt;
&lt;li&gt;小心系统函数，为了兼容最糟情况，系统函数会比较复杂&lt;/li&gt;
&lt;li&gt;事先算出结果&lt;/li&gt;
&lt;li&gt;删除公共表达式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;子程序&lt;ul&gt;
&lt;li&gt;子程序改为内联&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用低级语言重写&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;再次强调，&lt;strong&gt;没有性能优化测量就没有代码调整&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;系统考虑&#34;&gt;&lt;a href=&#34;#系统考虑&#34; class=&#34;headerlink&#34; title=&#34;系统考虑&#34;&gt;&lt;/a&gt;系统考虑&lt;/h2&gt;&lt;p&gt;这一部分站在系统的角度考虑构建过程中的程序规模、集成、工具等问题。&lt;/p&gt;
&lt;h3 id=&#34;程序规模带来的影响&#34;&gt;&lt;a href=&#34;#程序规模带来的影响&#34; class=&#34;headerlink&#34; title=&#34;程序规模带来的影响&#34;&gt;&lt;/a&gt;程序规模带来的影响&lt;/h3&gt;&lt;p&gt;软件规模的扩大可能会为你带来意料之外的大量问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果你习惯于开发小项目，那么你的第一个大型项目很可能会严重失控&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;沟通交流&lt;/strong&gt;：项目成员的扩大带来的交流路径不是加性的，是&lt;strong&gt;乘性&lt;/strong&gt;的&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;错误&lt;/strong&gt;：项目规模的扩大也会带来更高的缺陷密度&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;生产率&lt;/strong&gt;：大项目会带来更低的生产率&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;工作量&lt;/strong&gt;：软件构建的工作量和项目大小是线性关系，而其他活动的工作量则是非线性增加&lt;/li&gt;
&lt;li&gt;不同规模的代码从小到大可以称作程序、产品、系统、系统产品，没能意识到它们间的不同也是估算偏差的出现来源&lt;/li&gt;
&lt;li&gt;项目越正规，就越重视&lt;strong&gt;方法论&lt;/strong&gt;，不得不写的文档也会更多，撰写的文档也会更正规&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;构建管理&#34;&gt;&lt;a href=&#34;#构建管理&#34; class=&#34;headerlink&#34; title=&#34;构建管理&#34;&gt;&lt;/a&gt;构建管理&lt;/h3&gt;&lt;p&gt;构建管理是软件管理中的一部分。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;鼓励良好的编程实践&lt;ul&gt;
&lt;li&gt;逐行复查&lt;/li&gt;
&lt;li&gt;代码签名&lt;/li&gt;
&lt;li&gt;鼓励最佳实践&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;配置管理：系统化定义项目工件和处理流程&lt;ul&gt;
&lt;li&gt;需求和设计变更&lt;ul&gt;
&lt;li&gt;遵循系统化的变更手续&lt;/li&gt;
&lt;li&gt;成组变更&lt;/li&gt;
&lt;li&gt;评估变更成本&lt;/li&gt;
&lt;li&gt;坏味道：频繁大量变更&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;软件变更：版本控制软件&lt;/li&gt;
&lt;li&gt;机器配置变更：机器镜像&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;评估构建进度表&lt;ul&gt;
&lt;li&gt;评估项目规模和工作量是软件项目管理中最具挑战性的部分，平均水平的大型软件都要超时1年，超预算100%才能完成&lt;/li&gt;
&lt;li&gt;清楚说明软件需求&lt;/li&gt;
&lt;li&gt;使用不同方法评估再对比&lt;/li&gt;
&lt;li&gt;定期更新评估&lt;/li&gt;
&lt;li&gt;以下因素会影响软件开发进度，但不易被量化&lt;ul&gt;
&lt;li&gt;开发者的经验和能力&lt;/li&gt;
&lt;li&gt;团队的动力&lt;/li&gt;
&lt;li&gt;管理质量&lt;/li&gt;
&lt;li&gt;可重用的代码数目&lt;/li&gt;
&lt;li&gt;人员流动性&lt;/li&gt;
&lt;li&gt;需求变更&lt;/li&gt;
&lt;li&gt;文档量&lt;/li&gt;
&lt;li&gt;分级安全环境&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果进度落后了要怎么办&lt;ul&gt;
&lt;li&gt;扩充团队在&lt;strong&gt;项目任务不能分割并一一击破&lt;/strong&gt;时，只会增加项目交流复杂度，并加速项目延期&lt;/li&gt;
&lt;li&gt;缩减项目范围，有限保证核心功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;度量：对项目特征进行度量可以评估项目进度和风险，当然保证ddl比收集度量数据更重要&lt;/li&gt;
&lt;li&gt;把程序员当人看&lt;ul&gt;
&lt;li&gt;程序员1天大概有30%时间花费在“对项目没有直接好处”的非技术活动中&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不同程序员间的努力和能力差异很大&lt;/strong&gt;，不同团队在软件质量和生产率的差异上也很大，好的和坏的程序员都倾向于聚集在一起&lt;/li&gt;
&lt;li&gt;在代码风格的信仰问题上，使用“建议”或大多数人达成统一的指导规范&lt;/li&gt;
&lt;li&gt;优良的物理工作环境有助于提升程序员的生产率和生产质量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;管理你的管理者：向上管理&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;集成&#34;&gt;&lt;a href=&#34;#集成&#34; class=&#34;headerlink&#34; title=&#34;集成&#34;&gt;&lt;/a&gt;集成&lt;/h3&gt;&lt;p&gt;集成方式也会影响到集成的质量。从频率上分，有&lt;strong&gt;阶段式集成&lt;/strong&gt;和&lt;strong&gt;增量集成&lt;/strong&gt;，在阶段式集成中，分为单元开发和系统集成两个阶段。增量集成中，程序是一点一点写出来并一点点拼接起来的。对比阶段式集成，增量集成有下面一些好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;易于定位错误&lt;/li&gt;
&lt;li&gt;更早在项目中取得系统级结果&lt;/li&gt;
&lt;li&gt;对项目结果更好的监控&lt;/li&gt;
&lt;li&gt;能在更短的开发计划中建造出整个系统&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而增量集成有下面一些常见策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;自顶向下集成&lt;/strong&gt;：先集成系统设计，再集成具体实现；优点是能更早有整个系统的大局观，缺点是在前期会加入很多底层的mock代码，且将调试过程推迟到项目后期&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自底向上集成&lt;/strong&gt;：和自顶向下相反，优点是很容易定位错误，缺点是丧失全局的认识，系统设计的问题在后期修改成本较高&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;三明治集成&lt;/strong&gt;：先集成顶部的高层业务对象和底部的基础工具类，再集成中间层代码，整合了自顶向下和自底向上&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;风险导向的集成&lt;/strong&gt;：鉴别不同类的风险级别，先集成风险高的&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;功能导向的集成&lt;/strong&gt;：一次集成一组功能，它基本上不需要脚手架，且每次集成都能增强系统的功能性，且和面向对象设计比较好协同工作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;T型集成&lt;/strong&gt;：在集成高层对象后，先选中某个特定功能块，完成一次所有类的集成，这样可以作为MVP演练整个系统&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;结合&lt;strong&gt;冒烟测试&lt;/strong&gt;的“&lt;strong&gt;每日构建&lt;/strong&gt;”（daily build）是软件集成的一种最佳实践。它能让产品每天都有进步，且让项目保持一个固定的脉搏。做好daily build，有下面一些建议&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不放过失败的build，保证每次build都能通过冒烟测试&lt;/li&gt;
&lt;li&gt;每天进行冒烟测试&lt;/li&gt;
&lt;li&gt;冒烟测试需要和代码一样“与时俱进”&lt;/li&gt;
&lt;li&gt;让daily build和冒烟测试&lt;strong&gt;自动化&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;要求开发人员构建前进行冒烟测试&lt;/li&gt;
&lt;li&gt;将修订保持合适的合并节奏，不要太密，也不要太疏&lt;/li&gt;
&lt;li&gt;在早上发布build，给潜在问题留下修复时间&lt;/li&gt;
&lt;li&gt;顶住需求压力，保证daily build和冒烟测试&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在daily build的基础上，可以很轻易地做到1日多次的&lt;strong&gt;持续集成&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;编程工具&#34;&gt;&lt;a href=&#34;#编程工具&#34; class=&#34;headerlink&#34; title=&#34;编程工具&#34;&gt;&lt;/a&gt;编程工具&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;工欲善其事，必先利其器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;现代化的编程环境下，有很多可以采用的编程工具：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设计工具&lt;/li&gt;
&lt;li&gt;源代码工具&lt;ul&gt;
&lt;li&gt;IDE&lt;/li&gt;
&lt;li&gt;文本替换工具&lt;/li&gt;
&lt;li&gt;diff工具&lt;/li&gt;
&lt;li&gt;merge工具&lt;/li&gt;
&lt;li&gt;源代码美化器&lt;/li&gt;
&lt;li&gt;接口文档生成&lt;/li&gt;
&lt;li&gt;代码模板&amp;#x2F;代码生成&lt;/li&gt;
&lt;li&gt;命令行&lt;/li&gt;
&lt;li&gt;代码质量分析&lt;ul&gt;
&lt;li&gt;linter&lt;/li&gt;
&lt;li&gt;metrics报告&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;重构代码&lt;ul&gt;
&lt;li&gt;重构器&lt;/li&gt;
&lt;li&gt;代码翻译器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;版本控制工具&lt;/li&gt;
&lt;li&gt;数据字典&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可执行码工具&lt;ul&gt;
&lt;li&gt;目标码生成&lt;ul&gt;
&lt;li&gt;编译器、链接器&lt;/li&gt;
&lt;li&gt;build工具，如make、ant&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;程序库&amp;#x2F;第三方库&lt;/li&gt;
&lt;li&gt;代码生成向导&lt;/li&gt;
&lt;li&gt;安装指引&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;调试&lt;/li&gt;
&lt;li&gt;测试&lt;/li&gt;
&lt;li&gt;代码调整&lt;ul&gt;
&lt;li&gt;性能剖测&lt;/li&gt;
&lt;li&gt;汇编和反汇编&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在Unix这样的工具导向环境下就更容易孕育编程工具，如grep、diff、sort、make、tar、line、sed、awk、vi等。几乎所有的大型组织都有自己的内部工具和支持团队，不少比市面上的还要优秀。针对特定项目，有时候也会开发特定的项目工具，如航天、保险、医疗等。对于个人开发，也可以使用脚本这种自动执行重复性杂务的工具。&lt;/p&gt;
&lt;p&gt;最后要澄清一个事实，&lt;strong&gt;编程工具并不能消灭人在编程里的核心地位&lt;/strong&gt;，只是不断&lt;strong&gt;重塑&lt;/strong&gt;（reshape）编程的含义。连接到其他软硬件的复杂接口，规章制度、业务规则这些计算机编程之外的复杂之源还是要人来应对。而被用来填补真实世界和解决问题的计算机之间鸿沟的人，被称作程序员。&lt;/p&gt;
&lt;h2 id=&#34;软件工艺&#34;&gt;&lt;a href=&#34;#软件工艺&#34; class=&#34;headerlink&#34; title=&#34;软件工艺&#34;&gt;&lt;/a&gt;软件工艺&lt;/h2&gt;&lt;p&gt;编程是硬件与艺术的融合体，软件工艺是编程美学的一种体现。&lt;/p&gt;
&lt;h3 id=&#34;布局与风格&#34;&gt;&lt;a href=&#34;#布局与风格&#34; class=&#34;headerlink&#34; title=&#34;布局与风格&#34;&gt;&lt;/a&gt;布局与风格&lt;/h3&gt;&lt;p&gt;编排出色的代码会带来&lt;strong&gt;视觉&lt;/strong&gt;上和&lt;strong&gt;思维&lt;/strong&gt;上的愉悦。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基本原则&lt;ul&gt;
&lt;li&gt;好的布局可以凸显程序的逻辑结构，也更符合人类直觉&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;傻子都会写计算机理解的代码，而优秀程序员写的是人能看懂的代码&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;高手的机型并非天生优于新手，而是高手具备某种知识结构，这种结构有助于高手记住特定类型的信息；因此当信息符合这些结构时，就可以被轻易的理解&lt;/li&gt;
&lt;li&gt;布局非信仰，要保持头脑开放，接受已被证实更好的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;布局技术&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;空白&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;分组&lt;/li&gt;
&lt;li&gt;空行&lt;/li&gt;
&lt;li&gt;缩进&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;括号&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;布局风格：同一层级的语句缩进相同&lt;ul&gt;
&lt;li&gt;纯块结构&lt;/li&gt;
&lt;li&gt;模仿块结构&lt;/li&gt;
&lt;li&gt;花括号指定边界&lt;/li&gt;
&lt;li&gt;行尾布局（不推荐）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;控制结构布局&lt;ul&gt;
&lt;li&gt;段落间的空行&lt;/li&gt;
&lt;li&gt;复杂的表达式拆分条件到多行&lt;/li&gt;
&lt;li&gt;不用&lt;code&gt;goto&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;单行语句布局&lt;ul&gt;
&lt;li&gt;控制长度&lt;/li&gt;
&lt;li&gt;使用空格&lt;/li&gt;
&lt;li&gt;后续行缩进统一&lt;/li&gt;
&lt;li&gt;后续行结尾统一&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一行一条语句&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;减少复杂度&lt;/li&gt;
&lt;li&gt;读代码仅需自上而下&lt;/li&gt;
&lt;li&gt;不要在单行中多个操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一行一个声明&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注释风格&lt;ul&gt;
&lt;li&gt;缩进和代码一致&lt;/li&gt;
&lt;li&gt;用空行和代码隔开&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;子程序布局&lt;ul&gt;
&lt;li&gt;空行分段&lt;/li&gt;
&lt;li&gt;参数按标准缩进&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;类布局&lt;ul&gt;
&lt;li&gt;头部注释 -&amp;gt; 构造函数&amp;#x2F;析构函数 -&amp;gt; public子程序 -&amp;gt; protected子程序 -&amp;gt; private子程序和成员&lt;/li&gt;
&lt;li&gt;文件布局&lt;ul&gt;
&lt;li&gt;一个文件一个类&lt;/li&gt;
&lt;li&gt;文件命名和类有关&lt;/li&gt;
&lt;li&gt;在文件中清晰分隔各子程序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;自说明代码&#34;&gt;&lt;a href=&#34;#自说明代码&#34; class=&#34;headerlink&#34; title=&#34;自说明代码&#34;&gt;&lt;/a&gt;自说明代码&lt;/h3&gt;&lt;p&gt;本节专注于文档的特殊补充形式，即“注释”。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在代码中起主要作用的并非注释，而是&lt;strong&gt;好的编程风格&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;注释的哲学&lt;ul&gt;
&lt;li&gt;注释能提供更高层级的抽象&lt;/li&gt;
&lt;li&gt;重复注释根本没用&lt;/li&gt;
&lt;li&gt;注释写的不合适只会起反作用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注释类别：在代码完工后，只允许出现后三种&lt;ul&gt;
&lt;li&gt;重复代码（Bad case）&lt;/li&gt;
&lt;li&gt;解释代码：当代码过于复杂到需要解释时，最好是改进代码，而不是添加注释&lt;/li&gt;
&lt;li&gt;代码标记，如&lt;code&gt;TODO&lt;/code&gt;，&lt;code&gt;FIXME&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;概述代码&lt;/li&gt;
&lt;li&gt;意图说明&lt;/li&gt;
&lt;li&gt;传达代码以外的信息，如版权声明、保密要求&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;高效注释&lt;ul&gt;
&lt;li&gt;用伪代码法减少注释时间&lt;/li&gt;
&lt;li&gt;将注释如何到开发风格中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注释技术&lt;ul&gt;
&lt;li&gt;注释单行&lt;ul&gt;
&lt;li&gt;去掉无关注是&lt;/li&gt;
&lt;li&gt;减少行尾注释&lt;/li&gt;
&lt;li&gt;行尾注释只用于数据声明、维护标记、标记行尾等场景&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注释代码段&lt;ul&gt;
&lt;li&gt;应表达&lt;strong&gt;why&lt;/strong&gt;而非&lt;strong&gt;how&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;代码本身应尽力组做好说明&lt;/li&gt;
&lt;li&gt;注明非常规用法&lt;/li&gt;
&lt;li&gt;错误或语言环境独特点要加注释&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注释数据声明&lt;ul&gt;
&lt;li&gt;数值单位&lt;/li&gt;
&lt;li&gt;允许范围&lt;/li&gt;
&lt;li&gt;输入限制&lt;/li&gt;
&lt;li&gt;全局数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注释控制结构&lt;ul&gt;
&lt;li&gt;循环结束的行尾注释是代码太复杂的征兆&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注释子程序&lt;ul&gt;
&lt;li&gt;注释要靠近说明的代码&lt;/li&gt;
&lt;li&gt;用简短的话进行说明&lt;/li&gt;
&lt;li&gt;注释声明参数&lt;/li&gt;
&lt;li&gt;可以使用Javadoc这种工具&lt;/li&gt;
&lt;li&gt;说明子程序的全局作用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注释类、文件、程序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;个人性格&#34;&gt;&lt;a href=&#34;#个人性格&#34; class=&#34;headerlink&#34; title=&#34;个人性格&#34;&gt;&lt;/a&gt;个人性格&lt;/h3&gt;&lt;p&gt;软件工程是纯粹的脑力劳动。软件工程师研究工具和原材料的本质时，实际上是在研究人的智力、性格这种无形的东西。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编程工作本质上是项难以监督的工作，你也需要对自己负责&lt;/li&gt;
&lt;li&gt;聪明和谦虚&lt;/li&gt;
&lt;li&gt;求知欲&lt;ul&gt;
&lt;li&gt;形成自我意识&lt;/li&gt;
&lt;li&gt;实验&lt;/li&gt;
&lt;li&gt;学习成功项目&lt;/li&gt;
&lt;li&gt;阅读文档&lt;/li&gt;
&lt;li&gt;和同行交流&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不屈不挠的诚实感&lt;/li&gt;
&lt;li&gt;交流和合作：&lt;strong&gt;编程首先是与人交流，然后才是和计算机交流&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;创造力和纪律&lt;/li&gt;
&lt;li&gt;懒惰：避免“实在懒”，追求“开明懒”和“一劳永逸的懒”&lt;/li&gt;
&lt;li&gt;可能不那么明显的性格&lt;ul&gt;
&lt;li&gt;坚持：要时不时抬头开清方向&lt;/li&gt;
&lt;li&gt;经验：不同于其他行业，&lt;strong&gt;软件开发行业的经验比书本知识价值要小，基础知识变化很快&lt;/strong&gt;，不存在越老越吃香的情况。不持续学习跟上潮流，仅靠经验吃饭，会被逐渐淘汰。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;习惯&lt;ul&gt;
&lt;li&gt;好习惯很重要&lt;/li&gt;
&lt;li&gt;不要用“没有习惯”替代“坏习惯”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;软件工艺探讨的话题&#34;&gt;&lt;a href=&#34;#软件工艺探讨的话题&#34; class=&#34;headerlink&#34; title=&#34;软件工艺探讨的话题&#34;&gt;&lt;/a&gt;软件工艺探讨的话题&lt;/h3&gt;&lt;p&gt;《代码大全》全书都着重于软件构建的细节，本章从抽象的关注点出发，看看哪些方面会影响软件的工艺。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;软件开发的核心是致力于&lt;strong&gt;降低复杂度&lt;/strong&gt;，管理复杂度是软件的核心使命，之前各章节提过了很多具体办法。各种形式的抽象都是管理复杂度的强大工具。&lt;ul&gt;
&lt;li&gt;划分子系统&lt;/li&gt;
&lt;li&gt;仔细定义类接口&lt;/li&gt;
&lt;li&gt;保持接口抽象性&lt;/li&gt;
&lt;li&gt;避免全局变量&lt;/li&gt;
&lt;li&gt;避免深层次继承&lt;/li&gt;
&lt;li&gt;避免深度嵌套和循环&lt;/li&gt;
&lt;li&gt;不用&lt;code&gt;goto&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;子程序短小精悍&lt;/li&gt;
&lt;li&gt;使用清晰明了的变量名&lt;/li&gt;
&lt;li&gt;使用规范和约定减少理解负担&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;软件开发和其&lt;strong&gt;过程&lt;/strong&gt;密不可分，在多程序员参与的项目里，组织性的重要性超过了个人技能&lt;ul&gt;
&lt;li&gt;坏的过程只会损耗脑力，好的过程则可以开发脑力到极限&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;首先为人写程序，然后才是机器，强调代码可读性，便于与同行沟通&lt;/li&gt;
&lt;li&gt;深入一门语言去编程，不浮于表面&lt;ul&gt;
&lt;li&gt;杰出的程序员会考虑他们要干什么，然后才是怎么用手头的工具实现目标&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;借助&lt;strong&gt;规范&lt;/strong&gt;集中注意力&lt;/li&gt;
&lt;li&gt;基于问题域编程&lt;ul&gt;
&lt;li&gt;将程序划分为不同层级的抽象&lt;ul&gt;
&lt;li&gt;第0层：操作系统的操作和机器指令&lt;/li&gt;
&lt;li&gt;第1层：编程语言结构和工具&lt;/li&gt;
&lt;li&gt;第2层：底层实现结构，如算法和数据结构&lt;/li&gt;
&lt;li&gt;第3层：低层问题域，这一层已经有问题域相关的操作原语可以使用&lt;/li&gt;
&lt;li&gt;第4层：高层问题域，你的非技术用户某种程度也应该可以看懂你的代码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;编程是科学和艺术融合的一门工程学科&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;迭代&lt;/strong&gt;在软件开发中是很正常的现象。软件设计是一个逐步精化的过程。&lt;/li&gt;
&lt;li&gt;将软件和信仰分离开&lt;ul&gt;
&lt;li&gt;不要盲目跟风&lt;/li&gt;
&lt;li&gt;保持折中态度&lt;/li&gt;
&lt;li&gt;权衡各种技术，再做决定&lt;/li&gt;
&lt;li&gt;基于实验，保持开放心态&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;–END–&lt;/p&gt;
</content>
        <category term="编程" />
        <category term="范式" />
        <category term="设计" />
        <category term="艺术" />
        <category term="质量" />
        <updated>2022-08-25T14:37:19.000Z</updated>
    </entry>
    <entry>
        <id>http://shenlvmeng.github.com/blog/2022/03/03/all-about-code/</id>
        <title>关于编码的一切 ——《代码大全》 上</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2022/03/03/all-about-code/"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;拿到它的时候，它已印刷了13年之久；能在京东上找到，也是极大的幸运。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;《代码大全》是一部又大又全的工具书，它涵盖了关于编程各个环节的充分经验，可以作为日程编程工作的指导。将其他教我如何编程的书中的内容做了一个打包。数月研读下来，难免有所遗忘。这里将其中的精华尽量记录下来，也作为对全书内容的一个回顾。&lt;/p&gt;
&lt;h2 id=&#34;打好基础&#34;&gt;&lt;a href=&#34;#打好基础&#34; class=&#34;headerlink&#34; title=&#34;打好基础&#34;&gt;&lt;/a&gt;打好基础&lt;/h2&gt;&lt;p&gt;第1部分主要围绕构建为读者讲解什么是构建，和关于构建我们需要了解和准备的。也为后面展开具体编程细节和设计艺术打基础。&lt;/p&gt;
&lt;h3 id=&#34;走进软件构建&#34;&gt;&lt;a href=&#34;#走进软件构建&#34; class=&#34;headerlink&#34; title=&#34;走进软件构建&#34;&gt;&lt;/a&gt;走进软件构建&lt;/h3&gt;&lt;p&gt;构建是软件开发的核心，构建的质量对软件质量有实质影响。&lt;/p&gt;
&lt;h3 id=&#34;隐喻理解软件开发&#34;&gt;&lt;a href=&#34;#隐喻理解软件开发&#34; class=&#34;headerlink&#34; title=&#34;隐喻理解软件开发&#34;&gt;&lt;/a&gt;隐喻理解软件开发&lt;/h3&gt;&lt;p&gt;用隐喻可以帮助理解软件开发的过程。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个好的隐喻应该是简单的，忽略了不必要的细节，对概念进行内化和抽象，让人从更高层面思考问题，从而避免低层次错误&lt;/li&gt;
&lt;li&gt;隐喻更像&lt;strong&gt;启示&lt;/strong&gt;，而非&lt;em&gt;算法&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;对于编程来说，还是将问题概念化&lt;/li&gt;
&lt;li&gt;有一些常见的软件隐喻&lt;ul&gt;
&lt;li&gt;写作&amp;#x2F;耕作：这些隐喻不太合适&lt;/li&gt;
&lt;li&gt;养殖：增量、迭代、自适应、演进的成长概念&lt;/li&gt;
&lt;li&gt;建造：规划设计文档，使用现成组件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;组合各种隐喻，不要过度引申隐喻，带来误导&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;提前准备&#34;&gt;&lt;a href=&#34;#提前准备&#34; class=&#34;headerlink&#34; title=&#34;提前准备&#34;&gt;&lt;/a&gt;提前准备&lt;/h3&gt;&lt;p&gt;提前准备，降低风险。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前期准备的必要性&lt;ul&gt;
&lt;li&gt;降低风险&lt;/li&gt;
&lt;li&gt;通过逻辑、类比、数据说服项目经理&lt;ul&gt;
&lt;li&gt;开始大项目前需要制定计划&lt;/li&gt;
&lt;li&gt;程序员是食物链的最后一环，架构师吃掉需求，设计师吃掉架构，程序员消化设计&lt;/li&gt;
&lt;li&gt;发现错误的时间要尽可能接近引入错误的时间，可以尽量降低修复时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;判别你所在的软件领域&lt;ul&gt;
&lt;li&gt;在软件开发中，适用迭代式开发法比适用序列式开发法的情况多得多&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;先清楚定义问题&lt;/li&gt;
&lt;li&gt;再正确认清需求&lt;ul&gt;
&lt;li&gt;正式详尽地描述需求，是项目成功的关键&lt;ul&gt;
&lt;li&gt;面向目标、契约式编程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;稳定需求是可望而不可即的&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;开发过程会帮助客户更好地理解自己的需求，这也是需求变更的主要来源&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;应对需求变更&lt;ul&gt;
&lt;li&gt;核对当前需求的质量（&lt;em&gt;需要有一个需求质量的核对表&lt;/em&gt;），及时回退到需求设计环节&lt;/li&gt;
&lt;li&gt;确保每个人都知道变更的代价&lt;/li&gt;
&lt;li&gt;建立变更的控制流程&lt;/li&gt;
&lt;li&gt;要放弃么？&lt;/li&gt;
&lt;li&gt;考虑项目的商业价值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;考虑架构设计&lt;ul&gt;
&lt;li&gt;架构指整个系统的设计约束，不会细节到子系统或类的设计约束&lt;/li&gt;
&lt;li&gt;架构的组成部分&lt;ul&gt;
&lt;li&gt;程序组织&lt;/li&gt;
&lt;li&gt;主要的类和类的继承体系&lt;/li&gt;
&lt;li&gt;数据结构设计&lt;/li&gt;
&lt;li&gt;业务规则描述&lt;/li&gt;
&lt;li&gt;UI设计&lt;/li&gt;
&lt;li&gt;资源管理：数据库连接、线程、句柄&lt;/li&gt;
&lt;li&gt;安全&lt;/li&gt;
&lt;li&gt;性能&lt;/li&gt;
&lt;li&gt;可扩展性&lt;/li&gt;
&lt;li&gt;国际化&lt;/li&gt;
&lt;li&gt;错误处理：纠正还是检测、主动还是被动&lt;/li&gt;
&lt;li&gt;输入输出&lt;/li&gt;
&lt;li&gt;容错性&lt;/li&gt;
&lt;li&gt;过度工程：明确设立期望目标&lt;/li&gt;
&lt;li&gt;“买”还是“造”：如果架构选择自己做，那么一定要证明自己定制的组件在某方面胜过现有的&lt;/li&gt;
&lt;li&gt;变更策略：如何应对变更&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;架构的总体质量&lt;ul&gt;
&lt;li&gt;和所解决的问题和谐一致，看起来自然&lt;/li&gt;
&lt;li&gt;描述所有主要的决策动机&lt;/li&gt;
&lt;li&gt;优秀的架构很大程度和机器与编程语言无关&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;投入的时间一般在20%-30%&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;关键的构建决策&#34;&gt;&lt;a href=&#34;#关键的构建决策&#34; class=&#34;headerlink&#34; title=&#34;关键的构建决策&#34;&gt;&lt;/a&gt;关键的构建决策&lt;/h3&gt;&lt;p&gt;选择语言、技术、构建实践。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;高级语言表达力更强&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;你思考的能力取决于你是否知道可以表达该思想的词汇&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;提前讲好使用的&lt;strong&gt;编程约定&lt;/strong&gt;，去统一编程语言的细节&lt;/li&gt;
&lt;li&gt;找准在技术浪潮中的位置&lt;ul&gt;
&lt;li&gt;如果在浪潮后期，就可以持续使用稳定的功能；在浪潮前期，则需要花时间找到文档中没有说明的编程语言特性&lt;/li&gt;
&lt;li&gt;“深入一种语言去编程”，&lt;strong&gt;程序员现决定想表达的思想是什么，再决定如何使用特定语言的工具去表达这些思想&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;选择构建实践&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;创建高质量代码&#34;&gt;&lt;a href=&#34;#创建高质量代码&#34; class=&#34;headerlink&#34; title=&#34;创建高质量代码&#34;&gt;&lt;/a&gt;创建高质量代码&lt;/h2&gt;&lt;p&gt;这一部分主要讲解类和子程序的设计和编码。&lt;/p&gt;
&lt;h3 id=&#34;如何做设计&#34;&gt;&lt;a href=&#34;#如何做设计&#34; class=&#34;headerlink&#34; title=&#34;如何做设计&#34;&gt;&lt;/a&gt;如何做设计&lt;/h3&gt;&lt;p&gt;一些启发式准则和idea&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设计的挑战&lt;ul&gt;
&lt;li&gt;有的问题需要“解决”一边，才能明确定义它，然后再次解决&lt;/li&gt;
&lt;li&gt;设计成功应该是组织良好且清爽的，不过设计过程却并非如此&lt;/li&gt;
&lt;li&gt;设计需要取舍，受到限制&lt;/li&gt;
&lt;li&gt;设计需要启发式思维，但也是不断评估、讨论、调试实验中诞生的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;设计的关键概念&lt;ul&gt;
&lt;li&gt;管理复杂度&lt;ul&gt;
&lt;li&gt;软件开发的本质复杂性来自复杂无序的现实世界，精确完整地识别依赖关系和意外情况，设计完全正确而不是部分正确的方案&lt;/li&gt;
&lt;li&gt;软件需要管理复杂度，在组织程序的时候便于在一个时刻专注于一个特定的部分，另外不遗漏暂时忽视的部分&lt;/li&gt;
&lt;li&gt;应对复杂度：减少本质复杂度到最小、避免偶然复杂度的无谓增长&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;理想的设计特征&lt;ul&gt;
&lt;li&gt;最小复杂度&lt;/li&gt;
&lt;li&gt;易于维护&lt;/li&gt;
&lt;li&gt;松耦合&lt;/li&gt;
&lt;li&gt;可扩展、可重用&lt;/li&gt;
&lt;li&gt;高扇入（类被其他类大量使用）、低扇出（类少量使用其他类）&lt;/li&gt;
&lt;li&gt;可移植性&lt;/li&gt;
&lt;li&gt;精简性&lt;/li&gt;
&lt;li&gt;标准化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;设计的层次&lt;ul&gt;
&lt;li&gt;软件系统 &amp;gt; 子系统或包 &amp;gt; 类 &amp;gt; 子程序 &amp;gt; 子程序内&lt;/li&gt;
&lt;li&gt;常用子系统：业务规则、用户界面、数据库访问、OS抽象层&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;设计构造块：启发式方法&lt;ul&gt;
&lt;li&gt;寻找现实对象：想想系统要模仿什么&lt;ul&gt;
&lt;li&gt;辨识对象和其属性&lt;/li&gt;
&lt;li&gt;确定可以对对象做的操作&lt;/li&gt;
&lt;li&gt;确定对象能对其他对象进行的操作&lt;/li&gt;
&lt;li&gt;确定对象的可见范围&lt;/li&gt;
&lt;li&gt;定义对象接口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;形成一致的&lt;strong&gt;抽象&lt;/strong&gt;：让你关注某概念的时候忽略不必要的细节&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;封装&lt;/strong&gt;实现细节：封装帮你掩盖不需要你看到的复杂度&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;继承&lt;/strong&gt;能简化设计就继承&lt;/li&gt;
&lt;li&gt;隐藏秘密信息&lt;ul&gt;
&lt;li&gt;保证接口最小且完备&lt;/li&gt;
&lt;li&gt;隐藏复杂度和变化源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;找出容易改变的区域&lt;ul&gt;
&lt;li&gt;业务规则、硬件依赖、输入输出、非标准的预演特性、状态变量、糟糕或复杂的设计&lt;/li&gt;
&lt;li&gt;将容易变化的部分隔离开，让变化的影响范围和变化的可能性成反比&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;保持松散耦合&lt;ul&gt;
&lt;li&gt;耦合种类：简单数据参数、简单对象、对象参数、语义耦合（过多假设）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;了解常用的设计模式&lt;ul&gt;
&lt;li&gt;设计模式提供了现成的抽象来减少复杂度&lt;/li&gt;
&lt;li&gt;设计模式将抽象SOP化&lt;/li&gt;
&lt;li&gt;设计模式可以起到启发性作用&lt;/li&gt;
&lt;li&gt;设计模式将设计对话提高到更高层次来简化交流&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;其他启发式方法&lt;ul&gt;
&lt;li&gt;高内聚&lt;/li&gt;
&lt;li&gt;契约式设计&lt;/li&gt;
&lt;li&gt;TDD&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;创建中央控制点，集中管控&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;拿不准时，使用蛮力突破&lt;/li&gt;
&lt;li&gt;画一个图&lt;/li&gt;
&lt;li&gt;设计模块化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用启发式方法的原则&lt;ul&gt;
&lt;li&gt;先理解问题&lt;/li&gt;
&lt;li&gt;找出现有数据和未知量之间的联系&lt;/li&gt;
&lt;li&gt;寻找之前的类似问题，或者解决一些相关问题&lt;/li&gt;
&lt;li&gt;执行计划&lt;/li&gt;
&lt;li&gt;回顾解&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;设计实践&lt;ul&gt;
&lt;li&gt;迭代：第二个尝试往往会好于第一个&lt;/li&gt;
&lt;li&gt;分而治之，增量式改进&lt;/li&gt;
&lt;li&gt;自上而下设计和自下而上设计&lt;/li&gt;
&lt;li&gt;建立试验性原型：原型要足够简单可抛弃，又足以验证效果&lt;/li&gt;
&lt;li&gt;记录你的设计成果：wiki、邮件、UML图&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;设计类&#34;&gt;&lt;a href=&#34;#设计类&#34; class=&#34;headerlink&#34; title=&#34;设计类&#34;&gt;&lt;/a&gt;设计类&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;类是一组数据和子程序的聚合，有内聚的明确定义的职责&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;抽象数据类型（ADT）&lt;ul&gt;
&lt;li&gt;ADT可以让你像现实世界一样操作实体，而不必在底层实现上摆弄实体&lt;/li&gt;
&lt;li&gt;ADT的好处&lt;ul&gt;
&lt;li&gt;隐藏实现细节&lt;/li&gt;
&lt;li&gt;改动不需要影响整个程序&lt;/li&gt;
&lt;li&gt;接口语义更强&lt;/li&gt;
&lt;li&gt;更容易提高性能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在非面向对象环境，也可以使用ADT&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;良好的类接口&lt;ul&gt;
&lt;li&gt;好的抽象&lt;ul&gt;
&lt;li&gt;类接口应该有一致的抽象层次&lt;/li&gt;
&lt;li&gt;要理解类的抽象是什么&lt;/li&gt;
&lt;li&gt;考虑提供成对的服务，如打开&amp;#x2F;关闭、添加&amp;#x2F;删除&lt;/li&gt;
&lt;li&gt;尽可能让接口可编程，而不仅是表达语义&lt;/li&gt;
&lt;li&gt;谨防在修改时破坏接口抽象&lt;/li&gt;
&lt;li&gt;同时考虑抽象性和内聚性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;好的封装&lt;ul&gt;
&lt;li&gt;封装比抽象更强，它直接阻止你看到细节&lt;/li&gt;
&lt;li&gt;尽可能限制类和成员的可访问性&lt;/li&gt;
&lt;li&gt;不要公开暴露成员数据&lt;/li&gt;
&lt;li&gt;不要将实现细节暴露在接口上&lt;/li&gt;
&lt;li&gt;不要对类的使用者做任何假设&lt;/li&gt;
&lt;li&gt;让阅读代码比编写更方便，代码的阅读次数比编写多得多&lt;/li&gt;
&lt;li&gt;不要&lt;strong&gt;透过&lt;/strong&gt;接口来编程，仅仅看类的接口文档无法得知如何使用一个类的话，正确的做法不是拉出类的源代码，查看内部实现，而是联系类作者。对于类作者来讲，正确的做法不是面对面告诉答案，而是去修改类的接口文档&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;设计和实现&lt;ul&gt;
&lt;li&gt;通过&lt;strong&gt;包含&lt;/strong&gt;来实现“有一个”的关系&lt;ul&gt;
&lt;li&gt;警惕超过&lt;strong&gt;7&lt;/strong&gt;个成员的类&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通过&lt;strong&gt;继承&lt;/strong&gt;实现“是一个”的关系&lt;ul&gt;
&lt;li&gt;用public继承&lt;/li&gt;
&lt;li&gt;要么使用继承并详细说明，要么就不要使用它&lt;/li&gt;
&lt;li&gt;遵循Liskov替换原则，即对基类的子程序，在它的所有派生类上含义都应该是相同的，在调用时只用看基类无需考虑是哪一个派生类&lt;/li&gt;
&lt;li&gt;只继承需要继承的部分&lt;/li&gt;
&lt;li&gt;只有一个实例的类值得怀疑&lt;/li&gt;
&lt;li&gt;只有一个派生类的类也值得怀疑&lt;/li&gt;
&lt;li&gt;派生中覆盖了某个子程序，但是其中没做任何操作，也值得怀疑&lt;ul&gt;
&lt;li&gt;很可能修改了基类接口的语义，慢慢地从基类接口很难理解派生类上的行为&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;避免过深地继承：降低复杂度&lt;/li&gt;
&lt;li&gt;尽量使用&lt;strong&gt;多态&lt;/strong&gt;，避免类型检查&lt;/li&gt;
&lt;li&gt;适度使用继承&lt;ul&gt;
&lt;li&gt;多个类共享数据而非行为 &amp;#x3D;&amp;gt; 创建类包含的公用对象&lt;/li&gt;
&lt;li&gt;多个类共享行为而非数据 &amp;#x3D;&amp;gt; 都从基类派生，在基类中定义公用的子程序&lt;/li&gt;
&lt;li&gt;多个类既公用数据也公用行为 &amp;#x3D;&amp;gt; 都从基类派生，在基类中定义公用的子程序和数据&lt;/li&gt;
&lt;li&gt;通过基类控制接口 &amp;#x3D;&amp;gt; 继承&lt;/li&gt;
&lt;li&gt;自己控制接口 &amp;#x3D;&amp;gt; 包含&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;成员函数和数据成员&lt;ul&gt;
&lt;li&gt;减少子程序&lt;/li&gt;
&lt;li&gt;进制不必要的成员和运算符&lt;/li&gt;
&lt;li&gt;减少对其他类子程序的间接调用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;构造函数&lt;ul&gt;
&lt;li&gt;尽可能早构造函数中初始化所有数据成员&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用私有构造函数来实现单例数据&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;优先使用深拷贝，除非需要，才使用浅拷贝&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;创建类的原因&lt;ul&gt;
&lt;li&gt;为现实&amp;#x2F;抽象世界的对象建模&lt;/li&gt;
&lt;li&gt;降低&amp;#x2F;隔离复杂度&lt;/li&gt;
&lt;li&gt;隐藏实现细节&lt;/li&gt;
&lt;li&gt;限制变动的影响范围&lt;/li&gt;
&lt;li&gt;建立中心控制点&lt;/li&gt;
&lt;li&gt;将相关操作包装在一起&lt;/li&gt;
&lt;li&gt;避免的类：万能类、无关紧要类、动词命名类&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;超越类：包&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;设计子程序&#34;&gt;&lt;a href=&#34;#设计子程序&#34; class=&#34;headerlink&#34; title=&#34;设计子程序&#34;&gt;&lt;/a&gt;设计子程序&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;子程序是为了实现特定目的编写的方法或过程&lt;/li&gt;
&lt;li&gt;编写子程序的正当理由&lt;ul&gt;
&lt;li&gt;降低复杂度&lt;/li&gt;
&lt;li&gt;引入中间、易懂的抽象&lt;/li&gt;
&lt;li&gt;避免代码重复&lt;/li&gt;
&lt;li&gt;支持派生类覆盖&lt;/li&gt;
&lt;li&gt;隐藏指针操作&lt;/li&gt;
&lt;li&gt;改善性能&lt;/li&gt;
&lt;li&gt;增加可读性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;子程序上的设计&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;一个子程序只做一件事&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;考虑靠近纯函数或纯副作用函数&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;内聚性&lt;ul&gt;
&lt;li&gt;功能上的、顺序上的、通信上的&lt;/li&gt;
&lt;li&gt;避免临时的内聚性（只是需要同时执行才放在一起操作的子程序），如贫血的&lt;code&gt;startup()&lt;/code&gt;方法&lt;/li&gt;
&lt;li&gt;避免逻辑上的、巧合的内聚性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;起个好名字&lt;ul&gt;
&lt;li&gt;描述所做的事情，而非做事情的过程&lt;/li&gt;
&lt;li&gt;避免使用模糊的动词&lt;/li&gt;
&lt;li&gt;不要仅用数字区分子程序名&lt;/li&gt;
&lt;li&gt;函数名不要过长&lt;/li&gt;
&lt;li&gt;考虑描述返回值&lt;/li&gt;
&lt;li&gt;使用预期强烈的动词 + 宾语&lt;/li&gt;
&lt;li&gt;使用对仗词，如add&amp;#x2F;remove&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;为常用操作统一命名&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;子程序长度：最好少于100行，可以接受100 - 200行&lt;/li&gt;
&lt;li&gt;子程序入参&lt;ul&gt;
&lt;li&gt;按输入、修改、输出顺序排列参数&lt;/li&gt;
&lt;li&gt;如果子程序使用了相似的参数，考虑让他们的排列顺序一致&lt;/li&gt;
&lt;li&gt;删掉没有使用到的参数&lt;/li&gt;
&lt;li&gt;不要给入参重新赋值&lt;/li&gt;
&lt;li&gt;限制入参数（有的说3个，有的说7个）&lt;/li&gt;
&lt;li&gt;考虑给参数名增加前缀、后缀&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;入参和子程序需要在一个抽象层级下&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;使用具名参数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;宏子程序和内联子程序&lt;ul&gt;
&lt;li&gt;将宏表达式整个包含在括号内&lt;/li&gt;
&lt;li&gt;一般来讲，是不会用宏代替子程序的&lt;/li&gt;
&lt;li&gt;节制使用inline子程序，在确认有性能改进后再使用inline子程序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;防御式编程&#34;&gt;&lt;a href=&#34;#防御式编程&#34; class=&#34;headerlink&#34; title=&#34;防御式编程&#34;&gt;&lt;/a&gt;防御式编程&lt;/h3&gt;&lt;p&gt;防御式编程让错误更容易发现和修改，并减小破坏。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;断言&lt;ul&gt;
&lt;li&gt;主要用于开发和维护的阶段&lt;/li&gt;
&lt;li&gt;用错误处理代码处理预期中的状况，用断言处理绝不该出现的状况&lt;/li&gt;
&lt;li&gt;避免把需要执行的代码放在断言中&lt;/li&gt;
&lt;li&gt;对于高健壮性代码，应该先断言再处理错误&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;错误处理技术&lt;ul&gt;
&lt;li&gt;返回中立值，如空串、0&lt;/li&gt;
&lt;li&gt;换用下一个正确数据，如获取温度&lt;/li&gt;
&lt;li&gt;返回上一个正确数据，如屏幕重绘&lt;/li&gt;
&lt;li&gt;使用最接近的合法值&lt;/li&gt;
&lt;li&gt;打印警告信息到日志文件中&lt;/li&gt;
&lt;li&gt;返回错误码&lt;/li&gt;
&lt;li&gt;显示出错信息&lt;/li&gt;
&lt;li&gt;关闭程序&lt;/li&gt;
&lt;li&gt;平衡正确性和健壮性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;异常&lt;ul&gt;
&lt;li&gt;通知程序其他部分，发生了不可忽略的错误&lt;/li&gt;
&lt;li&gt;只在真正例外的情况下才抛出异常&lt;/li&gt;
&lt;li&gt;避免再构造函数或析构函数中抛出异常&lt;/li&gt;
&lt;li&gt;在恰当抽象层次抛出异常&lt;/li&gt;
&lt;li&gt;在异常信息中加上导致异常的所有信息&lt;/li&gt;
&lt;li&gt;避免空的&lt;code&gt;catch&lt;/code&gt;语句&lt;/li&gt;
&lt;li&gt;异常标准化 &amp;amp; 异常报告机制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;辅助调试的代码&lt;ul&gt;
&lt;li&gt;进攻式编程：让问题更早暴露&lt;/li&gt;
&lt;li&gt;方便地移除调试代码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;保留防御式代码的程度&lt;ul&gt;
&lt;li&gt;保留检查重要错误的代码&lt;/li&gt;
&lt;li&gt;去掉检查细微错误的代码&lt;/li&gt;
&lt;li&gt;保留让程序稳妥崩溃的代码&lt;/li&gt;
&lt;li&gt;记录错误信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;伪代码编写&#34;&gt;&lt;a href=&#34;#伪代码编写&#34; class=&#34;headerlink&#34; title=&#34;伪代码编写&#34;&gt;&lt;/a&gt;伪代码编写&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;创建一个类&lt;ul&gt;
&lt;li&gt;创建类的总体设计&lt;/li&gt;
&lt;li&gt;创建类中的子程序&lt;/li&gt;
&lt;li&gt;复审并测试&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;伪代码&lt;ul&gt;
&lt;li&gt;使用类似英语的用法描述准确操作&lt;/li&gt;
&lt;li&gt;避免使用特定编程语言的语法元素，防止陷入到代码本身的层级上设计&lt;/li&gt;
&lt;li&gt;在略高于代码的层次上进行设计&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通过伪代码创建子程序&lt;ul&gt;
&lt;li&gt;检查先决条件&lt;/li&gt;
&lt;li&gt;定义子程序要解决的问题&lt;/li&gt;
&lt;li&gt;决定如何测试&lt;/li&gt;
&lt;li&gt;在第三方库中搜寻可用功能&lt;/li&gt;
&lt;li&gt;考虑错误处理&lt;/li&gt;
&lt;li&gt;编写伪代码&lt;/li&gt;
&lt;li&gt;将伪代码转为高层次的注释&lt;/li&gt;
&lt;li&gt;在注释下填充代码&lt;/li&gt;
&lt;li&gt;检查代码是否需要进一步分解&lt;/li&gt;
&lt;li&gt;使用lint或编译器检查错误&lt;/li&gt;
&lt;li&gt;去掉冗余注释&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;变量&#34;&gt;&lt;a href=&#34;#变量&#34; class=&#34;headerlink&#34; title=&#34;变量&#34;&gt;&lt;/a&gt;变量&lt;/h2&gt;&lt;p&gt;这一部分深入到代码细节，围绕如何正确使用变量展开。&lt;/p&gt;
&lt;h3 id=&#34;一般事项&#34;&gt;&lt;a href=&#34;#一般事项&#34; class=&#34;headerlink&#34; title=&#34;一般事项&#34;&gt;&lt;/a&gt;一般事项&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;初始化的一些建议&lt;ul&gt;
&lt;li&gt;声明的时候初始化&lt;/li&gt;
&lt;li&gt;靠近变量使用的时候初始化&lt;/li&gt;
&lt;li&gt;考虑对常量使用&lt;code&gt;final&lt;/code&gt;或&lt;code&gt;const&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;注意累加器和计数器的重置&lt;/li&gt;
&lt;li&gt;用可执行代码初始化&lt;/li&gt;
&lt;li&gt;检查合法性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;作用域&lt;ul&gt;
&lt;li&gt;将变量引用点集中起来可以提高可读性，这样可以减少大脑缓存&lt;/li&gt;
&lt;li&gt;减少变量的“存活时间”（从第一条引用语句到最后一条）&lt;/li&gt;
&lt;li&gt;减少作用域的一些原则&lt;ul&gt;
&lt;li&gt;循环开始时初始化循环变量&lt;/li&gt;
&lt;li&gt;变量使用前再赋值&lt;/li&gt;
&lt;li&gt;对于变量先采用最严格的可见性，再逐渐放宽&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;持续性&lt;ul&gt;
&lt;li&gt;子程序内&amp;#x2F;手动回收前&amp;#x2F;程序运行时&amp;#x2F;持久存储&lt;/li&gt;
&lt;li&gt;为变量选择合适的持续性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;绑定时间&lt;ul&gt;
&lt;li&gt;编码时&amp;#x2F;编译时&amp;#x2F;加载时&amp;#x2F;实例化时&amp;#x2F;运行时&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;越晚绑定越有灵活&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;选择合适的灵活度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;和控制结构匹配的数据结构&lt;ul&gt;
&lt;li&gt;序列型数据 -&amp;gt; 顺序语句&lt;/li&gt;
&lt;li&gt;选择型数据 -&amp;gt; &lt;code&gt;if case&lt;/code&gt;语句&lt;/li&gt;
&lt;li&gt;迭代型数据 -&amp;gt; 循环语句&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;变量单一用途&lt;ul&gt;
&lt;li&gt;只用作一件事&lt;/li&gt;
&lt;li&gt;使用所有已声明变量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;取名&#34;&gt;&lt;a href=&#34;#取名&#34; class=&#34;headerlink&#34; title=&#34;取名&#34;&gt;&lt;/a&gt;取名&lt;/h3&gt;&lt;p&gt;取名是个学问。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;几个原则&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;信达雅&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;以问题为导向&lt;/strong&gt;，面向目的而不是手段&lt;/li&gt;
&lt;li&gt;适当的长度，小于20个字符，大于8个字符&lt;/li&gt;
&lt;li&gt;作用域越小，变量名越短；使用较少的变量或全局变量适用较长的名字&lt;/li&gt;
&lt;li&gt;使用限定词（如min、avg、max）和对仗词&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;特定类型的变量名&lt;ul&gt;
&lt;li&gt;循环下标：&lt;code&gt;i&lt;/code&gt;,&lt;code&gt;j&lt;/code&gt;,&lt;code&gt;k&lt;/code&gt;，在嵌套循环时建议使用表意的变量名&lt;/li&gt;
&lt;li&gt;状态变量：取个比&lt;code&gt;xxxflag&lt;/code&gt;更好的名字&lt;/li&gt;
&lt;li&gt;临时变量：避免用临时名字&lt;/li&gt;
&lt;li&gt;布尔变量：名字要蕴含真假的意义&lt;ul&gt;
&lt;li&gt;&lt;code&gt;done&lt;/code&gt;&amp;#x2F;&lt;code&gt;error&lt;/code&gt;&amp;#x2F;&lt;code&gt;found&lt;/code&gt;&amp;#x2F;&lt;code&gt;success&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不建议使用&lt;code&gt;is&lt;/code&gt;前缀&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;使用表示&lt;strong&gt;肯定&lt;/strong&gt;的名字，理解成本低&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;枚举变量：缺少组前缀的需要加上前缀&lt;/li&gt;
&lt;li&gt;常量：不使用magic number或magic string&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;组内需要确定一个命名规范&lt;/li&gt;
&lt;li&gt;标准前缀&lt;ul&gt;
&lt;li&gt;用户自定义类型缩写，UDT缩写&lt;/li&gt;
&lt;li&gt;正交化、便于检索&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如何缩写&lt;ul&gt;
&lt;li&gt;使用标准缩写&lt;/li&gt;
&lt;li&gt;去掉非前置元音&lt;/li&gt;
&lt;li&gt;去掉虚词，&lt;code&gt;and&lt;/code&gt;等&lt;/li&gt;
&lt;li&gt;去掉无用后缀&lt;/li&gt;
&lt;li&gt;使用每个单词的第一或前几个字母&lt;/li&gt;
&lt;li&gt;不提倡语音缩写&lt;/li&gt;
&lt;li&gt;缩写要能读出来&lt;/li&gt;
&lt;li&gt;避免容易看错或读错的字符组合&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;应该避免的名字&lt;ul&gt;
&lt;li&gt;令人误解&lt;/li&gt;
&lt;li&gt;具有不同含义但有相似名字&lt;/li&gt;
&lt;li&gt;发音相近&lt;/li&gt;
&lt;li&gt;出现数字，这是不好的征兆&lt;/li&gt;
&lt;li&gt;拼写错误&lt;/li&gt;
&lt;li&gt;仅靠大小写区分&lt;/li&gt;
&lt;li&gt;使用易混淆的字符，如&lt;code&gt;0&lt;/code&gt;和&lt;code&gt;o&lt;/code&gt;，&lt;code&gt;1&lt;/code&gt;和&lt;code&gt;l&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;代码阅读次数要远远多于编写次数&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;基本数据类型&#34;&gt;&lt;a href=&#34;#基本数据类型&#34; class=&#34;headerlink&#34; title=&#34;基本数据类型&#34;&gt;&lt;/a&gt;基本数据类型&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;数值&lt;ul&gt;
&lt;li&gt;避免magic number&lt;/li&gt;
&lt;li&gt;避免除0&lt;/li&gt;
&lt;li&gt;避免混合类型比较哦&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;整数&lt;ul&gt;
&lt;li&gt;检查整数除法&lt;/li&gt;
&lt;li&gt;检查整数溢出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;浮点数&lt;ul&gt;
&lt;li&gt;避免数据级相差巨大的数之间的加减&lt;/li&gt;
&lt;li&gt;避免相等比较&lt;/li&gt;
&lt;li&gt;避免舍入误差&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;字符串&lt;ul&gt;
&lt;li&gt;避免magic string&lt;/li&gt;
&lt;li&gt;考虑国际化&lt;/li&gt;
&lt;li&gt;unicode支持&lt;/li&gt;
&lt;li&gt;C语言的字符串&lt;ul&gt;
&lt;li&gt;注意字符串指针和字符数组的差异&lt;/li&gt;
&lt;li&gt;注意字符串长度声明为CONSTANT + 1&lt;/li&gt;
&lt;li&gt;用&lt;code&gt;null&lt;/code&gt;初始化避免无结束符&lt;/li&gt;
&lt;li&gt;建议使用字符数组&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;布尔变量&lt;ul&gt;
&lt;li&gt;使用布尔中间变量简化复杂判断&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;枚举类型&lt;ul&gt;
&lt;li&gt;带来类型提示和提升可读性&lt;/li&gt;
&lt;li&gt;简化修改&lt;/li&gt;
&lt;li&gt;作为布尔变量的可扩展性方案&lt;/li&gt;
&lt;li&gt;枚举类型的第一个元素留作非法制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;具名常量：“参数化”程序&lt;ul&gt;
&lt;li&gt;统一使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数组&lt;ul&gt;
&lt;li&gt;确认数组下标&lt;/li&gt;
&lt;li&gt;顺序访问元素，不建议随机访问&lt;/li&gt;
&lt;li&gt;数组边界点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自定义类型：&lt;code&gt;typedef&lt;/code&gt;作为类的轻量级方案&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;不常见的数据类型&#34;&gt;&lt;a href=&#34;#不常见的数据类型&#34; class=&#34;headerlink&#34; title=&#34;不常见的数据类型&#34;&gt;&lt;/a&gt;不常见的数据类型&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;结构体：数据组合，没有行为的类&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用前一问：可以用类么&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;简化数据块操作&lt;/li&gt;
&lt;li&gt;简化参数列表&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;指针：灵活但容易出错&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用前一问：有访问器子程序或防御式编程么&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;标识内存中&lt;strong&gt;某个位置&lt;/strong&gt;有&lt;strong&gt;某种内容&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;一般技巧&lt;ul&gt;
&lt;li&gt;同时声明和定义&lt;/li&gt;
&lt;li&gt;使用前检查&lt;/li&gt;
&lt;li&gt;使用前判断内存是否损毁&lt;/li&gt;
&lt;li&gt;在提高代码清晰度上，不要节约使用指针&lt;/li&gt;
&lt;li&gt;简化指针表达式&lt;/li&gt;
&lt;li&gt;正确删除链表中的指针&lt;/li&gt;
&lt;li&gt;删除或释放前设为空值&lt;/li&gt;
&lt;li&gt;删除前检查是否非法&lt;/li&gt;
&lt;li&gt;统一跟踪分配情况&lt;/li&gt;
&lt;li&gt;统一在子程序里，集中实现上述策略&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;C++指针&lt;ul&gt;
&lt;li&gt;理解指针和引用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;指针用于“按引用传递”，const引用用于“按值传递”&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;shared_ptr&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;C指针&lt;ul&gt;
&lt;li&gt;使用显式类型&lt;/li&gt;
&lt;li&gt;避免强制类型转换&lt;/li&gt;
&lt;li&gt;遵循参数传递的&lt;code&gt;*&lt;/code&gt;规则&lt;/li&gt;
&lt;li&gt;内存分配时使用&lt;code&gt;sizeof()&lt;/code&gt;确定变量大小&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;全局数据：风险较大&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用前一问：有更好的方法么&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;常见问题&lt;ul&gt;
&lt;li&gt;多线程重入问题&lt;/li&gt;
&lt;li&gt;阻碍代码重用&lt;/li&gt;
&lt;li&gt;破坏模块化和智力上的可管理性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用理由&lt;ul&gt;
&lt;li&gt;简化极常用的数据使用&lt;/li&gt;
&lt;li&gt;消除流浪数据（调用链中间的子程序不使用数据）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用访问器子程序取代全局数据&lt;ul&gt;
&lt;li&gt;在访问前锁定控制&lt;/li&gt;
&lt;li&gt;在访问器子程序里构建一个抽象层&lt;/li&gt;
&lt;li&gt;对数据的所有访问限制在一个抽象层&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;语句&#34;&gt;&lt;a href=&#34;#语句&#34; class=&#34;headerlink&#34; title=&#34;语句&#34;&gt;&lt;/a&gt;语句&lt;/h2&gt;&lt;p&gt;在了解了数据视角的变量元素后，这一部分围绕语句组织展开。&lt;/p&gt;
&lt;h3 id=&#34;直线型代码&#34;&gt;&lt;a href=&#34;#直线型代码&#34; class=&#34;headerlink&#34; title=&#34;直线型代码&#34;&gt;&lt;/a&gt;直线型代码&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;直线型代码即按先后顺序放置语句和语句块&lt;/li&gt;
&lt;li&gt;必须明确先后顺序的语句&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;想办法明确展示语句的依赖关系&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;组织代码&lt;/li&gt;
&lt;li&gt;使用子程序名&amp;#x2F;子程序参数凸显依赖&lt;/li&gt;
&lt;li&gt;使用注释&lt;/li&gt;
&lt;li&gt;通过断言或错误处理来检查&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;顺序无关的语句&lt;ul&gt;
&lt;li&gt;使代码易于从上向下阅读，避免跳来跳去&lt;/li&gt;
&lt;li&gt;将相关语句组织在一起&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;条件语句&#34;&gt;&lt;a href=&#34;#条件语句&#34; class=&#34;headerlink&#34; title=&#34;条件语句&#34;&gt;&lt;/a&gt;条件语句&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;if&lt;/code&gt;语句&lt;ul&gt;
&lt;li&gt;&lt;code&gt;if-then&lt;/code&gt;语句&lt;ul&gt;
&lt;li&gt;先写正常代码，再写不常见情况&lt;/li&gt;
&lt;li&gt;不要在&lt;code&gt;if&lt;/code&gt;后跟随空子句&lt;/li&gt;
&lt;li&gt;看看是不是不需要&lt;code&gt;else&lt;/code&gt;子句&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;if-then-else&lt;/code&gt;语句&lt;ul&gt;
&lt;li&gt;利用布尔函数简化复杂的检测&lt;/li&gt;
&lt;li&gt;把常见情况放在最前面&lt;/li&gt;
&lt;li&gt;检查是否考虑了所有情况&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;case&lt;/code&gt;语句&lt;ul&gt;
&lt;li&gt;选择最有效的排列顺序，如执行频率&lt;/li&gt;
&lt;li&gt;简化每种case下的操作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最好能搭配枚举类型一起使用&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;default&lt;/code&gt;子句检查默认情况或错误&lt;/li&gt;
&lt;li&gt;注意有些语言的&lt;code&gt;case&lt;/code&gt;会有fallthrough，需要加&lt;code&gt;break&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;循环语句&lt;ul&gt;
&lt;li&gt;分为计数循环、连续求值循环、无限循环、迭代器循环。分别适用&lt;code&gt;for&lt;/code&gt;、&lt;code&gt;while&lt;/code&gt;、&lt;code&gt;foreach&lt;/code&gt;语句&lt;/li&gt;
&lt;li&gt;循环控制&lt;ul&gt;
&lt;li&gt;应该把循环体看作黑盒子，外围程序只知道它的控制条件&lt;/li&gt;
&lt;li&gt;合理判断使用&lt;code&gt;for&lt;/code&gt;和&lt;code&gt;while&lt;/code&gt;的地方&lt;/li&gt;
&lt;li&gt;尽量避免空循环&lt;/li&gt;
&lt;li&gt;循环内务（包括索引增加）要么放在循环开始，要么放在循环最后&lt;/li&gt;
&lt;li&gt;让循环终止条件看起来明显&lt;/li&gt;
&lt;li&gt;不要为了终止循环改动&lt;code&gt;for&lt;/code&gt;循环的下标&lt;/li&gt;
&lt;li&gt;小心散布了很多&lt;code&gt;break&lt;/code&gt;的循环，小心谨慎使用&lt;code&gt;break&lt;/code&gt;和&lt;code&gt;continue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;检查循环端点是否会有off-by-one的问题&lt;/li&gt;
&lt;li&gt;在嵌套循环中使用有意义的变量名增强可读性&lt;/li&gt;
&lt;li&gt;循环要尽可能短，便于一目了然&lt;/li&gt;
&lt;li&gt;把嵌套限制在3层以内&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;不常见的控制结构&#34;&gt;&lt;a href=&#34;#不常见的控制结构&#34; class=&#34;headerlink&#34; title=&#34;不常见的控制结构&#34;&gt;&lt;/a&gt;不常见的控制结构&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;多处返回：指程序中途的return或exit&lt;ul&gt;
&lt;li&gt;只在能增强可读性时，使用中途的&lt;code&gt;return&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;用防卫子句提前退出，简化复杂的错误处理&lt;/li&gt;
&lt;li&gt;减少程序中的&lt;code&gt;return&lt;/code&gt;数目&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;递归：将复杂问题分而治之&lt;ul&gt;
&lt;li&gt;确认终止条件&lt;/li&gt;
&lt;li&gt;使用安全计数器防止出现无穷递归&lt;/li&gt;
&lt;li&gt;把递归限制在一个子程序里，避免循环调用&lt;/li&gt;
&lt;li&gt;留意栈空间&lt;/li&gt;
&lt;li&gt;可以用循环结构等价式的先考虑循环结构，如阶乘和斐波那契数列&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;goto&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;反对随意使用&lt;code&gt;goto&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;goto&lt;/code&gt;灵活度太高，不容易用好，在可以使用其他控制结构时，不使用&lt;code&gt;goto&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在错误处理中，可以用状态变量、&lt;code&gt;try finally&lt;/code&gt;语句实现跳出正常流&lt;/li&gt;
&lt;li&gt;如果在那1%的情况下需要使用&lt;code&gt;goto&lt;/code&gt;，注意以下几点&lt;ul&gt;
&lt;li&gt;尽量一个子程序只使用一个&lt;code&gt;goto&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;尽量向前跳转而非向后&lt;/li&gt;
&lt;li&gt;确保所有的goto标号都被执行到&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;确认&lt;code&gt;goto&lt;/code&gt;不会产生执行不到的代码&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;表驱动法&#34;&gt;&lt;a href=&#34;#表驱动法&#34; class=&#34;headerlink&#34; title=&#34;表驱动法&#34;&gt;&lt;/a&gt;表驱动法&lt;/h3&gt;&lt;p&gt;表驱动法是&lt;strong&gt;空间换时间&lt;/strong&gt;的一种编程模式，使用数据结构模拟逻辑结构，将大部分复杂度放到容易被理解的数据结构中，从而提升代码可读性。下面是一个代码范例。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (((&lt;span class=&#34;string&#34;&gt;&amp;#x27;a&amp;#x27;&lt;/span&gt; &amp;lt;= inputChar) &amp;amp;&amp;amp; (inputChar &amp;lt;= &lt;span class=&#34;string&#34;&gt;&amp;#x27;z&amp;#x27;&lt;/span&gt;)) ||&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ((&lt;span class=&#34;string&#34;&gt;&amp;#x27;A&amp;#x27;&lt;/span&gt; &amp;lt;= inputChar) &amp;amp;&amp;amp; (inputChar &amp;lt;= &lt;span class=&#34;string&#34;&gt;&amp;#x27;Z&amp;#x27;&lt;/span&gt;)))  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  charType = CharacterType.Letter;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ((inputChar == &lt;span class=&#34;string&#34;&gt;&amp;#x27; &amp;#x27;&lt;/span&gt;) || (inputChar == &lt;span class=&#34;string&#34;&gt;&amp;#x27;,&amp;#x27;&lt;/span&gt;) ||&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  (inputChar = &lt;span class=&#34;string&#34;&gt;&amp;#x27;.&amp;#x27;&lt;/span&gt;) || (inputChar == &lt;span class=&#34;string&#34;&gt;&amp;#x27;!&amp;#x27;&lt;/span&gt;) || (inputChar == &lt;span class=&#34;string&#34;&gt;&amp;#x27;(&amp;#x27;&lt;/span&gt;) ||&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  (inputChar = &lt;span class=&#34;string&#34;&gt;&amp;#x27;)&amp;#x27;&lt;/span&gt;) || (inputChar == &lt;span class=&#34;string&#34;&gt;&amp;#x27;:&amp;#x27;&lt;/span&gt;) || (inputChar == &lt;span class=&#34;string&#34;&gt;&amp;#x27;;&amp;#x27;&lt;/span&gt;) ||&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  (inputChar = &lt;span class=&#34;string&#34;&gt;&amp;#x27;?&amp;#x27;&lt;/span&gt;) || (inputChar == &lt;span class=&#34;string&#34;&gt;&amp;#x27;-&amp;#x27;&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  charType = CharacterType.Punctuation;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ((&lt;span class=&#34;string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt; &amp;lt;= inputChar) &amp;amp;&amp;amp; (inputChar &amp;lt;= &lt;span class=&#34;string&#34;&gt;&amp;#x27;9&amp;#x27;&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  charType = CharacterType.Digit;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;使用一个查询表建立每个字符和它的字符类型的关联后，代码可以简化为&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;charType = charTypeTable[inputChar];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;查表方法&lt;ul&gt;
&lt;li&gt;直接访问：如查询每月天数，或不同年龄对应的保险费率&lt;ul&gt;
&lt;li&gt;有的时候键值要预先处理后才能直接使用，如可能很多年龄对应相似的费率，这时最好先将年龄&lt;strong&gt;换算&lt;/strong&gt;到一个更好的key上&lt;/li&gt;
&lt;li&gt;进一步，我们可以把键值转换提取为独立的子程序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;索引访问表：和直接访问的区别在于，对于不易&lt;strong&gt;换算&lt;/strong&gt;到键值的情况，提供一个额外的索引表，先&lt;strong&gt;映射&lt;/strong&gt;到索引表再查到数据&lt;/li&gt;
&lt;li&gt;阶梯访问表：主要针对表中的记录是对&lt;strong&gt;数据范围&lt;/strong&gt;而非&lt;strong&gt;数据点&lt;/strong&gt;生效的情况，使用端点作为key&lt;ul&gt;
&lt;li&gt;留心端点带来的off-by-one情况&lt;/li&gt;
&lt;li&gt;可以使用二分查找代替顺序查找&lt;/li&gt;
&lt;li&gt;也可以使用索引访问技术&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;一般性问题&#34;&gt;&lt;a href=&#34;#一般性问题&#34; class=&#34;headerlink&#34; title=&#34;一般性问题&#34;&gt;&lt;/a&gt;一般性问题&lt;/h3&gt;&lt;h4 id=&#34;布尔表达式&#34;&gt;&lt;a href=&#34;#布尔表达式&#34; class=&#34;headerlink&#34; title=&#34;布尔表达式&#34;&gt;&lt;/a&gt;布尔表达式&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;true&lt;/code&gt;或&lt;code&gt;false&lt;/code&gt;作判断&lt;/li&gt;
&lt;li&gt;简化复杂的表达式&lt;ul&gt;
&lt;li&gt;使用中间变量或布尔函数&lt;/li&gt;
&lt;li&gt;使用决策表替代复杂的判断逻辑&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;编写&lt;strong&gt;肯定&lt;/strong&gt;的布尔表达式，会让布尔表达式更易理解&lt;/li&gt;
&lt;li&gt;用括号分割较长的布尔表达式&lt;/li&gt;
&lt;li&gt;注意短路求值或惰性求值的情况&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;按照数轴的顺序编写数值表达式&lt;/strong&gt;，类似&lt;code&gt;MIN_VALUE &amp;lt;= i and i &amp;lt;= MAX_VALUE&lt;/code&gt;，可读性好很多&lt;/li&gt;
&lt;li&gt;在C语言中最好把常量放在左边&lt;/li&gt;
&lt;li&gt;注意区分Java中&lt;code&gt;a==b&lt;/code&gt;和&lt;code&gt;a.equals(b)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;空语句&#34;&gt;&lt;a href=&#34;#空语句&#34; class=&#34;headerlink&#34; title=&#34;空语句&#34;&gt;&lt;/a&gt;空语句&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;小心使用&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;doNothing()&lt;/code&gt;函数或&lt;code&gt;noop()&lt;/code&gt;函数&lt;/li&gt;
&lt;li&gt;考虑能否换用非空的循环体&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;优化深层嵌套&#34;&gt;&lt;a href=&#34;#优化深层嵌套&#34; class=&#34;headerlink&#34; title=&#34;优化深层嵌套&#34;&gt;&lt;/a&gt;优化深层嵌套&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;优化重复的&lt;code&gt;if&lt;/code&gt;检查&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;break&lt;/code&gt;简化嵌套&lt;code&gt;if&lt;/code&gt;，如防卫子句&lt;/li&gt;
&lt;li&gt;转换成一组&lt;code&gt;if-then-else&lt;/code&gt;结构&lt;/li&gt;
&lt;li&gt;转换成&lt;code&gt;case&lt;/code&gt;语句&lt;/li&gt;
&lt;li&gt;将深度嵌套的语句抽离成子程序&lt;/li&gt;
&lt;li&gt;借助多态&lt;/li&gt;
&lt;li&gt;借助异常来跳出正常流&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;结构化编程&#34;&gt;&lt;a href=&#34;#结构化编程&#34; class=&#34;headerlink&#34; title=&#34;结构化编程&#34;&gt;&lt;/a&gt;结构化编程&lt;/h4&gt;&lt;p&gt;结构化编程的思路是仅使用&lt;strong&gt;顺序&lt;/strong&gt;、&lt;strong&gt;选择&lt;/strong&gt;、&lt;strong&gt;迭代&lt;/strong&gt;的思路描述程序流，避免使用&lt;code&gt;break&lt;/code&gt;，&lt;code&gt;continue&lt;/code&gt;，&lt;code&gt;return&lt;/code&gt;，&lt;code&gt;try-catch&lt;/code&gt;来打断。&lt;/p&gt;
&lt;h4 id=&#34;降低复杂度&#34;&gt;&lt;a href=&#34;#降低复杂度&#34; class=&#34;headerlink&#34; title=&#34;降低复杂度&#34;&gt;&lt;/a&gt;降低复杂度&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;程序复杂度的一个衡量标准是，为了理解程序，必须在同一时间记忆的智力实体数目&lt;/strong&gt;，即理解程序花费的精力&lt;/li&gt;
&lt;li&gt;控制流的复杂度和不可靠的代码以及频繁出现的错误息息相关&lt;/li&gt;
&lt;li&gt;可以通过计算子程序的“决策点”粗估子程序的复杂度&lt;ul&gt;
&lt;li&gt;从1开始，遇到&lt;code&gt;if&lt;/code&gt;，&lt;code&gt;while&lt;/code&gt;，&lt;code&gt;repeat&lt;/code&gt;，&lt;code&gt;for&lt;/code&gt;，&lt;code&gt;and&lt;/code&gt;，&lt;code&gt;or&lt;/code&gt;加一，为每一种&lt;code&gt;case&lt;/code&gt;加一&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="编程" />
        <category term="范式" />
        <category term="设计" />
        <updated>2022-03-03T15:09:50.000Z</updated>
    </entry>
    <entry>
        <id>http://shenlvmeng.github.com/blog/2019/12/02/clean-code/</id>
        <title>《代码整洁之道》——有一个好的代码品味</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2019/12/02/clean-code/"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;The only valid measurement of code quality: WTFs&amp;#x2F;minute&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在成为一个程序员的初期，实现功能还需磕磕绊绊的阶段，我们大抵没有精力操心代码风格的问题；而在能够搞定环境和API使用的时间段，大部分人又会沉湎于使用一门语言让想象实现的成就感，而没有发现暗藏在迭代后的危机。往往迭代了一段时间后，才发现之前埋下的巨坑已经让自己无从下手。这时一部分人醒悟过来，意识到一个优良的代码风格对于项目推进的长远意义。这也是《Clean Code》这本书的宗旨。它较之《程序员修炼之道》更为具体，较之《重构》更为宏观。对于工作一段时间后的程序员来说，是一个很好的提醒和反思归纳的建议。让代码work的方式是千万种，而让代码可持续，可扩展，长久work的方式也许需要前辈指引些方法。&lt;/p&gt;
&lt;h2 id=&#34;观念&#34;&gt;&lt;a href=&#34;#观念&#34; class=&#34;headerlink&#34; title=&#34;观念&#34;&gt;&lt;/a&gt;观念&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Later equals never —— Leblanc Law&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;糟糕的代码会让人难以下手，拖慢进度，若无人着手改善，混乱会持续增加，进而降低团队生产力，降低人效，然后搞砸整个项目。为什么不一开始就打好基础，写出整洁代码呢？&lt;/p&gt;
&lt;p&gt;下面是一些大师对“整洁代码”的界定&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“代码逻辑直截了当，缺陷难以隐藏；减少依赖关系，从而便于维护；性能调优，省得引人做出没规矩的优化，干出蠢事；整洁的代码只干一件事” —— Bjarne Stroustrup&lt;/li&gt;
&lt;li&gt;“代码简单直接，如同优美的散文；从不隐藏设计者的意图，充满干净利落的抽象和直截了当的控制语句” —— Grady Booch&lt;/li&gt;
&lt;li&gt;“可由作者外的人阅读和扩展，应该有单元测试和验收测试；只使用有意义的命名；提供尽量正交的使用方法（一种而非多种做一件事的方法）；尽量少的API；尽量少的依赖关系，且要明确定义和清晰提供；代码应从字面意义上表达其含义” —— Dave Thomas&lt;/li&gt;
&lt;li&gt;“整洁的代码总是看起来像某位特别在意的人写的，几乎没有改进的余地，所有的改进都会回到原点” —— Michael Feather&lt;/li&gt;
&lt;li&gt;“能通过所有测试；没有重复代码，表达力强大；体现系统中的全部设计理念；包括尽量少的实体，如类、方法、函数。” —— Ron Jeffries&lt;/li&gt;
&lt;li&gt;“整洁代码让每个例程都深合己意；漂亮代码让语言看起来像是专门为解决那个问题而存在” —— Ward Cunningham&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;编写代码的难度，取决于读周边代码的难度，要想干得快，就先让代码易读。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;让营地比你来时更干净 —— 童子军军规&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;命名&#34;&gt;&lt;a href=&#34;#命名&#34; class=&#34;headerlink&#34; title=&#34;命名&#34;&gt;&lt;/a&gt;命名&lt;/h2&gt;&lt;p&gt;好的命名，可以让人一眼就明白代码的逻辑。看下面两段代码：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; List&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;[]&amp;gt; getThem() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  List&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;[]&amp;gt; list1 = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;[]&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;[] x : theList)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (x[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] == &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      list1.add(x)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; list1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; List&amp;lt;Cell&amp;gt; &lt;span class=&#34;title function_&#34;&gt;getFlaggedCells&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  List&amp;lt;Cell&amp;gt; flaggedCells = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;Cell&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (Cell cell : gameBoard)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (cell.isFlagged)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      flaggedCells.add(cell);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; flaggedCells;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;下面是一些准则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;名副其实，一旦发现更好的，就替换掉旧的。&lt;strong&gt;如果名称还需要注释补充，那就不算名副其实&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;避免误导，提防使用不同之处较小的名称，比如&lt;code&gt;UsernameListEmptyFilter&lt;/code&gt;和&lt;code&gt;UsernameListNullFilter&lt;/code&gt;，不要混用1和l，以及0和O&lt;/li&gt;
&lt;li&gt;做有意义的区分，少废话，反例是&lt;code&gt;a1&lt;/code&gt;和&lt;code&gt;a2&lt;/code&gt;，&lt;code&gt;nameString&lt;/code&gt;和&lt;code&gt;name&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用&lt;strong&gt;能读出来&lt;/strong&gt;的名称，方便程序员的沟通&lt;/li&gt;
&lt;li&gt;使用&lt;strong&gt;可搜索&lt;/strong&gt;的名称，仅在块作用域或短函数内使用单字母名称&lt;/li&gt;
&lt;li&gt;不把类型信息放在名称中&lt;/li&gt;
&lt;li&gt;减少不必要的前缀和后缀&lt;/li&gt;
&lt;li&gt;类名应该是名词，方法名应该是动词或动词短语&lt;/li&gt;
&lt;li&gt;别玩梗&lt;/li&gt;
&lt;li&gt;标准化语素，为每一个抽象概念选择一个统一的词&lt;/li&gt;
&lt;li&gt;别用有多重含义的词汇，这会增加使用者顾虑和理解成本&lt;/li&gt;
&lt;li&gt;只在没有明确定义的场景下使用语境（类，前缀……）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;函数&#34;&gt;&lt;a href=&#34;#函数&#34; class=&#34;headerlink&#34; title=&#34;函数&#34;&gt;&lt;/a&gt;函数&lt;/h2&gt;&lt;p&gt;下面是一些准则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;短小，更短小&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;只做一件事，只做一件事，只做一件事&lt;/strong&gt;，重要的事情说三遍&lt;ul&gt;
&lt;li&gt;还有一种方式可以帮助判断函数是不是只做了一件事：&lt;strong&gt;函数语句是否在一个抽象层级上&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;只做一件事的函数无法被继续合理拆分成多段&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;让代码拥有从上到下的自然的阅读顺序，尽量避免跳来跳去的阅读顺序&lt;/li&gt;
&lt;li&gt;为函数使用&lt;strong&gt;描述性&lt;/strong&gt;的名称&lt;/li&gt;
&lt;li&gt;函数&lt;strong&gt;最多3个入参&lt;/strong&gt;，最理想是没有参数，其次是1个，再其次是2个，要避免3个参数&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;布尔类型的参数会让你的函数难以理解&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;使用二元参数时，最好保证前后顺序不敏感&lt;/li&gt;
&lt;li&gt;对于复杂的入参，可以用对象封装起来&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;函数要么只做副作用（&lt;em&gt;做什么事&lt;/em&gt;），要么没有副作用（&lt;em&gt;回答什么事&lt;/em&gt;），而且能从名称中一目了然地看到&lt;/li&gt;
&lt;li&gt;用异常代替错误码，错误处理也是一件事&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;别重复自己（Don’t repeat yourself, DRY）&lt;/strong&gt;。重复是软件中一切邪恶的根源，软件开发领域的所有创新都在不断尝试从源代码中消灭重复&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;函数是语言的动词，类是名词。大师级的程序员把系统当做故事来讲，而不是程序来写。他们使用特定编程语言提供的工具构建一种&lt;strong&gt;更丰富和更具表达力的语言&lt;/strong&gt;。好的函数必须干净利落的组合在一起，形成清晰明确的语言，帮你&lt;strong&gt;讲好故事&lt;/strong&gt;。这个过程不是一蹴而就的，你可以现象什么就写什么，然后一点点打磨它。&lt;/p&gt;
&lt;h2 id=&#34;注释&#34;&gt;&lt;a href=&#34;#注释&#34; class=&#34;headerlink&#34; title=&#34;注释&#34;&gt;&lt;/a&gt;注释&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;使用注释 &amp;#x3D; 承认自己无法用代码表达清楚意图&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;列举注释的准则前，必须摆正观念。&lt;strong&gt;注释是一种必须的恶，如果编程语言足够有表达力，或你长于用语言表达自己的意图，那么就不需要注释。注释的恰当用法是弥补我们用代码表达意图时遭遇的失败。&lt;/strong&gt;注释存在的时间越久，具体所描述的事实就越远。原因很简单，程序员不可能坚持维护注释。&lt;/p&gt;
&lt;p&gt;的确，程序员应该让注释保持可维护而精准，但最好能直接写清楚代码，保证无须编写注释。&lt;strong&gt;真实只在一处：代码&lt;/strong&gt;，只有代码能忠实告诉你它做的事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;注释无法挽救糟糕的代码&lt;/strong&gt;，与其为糟糕代码补充大量注释，不如花时间写出整洁有表达力的代码&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用代码代替注释&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;有些无法避免且合理存在的注释&lt;ul&gt;
&lt;li&gt;法律信息&lt;/li&gt;
&lt;li&gt;对函数名的补充&lt;/li&gt;
&lt;li&gt;对稍微反常规意图的解释，避免误解&lt;/li&gt;
&lt;li&gt;糟糕的代码来自外部库或外部API&lt;/li&gt;
&lt;li&gt;敏感代码的警告&lt;/li&gt;
&lt;li&gt;TODO、FIXME&lt;/li&gt;
&lt;li&gt;Javadoc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;下面则是一些很常见的糟糕注释，它们只是糟糕代码的借口&lt;ul&gt;
&lt;li&gt;只有自己看得懂的注释&lt;/li&gt;
&lt;li&gt;对函数名的复述&lt;/li&gt;
&lt;li&gt;误导性注释&lt;/li&gt;
&lt;li&gt;日志型注释，如Milestone记录&lt;/li&gt;
&lt;li&gt;废话&lt;/li&gt;
&lt;li&gt;位置标记，如&lt;code&gt;====================&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;代码署名&lt;/li&gt;
&lt;li&gt;&lt;em&gt;大多数&lt;/em&gt;注释掉的代码&lt;/li&gt;
&lt;li&gt;百科式的介绍&lt;/li&gt;
&lt;li&gt;私有代码的Javadoc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;格式&#34;&gt;&lt;a href=&#34;#格式&#34; class=&#34;headerlink&#34; title=&#34;格式&#34;&gt;&lt;/a&gt;格式&lt;/h2&gt;&lt;p&gt;格式即代码风格，可以利用lint这样的自动化工具完成，需要在团队内保持一致。&lt;/p&gt;
&lt;h3 id=&#34;垂直格式&#34;&gt;&lt;a href=&#34;#垂直格式&#34; class=&#34;headerlink&#34; title=&#34;垂直格式&#34;&gt;&lt;/a&gt;垂直格式&lt;/h3&gt;&lt;p&gt;在从上到下的组织上，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以向报纸一样，先大纲，再粗线条概述，再给出细节，越往下细节越多&lt;/li&gt;
&lt;li&gt;用&lt;strong&gt;空行&lt;/strong&gt;分隔概念&lt;/li&gt;
&lt;li&gt;靠近的代码行暗示了代码间的紧密关系&lt;/li&gt;
&lt;li&gt;应避免迫使读者在源文件和类之间跳来跳去&lt;ul&gt;
&lt;li&gt;变量声明应尽量靠近使用位置&lt;/li&gt;
&lt;li&gt;循环中的控制变量总在循环语句中声明&lt;/li&gt;
&lt;li&gt;类成员在类顶部声明&lt;/li&gt;
&lt;li&gt;如果某个函数调用了另一个，就应该把它们放一起&lt;/li&gt;
&lt;li&gt;概念相关的代码应该放在一起，如&lt;code&gt;getHour&lt;/code&gt;和&lt;code&gt;getMinute&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果可以，最好把被调用的函数放在执行调用的函数下面&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;横向格式&#34;&gt;&lt;a href=&#34;#横向格式&#34; class=&#34;headerlink&#34; title=&#34;横向格式&#34;&gt;&lt;/a&gt;横向格式&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;水平字符的上限，100或120&lt;/li&gt;
&lt;li&gt;使用&lt;strong&gt;空格&lt;/strong&gt;分隔概念&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不需要水平对齐&lt;/strong&gt;，以为从左到右的阅读顺序优先于从上到下&lt;/li&gt;
&lt;li&gt;学会用&lt;strong&gt;缩进&lt;/strong&gt;表现层级&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;对象和数据结构&#34;&gt;&lt;a href=&#34;#对象和数据结构&#34; class=&#34;headerlink&#34; title=&#34;对象和数据结构&#34;&gt;&lt;/a&gt;对象和数据结构&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;对象&lt;/strong&gt;把数据隐藏于抽象的后面，暴露操作数据的函数，&lt;strong&gt;数据结构&lt;/strong&gt;暴露数据，不提供有意义的函数。&lt;/li&gt;
&lt;li&gt;过程式代码难以添加新的数据结构，因为必须修改所有函数；面向对象代码难以添加新函数，因为必须修改所有类&lt;/li&gt;
&lt;li&gt;得墨忒尔律：类C的方法f只应该调用以下对象的方法：&lt;strong&gt;C、f创建的对象、作为参数传给f的对象、C的成员所持有的对象&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据结构&lt;/strong&gt;只简单地拥有公有变量，没有函数；而&lt;strong&gt;对象&lt;/strong&gt;则只拥有私有变量和函数。一半是对象一半是数据结构的混淆会增加添加新函数和数据结构的难度&lt;/li&gt;
&lt;li&gt;DTO（Data Transfer Objects，数据传输对象）就是只有公有变量，没有函数的类，Active Record就是DTO的一种&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;错误处理&#34;&gt;&lt;a href=&#34;#错误处理&#34; class=&#34;headerlink&#34; title=&#34;错误处理&#34;&gt;&lt;/a&gt;错误处理&lt;/h2&gt;&lt;p&gt;错误处理很重要，但要是它搞乱了代码逻辑，那就是错误的用法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;返回异常而不是错误码&lt;/li&gt;
&lt;li&gt;try-catch-finally语句块就像事务，可以帮你定义用户应该期待些什么&lt;/li&gt;
&lt;li&gt;在Java中，可控异常违反开闭原则带来的成本要高于收益&lt;/li&gt;
&lt;li&gt;打包第三方API，一方面降低了依赖的覆盖面，另一方面也有助于模拟第三方调用&lt;/li&gt;
&lt;li&gt;可以把抛出错误封装成特定的函数&lt;/li&gt;
&lt;li&gt;别返回和传递null值&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;边界&#34;&gt;&lt;a href=&#34;#边界&#34; class=&#34;headerlink&#34; title=&#34;边界&#34;&gt;&lt;/a&gt;边界&lt;/h2&gt;&lt;p&gt;边界即我们代码和第三方代码的连接处。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过编写测试来概览和理解第三方代码的形式叫做&lt;strong&gt;学习性测试（learning tests）&lt;/strong&gt;。它可以帮助我们快速试错和反馈，从而对第三方API快速上手。&lt;/li&gt;
&lt;li&gt;在第三方代码尚未就绪时，&lt;strong&gt;编写我们想要的接口&lt;/strong&gt;，可以使我们能保持代码在自己控制中，并在未来通过编写adapter的形式无痛迁移&lt;/li&gt;
&lt;li&gt;应尽量避免过多依赖第三方的特定信息，更多依靠你能控制的东西，好过依靠你控制不了的东西，免得日后受其控制&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;单元测试&#34;&gt;&lt;a href=&#34;#单元测试&#34; class=&#34;headerlink&#34; title=&#34;单元测试&#34;&gt;&lt;/a&gt;单元测试&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;TDD（Test-Driven Development）三定律&lt;ul&gt;
&lt;li&gt;在编写不能通过的单元测试前，不编写生产代码&lt;/li&gt;
&lt;li&gt;只编写刚好无法通过的单元测试，不能编译也算&lt;/li&gt;
&lt;li&gt;只编写刚好足已通过失败测试的生产代码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;测试代码和生产代码一样重要&lt;/strong&gt;。正是单元测试让你的代码可扩展、可维护、可复用&lt;/li&gt;
&lt;li&gt;整洁的测试代码一样要求&lt;strong&gt;可读性&lt;/strong&gt;。大多数测试代码可以总结为构造-操作-检验（Build-Operate-Check）模式。第一个环节构造测试数据，第二个环节操作数据，第三个环节验证是否得到期望的结果&lt;/li&gt;
&lt;li&gt;每个测试中的断言数量应该尽量少，且只测试一个概念&lt;/li&gt;
&lt;li&gt;FIRST原则&lt;ul&gt;
&lt;li&gt;Fast，测试应该能够快速运行&lt;/li&gt;
&lt;li&gt;Independent，测试间应该相互独立&lt;/li&gt;
&lt;li&gt;Repeatable，测试应该在任何环境下可重复通过&lt;/li&gt;
&lt;li&gt;Self-Validating，测试应该有布尔值输出&lt;/li&gt;
&lt;li&gt;Timely，测试应及时编写&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;类&#34;&gt;&lt;a href=&#34;#类&#34; class=&#34;headerlink&#34; title=&#34;类&#34;&gt;&lt;/a&gt;类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;类应该由一组成员开始，从静态到普通，从共有到私有。且很少会有公有成员。&lt;/li&gt;
&lt;li&gt;类应该短小，&lt;strong&gt;类的名称应该能描述其权责&lt;/strong&gt;。类名无法精确明明时，类大概就太长了。类名越含糊，类越有可能拥有过多权责。类名应该控制在25个字母内，且不应该包含连词。&lt;/li&gt;
&lt;li&gt;单一权责原则（Single Responsibility Principle，SRP）认为，类和模块应有且仅有&lt;strong&gt;一条加以修改的原因&lt;/strong&gt;。这个原则可以帮助创造更好的抽象。它也是OO设计中最重要的概念之一。&lt;/li&gt;
&lt;li&gt;内聚：类应该只有少量实体变量，且所有方法都应该操作其中一些。当类的每个变量都被每个方法使用时，我们认为该类具有最大的内聚性。当发现类逐渐丧失内聚性时，尽早拆分它！让它变成多个短小的类。这个拆分的过程也是权责的拆分过程。&lt;/li&gt;
&lt;li&gt;通过基类和子类，可以在不修改类的同时，保持类对新功能的开放。在理想系统中，我们通过扩展系统而非修改现有代码来添加新特性。可以通过抽象类和接口隔离细节修改带来的影响。&lt;/li&gt;
&lt;li&gt;降低类之间的连接耦合，可以采用依赖倒置原则（Dependency Inversion Principle，DIP），让类依赖于抽象（接口）而不是具体细节（自行构造类）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;系统&#34;&gt;&lt;a href=&#34;#系统&#34; class=&#34;headerlink&#34; title=&#34;系统&#34;&gt;&lt;/a&gt;系统&lt;/h2&gt;&lt;p&gt;&lt;em&gt;这一章的Java概念较多&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分开系统的构造和使用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖注入&lt;/strong&gt;是控制反转的一种思路，它将第二权责从对象中拿出来，转移到专门的对象中去，从而遵循&lt;strong&gt;单一权责原则&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;我们应该专注于今天的用户故事，并且&lt;strong&gt;持续适当切分&lt;/strong&gt;我们的关注面。书中举了Java AOP、AspectJ框架的例子&lt;/li&gt;
&lt;li&gt;实现时，使用&lt;em&gt;大致可工作的最简单方案&lt;/em&gt;。只要软件构架有效切分了关注面，就比较好做根本性改动&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;迭代&#34;&gt;&lt;a href=&#34;#迭代&#34; class=&#34;headerlink&#34; title=&#34;迭代&#34;&gt;&lt;/a&gt;迭代&lt;/h2&gt;&lt;p&gt;Kent Beck关于测试的4个原则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运行所有测试，全面测试并持续通过所有测试的系统，就是可测试的系统。测试也能减少重构时可能破坏代码的顾虑。&lt;/li&gt;
&lt;li&gt;不可重复，使用模板生成或继承等高级概念&lt;/li&gt;
&lt;li&gt;表达程序员的意图。代码应当清晰表达作者的意图。使用好名称、保持类和函数的短小，以及之前章节提到的各种方法&lt;/li&gt;
&lt;li&gt;尽可能减少类和方法的数目，避免前两条规范的矫枉过正&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;并发编程&#34;&gt;&lt;a href=&#34;#并发编程&#34; class=&#34;headerlink&#34; title=&#34;并发编程&#34;&gt;&lt;/a&gt;并发编程&lt;/h2&gt;&lt;p&gt;并发是一种解耦策略，帮助我们分解开&lt;strong&gt;做什么（目的）&lt;/strong&gt;和&lt;strong&gt;何时（时机）&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;并发&lt;strong&gt;有时&lt;/strong&gt;能改善性能，会在编写额外代码上带来额外开销&lt;/li&gt;
&lt;li&gt;正确的并发是复杂的&lt;/li&gt;
&lt;li&gt;并发会带来系统结构的变化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有些防御并发代码问题的原则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单一权责：分离并发代码和其他代码&lt;/li&gt;
&lt;li&gt;限制对可能共享的数据的访问&lt;/li&gt;
&lt;li&gt;线程应尽可能独立&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;并发执行模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;生产者-消费者模式：数据通过队列传递，队列本身是一种限定资源&lt;/li&gt;
&lt;li&gt;读者-作者模式&lt;/li&gt;
&lt;li&gt;宴席哲学家问题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还有一些需要注意的事情：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;警惕同步方法间的依赖&lt;/li&gt;
&lt;li&gt;尽可能减小sychronized区域&lt;/li&gt;
&lt;li&gt;尽早考虑程序关闭问题&lt;/li&gt;
&lt;li&gt;测试线程代码&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3个实例&#34;&gt;&lt;a href=&#34;#3个实例&#34; class=&#34;headerlink&#34; title=&#34;3个实例&#34;&gt;&lt;/a&gt;3个实例&lt;/h2&gt;&lt;p&gt;书中以三个实例的重构过程向我们表现了一些将之前思路应用于优化代码的方式。&lt;/p&gt;
&lt;h3 id=&#34;命令行参数解析：args&#34;&gt;&lt;a href=&#34;#命令行参数解析：args&#34; class=&#34;headerlink&#34; title=&#34;命令行参数解析：args&#34;&gt;&lt;/a&gt;命令行参数解析：args&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;编程是一种技术甚于科学的东西，要编写整洁代码，必须先写肮脏代码，然后再&lt;strong&gt;清理它&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在你的初稿，当代码糟糕透顶时甚至是前几稿中，很可能还是会存在烂摊子：成员多得吓人，奇怪命名的魔法字符串，一大堆的try-catch-finally代码。程序员们不都是蠢人，这堆糟糕透顶的代码其实是从最初看起来很合理但是&lt;strong&gt;扩展性差&lt;/strong&gt;的代码一步步演化来的。&lt;/p&gt;
&lt;p&gt;需要使用一些总结和抽象，来简明地表达你的目的。另外，在重构前，“我”（其实是作者）要不厌其烦地强调TDD的必要性，它能保证你重构的每一步，系统都可以工作。在重构过程中，放进拿出是常见的事，小步幅、保持测试通过，你可能会不断移动各种东西。&lt;/p&gt;
&lt;p&gt;优秀的代码设计，大都关乎&lt;strong&gt;分隔&lt;/strong&gt;——创建合适的空间防止不同种类的代码。对关注面的分隔让代码更易于理解和维护（减少理解所需要的大脑缓存）&lt;/p&gt;
&lt;h3 id=&#34;JUnit&#34;&gt;&lt;a href=&#34;#JUnit&#34; class=&#34;headerlink&#34; title=&#34;JUnit&#34;&gt;&lt;/a&gt;JUnit&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;不必要的编码前缀（&lt;code&gt;f_&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;未封装的条件判断&lt;/li&gt;
&lt;li&gt;建议使用肯定式代替否定式判断&lt;/li&gt;
&lt;li&gt;奇怪的不直观的函数名&lt;/li&gt;
&lt;li&gt;易造成理解困难的变量名&lt;/li&gt;
&lt;li&gt;拆分违反SRP原则的函数&lt;/li&gt;
&lt;li&gt;避免隐式时序耦合的函数，用hardcode的形式显示表现时序耦合&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;SerialDate重构&#34;&gt;&lt;a href=&#34;#SerialDate重构&#34; class=&#34;headerlink&#34; title=&#34;SerialDate重构&#34;&gt;&lt;/a&gt;SerialDate重构&lt;/h3&gt;&lt;p&gt;再强调一遍，&lt;strong&gt;重构前要有一个完整的验证可行性的测试&lt;/strong&gt;。然后开始重构：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;没有描述力的类名和术语名&lt;/li&gt;
&lt;li&gt;使用枚举代替常量类&lt;/li&gt;
&lt;li&gt;抽象类中不应知道实现细节&lt;/li&gt;
&lt;li&gt;基类不宜知道子类的情况&lt;/li&gt;
&lt;li&gt;多余的注释&lt;/li&gt;
&lt;li&gt;变量声明应该放在尽量靠近使用的地方&lt;/li&gt;
&lt;li&gt;如果有专业术语，就不要自己命名了&lt;/li&gt;
&lt;li&gt;不要写无用的模板代码&lt;/li&gt;
&lt;li&gt;如果函数对成员进行操作，它就不应该是静态的&lt;/li&gt;
&lt;li&gt;用&lt;strong&gt;解释临时变量&lt;/strong&gt;的方式，让大段的代码更为简化和有表达力&lt;/li&gt;
&lt;li&gt;消除魔术数&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;味道和启发&#34;&gt;&lt;a href=&#34;#味道和启发&#34; class=&#34;headerlink&#34; title=&#34;味道和启发&#34;&gt;&lt;/a&gt;味道和启发&lt;/h2&gt;&lt;p&gt;作者在这里对《重构：既有代码设计的改善》里提到的味道做了自己的一些扩充，也可以作为对上面章节的回顾。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;“味道”，即那些看起来不大对劲的代码&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;注释-1&#34;&gt;&lt;a href=&#34;#注释-1&#34; class=&#34;headerlink&#34; title=&#34;注释&#34;&gt;&lt;/a&gt;注释&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;不恰当的信息，如修改记录&lt;/li&gt;
&lt;li&gt;过时的注释&lt;/li&gt;
&lt;li&gt;多余的废话&lt;/li&gt;
&lt;li&gt;错误的有误导性的注释&lt;/li&gt;
&lt;li&gt;注释掉的代码&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;环境&#34;&gt;&lt;a href=&#34;#环境&#34; class=&#34;headerlink&#34; title=&#34;环境&#34;&gt;&lt;/a&gt;环境&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;多步才能完成的构建&lt;/li&gt;
&lt;li&gt;多步才能完成的测试&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;函数-1&#34;&gt;&lt;a href=&#34;#函数-1&#34; class=&#34;headerlink&#34; title=&#34;函数&#34;&gt;&lt;/a&gt;函数&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;过多的入参&lt;/li&gt;
&lt;li&gt;布尔类型参数&lt;/li&gt;
&lt;li&gt;从未被调用的函数&lt;/li&gt;
&lt;li&gt;用于返回的参数&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;一般性问题&#34;&gt;&lt;a href=&#34;#一般性问题&#34; class=&#34;headerlink&#34; title=&#34;一般性问题&#34;&gt;&lt;/a&gt;一般性问题&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;源文件中有多种语言&lt;/li&gt;
&lt;li&gt;明显违背字面意义的直觉&lt;/li&gt;
&lt;li&gt;不考虑边界情况&lt;/li&gt;
&lt;li&gt;忽视安全问题&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;重复&lt;/strong&gt;，这也是最常见的问题。每次看到重复代码都代表遗漏了抽象。有一些常见的设计模式可以帮助你。&lt;/li&gt;
&lt;li&gt;代码的抽象层级有问题，或混杂。抽象类用来容纳高层级概念，子类用来容纳低层级概念。不同层级概念放在不同容器中。&lt;/li&gt;
&lt;li&gt;基类依赖于子类。通常来说，基类对子类应该一无所知&lt;/li&gt;
&lt;li&gt;信息过多，违背SRP&lt;/li&gt;
&lt;li&gt;从未使用的代码&lt;/li&gt;
&lt;li&gt;不恰当的垂直分隔&lt;/li&gt;
&lt;li&gt;语素前后不一致&lt;/li&gt;
&lt;li&gt;基于巧合、预设假设的耦合。异或是两个没有直接目的之间的模块的耦合。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特性依恋&lt;/strong&gt;，类的方法只应对自身的成员和方法感兴趣，不应关注其他类的成员和方法&lt;/li&gt;
&lt;li&gt;使用boolean或枚举参数让一个函数表现多态。使用多个函数通常由于向单个函数传递代码来选择函数行为&lt;/li&gt;
&lt;li&gt;晦涩的意图，如魔术数、魔术字符串、过度简写的表达式&lt;/li&gt;
&lt;li&gt;位置错误的权责&lt;/li&gt;
&lt;li&gt;不恰当的静态方法，如完全不需要多态的函数&lt;/li&gt;
&lt;li&gt;使用自解释的变量名&lt;/li&gt;
&lt;li&gt;使用自解释的函数名&lt;/li&gt;
&lt;li&gt;理解算法&lt;/li&gt;
&lt;li&gt;把逻辑依赖（脑海中的限制&amp;#x2F;已知条件）改为物理依赖&lt;/li&gt;
&lt;li&gt;使用if&amp;#x2F;else、switch前想想有没有多态的实现方法&lt;/li&gt;
&lt;li&gt;遵循团队lint规则&lt;/li&gt;
&lt;li&gt;足够准确&lt;/li&gt;
&lt;li&gt;未封装的条件判断&lt;/li&gt;
&lt;li&gt;未封装的边界条件检测&lt;/li&gt;
&lt;li&gt;避免否定性条件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;函数应该只做一件事&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;函数应该只在一个抽象层级上&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;隐蔽的时序性耦合&lt;/li&gt;
&lt;li&gt;别随意，先好好思考再下手&lt;/li&gt;
&lt;li&gt;应该在较高层级放置可配置数据&lt;/li&gt;
&lt;li&gt;避免传递浏览，即遵守德墨忒尔律&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Java&#34;&gt;&lt;a href=&#34;#Java&#34; class=&#34;headerlink&#34; title=&#34;Java&#34;&gt;&lt;/a&gt;Java&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;使用通配符避免过长的导入清单&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt;.*&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;不要继承&lt;em&gt;常量&lt;/em&gt;，使用静态导入&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; EmployeeConstants.*&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;在可以的情况下，用枚举代替常量&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;名称&#34;&gt;&lt;a href=&#34;#名称&#34; class=&#34;headerlink&#34; title=&#34;名称&#34;&gt;&lt;/a&gt;名称&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;使用描述性名称&lt;/li&gt;
&lt;li&gt;名称应该与抽象层级相符&lt;/li&gt;
&lt;li&gt;使用标准化语素&lt;/li&gt;
&lt;li&gt;使用无歧义的名称&lt;/li&gt;
&lt;li&gt;在较大作用范围使用较长名称，较小作用范围&lt;em&gt;可以&lt;/em&gt;使用较短名称&lt;/li&gt;
&lt;li&gt;名称应该明确说明有副作用存在&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;测试&#34;&gt;&lt;a href=&#34;#测试&#34; class=&#34;headerlink&#34; title=&#34;测试&#34;&gt;&lt;/a&gt;测试&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;要有足够的测试&lt;/li&gt;
&lt;li&gt;使用覆盖率工具&lt;/li&gt;
&lt;li&gt;别放过小测试&lt;/li&gt;
&lt;li&gt;被忽略的测试是对不确定事物的疑问&lt;/li&gt;
&lt;li&gt;测试边界条件&lt;/li&gt;
&lt;li&gt;测试失败的模式（pattern）会有启发性&lt;/li&gt;
&lt;li&gt;测试覆盖率的模式会有启发性&lt;/li&gt;
&lt;li&gt;测试应该快速&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;并发编程示例&#34;&gt;&lt;a href=&#34;#并发编程示例&#34; class=&#34;headerlink&#34; title=&#34;并发编程示例&#34;&gt;&lt;/a&gt;并发编程示例&lt;/h2&gt;&lt;h3 id=&#34;客户端-x2F-服务端&#34;&gt;&lt;a href=&#34;#客户端-x2F-服务端&#34; class=&#34;headerlink&#34; title=&#34;客户端&amp;#x2F;服务端&#34;&gt;&lt;/a&gt;客户端&amp;#x2F;服务端&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;如果吞吐量与I&amp;#x2F;O有关，则并发编程可以提升运行效率&lt;/li&gt;
&lt;li&gt;保持并发系统整洁，把线程管理隔离到一个位置&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;可能的执行路径&#34;&gt;&lt;a href=&#34;#可能的执行路径&#34; class=&#34;headerlink&#34; title=&#34;可能的执行路径&#34;&gt;&lt;/a&gt;可能的执行路径&lt;/h3&gt;&lt;p&gt;深入到字节码和汇编语句的执行上，有些并非线程安全的操作中，不同的执行路径会带来不同结果。&lt;/p&gt;
&lt;h3 id=&#34;了解类库&#34;&gt;&lt;a href=&#34;#了解类库&#34; class=&#34;headerlink&#34; title=&#34;了解类库&#34;&gt;&lt;/a&gt;了解类库&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Executor框架&lt;/li&gt;
&lt;li&gt;非锁定方案：AtomicBoolean，AtomicInteger和AtomicReference&lt;/li&gt;
&lt;li&gt;数据库连接、java.util中的容器、Servlet天生不是线程安全的&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;提升吞吐量&#34;&gt;&lt;a href=&#34;#提升吞吐量&#34; class=&#34;headerlink&#34; title=&#34;提升吞吐量&#34;&gt;&lt;/a&gt;提升吞吐量&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;synchronized代码块最好能限制在小范围内&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;死锁&#34;&gt;&lt;a href=&#34;#死锁&#34; class=&#34;headerlink&#34; title=&#34;死锁&#34;&gt;&lt;/a&gt;死锁&lt;/h3&gt;&lt;p&gt;死锁需要满足4个条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;互斥&lt;/strong&gt;，即资源数量有限，或无法在同一时间为多个线程公用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;上锁及等待&lt;/strong&gt;，从线程获取资源到完成工作前，不会释放这个资源&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;无抢先机制&lt;/strong&gt;，线程无法从其他线程处夺取资源&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;循环等待&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;相反地，有4种避免死锁的方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;不互斥&lt;/strong&gt;，使用允许同时使用的资源，或增加资源数目&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不上锁及等待&lt;/strong&gt;，如果有等待情况就释放所有资源从新来过&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;满足抢先机制&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不做循环等待&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;测试多线程代码&#34;&gt;&lt;a href=&#34;#测试多线程代码&#34; class=&#34;headerlink&#34; title=&#34;测试多线程代码&#34;&gt;&lt;/a&gt;测试多线程代码&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;复现问题可能很难，可以借助工具（如ConTest）帮助&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;–END–&lt;/em&gt;&lt;/p&gt;
</content>
        <category term="编程" />
        <category term="重构" />
        <category term="代码" />
        <category term="代码风格" />
        <updated>2019-12-02T15:08:32.000Z</updated>
    </entry>
    <entry>
        <id>http://shenlvmeng.github.com/blog/2018/05/01/sicp-note/</id>
        <title>SICP大纲</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2018/05/01/sicp-note/"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;本文是《计算机程序的构造和解释》的笔记&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;序&#34;&gt;&lt;a href=&#34;#序&#34; class=&#34;headerlink&#34; title=&#34;序&#34;&gt;&lt;/a&gt;序&lt;/h2&gt;&lt;p&gt;序中其实也包含了很多睿智的观点，值得细细体会。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“每一个计算机程序都是现实中的或者精神中的某个过程的一个模型”&lt;/li&gt;
&lt;li&gt;“我们很少能通过自己的程序将这种过程模拟到永远令人满意的程度”&lt;/li&gt;
&lt;li&gt;“不幸的是，随着程序变得更大更复杂（实际上它们几乎总是如此），这种描述本身的适宜性，一致性和正确性也都变得非常值得怀疑了”&lt;/li&gt;
&lt;li&gt;“如何利用一些已经证明和有价值的组织技术，将这些结构组合成更大的结构，这些都是至关重要的”&lt;/li&gt;
&lt;li&gt;“将我们的Lisp程序变换到‘机器’程序的过程本身也是抽象模型，是通过程序设计做出来的。研究和构造它们，能使人更加深刻地理解与任何模型的程序设计有关的程序组织问题”&lt;/li&gt;
&lt;li&gt;“计算机永远都不够大也不够快。硬件技术的每一次突破都带来了更大规模的程序设计事业，新的组织原理，以及更加丰富的抽象模型。每个读者都应该反复问自己‘到哪里才是头儿，到哪里才是头儿’——但是不要问的过于频繁，以免忽略了程序设计的乐趣，使自己陷入一种喜忧参半的呆滞状态中”&lt;/li&gt;
&lt;li&gt;“Pascal是为了建造金字塔——壮丽辉煌，令人震撼，是由各就其位的沉重巨石筑起的静态结构，而Lisp则是为了构造有机体——同样壮丽辉煌并令人震撼，由各就其位但却永不静止的无数简单的有机体片段构成的动态结构”&lt;/li&gt;
&lt;li&gt;“Lisp程序大大抬高了函数库的地位，使其可用性超越了催生它们的那些具体应用”&lt;/li&gt;
&lt;li&gt;“采用100个函数在一种数据结构上操作，远远优于用10个函数在10个数据结构上操作。作为这些情况的必然后果，金字塔矗立在那里千年不变，而有机体则必须演化，否则会死亡”&lt;/li&gt;
&lt;li&gt;“在任何非常大的程序设计工作中，一条有用的组织原则就是通过发明新语言，去控制和隔离作业模块之间的信息流动”&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;过程抽象&#34;&gt;&lt;a href=&#34;#过程抽象&#34; class=&#34;headerlink&#34; title=&#34;过程抽象&#34;&gt;&lt;/a&gt;过程抽象&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;应用序和正则序&lt;/li&gt;
&lt;li&gt;递归和迭代在展开式上的区分，以及尾递归&lt;/li&gt;
&lt;li&gt;过程（函数）作为入参、返回值&lt;/li&gt;
&lt;li&gt;匿名函数和高阶函数&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;数据抽象&#34;&gt;&lt;a href=&#34;#数据抽象&#34; class=&#34;headerlink&#34; title=&#34;数据抽象&#34;&gt;&lt;/a&gt;数据抽象&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;构造函数和方法函数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cons&lt;/code&gt;和&lt;code&gt;car&lt;/code&gt;、&lt;code&gt;cdr&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;序对和list（层次化数据）&lt;/li&gt;
&lt;li&gt;表操作和表映射&lt;/li&gt;
&lt;li&gt;序列化操作&lt;/li&gt;
&lt;li&gt;符号数据（类似字符串）&lt;/li&gt;
&lt;li&gt;数据的多种表示（类型）与通用操作&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;模块化、对象和状态&#34;&gt;&lt;a href=&#34;#模块化、对象和状态&#34; class=&#34;headerlink&#34; title=&#34;模块化、对象和状态&#34;&gt;&lt;/a&gt;模块化、对象和状态&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;面向对象和面向流&lt;/li&gt;
&lt;li&gt;从时间角度理解赋值和局部状态&lt;/li&gt;
&lt;li&gt;赋值的利与弊&lt;/li&gt;
&lt;li&gt;赋值带来的环境模型解释（作用域、作用域链）&lt;ul&gt;
&lt;li&gt;局部状态&lt;/li&gt;
&lt;li&gt;作用域模型的解释&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;变动的表&lt;ul&gt;
&lt;li&gt;区分共享和相等（相同的指针、相同的值）&lt;/li&gt;
&lt;li&gt;队列与键值对&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;描述约束系统&lt;/li&gt;
&lt;li&gt;并发（交错进行的读写操作）&lt;ul&gt;
&lt;li&gt;串行化和串行化组&lt;/li&gt;
&lt;li&gt;mutex(mutual exclusion)和实现&lt;/li&gt;
&lt;li&gt;死锁（多共享资源）&lt;ul&gt;
&lt;li&gt;按顺序获取资源列表&lt;/li&gt;
&lt;li&gt;死锁恢复&lt;/li&gt;
&lt;li&gt;屏障同步&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;流&lt;ul&gt;
&lt;li&gt;延时求值的表序列&lt;/li&gt;
&lt;li&gt;延时求值的原理&lt;/li&gt;
&lt;li&gt;无穷流的构造&lt;/li&gt;
&lt;li&gt;流操作和组合&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;元语言设计&#34;&gt;&lt;a href=&#34;#元语言设计&#34; class=&#34;headerlink&#34; title=&#34;元语言设计&#34;&gt;&lt;/a&gt;元语言设计&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;求值器（解释器）的工作与意义&lt;ul&gt;
&lt;li&gt;在基本过程上提供组合与抽象构建一个语言&lt;ul&gt;
&lt;li&gt;表达式的嵌套&lt;/li&gt;
&lt;li&gt;变量维护&lt;/li&gt;
&lt;li&gt;过程复合&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;求值器内核&lt;ul&gt;
&lt;li&gt;eval 过程体解释&lt;/li&gt;
&lt;li&gt;apply 过程求值解释&lt;/li&gt;
&lt;li&gt;表达式规范化和实现 &amp;#x2F; 派生表达式&lt;/li&gt;
&lt;li&gt;环境模型的数据结构&lt;/li&gt;
&lt;li&gt;求值器程序初始化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数据即程序&lt;ul&gt;
&lt;li&gt;图灵机和停机问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内部定义&lt;ul&gt;
&lt;li&gt;内部定义是否应该具有时序&lt;/li&gt;
&lt;li&gt;Y结合子与lambda演算&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;语法分析与执行分离&lt;/li&gt;
&lt;li&gt;惰性求值&lt;ul&gt;
&lt;li&gt;thunk化，关联表达式和环境&lt;/li&gt;
&lt;li&gt;惰性的表&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非确定性求值（满足约束的所有可行解）&lt;ul&gt;
&lt;li&gt;amb和自动回溯&lt;/li&gt;
&lt;li&gt;amb实现，成功与失败继续过程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;逻辑语言设计&lt;ul&gt;
&lt;li&gt;类SQL语言基于amb的实现&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解释与编译&#34;&gt;&lt;a href=&#34;#解释与编译&#34; class=&#34;headerlink&#34; title=&#34;解释与编译&#34;&gt;&lt;/a&gt;解释与编译&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;机器描述&lt;ul&gt;
&lt;li&gt;基本指令与子程序（label）&lt;/li&gt;
&lt;li&gt;堆栈实现递归&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;基本指令的实现&lt;ul&gt;
&lt;li&gt;类汇编语言&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内存管理&lt;ul&gt;
&lt;li&gt;表与堆栈的实现&lt;/li&gt;
&lt;li&gt;garbage collection机制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;解释&lt;ul&gt;
&lt;li&gt;基础操作实现&lt;/li&gt;
&lt;li&gt;尾递归优化解释&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;编译&lt;ul&gt;
&lt;li&gt;与解释有何区别，各自优势&lt;/li&gt;
&lt;li&gt;env&amp;#x2F;argl&amp;#x2F;proc&amp;#x2F;val&amp;#x2F;continue寄存器&lt;/li&gt;
&lt;li&gt;编译器结构&lt;ul&gt;
&lt;li&gt;语法分派&lt;/li&gt;
&lt;li&gt;入参：target（存储表达式值的寄存器）与linkage（continue寄存器）&lt;/li&gt;
&lt;li&gt;指令序列的结构与构造，分析指令序列，&lt;code&gt;preserving&lt;/code&gt;机制避免无谓的堆栈操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;表达式的编译&lt;ul&gt;
&lt;li&gt;linkage的编译，检查&lt;code&gt;next&lt;/code&gt;或&lt;code&gt;return&lt;/code&gt;的情况&lt;/li&gt;
&lt;li&gt;简单、条件表达式、表达式序列的编译&lt;/li&gt;
&lt;li&gt;lambda表达式的编译&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;过程的编译&lt;ul&gt;
&lt;li&gt;入参的处理&lt;/li&gt;
&lt;li&gt;尾递归&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;指令序列的组合&lt;/li&gt;
&lt;li&gt;代码编译的实例&lt;/li&gt;
&lt;li&gt;优化变量查找&lt;ul&gt;
&lt;li&gt;词法地址&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;解释与编译&lt;ul&gt;
&lt;li&gt;解释：机器语言 -&amp;gt; 用户程序&lt;/li&gt;
&lt;li&gt;编译：用户程序 -&amp;gt; 机器语言&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后吐槽下，书是本好书，就是翻译的不太给力，在有些地方强行提高了理解难度。&lt;/p&gt;
</content>
        <category term="编程" />
        <category term="思想" />
        <category term="程序设计" />
        <updated>2018-05-01T09:18:04.000Z</updated>
    </entry>
    <entry>
        <id>http://shenlvmeng.github.com/blog/2017/07/10/hacker-and-artist/</id>
        <title>黑客与画家 —— 关于编程和创业</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2017/07/10/hacker-and-artist/"/>
        <content type="html">&lt;p&gt;《黑客与画家》是Paul Graham的博文集。出版于2006年。它从一个“黑客”的角度阐述了编程，互联网程序等时兴的概念。深刻新鲜而发人深省。其对工作、语言的认识别具特色，而在学校教育和贫富分化等方面的认识却略显偏颇。&lt;/p&gt;
&lt;p&gt;全书大致分为3部分&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1-4章解释黑客如何成长以及如何看待世界&lt;/li&gt;
&lt;li&gt;5-9章介绍创业、工作的方法论&lt;/li&gt;
&lt;li&gt;10-15章讨论编程语言的特点和使用方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面仅摘出些句子。个人评注已加粗。&lt;/p&gt;
&lt;h2 id=&#34;为什么书呆子不受欢迎&#34;&gt;&lt;a href=&#34;#为什么书呆子不受欢迎&#34; class=&#34;headerlink&#34; title=&#34;为什么书呆子不受欢迎&#34;&gt;&lt;/a&gt;为什么书呆子不受欢迎&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在人产生良知前，折磨是种娱乐。&lt;/li&gt;
&lt;li&gt;学校的真正目的是把儿童都关在一个地方，以便大人们白天可以腾出手来把事情做完（&lt;strong&gt;哈哈哈&lt;/strong&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;黑客与画家&#34;&gt;&lt;a href=&#34;#黑客与画家&#34; class=&#34;headerlink&#34; title=&#34;黑客与画家&#34;&gt;&lt;/a&gt;黑客与画家&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;编程语言是用来帮助思考程序的，而不是用来表达你已经想好的程序&lt;/li&gt;
&lt;li&gt;大多数黑客不是通过大学课程学会编程的，他们从实践中学习，13岁时就已经自己动手写程序了。&lt;/li&gt;
&lt;li&gt;debug对我来说属于轻松的工作&lt;/li&gt;
&lt;li&gt;软件的部分功能就是解释自身，软件的使用方式最好能符合用户的直觉，源代码应该可以自己解释自己&lt;/li&gt;
&lt;li&gt;程序是写出来给人看的，附带能在机器上运行&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;不能说的话&#34;&gt;&lt;a href=&#34;#不能说的话&#34; class=&#34;headerlink&#34; title=&#34;不能说的话&#34;&gt;&lt;/a&gt;不能说的话&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;（流行）第一批的接收者总是带有很强的抱负心，他们有自觉的精英意识，想把自己与普通人区分开来&lt;/li&gt;
&lt;li&gt;流行趋势确立以后，第二接收者就加入进来了，他们接受流行，不是因为想要与众不同，而是害怕与众不同&lt;/li&gt;
&lt;li&gt;与笨蛋辩论，你也会变成笨蛋&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;良好的坏习惯&#34;&gt;&lt;a href=&#34;#良好的坏习惯&#34; class=&#34;headerlink&#34; title=&#34;良好的坏习惯&#34;&gt;&lt;/a&gt;良好的坏习惯&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在我看来，一个人们拥有言论自由和行动自由的社会，往往最有可能采纳最优方案（&lt;strong&gt;真的么？&lt;/strong&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;另一条路&#34;&gt;&lt;a href=&#34;#另一条路&#34; class=&#34;headerlink&#34; title=&#34;另一条路&#34;&gt;&lt;/a&gt;另一条路&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;（互联网程序）不需要为新版本付出额外的费用，或者做额外的准备，甚至可能你都不知道软件已经升级了&lt;/li&gt;
&lt;li&gt;互联网软件则完全不同，修改起来很方便。软件的发布过程可以分解成一系列的渐进式修改（&lt;strong&gt;快步小跑&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;软件应该做到用户认为它可以做到的事情。但是，你不知道用户到底怎么想&lt;/li&gt;
&lt;li&gt;没有盗版是一种“优势”，但也是一个问题。一定数量的盗版对软件公司时有好处的。因为不管你的软件定价多少，有些用户永远不会购买&lt;/li&gt;
&lt;li&gt;要求用户做得越多，你担的风险就越大&lt;/li&gt;
&lt;li&gt;管理企业其实很简单，只要记住两点就可以了：做出用户喜欢的产品，保证开支小于收入&lt;/li&gt;
&lt;li&gt;从制造简洁的产品开始着手，首先要保证你自己愿意使用。然后，迅速作出1.0版，并不断加以改进&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;无论如何，你都要使用自己的软件&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;如何创造财富&#34;&gt;&lt;a href=&#34;#如何创造财富&#34; class=&#34;headerlink&#34; title=&#34;如何创造财富&#34;&gt;&lt;/a&gt;如何创造财富&lt;/h2&gt;&lt;div class=&#34;tip&#34;&gt;注意：标题不等于“如何致富”&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;从经济学观点看，你可以把创业想象成一个压缩过程&lt;/li&gt;
&lt;li&gt;如果你想赚100万美元，就不得不忍受相当于100万美元的痛苦。创业公司将你所有的压力压缩到三四年&lt;/li&gt;
&lt;li&gt;通过创造有价值的东西而致富，优势不仅在于它合法，还在于它更简单，因为你只需要做出别人需要的东西就可以了&lt;/li&gt;
&lt;li&gt;金钱不是财富，而只是我们用来转移财富所有权的东西&lt;/li&gt;
&lt;li&gt;公司就是许多人聚在一起创造财富的地方，能够制造更多人们需要的东西&lt;/li&gt;
&lt;li&gt;人们需要的东西就是财富&lt;/li&gt;
&lt;li&gt;上班的日子不如上学的日子有趣，但是有人付钱给你，而不是你付钱给学校&lt;/li&gt;
&lt;li&gt;创造财富是大多数公司盈利的手段&lt;/li&gt;
&lt;li&gt;上班的日子为什么会差别这么大？不要搞糊涂了，你现在已经从顾客变成了仆人&lt;/li&gt;
&lt;li&gt;收入和风险是对称的，所以如果有巨大的获利可能，就必然存在巨大的失败可能。如果你有一个令你感到安全的工作，你是不会致富的&lt;/li&gt;
&lt;li&gt;创业的付出和回报虽然总体上是成比例的，但是在个体上是不成比例的&lt;/li&gt;
&lt;li&gt;只有在快速获得巨大利益的激励下，你才会去挑战那些困难的问题，否则你根本不愿意去碰它们&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;关注贫富分化&#34;&gt;&lt;a href=&#34;#关注贫富分化&#34; class=&#34;headerlink&#34; title=&#34;关注贫富分化&#34;&gt;&lt;/a&gt;关注贫富分化&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;进入社会以后，你不能总是靠父母养活，如果你需要什么东西，要么你自己做出来，要么做其他东西与需要的人交换金钱，再用金钱去买你想要的东西&lt;/li&gt;
&lt;li&gt;技术肯定加剧了有技术者与无技术者之间的生产效率差异&lt;/li&gt;
&lt;li&gt;技术在加大收入差距的同时，缩小了大部分的其他差距&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;防止垃圾邮件的一种方法&#34;&gt;&lt;a href=&#34;#防止垃圾邮件的一种方法&#34; class=&#34;headerlink&#34; title=&#34;防止垃圾邮件的一种方法&#34;&gt;&lt;/a&gt;防止垃圾邮件的一种方法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;我对贝叶斯方法寄予厚望，因为它的过滤能力可以随着垃圾邮件一起进化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;设计者的品味&#34;&gt;&lt;a href=&#34;#设计者的品味&#34; class=&#34;headerlink&#34; title=&#34;设计者的品味&#34;&gt;&lt;/a&gt;设计者的品味&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;他想要的学生不仅应该技术过硬，还应当能够使用技术做出优美的产品&lt;/li&gt;
&lt;li&gt;你需要的是咬牙向前冲刺的痛苦，而不是脚被钉子扎破的痛苦。解决难题的痛苦对设计师有好处，但是对付挑剔的客户的痛苦或者对付质量低劣的建材的痛苦就是另外一回事了&lt;/li&gt;
&lt;li&gt;在历史的任何时刻都有一些热点项目，一些团体在这些项目上做出伟大的成绩。如果你远离这些中心，几乎不可能单靠自己就取得伟大成果&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;编程语言解析&#34;&gt;&lt;a href=&#34;#编程语言解析&#34; class=&#34;headerlink&#34; title=&#34;编程语言解析&#34;&gt;&lt;/a&gt;编程语言解析&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;程序员的时间要比计算机的时间昂贵得多&lt;/li&gt;
&lt;li&gt;长期使用某种语言，你就会慢慢按照这种语言的思维模式进行思考&lt;/li&gt;
&lt;li&gt;有些人认为编程语言应该防止程序员干蠢事，另一些人则认为程序员应该可以用编程语言干一切他们想干的事（&lt;strong&gt;即静态类型语言和动态类型语言&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;事实上，有两种程度的面向对象编程：某些语言允许你以这种风格编程，另一些语言则强迫你一定要这样编程&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;一百年后的编程语言&#34;&gt;&lt;a href=&#34;#一百年后的编程语言&#34; class=&#34;headerlink&#34; title=&#34;一百年后的编程语言&#34;&gt;&lt;/a&gt;一百年后的编程语言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;当我说Java不会成功时，我的意思是它和Cobol一样，进化之路已经走到了尽头（&lt;strong&gt;哦？&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;一种语言的内核设计越小、越干净，它的生命力就越顽强&lt;/li&gt;
&lt;li&gt;（&lt;strong&gt;用足够灵活的语言，聪明的程序员能写多好，笨的程序员就能写多烂&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;一百年后的程序员最需要的编程语言就是可以让你毫不费力写出程序第一版的编程语言&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;拒绝平庸&#34;&gt;&lt;a href=&#34;#拒绝平庸&#34; class=&#34;headerlink&#34; title=&#34;拒绝平庸&#34;&gt;&lt;/a&gt;拒绝平庸&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Lisp很值得学习。你掌握它之后，会感动它给你带来的极大启发&lt;/li&gt;
&lt;li&gt;大概在1960年，Lisp语言引入了垃圾回收机制。……闭包是20世纪60年代Lisp语言引入的功能……宏也是60年代中期Lisp语言引入的，现在还是一片处女地（这里的“宏”为Lisp中的&lt;code&gt;defmacro&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;这里有一个评估竞争对手的妙招——关注他们的招聘职位&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;书呆子的复仇&#34;&gt;&lt;a href=&#34;#书呆子的复仇&#34; class=&#34;headerlink&#34; title=&#34;书呆子的复仇&#34;&gt;&lt;/a&gt;书呆子的复仇&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;符号（Symbol）实际上是一种指针，指向存储在散列表中的字符串&lt;/li&gt;
&lt;li&gt;列表是Lisp的基本数据结构&lt;/li&gt;
&lt;li&gt;让客户感到满意才是你的设计方向。只要赢得用户，其他的事情就会接踵而至&lt;/li&gt;
&lt;li&gt;JavaScript的写法比Lisp和Ruby稍微长一点，因为JavaScript依然区分语句和表达式&lt;/li&gt;
&lt;li&gt;所有这些语言都是图灵等价的&lt;/li&gt;
&lt;li&gt;“任何C或Fortran程序复杂到一定程度之后，都会包含一个临时开发的、只有一半功能的、不完全符合规格的、到处都是bug的、运行速度很慢的Common Lisp实现。”&lt;/li&gt;
&lt;li&gt;想解决一个困难的问题，有三条路：1）使用一种强大的语言，2）为这个难题写一个事实上的解释器，3）你自己变成这个难题的人肉编译器（&lt;strong&gt;翻译过来就是语言本身&amp;#x2F;设计模式&amp;#x2F;问题抽象&lt;/strong&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;梦寐以求的编程语言&#34;&gt;&lt;a href=&#34;#梦寐以求的编程语言&#34; class=&#34;headerlink&#34; title=&#34;梦寐以求的编程语言&#34;&gt;&lt;/a&gt;梦寐以求的编程语言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;优秀的函数库的重要性将超过语言本身&lt;/li&gt;
&lt;li&gt;就算委员会只有两个人，还是会妨碍“再设计”，典型例子就是软件内部的各个接口有不同的人负责。这时除非两个人都同意改变接口，否则接口就无法改变&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;设计与研究&#34;&gt;&lt;a href=&#34;#设计与研究&#34; class=&#34;headerlink&#34; title=&#34;设计与研究&#34;&gt;&lt;/a&gt;设计与研究&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;“用户需要的设计”≠“用户要求的设计”&lt;/li&gt;
&lt;li&gt;设计必须以人为本&lt;/li&gt;
&lt;li&gt;在软件领域，贴近用户的设计思想被归纳为“弱即是强”模式。&lt;/li&gt;
&lt;li&gt;一种功能有限但易于使用的软件可能对用户有更大吸引力&lt;/li&gt;
&lt;li&gt;先做出原型，在逐步加工做出成品，这种方式有利于鼓舞士气，因为它使得你随时都可以看到工作的成效&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="编程" />
        <category term="黑客与画家" />
        <category term="创业" />
        <updated>2017-07-10T13:21:02.000Z</updated>
    </entry>
</feed>
