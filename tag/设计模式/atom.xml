<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://shenlvmeng.github.com/blog</id>
    <title>Shenlvmeng&#39;s Blog • Posts by &#34;设计模式&#34; tag</title>
    <link href="http://shenlvmeng.github.com/blog" />
    <updated>2021-01-29T13:45:15.000Z</updated>
    <category term="总结" />
    <category term="制度" />
    <category term="道德" />
    <category term="文官" />
    <category term="万历" />
    <category term="明朝" />
    <category term="读书笔记" />
    <category term="展望" />
    <category term="2018" />
    <category term="2019" />
    <category term="flag" />
    <category term="2020" />
    <category term="2021" />
    <category term="2022" />
    <category term="2023" />
    <category term="面试" />
    <category term="前端" />
    <category term="FAQ" />
    <category term="HTML" />
    <category term="CSS" />
    <category term="style guide" />
    <category term="编程" />
    <category term="范式" />
    <category term="设计" />
    <category term="艺术" />
    <category term="质量" />
    <category term="async_hooks" />
    <category term="cls-hooked" />
    <category term="logId" />
    <category term="录音" />
    <category term="getUserMedia" />
    <category term="AudioContext" />
    <category term="PCM" />
    <category term="WAVE" />
    <category term="二叉搜索树" />
    <category term="算法" />
    <category term="回忆" />
    <category term="老朋友" />
    <category term="C" />
    <category term="Hash" />
    <category term="布隆过滤器" />
    <category term="字符串检索" />
    <category term="canvas" />
    <category term="流程图" />
    <category term="d3" />
    <category term="g6" />
    <category term="zrender" />
    <category term="processOn" />
    <category term="SDN" />
    <category term="cbench" />
    <category term="安装说明" />
    <category term="绘图" />
    <category term="动画" />
    <category term="攻略" />
    <category term="流水账" />
    <category term="成都" />
    <category term="重庆" />
    <category term="武汉" />
    <category term="重构" />
    <category term="代码" />
    <category term="代码风格" />
    <category term="数据可视化" />
    <category term="爬虫" />
    <category term="chrome" />
    <category term="crx" />
    <category term="扩展" />
    <category term="CORS" />
    <category term="跨域" />
    <category term="盒模型" />
    <category term="浮动" />
    <category term="Reactive Programming" />
    <category term="JavaScript" />
    <category term="Cycle.js" />
    <category term="Dart" />
    <category term="最佳实践" />
    <category term="引流" />
    <category term="universal-link" />
    <category term="app-link" />
    <category term="脚手架" />
    <category term="degit" />
    <category term="git" />
    <category term="设计模式" />
    <category term="类" />
    <category term="接口" />
    <category term="抽象类" />
    <category term="DOM" />
    <category term="Docker" />
    <category term="ONOS" />
    <category term="控制器" />
    <category term="虚拟化" />
    <category term="笔记" />
    <category term="UX" />
    <category term="UED" />
    <category term="准则" />
    <category term="Java" />
    <category term="Ruby" />
    <category term="反射" />
    <category term="编程范式" />
    <category term="鸭子类型" />
    <category term="管理" />
    <category term="效率" />
    <category term="知识工作者" />
    <category term="卓有成效" />
    <category term="Elm" />
    <category term="框架" />
    <category term="函数式编程" />
    <category term="虚网映射" />
    <category term="Javascript" />
    <category term="并发" />
    <category term="event loop" />
    <category term="覆盖率" />
    <category term="端到端测试" />
    <category term="istanbul" />
    <category term="istanbuljs" />
    <category term="JavaSript" />
    <category term="Express" />
    <category term="源码" />
    <category term="代码覆盖率" />
    <category term="istanbul-middleware" />
    <category term="代码插桩" />
    <category term="require钩子" />
    <category term="babel-plugin-istanbul" />
    <category term="css" />
    <category term="html5" />
    <category term="flex" />
    <category term="javascript" />
    <category term="roadmap" />
    <category term="闭包" />
    <category term="Haskell" />
    <category term="monad" />
    <category term="后端" />
    <category term="管理后台" />
    <category term="egg.js" />
    <category term="工作流" />
    <category term="pull request" />
    <category term="golang" />
    <category term="语言学习" />
    <category term="黑客与画家" />
    <category term="创业" />
    <category term="骑行" />
    <category term="海南" />
    <category term="图文" />
    <category term="reflow" />
    <category term="repaint" />
    <category term="命名法" />
    <category term="成功学" />
    <category term="自我建设" />
    <category term="HTTP" />
    <category term="HTTP/2" />
    <category term="SPDY" />
    <category term="QUIC" />
    <category term="HTTPS" />
    <category term="状态码" />
    <category term="网络攻击" />
    <category term="介绍" />
    <category term="图片渲染" />
    <category term="html2canvas" />
    <category term="dom-to-image" />
    <category term="electron" />
    <category term="indexedDB" />
    <category term="异步" />
    <category term="Generator" />
    <category term="thunk" />
    <category term="async" />
    <category term="函数表达式" />
    <category term="对象" />
    <category term="继承" />
    <category term="类型转换" />
    <category term="==" />
    <category term="类型判断" />
    <category term="猫" />
    <category term="杀手" />
    <category term="管理学" />
    <category term="领导力" />
    <category term="梯队" />
    <category term="移动端" />
    <category term="UI" />
    <category term="自适应" />
    <category term="rem" />
    <category term="Electron" />
    <category term="GUI" />
    <category term="gpx" />
    <category term="template" />
    <category term="Electron Builder" />
    <category term="PWA" />
    <category term="方法论" />
    <category term="夜话" />
    <category term="多线" />
    <category term="生活" />
    <category term="密码" />
    <category term="密钥" />
    <category term="技改" />
    <category term="Vue" />
    <category term="gulp" />
    <category term="瀑布流" />
    <category term="电影" />
    <category term="PHP" />
    <category term="参考" />
    <category term="思维" />
    <category term="学习能力" />
    <category term="右脑" />
    <category term="经济学" />
    <category term="宏观经济学" />
    <category term="术语" />
    <category term="GDP" />
    <category term="CPI" />
    <category term="储蓄" />
    <category term="投资" />
    <category term="金融市场" />
    <category term="股票" />
    <category term="债券" />
    <category term="美联储" />
    <category term="失业" />
    <category term="货币" />
    <category term="现值" />
    <category term="准备金" />
    <category term="货币中性" />
    <category term="通货膨胀" />
    <category term="汇率" />
    <category term="购买力" />
    <category term="净出口" />
    <category term="资产净流出" />
    <category term="总需求" />
    <category term="总供给" />
    <category term="流动性偏好" />
    <category term="乘数效应" />
    <category term="菲利普斯曲线" />
    <category term="微观经济学" />
    <category term="供求" />
    <category term="贸易" />
    <category term="市场" />
    <category term="税" />
    <category term="剩余" />
    <category term="外部性" />
    <category term="公共物品" />
    <category term="公共资源" />
    <category term="生产成本" />
    <category term="利润" />
    <category term="垄断" />
    <category term="价格歧视" />
    <category term="寡头" />
    <category term="垄断竞争" />
    <category term="生产要素市场" />
    <category term="贫困" />
    <category term="消费者选择理论" />
    <category term="不对称信息" />
    <category term="政治经济学" />
    <category term="行为经济学" />
    <category term="VSCode" />
    <category term="编辑器" />
    <category term="IDE" />
    <category term="hybrid" />
    <category term="JSBridge" />
    <category term="Web Worker" />
    <category term="Service Worker" />
    <category term="习惯" />
    <category term="lint" />
    <category term="editorconfig" />
    <category term="commit message" />
    <category term="量子物理" />
    <category term="史话" />
    <category term="埋点" />
    <category term="raven.js" />
    <category term="前端监控" />
    <category term="文本编辑器" />
    <category term="quill" />
    <category term="结构化数据" />
    <category term="React" />
    <category term="Hooks" />
    <category term="函数组件" />
    <category term="复用" />
    <category term="状态管理" />
    <category term="redux" />
    <category term="MobX" />
    <category term="代码质量" />
    <category term="重来" />
    <category term="requestAnimationFrame" />
    <category term="TypeScript" />
    <category term="路书" />
    <category term="gpx解析" />
    <category term="EXIF" />
    <category term="人类" />
    <category term="生存" />
    <category term="基因" />
    <category term="响应式编程" />
    <category term="RxJS" />
    <category term="成长" />
    <category term="业务" />
    <category term="思想" />
    <category term="程序设计" />
    <category term="心理学" />
    <category term="自我" />
    <category term="社会思维" />
    <category term="社会影响" />
    <category term="文化" />
    <category term="性别" />
    <category term="从众" />
    <category term="说服" />
    <category term="临床诊断" />
    <category term="陪审团" />
    <category term="司法" />
    <category term="物质主义" />
    <category term="健康" />
    <category term="社会关系" />
    <category term="偏见" />
    <category term="攻击行为" />
    <category term="亲密关系" />
    <category term="友谊" />
    <category term="爱情" />
    <category term="利他" />
    <category term="冲突" />
    <category term="和解" />
    <category term="软技能" />
    <category term="理财" />
    <category term="健身" />
    <category term="自我营销" />
    <category term="学习" />
    <category term="商业模式" />
    <category term="产品" />
    <category term="校园网" />
    <category term="互联网" />
    <category term="技术" />
    <category term="web开发" />
    <category term="哲思" />
    <category term="择偶观" />
    <category term="validator" />
    <category term="大文件" />
    <category term="visibilityChange" />
    <category term="IntersectionObserver" />
    <category term="图种" />
    <category term="draggable" />
    <category term="webpack" />
    <category term="z-index" />
    <category term="git submodule" />
    <category term="object-fit" />
    <category term="object-position" />
    <category term="BroadcastChannel" />
    <category term="extract-text-webpack-plugin" />
    <category term="lottie" />
    <category term="backface-visibility" />
    <category term="egret" />
    <category term="mock" />
    <category term="SSO" />
    <category term="autoprefixer" />
    <category term="polyfill" />
    <category term="Android" />
    <category term="ffmpeg" />
    <category term="React Hooks" />
    <category term="rollup" />
    <category term="CDN" />
    <category term="DNS" />
    <category term="CNAME" />
    <category term="架构" />
    <category term="组件" />
    <category term="ssh" />
    <category term="fis-receiver" />
    <category term="tmux" />
    <category term="origami" />
    <category term="promise" />
    <category term="encodeURI" />
    <category term="encodeURIComponent" />
    <category term="axios" />
    <category term="charles" />
    <category term="黑色幽默" />
    <category term="朋友" />
    <category term="梦" />
    <category term="濒死" />
    <category term="江南" />
    <category term="苏州" />
    <category term="无锡" />
    <category term="宜兴" />
    <category term="湖州" />
    <category term="南浔" />
    <category term="游记" />
    <category term="随笔" />
    <category term="群众" />
    <category term="理论" />
    <category term="实效" />
    <category term="测试" />
    <category term="长沙" />
    <category term="杭州" />
    <category term="湖南" />
    <category term="核酸" />
    <category term="美食" />
    <category term="云南" />
    <category term="丽江" />
    <category term="大理" />
    <category term="青岛" />
    <category term="济南" />
    <category term="山东" />
    <category term="西北" />
    <category term="银川" />
    <category term="西宁" />
    <category term="青海湖" />
    <category term="西海镇" />
    <category term="茶卡盐湖" />
    <category term="厦门" />
    <category term="感受" />
    <category term="C语言" />
    <category term="树" />
    <category term="主干开发" />
    <category term="GitFlow" />
    <category term="GithubFlow" />
    <category term="typescript" />
    <category term="类型系统" />
    <category term="webrtc" />
    <category term="RTMP" />
    <category term="首屏时间" />
    <category term="性能优化" />
    <category term="公司" />
    <category term="个人发展" />
    <category term="战略" />
    <category term="晋升" />
    <category term="哲学" />
    <category term="幸福" />
    <category term="人生" />
    <category term="叔本华" />
    <category term="Unix" />
    <category term="Rollup" />
    <category term="mouseout" />
    <category term="mouseleave" />
    <category term="lint-staged" />
    <category term="吸顶" />
    <category term="图片组件" />
    <category term="形式系统" />
    <category term="不完全性" />
    <category term="隐喻" />
    <category term="哥德尔" />
    <category term="巴赫" />
    <category term="埃舍尔" />
    <category term="济州" />
    <category term="西归浦" />
    <category term="城山" />
    <category term="咸德" />
    <category term="人工智能" />
    <category term="心智" />
    <category term="自指" />
    <category term="图灵" />
    <entry>
        <id>http://shenlvmeng.github.com/blog/2021/01/29/zen-of-unix/</id>
        <title>Unix编程艺术集萃</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2021/01/29/zen-of-unix/"/>
        <content type="html">&lt;p&gt;这本书从Unix的设计理念等各方面讲起，内容充实有趣，尽管介绍细节的部分对于不太了解Unix的人呢来讲有些生涩，但在道的介绍上有不少可取之处。由于某人的出现，生活中多了新的追求，比想象中多用了一些时间看完了它。下面摘取一些其中精华的观点，力图尽量还原书中的本意。&lt;/p&gt;
&lt;h2 id=&#34;Context&#34;&gt;&lt;a href=&#34;#Context&#34; class=&#34;headerlink&#34; title=&#34;Context&#34;&gt;&lt;/a&gt;Context&lt;/h2&gt;&lt;h3 id=&#34;哲学&#34;&gt;&lt;a href=&#34;#哲学&#34; class=&#34;headerlink&#34; title=&#34;哲学&#34;&gt;&lt;/a&gt;哲学&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;每过18个月，就有一半的知识会过时&lt;/li&gt;
&lt;li&gt;X致力提供一套“机制，而不是策略”&lt;/li&gt;
&lt;li&gt;提供机制而不是方针的哲学让Unix长期保鲜&lt;/li&gt;
&lt;li&gt;Unix传统将重点放在尽力使各程序接口相对小巧、简洁、正交&lt;/li&gt;
&lt;li&gt;Unix管道发明人Doug McIlroy曾说过：&lt;ul&gt;
&lt;li&gt;让每个程序就做好一件事&lt;/li&gt;
&lt;li&gt;假定每个程序的输出都会成为另个程序的输入&lt;/li&gt;
&lt;li&gt;尽早将设计和编译的软件投入使用&lt;/li&gt;
&lt;li&gt;优先使用工具而不是拙劣的帮助来减轻编程任务的负担&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Rob Pike曾从不同的角度表述了Unix的哲学&lt;ul&gt;
&lt;li&gt;你无法断定程序会在什么地方好费时间，所以别急于找地方改代码，除非你已经证实那儿就是瓶颈所在&lt;/li&gt;
&lt;li&gt;没对代码估量最耗时的部分前，别去优化速度&lt;/li&gt;
&lt;li&gt;花哨的算法在n很小的时候通常很慢，而n一般很小&lt;/li&gt;
&lt;li&gt;花哨的算法比简单算法更容易出bug、更难实现&lt;/li&gt;
&lt;li&gt;编程的核心是数据结构，而不是算法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;书中对Unix的哲学，总结为下面这些点&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;模块原则&lt;/strong&gt;，使用简洁的接口拼接简单的部件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;清晰原则&lt;/strong&gt;，清晰胜于机巧，程序是写给人看的&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;组合原则&lt;/strong&gt;，设计时要考虑拼接组合&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分离原则&lt;/strong&gt;，策略和机制分离，接口和引擎分离&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;简洁原则&lt;/strong&gt;，设计要简洁，复杂度能低则低&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;吝啬原则&lt;/strong&gt;，除非没有办法，不要写大程序&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;透明性原则&lt;/strong&gt;，设计要有&lt;strong&gt;可见性&lt;/strong&gt;（如输入输出、打点上报），便于审查和调试&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;健壮原则&lt;/strong&gt;，健壮源于透明和简洁&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;表示原则&lt;/strong&gt;，把知识转移到数据中，保证逻辑的简朴而健壮&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;通俗原则&lt;/strong&gt;，即最少惊奇原则，接口设计避免标新立异，缓和学习曲线&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缄默原则&lt;/strong&gt;，设计良好的程序将用户的注意力视为有限的宝贵资源&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;补救原则&lt;/strong&gt;，出现异常时，马上退出并给出错误信息&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;经济原则&lt;/strong&gt;，宁花机器1分，不花程序员1秒&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;生成原则&lt;/strong&gt;，避免手工hack，编写程序去生成程序&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优化原则&lt;/strong&gt;，过早优化会妨碍全局优化，先制作原型，再精雕细琢；先可用，再优化&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多样原则&lt;/strong&gt;，不相信“不二法门”的断言&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;扩展原则&lt;/strong&gt;，未来总比预想来得要快&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unix哲学一言以蔽之，即KISS（Keep It Simple, Stupid!）&lt;/li&gt;
&lt;li&gt;善用他人写好的工具，尽可能将一切自动化&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;历史&#34;&gt;&lt;a href=&#34;#历史&#34; class=&#34;headerlink&#34; title=&#34;历史&#34;&gt;&lt;/a&gt;历史&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;计算机不应仅被视为一种逻辑设备而更应视为社群的立足点&lt;/li&gt;
&lt;li&gt;1985年IEEE支持的POSIX标准表述了BSD和SVR3（System V Release3）调用的交集&lt;/li&gt;
&lt;li&gt;1987年初，GNU C编译器第一版问世&lt;/li&gt;
&lt;li&gt;1995年，Linux找到自己的杀手级应用——开源的web服务器Apache&lt;/li&gt;
&lt;li&gt;过度依赖任何一种技术或者商业模式都是错误的&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Unix哲学和其他哲学的对比&#34;&gt;&lt;a href=&#34;#Unix哲学和其他哲学的对比&#34; class=&#34;headerlink&#34; title=&#34;Unix哲学和其他哲学的对比&#34;&gt;&lt;/a&gt;Unix哲学和其他哲学的对比&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;统一性理念：一切皆文件 &amp;amp; 管道概念&lt;/li&gt;
&lt;li&gt;多任务能力：抢先式多任务&lt;/li&gt;
&lt;li&gt;协作进程：低价的进程生成和简便的进程间通讯&lt;/li&gt;
&lt;li&gt;内部边界：程序员最清楚一切&lt;/li&gt;
&lt;li&gt;文件属性和记录结构：没有文件属性&lt;/li&gt;
&lt;li&gt;减少使用不透明的二进制文件格式&lt;/li&gt;
&lt;li&gt;首选CLI命令行界面&lt;/li&gt;
&lt;li&gt;Unix是程序员写给程序员的&lt;/li&gt;
&lt;li&gt;开发的门槛：轻松编程&lt;/li&gt;
&lt;li&gt;操作系统的比较&lt;ul&gt;
&lt;li&gt;MacOS：MacOS有一个自己的界面方针，非常详细地说明了应用程序GUI的表现形式和行为模式&lt;/li&gt;
&lt;li&gt;Windows NT：有注册表蠕变现象，不过支持了Cygwin，实现了Unix API的兼容&lt;/li&gt;
&lt;li&gt;MVS：一切皆批处理&lt;/li&gt;
&lt;li&gt;Linux：贴近终端用户的愿望使得Linux开发者比专有Unix更注重系统安装的平稳性和软件发布问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Design&#34;&gt;&lt;a href=&#34;#Design&#34; class=&#34;headerlink&#34; title=&#34;Design&#34;&gt;&lt;/a&gt;Design&lt;/h2&gt;&lt;h3 id=&#34;模块性&#34;&gt;&lt;a href=&#34;#模块性&#34; class=&#34;headerlink&#34; title=&#34;模块性&#34;&gt;&lt;/a&gt;模块性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;展开来说就是，要编写复杂软件又不至于一败涂地的唯一方法就是用定义清晰的接口把若干简单模块组合起来&lt;/li&gt;
&lt;li&gt;Unix程序员骨子里的传统是：更加笃信重视模块化、更注重正交性和紧凑性等问题&lt;/li&gt;
&lt;li&gt;封装良好的模块不会过多向外披露自身的细节&lt;/li&gt;
&lt;li&gt;缺陷个数随着模块的代码行数会先减小，随后按代码行数的平方上升&lt;/li&gt;
&lt;li&gt;紧凑性和正交性&lt;ul&gt;
&lt;li&gt;人类短期记忆能够容纳的不连续信息数就是7，加2或减2&lt;/li&gt;
&lt;li&gt;紧凑性：有经验的用户通常不需要操作手册，让人乐于使用，不会在想法和工作间格格不入；紧凑不等于薄弱；一个功能子集，能够满足专家用户80%以上的一般需求&lt;/li&gt;
&lt;li&gt;正交性：任何操作均无副作用，改变每个属性的方法有且仅有一个；重构代码就是改变代码的结构和组织，而不改变其外在行为&lt;/li&gt;
&lt;li&gt;任何一个知识点在系统内都应当有一个&lt;strong&gt;唯一&lt;/strong&gt;、明确、权威的表述（Single Point of Truth, SPOT）&lt;/li&gt;
&lt;li&gt;提高紧凑性的精妙但强大的办法就是围绕“解决一个定义明确的问题”的强核心算法组织设计，避免臆断和捏造。形式化往往能极其明晰地阐述一项任务，与形式法相对的是&lt;strong&gt;试探法&lt;/strong&gt;——凭经验法则得到的解决方案，这种思路的问题是回增生出大量特例和边界情况&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;“限制不仅提倡了经济性，而且某种程度上提倡了设计的优雅”。要达到这种简洁性，尽量不要去想一种语言或操作系统最多能做多少事情，而是尽量去想这种语言或操作系统最少能做的事情——不是带着假想行动&lt;/li&gt;
&lt;li&gt;设计有自顶向下和自底向上两种思路，前者通常先考虑主事件循环，再插入具体事件；后者通常先考虑封装具体任务，再按次序粘合在一起&lt;/li&gt;
&lt;li&gt;出于自我保护，程序员尽量双管齐下——一方面以自顶向下的应用逻辑表达抽象规范，另一方面以函数或库来手机底层的域原语（原子操作）&lt;/li&gt;
&lt;li&gt;实际代码往往是自顶向下和自底向上的综合产物。同一个项目经常同时兼有，这就导致了“胶合层”的出现&lt;/li&gt;
&lt;li&gt;胶合层是个挺讨厌的东西，必须尽可能薄，这一点极为重要。薄胶合层原则可以看做是分离原则的升华。策略（应用逻辑）应该与机制（原子操作集）清晰地分离和解耦。&lt;/li&gt;
&lt;li&gt;“完美之道，不在无可增加，而在无可删减”&lt;/li&gt;
&lt;li&gt;OO语言鼓励“具有厚重的胶合和复杂层次”的体系。当问题域真的很复杂、确实需要大量抽象时，这可能是好事，但如果编程员到头来用复杂的方法来做简单的事情——仅仅是为他们能够这样做，结果便适得其反&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;全局变量意味着代码不能重入&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;“就我个人而言，如果局部变量太多，我倾向于拆分子程序。另一个方法是看代码行是否存在（太多）缩进。我几乎从来不看代码长度。——Ken Thompson”&lt;/li&gt;
&lt;li&gt;如果通过电话向另一个程序员描述说不清楚，API可能就是太复杂，设计太糟糕了。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;文本化&#34;&gt;&lt;a href=&#34;#文本化&#34; class=&#34;headerlink&#34; title=&#34;文本化&#34;&gt;&lt;/a&gt;文本化&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;序列化有时被称为列集（marshaling），其反向操作（载入）过程称为散集（unmarshaling）&lt;/li&gt;
&lt;li&gt;互用性、透明性、可扩展性和经济性都是设计文本格式和应用协议需要考虑的问题&lt;/li&gt;
&lt;li&gt;设计一个文本协议往往可以微系统的未来省不少力气；使用二进制协议的唯一正当理由是：如果要处理&lt;strong&gt;大批量&lt;/strong&gt;的数据集，因而确实关注能否在介质上获得最大位密度，或是关心数据转化时的时间或指令开销。大图像和多媒体数据的格式有时可以算是前者的例子，对延时有严格要求的网络协议有则算作后者的例子&lt;/li&gt;
&lt;li&gt;文本格式的位密度未必一定比二进制格式低多少；设计紧凑二进制格式的思路往往不能够兼顾干净扩展的要求&lt;/li&gt;
&lt;li&gt;数据文件元格式是一套句法和词法约定，已经正式标准化或者通过实践得到充分确定&lt;ul&gt;
&lt;li&gt;DSV：冒号是默认的分隔符&lt;/li&gt;
&lt;li&gt;RFC 822：字段名不得包含空格，通常用横线代替，空格和tab作为当前逻辑行的延续&lt;/li&gt;
&lt;li&gt;XML：需要文档类型定义（如XHTML）和相关应用逻辑赋予其语义。通常可以语法检查就能发现形式问题或数据错误&lt;/li&gt;
&lt;li&gt;Unix文本文件约定&lt;ul&gt;
&lt;li&gt;如果可能，以新行符结束的每一行只存一个记录&lt;/li&gt;
&lt;li&gt;每行建议少于80字符&lt;/li&gt;
&lt;li&gt;用&lt;code&gt;#&lt;/code&gt;开始注释&lt;/li&gt;
&lt;li&gt;支持反斜线&lt;code&gt;\&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;用冒号或连续空白作为字段分隔符&lt;/li&gt;
&lt;li&gt;在节格式中，支持连续行&lt;/li&gt;
&lt;li&gt;要么包含一个版本号，要么将格式设计成相互独立的自描述字节块&lt;/li&gt;
&lt;li&gt;不要只压缩或者二进制编码文件的一部分&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;应用协议设计：如果应用协议是文本式的，那仅凭肉眼就能容易地分析，例：SMTP、POP3、IMAP&lt;/li&gt;
&lt;li&gt;应用协议元格式：应用协议元格式是为了简化网络间事务处理的序列化操作而发展出来的，因为网络带宽要比存储昂贵得多，所以需要重视事务处理的经济性&lt;/li&gt;
&lt;li&gt;目前还没有个制订较完善的元协议非常适合真正的P2P应用，不像客户端-服务器应用——HTTP在这一领域的游刃有余&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;透明性&#34;&gt;&lt;a href=&#34;#透明性&#34; class=&#34;headerlink&#34; title=&#34;透明性&#34;&gt;&lt;/a&gt;透明性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;如果软件系统包含的功是为了帮助人们对软件建立正确的“做什么、怎样做”的心理模型而设计，这个软件系统就是可显的&lt;/li&gt;
&lt;li&gt;用户喜欢UI中的透明性和可显性，是因为这意味着学习曲线比较平缓，而“最小立异原则”就是一个体现&lt;/li&gt;
&lt;li&gt;优雅是力量与简洁的结合。优雅的代码事半功倍；优雅的代码不仅正确，而且&lt;strong&gt;显然&lt;/strong&gt;正确；优雅的代码不仅将算法传达给计算机，同时也把简洁和信心传递给阅读代码的人&lt;/li&gt;
&lt;li&gt;编写透明、可显的系统而节省的精力，将来完全可能就是自己的财富&lt;/li&gt;
&lt;li&gt;用户的注意力是宝贵的，让Unix工具正常运行的最好策略是在大部分时间里沉默&lt;/li&gt;
&lt;li&gt;真正的聪明是找到方法，可以访问部分细节，但是又不让它们太显眼&lt;/li&gt;
&lt;li&gt;为透明性和可显性而设计&lt;ul&gt;
&lt;li&gt;不要在具体操作的代码上叠放太多的抽象层&lt;/li&gt;
&lt;li&gt;透明性和可显性同模块性一样，主要是设计的特性而不是代码的特性&lt;ul&gt;
&lt;li&gt;程序调用层级最大深度是多少？&lt;/li&gt;
&lt;li&gt;代码是否有强大而明显的不变性质&lt;/li&gt;
&lt;li&gt;API的各函数调用是否正交&lt;/li&gt;
&lt;li&gt;程序的数据结构或分类和它们代表的外部实体间，是否有一一映射关系&lt;/li&gt;
&lt;li&gt;有多少魔法数字&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;隐藏&lt;/strong&gt;细节和&lt;strong&gt;无法访问&lt;/strong&gt;细节有着重要区别&lt;/li&gt;
&lt;li&gt;透明的系统更容易实施恢复措施，首先就是更能抵抗bug的破坏&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unix程序员的品性：“宁愿抛弃、重建代码也不远修补蹩脚的代码”&lt;/li&gt;
&lt;li&gt;选择简单的算法&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;多路程序控制&#34;&gt;&lt;a href=&#34;#多路程序控制&#34; class=&#34;headerlink&#34; title=&#34;多路程序控制&#34;&gt;&lt;/a&gt;多路程序控制&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Unix最具特点的程序模块化技法就是将大型程序分解成多个合作进程&lt;/li&gt;
&lt;li&gt;Unix的设计风格强调用定义良好的进程间通信或共享文件来联通小型进程。因此，Unix操作系统提倡把程序分解成更简单的子进程，并专注考虑它们之间的接口&lt;ul&gt;
&lt;li&gt;降低进程生成的开销&lt;/li&gt;
&lt;li&gt;提供方法（shellout、IO重定向、管道、消息传递、套接字）简化进程通信&lt;/li&gt;
&lt;li&gt;提倡使用简单透明的文本数据格式来通信&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;真正的难题不在协议语法而是&lt;strong&gt;协议逻辑&lt;/strong&gt;——协议必须既有充分的表达能力又有防范死锁的能力&lt;/li&gt;
&lt;li&gt;Unix的IPC分类&lt;ul&gt;
&lt;li&gt;最简单的形式：调用另一个程序来完成任务；专门程序通常借由文件系统和父进程通信&lt;/li&gt;
&lt;li&gt;管道、重定向和过滤器：过滤器即从标准输入顺序读数据，然后向标准输出写数据；管道操作把程序的标准输出连接到另一个程序的标准输入&lt;/li&gt;
&lt;li&gt;包装器：包装器或者将调用程序专用化，或者为它创建新的接口&lt;/li&gt;
&lt;li&gt;从进程：子程序通过连接到标准输入和标准输出的管道，交互地和调用程序收发数据&lt;/li&gt;
&lt;li&gt;对等进程通信：需要对等的通道&lt;ul&gt;
&lt;li&gt;临时文件：最古老的的IPC技法，灵活但有风险&lt;/li&gt;
&lt;li&gt;信号：每个信号都对机收进程产生默认作用，进程可以声明&lt;strong&gt;信号处理程序&lt;/strong&gt;，让信号处理程序覆盖信号的默认行为&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SIGHUP&lt;/code&gt;，重新初始化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SIGTERM&lt;/code&gt;，温和的终止&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SIGKILL&lt;/code&gt;，立即杀死进程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;套接字：套接字类似文件描述符，创建时可以指定&lt;strong&gt;协议族&lt;/strong&gt;来告诉网络层如何解释套接字名称&lt;/li&gt;
&lt;li&gt;共享内存：共享内存通常依靠&lt;code&gt;mmap&lt;/code&gt;，把文件映射成可以被多个进程共享的内存&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;微型语言&#34;&gt;&lt;a href=&#34;#微型语言&#34; class=&#34;headerlink&#34; title=&#34;微型语言&#34;&gt;&lt;/a&gt;微型语言&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;程序员每百行代码出错率和所使用的编程语言在很大程度上无关&lt;/li&gt;
&lt;li&gt;有两个好方法和一个坏方法做好微型语言的设计&lt;ul&gt;
&lt;li&gt;预先认识到可以使用微型语言设计把变成问题的规格说明提升一个层次&lt;/li&gt;
&lt;li&gt;注意到规格说明文件格式越来越像微型语言——规格中蕴含着行为&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;错误&lt;/strong&gt;的方法是通过扩展变成微型语言&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;微型语言的范畴从声明性发展到命令性，从而逐渐具有通用性，当他们明确为完备图灵机时，它们就是解释器&lt;/li&gt;
&lt;li&gt;样例&lt;ul&gt;
&lt;li&gt;SNG，PNG的纯文本表达&lt;/li&gt;
&lt;li&gt;正则表达式&lt;/li&gt;
&lt;li&gt;Glade，描述GUI界面的XML文件&lt;/li&gt;
&lt;li&gt;m4，一套宏指令集，规定文本串扩展成其他文本串的方式&lt;/li&gt;
&lt;li&gt;XSLT，描述XML数据的变换&lt;/li&gt;
&lt;li&gt;awk，将文本输入变换成文本输出&lt;/li&gt;
&lt;li&gt;PostScript，向成像设备描述排班文本和图片的微型语言&lt;/li&gt;
&lt;li&gt;bc、dc，任意精度计算&lt;/li&gt;
&lt;li&gt;Emacs Lisp&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;设计微型语言&lt;ul&gt;
&lt;li&gt;控制复杂度，声明性微型语言应该具有一个明确、一直、类自然语言的语法被人类所阅读&lt;/li&gt;
&lt;li&gt;扩展和嵌入脚本语言，实现命令性语言&lt;/li&gt;
&lt;li&gt;编写自定义语法&lt;/li&gt;
&lt;li&gt;慎用宏&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;生成&#34;&gt;&lt;a href=&#34;#生成&#34; class=&#34;headerlink&#34; title=&#34;生成&#34;&gt;&lt;/a&gt;生成&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;人类其实更善于肉眼观察数据而不是推导控制流程&lt;/li&gt;
&lt;li&gt;数据比程序逻辑更易驾驭&lt;/li&gt;
&lt;li&gt;数据驱动编程：把代码和代码作用的数据结构分清楚，始终把问题层次往上推，尽量把程序逻辑转移到数据中&lt;/li&gt;
&lt;li&gt;专用代码的生成：尽可能少干活，让数据塑造代码，依靠工具，分离机制和策略&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;配置&#34;&gt;&lt;a href=&#34;#配置&#34; class=&#34;headerlink&#34; title=&#34;配置&#34;&gt;&lt;/a&gt;配置&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;无论何时想增加配置选项，最好考虑下下面的问题&lt;ul&gt;
&lt;li&gt;能省掉这个功能么&lt;/li&gt;
&lt;li&gt;能否有无伤大雅的方式改变程序常规行为&lt;/li&gt;
&lt;li&gt;选项是否过于花哨&lt;/li&gt;
&lt;li&gt;需不需要一个独立的额外程序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unix的程序配置信息一般在以下5个位置&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/etc&lt;/code&gt;下的运行控制文件&lt;/li&gt;
&lt;li&gt;系统设置的环境变量&lt;/li&gt;
&lt;li&gt;用户主目录下的运行控制文件（通常用&lt;code&gt;.&lt;/code&gt;开头）&lt;/li&gt;
&lt;li&gt;用户设置的环境变量&lt;/li&gt;
&lt;li&gt;启动程序命令行参数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可执行未见后面加&lt;code&gt;rc&lt;/code&gt;表示“运行控制”（命名来自CTSS的runcom命令脚本功能）&lt;/li&gt;
&lt;li&gt;一些最为常见的系统环境变量：&lt;code&gt;USER&lt;/code&gt;，&lt;code&gt;LOGNAME&lt;/code&gt;，&lt;code&gt;HOME&lt;/code&gt;，&lt;code&gt;LINES&lt;/code&gt;，&lt;code&gt;SHELL&lt;/code&gt;，&lt;code&gt;PATH&lt;/code&gt;等&lt;/li&gt;
&lt;li&gt;常见的从&lt;code&gt;-a&lt;/code&gt;到&lt;code&gt;-z&lt;/code&gt;的命令行选项的可能含义&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-a&lt;/code&gt;，所有、添加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-b&lt;/code&gt;，缓冲区、批处理&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-c&lt;/code&gt;，命令、检查&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-d&lt;/code&gt;，调试、删除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-D&lt;/code&gt;，定义&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-e&lt;/code&gt;，执行、编辑&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-f&lt;/code&gt;，文件、强制执行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-g&lt;/code&gt;，全局&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-h&lt;/code&gt;，头部、帮助&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-i&lt;/code&gt;，初始化、交互式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-k&lt;/code&gt;，保留、杀死&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-l&lt;/code&gt;，列表、登录、加载&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-m&lt;/code&gt;，消息、邮件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-n&lt;/code&gt;，数字、否&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-o&lt;/code&gt;，输出&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-p&lt;/code&gt;，端口&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-q&lt;/code&gt;，安静&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-r&lt;/code&gt;，递归&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-s&lt;/code&gt;，缄默，大小&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-t&lt;/code&gt;，标记&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-u&lt;/code&gt;，用户&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-v&lt;/code&gt;，冗长&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-V&lt;/code&gt;，版本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-w&lt;/code&gt;，宽度&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-y&lt;/code&gt;，是&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-z&lt;/code&gt;，启用压缩&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;接口设计&#34;&gt;&lt;a href=&#34;#接口设计&#34; class=&#34;headerlink&#34; title=&#34;接口设计&#34;&gt;&lt;/a&gt;接口设计&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;从最小立异原则出发，启动后程序通常从下列来源获得输入或命令&lt;ul&gt;
&lt;li&gt;程序标准输入端的数据和命令&lt;/li&gt;
&lt;li&gt;通过IPC的输入&lt;/li&gt;
&lt;li&gt;已知位置的文件和设备&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最小立异原则不应被理解为在设计中号召机械的保守主义，新颖性提高了用户与接口最初几次的交互成本，但是糟糕的设计永远使接口令人痛苦而多余&lt;/li&gt;
&lt;li&gt;“我们提倡以共生和委派策略来提高代码的复用并降低软件复杂度”&lt;/li&gt;
&lt;li&gt;最小立异原则目的就是为了减少用户在使用接口时必须学习的复杂过程&lt;/li&gt;
&lt;li&gt;Unix接口设计历史：CLI &amp;#x3D;&amp;gt; X&lt;/li&gt;
&lt;li&gt;接口的5种度量标准：&lt;strong&gt;简洁、表现力、易用、透明和脚本化能力&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;简洁：事务处理需要的时间和复杂度需要有上限&lt;/li&gt;
&lt;li&gt;表现力：接口可以触发广泛的行为&lt;/li&gt;
&lt;li&gt;易用性：接口要求用户记忆的东西较少&lt;/li&gt;
&lt;li&gt;透明度：用户使用接口时，几乎不用记忆什么问题、数据或者程序状态&lt;/li&gt;
&lt;li&gt;脚本能力：容易被其他程序使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CLI和可视化接口的对比&lt;ul&gt;
&lt;li&gt;CLI更具表达力、脚本化能力、简洁性，适用于举例：SQL&lt;/li&gt;
&lt;li&gt;可视化接口透明度、易用性较好，适用性举例：画图、网页浏览器&lt;/li&gt;
&lt;li&gt;随着用户越来越熟练，对CLI接口的抵触也越少&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unix接口设计模式&lt;ul&gt;
&lt;li&gt;过滤器：接受输入，转换成其他格式，再输出到标准输出端；宽进严出、不丢弃不需要的信息、不增加无用数据&lt;/li&gt;
&lt;li&gt;cantrip（没有输入输出）、源模式（无输入且输出在启动条件中控制）、接收器模式（接收输入但不发送东西到输出）、编译器模式（无标准输入输出，但会发送信息到标准错误端）&lt;/li&gt;
&lt;li&gt;ed模式（编辑器模式）&lt;/li&gt;
&lt;li&gt;roguelike模式（来自BSD的地牢探险游戏rogue，用字符阵列显示界面UI），如vi、emacs，没有鼠标参与，适合指法熟练的人&lt;/li&gt;
&lt;li&gt;引擎和接口分离，又或者模型和视图分离，了解MVC模式的人自然了解&lt;ul&gt;
&lt;li&gt;配置者、执行者&lt;/li&gt;
&lt;li&gt;假脱机、守护进程&lt;/li&gt;
&lt;li&gt;驱动、引擎&lt;/li&gt;
&lt;li&gt;客户端、服务端&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;基于语言的接口模式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;浏览器作为通用前端&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;如果程序没有什么有趣的或者惊奇的东西要说就应该闭嘴&lt;/strong&gt;（有点意思）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;优化&#34;&gt;&lt;a href=&#34;#优化&#34; class=&#34;headerlink&#34; title=&#34;优化&#34;&gt;&lt;/a&gt;优化&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Unix的经验告诉我们最主要的就是如何知道何时不去优化&lt;/li&gt;
&lt;li&gt;最强大的优化技术就是&lt;strong&gt;不去优化&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;先估量，后优化，直觉是糟糕的向导&lt;/li&gt;
&lt;li&gt;最有效的代码优化方法是保持代码短小简单&lt;/li&gt;
&lt;li&gt;核心数据结构必须留在最快的缓存&lt;/li&gt;
&lt;li&gt;吞吐量和延迟时间的权衡是普遍现象，例TCP、UDP&lt;/li&gt;
&lt;li&gt;对于减少延迟来说，阻塞或等待中间结果都是致命的&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;按需计算&lt;/strong&gt;出昂贵的结果，再&lt;strong&gt;缓存&lt;/strong&gt;起来之后使用，可以兼得&lt;strong&gt;低延迟&lt;/strong&gt;和&lt;strong&gt;高吞吐&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;复杂度&#34;&gt;&lt;a href=&#34;#复杂度&#34; class=&#34;headerlink&#34; title=&#34;复杂度&#34;&gt;&lt;/a&gt;复杂度&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;简单即美即雅即善，而复杂即丑即怪即恶&lt;/li&gt;
&lt;li&gt;程序员为了理解一个程序，会建立思维模型并调试之；程序的复杂度即模型建立和程序调试的困难程度&lt;/li&gt;
&lt;li&gt;Unix思想的一个主题就是&lt;strong&gt;工具小巧锐利，设计从零开始，接口简单一致&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;偶然复杂度&lt;/strong&gt;的产生是因为没有找到实现规定功能集合的最简方法，可以通过良好设计去除；&lt;strong&gt;选择复杂度&lt;/strong&gt;和期望的功能相关联，只能通过修改工程目标解决&lt;/li&gt;
&lt;li&gt;计算资源以及人类的思考，同财富一样，不是靠储藏而是靠消费来证明价值的&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;选择需要管理的上下文环境，并且按照边界所允许的最小化方式构建程序&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Implementation&#34;&gt;&lt;a href=&#34;#Implementation&#34; class=&#34;headerlink&#34; title=&#34;Implementation&#34;&gt;&lt;/a&gt;Implementation&lt;/h2&gt;&lt;h3 id=&#34;语言&#34;&gt;&lt;a href=&#34;#语言&#34; class=&#34;headerlink&#34; title=&#34;语言&#34;&gt;&lt;/a&gt;语言&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;C和C++以增加实现时间和（特别是）调试时间为代价来优化效率&lt;/li&gt;
&lt;li&gt;C的内存管理是复杂性和错误的渊薮&lt;/li&gt;
&lt;li&gt;C语言最佳之处是资源效率和接近机器语言，糟糕的地方是槟城简直是资源管理的炼狱&lt;/li&gt;
&lt;li&gt;C++试图满足所有人的所有要求&lt;/li&gt;
&lt;li&gt;Perl是增强版的shell，它为替代&lt;code&gt;awk&lt;/code&gt;而设计，适合大量使用正则表达式的地方&lt;/li&gt;
&lt;li&gt;Java的设计目标是“write once, run anywhere”，但它并没有实现这两个最初的设计目标&lt;/li&gt;
&lt;li&gt;Java对小项目是大材小用&lt;/li&gt;
&lt;li&gt;Emacs Lisp传统上只用于为Emacs编辑器编写本身的控制程序&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;重用&#34;&gt;&lt;a href=&#34;#重用&#34; class=&#34;headerlink&#34; title=&#34;重用&#34;&gt;&lt;/a&gt;重用&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;重新发明轮子之所以糟糕不仅因为浪费时间，还因为它浪费的时间往往是平方级&lt;/li&gt;
&lt;li&gt;避免重新发明轮子的有效方法就是借用别人的设计和实现，即重用代码&lt;/li&gt;
&lt;li&gt;文档并不能传达代码具现的所有细微差别之处&lt;/li&gt;
&lt;li&gt;开放源码和代码重用的关系，许多地方很像浪漫爱情和有性生殖的关系&lt;/li&gt;
&lt;li&gt;设计最好的实践需要情感的投入；软件开发者，同其他任何类型的工匠和技师一样；他们想要成为艺术家，这并不是什么私密。他们有艺术家的动力和需求，也拥有听众的欲望&lt;/li&gt;
&lt;li&gt;开放源码是从意识形态上解决这些所有问题的优先方法&lt;/li&gt;
&lt;li&gt;发布不够格软件的作者会承受许多的社会压力来修正或撤回代码（不一定）&lt;/li&gt;
&lt;li&gt;阅读代码是为未来而投资&lt;/li&gt;
&lt;li&gt;&lt;h2 id=&#34;许可证-许可证能够授权代码以某种形式使用，否则在版权法之下是禁止或者需要付费的-非商业使用的许可证并不等同于开源许可证&#34;&gt;&lt;a href=&#34;#许可证-许可证能够授权代码以某种形式使用，否则在版权法之下是禁止或者需要付费的-非商业使用的许可证并不等同于开源许可证&#34; class=&#34;headerlink&#34; title=&#34;许可证- 许可证能够授权代码以某种形式使用，否则在版权法之下是禁止或者需要付费的- 非商业使用的许可证并不等同于开源许可证&#34;&gt;&lt;/a&gt;许可证&lt;br&gt;- 许可证能够授权代码以某种形式使用，否则在版权法之下是禁止或者需要付费的&lt;br&gt;- 非商业使用的许可证并不等同于开源许可证&lt;/h2&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Community&#34;&gt;&lt;a href=&#34;#Community&#34; class=&#34;headerlink&#34; title=&#34;Community&#34;&gt;&lt;/a&gt;Community&lt;/h2&gt;&lt;h3 id=&#34;可移植性&#34;&gt;&lt;a href=&#34;#可移植性&#34; class=&#34;headerlink&#34; title=&#34;可移植性&#34;&gt;&lt;/a&gt;可移植性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;C语言基于早期Ken Thompson的B语言解析器，脱胎于BCPL（Basic Common Programming Language），因此这个C代表Common（通用）&lt;/li&gt;
&lt;li&gt;在IETF传统中，标准必须来自于一个可用原型实现的经验；不幸的是，这并不是标准通常发展的方式&lt;/li&gt;
&lt;li&gt;搞笑RFC大概是唯一能够立即成为RFC的提议，比如RFC 1149（IP数据报的信鸽传递），RFC 2324（超文本咖啡壶控制协议）&lt;/li&gt;
&lt;li&gt;对于具备提倡标准资格的RFC，其规格必须稳定，经过同行评审，并且已经吸引了互联网社区的极大兴趣&lt;/li&gt;
&lt;li&gt;IETF标准化过程有意提倡由实践而非理论驱动的标准化过程&lt;/li&gt;
&lt;li&gt;国际化的首要动作：&lt;strong&gt;分离信息库（配置）和代码&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;“暗含的意思就是，成为标准的最好方法就是发布一个高质量的开源实现” —— Henry Spencer&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;文档&#34;&gt;&lt;a href=&#34;#文档&#34; class=&#34;headerlink&#34; title=&#34;文档&#34;&gt;&lt;/a&gt;文档&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;“一切皆HTML，所有引用都是URL”&lt;/li&gt;
&lt;li&gt;绝大多数软件的文档都是由技术人员写给可能连最小公分母都不知道的普通大众的——渊博者写给无知者&lt;/li&gt;
&lt;li&gt;编写Unix文档的最佳实践&lt;ul&gt;
&lt;li&gt;数量多不会被认为是质量高&lt;/li&gt;
&lt;li&gt;信息密度适中，少用屏幕截图&lt;/li&gt;
&lt;li&gt;没人喜欢庞大的文档，考虑提供快速的摘要&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;开放源码&#34;&gt;&lt;a href=&#34;#开放源码&#34; class=&#34;headerlink&#34; title=&#34;开放源码&#34;&gt;&lt;/a&gt;开放源码&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;开源开发的规则&lt;ul&gt;
&lt;li&gt;源码公开&lt;/li&gt;
&lt;li&gt;尽早发布，经常发布&lt;/li&gt;
&lt;li&gt;给贡献以表扬&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;major.minor.patch&lt;/code&gt;，补丁号修正错误和次要功能；次版本号为兼容的新功能；主版本号为不兼容的更改&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;发布前对文档和README进行拼写检查&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;基于所需功能而不是平台来编写移植层（面向接口编程）&lt;ul&gt;
&lt;li&gt;“&lt;code&gt;#ifdef&lt;/code&gt;和&lt;code&gt;#if&lt;/code&gt;是最后一招，这通常是思路不当、产品过度差异化，无理由‘优化’或是无用垃圾聚集的先兆” —— Doug Mcllroy&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;选择一个编码规范（lint）&lt;/li&gt;
&lt;li&gt;常见的标准文件命名规范&lt;ul&gt;
&lt;li&gt;README&lt;/li&gt;
&lt;li&gt;INSTALL&lt;/li&gt;
&lt;li&gt;AUTHORS&lt;/li&gt;
&lt;li&gt;NEWS&lt;/li&gt;
&lt;li&gt;HISTORY&lt;/li&gt;
&lt;li&gt;CHANGES&lt;/li&gt;
&lt;li&gt;COPYING 项目许可证条款&lt;/li&gt;
&lt;li&gt;LICENSE&lt;/li&gt;
&lt;li&gt;FAQ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;以版本号来命名目录，考虑多版本在同一系统共存&lt;/li&gt;
&lt;li&gt;在设计讨论中更广泛的参与常常是件好事，但是如果列表相对开放，迟早就会有些用户在其上询问一些初级问题&lt;/li&gt;
&lt;li&gt;开源许可证&lt;ul&gt;
&lt;li&gt;MIT：授予无限权利的拷贝、使用、修改和对修改的再发布，只要在所有修改版本中保留版权和许可证条款&lt;/li&gt;
&lt;li&gt;BSD：授予无限权利的拷贝、使用、修改和对修改的再发布，只要在所有修改版本中保留版权和许可证条款；同时在广告和软件包相关文档中包含致谢&lt;/li&gt;
&lt;li&gt;Artistic：授予无限权利的拷贝、使用和本地修改的权利。允许在发行修改后的二进制版本，但是限制源码再发行&lt;/li&gt;
&lt;li&gt;GPL、Mozilla&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;未来&#34;&gt;&lt;a href=&#34;#未来&#34; class=&#34;headerlink&#34; title=&#34;未来&#34;&gt;&lt;/a&gt;未来&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;分离机制（配置）与策略（算法）成为一个明确准则&lt;/li&gt;
&lt;li&gt;Unix文件仅仅是个字节大袋子，而没有其他文件属性&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;开放源码将软件业转变为服务业&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;–END–&lt;/em&gt;&lt;/p&gt;
</content>
        <category term="设计模式" />
        <category term="Unix" />
        <updated>2021-01-29T13:45:15.000Z</updated>
    </entry>
    <entry>
        <id>http://shenlvmeng.github.com/blog/2020/08/17/refactoring-design-improvement/</id>
        <title>重构 —— 代码的实用性与艺术性</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2020/08/17/refactoring-design-improvement/"/>
        <content type="html">&lt;p&gt;MF的《重构》一书算是程序设计书籍的经典了。其中对于重构的认识和剖析深入浅出，提纲挈领。对于有一定编程经验的人来说更是如虎添翼的帮助。下面我尽量在不贬损原意的基础上，用自己的思路和语言进行适当的总结。&lt;/p&gt;
&lt;h2 id=&#34;序-amp-前言：重构的再认识&#34;&gt;&lt;a href=&#34;#序-amp-前言：重构的再认识&#34; class=&#34;headerlink&#34; title=&#34;序 &amp;amp; 前言：重构的再认识&#34;&gt;&lt;/a&gt;序 &amp;amp; 前言：重构的再认识&lt;/h2&gt;&lt;p&gt;开篇名义，还未进入正文，书从序和前言开始，便不自觉间流露着真知灼见：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重构是&lt;strong&gt;不改变软件可观察行为的前提下改善其内部结构&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;重构需要你维护一份“坏味道”和重构手段的对应&lt;/li&gt;
&lt;li&gt;设计前期使用模式通常会导致过度工程&lt;/li&gt;
&lt;li&gt;代码总将随着设计者的经验成长而进化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;样例：感受重构&#34;&gt;&lt;a href=&#34;#样例：感受重构&#34; class=&#34;headerlink&#34; title=&#34;样例：感受重构&#34;&gt;&lt;/a&gt;样例：感受重构&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;任何一个傻瓜都能写出计算机理解的代码。但唯有优秀的程序员才能写出人类能理解的代码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;代码被阅读和修改的次数远多于被编写的次数。尽管代码在机器中运行时，机器并不会嫌弃代码丑陋。但是代码总是要修改的，当我们打算修改系统时，就涉及到了人。人在乎这些。差劲的系统很难维护，如果很难找到修改点，程序员就可能犯错，从而引入bug。如果你发现你需要为程序增加特性，但是当前的代码结构让你不能方便达成目标时，先重构那个程序，再方便地添加特性。&lt;/p&gt;
&lt;p&gt;当然，重构前一定要确认，自己有没有一套&lt;strong&gt;可靠的测试机制&lt;/strong&gt;，因为你需要它来保证重构的基础要素：不修改已有功能。重构中，最好能以&lt;strong&gt;微小的步伐&lt;/strong&gt;前进（这样能及时回滚）。在本章样例的重构中，体现了下面一些“好味道”：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代码块越小，代码功能就越好管理&lt;/li&gt;
&lt;li&gt;好的代码应该能够清楚表达自己的功能，变量名也是代码清晰的关键&lt;/li&gt;
&lt;li&gt;用多态取代条件判断逻辑&lt;/li&gt;
&lt;li&gt;结构化风格相比过程化风格更易扩展也更好维护&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;原则&#34;&gt;&lt;a href=&#34;#原则&#34; class=&#34;headerlink&#34; title=&#34;原则&#34;&gt;&lt;/a&gt;原则&lt;/h2&gt;&lt;p&gt;本章介绍了重构的一些原则和基础性认识。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;何为重构：不改变软件可观察特性的前提下，通过修改内部结构，提高其可理解性。通常情况下和&lt;strong&gt;性能优化&lt;/strong&gt;相对应&lt;ul&gt;
&lt;li&gt;两顶帽子：添加新功能和重构应该属于两种截然不同的行为，它们应该分开交替进行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;重构的好处&lt;ul&gt;
&lt;li&gt;改进软件设计，整理代码让后续的修改更容易&lt;/li&gt;
&lt;li&gt;让软件更好理解，准确说出我想要的&lt;/li&gt;
&lt;li&gt;帮忙找到bug&lt;/li&gt;
&lt;li&gt;提高未来的编程速度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;何时重构&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;事不过三&lt;/strong&gt;，第一次只管去做，第二次产生反感但还是去做，第三次做类似的事情就去重构&lt;/li&gt;
&lt;li&gt;修改bug时重构&lt;/li&gt;
&lt;li&gt;review代码时重构&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;间接层和重构：中间层能够允许逻辑共享和意图的分开解释，同时隔离变化和解耦。&lt;ul&gt;
&lt;li&gt;提前设计好中间层不如先直接做再重构&lt;/li&gt;
&lt;li&gt;少数情况下，中间层只会带来冗余&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;重构的难题&lt;ul&gt;
&lt;li&gt;修改已有API：建议维护新旧两个接口，让用户做出反应后，再迁移。这期间，旧接口应该要调用新接口实现&lt;/li&gt;
&lt;li&gt;代码已经无法正常运行时，重写比重构更省事&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;重构和性能优化：大多数的性能优化集中在小部分代码上。先写出风格良好的代码，再使用性能工具实测数据，对瓶颈处单独优化性能。好的重构也会让性能优化更容易进行&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;坏味道&#34;&gt;&lt;a href=&#34;#坏味道&#34; class=&#34;headerlink&#34; title=&#34;坏味道&#34;&gt;&lt;/a&gt;坏味道&lt;/h2&gt;&lt;p&gt;在遇到下面一些“味道”时，可能你就需要重构了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重复代码&lt;/li&gt;
&lt;li&gt;函数过长，每当你需要用注释说明点什么时，可以把需要说明的东西写到一个独立函数中&lt;/li&gt;
&lt;li&gt;太长的类&lt;/li&gt;
&lt;li&gt;函数入参过多&lt;/li&gt;
&lt;li&gt;发散式变化：一个类因为多个原因发生不同的变化&lt;/li&gt;
&lt;li&gt;霰弹式变化：一个原因引起一个类的多个变化&lt;/li&gt;
&lt;li&gt;特性依恋：函数对某个类的兴趣高于自己所在的类&lt;/li&gt;
&lt;li&gt;数据泥团：喜欢聚合在一起的零散数据字段&lt;/li&gt;
&lt;li&gt;基础类型偏执：对于基础类型如字符串、整型不愿意使用简单类来封装&lt;/li&gt;
&lt;li&gt;swtich语句&lt;/li&gt;
&lt;li&gt;冗余类&lt;/li&gt;
&lt;li&gt;夸夸其谈未来性：过度为未来设计&lt;/li&gt;
&lt;li&gt;令人迷惑的暂时字段&lt;/li&gt;
&lt;li&gt;过度耦合的链式调用，如&lt;code&gt;a.b.c().d()&lt;/code&gt;，链上任意类做修改都会影响整个调用&lt;/li&gt;
&lt;li&gt;两个类的狎昵关系&lt;/li&gt;
&lt;li&gt;异曲同工的类&lt;/li&gt;
&lt;li&gt;幼稚的数据类：只有最简单的getter和setter&lt;/li&gt;
&lt;li&gt;子类拒绝继承超类的函数或数据&lt;/li&gt;
&lt;li&gt;过多的注释&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;测试体系：重构的保证&#34;&gt;&lt;a href=&#34;#测试体系：重构的保证&#34; class=&#34;headerlink&#34; title=&#34;测试体系：重构的保证&#34;&gt;&lt;/a&gt;测试体系：重构的保证&lt;/h2&gt;&lt;p&gt;前面已经提到数次，重构的前提是不对已经已有行为做改动，这需要测试的帮助。本章对建立测试给了一些简单的介绍。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编写测试代码最有用时机是编程之前&lt;/li&gt;
&lt;li&gt;编写一个测试case时，可以先让测试失败，再通过成功验证程序功能&lt;/li&gt;
&lt;li&gt;遇到bug时，先添加一个单元测试复现这个bug&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;测试不能保证程序没有bug&lt;/strong&gt;，编写测试样例也遵循82原则，当样例已经很多时，它带来的边际效果就没那么好了。应该更多考虑容易出错的&lt;strong&gt;边界条件&lt;/strong&gt;，积极思考如何“破坏代码”。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;重构列表&#34;&gt;&lt;a href=&#34;#重构列表&#34; class=&#34;headerlink&#34; title=&#34;重构列表&#34;&gt;&lt;/a&gt;重构列表&lt;/h2&gt;&lt;p&gt;下面分几大方向介绍具体的重构手段。每个手段会分场景、思路、动机、做法来展开。&lt;/p&gt;
&lt;h3 id=&#34;组织函数&#34;&gt;&lt;a href=&#34;#组织函数&#34; class=&#34;headerlink&#34; title=&#34;组织函数&#34;&gt;&lt;/a&gt;组织函数&lt;/h3&gt;&lt;p&gt;日常工作中，非常容易坏味道中的过长函数，下面的一些重构方式可以帮我们优化这一点。&lt;/p&gt;
&lt;h4 id=&#34;提炼函数&#34;&gt;&lt;a href=&#34;#提炼函数&#34; class=&#34;headerlink&#34; title=&#34;提炼函数&#34;&gt;&lt;/a&gt;提炼函数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：有一段相对独立的代码可以被组织并独立出来&lt;/li&gt;
&lt;li&gt;思路：将这段代码放到一个独立函数中，用&lt;strong&gt;函数名解释该函数的用途&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;动机：有时会遇到过长函数中有一段需要注释才能看明白的代码。将这样相对独立的逻辑拆分成表意的短小函数后，可以让高层函数读起来就像一系列注释。如果提炼可以提高代码清晰度，就算函数名比函数体长都无所谓&lt;/li&gt;
&lt;li&gt;做法：用&lt;strong&gt;做什么&lt;/strong&gt;而不是&lt;strong&gt;怎么做&lt;/strong&gt;来为函数命名（如果你想不出一个更有意义的名称，就别动了）。检查是否有临时变量，如果有读取，可以作为入参传递给函数；如果对临时变量甚至有再赋值，那可能还要让函数返回临时变量修改后的值&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;内联函数&#34;&gt;&lt;a href=&#34;#内联函数&#34; class=&#34;headerlink&#34; title=&#34;内联函数&#34;&gt;&lt;/a&gt;内联函数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：函数本体和名称一样清晰易懂&lt;/li&gt;
&lt;li&gt;思路：在函数调用点插入函数本体，然后移除函数&lt;/li&gt;
&lt;li&gt;动机：如果函数本体足够简单，且表意清晰，同时调用点有限，&lt;strong&gt;不具备多态性&lt;/strong&gt;。那么出于减少无用中间层的考虑，可以直接使用函数体&lt;/li&gt;
&lt;li&gt;做法：注意检查是否有多态性&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;内联临时变量&#34;&gt;&lt;a href=&#34;#内联临时变量&#34; class=&#34;headerlink&#34; title=&#34;内联临时变量&#34;&gt;&lt;/a&gt;内联临时变量&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：一个临时变量只被&lt;strong&gt;简单表达式&lt;/strong&gt;赋值一次，同时妨碍了其他重构手法&lt;/li&gt;
&lt;li&gt;思路：将对变量的引用动作，替换成给它赋值的表达式本身&lt;/li&gt;
&lt;li&gt;动机：过多的临时变量会妨碍你重构长函数&lt;/li&gt;
&lt;li&gt;做法：注意确保表达式&lt;strong&gt;没有副作用&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;以查询替代临时变量&#34;&gt;&lt;a href=&#34;#以查询替代临时变量&#34; class=&#34;headerlink&#34; title=&#34;以查询替代临时变量&#34;&gt;&lt;/a&gt;以查询替代临时变量&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：程序中有个临时变量保存了某个表达式的运算结果，同时被多处引用&lt;/li&gt;
&lt;li&gt;思路：将表达式提炼成独立函数，在独立变量的所有引用点替换成对新函数的调用&lt;/li&gt;
&lt;li&gt;动机：替换成函数后，整个类都可以获得这份信息，同时会减少对该变量的频繁引用带来的重构困难&lt;/li&gt;
&lt;li&gt;做法：寻找&lt;strong&gt;只被赋值一次&lt;/strong&gt;的临时变量，对于赋值多次的临时变量使用“分解临时变量”方法先重构，保证提炼出来的函数没有副作用。先不要担心性能问题，等到出现了优化也会比较简单&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;引入解释性变量&#34;&gt;&lt;a href=&#34;#引入解释性变量&#34; class=&#34;headerlink&#34; title=&#34;引入解释性变量&#34;&gt;&lt;/a&gt;引入解释性变量&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：有个复杂的表达式，表意不够清晰&lt;/li&gt;
&lt;li&gt;思路：将表达式的值放进一个临时变量，用变量名表意&lt;/li&gt;
&lt;li&gt;动机：表达式不如变量名更好阅读。如果临时变量在整个类都有意义，建议直接使用“提炼函数”方法&lt;/li&gt;
&lt;li&gt;做法：先判断是否使用“提炼函数”的做法&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;分解临时变量&#34;&gt;&lt;a href=&#34;#分解临时变量&#34; class=&#34;headerlink&#34; title=&#34;分解临时变量&#34;&gt;&lt;/a&gt;分解临时变量&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：某个临时变量被&lt;strong&gt;多次赋值&lt;/strong&gt;，且每次赋值意义不一样&lt;/li&gt;
&lt;li&gt;思路：针对每次不同意义的赋值使用不一样的临时变量&lt;/li&gt;
&lt;li&gt;动机：临时变量的多义性会增大理解成本&lt;/li&gt;
&lt;li&gt;做法：寻找被多次赋值且有多义性的变量，不同的意义使用新的不同临时变量&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;移除对函数入参的赋值&#34;&gt;&lt;a href=&#34;#移除对函数入参的赋值&#34; class=&#34;headerlink&#34; title=&#34;移除对函数入参的赋值&#34;&gt;&lt;/a&gt;移除对函数入参的赋值&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：对函数入参赋值&lt;/li&gt;
&lt;li&gt;思路：用新的临时变量取代入参&lt;/li&gt;
&lt;li&gt;动机：对入参赋值会混淆按值传递和按引用传递的传参方式&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;用函数对象取代函数&#34;&gt;&lt;a href=&#34;#用函数对象取代函数&#34; class=&#34;headerlink&#34; title=&#34;用函数对象取代函数&#34;&gt;&lt;/a&gt;用函数对象取代函数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：大型函数中代码过于复杂，无法使用“提炼函数”&lt;/li&gt;
&lt;li&gt;思路：直接将函数放在&lt;strong&gt;单独对象&lt;/strong&gt;中，将复杂的局部变量变成对象字段，从而可以轻松地在对象中分解这个大型函数到多个小型函数&lt;/li&gt;
&lt;li&gt;动机：略&lt;/li&gt;
&lt;li&gt;做法&lt;ol&gt;
&lt;li&gt;建立一个新类，用函数用途给这类命名&lt;/li&gt;
&lt;li&gt;在新类中创建final字段保存大型函数所在的对象，即“源对象”&lt;/li&gt;
&lt;li&gt;新类的构造函数使用原函数入参作为入参&lt;/li&gt;
&lt;li&gt;新类中建立&lt;code&gt;computed()&lt;/code&gt;函数&lt;/li&gt;
&lt;li&gt;赋值原代码到&lt;code&gt;computed()&lt;/code&gt;中&lt;/li&gt;
&lt;li&gt;在原函数位置，创建这个新类的一个对象，并调用这个对象的&lt;code&gt;computed()&lt;/code&gt;函数&lt;/li&gt;
&lt;li&gt;继续重构新类中的&lt;code&gt;computed()&lt;/code&gt;函数&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;替换算法&#34;&gt;&lt;a href=&#34;#替换算法&#34; class=&#34;headerlink&#34; title=&#34;替换算法&#34;&gt;&lt;/a&gt;替换算法&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：某个算法有更清晰的算法替代&lt;/li&gt;
&lt;li&gt;思路：直接更换函数本体&lt;/li&gt;
&lt;li&gt;动机：略&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;对象间的特性搬移&#34;&gt;&lt;a href=&#34;#对象间的特性搬移&#34; class=&#34;headerlink&#34; title=&#34;对象间的特性搬移&#34;&gt;&lt;/a&gt;对象间的特性搬移&lt;/h3&gt;&lt;p&gt;类应该承担清晰且明确的责任。不论是承担责任过多还是“不怎么负责任”，都需要进行重构。&lt;/p&gt;
&lt;h4 id=&#34;搬移函数&#34;&gt;&lt;a href=&#34;#搬移函数&#34; class=&#34;headerlink&#34; title=&#34;搬移函数&#34;&gt;&lt;/a&gt;搬移函数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：有函数和所在类以外的其他类反而有更多交流，如调用或被调用&lt;/li&gt;
&lt;li&gt;思路：在和函数交流更多的类中建立一个有类似行为的新函数，改造旧函数为新函数的委托函数，或者直接移除旧函数&lt;/li&gt;
&lt;li&gt;动机：略&lt;/li&gt;
&lt;li&gt;做法：&lt;ul&gt;
&lt;li&gt;检查和搬移函数关联的字段或函数，判断是否要一起搬移&lt;/li&gt;
&lt;li&gt;检查子类和超类有无其他声明，检查有无多态性&lt;/li&gt;
&lt;li&gt;如果目标函数需要太多源类特性，就需要进一步分解后再搬移&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;搬移字段&#34;&gt;&lt;a href=&#34;#搬移字段&#34; class=&#34;headerlink&#34; title=&#34;搬移字段&#34;&gt;&lt;/a&gt;搬移字段&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：某个字段和所在类以外的其他类有更多交流&lt;/li&gt;
&lt;li&gt;思路：在目标类新建字段，修改源字段的所有使用者，令它们使用新字段&lt;/li&gt;
&lt;li&gt;动机：略&lt;/li&gt;
&lt;li&gt;做法：如果字段的访问级别是&lt;code&gt;public&lt;/code&gt;，需要先用“封装字段”手段制造一个委托中间层&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;提炼类&#34;&gt;&lt;a href=&#34;#提炼类&#34; class=&#34;headerlink&#34; title=&#34;提炼类&#34;&gt;&lt;/a&gt;提炼类&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：某个类做了两个类的事情&lt;/li&gt;
&lt;li&gt;思路：建立新类，搬移函数和字段&lt;/li&gt;
&lt;li&gt;动机：一个类应该是清楚的抽象，即可以使用清晰的命名&lt;/li&gt;
&lt;li&gt;做法：拆分类，建立两个类之间的单向或双向连接，搬移底层函数，搬移高层函数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;内联化类&#34;&gt;&lt;a href=&#34;#内联化类&#34; class=&#34;headerlink&#34; title=&#34;内联化类&#34;&gt;&lt;/a&gt;内联化类&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：某个类没做什么事情&lt;/li&gt;
&lt;li&gt;思路：将这个类的特性搬移到其他类，然后移除原类&lt;/li&gt;
&lt;li&gt;动机：通常会由于此前的重构动作移走了这个类的责任&lt;/li&gt;
&lt;li&gt;做法：选择和这个类关系最近的类进行合并，可以先在目标类中使用委托，然后再通过搬移函数的方式完成重构&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;隐藏委托关系&#34;&gt;&lt;a href=&#34;#隐藏委托关系&#34; class=&#34;headerlink&#34; title=&#34;隐藏委托关系&#34;&gt;&lt;/a&gt;隐藏委托关系&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：使用者通过委托类来调用对象&lt;/li&gt;
&lt;li&gt;思路：在提供服务的类上直接建立使用者所需的所有函数，隐藏委托关系&lt;/li&gt;
&lt;li&gt;动机：隐藏调用关系可以减少实现细节暴露从而减少耦合&lt;/li&gt;
&lt;li&gt;做法：在发起请求的类中，直接实现功能的接口，移除使用者的委托代码&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;移除中间人&#34;&gt;&lt;a href=&#34;#移除中间人&#34; class=&#34;headerlink&#34; title=&#34;移除中间人&#34;&gt;&lt;/a&gt;移除中间人&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：类做了过多&lt;strong&gt;简单委托&lt;/strong&gt;的动作&lt;/li&gt;
&lt;li&gt;思路：让使用者直接调用受托类&lt;/li&gt;
&lt;li&gt;动机：当“隐藏委托关系”使用过多时，封装会很痛苦，这个时候不如直接让使用者通过链式调用用中间受托类实现功能&lt;/li&gt;
&lt;li&gt;做法：刚好是“隐藏委托关系”的反向过程&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;引入外加函数&#34;&gt;&lt;a href=&#34;#引入外加函数&#34; class=&#34;headerlink&#34; title=&#34;引入外加函数&#34;&gt;&lt;/a&gt;引入外加函数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：需要为提供服务的类新增函数，但是你无法修改这个类（通常是库代码）&lt;/li&gt;
&lt;li&gt;思路：在使用者类中建立一个函数，并用第一参数的方式传入服务类实例&lt;/li&gt;
&lt;li&gt;动机：尽管可以在不修改服务类代码的情况下，自行添加新函数，但还是建议当外加函数较多时，使用“引入本地扩展”的方式，或直接推动服务类升级&lt;/li&gt;
&lt;li&gt;做法：在客户类中建立函数，这个函数不调用客户类特性，只是转发请求到服务类&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;引入本地扩展&#34;&gt;&lt;a href=&#34;#引入本地扩展&#34; class=&#34;headerlink&#34; title=&#34;引入本地扩展&#34;&gt;&lt;/a&gt;引入本地扩展&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：需要为服务类添加一些额外函数，但你无法修改这个类&lt;/li&gt;
&lt;li&gt;思路：建立一个新类，使其包含这些额外函数，让这个扩展类成为源类的子类或包装类&lt;/li&gt;
&lt;li&gt;动机：子类工作量较少，但是必须在对象创建期接管创建过程；包装类只是单纯转发请求，没有这个限制，但是转发过程都需要自己实现&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;重新组织数据&#34;&gt;&lt;a href=&#34;#重新组织数据&#34; class=&#34;headerlink&#34; title=&#34;重新组织数据&#34;&gt;&lt;/a&gt;重新组织数据&lt;/h3&gt;&lt;h4 id=&#34;自封装字段&#34;&gt;&lt;a href=&#34;#自封装字段&#34; class=&#34;headerlink&#34; title=&#34;自封装字段&#34;&gt;&lt;/a&gt;自封装字段&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：直接访问一个字段的方式给你的重构带来了麻烦，或是引入了麻烦的耦合关系&lt;/li&gt;
&lt;li&gt;思路：用取值&amp;#x2F;设值函数替代直接访问字段&lt;/li&gt;
&lt;li&gt;动机：这种方式让字段更为灵活，但是根据奥卡姆剃刀法则，等需要的时候再用&lt;/li&gt;
&lt;li&gt;做法：有的字段可能需要一个初始化函数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;用对象取代数据值&#34;&gt;&lt;a href=&#34;#用对象取代数据值&#34; class=&#34;headerlink&#34; title=&#34;用对象取代数据值&#34;&gt;&lt;/a&gt;用对象取代数据值&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：数据项需要和行为合在一起使用才有价值&lt;/li&gt;
&lt;li&gt;思路：把简单的数据项封装成对象&lt;/li&gt;
&lt;li&gt;动机：开发初期的简单数据，可能在迭代后会加上特殊行为，如果不及时处理，就会出现特性依恋或重复代码&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;将值对象改为引用对象&#34;&gt;&lt;a href=&#34;#将值对象改为引用对象&#34; class=&#34;headerlink&#34; title=&#34;将值对象改为引用对象&#34;&gt;&lt;/a&gt;将值对象改为引用对象&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：从一个类会衍生出多个实例，实例间只是一个实体的多种状态&lt;/li&gt;
&lt;li&gt;思路：将值对象改为引用对象&lt;/li&gt;
&lt;li&gt;动机：值对象通过&lt;code&gt;equals()&lt;/code&gt;或&lt;code&gt;hashCode()&lt;/code&gt;判断，如日期；引用对象则直接可以用相等操作符&lt;code&gt;==&lt;/code&gt;判断，如顾客、账户等概念&lt;/li&gt;
&lt;li&gt;做法：你可能需要一个静态字段或提前创建好多个新对象作为访问点&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;将引用对象改为值对象&#34;&gt;&lt;a href=&#34;#将引用对象改为值对象&#34; class=&#34;headerlink&#34; title=&#34;将引用对象改为值对象&#34;&gt;&lt;/a&gt;将引用对象改为值对象&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：你的引用对象很小且&lt;strong&gt;不可变&lt;/strong&gt;，同时不易管理&lt;/li&gt;
&lt;li&gt;思路：将引用对象改为值对象&lt;/li&gt;
&lt;li&gt;动机：引用对象不好控制，值对象的&lt;strong&gt;不可变特性&lt;/strong&gt;在某些场景很好用。&lt;/li&gt;
&lt;li&gt;做法：&lt;strong&gt;只有不可变对象才能被重构&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;以对象取代数组&#34;&gt;&lt;a href=&#34;#以对象取代数组&#34; class=&#34;headerlink&#34; title=&#34;以对象取代数组&#34;&gt;&lt;/a&gt;以对象取代数组&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：有个数组，其中的元素类型不一，代表不同的东西&lt;/li&gt;
&lt;li&gt;思路：用对象替代数组，用字段表示不同意义的元素&lt;/li&gt;
&lt;li&gt;动机：数组的作用是&lt;strong&gt;以某种顺序存储一组相似对象&lt;/strong&gt;，不要让位置具有特殊意义&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;复制被监视数据&#34;&gt;&lt;a href=&#34;#复制被监视数据&#34; class=&#34;headerlink&#34; title=&#34;复制被监视数据&#34;&gt;&lt;/a&gt;复制被监视数据&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：有些领域数据被放在了GUI部分代码里&lt;/li&gt;
&lt;li&gt;思路：将数据复制到领域对象中，建立Observer模式，剥离UI和逻辑&lt;/li&gt;
&lt;li&gt;动机：分层良好的系统，用户界面和业务逻辑代码是分开的，这样也更好维护&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;将单向关联改成双向关联&#34;&gt;&lt;a href=&#34;#将单向关联改成双向关联&#34; class=&#34;headerlink&#34; title=&#34;将单向关联改成双向关联&#34;&gt;&lt;/a&gt;将单向关联改成双向关联&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：两个类都需要对方特性，但目前只有单向连接&lt;/li&gt;
&lt;li&gt;思路：增加一个反向指针，同时修改函数能够同时更新两条链接&lt;/li&gt;
&lt;li&gt;动机：略&lt;/li&gt;
&lt;li&gt;做法：注意删除过程移除指针的顺序&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;将双向关联改为单向关联&#34;&gt;&lt;a href=&#34;#将双向关联改为单向关联&#34; class=&#34;headerlink&#34; title=&#34;将双向关联改为单向关联&#34;&gt;&lt;/a&gt;将双向关联改为单向关联&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：两个类有双向关联，但是一个类已经不需要另一个类的特性&lt;/li&gt;
&lt;li&gt;思路：去除不必要连接&lt;/li&gt;
&lt;li&gt;动机：维护双向连接带来便利的同时，也会增加维护的复杂度&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;用常量取代魔法数&#34;&gt;&lt;a href=&#34;#用常量取代魔法数&#34; class=&#34;headerlink&#34; title=&#34;用常量取代魔法数&#34;&gt;&lt;/a&gt;用常量取代魔法数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：有个字面量数值，具有特殊含义，但是不能一眼看明白&lt;/li&gt;
&lt;li&gt;思路：创造一个常量，用命名说明字面数值的意义&lt;/li&gt;
&lt;li&gt;动机：魔法数是类型码时，要使用“以类取代类型码”&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;封装字段&#34;&gt;&lt;a href=&#34;#封装字段&#34; class=&#34;headerlink&#34; title=&#34;封装字段&#34;&gt;&lt;/a&gt;封装字段&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：类中有public字段&lt;/li&gt;
&lt;li&gt;思路：声明改为private，提供相应的访问函数&lt;/li&gt;
&lt;li&gt;动机：暴露public会降低函数的模块化程度，数据应该和行为集中在一起，不应被直接修改&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;封装集合&#34;&gt;&lt;a href=&#34;#封装集合&#34; class=&#34;headerlink&#34; title=&#34;封装集合&#34;&gt;&lt;/a&gt;封装集合&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：函数返回一个集合&lt;/li&gt;
&lt;li&gt;思路：返回集合的只读副本，并在类中提供添加&amp;#x2F;移除集合元素的函数&lt;/li&gt;
&lt;li&gt;动机：类似“封装字段”，返回的集合一样可能被修改&lt;/li&gt;
&lt;li&gt;做法：使用Collection，或返回一个副本&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;用数据类取代记录&#34;&gt;&lt;a href=&#34;#用数据类取代记录&#34; class=&#34;headerlink&#34; title=&#34;用数据类取代记录&#34;&gt;&lt;/a&gt;用数据类取代记录&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：面对传统编程中的记录结构&lt;/li&gt;
&lt;li&gt;思路：创建“哑”数据对象&lt;/li&gt;
&lt;li&gt;动机：要将记录型结构转成面向对象的程序中&lt;/li&gt;
&lt;li&gt;做法：创建private字段，创建读写函数并提供&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;以类取代类型码&#34;&gt;&lt;a href=&#34;#以类取代类型码&#34; class=&#34;headerlink&#34; title=&#34;以类取代类型码&#34;&gt;&lt;/a&gt;以类取代类型码&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：类中有个数值类型码，但是&lt;strong&gt;不影响类行为&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;思路：用新的类替换数值类型码&lt;/li&gt;
&lt;li&gt;动机：略&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;以子类取代类型码&#34;&gt;&lt;a href=&#34;#以子类取代类型码&#34; class=&#34;headerlink&#34; title=&#34;以子类取代类型码&#34;&gt;&lt;/a&gt;以子类取代类型码&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：类中有个&lt;strong&gt;不可变&lt;/strong&gt;数值类型码，同时&lt;strong&gt;影响类行为&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;思路：用宿主的子类替换类型码&lt;/li&gt;
&lt;li&gt;动机：可以用子类的多态性取代switch语句，不过，如果类型码会发生改变，或者宿主类已经有子类则不能用此方法&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;以状态-x2F-策略取代类型码&#34;&gt;&lt;a href=&#34;#以状态-x2F-策略取代类型码&#34; class=&#34;headerlink&#34; title=&#34;以状态&amp;#x2F;策略取代类型码&#34;&gt;&lt;/a&gt;以状态&amp;#x2F;策略取代类型码&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：类中有个数值类型码，会&lt;strong&gt;影响类行为&lt;/strong&gt;，同时不能通过继承来消除&lt;/li&gt;
&lt;li&gt;思路：以状态对象取代替换数值类型码&lt;/li&gt;
&lt;li&gt;动机：略&lt;/li&gt;
&lt;li&gt;做法：创建一个新的类，用类型码的用途为它命名，这就是一个状态对象。所有的新类继承自超类，返回不同的状态码&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;以字段取代字段&#34;&gt;&lt;a href=&#34;#以字段取代字段&#34; class=&#34;headerlink&#34; title=&#34;以字段取代字段&#34;&gt;&lt;/a&gt;以字段取代字段&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：子类的查边只在&lt;strong&gt;返回常量数据&lt;/strong&gt;的函数上&lt;/li&gt;
&lt;li&gt;思路：修改函数，让它们返回超类的新增字段，然后销毁子类&lt;/li&gt;
&lt;li&gt;动机：这样可以避免继承带来的额外复杂性&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;简化条件表达式&#34;&gt;&lt;a href=&#34;#简化条件表达式&#34; class=&#34;headerlink&#34; title=&#34;简化条件表达式&#34;&gt;&lt;/a&gt;简化条件表达式&lt;/h3&gt;&lt;p&gt;条件逻辑会增加理解的层级，处理不好时，很容易配合长代码造成理解困难。&lt;/p&gt;
&lt;h4 id=&#34;分解条件表达式&#34;&gt;&lt;a href=&#34;#分解条件表达式&#34; class=&#34;headerlink&#34; title=&#34;分解条件表达式&#34;&gt;&lt;/a&gt;分解条件表达式&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：有一个复杂的条件语句&lt;/li&gt;
&lt;li&gt;思路：为if、then、else语句段落提炼独立函数&lt;/li&gt;
&lt;li&gt;动机：条件逻辑通常会使代码更难阅读&lt;/li&gt;
&lt;li&gt;做法：使用表意的函数名说明条件语句意思&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;合并条件表达式&#34;&gt;&lt;a href=&#34;#合并条件表达式&#34; class=&#34;headerlink&#34; title=&#34;合并条件表达式&#34;&gt;&lt;/a&gt;合并条件表达式&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：有一系列的条件逻辑，都得到相同结果&lt;/li&gt;
&lt;li&gt;思路：合并成一个条件表达式，并将之提炼成一个独立函数&lt;/li&gt;
&lt;li&gt;动机：有时候这么做能把“做什么”的语句转换成“为什么”的含义，前提是这些检查并非彼此独立&lt;/li&gt;
&lt;li&gt;做法：注意确认条件语句都没有副作用，有些条件表达式甚至可以简化成三元表达式&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;合并重复的条件片段&#34;&gt;&lt;a href=&#34;#合并重复的条件片段&#34; class=&#34;headerlink&#34; title=&#34;合并重复的条件片段&#34;&gt;&lt;/a&gt;合并重复的条件片段&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：条件表达式的每个分支都有相同的一段代码&lt;/li&gt;
&lt;li&gt;思路：将代码提取到条件表达式之外&lt;/li&gt;
&lt;li&gt;动机：减少重复语句&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;移除控制标记&#34;&gt;&lt;a href=&#34;#移除控制标记&#34; class=&#34;headerlink&#34; title=&#34;移除控制标记&#34;&gt;&lt;/a&gt;移除控制标记&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：在一系列布尔表达式中，某变量具有控制标记的作用&lt;/li&gt;
&lt;li&gt;思路：用&lt;code&gt;break&lt;/code&gt;或&lt;code&gt;return&lt;/code&gt;替代&lt;/li&gt;
&lt;li&gt;动机：有时候为了可读性和可维护性，可以牺牲单一出口的做法&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;用“卫语句”替代嵌套条件表达式&#34;&gt;&lt;a href=&#34;#用“卫语句”替代嵌套条件表达式&#34; class=&#34;headerlink&#34; title=&#34;用“卫语句”替代嵌套条件表达式&#34;&gt;&lt;/a&gt;用“卫语句”替代嵌套条件表达式&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：嵌套的条件逻辑过多，难以看清正常执行路径&lt;/li&gt;
&lt;li&gt;思路：用“卫语句”枚举出所有特殊情况，减少嵌套层数&lt;/li&gt;
&lt;li&gt;动机：当特殊case多于正常case时，提前处理每种特殊情况，可以有效减少嵌套层数&lt;/li&gt;
&lt;li&gt;做法：注意“卫语句”要么就从函数返回，要么就抛出异常，反正要跳出当前执行流&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;用多态取代条件表达式&#34;&gt;&lt;a href=&#34;#用多态取代条件表达式&#34; class=&#34;headerlink&#34; title=&#34;用多态取代条件表达式&#34;&gt;&lt;/a&gt;用多态取代条件表达式&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：你手上有个条件表达式，根据对象类型不同选择不同行为&lt;/li&gt;
&lt;li&gt;思路：将条件表达式的每个分支放在子类的重载函数中，然后将父类的原始函数声明为抽象函数&lt;/li&gt;
&lt;li&gt;动机：面向对象程序中，更少出现switch语句也是得益于多态这个工具&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;引入Null对象&#34;&gt;&lt;a href=&#34;#引入Null对象&#34; class=&#34;headerlink&#34; title=&#34;引入Null对象&#34;&gt;&lt;/a&gt;引入Null对象&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：在很多地方检查对象是否为&lt;code&gt;null&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;思路：用一个特殊的Null对象取代&lt;code&gt;null&lt;/code&gt;值&lt;/li&gt;
&lt;li&gt;动机：空对象对外就像是特殊的空的对象（Go笑而不语），而不是什么都没有，有利于保证函数行为的一致性&lt;/li&gt;
&lt;li&gt;做法：空对象一定是单例的&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;引入断言&#34;&gt;&lt;a href=&#34;#引入断言&#34; class=&#34;headerlink&#34; title=&#34;引入断言&#34;&gt;&lt;/a&gt;引入断言&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：某段代码需要对程序状态做出假设&lt;/li&gt;
&lt;li&gt;思路：用断言表示这种假设&lt;/li&gt;
&lt;li&gt;动机：有些时候，只有某个条件为真，代码才能正常运行，这个时候用断言明确这些假设。&lt;/li&gt;
&lt;li&gt;做法：注意不要滥用断言，只用来检查“一定为真”的条件，而不要去检查“应该为真”的条件&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;优化函数调用&#34;&gt;&lt;a href=&#34;#优化函数调用&#34; class=&#34;headerlink&#34; title=&#34;优化函数调用&#34;&gt;&lt;/a&gt;优化函数调用&lt;/h3&gt;&lt;p&gt;我们在前面提到了函数体本身的优化，这一章我们主要介绍函数调用的优化&lt;/p&gt;
&lt;h4 id=&#34;函数改名&#34;&gt;&lt;a href=&#34;#函数改名&#34; class=&#34;headerlink&#34; title=&#34;函数改名&#34;&gt;&lt;/a&gt;函数改名&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：函数名没能说明函数用途&lt;/li&gt;
&lt;li&gt;思路：修改函数名&lt;/li&gt;
&lt;li&gt;动机：优化函数名，让它达到注释的效果，重新安排参数顺序，提高代码清晰度&lt;/li&gt;
&lt;li&gt;做法：对于旧函数，可以标注&lt;code&gt;deprecated&lt;/code&gt;，说明其不建议使用&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;添加参数&#34;&gt;&lt;a href=&#34;#添加参数&#34; class=&#34;headerlink&#34; title=&#34;添加参数&#34;&gt;&lt;/a&gt;添加参数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：函数需要从调用端得到更多信息&lt;/li&gt;
&lt;li&gt;思路：为函数添加新的对象参数&lt;/li&gt;
&lt;li&gt;动机：如果有其他重构的方法，只要可能，基本都比添加参数要好&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;移除参数&#34;&gt;&lt;a href=&#34;#移除参数&#34; class=&#34;headerlink&#34; title=&#34;移除参数&#34;&gt;&lt;/a&gt;移除参数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：函数本体不需要某个参数&lt;/li&gt;
&lt;li&gt;思路：去除该参数&lt;/li&gt;
&lt;li&gt;动机：暂时不要考虑未来是否能用到&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;分离查询和修改&#34;&gt;&lt;a href=&#34;#分离查询和修改&#34; class=&#34;headerlink&#34; title=&#34;分离查询和修改&#34;&gt;&lt;/a&gt;分离查询和修改&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：一个函数即返回对象状态，同时又有副作用&lt;/li&gt;
&lt;li&gt;思路：将查询和修改分离出两个参数&lt;/li&gt;
&lt;li&gt;动机：任何有返回值的函数，最好都不要有看得见的副作用&lt;/li&gt;
&lt;li&gt;做法：先分离查询，再分离修改&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;让函数携带参数&#34;&gt;&lt;a href=&#34;#让函数携带参数&#34; class=&#34;headerlink&#34; title=&#34;让函数携带参数&#34;&gt;&lt;/a&gt;让函数携带参数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：若干函数做了类似的操作，仅仅因为某些值表现不同&lt;/li&gt;
&lt;li&gt;思路：用一个单一函数表示，用参数来表示那些不同的值&lt;/li&gt;
&lt;li&gt;动机：减少重复代码&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;用明确函数取代参数&#34;&gt;&lt;a href=&#34;#用明确函数取代参数&#34; class=&#34;headerlink&#34; title=&#34;用明确函数取代参数&#34;&gt;&lt;/a&gt;用明确函数取代参数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：有一个函数，其中&lt;strong&gt;完全取决于参数&lt;/strong&gt;表现出不同行为&lt;/li&gt;
&lt;li&gt;思路：针对参数的不同值，建立一个独立函数&lt;/li&gt;
&lt;li&gt;动机：函数内大多以条件表达式检查这些参数值，并作出不同行为；有时也可以用多态实现&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;保持对象完整&#34;&gt;&lt;a href=&#34;#保持对象完整&#34; class=&#34;headerlink&#34; title=&#34;保持对象完整&#34;&gt;&lt;/a&gt;保持对象完整&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：你从对象中取了若干字段，将它们作为函数调用的一些参数&lt;/li&gt;
&lt;li&gt;思路：改为传递整个对象&lt;/li&gt;
&lt;li&gt;动机：如果传递整个对象会让你的依赖结构恶化，那么就不该用这个方法&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;用函数取代参数&#34;&gt;&lt;a href=&#34;#用函数取代参数&#34; class=&#34;headerlink&#34; title=&#34;用函数取代参数&#34;&gt;&lt;/a&gt;用函数取代参数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：对象调用某个函数，用其结果做参数传递给另一个函数，然而接受改参数的函数本身也能调用到前一个函数&lt;/li&gt;
&lt;li&gt;思路：让参数接受函数直接去调用前一个函数，然后去除该参数&lt;/li&gt;
&lt;li&gt;动机：&lt;strong&gt;如果函数有其他途径获得参数值，就不该通过参数获得&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;引入参数对象&#34;&gt;&lt;a href=&#34;#引入参数对象&#34; class=&#34;headerlink&#34; title=&#34;引入参数对象&#34;&gt;&lt;/a&gt;引入参数对象&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：某些函数入参总是在一起出现&lt;/li&gt;
&lt;li&gt;思路：直接用一个对象取代这些参数&lt;/li&gt;
&lt;li&gt;动机：略&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;移除设值函数&#34;&gt;&lt;a href=&#34;#移除设值函数&#34; class=&#34;headerlink&#34; title=&#34;移除设值函数&#34;&gt;&lt;/a&gt;移除设值函数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：类的某个字段在创建时设值，然后就不再改变&lt;/li&gt;
&lt;li&gt;思路：去掉字段的设值函数&lt;/li&gt;
&lt;li&gt;动机：提供设值字段就表示可能被改变&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;隐藏函数&#34;&gt;&lt;a href=&#34;#隐藏函数&#34; class=&#34;headerlink&#34; title=&#34;隐藏函数&#34;&gt;&lt;/a&gt;隐藏函数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：有函数从未被其他类用到&lt;/li&gt;
&lt;li&gt;思路：将函数改为private&lt;/li&gt;
&lt;li&gt;动机：减少无谓的API暴露&lt;/li&gt;
&lt;li&gt;做法：可以利用lint工具帮忙检查&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;用工厂函数替代构造函数&#34;&gt;&lt;a href=&#34;#用工厂函数替代构造函数&#34; class=&#34;headerlink&#34; title=&#34;用工厂函数替代构造函数&#34;&gt;&lt;/a&gt;用工厂函数替代构造函数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：希望创建对象时不仅做简单的构建动作&lt;/li&gt;
&lt;li&gt;思路：使用工厂函数&lt;/li&gt;
&lt;li&gt;动机：这个方法也可以用来通过类型码创建类对象&lt;/li&gt;
&lt;li&gt;做法：结合&lt;code&gt;Class.forName()&lt;/code&gt;可以不用写switch语句&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;封装向下转型&#34;&gt;&lt;a href=&#34;#封装向下转型&#34; class=&#34;headerlink&#34; title=&#34;封装向下转型&#34;&gt;&lt;/a&gt;封装向下转型&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：函数返回的对象需要由调用者向下转型&lt;/li&gt;
&lt;li&gt;思路：将向下转型放在函数中进行&lt;/li&gt;
&lt;li&gt;动机：略&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;用异常取代错误码&#34;&gt;&lt;a href=&#34;#用异常取代错误码&#34; class=&#34;headerlink&#34; title=&#34;用异常取代错误码&#34;&gt;&lt;/a&gt;用异常取代错误码&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：函数返回特性的代码表示错误情况&lt;/li&gt;
&lt;li&gt;思路：改用异常&lt;/li&gt;
&lt;li&gt;动机：异常能够区分出正常情况和异常处理&lt;/li&gt;
&lt;li&gt;做法：需要决定抛出受控异常或者非受控异常&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;用测试取代异常&#34;&gt;&lt;a href=&#34;#用测试取代异常&#34; class=&#34;headerlink&#34; title=&#34;用测试取代异常&#34;&gt;&lt;/a&gt;用测试取代异常&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：对于一个调用者可以预先检查的条件，抛出了异常&lt;/li&gt;
&lt;li&gt;思路：修改调用者，改在调用前进行检查&lt;/li&gt;
&lt;li&gt;动机：能够提前检查的情况，就不算是异常&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;处理继承关系&#34;&gt;&lt;a href=&#34;#处理继承关系&#34; class=&#34;headerlink&#34; title=&#34;处理继承关系&#34;&gt;&lt;/a&gt;处理继承关系&lt;/h3&gt;&lt;h4 id=&#34;字段上移&#34;&gt;&lt;a href=&#34;#字段上移&#34; class=&#34;headerlink&#34; title=&#34;字段上移&#34;&gt;&lt;/a&gt;字段上移&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：两个子类有相同字段&lt;/li&gt;
&lt;li&gt;思路：将字段移至超类&lt;/li&gt;
&lt;li&gt;动机：归纳重复特性&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;函数上移&#34;&gt;&lt;a href=&#34;#函数上移&#34; class=&#34;headerlink&#34; title=&#34;函数上移&#34;&gt;&lt;/a&gt;函数上移&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：两个子类有相同作用的函数&lt;/li&gt;
&lt;li&gt;思路：将函数移至超类&lt;/li&gt;
&lt;li&gt;动机：归纳重复特性。子类的函数覆写超类函数，但是做相同工作时，也要使用函数上移&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;构造函数上移&#34;&gt;&lt;a href=&#34;#构造函数上移&#34; class=&#34;headerlink&#34; title=&#34;构造函数上移&#34;&gt;&lt;/a&gt;构造函数上移&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：子类的构造函数几乎完全一致&lt;/li&gt;
&lt;li&gt;思路：在超类中新建构造函数，再在子类构造函数中调用它&lt;/li&gt;
&lt;li&gt;动机：如果重构过程过于复杂，可以考虑使用“用工厂函数替代构造函数”&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;函数下移&#34;&gt;&lt;a href=&#34;#函数下移&#34; class=&#34;headerlink&#34; title=&#34;函数下移&#34;&gt;&lt;/a&gt;函数下移&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：超类的某函数只和部分子类有关&lt;/li&gt;
&lt;li&gt;思路：将函数移到相关的子类中去&lt;/li&gt;
&lt;li&gt;动机：和“函数上移”恰恰相反&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;字段下移&#34;&gt;&lt;a href=&#34;#字段下移&#34; class=&#34;headerlink&#34; title=&#34;字段下移&#34;&gt;&lt;/a&gt;字段下移&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：超类的字段只被部分子类用到&lt;/li&gt;
&lt;li&gt;思路：将字段移到真正需要的子类中去&lt;/li&gt;
&lt;li&gt;动机：和“字段上移”恰恰相反&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;提炼子类&#34;&gt;&lt;a href=&#34;#提炼子类&#34; class=&#34;headerlink&#34; title=&#34;提炼子类&#34;&gt;&lt;/a&gt;提炼子类&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：类的特性只被部分实例对象用到&lt;/li&gt;
&lt;li&gt;思路：新建一个子类，将未被用到的特性转移到子类中&lt;/li&gt;
&lt;li&gt;动机：上述的差异行为有时也可能通过类型码区分，这个时候可以由“以子类取代类型码”或“以状态&amp;#x2F;策略取代类型码”方法来重构&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;提炼超类&#34;&gt;&lt;a href=&#34;#提炼超类&#34; class=&#34;headerlink&#34; title=&#34;提炼超类&#34;&gt;&lt;/a&gt;提炼超类&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：两个类有相似特性&lt;/li&gt;
&lt;li&gt;思路：为两个类建立超类，将相似特性移到超类中&lt;/li&gt;
&lt;li&gt;动机：两个类用相同方式做类似事情往往意味着重复代码&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;提炼接口&#34;&gt;&lt;a href=&#34;#提炼接口&#34; class=&#34;headerlink&#34; title=&#34;提炼接口&#34;&gt;&lt;/a&gt;提炼接口&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：若干客户端使用类中的同一子集，或者两个类有部分相同点&lt;/li&gt;
&lt;li&gt;思路：将相同的子集提炼到独立接口中&lt;/li&gt;
&lt;li&gt;动机：接口有助于系统的&lt;strong&gt;责任划分&lt;/strong&gt;和&lt;strong&gt;能力声明&lt;/strong&gt;（鸭子类型）。在单继承的语言中，接口扮演了组合功能代码的角色。尤其某个类在不同环境表现不同时，使用接口是个好主意&lt;/li&gt;
&lt;li&gt;做法：接口命名通常由&lt;code&gt;-able&lt;/code&gt;结尾&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;折叠继承关系&#34;&gt;&lt;a href=&#34;#折叠继承关系&#34; class=&#34;headerlink&#34; title=&#34;折叠继承关系&#34;&gt;&lt;/a&gt;折叠继承关系&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：超类和子类几乎无法区分&lt;/li&gt;
&lt;li&gt;思路：将它们合为一体&lt;/li&gt;
&lt;li&gt;动机：往往在过度设计时出现&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;构造模板函数&#34;&gt;&lt;a href=&#34;#构造模板函数&#34; class=&#34;headerlink&#34; title=&#34;构造模板函数&#34;&gt;&lt;/a&gt;构造模板函数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：有一些子类，细节上有所区别，但是整个流程上操作类似&lt;/li&gt;
&lt;li&gt;思路：提炼出操作流程，上移至超类，将具体细节操作放在独立函数中，让它们有相同的签名，然后实现超类的抽象函数&lt;/li&gt;
&lt;li&gt;动机：这样抽离出来的流程函数也叫模板函数，模板上&lt;em&gt;插槽&lt;/em&gt;接口固定，然而提供插槽的模板函数是一致的&lt;/li&gt;
&lt;li&gt;做法：后续新增的类，只需实现超类抽象函数就可以完成扩展&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;用委托取代继承&#34;&gt;&lt;a href=&#34;#用委托取代继承&#34; class=&#34;headerlink&#34; title=&#34;用委托取代继承&#34;&gt;&lt;/a&gt;用委托取代继承&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：子类只使用超类接口的一部分，或者直接不需要继承来的数据&lt;/li&gt;
&lt;li&gt;思路：在子类中新建字段保存超类，然后调整子类函数，让它委托超类，然后去掉两者的继承关系&lt;/li&gt;
&lt;li&gt;动机：略&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;用继承取代委托&#34;&gt;&lt;a href=&#34;#用继承取代委托&#34; class=&#34;headerlink&#34; title=&#34;用继承取代委托&#34;&gt;&lt;/a&gt;用继承取代委托&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：两个类的委托关系过多，且委托函数都很简单&lt;/li&gt;
&lt;li&gt;思路：让委托类继承受托类&lt;/li&gt;
&lt;li&gt;动机：如果你没有使用&lt;strong&gt;所有&lt;/strong&gt;受托类函数，那么就不要用这个重构方法，继续保持委托关系，使用其他重构方法；另外受托对象可变时，也要注意&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;大型重构&#34;&gt;&lt;a href=&#34;#大型重构&#34; class=&#34;headerlink&#34; title=&#34;大型重构&#34;&gt;&lt;/a&gt;大型重构&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Kent Beck和作者所写&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本章介绍了4个大型重构的思路，也是大型程序容易遇到的4个问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;梳理和分析继承体系：往往因为某个继承体系承担的两个甚至更多责任，有一个特征是，某一层级的所有类，子类都以相同形容词开始。可以通过委托的形式，对继承体系做正交化&lt;/li&gt;
&lt;li&gt;过程化设计转化为对象设计：往往出现在过程化风格传统语言中。可以将数据记录变为对象，拆分大块行为为小块，然后将行为转移到相关对象中。&lt;/li&gt;
&lt;li&gt;分离领域和UI：出现在有GUI的场景中。传统的MVC设计模式就是将领域逻辑分离出来，用接口的方式和UI部分代码对接&lt;/li&gt;
&lt;li&gt;提炼继承体系：有的类做了太多工作，里面经常有较多的条件表达式。对于这种，可以借助面向对象中的子类和多态或者策略模式实现&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;重构与现实&#34;&gt;&lt;a href=&#34;#重构与现实&#34; class=&#34;headerlink&#34; title=&#34;重构与现实&#34;&gt;&lt;/a&gt;重构与现实&lt;/h2&gt;&lt;p&gt;重构在某些角度和技术演进很像。技术的接纳过程类似一条钟形曲线。前段包括先行者和早期接受者，中部大量人群包括早期消费者和晚期消费者，最后则是行动迟缓者。不同人有不同的消费动机。先行者和早期接受者感兴趣的是&lt;strong&gt;新技术，“范式转移和突破性思想”的愿景&lt;/strong&gt;；早期和晚期消费者则关心&lt;strong&gt;成熟度、成本、支持程度，以及这种新思想&amp;#x2F;新产品是否被和他们相似的其他人成功使用&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;尾声&#34;&gt;&lt;a href=&#34;#尾声&#34; class=&#34;headerlink&#34; title=&#34;尾声&#34;&gt;&lt;/a&gt;尾声&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;重构工具能节省你的重构时间&lt;/li&gt;
&lt;li&gt;永远记住“两顶帽子”，重构时保持代码功能不变&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="重构" />
        <category term="设计模式" />
        <category term="代码质量" />
        <updated>2020-08-17T14:56:03.000Z</updated>
    </entry>
    <entry>
        <id>http://shenlvmeng.github.com/blog/2018/01/22/design-pattern-note/</id>
        <title>设计模式学习</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2018/01/22/design-pattern-note/"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;全文参考&lt;a href=&#34;https://book.douban.com/subject/4260618/&#34;&gt;《设计模式之禅》&lt;/a&gt;，&lt;a href=&#34;https://book.douban.com/subject/1400656/&#34;&gt;Head First Design Pattern&lt;/a&gt;这本也不错。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;准备&#34;&gt;&lt;a href=&#34;#准备&#34; class=&#34;headerlink&#34; title=&#34;准备&#34;&gt;&lt;/a&gt;准备&lt;/h2&gt;&lt;p&gt;JavaScript学久了，在看设计原则时，顺带温习了下OOP中的一些传统概念。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;类图&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;一&amp;gt;&lt;/code&gt;: 关联，类定义中的相互引用，通常使用类的属性表达。 比如客户类和订单类&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--&amp;gt;&lt;/code&gt;: 依赖，最弱的关系，对象间的临时关联，用函数参数、局部变量、返回值等表达&lt;/li&gt;
&lt;li&gt;&lt;code&gt;一▷&lt;/code&gt;: 继承&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--▷&lt;/code&gt;: 实现&lt;/li&gt;
&lt;li&gt;&lt;code&gt;一◇&lt;/code&gt;: has-a关系，表示整体与局部，但不稳定。比如公司类和雇员类&lt;/li&gt;
&lt;li&gt;&lt;code&gt;一◆&lt;/code&gt;: contains-a关系，表示整体与局部，部分不能脱离整体而存在。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;override和overload&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;区别&lt;/th&gt;
&lt;th&gt;覆写&lt;/th&gt;
&lt;th&gt;重载&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;单词&lt;/td&gt;
&lt;td&gt;OverLoading&lt;/td&gt;
&lt;td&gt;Override&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;概念&lt;/td&gt;
&lt;td&gt;方法名称相同，参数的类型或个数不同&lt;/td&gt;
&lt;td&gt;方法名称相同，参数的类型或个数相同，返回值类型相同&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;范围&lt;/td&gt;
&lt;td&gt;发生在一个类之中&lt;/td&gt;
&lt;td&gt;发生在类的继承关系中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;权限&lt;/td&gt;
&lt;td&gt;一个类中所重载多个方法可以不同的权限&lt;/td&gt;
&lt;td&gt;被子类所覆写的方法不能拥有比父类更严格的访问控制权限&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;接口和抽象类的不同&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;两者都为“面向契约编程”而存在。总体来说，接口是对能力的抽象，抽象类是对事物的抽象。从而有着下面的不同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接口被类实现，抽象类被子类继承。&lt;/li&gt;
&lt;li&gt;接口只做方法声明，抽象类中可以做方法声明，也可以做方法实现。&lt;/li&gt;
&lt;li&gt;接口里定义的变量只能是公共静态常量，抽象类中的变量可以是普通变量。&lt;/li&gt;
&lt;li&gt;抽象类里可以没有抽象方法，接口是设计的结果，抽象类是重构的结果。&lt;/li&gt;
&lt;li&gt;Java中接口可继承接口，并可多继承接口，但类只能单继承。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;它们还有以下特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在实现时必须全部实现，否则仍是接口&amp;#x2F;抽象类&lt;/li&gt;
&lt;li&gt;抽象类中可以没有抽象方法&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;设计6原则&#34;&gt;&lt;a href=&#34;#设计6原则&#34; class=&#34;headerlink&#34; title=&#34;设计6原则&#34;&gt;&lt;/a&gt;设计6原则&lt;/h2&gt;&lt;p&gt;SOLID原则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单一职责（接口细分到单一业务）&lt;/li&gt;
&lt;li&gt;里氏替换（实现都按接口来）&lt;/li&gt;
&lt;li&gt;依赖倒置（多使用抽象概念）&lt;/li&gt;
&lt;li&gt;接口隔离原则（接口尽量细分）&lt;/li&gt;
&lt;li&gt;迪米特法则（低耦合）&lt;/li&gt;
&lt;li&gt;开闭原则（高内聚，低耦合）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总结来说，就是&lt;strong&gt;好好设计、合理拆分接口，一旦确定，避免更改；减少接口耦合；面向接口编程；使用中间层应对需求变更&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;常见设计模式&#34;&gt;&lt;a href=&#34;#常见设计模式&#34; class=&#34;headerlink&#34; title=&#34;常见设计模式&#34;&gt;&lt;/a&gt;常见设计模式&lt;/h2&gt;&lt;h3 id=&#34;单例模式&#34;&gt;&lt;a href=&#34;#单例模式&#34; class=&#34;headerlink&#34; title=&#34;单例模式&#34;&gt;&lt;/a&gt;单例模式&lt;/h3&gt;&lt;p&gt;单例模式是最简单的设计模式。即一个类只有一个实例，或一个构造函数只能初始化一次（JS版本），且&lt;strong&gt;自行实例化&lt;/strong&gt;，并像整个系统提供整个实例。常用在下面这些场景下，解决特定的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;整个项目需要一个&lt;strong&gt;共享&lt;/strong&gt;访问点或共享数据&lt;/li&gt;
&lt;li&gt;包含了大量静态常量（通常是配置数据）和静态方法的&lt;strong&gt;工具类&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;创建一个对象需要消耗的资源过多&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实现上，分懒汉型和饿汉型。它们的主要区别在初始化单一实例的时机在类创建时还是访问时。懒汉型需要注意&lt;strong&gt;线程安全&lt;/strong&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 饿汉型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Singleton&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Singleton&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;singleton&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Singleton&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 限制外部访问&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;Singleton&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 暴露的public方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; Singleton &lt;span class=&#34;title function_&#34;&gt;getInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; singleton;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 其他方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 懒汉型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Singleton&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Singleton&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;singleton&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 限制外部访问&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;Singleton&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 暴露的public方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; sychronized Singleton &lt;span class=&#34;title function_&#34;&gt;getInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (singleton == &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      singleton = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Singleton&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; singleton;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;JavaScript中就灵活多了。最常用的字面量变量就是最简单的单例，强行使用构造函数，也可以借助闭包的特点实现。另外，JavaScript是单线程，不需要考虑线程安全的问题。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 字面量变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; singleton = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 一些属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;foo&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;bar&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 一些方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;baz&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Hello world!&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 闭包&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;Singleton&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; singleton = &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;foo&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;bar&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;baz&lt;/span&gt; = &lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123; &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Hello world!&amp;#x27;&lt;/span&gt;); &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;Singleton&lt;/span&gt; = &lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; singleton;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;拓展&#34;&gt;&lt;a href=&#34;#拓展&#34; class=&#34;headerlink&#34; title=&#34;拓展&#34;&gt;&lt;/a&gt;拓展&lt;/h4&gt;&lt;p&gt;当放开单例限制，编程多例模式时，可以通过加入计数器来限制。但不常用，下面给出JavaScript版本例子。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;Singleton&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; singleton = &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt; = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 比如限制为3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; limit = &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 一些初始化工作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; limit; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [].&lt;span class=&#34;title function_&#34;&gt;push&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;Singleton&lt;/span&gt; = &lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; singleton;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;h3 id=&#34;工厂模式&#34;&gt;&lt;a href=&#34;#工厂模式&#34; class=&#34;headerlink&#34; title=&#34;工厂模式&#34;&gt;&lt;/a&gt;工厂模式&lt;/h3&gt;&lt;p&gt;工厂模式意思是，将创建对象的过程封装起来，在OOP语言中体现在定义一个创建一类对象的接口，让实例化过程在子类中完成。浅显的来讲，就是让工厂类将具有共性、创建过程复杂的一类对象的创建过程封装起来，便于业务类使用，同时也便于日后拓展。业务类只需要交给工厂类需要的对象类名（Java）或别的标志就可以得到所需对象。&lt;/p&gt;
&lt;p&gt;使用场景上，它是new模式的替代品，在任何需要对象的场景下都可以使用，但是只有下面这些情况下是比较合适的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要灵活解耦的框架&lt;/li&gt;
&lt;li&gt;产品类创建过程复杂、有差异性且有共性。比如连接邮箱客户端的三种协议POP3、IMAP、HTTP的构造过程抽象成一个&lt;code&gt;IConnectMail&lt;/code&gt;接口，再设计各自的工厂类。在日后有新的连接邮箱客户端协议时，只需新增一个工厂类即可。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Java中工厂类可以使用反射等方法创建新对象。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 产品类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;abstractProduct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 共有方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 抽象方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;abstractMethod&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;product1&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;abstractProduct&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;abstractMethod&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 差异化方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;product2&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;abstractProduct&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;abstractMethod&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 差异化方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Factory&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 入参根据场景调整&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &amp;lt;T &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;abstractProduct&lt;/span&gt;&amp;gt; T &lt;span class=&#34;title function_&#34;&gt;createProduct&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Class&amp;lt;T&amp;gt; c)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Factory1&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Factory&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &amp;lt;T &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Product&lt;/span&gt;&amp;gt; T &lt;span class=&#34;title function_&#34;&gt;createProduct&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Class&amp;lt;T&amp;gt; c)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;Product&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      p = (Product)Class.forName(c.getName()).newInstance();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;JavaScript中，工厂模式的实现更加轻量级，因为构造对象的方式更加简单，使用函数将多个产品类间的共性抽出来就行了。样例略。&lt;/p&gt;
&lt;h3 id=&#34;抽象工厂模式&#34;&gt;&lt;a href=&#34;#抽象工厂模式&#34; class=&#34;headerlink&#34; title=&#34;抽象工厂模式&#34;&gt;&lt;/a&gt;抽象工厂模式&lt;/h3&gt;&lt;p&gt;抽象模式在工厂模式的基础上又抽象了一层，产品类接口下是多个&lt;strong&gt;产品族&lt;/strong&gt;抽象类，产品族下才是明确的产品类。相对应的，工厂接口下的多个工厂方法根据最细节的产品类生产对象。它的优势在：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以不公开地控制产品族间的约束&lt;/li&gt;
&lt;li&gt;更好地组织多维度（更多是2维）上多个产品间的生产&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点也很明显，产品族的修改将会直接影响工厂接口和产品抽象类，这是开闭原则的大忌。因此，在&lt;strong&gt;产品维度固定，且有必要从多维度上划分产品&lt;/strong&gt;时，才会使用抽象工厂模式。比如Windows、Linux、Mac OS上的文本编辑器与图像处理程序就是两个维度的多个产品。&lt;/p&gt;
&lt;p&gt;样例略。&lt;/p&gt;
&lt;h3 id=&#34;模板方法模式&#34;&gt;&lt;a href=&#34;#模板方法模式&#34; class=&#34;headerlink&#34; title=&#34;模板方法模式&#34;&gt;&lt;/a&gt;模板方法模式&lt;/h3&gt;&lt;p&gt;模板方法模式比较好理解，就是将子类中共有的&lt;strong&gt;算法框架&lt;/strong&gt;抽象到抽象类中实现，注意是框架，而不是具体的步骤。子类可以根据自己的需要，在不改变框架的基础上，重定义算法的某些步骤，得到不同的结果。下面举个例子就能更方便地看明白了。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; student = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;study&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;gotoPrimarySchool&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;gotoMiddleSchool&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;gotoUniversity&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; stu1 = &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;assign&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;create&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;Student&lt;/span&gt;), &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;gotoPrimarySchool&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;子弟学校 &amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;gotoMiddleSchool&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;人大附中 &amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;gotoUniversity&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;清华大学 &amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; stu2 = &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;assign&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;create&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;Student&lt;/span&gt;), &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;gotoPrimarySchool&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;子弟学校 &amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;gotoMiddleSchool&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;华师一附中 &amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;gotoUniversity&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;中科大 &amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;stu1.&lt;span class=&#34;title function_&#34;&gt;study&lt;/span&gt;(); &lt;span class=&#34;comment&#34;&gt;//子弟学校 人大附中 清华大学 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;stu2.&lt;span class=&#34;title function_&#34;&gt;study&lt;/span&gt;(); &lt;span class=&#34;comment&#34;&gt;//子弟学校 华师一附中 中科大 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;可以看到，同样是调用学习方法&lt;code&gt;study&lt;/code&gt;，&lt;code&gt;stu1&lt;/code&gt;和&lt;code&gt;stu2&lt;/code&gt;可以再不影响公用算法流程下，定义自己的算法步骤。使用Java实现是一样的思路：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义抽象类，声明可以差异化的基本方法，实现模板方法，在模板方法中调用可以差异化的基本方法&lt;/li&gt;
&lt;li&gt;子类根据需要，实现自己的基本方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;模板方法模式核心就在于&lt;strong&gt;封装不变部分，开放可变部分&lt;/strong&gt;，共有的算法步骤也较容易维护。因此，使用在下面的场景里：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;子类共有相同算法流程&lt;/li&gt;
&lt;li&gt;将核心算法设计为模板方法，细节功能由子类补充&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;建造者模式&#34;&gt;&lt;a href=&#34;#建造者模式&#34; class=&#34;headerlink&#34; title=&#34;建造者模式&#34;&gt;&lt;/a&gt;建造者模式&lt;/h3&gt;&lt;p&gt;建造者模式和工厂模式类似，意思是，讲一个复杂对象的&lt;strong&gt;构建&lt;/strong&gt;和&lt;strong&gt;表示&lt;/strong&gt;分离，使同样的构建过程可以有不同的表示。其中的&lt;strong&gt;构建&lt;/strong&gt;强调的是不同基本方法的调用顺序安排，而不是基本方法的实现（这也是它和工厂方法的最大区别）；&lt;strong&gt;表示&lt;/strong&gt;是指产品子类对于基本方法的差异性实现。&lt;/p&gt;
&lt;p&gt;对比上面模板方法模式来看，就是&lt;code&gt;study&lt;/code&gt;的顺序对于不同人不一样，这个顺序有另外的建造类描述并实现。可以看到，建造者模式主要的使用场景是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相同的执行方法，不同的执行顺序，产生不同的结果&lt;/li&gt;
&lt;li&gt;产品类中，不同的构建顺序会有不同的结果&lt;/li&gt;
&lt;li&gt;用户希望执行次序可控&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在实现时，建造类通过传入新状态或其他方式影响产品类的模板方式执行次序。在建造类和产品类之上，使用导演类可以起到封装的作用。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 产品类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Product&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 差异化业务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 抽象建造类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Builder&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 设置构建的次序，以获得不同的结果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;setSequence&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 建造&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; Product &lt;span class=&#34;title function_&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 具体建造类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Builder1&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Builder&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Product&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;product&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Product&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;setSequence&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 差异化逻辑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Product &lt;span class=&#34;title function_&#34;&gt;buildProduct&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; product;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 导演类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Director&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Builder&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;builder&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Builder1&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Product &lt;span class=&#34;title function_&#34;&gt;getProductA&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    builder.setSequence();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; builder.build();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;代理模式&#34;&gt;&lt;a href=&#34;#代理模式&#34; class=&#34;headerlink&#34; title=&#34;代理模式&#34;&gt;&lt;/a&gt;代理模式&lt;/h3&gt;&lt;p&gt;代理模式即为其他对象提供一个代理来控制对这个对象的访问，浅显易懂。利用代理模式还可以拦截原始请求，做额外的事情。应用很广泛。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 作为示例的一个方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;RealObject&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 业务逻辑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 代理的对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;object&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;Proxy&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.subject = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Proxy&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 传递代理者&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;Proxy&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Object o)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.before();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.object.request();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.after();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 预处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;before&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 善后处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;after&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;除了普通代理，还有强制代理即只能通过被代理对象对象访问到代理。另外，AOP（Aspect Oriented Progarmming）模式也是建立在代理模式的基础上的。ES6中的proxy和ES7中的装饰器就是AOP概念下的产物。&lt;/p&gt;
&lt;h3 id=&#34;原型模式&#34;&gt;&lt;a href=&#34;#原型模式&#34; class=&#34;headerlink&#34; title=&#34;原型模式&#34;&gt;&lt;/a&gt;原型模式&lt;/h3&gt;&lt;p&gt;原型模式即不通过&lt;code&gt;new&lt;/code&gt;而是通过对象复制生产同类对象。非常好理解。在Java中，一个实现了&lt;code&gt;cloneable&lt;/code&gt;接口的对象即使用了原型模式。而JavaScript更是&lt;a href=&#34;https://shenlvmeng.github.io/blog/2017/12/13/you-dont-know-js-part1/#%E5%8E%9F%E5%9E%8B%E7%BB%A7%E6%89%BF&#34;&gt;天生使用原型模式&lt;/a&gt;实现对象的继承和拓展。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;public &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;PrototypeClass&lt;/span&gt; implements &lt;span class=&#34;title class_&#34;&gt;Cloneable&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  @&lt;span class=&#34;title class_&#34;&gt;Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  public &lt;span class=&#34;title class_&#34;&gt;PrototypeClass&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;clone&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;PrototypeClass&lt;/span&gt; p = &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      p = (&lt;span class=&#34;title class_&#34;&gt;PrototypeClass&lt;/span&gt;)&lt;span class=&#34;variable language_&#34;&gt;super&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;clone&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// 其他操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;CloneNotSupportedException&lt;/span&gt; e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; p;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;它的优势在于更加轻量级，避免了构造函数的约束。问题在于，第一会跳过构造函数（这个JavaScript没有），第二是深浅拷贝的问题，第三在Java中，clone带有final成员的类会抛出异常。&lt;/p&gt;
&lt;h3 id=&#34;中介者模式&#34;&gt;&lt;a href=&#34;#中介者模式&#34; class=&#34;headerlink&#34; title=&#34;中介者模式&#34;&gt;&lt;/a&gt;中介者模式&lt;/h3&gt;&lt;p&gt;中介者模式主要用在多个对象那个间有比较复杂的交互场景下，用一个中介对象封装对象间的一系列交互，中介往往与各对象都有交互，从而使其耦合松散，符合迪米特法则。从类图上看，它把原先的蛛网状结构简化为了星型结构。&lt;/p&gt;
&lt;p&gt;它的优点是减少了类间依赖，缺点是有些时候中介者会膨胀的很大。使用场景上，在有协调概念出现的场景都有它的发挥空间：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;机场调度中心&lt;/li&gt;
&lt;li&gt;MVC框架中的Controller&lt;/li&gt;
&lt;li&gt;媒体网关，中介服务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为应用场景广泛，这里不举样例。&lt;/p&gt;
&lt;h3 id=&#34;命令模式&#34;&gt;&lt;a href=&#34;#命令模式&#34; class=&#34;headerlink&#34; title=&#34;命令模式&#34;&gt;&lt;/a&gt;命令模式&lt;/h3&gt;&lt;p&gt;命令模式即将一个用对象组织每一个请求，从而允许使用请求完成一系列操作，同时还可以对请求排队或记录日志或&lt;strong&gt;撤销以及恢复&lt;/strong&gt;。模式主要包括三个角色：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;接受者&lt;/strong&gt;，完成请求内操作的角色&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;命令&lt;/strong&gt;，封装好的系列操作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;调用者&lt;/strong&gt;，接受、执行命令的角色&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这种设计模式在存在上面三种角色的场景很适用，易于封装常用的命令，且很容易拓展，当命令间共同点较多时，还可以结合模板方法模式进行改进。&lt;/p&gt;
&lt;p&gt;例子如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Receiver&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 定义所有接受者必须完成的业务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;work&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Receiver1&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Receiver&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;work&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 差异化业务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;otherWork1&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Receiver2&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Receiver&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;work&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 差异化业务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;otherWork2&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Command&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Command1&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Command&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 对特定接受者命令&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; Receiver receiver;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;Command1&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Receiver _receiver)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.receiver = _receiver;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.receiver.work();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Command2&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Command&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 对特定接受者命令&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; Receiver receiver;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;Command2&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Receiver _receiver)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.receiver = _receiver;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.receiver.work();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 调用者&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Invoker&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; Command command;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;setCommand&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Command _command)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.command = _command;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;react&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.command.exec();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;责任链模式&#34;&gt;&lt;a href=&#34;#责任链模式&#34; class=&#34;headerlink&#34; title=&#34;责任链模式&#34;&gt;&lt;/a&gt;责任链模式&lt;/h3&gt;&lt;p&gt;责任链模式重点在“链”，将有机会处理请求的所有对象组成链，沿着这条链传递请求直到有对象处理它为止。它和Express和Redux中的&lt;strong&gt;中间件&lt;/strong&gt;的概念有相似之处，区别在于责任链上一般只会有一个或部分对象处理请求。它替换了场景代码中的大堆&lt;code&gt;if else&lt;/code&gt;与&lt;code&gt;switch&lt;/code&gt;语句。&lt;/p&gt;
&lt;p&gt;一个狭义的抽象处理者像下面这样。使用模板方法模式，将抽象的业务逻辑外的处理流程实现在抽象类，细节的业务逻辑放在子类里完成。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Handler&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 下一个处理者&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; Handler next;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 处理逻辑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; Response &lt;span class=&#34;title function_&#34;&gt;handle&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Request req)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;Response&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.getLevel().equals(req.getLevel())) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// 只处理属于自己的level&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      res = &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.exec(req);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// 如果有下一个处理者，交给它&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.next != &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        res = &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.next.handle(req);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 自行处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 设置下一个处理者&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;setNext&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Handler _handler)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.next = _handler;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 处理者有自己的处理级别&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; Level &lt;span class=&#34;title function_&#34;&gt;getLevel&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 处理者有自己的处理逻辑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; Response &lt;span class=&#34;title function_&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Request req)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 子类示例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; classHandler1 &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Handler&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 自己的处理逻辑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; Response &lt;span class=&#34;title function_&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Request req)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 自己的处理级别&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; Level &lt;span class=&#34;title function_&#34;&gt;getHandlerLevel&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Level&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 定义一个请求和处理等级&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Request&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 获取请求等级&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Level &lt;span class=&#34;title function_&#34;&gt;getRequestLevel&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Response&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 定义返回的数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;它的优点在解耦了请求与处理者，使系统更加灵活。问题在责任链比较长时，遍历整个责任链会带来性能问题。Express中类似的中间件则不会，因为处理后可以决定是否执行&lt;code&gt;next()&lt;/code&gt;，跳到下一个中间件。&lt;/p&gt;
&lt;p&gt;上面Java的实现通过&lt;code&gt;next&lt;/code&gt;属性连接所有的处理者（类似链表），在JavaScript的工程实现上，一般在上层又有一层封装，用数组保存所有处理者，再建立之间的连接。这种动态的连接支持动态增删处理者，甚至改变他们的处理顺序。&lt;/p&gt;
&lt;h3 id=&#34;装饰模式&#34;&gt;&lt;a href=&#34;#装饰模式&#34; class=&#34;headerlink&#34; title=&#34;装饰模式&#34;&gt;&lt;/a&gt;装饰模式&lt;/h3&gt;&lt;p&gt;装饰模式也是一种比较常见的模式，它可以动态地为一个对象增加一些额外的功能，使用装饰器类返回对象比定义子类继承要来得更加灵活。在设计上，有下面几个角色：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;抽象构件，即被修饰的对象抽象&lt;/li&gt;
&lt;li&gt;具体构件，被修饰的客体&lt;/li&gt;
&lt;li&gt;装饰器，一般是一个抽象类，将具体装饰器的共性抽出来，&lt;strong&gt;其必有一个private属性指向原始的抽象构件&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;具体装饰器，装饰具体构件的原有方法，一般来说需要有所有与具体构件public方法同名的方法，&lt;strong&gt;且在方法内会使用到而非单纯替换原同名方法&lt;/strong&gt;（类似滚雪球的过程）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;它的使用类似下面：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 场景类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Scene&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;Component&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Component&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 装饰&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    c = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Decorator1&lt;/span&gt;(c);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 再次装饰&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    c = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Decorator2&lt;/span&gt;(c);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 执行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    c.exec();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;JavaScript中的&lt;code&gt;Object.create()&lt;/code&gt;和&lt;code&gt;Object.assign()&lt;/code&gt;和装饰模式有几分相似。&lt;/p&gt;
&lt;p&gt;它的优势在于装饰类间不相互耦合，且装饰次序可以灵活修改，可以很好地重构、替换继承关系。劣势在于包装层次过多时，不利于调试时发现错误。装饰模式一般用于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;动态增强一个类、对象的功能&lt;/li&gt;
&lt;li&gt;批量为一批对象或类改装或增加功能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总之就是使用继承总感觉小题大做的场合下（OOP语言中）。JS下扩展功能要容易很多。&lt;/p&gt;
&lt;h3 id=&#34;策略模式&#34;&gt;&lt;a href=&#34;#策略模式&#34; class=&#34;headerlink&#34; title=&#34;策略模式&#34;&gt;&lt;/a&gt;策略模式&lt;/h3&gt;&lt;p&gt;策略模式意为定义一组算法，将每个算法单独封装为可以相互替换的模块。在使用时，有三个主要角色：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;策略模块，被封装好的算法策略，屏蔽了高层逻辑对策略的直接访问（&lt;strong&gt;高内聚&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;抽象策略，抽出策略共性的接口，如下面的&lt;/li&gt;
&lt;li&gt;具体策略，具体的算法策略，包含具体的算法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在算法间可以自由切换、最好屏蔽算法细节时常用，比如Web编程中常见的&lt;strong&gt;表格验证&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; strategy = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;notEmpty&lt;/span&gt;: &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;val&lt;/span&gt; =&amp;gt;&lt;/span&gt; val.&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt; &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;name&lt;/span&gt;: &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;val&lt;/span&gt; =&amp;gt;&lt;/span&gt; val.&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt; &amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &amp;amp;&amp;amp; val.&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt; &amp;lt; &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;age&lt;/span&gt;: &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;val&lt;/span&gt; =&amp;gt;&lt;/span&gt; +val &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;password&lt;/span&gt;: &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;val&lt;/span&gt; =&amp;gt;&lt;/span&gt; val.&lt;span class=&#34;title function_&#34;&gt;match&lt;/span&gt;(&lt;span class=&#34;regexp&#34;&gt;/\d+&amp;#123;6,&amp;#125;/g&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; validator = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;rules&lt;/span&gt;: strategy,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;verify&lt;/span&gt;: &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;rule, val&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;rules&lt;/span&gt;[rule](val)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;formValidate&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;formData&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &amp;#123; name, age, password, introduction &amp;#125; = formData;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; validator.&lt;span class=&#34;title function_&#34;&gt;verify&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;name&amp;#x27;&lt;/span&gt;, name) &amp;amp;&amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      validator.&lt;span class=&#34;title function_&#34;&gt;verify&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;age&amp;#x27;&lt;/span&gt;, age) &amp;amp;&amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      validator.&lt;span class=&#34;title function_&#34;&gt;verify&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;password&amp;#x27;&lt;/span&gt;, password) &amp;amp;&amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      validator.&lt;span class=&#34;title function_&#34;&gt;verify&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;notEmpty&amp;#x27;&lt;/span&gt;, introduction);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;策略模式的优势在扩展性良好，同时避免了&lt;code&gt;if else&lt;/code&gt;以及&lt;code&gt;switch&lt;/code&gt;语句。它的问题也很明显，策略类增多时，会不好维护，同时所有策略类都需要对外暴露。当策略类数目膨胀时需要考虑到这些问题。同时，现在在哪些时机如何组合策略并没有严格定义，实际实现时，会参考建造者模式里一样，定义一个&lt;strong&gt;导演类&lt;/strong&gt;，把常用的组合方式定义出来。减少策略类的暴露。&lt;/p&gt;
&lt;h3 id=&#34;适配器模式&#34;&gt;&lt;a href=&#34;#适配器模式&#34; class=&#34;headerlink&#34; title=&#34;适配器模式&#34;&gt;&lt;/a&gt;适配器模式&lt;/h3&gt;&lt;p&gt;适配器模式即，把一个类的接口变成客户端期待的另一个接口，从而使原先不匹配的两个类能够一起工作。简单点说，就是加了一个中间层做翻译工作。这种模式下有三种角色：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;目标角色，即期望接口&lt;/li&gt;
&lt;li&gt;源角色，即原始接口&lt;/li&gt;
&lt;li&gt;适配器角色，即转换类&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在实现上，通常使用一个同时继承两个类的类作为中转。因为对象很轻量级，JS中就更容易实现了。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Target&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Target1&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Target&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 目标逻辑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Adaptee&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 原有逻辑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Adapter&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Adaptee&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Target&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;super&lt;/span&gt;.foo();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;它的优点在可以将两个不相关的类在一起运行，提高了类的复用程度，它通常用来救火，完成拓展。由于实际工程中，业务变更较常出现，适配器模式也很常用。&lt;/p&gt;
&lt;h4 id=&#34;拓展-1&#34;&gt;&lt;a href=&#34;#拓展-1&#34; class=&#34;headerlink&#34; title=&#34;拓展&#34;&gt;&lt;/a&gt;拓展&lt;/h4&gt;&lt;p&gt;如需要多适配一的场景，此时无法多继承（Java），在适配类中引用多个类即可。&lt;/p&gt;
&lt;h3 id=&#34;迭代器模式&#34;&gt;&lt;a href=&#34;#迭代器模式&#34; class=&#34;headerlink&#34; title=&#34;迭代器模式&#34;&gt;&lt;/a&gt;迭代器模式&lt;/h3&gt;&lt;p&gt;迭代器模式，顾名思义是提供一种方法按顺序访问容器中的每个元素，而&lt;strong&gt;无需暴露容器的细节&lt;/strong&gt;。在实现时，通常要自己实现一个迭代器。Java中通过拓展&lt;code&gt;java.util.Iterator&lt;/code&gt;实现，JavaScript中，则通过封装数组实现。实现时，要考虑下面几个方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;判断是否到达尾部&lt;/li&gt;
&lt;li&gt;返回下一个元素&lt;/li&gt;
&lt;li&gt;删除当前元素&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;像下面这样&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 迭代器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Iterator&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Object &lt;span class=&#34;title function_&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;hasNext&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;remove&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 容器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Demo&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Object o)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;remove&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Object o)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Iterator &lt;span class=&#34;title function_&#34;&gt;iterator&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;现在所有高级语言基本都有这个接口或基础实现。这个模式已经很少用到。&lt;/p&gt;
&lt;h3 id=&#34;组合模式&#34;&gt;&lt;a href=&#34;#组合模式&#34; class=&#34;headerlink&#34; title=&#34;组合模式&#34;&gt;&lt;/a&gt;组合模式&lt;/h3&gt;&lt;p&gt;组合模式用在表示&lt;strong&gt;树状结构的数据&lt;/strong&gt;中，使用户对单个对象和组合对象使用具有一致性。组合模式下有三种角色：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Component，节点抽象角色，参与组合对象的共有方法和属性&lt;/li&gt;
&lt;li&gt;Leaf，叶子对象，遍历的最小单位&lt;/li&gt;
&lt;li&gt;Composite，树枝节点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用JavaScript表示，就像下面这样。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; node = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;commonMethod&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; branchNode = &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;create&lt;/span&gt;(node);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; leafNode = &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;create&lt;/span&gt;(node);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;branchNode = &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;create&lt;/span&gt;(branch, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;children&lt;/span&gt;: [],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;add&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;node&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    children.&lt;span class=&#34;title function_&#34;&gt;push&lt;/span&gt;(node);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;remove&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;index&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    children.&lt;span class=&#34;title function_&#34;&gt;splice&lt;/span&gt;(index,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    children.&lt;span class=&#34;title function_&#34;&gt;forEach&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;child&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123; &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(child); &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;leafNode = &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;create&lt;/span&gt;(leafNode, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// ...重写node的同名方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;组合模式在表示整合局部的关系时很有用，但是由于树枝节点和叶子节点的使用方式不同，在使用两种节点时，需要直接调用接口的实现类，这一点违背了依赖导致原则（面向接口编程）。使用上分为透明模式和安全模式，后者就像上面一样，在实现类上区分开树枝和叶子节点，透明模式下，所有的方法均抽象到抽象类中实现，而在叶子节点调用不合法方法时抛出异常。&lt;/p&gt;
&lt;p&gt;综上来看，组合模式即使用用数据结构描述一颗多叉树。&lt;/p&gt;
&lt;h3 id=&#34;观察者模式&#34;&gt;&lt;a href=&#34;#观察者模式&#34; class=&#34;headerlink&#34; title=&#34;观察者模式&#34;&gt;&lt;/a&gt;观察者模式&lt;/h3&gt;&lt;p&gt;观察者模式，也叫发布订阅模式，可以说是前端最熟悉也是最常见的一种设计模式了。小到页面事件监听，大到Vue的设计原理都能看到观察者模式的影子。它的内涵在将信息流从原来的&lt;strong&gt;pull变成push&lt;/strong&gt;。从而不需要使用&lt;code&gt;while&lt;/code&gt;，&lt;code&gt;setInterval&lt;/code&gt;这种很消耗资源的方式。代价是，需要硬编码到被监听者中，在状态改变时，push信息到监听者那里。通常实现时，这个过程可以抽象到很底层完成，如Vue使用&lt;code&gt;Object.defineProperty&lt;/code&gt;，并不影响整体实现。另外，为了实现多对多的监听，往往需要在被监听者和监听者之间增加spy（或者叫probe）这样的角色进行中转和广播通知。&lt;/p&gt;
&lt;p&gt;这时候可以定义&lt;code&gt;Observable&lt;/code&gt;接口，当然了，它需要可以增删监听者和在发生事件后提醒监听者。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Observer o)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Observer o)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;notify&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String text)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;IFoo&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;work&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Observer&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String text)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Victim&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt;, IFoo &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; ArrayList&amp;lt;Observer&amp;gt; oList = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;Observer&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Observer o)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.oList.add(o);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Observer o)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.oList.remove(o);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;notify&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String text)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (Observer o: oList) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      o.update(text);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;work&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.notify(&lt;span class=&#34;string&#34;&gt;&amp;quot;Working...&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.notify(&lt;span class=&#34;string&#34;&gt;&amp;quot;Sleeping...&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;一个简单的JavaScript实现如下：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;EventUtil&lt;/span&gt; = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 全局事件管理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; events = &amp;#123;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 注册事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    on = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;type, handler&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (events[type]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        events[type].&lt;span class=&#34;title function_&#34;&gt;push&lt;/span&gt;(handler);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        events[type] = [handler];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 触发事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    emit = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;type&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!events[type]) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, len = events[type].&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt;; i &amp;lt; len; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        events[type][i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;观察者模式的优势在于在两个对象有&lt;strong&gt;频繁信息交互或希望监听特定时机&lt;/strong&gt;时很有用，当信息很多时，可以考虑增加中间层，设计消息队列处理。Java本身也提供&lt;code&gt;java.util.Observer&lt;/code&gt;和&lt;code&gt;java.util.Observable&lt;/code&gt;用来实现这种模式。&lt;/p&gt;
&lt;p&gt;建立在观察者模式的基础上，有响应式编程这样新的编程范式出现，&lt;a href=&#34;http://reactivex.io/&#34;&gt;ReactiveX&lt;/a&gt;就是在这种范式基础上推出的多语言框架。JavaScript版本的叫做&lt;a href=&#34;http://reactivex.io/rxjs/manual/overview.html&#34;&gt;RxJS&lt;/a&gt;，相信看完这个简介对你会非常有帮助。&lt;/p&gt;
&lt;h3 id=&#34;门面模式&#34;&gt;&lt;a href=&#34;#门面模式&#34; class=&#34;headerlink&#34; title=&#34;门面模式&#34;&gt;&lt;/a&gt;门面模式&lt;/h3&gt;&lt;p&gt;门面模式又叫外观模式，它要求所有子系统与外部通信时必须使用统一的对象进行，提供高层的接口，尽量掩盖不必要的业务细节，使得子系统更易用。因为实现起来重点在于统一通信数据格式和封装业务细节。这种模式也非常常用。比如在通常的前后端协调时，后端回传前端请求的数据通常都是统一的格式，避免错误同时减少前端工作量。比如下面这样。同样，有时后端也会要求前端在请求时使用统一的数据格式（不常见）。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; successRet = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 错误码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;code&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 返回数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;data&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;userInfo&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;0000001&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; errorRet = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;code&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;0002&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 错误原因&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;message&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;请求过于频繁！&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;门面模式可以极大地提升封装性，增加系统的高内聚，同时也减少了系统内外的耦合，提高了灵活度和安全性。劣势在于对扩展不利，所有的改动几乎都要对应到门面（Facade）类的硬编码。因此门面模式的使用场景是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为一个复杂的系统或模块提供对外接口&lt;/li&gt;
&lt;li&gt;子系统间相对独立&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通常情况下，门面类只负责聚合，不参与具体的子系统逻辑。另外，在系统庞大时，很可能有不止一个门面入口。后端接口微服务化的趋势下，在系统内，拆分原来庞大的接口，同时面向前端不同设备，设计不同的服务汇合接入点正是门面模式的体现。&lt;/p&gt;
&lt;h3 id=&#34;备忘录模式&#34;&gt;&lt;a href=&#34;#备忘录模式&#34; class=&#34;headerlink&#34; title=&#34;备忘录模式&#34;&gt;&lt;/a&gt;备忘录模式&lt;/h3&gt;&lt;p&gt;备忘录模式即，在不破坏封装性的前提下，捕获一个对象的内部状态，在对象外保存，并在合适的时候可以将对象恢复到保存的状态。这个概念很简单，涉及到三个角色：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发起人，需要记录状态的对象&lt;/li&gt;
&lt;li&gt;备忘录， 用来储存状态&lt;/li&gt;
&lt;li&gt;备忘录管理者，对备忘录进行管理，保存和恢复&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Memorial&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;state&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;memorize&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Memento&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;state&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;restore&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;memento&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;state&lt;/span&gt; = memento.&lt;span class=&#34;property&#34;&gt;state&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Memento&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;state&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;state&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;state&lt;/span&gt; = state;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Manager&lt;/span&gt; = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;memento&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; m = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Memorial&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Manager&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;memento&lt;/span&gt; = &lt;span class=&#34;title class_&#34;&gt;Memorial&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;memorize&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Memorize&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;restore&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;Manager&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;memento&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;它的优点很明显，可以保存和回复状态，支持回滚事务。但在使用时，通常是结合了别的设计模式的变种。&lt;/p&gt;
&lt;h4 id=&#34;拓展-2&#34;&gt;&lt;a href=&#34;#拓展-2&#34; class=&#34;headerlink&#34; title=&#34;拓展&#34;&gt;&lt;/a&gt;拓展&lt;/h4&gt;&lt;p&gt;结合原型模式，可以直接用clone对象的方式保存状态。这么做问题是当状态对象较大时，会有时间和空间的开销，优势是可以直接将状态存储在类内部，避免了其余类的定义。&lt;/p&gt;
&lt;p&gt;在多状态存储上，Java可以借用BeanUtil工具类（书中所说），JavaScript中就灵活很多了（还是因为轻量级的对象）。同样的多备忘录模式就不再赘述。另外，需要保证备忘录的保密性时，封装成业务类的内置类，设置权限为&lt;code&gt;private&lt;/code&gt;即可，JS中同理。&lt;/p&gt;
&lt;h3 id=&#34;访问者模式&#34;&gt;&lt;a href=&#34;#访问者模式&#34; class=&#34;headerlink&#34; title=&#34;访问者模式&#34;&gt;&lt;/a&gt;访问者模式&lt;/h3&gt;&lt;p&gt;访问者模式指，封装作用在数据结构上各元素的操作，它可以在不改变数据的前提下定义新的对于元素的操作。实现原理上，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;被访问类新增访问方法（如&lt;code&gt;accept&lt;/code&gt;），注入访问类，同时将自己交给访问类&lt;/li&gt;
&lt;li&gt;访问类根据得到的被访问类对象，执行想要的操作&lt;/li&gt;
&lt;li&gt;场景类中通过调用访问方法访问被访问类&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Element&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;accept&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(IVisitor v)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Element&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 注入访问类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;accept&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(IVisitor v)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    visitor.visit(&lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;IVisitor&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 通过重载对不同元素定义不同的访问方式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;visit&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Element e)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;visit&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(OtherElement e)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;当然，为了保证依赖倒置原则，被访问类和访问类都可以再抽象出抽象类和接口。另外，访问者模式通常和组合模式、迭代器模式一同出现。访问者模式的优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;符合单一职责原则&lt;/li&gt;
&lt;li&gt;拓展性优秀&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点在于，被访问者要暴露细节给访问者，通常会增加很多约定，使代码不稳定。另外重载中依赖的是具体元素违背了依赖倒置原则。&lt;/p&gt;
&lt;p&gt;访问器模式的应用场景&lt;strong&gt;通常是使用迭代器模式已经不能满足的场合&lt;/strong&gt;。比如对不同的元素有不同的遍历操作，甚至涉及到元素内部的逻辑。使用访问器模式可以封装和掩盖这种差异性。&lt;/p&gt;
&lt;h4 id=&#34;拓展-3&#34;&gt;&lt;a href=&#34;#拓展-3&#34; class=&#34;headerlink&#34; title=&#34;拓展&#34;&gt;&lt;/a&gt;拓展&lt;/h4&gt;&lt;p&gt;在访问器模式和迭代器模式一同出现时，可以增加统计功能，在每次访问元素时收集统计信息。在往深处拓展，甚至可以抽象访问器为接口，从而拓展不同类型的访问器，如用来展示数据和用来统计数据的。&lt;/p&gt;
&lt;h3 id=&#34;状态模式&#34;&gt;&lt;a href=&#34;#状态模式&#34; class=&#34;headerlink&#34; title=&#34;状态模式&#34;&gt;&lt;/a&gt;状态模式&lt;/h3&gt;&lt;p&gt;这种模式就很好理解了。即将客体抽象成一个&lt;strong&gt;有限状态机&lt;/strong&gt;，客体有一个初始状态，在某特定时机下会跃迁到另一状态，且状态间的跳转是有规律可循的。这种模式在编程中非常常见，自然语言分析、所有可以用马尔科夫过程描述的事物变化都可以抽象成状态模式实现。在实现时，主要要完成三方面工作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义&lt;strong&gt;所有状态&lt;/strong&gt;，根据状态的薄厚程度，用常量或类定义&lt;/li&gt;
&lt;li&gt;定义修改状态的行为，在方法内往往要根据上一时刻状态做判断，这些行为定义在状态内部&lt;/li&gt;
&lt;li&gt;在上下文中调用这些行为&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在实现时，为了避免&lt;code&gt;switch&lt;/code&gt;语句，会使用一个上下文类，托管当前状态，在状态切换时，先调用状态类中的行为，再通知上下文类更换托管的状态。两者相互注入。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;State&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 注入上下文对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; Context c;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 设置上下文&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;setContext&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Context c)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.context = c;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 行为&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;action1&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;action2&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;State1&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;action1&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;action2&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;super&lt;/span&gt;.context.setState(Context.STATE2);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 切换到state2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;super&lt;/span&gt;.context.handleAction2();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Context&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 注入所有状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;state&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;STATE1&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;State1&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;state&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;STATE2&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;State2&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; State CurrState;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; State &lt;span class=&#34;title function_&#34;&gt;getState&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.CurrState;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 设置当前状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;setState&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(State currState)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.currState = currState;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 切换当前状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.CurrState.setContext(&lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 行为委托&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;handleAction1&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.CurrState.action1();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;handleAction2&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.CurrState.action2();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;增加了上下文类Context后，避免了大量的&lt;code&gt;switch&lt;/code&gt;语句，问题是，状态较多时，定义的类也会较多。状态模式在工作流开发中很常用。&lt;/p&gt;
&lt;h3 id=&#34;解释器模式&#34;&gt;&lt;a href=&#34;#解释器模式&#34; class=&#34;headerlink&#34; title=&#34;解释器模式&#34;&gt;&lt;/a&gt;解释器模式&lt;/h3&gt;&lt;p&gt;解释器模式顾名思义，即定义一个解释器，去按文法解释一种语言中的句子。当然这个语言以科学运算和编程语句居多。它的应用场景比较特殊，即需要语句解析介入的场景，比如自然语言分析、或者真的编写一个语言的解释器。通常开发解释器工程量和难度都较大，且会遇到效率问题。一般应用较少。&lt;/p&gt;
&lt;p&gt;在这个模式下。主要有下面这些角色；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;抽象解释器，用来派生具体的表达式解释器&lt;/li&gt;
&lt;li&gt;终结符解释器，即不需要解释的，字面意义的符号，比如&lt;code&gt;1&lt;/code&gt;或&lt;code&gt;a&lt;/code&gt;等&lt;/li&gt;
&lt;li&gt;非终结符解释器，和两边表达式相关联的符号解释器，比如&lt;code&gt;+&lt;/code&gt;或&lt;code&gt;*&lt;/code&gt;等&lt;/li&gt;
&lt;li&gt;上下文角色&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;享元模式&#34;&gt;&lt;a href=&#34;#享元模式&#34; class=&#34;headerlink&#34; title=&#34;享元模式&#34;&gt;&lt;/a&gt;享元模式&lt;/h3&gt;&lt;p&gt;享元模式是一种重要的池技术，原理上指使用共享对象支持大量的细粒度的对象。我们可以将这些对象内的状态拆分成可共享状态和不可共享状态。对象往往可以按可共享状态拆分为细粒度较大的若干部分，放在共享对象池中，再贴上自己的不可共享状态。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 享元&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;SharedObject&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; String intrinsic;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 共享的状态作为享元的key&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; String Extrinsic;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 共享的状态需要可以设置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;SharedObject&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String E)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.Extrinsic = E;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 业务方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 不可共享状态的getter/setter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;title function_&#34;&gt;getIntrinsic&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; intrinsic;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;setIntrinsic&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String intrinsic)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.intrinsic = intrinsic;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 享元工厂&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;SharedObjectFactory&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 共享池&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; HashMap&amp;lt;String, SharedObject&amp;gt; pool = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;HashMap&lt;/span&gt;&amp;lt;String, SharedObject&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 工厂方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; SharedObject &lt;span class=&#34;title function_&#34;&gt;getSharedObject&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String Extrinsic)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;SharedObject&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;o&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 从池中寻找&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (pool.containsKey(Extrinsic)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      o = pool.get(Extrinsic);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      o = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;SharedObject1&lt;/span&gt;(Extrinsic);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// 放到池中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      pool.put(Extrinsic, o);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; o;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在共享对象池中，建议使用可共享状态的简单组合构成池内元素的key值（最好是基本类型），一方面减少编程负担，另一方面还可以提高工作效率。享元模式主要使用在下面场景下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统中存在大量相似对象&lt;/li&gt;
&lt;li&gt;对象具备相近的外部状态和与环境无关的内部状态&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;桥梁模式&#34;&gt;&lt;a href=&#34;#桥梁模式&#34; class=&#34;headerlink&#34; title=&#34;桥梁模式&#34;&gt;&lt;/a&gt;桥梁模式&lt;/h3&gt;&lt;p&gt;桥梁模式又叫桥接模式，是比较轻量级的一种设计模式，意为将抽象和实现解耦，使两者可以独立变化。角色上，桥梁模式分为主体和客体，在主体内注入客体的接口&amp;#x2F;抽象类，并在主体的方法内使用，提供setter或构造函数方法。这样继承自主体的类就可以根据传入setter&amp;#x2F;构造函数的客体实现类的不同得到不同的实现结果。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 基本方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Object1&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 自己的逻辑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Object2&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 自己的逻辑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Subject&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 必须有一个注入的客体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; Object o;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 必须可以通过构造函数/setter注入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;Subject&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Object o)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.o = o;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 获得客体行为&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.o.foo();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 获得客体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Object &lt;span class=&#34;title function_&#34;&gt;getObject&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; o;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Subject1&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Subject&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 覆写构造函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;Subject1&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Object o)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;super&lt;/span&gt;(o);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 自身业务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;super&lt;/span&gt;.bar();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ... 其余业务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Scene&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;o&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Object1&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;Subject&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Subject1&lt;/span&gt;(o);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    s.bar();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;桥梁模式的扩展能力很强，它是&lt;strong&gt;对普通的继承的一种灵活的补充&lt;/strong&gt;，避免了父类对子类的强侵入，可以将父类可能会变化的部分抽出去，通过注入的方式引入，方便子类随时更换。&lt;/p&gt;
&lt;h2 id=&#34;设计模式的比较&#34;&gt;&lt;a href=&#34;#设计模式的比较&#34; class=&#34;headerlink&#34; title=&#34;设计模式的比较&#34;&gt;&lt;/a&gt;设计模式的比较&lt;/h2&gt;&lt;h3 id=&#34;创建类&#34;&gt;&lt;a href=&#34;#创建类&#34; class=&#34;headerlink&#34; title=&#34;创建类&#34;&gt;&lt;/a&gt;创建类&lt;/h3&gt;&lt;p&gt;和创建类相关的模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;工厂模式&lt;/li&gt;
&lt;li&gt;抽象工厂模式&lt;/li&gt;
&lt;li&gt;建造者模式&lt;/li&gt;
&lt;li&gt;单例模式&lt;/li&gt;
&lt;li&gt;原型模式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;后两者容易理解。重点对比上面三个模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;工厂模式注重&lt;strong&gt;整体的构建过程&lt;/strong&gt;，成产出的对象具有很强的&lt;strong&gt;相似性&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;建造者模式注重&lt;strong&gt;建造的过程&lt;/strong&gt;，希望在每一步最好都可定制，根据步骤的不同生产出差异化的对象，&lt;strong&gt;通常伴生导演类&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;抽象工厂模式通常和&lt;strong&gt;产品族&lt;/strong&gt;关系密切，尤其是一组事物有很明显的两个或多个划分方法时使用，其余等同工厂模式&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;结构类&#34;&gt;&lt;a href=&#34;#结构类&#34; class=&#34;headerlink&#34; title=&#34;结构类&#34;&gt;&lt;/a&gt;结构类&lt;/h3&gt;&lt;p&gt;结构类指调整或组合类产生更大结构来适应更高层次逻辑需求，大多通过增加中间层解决问题，有下面的相关模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;适配器模式&lt;/li&gt;
&lt;li&gt;桥梁模式&lt;/li&gt;
&lt;li&gt;组合模式&lt;/li&gt;
&lt;li&gt;装饰模式&lt;/li&gt;
&lt;li&gt;门面模式&lt;/li&gt;
&lt;li&gt;享元模式&lt;/li&gt;
&lt;li&gt;代理模式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中简单明了的有桥梁模式、组合模式、门面模式、享元模式，下面对比下其他的几种模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代理模式即在原对象和用户间增加了一个中间层，在不改变原接口的情况下，&lt;strong&gt;增加准入和限定操作&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;装饰模式是代理模式的加强，装饰类并不起中间层的作用，不做准入判断，它&lt;strong&gt;单纯地在原接口上增强或削弱功能&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;适配器模式和它们差别较大，它也起包装作用，作用于两个不同的对象，重点在&lt;strong&gt;伪装和转换&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;行为类&#34;&gt;&lt;a href=&#34;#行为类&#34; class=&#34;headerlink&#34; title=&#34;行为类&#34;&gt;&lt;/a&gt;行为类&lt;/h3&gt;&lt;p&gt;这一批模式重点在修饰类的行为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;责任链模式&lt;/li&gt;
&lt;li&gt;命令模式&lt;/li&gt;
&lt;li&gt;解释器模式&lt;/li&gt;
&lt;li&gt;迭代器模式&lt;/li&gt;
&lt;li&gt;中介者模式&lt;/li&gt;
&lt;li&gt;备忘录模式&lt;/li&gt;
&lt;li&gt;观察者模式&lt;/li&gt;
&lt;li&gt;状态模式&lt;/li&gt;
&lt;li&gt;策略模式&lt;/li&gt;
&lt;li&gt;模板方法模式&lt;/li&gt;
&lt;li&gt;访问者模式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面比较一些类似的模式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;命令模式强调把&lt;strong&gt;动作解耦&lt;/strong&gt;，将其分为&lt;strong&gt;执行对象和执行行为&lt;/strong&gt;，在行为类内部注入执行对象，使用执行者操作命令&lt;/li&gt;
&lt;li&gt;策略模式强调包装&lt;strong&gt;对等的可替换的多个算法&lt;/strong&gt;，通常有一个上下文类，封装所有的算法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比如在表单验证时，策略模式会将所有的验证规则对等地定义出来，再由一个表单验证上下文对象包裹起来；命令模式下，首先要明确所有验证规则的接受者（Receiver），再定义所有的验证“命令”，最后由执行者（Invoker）操作命令完成工作，具体工作是在接受者那里完成的，命令只负责组织。&lt;/p&gt;
&lt;p&gt;关于策略模式和状态模式，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;策略模式没有状态的概念，虽然有上下文类&lt;code&gt;Context&lt;/code&gt;，但是切换的状态只是不同的算法而已&lt;/li&gt;
&lt;li&gt;状态模式重点关注状态，它同样有上下文类&lt;code&gt;Context&lt;/code&gt;，但&lt;strong&gt;相同的行为在不同的状态下产生的结果不同&lt;/strong&gt;。在实现上体现在，上下文类内保存了当前状态，虽然状态间都有相同方法，但实现不同。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;至于观察者模式和责任链模式，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;观察者模式重点在&lt;strong&gt;观察和被观察的关系&lt;/strong&gt;（想想事件监听），被观察者中需要注入监听者（Observable），再由监听者告知观察者（Observer），整条链是有回调的，链上传递的信息可以自由变化，即最后返回给用户数据的总是第一个被观察者&lt;/li&gt;
&lt;li&gt;责任链模式重点在&lt;strong&gt;事务链条化处理&lt;/strong&gt;的过程（想想中间件），每个处理者都必须通过&lt;code&gt;next&lt;/code&gt;属性明确指定下一个目标，整条链是责任链，链上角色相互平等，传递的信息一般不会改变结构，最终由最后一个角色返回结果&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;其他&#34;&gt;&lt;a href=&#34;#其他&#34; class=&#34;headerlink&#34; title=&#34;其他&#34;&gt;&lt;/a&gt;其他&lt;/h3&gt;&lt;p&gt;首先先来比较策略模式和桥梁模式。它俩的共同点在都有一个注入依赖关系。策略模式中算法封装被注入到上下文类&lt;code&gt;Context&lt;/code&gt;中，桥梁模式中差异化继承的部分被单独抽出再注入父类里。它们的区别主要在：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;策略模式着重于封装一系列不同的行为&lt;/li&gt;
&lt;li&gt;桥梁模式在不破坏封装的情况下将差异化的实现部分从抽象部分抽取出来，因此必然有抽象化角色和实现化角色&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;门面模式和中介者模式就比较好区分了，它们的应用场景有很大不同;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;门面模式用来掩盖下面复杂的子系统，提供统一的高层接口（“金玉其外”），它并不管下面的子系统间怎样耦合（“败絮其中”）&lt;/li&gt;
&lt;li&gt;中介者模式要用在同事对象间（通常至少3个）复杂交互时，化网状结构为星型结构，减少耦合&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后，代理模式、装饰模式、适配器模式（不严格）、桥梁模式、门面模式都可以总结为&lt;strong&gt;包装模式&lt;/strong&gt;，它们并没有为原来的类增加新的功能，只是增加了新的包装或插件。&lt;/p&gt;
&lt;h2 id=&#34;设计模式的组合&#34;&gt;&lt;a href=&#34;#设计模式的组合&#34; class=&#34;headerlink&#34; title=&#34;设计模式的组合&#34;&gt;&lt;/a&gt;设计模式的组合&lt;/h2&gt;&lt;h3 id=&#34;shell命令解释demo&#34;&gt;&lt;a href=&#34;#shell命令解释demo&#34; class=&#34;headerlink&#34; title=&#34;shell命令解释demo&#34;&gt;&lt;/a&gt;shell命令解释demo&lt;/h3&gt;&lt;p&gt;主要采用命令模式、责任链模式、模板方法模式。&lt;/p&gt;
&lt;h3 id=&#34;银行扣款demo&#34;&gt;&lt;a href=&#34;#银行扣款demo&#34; class=&#34;headerlink&#34; title=&#34;银行扣款demo&#34;&gt;&lt;/a&gt;银行扣款demo&lt;/h3&gt;&lt;p&gt;主要采用策略模式、工厂方法模式、门面模式&lt;/p&gt;
&lt;h3 id=&#34;产品消费事件demo&#34;&gt;&lt;a href=&#34;#产品消费事件demo&#34; class=&#34;headerlink&#34; title=&#34;产品消费事件demo&#34;&gt;&lt;/a&gt;产品消费事件demo&lt;/h3&gt;&lt;p&gt;产品创建时摄影工厂模式，保证产品和工厂的紧耦合，避免创建事件不触发的可能性&lt;/p&gt;
&lt;h2 id=&#34;新模式&#34;&gt;&lt;a href=&#34;#新模式&#34; class=&#34;headerlink&#34; title=&#34;新模式&#34;&gt;&lt;/a&gt;新模式&lt;/h2&gt;&lt;h3 id=&#34;MVC&#34;&gt;&lt;a href=&#34;#MVC&#34; class=&#34;headerlink&#34; title=&#34;MVC&#34;&gt;&lt;/a&gt;MVC&lt;/h3&gt;&lt;p&gt;MVC其实算不上一种新模式，但是从上世纪90年代起到现在实在是太流行了。它的目的是通过C（Controller）将模型M（Model）和视图V（View）分离开。书中具体在讲MVC在Java Web开发中的实现，这里从略。&lt;/p&gt;
&lt;h3 id=&#34;规格书模式&#34;&gt;&lt;a href=&#34;#规格书模式&#34; class=&#34;headerlink&#34; title=&#34;规格书模式&#34;&gt;&lt;/a&gt;规格书模式&lt;/h3&gt;&lt;p&gt;规格书模式多用在描述一个规范或条件的场合下，比如“性别男年龄大于20且位于北京”。通过定义抽象类以及&lt;code&gt;AND&lt;/code&gt;，&lt;code&gt;OR&lt;/code&gt;，&lt;code&gt;NOT&lt;/code&gt;等的组合，可以得到更复杂的规格书对象。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ISpec&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;isSatisfied&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Object o)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; ISpec &lt;span class=&#34;title function_&#34;&gt;and&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(ISpec s)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; ISpec &lt;span class=&#34;title function_&#34;&gt;or&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(ISpec s)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; ISpec &lt;span class=&#34;title function_&#34;&gt;not&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(ISpec s)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; Spec &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ISpec&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;isSatisfied&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Object o)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; ISpec &lt;span class=&#34;title function_&#34;&gt;and&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(ISpec s)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AndSpec&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;, spec);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; ISpec &lt;span class=&#34;title function_&#34;&gt;or&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(ISpec s)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; newOrSpec(&lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;, spec);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; ISpec &lt;span class=&#34;title function_&#34;&gt;not&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; notSpec(&lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AndSpec&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Spec&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; ISpec left;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; ISpec right;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;AndSpec&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(ISpec left, ISpec right)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.left = left;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.right = right;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;isSatisfied&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Object o)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; left.isSatisfied(o) &amp;amp;&amp;amp; right.isSatisfied(o);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;OrSpec&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Spec&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; ISpec left;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; ISpec right;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;OrSpec&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(ISpec left, ISpec right)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.left = left;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.right = right;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;isSatisfied&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Object o)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; left.isSatisfied(o) || right.isSatisfied(o);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;NotSpec&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Spec&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; ISpec spec;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;NotSpec&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(ISpec s)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.spec = s;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;isSatisfied&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Object o)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; !&lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.spec.isSatisfied(o);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;bizSpec&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Spec&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; Object obj;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;bizSpec&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Object o)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.obj = o;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;isSatisfied&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Object o)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 根据业务逻辑决定真值判断&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;规格模式应用场景比较局限，在LINQ（Language INtegrated Query，语言集成查询）中常见，用来构造WHERE子句。&lt;/p&gt;
&lt;h3 id=&#34;对象池模式&#34;&gt;&lt;a href=&#34;#对象池模式&#34; class=&#34;headerlink&#34; title=&#34;对象池模式&#34;&gt;&lt;/a&gt;对象池模式&lt;/h3&gt;&lt;p&gt;对象池模式和享元模式相似，都是循环使用对象，但是对象池模式是整个直接取出到池中，避免初始化和释放资源时的消耗。如连接池和线程池就是常见的例子。&lt;/p&gt;
&lt;h3 id=&#34;雇工模式&#34;&gt;&lt;a href=&#34;#雇工模式&#34; class=&#34;headerlink&#34; title=&#34;雇工模式&#34;&gt;&lt;/a&gt;雇工模式&lt;/h3&gt;&lt;p&gt;雇工模式是常见的“接口-实现”的倒转实现。比如，小学老师教小学学生，中学老师教中学学生，大学老师教大学学生。在实现时，我们先定义学习接口，再实现所有的学生类。再实现老师时，直接调用学生接口的学习方法就完成了教学的实现。雇工模式为一组类提供通用的功能，不需要类实现这些功能，而在客体上实现功能。它和命令模式有相似之处。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;IService&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;serving&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;IService&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;serving&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 服务完成&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Servant&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;service&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(IService s)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    s.serving();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;黑板模式&#34;&gt;&lt;a href=&#34;#黑板模式&#34; class=&#34;headerlink&#34; title=&#34;黑板模式&#34;&gt;&lt;/a&gt;黑板模式&lt;/h3&gt;&lt;p&gt;黑板模式是观察者模式的拓展，它允许消息有多个读写者，且同时进行。消息生产者通过“黑板”这个总线，将消息传递给对应的消息消费者。这可以是一种宏观的设计理念，使用数据库或者消息队列当做“黑板”都是可以的。&lt;/p&gt;
&lt;h3 id=&#34;空对象模式&#34;&gt;&lt;a href=&#34;#空对象模式&#34; class=&#34;headerlink&#34; title=&#34;空对象模式&#34;&gt;&lt;/a&gt;空对象模式&lt;/h3&gt;&lt;p&gt;空对象通过实现一个无意义的默认类避免程序出现null值。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;NullAnimal&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Animal&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; makeSound &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 什么都不写&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;–END–&lt;/em&gt;&lt;/p&gt;
</content>
        <category term="JavaScript" />
        <category term="设计模式" />
        <category term="类" />
        <category term="接口" />
        <category term="抽象类" />
        <updated>2018-01-22T09:28:45.000Z</updated>
    </entry>
</feed>
