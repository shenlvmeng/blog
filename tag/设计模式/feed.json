{
    "version": "https://jsonfeed.org/version/1",
    "title": "Shenlvmeng's Blog • All posts by \"设计模式\" tag",
    "description": "Be sharp, my friend.",
    "home_page_url": "http://shenlvmeng.github.com/blog",
    "items": [
        {
            "id": "http://shenlvmeng.github.com/blog/2021/01/29/zen-of-unix/",
            "url": "http://shenlvmeng.github.com/blog/2021/01/29/zen-of-unix/",
            "title": "Unix编程艺术集萃",
            "date_published": "2021-01-29T13:45:15.000Z",
            "content_html": "<p>这本书从Unix的设计理念等各方面讲起，内容充实有趣，尽管介绍细节的部分对于不太了解Unix的人呢来讲有些生涩，但在道的介绍上有不少可取之处。由于某人的出现，生活中多了新的追求，比想象中多用了一些时间看完了它。下面摘取一些其中精华的观点，力图尽量还原书中的本意。</p>\n<h2 id=\"Context\"><a href=\"#Context\" class=\"headerlink\" title=\"Context\"></a>Context</h2><h3 id=\"哲学\"><a href=\"#哲学\" class=\"headerlink\" title=\"哲学\"></a>哲学</h3><ul>\n<li>每过18个月，就有一半的知识会过时</li>\n<li>X致力提供一套“机制，而不是策略”</li>\n<li>提供机制而不是方针的哲学让Unix长期保鲜</li>\n<li>Unix传统将重点放在尽力使各程序接口相对小巧、简洁、正交</li>\n<li>Unix管道发明人Doug McIlroy曾说过：<ul>\n<li>让每个程序就做好一件事</li>\n<li>假定每个程序的输出都会成为另个程序的输入</li>\n<li>尽早将设计和编译的软件投入使用</li>\n<li>优先使用工具而不是拙劣的帮助来减轻编程任务的负担</li>\n</ul>\n</li>\n<li>Rob Pike曾从不同的角度表述了Unix的哲学<ul>\n<li>你无法断定程序会在什么地方好费时间，所以别急于找地方改代码，除非你已经证实那儿就是瓶颈所在</li>\n<li>没对代码估量最耗时的部分前，别去优化速度</li>\n<li>花哨的算法在n很小的时候通常很慢，而n一般很小</li>\n<li>花哨的算法比简单算法更容易出bug、更难实现</li>\n<li>编程的核心是数据结构，而不是算法</li>\n</ul>\n</li>\n<li>书中对Unix的哲学，总结为下面这些点<ul>\n<li><strong>模块原则</strong>，使用简洁的接口拼接简单的部件</li>\n<li><strong>清晰原则</strong>，清晰胜于机巧，程序是写给人看的</li>\n<li><strong>组合原则</strong>，设计时要考虑拼接组合</li>\n<li><strong>分离原则</strong>，策略和机制分离，接口和引擎分离</li>\n<li><strong>简洁原则</strong>，设计要简洁，复杂度能低则低</li>\n<li><strong>吝啬原则</strong>，除非没有办法，不要写大程序</li>\n<li><strong>透明性原则</strong>，设计要有<strong>可见性</strong>（如输入输出、打点上报），便于审查和调试</li>\n<li><strong>健壮原则</strong>，健壮源于透明和简洁</li>\n<li><strong>表示原则</strong>，把知识转移到数据中，保证逻辑的简朴而健壮</li>\n<li><strong>通俗原则</strong>，即最少惊奇原则，接口设计避免标新立异，缓和学习曲线</li>\n<li><strong>缄默原则</strong>，设计良好的程序将用户的注意力视为有限的宝贵资源</li>\n<li><strong>补救原则</strong>，出现异常时，马上退出并给出错误信息</li>\n<li><strong>经济原则</strong>，宁花机器1分，不花程序员1秒</li>\n<li><strong>生成原则</strong>，避免手工hack，编写程序去生成程序</li>\n<li><strong>优化原则</strong>，过早优化会妨碍全局优化，先制作原型，再精雕细琢；先可用，再优化</li>\n<li><strong>多样原则</strong>，不相信“不二法门”的断言</li>\n<li><strong>扩展原则</strong>，未来总比预想来得要快</li>\n</ul>\n</li>\n<li>Unix哲学一言以蔽之，即KISS（Keep It Simple, Stupid!）</li>\n<li>善用他人写好的工具，尽可能将一切自动化</li>\n</ul>\n<h3 id=\"历史\"><a href=\"#历史\" class=\"headerlink\" title=\"历史\"></a>历史</h3><ul>\n<li>计算机不应仅被视为一种逻辑设备而更应视为社群的立足点</li>\n<li>1985年IEEE支持的POSIX标准表述了BSD和SVR3（System V Release3）调用的交集</li>\n<li>1987年初，GNU C编译器第一版问世</li>\n<li>1995年，Linux找到自己的杀手级应用——开源的web服务器Apache</li>\n<li>过度依赖任何一种技术或者商业模式都是错误的</li>\n</ul>\n<h3 id=\"Unix哲学和其他哲学的对比\"><a href=\"#Unix哲学和其他哲学的对比\" class=\"headerlink\" title=\"Unix哲学和其他哲学的对比\"></a>Unix哲学和其他哲学的对比</h3><ul>\n<li>统一性理念：一切皆文件 &amp; 管道概念</li>\n<li>多任务能力：抢先式多任务</li>\n<li>协作进程：低价的进程生成和简便的进程间通讯</li>\n<li>内部边界：程序员最清楚一切</li>\n<li>文件属性和记录结构：没有文件属性</li>\n<li>减少使用不透明的二进制文件格式</li>\n<li>首选CLI命令行界面</li>\n<li>Unix是程序员写给程序员的</li>\n<li>开发的门槛：轻松编程</li>\n<li>操作系统的比较<ul>\n<li>MacOS：MacOS有一个自己的界面方针，非常详细地说明了应用程序GUI的表现形式和行为模式</li>\n<li>Windows NT：有注册表蠕变现象，不过支持了Cygwin，实现了Unix API的兼容</li>\n<li>MVS：一切皆批处理</li>\n<li>Linux：贴近终端用户的愿望使得Linux开发者比专有Unix更注重系统安装的平稳性和软件发布问题</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Design\"><a href=\"#Design\" class=\"headerlink\" title=\"Design\"></a>Design</h2><h3 id=\"模块性\"><a href=\"#模块性\" class=\"headerlink\" title=\"模块性\"></a>模块性</h3><ul>\n<li>展开来说就是，要编写复杂软件又不至于一败涂地的唯一方法就是用定义清晰的接口把若干简单模块组合起来</li>\n<li>Unix程序员骨子里的传统是：更加笃信重视模块化、更注重正交性和紧凑性等问题</li>\n<li>封装良好的模块不会过多向外披露自身的细节</li>\n<li>缺陷个数随着模块的代码行数会先减小，随后按代码行数的平方上升</li>\n<li>紧凑性和正交性<ul>\n<li>人类短期记忆能够容纳的不连续信息数就是7，加2或减2</li>\n<li>紧凑性：有经验的用户通常不需要操作手册，让人乐于使用，不会在想法和工作间格格不入；紧凑不等于薄弱；一个功能子集，能够满足专家用户80%以上的一般需求</li>\n<li>正交性：任何操作均无副作用，改变每个属性的方法有且仅有一个；重构代码就是改变代码的结构和组织，而不改变其外在行为</li>\n<li>任何一个知识点在系统内都应当有一个<strong>唯一</strong>、明确、权威的表述（Single Point of Truth, SPOT）</li>\n<li>提高紧凑性的精妙但强大的办法就是围绕“解决一个定义明确的问题”的强核心算法组织设计，避免臆断和捏造。形式化往往能极其明晰地阐述一项任务，与形式法相对的是<strong>试探法</strong>——凭经验法则得到的解决方案，这种思路的问题是回增生出大量特例和边界情况</li>\n</ul>\n</li>\n<li>“限制不仅提倡了经济性，而且某种程度上提倡了设计的优雅”。要达到这种简洁性，尽量不要去想一种语言或操作系统最多能做多少事情，而是尽量去想这种语言或操作系统最少能做的事情——不是带着假想行动</li>\n<li>设计有自顶向下和自底向上两种思路，前者通常先考虑主事件循环，再插入具体事件；后者通常先考虑封装具体任务，再按次序粘合在一起</li>\n<li>出于自我保护，程序员尽量双管齐下——一方面以自顶向下的应用逻辑表达抽象规范，另一方面以函数或库来手机底层的域原语（原子操作）</li>\n<li>实际代码往往是自顶向下和自底向上的综合产物。同一个项目经常同时兼有，这就导致了“胶合层”的出现</li>\n<li>胶合层是个挺讨厌的东西，必须尽可能薄，这一点极为重要。薄胶合层原则可以看做是分离原则的升华。策略（应用逻辑）应该与机制（原子操作集）清晰地分离和解耦。</li>\n<li>“完美之道，不在无可增加，而在无可删减”</li>\n<li>OO语言鼓励“具有厚重的胶合和复杂层次”的体系。当问题域真的很复杂、确实需要大量抽象时，这可能是好事，但如果编程员到头来用复杂的方法来做简单的事情——仅仅是为他们能够这样做，结果便适得其反</li>\n<li><strong>全局变量意味着代码不能重入</strong></li>\n<li>“就我个人而言，如果局部变量太多，我倾向于拆分子程序。另一个方法是看代码行是否存在（太多）缩进。我几乎从来不看代码长度。——Ken Thompson”</li>\n<li>如果通过电话向另一个程序员描述说不清楚，API可能就是太复杂，设计太糟糕了。</li>\n</ul>\n<h3 id=\"文本化\"><a href=\"#文本化\" class=\"headerlink\" title=\"文本化\"></a>文本化</h3><ul>\n<li>序列化有时被称为列集（marshaling），其反向操作（载入）过程称为散集（unmarshaling）</li>\n<li>互用性、透明性、可扩展性和经济性都是设计文本格式和应用协议需要考虑的问题</li>\n<li>设计一个文本协议往往可以微系统的未来省不少力气；使用二进制协议的唯一正当理由是：如果要处理<strong>大批量</strong>的数据集，因而确实关注能否在介质上获得最大位密度，或是关心数据转化时的时间或指令开销。大图像和多媒体数据的格式有时可以算是前者的例子，对延时有严格要求的网络协议有则算作后者的例子</li>\n<li>文本格式的位密度未必一定比二进制格式低多少；设计紧凑二进制格式的思路往往不能够兼顾干净扩展的要求</li>\n<li>数据文件元格式是一套句法和词法约定，已经正式标准化或者通过实践得到充分确定<ul>\n<li>DSV：冒号是默认的分隔符</li>\n<li>RFC 822：字段名不得包含空格，通常用横线代替，空格和tab作为当前逻辑行的延续</li>\n<li>XML：需要文档类型定义（如XHTML）和相关应用逻辑赋予其语义。通常可以语法检查就能发现形式问题或数据错误</li>\n<li>Unix文本文件约定<ul>\n<li>如果可能，以新行符结束的每一行只存一个记录</li>\n<li>每行建议少于80字符</li>\n<li>用<code>#</code>开始注释</li>\n<li>支持反斜线<code>\\</code></li>\n<li>用冒号或连续空白作为字段分隔符</li>\n<li>在节格式中，支持连续行</li>\n<li>要么包含一个版本号，要么将格式设计成相互独立的自描述字节块</li>\n<li>不要只压缩或者二进制编码文件的一部分</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>应用协议设计：如果应用协议是文本式的，那仅凭肉眼就能容易地分析，例：SMTP、POP3、IMAP</li>\n<li>应用协议元格式：应用协议元格式是为了简化网络间事务处理的序列化操作而发展出来的，因为网络带宽要比存储昂贵得多，所以需要重视事务处理的经济性</li>\n<li>目前还没有个制订较完善的元协议非常适合真正的P2P应用，不像客户端-服务器应用——HTTP在这一领域的游刃有余</li>\n</ul>\n<h3 id=\"透明性\"><a href=\"#透明性\" class=\"headerlink\" title=\"透明性\"></a>透明性</h3><ul>\n<li>如果软件系统包含的功是为了帮助人们对软件建立正确的“做什么、怎样做”的心理模型而设计，这个软件系统就是可显的</li>\n<li>用户喜欢UI中的透明性和可显性，是因为这意味着学习曲线比较平缓，而“最小立异原则”就是一个体现</li>\n<li>优雅是力量与简洁的结合。优雅的代码事半功倍；优雅的代码不仅正确，而且<strong>显然</strong>正确；优雅的代码不仅将算法传达给计算机，同时也把简洁和信心传递给阅读代码的人</li>\n<li>编写透明、可显的系统而节省的精力，将来完全可能就是自己的财富</li>\n<li>用户的注意力是宝贵的，让Unix工具正常运行的最好策略是在大部分时间里沉默</li>\n<li>真正的聪明是找到方法，可以访问部分细节，但是又不让它们太显眼</li>\n<li>为透明性和可显性而设计<ul>\n<li>不要在具体操作的代码上叠放太多的抽象层</li>\n<li>透明性和可显性同模块性一样，主要是设计的特性而不是代码的特性<ul>\n<li>程序调用层级最大深度是多少？</li>\n<li>代码是否有强大而明显的不变性质</li>\n<li>API的各函数调用是否正交</li>\n<li>程序的数据结构或分类和它们代表的外部实体间，是否有一一映射关系</li>\n<li>有多少魔法数字</li>\n</ul>\n</li>\n<li><strong>隐藏</strong>细节和<strong>无法访问</strong>细节有着重要区别</li>\n<li>透明的系统更容易实施恢复措施，首先就是更能抵抗bug的破坏</li>\n</ul>\n</li>\n<li>Unix程序员的品性：“宁愿抛弃、重建代码也不远修补蹩脚的代码”</li>\n<li>选择简单的算法</li>\n</ul>\n<h3 id=\"多路程序控制\"><a href=\"#多路程序控制\" class=\"headerlink\" title=\"多路程序控制\"></a>多路程序控制</h3><ul>\n<li>Unix最具特点的程序模块化技法就是将大型程序分解成多个合作进程</li>\n<li>Unix的设计风格强调用定义良好的进程间通信或共享文件来联通小型进程。因此，Unix操作系统提倡把程序分解成更简单的子进程，并专注考虑它们之间的接口<ul>\n<li>降低进程生成的开销</li>\n<li>提供方法（shellout、IO重定向、管道、消息传递、套接字）简化进程通信</li>\n<li>提倡使用简单透明的文本数据格式来通信</li>\n</ul>\n</li>\n<li>真正的难题不在协议语法而是<strong>协议逻辑</strong>——协议必须既有充分的表达能力又有防范死锁的能力</li>\n<li>Unix的IPC分类<ul>\n<li>最简单的形式：调用另一个程序来完成任务；专门程序通常借由文件系统和父进程通信</li>\n<li>管道、重定向和过滤器：过滤器即从标准输入顺序读数据，然后向标准输出写数据；管道操作把程序的标准输出连接到另一个程序的标准输入</li>\n<li>包装器：包装器或者将调用程序专用化，或者为它创建新的接口</li>\n<li>从进程：子程序通过连接到标准输入和标准输出的管道，交互地和调用程序收发数据</li>\n<li>对等进程通信：需要对等的通道<ul>\n<li>临时文件：最古老的的IPC技法，灵活但有风险</li>\n<li>信号：每个信号都对机收进程产生默认作用，进程可以声明<strong>信号处理程序</strong>，让信号处理程序覆盖信号的默认行为<ul>\n<li><code>SIGHUP</code>，重新初始化</li>\n<li><code>SIGTERM</code>，温和的终止</li>\n<li><code>SIGKILL</code>，立即杀死进程</li>\n</ul>\n</li>\n<li>套接字：套接字类似文件描述符，创建时可以指定<strong>协议族</strong>来告诉网络层如何解释套接字名称</li>\n<li>共享内存：共享内存通常依靠<code>mmap</code>，把文件映射成可以被多个进程共享的内存</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"微型语言\"><a href=\"#微型语言\" class=\"headerlink\" title=\"微型语言\"></a>微型语言</h3><ul>\n<li>程序员每百行代码出错率和所使用的编程语言在很大程度上无关</li>\n<li>有两个好方法和一个坏方法做好微型语言的设计<ul>\n<li>预先认识到可以使用微型语言设计把变成问题的规格说明提升一个层次</li>\n<li>注意到规格说明文件格式越来越像微型语言——规格中蕴含着行为</li>\n<li><strong>错误</strong>的方法是通过扩展变成微型语言</li>\n</ul>\n</li>\n<li>微型语言的范畴从声明性发展到命令性，从而逐渐具有通用性，当他们明确为完备图灵机时，它们就是解释器</li>\n<li>样例<ul>\n<li>SNG，PNG的纯文本表达</li>\n<li>正则表达式</li>\n<li>Glade，描述GUI界面的XML文件</li>\n<li>m4，一套宏指令集，规定文本串扩展成其他文本串的方式</li>\n<li>XSLT，描述XML数据的变换</li>\n<li>awk，将文本输入变换成文本输出</li>\n<li>PostScript，向成像设备描述排班文本和图片的微型语言</li>\n<li>bc、dc，任意精度计算</li>\n<li>Emacs Lisp</li>\n<li>JavaScript</li>\n</ul>\n</li>\n<li>设计微型语言<ul>\n<li>控制复杂度，声明性微型语言应该具有一个明确、一直、类自然语言的语法被人类所阅读</li>\n<li>扩展和嵌入脚本语言，实现命令性语言</li>\n<li>编写自定义语法</li>\n<li>慎用宏</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"生成\"><a href=\"#生成\" class=\"headerlink\" title=\"生成\"></a>生成</h3><ul>\n<li>人类其实更善于肉眼观察数据而不是推导控制流程</li>\n<li>数据比程序逻辑更易驾驭</li>\n<li>数据驱动编程：把代码和代码作用的数据结构分清楚，始终把问题层次往上推，尽量把程序逻辑转移到数据中</li>\n<li>专用代码的生成：尽可能少干活，让数据塑造代码，依靠工具，分离机制和策略</li>\n</ul>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><ul>\n<li>无论何时想增加配置选项，最好考虑下下面的问题<ul>\n<li>能省掉这个功能么</li>\n<li>能否有无伤大雅的方式改变程序常规行为</li>\n<li>选项是否过于花哨</li>\n<li>需不需要一个独立的额外程序</li>\n</ul>\n</li>\n<li>Unix的程序配置信息一般在以下5个位置<ul>\n<li><code>/etc</code>下的运行控制文件</li>\n<li>系统设置的环境变量</li>\n<li>用户主目录下的运行控制文件（通常用<code>.</code>开头）</li>\n<li>用户设置的环境变量</li>\n<li>启动程序命令行参数</li>\n</ul>\n</li>\n<li>可执行未见后面加<code>rc</code>表示“运行控制”（命名来自CTSS的runcom命令脚本功能）</li>\n<li>一些最为常见的系统环境变量：<code>USER</code>，<code>LOGNAME</code>，<code>HOME</code>，<code>LINES</code>，<code>SHELL</code>，<code>PATH</code>等</li>\n<li>常见的从<code>-a</code>到<code>-z</code>的命令行选项的可能含义<ul>\n<li><code>-a</code>，所有、添加</li>\n<li><code>-b</code>，缓冲区、批处理</li>\n<li><code>-c</code>，命令、检查</li>\n<li><code>-d</code>，调试、删除</li>\n<li><code>-D</code>，定义</li>\n<li><code>-e</code>，执行、编辑</li>\n<li><code>-f</code>，文件、强制执行</li>\n<li><code>-g</code>，全局</li>\n<li><code>-h</code>，头部、帮助</li>\n<li><code>-i</code>，初始化、交互式</li>\n<li><code>-k</code>，保留、杀死</li>\n<li><code>-l</code>，列表、登录、加载</li>\n<li><code>-m</code>，消息、邮件</li>\n<li><code>-n</code>，数字、否</li>\n<li><code>-o</code>，输出</li>\n<li><code>-p</code>，端口</li>\n<li><code>-q</code>，安静</li>\n<li><code>-r</code>，递归</li>\n<li><code>-s</code>，缄默，大小</li>\n<li><code>-t</code>，标记</li>\n<li><code>-u</code>，用户</li>\n<li><code>-v</code>，冗长</li>\n<li><code>-V</code>，版本</li>\n<li><code>-w</code>，宽度</li>\n<li><code>-y</code>，是</li>\n<li><code>-z</code>，启用压缩</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"接口设计\"><a href=\"#接口设计\" class=\"headerlink\" title=\"接口设计\"></a>接口设计</h3><ul>\n<li>从最小立异原则出发，启动后程序通常从下列来源获得输入或命令<ul>\n<li>程序标准输入端的数据和命令</li>\n<li>通过IPC的输入</li>\n<li>已知位置的文件和设备</li>\n</ul>\n</li>\n<li>最小立异原则不应被理解为在设计中号召机械的保守主义，新颖性提高了用户与接口最初几次的交互成本，但是糟糕的设计永远使接口令人痛苦而多余</li>\n<li>“我们提倡以共生和委派策略来提高代码的复用并降低软件复杂度”</li>\n<li>最小立异原则目的就是为了减少用户在使用接口时必须学习的复杂过程</li>\n<li>Unix接口设计历史：CLI &#x3D;&gt; X</li>\n<li>接口的5种度量标准：<strong>简洁、表现力、易用、透明和脚本化能力</strong><ul>\n<li>简洁：事务处理需要的时间和复杂度需要有上限</li>\n<li>表现力：接口可以触发广泛的行为</li>\n<li>易用性：接口要求用户记忆的东西较少</li>\n<li>透明度：用户使用接口时，几乎不用记忆什么问题、数据或者程序状态</li>\n<li>脚本能力：容易被其他程序使用</li>\n</ul>\n</li>\n<li>CLI和可视化接口的对比<ul>\n<li>CLI更具表达力、脚本化能力、简洁性，适用于举例：SQL</li>\n<li>可视化接口透明度、易用性较好，适用性举例：画图、网页浏览器</li>\n<li>随着用户越来越熟练，对CLI接口的抵触也越少</li>\n</ul>\n</li>\n<li>Unix接口设计模式<ul>\n<li>过滤器：接受输入，转换成其他格式，再输出到标准输出端；宽进严出、不丢弃不需要的信息、不增加无用数据</li>\n<li>cantrip（没有输入输出）、源模式（无输入且输出在启动条件中控制）、接收器模式（接收输入但不发送东西到输出）、编译器模式（无标准输入输出，但会发送信息到标准错误端）</li>\n<li>ed模式（编辑器模式）</li>\n<li>roguelike模式（来自BSD的地牢探险游戏rogue，用字符阵列显示界面UI），如vi、emacs，没有鼠标参与，适合指法熟练的人</li>\n<li>引擎和接口分离，又或者模型和视图分离，了解MVC模式的人自然了解<ul>\n<li>配置者、执行者</li>\n<li>假脱机、守护进程</li>\n<li>驱动、引擎</li>\n<li>客户端、服务端</li>\n</ul>\n</li>\n<li>基于语言的接口模式</li>\n</ul>\n</li>\n<li>浏览器作为通用前端</li>\n<li><strong>如果程序没有什么有趣的或者惊奇的东西要说就应该闭嘴</strong>（有点意思）</li>\n</ul>\n<h3 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h3><ul>\n<li>Unix的经验告诉我们最主要的就是如何知道何时不去优化</li>\n<li>最强大的优化技术就是<strong>不去优化</strong></li>\n<li>先估量，后优化，直觉是糟糕的向导</li>\n<li>最有效的代码优化方法是保持代码短小简单</li>\n<li>核心数据结构必须留在最快的缓存</li>\n<li>吞吐量和延迟时间的权衡是普遍现象，例TCP、UDP</li>\n<li>对于减少延迟来说，阻塞或等待中间结果都是致命的</li>\n<li><strong>按需计算</strong>出昂贵的结果，再<strong>缓存</strong>起来之后使用，可以兼得<strong>低延迟</strong>和<strong>高吞吐</strong></li>\n</ul>\n<h3 id=\"复杂度\"><a href=\"#复杂度\" class=\"headerlink\" title=\"复杂度\"></a>复杂度</h3><ul>\n<li>简单即美即雅即善，而复杂即丑即怪即恶</li>\n<li>程序员为了理解一个程序，会建立思维模型并调试之；程序的复杂度即模型建立和程序调试的困难程度</li>\n<li>Unix思想的一个主题就是<strong>工具小巧锐利，设计从零开始，接口简单一致</strong></li>\n<li><strong>偶然复杂度</strong>的产生是因为没有找到实现规定功能集合的最简方法，可以通过良好设计去除；<strong>选择复杂度</strong>和期望的功能相关联，只能通过修改工程目标解决</li>\n<li>计算资源以及人类的思考，同财富一样，不是靠储藏而是靠消费来证明价值的</li>\n<li><strong>选择需要管理的上下文环境，并且按照边界所允许的最小化方式构建程序</strong></li>\n</ul>\n<h2 id=\"Implementation\"><a href=\"#Implementation\" class=\"headerlink\" title=\"Implementation\"></a>Implementation</h2><h3 id=\"语言\"><a href=\"#语言\" class=\"headerlink\" title=\"语言\"></a>语言</h3><ul>\n<li>C和C++以增加实现时间和（特别是）调试时间为代价来优化效率</li>\n<li>C的内存管理是复杂性和错误的渊薮</li>\n<li>C语言最佳之处是资源效率和接近机器语言，糟糕的地方是槟城简直是资源管理的炼狱</li>\n<li>C++试图满足所有人的所有要求</li>\n<li>Perl是增强版的shell，它为替代<code>awk</code>而设计，适合大量使用正则表达式的地方</li>\n<li>Java的设计目标是“write once, run anywhere”，但它并没有实现这两个最初的设计目标</li>\n<li>Java对小项目是大材小用</li>\n<li>Emacs Lisp传统上只用于为Emacs编辑器编写本身的控制程序</li>\n</ul>\n<h3 id=\"重用\"><a href=\"#重用\" class=\"headerlink\" title=\"重用\"></a>重用</h3><ul>\n<li>重新发明轮子之所以糟糕不仅因为浪费时间，还因为它浪费的时间往往是平方级</li>\n<li>避免重新发明轮子的有效方法就是借用别人的设计和实现，即重用代码</li>\n<li>文档并不能传达代码具现的所有细微差别之处</li>\n<li>开放源码和代码重用的关系，许多地方很像浪漫爱情和有性生殖的关系</li>\n<li>设计最好的实践需要情感的投入；软件开发者，同其他任何类型的工匠和技师一样；他们想要成为艺术家，这并不是什么私密。他们有艺术家的动力和需求，也拥有听众的欲望</li>\n<li>开放源码是从意识形态上解决这些所有问题的优先方法</li>\n<li>发布不够格软件的作者会承受许多的社会压力来修正或撤回代码（不一定）</li>\n<li>阅读代码是为未来而投资</li>\n<li><h2 id=\"许可证-许可证能够授权代码以某种形式使用，否则在版权法之下是禁止或者需要付费的-非商业使用的许可证并不等同于开源许可证\"><a href=\"#许可证-许可证能够授权代码以某种形式使用，否则在版权法之下是禁止或者需要付费的-非商业使用的许可证并不等同于开源许可证\" class=\"headerlink\" title=\"许可证- 许可证能够授权代码以某种形式使用，否则在版权法之下是禁止或者需要付费的- 非商业使用的许可证并不等同于开源许可证\"></a>许可证<br>- 许可证能够授权代码以某种形式使用，否则在版权法之下是禁止或者需要付费的<br>- 非商业使用的许可证并不等同于开源许可证</h2></li>\n</ul>\n<h2 id=\"Community\"><a href=\"#Community\" class=\"headerlink\" title=\"Community\"></a>Community</h2><h3 id=\"可移植性\"><a href=\"#可移植性\" class=\"headerlink\" title=\"可移植性\"></a>可移植性</h3><ul>\n<li>C语言基于早期Ken Thompson的B语言解析器，脱胎于BCPL（Basic Common Programming Language），因此这个C代表Common（通用）</li>\n<li>在IETF传统中，标准必须来自于一个可用原型实现的经验；不幸的是，这并不是标准通常发展的方式</li>\n<li>搞笑RFC大概是唯一能够立即成为RFC的提议，比如RFC 1149（IP数据报的信鸽传递），RFC 2324（超文本咖啡壶控制协议）</li>\n<li>对于具备提倡标准资格的RFC，其规格必须稳定，经过同行评审，并且已经吸引了互联网社区的极大兴趣</li>\n<li>IETF标准化过程有意提倡由实践而非理论驱动的标准化过程</li>\n<li>国际化的首要动作：<strong>分离信息库（配置）和代码</strong></li>\n<li>“暗含的意思就是，成为标准的最好方法就是发布一个高质量的开源实现” —— Henry Spencer</li>\n</ul>\n<h3 id=\"文档\"><a href=\"#文档\" class=\"headerlink\" title=\"文档\"></a>文档</h3><ul>\n<li>“一切皆HTML，所有引用都是URL”</li>\n<li>绝大多数软件的文档都是由技术人员写给可能连最小公分母都不知道的普通大众的——渊博者写给无知者</li>\n<li>编写Unix文档的最佳实践<ul>\n<li>数量多不会被认为是质量高</li>\n<li>信息密度适中，少用屏幕截图</li>\n<li>没人喜欢庞大的文档，考虑提供快速的摘要</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"开放源码\"><a href=\"#开放源码\" class=\"headerlink\" title=\"开放源码\"></a>开放源码</h3><ul>\n<li>开源开发的规则<ul>\n<li>源码公开</li>\n<li>尽早发布，经常发布</li>\n<li>给贡献以表扬</li>\n</ul>\n</li>\n<li><code>major.minor.patch</code>，补丁号修正错误和次要功能；次版本号为兼容的新功能；主版本号为不兼容的更改</li>\n<li><strong>发布前对文档和README进行拼写检查</strong></li>\n<li>基于所需功能而不是平台来编写移植层（面向接口编程）<ul>\n<li>“<code>#ifdef</code>和<code>#if</code>是最后一招，这通常是思路不当、产品过度差异化，无理由‘优化’或是无用垃圾聚集的先兆” —— Doug Mcllroy</li>\n</ul>\n</li>\n<li>选择一个编码规范（lint）</li>\n<li>常见的标准文件命名规范<ul>\n<li>README</li>\n<li>INSTALL</li>\n<li>AUTHORS</li>\n<li>NEWS</li>\n<li>HISTORY</li>\n<li>CHANGES</li>\n<li>COPYING 项目许可证条款</li>\n<li>LICENSE</li>\n<li>FAQ</li>\n</ul>\n</li>\n<li>以版本号来命名目录，考虑多版本在同一系统共存</li>\n<li>在设计讨论中更广泛的参与常常是件好事，但是如果列表相对开放，迟早就会有些用户在其上询问一些初级问题</li>\n<li>开源许可证<ul>\n<li>MIT：授予无限权利的拷贝、使用、修改和对修改的再发布，只要在所有修改版本中保留版权和许可证条款</li>\n<li>BSD：授予无限权利的拷贝、使用、修改和对修改的再发布，只要在所有修改版本中保留版权和许可证条款；同时在广告和软件包相关文档中包含致谢</li>\n<li>Artistic：授予无限权利的拷贝、使用和本地修改的权利。允许在发行修改后的二进制版本，但是限制源码再发行</li>\n<li>GPL、Mozilla</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"未来\"><a href=\"#未来\" class=\"headerlink\" title=\"未来\"></a>未来</h3><ul>\n<li>分离机制（配置）与策略（算法）成为一个明确准则</li>\n<li>Unix文件仅仅是个字节大袋子，而没有其他文件属性</li>\n<li><strong>开放源码将软件业转变为服务业</strong></li>\n</ul>\n<p><em>–END–</em></p>\n",
            "tags": [
                "设计模式",
                "Unix"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2020/08/17/refactoring-design-improvement/",
            "url": "http://shenlvmeng.github.com/blog/2020/08/17/refactoring-design-improvement/",
            "title": "重构 —— 代码的实用性与艺术性",
            "date_published": "2020-08-17T14:56:03.000Z",
            "content_html": "<p>MF的《重构》一书算是程序设计书籍的经典了。其中对于重构的认识和剖析深入浅出，提纲挈领。对于有一定编程经验的人来说更是如虎添翼的帮助。下面我尽量在不贬损原意的基础上，用自己的思路和语言进行适当的总结。</p>\n<h2 id=\"序-amp-前言：重构的再认识\"><a href=\"#序-amp-前言：重构的再认识\" class=\"headerlink\" title=\"序 &amp; 前言：重构的再认识\"></a>序 &amp; 前言：重构的再认识</h2><p>开篇名义，还未进入正文，书从序和前言开始，便不自觉间流露着真知灼见：</p>\n<ul>\n<li>重构是<strong>不改变软件可观察行为的前提下改善其内部结构</strong>。</li>\n<li>重构需要你维护一份“坏味道”和重构手段的对应</li>\n<li>设计前期使用模式通常会导致过度工程</li>\n<li>代码总将随着设计者的经验成长而进化</li>\n</ul>\n<h2 id=\"样例：感受重构\"><a href=\"#样例：感受重构\" class=\"headerlink\" title=\"样例：感受重构\"></a>样例：感受重构</h2><blockquote>\n<p>任何一个傻瓜都能写出计算机理解的代码。但唯有优秀的程序员才能写出人类能理解的代码</p>\n</blockquote>\n<p>代码被阅读和修改的次数远多于被编写的次数。尽管代码在机器中运行时，机器并不会嫌弃代码丑陋。但是代码总是要修改的，当我们打算修改系统时，就涉及到了人。人在乎这些。差劲的系统很难维护，如果很难找到修改点，程序员就可能犯错，从而引入bug。如果你发现你需要为程序增加特性，但是当前的代码结构让你不能方便达成目标时，先重构那个程序，再方便地添加特性。</p>\n<p>当然，重构前一定要确认，自己有没有一套<strong>可靠的测试机制</strong>，因为你需要它来保证重构的基础要素：不修改已有功能。重构中，最好能以<strong>微小的步伐</strong>前进（这样能及时回滚）。在本章样例的重构中，体现了下面一些“好味道”：</p>\n<ul>\n<li>代码块越小，代码功能就越好管理</li>\n<li>好的代码应该能够清楚表达自己的功能，变量名也是代码清晰的关键</li>\n<li>用多态取代条件判断逻辑</li>\n<li>结构化风格相比过程化风格更易扩展也更好维护</li>\n</ul>\n<h2 id=\"原则\"><a href=\"#原则\" class=\"headerlink\" title=\"原则\"></a>原则</h2><p>本章介绍了重构的一些原则和基础性认识。</p>\n<ul>\n<li>何为重构：不改变软件可观察特性的前提下，通过修改内部结构，提高其可理解性。通常情况下和<strong>性能优化</strong>相对应<ul>\n<li>两顶帽子：添加新功能和重构应该属于两种截然不同的行为，它们应该分开交替进行</li>\n</ul>\n</li>\n<li>重构的好处<ul>\n<li>改进软件设计，整理代码让后续的修改更容易</li>\n<li>让软件更好理解，准确说出我想要的</li>\n<li>帮忙找到bug</li>\n<li>提高未来的编程速度</li>\n</ul>\n</li>\n<li>何时重构<ul>\n<li><strong>事不过三</strong>，第一次只管去做，第二次产生反感但还是去做，第三次做类似的事情就去重构</li>\n<li>修改bug时重构</li>\n<li>review代码时重构</li>\n</ul>\n</li>\n<li>间接层和重构：中间层能够允许逻辑共享和意图的分开解释，同时隔离变化和解耦。<ul>\n<li>提前设计好中间层不如先直接做再重构</li>\n<li>少数情况下，中间层只会带来冗余</li>\n</ul>\n</li>\n<li>重构的难题<ul>\n<li>修改已有API：建议维护新旧两个接口，让用户做出反应后，再迁移。这期间，旧接口应该要调用新接口实现</li>\n<li>代码已经无法正常运行时，重写比重构更省事</li>\n</ul>\n</li>\n<li>重构和性能优化：大多数的性能优化集中在小部分代码上。先写出风格良好的代码，再使用性能工具实测数据，对瓶颈处单独优化性能。好的重构也会让性能优化更容易进行</li>\n</ul>\n<h2 id=\"坏味道\"><a href=\"#坏味道\" class=\"headerlink\" title=\"坏味道\"></a>坏味道</h2><p>在遇到下面一些“味道”时，可能你就需要重构了。</p>\n<ul>\n<li>重复代码</li>\n<li>函数过长，每当你需要用注释说明点什么时，可以把需要说明的东西写到一个独立函数中</li>\n<li>太长的类</li>\n<li>函数入参过多</li>\n<li>发散式变化：一个类因为多个原因发生不同的变化</li>\n<li>霰弹式变化：一个原因引起一个类的多个变化</li>\n<li>特性依恋：函数对某个类的兴趣高于自己所在的类</li>\n<li>数据泥团：喜欢聚合在一起的零散数据字段</li>\n<li>基础类型偏执：对于基础类型如字符串、整型不愿意使用简单类来封装</li>\n<li>swtich语句</li>\n<li>冗余类</li>\n<li>夸夸其谈未来性：过度为未来设计</li>\n<li>令人迷惑的暂时字段</li>\n<li>过度耦合的链式调用，如<code>a.b.c().d()</code>，链上任意类做修改都会影响整个调用</li>\n<li>两个类的狎昵关系</li>\n<li>异曲同工的类</li>\n<li>幼稚的数据类：只有最简单的getter和setter</li>\n<li>子类拒绝继承超类的函数或数据</li>\n<li>过多的注释</li>\n</ul>\n<h2 id=\"测试体系：重构的保证\"><a href=\"#测试体系：重构的保证\" class=\"headerlink\" title=\"测试体系：重构的保证\"></a>测试体系：重构的保证</h2><p>前面已经提到数次，重构的前提是不对已经已有行为做改动，这需要测试的帮助。本章对建立测试给了一些简单的介绍。</p>\n<ul>\n<li>编写测试代码最有用时机是编程之前</li>\n<li>编写一个测试case时，可以先让测试失败，再通过成功验证程序功能</li>\n<li>遇到bug时，先添加一个单元测试复现这个bug</li>\n<li><strong>测试不能保证程序没有bug</strong>，编写测试样例也遵循82原则，当样例已经很多时，它带来的边际效果就没那么好了。应该更多考虑容易出错的<strong>边界条件</strong>，积极思考如何“破坏代码”。</li>\n</ul>\n<h2 id=\"重构列表\"><a href=\"#重构列表\" class=\"headerlink\" title=\"重构列表\"></a>重构列表</h2><p>下面分几大方向介绍具体的重构手段。每个手段会分场景、思路、动机、做法来展开。</p>\n<h3 id=\"组织函数\"><a href=\"#组织函数\" class=\"headerlink\" title=\"组织函数\"></a>组织函数</h3><p>日常工作中，非常容易坏味道中的过长函数，下面的一些重构方式可以帮我们优化这一点。</p>\n<h4 id=\"提炼函数\"><a href=\"#提炼函数\" class=\"headerlink\" title=\"提炼函数\"></a>提炼函数</h4><ul>\n<li>场景：有一段相对独立的代码可以被组织并独立出来</li>\n<li>思路：将这段代码放到一个独立函数中，用<strong>函数名解释该函数的用途</strong></li>\n<li>动机：有时会遇到过长函数中有一段需要注释才能看明白的代码。将这样相对独立的逻辑拆分成表意的短小函数后，可以让高层函数读起来就像一系列注释。如果提炼可以提高代码清晰度，就算函数名比函数体长都无所谓</li>\n<li>做法：用<strong>做什么</strong>而不是<strong>怎么做</strong>来为函数命名（如果你想不出一个更有意义的名称，就别动了）。检查是否有临时变量，如果有读取，可以作为入参传递给函数；如果对临时变量甚至有再赋值，那可能还要让函数返回临时变量修改后的值</li>\n</ul>\n<h4 id=\"内联函数\"><a href=\"#内联函数\" class=\"headerlink\" title=\"内联函数\"></a>内联函数</h4><ul>\n<li>场景：函数本体和名称一样清晰易懂</li>\n<li>思路：在函数调用点插入函数本体，然后移除函数</li>\n<li>动机：如果函数本体足够简单，且表意清晰，同时调用点有限，<strong>不具备多态性</strong>。那么出于减少无用中间层的考虑，可以直接使用函数体</li>\n<li>做法：注意检查是否有多态性</li>\n</ul>\n<h4 id=\"内联临时变量\"><a href=\"#内联临时变量\" class=\"headerlink\" title=\"内联临时变量\"></a>内联临时变量</h4><ul>\n<li>场景：一个临时变量只被<strong>简单表达式</strong>赋值一次，同时妨碍了其他重构手法</li>\n<li>思路：将对变量的引用动作，替换成给它赋值的表达式本身</li>\n<li>动机：过多的临时变量会妨碍你重构长函数</li>\n<li>做法：注意确保表达式<strong>没有副作用</strong></li>\n</ul>\n<h4 id=\"以查询替代临时变量\"><a href=\"#以查询替代临时变量\" class=\"headerlink\" title=\"以查询替代临时变量\"></a>以查询替代临时变量</h4><ul>\n<li>场景：程序中有个临时变量保存了某个表达式的运算结果，同时被多处引用</li>\n<li>思路：将表达式提炼成独立函数，在独立变量的所有引用点替换成对新函数的调用</li>\n<li>动机：替换成函数后，整个类都可以获得这份信息，同时会减少对该变量的频繁引用带来的重构困难</li>\n<li>做法：寻找<strong>只被赋值一次</strong>的临时变量，对于赋值多次的临时变量使用“分解临时变量”方法先重构，保证提炼出来的函数没有副作用。先不要担心性能问题，等到出现了优化也会比较简单</li>\n</ul>\n<h4 id=\"引入解释性变量\"><a href=\"#引入解释性变量\" class=\"headerlink\" title=\"引入解释性变量\"></a>引入解释性变量</h4><ul>\n<li>场景：有个复杂的表达式，表意不够清晰</li>\n<li>思路：将表达式的值放进一个临时变量，用变量名表意</li>\n<li>动机：表达式不如变量名更好阅读。如果临时变量在整个类都有意义，建议直接使用“提炼函数”方法</li>\n<li>做法：先判断是否使用“提炼函数”的做法</li>\n</ul>\n<h4 id=\"分解临时变量\"><a href=\"#分解临时变量\" class=\"headerlink\" title=\"分解临时变量\"></a>分解临时变量</h4><ul>\n<li>场景：某个临时变量被<strong>多次赋值</strong>，且每次赋值意义不一样</li>\n<li>思路：针对每次不同意义的赋值使用不一样的临时变量</li>\n<li>动机：临时变量的多义性会增大理解成本</li>\n<li>做法：寻找被多次赋值且有多义性的变量，不同的意义使用新的不同临时变量</li>\n</ul>\n<h4 id=\"移除对函数入参的赋值\"><a href=\"#移除对函数入参的赋值\" class=\"headerlink\" title=\"移除对函数入参的赋值\"></a>移除对函数入参的赋值</h4><ul>\n<li>场景：对函数入参赋值</li>\n<li>思路：用新的临时变量取代入参</li>\n<li>动机：对入参赋值会混淆按值传递和按引用传递的传参方式</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"用函数对象取代函数\"><a href=\"#用函数对象取代函数\" class=\"headerlink\" title=\"用函数对象取代函数\"></a>用函数对象取代函数</h4><ul>\n<li>场景：大型函数中代码过于复杂，无法使用“提炼函数”</li>\n<li>思路：直接将函数放在<strong>单独对象</strong>中，将复杂的局部变量变成对象字段，从而可以轻松地在对象中分解这个大型函数到多个小型函数</li>\n<li>动机：略</li>\n<li>做法<ol>\n<li>建立一个新类，用函数用途给这类命名</li>\n<li>在新类中创建final字段保存大型函数所在的对象，即“源对象”</li>\n<li>新类的构造函数使用原函数入参作为入参</li>\n<li>新类中建立<code>computed()</code>函数</li>\n<li>赋值原代码到<code>computed()</code>中</li>\n<li>在原函数位置，创建这个新类的一个对象，并调用这个对象的<code>computed()</code>函数</li>\n<li>继续重构新类中的<code>computed()</code>函数</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"替换算法\"><a href=\"#替换算法\" class=\"headerlink\" title=\"替换算法\"></a>替换算法</h4><ul>\n<li>场景：某个算法有更清晰的算法替代</li>\n<li>思路：直接更换函数本体</li>\n<li>动机：略</li>\n<li>做法：略</li>\n</ul>\n<h3 id=\"对象间的特性搬移\"><a href=\"#对象间的特性搬移\" class=\"headerlink\" title=\"对象间的特性搬移\"></a>对象间的特性搬移</h3><p>类应该承担清晰且明确的责任。不论是承担责任过多还是“不怎么负责任”，都需要进行重构。</p>\n<h4 id=\"搬移函数\"><a href=\"#搬移函数\" class=\"headerlink\" title=\"搬移函数\"></a>搬移函数</h4><ul>\n<li>场景：有函数和所在类以外的其他类反而有更多交流，如调用或被调用</li>\n<li>思路：在和函数交流更多的类中建立一个有类似行为的新函数，改造旧函数为新函数的委托函数，或者直接移除旧函数</li>\n<li>动机：略</li>\n<li>做法：<ul>\n<li>检查和搬移函数关联的字段或函数，判断是否要一起搬移</li>\n<li>检查子类和超类有无其他声明，检查有无多态性</li>\n<li>如果目标函数需要太多源类特性，就需要进一步分解后再搬移</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"搬移字段\"><a href=\"#搬移字段\" class=\"headerlink\" title=\"搬移字段\"></a>搬移字段</h4><ul>\n<li>场景：某个字段和所在类以外的其他类有更多交流</li>\n<li>思路：在目标类新建字段，修改源字段的所有使用者，令它们使用新字段</li>\n<li>动机：略</li>\n<li>做法：如果字段的访问级别是<code>public</code>，需要先用“封装字段”手段制造一个委托中间层</li>\n</ul>\n<h4 id=\"提炼类\"><a href=\"#提炼类\" class=\"headerlink\" title=\"提炼类\"></a>提炼类</h4><ul>\n<li>场景：某个类做了两个类的事情</li>\n<li>思路：建立新类，搬移函数和字段</li>\n<li>动机：一个类应该是清楚的抽象，即可以使用清晰的命名</li>\n<li>做法：拆分类，建立两个类之间的单向或双向连接，搬移底层函数，搬移高层函数</li>\n</ul>\n<h4 id=\"内联化类\"><a href=\"#内联化类\" class=\"headerlink\" title=\"内联化类\"></a>内联化类</h4><ul>\n<li>场景：某个类没做什么事情</li>\n<li>思路：将这个类的特性搬移到其他类，然后移除原类</li>\n<li>动机：通常会由于此前的重构动作移走了这个类的责任</li>\n<li>做法：选择和这个类关系最近的类进行合并，可以先在目标类中使用委托，然后再通过搬移函数的方式完成重构</li>\n</ul>\n<h4 id=\"隐藏委托关系\"><a href=\"#隐藏委托关系\" class=\"headerlink\" title=\"隐藏委托关系\"></a>隐藏委托关系</h4><ul>\n<li>场景：使用者通过委托类来调用对象</li>\n<li>思路：在提供服务的类上直接建立使用者所需的所有函数，隐藏委托关系</li>\n<li>动机：隐藏调用关系可以减少实现细节暴露从而减少耦合</li>\n<li>做法：在发起请求的类中，直接实现功能的接口，移除使用者的委托代码</li>\n</ul>\n<h4 id=\"移除中间人\"><a href=\"#移除中间人\" class=\"headerlink\" title=\"移除中间人\"></a>移除中间人</h4><ul>\n<li>场景：类做了过多<strong>简单委托</strong>的动作</li>\n<li>思路：让使用者直接调用受托类</li>\n<li>动机：当“隐藏委托关系”使用过多时，封装会很痛苦，这个时候不如直接让使用者通过链式调用用中间受托类实现功能</li>\n<li>做法：刚好是“隐藏委托关系”的反向过程</li>\n</ul>\n<h4 id=\"引入外加函数\"><a href=\"#引入外加函数\" class=\"headerlink\" title=\"引入外加函数\"></a>引入外加函数</h4><ul>\n<li>场景：需要为提供服务的类新增函数，但是你无法修改这个类（通常是库代码）</li>\n<li>思路：在使用者类中建立一个函数，并用第一参数的方式传入服务类实例</li>\n<li>动机：尽管可以在不修改服务类代码的情况下，自行添加新函数，但还是建议当外加函数较多时，使用“引入本地扩展”的方式，或直接推动服务类升级</li>\n<li>做法：在客户类中建立函数，这个函数不调用客户类特性，只是转发请求到服务类</li>\n</ul>\n<h4 id=\"引入本地扩展\"><a href=\"#引入本地扩展\" class=\"headerlink\" title=\"引入本地扩展\"></a>引入本地扩展</h4><ul>\n<li>场景：需要为服务类添加一些额外函数，但你无法修改这个类</li>\n<li>思路：建立一个新类，使其包含这些额外函数，让这个扩展类成为源类的子类或包装类</li>\n<li>动机：子类工作量较少，但是必须在对象创建期接管创建过程；包装类只是单纯转发请求，没有这个限制，但是转发过程都需要自己实现</li>\n<li>做法：略</li>\n</ul>\n<h3 id=\"重新组织数据\"><a href=\"#重新组织数据\" class=\"headerlink\" title=\"重新组织数据\"></a>重新组织数据</h3><h4 id=\"自封装字段\"><a href=\"#自封装字段\" class=\"headerlink\" title=\"自封装字段\"></a>自封装字段</h4><ul>\n<li>场景：直接访问一个字段的方式给你的重构带来了麻烦，或是引入了麻烦的耦合关系</li>\n<li>思路：用取值&#x2F;设值函数替代直接访问字段</li>\n<li>动机：这种方式让字段更为灵活，但是根据奥卡姆剃刀法则，等需要的时候再用</li>\n<li>做法：有的字段可能需要一个初始化函数</li>\n</ul>\n<h4 id=\"用对象取代数据值\"><a href=\"#用对象取代数据值\" class=\"headerlink\" title=\"用对象取代数据值\"></a>用对象取代数据值</h4><ul>\n<li>场景：数据项需要和行为合在一起使用才有价值</li>\n<li>思路：把简单的数据项封装成对象</li>\n<li>动机：开发初期的简单数据，可能在迭代后会加上特殊行为，如果不及时处理，就会出现特性依恋或重复代码</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"将值对象改为引用对象\"><a href=\"#将值对象改为引用对象\" class=\"headerlink\" title=\"将值对象改为引用对象\"></a>将值对象改为引用对象</h4><ul>\n<li>场景：从一个类会衍生出多个实例，实例间只是一个实体的多种状态</li>\n<li>思路：将值对象改为引用对象</li>\n<li>动机：值对象通过<code>equals()</code>或<code>hashCode()</code>判断，如日期；引用对象则直接可以用相等操作符<code>==</code>判断，如顾客、账户等概念</li>\n<li>做法：你可能需要一个静态字段或提前创建好多个新对象作为访问点</li>\n</ul>\n<h4 id=\"将引用对象改为值对象\"><a href=\"#将引用对象改为值对象\" class=\"headerlink\" title=\"将引用对象改为值对象\"></a>将引用对象改为值对象</h4><ul>\n<li>场景：你的引用对象很小且<strong>不可变</strong>，同时不易管理</li>\n<li>思路：将引用对象改为值对象</li>\n<li>动机：引用对象不好控制，值对象的<strong>不可变特性</strong>在某些场景很好用。</li>\n<li>做法：<strong>只有不可变对象才能被重构</strong></li>\n</ul>\n<h4 id=\"以对象取代数组\"><a href=\"#以对象取代数组\" class=\"headerlink\" title=\"以对象取代数组\"></a>以对象取代数组</h4><ul>\n<li>场景：有个数组，其中的元素类型不一，代表不同的东西</li>\n<li>思路：用对象替代数组，用字段表示不同意义的元素</li>\n<li>动机：数组的作用是<strong>以某种顺序存储一组相似对象</strong>，不要让位置具有特殊意义</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"复制被监视数据\"><a href=\"#复制被监视数据\" class=\"headerlink\" title=\"复制被监视数据\"></a>复制被监视数据</h4><ul>\n<li>场景：有些领域数据被放在了GUI部分代码里</li>\n<li>思路：将数据复制到领域对象中，建立Observer模式，剥离UI和逻辑</li>\n<li>动机：分层良好的系统，用户界面和业务逻辑代码是分开的，这样也更好维护</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"将单向关联改成双向关联\"><a href=\"#将单向关联改成双向关联\" class=\"headerlink\" title=\"将单向关联改成双向关联\"></a>将单向关联改成双向关联</h4><ul>\n<li>场景：两个类都需要对方特性，但目前只有单向连接</li>\n<li>思路：增加一个反向指针，同时修改函数能够同时更新两条链接</li>\n<li>动机：略</li>\n<li>做法：注意删除过程移除指针的顺序</li>\n</ul>\n<h4 id=\"将双向关联改为单向关联\"><a href=\"#将双向关联改为单向关联\" class=\"headerlink\" title=\"将双向关联改为单向关联\"></a>将双向关联改为单向关联</h4><ul>\n<li>场景：两个类有双向关联，但是一个类已经不需要另一个类的特性</li>\n<li>思路：去除不必要连接</li>\n<li>动机：维护双向连接带来便利的同时，也会增加维护的复杂度</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"用常量取代魔法数\"><a href=\"#用常量取代魔法数\" class=\"headerlink\" title=\"用常量取代魔法数\"></a>用常量取代魔法数</h4><ul>\n<li>场景：有个字面量数值，具有特殊含义，但是不能一眼看明白</li>\n<li>思路：创造一个常量，用命名说明字面数值的意义</li>\n<li>动机：魔法数是类型码时，要使用“以类取代类型码”</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"封装字段\"><a href=\"#封装字段\" class=\"headerlink\" title=\"封装字段\"></a>封装字段</h4><ul>\n<li>场景：类中有public字段</li>\n<li>思路：声明改为private，提供相应的访问函数</li>\n<li>动机：暴露public会降低函数的模块化程度，数据应该和行为集中在一起，不应被直接修改</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"封装集合\"><a href=\"#封装集合\" class=\"headerlink\" title=\"封装集合\"></a>封装集合</h4><ul>\n<li>场景：函数返回一个集合</li>\n<li>思路：返回集合的只读副本，并在类中提供添加&#x2F;移除集合元素的函数</li>\n<li>动机：类似“封装字段”，返回的集合一样可能被修改</li>\n<li>做法：使用Collection，或返回一个副本</li>\n</ul>\n<h4 id=\"用数据类取代记录\"><a href=\"#用数据类取代记录\" class=\"headerlink\" title=\"用数据类取代记录\"></a>用数据类取代记录</h4><ul>\n<li>场景：面对传统编程中的记录结构</li>\n<li>思路：创建“哑”数据对象</li>\n<li>动机：要将记录型结构转成面向对象的程序中</li>\n<li>做法：创建private字段，创建读写函数并提供</li>\n</ul>\n<h4 id=\"以类取代类型码\"><a href=\"#以类取代类型码\" class=\"headerlink\" title=\"以类取代类型码\"></a>以类取代类型码</h4><ul>\n<li>场景：类中有个数值类型码，但是<strong>不影响类行为</strong></li>\n<li>思路：用新的类替换数值类型码</li>\n<li>动机：略</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"以子类取代类型码\"><a href=\"#以子类取代类型码\" class=\"headerlink\" title=\"以子类取代类型码\"></a>以子类取代类型码</h4><ul>\n<li>场景：类中有个<strong>不可变</strong>数值类型码，同时<strong>影响类行为</strong></li>\n<li>思路：用宿主的子类替换类型码</li>\n<li>动机：可以用子类的多态性取代switch语句，不过，如果类型码会发生改变，或者宿主类已经有子类则不能用此方法</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"以状态-x2F-策略取代类型码\"><a href=\"#以状态-x2F-策略取代类型码\" class=\"headerlink\" title=\"以状态&#x2F;策略取代类型码\"></a>以状态&#x2F;策略取代类型码</h4><ul>\n<li>场景：类中有个数值类型码，会<strong>影响类行为</strong>，同时不能通过继承来消除</li>\n<li>思路：以状态对象取代替换数值类型码</li>\n<li>动机：略</li>\n<li>做法：创建一个新的类，用类型码的用途为它命名，这就是一个状态对象。所有的新类继承自超类，返回不同的状态码</li>\n</ul>\n<h4 id=\"以字段取代字段\"><a href=\"#以字段取代字段\" class=\"headerlink\" title=\"以字段取代字段\"></a>以字段取代字段</h4><ul>\n<li>场景：子类的查边只在<strong>返回常量数据</strong>的函数上</li>\n<li>思路：修改函数，让它们返回超类的新增字段，然后销毁子类</li>\n<li>动机：这样可以避免继承带来的额外复杂性</li>\n<li>做法：略</li>\n</ul>\n<h3 id=\"简化条件表达式\"><a href=\"#简化条件表达式\" class=\"headerlink\" title=\"简化条件表达式\"></a>简化条件表达式</h3><p>条件逻辑会增加理解的层级，处理不好时，很容易配合长代码造成理解困难。</p>\n<h4 id=\"分解条件表达式\"><a href=\"#分解条件表达式\" class=\"headerlink\" title=\"分解条件表达式\"></a>分解条件表达式</h4><ul>\n<li>场景：有一个复杂的条件语句</li>\n<li>思路：为if、then、else语句段落提炼独立函数</li>\n<li>动机：条件逻辑通常会使代码更难阅读</li>\n<li>做法：使用表意的函数名说明条件语句意思</li>\n</ul>\n<h4 id=\"合并条件表达式\"><a href=\"#合并条件表达式\" class=\"headerlink\" title=\"合并条件表达式\"></a>合并条件表达式</h4><ul>\n<li>场景：有一系列的条件逻辑，都得到相同结果</li>\n<li>思路：合并成一个条件表达式，并将之提炼成一个独立函数</li>\n<li>动机：有时候这么做能把“做什么”的语句转换成“为什么”的含义，前提是这些检查并非彼此独立</li>\n<li>做法：注意确认条件语句都没有副作用，有些条件表达式甚至可以简化成三元表达式</li>\n</ul>\n<h4 id=\"合并重复的条件片段\"><a href=\"#合并重复的条件片段\" class=\"headerlink\" title=\"合并重复的条件片段\"></a>合并重复的条件片段</h4><ul>\n<li>场景：条件表达式的每个分支都有相同的一段代码</li>\n<li>思路：将代码提取到条件表达式之外</li>\n<li>动机：减少重复语句</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"移除控制标记\"><a href=\"#移除控制标记\" class=\"headerlink\" title=\"移除控制标记\"></a>移除控制标记</h4><ul>\n<li>场景：在一系列布尔表达式中，某变量具有控制标记的作用</li>\n<li>思路：用<code>break</code>或<code>return</code>替代</li>\n<li>动机：有时候为了可读性和可维护性，可以牺牲单一出口的做法</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"用“卫语句”替代嵌套条件表达式\"><a href=\"#用“卫语句”替代嵌套条件表达式\" class=\"headerlink\" title=\"用“卫语句”替代嵌套条件表达式\"></a>用“卫语句”替代嵌套条件表达式</h4><ul>\n<li>场景：嵌套的条件逻辑过多，难以看清正常执行路径</li>\n<li>思路：用“卫语句”枚举出所有特殊情况，减少嵌套层数</li>\n<li>动机：当特殊case多于正常case时，提前处理每种特殊情况，可以有效减少嵌套层数</li>\n<li>做法：注意“卫语句”要么就从函数返回，要么就抛出异常，反正要跳出当前执行流</li>\n</ul>\n<h4 id=\"用多态取代条件表达式\"><a href=\"#用多态取代条件表达式\" class=\"headerlink\" title=\"用多态取代条件表达式\"></a>用多态取代条件表达式</h4><ul>\n<li>场景：你手上有个条件表达式，根据对象类型不同选择不同行为</li>\n<li>思路：将条件表达式的每个分支放在子类的重载函数中，然后将父类的原始函数声明为抽象函数</li>\n<li>动机：面向对象程序中，更少出现switch语句也是得益于多态这个工具</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"引入Null对象\"><a href=\"#引入Null对象\" class=\"headerlink\" title=\"引入Null对象\"></a>引入Null对象</h4><ul>\n<li>场景：在很多地方检查对象是否为<code>null</code></li>\n<li>思路：用一个特殊的Null对象取代<code>null</code>值</li>\n<li>动机：空对象对外就像是特殊的空的对象（Go笑而不语），而不是什么都没有，有利于保证函数行为的一致性</li>\n<li>做法：空对象一定是单例的</li>\n</ul>\n<h4 id=\"引入断言\"><a href=\"#引入断言\" class=\"headerlink\" title=\"引入断言\"></a>引入断言</h4><ul>\n<li>场景：某段代码需要对程序状态做出假设</li>\n<li>思路：用断言表示这种假设</li>\n<li>动机：有些时候，只有某个条件为真，代码才能正常运行，这个时候用断言明确这些假设。</li>\n<li>做法：注意不要滥用断言，只用来检查“一定为真”的条件，而不要去检查“应该为真”的条件</li>\n</ul>\n<h3 id=\"优化函数调用\"><a href=\"#优化函数调用\" class=\"headerlink\" title=\"优化函数调用\"></a>优化函数调用</h3><p>我们在前面提到了函数体本身的优化，这一章我们主要介绍函数调用的优化</p>\n<h4 id=\"函数改名\"><a href=\"#函数改名\" class=\"headerlink\" title=\"函数改名\"></a>函数改名</h4><ul>\n<li>场景：函数名没能说明函数用途</li>\n<li>思路：修改函数名</li>\n<li>动机：优化函数名，让它达到注释的效果，重新安排参数顺序，提高代码清晰度</li>\n<li>做法：对于旧函数，可以标注<code>deprecated</code>，说明其不建议使用</li>\n</ul>\n<h4 id=\"添加参数\"><a href=\"#添加参数\" class=\"headerlink\" title=\"添加参数\"></a>添加参数</h4><ul>\n<li>场景：函数需要从调用端得到更多信息</li>\n<li>思路：为函数添加新的对象参数</li>\n<li>动机：如果有其他重构的方法，只要可能，基本都比添加参数要好</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"移除参数\"><a href=\"#移除参数\" class=\"headerlink\" title=\"移除参数\"></a>移除参数</h4><ul>\n<li>场景：函数本体不需要某个参数</li>\n<li>思路：去除该参数</li>\n<li>动机：暂时不要考虑未来是否能用到</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"分离查询和修改\"><a href=\"#分离查询和修改\" class=\"headerlink\" title=\"分离查询和修改\"></a>分离查询和修改</h4><ul>\n<li>场景：一个函数即返回对象状态，同时又有副作用</li>\n<li>思路：将查询和修改分离出两个参数</li>\n<li>动机：任何有返回值的函数，最好都不要有看得见的副作用</li>\n<li>做法：先分离查询，再分离修改</li>\n</ul>\n<h4 id=\"让函数携带参数\"><a href=\"#让函数携带参数\" class=\"headerlink\" title=\"让函数携带参数\"></a>让函数携带参数</h4><ul>\n<li>场景：若干函数做了类似的操作，仅仅因为某些值表现不同</li>\n<li>思路：用一个单一函数表示，用参数来表示那些不同的值</li>\n<li>动机：减少重复代码</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"用明确函数取代参数\"><a href=\"#用明确函数取代参数\" class=\"headerlink\" title=\"用明确函数取代参数\"></a>用明确函数取代参数</h4><ul>\n<li>场景：有一个函数，其中<strong>完全取决于参数</strong>表现出不同行为</li>\n<li>思路：针对参数的不同值，建立一个独立函数</li>\n<li>动机：函数内大多以条件表达式检查这些参数值，并作出不同行为；有时也可以用多态实现</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"保持对象完整\"><a href=\"#保持对象完整\" class=\"headerlink\" title=\"保持对象完整\"></a>保持对象完整</h4><ul>\n<li>场景：你从对象中取了若干字段，将它们作为函数调用的一些参数</li>\n<li>思路：改为传递整个对象</li>\n<li>动机：如果传递整个对象会让你的依赖结构恶化，那么就不该用这个方法</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"用函数取代参数\"><a href=\"#用函数取代参数\" class=\"headerlink\" title=\"用函数取代参数\"></a>用函数取代参数</h4><ul>\n<li>场景：对象调用某个函数，用其结果做参数传递给另一个函数，然而接受改参数的函数本身也能调用到前一个函数</li>\n<li>思路：让参数接受函数直接去调用前一个函数，然后去除该参数</li>\n<li>动机：<strong>如果函数有其他途径获得参数值，就不该通过参数获得</strong></li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"引入参数对象\"><a href=\"#引入参数对象\" class=\"headerlink\" title=\"引入参数对象\"></a>引入参数对象</h4><ul>\n<li>场景：某些函数入参总是在一起出现</li>\n<li>思路：直接用一个对象取代这些参数</li>\n<li>动机：略</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"移除设值函数\"><a href=\"#移除设值函数\" class=\"headerlink\" title=\"移除设值函数\"></a>移除设值函数</h4><ul>\n<li>场景：类的某个字段在创建时设值，然后就不再改变</li>\n<li>思路：去掉字段的设值函数</li>\n<li>动机：提供设值字段就表示可能被改变</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"隐藏函数\"><a href=\"#隐藏函数\" class=\"headerlink\" title=\"隐藏函数\"></a>隐藏函数</h4><ul>\n<li>场景：有函数从未被其他类用到</li>\n<li>思路：将函数改为private</li>\n<li>动机：减少无谓的API暴露</li>\n<li>做法：可以利用lint工具帮忙检查</li>\n</ul>\n<h4 id=\"用工厂函数替代构造函数\"><a href=\"#用工厂函数替代构造函数\" class=\"headerlink\" title=\"用工厂函数替代构造函数\"></a>用工厂函数替代构造函数</h4><ul>\n<li>场景：希望创建对象时不仅做简单的构建动作</li>\n<li>思路：使用工厂函数</li>\n<li>动机：这个方法也可以用来通过类型码创建类对象</li>\n<li>做法：结合<code>Class.forName()</code>可以不用写switch语句</li>\n</ul>\n<h4 id=\"封装向下转型\"><a href=\"#封装向下转型\" class=\"headerlink\" title=\"封装向下转型\"></a>封装向下转型</h4><ul>\n<li>场景：函数返回的对象需要由调用者向下转型</li>\n<li>思路：将向下转型放在函数中进行</li>\n<li>动机：略</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"用异常取代错误码\"><a href=\"#用异常取代错误码\" class=\"headerlink\" title=\"用异常取代错误码\"></a>用异常取代错误码</h4><ul>\n<li>场景：函数返回特性的代码表示错误情况</li>\n<li>思路：改用异常</li>\n<li>动机：异常能够区分出正常情况和异常处理</li>\n<li>做法：需要决定抛出受控异常或者非受控异常</li>\n</ul>\n<h4 id=\"用测试取代异常\"><a href=\"#用测试取代异常\" class=\"headerlink\" title=\"用测试取代异常\"></a>用测试取代异常</h4><ul>\n<li>场景：对于一个调用者可以预先检查的条件，抛出了异常</li>\n<li>思路：修改调用者，改在调用前进行检查</li>\n<li>动机：能够提前检查的情况，就不算是异常</li>\n<li>做法：略</li>\n</ul>\n<h3 id=\"处理继承关系\"><a href=\"#处理继承关系\" class=\"headerlink\" title=\"处理继承关系\"></a>处理继承关系</h3><h4 id=\"字段上移\"><a href=\"#字段上移\" class=\"headerlink\" title=\"字段上移\"></a>字段上移</h4><ul>\n<li>场景：两个子类有相同字段</li>\n<li>思路：将字段移至超类</li>\n<li>动机：归纳重复特性</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"函数上移\"><a href=\"#函数上移\" class=\"headerlink\" title=\"函数上移\"></a>函数上移</h4><ul>\n<li>场景：两个子类有相同作用的函数</li>\n<li>思路：将函数移至超类</li>\n<li>动机：归纳重复特性。子类的函数覆写超类函数，但是做相同工作时，也要使用函数上移</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"构造函数上移\"><a href=\"#构造函数上移\" class=\"headerlink\" title=\"构造函数上移\"></a>构造函数上移</h4><ul>\n<li>场景：子类的构造函数几乎完全一致</li>\n<li>思路：在超类中新建构造函数，再在子类构造函数中调用它</li>\n<li>动机：如果重构过程过于复杂，可以考虑使用“用工厂函数替代构造函数”</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"函数下移\"><a href=\"#函数下移\" class=\"headerlink\" title=\"函数下移\"></a>函数下移</h4><ul>\n<li>场景：超类的某函数只和部分子类有关</li>\n<li>思路：将函数移到相关的子类中去</li>\n<li>动机：和“函数上移”恰恰相反</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"字段下移\"><a href=\"#字段下移\" class=\"headerlink\" title=\"字段下移\"></a>字段下移</h4><ul>\n<li>场景：超类的字段只被部分子类用到</li>\n<li>思路：将字段移到真正需要的子类中去</li>\n<li>动机：和“字段上移”恰恰相反</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"提炼子类\"><a href=\"#提炼子类\" class=\"headerlink\" title=\"提炼子类\"></a>提炼子类</h4><ul>\n<li>场景：类的特性只被部分实例对象用到</li>\n<li>思路：新建一个子类，将未被用到的特性转移到子类中</li>\n<li>动机：上述的差异行为有时也可能通过类型码区分，这个时候可以由“以子类取代类型码”或“以状态&#x2F;策略取代类型码”方法来重构</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"提炼超类\"><a href=\"#提炼超类\" class=\"headerlink\" title=\"提炼超类\"></a>提炼超类</h4><ul>\n<li>场景：两个类有相似特性</li>\n<li>思路：为两个类建立超类，将相似特性移到超类中</li>\n<li>动机：两个类用相同方式做类似事情往往意味着重复代码</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"提炼接口\"><a href=\"#提炼接口\" class=\"headerlink\" title=\"提炼接口\"></a>提炼接口</h4><ul>\n<li>场景：若干客户端使用类中的同一子集，或者两个类有部分相同点</li>\n<li>思路：将相同的子集提炼到独立接口中</li>\n<li>动机：接口有助于系统的<strong>责任划分</strong>和<strong>能力声明</strong>（鸭子类型）。在单继承的语言中，接口扮演了组合功能代码的角色。尤其某个类在不同环境表现不同时，使用接口是个好主意</li>\n<li>做法：接口命名通常由<code>-able</code>结尾</li>\n</ul>\n<h4 id=\"折叠继承关系\"><a href=\"#折叠继承关系\" class=\"headerlink\" title=\"折叠继承关系\"></a>折叠继承关系</h4><ul>\n<li>场景：超类和子类几乎无法区分</li>\n<li>思路：将它们合为一体</li>\n<li>动机：往往在过度设计时出现</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"构造模板函数\"><a href=\"#构造模板函数\" class=\"headerlink\" title=\"构造模板函数\"></a>构造模板函数</h4><ul>\n<li>场景：有一些子类，细节上有所区别，但是整个流程上操作类似</li>\n<li>思路：提炼出操作流程，上移至超类，将具体细节操作放在独立函数中，让它们有相同的签名，然后实现超类的抽象函数</li>\n<li>动机：这样抽离出来的流程函数也叫模板函数，模板上<em>插槽</em>接口固定，然而提供插槽的模板函数是一致的</li>\n<li>做法：后续新增的类，只需实现超类抽象函数就可以完成扩展</li>\n</ul>\n<h4 id=\"用委托取代继承\"><a href=\"#用委托取代继承\" class=\"headerlink\" title=\"用委托取代继承\"></a>用委托取代继承</h4><ul>\n<li>场景：子类只使用超类接口的一部分，或者直接不需要继承来的数据</li>\n<li>思路：在子类中新建字段保存超类，然后调整子类函数，让它委托超类，然后去掉两者的继承关系</li>\n<li>动机：略</li>\n<li>做法：略</li>\n</ul>\n<h4 id=\"用继承取代委托\"><a href=\"#用继承取代委托\" class=\"headerlink\" title=\"用继承取代委托\"></a>用继承取代委托</h4><ul>\n<li>场景：两个类的委托关系过多，且委托函数都很简单</li>\n<li>思路：让委托类继承受托类</li>\n<li>动机：如果你没有使用<strong>所有</strong>受托类函数，那么就不要用这个重构方法，继续保持委托关系，使用其他重构方法；另外受托对象可变时，也要注意</li>\n<li>做法：略</li>\n</ul>\n<h2 id=\"大型重构\"><a href=\"#大型重构\" class=\"headerlink\" title=\"大型重构\"></a>大型重构</h2><blockquote>\n<p>Kent Beck和作者所写</p>\n</blockquote>\n<p>本章介绍了4个大型重构的思路，也是大型程序容易遇到的4个问题</p>\n<ul>\n<li>梳理和分析继承体系：往往因为某个继承体系承担的两个甚至更多责任，有一个特征是，某一层级的所有类，子类都以相同形容词开始。可以通过委托的形式，对继承体系做正交化</li>\n<li>过程化设计转化为对象设计：往往出现在过程化风格传统语言中。可以将数据记录变为对象，拆分大块行为为小块，然后将行为转移到相关对象中。</li>\n<li>分离领域和UI：出现在有GUI的场景中。传统的MVC设计模式就是将领域逻辑分离出来，用接口的方式和UI部分代码对接</li>\n<li>提炼继承体系：有的类做了太多工作，里面经常有较多的条件表达式。对于这种，可以借助面向对象中的子类和多态或者策略模式实现</li>\n</ul>\n<h2 id=\"重构与现实\"><a href=\"#重构与现实\" class=\"headerlink\" title=\"重构与现实\"></a>重构与现实</h2><p>重构在某些角度和技术演进很像。技术的接纳过程类似一条钟形曲线。前段包括先行者和早期接受者，中部大量人群包括早期消费者和晚期消费者，最后则是行动迟缓者。不同人有不同的消费动机。先行者和早期接受者感兴趣的是<strong>新技术，“范式转移和突破性思想”的愿景</strong>；早期和晚期消费者则关心<strong>成熟度、成本、支持程度，以及这种新思想&#x2F;新产品是否被和他们相似的其他人成功使用</strong>。</p>\n<h2 id=\"尾声\"><a href=\"#尾声\" class=\"headerlink\" title=\"尾声\"></a>尾声</h2><ul>\n<li>重构工具能节省你的重构时间</li>\n<li>永远记住“两顶帽子”，重构时保持代码功能不变</li>\n</ul>\n",
            "tags": [
                "重构",
                "设计模式",
                "代码质量"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2018/01/22/design-pattern-note/",
            "url": "http://shenlvmeng.github.com/blog/2018/01/22/design-pattern-note/",
            "title": "设计模式学习",
            "date_published": "2018-01-22T09:28:45.000Z",
            "content_html": "<blockquote>\n<p>全文参考<a href=\"https://book.douban.com/subject/4260618/\">《设计模式之禅》</a>，<a href=\"https://book.douban.com/subject/1400656/\">Head First Design Pattern</a>这本也不错。</p>\n</blockquote>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p>JavaScript学久了，在看设计原则时，顺带温习了下OOP中的一些传统概念。</p>\n<p><strong>类图</strong></p>\n<ul>\n<li><code>一&gt;</code>: 关联，类定义中的相互引用，通常使用类的属性表达。 比如客户类和订单类</li>\n<li><code>--&gt;</code>: 依赖，最弱的关系，对象间的临时关联，用函数参数、局部变量、返回值等表达</li>\n<li><code>一▷</code>: 继承</li>\n<li><code>--▷</code>: 实现</li>\n<li><code>一◇</code>: has-a关系，表示整体与局部，但不稳定。比如公司类和雇员类</li>\n<li><code>一◆</code>: contains-a关系，表示整体与局部，部分不能脱离整体而存在。</li>\n</ul>\n<p><strong>override和overload</strong></p>\n<table>\n<thead>\n<tr>\n<th>区别</th>\n<th>覆写</th>\n<th>重载</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>单词</td>\n<td>OverLoading</td>\n<td>Override</td>\n</tr>\n<tr>\n<td>概念</td>\n<td>方法名称相同，参数的类型或个数不同</td>\n<td>方法名称相同，参数的类型或个数相同，返回值类型相同</td>\n</tr>\n<tr>\n<td>范围</td>\n<td>发生在一个类之中</td>\n<td>发生在类的继承关系中</td>\n</tr>\n<tr>\n<td>权限</td>\n<td>一个类中所重载多个方法可以不同的权限</td>\n<td>被子类所覆写的方法不能拥有比父类更严格的访问控制权限</td>\n</tr>\n</tbody></table>\n<p><strong>接口和抽象类的不同</strong></p>\n<p>两者都为“面向契约编程”而存在。总体来说，接口是对能力的抽象，抽象类是对事物的抽象。从而有着下面的不同：</p>\n<ul>\n<li>接口被类实现，抽象类被子类继承。</li>\n<li>接口只做方法声明，抽象类中可以做方法声明，也可以做方法实现。</li>\n<li>接口里定义的变量只能是公共静态常量，抽象类中的变量可以是普通变量。</li>\n<li>抽象类里可以没有抽象方法，接口是设计的结果，抽象类是重构的结果。</li>\n<li>Java中接口可继承接口，并可多继承接口，但类只能单继承。</li>\n</ul>\n<p>它们还有以下特点：</p>\n<ul>\n<li>在实现时必须全部实现，否则仍是接口&#x2F;抽象类</li>\n<li>抽象类中可以没有抽象方法</li>\n</ul>\n<h2 id=\"设计6原则\"><a href=\"#设计6原则\" class=\"headerlink\" title=\"设计6原则\"></a>设计6原则</h2><p>SOLID原则：</p>\n<ul>\n<li>单一职责（接口细分到单一业务）</li>\n<li>里氏替换（实现都按接口来）</li>\n<li>依赖倒置（多使用抽象概念）</li>\n<li>接口隔离原则（接口尽量细分）</li>\n<li>迪米特法则（低耦合）</li>\n<li>开闭原则（高内聚，低耦合）</li>\n</ul>\n<p>总结来说，就是<strong>好好设计、合理拆分接口，一旦确定，避免更改；减少接口耦合；面向接口编程；使用中间层应对需求变更</strong>。</p>\n<h2 id=\"常见设计模式\"><a href=\"#常见设计模式\" class=\"headerlink\" title=\"常见设计模式\"></a>常见设计模式</h2><h3 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h3><p>单例模式是最简单的设计模式。即一个类只有一个实例，或一个构造函数只能初始化一次（JS版本），且<strong>自行实例化</strong>，并像整个系统提供整个实例。常用在下面这些场景下，解决特定的问题：</p>\n<ul>\n<li>整个项目需要一个<strong>共享</strong>访问点或共享数据</li>\n<li>包含了大量静态常量（通常是配置数据）和静态方法的<strong>工具类</strong></li>\n<li>创建一个对象需要消耗的资源过多</li>\n</ul>\n<p>实现上，分懒汉型和饿汉型。它们的主要区别在初始化单一实例的时机在类创建时还是访问时。懒汉型需要注意<strong>线程安全</strong>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 饿汉型</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Singleton</span> <span class=\"variable\">singleton</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 限制外部访问</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 暴露的public方法</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> singleton;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 其他方法</span></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 懒汉型</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">Singleton</span> <span class=\"variable\">singleton</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 限制外部访问</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 暴露的public方法</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> sychronized Singleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (singleton == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      singleton = <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> singleton;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>JavaScript中就灵活多了。最常用的字面量变量就是最简单的单例，强行使用构造函数，也可以借助闭包的特点实现。另外，JavaScript是单线程，不需要考虑线程安全的问题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 字面量变量</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> singleton = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 一些属性</span></span><br><span class=\"line\">  <span class=\"attr\">foo</span>: <span class=\"string\">&#x27;bar&#x27;</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 一些方法</span></span><br><span class=\"line\">  <span class=\"title function_\">baz</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Hello world!&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 闭包</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Singleton</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> singleton = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">foo</span> = <span class=\"string\">&#x27;bar&#x27;</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">baz</span> = <span class=\"function\">() =&gt;</span> &#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Hello world!&#x27;</span>); &#125;;</span><br><span class=\"line\">  <span class=\"title class_\">Singleton</span> = <span class=\"function\">() =&gt;</span> singleton;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h4><p>当放开单例限制，编程多例模式时，可以通过加入计数器来限制。但不常用，下面给出JavaScript版本例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Singleton</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> singleton = <span class=\"variable language_\">this</span> = [];</span><br><span class=\"line\">  <span class=\"comment\">// 比如限制为3</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> limit = <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 一些初始化工作</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; limit; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    [].<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title class_\">Singleton</span> = <span class=\"function\">() =&gt;</span> singleton;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h3><p>工厂模式意思是，将创建对象的过程封装起来，在OOP语言中体现在定义一个创建一类对象的接口，让实例化过程在子类中完成。浅显的来讲，就是让工厂类将具有共性、创建过程复杂的一类对象的创建过程封装起来，便于业务类使用，同时也便于日后拓展。业务类只需要交给工厂类需要的对象类名（Java）或别的标志就可以得到所需对象。</p>\n<p>使用场景上，它是new模式的替代品，在任何需要对象的场景下都可以使用，但是只有下面这些情况下是比较合适的：</p>\n<ul>\n<li>需要灵活解耦的框架</li>\n<li>产品类创建过程复杂、有差异性且有共性。比如连接邮箱客户端的三种协议POP3、IMAP、HTTP的构造过程抽象成一个<code>IConnectMail</code>接口，再设计各自的工厂类。在日后有新的连接邮箱客户端协议时，只需新增一个工厂类即可。</li>\n</ul>\n<p>Java中工厂类可以使用反射等方法创建新对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 产品类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">abstractProduct</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 共有方法</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\">// 抽象方法</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">abstractMethod</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">product1</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">abstractProduct</span>() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">abstractMethod</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 差异化方法</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">product2</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">abstractProduct</span>() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">abstractMethod</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 差异化方法</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Factory</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 入参根据场景调整</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> &lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">abstractProduct</span>&gt; T <span class=\"title function_\">createProduct</span><span class=\"params\">(Class&lt;T&gt; c)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Factory1</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Factory</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> &lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">Product</span>&gt; T <span class=\"title function_\">createProduct</span><span class=\"params\">(Class&lt;T&gt; c)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Product</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      p = (Product)Class.forName(c.getName()).newInstance();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>JavaScript中，工厂模式的实现更加轻量级，因为构造对象的方式更加简单，使用函数将多个产品类间的共性抽出来就行了。样例略。</p>\n<h3 id=\"抽象工厂模式\"><a href=\"#抽象工厂模式\" class=\"headerlink\" title=\"抽象工厂模式\"></a>抽象工厂模式</h3><p>抽象模式在工厂模式的基础上又抽象了一层，产品类接口下是多个<strong>产品族</strong>抽象类，产品族下才是明确的产品类。相对应的，工厂接口下的多个工厂方法根据最细节的产品类生产对象。它的优势在：</p>\n<ul>\n<li>可以不公开地控制产品族间的约束</li>\n<li>更好地组织多维度（更多是2维）上多个产品间的生产</li>\n</ul>\n<p>缺点也很明显，产品族的修改将会直接影响工厂接口和产品抽象类，这是开闭原则的大忌。因此，在<strong>产品维度固定，且有必要从多维度上划分产品</strong>时，才会使用抽象工厂模式。比如Windows、Linux、Mac OS上的文本编辑器与图像处理程序就是两个维度的多个产品。</p>\n<p>样例略。</p>\n<h3 id=\"模板方法模式\"><a href=\"#模板方法模式\" class=\"headerlink\" title=\"模板方法模式\"></a>模板方法模式</h3><p>模板方法模式比较好理解，就是将子类中共有的<strong>算法框架</strong>抽象到抽象类中实现，注意是框架，而不是具体的步骤。子类可以根据自己的需要，在不改变框架的基础上，重定义算法的某些步骤，得到不同的结果。下面举个例子就能更方便地看明白了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> student = &#123;</span><br><span class=\"line\">  <span class=\"title function_\">study</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">gotoPrimarySchool</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">gotoMiddleSchool</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">gotoUniversity</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> stu1 = <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"title class_\">Student</span>), &#123;</span><br><span class=\"line\">  <span class=\"title function_\">gotoPrimarySchool</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;子弟学校 &quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">gotoMiddleSchool</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;人大附中 &quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">gotoUniversity</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;清华大学 &quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> stu2 = <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"title class_\">Student</span>), &#123;</span><br><span class=\"line\">  <span class=\"title function_\">gotoPrimarySchool</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;子弟学校 &quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">gotoMiddleSchool</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;华师一附中 &quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">gotoUniversity</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;中科大 &quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">stu1.<span class=\"title function_\">study</span>(); <span class=\"comment\">//子弟学校 人大附中 清华大学 </span></span><br><span class=\"line\">stu2.<span class=\"title function_\">study</span>(); <span class=\"comment\">//子弟学校 华师一附中 中科大 </span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到，同样是调用学习方法<code>study</code>，<code>stu1</code>和<code>stu2</code>可以再不影响公用算法流程下，定义自己的算法步骤。使用Java实现是一样的思路：</p>\n<ul>\n<li>定义抽象类，声明可以差异化的基本方法，实现模板方法，在模板方法中调用可以差异化的基本方法</li>\n<li>子类根据需要，实现自己的基本方法</li>\n</ul>\n<p>模板方法模式核心就在于<strong>封装不变部分，开放可变部分</strong>，共有的算法步骤也较容易维护。因此，使用在下面的场景里：</p>\n<ul>\n<li>子类共有相同算法流程</li>\n<li>将核心算法设计为模板方法，细节功能由子类补充</li>\n</ul>\n<h3 id=\"建造者模式\"><a href=\"#建造者模式\" class=\"headerlink\" title=\"建造者模式\"></a>建造者模式</h3><p>建造者模式和工厂模式类似，意思是，讲一个复杂对象的<strong>构建</strong>和<strong>表示</strong>分离，使同样的构建过程可以有不同的表示。其中的<strong>构建</strong>强调的是不同基本方法的调用顺序安排，而不是基本方法的实现（这也是它和工厂方法的最大区别）；<strong>表示</strong>是指产品子类对于基本方法的差异性实现。</p>\n<p>对比上面模板方法模式来看，就是<code>study</code>的顺序对于不同人不一样，这个顺序有另外的建造类描述并实现。可以看到，建造者模式主要的使用场景是：</p>\n<ul>\n<li>相同的执行方法，不同的执行顺序，产生不同的结果</li>\n<li>产品类中，不同的构建顺序会有不同的结果</li>\n<li>用户希望执行次序可控</li>\n</ul>\n<p>在实现时，建造类通过传入新状态或其他方式影响产品类的模板方式执行次序。在建造类和产品类之上，使用导演类可以起到封装的作用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 产品类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Product</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 差异化业务</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 抽象建造类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Builder</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 设置构建的次序，以获得不同的结果</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setSequence</span><span class=\"params\">()</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 建造</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Product <span class=\"title function_\">build</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 具体建造类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Builder1</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Builder</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">Product</span> <span class=\"variable\">product</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Product</span>();</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setSequence</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 差异化逻辑</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> Product <span class=\"title function_\">buildProduct</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> product;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 导演类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Director</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">Builder</span> <span class=\"variable\">builder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Builder1</span>();</span><br><span class=\"line\">  <span class=\"keyword\">public</span> Product <span class=\"title function_\">getProductA</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    builder.setSequence();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> builder.build();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h3><p>代理模式即为其他对象提供一个代理来控制对这个对象的访问，浅显易懂。利用代理模式还可以拦截原始请求，做额外的事情。应用很广泛。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Object</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 作为示例的一个方法</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">request</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RealObject</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Object</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">request</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 业务逻辑</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Object</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 代理的对象</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">Object</span> <span class=\"variable\">object</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">Proxy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.subject = <span class=\"keyword\">new</span> <span class=\"title class_\">Proxy</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 传递代理者</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">Proxy</span><span class=\"params\">(Object o)</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">request</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.before();</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.object.request();</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.after();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 预处理</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">before</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 善后处理</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">after</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>除了普通代理，还有强制代理即只能通过被代理对象对象访问到代理。另外，AOP（Aspect Oriented Progarmming）模式也是建立在代理模式的基础上的。ES6中的proxy和ES7中的装饰器就是AOP概念下的产物。</p>\n<h3 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h3><p>原型模式即不通过<code>new</code>而是通过对象复制生产同类对象。非常好理解。在Java中，一个实现了<code>cloneable</code>接口的对象即使用了原型模式。而JavaScript更是<a href=\"https://shenlvmeng.github.io/blog/2017/12/13/you-dont-know-js-part1/#%E5%8E%9F%E5%9E%8B%E7%BB%A7%E6%89%BF\">天生使用原型模式</a>实现对象的继承和拓展。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"keyword\">class</span> <span class=\"title class_\">PrototypeClass</span> implements <span class=\"title class_\">Cloneable</span> &#123;</span><br><span class=\"line\">  @<span class=\"title class_\">Override</span></span><br><span class=\"line\">  public <span class=\"title class_\">PrototypeClass</span> <span class=\"title function_\">clone</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">PrototypeClass</span> p = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      p = (<span class=\"title class_\">PrototypeClass</span>)<span class=\"variable language_\">super</span>.<span class=\"title function_\">clone</span>();</span><br><span class=\"line\">      <span class=\"comment\">// 其他操作</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(<span class=\"title class_\">CloneNotSupportedException</span> e) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>它的优势在于更加轻量级，避免了构造函数的约束。问题在于，第一会跳过构造函数（这个JavaScript没有），第二是深浅拷贝的问题，第三在Java中，clone带有final成员的类会抛出异常。</p>\n<h3 id=\"中介者模式\"><a href=\"#中介者模式\" class=\"headerlink\" title=\"中介者模式\"></a>中介者模式</h3><p>中介者模式主要用在多个对象那个间有比较复杂的交互场景下，用一个中介对象封装对象间的一系列交互，中介往往与各对象都有交互，从而使其耦合松散，符合迪米特法则。从类图上看，它把原先的蛛网状结构简化为了星型结构。</p>\n<p>它的优点是减少了类间依赖，缺点是有些时候中介者会膨胀的很大。使用场景上，在有协调概念出现的场景都有它的发挥空间：</p>\n<ul>\n<li>机场调度中心</li>\n<li>MVC框架中的Controller</li>\n<li>媒体网关，中介服务</li>\n</ul>\n<p>因为应用场景广泛，这里不举样例。</p>\n<h3 id=\"命令模式\"><a href=\"#命令模式\" class=\"headerlink\" title=\"命令模式\"></a>命令模式</h3><p>命令模式即将一个用对象组织每一个请求，从而允许使用请求完成一系列操作，同时还可以对请求排队或记录日志或<strong>撤销以及恢复</strong>。模式主要包括三个角色：</p>\n<ul>\n<li><strong>接受者</strong>，完成请求内操作的角色</li>\n<li><strong>命令</strong>，封装好的系列操作</li>\n<li><strong>调用者</strong>，接受、执行命令的角色</li>\n</ul>\n<p>这种设计模式在存在上面三种角色的场景很适用，易于封装常用的命令，且很容易拓展，当命令间共同点较多时，还可以结合模板方法模式进行改进。</p>\n<p>例子如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Receiver</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 定义所有接受者必须完成的业务</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">work</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Receiver1</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Receiver</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">work</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 差异化业务</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">otherWork1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Receiver2</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Receiver</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">work</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 差异化业务</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">otherWork2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Command</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">exec</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Command1</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Command</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 对特定接受者命令</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> Receiver receiver;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">Command1</span><span class=\"params\">(Receiver _receiver)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.receiver = _receiver;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">exec</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.receiver.work();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Command2</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Command</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 对特定接受者命令</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> Receiver receiver;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">Command2</span><span class=\"params\">(Receiver _receiver)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.receiver = _receiver;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">exec</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.receiver.work();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用者</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Invoker</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Command command;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setCommand</span><span class=\"params\">(Command _command)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.command = _command;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">react</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.command.exec();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"责任链模式\"><a href=\"#责任链模式\" class=\"headerlink\" title=\"责任链模式\"></a>责任链模式</h3><p>责任链模式重点在“链”，将有机会处理请求的所有对象组成链，沿着这条链传递请求直到有对象处理它为止。它和Express和Redux中的<strong>中间件</strong>的概念有相似之处，区别在于责任链上一般只会有一个或部分对象处理请求。它替换了场景代码中的大堆<code>if else</code>与<code>switch</code>语句。</p>\n<p>一个狭义的抽象处理者像下面这样。使用模板方法模式，将抽象的业务逻辑外的处理流程实现在抽象类，细节的业务逻辑放在子类里完成。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Handler</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 下一个处理者</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> Handler next;</span><br><span class=\"line\">  <span class=\"comment\">// 处理逻辑</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Response <span class=\"title function_\">handle</span><span class=\"params\">(Request req)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Response</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.getLevel().equals(req.getLevel())) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 只处理属于自己的level</span></span><br><span class=\"line\">      res = <span class=\"built_in\">this</span>.exec(req);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果有下一个处理者，交给它</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.next != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        res = <span class=\"built_in\">this</span>.next.handle(req);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 自行处理</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 设置下一个处理者</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setNext</span><span class=\"params\">(Handler _handler)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.next = _handler;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 处理者有自己的处理级别</span></span><br><span class=\"line\">  <span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> Level <span class=\"title function_\">getLevel</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 处理者有自己的处理逻辑</span></span><br><span class=\"line\">  <span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> Response <span class=\"title function_\">exec</span><span class=\"params\">(Request req)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子类示例</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> classHandler1 <span class=\"keyword\">extends</span> <span class=\"title class_\">Handler</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 自己的处理逻辑</span></span><br><span class=\"line\">  <span class=\"keyword\">protected</span> Response <span class=\"title function_\">exec</span><span class=\"params\">(Request req)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 自己的处理级别</span></span><br><span class=\"line\">  <span class=\"keyword\">protected</span> Level <span class=\"title function_\">getHandlerLevel</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Level</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 定义一个请求和处理等级</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Request</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取请求等级</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> Level <span class=\"title function_\">getRequestLevel</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Response</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 定义返回的数据</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>它的优点在解耦了请求与处理者，使系统更加灵活。问题在责任链比较长时，遍历整个责任链会带来性能问题。Express中类似的中间件则不会，因为处理后可以决定是否执行<code>next()</code>，跳到下一个中间件。</p>\n<p>上面Java的实现通过<code>next</code>属性连接所有的处理者（类似链表），在JavaScript的工程实现上，一般在上层又有一层封装，用数组保存所有处理者，再建立之间的连接。这种动态的连接支持动态增删处理者，甚至改变他们的处理顺序。</p>\n<h3 id=\"装饰模式\"><a href=\"#装饰模式\" class=\"headerlink\" title=\"装饰模式\"></a>装饰模式</h3><p>装饰模式也是一种比较常见的模式，它可以动态地为一个对象增加一些额外的功能，使用装饰器类返回对象比定义子类继承要来得更加灵活。在设计上，有下面几个角色：</p>\n<ul>\n<li>抽象构件，即被修饰的对象抽象</li>\n<li>具体构件，被修饰的客体</li>\n<li>装饰器，一般是一个抽象类，将具体装饰器的共性抽出来，<strong>其必有一个private属性指向原始的抽象构件</strong>。</li>\n<li>具体装饰器，装饰具体构件的原有方法，一般来说需要有所有与具体构件public方法同名的方法，<strong>且在方法内会使用到而非单纯替换原同名方法</strong>（类似滚雪球的过程）。</li>\n</ul>\n<p>它的使用类似下面：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 场景类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Scene</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Component</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Component</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 装饰</span></span><br><span class=\"line\">    c = <span class=\"keyword\">new</span> <span class=\"title class_\">Decorator1</span>(c);</span><br><span class=\"line\">    <span class=\"comment\">// 再次装饰</span></span><br><span class=\"line\">    c = <span class=\"keyword\">new</span> <span class=\"title class_\">Decorator2</span>(c);</span><br><span class=\"line\">    <span class=\"comment\">// 执行</span></span><br><span class=\"line\">    c.exec();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>JavaScript中的<code>Object.create()</code>和<code>Object.assign()</code>和装饰模式有几分相似。</p>\n<p>它的优势在于装饰类间不相互耦合，且装饰次序可以灵活修改，可以很好地重构、替换继承关系。劣势在于包装层次过多时，不利于调试时发现错误。装饰模式一般用于：</p>\n<ul>\n<li>动态增强一个类、对象的功能</li>\n<li>批量为一批对象或类改装或增加功能</li>\n</ul>\n<p>总之就是使用继承总感觉小题大做的场合下（OOP语言中）。JS下扩展功能要容易很多。</p>\n<h3 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h3><p>策略模式意为定义一组算法，将每个算法单独封装为可以相互替换的模块。在使用时，有三个主要角色：</p>\n<ul>\n<li>策略模块，被封装好的算法策略，屏蔽了高层逻辑对策略的直接访问（<strong>高内聚</strong>）</li>\n<li>抽象策略，抽出策略共性的接口，如下面的</li>\n<li>具体策略，具体的算法策略，包含具体的算法</li>\n</ul>\n<p>在算法间可以自由切换、最好屏蔽算法细节时常用，比如Web编程中常见的<strong>表格验证</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> strategy = &#123;</span><br><span class=\"line\">  <span class=\"attr\">notEmpty</span>: <span class=\"function\"><span class=\"params\">val</span> =&gt;</span> val.<span class=\"property\">length</span> &gt; <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"function\"><span class=\"params\">val</span> =&gt;</span> val.<span class=\"property\">length</span> &gt; <span class=\"number\">1</span> &amp;&amp; val.<span class=\"property\">length</span> &lt; <span class=\"number\">10</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"function\"><span class=\"params\">val</span> =&gt;</span> +val &gt; <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"attr\">password</span>: <span class=\"function\"><span class=\"params\">val</span> =&gt;</span> val.<span class=\"title function_\">match</span>(<span class=\"regexp\">/\\d+&#123;6,&#125;/g</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> validator = &#123;</span><br><span class=\"line\">  <span class=\"attr\">rules</span>: strategy,</span><br><span class=\"line\">  <span class=\"attr\">verify</span>: <span class=\"function\">(<span class=\"params\">rule, val</span>) =&gt;</span> <span class=\"variable language_\">this</span>.<span class=\"property\">rules</span>[rule](val)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">formValidate</span>(<span class=\"params\">formData</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; name, age, password, introduction &#125; = formData;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> validator.<span class=\"title function_\">verify</span>(<span class=\"string\">&#x27;name&#x27;</span>, name) &amp;&amp;</span><br><span class=\"line\">      validator.<span class=\"title function_\">verify</span>(<span class=\"string\">&#x27;age&#x27;</span>, age) &amp;&amp;</span><br><span class=\"line\">      validator.<span class=\"title function_\">verify</span>(<span class=\"string\">&#x27;password&#x27;</span>, password) &amp;&amp;</span><br><span class=\"line\">      validator.<span class=\"title function_\">verify</span>(<span class=\"string\">&#x27;notEmpty&#x27;</span>, introduction);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>策略模式的优势在扩展性良好，同时避免了<code>if else</code>以及<code>switch</code>语句。它的问题也很明显，策略类增多时，会不好维护，同时所有策略类都需要对外暴露。当策略类数目膨胀时需要考虑到这些问题。同时，现在在哪些时机如何组合策略并没有严格定义，实际实现时，会参考建造者模式里一样，定义一个<strong>导演类</strong>，把常用的组合方式定义出来。减少策略类的暴露。</p>\n<h3 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h3><p>适配器模式即，把一个类的接口变成客户端期待的另一个接口，从而使原先不匹配的两个类能够一起工作。简单点说，就是加了一个中间层做翻译工作。这种模式下有三种角色：</p>\n<ul>\n<li>目标角色，即期望接口</li>\n<li>源角色，即原始接口</li>\n<li>适配器角色，即转换类</li>\n</ul>\n<p>在实现上，通常使用一个同时继承两个类的类作为中转。因为对象很轻量级，JS中就更容易实现了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Target</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">request</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Target1</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Target</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">request</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 目标逻辑</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Adaptee</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 原有逻辑</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">foo</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Adapter</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Adaptee</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Target</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">request</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>.foo();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>它的优点在可以将两个不相关的类在一起运行，提高了类的复用程度，它通常用来救火，完成拓展。由于实际工程中，业务变更较常出现，适配器模式也很常用。</p>\n<h4 id=\"拓展-1\"><a href=\"#拓展-1\" class=\"headerlink\" title=\"拓展\"></a>拓展</h4><p>如需要多适配一的场景，此时无法多继承（Java），在适配类中引用多个类即可。</p>\n<h3 id=\"迭代器模式\"><a href=\"#迭代器模式\" class=\"headerlink\" title=\"迭代器模式\"></a>迭代器模式</h3><p>迭代器模式，顾名思义是提供一种方法按顺序访问容器中的每个元素，而<strong>无需暴露容器的细节</strong>。在实现时，通常要自己实现一个迭代器。Java中通过拓展<code>java.util.Iterator</code>实现，JavaScript中，则通过封装数组实现。实现时，要考虑下面几个方法：</p>\n<ul>\n<li>判断是否到达尾部</li>\n<li>返回下一个元素</li>\n<li>删除当前元素</li>\n</ul>\n<p>像下面这样</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 迭代器</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Iterator</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> Object <span class=\"title function_\">next</span><span class=\"params\">()</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasNext</span><span class=\"params\">()</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">remove</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 容器</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(Object o)</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">remove</span><span class=\"params\">(Object o)</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> Iterator <span class=\"title function_\">iterator</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在所有高级语言基本都有这个接口或基础实现。这个模式已经很少用到。</p>\n<h3 id=\"组合模式\"><a href=\"#组合模式\" class=\"headerlink\" title=\"组合模式\"></a>组合模式</h3><p>组合模式用在表示<strong>树状结构的数据</strong>中，使用户对单个对象和组合对象使用具有一致性。组合模式下有三种角色：</p>\n<ul>\n<li>Component，节点抽象角色，参与组合对象的共有方法和属性</li>\n<li>Leaf，叶子对象，遍历的最小单位</li>\n<li>Composite，树枝节点</li>\n</ul>\n<p>用JavaScript表示，就像下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> node = &#123;</span><br><span class=\"line\">  <span class=\"title function_\">commonMethod</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> branchNode = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(node);</span><br><span class=\"line\"><span class=\"keyword\">const</span> leafNode = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(node);</span><br><span class=\"line\"></span><br><span class=\"line\">branchNode = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(branch, &#123;</span><br><span class=\"line\">  <span class=\"attr\">children</span>: [],</span><br><span class=\"line\">  <span class=\"title function_\">add</span>(<span class=\"params\">node</span>) &#123;</span><br><span class=\"line\">    children.<span class=\"title function_\">push</span>(node);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">remove</span>(<span class=\"params\">index</span>) &#123;</span><br><span class=\"line\">    children.<span class=\"title function_\">splice</span>(index,<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">print</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    children.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">child</span> =&gt;</span> &#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(child); &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">leafNode = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(leafNode, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...重写node的同名方法</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>组合模式在表示整合局部的关系时很有用，但是由于树枝节点和叶子节点的使用方式不同，在使用两种节点时，需要直接调用接口的实现类，这一点违背了依赖导致原则（面向接口编程）。使用上分为透明模式和安全模式，后者就像上面一样，在实现类上区分开树枝和叶子节点，透明模式下，所有的方法均抽象到抽象类中实现，而在叶子节点调用不合法方法时抛出异常。</p>\n<p>综上来看，组合模式即使用用数据结构描述一颗多叉树。</p>\n<h3 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h3><p>观察者模式，也叫发布订阅模式，可以说是前端最熟悉也是最常见的一种设计模式了。小到页面事件监听，大到Vue的设计原理都能看到观察者模式的影子。它的内涵在将信息流从原来的<strong>pull变成push</strong>。从而不需要使用<code>while</code>，<code>setInterval</code>这种很消耗资源的方式。代价是，需要硬编码到被监听者中，在状态改变时，push信息到监听者那里。通常实现时，这个过程可以抽象到很底层完成，如Vue使用<code>Object.defineProperty</code>，并不影响整体实现。另外，为了实现多对多的监听，往往需要在被监听者和监听者之间增加spy（或者叫probe）这样的角色进行中转和广播通知。</p>\n<p>这时候可以定义<code>Observable</code>接口，当然了，它需要可以增删监听者和在发生事件后提醒监听者。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Observable</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(Observer o)</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">delete</span><span class=\"params\">(Observer o)</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">notify</span><span class=\"params\">(String text)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">IFoo</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">work</span><span class=\"params\">()</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sleep</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Observer</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">update</span><span class=\"params\">(String text)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Victim</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Observable</span>, IFoo &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> ArrayList&lt;Observer&gt; oList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Observer&gt;();</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(Observer o)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.oList.add(o);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">delete</span><span class=\"params\">(Observer o)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.oList.remove(o);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">notify</span><span class=\"params\">(String text)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Observer o: oList) &#123;</span><br><span class=\"line\">      o.update(text);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">work</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.notify(<span class=\"string\">&quot;Working...&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sleep</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.notify(<span class=\"string\">&quot;Sleeping...&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一个简单的JavaScript实现如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">EventUtil</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 全局事件管理</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> events = &#123;&#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 注册事件</span></span><br><span class=\"line\">    on = <span class=\"keyword\">function</span> (<span class=\"params\">type, handler</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (events[type]) &#123;</span><br><span class=\"line\">        events[type].<span class=\"title function_\">push</span>(handler);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        events[type] = [handler];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 触发事件</span></span><br><span class=\"line\">    emit = <span class=\"keyword\">function</span> (<span class=\"params\">type</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!events[type]) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = events[type].<span class=\"property\">length</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        events[type][i];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>观察者模式的优势在于在两个对象有<strong>频繁信息交互或希望监听特定时机</strong>时很有用，当信息很多时，可以考虑增加中间层，设计消息队列处理。Java本身也提供<code>java.util.Observer</code>和<code>java.util.Observable</code>用来实现这种模式。</p>\n<p>建立在观察者模式的基础上，有响应式编程这样新的编程范式出现，<a href=\"http://reactivex.io/\">ReactiveX</a>就是在这种范式基础上推出的多语言框架。JavaScript版本的叫做<a href=\"http://reactivex.io/rxjs/manual/overview.html\">RxJS</a>，相信看完这个简介对你会非常有帮助。</p>\n<h3 id=\"门面模式\"><a href=\"#门面模式\" class=\"headerlink\" title=\"门面模式\"></a>门面模式</h3><p>门面模式又叫外观模式，它要求所有子系统与外部通信时必须使用统一的对象进行，提供高层的接口，尽量掩盖不必要的业务细节，使得子系统更易用。因为实现起来重点在于统一通信数据格式和封装业务细节。这种模式也非常常用。比如在通常的前后端协调时，后端回传前端请求的数据通常都是统一的格式，避免错误同时减少前端工作量。比如下面这样。同样，有时后端也会要求前端在请求时使用统一的数据格式（不常见）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> successRet = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 错误码</span></span><br><span class=\"line\">  <span class=\"attr\">code</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 返回数据</span></span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">userInfo</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">id</span>: <span class=\"number\">0000001</span>,</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> errorRet = &#123;</span><br><span class=\"line\">  <span class=\"attr\">code</span>: <span class=\"number\">0002</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 错误原因</span></span><br><span class=\"line\">  <span class=\"attr\">message</span>: <span class=\"string\">&quot;请求过于频繁！&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>门面模式可以极大地提升封装性，增加系统的高内聚，同时也减少了系统内外的耦合，提高了灵活度和安全性。劣势在于对扩展不利，所有的改动几乎都要对应到门面（Facade）类的硬编码。因此门面模式的使用场景是：</p>\n<ul>\n<li>为一个复杂的系统或模块提供对外接口</li>\n<li>子系统间相对独立</li>\n</ul>\n<p>通常情况下，门面类只负责聚合，不参与具体的子系统逻辑。另外，在系统庞大时，很可能有不止一个门面入口。后端接口微服务化的趋势下，在系统内，拆分原来庞大的接口，同时面向前端不同设备，设计不同的服务汇合接入点正是门面模式的体现。</p>\n<h3 id=\"备忘录模式\"><a href=\"#备忘录模式\" class=\"headerlink\" title=\"备忘录模式\"></a>备忘录模式</h3><p>备忘录模式即，在不破坏封装性的前提下，捕获一个对象的内部状态，在对象外保存，并在合适的时候可以将对象恢复到保存的状态。这个概念很简单，涉及到三个角色：</p>\n<ul>\n<li>发起人，需要记录状态的对象</li>\n<li>备忘录， 用来储存状态</li>\n<li>备忘录管理者，对备忘录进行管理，保存和恢复</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Memorial</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">state</span>: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">memorize</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Memento</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">state</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">restore</span>(<span class=\"params\">memento</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = memento.<span class=\"property\">state</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Memento</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">state</span>: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">state</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = state;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Manager</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">memento</span>: <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> m = <span class=\"keyword\">new</span> <span class=\"title class_\">Memorial</span>();</span><br><span class=\"line\"><span class=\"title class_\">Manager</span>.<span class=\"property\">memento</span> = <span class=\"title class_\">Memorial</span>.<span class=\"title function_\">memorize</span>();</span><br><span class=\"line\"><span class=\"title class_\">Memorize</span>.<span class=\"title function_\">restore</span>(<span class=\"title class_\">Manager</span>.<span class=\"property\">memento</span>);</span><br></pre></td></tr></table></figure>\n\n<p>它的优点很明显，可以保存和回复状态，支持回滚事务。但在使用时，通常是结合了别的设计模式的变种。</p>\n<h4 id=\"拓展-2\"><a href=\"#拓展-2\" class=\"headerlink\" title=\"拓展\"></a>拓展</h4><p>结合原型模式，可以直接用clone对象的方式保存状态。这么做问题是当状态对象较大时，会有时间和空间的开销，优势是可以直接将状态存储在类内部，避免了其余类的定义。</p>\n<p>在多状态存储上，Java可以借用BeanUtil工具类（书中所说），JavaScript中就灵活很多了（还是因为轻量级的对象）。同样的多备忘录模式就不再赘述。另外，需要保证备忘录的保密性时，封装成业务类的内置类，设置权限为<code>private</code>即可，JS中同理。</p>\n<h3 id=\"访问者模式\"><a href=\"#访问者模式\" class=\"headerlink\" title=\"访问者模式\"></a>访问者模式</h3><p>访问者模式指，封装作用在数据结构上各元素的操作，它可以在不改变数据的前提下定义新的对于元素的操作。实现原理上，</p>\n<ul>\n<li>被访问类新增访问方法（如<code>accept</code>），注入访问类，同时将自己交给访问类</li>\n<li>访问类根据得到的被访问类对象，执行想要的操作</li>\n<li>场景类中通过调用访问方法访问被访问类</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Element</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">accept</span><span class=\"params\">(IVisitor v)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Element</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">foo</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 注入访问类</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">accept</span><span class=\"params\">(IVisitor v)</span> &#123;</span><br><span class=\"line\">    visitor.visit(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">IVisitor</span>() &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 通过重载对不同元素定义不同的访问方式</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">visit</span><span class=\"params\">(Element e)</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">visit</span><span class=\"params\">(OtherElement e)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然，为了保证依赖倒置原则，被访问类和访问类都可以再抽象出抽象类和接口。另外，访问者模式通常和组合模式、迭代器模式一同出现。访问者模式的优点：</p>\n<ul>\n<li>符合单一职责原则</li>\n<li>拓展性优秀</li>\n</ul>\n<p>缺点在于，被访问者要暴露细节给访问者，通常会增加很多约定，使代码不稳定。另外重载中依赖的是具体元素违背了依赖倒置原则。</p>\n<p>访问器模式的应用场景<strong>通常是使用迭代器模式已经不能满足的场合</strong>。比如对不同的元素有不同的遍历操作，甚至涉及到元素内部的逻辑。使用访问器模式可以封装和掩盖这种差异性。</p>\n<h4 id=\"拓展-3\"><a href=\"#拓展-3\" class=\"headerlink\" title=\"拓展\"></a>拓展</h4><p>在访问器模式和迭代器模式一同出现时，可以增加统计功能，在每次访问元素时收集统计信息。在往深处拓展，甚至可以抽象访问器为接口，从而拓展不同类型的访问器，如用来展示数据和用来统计数据的。</p>\n<h3 id=\"状态模式\"><a href=\"#状态模式\" class=\"headerlink\" title=\"状态模式\"></a>状态模式</h3><p>这种模式就很好理解了。即将客体抽象成一个<strong>有限状态机</strong>，客体有一个初始状态，在某特定时机下会跃迁到另一状态，且状态间的跳转是有规律可循的。这种模式在编程中非常常见，自然语言分析、所有可以用马尔科夫过程描述的事物变化都可以抽象成状态模式实现。在实现时，主要要完成三方面工作：</p>\n<ul>\n<li>定义<strong>所有状态</strong>，根据状态的薄厚程度，用常量或类定义</li>\n<li>定义修改状态的行为，在方法内往往要根据上一时刻状态做判断，这些行为定义在状态内部</li>\n<li>在上下文中调用这些行为</li>\n</ul>\n<p>在实现时，为了避免<code>switch</code>语句，会使用一个上下文类，托管当前状态，在状态切换时，先调用状态类中的行为，再通知上下文类更换托管的状态。两者相互注入。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">State</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 注入上下文对象</span></span><br><span class=\"line\">  <span class=\"keyword\">protected</span> Context c;</span><br><span class=\"line\">  <span class=\"comment\">// 设置上下文</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setContext</span><span class=\"params\">(Context c)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.context = c;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 行为</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"title function_\">action1</span><span class=\"params\">()</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"title function_\">action2</span><span class=\"params\">()</span>;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">State1</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">action1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">action2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>.context.setState(Context.STATE2);</span><br><span class=\"line\">    <span class=\"comment\">// 切换到state2</span></span><br><span class=\"line\">    <span class=\"built_in\">super</span>.context.handleAction2();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Context</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 注入所有状态</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">state</span> <span class=\"variable\">STATE1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">State1</span>();</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">state</span> <span class=\"variable\">STATE2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">State2</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> State CurrState;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> State <span class=\"title function_\">getState</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.CurrState;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 设置当前状态</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setState</span><span class=\"params\">(State currState)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.currState = currState;</span><br><span class=\"line\">    <span class=\"comment\">// 切换当前状态</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.CurrState.setContext(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 行为委托</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleAction1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.CurrState.action1();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleAction2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.CurrState.action2();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>增加了上下文类Context后，避免了大量的<code>switch</code>语句，问题是，状态较多时，定义的类也会较多。状态模式在工作流开发中很常用。</p>\n<h3 id=\"解释器模式\"><a href=\"#解释器模式\" class=\"headerlink\" title=\"解释器模式\"></a>解释器模式</h3><p>解释器模式顾名思义，即定义一个解释器，去按文法解释一种语言中的句子。当然这个语言以科学运算和编程语句居多。它的应用场景比较特殊，即需要语句解析介入的场景，比如自然语言分析、或者真的编写一个语言的解释器。通常开发解释器工程量和难度都较大，且会遇到效率问题。一般应用较少。</p>\n<p>在这个模式下。主要有下面这些角色；</p>\n<ul>\n<li>抽象解释器，用来派生具体的表达式解释器</li>\n<li>终结符解释器，即不需要解释的，字面意义的符号，比如<code>1</code>或<code>a</code>等</li>\n<li>非终结符解释器，和两边表达式相关联的符号解释器，比如<code>+</code>或<code>*</code>等</li>\n<li>上下文角色</li>\n</ul>\n<h3 id=\"享元模式\"><a href=\"#享元模式\" class=\"headerlink\" title=\"享元模式\"></a>享元模式</h3><p>享元模式是一种重要的池技术，原理上指使用共享对象支持大量的细粒度的对象。我们可以将这些对象内的状态拆分成可共享状态和不可共享状态。对象往往可以按可共享状态拆分为细粒度较大的若干部分，放在共享对象池中，再贴上自己的不可共享状态。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 享元</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SharedObject</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String intrinsic;</span><br><span class=\"line\">  <span class=\"comment\">// 共享的状态作为享元的key</span></span><br><span class=\"line\">  <span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> String Extrinsic;</span><br><span class=\"line\">  <span class=\"comment\">// 共享的状态需要可以设置</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">SharedObject</span><span class=\"params\">(String E)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.Extrinsic = E;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 业务方法</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"title function_\">foo</span><span class=\"params\">()</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 不可共享状态的getter/setter</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> String <span class=\"title function_\">getIntrinsic</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> intrinsic;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setIntrinsic</span><span class=\"params\">(String intrinsic)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.intrinsic = intrinsic;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 享元工厂</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SharedObjectFactory</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 共享池</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> HashMap&lt;String, SharedObject&gt; pool = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;String, SharedObject&gt;();</span><br><span class=\"line\">  <span class=\"comment\">// 工厂方法</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SharedObject <span class=\"title function_\">getSharedObject</span><span class=\"params\">(String Extrinsic)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">SharedObject</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 从池中寻找</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pool.containsKey(Extrinsic)) &#123;</span><br><span class=\"line\">      o = pool.get(Extrinsic);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      o = <span class=\"keyword\">new</span> <span class=\"title class_\">SharedObject1</span>(Extrinsic);</span><br><span class=\"line\">      <span class=\"comment\">// 放到池中</span></span><br><span class=\"line\">      pool.put(Extrinsic, o);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在共享对象池中，建议使用可共享状态的简单组合构成池内元素的key值（最好是基本类型），一方面减少编程负担，另一方面还可以提高工作效率。享元模式主要使用在下面场景下：</p>\n<ul>\n<li>系统中存在大量相似对象</li>\n<li>对象具备相近的外部状态和与环境无关的内部状态</li>\n</ul>\n<h3 id=\"桥梁模式\"><a href=\"#桥梁模式\" class=\"headerlink\" title=\"桥梁模式\"></a>桥梁模式</h3><p>桥梁模式又叫桥接模式，是比较轻量级的一种设计模式，意为将抽象和实现解耦，使两者可以独立变化。角色上，桥梁模式分为主体和客体，在主体内注入客体的接口&#x2F;抽象类，并在主体的方法内使用，提供setter或构造函数方法。这样继承自主体的类就可以根据传入setter&#x2F;构造函数的客体实现类的不同得到不同的实现结果。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Object</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 基本方法</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">foo</span><span class=\"params\">()</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Object1</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Object</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">foo</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 自己的逻辑</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Object2</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Object</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">foo</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 自己的逻辑</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Subject</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 必须有一个注入的客体</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> Object o;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 必须可以通过构造函数/setter注入</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">Subject</span><span class=\"params\">(Object o)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.o = o;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 获得客体行为</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">bar</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.o.foo();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 获得客体</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> Object <span class=\"title function_\">getObject</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Subject1</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Subject</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 覆写构造函数</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">Subject1</span><span class=\"params\">(Object o)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>(o);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 自身业务</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">bar</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>.bar();</span><br><span class=\"line\">    <span class=\"comment\">// ... 其余业务</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Scene</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Object</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object1</span>();</span><br><span class=\"line\">    <span class=\"type\">Subject</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Subject1</span>(o);</span><br><span class=\"line\">    s.bar();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>桥梁模式的扩展能力很强，它是<strong>对普通的继承的一种灵活的补充</strong>，避免了父类对子类的强侵入，可以将父类可能会变化的部分抽出去，通过注入的方式引入，方便子类随时更换。</p>\n<h2 id=\"设计模式的比较\"><a href=\"#设计模式的比较\" class=\"headerlink\" title=\"设计模式的比较\"></a>设计模式的比较</h2><h3 id=\"创建类\"><a href=\"#创建类\" class=\"headerlink\" title=\"创建类\"></a>创建类</h3><p>和创建类相关的模式：</p>\n<ul>\n<li>工厂模式</li>\n<li>抽象工厂模式</li>\n<li>建造者模式</li>\n<li>单例模式</li>\n<li>原型模式</li>\n</ul>\n<p>后两者容易理解。重点对比上面三个模式：</p>\n<ul>\n<li>工厂模式注重<strong>整体的构建过程</strong>，成产出的对象具有很强的<strong>相似性</strong></li>\n<li>建造者模式注重<strong>建造的过程</strong>，希望在每一步最好都可定制，根据步骤的不同生产出差异化的对象，<strong>通常伴生导演类</strong>。</li>\n<li>抽象工厂模式通常和<strong>产品族</strong>关系密切，尤其是一组事物有很明显的两个或多个划分方法时使用，其余等同工厂模式</li>\n</ul>\n<h3 id=\"结构类\"><a href=\"#结构类\" class=\"headerlink\" title=\"结构类\"></a>结构类</h3><p>结构类指调整或组合类产生更大结构来适应更高层次逻辑需求，大多通过增加中间层解决问题，有下面的相关模式：</p>\n<ul>\n<li>适配器模式</li>\n<li>桥梁模式</li>\n<li>组合模式</li>\n<li>装饰模式</li>\n<li>门面模式</li>\n<li>享元模式</li>\n<li>代理模式</li>\n</ul>\n<p>其中简单明了的有桥梁模式、组合模式、门面模式、享元模式，下面对比下其他的几种模式：</p>\n<ul>\n<li>代理模式即在原对象和用户间增加了一个中间层，在不改变原接口的情况下，<strong>增加准入和限定操作</strong></li>\n<li>装饰模式是代理模式的加强，装饰类并不起中间层的作用，不做准入判断，它<strong>单纯地在原接口上增强或削弱功能</strong></li>\n<li>适配器模式和它们差别较大，它也起包装作用，作用于两个不同的对象，重点在<strong>伪装和转换</strong></li>\n</ul>\n<h3 id=\"行为类\"><a href=\"#行为类\" class=\"headerlink\" title=\"行为类\"></a>行为类</h3><p>这一批模式重点在修饰类的行为：</p>\n<ul>\n<li>责任链模式</li>\n<li>命令模式</li>\n<li>解释器模式</li>\n<li>迭代器模式</li>\n<li>中介者模式</li>\n<li>备忘录模式</li>\n<li>观察者模式</li>\n<li>状态模式</li>\n<li>策略模式</li>\n<li>模板方法模式</li>\n<li>访问者模式</li>\n</ul>\n<p>下面比较一些类似的模式</p>\n<ul>\n<li>命令模式强调把<strong>动作解耦</strong>，将其分为<strong>执行对象和执行行为</strong>，在行为类内部注入执行对象，使用执行者操作命令</li>\n<li>策略模式强调包装<strong>对等的可替换的多个算法</strong>，通常有一个上下文类，封装所有的算法</li>\n</ul>\n<p>比如在表单验证时，策略模式会将所有的验证规则对等地定义出来，再由一个表单验证上下文对象包裹起来；命令模式下，首先要明确所有验证规则的接受者（Receiver），再定义所有的验证“命令”，最后由执行者（Invoker）操作命令完成工作，具体工作是在接受者那里完成的，命令只负责组织。</p>\n<p>关于策略模式和状态模式，</p>\n<ul>\n<li>策略模式没有状态的概念，虽然有上下文类<code>Context</code>，但是切换的状态只是不同的算法而已</li>\n<li>状态模式重点关注状态，它同样有上下文类<code>Context</code>，但<strong>相同的行为在不同的状态下产生的结果不同</strong>。在实现上体现在，上下文类内保存了当前状态，虽然状态间都有相同方法，但实现不同。</li>\n</ul>\n<p>至于观察者模式和责任链模式，</p>\n<ul>\n<li>观察者模式重点在<strong>观察和被观察的关系</strong>（想想事件监听），被观察者中需要注入监听者（Observable），再由监听者告知观察者（Observer），整条链是有回调的，链上传递的信息可以自由变化，即最后返回给用户数据的总是第一个被观察者</li>\n<li>责任链模式重点在<strong>事务链条化处理</strong>的过程（想想中间件），每个处理者都必须通过<code>next</code>属性明确指定下一个目标，整条链是责任链，链上角色相互平等，传递的信息一般不会改变结构，最终由最后一个角色返回结果</li>\n</ul>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>首先先来比较策略模式和桥梁模式。它俩的共同点在都有一个注入依赖关系。策略模式中算法封装被注入到上下文类<code>Context</code>中，桥梁模式中差异化继承的部分被单独抽出再注入父类里。它们的区别主要在：</p>\n<ul>\n<li>策略模式着重于封装一系列不同的行为</li>\n<li>桥梁模式在不破坏封装的情况下将差异化的实现部分从抽象部分抽取出来，因此必然有抽象化角色和实现化角色</li>\n</ul>\n<p>门面模式和中介者模式就比较好区分了，它们的应用场景有很大不同;</p>\n<ul>\n<li>门面模式用来掩盖下面复杂的子系统，提供统一的高层接口（“金玉其外”），它并不管下面的子系统间怎样耦合（“败絮其中”）</li>\n<li>中介者模式要用在同事对象间（通常至少3个）复杂交互时，化网状结构为星型结构，减少耦合</li>\n</ul>\n<p>最后，代理模式、装饰模式、适配器模式（不严格）、桥梁模式、门面模式都可以总结为<strong>包装模式</strong>，它们并没有为原来的类增加新的功能，只是增加了新的包装或插件。</p>\n<h2 id=\"设计模式的组合\"><a href=\"#设计模式的组合\" class=\"headerlink\" title=\"设计模式的组合\"></a>设计模式的组合</h2><h3 id=\"shell命令解释demo\"><a href=\"#shell命令解释demo\" class=\"headerlink\" title=\"shell命令解释demo\"></a>shell命令解释demo</h3><p>主要采用命令模式、责任链模式、模板方法模式。</p>\n<h3 id=\"银行扣款demo\"><a href=\"#银行扣款demo\" class=\"headerlink\" title=\"银行扣款demo\"></a>银行扣款demo</h3><p>主要采用策略模式、工厂方法模式、门面模式</p>\n<h3 id=\"产品消费事件demo\"><a href=\"#产品消费事件demo\" class=\"headerlink\" title=\"产品消费事件demo\"></a>产品消费事件demo</h3><p>产品创建时摄影工厂模式，保证产品和工厂的紧耦合，避免创建事件不触发的可能性</p>\n<h2 id=\"新模式\"><a href=\"#新模式\" class=\"headerlink\" title=\"新模式\"></a>新模式</h2><h3 id=\"MVC\"><a href=\"#MVC\" class=\"headerlink\" title=\"MVC\"></a>MVC</h3><p>MVC其实算不上一种新模式，但是从上世纪90年代起到现在实在是太流行了。它的目的是通过C（Controller）将模型M（Model）和视图V（View）分离开。书中具体在讲MVC在Java Web开发中的实现，这里从略。</p>\n<h3 id=\"规格书模式\"><a href=\"#规格书模式\" class=\"headerlink\" title=\"规格书模式\"></a>规格书模式</h3><p>规格书模式多用在描述一个规范或条件的场合下，比如“性别男年龄大于20且位于北京”。通过定义抽象类以及<code>AND</code>，<code>OR</code>，<code>NOT</code>等的组合，可以得到更复杂的规格书对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ISpec</span>() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isSatisfied</span><span class=\"params\">(Object o)</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> ISpec <span class=\"title function_\">and</span><span class=\"params\">(ISpec s)</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> ISpec <span class=\"title function_\">or</span><span class=\"params\">(ISpec s)</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> ISpec <span class=\"title function_\">not</span><span class=\"params\">(ISpec s)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Spec <span class=\"keyword\">implements</span> <span class=\"title class_\">ISpec</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"title function_\">isSatisfied</span><span class=\"params\">(Object o)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> ISpec <span class=\"title function_\">and</span><span class=\"params\">(ISpec s)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AndSpec</span>(<span class=\"built_in\">this</span>, spec);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> ISpec <span class=\"title function_\">or</span><span class=\"params\">(ISpec s)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newOrSpec(<span class=\"built_in\">this</span>, spec);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> ISpec <span class=\"title function_\">not</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> notSpec(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AndSpec</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Spec</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> ISpec left;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> ISpec right;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">AndSpec</span><span class=\"params\">(ISpec left, ISpec right)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.left = left;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.right = right;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isSatisfied</span><span class=\"params\">(Object o)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> left.isSatisfied(o) &amp;&amp; right.isSatisfied(o);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OrSpec</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Spec</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> ISpec left;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> ISpec right;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">OrSpec</span><span class=\"params\">(ISpec left, ISpec right)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.left = left;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.right = right;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isSatisfied</span><span class=\"params\">(Object o)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> left.isSatisfied(o) || right.isSatisfied(o);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NotSpec</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Spec</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> ISpec spec;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">NotSpec</span><span class=\"params\">(ISpec s)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.spec = s;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isSatisfied</span><span class=\"params\">(Object o)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !<span class=\"built_in\">this</span>.spec.isSatisfied(o);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">bizSpec</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Spec</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Object obj;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">bizSpec</span><span class=\"params\">(Object o)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.obj = o;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isSatisfied</span><span class=\"params\">(Object o)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 根据业务逻辑决定真值判断</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>规格模式应用场景比较局限，在LINQ（Language INtegrated Query，语言集成查询）中常见，用来构造WHERE子句。</p>\n<h3 id=\"对象池模式\"><a href=\"#对象池模式\" class=\"headerlink\" title=\"对象池模式\"></a>对象池模式</h3><p>对象池模式和享元模式相似，都是循环使用对象，但是对象池模式是整个直接取出到池中，避免初始化和释放资源时的消耗。如连接池和线程池就是常见的例子。</p>\n<h3 id=\"雇工模式\"><a href=\"#雇工模式\" class=\"headerlink\" title=\"雇工模式\"></a>雇工模式</h3><p>雇工模式是常见的“接口-实现”的倒转实现。比如，小学老师教小学学生，中学老师教中学学生，大学老师教大学学生。在实现时，我们先定义学习接口，再实现所有的学生类。再实现老师时，直接调用学生接口的学习方法就完成了教学的实现。雇工模式为一组类提供通用的功能，不需要类实现这些功能，而在客体上实现功能。它和命令模式有相似之处。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">IService</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">serving</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Object</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IService</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">serving</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 服务完成</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Servant</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">service</span><span class=\"params\">(IService s)</span> &#123;</span><br><span class=\"line\">    s.serving();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"黑板模式\"><a href=\"#黑板模式\" class=\"headerlink\" title=\"黑板模式\"></a>黑板模式</h3><p>黑板模式是观察者模式的拓展，它允许消息有多个读写者，且同时进行。消息生产者通过“黑板”这个总线，将消息传递给对应的消息消费者。这可以是一种宏观的设计理念，使用数据库或者消息队列当做“黑板”都是可以的。</p>\n<h3 id=\"空对象模式\"><a href=\"#空对象模式\" class=\"headerlink\" title=\"空对象模式\"></a>空对象模式</h3><p>空对象通过实现一个无意义的默认类避免程序出现null值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">NullAnimal</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> makeSound &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 什么都不写</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>–END–</em></p>\n",
            "tags": [
                "JavaScript",
                "设计模式",
                "类",
                "接口",
                "抽象类"
            ]
        }
    ]
}