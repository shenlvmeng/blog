<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Shenlvmeng&#39;s Blog • Posts by &#34;框架&#34; tag</title>
        <link>http://shenlvmeng.github.com/blog</link>
        <description>Be sharp, my friend.</description>
        <language>zh-CN</language>
        <pubDate>Mon, 19 Jun 2017 17:36:01 +0800</pubDate>
        <lastBuildDate>Mon, 19 Jun 2017 17:36:01 +0800</lastBuildDate>
        <category>总结</category>
        <category>制度</category>
        <category>道德</category>
        <category>文官</category>
        <category>万历</category>
        <category>明朝</category>
        <category>读书笔记</category>
        <category>展望</category>
        <category>2018</category>
        <category>2019</category>
        <category>flag</category>
        <category>2020</category>
        <category>2021</category>
        <category>2022</category>
        <category>2023</category>
        <category>面试</category>
        <category>前端</category>
        <category>FAQ</category>
        <category>HTML</category>
        <category>CSS</category>
        <category>style guide</category>
        <category>编程</category>
        <category>范式</category>
        <category>设计</category>
        <category>艺术</category>
        <category>质量</category>
        <category>async_hooks</category>
        <category>cls-hooked</category>
        <category>logId</category>
        <category>录音</category>
        <category>getUserMedia</category>
        <category>AudioContext</category>
        <category>PCM</category>
        <category>WAVE</category>
        <category>二叉搜索树</category>
        <category>算法</category>
        <category>回忆</category>
        <category>老朋友</category>
        <category>C</category>
        <category>Hash</category>
        <category>布隆过滤器</category>
        <category>字符串检索</category>
        <category>canvas</category>
        <category>流程图</category>
        <category>d3</category>
        <category>g6</category>
        <category>zrender</category>
        <category>processOn</category>
        <category>SDN</category>
        <category>cbench</category>
        <category>安装说明</category>
        <category>绘图</category>
        <category>动画</category>
        <category>攻略</category>
        <category>流水账</category>
        <category>成都</category>
        <category>重庆</category>
        <category>武汉</category>
        <category>重构</category>
        <category>代码</category>
        <category>代码风格</category>
        <category>数据可视化</category>
        <category>爬虫</category>
        <category>chrome</category>
        <category>crx</category>
        <category>扩展</category>
        <category>CORS</category>
        <category>跨域</category>
        <category>盒模型</category>
        <category>浮动</category>
        <category>Reactive Programming</category>
        <category>JavaScript</category>
        <category>Cycle.js</category>
        <category>Dart</category>
        <category>最佳实践</category>
        <category>引流</category>
        <category>universal-link</category>
        <category>app-link</category>
        <category>脚手架</category>
        <category>degit</category>
        <category>git</category>
        <category>设计模式</category>
        <category>类</category>
        <category>接口</category>
        <category>抽象类</category>
        <category>DOM</category>
        <category>Docker</category>
        <category>ONOS</category>
        <category>控制器</category>
        <category>虚拟化</category>
        <category>笔记</category>
        <category>UX</category>
        <category>UED</category>
        <category>准则</category>
        <category>Java</category>
        <category>Ruby</category>
        <category>反射</category>
        <category>编程范式</category>
        <category>鸭子类型</category>
        <category>管理</category>
        <category>效率</category>
        <category>知识工作者</category>
        <category>卓有成效</category>
        <category>Elm</category>
        <category>框架</category>
        <category>函数式编程</category>
        <category>虚网映射</category>
        <category>Javascript</category>
        <category>并发</category>
        <category>event loop</category>
        <category>覆盖率</category>
        <category>端到端测试</category>
        <category>istanbul</category>
        <category>istanbuljs</category>
        <category>JavaSript</category>
        <category>Express</category>
        <category>源码</category>
        <category>代码覆盖率</category>
        <category>istanbul-middleware</category>
        <category>代码插桩</category>
        <category>require钩子</category>
        <category>babel-plugin-istanbul</category>
        <category>css</category>
        <category>html5</category>
        <category>flex</category>
        <category>javascript</category>
        <category>roadmap</category>
        <category>闭包</category>
        <category>Haskell</category>
        <category>monad</category>
        <category>后端</category>
        <category>管理后台</category>
        <category>egg.js</category>
        <category>工作流</category>
        <category>pull request</category>
        <category>golang</category>
        <category>语言学习</category>
        <category>黑客与画家</category>
        <category>创业</category>
        <category>骑行</category>
        <category>海南</category>
        <category>图文</category>
        <category>reflow</category>
        <category>repaint</category>
        <category>命名法</category>
        <category>成功学</category>
        <category>自我建设</category>
        <category>HTTP</category>
        <category>HTTP/2</category>
        <category>SPDY</category>
        <category>QUIC</category>
        <category>HTTPS</category>
        <category>状态码</category>
        <category>网络攻击</category>
        <category>介绍</category>
        <category>图片渲染</category>
        <category>html2canvas</category>
        <category>dom-to-image</category>
        <category>electron</category>
        <category>indexedDB</category>
        <category>异步</category>
        <category>Generator</category>
        <category>thunk</category>
        <category>async</category>
        <category>函数表达式</category>
        <category>对象</category>
        <category>继承</category>
        <category>类型转换</category>
        <category>==</category>
        <category>类型判断</category>
        <category>猫</category>
        <category>杀手</category>
        <category>管理学</category>
        <category>领导力</category>
        <category>梯队</category>
        <category>移动端</category>
        <category>UI</category>
        <category>自适应</category>
        <category>rem</category>
        <category>Electron</category>
        <category>GUI</category>
        <category>gpx</category>
        <category>template</category>
        <category>Electron Builder</category>
        <category>PWA</category>
        <category>方法论</category>
        <category>夜话</category>
        <category>多线</category>
        <category>生活</category>
        <category>密码</category>
        <category>密钥</category>
        <category>技改</category>
        <category>Vue</category>
        <category>gulp</category>
        <category>瀑布流</category>
        <category>电影</category>
        <category>PHP</category>
        <category>参考</category>
        <category>思维</category>
        <category>学习能力</category>
        <category>右脑</category>
        <category>经济学</category>
        <category>宏观经济学</category>
        <category>术语</category>
        <category>GDP</category>
        <category>CPI</category>
        <category>储蓄</category>
        <category>投资</category>
        <category>金融市场</category>
        <category>股票</category>
        <category>债券</category>
        <category>美联储</category>
        <category>失业</category>
        <category>货币</category>
        <category>现值</category>
        <category>准备金</category>
        <category>货币中性</category>
        <category>通货膨胀</category>
        <category>汇率</category>
        <category>购买力</category>
        <category>净出口</category>
        <category>资产净流出</category>
        <category>总需求</category>
        <category>总供给</category>
        <category>流动性偏好</category>
        <category>乘数效应</category>
        <category>菲利普斯曲线</category>
        <category>微观经济学</category>
        <category>供求</category>
        <category>贸易</category>
        <category>市场</category>
        <category>税</category>
        <category>剩余</category>
        <category>外部性</category>
        <category>公共物品</category>
        <category>公共资源</category>
        <category>生产成本</category>
        <category>利润</category>
        <category>垄断</category>
        <category>价格歧视</category>
        <category>寡头</category>
        <category>垄断竞争</category>
        <category>生产要素市场</category>
        <category>贫困</category>
        <category>消费者选择理论</category>
        <category>不对称信息</category>
        <category>政治经济学</category>
        <category>行为经济学</category>
        <category>VSCode</category>
        <category>编辑器</category>
        <category>IDE</category>
        <category>hybrid</category>
        <category>JSBridge</category>
        <category>Web Worker</category>
        <category>Service Worker</category>
        <category>习惯</category>
        <category>lint</category>
        <category>editorconfig</category>
        <category>commit message</category>
        <category>量子物理</category>
        <category>史话</category>
        <category>埋点</category>
        <category>raven.js</category>
        <category>前端监控</category>
        <category>文本编辑器</category>
        <category>quill</category>
        <category>结构化数据</category>
        <category>React</category>
        <category>Hooks</category>
        <category>函数组件</category>
        <category>复用</category>
        <category>状态管理</category>
        <category>redux</category>
        <category>MobX</category>
        <category>代码质量</category>
        <category>重来</category>
        <category>requestAnimationFrame</category>
        <category>TypeScript</category>
        <category>路书</category>
        <category>gpx解析</category>
        <category>EXIF</category>
        <category>人类</category>
        <category>生存</category>
        <category>基因</category>
        <category>响应式编程</category>
        <category>RxJS</category>
        <category>成长</category>
        <category>业务</category>
        <category>思想</category>
        <category>程序设计</category>
        <category>心理学</category>
        <category>自我</category>
        <category>社会思维</category>
        <category>社会影响</category>
        <category>文化</category>
        <category>性别</category>
        <category>从众</category>
        <category>说服</category>
        <category>临床诊断</category>
        <category>陪审团</category>
        <category>司法</category>
        <category>物质主义</category>
        <category>健康</category>
        <category>社会关系</category>
        <category>偏见</category>
        <category>攻击行为</category>
        <category>亲密关系</category>
        <category>友谊</category>
        <category>爱情</category>
        <category>利他</category>
        <category>冲突</category>
        <category>和解</category>
        <category>软技能</category>
        <category>理财</category>
        <category>健身</category>
        <category>自我营销</category>
        <category>学习</category>
        <category>商业模式</category>
        <category>产品</category>
        <category>校园网</category>
        <category>互联网</category>
        <category>技术</category>
        <category>web开发</category>
        <category>哲思</category>
        <category>择偶观</category>
        <category>validator</category>
        <category>大文件</category>
        <category>visibilityChange</category>
        <category>IntersectionObserver</category>
        <category>图种</category>
        <category>draggable</category>
        <category>webpack</category>
        <category>z-index</category>
        <category>git submodule</category>
        <category>object-fit</category>
        <category>object-position</category>
        <category>BroadcastChannel</category>
        <category>extract-text-webpack-plugin</category>
        <category>lottie</category>
        <category>backface-visibility</category>
        <category>egret</category>
        <category>mock</category>
        <category>SSO</category>
        <category>autoprefixer</category>
        <category>polyfill</category>
        <category>Android</category>
        <category>ffmpeg</category>
        <category>React Hooks</category>
        <category>rollup</category>
        <category>CDN</category>
        <category>DNS</category>
        <category>CNAME</category>
        <category>架构</category>
        <category>组件</category>
        <category>ssh</category>
        <category>fis-receiver</category>
        <category>tmux</category>
        <category>origami</category>
        <category>promise</category>
        <category>encodeURI</category>
        <category>encodeURIComponent</category>
        <category>axios</category>
        <category>charles</category>
        <category>黑色幽默</category>
        <category>朋友</category>
        <category>梦</category>
        <category>濒死</category>
        <category>江南</category>
        <category>苏州</category>
        <category>无锡</category>
        <category>宜兴</category>
        <category>湖州</category>
        <category>南浔</category>
        <category>游记</category>
        <category>随笔</category>
        <category>群众</category>
        <category>理论</category>
        <category>实效</category>
        <category>测试</category>
        <category>长沙</category>
        <category>杭州</category>
        <category>湖南</category>
        <category>核酸</category>
        <category>美食</category>
        <category>云南</category>
        <category>丽江</category>
        <category>大理</category>
        <category>青岛</category>
        <category>济南</category>
        <category>山东</category>
        <category>西北</category>
        <category>银川</category>
        <category>西宁</category>
        <category>青海湖</category>
        <category>西海镇</category>
        <category>茶卡盐湖</category>
        <category>厦门</category>
        <category>感受</category>
        <category>C语言</category>
        <category>树</category>
        <category>主干开发</category>
        <category>GitFlow</category>
        <category>GithubFlow</category>
        <category>typescript</category>
        <category>类型系统</category>
        <category>webrtc</category>
        <category>RTMP</category>
        <category>首屏时间</category>
        <category>性能优化</category>
        <category>公司</category>
        <category>个人发展</category>
        <category>战略</category>
        <category>晋升</category>
        <category>哲学</category>
        <category>幸福</category>
        <category>人生</category>
        <category>叔本华</category>
        <category>Unix</category>
        <category>Rollup</category>
        <category>mouseout</category>
        <category>mouseleave</category>
        <category>lint-staged</category>
        <category>吸顶</category>
        <category>图片组件</category>
        <category>形式系统</category>
        <category>不完全性</category>
        <category>隐喻</category>
        <category>哥德尔</category>
        <category>巴赫</category>
        <category>埃舍尔</category>
        <category>济州</category>
        <category>西归浦</category>
        <category>城山</category>
        <category>咸德</category>
        <category>人工智能</category>
        <category>心智</category>
        <category>自指</category>
        <category>图灵</category>
        <category>马列主义</category>
        <category>恩格斯</category>
        <category>家庭</category>
        <category>国家</category>
        <category>阶级</category>
        <category>氏族</category>
        <category>哲学史</category>
        <category>孔子</category>
        <category>老子</category>
        <category>儒家</category>
        <category>道家</category>
        <category>佛教</category>
        <category>禅宗</category>
        <category>理学</category>
        <category>心学</category>
        <category>计算机</category>
        <category>微机原理</category>
        <category>门</category>
        <category>操作系统</category>
        <category>数字电路</category>
        <item>
            <guid isPermalink="true">http://shenlvmeng.github.com/blog/2017/06/19/elm-introduction/</guid>
            <title>Elm——函数式前端框架介绍</title>
            <link>http://shenlvmeng.github.com/blog/2017/06/19/elm-introduction/</link>
            <category>Elm</category>
            <category>框架</category>
            <category>函数式编程</category>
            <pubDate>Mon, 19 Jun 2017 17:36:01 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;前言&#34;&gt;&lt;a href=&#34;#前言&#34; class=&#34;headerlink&#34; title=&#34;前言&#34;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Elm提出于2012年，最初出现在Evan Czaplicki的毕业论文中（掩面）。目标是提出一个面向web的函数式编程语言。它拥有诸多特性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;强类型语言&lt;/li&gt;
&lt;li&gt;一次编译，no runtime error&lt;/li&gt;
&lt;li&gt;状态不可修改&lt;/li&gt;
&lt;li&gt;函数是一级公民等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Elm是门新语言，它是一个类似React（但绝对和它不一样）的前端框架。在Web App的设计它甚至启发了Flux设计的提出。在如今前端框架吸收函数式编程以及强类型语言优点的形势下，学习Elm可能会开启对Web前端开发的重新认识。&lt;/p&gt;
&lt;p&gt;再看完下面的介绍后，建议阅读两篇对Elm的评价，相信更有助于对这门年轻语言特点的理解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@ericdreichert/my-thoughts-on-elm-lang-b609d69cfa4d&#34;&gt;My thoughts on Elm Lang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hackernoon.com/some-thoughts-on-elm-development-39a0f8a9002a&#34;&gt;Some thoughts on Elm Development&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;准备工作&#34;&gt;&lt;a href=&#34;#准备工作&#34; class=&#34;headerlink&#34; title=&#34;准备工作&#34;&gt;&lt;/a&gt;准备工作&lt;/h2&gt;&lt;p&gt;Elm是通过将代码编译成JavaScript工作的。一个最简单的Elm App大概像下面这样：&lt;/p&gt;
&lt;figure class=&#34;highlight elm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; Html &lt;span class=&#34;keyword&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;Html&lt;/span&gt;, button, div, text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; Html.Events &lt;span class=&#34;keyword&#34;&gt;exposing&lt;/span&gt; (onClick)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;main&lt;/span&gt; =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;Html&lt;/span&gt;.beginnerProgram &amp;#123; model = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, view = view, update = update &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Msg&lt;/span&gt; = &lt;span class=&#34;type&#34;&gt;Increment&lt;/span&gt; | &lt;span class=&#34;type&#34;&gt;Decrement&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;update&lt;/span&gt; msg model =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; msg &lt;span class=&#34;keyword&#34;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;Increment&lt;/span&gt; -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      model + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;Decrement&lt;/span&gt; -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      model - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;view&lt;/span&gt; model =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  div []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [ button [ onClick &lt;span class=&#34;type&#34;&gt;Decrement&lt;/span&gt; ] [ text &lt;span class=&#34;string&#34;&gt;&amp;quot;-&amp;quot;&lt;/span&gt; ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    , div [] [ text (toString model) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    , button [ onClick &lt;span class=&#34;type&#34;&gt;Increment&lt;/span&gt; ] [ text &lt;span class=&#34;string&#34;&gt;&amp;quot;+&amp;quot;&lt;/span&gt; ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;那么这样一个Elm文件是怎么应用在页面中呢？&lt;/p&gt;
&lt;p&gt;在&lt;a href=&#34;http://elm-lang.org/&#34;&gt;Elm&lt;/a&gt;安装完成后，会有4个Elm相关的包：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;elm-repl 命令行操作，在cli中感受Elm的语法特点&lt;/li&gt;
&lt;li&gt;elm-reactor 快速脚手架搭建&lt;/li&gt;
&lt;li&gt;elm-make 编译工具&lt;/li&gt;
&lt;li&gt;elm-package 包管理工具&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;麻雀虽小，五脏俱全。&lt;/p&gt;
&lt;h2 id=&#34;语法特点&#34;&gt;&lt;a href=&#34;#语法特点&#34; class=&#34;headerlink&#34; title=&#34;语法特点&#34;&gt;&lt;/a&gt;语法特点&lt;/h2&gt;&lt;p&gt;Elm在&lt;a href=&#34;http://elm-lang.org/docs/syntax&#34;&gt;语法&lt;/a&gt;上不同于C风格的所有语言，和Haskell更为靠近。&lt;/p&gt;
&lt;h3 id=&#34;注释&#34;&gt;&lt;a href=&#34;#注释&#34; class=&#34;headerlink&#34; title=&#34;注释&#34;&gt;&lt;/a&gt;注释&lt;/h3&gt;&lt;p&gt;用&lt;code&gt;--&lt;/code&gt;开启单行注释，结合&lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;进行多行注释&lt;/p&gt;
&lt;figure class=&#34;highlight elm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;-- a single line comment&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;&amp;#123;- a multiline comment&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;   &lt;span class=&#34;comment&#34;&gt;&amp;#123;- can be nested -&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;-&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;类型&#34;&gt;&lt;a href=&#34;#类型&#34; class=&#34;headerlink&#34; title=&#34;类型&#34;&gt;&lt;/a&gt;类型&lt;/h3&gt;&lt;p&gt;Elm是强类型语言，有Bool，Int，Float，Char，String 5种基本类型。有意思的是，&lt;strong&gt;Elm没有Null&lt;/strong&gt;。这也是特别&lt;a href=&#34;https://guide.elm-lang.org/error_handling/&#34;&gt;设计&lt;/a&gt;的。&lt;/p&gt;
&lt;div class=&#34;tip&#34;&gt;注意：Elm中Char类型用单引号`&#39;`包裹，而String类型用双引号`&#34;`包裹。
&lt;/div&gt;

&lt;p&gt;除了基本类型，Elm中还有List，Array，Tuple，Dict，Record几种泛型。其中List，Record设计类似JavaScript中的Array和Object。&lt;/p&gt;
&lt;div class=&#34;tip&#34;&gt;在Elm中`Array`和`List`是两种不同的类型，前者通过链表实现，后者通过Relaxed Radix Tree实现。前者在增删节点上高效，后者在随机查询时高效。&lt;/div&gt;

&lt;figure class=&#34;highlight elm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; :: [&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; :: &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; :: &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt; :: &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt; :: []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;point&lt;/span&gt; =                         &lt;span class=&#34;comment&#34;&gt;-- create a record&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#123; x = &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, y = &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;point&lt;/span&gt;.x                         &lt;span class=&#34;comment&#34;&gt;-- access field&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;List&lt;/span&gt;.map .x [point,&amp;#123;x=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,y=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&amp;#125;]   &lt;span class=&#34;comment&#34;&gt;-- field access function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123; point | x = &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt; &amp;#125;               &lt;span class=&#34;comment&#34;&gt;-- update a field&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123; point |                       &lt;span class=&#34;comment&#34;&gt;-- update many fields&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x = point.x + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    y = point.y + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;*(值得注意的是，上面的&lt;code&gt;::&lt;/code&gt;和&lt;code&gt;.x&lt;/code&gt;实际上都是函数)*。&lt;/p&gt;
&lt;h4 id=&#34;类型声明&#34;&gt;&lt;a href=&#34;#类型声明&#34; class=&#34;headerlink&#34; title=&#34;类型声明&#34;&gt;&lt;/a&gt;类型声明&lt;/h4&gt;&lt;p&gt;类型是Elm中重要的一环，每个变量都需要有类型，编译时需要进行检查。因此显式地声明变量类型很重要。&lt;/p&gt;
&lt;p&gt;当我们需要通过基本类型构造复杂类型时，可以通过&lt;code&gt;type alias&lt;/code&gt;的形式为record创建新的类型。在新类型创建的同时，会同步生成一个record构造函数。&lt;/p&gt;
&lt;figure class=&#34;highlight elm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;-- Before：麻烦的函数写法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;hasBio&lt;/span&gt; : &amp;#123; name : &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt;, bio : &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt;, pic : &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &amp;#125; -&amp;gt; &lt;span class=&#34;type&#34;&gt;Bool&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;hasBio&lt;/span&gt; user =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt;.length user.bio &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;-- After：简便的写法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;User&lt;/span&gt; =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#123; name : &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  , bio : &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  , pic : &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;hasBio&lt;/span&gt; : &lt;span class=&#34;type&#34;&gt;User&lt;/span&gt; -&amp;gt; &lt;span class=&#34;type&#34;&gt;Bool&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;hasBio&lt;/span&gt; user =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt;.length user.bio &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;Union类型&#34;&gt;&lt;a href=&#34;#Union类型&#34; class=&#34;headerlink&#34; title=&#34;Union类型&#34;&gt;&lt;/a&gt;Union类型&lt;/h4&gt;&lt;p&gt;之所以单独拿出来说，是因为Union Type的设计几乎是Elm的精髓。首先，它类似于枚举（enum）的概念，通过&lt;code&gt;type enum = A | B | C&lt;/code&gt;的形式定义一个类型。这是简单的Union Type的使用。&lt;/p&gt;
&lt;p&gt;Union Type还有Tagged Union的用法。即下面这样。这意味着&lt;strong&gt;User可以是不带信息的Anonymous或带有String信息的Named&lt;/strong&gt;。&lt;code&gt;Anonymous&lt;/code&gt;和&lt;code&gt;Named&lt;/code&gt;是User的两个构造函数。其中Named接受一个String类型入参构造User类型。&lt;/p&gt;
&lt;figure class=&#34;highlight elm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;User&lt;/span&gt; = &lt;span class=&#34;type&#34;&gt;Anonymous&lt;/span&gt; | &lt;span class=&#34;type&#34;&gt;Named&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;div class=&#34;tip&#34;&gt;注意：不同Union Type间的Tag构造函数不能同名，即不能出现下面的情况。同时Tag后的额外消息是泛型`a`时，需要在type名后也加上，便于type check&lt;/div&gt;

&lt;figure class=&#34;highlight elm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;User&lt;/span&gt; = &lt;span class=&#34;type&#34;&gt;Named&lt;/span&gt; | &lt;span class=&#34;type&#34;&gt;Named&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;-- Wrong!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;结合上面的特点，可以很容易地将相似数据结构或设计抽象为单一模板，如&lt;a href=&#34;https://guide.elm-lang.org/types/union_types.html&#34;&gt;举例&lt;/a&gt;中的将时间轴、日志等统一抽象为widget。思路：&lt;strong&gt;逐个击破，合而为一&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于Union Type可以递归定义，通过Union Type甚至可以构建链表和&lt;a href=&#34;http://elm-lang.org/examples/binary-tree&#34;&gt;二叉树&lt;/a&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight elm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;List&lt;/span&gt; a = &lt;span class=&#34;type&#34;&gt;Empty&lt;/span&gt; | &lt;span class=&#34;type&#34;&gt;Node&lt;/span&gt; a (&lt;span class=&#34;type&#34;&gt;List&lt;/span&gt; a)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Tree&lt;/span&gt; a = &lt;span class=&#34;type&#34;&gt;Empty&lt;/span&gt; | &lt;span class=&#34;type&#34;&gt;Node&lt;/span&gt; a (&lt;span class=&#34;type&#34;&gt;Tree&lt;/span&gt; a) (&lt;span class=&#34;type&#34;&gt;Tree&lt;/span&gt; a)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;此外，Elm中的错误处理&lt;a href=&#34;https://guide.elm-lang.org/error_handling/maybe.html&#34;&gt;Maybe&lt;/a&gt;和&lt;a href=&#34;https://guide.elm-lang.org/error_handling/result.html&#34;&gt;Result&lt;/a&gt;也是基于Union Type实现的。&lt;/p&gt;
&lt;p&gt;因为Union Type的不同子类型可以有自己独特的构造函数，且支持解构赋值，因此非常适合用作实现状态管理的事件。Web App中的update函数接受的Html Msg类型实际上也是Union Type实现的。&lt;/p&gt;
&lt;h3 id=&#34;函数&#34;&gt;&lt;a href=&#34;#函数&#34; class=&#34;headerlink&#34; title=&#34;函数&#34;&gt;&lt;/a&gt;函数&lt;/h3&gt;&lt;p&gt;除了不能手动更改状态的变量（因此&lt;strong&gt;递归完全替代了循环结构&lt;/strong&gt;），函数是Elm中最常见的存在。命令式编程中，函数用作告诉电脑该怎么做。函数式编程中，函数用作描述一种映射关系，告诉电脑要什么。Elm中函数像下面这样声明：&lt;/p&gt;
&lt;figure class=&#34;highlight elm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;square&lt;/span&gt; n =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  n^&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;hypotenuse&lt;/span&gt; : &lt;span class=&#34;type&#34;&gt;Float&lt;/span&gt; -&amp;gt; &lt;span class=&#34;type&#34;&gt;Float&lt;/span&gt; -&amp;gt; &lt;span class=&#34;type&#34;&gt;Float&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;hypotenuse&lt;/span&gt; a b =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  sqrt (square a + square b)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;distance&lt;/span&gt; (a,b) (x,y) =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  hypotenuse (a-x) (b-y)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;入参在上，返回值在下。入参间通过空格隔开，由于Elm支持函数柯里化，所以在函数的类型声明中，也是通过&lt;code&gt;-&amp;gt;&lt;/code&gt;隔开每个入参以及返回值的。由于函数变成了纯粹的“通道”，函数体中声明临时变量的语法通过&lt;code&gt;let ... in&lt;/code&gt;的形式实现。&lt;/p&gt;
&lt;p&gt;Elm中也有匿名函数，像下面这样，由反斜线&lt;code&gt;\&lt;/code&gt;开头：&lt;/p&gt;
&lt;figure class=&#34;highlight elm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;square&lt;/span&gt; =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  \n -&amp;gt; n^&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;squares&lt;/span&gt; =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;List&lt;/span&gt;.map (\n -&amp;gt; n^&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;) (&lt;span class=&#34;type&#34;&gt;List&lt;/span&gt;.range &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;函数间通过&lt;code&gt;|&amp;gt;&lt;/code&gt;和&lt;code&gt;&amp;lt;|&lt;/code&gt;连接减少括号的使用。例如下面这样&lt;/p&gt;
&lt;figure class=&#34;highlight elm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;viewNames1&lt;/span&gt; names =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt;.join &lt;span class=&#34;string&#34;&gt;&amp;quot;, &amp;quot;&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;List&lt;/span&gt;.sort names)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;viewNames2&lt;/span&gt; names =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  names&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    |&amp;gt; &lt;span class=&#34;type&#34;&gt;List&lt;/span&gt;.sort&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    |&amp;gt; &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt;.join &lt;span class=&#34;string&#34;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;-- (arg |&amp;gt; func) is the same as (func arg)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;同时，可以通过&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;和&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;构造复合函数。&lt;code&gt;``&lt;/code&gt;用来将第&lt;code&gt;n&lt;/code&gt;个函数入参前置，使得居于更符合语法习惯，如&lt;code&gt;buyMilk `then` drinkMilk&lt;/code&gt;中&lt;code&gt;buyMilk&lt;/code&gt;参数被提前。&lt;code&gt;n&lt;/code&gt;可以通过&lt;code&gt;infixr&lt;/code&gt;设置。&lt;/p&gt;
&lt;p&gt;其中可能较难理解的是&lt;strong&gt;递归完全替代了循环结构&lt;/strong&gt;，Elm类似其他函数式语言，没有&lt;code&gt;for&lt;/code&gt;和&lt;code&gt;while&lt;/code&gt;。它用描述问题的方式，通过递归解决普通的循环问题，下面举两个例子：&lt;/p&gt;
&lt;figure class=&#34;highlight elm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;reverse&lt;/span&gt; : &lt;span class=&#34;type&#34;&gt;List&lt;/span&gt; a -&amp;gt; &lt;span class=&#34;type&#34;&gt;List&lt;/span&gt; a&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;reverse&lt;/span&gt; list =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; list &lt;span class=&#34;keyword&#34;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [] -&amp;gt; []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    (x::xs) -&amp;gt; reverse xs ++ [x]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;quicksort&lt;/span&gt; : &lt;span class=&#34;type&#34;&gt;List&lt;/span&gt; comparable -&amp;gt; &lt;span class=&#34;type&#34;&gt;List&lt;/span&gt; comparable&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;quicksort&lt;/span&gt; list = &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; list &lt;span class=&#34;keyword&#34;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [] -&amp;gt; []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    (x::xs) -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        smallerSorted = quicksort (&lt;span class=&#34;type&#34;&gt;List&lt;/span&gt;.filter ((&amp;gt;) x) xs)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        biggerSorted = quicksort (&lt;span class=&#34;type&#34;&gt;List&lt;/span&gt;.filter ((&amp;lt;=) x) xs)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        smallerSorted ++ [x] ++ biggerSorted&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;可以找到规律：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Usually you define an edge case and then you define a function that does something between some element and the function applied to the rest.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;更具体的解释可以看参考链接3。&lt;/p&gt;
&lt;h3 id=&#34;控制结构&#34;&gt;&lt;a href=&#34;#控制结构&#34; class=&#34;headerlink&#34; title=&#34;控制结构&#34;&gt;&lt;/a&gt;控制结构&lt;/h3&gt;&lt;p&gt;Elm中没有&lt;code&gt;for&lt;/code&gt;和&lt;code&gt;while&lt;/code&gt;循环（都通过递归实现了）。但是存在&lt;code&gt;if&lt;/code&gt;和&lt;code&gt;case&lt;/code&gt;语句。&lt;/p&gt;
&lt;figure class=&#34;highlight elm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;if&lt;/span&gt; powerLevel &amp;gt; &lt;span class=&#34;number&#34;&gt;9000&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;then&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;OVER 9000!!!&amp;quot;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;meh&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;case&lt;/span&gt; maybe &lt;span class=&#34;keyword&#34;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;Just&lt;/span&gt; xs -&amp;gt; xs&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;Nothing&lt;/span&gt; -&amp;gt; []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;case&lt;/span&gt; xs &lt;span class=&#34;keyword&#34;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  hd::tl -&amp;gt; &lt;span class=&#34;type&#34;&gt;Just&lt;/span&gt; (hd,tl)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  []     -&amp;gt; &lt;span class=&#34;type&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;case&lt;/span&gt; n &lt;span class=&#34;keyword&#34;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; -&amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; -&amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  _ -&amp;gt; fib (n&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;) + fib (n&lt;span class=&#34;number&#34;&gt;-2&lt;/span&gt;) &lt;span class=&#34;comment&#34;&gt;-- _表示不接受入参&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;杂项&#34;&gt;&lt;a href=&#34;#杂项&#34; class=&#34;headerlink&#34; title=&#34;杂项&#34;&gt;&lt;/a&gt;杂项&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;++&lt;/code&gt;连接字符串，&lt;code&gt;+&lt;/code&gt;表示相加&lt;/li&gt;
&lt;li&gt;Elm不会进行强制类型转换&lt;/li&gt;
&lt;li&gt;缩进会影响语句解析&lt;/li&gt;
&lt;li&gt;list中所有元素类型必须一致&lt;/li&gt;
&lt;li&gt;tuples设计类似python&lt;/li&gt;
&lt;li&gt;records类型不允许访问不存在的属性&lt;/li&gt;
&lt;li&gt;&lt;code&gt;//&lt;/code&gt;用来进行C风格的除法&lt;/li&gt;
&lt;li&gt;Elm中!用于连接Model和Cmd，用&lt;code&gt;/=&lt;/code&gt;表示&lt;code&gt;!=&lt;/code&gt;，同&lt;code&gt;not&lt;/code&gt;表示&lt;code&gt;!&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Elm的语言设定大不同于C风格，所以，多写去熟悉它的语法风格吧。&lt;/p&gt;
&lt;h2 id=&#34;Elm架构&#34;&gt;&lt;a href=&#34;#Elm架构&#34; class=&#34;headerlink&#34; title=&#34;Elm架构&#34;&gt;&lt;/a&gt;Elm架构&lt;/h2&gt;&lt;p&gt;Elm构建Web App的架构为MVU（不考虑Cmd和Subscription的话），这和目前大部分MVVM框架一样，致力于减少UI维护，减少不必要的状态修改来更好地定位错误。有意思的是，Elm也&lt;a href=&#34;http://elm-lang.org/blog/blazing-fast-html&#34;&gt;采用了Virtual DOM的设计&lt;/a&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Model，类似Web App的state，通常为&lt;code&gt;records&lt;/code&gt;类型&lt;/li&gt;
&lt;li&gt;Update，更新state的唯一方式（类似于action或commit），通常类型为&lt;code&gt;Msg -&amp;gt; Model -&amp;gt; (Model, Cmd Msg)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;View，根据state渲染HTML的方式，通常类型为&lt;code&gt;Model -&amp;gt; Html Msg&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Update部分，通常像下面这样，接受Union Type的Msg，并通过&lt;code&gt;case ... of&lt;/code&gt;接受到附在Msg上的payload。&lt;/p&gt;
&lt;figure class=&#34;highlight elm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;update&lt;/span&gt; : &lt;span class=&#34;type&#34;&gt;Msg&lt;/span&gt; -&amp;gt; &lt;span class=&#34;type&#34;&gt;Model&lt;/span&gt; -&amp;gt; &lt;span class=&#34;type&#34;&gt;Model&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;update&lt;/span&gt; msg model =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; msg &lt;span class=&#34;keyword&#34;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;Change&lt;/span&gt; newContent -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#123; model | content = newContent &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;View部分，所有常用的标签名和属性名都被封装为函数，接受属性列表和子元素列表两个入参，像下面这样。&lt;/p&gt;
&lt;figure class=&#34;highlight elm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;view&lt;/span&gt; : &lt;span class=&#34;type&#34;&gt;Model&lt;/span&gt; -&amp;gt; &lt;span class=&#34;type&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Msg&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;view&lt;/span&gt; model =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  div []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [ input [ placeholder &lt;span class=&#34;string&#34;&gt;&amp;quot;Text to reverse&amp;quot;&lt;/span&gt;, onInput &lt;span class=&#34;type&#34;&gt;Change&lt;/span&gt; ] []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    , div [] [ text (&lt;span class=&#34;type&#34;&gt;String&lt;/span&gt;.reverse model.content) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;将M、V、U三部分结合在一起就可以构造简单的web应用了。当有异步任务等复杂情况出现时，需要通过Cmd和Subscription实现。&lt;/p&gt;
&lt;h3 id=&#34;Effects&#34;&gt;&lt;a href=&#34;#Effects&#34; class=&#34;headerlink&#34; title=&#34;Effects&#34;&gt;&lt;/a&gt;Effects&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://guide.elm-lang.org/architecture/effects/beginnerProgram.svg&#34; alt=&#34;Elm Architecture&#34;&gt;&lt;/p&gt;
&lt;p&gt;说这两位之前，我们要回顾下之前的工作流。仔细观察就能发现，我们所做的事只是描述了接受Html Msg后如何生产新的Model并根据新的Model生产新的Html Msg交给Elm Runtime，之后的脏活累活都交给Elm干了。根据Elm的描述，除了vDOM外，它还使用了下面两个手段提升效率：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Skip Work&lt;/strong&gt;，通过&lt;code&gt;lazy&lt;/code&gt;（类似React的&lt;code&gt;shouldComponentUpdate&lt;/code&gt;）限制更新频率&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Align Work&lt;/strong&gt;，通过&lt;code&gt;Html.keyed&lt;/code&gt;（类似React的&lt;code&gt;key&lt;/code&gt;）减少无意义的diffing。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;回到正题，Cmd和Subscription也是对Msg所做的外层包装而已。除了能向Elm Runtime pipe Html Msg外，当然也可以发送命令或订阅事件&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://guide.elm-lang.org/architecture/effects/program.svg&#34;&gt;&lt;/p&gt;
&lt;p&gt;。Html, Cmd, Sub三者实际上没太大区别，都是我们将生成的数据交给Elm Runtime，剩下的做甩手掌柜。它可以帮助我们：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更好的debug&lt;/li&gt;
&lt;li&gt;确保Elm函数的线性时不变&lt;/li&gt;
&lt;li&gt;优化HTTP连接，缓存effects&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面是一个Sub的例子：&lt;/p&gt;
&lt;figure class=&#34;highlight elm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;-- SUBSCRIPTIONS&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;subscriptions&lt;/span&gt; : &lt;span class=&#34;type&#34;&gt;Model&lt;/span&gt; -&amp;gt; &lt;span class=&#34;type&#34;&gt;Sub&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Msg&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;subscriptions&lt;/span&gt; model =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;Time&lt;/span&gt;.every second &lt;span class=&#34;type&#34;&gt;Tick&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;-- UPDATE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;update&lt;/span&gt; : &lt;span class=&#34;type&#34;&gt;Msg&lt;/span&gt; -&amp;gt; &lt;span class=&#34;type&#34;&gt;Model&lt;/span&gt; -&amp;gt; (&lt;span class=&#34;type&#34;&gt;Model&lt;/span&gt;, &lt;span class=&#34;type&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Msg&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;update&lt;/span&gt; msg model =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; msg &lt;span class=&#34;keyword&#34;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;Tick&lt;/span&gt; newTime -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      (newTime, &lt;span class=&#34;type&#34;&gt;Cmd&lt;/span&gt;.none)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;错误处理&#34;&gt;&lt;a href=&#34;#错误处理&#34; class=&#34;headerlink&#34; title=&#34;错误处理&#34;&gt;&lt;/a&gt;错误处理&lt;/h2&gt;&lt;p&gt;之前提到过Elm致力于“编辑时无bug&amp;#x3D;&amp;gt;Runtime无bug”。除了强类型和无状态（实际上是Immutable的状态）外，还有Maybe和Result的辅助。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Elm treats errors as data.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考&lt;a href=&#34;https://www.lucidchart.com/techblog/2015/08/31/the-worst-mistake-of-computer-science/&#34;&gt;null的糟糕设计&lt;/a&gt;，Elm通过&lt;/p&gt;
&lt;figure class=&#34;highlight elm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Maybe&lt;/span&gt; a = &lt;span class=&#34;type&#34;&gt;Nothing&lt;/span&gt; | &lt;span class=&#34;type&#34;&gt;Just&lt;/span&gt; a&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;定义了Maybe类型。结合&lt;code&gt;case of&lt;/code&gt;的特殊情况处理，通过&lt;strong&gt;option types&lt;/strong&gt;的方法&lt;strong&gt;替代Null&lt;/strong&gt;。&lt;a href=&#34;http://package.elm-lang.org/packages/elm-lang/core/4.0.0/Maybe&#34;&gt;core&amp;#x2F;Maybe&lt;/a&gt;模块还有&lt;code&gt;withDefault&lt;/code&gt;，&lt;code&gt;andThen&lt;/code&gt;等其他方法。&lt;/p&gt;
&lt;p&gt;类似于Maybe，Result用Union Type的形式定义了不可靠操作的返回值。&lt;/p&gt;
&lt;figure class=&#34;highlight elm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Result&lt;/span&gt; error value = &lt;span class=&#34;type&#34;&gt;Err&lt;/span&gt; error | &lt;span class=&#34;type&#34;&gt;Ok&lt;/span&gt; value&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过Err和Ok两种类型，隐含了其他语言中的&lt;code&gt;try catch&lt;/code&gt;操作，&lt;strong&gt;避免exception&lt;/strong&gt;的出现。Elm库函数是实现了Result类型的，如&lt;code&gt;Http.get&lt;/code&gt;。Result预定义在&lt;a href=&#34;http://package.elm-lang.org/packages/elm-lang/core/4.0.0/Result&#34;&gt;core&amp;#x2F;Result&lt;/a&gt;中&lt;/p&gt;
&lt;h3 id=&#34;Task&#34;&gt;&lt;a href=&#34;#Task&#34; class=&#34;headerlink&#34; title=&#34;Task&#34;&gt;&lt;/a&gt;Task&lt;/h3&gt;&lt;p&gt;另外，Elm中有Task用来处理异步操作中的失败情况。类似于JS中的Promise。使用思路是先通过succeed方法和fail方法定义Task再使用。&lt;/p&gt;
&lt;figure class=&#34;highlight elm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Task&lt;/span&gt; err ok =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;Task&lt;/span&gt; err ok&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;succeed&lt;/span&gt; : a -&amp;gt; &lt;span class=&#34;type&#34;&gt;Task&lt;/span&gt; x a&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;fail&lt;/span&gt; : x -&amp;gt; &lt;span class=&#34;type&#34;&gt;Task&lt;/span&gt; x a&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在Elm由0.17升级到0.18时，有两种方式执行一个Task。&lt;code&gt;Task.perform&lt;/code&gt;和&lt;code&gt;Task.attempt&lt;/code&gt;。前者针对&lt;strong&gt;从不返回错误&lt;/strong&gt;的task，后者针对&lt;strong&gt;可能出错&lt;/strong&gt;的task。更重要的是，在&lt;code&gt;Task.attempt&lt;/code&gt;中结合了熟悉的Result模型。&lt;/p&gt;
&lt;figure class=&#34;highlight elm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;perform&lt;/span&gt; : (a -&amp;gt; msg) -&amp;gt; &lt;span class=&#34;type&#34;&gt;Task&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Never&lt;/span&gt; a -&amp;gt; &lt;span class=&#34;type&#34;&gt;Cmd&lt;/span&gt; msg&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;attempt&lt;/span&gt; : (&lt;span class=&#34;type&#34;&gt;Result&lt;/span&gt; x a -&amp;gt; msg) -&amp;gt; &lt;span class=&#34;type&#34;&gt;Task&lt;/span&gt; x a -&amp;gt; &lt;span class=&#34;type&#34;&gt;Cmd&lt;/span&gt; msg&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;-- example&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Msg&lt;/span&gt; = &lt;span class=&#34;type&#34;&gt;Click&lt;/span&gt; | &lt;span class=&#34;type&#34;&gt;NewTime&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Time&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;update&lt;/span&gt; : &lt;span class=&#34;type&#34;&gt;Msg&lt;/span&gt; -&amp;gt; &lt;span class=&#34;type&#34;&gt;Model&lt;/span&gt; -&amp;gt; ( &lt;span class=&#34;type&#34;&gt;Model&lt;/span&gt;, &lt;span class=&#34;type&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Msg&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;update&lt;/span&gt; msg model =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; msg &lt;span class=&#34;keyword&#34;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;Click&lt;/span&gt; -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      ( model, &lt;span class=&#34;type&#34;&gt;Task&lt;/span&gt;.perform &lt;span class=&#34;type&#34;&gt;NewTime&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Time&lt;/span&gt;.now )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;NewTime&lt;/span&gt; time -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;互操作性&#34;&gt;&lt;a href=&#34;#互操作性&#34; class=&#34;headerlink&#34; title=&#34;互操作性&#34;&gt;&lt;/a&gt;互操作性&lt;/h2&gt;&lt;p&gt;Elm的互操作性体现在和JSON以及JavaScript上。&lt;/p&gt;
&lt;h3 id=&#34;与JSON&#34;&gt;&lt;a href=&#34;#与JSON&#34; class=&#34;headerlink&#34; title=&#34;与JSON&#34;&gt;&lt;/a&gt;与JSON&lt;/h3&gt;&lt;p&gt;通过Json.Decode和Json.Encode完成相关工作。解析部分由&lt;code&gt;decodeString&lt;/code&gt;完成。&lt;/p&gt;
&lt;figure class=&#34;highlight elm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;decodeString&lt;/span&gt; : &lt;span class=&#34;type&#34;&gt;Decoder&lt;/span&gt; a -&amp;gt; &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; -&amp;gt; &lt;span class=&#34;type&#34;&gt;Result&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; a&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由第一个参数指定decoder类型，如 &lt;code&gt;decodeString int &amp;quot;42&amp;quot;&lt;/code&gt;就指定了一个整数的解析器。在多数情况下，JSON字符串并没这么简单。这时，需要先利用基本的int、string、list、dict解析器结合map2、map3等构造相应的Decoder，再交给decodeString处理。&lt;strong&gt;函数返回&lt;code&gt;Result&lt;/code&gt;类型&lt;/strong&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight elm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; Json.Decode &lt;span class=&#34;keyword&#34;&gt;exposing&lt;/span&gt; (..)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Point&lt;/span&gt; = &amp;#123; x : &lt;span class=&#34;type&#34;&gt;Int&lt;/span&gt;, y : &lt;span class=&#34;type&#34;&gt;Int&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;pointDecoder&lt;/span&gt; = map2 &lt;span class=&#34;type&#34;&gt;Point&lt;/span&gt; (field &lt;span class=&#34;string&#34;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; int) (field &lt;span class=&#34;string&#34;&gt;&amp;quot;y&amp;quot;&lt;/span&gt; int)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;decodeString&lt;/span&gt; pointDecoder &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;#123; &amp;quot;&lt;/span&gt;x&lt;span class=&#34;string&#34;&gt;&amp;quot;: 3, &amp;quot;&lt;/span&gt;y&lt;span class=&#34;string&#34;&gt;&amp;quot;: 4 &amp;#125;&amp;quot;&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;-- Ok &amp;#123; x = 3, y = 4 &amp;#125; : Result String Point&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;是不是很麻烦。不像JavaScript里一个&lt;code&gt;JSON.parse()&lt;/code&gt;完事，确实Elm解析JSON的笨拙为人诟病，官方的&lt;a href=&#34;http://package.elm-lang.org/packages/NoRedInk/elm-decode-pipeline/latest&#34;&gt;pipeline&lt;/a&gt;包通过&lt;code&gt;|&amp;gt;&lt;/code&gt;组合Decoder，让语法稍微好了一点。最新的0.18版本下有&lt;a href=&#34;http://package.elm-lang.org/packages/elm-community/json-extra/2.6.0/Json-Decode-Extra&#34;&gt;json-extra&lt;/a&gt;提供更方便的decoder选择。&lt;/p&gt;
&lt;figure class=&#34;highlight elm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; Json.Decode.Pipeline &lt;span class=&#34;keyword&#34;&gt;exposing&lt;/span&gt; (decode, required)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;pointDecoder&lt;/span&gt; : &lt;span class=&#34;type&#34;&gt;Decoder&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Point&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;pointDecoder&lt;/span&gt; =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  decode &lt;span class=&#34;type&#34;&gt;Point&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    |&amp;gt; required &lt;span class=&#34;string&#34;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; int&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    |&amp;gt; required &lt;span class=&#34;string&#34;&gt;&amp;quot;y&amp;quot;&lt;/span&gt; int&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;可这距离&lt;code&gt;JSON.parse&lt;/code&gt;还是不够啊。于是有人写了个根据Records类型&lt;a href=&#34;https://github.com/eeue56/json-to-elm&#34;&gt;生成decoder的工具&lt;/a&gt;，或者&lt;a href=&#34;http://noredink.github.io/json-to-elm/&#34;&gt;在线生成&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;相比之下，&lt;a href=&#34;http://package.elm-lang.org/packages/elm-lang/core/5.1.1/Json-Encode&#34;&gt;encode&lt;/a&gt;过程就简单多了。&lt;/p&gt;
&lt;h3 id=&#34;与JavaScript&#34;&gt;&lt;a href=&#34;#与JavaScript&#34; class=&#34;headerlink&#34; title=&#34;与JavaScript&#34;&gt;&lt;/a&gt;与JavaScript&lt;/h3&gt;&lt;p&gt;有两种方式，port或flag。&lt;/p&gt;
&lt;p&gt;前者类似于在Elm应用上凿洞，用类似订阅发布的模式工作。需要在文件开头的module声明前，额外加上&lt;code&gt;port&lt;/code&gt;关键词，同时需要暴露的接口前也需要&lt;code&gt;port&lt;/code&gt;关键词。&lt;/p&gt;
&lt;figure class=&#34;highlight elm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;module&lt;/span&gt; Spelling &lt;span class=&#34;keyword&#34;&gt;exposing&lt;/span&gt; (..)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;-- port for sending strings out to JavaScript&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;port&lt;/span&gt; check : String -&amp;gt; Cmd msg&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;-- port for listening for suggestions from JavaScript&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;port&lt;/span&gt; suggestions : (&lt;span class=&#34;type&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;String&lt;/span&gt; -&amp;gt; msg) -&amp;gt; Sub msg&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; app = &lt;span class=&#34;title class_&#34;&gt;Elm&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;Spelling&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;fullscreen&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;app.&lt;span class=&#34;property&#34;&gt;ports&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;check&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;subscribe&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;word&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; suggestions = &lt;span class=&#34;title function_&#34;&gt;spellCheck&lt;/span&gt;(word);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  app.&lt;span class=&#34;property&#34;&gt;ports&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;suggestions&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;send&lt;/span&gt;(suggestions);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;spellCheck&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;word&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// have a real implementation!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; [];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;后者暴露program的init给外部JavaScript。在声明Elm program时，使用&lt;code&gt;programWithFlags&lt;/code&gt;而非&lt;code&gt;program&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight elm&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;init&lt;/span&gt; : &lt;span class=&#34;type&#34;&gt;Flags&lt;/span&gt; -&amp;gt; ( &lt;span class=&#34;type&#34;&gt;Model&lt;/span&gt;, &lt;span class=&#34;type&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Msg&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;init&lt;/span&gt; flags =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;main&lt;/span&gt; =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  programWithFlags &amp;#123; init = init, ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; app = &lt;span class=&#34;title class_&#34;&gt;Elm&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;MyApp&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;fullscreen&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;user&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;Tom&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;token&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;12345&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Elm的思路是不向后兼容，避免过去问题的引入。只通过port和flags的方式，借由Elm runtime和外部JS沟通，避免自身的runtime exception，把问题只留在JavaScript部分。&lt;/p&gt;
&lt;h2 id=&#34;工程实践&#34;&gt;&lt;a href=&#34;#工程实践&#34; class=&#34;headerlink&#34; title=&#34;工程实践&#34;&gt;&lt;/a&gt;工程实践&lt;/h2&gt;&lt;p&gt;使用Elm编写简单的应用时，可能一个.elm文件完成后，就可以直接&lt;code&gt;elm-make index.elm --output index.js&lt;/code&gt;就OK了。当工程较大时（目前还没怎么看到生产环境用Elm的），必然需要拆分组件。&lt;/p&gt;
&lt;p&gt;Elm在设计上，拆分的比MVVM框架更细。它拆分到了函数的级别，由于它pure function的特点，不受状态的束缚，重用函数比MVVM框架顾虑少太多了。如，重用view函数就相当于React和Vue中的函数式组件。重用update函数，可以实现MVVM中“组件A改变组件B，组件B改变组件C，组件C改变组件A”的史诗级难题。&lt;/p&gt;
&lt;p&gt;封装和应用是通过&lt;code&gt;module ... exposing ...&lt;/code&gt;和&lt;code&gt;import ... exposing ...&lt;/code&gt;的语法完成的。Elm会去elm-package.json中的&lt;code&gt;source-directories&lt;/code&gt;以及&lt;code&gt;dependencies&lt;/code&gt;中声明的路径和包下寻找&lt;code&gt;import&lt;/code&gt;对应的东西。剩下的，只要控制好复用程度，在习惯Elm语法后，就可以轻松且高逼格地编写Web应用了。&lt;/p&gt;
&lt;p&gt;Elm编写好，且通过&lt;code&gt;elm-make&lt;/code&gt;成功编译后，会得到一个&lt;code&gt;.js&lt;/code&gt;文件，在需要的HTML文件中引入，会得到一个&lt;code&gt;Elm&lt;/code&gt;全局对象，存储了所有的program。&lt;strong&gt;每个program都有&lt;code&gt;embed&lt;/code&gt;方法和&lt;code&gt;fullscreen&lt;/code&gt;方法绑定在HTML文件中&lt;/strong&gt;。之后，大功告成！&lt;/p&gt;
&lt;p&gt;参考作者所写的&lt;a href=&#34;https://github.com/evancz/elm-todomvc&#34;&gt;TODOMVC&lt;/a&gt;是个不错的开始。&lt;/p&gt;
&lt;h3 id=&#34;FAQ&#34;&gt;&lt;a href=&#34;#FAQ&#34; class=&#34;headerlink&#34; title=&#34;FAQ&#34;&gt;&lt;/a&gt;FAQ&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Q：Where are my components? And how do they communicate?&lt;/strong&gt;&lt;br&gt;A：参见&lt;a href=&#34;https://guide.elm-lang.org/reuse/&#34;&gt;Scaling The Elm Architecture&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q：What’s the “Elm style”?&lt;/strong&gt;&lt;br&gt;A：回头看看&lt;a href=&#34;#%E5%89%8D%E8%A8%80&#34;&gt;前言&lt;/a&gt;一节最后放的两个Elm开发感受，Elm中，View和Updates两部分均可以拆解成多个&amp;#x2F;组helper functions。最后在一个门面文件中汇总。Elm将state、updates、view放在一个文件，对开发更友好。Elm的优势在于函数式编程特点的帮助（无副作用&amp;#x2F;纯函数&amp;#x2F;强类型&amp;#x2F;出色的错误处理机制）和对人机交互模式的优异抽象。它的问题在&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不完善的文档&lt;/li&gt;
&lt;li&gt;蹩脚的互操作（interop）设计（port和flag）&lt;/li&gt;
&lt;li&gt;学习曲线陡峭&lt;/li&gt;
&lt;li&gt;缺乏成熟的成套解决方案&lt;/li&gt;
&lt;li&gt;坑爹的JSON支持&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Q：Who will save my front-end routing?&lt;/strong&gt;&lt;br&gt;A：有的，借助&lt;a href=&#34;https://github.com/elm-lang/navigation&#34;&gt;Elm Navigation package&lt;/a&gt;就可以做到，具体如何和状态变化绑定起来参见&lt;a href=&#34;https://www.elm-tutorial.org/en/07-routing/01-intro.html&#34;&gt;tutorial的routing部分&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;&lt;a href=&#34;#参考&#34; class=&#34;headerlink&#34; title=&#34;参考&#34;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://guide.elm-lang.org/&#34;&gt;An Introduction to Elm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://elm-lang.org/docs/syntax&#34;&gt;syntax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://learnyouanelm.github.io/pages/05-recursion.html&#34;&gt;Recursion | Elm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://infi.nl/nieuws/why-i-became-an-elm-evangelist/&#34;&gt;Why I became an Elm evangelist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/isRuslan/awesome-elm&#34;&gt;awesome-elm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
    </channel>
</rss>
