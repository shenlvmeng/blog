{
    "version": "https://jsonfeed.org/version/1",
    "title": "Shenlvmeng's Blog • All posts by \"工程\" category",
    "description": "Be sharp, my friend.",
    "home_page_url": "http://shenlvmeng.github.com/blog",
    "items": [
        {
            "id": "http://shenlvmeng.github.com/blog/2021/03/22/clean-architecture/",
            "url": "http://shenlvmeng.github.com/blog/2021/03/22/clean-architecture/",
            "title": "《架构整洁之道》—— 软件设计的思考",
            "date_published": "2021-03-22T15:47:20.000Z",
            "content_html": "<blockquote>\n<p>全文参考自马丁大叔的《架构整洁之道》，书中文笔清爽易懂，不过在后半段有点条理不清流于术而非道</p>\n</blockquote>\n<p>在编程领域，问题就像一个生命体一样，是在不断繁殖和进化的。它甚至经常不会人们预期中一般发展。作为一名出色的软件工程师或架构师，你需要有超出普通程序员的视角，考虑系统宏观的未来的发展。你的使命是，在这种恶劣的开发环境下，绘制一幅相对最优的图纸，用最少的时间、人力、金钱构建和维护一个随时可能融化在熵增热汤里的软件系统。和现实物理世界里的架构师类似，你需要了解编程世界里的一般规律，帮助你挑选武器（技术），修炼秘籍（方法论），在不同的江湖里（业务）打造不同的门派（软件系统）。</p>\n<p>开卷有益，祝你练武愉快~</p>\n<h2 id=\"你要做什么\"><a href=\"#你要做什么\" class=\"headerlink\" title=\"你要做什么\"></a>你要做什么</h2><p>简而言之，架构师的终极目标就是<strong>用最少的人力成本来满足构建和维护软件系统的需求</strong>。糟糕的架构设计会让软件在成功之前，就带来高昂的边际人力成本，即开发新需求的开支越来越大（因为程序员的时间都耗费在系统的修修补补上了）。然而，这种日益增长的边际人力成本现象并不少见。来源于类似龟兔赛跑中兔子的盲目自信，实际上，<strong>无论从短期还是长期看，胡乱编写代码的工作速度其实比循规蹈矩更慢</strong>。</p>\n<p>架构师存在的一个必要性就是，软件存在着两种价值维度：</p>\n<ul>\n<li><strong>行为价值（现在时）</strong>：即实现功能和弥补bug。这类价值是<strong>紧急却并不总是重要的</strong>。</li>\n<li><strong>架构价值（将来时）</strong>：即软件是否足够“软”（易于被修改），这类价值是<strong>重要却并不总是紧急的</strong>。</li>\n</ul>\n<p>很现实的一点是，在公司中，<strong>团队之间的抗争本来就是无穷无尽的</strong>。你作为研发团队的一员，职责的一部分就是避免你的代码在抗争的风吹雨打下变成一坨没人爱的shit。</p>\n<h2 id=\"编程范式\"><a href=\"#编程范式\" class=\"headerlink\" title=\"编程范式\"></a>编程范式</h2><p>没错，架构师们也有祖师爷。在1958到1968年期间，3大编程范式就已经陆续出现了。</p>\n<ul>\n<li><strong>结构化编程</strong>，由Dijkstra在1968年提出，并发扬光大，<strong>它对程序控制权的直接转移（程序语句）进行了限制和规范</strong></li>\n<li><strong>面向对象编程</strong>，最早在1966年提出，Ole Johan Dahl和Kriste Nygaard注意到，函数调用堆栈可以被放到堆内存中，从而在函数返回后继续保留。<strong>它对程序控制权的间接转移（函数调用）进行了限制和规范</strong></li>\n<li><strong>函数式编程</strong>，启发自Alonzo Church于1936年发明的lambda演算，发扬于1958年的LISP语言。<strong>它对程序的赋值进行了限制和规范</strong></li>\n</ul>\n<p>值得思考是，三大范式做的都是<strong>限制和规范</strong>，即告诉我们<strong>不能做什么</strong>，而不是可以做什么。另外，多态带来的架构边界飞跃，函数式编程带来的数据访问限制，结构化编程带来的算法拆解为我们架构软件提供了强大武器。这也与软件架构的三个关注点所契合：</p>\n<ul>\n<li><strong>功能性</strong>，即完整的功能实现</li>\n<li><strong>组件独立性</strong>，即合适的耦合度与细粒度</li>\n<li><strong>数据管理</strong>，即良好的数据结构设计</li>\n</ul>\n<h3 id=\"结构化编程\"><a href=\"#结构化编程\" class=\"headerlink\" title=\"结构化编程\"></a>结构化编程</h3><p>Dijkstra在1950年代思考编程时，得出过一个结论：编程是一项<strong>难度很大</strong>的活动。他倾向于把编程类比为数学推导过程，并发现<code>goto</code>的<strong>某些使用</strong>会导致<strong>模块无法被递归拆解成更小的单元</strong>。然而，去掉这些使用的<code>goto</code>可以被<strong>顺序结构、分支结构、循环结构这三种最小集</strong>等价表示出来。从而，大问题可以被逐步拆解为小问题。</p>\n<p>不过，事情也并非这么理想，当程序复杂后，我们不可能像Dijkstra一样，用严格的数学推导形式化证明编程的正确性。相反，类似实验学科的<strong>无法被证伪即正确</strong>，我们现今依旧使用着Dijkstra的结构化编程思路将大问题拆解为小问题。</p>\n<blockquote>\n<p>有趣的是，“无法被证伪即正确”和Dijkstra的一个观点<strong>“测试只能展示bug的存在，并不能证明不存在bug”</strong>不谋而合</p>\n</blockquote>\n<p>简而言之，去掉goto糟粕诞生的结构化编程中，最有价值的地方就是，它赋予我们创造<strong>可证伪程序单元</strong>的能力，从而架构起大程序。在架构设计领域，<strong>功能性拆解仍然是最佳实践之一</strong>。</p>\n<blockquote>\n<p>什么？什么叫做可证伪？你应该写过单元测试吧。</p>\n</blockquote>\n<h3 id=\"面向对象编程\"><a href=\"#面向对象编程\" class=\"headerlink\" title=\"面向对象编程\"></a>面向对象编程</h3><p>什么是面向对象？有人说面向对象是“数据和函数的组合”，也有人说是“对真实世界的一种建模方式”。但这两种理解要么片面，要么虚无缥缈。为了总结这种范式，我们先从它的3大特征入手：</p>\n<ul>\n<li><strong>封装</strong>，即将一组关联数据和函数圈起来。然而这种特性，从C语言起就支持（struct + 头文件），很难说它是面向对象编程的必要条件</li>\n<li><strong>继承</strong>，即可以在某个作用域对外部定义的一组变量与函数进行覆盖。不过C语言也能模拟出这种能力，看起来也比较勉强。</li>\n<li><strong>多态</strong>，即在同一接口描述下的不同具体实现形式，C语言起也做了支持（STDOUT），然而使用函数指针显式实现多态问题就在于指针的<strong>危险性</strong>。而面向对象编程对这种程序间接控制权的转移做了约束。</li>\n</ul>\n<p>传统的函数调用树中，系统行为决定了自上而下的控制流，而控制流决定了<strong>源代码依赖</strong>（代码实现）是自上而下的，比如在C中会使用<code>#include</code>引入依赖。此时不论是代码实现还是代码执行都是自上而下的。然而在<strong>多态</strong>的帮助下，底层函数需要依赖高层接口实现，作为高层函数的插件引入，从而将这种依赖关系和控制流反向，即<strong>依赖反转</strong>。实际上，借助安全便利的多态实现，可以轻松将依赖关系反转。</p>\n<p>从而架构师可以<strong>完全控制</strong>这种方式下，系统中所有的源代码依赖关系，进而随意更改源代码依赖关系。让每个组件都有<strong>独立部署</strong>和<strong>独立开发</strong>能力。好了，我们现在可以说明面向对象编程的含义了：</p>\n<p>面向对象编程就是以多态为手段来对源代码中的依赖关系进行控制的能力。这种能力让架构师可以构建<strong>插件式架构</strong>，让高层<strong>策略性组件</strong>和底层<strong>实现性组件</strong>相分离。借助接口，底层实现性组件作为插件，可以独立于高层组件开发和部署。</p>\n<h3 id=\"函数式编程\"><a href=\"#函数式编程\" class=\"headerlink\" title=\"函数式编程\"></a>函数式编程</h3><p>函数式编程依据的原理早在编程之前就已出现，相对前两种范式，函数式编程的风格可能相对陌生一点。在这类风格中，变量都是不可变的。从而让竞争问题、死锁问题、并发更新问题不复存在。一个架构良好的系统，需要将状态修改的部分和不需要修改的部分隔离开，然后用类似事务型内存的方式来保护可变量。另外，架构师应该着力于将大部分逻辑归于不可变组件中，可变组件的逻辑越少越好。</p>\n<p>书中还提到了只包含CR的事件溯源存储逻辑，即通过事务日志的方式保存当前状态。因为不存在更改和删除，从而不存在并发问题。也是一种很新颖的思路。</p>\n<p>回顾上面的三种编程范式，都在说什么<strong>不应该做</strong>。也即编程好似在充满死路的熵增旷野中，只有沿着相对安全的几个大方向才可拨开迷雾。</p>\n<h2 id=\"设计原则\"><a href=\"#设计原则\" class=\"headerlink\" title=\"设计原则\"></a>设计原则</h2><p>软件的中层需要具有良好的可读性、可扩展性。这里就不得不提到SOLID原则：</p>\n<ul>\n<li>SRP：<strong>单一职责原则</strong>，每个模块有且只有一个需要被改变的理由</li>\n<li>OCP：<strong>开闭原则</strong>，对扩展开放，对修改封闭</li>\n<li>LSP：<strong>里氏替换原则</strong>，子类型应该能够无无缝替换类型使用</li>\n<li>ISP：<strong>接口隔离原则</strong>，依赖的模块不要包含不需要的接口</li>\n<li>DIP：<strong>依赖反转原则</strong>，高层策略性代码不要依赖底层实现性代码</li>\n</ul>\n<h3 id=\"SRP\"><a href=\"#SRP\" class=\"headerlink\" title=\"SRP\"></a>SRP</h3><p>任何一个软件模块（一组紧密相关的函数和数据结构）都应该只对一个行为者负责。实际上，代码和数据就是靠着和某一类行为者的相关性组合起来的。我们需要<strong>将服务不同行为者的代码进行切分</strong>。</p>\n<h3 id=\"OCP\"><a href=\"#OCP\" class=\"headerlink\" title=\"OCP\"></a>OCP</h3><p>设计良好的软件应该易于扩展，同时抗拒修改。实现方式可以通过将系统划分为一系列组件，并且将依赖关系按层次组织，使得高阶组件不会因为低阶组件修改受到影响。</p>\n<h3 id=\"LSP\"><a href=\"#LSP\" class=\"headerlink\" title=\"LSP\"></a>LSP</h3><p>里氏替换原则表示，子类型应该能够被当做父类型使用。它实际上表示了一种面向接口设计的设计原则。一旦违背了这种可替换性，就会不得不在系统架构中增加大量复杂的应对机制。</p>\n<h3 id=\"ISP\"><a href=\"#ISP\" class=\"headerlink\" title=\"ISP\"></a>ISP</h3><p>ISP告诉我们任何软件设计如果依赖了不需要的东西，都是不好的迹象，很容易带来不必要的麻烦。</p>\n<h3 id=\"DIP\"><a href=\"#DIP\" class=\"headerlink\" title=\"DIP\"></a>DIP</h3><p>DIP告诉我们，应该多引用抽象类型，而不是具体实现。因为软件是经常变动的，而抽象出共性的接口则是较少变化的。从而可以衍生出一些守则，譬如：</p>\n<ul>\n<li>应该多使用抽象接口，避免使用多变的实现类</li>\n<li>不要在实现类上创建衍生类</li>\n<li>不要覆盖具体实现的函数</li>\n</ul>\n<p>不过当然了，还是得有人做实现的脏活累活的</p>\n<h2 id=\"组件构建\"><a href=\"#组件构建\" class=\"headerlink\" title=\"组件构建\"></a>组件构建</h2><h3 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h3><p>组件是构建软件的最小单元，同时也是源代码的集合。在早期会使用链接技术将程序和库函数链接起来，而后随着机器性能的增长，我们会在程序运行中插入动态链接文件，如今这种组件化插件式架构是最常见的软件构建形式。</p>\n<h3 id=\"组件聚合\"><a href=\"#组件聚合\" class=\"headerlink\" title=\"组件聚合\"></a>组件聚合</h3><p>和类相似，组件也有一些原则指引我们的构建工作。</p>\n<ul>\n<li>REP：复用&#x2F;发布原则，即可以一起发布的最小粒度就是复用的最小粒度，也即按可以同时发布聚合</li>\n<li>CCP：共同闭包原则，即因为同一原因修改的放在一起，反之不要放在一起，也即按变更原因聚合</li>\n<li>CRP：共同复用原则，即会被一起复用的放在一起，反之不要放在一起，也即按减少无用耦合聚合</li>\n</ul>\n<p>这三大原则相互牵制，在项目的不同阶段，某一原则重要性也会不同；比如在项目早期CCP就会更重要，而后REP会比较重要。</p>\n<h3 id=\"组合耦合\"><a href=\"#组合耦合\" class=\"headerlink\" title=\"组合耦合\"></a>组合耦合</h3><p>本节提出了一些可以定量衡量耦合健康度的指标，比较新颖。</p>\n<ul>\n<li>无依赖环原则：依赖关系中不能有环，会不利于厘清依赖关系；可以通过<strong>依赖反转</strong>或<strong>创建第三方依赖组件</strong>解决。循环依赖关系务必持续监控。</li>\n<li>稳定依赖原则：依赖关系必须指向稳定的方向，简单点说就是让经常变更的组件依赖于不经常变更的组件。一个组件的位置稳定性可以通过入向和出向依赖算出，它要能和组件的实际稳定性匹配。</li>\n<li>稳定抽象原则：抽象化程度需要和稳定性程度一直，即经常变更的组件要容易变更，即更具体实现；反之，稳定的组件要不容易变更，即更抽象。结合上条看，依赖关系应该指向更抽象的方向。</li>\n</ul>\n<p>使用位置稳定性指标I和抽象程度A，可以绘制一个坐标系。在主序列上的是最健康的，相反的两块痛苦区和无用区则是不健康的表现。用偏离主序列线的距离可以大致衡量依赖关系的健康程度。结合发布版本的变化来看，还可以得到变化趋势。</p>\n<h2 id=\"软件架构\"><a href=\"#软件架构\" class=\"headerlink\" title=\"软件架构\"></a>软件架构</h2><p>软件架构目的就是方便在工作中更好地对组件进行研发、部署、运行和维护。其中的策略就是<strong>保留尽可能多的可选项</strong>。让系统最大化程序员的生产力，同时最小化系统运营成本：</p>\n<ul>\n<li>开发：系统架构需要方便开发团队对它的开发，不同的团队结构应该采用不同的架构设计，比如团队的大小就会影响架构的选择</li>\n<li>部署：一键式部署</li>\n<li>运行：几乎任何运行问题都可以通过增加硬件来解决</li>\n<li>维护：减小新功能和系统缺陷占用的人力资源</li>\n</ul>\n<p>保持可选项，忽略那些无关紧要的实现细节。任何软件系统都可以拆解成<strong>策略</strong>（业务的宏观逻辑和流程）和<strong>细节</strong>（具体操作行为）。而<strong>策略才是系统的真正价值所在</strong>。细节是指那些和策略交互的东西，包括:</p>\n<ul>\n<li>I&#x2F;O设备</li>\n<li>数据库</li>\n<li>Web系统</li>\n<li>服务器</li>\n<li>框架</li>\n<li>交互协议</li>\n</ul>\n<p>在设计时，可以尽量拖延上面这些的设计，这样我们做出的决策才不会依赖各种很容易变化的信息。另一方面，也可以<strong>增加实现底层的可替换性</strong>。举个具体例子：<strong>设备无关性</strong>。</p>\n<h3 id=\"独立性\"><a href=\"#独立性\" class=\"headerlink\" title=\"独立性\"></a>独立性</h3><p>一个良好的架构应支持下面几点：</p>\n<ul>\n<li>系统用例：设计良好的架构需要能够<strong>看起来</strong>就可以反映系统的设计意图，比如一个购物车应用架构应该看起来就该是用来实现购物车的</li>\n<li>系统运行：可以解耦出多个独立服务，然后通过某种网络协议通信，这种架构即微服务</li>\n<li>系统维护</li>\n<li>系统开发</li>\n<li>系统部署：理想的独立部署应该能够做到<strong>热更新</strong></li>\n</ul>\n<p>要注意留意表面的重复和实际的重复，如果两段代码变更速率和缘由不同，那么就不算是真正的重复。</p>\n<h3 id=\"划分边界\"><a href=\"#划分边界\" class=\"headerlink\" title=\"划分边界\"></a>划分边界</h3><ul>\n<li>设计良好的系统架构不应该依赖细节，而应该尽可能推迟细节性的决策。通过划清边界，可以推迟和延后细节性的决策，从而节省大量时间，避免问题。</li>\n<li>边界线应该画在不相干的事情中间，譬如GUI和业务逻辑</li>\n<li>针对核心业务逻辑的插件式架构可以提高可维护性和可扩展性</li>\n</ul>\n<h3 id=\"边界剖析\"><a href=\"#边界剖析\" class=\"headerlink\" title=\"边界剖析\"></a>边界剖析</h3><p>简言之，应该尽可能从底层组件指向高层组件。</p>\n<h3 id=\"策略和层次\"><a href=\"#策略和层次\" class=\"headerlink\" title=\"策略和层次\"></a>策略和层次</h3><ul>\n<li>变更原因、时间和层次不同的策略应该属于不同的组件</li>\n<li>按距离系统输入、输出距离的远近，可以确定策略的层次</li>\n<li>源码间的依赖关系，应该主要和组件所在的层次挂钩</li>\n<li>低层组件应该以插件的方式依赖高层组件</li>\n</ul>\n<h3 id=\"业务逻辑\"><a href=\"#业务逻辑\" class=\"headerlink\" title=\"业务逻辑\"></a>业务逻辑</h3><p><strong>业务逻辑是程序中真正用于或者体现赚钱&#x2F;省钱的逻辑与过程</strong>。其中关键逻辑和关键数据紧密组合成为<strong>业务实体</strong>。业务实体应该只有高层逻辑，没有具体实现。而<strong>用例</strong>是业务实体在不同侧面的具体体现。通过用例可以规范用户和业务实体的交互方式。</p>\n<h3 id=\"“尖叫”的软件架构\"><a href=\"#“尖叫”的软件架构\" class=\"headerlink\" title=\"“尖叫”的软件架构\"></a>“尖叫”的软件架构</h3><p>“尖叫”即所见即所得。软件架构本身就足以能够体现其用途。一个良好的架构设计应该围绕用例展开，推迟和延后框架的选择，不要过度拘泥于框架。<strong>框架只是一个可选项</strong>，是一个工具，而不是一种信念，更不是一种架构。</p>\n<h3 id=\"整洁架构\"><a href=\"#整洁架构\" class=\"headerlink\" title=\"整洁架构\"></a>整洁架构</h3><p>一些常见的系统架构通常具有以下特点：</p>\n<ul>\n<li>独立于框架</li>\n<li>可被测试</li>\n<li>独立于UI</li>\n<li>独立于数据库</li>\n<li>独立于外部接口</li>\n</ul>\n<h3 id=\"Main组件\"><a href=\"#Main组件\" class=\"headerlink\" title=\"Main组件\"></a>Main组件</h3><ul>\n<li>Main组件包含了系统中最细节化最底层的策略，它应该在做完脏活累活后，将程序的控制权交给最高抽象层的代码去执行</li>\n<li>针对不同系统可以配置不同的Main组件，即将Main组件视为应用程序的一个插件</li>\n</ul>\n<h3 id=\"服务：微观和宏观\"><a href=\"#服务：微观和宏观\" class=\"headerlink\" title=\"服务：微观和宏观\"></a>服务：微观和宏观</h3><ul>\n<li>系统的架构边界事实上并不落在服务之间，而是<strong>穿透</strong>所有服务，在服务内以组件形式存在</li>\n<li>服务可以提升系统的可扩展性和可开发性，不过服务却并不能代表整个系统的架构设计</li>\n</ul>\n<h3 id=\"整洁的嵌入式架构\"><a href=\"#整洁的嵌入式架构\" class=\"headerlink\" title=\"整洁的嵌入式架构\"></a>整洁的嵌入式架构</h3><ul>\n<li>固件即对平台或硬件的强依赖代码，在固件和软件之间可以设置HAL（硬件抽象层），为它上层的软件提供服务，它可以帮助软件<em>脱离</em>目标硬件平台来测试</li>\n<li>类似地，我们还可以引入OSAL（操作系统抽象层）来减少软件对操作系统的依赖</li>\n</ul>\n<h2 id=\"实现细节\"><a href=\"#实现细节\" class=\"headerlink\" title=\"实现细节\"></a>实现细节</h2><p>那么什么算是实现细节呢？</p>\n<ul>\n<li><strong>数据库</strong>，数据的组织结构和模型都是系统架构的一部分，但是从磁盘中存储&#x2F;读取数据的机制或手段则没那么重要，就比如数据库或静态文件</li>\n<li><strong>Web</strong>，Web只是UI，只是一种I&#x2F;O设备</li>\n<li><strong>应用框架</strong>，框架被创造的目的是解决作者遇到的问题，它要求我们去阅读文档，按照作者的要求整合到我们的应用中，可以使用但是不要被框架绑定</li>\n</ul>\n<h3 id=\"案例：视频销售网站\"><a href=\"#案例：视频销售网站\" class=\"headerlink\" title=\"案例：视频销售网站\"></a>案例：视频销售网站</h3><ul>\n<li>系统架构设计的第一步是识别系统中的各种角色和用例</li>\n</ul>\n<p><em>–END–</em></p>\n",
            "tags": [
                "设计",
                "架构",
                "组件"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2020/06/29/http-2-for-frontend/",
            "url": "http://shenlvmeng.github.com/blog/2020/06/29/http-2-for-frontend/",
            "title": "面向前端的HTTP/2介绍",
            "date_published": "2020-06-29T14:41:51.000Z",
            "content_html": "<p>正式版HTTP&#x2F;2发布于2015年5月，距今已经快5年了，相比老一辈HTTP 1.1有了许多改进。在具体讨论这些改进前，我们先简单回顾下HTTP这一路以来的历程。</p>\n<h2 id=\"历史回顾\"><a href=\"#历史回顾\" class=\"headerlink\" title=\"历史回顾\"></a>历史回顾</h2><p>HTTP在1991年发布了最初的HTTP0.9版本，主要用于学术交流，目的也只是用来在网络之间传递HTML超文本的内容。HTTP0.9基于TCP，只有一个GET请求类型，请求和文档响应都是ASCII字符流，响应数据类型只有HTML类型，在响应结束后立即断开连接。</p>\n<p>随着互联网发展，1994年底出现了拨号上网，网景推出浏览器后，WWW已经不仅局限于学术交流，浏览器中除了承载HTML以外，还包括了JavaScript、CSS、图片、音视频等资源。HTTP1.0在这个背景下于1996年推出（RFC1945），它支持了状态码、方法、头部的概念，响应内容不局限于超文本文件，编码类型也不仅限于ASCII。但是TCP连接在响应返回后依旧会断开连接。</p>\n<p>在浏览器等技术发展，HTTP请求更多也更复杂，HTTP1.0的已有问题暴露得越来越明显。TCP频繁建立连接的时延，缓存协商机制的不完整、大文件下载的支持等问题需要解决。于是HTTP1.1在1999年推出（RFC2616），这是个很庞大的协议，全文长达176页，在后续IETF对该规范进行更新时，则被拆分成了总页数更多的六个文档（即RFC7230协议族）。HTTP1.1包含了太多细节和可选的部分，包含不常用的功能和不合适的优化，因此几乎没有任何实现包含完整的协议功能。总的来看，HTTP1.1做了一些尝试：</p>\n<ul>\n<li>TCP持久连接（keep-alive），即在一个TCP连接上发起HTTP请求</li>\n<li>支持范围请求（Accept-Ranges）</li>\n<li>更强大的缓存机制（协商缓存和强缓存，以及相关的头部）</li>\n<li>提出了HTTP pipeline，尝试改善串行HTTP请求引起的线头阻塞（Head-of-line blocking）问题</li>\n<li>更多的错误相关状态码</li>\n<li>Host头处理</li>\n</ul>\n<p>之后HTTP1.1便被一直使用至今，随着互联网页面请求资源的数量和体积增大，HTTP1.1中没能妥善解决的问题越来越明显。HTTPbis工作组在2007年夏天便着手于HTTP1.1标准的更新，并最终在2014年初形成上面提到的RFC7230系列协议族。</p>\n<p><a href=\"http://en.wikipedia.org/wiki/SPDY\">SPDY</a>（SPeeDY）是由Google牵头开发的开源协议，意图在TLS和HTTP中间插入中间层，解决HTTP协议的问题。大约在2012年提出，也被大多数主流浏览器支持。最终在2015年HTTP&#x2F;2协议发布后，逐步放弃支持。实际上HTTP&#x2F;2也是在SPDY&#x2F;3草案的基础上形成的协议初稿。</p>\n<h2 id=\"历史问题\"><a href=\"#历史问题\" class=\"headerlink\" title=\"历史问题\"></a>历史问题</h2><h3 id=\"传输资源与延迟\"><a href=\"#传输资源与延迟\" class=\"headerlink\" title=\"传输资源与延迟\"></a>传输资源与延迟</h3><p>当今的互联网环境和20世纪末那会儿已经有了很大的不同，现在的Web页面更像一个应用的概念，而非一个简单的页面（SPA）。从HTTPArchive一个页面下请求的资源数已经上百，请求的资源体积也接近2M。</p>\n<p><img src=\"https://raw.githubusercontent.com/bagder/http2-explained/master/images/transfer-size-growth.png\" alt=\"http-transfer-size\"></p>\n<p>随着这些年网络硬件条件的迅猛发展，<strong>带宽</strong>已经不再是影响人们体验的因素，而<strong>网络延迟</strong>仍然没有太好的改善。高延迟的网络上（比如移动设备），即使拥有高连接速率，也很难获得优质快速的网络体验。页面从访问到打开的近70%时间都发生在网络上。</p>\n<h3 id=\"请求-响应模型\"><a href=\"#请求-响应模型\" class=\"headerlink\" title=\"请求-响应模型\"></a>请求-响应模型</h3><p>HTTP1.1是无状态协议，需要以客户端请求开始，然后才能响应。一个TCP上同时只能有一个请求&#x2F;响应。TCP协议的能力并没有被充分利用。在HTTP1.1启用keep-alive后，TCP连接重复建立的问题被解决。但是请求还是需要排队一个一个发送，TCP的RTT（round-trip time）还是比较可观。后续的HTTP1.1提出了<strong>HTTP管线化</strong>（pipeline），即将多个HTTP请求合并成一个，一起发送，这样的确提高了服务器的资源利用率，但是也会带来线头阻塞（head-of-line blocking）问题，即一个比较耗时的请求会影响后续的所有请求。另外，它会给重试带来麻烦，需要网络中间节点的支持。所以这个特性并没有得到浏览器和服务器认可，实现也并不普及。目前大多数桌面浏览器也是默认关闭这个特性的。</p>\n<p><img src=\"https://mdn.mozillademos.org/files/13727/HTTP1_x_Connections.png\" alt=\"http-pipeline\"></p>\n<h4 id=\"那些年，我们一起克服延迟的办法\"><a href=\"#那些年，我们一起克服延迟的办法\" class=\"headerlink\" title=\"那些年，我们一起克服延迟的办法\"></a>那些年，我们一起克服延迟的办法</h4><p>针对上面的困难，智慧的开发者们自然也是有了许多应对办法。</p>\n<p><img src=\"https://raw.githubusercontent.com/bagder/http2-explained/master/images/spriting.jpg\"></p>\n<ul>\n<li>雪碧图：将小图片整合成一张大图。</li>\n<li>内联：将高优先级资源或小资源通过script标签或style标签或dataUrl的形式直接内嵌在页面里</li>\n<li>分片（sharding）与域名散列：将图片或者其他资源分发到不同主机。最初的HTTP1.1规范（RFC2616）提到一个客户端最多只能对同一主机建立两个TCP连接。后来，两个连接的限制被取消了（RFC7230），现在的浏览器一般允许每个域名主机建立6-8个连接。根据httparchive.org的记录显示，在Top30万个URL中平均使用40个TCP连接来显示页面</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/bagder/http2-explained/master/images/expressen-sharding.jpg\" alt=\"http-sharding\"></p>\n<p>除此之外，为了减少请求数，前端会将代码合并并打包，这也是webpack这样的工具诞生的背景。</p>\n<h3 id=\"冗长的头部\"><a href=\"#冗长的头部\" class=\"headerlink\" title=\"冗长的头部\"></a>冗长的头部</h3><p>HTTP1.1中1000+字节的头部都是常见的且体积较大的，如<code>Cookie</code>。头部信息有许多多余信息。这也让许多大请求建立连接的过程变得很慢。</p>\n<p>总结来看，HTTP1.1遗留了下面几个问题：</p>\n<ul>\n<li>对TCP利用较差，同时只能有一个请求&#x2F;响应<ul>\n<li>目前应对方法：开多个TCP连接（分片），减少请求数（合并资源）；这些方法多少会遇到TCP慢启动、DNS开销等问题</li>\n</ul>\n</li>\n<li>HTTP头部没有压缩，占用较大空间<ul>\n<li>目前应对方法：减少请求数、使用cookie-less域名</li>\n</ul>\n</li>\n<li>固有的请求-响应模式，重要资源无法优先推送<ul>\n<li>目前应对方法：内联资源</li>\n</ul>\n</li>\n</ul>\n<p>HTTP&#x2F;2对于上面这些问题自然是重拳出击。</p>\n<h2 id=\"HTTP-x2F-2概述\"><a href=\"#HTTP-x2F-2概述\" class=\"headerlink\" title=\"HTTP&#x2F;2概述\"></a>HTTP&#x2F;2概述</h2><blockquote>\n<p>“HTTP&#x2F;2 enables a more efficient use of network resources and a reduced perception of latency by introducing header field compression and allowing multiple concurrent exchanges on the same connection. It also introduces unsolicited push of representations from servers to clients.”</p>\n</blockquote>\n<p>根据<a href=\"https://httpwg.org/specs/rfc7540.html\">RFC7540</a>的摘要，简明扼要地点出了HTTP&#x2F;2带来的几个重要特性：</p>\n<ul>\n<li>多路复用的二进制协议；一个TCP连接上不再只有1个请求&#x2F;响应，同时采用二进制而非文本传输数据</li>\n<li>头部压缩；用二进制分帧配合专门设计的头部压缩算法（HPACK）大大减少头部体积，HPACK有专门的<a href=\"https://httpwg.github.io/specs/rfc7541.html\">RFC7541</a>来规范。</li>\n<li>服务器推送；在客户端发送请求前，主动将资源推送给客户端</li>\n</ul>\n<p>整个HTTP&#x2F;2实际上还是在HTTP的框架下的，对HTTP1.1也是完全兼容的，这意味着你可以像以前一样使用HTTP的API、方法、头部、状态码这些：</p>\n<ul>\n<li>HTTP&#x2F;2必须维持HTTP的范式。它只是一个让客户端发送请求到服务器的基于TCP的协议</li>\n<li>不能改变<code>http://</code>和<code>https://</code>这样的URL，也不能对其添加新的结构。使用这类URL的网站太多了，没法指望他们全部改变。</li>\n<li>HTTP1.1的服务器和客户端依然会存在很久，所以必须提供HTTP1.1到HTTP&#x2F;2服务器的代理</li>\n<li>不再使用小版本号。服务器和客户端都必须确定自己是否完整兼容http2或者彻底不兼容</li>\n</ul>\n<h3 id=\"协商\"><a href=\"#协商\" class=\"headerlink\" title=\"协商\"></a>协商</h3><p>SPDY依赖于TLS，不过从SPDY中诞生的HTTP&#x2F;2却可以选择是否基于TLS。由此带来2种HTTP&#x2F;2协商机制。对于普通的HTTP1.1，通过给服务器发送一个带升级头部的报文。如果服务器支持HTTP&#x2F;2，它将以“101 Switching”作为回复的状态码，并从此开始在该连接上使用HTTP&#x2F;2。这种连接方式也被称为<strong>h2c</strong>（HTTP&#x2F;2 cleartext），此时HTTP&#x2F;2在TCP之上运行。出于安全性考虑。<strong>几乎所有的主流浏览器都不支持这种协商实现</strong>（curl可以支持）。</p>\n<p>对于在TLS之上的https，Next Protocol Negotiation (NPN)是一个用来在TLS服务器上协商SPDY的协议。IETF将这个非正式标准进行规范化，从而演变成了ALPN（Application Layer Protocol Negotiation）。ALPN会伴随HTTP&#x2F;2中的使用而推广，考虑到SPDY会使用NPN，而许多服务器又会同时提供SPDY以及HTTP&#x2F;2，所以在这些服务器上同时支持ALPN以及NPN显然会成为最理所当然的选择。ALPN和NPN的主要区别在于，ALPN中由服务端最终决定通信协议，NPN中由客户端最终决定。</p>\n<h2 id=\"HTTP-x2F-2特性\"><a href=\"#HTTP-x2F-2特性\" class=\"headerlink\" title=\"HTTP&#x2F;2特性\"></a>HTTP&#x2F;2特性</h2><p>在HTTP&#x2F;2的介绍中提到，协议通过定义一个优化的基础连接的HTTP语义映射来解决HTTP1.1的问题。具体地，它允许在<strong>同一连接</strong>上<strong>交错</strong>地建立请求和响应消息，并使用<strong>高效率编码</strong>的HTTP报头字段。它还允许<strong>请求的优先级</strong>，让更多的重要的请求更快速的完成，进一步提升了性能。最终协议设计为对网络更友好，因为它相对HTTP&#x2F;1.x减少了TCP连接。最后，这种封装也通过使用<strong>二进制消息帧</strong>使信息处理更具扩展性。</p>\n<p>里面加粗的部分即HTTP&#x2F;2带来的几个新特性：</p>\n<ul>\n<li>单一TCP连接</li>\n<li>二进制分帧<ul>\n<li>请求优先级</li>\n<li>服务端推送</li>\n<li>流量控制</li>\n</ul>\n</li>\n<li>多路复用</li>\n<li>头部压缩（HPACK）</li>\n</ul>\n<h3 id=\"二进制分帧“层”\"><a href=\"#二进制分帧“层”\" class=\"headerlink\" title=\"二进制分帧“层”\"></a>二进制分帧“层”</h3><p>首先，HTTP&#x2F;2是个二进制协议。它的请求和响应都是流的形式，它基本的协议单位是帧。每个帧都有不同的类型和用途。HTTP&#x2F;2所有性能增强的核心也在于这个新的二进制分帧层，它定义了如何封装 HTTP 消息并在客户端与服务器之间传输。</p>\n<p><img src=\"https://developers.google.com/web/fundamentals/performance/http2/images/binary_framing_layer01.svg\" alt=\"http2-framing-layer\"></p>\n<p>从图中能看到，在TLS之上，HTTP&#x2F;2之下新增了一个二进制分帧层。这里所谓的“层”，指的是位于套接字接口与应用可见的高级HTTP API之间一个经过优化的新编码机制：HTTP的语义（包括各种动词、方法、标头）都不受影响，不同的是传输期间对它们的<strong>编码方式</strong>变了。不同于HTTP1.x里面用换行符作为分隔，HTTP&#x2F;2中将信息分割成帧，并进行二进制编码。整个分帧过程由客户端和服务端替我们完成。</p>\n<h3 id=\"数据流和帧\"><a href=\"#数据流和帧\" class=\"headerlink\" title=\"数据流和帧\"></a>数据流和帧</h3><p>上面这种二进制分帧机制改变了客户端与服务器之间交换数据的方式，也带来了流的概念。</p>\n<ul>\n<li>流（Stream）：一个双向字节帧流穿过HTTP&#x2F;2连接中的虚拟通道，可以承载一条或多条消息。</li>\n<li>消息：与逻辑请求或响应消息对应的完整的一系列帧。</li>\n</ul>\n<p>流的生存周期包含idle、reserved(local)、reserved(remote)、open、half closed(local)、half closed(remote)、closed多个阶段。状态间通过特定的帧类型流转。在不同状态下对应着不同的能力，对于<a href=\"https://tools.ietf.org/html/rfc7540#section-5.1\">状态规范</a>描述以外的操作请求都会给出协议错误（PROTOCOL_ERROR）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">                         +--------+</span><br><span class=\"line\">                 send PP |        | recv PP</span><br><span class=\"line\">                ,--------|  idle  |--------.</span><br><span class=\"line\">               /         |        |         \\</span><br><span class=\"line\">              v          +--------+          v</span><br><span class=\"line\">       +----------+          |           +----------+</span><br><span class=\"line\">       |          |          | send H /  |          |</span><br><span class=\"line\">,------| reserved |          | recv H    | reserved |------.</span><br><span class=\"line\">|      | (local)  |          |           | (remote) |      |</span><br><span class=\"line\">|      +----------+          v           +----------+      |</span><br><span class=\"line\">|          |             +--------+             |          |</span><br><span class=\"line\">|          |     recv ES |        | send ES     |          |</span><br><span class=\"line\">|   send H |     ,-------|  open  |-------.     | recv H   |</span><br><span class=\"line\">|          |    /        |        |        \\    |          |</span><br><span class=\"line\">|          v   v         +--------+         v   v          |</span><br><span class=\"line\">|      +----------+          |           +----------+      |</span><br><span class=\"line\">|      |   half   |          |           |   half   |      |</span><br><span class=\"line\">|      |  closed  |          | send R /  |  closed  |      |</span><br><span class=\"line\">|      | (remote) |          | recv R    | (local)  |      |</span><br><span class=\"line\">|      +----------+          |           +----------+      |</span><br><span class=\"line\">|           |                |                 |           |</span><br><span class=\"line\">|           | send ES /      |       recv ES / |           |</span><br><span class=\"line\">|           | send R /       v        send R / |           |</span><br><span class=\"line\">|           | recv R     +--------+   recv R   |           |</span><br><span class=\"line\">| send R /  `-----------&gt;|        |&lt;-----------&#x27;  send R / |</span><br><span class=\"line\">| recv R                 | closed |               recv R   |</span><br><span class=\"line\">`-----------------------&gt;|        |&lt;----------------------&#x27;</span><br><span class=\"line\">                         +--------+</span><br><span class=\"line\"></span><br><span class=\"line\">   send:   endpoint sends this frame</span><br><span class=\"line\">   recv:   endpoint receives this frame</span><br><span class=\"line\"></span><br><span class=\"line\">   H:  HEADERS frame (with implied CONTINUATIONs)</span><br><span class=\"line\">   PP: PUSH_PROMISE frame (with implied CONTINUATIONs)</span><br><span class=\"line\">   ES: END_STREAM flag</span><br><span class=\"line\">   R:  RST_STREAM frame</span><br></pre></td></tr></table></figure>\n\n<p>流和帧的关系是：</p>\n<ul>\n<li>所有通信都在一个TCP连接上完成，这个连接可以承载任意数量的流</li>\n<li>每个流上面都有唯一标识符和<em>可选</em>的优先级信息，里面会承载要传递的消息</li>\n<li>每条消息都是一条逻辑HTTP信息（如请求或相应），有完整的HTTP语义，其中可能有一个或多个帧</li>\n<li>帧是最小的通信单位，承载着特定类型的数据，例如HTTP 标头、消息负载等等。帧可以<strong>交错发送</strong>，然后再根据帧头的数据流标识符进行组装</li>\n</ul>\n<p><img src=\"https://developers.google.com/web/fundamentals/performance/http2/images/streams_messages_frames01.svg\" alt=\"http2-frame\"></p>\n<p>所有的帧以8字节的报头开始并且跟着0到16383字节长度的主体。帧格式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 0                   1                   2                   3</span><br><span class=\"line\"> 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">| R |     Length (14)           |   Type (8)    |   Flags (8)   |</span><br><span class=\"line\">+-+-+-----------+---------------+-------------------------------+</span><br><span class=\"line\">|R|                 Stream Identifier (31)                      |</span><br><span class=\"line\">+=+=============================================================+</span><br><span class=\"line\">|                   Frame Payload (0...)                      ...</span><br><span class=\"line\">+---------------------------------------------------------------+</span><br></pre></td></tr></table></figure>\n\n<p>其中：</p>\n<ul>\n<li>R：保留字段</li>\n<li>Length：14位无符号整数的帧主体长度</li>\n<li>Type：帧类型，它描述了剩余的帧报头和帧主体将如何被解释</li>\n<li>Flags：为帧类型保留的8位布尔类型字段，根据不同帧类型赋予不同语义</li>\n<li>Stream Identifier：31字节的流标识符(见StreamIdentifiers)。0是保留的，标明帧是与连接相关作为一个整体而不是一个单独的流。</li>\n</ul>\n<h3 id=\"请求与响应复用\"><a href=\"#请求与响应复用\" class=\"headerlink\" title=\"请求与响应复用\"></a>请求与响应复用</h3><p>在HTTP1.1中，客户端要想发起多个并行请求以提升性能，则必须使用多个TCP连接，这种对TCP效率低下的利用，在HTTP&#x2F;2中得到改善。二进制分帧层将HTTP消息分解为互不依赖的帧，然后交错发送，最后再在另一端把它们重新组装起来。</p>\n<p><img src=\"https://developers.google.com/web/fundamentals/performance/http2/images/multiplexing01.svg\" alt=\"http2-reusing\"></p>\n<p>在上图中，流1和流3交错在同一个TCP连接上并行运行。这种机制带来了下面一些具体的提升：</p>\n<ul>\n<li>请求之间交错且互不影响</li>\n<li>响应之间交错且互不影响</li>\n<li>可以使用一个连接并行发送多个请求和响应</li>\n<li>不必再为了优化HTTP1.1性能做雪碧图、分片等骚操作</li>\n<li>一定程度上解决了线头阻塞问题</li>\n</ul>\n<h3 id=\"流控制\"><a href=\"#流控制\" class=\"headerlink\" title=\"流控制\"></a>流控制</h3><p>HTTP&#x2F;2的流控制类似TCP，但是更为精细和更靠近应用层。借助HTTP&#x2F;2流控制，可以实现在用户暂停一个大型视频流后，减少或阻塞视频里带来的HTTP流量，又或者中间代理匹配上下游流量速率。HTTP&#x2F;2流控制提出了一些规则，但<strong>并没有指出特定算法</strong>，目标在于允许不需要协议改动的情况下改进流量控制算法。</p>\n<ul>\n<li>流量控制是逐跳的，而不是头尾端点的</li>\n<li>流量控制是基于窗口更新帧的。接收端广播自己准备在流及整个连接过程中接收的字节大小。这是一个信用为基础的方案。</li>\n<li>流量控制是有方向性的，由接收端全权掌握。</li>\n<li>流量控制窗口初始值是65,535字节，不过接收方可以设置一个更大的值</li>\n<li>帧类型决定了是否适用流量控制规则。目前只有DATA帧受流量控制</li>\n<li>不能被禁用</li>\n<li>通过使用<code>WINDOW_UPDATE</code>帧类型来实现</li>\n</ul>\n<h3 id=\"流优先级\"><a href=\"#流优先级\" class=\"headerlink\" title=\"流优先级\"></a>流优先级</h3><p>HTTP&#x2F;2标准允许每个数据流都有一个关联的权重和依赖关系：</p>\n<ul>\n<li>可以向每个数据流分配一个介于1至256之间的整数。</li>\n<li>每个数据流与其他数据流之间可以存在显式依赖关系。</li>\n</ul>\n<p>优先级的目的是让客户端可以构建和传递“优先级树”，表明它倾向于如何接收响应。反过来，服务器可以使用此信息通过控制CPU、内存和其他资源的分配设定数据流处理的优先级。</p>\n<p><img src=\"https://developers.google.com/web/fundamentals/performance/http2/images/stream_prioritization01.svg\" alt=\"http2-priority\"></p>\n<p>数据流依赖关系通过将另一个数据流的唯一标识符作为父项引用进行声明；如果忽略标识符，相应数据流将依赖于“根数据流”。分配时，会尽可能先向父数据流分配资源，然后再向其依赖项分配资源。共享相同父项的数据流按其权重比例分配资源。在上图中，数据流B获得的资源是数据流A所获资源的三分之一。</p>\n<p>新建流的终端可以在报头帧中包含优先级信息来对流标记优先级。对于已存在的流，优先级帧可以用来改变流优先级。</p>\n<p>更详细规范参考<a href=\"https://tools.ietf.org/html/rfc7540#section-5.3\">RFC</a>。</p>\n<h3 id=\"帧类型\"><a href=\"#帧类型\" class=\"headerlink\" title=\"帧类型\"></a>帧类型</h3><h4 id=\"DATA\"><a href=\"#DATA\" class=\"headerlink\" title=\"DATA\"></a>DATA</h4><p>数据帧，类型0x0，传递和流关联的任意变量值长度的字节数据。例如，一个或多个数据帧被用来携带HTTP请求或者响应的载体。数据帧定义了以下标记：</p>\n<ul>\n<li>END_STREAM (0x1) ：用来表示当前帧是确定的流发送的最后一帧。设置这个标记时流进入到一种半封闭状态或者关闭状态。</li>\n<li>END_SEGMENT (0x2) ：表示是当前端的最后一帧。代理端绝对不能跨越多个端的边界来合并帧，转发帧的时候代理端必须保持片段的边界。</li>\n<li>PADDED (0x8) ： 位4用来表示Pad Length字段是可见的。</li>\n</ul>\n<p>数据帧绝对需要与流相关联，且遵从流量控制。</p>\n<h4 id=\"HEADERS\"><a href=\"#HEADERS\" class=\"headerlink\" title=\"HEADERS\"></a>HEADERS</h4><p>报头帧，类型0x1，用来打开一个流，并携带头部片段。能在流打开或者半封闭(远程)的状态下发送。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+---------------+</span><br><span class=\"line\">|Pad Length? (8)|</span><br><span class=\"line\">+-+-------------+-----------------------------------------------+</span><br><span class=\"line\">|E|                 Stream Dependency? (31)                     |</span><br><span class=\"line\">+-+-------------+-----------------------------------------------+</span><br><span class=\"line\">|  Weight? (8)  |</span><br><span class=\"line\">+-+-------------+-----------------------------------------------+</span><br><span class=\"line\">|                   Header Block Fragment (*)                 ...</span><br><span class=\"line\">+---------------------------------------------------------------+</span><br><span class=\"line\">|                           Padding (*)                       ...</span><br><span class=\"line\">+---------------------------------------------------------------+</span><br></pre></td></tr></table></figure>\n\n<p>它有以下标记：</p>\n<ul>\n<li>END_STREAM (0x1) ：用来标识这是发送端对确定的流发送的最后报头区块。设置这个标记将使流进入一种半封闭状态。后面伴随带有END_STREAM标记的延续帧的报头帧表示流的终止。延续帧不用来终止流。</li>\n<li>END_SEGMENT (0x2) ：表示这是当前端的最后一帧。中介端绝对不能跨片段来合并帧，且在转发帧的时候必须保持片段的边界。</li>\n<li>END_HEADERS (0x4) ：表示帧包含了整个的报头块，且后面没有延续帧。不带有END_HEADERS标记的报头帧在同个流上后面必须跟着延续帧。</li>\n<li>PADDED (0x8) ：表示Pad Length字段会呈现。</li>\n<li>PRIORITY (0x8) ：设置指示专用标记(E)，流依赖及权重字段将会呈现</li>\n</ul>\n<h4 id=\"PRIORITY\"><a href=\"#PRIORITY\" class=\"headerlink\" title=\"PRIORITY\"></a>PRIORITY</h4><p>优先级帧，类型0x2。明确了发送者建议的流的优先级，它可以在任意时间的流中发送。优先级帧不包含任何标记（flag）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 0                   1                   2                   3</span><br><span class=\"line\"> 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|E|                  Stream Dependency (31)                     |</span><br><span class=\"line\">+-+-------------+-----------------------------------------------+</span><br><span class=\"line\">|   Weight (8)  |</span><br><span class=\"line\">+-+-------------+</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"RST-STREAM\"><a href=\"#RST-STREAM\" class=\"headerlink\" title=\"RST_STREAM\"></a>RST_STREAM</h4><p>类型0x3，允许流的立即终止。通常用来取消一个流，或表示有错误发生。绝不应该在idle状态下发出。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0                   1                   2                   3</span><br><span class=\"line\">0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                        Error Code (32)                        |</span><br><span class=\"line\">+---------------------------------------------------------------+</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"SETTINGS\"><a href=\"#SETTINGS\" class=\"headerlink\" title=\"SETTINGS\"></a>SETTINGS</h4><p>设置帧，类型0x4。包含影响如何与终端通信的设置参数，并且用来确认这些参数的接收。设置帧<em>必须</em>由两个终端在连接开始的时候发送，并且<em>可以</em>由各个终端在连接生存期的任意时间发送。</p>\n<h4 id=\"PUSH-PROMISE\"><a href=\"#PUSH-PROMISE\" class=\"headerlink\" title=\"PUSH_PROMISE\"></a>PUSH_PROMISE</h4><p>推送承诺帧，类型0x5。用来在流发送者准备发送流之前告知对等端。包含了终端准备创建的长流的31位无符号标记以及提供附加上下文的报头的集合。通常在服务器中使用。推送承诺的接收端可以选择给推送承诺的发送端返回一个与被承诺的流标识符相关的RST_STREAM标记来拒绝接收承诺流。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0                   1                   2                   3</span><br><span class=\"line\">0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">| [Pad High(8)] | [Pad Low (8)] |X|  Promised Stream ID (31)  ...</span><br><span class=\"line\">+---------------+---------------+-+-----------------------------+</span><br><span class=\"line\">...    Promised Stream ID       | Header Block Fragment (*)   ...</span><br><span class=\"line\">+-------------------------------+-------------------------------+</span><br><span class=\"line\">|                   Header Block Fragment (*)                 ...</span><br><span class=\"line\">+---------------------------------------------------------------+</span><br><span class=\"line\">|                           Padding (*)                       ...</span><br><span class=\"line\">+---------------------------------------------------------------+</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"PING\"><a href=\"#PING\" class=\"headerlink\" title=\"PING\"></a>PING</h4><p>类型0x6。从发送端测量最小的RTT时间的机制，同样也是一种检测连接是否可用的方法。PING帧可以被任何终端发送，且必须在载体中包含一个8字节长度的任意数据。</p>\n<h4 id=\"GOAWAY\"><a href=\"#GOAWAY\" class=\"headerlink\" title=\"GOAWAY\"></a>GOAWAY</h4><p>超时帧，类型0x7。通知远端对等端不要在这个连接上建立新流。超时帧可以由客户端或者服务端发送。发送后，可以针对新的流创建一个新的连接。这个帧的目的是允许终端优雅的停止接收新的流，但仍可以继续完成之前已经建立的流的处理。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0                   1                   2                   3</span><br><span class=\"line\">0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|X|                  Last-Stream-ID (31)                        |</span><br><span class=\"line\">+-+-------------------------------------------------------------+</span><br><span class=\"line\">|                      Error Code (32)                          |</span><br><span class=\"line\">+---------------------------------------------------------------+</span><br><span class=\"line\">|                  Additional Debug Data (*)                    |</span><br><span class=\"line\">+---------------------------------------------------------------+</span><br></pre></td></tr></table></figure>\n\n<p>32位的错误码中包含了关闭连接的原因。</p>\n<h4 id=\"WINDOW-UPDATE\"><a href=\"#WINDOW-UPDATE\" class=\"headerlink\" title=\"WINDOW_UPDATE\"></a>WINDOW_UPDATE</h4><p>窗口更新帧，类型0x8。用来实现流控制。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0                   1                   2                   3</span><br><span class=\"line\">0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|X|              Window Size Increment (31)                     |</span><br><span class=\"line\">+-+-------------------------------------------------------------+</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"CONTINUATION\"><a href=\"#CONTINUATION\" class=\"headerlink\" title=\"CONTINUATION\"></a>CONTINUATION</h4><p>延续帧，类型0x9，用来延续一个报头区块。在END_HEADERS标记前，可以在HEADERS帧、PUSH_PROMISE帧以及CONTINUATION帧后接续任意数量的CONTINUATION帧。它包含一个flag：</p>\n<ul>\n<li>END_HEADERS (0x4) : 设置指示这个帧的报头区块的终止</li>\n</ul>\n<p>延续帧必须与流相关联。如果延续帧的相关流表示字段是0x0，终端必须响应一个类型为协议错误的连接错误。</p>\n<h3 id=\"服务器推送\"><a href=\"#服务器推送\" class=\"headerlink\" title=\"服务器推送\"></a>服务器推送</h3><p><img src=\"https://developers.google.com/web/fundamentals/performance/http2/images/push01.svg\" alt=\"http2-server-push\"></p>\n<p>HTTP&#x2F;2中的服务器推送打破了原来HTTP中的请求-响应语义（对原有语义也做了<a href=\"https://tools.ietf.org/html/rfc7540#section-8.1\">改进</a>），支持服务器可以对一个客户端请求发送多个响应。在原先的HTTP1.1中我们可能会将重要资源内联到网页中，减少网络延迟，这实际上等同于HTTP&#x2F;2中的强制推送。在HTTP&#x2F;2中的服务器推送还有下面一些功能：</p>\n<ul>\n<li>推送的资源能被客户端缓存（服务器也只能推送可被缓存的资源）</li>\n<li>在不同页面之间可以重用</li>\n<li>可以由服务器设定优先级</li>\n<li>可以被客户端拒绝</li>\n</ul>\n<p>服务器推送数据流由PUSH_PROMISE帧发起，需要先于请求推送资源的响应数据传输。实现上的策略是先于父响应（即，DATA 帧）发送所有PUSH_PROMISE帧，其中包含所承诺资源的HTTP头部。客户端接收到PUSH_PROMISE帧后，它可以根据自身情况选择接受拒绝（通过RST_STREAM帧）数据流。（例如，如果资源已经位于缓存中）</p>\n<p>客户端完全掌控服务器推送的使用方式。客户端可以限制并行推送的数据流数量；调整初始的流控制窗口以控制在数据流首次打开时推送的数据量；或完全停用服务器推送。这些在HTTP&#x2F;2连接开始时通过SETTINGS帧传输，可能随时更新。</p>\n<h3 id=\"头部压缩\"><a href=\"#头部压缩\" class=\"headerlink\" title=\"头部压缩\"></a>头部压缩</h3><p>在HTTP1.1中，头部数据使用以纯文本的形式传输，所占空间较大，在使用HTTP Cookie后，更是会达到上千字节。为了减少此开销和提升性能，HTTP&#x2F;2使用专门设计的<a href=\"https://httpwg.github.io/specs/rfc7541.html\">HPACK</a>压缩格式压缩请求和响应头部，这种格式通过静态霍夫曼编码对传输的头部字段进行编码。HPACK要求客户端和服务器同时维护和更新一个包含之前见过的标头字段的索引列表，利用之前传输值的索引列表，我们可以通过传输索引值的方式对重复值进行编码，索引值可用于有效查询和重构完整的头部键值对。</p>\n<p><img src=\"https://developers.google.com/web/fundamentals/performance/http2/images/header_compression01.svg\" alt=\"hpack\"></p>\n<p>作为一种进一步优化方式，HPACK压缩上下文包含一个<a href=\"https://httpwg.org/specs/rfc7541.html#static.table.definition\">静态表</a>和一个动态表：静态表在规范中定义，并提供了一个所有连接都可能使用的常用HTTP头部字段列表；动态表最初为空，将根据在特定连接内交换的值进行更新。</p>\n<p>早期版本的HTTP&#x2F;2和SPDY使用的<a href=\"https://tools.ietf.org/html/rfc1951\">DEFLATE</a>对头部进行压缩，但是在2012年夏天出现了<a href=\"https://en.wikipedia.org/w/index.php?title=CRIME&oldid=660948120\">CRIME</a>这种安全攻击。因此，之后HTTP&#x2F;2的头部压缩采用了专门设计的HPACK方案。在使用HPACK后，初次访问后的压缩率能达到70%~80%，甚至90%+。</p>\n<h2 id=\"支持度与调试\"><a href=\"#支持度与调试\" class=\"headerlink\" title=\"支持度与调试\"></a>支持度与调试</h2><p>支持度上，<a href=\"https://caniuse.com/#search=http%2F2\">主流浏览器</a>和<a href=\"https://github.com/http2/http2-spec/wiki/Implementations\">服务器程序</a>都已支持。你也可以访问<a href=\"https://http2.akamai.com/demo\">这个网址</a>体验HTTP&#x2F;2和HTTP1.1在load大量图片时的延迟对比。</p>\n<p>如果你想确认当前网页中的哪些请求是使用的HTTP&#x2F;2，可以在chrome devTools下的network选项卡里查看“Protocol”列（未发现此列的可以在表头右键找到并勾选显示），其中HTTP&#x2F;2将显示为h2。正如之前所说，支持HTTP&#x2F;2的浏览器会和服务器使用特定协议协商，对于不支持HTTP&#x2F;2的情况，会自动会退到HTTP1.1版本。</p>\n<p>尽管HTTP&#x2F;2使用二进制传输数据，然而浏览器为我们掩盖了实现细节。如果想要深入查看甚至是调试二进制分帧层的功能，如何去debug呢？</p>\n<ul>\n<li>Wireshark</li>\n<li>curl</li>\n<li><a href=\"https://github.com/bradfitz/http2/tree/master/h2i\">h2i</a>，不过这个好像已经不维护了</li>\n</ul>\n<h2 id=\"TLS调优\"><a href=\"#TLS调优\" class=\"headerlink\" title=\"TLS调优\"></a>TLS调优</h2><p>目前各大浏览器只在<code>https://</code>的基础上支持HTTP&#x2F;2，即在TLS层之上的HTTP&#x2F;2。多出的TLS的层也是会增加时延和成本的，具体涉及到的TLS握手、会话和加密套件协商过程还有优化空间，如减少证书层级、减少证书大小等。其余优化方向可以查看参考中一些文章介绍。</p>\n<h2 id=\"之前的优化还应该继续用么\"><a href=\"#之前的优化还应该继续用么\" class=\"headerlink\" title=\"之前的优化还应该继续用么\"></a>之前的优化还应该继续用么</h2><h3 id=\"继续保持的\"><a href=\"#继续保持的\" class=\"headerlink\" title=\"继续保持的\"></a>继续保持的</h3><ul>\n<li>减少DNS查询<ul>\n<li>减少域名</li>\n<li>启用预读：dns-prefetch</li>\n</ul>\n</li>\n<li>使用CDN</li>\n<li>避免重定向</li>\n<li>资源压缩<ul>\n<li>代码压缩（JS、HTML、CSS）</li>\n<li>资源压缩（图片、字体、音频、视频）</li>\n<li>文本压缩（Gzip）</li>\n</ul>\n</li>\n<li>使用缓存</li>\n</ul>\n<h3 id=\"不再需要的\"><a href=\"#不再需要的\" class=\"headerlink\" title=\"不再需要的\"></a>不再需要的</h3><ul>\n<li>分片与域名散列：HTTP&#x2F;2对于一个域名只使用一个TCP连接，分片反而会浪费资源，同时也会影响流控制、头部压缩的表现。</li>\n<li>资源打包合并：HTTP&#x2F;2支持多路复用，资源合并会降低缓存利用率，且会让开发流程更复杂。（<a href=\"https://github.com/pikapkg/snowpack\">snowpack</a>了解一下）</li>\n<li>资源内联：可以由服务器推送解决这类需求，资源内联一方面无法缓存，另一方面会让页面代码更大</li>\n</ul>\n<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2><ul>\n<li>Q: 既然HTTP&#x2F;2是在SPDY工作基础上设计的，那HTTP&#x2F;2推出后，SPDY还使用吗</li>\n<li>A: Google公开声明了他们会在2016年移除Chrome里对SPDY和NPN的支持，并且极力推动服务器迁移至HTTP&#x2F;2。2016年2月他们<a href=\"https://blog.chromium.org/2016/02/transitioning-from-spdy-to-http2.html\">声明</a>了SPDY和NPN会在Chrome 51之后被移除。</li>\n<li>Q: 这个协议是否只对大型网站有效</li>\n<li>A: 由于缺乏内容分发网络，小网站的网络延迟往往较高，而多路复用的能力可以极大的改善在高网络延迟下的体验。</li>\n<li>Q: 基于TLS让速度变得更慢</li>\n<li>A: 正如上一节提到的，TLS的握手确实增加了额外的开销，也有越来越多的方案提出来减少TLS往返的时间。TLS同时也会更多消耗CPU等资源，更多例子可见<a href=\"https://istlsfastyet.com/\">istlsfastyet.com</a>。不过一方面HTTP&#x2F;2并不强制要求基于TLS，另一方面HTTP&#x2F;2带来的性能提升使得即使基于TLS，通常也会比HTTP1.1更快</li>\n<li>Q: 为什么不使用文本传输</li>\n<li>A: 的确，如果可以直接读出协议内容，那么调试和追踪都会变得更为简单。但是二进制带来的灵活度更高，何况浏览器会自动帮你解析。</li>\n<li>Q: 看起来，HTTP1.1中的一些短板并没有改彻底</li>\n<li>A: 实际上，设计HTTP&#x2F;2之初的目标就包括向前兼容HTTP&#x2F;1.1的范式，来保证升级协议也不用重写底层的很多东西。老的HTTP功能，如协议头、状态码、可怕的Cookie，这些都保留了。性能优化更多通过增加了一个中间分帧层解决的。</li>\n<li>Q: 目前使用的广泛程度如何</li>\n<li>A: 在2015年年底大多数浏览器就已经支持HTTP&#x2F;2，目前约96%的浏览器支持HTTP&#x2F;2，同时约46%的网站支持HTTP&#x2F;2。</li>\n</ul>\n<h2 id=\"后续\"><a href=\"#后续\" class=\"headerlink\" title=\"后续\"></a>后续</h2><ul>\n<li>官网在给出HTTP&#x2F;2规范时，也曾预计要10年时间和HTTP1.1并存，在这个期间，Web优化的思路也可能会有调整</li>\n<li><a href=\"https://wiki.openssl.org/index.php/TLS1.3\">TLS1.3</a>。2020年2月的<a href=\"https://tools.ietf.org/html/rfc8740\">RFC8740</a>中给出了基于TLS1.3的HTTP&#x2F;2的实现建议。</li>\n<li>既然TCP容易遇到线头阻塞问题，那么能不用使用UDP呢？Google提出的<a href=\"https://www.chromium.org/quic\">QUIC</a>（Quick UDP Internet Connection）它在很大程度上继承了SPDY的衣钵。QUIC可以理解成TCP + TLS + HTTP&#x2F;2替代实现。</li>\n<li>2018年10月，互联网工程任务组HTTP及QUIC工作小组正式将基于QUIC协议的HTTP（英语：HTTP over QUIC）重命名为<a href=\"https://datatracker.ietf.org/doc/draft-ietf-quic-http/\">HTTP&#x2F;3</a>以为确立下一代规范做准备。</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://imququ.com/post/http2-new-opportunities-and-challenges.html\">HTTP&#x2F;2：新的机遇与挑战</a></li>\n<li><a href=\"https://imququ.com/post/http2-resource.html\">HTTP&#x2F;2 资料汇总</a></li>\n<li><a href=\"https://http2.github.io/\">HTTP&#x2F;2官网</a></li>\n<li><a href=\"https://httpwg.org/specs/rfc7540.html\">HTTP&#x2F;2规范</a></li>\n<li><a href=\"https://httpwg.github.io/specs/rfc7541.html\">HPACK规范</a></li>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/http2\">HTTP&#x2F;2简介</a></li>\n<li><a href=\"https://ye11ow.gitbooks.io/http2-explained/content/\">HTTP&#x2F;2讲解</a></li>\n<li><a href=\"https://imququ.com/post/header-compression-in-http2.html\">HTTP&#x2F;2 头部压缩技术介绍</a></li>\n<li><a href=\"https://github.com/fex-team/http2-spec/blob/master/HTTP2%E4%B8%AD%E8%8B%B1%E5%AF%B9%E7%85%A7%E7%89%88(06-29).md\">HTTP&#x2F;2草案13中英对照</a></li>\n<li><a href=\"https://www.mnot.net/talks/h2fe/#8\">HTTP&#x2F;2 for Front-End Developers</a></li>\n<li><a href=\"http://velocityconf.com/devops-web-performance-2015/public/schedule/detail/42385\">HTTP&#x2F;2 is here, let’s optimize!</a></li>\n<li><a href=\"https://caniuse.com/#search=HTTP%2F2\">HTTP&#x2F;2支持度</a></li>\n<li><a href=\"https://github.com/http2/http2-spec/wiki/Implementations\">HTTP&#x2F;2实现列表</a></li>\n<li><a href=\"https://www.chainnews.com/articles/401950499827.htm\">HTTP发展史梳理笔记</a></li>\n<li><a href=\"https://http2.akamai.com/demo\">HTTP&#x2F;2 is the future of the Web | Akamai</a></li>\n</ul>\n",
            "tags": [
                "HTTP",
                "HTTP/2",
                "SPDY",
                "QUIC"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2020/05/18/some-tips-7/",
            "url": "http://shenlvmeng.github.com/blog/2020/05/18/some-tips-7/",
            "title": "工作中的遇到的一些小知识 7",
            "date_published": "2020-05-18T09:02:41.000Z",
            "content_html": "<h2 id=\"DNS\"><a href=\"#DNS\" class=\"headerlink\" title=\"DNS\"></a>DNS</h2><p>DNS作为用来映射域名和IP地址的<strong>分布式</strong>数据库，使用TCP&#x2F;UDP端口号53。其中每一级域名限制63个字符，总长度不超过253个字符。</p>\n<p>DNS系统中，常见的资源记录类型有：</p>\n<ul>\n<li>A（Address）记录：最重要的记录，用于将特定主机名映射到对应主机的IPv4地址上</li>\n<li>MX记录：用于将特定邮箱地址映射到对应邮箱服务器上</li>\n<li>CNAME（Canonical Name Record）别名记录：用于将某个别名指向某个A记录上</li>\n<li>AAAA记录：和A记录对应，用于将特定主机名映射到对应主机的IPv6地址上</li>\n</ul>\n<p>实现上，全球范围近1000台根域名服务器分为13组，编号A到M，剩下的Internet DNS命名空间被委托给其他DNS服务器。DNS系统也有各种各样的DNS软件所支持，其中最普遍的是BIND（Berkeley Internet Name Domain）。在查询时，有两种实现方式：<strong>递归</strong>和<strong>迭代</strong>，客户端使用递归，DNS服务器间使用迭代。如查询<code>shenlvmeng.github.io</code>（忽略本地host和DNS缓存和路由器DNS缓存）：</p>\n<ul>\n<li>客户端发送查询报文<code>query shenlvmeng.github.io</code>到边缘DNS服务器（一般是ISP的DNS服务器），DNS先检查缓存，若存在记录则直接返回结果</li>\n<li>若不存在或记录已过期，则：<ul>\n<li>DNS服务器向根域名服务器发送同样的查询报文，根服务器返回顶级域<code>.io</code>的权威域名服务器地址</li>\n<li>DNS服务器向<code>.io</code>域的权威域名服务器发送查询报文，得到二级域<code>.github.io</code>的权威域名服务器地址</li>\n<li>DNS服务器向<code>.github.io</code>域的权威域名服务器发送查询报文，得到主机<code>shenlvmeng</code>的A记录，<strong>存入自身缓存，设置TTL</strong>，返回给客户端</li>\n</ul>\n</li>\n</ul>\n<p>最初的DNS域名使用字符仅限于ASCII字符的子集，2008年后，ICANN通过决议，可以使用其他语言作为顶级域名的字符，如“xxx.中国”。使用punnycode码的IDNA系统，可以将unicode字符映射为有效的DNS字符集，有效避免IDN欺骗（即使用长得很像的不同字符作为钓鱼网站）。</p>\n<p>域名的所有者和IP也可以通过查找WHOIS域名数据库查询。对于大多数根域名，由ICANN维护，WHOIS的细节由控制那个域的域注册机构维护。</p>\n<h3 id=\"域名污染\"><a href=\"#域名污染\" class=\"headerlink\" title=\"域名污染\"></a>域名污染</h3><p>指一些刻意制造或无意制造的域名服务器数据包，指向错误的IP地址。这种错误有可能是域名服务器错误工作带来，也有可能是刻意为之。</p>\n<p>对于GFW来说，它会对所有经过它的在UDP端口53上的域名查询进行IDS入侵检测，一旦发现与黑名单关键词相匹配的域名查询请求，会伪装成目标域名的解析服务器返回虚假的查询结果。</p>\n<ul>\n<li>系统默认会从使用ISP提供的域名查询服务器去查询国外的权威服务器时，便被GFW污染，缓存虚假的IP地址。</li>\n<li>由于TCP连接的机制可靠，理论上无法对TCP协议的域名查询进行污染，理论上可以通过TCP协议查询真实的IP地址。但其实，对于真实的IP地址，会有其他方式封锁，或对查询行为使用连接重置进行拦截</li>\n<li>通常情况下，设置的NDS服务主要使用海外的DNS服务，所以都需要穿过GFW，不过一些小型的DNS有技术手段回避GFW污染，从而能够访问国外被封锁网站</li>\n</ul>\n<p>ISP域名劫持还包含一些互联网提供商劫持部分域名，转到自己制定的网站，已提供自己的广告。</p>\n<h3 id=\"DNS记录\"><a href=\"#DNS记录\" class=\"headerlink\" title=\"DNS记录\"></a>DNS记录</h3><p>在DNS的分布式数据库中，不同记录类型有不同的用途。下面介绍了一些常见的记录类型。</p>\n<ul>\n<li>A记录，传回一个32位的IPv4地址，映射主机名到IP</li>\n<li>AAAA记录，传回一个128位的IPv6地址，映射主机名到IP</li>\n<li>CNAME：一个主机名的别名，只能指向一个域名，不能指向IP地址，可以保证原域名地址映射IP地址修改时，别名也能同步修改。CNAME意为真实名称，所以应当读作<code>alias.com</code>的“CNAME“是<code>real.com</code>。为保证效率，应当避免CNAME指向其他CNAME。</li>\n<li>DNAME，和CNAME类似，不过不是映射域名，而是把域名下的整个解析子树映射到另一域名。如把<code>alias.com</code>DNAME到<code>real.com</code>后，不影响<code>alias.com</code>的原有的解析设置。而<code>xxx.alias.com</code>都会被映射到<code>xxx.real.com</code>上</li>\n<li>MX（邮件交换）记录，将邮箱后缀（<code>@</code>后的部分）映射到类型为A或者AAAA的地址记录，原则上禁止映射到CNAME上</li>\n<li>NS记录，委托DNS区域使用已提供的权威域名服务器</li>\n<li>SRV记录，进行服务定位</li>\n</ul>\n<p>所有的记录都有一个有效期（TTL，time-to-live），时间耗尽后，所包含的信息必须从权威服务器上得到更新。</p>\n<h2 id=\"useState和useEffect实现思路\"><a href=\"#useState和useEffect实现思路\" class=\"headerlink\" title=\"useState和useEffect实现思路\"></a><code>useState</code>和<code>useEffect</code>实现思路</h2><p>这两个React hooks中引入的特性背后是基于闭包 + 数组索引实现的，下面是一个实现的demo。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// useState</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; render &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-dom&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">values</span>: <span class=\"built_in\">any</span>[] = [];</span><br><span class=\"line\"><span class=\"keyword\">let</span> cursor = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> useState&lt;T&gt;(<span class=\"attr\">initialState</span>: T): [T, <span class=\"function\">(<span class=\"params\">newState: T</span>) =&gt;</span> <span class=\"built_in\">void</span>] &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> currentCursor = cursor;</span><br><span class=\"line\">\tvalues[currentCursor] = values[currentCursor] || initialState;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"title function_\">setFunc</span> = (<span class=\"params\">newState: T</span>) =&gt; &#123;</span><br><span class=\"line\">\t\tvalues[currentCursor] = newState;</span><br><span class=\"line\">    <span class=\"comment\">// 触发重新渲染</span></span><br><span class=\"line\">\t\t<span class=\"title function_\">renderApp</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcursor++;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> [values[currentCursor], setFunc];</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">App</span>: <span class=\"title class_\">React</span>.<span class=\"property\">FC</span>&lt;&#123;&#125;&gt; = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> [num, setNum] = useState&lt;<span class=\"built_in\">number</span>&gt;(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (</span><br><span class=\"line\">\t\t<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> setNum(num + 1)&#125;&gt;&#123;num&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">\t);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">renderApp</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">render</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span></span>, <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;root&quot;</span>));</span><br><span class=\"line\">  <span class=\"comment\">// 重置计数器</span></span><br><span class=\"line\">\tcursor = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">renderApp</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// useEffect</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; render &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-dom&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">deps</span>: <span class=\"built_in\">any</span>[][] = [];</span><br><span class=\"line\"><span class=\"keyword\">let</span> cursor = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">useEffect</span>(<span class=\"params\">cb: () =&gt; <span class=\"built_in\">void</span>, dep: <span class=\"built_in\">any</span>[]</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> currCursor = cursor;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!deps[currCursor]) &#123;</span><br><span class=\"line\">\t\tdeps[currCursor] = dep;</span><br><span class=\"line\">\t\tcursor++;</span><br><span class=\"line\">\t\t<span class=\"title function_\">cb</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdep.<span class=\"title function_\">some</span>(<span class=\"function\">(<span class=\"params\">d, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (d !== deps[currCursor][index]) &#123;</span><br><span class=\"line\">\t\t\tdeps[currCursor][index] = d;</span><br><span class=\"line\">\t\t\tcursor++;</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">cb</span>();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">App</span>: <span class=\"title class_\">React</span>.<span class=\"property\">FC</span>&lt;&#123;&#125;&gt; = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;ok&#x27;</span>), <span class=\"number\">1000</span>);</span><br><span class=\"line\">\t&#125;, []);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (</span><br><span class=\"line\">\t\t<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>ok<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">\t);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">renderApp</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">render</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span></span>, <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;root&quot;</span>));</span><br><span class=\"line\">\tcursor = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">renderApp</span>();</span><br></pre></td></tr></table></figure>\n\n<p>实际使用中，是把<code>useState</code>、<code>useEffect</code>这样的hooks放在<code>memorizedState</code>数组中，共用一个cursor。类似下面这样：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> memoizedState = [];</span><br><span class=\"line\"><span class=\"keyword\">let</span> cursor = <span class=\"number\">0</span>; <span class=\"comment\">// 当前下标</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">useState</span>(<span class=\"params\">initialValue</span>) &#123;</span><br><span class=\"line\">  memoizedState[cursor] = memoizedState[cursor] || initialValue;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> currentCursor = cursor;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">setState</span>(<span class=\"params\">newState</span>) &#123;</span><br><span class=\"line\">    memoizedState[currentCursor] = newState;</span><br><span class=\"line\">    <span class=\"title function_\">render</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [memoizedState[cursor++], setState];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">useEffect</span>(<span class=\"params\">callback, depArray</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> hasNoDeps = !depArray;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> deps = memoizedState[cursor];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> hasChangedDeps = deps</span><br><span class=\"line\">    ? !depArray.<span class=\"title function_\">every</span>(<span class=\"function\">(<span class=\"params\">el, i</span>) =&gt;</span> el === deps[i])</span><br><span class=\"line\">    : <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (hasNoDeps || hasChangedDeps) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">callback</span>();</span><br><span class=\"line\">    memoizedState[cursor] = depArray;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  cursor++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>memorized</code>数组也是hooks一定要在top level调用的原因。</p>\n<p>在React实际实现上，hooks是以链表的形式存储，通过<code>next</code>属性链接到下一个hook。同时每一个<code>memorized</code>数组都会绑定到一个fiber上，从而在再次渲染时更新对应节点。让hooks之间互不干扰。</p>\n<h2 id=\"proxy简单了解与应用\"><a href=\"#proxy简单了解与应用\" class=\"headerlink\" title=\"proxy简单了解与应用\"></a>proxy简单了解与应用</h2><p>Vue 3.0在重构后使用了ES6的proxy新特性来跟踪数据字段的更新。它可以封装一个目标对象，为之添加一个代理，返回一个Proxy对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Proxy</span>(target, handler)</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>handler</code>即代理配置对象，也是Proxy对象的“魔力”所在。对于一个空的handler，返回的Proxy近似于target本身。在handler上定义任何handler函数的集合，都会让返回Proxy对象有不同的表现。</p>\n<p><code>handler</code>有下面一些可选的属性：</p>\n<ul>\n<li><code>apply</code> 监听函数调用的钩子<ul>\n<li><code>apply: function(target, thisArg, argumentsList) &#123;&#125;</code></li>\n</ul>\n</li>\n<li><code>construct</code> 监听使用<code>new</code>调用的钩子<ul>\n<li><code>construct: function(target, argumentsList, newTarget) &#123;&#125;</code></li>\n</ul>\n</li>\n<li><code>defineProperty</code> 类似<code>Object.defineProperty</code><ul>\n<li><code>defineProperty: function(target, property, descriptor) &#123;&#125;</code></li>\n</ul>\n</li>\n<li><code>get</code> 监听属性访问<ul>\n<li><code>get: function(target, property, receiver) &#123;&#125;</code></li>\n</ul>\n</li>\n<li><code>deleteProperty</code> 监听<code>delete</code>操作<ul>\n<li><code>deleteProperty: function(target, property) &#123;&#125;</code></li>\n</ul>\n</li>\n<li><code>getOwnPropertyDescriptor</code> 监听<code>Object.getOwnPropertyDescriptor</code></li>\n<li><code>getPrototypeOf()</code> 类似<code>Object.getPrototypeOf</code></li>\n<li><code>has</code> 监听<code>in</code>操作<ul>\n<li><code>has: function(target, prop) &#123;&#125;</code></li>\n</ul>\n</li>\n<li><code>isExtensible</code> 监听<code>Object.isExtensible</code></li>\n<li><code>ownKeys</code> 监听<code>Object.getOwnPropertyNames</code>和<code>Object.getOwnPropertySymbols</code></li>\n<li><code>preventExtensions</code> 监听<code>Object.preventExtensions</code></li>\n<li><code>set</code> 监听属性设置<ul>\n<li><code>set: function(target, property, value, receiver) &#123;&#125;</code></li>\n</ul>\n</li>\n<li><code>setPrototypeOf</code> 类似<code>Object.setPrototypeOf</code></li>\n</ul>\n<p>利用上面的<code>handler</code>已经可以实现很丰富的功能，immer的produce就有借助proxy来实现。</p>\n",
            "tags": [
                "CDN",
                "DNS",
                "CNAME"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2019/12/02/clean-code/",
            "url": "http://shenlvmeng.github.com/blog/2019/12/02/clean-code/",
            "title": "《代码整洁之道》——有一个好的代码品味",
            "date_published": "2019-12-02T15:08:32.000Z",
            "content_html": "<blockquote>\n<p>The only valid measurement of code quality: WTFs&#x2F;minute</p>\n</blockquote>\n<p>在成为一个程序员的初期，实现功能还需磕磕绊绊的阶段，我们大抵没有精力操心代码风格的问题；而在能够搞定环境和API使用的时间段，大部分人又会沉湎于使用一门语言让想象实现的成就感，而没有发现暗藏在迭代后的危机。往往迭代了一段时间后，才发现之前埋下的巨坑已经让自己无从下手。这时一部分人醒悟过来，意识到一个优良的代码风格对于项目推进的长远意义。这也是《Clean Code》这本书的宗旨。它较之《程序员修炼之道》更为具体，较之《重构》更为宏观。对于工作一段时间后的程序员来说，是一个很好的提醒和反思归纳的建议。让代码work的方式是千万种，而让代码可持续，可扩展，长久work的方式也许需要前辈指引些方法。</p>\n<h2 id=\"观念\"><a href=\"#观念\" class=\"headerlink\" title=\"观念\"></a>观念</h2><blockquote>\n<p>Later equals never —— Leblanc Law</p>\n</blockquote>\n<p>糟糕的代码会让人难以下手，拖慢进度，若无人着手改善，混乱会持续增加，进而降低团队生产力，降低人效，然后搞砸整个项目。为什么不一开始就打好基础，写出整洁代码呢？</p>\n<p>下面是一些大师对“整洁代码”的界定</p>\n<ul>\n<li>“代码逻辑直截了当，缺陷难以隐藏；减少依赖关系，从而便于维护；性能调优，省得引人做出没规矩的优化，干出蠢事；整洁的代码只干一件事” —— Bjarne Stroustrup</li>\n<li>“代码简单直接，如同优美的散文；从不隐藏设计者的意图，充满干净利落的抽象和直截了当的控制语句” —— Grady Booch</li>\n<li>“可由作者外的人阅读和扩展，应该有单元测试和验收测试；只使用有意义的命名；提供尽量正交的使用方法（一种而非多种做一件事的方法）；尽量少的API；尽量少的依赖关系，且要明确定义和清晰提供；代码应从字面意义上表达其含义” —— Dave Thomas</li>\n<li>“整洁的代码总是看起来像某位特别在意的人写的，几乎没有改进的余地，所有的改进都会回到原点” —— Michael Feather</li>\n<li>“能通过所有测试；没有重复代码，表达力强大；体现系统中的全部设计理念；包括尽量少的实体，如类、方法、函数。” —— Ron Jeffries</li>\n<li>“整洁代码让每个例程都深合己意；漂亮代码让语言看起来像是专门为解决那个问题而存在” —— Ward Cunningham</li>\n</ul>\n<p>编写代码的难度，取决于读周边代码的难度，要想干得快，就先让代码易读。</p>\n<blockquote>\n<p>让营地比你来时更干净 —— 童子军军规</p>\n</blockquote>\n<h2 id=\"命名\"><a href=\"#命名\" class=\"headerlink\" title=\"命名\"></a>命名</h2><p>好的命名，可以让人一眼就明白代码的逻辑。看下面两段代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;<span class=\"type\">int</span>[]&gt; getThem() &#123;</span><br><span class=\"line\">  List&lt;<span class=\"type\">int</span>[]&gt; list1 = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;<span class=\"type\">int</span>[]&gt;();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span>[] x : theList)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x[<span class=\"number\">0</span>] == <span class=\"number\">4</span>)</span><br><span class=\"line\">      list1.add(x)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> list1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;Cell&gt; <span class=\"title function_\">getFlaggedCells</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  List&lt;Cell&gt; flaggedCells = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Cell&gt;();</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (Cell cell : gameBoard)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cell.isFlagged)</span><br><span class=\"line\">      flaggedCells.add(cell);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> flaggedCells;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面是一些准则：</p>\n<ul>\n<li>名副其实，一旦发现更好的，就替换掉旧的。<strong>如果名称还需要注释补充，那就不算名副其实</strong></li>\n<li>避免误导，提防使用不同之处较小的名称，比如<code>UsernameListEmptyFilter</code>和<code>UsernameListNullFilter</code>，不要混用1和l，以及0和O</li>\n<li>做有意义的区分，少废话，反例是<code>a1</code>和<code>a2</code>，<code>nameString</code>和<code>name</code></li>\n<li>使用<strong>能读出来</strong>的名称，方便程序员的沟通</li>\n<li>使用<strong>可搜索</strong>的名称，仅在块作用域或短函数内使用单字母名称</li>\n<li>不把类型信息放在名称中</li>\n<li>减少不必要的前缀和后缀</li>\n<li>类名应该是名词，方法名应该是动词或动词短语</li>\n<li>别玩梗</li>\n<li>标准化语素，为每一个抽象概念选择一个统一的词</li>\n<li>别用有多重含义的词汇，这会增加使用者顾虑和理解成本</li>\n<li>只在没有明确定义的场景下使用语境（类，前缀……）</li>\n</ul>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><p>下面是一些准则：</p>\n<ul>\n<li><strong>短小，更短小</strong></li>\n<li><strong>只做一件事，只做一件事，只做一件事</strong>，重要的事情说三遍<ul>\n<li>还有一种方式可以帮助判断函数是不是只做了一件事：<strong>函数语句是否在一个抽象层级上</strong></li>\n<li>只做一件事的函数无法被继续合理拆分成多段</li>\n</ul>\n</li>\n<li>让代码拥有从上到下的自然的阅读顺序，尽量避免跳来跳去的阅读顺序</li>\n<li>为函数使用<strong>描述性</strong>的名称</li>\n<li>函数<strong>最多3个入参</strong>，最理想是没有参数，其次是1个，再其次是2个，要避免3个参数<ul>\n<li><strong>布尔类型的参数会让你的函数难以理解</strong></li>\n<li>使用二元参数时，最好保证前后顺序不敏感</li>\n<li>对于复杂的入参，可以用对象封装起来</li>\n</ul>\n</li>\n<li>函数要么只做副作用（<em>做什么事</em>），要么没有副作用（<em>回答什么事</em>），而且能从名称中一目了然地看到</li>\n<li>用异常代替错误码，错误处理也是一件事</li>\n<li><strong>别重复自己（Don’t repeat yourself, DRY）</strong>。重复是软件中一切邪恶的根源，软件开发领域的所有创新都在不断尝试从源代码中消灭重复</li>\n</ul>\n<p>函数是语言的动词，类是名词。大师级的程序员把系统当做故事来讲，而不是程序来写。他们使用特定编程语言提供的工具构建一种<strong>更丰富和更具表达力的语言</strong>。好的函数必须干净利落的组合在一起，形成清晰明确的语言，帮你<strong>讲好故事</strong>。这个过程不是一蹴而就的，你可以现象什么就写什么，然后一点点打磨它。</p>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><blockquote>\n<p>使用注释 &#x3D; 承认自己无法用代码表达清楚意图</p>\n</blockquote>\n<p>列举注释的准则前，必须摆正观念。<strong>注释是一种必须的恶，如果编程语言足够有表达力，或你长于用语言表达自己的意图，那么就不需要注释。注释的恰当用法是弥补我们用代码表达意图时遭遇的失败。</strong>注释存在的时间越久，具体所描述的事实就越远。原因很简单，程序员不可能坚持维护注释。</p>\n<p>的确，程序员应该让注释保持可维护而精准，但最好能直接写清楚代码，保证无须编写注释。<strong>真实只在一处：代码</strong>，只有代码能忠实告诉你它做的事。</p>\n<ul>\n<li><strong>注释无法挽救糟糕的代码</strong>，与其为糟糕代码补充大量注释，不如花时间写出整洁有表达力的代码</li>\n<li><strong>用代码代替注释</strong></li>\n<li>有些无法避免且合理存在的注释<ul>\n<li>法律信息</li>\n<li>对函数名的补充</li>\n<li>对稍微反常规意图的解释，避免误解</li>\n<li>糟糕的代码来自外部库或外部API</li>\n<li>敏感代码的警告</li>\n<li>TODO、FIXME</li>\n<li>Javadoc</li>\n</ul>\n</li>\n<li>下面则是一些很常见的糟糕注释，它们只是糟糕代码的借口<ul>\n<li>只有自己看得懂的注释</li>\n<li>对函数名的复述</li>\n<li>误导性注释</li>\n<li>日志型注释，如Milestone记录</li>\n<li>废话</li>\n<li>位置标记，如<code>====================</code></li>\n<li>代码署名</li>\n<li><em>大多数</em>注释掉的代码</li>\n<li>百科式的介绍</li>\n<li>私有代码的Javadoc</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a>格式</h2><p>格式即代码风格，可以利用lint这样的自动化工具完成，需要在团队内保持一致。</p>\n<h3 id=\"垂直格式\"><a href=\"#垂直格式\" class=\"headerlink\" title=\"垂直格式\"></a>垂直格式</h3><p>在从上到下的组织上，</p>\n<ul>\n<li>可以向报纸一样，先大纲，再粗线条概述，再给出细节，越往下细节越多</li>\n<li>用<strong>空行</strong>分隔概念</li>\n<li>靠近的代码行暗示了代码间的紧密关系</li>\n<li>应避免迫使读者在源文件和类之间跳来跳去<ul>\n<li>变量声明应尽量靠近使用位置</li>\n<li>循环中的控制变量总在循环语句中声明</li>\n<li>类成员在类顶部声明</li>\n<li>如果某个函数调用了另一个，就应该把它们放一起</li>\n<li>概念相关的代码应该放在一起，如<code>getHour</code>和<code>getMinute</code></li>\n<li>如果可以，最好把被调用的函数放在执行调用的函数下面</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"横向格式\"><a href=\"#横向格式\" class=\"headerlink\" title=\"横向格式\"></a>横向格式</h3><ul>\n<li>水平字符的上限，100或120</li>\n<li>使用<strong>空格</strong>分隔概念</li>\n<li><strong>不需要水平对齐</strong>，以为从左到右的阅读顺序优先于从上到下</li>\n<li>学会用<strong>缩进</strong>表现层级</li>\n</ul>\n<h2 id=\"对象和数据结构\"><a href=\"#对象和数据结构\" class=\"headerlink\" title=\"对象和数据结构\"></a>对象和数据结构</h2><ul>\n<li><strong>对象</strong>把数据隐藏于抽象的后面，暴露操作数据的函数，<strong>数据结构</strong>暴露数据，不提供有意义的函数。</li>\n<li>过程式代码难以添加新的数据结构，因为必须修改所有函数；面向对象代码难以添加新函数，因为必须修改所有类</li>\n<li>得墨忒尔律：类C的方法f只应该调用以下对象的方法：<strong>C、f创建的对象、作为参数传给f的对象、C的成员所持有的对象</strong></li>\n<li><strong>数据结构</strong>只简单地拥有公有变量，没有函数；而<strong>对象</strong>则只拥有私有变量和函数。一半是对象一半是数据结构的混淆会增加添加新函数和数据结构的难度</li>\n<li>DTO（Data Transfer Objects，数据传输对象）就是只有公有变量，没有函数的类，Active Record就是DTO的一种</li>\n</ul>\n<h2 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h2><p>错误处理很重要，但要是它搞乱了代码逻辑，那就是错误的用法。</p>\n<ul>\n<li>返回异常而不是错误码</li>\n<li>try-catch-finally语句块就像事务，可以帮你定义用户应该期待些什么</li>\n<li>在Java中，可控异常违反开闭原则带来的成本要高于收益</li>\n<li>打包第三方API，一方面降低了依赖的覆盖面，另一方面也有助于模拟第三方调用</li>\n<li>可以把抛出错误封装成特定的函数</li>\n<li>别返回和传递null值</li>\n</ul>\n<h2 id=\"边界\"><a href=\"#边界\" class=\"headerlink\" title=\"边界\"></a>边界</h2><p>边界即我们代码和第三方代码的连接处。</p>\n<ul>\n<li>通过编写测试来概览和理解第三方代码的形式叫做<strong>学习性测试（learning tests）</strong>。它可以帮助我们快速试错和反馈，从而对第三方API快速上手。</li>\n<li>在第三方代码尚未就绪时，<strong>编写我们想要的接口</strong>，可以使我们能保持代码在自己控制中，并在未来通过编写adapter的形式无痛迁移</li>\n<li>应尽量避免过多依赖第三方的特定信息，更多依靠你能控制的东西，好过依靠你控制不了的东西，免得日后受其控制</li>\n</ul>\n<h2 id=\"单元测试\"><a href=\"#单元测试\" class=\"headerlink\" title=\"单元测试\"></a>单元测试</h2><ul>\n<li>TDD（Test-Driven Development）三定律<ul>\n<li>在编写不能通过的单元测试前，不编写生产代码</li>\n<li>只编写刚好无法通过的单元测试，不能编译也算</li>\n<li>只编写刚好足已通过失败测试的生产代码</li>\n</ul>\n</li>\n<li><strong>测试代码和生产代码一样重要</strong>。正是单元测试让你的代码可扩展、可维护、可复用</li>\n<li>整洁的测试代码一样要求<strong>可读性</strong>。大多数测试代码可以总结为构造-操作-检验（Build-Operate-Check）模式。第一个环节构造测试数据，第二个环节操作数据，第三个环节验证是否得到期望的结果</li>\n<li>每个测试中的断言数量应该尽量少，且只测试一个概念</li>\n<li>FIRST原则<ul>\n<li>Fast，测试应该能够快速运行</li>\n<li>Independent，测试间应该相互独立</li>\n<li>Repeatable，测试应该在任何环境下可重复通过</li>\n<li>Self-Validating，测试应该有布尔值输出</li>\n<li>Timely，测试应及时编写</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h2><ul>\n<li>类应该由一组成员开始，从静态到普通，从共有到私有。且很少会有公有成员。</li>\n<li>类应该短小，<strong>类的名称应该能描述其权责</strong>。类名无法精确明明时，类大概就太长了。类名越含糊，类越有可能拥有过多权责。类名应该控制在25个字母内，且不应该包含连词。</li>\n<li>单一权责原则（Single Responsibility Principle，SRP）认为，类和模块应有且仅有<strong>一条加以修改的原因</strong>。这个原则可以帮助创造更好的抽象。它也是OO设计中最重要的概念之一。</li>\n<li>内聚：类应该只有少量实体变量，且所有方法都应该操作其中一些。当类的每个变量都被每个方法使用时，我们认为该类具有最大的内聚性。当发现类逐渐丧失内聚性时，尽早拆分它！让它变成多个短小的类。这个拆分的过程也是权责的拆分过程。</li>\n<li>通过基类和子类，可以在不修改类的同时，保持类对新功能的开放。在理想系统中，我们通过扩展系统而非修改现有代码来添加新特性。可以通过抽象类和接口隔离细节修改带来的影响。</li>\n<li>降低类之间的连接耦合，可以采用依赖倒置原则（Dependency Inversion Principle，DIP），让类依赖于抽象（接口）而不是具体细节（自行构造类）</li>\n</ul>\n<h2 id=\"系统\"><a href=\"#系统\" class=\"headerlink\" title=\"系统\"></a>系统</h2><p><em>这一章的Java概念较多</em></p>\n<ul>\n<li>分开系统的构造和使用</li>\n<li><strong>依赖注入</strong>是控制反转的一种思路，它将第二权责从对象中拿出来，转移到专门的对象中去，从而遵循<strong>单一权责原则</strong></li>\n<li>我们应该专注于今天的用户故事，并且<strong>持续适当切分</strong>我们的关注面。书中举了Java AOP、AspectJ框架的例子</li>\n<li>实现时，使用<em>大致可工作的最简单方案</em>。只要软件构架有效切分了关注面，就比较好做根本性改动</li>\n</ul>\n<h2 id=\"迭代\"><a href=\"#迭代\" class=\"headerlink\" title=\"迭代\"></a>迭代</h2><p>Kent Beck关于测试的4个原则：</p>\n<ul>\n<li>运行所有测试，全面测试并持续通过所有测试的系统，就是可测试的系统。测试也能减少重构时可能破坏代码的顾虑。</li>\n<li>不可重复，使用模板生成或继承等高级概念</li>\n<li>表达程序员的意图。代码应当清晰表达作者的意图。使用好名称、保持类和函数的短小，以及之前章节提到的各种方法</li>\n<li>尽可能减少类和方法的数目，避免前两条规范的矫枉过正</li>\n</ul>\n<h2 id=\"并发编程\"><a href=\"#并发编程\" class=\"headerlink\" title=\"并发编程\"></a>并发编程</h2><p>并发是一种解耦策略，帮助我们分解开<strong>做什么（目的）</strong>和<strong>何时（时机）</strong>。</p>\n<ul>\n<li>并发<strong>有时</strong>能改善性能，会在编写额外代码上带来额外开销</li>\n<li>正确的并发是复杂的</li>\n<li>并发会带来系统结构的变化</li>\n</ul>\n<p>有些防御并发代码问题的原则：</p>\n<ul>\n<li>单一权责：分离并发代码和其他代码</li>\n<li>限制对可能共享的数据的访问</li>\n<li>线程应尽可能独立</li>\n</ul>\n<p>并发执行模式：</p>\n<ul>\n<li>生产者-消费者模式：数据通过队列传递，队列本身是一种限定资源</li>\n<li>读者-作者模式</li>\n<li>宴席哲学家问题</li>\n</ul>\n<p>还有一些需要注意的事情：</p>\n<ul>\n<li>警惕同步方法间的依赖</li>\n<li>尽可能减小sychronized区域</li>\n<li>尽早考虑程序关闭问题</li>\n<li>测试线程代码</li>\n</ul>\n<h2 id=\"3个实例\"><a href=\"#3个实例\" class=\"headerlink\" title=\"3个实例\"></a>3个实例</h2><p>书中以三个实例的重构过程向我们表现了一些将之前思路应用于优化代码的方式。</p>\n<h3 id=\"命令行参数解析：args\"><a href=\"#命令行参数解析：args\" class=\"headerlink\" title=\"命令行参数解析：args\"></a>命令行参数解析：args</h3><blockquote>\n<p>编程是一种技术甚于科学的东西，要编写整洁代码，必须先写肮脏代码，然后再<strong>清理它</strong></p>\n</blockquote>\n<p>在你的初稿，当代码糟糕透顶时甚至是前几稿中，很可能还是会存在烂摊子：成员多得吓人，奇怪命名的魔法字符串，一大堆的try-catch-finally代码。程序员们不都是蠢人，这堆糟糕透顶的代码其实是从最初看起来很合理但是<strong>扩展性差</strong>的代码一步步演化来的。</p>\n<p>需要使用一些总结和抽象，来简明地表达你的目的。另外，在重构前，“我”（其实是作者）要不厌其烦地强调TDD的必要性，它能保证你重构的每一步，系统都可以工作。在重构过程中，放进拿出是常见的事，小步幅、保持测试通过，你可能会不断移动各种东西。</p>\n<p>优秀的代码设计，大都关乎<strong>分隔</strong>——创建合适的空间防止不同种类的代码。对关注面的分隔让代码更易于理解和维护（减少理解所需要的大脑缓存）</p>\n<h3 id=\"JUnit\"><a href=\"#JUnit\" class=\"headerlink\" title=\"JUnit\"></a>JUnit</h3><ul>\n<li>不必要的编码前缀（<code>f_</code>）</li>\n<li>未封装的条件判断</li>\n<li>建议使用肯定式代替否定式判断</li>\n<li>奇怪的不直观的函数名</li>\n<li>易造成理解困难的变量名</li>\n<li>拆分违反SRP原则的函数</li>\n<li>避免隐式时序耦合的函数，用hardcode的形式显示表现时序耦合</li>\n</ul>\n<h3 id=\"SerialDate重构\"><a href=\"#SerialDate重构\" class=\"headerlink\" title=\"SerialDate重构\"></a>SerialDate重构</h3><p>再强调一遍，<strong>重构前要有一个完整的验证可行性的测试</strong>。然后开始重构：</p>\n<ul>\n<li>没有描述力的类名和术语名</li>\n<li>使用枚举代替常量类</li>\n<li>抽象类中不应知道实现细节</li>\n<li>基类不宜知道子类的情况</li>\n<li>多余的注释</li>\n<li>变量声明应该放在尽量靠近使用的地方</li>\n<li>如果有专业术语，就不要自己命名了</li>\n<li>不要写无用的模板代码</li>\n<li>如果函数对成员进行操作，它就不应该是静态的</li>\n<li>用<strong>解释临时变量</strong>的方式，让大段的代码更为简化和有表达力</li>\n<li>消除魔术数</li>\n</ul>\n<h2 id=\"味道和启发\"><a href=\"#味道和启发\" class=\"headerlink\" title=\"味道和启发\"></a>味道和启发</h2><p>作者在这里对《重构：既有代码设计的改善》里提到的味道做了自己的一些扩充，也可以作为对上面章节的回顾。</p>\n<p><em>“味道”，即那些看起来不大对劲的代码</em></p>\n<h3 id=\"注释-1\"><a href=\"#注释-1\" class=\"headerlink\" title=\"注释\"></a>注释</h3><ul>\n<li>不恰当的信息，如修改记录</li>\n<li>过时的注释</li>\n<li>多余的废话</li>\n<li>错误的有误导性的注释</li>\n<li>注释掉的代码</li>\n</ul>\n<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><ul>\n<li>多步才能完成的构建</li>\n<li>多步才能完成的测试</li>\n</ul>\n<h3 id=\"函数-1\"><a href=\"#函数-1\" class=\"headerlink\" title=\"函数\"></a>函数</h3><ul>\n<li>过多的入参</li>\n<li>布尔类型参数</li>\n<li>从未被调用的函数</li>\n<li>用于返回的参数</li>\n</ul>\n<h3 id=\"一般性问题\"><a href=\"#一般性问题\" class=\"headerlink\" title=\"一般性问题\"></a>一般性问题</h3><ul>\n<li>源文件中有多种语言</li>\n<li>明显违背字面意义的直觉</li>\n<li>不考虑边界情况</li>\n<li>忽视安全问题</li>\n<li><strong>重复</strong>，这也是最常见的问题。每次看到重复代码都代表遗漏了抽象。有一些常见的设计模式可以帮助你。</li>\n<li>代码的抽象层级有问题，或混杂。抽象类用来容纳高层级概念，子类用来容纳低层级概念。不同层级概念放在不同容器中。</li>\n<li>基类依赖于子类。通常来说，基类对子类应该一无所知</li>\n<li>信息过多，违背SRP</li>\n<li>从未使用的代码</li>\n<li>不恰当的垂直分隔</li>\n<li>语素前后不一致</li>\n<li>基于巧合、预设假设的耦合。异或是两个没有直接目的之间的模块的耦合。</li>\n<li><strong>特性依恋</strong>，类的方法只应对自身的成员和方法感兴趣，不应关注其他类的成员和方法</li>\n<li>使用boolean或枚举参数让一个函数表现多态。使用多个函数通常由于向单个函数传递代码来选择函数行为</li>\n<li>晦涩的意图，如魔术数、魔术字符串、过度简写的表达式</li>\n<li>位置错误的权责</li>\n<li>不恰当的静态方法，如完全不需要多态的函数</li>\n<li>使用自解释的变量名</li>\n<li>使用自解释的函数名</li>\n<li>理解算法</li>\n<li>把逻辑依赖（脑海中的限制&#x2F;已知条件）改为物理依赖</li>\n<li>使用if&#x2F;else、switch前想想有没有多态的实现方法</li>\n<li>遵循团队lint规则</li>\n<li>足够准确</li>\n<li>未封装的条件判断</li>\n<li>未封装的边界条件检测</li>\n<li>避免否定性条件</li>\n<li><strong>函数应该只做一件事</strong></li>\n<li><strong>函数应该只在一个抽象层级上</strong></li>\n<li>隐蔽的时序性耦合</li>\n<li>别随意，先好好思考再下手</li>\n<li>应该在较高层级放置可配置数据</li>\n<li>避免传递浏览，即遵守德墨忒尔律</li>\n</ul>\n<h3 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h3><ul>\n<li>使用通配符避免过长的导入清单</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">package</span>.*</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>不要继承<em>常量</em>，使用静态导入</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> EmployeeConstants.*</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在可以的情况下，用枚举代替常量</li>\n</ul>\n<h3 id=\"名称\"><a href=\"#名称\" class=\"headerlink\" title=\"名称\"></a>名称</h3><ul>\n<li>使用描述性名称</li>\n<li>名称应该与抽象层级相符</li>\n<li>使用标准化语素</li>\n<li>使用无歧义的名称</li>\n<li>在较大作用范围使用较长名称，较小作用范围<em>可以</em>使用较短名称</li>\n<li>名称应该明确说明有副作用存在</li>\n</ul>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><ul>\n<li>要有足够的测试</li>\n<li>使用覆盖率工具</li>\n<li>别放过小测试</li>\n<li>被忽略的测试是对不确定事物的疑问</li>\n<li>测试边界条件</li>\n<li>测试失败的模式（pattern）会有启发性</li>\n<li>测试覆盖率的模式会有启发性</li>\n<li>测试应该快速</li>\n</ul>\n<h2 id=\"并发编程示例\"><a href=\"#并发编程示例\" class=\"headerlink\" title=\"并发编程示例\"></a>并发编程示例</h2><h3 id=\"客户端-x2F-服务端\"><a href=\"#客户端-x2F-服务端\" class=\"headerlink\" title=\"客户端&#x2F;服务端\"></a>客户端&#x2F;服务端</h3><ul>\n<li>如果吞吐量与I&#x2F;O有关，则并发编程可以提升运行效率</li>\n<li>保持并发系统整洁，把线程管理隔离到一个位置</li>\n</ul>\n<h3 id=\"可能的执行路径\"><a href=\"#可能的执行路径\" class=\"headerlink\" title=\"可能的执行路径\"></a>可能的执行路径</h3><p>深入到字节码和汇编语句的执行上，有些并非线程安全的操作中，不同的执行路径会带来不同结果。</p>\n<h3 id=\"了解类库\"><a href=\"#了解类库\" class=\"headerlink\" title=\"了解类库\"></a>了解类库</h3><ul>\n<li>Executor框架</li>\n<li>非锁定方案：AtomicBoolean，AtomicInteger和AtomicReference</li>\n<li>数据库连接、java.util中的容器、Servlet天生不是线程安全的</li>\n</ul>\n<h3 id=\"提升吞吐量\"><a href=\"#提升吞吐量\" class=\"headerlink\" title=\"提升吞吐量\"></a>提升吞吐量</h3><ul>\n<li>synchronized代码块最好能限制在小范围内</li>\n</ul>\n<h3 id=\"死锁\"><a href=\"#死锁\" class=\"headerlink\" title=\"死锁\"></a>死锁</h3><p>死锁需要满足4个条件：</p>\n<ul>\n<li><strong>互斥</strong>，即资源数量有限，或无法在同一时间为多个线程公用</li>\n<li><strong>上锁及等待</strong>，从线程获取资源到完成工作前，不会释放这个资源</li>\n<li><strong>无抢先机制</strong>，线程无法从其他线程处夺取资源</li>\n<li><strong>循环等待</strong></li>\n</ul>\n<p>相反地，有4种避免死锁的方式：</p>\n<ul>\n<li><strong>不互斥</strong>，使用允许同时使用的资源，或增加资源数目</li>\n<li><strong>不上锁及等待</strong>，如果有等待情况就释放所有资源从新来过</li>\n<li><strong>满足抢先机制</strong></li>\n<li><strong>不做循环等待</strong></li>\n</ul>\n<h3 id=\"测试多线程代码\"><a href=\"#测试多线程代码\" class=\"headerlink\" title=\"测试多线程代码\"></a>测试多线程代码</h3><ul>\n<li>复现问题可能很难，可以借助工具（如ConTest）帮助</li>\n</ul>\n<p><em>–END–</em></p>\n",
            "tags": [
                "编程",
                "重构",
                "代码",
                "代码风格"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2019/11/15/degit-improvement/",
            "url": "http://shenlvmeng.github.com/blog/2019/11/15/degit-improvement/",
            "title": "degit认识和改造",
            "date_published": "2019-11-15T13:51:58.000Z",
            "content_html": "<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>近日写了一个chrome插件的starter-boilerplate。但这类boilerplate被人们使用的方式常常是整合在cli库中。由于仓库本身的模板性质和git历史存在，并不合适使用npm分发或<code>git clone</code>快速搭建项目骨架。</p>\n<p>碰巧此前学习svelte的时候接触到了<a href=\"https://github.com/Rich-Harris/degit\">degit</a>，degit做的事很简单，<strong>复制git仓库代码</strong>。这也正是一个称职的boilerplate发挥光和热的方式。</p>\n<h2 id=\"degit使用\"><a href=\"#degit使用\" class=\"headerlink\" title=\"degit使用\"></a>degit使用</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">degit user/repo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># these commands are equivalent</span></span><br><span class=\"line\">degit github:user/repo</span><br><span class=\"line\">degit git@github.com:user/repo</span><br><span class=\"line\">degit https://github.com/user/repo</span><br><span class=\"line\"></span><br><span class=\"line\">degit user/repo my-new-project</span><br></pre></td></tr></table></figure>\n\n<p>上面是一个degit的基本用法，类似<code>git clone</code>指定仓库地址和本地目录名，默认将项目当前<code>master</code>分支的代码拷贝到本地。还可以在仓库后使用<code>#</code>分隔，指定分支名、tag名或commit hash。目前（2019&#x2F;11&#x2F;12）degit支持github、gitlab、BitBucket以及Sourcehut，暂不支持私有仓库。</p>\n<p>在一些情况下，我们可能希望在拷贝完代码后进行一些后置操作，如拷贝关联仓库或删除不必要文件等。对此，degit设计了<strong>actions</strong>来支持，可以在当前目录的<code>degit.json</code>中声明。目前actions只有<code>clone</code>和<code>remove</code>两种。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// degit.json</span></span><br><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;action&quot;</span>: <span class=\"string\">&quot;clone&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;src&quot;</span>: <span class=\"string\">&quot;user/another-repo&quot;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;action&quot;</span>: <span class=\"string\">&quot;remove&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;files&quot;</span>: [<span class=\"string\">&quot;LICENSE&quot;</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"degit优势\"><a href=\"#degit优势\" class=\"headerlink\" title=\"degit优势\"></a>degit优势</h2><p>如README中提到的，degit和<code>git clone --depth 1</code>还是有所区别的：</p>\n<ul>\n<li><code>git clone</code>后，终归还是会有个<code>.git</code>目录，需要手动重置</li>\n<li>degit在实现时增加了缓存策略，在有些情况下不需要重复下载代码，速度更快</li>\n<li>“更少的字数”（<code>degit user/repo</code>而不是<code>git clone --depth 1 git@github.com:user/repo</code>）</li>\n<li>灵活度更高，如前后置操作如actions的支持</li>\n<li>更好的可扩展性，未来可以在degit基础上实现交互等更复杂的设计</li>\n</ul>\n<h2 id=\"degit原理\"><a href=\"#degit原理\" class=\"headerlink\" title=\"degit原理\"></a>degit原理</h2><p>那么degit快在哪里？它的思路借鉴于<a href=\"https://github.com/vutran/zel\">zel</a>和<a href=\"https://github.com/lukeed/gittar\">gittar</a>，即方便快捷地从git仓库中下载需要的源代码。原理上，<strong>利用某些git平台url的特定规则，从平台下载tar.gz包，再本地解压</strong>。</p>\n<p>degit实现集中在<code>src/index.js</code>中。<code>src/bin.js</code>只用来实现cli部分的入口代码，<code>src/utils.js</code>则包含了一些工具函数。</p>\n<h3 id=\"入口\"><a href=\"#入口\" class=\"headerlink\" title=\"入口\"></a>入口</h3><p>在<code>src/bin.js</code>中，流程分下面几步：</p>\n<ol>\n<li>利用<a href=\"https://github.com/lukeed/mri\">mri</a>做了基本的参数处理</li>\n<li>实例化Degit对象，注册logger的监听方法</li>\n<li>调用<code>clone</code>方法</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> d = <span class=\"title function_\">degit</span>(src, args);</span><br><span class=\"line\"></span><br><span class=\"line\">    d.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;info&#x27;</span>, <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(chalk.<span class=\"title function_\">cyan</span>(<span class=\"string\">`&gt; <span class=\"subst\">$&#123;event.message.replace(<span class=\"string\">&#x27;options.&#x27;</span>, <span class=\"string\">&#x27;--&#x27;</span>)&#125;</span>`</span>));</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    d.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;warn&#x27;</span>, <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(</span><br><span class=\"line\">            chalk.<span class=\"title function_\">magenta</span>(<span class=\"string\">`! <span class=\"subst\">$&#123;event.message.replace(<span class=\"string\">&#x27;options.&#x27;</span>, <span class=\"string\">&#x27;--&#x27;</span>)&#125;</span>`</span>)</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    d.<span class=\"title function_\">clone</span>(dest)</span><br><span class=\"line\">        <span class=\"comment\">// .then(() =&gt; &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// &#125;)</span></span><br><span class=\"line\">        .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(chalk.<span class=\"title function_\">red</span>(<span class=\"string\">`! <span class=\"subst\">$&#123;err.message.replace(<span class=\"string\">&#x27;options.&#x27;</span>, <span class=\"string\">&#x27;--&#x27;</span>)&#125;</span>`</span>));</span><br><span class=\"line\">            process.<span class=\"title function_\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Degit初始化\"><a href=\"#Degit初始化\" class=\"headerlink\" title=\"Degit初始化\"></a>Degit初始化</h3><p>对象实例包含下面几个成员，其中repo信息需要处理后才能拿到。</p>\n<ul>\n<li><code>src</code>，string，用户输入的仓库地址</li>\n<li><code>cache</code>，boolean，是否使用缓存，来自命令行<code>-c</code>或<code>--cache</code>参数</li>\n<li><code>force</code>，boolean，目标文件夹有内容时，是否覆盖，来自<code>-f</code>或<code>--force</code>参数</li>\n<li><code>verbose</code>，boolean，是否打印详细日志，来自<code>-v</code>或<code>--verbose</code>参数</li>\n<li><code>repo</code>，处理<code>src</code>拿到仓库的详情，包括<ul>\n<li><code>site</code>，网页域名</li>\n<li><code>user</code>，用户&#x2F;组织名</li>\n<li><code>name</code>，仓库名</li>\n<li><code>ref</code>，分支、tag、commit hash</li>\n<li><code>url</code>，完整的HTTP url</li>\n</ul>\n</li>\n<li><code>directiveActions</code>，actions配置对应的处理函数，包含<ul>\n<li><code>clone</code>，递归处理src的仓库</li>\n<li><code>remove</code>，调用<code>remove</code>方法移除指定文件</li>\n</ul>\n</li>\n</ul>\n<p>repo信息来自src经过正则匹配出的详细信息。由于要利用一些git平台的url拼接规则，需要排除已知平台以外的url。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 支持的范围</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> supported = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([<span class=\"string\">&#x27;github&#x27;</span>, <span class=\"string\">&#x27;gitlab&#x27;</span>, <span class=\"string\">&#x27;bitbucket&#x27;</span>, <span class=\"string\">&#x27;git.sr.ht&#x27;</span>]);</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">parse</span>(<span class=\"params\">src</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> match = <span class=\"regexp\">/^(?:https:\\/\\/([^/]+)\\/|git@([^/]+)[:/]|([^/]+)[:/])?([^/\\s]+)\\/([^/\\s#]+)(?:#(.+))?/</span>.<span class=\"title function_\">exec</span>(</span><br><span class=\"line\">        src</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!match) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DegitError</span>(<span class=\"string\">`could not parse <span class=\"subst\">$&#123;src&#125;</span>`</span>, &#123;</span><br><span class=\"line\">            <span class=\"attr\">code</span>: <span class=\"string\">&#x27;BAD_SRC&#x27;</span>,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> site = (match[<span class=\"number\">1</span>] || match[<span class=\"number\">2</span>] || match[<span class=\"number\">3</span>] || <span class=\"string\">&#x27;github&#x27;</span>).<span class=\"title function_\">replace</span>(</span><br><span class=\"line\">        <span class=\"regexp\">/\\.(com|org)$/</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"comment\">// 排除范围外的url</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!supported.<span class=\"title function_\">has</span>(site)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DegitError</span>(</span><br><span class=\"line\">            <span class=\"string\">`degit supports GitHub, GitLab, Sourcehut and BitBucket`</span>,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">code</span>: <span class=\"string\">&#x27;UNSUPPORTED_HOST&#x27;</span>,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 匹配出用户名、仓库名、分支/tag/commit hash名</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> user = match[<span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> name = match[<span class=\"number\">5</span>].<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\.git$/</span>, <span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ref = match[<span class=\"number\">6</span>] || <span class=\"string\">&#x27;master&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 完整的仓库地址，需要http开头的</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> url = <span class=\"string\">`https://<span class=\"subst\">$&#123;site&#125;</span>.<span class=\"subst\">$&#123;</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">        site === <span class=\"string\">&#x27;bitbucket&#x27;</span> ? <span class=\"string\">&#x27;org&#x27;</span> : site === <span class=\"string\">&#x27;git.sr.ht&#x27;</span> ? <span class=\"string\">&#x27;&#x27;</span> : <span class=\"string\">&#x27;com&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">    &#125;</span>/<span class=\"subst\">$&#123;user&#125;</span>/<span class=\"subst\">$&#123;name&#125;</span>`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; site, user, name, ref, url &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"仓库下载\"><a href=\"#仓库下载\" class=\"headerlink\" title=\"仓库下载\"></a>仓库下载</h3><p>下载仓库流程如下：</p>\n<p><img src=\"https://s2.ax1x.com/2019/11/15/Mdbl6S.png\" alt=\"degit流程\"></p>\n<h4 id=\"获取缓存信息\"><a href=\"#获取缓存信息\" class=\"headerlink\" title=\"获取缓存信息\"></a>获取缓存信息</h4><p>degit的缓存放在<code>/home</code>或<code>/tmp</code>下的<code>.degit</code>目录下，按照<code>site/user/name</code>的目录组织。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 缓存目录</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> base = path.<span class=\"title function_\">join</span>(homeOrTmp, <span class=\"string\">&#x27;.degit&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> dir = path.<span class=\"title function_\">join</span>(base, repo.<span class=\"property\">site</span>, repo.<span class=\"property\">user</span>, repo.<span class=\"property\">name</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> cached = <span class=\"title function_\">tryRequire</span>(path.<span class=\"title function_\">join</span>(dir, <span class=\"string\">&#x27;map.json&#x27;</span>)) || &#123;&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>目录下有一个<code>map.json</code>和缓存的代码tar.gz包，包名格式为<code>&lt;commit-hash&gt;.tar.gz</code>。在map.json保存着此前使用过的分支名&#x2F;tag名&#x2F;简写commit名到commit hash的最新映射关系。形如下方：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;master&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;4e3a4089b4f0275964eb10a432dc1c15526a0b4d&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>这一步会尝试使用parse好的<code>site</code>、<code>user</code>、<code>name</code>属性找已有的缓存的<code>map.json</code>。没有找到时返回<code>&#123;&#125;</code>。</p>\n<h4 id=\"获取commit-hash\"><a href=\"#获取commit-hash\" class=\"headerlink\" title=\"获取commit hash\"></a>获取commit hash</h4><p>这一步分两种情况;</p>\n<ul>\n<li>使用缓存时，直接从上一步拿到的<code>map.json</code>里面找<code>ref</code>对应的commit hash</li>\n<li>不使用缓存时，需要从远端仓库拿分支名&#x2F;tag名到commit hash的对应关系（使用<code>git ls-remote</code>完成）。之后格式化为结构化数据并从中寻找<code>ref</code>对应的commit hash。如果中途失败，则fallback到使用缓存的方式。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fetchRefs</span>(<span class=\"params\">repo</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; stdout &#125; = <span class=\"keyword\">await</span> <span class=\"title function_\">exec</span>(<span class=\"string\">`git ls-remote <span class=\"subst\">$&#123;repo.url&#125;</span>`</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> stdout</span><br><span class=\"line\">            .<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">            .<span class=\"title function_\">filter</span>(<span class=\"title class_\">Boolean</span>)</span><br><span class=\"line\">            .<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">row</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">const</span> [hash, ref] = row.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;\\t&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 格式化过程</span></span><br><span class=\"line\">                <span class=\"comment\">// ...</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 错误处理</span></span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这一步若未找到hash，则无法构造下载的url，从而需要抛出错误。</p>\n<h4 id=\"构造下载地址\"><a href=\"#构造下载地址\" class=\"headerlink\" title=\"构造下载地址\"></a>构造下载地址</h4><p>根据不同的git平台固定的源码tar.gz归档url规则，构造下载的url，这也是degit思路的基础。目前支持gitlab、bucket、github风格的url。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 即将下载的tar.gz文件路径</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> file = <span class=\"string\">`<span class=\"subst\">$&#123;dir&#125;</span>/<span class=\"subst\">$&#123;hash&#125;</span>.tar.gz`</span>;</span><br><span class=\"line\"><span class=\"comment\">// 下载的url</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> url =</span><br><span class=\"line\">    repo.<span class=\"property\">site</span> === <span class=\"string\">&#x27;gitlab&#x27;</span></span><br><span class=\"line\">        ? <span class=\"string\">`<span class=\"subst\">$&#123;repo.url&#125;</span>/repository/archive.tar.gz?ref=<span class=\"subst\">$&#123;hash&#125;</span>`</span></span><br><span class=\"line\">        : repo.<span class=\"property\">site</span> === <span class=\"string\">&#x27;bitbucket&#x27;</span></span><br><span class=\"line\">        ? <span class=\"string\">`<span class=\"subst\">$&#123;repo.url&#125;</span>/get/<span class=\"subst\">$&#123;hash&#125;</span>.tar.gz`</span></span><br><span class=\"line\">        : <span class=\"string\">`<span class=\"subst\">$&#123;repo.url&#125;</span>/archive/<span class=\"subst\">$&#123;hash&#125;</span>.tar.gz`</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建目录并下载\"><a href=\"#创建目录并下载\" class=\"headerlink\" title=\"创建目录并下载\"></a>创建目录并下载</h4><p>不使用缓存时，会在创建缓存目录并下载。另外，指定<code>-f</code>或<code>--force</code>参数，会覆盖已有文件路径。最后使用https模块下载文件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">cache</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            fs.<span class=\"title function_\">statSync</span>(file);</span><br><span class=\"line\">            <span class=\"comment\">// ...</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">mkdirp</span>(path.<span class=\"title function_\">dirname</span>(file));</span><br><span class=\"line\">            <span class=\"comment\">// ...</span></span><br><span class=\"line\">            <span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(url, file);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 错误处理</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"更新缓存\"><a href=\"#更新缓存\" class=\"headerlink\" title=\"更新缓存\"></a>更新缓存</h4><p>下载成功会更新本地缓存，保证以后使用缓存时能使用尽量新的包。</p>\n<ol>\n<li>当前使用包的commit hash如果和指定分支&#x2F;tag&#x2F;commit hash对应的hash一致，则不需要更新</li>\n<li>在需要更新时，检查老的hash是否还有使用，如果没有使用，则清除hash对应的tar.gz包</li>\n<li>更新map.json里的对应关系</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateCache</span>(<span class=\"params\">dir, repo, hash, cached</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cached[repo.<span class=\"property\">ref</span>] === hash) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> oldHash = cached[repo.<span class=\"property\">ref</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldHash) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> used = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> cached) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cached[key] === hash) &#123;</span><br><span class=\"line\">                used = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!used) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// we no longer need this tar file</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                fs.<span class=\"title function_\">unlinkSync</span>(path.<span class=\"title function_\">join</span>(dir, <span class=\"string\">`<span class=\"subst\">$&#123;oldHash&#125;</span>.tar.gz`</span>));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// ignore</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cached[repo.<span class=\"property\">ref</span>] = hash;</span><br><span class=\"line\">    fs.<span class=\"title function_\">writeFileSync</span>(</span><br><span class=\"line\">        path.<span class=\"title function_\">join</span>(dir, <span class=\"string\">&#x27;map.json&#x27;</span>),</span><br><span class=\"line\">        <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(cached, <span class=\"literal\">null</span>, <span class=\"string\">&#x27;  &#x27;</span>)</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"解压tar-gz包\"><a href=\"#解压tar-gz包\" class=\"headerlink\" title=\"解压tar.gz包\"></a>解压tar.gz包</h4><p>创建cli中输入的目标目录，并将已下载到缓存中tar.gz包解压到目标路径下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">mkdirp</span>(dest);</span><br><span class=\"line\"><span class=\"keyword\">await</span> <span class=\"title function_\">untar</span>(file, dest);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"actions处理\"><a href=\"#actions处理\" class=\"headerlink\" title=\"actions处理\"></a><code>actions</code>处理</h4><p>如果在当前目录下获取到了<code>degit.json</code>，则执行后续的<code>clone</code>或<code>remove</code>操作。</p>\n<ul>\n<li>clone，在目标目录下继续一遍clone流程</li>\n<li>remove，删除指定文件或文件夹</li>\n</ul>\n<h2 id=\"degit改造\"><a href=\"#degit改造\" class=\"headerlink\" title=\"degit改造\"></a>degit改造</h2><p>degit虽好，但从上面也可以看到，支持仓库比较有限，且不支持私有仓库。在公司内部，无法从url推断git仓库类型时，degit就无法工作了。不过，借助degit本身的设计，稍微改造上面提到的“degit初始化”，“构造下载地址”部分，就可以让degit通过传参url风格的形式支持私有仓库。</p>\n<ul>\n<li>新增<code>-s</code>或<code>--style</code>命令行入参，表示git仓库url的风格，目前设计有github、gitlab、bitbucket这几个degit原始就支持的形式。</li>\n<li>解析仓库地址信息时，若有style入参，则先判断是否在上述允许范围内；保留原有从域名解析style的部分，新增若未解析出style，则从入参里取；最后再抛出不支持的仓库地址错误</li>\n<li>解析返回数据结构中，新增<code>style</code>字段表示url风格，原有的<code>site</code>为避免歧义，直接使用域名代替原有的域名前缀</li>\n<li>在构造下载地址时，直接根据style字段拼接url</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">parse</span>(<span class=\"params\">src, style</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (style &amp;&amp; !supportedGitStyle.<span class=\"title function_\">has</span>(style)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DegitError</span>(<span class=\"string\">`degit supports styles of github, gitlab, bitbucket`</span>, &#123;</span><br><span class=\"line\">            <span class=\"attr\">code</span>: <span class=\"string\">&#x27;UNSUPPORTED_STYLE&#x27;</span>,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> site = match[<span class=\"number\">1</span>] || match[<span class=\"number\">2</span>] || match[<span class=\"number\">3</span>] || <span class=\"string\">&#x27;github.com&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> gitStyle =</span><br><span class=\"line\">        style ||</span><br><span class=\"line\">        (match[<span class=\"number\">1</span>] || match[<span class=\"number\">2</span>] || match[<span class=\"number\">3</span>] || <span class=\"string\">&#x27;gitlab&#x27;</span>).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\.(com|org)$/</span>, <span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!supportedGitRepo.<span class=\"title function_\">has</span>(gitStyle)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DegitError</span>(</span><br><span class=\"line\">            <span class=\"string\">`degit supports GitHub, GitLab, Sourcehut and BitBucket without -s/--style parameters`</span>,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">code</span>: <span class=\"string\">&#x27;UNSUPPORTED_HOST&#x27;</span>,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> user = match[<span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> name = match[<span class=\"number\">5</span>].<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\.git$/</span>, <span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ref = match[<span class=\"number\">6</span>] || <span class=\"string\">&#x27;master&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> url = <span class=\"string\">`https://<span class=\"subst\">$&#123;site&#125;</span>/<span class=\"subst\">$&#123;user&#125;</span>/<span class=\"subst\">$&#123;name&#125;</span>`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; site, user, name, ref, url, <span class=\"attr\">style</span>: gitStyle &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 拼接url处</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> url =</span><br><span class=\"line\">    repo.<span class=\"property\">style</span> === <span class=\"string\">&#x27;gitlab&#x27;</span></span><br><span class=\"line\">        ? <span class=\"string\">`<span class=\"subst\">$&#123;repo.url&#125;</span>/repository/archive.tar.gz?ref=<span class=\"subst\">$&#123;hash&#125;</span>`</span></span><br><span class=\"line\">        : repo.<span class=\"property\">style</span> === <span class=\"string\">&#x27;bitbucket&#x27;</span></span><br><span class=\"line\">        ? <span class=\"string\">`<span class=\"subst\">$&#123;repo.url&#125;</span>/get/<span class=\"subst\">$&#123;hash&#125;</span>.tar.gz`</span></span><br><span class=\"line\">        : <span class=\"string\">`<span class=\"subst\">$&#123;repo.url&#125;</span>/archive/<span class=\"subst\">$&#123;hash&#125;</span>.tar.gz`</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"可能存在的问题\"><a href=\"#可能存在的问题\" class=\"headerlink\" title=\"可能存在的问题\"></a>可能存在的问题</h3><p>绝大多数私有仓库，都会对用户身份做校验，直接访问tar.gz链接会报401错误。这需要根据不同的内部平台自己做处理了。</p>\n<p>因为特殊原因，改造后的包和代码不提供。</p>\n<p><em>–END–</em></p>\n",
            "tags": [
                "脚手架",
                "degit",
                "git"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2019/09/01/roadmap-refactor-log/",
            "url": "http://shenlvmeng.github.com/blog/2019/09/01/roadmap-refactor-log/",
            "title": "roadmap工程化改造",
            "date_published": "2019-09-01T09:25:31.000Z",
            "content_html": "<blockquote>\n<p><a href=\"https://github.com/shenlvmeng/roadmap\">roadmap</a>最近使用typescript重构到了1.0.0版本，下面是一些记录</p>\n</blockquote>\n<p>1.0.0项目由两部分组成：<strong>Electron程序</strong>、<strong>web网页</strong>。两者不直接关联，通过配置文件<code>roadmap.config.json</code>解耦。</p>\n<p>另外，Electron程序和web网页属于两套开发流程，互不干扰，在使用配置文件作为接口的基础上，可以独立开发和升级。</p>\n<h2 id=\"Electron程序\"><a href=\"#Electron程序\" class=\"headerlink\" title=\"Electron程序\"></a>Electron程序</h2><p>提供给用户程序，通过输入地图配置、gpx文件、定位图片物料，产出<code>roadmap.config.json</code>。整体使用Electron + webpack + TypeScript的脚手架。</p>\n<p>Electron工作重点在gpx文件转换和图片压缩：</p>\n<ul>\n<li>gpx文件使用<code>parse-gpx</code>库解析，产出JSON字符串</li>\n<li>图片压缩，保留EXIF信息的图片压缩，产出压缩后的图片</li>\n</ul>\n<p>最后加上用户的输入，综合产出<code>roadmap.config.json</code>。</p>\n<h3 id=\"gpx解析\"><a href=\"#gpx解析\" class=\"headerlink\" title=\"gpx解析\"></a>gpx解析</h3><blockquote>\n<p>见src&#x2F;main&#x2F;gpx2json.ts</p>\n</blockquote>\n<p>使用<code>parse-gpx</code>库解析，将经纬度坐标换算到百度地图坐标，产出保留经纬度、海拔信息的结构体，储存为JSON文件，便于网页读取。</p>\n<h3 id=\"图片压缩\"><a href=\"#图片压缩\" class=\"headerlink\" title=\"图片压缩\"></a>图片压缩</h3><blockquote>\n<p>见src&#x2F;renderer&#x2F;image.ts</p>\n</blockquote>\n<p>带有EXIF信息的图片通常体积很大，不适合直接放在网页，会严重拖慢网页加载速度。而经过调研，常见的图片压缩工具都不会保留图片EXIF信息，即使保留也不会保留我们需要的经纬度、海拔信息。</p>\n<p>另外，满足要求的图片压缩工具（如Adobe PhotoShop）没法整合在整个流程中。因此需要自己实现。</p>\n<p>思路是：</p>\n<ul>\n<li>读取原始图片中的EXIF信息</li>\n<li>借助canvas压缩图片体积、同时调整图片尺寸</li>\n<li>再度组合EXIF信息和压缩后的图片，得到保留完整EXIF信息的压缩图片</li>\n</ul>\n<h3 id=\"网页模板\"><a href=\"#网页模板\" class=\"headerlink\" title=\"网页模板\"></a>网页模板</h3><p>使用<code>html-loader</code>加载已经产出好的<code>output.html</code>，读取为字符串，直接输出到指定目录即可。</p>\n<p>网页模板的开发流程见portal一节。</p>\n<h3 id=\"产物\"><a href=\"#产物\" class=\"headerlink\" title=\"产物\"></a>产物</h3><blockquote>\n<p>样例见src&#x2F;test&#x2F;portal</p>\n</blockquote>\n<p>产物生成在桌面的roadmap-output文件夹，<strong>新生成的文件夹会覆盖老的</strong>。内容如下：</p>\n<ul>\n<li><code>index.html</code> 目标网页</li>\n<li><code>roadmap.config.json</code> 配置信息</li>\n<li><code>data</code><ul>\n<li><code>xx.json</code> gpx内容</li>\n<li><code>images</code> 图片信息</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"roadmap-config-json\"><a href=\"#roadmap-config-json\" class=\"headerlink\" title=\"roadmap.config.json\"></a>roadmap.config.json</h2><p>用于解耦。包含了基础的配置信息</p>\n<ul>\n<li>city 默认定位的中心城市</li>\n<li>title 网页标题</li>\n<li>gpxCount gpx路径数</li>\n<li>imgTitles 图片标题，不需要和图片一一对应</li>\n</ul>\n<h2 id=\"web网页（portal）\"><a href=\"#web网页（portal）\" class=\"headerlink\" title=\"web网页（portal）\"></a>web网页（portal）</h2><p>web网页为了便于迭代，使用了和Electron程序独立的webpack工程。在<code>config</code>中有独立的webpack配置，有独立的webpack调试、打包命令。</p>\n<p>工程位于<code>src/portal</code>，使用TypeScript。产物位于<code>portal</code>目录下，由Electron程序引用。</p>\n<p>在portal工程的webpack配置中：</p>\n<ul>\n<li>使用<code>MiniCssExtractPlugin</code>抽出css为css资源文件，加载时的避免样式闪动</li>\n<li>使用<code>HtmlWebpackInlineSourcePlugin</code>将引用的css和js文件inline，使得Electron程序只需引用一个HTML文件即可</li>\n<li>需要配置html-loader的<code>attr</code>，避免web网页在加载时，里面的<code>&lt;img&gt;</code>标签的<code>src</code>属性被解析</li>\n</ul>\n<h3 id=\"gps轨迹\"><a href=\"#gps轨迹\" class=\"headerlink\" title=\"gps轨迹\"></a>gps轨迹</h3><p>使用百度地图API绘制polyline实现，Electron程序生成的JSON中，已经提前转成百度地图坐标地址。</p>\n<h3 id=\"图床\"><a href=\"#图床\" class=\"headerlink\" title=\"图床\"></a>图床</h3><p>图片存储于免费的<a href=\"https://imgchr.com/\">路过图床</a>，因为不支持自定义访问路径，因此需要将上传图床后的路径保存为图片的title，在网页加载时，通过压缩图的title找到图片在图床上的对应地址（这个地方的设计待优化，所以暂时未开放）。</p>\n<p>图片的位置使用EXIF.js读取压缩图片的EXIF信息拿到，转换坐标后绘制在地图上。</p>\n",
            "tags": [
                "Electron",
                "TypeScript",
                "路书",
                "gpx解析",
                "EXIF"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2019/07/30/productive-vs-code/",
            "url": "http://shenlvmeng.github.com/blog/2019/07/30/productive-vs-code/",
            "title": "Productive VS Code",
            "date_published": "2019-07-30T14:30:54.000Z",
            "content_html": "<blockquote>\n<p><a href=\"https://code.visualstudio.com/docs/getstarted/tips-and-tricks\">Visual Studio Code Tips and Tricks</a></p>\n</blockquote>\n<p>这里介绍一些能提高VS Code产率的方法。</p>\n<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><p><img src=\"https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/interactive_playground.png\"></p>\n<p>欢迎页右下角提供Interactive playground（在命令面板里的<strong>Help &gt; Interactive Playground</strong>）。里面提供了VS Code一些关键特性的快速介绍。比如：</p>\n<ul>\n<li>多光标编辑</li>\n<li>行操作<ul>\n<li>整行向上、下移动<code>Option + up/down</code></li>\n<li>整行向上、下复制<code>Shift + Option + up/down</code></li>\n<li>删除整行<code>Shift + Cmd + K</code></li>\n<li>注释整行<code>Cmd + /</code></li>\n</ul>\n</li>\n<li>重构<ul>\n<li>重命名：光标处<code>F2</code>，修改后自动同步相关位置</li>\n<li>选中语句 -&gt; <code>Cmd + .</code> -&gt; 选择重构方式</li>\n</ul>\n</li>\n<li>格式化文档：<code>Cmd K + Cmd F</code>或者<code>Shift + Option + F</code></li>\n<li>折叠<ul>\n<li>折叠<code>Option + Cmd + [</code>，展开<code>Option + Cmd + ]</code></li>\n<li>折叠所有<code>Cmd K + Cmd 0</code>，展开所有<code>Cmd K + Cmd J</code></li>\n</ul>\n</li>\n<li>代码片段：见代码片段一节</li>\n<li>Emmet：见Emmet一节</li>\n</ul>\n<h2 id=\"常见操作\"><a href=\"#常见操作\" class=\"headerlink\" title=\"常见操作\"></a>常见操作</h2><h3 id=\"指令面板\"><a href=\"#指令面板\" class=\"headerlink\" title=\"指令面板\"></a>指令面板</h3><p>快捷键<code>Shift + Cmd + P</code>。里面的常见命令都有快捷键提示。</p>\n<p><img src=\"https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/KeyboardReferenceSheet.png\"></p>\n<h3 id=\"快速打开文件\"><a href=\"#快速打开文件\" class=\"headerlink\" title=\"快速打开文件\"></a>快速打开文件</h3><p>快捷键<code>Cmd + P</code>。点击打开文件，点击右方向键打开不会关闭当前面板。</p>\n<h3 id=\"状态栏\"><a href=\"#状态栏\" class=\"headerlink\" title=\"状态栏\"></a>状态栏</h3><p><code>Shift + Cmd + M</code></p>\n<h3 id=\"修改语言\"><a href=\"#修改语言\" class=\"headerlink\" title=\"修改语言\"></a>修改语言</h3><p><code>Cmd K + M</code></p>\n<h2 id=\"命令行工具\"><a href=\"#命令行工具\" class=\"headerlink\" title=\"命令行工具\"></a>命令行工具</h2><p>打开指令面板，安装<code>code</code>命令。</p>\n<p><img src=\"https://code.visualstudio.com/assets/docs/setup/mac/shell-Cmd.png\"></p>\n<p>常见命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># open code with current directory</span></span><br><span class=\"line\">code .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># open the current directory in the most recently used code window</span></span><br><span class=\"line\">code -r .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># change the language</span></span><br><span class=\"line\">code --locale=es</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># open diff editor</span></span><br><span class=\"line\">code --diff &lt;file1&gt; &lt;file2&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自定义编辑器\"><a href=\"#自定义编辑器\" class=\"headerlink\" title=\"自定义编辑器\"></a>自定义编辑器</h2><p><code>Cmd + ,</code>，打开编辑器编辑配置。也可以</p>\n<h2 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h2><p><code>Cmd + Shift + X</code>，利用插件增强你的开发体验和生产率。</p>\n<h2 id=\"文件及目录\"><a href=\"#文件及目录\" class=\"headerlink\" title=\"文件及目录\"></a>文件及目录</h2><ul>\n<li>内置terminal，<code>Ctrl + </code> &#96;或View -&gt; Terminal或命令面板里输入View: Toggle integrated terminal。<a href=\"https://code.visualstudio.com/docs/editor/integrated-terminal\">深度阅读</a></li>\n<li>自动保存，<code>setting.json</code>中设置<code>&quot;files.autoSave&quot;: &quot;afterDelay&quot;</code></li>\n<li>toggle侧边栏，<code>Cmd + B</code></li>\n<li>专注模式，<code>Cmd K + Z</code></li>\n<li>分栏，<code>Cmd + \\</code>，使用<code>Cmd + 1</code>, <code>Cmd + 2</code>等切换</li>\n<li>关闭当前tab，<code>Cmd + W</code></li>\n<li>浏览历史<ul>\n<li>全部历史，<code>Ctrl + Tab</code>按住选择</li>\n<li>回退，<code>Ctrl + -</code></li>\n<li>前进，<code>Ctrl + Shift + -</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"高效编辑\"><a href=\"#高效编辑\" class=\"headerlink\" title=\"高效编辑\"></a>高效编辑</h2><h3 id=\"多光标\"><a href=\"#多光标\" class=\"headerlink\" title=\"多光标\"></a>多光标</h3><ul>\n<li><code>Cmd + Click</code>可以多光标操作</li>\n<li><code>Cmd + Shift + L</code>可以在所有选中单词的末尾多光标操作</li>\n<li><code>Cmd + D</code>选中当前单词<br><img src=\"https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/add_cursor_current_selection.gif\"></li>\n</ul>\n<h3 id=\"盒式选中\"><a href=\"#盒式选中\" class=\"headerlink\" title=\"盒式选中\"></a>盒式选中</h3><p><code>Shift + Alt + 拖拽</code></p>\n<p><img src=\"https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/column-select.gif\"></p>\n<h3 id=\"选中当前行\"><a href=\"#选中当前行\" class=\"headerlink\" title=\"选中当前行\"></a>选中当前行</h3><p><code>Cmd + L</code></p>\n<h3 id=\"快速滚动\"><a href=\"#快速滚动\" class=\"headerlink\" title=\"快速滚动\"></a>快速滚动</h3><p><code>Alt + 滚动</code>可以达到x5速度的滚动</p>\n<h3 id=\"行操作\"><a href=\"#行操作\" class=\"headerlink\" title=\"行操作\"></a>行操作</h3><p>行向上&#x2F;下复制&#x2F;剪切，见[基础]一节里的介绍</p>\n<h3 id=\"层级选中\"><a href=\"#层级选中\" class=\"headerlink\" title=\"层级选中\"></a>层级选中</h3><p><code>Ctrl + Shift + Cmd + left/right</code>可以扩大&#x2F;缩小当前选择范围</p>\n<p><img src=\"https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/shrink_expand_selection.gif\"></p>\n<h3 id=\"Goto-Symbol\"><a href=\"#Goto-Symbol\" class=\"headerlink\" title=\"Goto Symbol\"></a>Goto Symbol</h3><ul>\n<li><code>Shift + Cmd + O</code>当前文件下选择符号名，输入<code>@:</code>可以进行分类</li>\n<li><code>Shift + Cmd + T</code>当前工作区下选择符号名</li>\n</ul>\n<h3 id=\"Goto特定行\"><a href=\"#Goto特定行\" class=\"headerlink\" title=\"Goto特定行\"></a>Goto特定行</h3><p><code>Ctrl + G</code></p>\n<h3 id=\"trim行尾空格\"><a href=\"#trim行尾空格\" class=\"headerlink\" title=\"trim行尾空格\"></a>trim行尾空格</h3><p><code>Cmd K + Cmd X</code></p>\n<p><img src=\"https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/trim_whitespace.gif\"></p>\n<h3 id=\"Markdown预览\"><a href=\"#Markdown预览\" class=\"headerlink\" title=\"Markdown预览\"></a>Markdown预览</h3><ul>\n<li><code>Cmd + Shift + V</code></li>\n<li>实时预览<code>Cmd K + V</code></li>\n</ul>\n<h2 id=\"代码联想\"><a href=\"#代码联想\" class=\"headerlink\" title=\"代码联想\"></a>代码联想</h2><ul>\n<li>查看定义，<code>F12</code>或<code>Option + Click</code><ul>\n<li>查看定义（不切换上下文）<code>Option + F12</code></li>\n</ul>\n</li>\n<li>查看引用（不切换上下文），<code>Shift + F12</code>，查看整个项目引用<code>Shift + Option + F12</code></li>\n<li>重命名，<code>F2</code></li>\n<li>搜索替换，<code>Cmd + F</code>，<code>Cmd + Shift + F</code></li>\n</ul>\n<h3 id=\"Emmet\"><a href=\"#Emmet\" class=\"headerlink\" title=\"Emmet\"></a>Emmet</h3><p>VS Code支持<a href=\"https://docs.emmet.io/\">Emmet</a>风格书写HTML代码。完整的Emmet语法参考<a href=\"https://docs.emmet.io/cheat-sheet/\">这里</a>。</p>\n<h2 id=\"Code-Snippet\"><a href=\"#Code-Snippet\" class=\"headerlink\" title=\"Code Snippet\"></a>Code Snippet</h2><p><img src=\"https://code.visualstudio.com/assets/docs/editor/userdefinedsnippets/ajax-snippet.gif\"></p>\n<p>Code Snippet即能让你更容易复用的代码模板，如for循环，if语句等。在代码联想时，可以自动帮你补全，开启<code>&quot;editor.tabCompletion&quot;: &quot;on&quot;</code>配置时，也可以使用Tab键补全。</p>\n<p>在VS Code Marketplace中有许多snippets拓展。搜索”xxx snippet”多半你能找到已有的snippet拓展。</p>\n<p>书写自己的snippet可以参考<a href=\"https://code.visualstudio.com/docs/editor/userdefinedsnippets#_create-your-own-snippets\">官方文档</a>。</p>\n<h2 id=\"Git集成\"><a href=\"#Git集成\" class=\"headerlink\" title=\"Git集成\"></a>Git集成</h2><p><code>Shift + Ctrl + G</code>打开。</p>\n<ul>\n<li>支持Side by side和Inline view两种diff模式。</li>\n<li>左下角快捷切换分支<br><img src=\"https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/switch_branches.gif\"></li>\n<li>手动添加文件、解决冲突</li>\n</ul>\n<p>更多参考<a href=\"https://code.visualstudio.com/docs/getstarted/tips-and-tricks#_git-integration\">Git integration</a>一节。</p>\n<h2 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h2><p>在命令面板中输入”Debug”查看相关命令。更多查看<a href=\"https://code.visualstudio.com/docs/getstarted/tips-and-tricks#_debugging\">Debugging</a>一节</p>\n<h2 id=\"脚本任务\"><a href=\"#脚本任务\" class=\"headerlink\" title=\"脚本任务\"></a>脚本任务</h2><p>参考<a href=\"https://code.visualstudio.com/docs/getstarted/tips-and-tricks#_task-runner\">Task Runner</a>。</p>\n",
            "tags": [
                "VSCode",
                "编辑器",
                "IDE"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2019/02/12/some-tips-6/",
            "url": "http://shenlvmeng.github.com/blog/2019/02/12/some-tips-6/",
            "title": "工作中的遇到的一些小知识 6",
            "date_published": "2019-02-12T14:29:56.000Z",
            "content_html": "<h2 id=\"React-Hooks和React-Hot-Loader默认配置相冲突\"><a href=\"#React-Hooks和React-Hot-Loader默认配置相冲突\" class=\"headerlink\" title=\"React Hooks和React Hot Loader默认配置相冲突\"></a>React Hooks和React Hot Loader默认配置相冲突</h2><p>设置RHL的<code>pureSFC</code>配置为true，详见<a href=\"https://github.com/gaearon/react-hot-loader/issues/1088#issuecomment-434862175\">讨论</a>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setConfig(&#123; pureSFC: true &#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"一个简单的rollup配置样例\"><a href=\"#一个简单的rollup配置样例\" class=\"headerlink\" title=\"一个简单的rollup配置样例\"></a>一个简单的rollup配置样例</h2><p>最近有一个开发前端录音库（严格来说是改进）的需求，目标是发布到npm管理平台上，在打包库上<a href=\"https://rollupjs.org/guide/en\">rollup</a>的发挥要优于webpack。刚好想用用试试，就用了rollup作为打包工具。因为场景比webpack更简单，配置上也比webpack好配很多，基本看看<a href=\"https://rollupjs.org/guide/zh#tutorial\">官方文档</a>就可以上手了。</p>\n<p>不过，文档里用的babel版本还是6.x，使用新版本babel后，配置文件<code>rollup.config.js</code>和<code>.babelrc</code>有些改动，这里列在下面。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// rollup.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> resolve <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rollup-plugin-node-resolve&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> commonjs <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rollup-plugin-commonjs&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> babel <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rollup-plugin-babel&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; terser &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;rollup-plugin-terser&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">input</span>: <span class=\"string\">&#x27;src/index.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">file</span>: <span class=\"string\">&#x27;index.js&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">format</span>: <span class=\"string\">&#x27;es&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(),</span><br><span class=\"line\">        <span class=\"title function_\">commonjs</span>(),</span><br><span class=\"line\">        <span class=\"title function_\">babel</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">exclude</span>: <span class=\"string\">&#x27;node_modules/**&#x27;</span></span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        <span class=\"title function_\">terser</span>()</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// .babelrc</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">presets</span>: [</span><br><span class=\"line\">        [</span><br><span class=\"line\">            <span class=\"string\">&#x27;@babel/env&#x27;</span>,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">loose</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                <span class=\"attr\">modules</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">        [<span class=\"string\">&#x27;@babel/proposal-object-rest-spread&#x27;</span>, &#123; <span class=\"attr\">loose</span>: <span class=\"literal\">true</span> &#125;]</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"mouseout和mouseleave事件的区别\"><a href=\"#mouseout和mouseleave事件的区别\" class=\"headerlink\" title=\"mouseout和mouseleave事件的区别\"></a><code>mouseout</code>和<code>mouseleave</code>事件的区别</h2><blockquote>\n<p>mouseout: <a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/mouseout\">https://developer.mozilla.org/en-US/docs/Web/Events/mouseout</a><br>mouseleave: <a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/mouseleave\">https://developer.mozilla.org/en-US/docs/Web/Events/mouseleave</a></p>\n</blockquote>\n<ul>\n<li><code>mouseout</code>在鼠标离开该元素表面时触发，<strong>包括进入到该元素的子元素中</strong></li>\n<li><code>mouseleave</code>在鼠标离开该元素区域时触发，<strong>即离开该元素和所有子元素区域</strong></li>\n</ul>\n<h2 id=\"sublime-goto-definition-快捷键\"><a href=\"#sublime-goto-definition-快捷键\" class=\"headerlink\" title=\"sublime goto definition 快捷键\"></a>sublime goto definition 快捷键</h2><blockquote>\n<p>参考<a href=\"https://stackoverflow.com/questions/16235706/sublime-3-set-key-map-for-function-goto-definition\">这里</a></p>\n</blockquote>\n<h2 id=\"只lint-changed-file的脚本方案\"><a href=\"#只lint-changed-file的脚本方案\" class=\"headerlink\" title=\"只lint changed file的脚本方案\"></a>只lint changed file的脚本方案</h2><p>利用<code>git diff-index</code>。下面以tslint为例。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">files=$(git diff-index --relative --name-only --cached HEAD | grep -e <span class=\"string\">&#x27;\\\\.ts$&#x27;</span> -e <span class=\"string\">&#x27;\\\\.tsx$&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> -n \\&quot;<span class=\"variable\">$files</span>\\&quot;;</span><br><span class=\"line\">    <span class=\"keyword\">then</span> <span class=\"built_in\">echo</span> <span class=\"variable\">$files</span> | xargs tslint --fix -t codeFrame;</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"升级版\"><a href=\"#升级版\" class=\"headerlink\" title=\"升级版\"></a>升级版</h3><p>使用<a href=\"https://www.npmjs.com/package/lint-staged\">lint-staged</a>，只lint staged的文件内容，代替上面冗长的脚本。</p>\n<h2 id=\"吸顶样式效果\"><a href=\"#吸顶样式效果\" class=\"headerlink\" title=\"吸顶样式效果\"></a>吸顶样式效果</h2><h3 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h3><blockquote>\n<p>参考：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/position\">MDN</a></p>\n</blockquote>\n<p>最简洁的实现方式，缺点是<a href=\"https://caniuse.com/#search=sticky\">支持度</a>较差，只在iOS平台支持度较好。除非做中后台，否则需要谨慎使用。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.stick</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: sticky;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"JS\"><a href=\"#JS\" class=\"headerlink\" title=\"JS\"></a>JS</h3><p>不用赘述，检查滚动元素的<code>scrollTop</code>属性做判断即可，在指定位置上，设置<code>position:fixed</code>配合<code>z-index</code>等实现吸顶。</p>\n<p>另外有意思的一点是，在<code>position:fixed</code>的情况下，<strong>如果没有设置<code>left</code>，<code>left</code>将相对当前元素相对定位</strong>。</p>\n<h2 id=\"一个更友好的图片加载组件\"><a href=\"#一个更友好的图片加载组件\" class=\"headerlink\" title=\"一个更友好的图片加载组件\"></a>一个更友好的图片加载组件</h2><h3 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h3><p>提供类似知乎App内的体验：</p>\n<ul>\n<li>在图片加载时有<strong>相同大小</strong>的占位图和文案提示</li>\n<li>图片加载失败后有<strong>相同大小</strong>的占位图和文案提示，点击文案可以重新加载图片</li>\n</ul>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>重点在需要图片大小相同的占位图，这通常意味着：</p>\n<ul>\n<li>图片的大小需要伴随图片下发</li>\n<li>客户端的图片宽度或高度固定（通常是宽度）</li>\n</ul>\n<p>点击重新加载可以通过在图片url后拼接每次不一样的参数实现，例如时间戳。</p>\n<p>遮罩可以用图片背景色 + <code>:after</code>伪元素或另外的元素实现。剩下的把loading、loaded、failed状态处理好，工作并不困难。</p>\n<p>下面是粗略实现的一个demo。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@desc</span> smart image provide more friendly image loading experience inspired by zhihu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> shenlvmeng&lt;xin_yuanming@163.com&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;./index.less&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">interface <span class=\"title class_\">IProps</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">width</span>: number;</span><br><span class=\"line\">    <span class=\"attr\">height</span>: number;</span><br><span class=\"line\">    <span class=\"attr\">src</span>: string;</span><br><span class=\"line\">    onLoad?: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">void</span>;</span><br><span class=\"line\">    onError?: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface <span class=\"title class_\">IState</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">src</span>: string;</span><br><span class=\"line\">    <span class=\"attr\">loaded</span>: boolean;</span><br><span class=\"line\">    <span class=\"attr\">failed</span>: boolean;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SmartImage</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Component</span>&lt;<span class=\"title class_\">IProps</span>, <span class=\"title class_\">IState</span>&gt; &#123;</span><br><span class=\"line\">    public readonly <span class=\"attr\">state</span>: <span class=\"title class_\">IState</span> = &#123;</span><br><span class=\"line\">        <span class=\"attr\">src</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">props</span>.<span class=\"property\">src</span>,</span><br><span class=\"line\">        <span class=\"attr\">loaded</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"attr\">failed</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    public <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; width, height &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">props</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; src, loaded, failed &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;smart-image-container&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;<span class=\"name\">img</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                    <span class=\"attr\">className</span>=<span class=\"string\">&quot;smart-image&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                    <span class=\"attr\">width</span>=<span class=\"string\">&#123;750&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                    <span class=\"attr\">height</span>=<span class=\"string\">&#123;750</span> * <span class=\"attr\">height</span> / <span class=\"attr\">width</span>&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                    <span class=\"attr\">src</span>=<span class=\"string\">&#123;src&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                    <span class=\"attr\">onLoad</span>=<span class=\"string\">&#123;this.handleSuccess&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                    <span class=\"attr\">onError</span>=<span class=\"string\">&#123;this.handleError&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                &#123;!loaded</span></span><br><span class=\"line\"><span class=\"language-xml\">                    ? (</span></span><br><span class=\"line\"><span class=\"language-xml\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;smart-image-hint&quot;</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.handleRetry&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                            &#123;failed</span></span><br><span class=\"line\"><span class=\"language-xml\">                                ? <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>图片加载失败，点此重试<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                                : <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>图片加载中...<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                            &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                    )</span></span><br><span class=\"line\"><span class=\"language-xml\">                    : null</span></span><br><span class=\"line\"><span class=\"language-xml\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private handleSuccess = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">failed</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            <span class=\"attr\">loaded</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">props</span>.<span class=\"property\">onLoad</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">props</span>.<span class=\"title function_\">onLoad</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private handleError = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123; <span class=\"attr\">failed</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">props</span>.<span class=\"property\">onError</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">props</span>.<span class=\"title function_\">onError</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private handleRetry = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">props</span>.<span class=\"property\">src</span>.<span class=\"title function_\">startsWith</span>(<span class=\"string\">&#x27;http&#x27;</span>) || !<span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">failed</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">failed</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            <span class=\"attr\">src</span>: <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.props.src&#125;</span>?ts=<span class=\"subst\">$&#123;<span class=\"built_in\">Date</span>.now()&#125;</span>`</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">SmartImage</span>;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "React Hooks",
                "Rollup",
                "mouseout",
                "mouseleave",
                "lint-staged",
                "吸顶",
                "图片组件"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2018/11/21/some-tips-5/",
            "url": "http://shenlvmeng.github.com/blog/2018/11/21/some-tips-5/",
            "title": "工作中的遇到的一些小知识 5",
            "date_published": "2018-11-21T15:06:54.000Z",
            "content_html": "<h2 id=\"smooth-scroll\"><a href=\"#smooth-scroll\" class=\"headerlink\" title=\"smooth scroll\"></a>smooth scroll</h2><p>使用<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/scroll\">window.scroll API </a>，从MDN的文档来看，各浏览器的支持情况还不错。</p>\n<p>或者自己通过<code>setTimeout</code>加上ease function实现难度也不大。</p>\n<h2 id=\"React在老版本浏览器或Webview下的支持问题\"><a href=\"#React在老版本浏览器或Webview下的支持问题\" class=\"headerlink\" title=\"React在老版本浏览器或Webview下的支持问题\"></a>React在老版本浏览器或Webview下的支持问题</h2><blockquote>\n<p>[JavaScript Environment Requirements</p>\n</blockquote>\n<ul>\n<li>React](<a href=\"https://reactjs.org/docs/javascript-environment-requirements.html\">https://reactjs.org/docs/javascript-environment-requirements.html</a>)</li>\n</ul>\n<p>React 16依赖于ES6中的Map和Set特性。如果需要React运行在老版本的不支持ES6的浏览器或Webview下，需要<a href=\"https://babeljs.io/docs/en/babel-polyfill\">babel-polyfill</a>或<a href=\"https://github.com/zloirock/core-js\">core-js</a>的支持。</p>\n<p>类似于下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;core-js/es6/map&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;core-js/es6/set&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;babel-polyfill&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">ReactDOM</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react-dom&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">render</span>(</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, world!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>,</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;root&#x27;</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>需要格外注意的是，不论是import core-js还是import babel-polyfill，<strong>都一定要写在第一次<code>import React from &#39;react&#39;</code>的前面</strong>。否则是起不到polyfill React中ES6特性的效果的。</p>\n<h2 id=\"一些老版本Android的坑\"><a href=\"#一些老版本Android的坑\" class=\"headerlink\" title=\"一些老版本Android的坑\"></a>一些老版本Android的坑</h2><ul>\n<li>在伪元素如<code>:before</code>和<code>:after</code>使用动画会导致crash，<a href=\"https://caniuse.com/#search=%3Abefore\">caniuse</a>的known issues上只是说在safari v6版本和以下会有不支持的情况。</li>\n<li>不支持不带前缀的<code>transform</code>…</li>\n<li>不支持在<code>&lt;line&gt;</code>上的<code>stroke-width</code>属性上使用rem</li>\n<li>不支持Element.matches方法</li>\n</ul>\n<h2 id=\"ffmpeg\"><a href=\"#ffmpeg\" class=\"headerlink\" title=\"ffmpeg\"></a>ffmpeg</h2><blockquote>\n<p>wiki: <a href=\"https://en.wikipedia.org/wiki/FFmpeg\">https://en.wikipedia.org/wiki/FFmpeg</a><br>官网: <a href=\"https://www.ffmpeg.org/\">https://www.ffmpeg.org/</a></p>\n</blockquote>\n<p>主要包含三个命令行指令：</p>\n<ul>\n<li>ffmpeg，多媒体转码</li>\n<li>ffplay，基于SDL和ffmpeg的极简播放器</li>\n<li>ffprobe，多媒体分析</li>\n</ul>\n<p>ffmpeg部分支持参数：</p>\n<ul>\n<li><code>-i</code>指定输入文件</li>\n<li><code>-t</code>处理时间</li>\n<li><code>-ss</code>起始时间</li>\n<li><code>-b:a</code>或<code>-b:v</code>指定音频、视频的输出码率。</li>\n<li><code>-r</code>fps 帧率</li>\n<li><code>-s 1920x1080</code>设置帧大小</li>\n<li><code>-c:a</code>或<code>-c:v</code>设置音频、视频编码器</li>\n<li><code>-ac</code>声道数</li>\n<li><code>-ar</code>音频采样率</li>\n</ul>\n<p><a href=\"https://www.ffmpeg.org/ffmpeg.html#Options\">更多</a></p>\n<h2 id=\"React-Router使用History路由时，不识别带‘-’的路径\"><a href=\"#React-Router使用History路由时，不识别带‘-’的路径\" class=\"headerlink\" title=\"React Router使用History路由时，不识别带‘.’的路径\"></a>React Router使用History路由时，不识别带‘.’的路径</h2><p>webpack-dev-server的配置里，增加<code>disableDotRule</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">historyApiFallback: &#123;</span><br><span class=\"line\">    disableDotRule: true</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>注，这样做会使xxx.html的形式也重定向到默认的index.html，在多入口的项目下会有问题。</p>\n<h2 id=\"React-Hooks和React-Hot-Loader默认配置相冲突\"><a href=\"#React-Hooks和React-Hot-Loader默认配置相冲突\" class=\"headerlink\" title=\"React Hooks和React Hot Loader默认配置相冲突\"></a>React Hooks和React Hot Loader默认配置相冲突</h2><p>设置RHL的<code>pureSFC</code>配置为true，详见<a href=\"https://github.com/gaearon/react-hot-loader/issues/1088#issuecomment-434862175\">讨论</a>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setConfig(&#123; pureSFC: true &#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"一个简单的rollup配置样例\"><a href=\"#一个简单的rollup配置样例\" class=\"headerlink\" title=\"一个简单的rollup配置样例\"></a>一个简单的rollup配置样例</h2><p>最近有一个开发前端录音库（严格来说是改进）的需求，目标是发布到npm管理平台上，在打包库上<a href=\"https://rollupjs.org/guide/en\">rollup</a>的发挥要优于webpack。刚好想用用试试，就用了rollup作为打包工具。因为场景比webpack更简单，配置上也比webpack好配很多，基本看看<a href=\"https://rollupjs.org/guide/zh#tutorial\">官方文档</a>就可以上手了。</p>\n<p>不过，文档里用的babel版本还是6.x，使用新版本babel后，配置文件<code>rollup.config.js</code>和<code>.babelrc</code>有些改动，这里列在下面。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// rollup.config.js</span><br><span class=\"line\">import resolve from &#x27;rollup-plugin-node-resolve&#x27;;</span><br><span class=\"line\">import commonjs from &#x27;rollup-plugin-commonjs&#x27;;</span><br><span class=\"line\">import babel from &#x27;rollup-plugin-babel&#x27;;</span><br><span class=\"line\">import &#123; terser &#125; from &quot;rollup-plugin-terser&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    input: &#x27;src/index.js&#x27;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        file: &#x27;index.js&#x27;,</span><br><span class=\"line\">        format: &#x27;es&#x27;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        resolve(),</span><br><span class=\"line\">        commonjs(),</span><br><span class=\"line\">        babel(&#123;</span><br><span class=\"line\">            exclude: &#x27;node_modules/**&#x27;</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        terser()</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// .babelrc</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    presets: [</span><br><span class=\"line\">        [</span><br><span class=\"line\">            &#x27;@babel/env&#x27;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                loose: true,</span><br><span class=\"line\">                modules: false</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        [&#x27;@babel/proposal-object-rest-spread&#x27;, &#123; loose: true &#125;]</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>–END–</em></p>\n",
            "tags": [
                "polyfill",
                "Android",
                "ffmpeg",
                "React Hooks",
                "rollup"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2018/10/01/some-tips-4/",
            "url": "http://shenlvmeng.github.com/blog/2018/10/01/some-tips-4/",
            "title": "工作中的遇到的一些小知识 4",
            "date_published": "2018-10-01T11:18:38.000Z",
            "content_html": "<h2 id=\"lottie-production环境下bug修复总结\"><a href=\"#lottie-production环境下bug修复总结\" class=\"headerlink\" title=\"lottie production环境下bug修复总结\"></a>lottie production环境下bug修复总结</h2><p>现象：<br>前段时间，用lottie-web做动画的时候，发现在有个别动画在本地测试时可以正常播放，打包上线后会报库代码内的错误</p>\n<p>猜测原因：<br>打包过程中的uglify有损压缩了lottie-web的代码，导致部分特性的bug</p>\n<p>修复方式：</p>\n<ol>\n<li>在webpack配置中，为lottie-web专门指定一个chunk</li>\n<li>在optimization中，指定一个lottie的cacheGroup，保证一个专门的chunk</li>\n<li>minimizer中uglifyJSConfig指定exclude为lottie的chunk名，避免被uglify</li>\n<li>resolve中，指定lottie-web resolve到’..&#x2F;node_modules&#x2F;lottie-web&#x2F;build&#x2F;player&#x2F;lottie.min.js’，使用压缩过的版本</li>\n</ol>\n<p>大致像下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">        <span class=\"attr\">lottie</span>: [<span class=\"string\">&#x27;lottie-web&#x27;</span>],</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">alias</span>: &#123;</span><br><span class=\"line\">            <span class=\"comment\">// ...</span></span><br><span class=\"line\">            <span class=\"string\">&#x27;lottie-web&#x27;</span>: path.<span class=\"title function_\">join</span>(__dirname, <span class=\"string\">&#x27;../node_modules/lottie-web/build/player/lottie.min.js&#x27;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">splitChunks</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">cacheGroups</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">lottie</span>: &#123;</span><br><span class=\"line\">                    <span class=\"attr\">chunks</span>: <span class=\"string\">&#x27;initial&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;lottie&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">test</span>: <span class=\"string\">&#x27;lottie&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">enforce</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">minimizer</span>: [</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">UglifyJsPlugin</span>(&#123;</span><br><span class=\"line\">                <span class=\"attr\">exclude</span>: <span class=\"regexp\">/lottie/</span>,</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>结果：<br>问题解决。</p>\n<h2 id=\"Android机型下rem适配不准的问题\"><a href=\"#Android机型下rem适配不准的问题\" class=\"headerlink\" title=\"Android机型下rem适配不准的问题\"></a>Android机型下rem适配不准的问题</h2><blockquote>\n<p>参考 <a href=\"https://www.jianshu.com/p/14f6ce51a75f\">https://www.jianshu.com/p/14f6ce51a75f</a></p>\n</blockquote>\n<p>通过比较<code>document.documentElement.style.fontSize</code>和<code>window.getComputedStyle(document.documentElement)[&#39;font-size&#39;]</code>，假设前者是a，后者是b，<code>a * a / b</code>计算得到和设计一致的尺寸。</p>\n<h2 id=\"3D旋转效果\"><a href=\"#3D旋转效果\" class=\"headerlink\" title=\"3D旋转效果\"></a>3D旋转效果</h2><p>利用CSS中的<code>backface-visibility: hidden;</code>属性，实现在<code>transform: rotateY(180deg)</code>时，页面翻转到不可见区域。</p>\n<h2 id=\"egret学习\"><a href=\"#egret学习\" class=\"headerlink\" title=\"egret学习\"></a>egret学习</h2><p>场景：H5小游戏开发</p>\n<p>投放场景：各种小游戏平台，也可以打包为Android、iOS、Windows Phone应用发布，甚至直接web访问H5页面</p>\n<p>开发语言：TypeScript</p>\n<p>开发方式：</p>\n<ul>\n<li>类Java的代码组织方式，MVC分离项目代码，M和C开发体验类似“用JavaScript写Java项目”。在View部分开发体验类似于用<code>canvas API写页面结构</code></li>\n<li>类Android的resource管理方式（定义json文件描述资源组和路径对应），在代码中用API动态分组或逐个load资源</li>\n<li>单一入口，流程上在stage加载完成后，load资源（同时给出loading页面），之后执行游戏逻辑</li>\n<li>使用dispatchEvent实现组件间的信息交流</li>\n</ul>\n<h3 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h3><p>入口文件为index.html。在其中引入manifest.json。读入所需的库文件后，根据DOM容器的<code>data-*</code>属性确定项目配置，以及项目入口<code>*.ts</code>（一般是<code>Main.ts</code>）。之后打包编译到<code>bin-debug</code>。</p>\n<p>业务逻辑放在<code>/src</code>下，资源文件放在<code>/resources</code>中，资源文件用类似于Android的形式进行存取管理。</p>\n<h3 id=\"视图\"><a href=\"#视图\" class=\"headerlink\" title=\"视图\"></a>视图</h3><p>Displayable元素可以添加到容器中显示。包含下面基类。</p>\n<ul>\n<li>displayableContainer 视图元素容器<ul>\n<li>stage</li>\n<li>scrollView</li>\n<li>sprite</li>\n</ul>\n</li>\n<li>bitmap</li>\n<li>bitmapText</li>\n<li>textField</li>\n<li>movieClip</li>\n<li>shape</li>\n</ul>\n<p>movieClip表示逐帧动画。生成方法如下：</p>\n<ol>\n<li><code>RES.getRes</code>获取资源</li>\n<li>使用factory方法构造movieClipData</li>\n<li>使用movieClipData构造movieClip</li>\n</ol>\n<p>简单动画用tween来实现。</p>\n<h3 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h3><ul>\n<li><code>egret publish</code>或run build。发布H5，runtime版本</li>\n<li>对应平台support工具，如Android、iOS、微信小程序</li>\n</ul>\n<p>不过在最新的egret launcher下，项目本身已经提供的发布到原生的快捷入口，参考<a href=\"http://developer.egret.com/cn/github/egret-docs/Native/native/projectsetting/index.html\">官方解释</a>。</p>\n<h3 id=\"难点\"><a href=\"#难点\" class=\"headerlink\" title=\"难点\"></a>难点</h3><p><strong>和React如何结合开发？</strong></p>\n<p>View层通过canvas、WebGL实现，不适合和React结合。</p>\n<p><strong>部署方式如何结合在App里</strong></p>\n<p>小游戏可以发布到HTML5平台，之后类似老的webview页面开发方式，部署到离线包平台或在线页面即可。</p>\n<h2 id=\"SSO实现方案\"><a href=\"#SSO实现方案\" class=\"headerlink\" title=\"SSO实现方案\"></a>SSO实现方案</h2><p>SSO - Single Sign On 单一站点登录。由一个站点的登录状态实现关联网站免登录。</p>\n<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>由sso.xxx.com记录用户登录态，其他需要使用同一登录态的网站需要同步该域名下的登录态cookie到自己的独立域名下。</p>\n<h3 id=\"实际场景\"><a href=\"#实际场景\" class=\"headerlink\" title=\"实际场景\"></a>实际场景</h3><p>一般公司内部的网站或ToC的集团网页间都有SSO控制，任意访问一个清除了所有cookie网页，观察network中开头的302报文即可发现实现SSO过程中的各跳转逻辑。</p>\n<p>实际步骤因实现而异：</p>\n<ol>\n<li>（转让控制权）访问目标网页，302到SSO的跳转特定页面，如jump.sso.xxx.com</li>\n<li>（写入cookie）302回目标网页的特定页面，如sso.mysite.com。该域名CNAME到sso.xxx.com的服务器</li>\n<li>（写入cookie）sso.mysite.com写入cookie到自己的同域名下，再次302到目标网页，完成SSO过程</li>\n</ol>\n<p>或者</p>\n<ol>\n<li>同上</li>\n<li>（写入cookie）jump.sso.xxx.com做cookie的检查确认，通过url的方式写入回调的user session，再302回mysite.com。</li>\n<li>（写入cookie）mysite.com的后台对应路由根据URL里的回调写入cookie，302到目标页面</li>\n</ol>\n<p>在写入cookie到新域名过程中，可以有不同的实现方式。</p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>第一步302到sso.xxx.com的时候已经可以带上xxx.com的cookie了，但是由于浏览器安全限制，并不能直接set cookie到独立域名下。需要再次302回原始域名，CNAME到sso的服务器，实现set cookie到独立域名。</p>\n<p>为了保证安全性，CNAME到sso的sso.mysite.com所传递的参数需要有安全机制保证。如时间戳、秘钥等保证请求的完整性。避免中间人伪造域名下的请求。同时，链接本身也应有<strong>时效性</strong>，在超过时间范围失效，避免拦截链接，实现钓鱼网站获取sso.xxx.com的登录态。</p>\n<p>具体步骤：</p>\n<ol>\n<li>302到jump.sso.xxx.com后，进行权限检查判断域名是否允许同步，匹配SSO的cookie域名下的cookie取交集，得到需要同步的cookie。</li>\n<li>通过以上两步后，302到sso.mysite.com，url中带上cookie和安全相关的参数</li>\n<li>根据安全参数校验、target是否允许同步，决定返回403还是302。</li>\n<li>通过校验后，同步登录态cookie，302到目标网页</li>\n</ol>\n<p>清除登录态时，如何做到相关域名的同时清除，还需要额外设计。</p>\n<p>当然，如果sso只在内网使用，在jump.sso.xxx.com做完安全验证后，通过url将结果交由sso.mysite.com设置登录态Cookie，要更为简洁。</p>\n<h2 id=\"git-branch-rename\"><a href=\"#git-branch-rename\" class=\"headerlink\" title=\"git branch rename\"></a>git branch rename</h2><p>如果分支在远端也有的话，工作需要分为本地和远端两部分。</p>\n<ol>\n<li>重命名本地分支</li>\n</ol>\n<ul>\n<li>如果就在该分支  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -m new-name</span><br></pre></td></tr></table></figure></li>\n<li>如果在其他分支  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -m old-name new-name</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"2\">\n<li>删除原分支，推送新分支<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin :old-name new-name</span><br></pre></td></tr></table></figure></li>\n<li>重置upstream设置<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin -u new-name</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"webpack无痛mock方案\"><a href=\"#webpack无痛mock方案\" class=\"headerlink\" title=\"webpack无痛mock方案\"></a>webpack无痛mock方案</h2><p>使用webpack-api-mocker实现，对比axios-mock-adapter和其余方案有几个优势：</p>\n<ul>\n<li>mock部分代码和业务代码分离开，让网络请求部分代码（&#x2F;apis）有清晰的逻辑，不混杂业务无关内容</li>\n<li>热更新，保存即生效</li>\n<li>本地dev环境无痛切换到production环境，无需修改任何代码</li>\n<li>基于webpack-dev-server，和整个项目耦合，无需本地起服务<br>本地开发时，配置webpack.dev.config.js，在devServer部分的配置中加入apiMocker即可。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> apiMocker = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;webpack-api-mocker&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">        <span class=\"title function_\">before</span>(<span class=\"params\">app</span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">apiMocker</span>(app, path.<span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;./mock/index.js&#x27;</span>))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> 对应的路径下，写入mock数据和路径即可，可以灵活组织各模块的mock数据：</span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;GET /user/info&#x27;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;code&quot;</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;message&quot;</span>: <span class=\"string\">&quot;success&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;data&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"comment\">// your mock data</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&#x27;POST /user/update&#x27;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;code&quot;</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;message&quot;</span>: <span class=\"string\">&quot;success&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;data&quot;</span>: <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = proxy;</span><br></pre></td></tr></table></figure>\n\n<p>更多使用，参考webpack-api-mocker文档。</p>\n<h2 id=\"webpack配置使用es6语法\"><a href=\"#webpack配置使用es6语法\" class=\"headerlink\" title=\"webpack配置使用es6语法\"></a>webpack配置使用es6语法</h2><p>如今现代的前端开发早已采用全es6的语法书写，然而webpack的配置文件需要通过node解析执行，一般还使用es5的语法书写。在需要使用<code>import</code>，<code>export</code>，数组、对象解构等最新特性时就很蛋疼。</p>\n<p>比如在最近的开发中，使用<code>webpack-api-mocker</code>时，希望拆分不同领域的接口到不同文件，最后通过对象结构的方式聚合在mocker的入口文件中。使用es5的语法就很麻烦。</p>\n<p>实际上，让webpack使用babel解析配置文件分两步即可：</p>\n<ol>\n<li><code>yarn add -D babel-register</code>，让webpack能够使用babel-loader转译配置文件</li>\n<li>修改配置文件后缀为，<code>webpack.config.babel.js</code>，webpack会使用<code>.js</code>前的字符串作为loader</li>\n</ol>\n<p>之后就可以愉快地使用es6语法写配置文件了。</p>\n<h2 id=\"autoprefixer-remove-webkit-box-orient解决方案\"><a href=\"#autoprefixer-remove-webkit-box-orient解决方案\" class=\"headerlink\" title=\"autoprefixer remove -webkit-box-orient解决方案\"></a>autoprefixer remove <code>-webkit-box-orient</code>解决方案</h2><p>autoprefixer是postcss的插件，会根据browser list，删除一些autodated的样式，其中就包括<code>-webkit-box-orient</code>这个用于hack实现多行省略号的CSS样式。</p>\n<p>几种方法：</p>\n<ul>\n<li>设置autoprefixer，<code>&#123;remove: false&#125;</code>，保留autodated的样式规则</li>\n<li>添加flexbox 2009老旧浏览器到broswer list中</li>\n<li>如下，通过注释临时disable autoprefixer</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* autoprefixer: ignore next */</span></span><br><span class=\"line\">-webkit-box-orient: vertical;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "rem",
                "lottie",
                "backface-visibility",
                "egret",
                "mock",
                "SSO",
                "autoprefixer"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2018/08/16/git-workflow/",
            "url": "http://shenlvmeng.github.com/blog/2018/08/16/git-workflow/",
            "title": "git工作流最佳实践",
            "date_published": "2018-08-16T15:28:34.000Z",
            "content_html": "<blockquote>\n<p>参考：<a href=\"https://github.com/xirong/my-git/blob/master/git-workflow-tutorial.md\">my-git&#x2F;git-workflow-tutorial.md at master · xirong&#x2F;my-git</a></p>\n</blockquote>\n<p>git工作流有多种使用方法，在实际工作中的不良工作习惯，会造成很让人头大的麻烦。下面距离一些常用的工作流。</p>\n<h3 id=\"集中式\"><a href=\"#集中式\" class=\"headerlink\" title=\"集中式\"></a>集中式</h3><p>类似SVN，集中式工作流以中央仓库作为项目所有修改的单点实体，只用到master这一个分支。<strong>开发者提交功能修改到中央库前，采用<code>rebase</code>的方式“在其基础上添加自己的修改”，得到完美的线性历史；遇到冲突时，通过<code>git status</code>和<code>git add</code>合并冲突</strong>。最后<code>git rebase --continue</code>即可。遇到困难无法进行下去时，<code>git rebase --abort</code>就可以撤回到rebase前的状态。</p>\n<p>在这种工作流下，使用<code>rebase</code>参数比不使用的<code>git pull</code>好处在于，rebase后的提交记录会少一次累赘的“合并提交”。</p>\n<h3 id=\"功能分支\"><a href=\"#功能分支\" class=\"headerlink\" title=\"功能分支\"></a>功能分支</h3><p>git相较SVN强大在分布式的特征。功能分支工作流主要针对新增功能集成到正式项目。功能分支工作流仍然以中央仓库为基础，但不是直接提交本地历史到各自的本地master分支，而是在开发新功能时<strong>创建新的分支，描述新功能</strong>。不同的功能分支相互隔离，同时也保证master分支的代码一定没有问题。一旦功能分支push到master，意味着功能与其他开发者共享。</p>\n<p>合并到master分支的过程通过创建pull request进行，在pull request请求中，让其他开发者有机会先去review变更。Pull request被接受后，剩下的工作就和集中式很像了，拉取master分支代码，合并，提交。</p>\n<p>工作流程上：</p>\n<ol>\n<li>先checkout功能分支</li>\n<li>做本地开发提交，以及<code>push -u</code>推送到远端分支（<code>-u</code>是跟踪远端对应分支的意思）</li>\n<li>完成开发后，提交pull request，请求合并远端功能分支到master，团队其他成员可以进行评论</li>\n<li>在接受前，团队<strong>所有成员</strong>有需要，可以提交自己的修改到该功能分支，也会显示在pull request里</li>\n<li>在pull-request被接受后，在本地master上可以用pull或者<code>pull -r</code>的方式合并功能分支，前者更像功能和原来代码的合并，后者更偏向线型的提交历史</li>\n</ol>\n<h3 id=\"gitflow\"><a href=\"#gitflow\" class=\"headerlink\" title=\"gitflow\"></a>gitflow</h3><p>Gitflow工作流通过为功能开发、发布准备和维护分配独立的分支，让发布迭代过程更流畅。相较功能分支更复杂，但也更健壮。仍然用中央仓库作为所有开发者的交互中心。相对于使用仅有的一个master分支，Gitflow工作流使用两个分支来记录项目的历史。master分支存储了正式发布的历史，而<strong>develop分支作为功能的集成分支。</strong>从而可以在master的<strong>所有提交附上版本号</strong>。</p>\n<p>每个新功能位于一个自己的分支，有着和功能分支一样的开发工作流，唯一不同的是，功能分支不是从master分支上拉出新分支，而是使用develop分支作为父分支。每次合并都位于develop分支。</p>\n<p>一旦develop分支上有了做一次发布（或者说快到了既定的发布日）的足够功能，就<strong>从develop分支上checkout一个发布分支release</strong>。从这个时间点开始之后新的功能不能再加到这个分支上——这个分支只应该做Bug修复、文档生成和其它面向发布任务。在release工作完成后，合并release分支到master，并加上tag。同时，<strong>release上做的修改要合并会develop分支</strong>。最后删除release分支。</p>\n<p>维护分支或说是热修复（hotfix）分支用于给产品发布版本（production releases）快速生成补丁，这是唯一可以直接从master分支fork出来的分支。修改完成后，修改应该立马合并回master和develop。master也应该为合并生成新的tag。</p>\n<h3 id=\"forking\"><a href=\"#forking\" class=\"headerlink\" title=\"forking\"></a>forking</h3><p>Forking工作流是分布式工作流，可以安全可靠地管理大团队的开发者（developer）和不信任贡献者（contributor）的提交。这种工作流不是使用单个服务端仓库作为『中央』代码基线，而让各个开发者都有一个服务端仓库。这意味着各个代码贡献者有2个Git仓库而不是1个：一个本地私有的，另一个服务端公开的。Forking工作流的一个主要优势是，贡献的代码可以被集成，而不需要所有人都能push代码到仅有的中央仓库中。开发者push到自己的服务端仓库，而只有项目维护者才能push到正式仓库。</p>\n<p>新开发者想要在项目上工作时，不是直接从正式仓库克隆，而是fork正式项目在服务器上创建一个拷贝。这个仓库拷贝作为他个人公开仓库 —— 其它开发者不允许push到这个仓库，<strong>但可以pull下来修改</strong>。要提交本地修改时，push提交到自己公开仓库中 —— 而不是正式仓库中。 然后，给正式仓库发起一个pull request，让项目维护者知道有更新已经准备好可以集成了。为了集成功能到正式代码库，<strong>维护者pull贡献者的变更到自己的本地仓库中</strong>，检查变更以确保不会让项目出错， 合并变更到自己本地的master分支， 然后push master分支到服务器的正式仓库中。到此，贡献的提交成为了项目的一部分，其它的开发者应该执行pull操作与正式仓库同步自己本地仓库。</p>\n<p>具体来说，大致有下面几步：</p>\n<ol>\n<li>开发者fork正式仓库</li>\n<li>开发者clone自己的fork出来的仓库，与之前工作流不一样的是，<strong>Forking工作流需要2个远程别名 —— 一个指向正式仓库，另一个指向开发者自己的服务端仓库。</strong>，像下面这样  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add upstream https://bitbucket.org/maintainer/repo</span><br></pre></td></tr></table></figure></li>\n<li>开发者修改都是私有的，如果项目往前走了，可以用git pull获得新的提交</li>\n<li>开发者准备分享新功能时，需要先push到自己的公开仓库中，然后发起pull request通知项目维护者，集成开发者的功能分支</li>\n<li>项目维护者通过GUI岔开pull request或者pull代码到自己的本地仓库，再手动合并。</li>\n<li>开发者通过<code>pull upstream master</code>的方式拉取项目最新进展</li>\n</ol>\n<h3 id=\"pull-request\"><a href=\"#pull-request\" class=\"headerlink\" title=\"pull request\"></a>pull request</h3><p>pull request用于合并不同分支或不同仓库的代码，并在合并前进行一些讨论和代码微调，在上面不同工作流的情况下具体功能体现也不同。</p>\n<p>上面几种工作流范式只是几种标准的建议，正式的项目版本管理中，可以糅合上面的一些特点。</p>\n",
            "tags": [
                "git",
                "工作流",
                "pull request"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2018/08/16/some-tips-3/",
            "url": "http://shenlvmeng.github.com/blog/2018/08/16/some-tips-3/",
            "title": "工作中的遇到的一些小知识 3",
            "date_published": "2018-08-16T15:11:29.000Z",
            "content_html": "<h2 id=\"git-case-sensitive\"><a href=\"#git-case-sensitive\" class=\"headerlink\" title=\"git case sensitive\"></a>git case sensitive</h2><p>git本身是大小写敏感的。但在大小写不敏感的系统里，需要用hack方法记录仅修改文件名大小写的改动。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">mv</span> file.txt temp.txt</span><br><span class=\"line\">git <span class=\"built_in\">mv</span> temp.txt File.txt</span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;Renamed file.txt to File.txt&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"webpack的一些经验\"><a href=\"#webpack的一些经验\" class=\"headerlink\" title=\"webpack的一些经验\"></a>webpack的一些经验</h2><p><strong>DefinePlugin</strong></p>\n<p>允许创建一个在编译时可以配置的全局常量。在构建区分环境的包时很有用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> webpack.<span class=\"title class_\">DefinePlugin</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">PRODUCTION</span>: <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(<span class=\"literal\">true</span>),</span><br><span class=\"line\">  <span class=\"attr\">VERSION</span>: <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(<span class=\"string\">&quot;5fa3b9&quot;</span>),</span><br><span class=\"line\">  <span class=\"attr\">BROWSER_SUPPORTS_HTML5</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">TWO</span>: <span class=\"string\">&quot;1+1&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;typeof window&quot;</span>: <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(<span class=\"string\">&quot;object&quot;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>注意：这个插件直接执行文本替换。因此：</p>\n<ul>\n<li>如果这个值是一个字符串，它会被当作一个代码片段来使用。</li>\n<li>如果这个值不是字符串，它会被转化为字符串(包括函数)。</li>\n<li>如果这个值是一个对象，它所有的 key 会被同样的方式定义。</li>\n<li>如果在一个 key 前面加了 typeof,它会被定义为 typeof 调用</li>\n</ul>\n<p><strong>resolve alias</strong></p>\n<p>创建import或require的别名，来确保模块引入变得更简单。例如，一些位于 src&#x2F; 文件夹下的常用模块：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">alias</span>: &#123;</span><br><span class=\"line\">    @: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;src/&#x27;</span>),</span><br><span class=\"line\">    <span class=\"title class_\">Utilities</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;src/utilities/&#x27;</span>),</span><br><span class=\"line\">    <span class=\"title class_\">Templates</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;src/templates/&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"z-index可能的坑\"><a href=\"#z-index可能的坑\" class=\"headerlink\" title=\"z-index可能的坑\"></a>z-index可能的坑</h2><p><strong>使用前提：z-index只能在position属性值为relative或absolute或fixed的元素上有效。</strong></p>\n<p>z-index值只决定同一父元素中的同级子元素的堆叠顺序。父元素的z-index值（如果有）为子元素定义了堆叠顺序（css版堆叠“拼爹”）。向上追溯找不到含有z-index值的父元素的情况下，则可以视为自由的z-index元素，它可以与父元素的同级兄弟定位元素或其他自由的定位元素来比较z-index的值，决定其堆叠顺序。同级元素的z-index值如果相同，则堆叠顺序由元素在文档中的先后位置决定，后出现的会在上面。</p>\n<h2 id=\"git-submodule\"><a href=\"#git-submodule\" class=\"headerlink\" title=\"git submodule\"></a>git submodule</h2><blockquote>\n<p>参考：<a href=\"https://yihui.name/cn/2017/03/git-submodule/\">GIT 子模块</a></p>\n</blockquote>\n<p>最新一个项目里要复用已有的一个git库的代码，具体来说就是要将之前在WebView的内容复刻到PC版完成（这个需求貌似应该还挺常见的）。为了保证代码复用性，选择了<code>git submodule</code>的方法。这也是我此前从没用过的一个命令。</p>\n<p>简单来说，是一个 GIT 仓库下面某个文件夹的来源可以跟本库的来源不同，这个文件夹连接着别的库，由别的库负责按本控制和管理。是不是和npm包管理的形式比较像。子模块可以手动添加，也可以在克隆一个主库的时候就直接实体化。具体来说，有四种情况：</p>\n<ul>\n<li>克隆库的时候要初始化子模块 &#x3D;&gt; 加上<code>--recursive</code>参数 <code>git clone --recursive git@github.com:shenlvmeng/trace-maker.git</code></li>\n<li>初始化已有库的子模块 &#x3D;&gt; <code>git submodule update --init --recursive</code></li>\n<li>从子模块的源更新该子模块 &#x3D;&gt; <code>git submodule update --recursive --remote</code></li>\n<li>添加一个新的子模块 &#x3D;&gt; <code>git submodule add &lt;git address&gt; &lt;folder address&gt;</code></li>\n</ul>\n<p>已有有git submodule的库内，<code>.gitmodules</code>是下面的样子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[submodule &quot;wheel&quot;]</span><br><span class=\"line\">    path = wheel</span><br><span class=\"line\">    url = git@github.com:shenlvmeng/wheel.git</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"npm-install\"><a href=\"#npm-install\" class=\"headerlink\" title=\"npm install\"></a>npm install</h2><p>npm install后跟的绝不仅仅只是包名，还可以通过ssh、http的形式引入npm包，唯一的要求是有<code>package.json</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install (with no args, <span class=\"keyword\">in</span> package <span class=\"built_in\">dir</span>)</span><br><span class=\"line\">npm install [&lt;@scope&gt;/]&lt;name&gt;</span><br><span class=\"line\">npm install [&lt;@scope&gt;/]&lt;name&gt;@&lt;tag&gt;</span><br><span class=\"line\">npm install [&lt;@scope&gt;/]&lt;name&gt;@&lt;version&gt;</span><br><span class=\"line\">npm install [&lt;@scope&gt;/]&lt;name&gt;@&lt;version range&gt;</span><br><span class=\"line\">npm install &lt;git-host&gt;:&lt;git-user&gt;/&lt;repo-name&gt;</span><br><span class=\"line\">npm install &lt;git repo url&gt;</span><br><span class=\"line\">npm install &lt;tarball file&gt;</span><br><span class=\"line\">npm install &lt;tarball url&gt;</span><br><span class=\"line\">npm install &lt;folder&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">alias</span>: npm i</span><br></pre></td></tr></table></figure>\n\n<p>一个<strong>package</strong>可以是下面的形式：</p>\n<ol>\n<li>包含<code>package.json</code>的工程文件夹</li>\n<li>gzip过的“1”的压缩包</li>\n<li>指向“2”的url</li>\n<li>发布在npm-registry的<code>&lt;name&gt;@&lt;registry&gt;</code>字符串</li>\n<li>发布在npm-registry的<code>&lt;name&gt;@&lt;tag&gt;</code>字符串</li>\n<li>发布在npm-registry的<code>&lt;name&gt;</code>字符串(最新版本)</li>\n<li>一个指向“1”的合法git地址</li>\n</ol>\n<h2 id=\"cleave-js\"><a href=\"#cleave-js\" class=\"headerlink\" title=\"cleave.js\"></a>cleave.js</h2><p>一个自动格式化输入框的工具，有npm包、script标签等几种引用形式，还有react的使用方式。</p>\n<p>地址：<a href=\"https://nosir.github.io/cleave.js/\">Format your &lt;input&#x2F;&gt; content when you are typing</a></p>\n<h2 id=\"object-fit-amp-object-position\"><a href=\"#object-fit-amp-object-position\" class=\"headerlink\" title=\"object-fit &amp; object-position\"></a>object-fit &amp; object-position</h2><p>这两个CSS属性分别用于指定替换元素在其盒模型内的覆盖大小和对齐方式。使用效果很类似<code>background-size</code>和<code>background-position</code>。替换元素即内容不受CSS视觉格式化控制的元素，如image、iframe、video、textarea等。</p>\n<p>这使得本来自己决定模型大小的元素可以受CSS控制决定位置排布和大小。在需要自适应元素大小的场景下很好用，比如用户头像展示等。</p>\n<p>唯一的小小缺憾可能是IE11还不支持这两个属性，以及Edge只支持对<code>&lt;img&gt;</code>使用。</p>\n<h2 id=\"移动端触摸默认行为优化\"><a href=\"#移动端触摸默认行为优化\" class=\"headerlink\" title=\"移动端触摸默认行为优化\"></a>移动端触摸默认行为优化</h2><ul>\n<li><code>user-select: none</code> 禁止用户选择</li>\n<li><code>-webkit-touch-callout: none</code> 防止长按contextmenu弹出。类似的还有<code>contextmenu</code>事件里的<code>e.preventDefault()</code></li>\n<li><code>-webkit-tap-highlight-color: transparent</code> 删除可点击元素默认的黑影</li>\n</ul>\n<h2 id=\"上传进度条\"><a href=\"#上传进度条\" class=\"headerlink\" title=\"上传进度条\"></a>上传进度条</h2><p>利用xhr事件的onprogress事件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhr.<span class=\"property\">onprogress</span> = <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (e.<span class=\"property\">lengthComputable</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e.<span class=\"property\">loaded</span>+  <span class=\"string\">&quot; / &quot;</span> + e.<span class=\"property\">total</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">xhr.<span class=\"property\">onloadstart</span> = <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;start&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">xhr.<span class=\"property\">onloadend</span> = <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;end&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"不显示滚动条\"><a href=\"#不显示滚动条\" class=\"headerlink\" title=\"不显示滚动条\"></a>不显示滚动条</h2><p>基于Webkit的浏览器，可以使用CSS的方式隐藏滚动条。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp;::-webkit-scrollbar &#123;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"attribute\">background</span>: transparent;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"keyup无法prevent-default\"><a href=\"#keyup无法prevent-default\" class=\"headerlink\" title=\"keyup无法prevent default\"></a>keyup无法prevent default</h2><blockquote>\n<p>keyup fires after the default action.</p>\n</blockquote>\n<blockquote>\n<p>keydown and keypress are where you can prevent the default.<br>If those aren’t stopped, then the default happens and keyup is fired.</p>\n</blockquote>\n<p>来源：<a href=\"https://stackoverflow.com/questions/16052592/javascript-prevent-default-for-keyup/16052627\">jquery - javascript prevent default for keyup - StackOverflow</a></p>\n<h2 id=\"mixin-in-react\"><a href=\"#mixin-in-react\" class=\"headerlink\" title=\"mixin in react\"></a>mixin in react</h2><p>版本16之前，可以用mixin特性。16之后使用高阶组件HOC + ES6 class语法实现。<a href=\"https://reactjs.org/docs/higher-order-components.html\">参考</a>。</p>\n<h2 id=\"user-select在Edge浏览器下的适配问题\"><a href=\"#user-select在Edge浏览器下的适配问题\" class=\"headerlink\" title=\"user-select在Edge浏览器下的适配问题\"></a><code>user-select</code>在Edge浏览器下的适配问题</h2><p>设置<code>user-select</code>为<code>none</code>在Edge浏览器下会导致input无法输入内容。可以用下面的写法，避免对<code>input</code>标签应用该属性。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*<span class=\"selector-pseudo\">:not</span>(<span class=\"selector-tag\">input</span>) &#123;</span><br><span class=\"line\">  user-select: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>参考：<a href=\"https://stackoverflow.com/questions/49614065/cant-type-in-input-field-using-microsoft-edge-and-safari\">html - Can’t type in input field using Microsoft Edge and Safari - StackOverflow</a></p>\n<h2 id=\"浏览器跨tab通信\"><a href=\"#浏览器跨tab通信\" class=\"headerlink\" title=\"浏览器跨tab通信\"></a>浏览器跨tab通信</h2><p>最近业务遇到了一个需求：同一浏览器上多tab用户信息同步的问题，所有这个域名下的需要强制一样的用户信息，避免困惑。</p>\n<p>跨tab通信主流方案有两种：</p>\n<ul>\n<li>localStorage，利用window的<code>storage</code>事件，传递信息</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Broadcast_Channel_API\">BroadcastChannel</a>，新的API，通过<code>postMessage</code>和<code>onMessage</code>完成双向通讯</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bc = <span class=\"keyword\">new</span> <span class=\"title class_\">BroadcastChannel</span>(<span class=\"string\">&#x27;test_channel&#x27;</span>);</span><br><span class=\"line\">bc.<span class=\"title function_\">postMessage</span>(<span class=\"string\">&#x27;This is a test message.&#x27;</span>); <span class=\"comment\">/* send */</span></span><br><span class=\"line\">bc.<span class=\"property\">onmessage</span> = <span class=\"keyword\">function</span> (<span class=\"params\">ev</span>) &#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(ev); &#125; <span class=\"comment\">/* receive */</span></span><br></pre></td></tr></table></figure>\n\n<p>后者还未得到广泛支持，需要前者进行polyfill。</p>\n<h2 id=\"aos\"><a href=\"#aos\" class=\"headerlink\" title=\"aos\"></a>aos</h2><p>Animation on scroll。<a href=\"https://github.com/michalsnik/aos\">michalsnik&#x2F;aos at master · Animate on scroll library</a>.元素滚动至中的CSS动画，适合实现官网、落地页等效果。</p>\n<h2 id=\"extract-text-webpack-plugin\"><a href=\"#extract-text-webpack-plugin\" class=\"headerlink\" title=\"extract-text-webpack-plugin\"></a>extract-text-webpack-plugin</h2><p>抽出CSS&#x2F;Less&#x2F;Sass等样式作为单独文件，用于那些需要提前加载样式的页面。详细用法见<a href=\"https://github.com/webpack-contrib/extract-text-webpack-plugin\">github</a></p>\n<p>坑：</p>\n<ol>\n<li>不支持webpack4.x，报内部错误（2018&#x2F;07&#x2F;30） &#x3D;&gt; 使用@next下载最新版</li>\n<li>报错<code>Module build failed: ReferenceError: window is not defined</code> &#x3D;&gt; style-loader在extract-text-webpack-plugin中只做fallback项使用，见<a href=\"https://github.com/webpack-contrib/extract-text-webpack-plugin/issues/503\">issue#503</a></li>\n</ol>\n<h2 id=\"常见调试技巧\"><a href=\"#常见调试技巧\" class=\"headerlink\" title=\"常见调试技巧\"></a>常见调试技巧</h2><ul>\n<li>代码中插入debugger可以在该位置触发断点调试</li>\n<li><code>console.dir</code>可以打印对象结构，大多数情况和<code>console.log</code>表现一致，在document等DOM元素上表现不同</li>\n</ul>\n<h2 id=\"react组件复用设计思路\"><a href=\"#react组件复用设计思路\" class=\"headerlink\" title=\"react组件复用设计思路\"></a>react组件复用设计思路</h2><ul>\n<li>当设计的组件为自闭型时，通过传入数据（<strong>不要传入功能</strong>）props的方式定制组件</li>\n<li>当设计的组件在有些场景下需要外部传入功能才能完整时，使用继承的方式实现</li>\n<li>在可以拆分出原子组件，<strong>且有此必要的时候</strong>，使用原子组件拼装业务组件</li>\n<li>HOC优于mixin</li>\n</ul>\n",
            "tags": [
                "git",
                "webpack",
                "z-index",
                "git submodule",
                "object-fit",
                "object-position",
                "BroadcastChannel",
                "extract-text-webpack-plugin"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2018/05/23/some-tips-2/",
            "url": "http://shenlvmeng.github.com/blog/2018/05/23/some-tips-2/",
            "title": "工作中的遇到的一些小知识 2",
            "date_published": "2018-05-23T15:12:30.000Z",
            "content_html": "<h2 id=\"一个合法检测的Validator\"><a href=\"#一个合法检测的Validator\" class=\"headerlink\" title=\"一个合法检测的Validator\"></a>一个合法检测的Validator</h2><p>合法检测是在有表单或数据提交时常见的需求，随手撸了一个。由于考虑的业务场景比较复杂，代码也有点臃肿。拓展时，只需要修改上面的提示信息常量和新的test方法即可。也支持自己传入判断函数和message，针对比较复杂的校验情况。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">TYPE_VALIDATE_MESSAGE</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">isNumber</span>: <span class=\"string\">&#x27;不是一个数字&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">isObject</span>: <span class=\"string\">&#x27;不是一个对象&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">isArray</span>: <span class=\"string\">&#x27;不是一个数组&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">lt</span>: <span class=\"string\">&#x27;数值过大&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">gt</span>: <span class=\"string\">&#x27;数值过小&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">st</span>: <span class=\"string\">&#x27;长度过短&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">ht</span>: <span class=\"string\">&#x27;长度过长&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">notEmpty</span>: <span class=\"string\">&#x27;需要非空&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">len</span>: <span class=\"string\">&#x27;长度不合规范&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">in</span>: <span class=\"string\">&#x27;不在可选范围内&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">reg</span>: <span class=\"string\">&#x27;无法匹配指定模式&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 供validate使用</span></span><br><span class=\"line\">util.<span class=\"property\">test</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">isObject</span>: <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> <span class=\"title class_\">Object</span>(_) === _,</span><br><span class=\"line\">    <span class=\"attr\">isNumber</span>: <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> <span class=\"keyword\">typeof</span> _ == <span class=\"string\">&#x27;number&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">isArray</span>: <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> <span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(_),</span><br><span class=\"line\">    <span class=\"attr\">notEmpty</span>: <span class=\"function\"><span class=\"params\">_</span> =&gt;</span> _.<span class=\"property\">length</span> &gt; <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"attr\">lt</span>: <span class=\"function\">(<span class=\"params\">num, limit</span>) =&gt;</span> num &lt; limit,</span><br><span class=\"line\">    <span class=\"attr\">gt</span>: <span class=\"function\">(<span class=\"params\">num, limit</span>) =&gt;</span> num &gt; limit,</span><br><span class=\"line\">    <span class=\"attr\">st</span>: <span class=\"function\">(<span class=\"params\">_, limit</span>) =&gt;</span> _.<span class=\"property\">length</span> &lt; limit,</span><br><span class=\"line\">    <span class=\"attr\">ht</span>: <span class=\"function\">(<span class=\"params\">_, limit</span>) =&gt;</span> _.<span class=\"property\">length</span> &gt; limit,</span><br><span class=\"line\">    <span class=\"attr\">in</span>: <span class=\"function\">(<span class=\"params\">_, range</span>) =&gt;</span> ~range.<span class=\"title function_\">indexOf</span>(_),</span><br><span class=\"line\">    <span class=\"attr\">len</span>: <span class=\"function\">(<span class=\"params\">_, length</span>) =&gt;</span> _.<span class=\"property\">length</span> === length,</span><br><span class=\"line\">    <span class=\"attr\">reg</span>: <span class=\"function\">(<span class=\"params\">_, reg</span>) =&gt;</span> reg.<span class=\"title function_\">test</span>(_)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 数据校验</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: shenlvmeng</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@params</span> value &#123;any&#125; 校验数值 输入单个数值使用verify校验 输入对象使用verifyMap校验</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@method</span> verify 校验单个数值</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@method</span> verifyMap 校验对象</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">Object</span>&#125; 包含success和message的对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">util.<span class=\"property\">validate</span> = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 方便传递到外界修改</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> message = &#123; <span class=\"attr\">content</span>: <span class=\"string\">&#x27;&#x27;</span> &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">verify</span>(<span class=\"params\">val, validators, key</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(validators)) validators = [validators];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> validators.<span class=\"title function_\">every</span>(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> isRight;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (util.<span class=\"property\">test</span>.<span class=\"title function_\">isObject</span>(v)) &#123;</span><br><span class=\"line\">                isRight = util.<span class=\"property\">test</span>[<span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(v)[<span class=\"number\">0</span>]](val, <span class=\"title class_\">Object</span>.<span class=\"title function_\">values</span>(v)[<span class=\"number\">0</span>])</span><br><span class=\"line\">                !isRight &amp;&amp; (message.<span class=\"property\">content</span> = <span class=\"string\">`<span class=\"subst\">$&#123;key || val&#125;</span><span class=\"subst\">$&#123;TYPE_VALIDATE_MESSAGE[<span class=\"built_in\">Object</span>.keys(v)[<span class=\"number\">0</span>]]&#125;</span>`</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                isRight = util.<span class=\"property\">test</span>[v](val);</span><br><span class=\"line\">                !isRight &amp;&amp; (message.<span class=\"property\">content</span> = <span class=\"string\">`<span class=\"subst\">$&#123;key || val&#125;</span><span class=\"subst\">$&#123;TYPE_VALIDATE_MESSAGE[v]&#125;</span>`</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> isRight;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 单个数值使用</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@params</span> validators &#123; String|Array|Object &#125; 校验函数 必须是util中已定义的函数</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@params</span> String 类型时为函数名; Object类型时为函数名和对应入参; Array时为以上的列表 </span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"title function_\">verify</span>(<span class=\"params\">validators</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                <span class=\"attr\">success</span>: <span class=\"title function_\">verify</span>(value, validators),</span><br><span class=\"line\">                <span class=\"attr\">message</span>: message.<span class=\"property\">content</span>,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 校验整个对象时使用</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@params</span> config &#123; Object &#125; 校验函数 针对Object中每个key的校验</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@params</span> 每个key的value服从verify的格式，当key为function类型时交给调用方自己处理</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"title function_\">verifyMap</span>(<span class=\"params\">config</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!util.<span class=\"property\">test</span>.<span class=\"title function_\">isObject</span>(value)) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Invalid value type. It should be an Object.&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                <span class=\"attr\">success</span>: <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(config).<span class=\"title function_\">every</span>(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> (</span><br><span class=\"line\">                    <span class=\"keyword\">typeof</span> config[key] === <span class=\"string\">&#x27;function&#x27;</span> ? config[key](value[key], message)</span><br><span class=\"line\">                    : <span class=\"title function_\">verify</span>(value[key], config[key], key))</span><br><span class=\"line\">                ),</span><br><span class=\"line\">                <span class=\"attr\">message</span>: message.<span class=\"property\">content</span>,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实际应用中发现，<code>verifyMap</code>方法用的比较多。使用样例如下;</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">examine</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> util.<span class=\"title function_\">validate</span>(formData).<span class=\"title function_\">verifyMap</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">userName</span>: [<span class=\"string\">&#x27;notEmpty&#x27;</span>, &#123; <span class=\"attr\">st</span>: <span class=\"number\">6</span> &#125;, &#123; <span class=\"attr\">ht</span>: <span class=\"number\">15</span> &#125;],</span><br><span class=\"line\">        <span class=\"attr\">password</span>: [<span class=\"string\">&#x27;notEmpty&#x27;</span>, &#123; <span class=\"attr\">st</span>: <span class=\"number\">6</span> &#125;, &#123; <span class=\"attr\">ht</span>: <span class=\"number\">15</span> &#125;],</span><br><span class=\"line\">        <span class=\"attr\">age</span>: [<span class=\"string\">&#x27;isNumber&#x27;</span>, &#123; <span class=\"attr\">lt</span>: <span class=\"number\">18</span> &#125;],</span><br><span class=\"line\">        <span class=\"attr\">gender</span>: &#123;<span class=\"attr\">in</span>: [<span class=\"string\">&#x27;male&#x27;</span>, <span class=\"string\">&#x27;female&#x27;</span>]&#125;,</span><br><span class=\"line\">        <span class=\"attr\">email</span>: &#123;<span class=\"string\">&#x27;reg&#x27;</span>: <span class=\"regexp\">/email pattern/</span>&#125;,</span><br><span class=\"line\">        <span class=\"attr\">isAccepted</span>: <span class=\"function\">(<span class=\"params\">value, message</span>) =&gt;</span> value ? value : (message.<span class=\"property\">content</span> = <span class=\"string\">&#x27;请接收用户协议&#x27;</span>, <span class=\"literal\">false</span>)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Linux清理大文件\"><a href=\"#Linux清理大文件\" class=\"headerlink\" title=\"Linux清理大文件\"></a>Linux清理大文件</h2><ul>\n<li><code>df -h</code>查看存储情况</li>\n<li><code>du -sh * | grep G</code>查找当前目录下大于1G的大文件，挨个确认删除即可</li>\n</ul>\n<h2 id=\"当前页面窗口活动状态检查\"><a href=\"#当前页面窗口活动状态检查\" class=\"headerlink\" title=\"当前页面窗口活动状态检查\"></a>当前页面窗口活动状态检查</h2><p>利用<code>visibilityChange</code>API，配合<code>visibilityState</code>检查窗口状态。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// subscribe to visibility change events</span></span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;visibilitychange&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// fires when user switches tabs, apps, goes to homescreen, etc.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">document</span>.<span class=\"property\">visibilityState</span> === <span class=\"string\">&#x27;hidden&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">document</span>.<span class=\"property\">title</span> = <span class=\"string\">&#x27;Baby, Come Back!&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// fires when app transitions from prerender, user returns to the app / tab.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">document</span>.<span class=\"property\">visibilityState</span> === <span class=\"string\">&#x27;visible&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">document</span>.<span class=\"property\">title</span> = defaultTitle;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"IntersectionObserver\"><a href=\"#IntersectionObserver\" class=\"headerlink\" title=\"IntersectionObserver\"></a>IntersectionObserver</h2><p>监测页面元素和视口的交错关系的DOM API，目前浏览器支持度不高。可以用来方便地实现懒加载和页面无限滚动。</p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2016/11/intersectionobserver_api.html\">参考</a></p>\n<h2 id=\"图种\"><a href=\"#图种\" class=\"headerlink\" title=\"图种\"></a>图种</h2><ul>\n<li>Windows，<code>copy /b image.jpg+zip.rar output.jpg</code>，更改输出图片后缀为rar得到压缩包</li>\n<li>Linux，<code>cat image.jpg zip.rar &gt; output.jpg</code>，同上</li>\n</ul>\n<h2 id=\"draggable-with-Vue\"><a href=\"#draggable-with-Vue\" class=\"headerlink\" title=\"draggable with Vue\"></a>draggable with Vue</h2><p>业务中有拖拽需求，在试用多个轮子后，最终选择了<a href=\"https://jexordexan.github.io/vue-slicksort/?selectedKind=Vertical%20sorting&selectedStory=Simple%20list&full=0&addons=1&stories=1&panelRight=0&addonPanel=storybook/actions/actions-panel\">vue-slicksort</a></p>\n<ul>\n<li>Vue Draggable</li>\n<li>Vue Dragula</li>\n<li>Vue slicksort</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>GitHub名</th>\n<th>流行度</th>\n<th>依赖&#x2F;原理</th>\n<th>功能完善度</th>\n<th>文档完善度</th>\n<th>使用舒适度</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>vuedraggable</td>\n<td>star数3859，很流行</td>\n<td>依赖sortable.js，后者依赖HTML5的draggable API</td>\n<td>功能丰富强大，有很多别人踩过的坑</td>\n<td>文档比较丰富</td>\n<td>通过组件包裹形式使用 侵入性小 优</td>\n<td>有兼容性问题，Chrome66.0.3359.181 Mac OSX 10.13.1下无法通过拖动换位</td>\n</tr>\n<tr>\n<td>vue-dragula</td>\n<td>star数100+，上次更新1年前</td>\n<td>依赖dragula.js</td>\n<td>功能一般</td>\n<td>不完善，几乎都是dragula的API</td>\n<td>通过<code>Vue.use</code>的形式 + directives的方式引入，侵入式一般</td>\n<td>使用效果不好，实现时没有拖动和移动的动效</td>\n</tr>\n<tr>\n<td>vue-slicksort</td>\n<td>star数100+，更新较活跃</td>\n<td>0依赖，不基于HTML5 drag API，支持触摸屏，兼容性好</td>\n<td>功能一般，支持平面拖动</td>\n<td>较完善，有样例、API解释和FAQ</td>\n<td>略糟糕，需要使用mixin的形式，通常意味着额外的组件定义</td>\n<td>展示效果优秀，能满足需求</td>\n</tr>\n</tbody></table>\n<p>综上，考虑到只有vue-slicksort能满足需求，故选择之。</p>\n",
            "tags": [
                "validator",
                "大文件",
                "visibilityChange",
                "IntersectionObserver",
                "图种",
                "draggable"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2018/04/17/some-tips/",
            "url": "http://shenlvmeng.github.com/blog/2018/04/17/some-tips/",
            "title": "工作中的遇到的一些小知识",
            "date_published": "2018-04-17T15:48:27.000Z",
            "content_html": "<p><em>持续更新…</em></p>\n<h2 id=\"免密ssh步骤\"><a href=\"#免密ssh步骤\" class=\"headerlink\" title=\"免密ssh步骤\"></a>免密ssh步骤</h2><p>一句命令代替繁琐的ssh远程登录开发机。</p>\n<h3 id=\"Step-1：免密\"><a href=\"#Step-1：免密\" class=\"headerlink\" title=\"Step 1：免密\"></a>Step 1：免密</h3><ol>\n<li>ssh-keygen生成公钥。<code>ssh-keygen</code></li>\n<li>拷贝公钥。<code>ssh-copy-id -i ~/.ssh/id_rsa.pub &lt;your-remote-host&gt;</code></li>\n<li>免密登录。<code>ssh &lt;your-remote-host&gt;</code></li>\n</ol>\n<h3 id=\"Step-2：简化命令\"><a href=\"#Step-2：简化命令\" class=\"headerlink\" title=\"Step 2：简化命令\"></a>Step 2：简化命令</h3><p>使用<code>alias</code>，比如：<code>alias timetowork=&quot;ssh &lt;your-remote-host&gt;&quot;</code></p>\n<h3 id=\"Step-3：get-back-to-work\"><a href=\"#Step-3：get-back-to-work\" class=\"headerlink\" title=\"Step 3：get back to work\"></a>Step 3：get back to work</h3><p>输入<code>timetowork</code>。</p>\n<p>参考：</p>\n<ul>\n<li>[<a href=\"http://www.thegeekstuff.com/2008/11/3-steps-to-perform-ssh-login-without-password-using-ssh-keygen-ssh-copy-id]\">http://www.thegeekstuff.com/2008/11/3-steps-to-perform-ssh-login-without-password-using-ssh-keygen-ssh-copy-id]</a></li>\n<li>[<a href=\"http://www.linfo.org/alias.html]\">http://www.linfo.org/alias.html]</a></li>\n</ul>\n<h2 id=\"fis-receiver\"><a href=\"#fis-receiver\" class=\"headerlink\" title=\"fis-receiver\"></a>fis-receiver</h2><p>简写为<code>fisrcv</code>。使用fis进行项目构建时，若需要release到远端开发机，可以通过配置<code>fis-conf.js</code>里的<code>deploy</code>项目实现，fis会通过HTTP的方式上传压缩过的代码到远端指定位置，这需要远端有receiver接收上传的文件。</p>\n<p>fis-receiver是在远端接收上传文件的服务端脚本，node、python、PHP等都可以。<code>fisrcv</code>实际上是使用node服务在远端接收deploy文件的服务端脚本而已。</p>\n<p>参考：</p>\n<ul>\n<li>[<a href=\"https://github.com/zhoujq/fis-receiver]\">https://github.com/zhoujq/fis-receiver]</a></li>\n<li>[<a href=\"http://fis.baidu.com/fis3/docs/api/dev-plugin.html#Deploy%20%E6%8F%92%E4%BB%B6]\">http://fis.baidu.com/fis3/docs/api/dev-plugin.html#Deploy%20%E6%8F%92%E4%BB%B6]</a></li>\n</ul>\n<h2 id=\"webpack-release\"><a href=\"#webpack-release\" class=\"headerlink\" title=\"webpack-release\"></a>webpack-release</h2><p>等同于webpack版的<code>fis release</code>，不过原先写在<code>fis-conf.js</code>中的部署设置，现在写在<code>webpack.config.js</code>中。<code>receiveUrl</code>和<code>remotePath</code>即远端开发机位置。实现上也采用HTTP POST的方式。</p>\n<p>参考：</p>\n<ul>\n<li>[<a href=\"https://www.npmjs.com/package/webpack-release]\">https://www.npmjs.com/package/webpack-release]</a></li>\n<li>[<a href=\"https://github.com/markate/webpack-release/blob/master/index.js]\">https://github.com/markate/webpack-release/blob/master/index.js]</a></li>\n</ul>\n<h2 id=\"tmux\"><a href=\"#tmux\" class=\"headerlink\" title=\"tmux\"></a>tmux</h2><p>tmux是终端复用工具，允许在单个终端下相互隔离地运行多个后台程序。甚至在关闭终端时可以让程序在后台运行。使用<code>tmux attach</code>和<code>tmux detach</code>进入和离开各个session。<code>attach</code>后还可以接<code>-t</code>指定连接的session。</p>\n<p>参考：</p>\n<ul>\n<li>[<a href=\"https://github.com/tmux/tmux/wiki]\">https://github.com/tmux/tmux/wiki]</a></li>\n</ul>\n<h2 id=\"HtmlWebpackPlugin\"><a href=\"#HtmlWebpackPlugin\" class=\"headerlink\" title=\"HtmlWebpackPlugin\"></a>HtmlWebpackPlugin</h2><p>把html和js或css文件对应组织起来，可以指定<code>filename</code>，<code>template</code>，<code>chunks</code>等。</p>\n<p>参考：</p>\n<ul>\n<li>[<a href=\"https://github.com/jantimon/html-webpack-plugin]\">https://github.com/jantimon/html-webpack-plugin]</a></li>\n</ul>\n<h2 id=\"encodeURI和encodeURIComponent\"><a href=\"#encodeURI和encodeURIComponent\" class=\"headerlink\" title=\"encodeURI和encodeURIComponent\"></a>encodeURI和encodeURIComponent</h2><p>前者用于对整段URI转码，后者用于对URI中被分割符隔开的部分进行边编码。因此，</p>\n<ul>\n<li><code>encodeURI</code>会忽略允许出现在URI的符号，包括特殊符号。对空格、中文等进行转码</li>\n<li><code>encodeURIComponent</code>也会转码特殊符号，如&#x2F;，$，@，.等</li>\n</ul>\n<h2 id=\"origami\"><a href=\"#origami\" class=\"headerlink\" title=\"origami\"></a>origami</h2><p>origami是sublime中的一个拆分窗口的插件，用快捷键可以像在vim中一样方便地创建和转移到各个窗口编码。通过command + K开启快捷键。</p>\n<ul>\n<li>+up&#x2F;down&#x2F;left&#x2F;right 转移到其他窗口</li>\n<li>+command+up&#x2F;down&#x2F;left&#x2F;right 在该方向上打开新的工作窗口</li>\n<li>+shift+command+up&#x2F;down&#x2F;left&#x2F;right 销毁该方向上的新窗口</li>\n</ul>\n<h2 id=\"nrm与n\"><a href=\"#nrm与n\" class=\"headerlink\" title=\"nrm与n\"></a>nrm与n</h2><p>npm registry管理工具nrm，能够查看和切换当前使用的registry，在切换和查看registry时非常有用。常用命令:</p>\n<ul>\n<li><code>nrm ls</code></li>\n<li><code>nrm use</code></li>\n<li><code>nrm help</code></li>\n<li><code>nrm home</code></li>\n<li><code>nrm add/delete</code> 增加和删除registry</li>\n<li><code>nrm test</code> 测速</li>\n</ul>\n<p><a href=\"https://www.npmjs.com/package/n\">n</a>是类似nvm的node.js版本管理工具。</p>\n<h2 id=\"Promise-then的链式调用\"><a href=\"#Promise-then的链式调用\" class=\"headerlink\" title=\"Promise then的链式调用\"></a>Promise then的链式调用</h2><p><code>then()</code>方法返回一个Promise 。它最多需要有两个参数：Promise的成功和失败情况的回调函数。</p>\n<p><code>then</code>方法会返回一个Promise，它的行为与then中指定的回调函数返回值有关：</p>\n<ul>\n<li>如果then中的回调函数<strong>返回一个值</strong>，那么then返回的Promise将会成为接受状态（即使原Promise始Rejected状态），并且将返回的值作为接受状态的回调函数的参数值。</li>\n<li>如果then中的回调函数<strong>抛出一个错误</strong>，那么then返回的Promise将会成为拒绝状态，并且将抛出的错误作为拒绝状态的回调函数的参数值。</li>\n<li>如果then中的回调函数返回一个已经是接受状态的Promise，那么then返回的Promise也会成为接受状态，并且将那个Promise的接受状态的回调函数的参数值作为该被返回的Promise的接受状态回调函数的参数值。</li>\n<li>如果then中的回调函数返回一个已经是拒绝状态的Promise，那么then返回的Promise也会成为拒绝状态，并且将那个Promise的拒绝状态的回调函数的参数值作为该被返回的Promise的拒绝状态回调函数的参数值。</li>\n<li>如果then中的回调函数返回一个未定状态（pending）的Promise，那么then返回Promise的状态也是未定的，并且它的终态与那个Promise的终态相同；同时，它变为终态时调用的回调函数参数与那个Promise变为终态时的回调函数的参数是相同的。</li>\n</ul>\n<p>下面是几个官网上的例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"string\">&quot;foo&quot;</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 1. 接收 &quot;foo&quot; 并与 &quot;bar&quot; 拼接，并将其结果做为下一个resolve返回。</span></span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\">string</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        string += <span class=\"string\">&#x27;bar&#x27;</span>;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(string);</span><br><span class=\"line\">      &#125;, <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"comment\">// 2. 接收 &quot;foobar&quot;, 放入一个异步函数中处理该字符串</span></span><br><span class=\"line\">  <span class=\"comment\">// 并将其打印到控制台中, 但是不将处理后的字符串返回到下一个。</span></span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\">string</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      string += <span class=\"string\">&#x27;baz&#x27;</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(string);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> string;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"comment\">// 3. 打印本节中代码将如何运行的帮助消息，</span></span><br><span class=\"line\">  <span class=\"comment\">// 字符串实际上是由上一个回调函数之前的那块异步代码处理的。</span></span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\">string</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Last Then:  oops... didn&#x27;t bother to instantiate and return &quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;a promise in the prior then so the sequence may be a bit &quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;surprising&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 注意 `string` 这时不会存在 &#x27;baz&#x27;。</span></span><br><span class=\"line\">    <span class=\"comment\">// 因为这是发生在我们通过setTimeout模拟的异步函数中。</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(string);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>()</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>( <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使 .then() 返回一个 rejected promise</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"string\">&#x27;Oh no!&#x27;</span>;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>( <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>( <span class=\"string\">&#x27;onRejected function called: &#x27;</span>, reason );</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>( <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( <span class=\"string\">&quot;I am always called even if the prior then&#x27;s promise rejects&quot;</span> );</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SOLID原则\"><a href=\"#SOLID原则\" class=\"headerlink\" title=\"SOLID原则\"></a>SOLID原则</h2><p>程序设计领域，尤其是面向对象编程的优秀实践里，有着一些实现原则，如SOLID（单一功能、开闭原则、里氏替换、接口隔离、依赖翻转）。这些设计模式原则可以有助于编写可维护、可拓展、清晰可读的代码。</p>\n<ul>\n<li>S，Single Responsibility Principle，每个类都应有<strong>单一</strong>的功能，且被类封装起来。</li>\n<li>O，Open-Closed Principle，对象（类、接口、函数等）对于拓展是开放的，对于修改是封闭的。即易拓展、保证可靠。</li>\n<li>L，Liskov Substitution Principle，子类可以在不改变正确性的情况下替换父类</li>\n<li>I，Interface-segregation Principle，多个特定功能的接口好于单个宽泛功能的接口</li>\n<li>D，Dependency Inversion Principle，方法应该依赖于一个抽象（接口）而不是一个实例（类）</li>\n</ul>\n<h2 id=\"axios-mock-adpter\"><a href=\"#axios-mock-adpter\" class=\"headerlink\" title=\"axios-mock-adpter\"></a>axios-mock-adpter</h2><p>使用axios获取数据时，通过<code>axios-mock-adapter</code>mock数据。MockAdapter可以绑定在axios上，拦截通过绑定的axios发送的请求。使用方式如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> axios = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;axios&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">MockAdapter</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;axios-mock-adapter&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// This sets the mock adapter on the default instance</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mock = <span class=\"keyword\">new</span> <span class=\"title class_\">MockAdapter</span>(axios);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Mock any GET request to /users</span></span><br><span class=\"line\"><span class=\"comment\">// arguments for reply are (status, data, headers)</span></span><br><span class=\"line\">mock.<span class=\"title function_\">onGet</span>(<span class=\"string\">&#x27;/users&#x27;</span>).<span class=\"title function_\">reply</span>(<span class=\"number\">200</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">users</span>: [</span><br><span class=\"line\">    &#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;John Smith&#x27;</span> &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">axios.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/users&#x27;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\">response</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response.<span class=\"property\">data</span>);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>另外，可以用<code>mock.restore()</code>撤销所有mocking行为，或通过<code>mock.reset()</code>除去所有mocking的handler。通过<code>mock.on&lt;方法名&gt;</code>还可以链式调用其他方法：</p>\n<ul>\n<li><code>onAny()</code> 绑定任何方法</li>\n<li><code>networkError()</code> 返回网络错误</li>\n<li><code>timeout()</code> 返回请求超时</li>\n<li><code>passThrough()</code> 跳过mocking直接请求</li>\n</ul>\n<p>在reply中可以使用函数进行更复杂的操作：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> normalAxios = axios.<span class=\"title function_\">create</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> mockAxios = axios.<span class=\"title function_\">create</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> mock = <span class=\"title class_\">MockAdapter</span>(mockAxios);</span><br><span class=\"line\"></span><br><span class=\"line\">mock</span><br><span class=\"line\">  .<span class=\"title function_\">onGet</span>(<span class=\"string\">&#x27;/orders&#x27;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">reply</span>(<span class=\"function\">() =&gt;</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>([</span><br><span class=\"line\">      normalAxios</span><br><span class=\"line\">        .<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/api/v1/orders&#x27;</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">resp</span> =&gt;</span> resp.<span class=\"property\">data</span>),</span><br><span class=\"line\">      normalAxios</span><br><span class=\"line\">        .<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/api/v2/orders&#x27;</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">resp</span> =&gt;</span> resp.<span class=\"property\">data</span>),</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"string\">&#x27;-1&#x27;</span>, <span class=\"attr\">content</span>: <span class=\"string\">&#x27;extra row 1&#x27;</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"string\">&#x27;-2&#x27;</span>, <span class=\"attr\">content</span>: <span class=\"string\">&#x27;extra row 2&#x27;</span> &#125;</span><br><span class=\"line\">    ]).<span class=\"title function_\">then</span>(</span><br><span class=\"line\">      <span class=\"function\"><span class=\"params\">sources</span> =&gt;</span> [<span class=\"number\">200</span>, sources.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">agg, source</span>) =&gt;</span> agg.<span class=\"title function_\">concat</span>(source))]</span><br><span class=\"line\">    )</span><br><span class=\"line\">  );</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"移动端Charles调试经验\"><a href=\"#移动端Charles调试经验\" class=\"headerlink\" title=\"移动端Charles调试经验\"></a>移动端Charles调试经验</h2><ol>\n<li>设置http代理为8888端口</li>\n<li>设置SSL代理，填写对应的域名，设置端口为443，安装根证书</li>\n<li>手机打开无线设置，设置代理IP和端口8888</li>\n<li>打开<a href=\"http://chls.pro/ssl\">chls.pro&#x2F;ssl</a>，安装根证书并信任</li>\n<li>使用Map remote访问开发机位置</li>\n<li>使用Map local可以劫持WebView中请求的JS等资源到本地，通过alert的方式打印调试信息，进行临时的线上Webview环境debug</li>\n</ol>\n",
            "tags": [
                "mock",
                "ssh",
                "fis-receiver",
                "tmux",
                "origami",
                "promise",
                "encodeURI",
                "encodeURIComponent",
                "axios",
                "charles"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2018/04/14/image-render-md/",
            "url": "http://shenlvmeng.github.com/blog/2018/04/14/image-render-md/",
            "title": "图片生成有感",
            "date_published": "2018-04-14T03:20:07.000Z",
            "content_html": "<p>最近在业务中遇到使用生成图片的需求，图片只需要展示数据，没有计算密集型工作。后端生成的图片字体太单一，工作就交给了前端。从0开始作图做像素级的操作自然是不现实的，有幸的是，HTML本身就是一个很不错的做UI的语言，有CSS的支持。再借助HTML to canvas或是SVG的库，可以完成想要的需求。</p>\n<p><em>实际上，后端大多数也是通过起chrome内核，绘制DOM节点生成图片的</em></p>\n<h3 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h3><ul>\n<li>按照指定格式生成图片</li>\n<li>保证格式正确清晰度高</li>\n<li>生成过程用户无感知</li>\n<li>对图片格式没有明确要求</li>\n</ul>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>HTML to image有两种方案比较流行，一个是<a href=\"https://github.com/niklasvh/html2canvas\">html2canvas</a>，一个是<a href=\"https://github.com/tsayen/dom-to-image\">dom-to-image</a>。它们的设计初衷其实都是将<strong>已有</strong>DOM结构转成图片类型。对比来看</p>\n<ul>\n<li>流行度上，html2canvas流行度更高，资料更好找，但更新缓慢</li>\n<li>格式支持上，dom-to-image可以将图转成SVG等更多格式，html2canvas只能输出canvas，需要用户自行处理</li>\n<li>清晰度上，dom-to-image可以导出SVG，html2canvas则需要hack的方式（设置更大的canvas绘制再等比缩放）</li>\n<li>实现原理上，都是通过遍历DOM树，读取格式化数据，dom-to-image通过浏览器解析CSS语法，因此支持度更高；html2canvas则<a href=\"https://github.com/niklasvh/html2canvas/tree/master/src/parsing\">自己实现了CSS解析</a></li>\n</ul>\n<p>渲染图片的HTML模板在通常情况下，不应该展示给用户。即生成过程短暂停留的DOM需要用户不可见。不可见的方式大致有下面几种：</p>\n<ul>\n<li><code>display: none</code>，这种情况，两个方案度都输出空白图片</li>\n<li><code>visibility: hidden</code>，在输出图片时，DOM结构会短暂闪现，两种方案都输出空白图片</li>\n<li>将DOM移出视口，html2canvas可以正确输出图片，dom-to-image不行</li>\n</ul>\n<p>本场景下生成的图片需要上传，并最后展示给C端，没有对SVG的需求。测试来看，两者的输出结果清晰度类似，且html2canvas输出格式还原度更高。综合考虑，选择html2canvas。</p>\n<p>在其他场景下，如支持SVG、需要高清截图、需要导出更多图片时，可以考虑使用dom-to-image。两者的API实际上非常类似。</p>\n<h3 id=\"容器组件\"><a href=\"#容器组件\" class=\"headerlink\" title=\"容器组件\"></a>容器组件</h3><p>考虑到未来仍可能存在的前端图片渲染需求，将相关逻辑内聚成一个组件，同时开发接口给外部使用。</p>\n<p>组件需要输入：</p>\n<ul>\n<li><code>hide</code>，因为渲染过程是<code>componentDidMount</code>阶段完成的，在每次渲染完成后要在父组件手动卸载该组件，这部分需要在<code>hide</code>中实现</li>\n<li><code>success</code>，可选的成功回调，入参是生成的canvas，<code>hide</code>作为可选第二个入参，可以异步卸载组件</li>\n<li><code>&#123;children&#125;</code>，无状态的函数组件，只负责图片的HTML模板</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * @author: shenlvmeng</span></span><br><span class=\"line\"><span class=\"comment\"> * @desc: 渲染图片的容器组件，加载时根据内部DOM生成图片，输出data64编码到回调</span></span><br><span class=\"line\"><span class=\"comment\"> * @props: hide    &#123;Function&#125; required 图片生成完成后需要在父组件执行的卸载该组件操作</span></span><br><span class=\"line\"><span class=\"comment\"> * @props: success &#123;Function&#125; 成功回调</span></span><br><span class=\"line\"><span class=\"comment\">**/</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">PropTypes</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;prop-types&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> html2canvas <span class=\"keyword\">from</span> <span class=\"string\">&#x27;html2canvas&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">GeneratedImage</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Component</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> defaultProps = &#123;</span><br><span class=\"line\">        <span class=\"attr\">hide</span>: <span class=\"function\">() =&gt;</span> &#123;&#125;,</span><br><span class=\"line\">        <span class=\"attr\">success</span>: <span class=\"function\">(<span class=\"params\">canvas</span>) =&gt;</span> &#123;<span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(canvas);&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> propTypes = &#123;</span><br><span class=\"line\">        <span class=\"attr\">hide</span>: <span class=\"title class_\">PropTypes</span>.<span class=\"property\">func</span>,</span><br><span class=\"line\">        <span class=\"attr\">success</span>: <span class=\"title class_\">PropTypes</span>.<span class=\"property\">func</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">componentDidMount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">html2canvas</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;html2canvas&#x27;</span>))</span><br><span class=\"line\">        .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">canvas</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 可以将hide操作作为success的回调使用</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">props</span>.<span class=\"property\">success</span>.<span class=\"property\">length</span> &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">this</span>.<span class=\"property\">props</span>.<span class=\"title function_\">success</span>(canvas, <span class=\"variable language_\">this</span>.<span class=\"property\">props</span>.<span class=\"property\">hide</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">this</span>.<span class=\"property\">props</span>.<span class=\"title function_\">success</span>(canvas);</span><br><span class=\"line\">                <span class=\"variable language_\">this</span>.<span class=\"property\">props</span>.<span class=\"title function_\">hide</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(e);</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">props</span>.<span class=\"title function_\">hide</span>();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                <span class=\"attr\">id</span>=<span class=\"string\">&quot;html2canvas&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                    <span class=\"attr\">position:</span> &#x27;<span class=\"attr\">fixed</span>&#x27;,</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                    <span class=\"attr\">left:</span> &#x27;<span class=\"attr\">-9999px</span>&#x27;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                &#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                &#123;this.props.children&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">GeneratedImage</span>;</span><br></pre></td></tr></table></figure>\n\n<p>使用时，像如下这样，在对应的时机展示组件即可：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">isGenerating</span> ?</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">GeneratedImage</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">hide</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;this.setState(&#123; isGenerating: false &#125;)&#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        success=&#123;(canvas) =&gt; &#123; console.log(canvas.toDataURL()); &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    &gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Image</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">GeneratedImage</span>&gt;</span></span></span><br><span class=\"line\">    : <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"已知缺陷\"><a href=\"#已知缺陷\" class=\"headerlink\" title=\"已知缺陷\"></a>已知缺陷</h3><ul>\n<li>对部分CSS属性支持度有限，如<code>box-shadow</code>，<code>-webkit-line-clamp</code>，<code>background-position</code>等</li>\n<li>使用时需要额外的卸载操作</li>\n</ul>\n<h2 id=\"后端\"><a href=\"#后端\" class=\"headerlink\" title=\"后端\"></a>后端</h2><p>生成图片的业务需求大多数是用内容填充的，因此使用浏览器渲染页面再截图是比较直观的生成方式（qrcode这种简单的图片需求另说）。在使用python的场景下，可以用<a href=\"http://selenium-python.readthedocs.io/\">selenium</a>生成，代码非常简单。</p>\n<p>首先，<code>pip install selenium</code>，如果是python3，就<code>pip3 install selenium</code>。</p>\n<p>然后，安装<a href=\"http://npm.taobao.org/mirrors/chromedriver/\">chromedriver</a>。使用headless模式打开chrome，并根据图片位置和大小截图即可。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">from</span> io <span class=\"keyword\">import</span> BytesIO</span><br><span class=\"line\"><span class=\"keyword\">from</span> os <span class=\"keyword\">import</span> path</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">screenshot</span>(<span class=\"params\">path</span>):</span><br><span class=\"line\">    <span class=\"comment\"># Headless chrome</span></span><br><span class=\"line\"></span><br><span class=\"line\">    DRIVER = <span class=\"string\">&#x27;chromedriver&#x27;</span> <span class=\"comment\"># add this to your $PATH</span></span><br><span class=\"line\">    chrome_options = webdriver.ChromeOptions()</span><br><span class=\"line\">    chrome_options.add_argument(<span class=\"string\">&#x27;--headless&#x27;</span>)</span><br><span class=\"line\">    chrome_options.add_argument(<span class=\"string\">&#x27;--disable-gpu&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># get screenshot</span></span><br><span class=\"line\"></span><br><span class=\"line\">    browser = webdriver.Chrome(chrome_options=chrome_options, executable_path=DRIVER)</span><br><span class=\"line\">    browser.get(path)</span><br><span class=\"line\">    ele = browser.find_element_by_id(<span class=\"string\">&#x27;demo&#x27;</span>)</span><br><span class=\"line\">    location = ele.location</span><br><span class=\"line\">    size = ele.size</span><br><span class=\"line\">    image = browser.get_screenshot_as_png()</span><br><span class=\"line\">    browser.quit()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># crop image</span></span><br><span class=\"line\"></span><br><span class=\"line\">    im  = Image.<span class=\"built_in\">open</span>(BytesIO(image))</span><br><span class=\"line\"></span><br><span class=\"line\">    left = location[<span class=\"string\">&#x27;x&#x27;</span>]</span><br><span class=\"line\">    top = location[<span class=\"string\">&#x27;y&#x27;</span>]</span><br><span class=\"line\">    right = location[<span class=\"string\">&#x27;x&#x27;</span>] + size[<span class=\"string\">&#x27;width&#x27;</span>] * <span class=\"number\">2</span></span><br><span class=\"line\">    bottom = location[<span class=\"string\">&#x27;y&#x27;</span>] + size[<span class=\"string\">&#x27;height&#x27;</span>] * <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">    im = im.crop((left, top, right, bottom))</span><br><span class=\"line\">    im.save(<span class=\"string\">&#x27;screenshot.png&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (__name__ == <span class=\"string\">&#x27;__main__&#x27;</span>):</span><br><span class=\"line\">    curr_path = path.dirname(path.realpath(__file__))</span><br><span class=\"line\">    screenshot(<span class=\"string\">&#x27;file://&#x27;</span> + curr_path + <span class=\"string\">&#x27;/demo.html&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>这样就可以获取到示例页面的截图。</p>\n",
            "tags": [
                "图片渲染",
                "html2canvas",
                "dom-to-image"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2018/03/15/gallery-backend-with-egg-js/",
            "url": "http://shenlvmeng.github.com/blog/2018/03/15/gallery-backend-with-egg-js/",
            "title": "Photo Gallery中出现的常见需求解决方案",
            "date_published": "2018-03-15T06:17:10.000Z",
            "content_html": "<p><img src=\"https://s2.ax1x.com/2019/04/07/Ahbr1x.png\" alt=\"Ahbr1x.png\"></p>\n<blockquote>\n<p>使用egg.js开发PhotoGallery管理后台过程中，遇到了一些典型需求，将处理过程整理如下，方面后面开发类似应用</p>\n</blockquote>\n<h2 id=\"用户管理\"><a href=\"#用户管理\" class=\"headerlink\" title=\"用户管理\"></a>用户管理</h2><h3 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h3><p>新建<code>User</code>表，填充表结构，至少包含<code>账号</code>和<code>密码</code>两个字段。</p>\n<h3 id=\"Controller\"><a href=\"#Controller\" class=\"headerlink\" title=\"Controller\"></a>Controller</h3><p>（Ajax）登录页面，对应<code>login</code>行为，处理登录请求，包括以下工作：</p>\n<ul>\n<li>调用服务匹配用户名密码</li>\n<li><em>（可选）</em> 检查用户类型</li>\n<li>密码需要加密存储</li>\n<li>储存用户信息到session</li>\n<li>返回提示信息</li>\n</ul>\n<p>（Ajax）注册页面，对应<code>register</code>行为，处理注册请求，包括以下工作：</p>\n<ul>\n<li>寻找重名等逻辑</li>\n<li>调用服务创建用户</li>\n<li>密码需要加密存储</li>\n<li>储存用户信息到session</li>\n<li>返回提示信息</li>\n</ul>\n<h3 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"Service\"></a>Service</h3><p>用户管理，和数据库连接。对应到controller中大多数是POST请求。</p>\n<ul>\n<li>新增用户</li>\n<li>获取用户</li>\n<li>用户资料修改</li>\n<li>用户删除（使用用户状态更新实现）</li>\n</ul>\n<h3 id=\"Router与中间件\"><a href=\"#Router与中间件\" class=\"headerlink\" title=\"Router与中间件\"></a>Router与中间件</h3><ul>\n<li>添加中间件检查是否有session，否则同一跳转<code>/login</code>（业务逻辑）</li>\n<li><em>（可选）</em> Router上使用重定向让path更友好</li>\n<li><strong>一定不要瞎用301状态码</strong></li>\n</ul>\n<h3 id=\"页面js\"><a href=\"#页面js\" class=\"headerlink\" title=\"页面js\"></a>页面js</h3><ul>\n<li>使用Ajax或jsonp请求</li>\n</ul>\n<hr>\n<h2 id=\"无限滚动\"><a href=\"#无限滚动\" class=\"headerlink\" title=\"无限滚动\"></a>无限滚动</h2><h3 id=\"HTML部分\"><a href=\"#HTML部分\" class=\"headerlink\" title=\"HTML部分\"></a>HTML部分</h3><ul>\n<li>提前加载所有图片（后续API动态请求，DOM插入时间损耗太大）。</li>\n<li>前若干张图片（假设为K）正常展示</li>\n<li>后若干张容器使用<code>display:none</code>或<code>height: 0</code>等手段避免展示</li>\n<li>后若干张图片使用<code>data-src</code>存储真实路径，避免提前加载，影响首屏时间</li>\n</ul>\n<h3 id=\"JS部分\"><a href=\"#JS部分\" class=\"headerlink\" title=\"JS部分\"></a>JS部分</h3><ul>\n<li>设置参数保存当前展示图片的数目</li>\n<li>判断是否滚动到底端</li>\n<li>上述情况下增加展示的图片数目，删除避免展示的<code>class</code>，替换真正的<code>src</code>加载图片</li>\n<li>使用节流，保证弱网络环境下，没有连续的过多图片加载，使用<code>flag</code>控制程序触发，在最后一张图片加载完成后，更新<code>flag</code>布尔值，开放权限</li>\n<li><em>（可选）</em>，网络环境很差时，可以考虑<code>setTimeout</code>兜底，但不推荐</li>\n<li>注意在所有图片都加载完成时，停止监听<code>scroll</code>事件</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> figure = $($(<span class=\"string\">&#x27;#figures&#x27;</span>).<span class=\"title function_\">children</span>()[index]);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!figure) &#123;</span><br><span class=\"line\">    $(<span class=\"variable language_\">window</span>).<span class=\"title function_\">off</span>(<span class=\"string\">&#x27;scroll&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h2><h3 id=\"HTML部分-1\"><a href=\"#HTML部分-1\" class=\"headerlink\" title=\"HTML部分\"></a>HTML部分</h3><ul>\n<li>使用包裹<code>&lt;input type=&#39;file&#39;&gt;</code>的<code>&lt;form&gt;</code></li>\n<li><code>&lt;input type=&#39;file&#39;&gt;</code>使用<code>display: none</code>，通过更友好的方式trigger它的点击</li>\n<li><strong>注意：<code>type=file</code>的<code>input</code>标签一定要有<code>name</code>属性，否则不会被包裹在<code>FormData</code>中。</strong></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;upload&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;upload&quot;</span>&gt;</span>+ 点击上传<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;upload-form&quot;</span> <span class=\"attr\">enctype</span>=<span class=\"string\">&quot;multipart/form-data&quot;</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">accept</span>=<span class=\"string\">&quot;image/*&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;files&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;upload-file&quot;</span> <span class=\"attr\">multiple</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"JS部分-1\"><a href=\"#JS部分-1\" class=\"headerlink\" title=\"JS部分\"></a>JS部分</h3><ul>\n<li>使用Ajax提交替换form表单替换，来实现更复杂的回调和逻辑控制</li>\n<li>通过构造<code>FormData</code>，提交域内文件</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;#upload&#x27;</span>).<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  $(<span class=\"string\">&#x27;#upload-file&#x27;</span>).<span class=\"title function_\">trigger</span>(<span class=\"string\">&#x27;click&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">&#x27;#upload-file&#x27;</span>).<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;change&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  $.<span class=\"title function_\">ajax</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;/gallery/upload&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&#x27;POST&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">cache</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">FormData</span>($(<span class=\"string\">&#x27;#upload-form&#x27;</span>)[<span class=\"number\">0</span>]),</span><br><span class=\"line\">    <span class=\"attr\">processData</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">contentType</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">success</span>: <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"后台路由\"><a href=\"#后台路由\" class=\"headerlink\" title=\"后台路由\"></a>后台路由</h3><ul>\n<li>配置Ajax和jsonp安全检查</li>\n</ul>\n<h3 id=\"控制器端\"><a href=\"#控制器端\" class=\"headerlink\" title=\"控制器端\"></a>控制器端</h3><p>使用插件，参考<a href=\"https://github.com/eggjs/examples/blob/master/multipart/app/controller/multiple.js\">examples&#x2F;multiple.js at master · eggjs&#x2F;examples</a></p>\n<h2 id=\"HTML模板\"><a href=\"#HTML模板\" class=\"headerlink\" title=\"HTML模板\"></a>HTML模板</h2><p>使用ES6的模板字符串。</p>\n<p>已知问题：</p>\n<ul>\n<li>似乎有些视图、逻辑未分离</li>\n</ul>\n<h2 id=\"使用七牛API上传文件\"><a href=\"#使用七牛API上传文件\" class=\"headerlink\" title=\"使用七牛API上传文件\"></a>使用七牛API上传文件</h2><p>使用服务端上传，<a href=\"https://developer.qiniu.com/kodo/kb/1374/batch-upload-and-file-upload-more-resources\">一次只能单张上传</a>。官网API文档<a href=\"https://developer.qiniu.com/kodo/sdk/1289/nodejs\">Node.js版</a>描述的并不清楚，下面是上传的简单流程展示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mac = <span class=\"keyword\">new</span> qiniu.<span class=\"property\">auth</span>.<span class=\"property\">digest</span>.<span class=\"title class_\">Mac</span>(config.<span class=\"property\">accessKey</span>, config.<span class=\"property\">secretKey</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\">  <span class=\"attr\">scope</span>: config.<span class=\"property\">bucketName</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> putPolicy = <span class=\"keyword\">new</span> qiniu.<span class=\"property\">rs</span>.<span class=\"title class_\">PutPolicy</span>(options);</span><br><span class=\"line\"><span class=\"keyword\">const</span> uploadToken = putPolicy.<span class=\"title function_\">uploadToken</span>(mac);</span><br><span class=\"line\"><span class=\"keyword\">const</span> qiniuConfig = <span class=\"keyword\">new</span> qiniu.<span class=\"property\">conf</span>.<span class=\"title class_\">Config</span>();</span><br><span class=\"line\">qiniuConfig.<span class=\"property\">zone</span> = qiniu.<span class=\"property\">zone</span>.<span class=\"property\">Zone_z1</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> formUploader = <span class=\"keyword\">new</span> qiniu.<span class=\"property\">form_up</span>.<span class=\"title class_\">FormUploader</span>(qiniuConfig);</span><br><span class=\"line\"><span class=\"keyword\">const</span> putExtra = <span class=\"keyword\">new</span> qiniu.<span class=\"property\">form_up</span>.<span class=\"title class_\">PutExtra</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">formUploader.<span class=\"title function_\">putFile</span>(uploadToken, key, localFile, putExtra, <span class=\"keyword\">function</span>(<span class=\"params\">respErr, respBody, respInfo</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (respErr) &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (respInfo.<span class=\"property\">statusCode</span> == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>多文件上传使用外部队列暂存所有任务，并和回调函数关联即可实现。</p>\n",
            "tags": [
                "后端",
                "管理后台",
                "egg.js"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2018/02/06/my-first-electron-demo/",
            "url": "http://shenlvmeng.github.com/blog/2018/02/06/my-first-electron-demo/",
            "title": "我的第一个Electron应用",
            "date_published": "2018-02-06T07:58:11.000Z",
            "content_html": "<blockquote>\n<p>前一阵突发奇想，想写一个汇总所有骑行数据的网页。又想到最近看了下Electron，干脆写一个能够生产这样网页的工具，造福自己，造福他人。</p>\n</blockquote>\n<p><img src=\"https://s2.ax1x.com/2019/04/07/Ahbsc6.png\" alt=\"Ahbsc6.png\"></p>\n<h2 id=\"Electron是啥\"><a href=\"#Electron是啥\" class=\"headerlink\" title=\"Electron是啥\"></a>Electron是啥</h2><p><a href=\"(https://electronjs.org/)\">Electron</a>一套由Github开发的开源库，基于<a href=\"https://www.chromium.org/Home\">Chromium</a>和<a href=\"https://nodejs.org/en/\">Node.js</a>，支持通过HTML、JavaScript、CSS来构建跨平台（Mac、Windows、Linux）应用。Electron起初是为文本编辑器<a href=\"https://atom.io/\">Atom</a>而开发的一套开发框架，名为Atom Shell。现如今已经为<a href=\"https://electronjs.org/apps\">众多应用</a>所用。</p>\n<p>从开发者角度看，Electron分为<code>main</code>和<code>renderer</code>两部分。前者运行在主进程中，以创建web页面的方式显示一个GUI；后者是渲染进程，每个Electron的web页面运行在其中。通常的浏览器内，网页通常运行在一个沙盒的环境不能够进行原生操作。 在Electron中，可以在渲染进程使用Node.js的API和Electron提供的众多API（GUI相关除外），和操作系统进行一些低级别的交互。主进程和渲染进程通过<a href=\"https://electronjs.org/docs/api/ipc-main\"><code>ipcMain</code></a>和<a href=\"https://electronjs.org/docs/api/ipc-renderer\"><code>ipcRenderer</code></a>相互沟通；也可以通过<a href=\"https://electronjs.org/docs/api/remote\"><code>remote</code></a>的方式发起，后者要更简洁些。</p>\n<p>在项目结构上，官网并没有限制，<a href=\"https://github.com/electron-userland/electron-webpack\">electron-webpack</a>的<a href=\"https://webpack.electron.build/project-structure\">project-structure</a>可以参考，安全性上，可以参考官网的<a href=\"https://electronjs.org/docs/tutorial/security\">介绍</a>。要想获得对Electron概念的快速认识，可以看看<a href=\"https://electronjs.org/docs/tutorial/about\">关于Electron</a>和<a href=\"https://electronjs.org/docs/tutorial/quick-start\">快速入门</a>，再去<a href=\"https://www.zhihu.com/topic/20038727/top-answers\">知乎Electron精华话题</a>看看，或者看看<a href=\"https://github.com/sindresorhus/awesome-electron\">awesome list</a>也是极好的。</p>\n<h2 id=\"调研准备\"><a href=\"#调研准备\" class=\"headerlink\" title=\"调研准备\"></a>调研准备</h2><p>地图考虑还是使用百度地图API（因为<a href=\"https://shenlvmeng.github.io/blog/2018/01/27/my-first-pwa-app/\">上个小项目</a>用的就是百度地图，好上手），根据<a href=\"http://lbsyun.baidu.com/jsdemo.htm#c1_25\">demo演示</a>来看，根据数据点画个折线是没什么问题的。地图的part没问题了。</p>\n<p>下面就是数据的part。去确认了下我骑行常用的APP<a href=\"https://www.imxingzhe.com/\">行者</a>，网页和APP都有导出功能。导出格式为<code>.gpx</code>的gps数据文件。OK，数据的来源也有了。</p>\n<p>至于怎么把这些点连线搁在地图上，就是我要干的活了。</p>\n<h2 id=\"功能设计\"><a href=\"#功能设计\" class=\"headerlink\" title=\"功能设计\"></a>功能设计</h2><p>但是事情没那么简单，既然选择<a href=\"https://electronjs.org/\">Electron</a>来练手，光做个展示的网页出来就很没意思了。这也不是Electron的用武之地。于是能够想到的就是，做一个<strong>可以生成上面那个网页的工具</strong>，一方面减轻我的负担，让我在日后维护时省心省力；另一方面也能造福他人嘛。</p>\n<p>现在整理一下，我拿在手里的是一堆<code>.gpx</code>的文件，产出是可以画图的网页。稍微分解一下：</p>\n<ul>\n<li>网页是需要独立存在，不需要用户配置的，这些gps数据必须单独存储，可以使用前端友好的JSON文件。这个<strong>转译</strong>过程需要在Electron应用中完成</li>\n<li>网页需要能够配置生成，不需要用户手写，因此在应用里需要填充<strong>HTML模板</strong>，生产HTML文件。</li>\n<li>页面并不复杂，不需要使用Vue、React甚至webpack的加持，作为我的第一个Electron应用，把握整体感受要紧</li>\n</ul>\n<h2 id=\"开写\"><a href=\"#开写\" class=\"headerlink\" title=\"开写\"></a>开写</h2><h3 id=\"相关环境\"><a href=\"#相关环境\" class=\"headerlink\" title=\"相关环境\"></a>相关环境</h3><p>安装Electron过程中，报错node版本过低。只能重新安转新版本的node，windows下只有<a href=\"https://github.com/coreybutler/nvm-windows\">nvm-windows</a>这个选择。安装完成后，之前全局安装的npm包只能重头再安一遍。先安装<a href=\"https://www.npmjs.com/package/nrm\">nrm</a>再说。</p>\n<p><strong>注意：安装nvm-windows前，强烈建议卸载已有的Node.js</strong></p>\n<h3 id=\"boilerplate\"><a href=\"#boilerplate\" class=\"headerlink\" title=\"boilerplate\"></a>boilerplate</h3><p>boilerplate即骨架。现在前端的环境里，一门成熟的开源库是一定有一堆boilerplate的，毕竟程序猿懒人多。Electron也不能免俗。可以从<a href=\"https://github.com/sindresorhus/awesome-electron#boilerplates\">awesome list</a>中挑一个看上眼的。如果项目比较大，可以直接用<a href=\"https://github.com/SimulatedGREG/electron-vue\">electron-vue</a>这种省心省力，一键式配置，开发打包工具一应齐全。这里我从官网提到的<a href=\"https://github.com/electron/electron-quick-start\">quick start</a>，除了一些样例代码，啥都没有，正合我意。</p>\n<p><em>（我曾经尝试使用<a href=\"https://github.com/electron/electron-quick-start\">electron-webpack-quick-start</a>，想着顺便打包了<a href=\"https://github.com/electron-userland/electron-builder\">electron-builder</a>，还有webpack、热加载，岂不美哉。不过根据<a href=\"https://webpack.electron.build/development#use-of-html-webpack-plugin\">这里</a>所说，是没有index.html暴露给你的，这几乎就意味着必须要用Vue、React这样的解决方案，但是<a href=\"https://github.com/electron-userland/electron-webpack\">electron-webpack</a>这个库并没有包括，需要自己add-on，但是按照<a href=\"https://webpack.electron.build/add-ons#vuejs\">文档</a>所说的操作后，并不能识别<code>.vue</code>文件，而且也没有vue-devtool。这是<strong>坑之一</strong>）</em></p>\n<h3 id=\"转译\"><a href=\"#转译\" class=\"headerlink\" title=\"转译\"></a>转译</h3><p>转译过程是在<code>renderer.js</code>中完成的。实际上，项目里<a href=\"https://zhuanlan.zhihu.com/p/24275216\">大多数业务逻辑也是在渲染进程中完成的</a>。核心在把gpx文件里的信息解析出来，除了<code>&lt;desc&gt;&lt;/desc&gt;</code>中的meta信息之外，其余的点结构大致像下面这样;</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">trkpt</span> <span class=\"attr\">lat</span>=<span class=\"string\">&quot;40.106419&quot;</span> <span class=\"attr\">lon</span>=<span class=\"string\">&quot;116.369812&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ele</span>&gt;</span>40.6<span class=\"tag\">&lt;/<span class=\"name\">ele</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">time</span>&gt;</span>2017-03-04T16:52:36Z<span class=\"tag\">&lt;/<span class=\"name\">time</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">trkpt</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">trkpt</span> <span class=\"attr\">lat</span>=<span class=\"string\">&quot;40.106531&quot;</span> <span class=\"attr\">lon</span>=<span class=\"string\">&quot;116.369916&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ele</span>&gt;</span>59.8<span class=\"tag\">&lt;/<span class=\"name\">ele</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">time</span>&gt;</span>2017-03-04T16:52:39Z<span class=\"tag\">&lt;/<span class=\"name\">time</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">trkpt</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>幸运的是，npm上早就有gpx的parser。<a href=\"https://www.npmjs.com/package/gpx-parse\">gpx-parse</a>的功能足够满足我们需要了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gpxParse = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;gpx-parse&quot;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//from file </span></span><br><span class=\"line\">gpxParse.<span class=\"title function_\">parseGpxFromFile</span>(<span class=\"string\">&quot;/path/to/gpxFile&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">error, data</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//do stuff </span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//or from string </span></span><br><span class=\"line\">gpxParse.<span class=\"title function_\">parseGpx</span>(<span class=\"string\">&quot;&lt;gpx&gt;&lt;/gpx&gt;&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">error, data</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//do stuff </span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// or an external file via HTTP(S) </span></span><br><span class=\"line\">gpxParse.<span class=\"title function_\">parseRemoteGpxFile</span>(<span class=\"string\">&quot;http://host.tld/my.gpx&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">error, data</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//do stuff </span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>顺带写几个input框（包括<code>&lt;input type=&quot;file&quot;&gt;</code>），测试一下，没啥问题（排除掉中间处理<a href=\"https://yarnpkg.com/zh-Hans/\">yarn</a>和npm冲突问题的话）。观察一下，返回值是一个<code>GpxResult</code>类型，里面有<code>metadata</code>，<code>routes</code>，<code>tracks</code>等字段，只有tracks中记录着点的信息。考虑到<code>tracks</code>和里面<code>segments</code>字段是数组的情况，要进行一下flatten的处理。最后，整个转译过程大概如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">serialize</span>(<span class=\"params\">file, index</span>) &#123;</span><br><span class=\"line\">  gpxParse.<span class=\"title function_\">parseGpxFromFile</span>(file.<span class=\"property\">path</span>, <span class=\"keyword\">function</span>(<span class=\"params\">error, data</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (error || !data.<span class=\"property\">tracks</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;文件内容错误&#x27;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> track = data.<span class=\"property\">tracks</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 扁平化处理</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> flattenTrack = track.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">acc, cur</span>) =&gt;</span> (cur.<span class=\"property\">segments</span>.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">acc, cur</span>) =&gt;</span> acc.<span class=\"title function_\">concat</span>(cur), []).<span class=\"title function_\">concat</span>(acc)), [])</span><br><span class=\"line\">    <span class=\"keyword\">const</span> points = flattenTrack.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">&#123;lat, lon&#125;</span>) =&gt;</span> (&#123;lat, <span class=\"attr\">lng</span>: lon&#125;))</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> jsonData = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(points)</span><br><span class=\"line\">      <span class=\"keyword\">const</span> pathStr = path.<span class=\"title function_\">join</span>(<span class=\"variable constant_\">OUTPUT_PATH</span>, <span class=\"string\">`<span class=\"subst\">$&#123;index&#125;</span>.json`</span>)</span><br><span class=\"line\">      remote.<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>).<span class=\"title function_\">writeFile</span>(pathStr, jsonData,<span class=\"string\">&#x27;utf8&#x27;</span>, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">warn</span>(e)</span><br><span class=\"line\">      <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;文件序列化失败&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"写一个示例网页\"><a href=\"#写一个示例网页\" class=\"headerlink\" title=\"写一个示例网页\"></a>写一个示例网页</h3><p>既然最后的网页是生成出来的，就有第一个能够成功工作起来的网页作为模子，好抽离范本出来。先搭一个最简单的HTML架子，插入百度地图的script标签。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0, user-scalable=no&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-tag\">body</span>, <span class=\"selector-tag\">html</span>, <span class=\"selector-id\">#map</span> &#123;<span class=\"attribute\">width</span>: <span class=\"number\">100%</span>; <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>; <span class=\"attribute\">overflow</span>: hidden; <span class=\"attribute\">margin</span>:<span class=\"number\">0</span>;&#125;</span></span><br><span class=\"line\"><span class=\"language-css\">  </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>我的骑行轨迹<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;map&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://api.map.baidu.com/api?v=2.0&amp;ak=你的秘钥&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>下面我们把工作稍微分析一下：</p>\n<ul>\n<li>从本地读取JSON文件，意味着<strong>自己实现一个ajax</strong>，考虑兼容性（毕竟没了<a href=\"http://babeljs.io/\">babel</a>和webpack）,使用XMLHttpRequest</li>\n<li>读取当然得是<strong>异步</strong>的，JSON文件很有可能很多，需要依次进行</li>\n<li>地图配置和画图就很简单了，参考API就行了</li>\n</ul>\n<p>第一个工作不难：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getJSON</span>(<span class=\"params\">path, callback</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> request = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">  request.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;GET&#x27;</span>, path, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  request.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (request.<span class=\"property\">readyState</span> === <span class=\"number\">4</span> &amp;&amp; request.<span class=\"property\">status</span> === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">callback</span>(request.<span class=\"property\">response</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  request.<span class=\"title function_\">send</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第二个工作也不难，在递归函数的外面设置控制递归的变量就可以了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pool = <span class=\"title class_\">Array</span>.<span class=\"title function_\">apply</span>(<span class=\"literal\">null</span>, <span class=\"title class_\">Array</span>(length)).<span class=\"title function_\">map</span>(<span class=\"keyword\">function</span>(<span class=\"params\">v, i</span>)&#123;<span class=\"keyword\">return</span> i+<span class=\"string\">&#x27;.json&#x27;</span>;&#125;);</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">paint</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!pool.<span class=\"property\">length</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"title function_\">getJSON</span>(pool.<span class=\"title function_\">shift</span>(), <span class=\"keyword\">function</span>(<span class=\"params\">res</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res) <span class=\"title function_\">paint</span>();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> pois = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(res).<span class=\"title function_\">map</span>(<span class=\"keyword\">function</span>(<span class=\"params\">point</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BMap</span>.<span class=\"title class_\">Point</span>(point.<span class=\"property\">lng</span>, point.<span class=\"property\">lat</span>);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">var</span> polyline = <span class=\"keyword\">new</span> <span class=\"title class_\">BMap</span>.<span class=\"title class_\">Polyline</span>(pois);</span><br><span class=\"line\">      map.<span class=\"title function_\">addOverlay</span>(polyline);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">warn</span>(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>OK，大功告成（排除其余逻辑bug之后），赶紧接上<code>renderer.js</code>那边转译好的JSON文件看看骑行轨迹吧！</p>\n<p>你以为事情会这么简单么？</p>\n<p>当然不。</p>\n<h3 id=\"坐标换算\"><a href=\"#坐标换算\" class=\"headerlink\" title=\"坐标换算\"></a>坐标换算</h3><p>图是出来了，但是路线有偏差，发现明显有所平移。这是怎么回事，搜索过后才发现，百度所采用的坐标并不是gps数据中的真实大地坐标，而是在火星坐标基础上再次加密的百度坐标（<a href=\"http://blog.csdn.net/flygoa/article/details/69258648\">更多</a>）。<a href=\"http://lbsyun.baidu.com/jsdemo.htm#a5_3\">官网示例</a>上也给出了gps坐标转成百度坐标的API。</p>\n<p>得，那就在转译成JSON数据前多map一段呗。仔细一看，<a href=\"http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference.html#a7b49\"><code>Convertor</code></a>的介绍里赫然写着<strong>“一次最多10个点”</strong>，居然还限流（其实不只是限流的问题，递归的写法也要变化）。一条路线至少上千个点呢，算了先试试看速度吧。</p>\n<p>两条路线用了30s才显示出来，果然很慢……</p>\n<p>只能自己实现转译过程了，网上倒是有一些例子，都差不多。尝试了一下，发现有点效果，但是路线还是有偏移。试了半个多小时后，总算找到了一个完美的<a href=\"http://www.oschina.net/code/snippet_260395_39205\">JS转译代码</a>，感谢原作者。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">delta</span>(<span class=\"params\">lat, lon</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Krasovsky 1940</span></span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\">  <span class=\"comment\">// a = 6378245.0, 1/f = 298.3</span></span><br><span class=\"line\">  <span class=\"comment\">// b = a * (1 - f)</span></span><br><span class=\"line\">  <span class=\"comment\">// ee = (a^2 - b^2) / a^2;</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> a = <span class=\"number\">6378245.0</span>; <span class=\"comment\">//  a: 卫星椭球坐标投影到平面地图坐标系的投影因子。</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> ee = <span class=\"number\">0.00669342162296594323</span>; <span class=\"comment\">//  ee: 椭球的偏心率。</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> dLat = <span class=\"title function_\">transformLat</span>(lon - <span class=\"number\">105.0</span>, lat - <span class=\"number\">35.0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dLon = <span class=\"title function_\">transformLon</span>(lon - <span class=\"number\">105.0</span>, lat - <span class=\"number\">35.0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> radLat = lat / <span class=\"number\">180.0</span> * <span class=\"variable constant_\">PI</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> magic = <span class=\"title class_\">Math</span>.<span class=\"title function_\">sin</span>(radLat);</span><br><span class=\"line\">  magic = <span class=\"number\">1</span> - ee * magic * magic;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> sqrtMagic = <span class=\"title class_\">Math</span>.<span class=\"title function_\">sqrt</span>(magic);</span><br><span class=\"line\">  dLat = (dLat * <span class=\"number\">180.0</span>) / ((a * (<span class=\"number\">1</span> - ee)) / (magic * sqrtMagic) * <span class=\"variable constant_\">PI</span>);</span><br><span class=\"line\">  dLon = (dLon * <span class=\"number\">180.0</span>) / (a / sqrtMagic * <span class=\"title class_\">Math</span>.<span class=\"title function_\">cos</span>(radLat) * <span class=\"variable constant_\">PI</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;<span class=\"attr\">lat</span>: dLat, <span class=\"attr\">lon</span>: dLon&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">transformLat</span> (x, y) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ret = -<span class=\"number\">100.0</span> + <span class=\"number\">2.0</span> * x + <span class=\"number\">3.0</span> * y + <span class=\"number\">0.2</span> * y * y + <span class=\"number\">0.1</span> * x * y + <span class=\"number\">0.2</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">sqrt</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(x));</span><br><span class=\"line\">    ret += (<span class=\"number\">20.0</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">sin</span>(<span class=\"number\">6.0</span> * x * <span class=\"variable constant_\">PI</span>) + <span class=\"number\">20.0</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">sin</span>(<span class=\"number\">2.0</span> * x * <span class=\"variable constant_\">PI</span>)) * <span class=\"number\">2.0</span> / <span class=\"number\">3.0</span>;</span><br><span class=\"line\">    ret += (<span class=\"number\">20.0</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">sin</span>(y * <span class=\"variable constant_\">PI</span>) + <span class=\"number\">40.0</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">sin</span>(y / <span class=\"number\">3.0</span> * <span class=\"variable constant_\">PI</span>)) * <span class=\"number\">2.0</span> / <span class=\"number\">3.0</span>;</span><br><span class=\"line\">    ret += (<span class=\"number\">160.0</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">sin</span>(y / <span class=\"number\">12.0</span> * <span class=\"variable constant_\">PI</span>) + <span class=\"number\">320</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">sin</span>(y * <span class=\"variable constant_\">PI</span> / <span class=\"number\">30.0</span>)) * <span class=\"number\">2.0</span> / <span class=\"number\">3.0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">transformLon</span> (x, y) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ret = <span class=\"number\">300.0</span> + x + <span class=\"number\">2.0</span> * y + <span class=\"number\">0.1</span> * x * x + <span class=\"number\">0.1</span> * x * y + <span class=\"number\">0.1</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">sqrt</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(x));</span><br><span class=\"line\">    ret += (<span class=\"number\">20.0</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">sin</span>(<span class=\"number\">6.0</span> * x * <span class=\"variable constant_\">PI</span>) + <span class=\"number\">20.0</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">sin</span>(<span class=\"number\">2.0</span> * x * <span class=\"variable constant_\">PI</span>)) * <span class=\"number\">2.0</span> / <span class=\"number\">3.0</span>;</span><br><span class=\"line\">    ret += (<span class=\"number\">20.0</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">sin</span>(x * <span class=\"variable constant_\">PI</span>) + <span class=\"number\">40.0</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">sin</span>(x / <span class=\"number\">3.0</span> * <span class=\"variable constant_\">PI</span>)) * <span class=\"number\">2.0</span> / <span class=\"number\">3.0</span>;</span><br><span class=\"line\">    ret += (<span class=\"number\">150.0</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">sin</span>(x / <span class=\"number\">12.0</span> * <span class=\"variable constant_\">PI</span>) + <span class=\"number\">300.0</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">sin</span>(x / <span class=\"number\">30.0</span> * <span class=\"variable constant_\">PI</span>)) * <span class=\"number\">2.0</span> / <span class=\"number\">3.0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n\n<p>这转译过程，要不是有先行者，我怕是要倒在这里了。</p>\n<h3 id=\"HTML模板\"><a href=\"#HTML模板\" class=\"headerlink\" title=\"HTML模板\"></a>HTML模板</h3><p>示例HTML已经工作起来了，现在就是抽出模子的过程。网页并不复杂，可以用简单的HTML template解决问题。John Resig的方案如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Simple JavaScript Templating</span></span><br><span class=\"line\"><span class=\"comment\">// John Resig - https://johnresig.com/ - MIT Licensed</span></span><br><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> cache = &#123;&#125;;</span><br><span class=\"line\">   </span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">tmpl</span> = <span class=\"keyword\">function</span> <span class=\"title function_\">tmpl</span>(<span class=\"params\">str, data</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Figure out if we&#x27;re getting a template, or if we need to</span></span><br><span class=\"line\">    <span class=\"comment\">// load the template - and be sure to cache the result.</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> fn = !<span class=\"regexp\">/\\W/</span>.<span class=\"title function_\">test</span>(str) ?</span><br><span class=\"line\">      cache[str] = cache[str] ||</span><br><span class=\"line\">        <span class=\"title function_\">tmpl</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(str).<span class=\"property\">innerHTML</span>) :</span><br><span class=\"line\">       </span><br><span class=\"line\">      <span class=\"comment\">// Generate a reusable function that will serve as a template</span></span><br><span class=\"line\">      <span class=\"comment\">// generator (and which will be cached).</span></span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"title class_\">Function</span>(<span class=\"string\">&quot;obj&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;var p=[],print=function()&#123;p.push.apply(p,arguments);&#125;;&quot;</span> +</span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"comment\">// Introduce the data as local variables using with()&#123;&#125;</span></span><br><span class=\"line\">        <span class=\"string\">&quot;with(obj)&#123;p.push(&#x27;&quot;</span> +</span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"comment\">// Convert the template into pure JavaScript</span></span><br><span class=\"line\">        str</span><br><span class=\"line\">          .<span class=\"title function_\">replace</span>(<span class=\"regexp\">/[\\r\\t\\n]/g</span>, <span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">split</span>(<span class=\"string\">&quot;&lt;%&quot;</span>).<span class=\"title function_\">join</span>(<span class=\"string\">&quot;\\t&quot;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">replace</span>(<span class=\"regexp\">/((^|%&gt;)[^\\t]*)&#x27;/g</span>, <span class=\"string\">&quot;$1\\r&quot;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\t=(.*?)%&gt;/g</span>, <span class=\"string\">&quot;&#x27;,$1,&#x27;&quot;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">split</span>(<span class=\"string\">&quot;\\t&quot;</span>).<span class=\"title function_\">join</span>(<span class=\"string\">&quot;&#x27;);&quot;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">split</span>(<span class=\"string\">&quot;%&gt;&quot;</span>).<span class=\"title function_\">join</span>(<span class=\"string\">&quot;p.push(&#x27;&quot;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">split</span>(<span class=\"string\">&quot;\\r&quot;</span>).<span class=\"title function_\">join</span>(<span class=\"string\">&quot;\\\\&#x27;&quot;</span>)</span><br><span class=\"line\">      + <span class=\"string\">&quot;&#x27;);&#125;return p.join(&#x27;&#x27;);&quot;</span>);</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"comment\">// Provide some basic currying to the user</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> data ? <span class=\"title function_\">fn</span>( data ) : fn;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<p>看上去很眼熟，以前的项目似乎见到过。</p>\n<p>把之前的示例HTML放在<code>index.html</code>的<code>&lt;script type=&quot;text/template&quot;&gt;&lt;/script&gt;</code>中，在渲染进程里加上代码看看？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">tmpl</span>(<span class=\"string\">&#x27;template&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<p>嗯……报错了。提示“<code>Missing &#39;)&#39; after argument list </code>”。加断点调试发现是标签里的<code>&quot;</code>打断了<code>new Function</code>的语句。尝试了多种方法无效后，索性使用<code>encodeURIComponent</code>想处理掉麻烦的特殊符号，但是这么做之后就无法匹配<code>&lt;%=%&gt;</code>了。</p>\n<p>于是最后选择<a href=\"http://underscorejs.org/\">underscore</a>的template方法。再试试……</p>\n<p>没问题了。之后把允许用户填写的部分抽出来，就可以把<code>index.html</code>的生成放在转译代码身旁了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> template = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;template&#x27;</span>).<span class=\"property\">innerHTML</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">remote.<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>).<span class=\"title function_\">writeFile</span>(path.<span class=\"title function_\">join</span>(<span class=\"variable constant_\">OUTPUT_PATH</span>, <span class=\"string\">&#x27;index.html&#x27;</span>), <span class=\"title function_\">tmpl</span>(template)(data).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/&amp;lt;/g</span>, <span class=\"string\">&#x27;&lt;&#x27;</span>),<span class=\"string\">&#x27;utf8&#x27;</span>, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;生成完毕！\\n将output文件夹下所有文件上传到服务器即可查看效果！&#x27;</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>再次运行，测试生成的网页能否工作？答案当然是可以。</p>\n<h3 id=\"苦力活\"><a href=\"#苦力活\" class=\"headerlink\" title=\"苦力活\"></a>苦力活</h3><p>技术上的问题解决了，现在从用户填写信息到最后生成能用的展示页面也没有问题了。初版下面的问题就是美化了。</p>\n<ul>\n<li>CSS修饰样式</li>\n<li>将模板HTML文件压缩（包括JS和CSS），因为反正用户不会修改内容，不需要考虑可读性</li>\n<li>一些保护性编程和边缘情况兜底</li>\n</ul>\n<p>最后测试结果如下：</p>\n<p><img src=\"https://s2.ax1x.com/2019/04/07/AhbD91.png\" alt=\"AhbD91.png\"></p>\n<p>生成效果如上。</p>\n<h3 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h3><p>初版开发已经完成了，只剩发布出来给别人用了，考虑到<a href=\"https://electronjs.org/docs/tutorial/application-distribution\">官网文档</a>讲得实在不清不楚，不如用一个好工具帮我们完成。</p>\n<p>这里使用<a href=\"https://github.com/electron-userland/electron-builder\">electron-builder</a>。跟着介绍里一步步完善<code>package.json</code>和项目结构。加上依赖后，执行<code>yarn dist</code>生成可分发的文件。</p>\n<p>嗯……果然失败了。原因很简单，网络错误，Electron镜像文件下载失败。还好淘宝有electron镜像。通过设置ELECTRON_MIRROR环境变量，可以大大加快速度。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export ELECTRON_MIRROR=https://npm.taobao.org/mirrors/electron/</span><br></pre></td></tr></table></figure>\n\n<p>然后，再次执行<code>yarn dist</code>，在从Github下载其他相关文件的时候，仍然会网络错误。于是我机智的从网页上下载下来，直接放在了目标目录下。再次执行任务，居然不能识别出来。好吧……</p>\n<p>故事的最后，打包还是完成了。不过由于生成文件的目录写成了相对目录，生成的文件得通过搜索才能找到，考虑后面生成在桌面。</p>\n<p><em>–END–</em></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://www.jianshu.com/p/28bca6529150\">在windows下用nvm 安装node</a></li>\n<li><a href=\"http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference.html\">百度地图JavaScript API v2.0类参考</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/24275216\">Electron 应用实战 (架构篇)</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/GPS_Exchange_Format\">GPS Exchange Format</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest\">XMLHttpRequest | MDN</a></li>\n<li><a href=\"https://skalman.github.io/UglifyJS-online/\">UglifyJS 3: Online JavaScript minifier</a></li>\n<li><a href=\"https://cssminifier.com/\">CSS Minifier</a></li>\n<li><a href=\"https://github.com/pfan123/electron-docs\">pfan123&#x2F;electron-docs electron-docs学习文档</a></li>\n</ul>\n",
            "tags": [
                "JavaScript",
                "Electron",
                "GUI",
                "gpx",
                "template",
                "Electron Builder"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2018/01/27/my-first-pwa-app/",
            "url": "http://shenlvmeng.github.com/blog/2018/01/27/my-first-pwa-app/",
            "title": "我的第一个PWA开发记录",
            "date_published": "2018-01-27T08:14:11.000Z",
            "content_html": "<blockquote>\n<p>注：本文主要记录了创建一个PWA应用的过程，方便日后再次开发类似应用时参考。<br>github链接：<a href=\"https://github.com/shenlvmeng/Distance\">shenlvmeng&#x2F;Distance: 一次PWA的尝试</a></p>\n</blockquote>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p>安装<a href=\"https://www.npmjs.com/package/http-server\">http-server</a>方便本地测试。</p>\n<p>本地开辟文件夹，加入<code>.editorconfig</code>和<code>.gitignore</code>（根据<a href=\"https://raw.github.com/github/gitignore/abad92dac5a4306f72242dae3bca6e277bce3615/Node.gitignore\">样例</a>适当修改）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># http://editorconfig.org</span><br><span class=\"line\"></span><br><span class=\"line\">root = true</span><br><span class=\"line\"></span><br><span class=\"line\">[*]</span><br><span class=\"line\">charset = utf-8</span><br><span class=\"line\">indent_style = space</span><br><span class=\"line\">indent_size = 2</span><br><span class=\"line\">end_of_line = lf</span><br><span class=\"line\">insert_final_newline = true</span><br><span class=\"line\">trim_trailing_whitespace = true</span><br></pre></td></tr></table></figure>\n\n<p>创建<code>index.html</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width,initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Away from home<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;./main.css&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>My first PWA Application<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>See console for more!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在目标文件夹路径下执行<code>http-server</code>，bingo！第一步完成</p>\n<h2 id=\"清单文件\"><a href=\"#清单文件\" class=\"headerlink\" title=\"清单文件\"></a>清单文件</h2><p>创建清单文件<code>manifest.json</code>，描述应用添加到主屏幕需要的信息。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Distance from Home&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;short_name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Distance&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;display&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;standalone&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;start_url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;theme_color&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;#8888ff&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;background_color&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;#aaaaff&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;icons&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;src&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;compass.png&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;sizes&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;144x144&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;image/png&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>并在<code>index.html</code>中引入：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;manifest&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;manifest.json&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加Service-Worker\"><a href=\"#添加Service-Worker\" class=\"headerlink\" title=\"添加Service Worker\"></a>添加Service Worker</h2><p><a href=\"https://shenlvmeng.github.io/blog/2017/09/04/pwa-and-hybrid-brief/\">Service Worker</a>这个东西可以实现页面的缓存和离线访问，让应用逼近app的体验。</p>\n<p>可以在HTML里插入<code>&lt;script&gt;</code>标签引入，这里单独定义一个app.js。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Registering ServiceWorker</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ( <span class=\"string\">&#x27;serviceWorker&#x27;</span> <span class=\"keyword\">in</span> navigator ) &#123;</span><br><span class=\"line\">  navigator.<span class=\"property\">serviceWorker</span>.<span class=\"title function_\">register</span>( <span class=\"string\">&#x27;sw.js&#x27;</span> ).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\">registration</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Registration was successful</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( <span class=\"string\">&#x27;ServiceWorker registration successful. Scope: &#x27;</span> + registration.<span class=\"property\">scope</span> )</span><br><span class=\"line\">  &#125;).<span class=\"title function_\">catch</span>(<span class=\"keyword\">function</span>(<span class=\"params\">err</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Registration failed with error</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( <span class=\"string\">&#x27;ServiceWorker registration failed&#x27;</span> + err);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>index.html</code>中引用。</p>\n<p>下面实现service worker。主要是三个时机：</p>\n<ul>\n<li>脚本<strong>安装</strong>时，写入缓存</li>\n<li>脚本<strong>获取数据</strong>时，先查找缓存</li>\n<li>缓存<strong>更新版本</strong>时，删除原先版本的缓存</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 脚本安装时</span></span><br><span class=\"line\">self.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;install&#x27;</span>, <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">  event.<span class=\"title function_\">waitUntil</span>(</span><br><span class=\"line\">    caches.<span class=\"title function_\">open</span>(cacheStorageKey)</span><br><span class=\"line\">      .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">cache</span> =&gt;</span> cache.<span class=\"title function_\">addAll</span>(cacheList))</span><br><span class=\"line\">      <span class=\"comment\">// 保证在页面更新过程中，新的Service Worker脚本能立即激活生效</span></span><br><span class=\"line\">      .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> self.<span class=\"title function_\">skipWaiting</span>())</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过脚本fetch数据</span></span><br><span class=\"line\">self.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;fetch&#x27;</span>, <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">  event.<span class=\"title function_\">respondWith</span>(</span><br><span class=\"line\">    <span class=\"comment\">// 先在cache中找</span></span><br><span class=\"line\">    caches.<span class=\"title function_\">match</span>(event.<span class=\"property\">request</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// cache中没有再使用fetch</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> res || <span class=\"title function_\">fetch</span>(event.<span class=\"property\">request</span>.<span class=\"property\">url</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 更新静态资源</span></span><br><span class=\"line\">self.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;activate&#x27;</span>, <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">  event.<span class=\"title function_\">waitUntil</span>(</span><br><span class=\"line\">    caches.<span class=\"title function_\">keys</span>().<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">cacheNames</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>(cacheNames.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">name</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (name !== cacheStorageKey) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> caches.<span class=\"title function_\">delete</span>(name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;));</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>其中，有下面一些名词：</p>\n<ul>\n<li><code>self</code>: Service Worker作用域, 也是全局变量</li>\n<li><code>caches</code>: 缓存接口</li>\n<li><code>waitUntil</code>，<code>ExtendableEvent.waitUntil()</code>方法——这会确保Service Worker 不会在<code>waitUntil()</code>里面的代码执行完毕之前安装完成。</li>\n<li><code>skipWait</code>，表示强制当前处在waiting状态的脚本进入activate状态</li>\n</ul>\n<p>在浏览器中打开<code>localhost:8080/</code>即可，注意PWA<strong>必须运行在HTTPS的环境下</strong>。</p>\n<h2 id=\"加入百度地图支持\"><a href=\"#加入百度地图支持\" class=\"headerlink\" title=\"加入百度地图支持\"></a>加入百度地图支持</h2><p>参考<a href=\"http://lbsyun.baidu.com/index.php?title=jspopular\">官方API接入支持</a>。</p>\n<p>添加文件<code>index.js</code>，写入如下内容：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> url4PC = <span class=\"string\">&#x27;https://api.map.baidu.com/api?v=2.0&amp;ak=你的秘钥&amp;callback=init&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> init = <span class=\"variable language_\">window</span>.<span class=\"property\">init</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> map = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 为了能成功调用到callback</span></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">init</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  map = <span class=\"keyword\">new</span> <span class=\"title class_\">BMap</span>.<span class=\"title class_\">Map</span>(<span class=\"string\">&#x27;map&#x27;</span>);</span><br><span class=\"line\">  map.<span class=\"title function_\">centerAndZoom</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">BMap</span>.<span class=\"title class_\">Point</span>(<span class=\"number\">121.491</span>, <span class=\"number\">31.233</span>), <span class=\"number\">11</span>);</span><br><span class=\"line\">  map.<span class=\"title function_\">enableScrollWheelZoom</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">window</span>.<span class=\"property\">init</span> = init;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">loadMap</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> script = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;script&#x27;</span>);</span><br><span class=\"line\">  script.<span class=\"property\">src</span> = url4PC;</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(script);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">onload</span> = loadMap;</span><br></pre></td></tr></table></figure>\n\n<p>当然需要添加一点CSS，这里从略。</p>\n<h2 id=\"Service-Worker支持跨域\"><a href=\"#Service-Worker支持跨域\" class=\"headerlink\" title=\"Service Worker支持跨域\"></a>Service Worker支持跨域</h2><p>接下来问题来了，打开网页测试，页面刷新时Service Worker会抛出跨域相关的错误。</p>\n<p><img src=\"https://s2.ax1x.com/2019/04/07/Ahb0hR.png\" alt=\"Ahb0hR.png\"></p>\n<p>再正常不过了，未经配置的情况下，fetch是不允许跨域的。注意<code>sw.js</code>中的一段：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">caches.<span class=\"title function_\">match</span>(event.<span class=\"property\">request</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// cache中没有再使用fetch</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res || <span class=\"title function_\">fetch</span>(event.<span class=\"property\">request</span>.<span class=\"property\">url</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>这里我们不仅有跨域请求，还使用着JSONP的方式。后续地图数据和地图图片的展示请求也比较复杂。再经过多次加入<code>respondWith()</code>响应块失败后，干脆跳过这部分跨域的处理。不过还是留下了一个函数，方便后面拓展。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isCORSRequest</span>(<span class=\"params\">url</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> url.<span class=\"title function_\">search</span>(host) === -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 并存该函数为日后拓展所用</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">handleFetchRequest</span>(<span class=\"params\">req</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> request = <span class=\"title function_\">isCORSRequest</span>(req.<span class=\"property\">url</span>) ?</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Request</span>(req.<span class=\"property\">url</span>, &#123; <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;cors&#x27;</span> &#125;)</span><br><span class=\"line\">    : req;</span><br><span class=\"line\">  <span class=\"title function_\">fetch</span>(req);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过脚本fetch数据</span></span><br><span class=\"line\">self.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;fetch&#x27;</span>, <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title function_\">isCORSRequest</span>(event.<span class=\"property\">request</span>.<span class=\"property\">url</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  event.<span class=\"title function_\">respondWith</span>(</span><br><span class=\"line\">    <span class=\"comment\">// 先在cache中找</span></span><br><span class=\"line\">    caches.<span class=\"title function_\">match</span>(event.<span class=\"property\">request</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// cache中没有再使用fetch</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> res || <span class=\"title function_\">handleFetchRequest</span>(event.<span class=\"property\">request</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"目标点管理\"><a href=\"#目标点管理\" class=\"headerlink\" title=\"目标点管理\"></a>目标点管理</h2><p>核心功能之一是，可以新增计算距离的目标点。在我的设计里，有两种用户友好的添加方式：</p>\n<ul>\n<li>找不到地点时，可以搜索出地点，通过搜索结果设置</li>\n<li>明确地图上位置时，直接通过鼠标操作设置</li>\n</ul>\n<p>前面的利用AutoComplete类，完成自动补全和搜索功能。值得注意的一个坑是，在初次设置好map对象后，每次的搜索结果都会以第一次初始化地点为中心搜索结果。解决方案是，每次<code>&lt;input&gt;</code>框聚焦时，重新构造一个AutoComplete类。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;search&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;searchbox&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;position&quot;</span> <span class=\"attr\">size</span>=<span class=\"string\">&quot;20&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;输入地点或在地图上双击点选&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;searchBtn&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;searchBtn&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">initSearchLocation</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 工厂方法，每次聚焦时新创建一个AutoComplete对象</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">setAutoComplete</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> lastVal = doc.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;position&#x27;</span>).<span class=\"property\">value</span>.<span class=\"title function_\">trim</span>();</span><br><span class=\"line\">      <span class=\"comment\">// 建立一个自动完成的对象</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> searchBox = <span class=\"keyword\">new</span> <span class=\"title class_\">BMap</span>.<span class=\"title class_\">Autocomplete</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">input</span>: <span class=\"string\">&quot;position&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">location</span>: map</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      doc.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;position&#x27;</span>).<span class=\"property\">value</span> = lastVal;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 鼠标点击下拉列表后的事件</span></span><br><span class=\"line\">      searchBox.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;onconfirm&quot;</span>, <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> value = event.<span class=\"property\">item</span>.<span class=\"property\">value</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> searchWord = <span class=\"string\">`<span class=\"subst\">$&#123;value.province&#125;</span><span class=\"subst\">$&#123;value.city&#125;</span><span class=\"subst\">$&#123;value.district&#125;</span><span class=\"subst\">$&#123;value.street&#125;</span><span class=\"subst\">$&#123;value.business&#125;</span>`</span>;</span><br><span class=\"line\">        <span class=\"title function_\">setPlace</span>(searchWord);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">setPlace</span>(<span class=\"params\">searchWord</span>)&#123;</span><br><span class=\"line\">      map.<span class=\"title function_\">clearOverlays</span>();</span><br><span class=\"line\">      <span class=\"comment\">// 搜索</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> cleverSearch = <span class=\"keyword\">new</span> <span class=\"title class_\">BMap</span>.<span class=\"title class_\">LocalSearch</span>(map, &#123;</span><br><span class=\"line\">        <span class=\"attr\">onSearchComplete</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">pauseUpdate</span>();</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!cleverSearch.<span class=\"title function_\">getResults</span>().<span class=\"title function_\">getPoi</span>(<span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;未找到指定地点，换个关键词试试？&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"comment\">// 获取第一个智能搜索的结果</span></span><br><span class=\"line\">          <span class=\"keyword\">const</span> res = cleverSearch.<span class=\"title function_\">getResults</span>().<span class=\"title function_\">getPoi</span>(<span class=\"number\">0</span>).<span class=\"property\">point</span>;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> marker = <span class=\"keyword\">new</span> <span class=\"title class_\">BMap</span>.<span class=\"title class_\">Marker</span>(res);</span><br><span class=\"line\">          map.<span class=\"title function_\">centerAndZoom</span>(res, <span class=\"number\">18</span>);</span><br><span class=\"line\">          map.<span class=\"title function_\">addOverlay</span>(marker);</span><br><span class=\"line\">          <span class=\"title function_\">addToBeacons</span>(marker);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      cleverSearch.<span class=\"title function_\">search</span>(searchWord);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 不使用自动补全，直接回车或点击图标</span></span><br><span class=\"line\">    doc.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;position&quot;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;focus&quot;</span>, <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">setAutoComplete</span>();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// 省略了其他的绑定事件</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>下一步是支持标记点（BeaconNodes）的管理，离线持久化采用<code>localStorage</code>，技术上倒没有什么难度。用户交互上，考虑用右键点击（for PC）和长按操作（PC Mobile）添加，点击标记删除。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 从页面新增目标点</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">addToBeacons</span>(<span class=\"params\">point</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> tag = win.<span class=\"title function_\">prompt</span>(<span class=\"string\">&quot;给Beacon点起个名字吧&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (tag === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  tag = tag.<span class=\"title function_\">trim</span>().<span class=\"title function_\">substr</span>(<span class=\"number\">0</span>, <span class=\"number\">20</span>) || <span class=\"string\">`未知地点#<span class=\"subst\">$&#123;seq&#125;</span>`</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 第一个点默认活跃</span></span><br><span class=\"line\">  beaconNodes.<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">id</span>: seq,</span><br><span class=\"line\">    point,</span><br><span class=\"line\">    tag,</span><br><span class=\"line\">    <span class=\"attr\">isActive</span>: !beaconNodes.<span class=\"property\">length</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"title function_\">addBeacon</span>(seq, point, tag, beaconNodes.<span class=\"property\">length</span> === <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"title function_\">paintDropdown</span>();</span><br><span class=\"line\">  <span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">setItem</span>(<span class=\"variable constant_\">STORAGE_KEY</span>, <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(beaconNodes));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">removeFromBeacon</span>(<span class=\"params\">id</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!beaconNodes.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  beaconNodes.<span class=\"title function_\">splice</span>(beaconNodes.<span class=\"title function_\">findIndex</span>(<span class=\"function\"><span class=\"params\">node</span> =&gt;</span> node.<span class=\"property\">id</span> == id), <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"title function_\">paintDropdown</span>();</span><br><span class=\"line\">  <span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">setItem</span>(<span class=\"variable constant_\">STORAGE_KEY</span>, <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(beaconNodes));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在地图上新增目标点，方便复用</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">addBeacon</span>(<span class=\"params\">id, point, tag, isActive</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> icon = <span class=\"keyword\">new</span> <span class=\"title class_\">BMap</span>.<span class=\"title class_\">Icon</span>(<span class=\"string\">`imgs/location-<span class=\"subst\">$&#123;<span class=\"number\">2</span>-isActive&#125;</span>.png`</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">BMap</span>.<span class=\"title class_\">Size</span>(<span class=\"number\">50</span>, <span class=\"number\">50</span>));</span><br><span class=\"line\">  <span class=\"keyword\">const</span> mark = <span class=\"keyword\">new</span> <span class=\"title class_\">BMap</span>.<span class=\"title class_\">Marker</span>(point, &#123; icon, <span class=\"attr\">enableMassClear</span>: <span class=\"literal\">false</span> &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> label = <span class=\"keyword\">new</span> <span class=\"title class_\">BMap</span>.<span class=\"title class_\">Label</span>(tag,&#123; <span class=\"attr\">offset</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">BMap</span>.<span class=\"title class_\">Size</span>(<span class=\"number\">32</span>, <span class=\"number\">2</span>) &#125;);</span><br><span class=\"line\">  label.<span class=\"title function_\">setStyle</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">border</span>: <span class=\"string\">&quot;#dedede&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">padding</span>: <span class=\"string\">&quot;3px 5px&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;font-size&quot;</span>: <span class=\"string\">&quot;14px&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;font-weight&quot;</span>: <span class=\"string\">&quot;bold&quot;</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  mark.<span class=\"title function_\">setLabel</span>(label); </span><br><span class=\"line\">  mark.<span class=\"title function_\">getLabel</span>().<span class=\"title function_\">setTitle</span>(tag);</span><br><span class=\"line\">  mark.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (win.<span class=\"title function_\">confirm</span>(<span class=\"string\">`确认要删除Beacon:<span class=\"subst\">$&#123;mark.getLabel().getTitle()&#125;</span>`</span>)) &#123;</span><br><span class=\"line\">      map.<span class=\"title function_\">removeOverlay</span>(mark);</span><br><span class=\"line\">      <span class=\"title function_\">removeFromBeacon</span>(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  map.<span class=\"title function_\">addOverlay</span>(mark);</span><br><span class=\"line\">  seq = id + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">initMap</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 根据storage填充地图</span></span><br><span class=\"line\">  <span class=\"comment\">// 注意这里必须使用Point类</span></span><br><span class=\"line\">  beaconNodes.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">node</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">addBeacon</span>(node.<span class=\"property\">id</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">BMap</span>.<span class=\"title class_\">Point</span>(node.<span class=\"property\">point</span>.<span class=\"property\">lng</span>, node.<span class=\"property\">point</span>.<span class=\"property\">lat</span>), node.<span class=\"property\">tag</span>, node.<span class=\"property\">isActive</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 避免和其他事件冲突，使用暂无占用的右键点击</span></span><br><span class=\"line\">  map.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;rightclick&quot;</span>, <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">addToBeacons</span>(event.<span class=\"property\">point</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"comment\">// 支持移动设备，长按</span></span><br><span class=\"line\">  map.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;longpress&quot;</span>, <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">addToBeacons</span>(event.<span class=\"property\">point</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在管理上，新增了下拉菜单管理当前所有节点，这里需要将离线的BeaconNodes映射成DOM结构，考虑到文件已略大，且这一部分比较繁琐，和业务关系不大，故单独抽出一个文件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dom.js</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 无状态，与业务弱相关</span></span><br><span class=\"line\"><span class=\"comment\"> * 只渲染下拉菜单</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">renderDropdown</span>(<span class=\"params\">obj, dom, isInit</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!obj) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  dom.<span class=\"property\">innerText</span> = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">  <span class=\"comment\">// render过程</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> fragment = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createDocumentFragment</span>();</span><br><span class=\"line\">  obj.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">node</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> div = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;DIV&#x27;</span>);</span><br><span class=\"line\">    div.<span class=\"property\">className</span> = <span class=\"string\">`node_wrapper<span class=\"subst\">$&#123;node.isActive ? <span class=\"string\">&quot; active&quot;</span> : <span class=\"string\">&quot;&quot;</span>&#125;</span>`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> innerHTML = <span class=\"string\">`&lt;span&gt;#<span class=\"subst\">$&#123;node.id&#125;</span>&lt;/span&gt;&lt;span class=&quot;node-tag&quot;&gt;<span class=\"subst\">$&#123;node.tag&#125;</span>&lt;/span&gt;`</span>;</span><br><span class=\"line\">    div.<span class=\"property\">innerHTML</span> = innerHTML;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> operateBtn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;DIV&#x27;</span>);</span><br><span class=\"line\">    operateBtn.<span class=\"property\">className</span> = <span class=\"string\">&quot;operateBtn&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.<span class=\"property\">isActive</span>) &#123;</span><br><span class=\"line\">      operateBtn.<span class=\"property\">className</span> += <span class=\"string\">&quot; active&quot;</span></span><br><span class=\"line\">      operateBtn.<span class=\"property\">innerText</span> = <span class=\"string\">&quot;Deactive!&quot;</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      operateBtn.<span class=\"property\">innerText</span> = <span class=\"string\">&quot;Active!&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    div.<span class=\"title function_\">appendChild</span>(operateBtn);</span><br><span class=\"line\">    <span class=\"comment\">// 方便统一事件绑定</span></span><br><span class=\"line\">    div.<span class=\"property\">dataset</span>.<span class=\"property\">nid</span> = node.<span class=\"property\">id</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> div;</span><br><span class=\"line\">  &#125;).<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">div</span> =&gt;</span> &#123;</span><br><span class=\"line\">    fragment.<span class=\"title function_\">appendChild</span>(div);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  dom.<span class=\"title function_\">appendChild</span>(fragment);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 多次调用只监听一次</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isInit) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 下拉事件</span></span><br><span class=\"line\">    dom.<span class=\"property\">parentNode</span>.<span class=\"property\">children</span>[<span class=\"number\">0</span>].<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (dom.<span class=\"property\">parentNode</span>.<span class=\"property\">className</span>.<span class=\"title function_\">search</span>(<span class=\"string\">&quot;hide&quot;</span>) !== -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        dom.<span class=\"property\">parentNode</span>.<span class=\"property\">className</span> = <span class=\"string\">&quot;dropdown dropdown_container&quot;</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        dom.<span class=\"property\">parentNode</span>.<span class=\"property\">className</span> += <span class=\"string\">&quot; hide&quot;</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>HTML和CSS部分就不再赘述了。</p>\n<p>在下拉菜单下，可以点击条目跳转到相应位置，以及点击按钮切换当前活动的BeaconNode。这部分实现如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">initDropdown</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">paintDropdown</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 事件监听</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> dropdown = doc.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;dropdown&quot;</span>);</span><br><span class=\"line\">  dropdown.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> nid = event.<span class=\"property\">target</span>.<span class=\"property\">parentNode</span>.<span class=\"property\">dataset</span>.<span class=\"property\">nid</span> || event.<span class=\"property\">target</span>.<span class=\"property\">dataset</span>.<span class=\"property\">nid</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> node = beaconNodes.<span class=\"title function_\">find</span>(<span class=\"function\"><span class=\"params\">node</span> =&gt;</span> node.<span class=\"property\">id</span> == nid);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (event.<span class=\"property\">target</span>.<span class=\"property\">tagName</span>.<span class=\"title function_\">toLowerCase</span>() === <span class=\"string\">&quot;div&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> prev = beaconNodes.<span class=\"title function_\">find</span>(<span class=\"function\"><span class=\"params\">node</span> =&gt;</span> node.<span class=\"property\">isActive</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (prev) &#123;</span><br><span class=\"line\">          prev.<span class=\"property\">isActive</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">          beaconMarkers[prev.<span class=\"property\">id</span>].<span class=\"title function_\">setIcon</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">BMap</span>.<span class=\"title class_\">Icon</span>(<span class=\"string\">&quot;imgs/location-2.png&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">BMap</span>.<span class=\"title class_\">Size</span>(<span class=\"number\">40</span>, <span class=\"number\">40</span>)));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        node.<span class=\"property\">isActive</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"title function_\">paintDropdown</span>();</span><br><span class=\"line\">        beaconMarkers[nid].<span class=\"title function_\">setIcon</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">BMap</span>.<span class=\"title class_\">Icon</span>(<span class=\"string\">&quot;imgs/location-1.png&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">BMap</span>.<span class=\"title class_\">Size</span>(<span class=\"number\">40</span>, <span class=\"number\">40</span>)));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      node &amp;&amp; map.<span class=\"title function_\">panTo</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">BMap</span>.<span class=\"title class_\">Point</span>(node.<span class=\"property\">point</span>.<span class=\"property\">lng</span>, node.<span class=\"property\">point</span>.<span class=\"property\">lat</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然了，标记点的增删改查还剩下改没有实现，目前来看，和“改”相关的业务是能拖动标记点，方便用户随时更改标记点位置。在<code>addBeacon()</code>函数中新增相关代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mark.<span class=\"title function_\">enableDragging</span>();</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">mark.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;dragend&#x27;</span>, <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">editToBeacons</span>(id, &#123; <span class=\"attr\">point</span>: event.<span class=\"property\">point</span> &#125;);</span><br><span class=\"line\">  <span class=\"title function_\">paintDistance</span>(lastPoint);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>而<code>editToBeacons()</code>函数设计如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">editToBeacons</span>(<span class=\"params\">id, newProps</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> index = beaconNodes.<span class=\"title function_\">findIndex</span>(<span class=\"function\"><span class=\"params\">node</span> =&gt;</span> node.<span class=\"property\">id</span> == id);</span><br><span class=\"line\">  <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(beaconNodes[index], newProps);</span><br><span class=\"line\">  <span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">setItem</span>(<span class=\"variable constant_\">STORAGE_KEY</span>, <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(beaconNodes));</span><br><span class=\"line\">  <span class=\"comment\">// 不是所有的属性更改都有重绘，交给调用者处理重绘</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"计算距离\"><a href=\"#计算距离\" class=\"headerlink\" title=\"计算距离\"></a>计算距离</h2><p>计算距离包括距离和方向两部分，既然能拿到两点的经纬度信息，这两个值肯定可以计算出来。计算距离上利用百度地图的API，计算角度上，通过<code>Math.atan2</code>换算得到。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">paintDistance</span>(<span class=\"params\">currentPoint</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> info;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> target = beaconNodes.<span class=\"title function_\">find</span>(<span class=\"function\"><span class=\"params\">node</span> =&gt;</span> node.<span class=\"property\">isActive</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!target || !currentPoint) &#123;</span><br><span class=\"line\">    info = <span class=\"string\">&quot;N/A , 未知方向&quot;</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> distance = map.<span class=\"title function_\">getDistance</span>(currentPoint, target.<span class=\"property\">point</span>) || <span class=\"string\">&quot;N/A&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (distance &gt; <span class=\"number\">10000</span>) &#123;</span><br><span class=\"line\">      distance = <span class=\"string\">`<span class=\"subst\">$&#123;(distance / <span class=\"number\">1000</span>).toFixed(<span class=\"number\">2</span>)&#125;</span>km`</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (distance &gt; <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">      distance = <span class=\"string\">`<span class=\"subst\">$&#123;distance.toFixed(<span class=\"number\">0</span>)&#125;</span>m`</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      distance = <span class=\"string\">`就在附近...`</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 工具函数位于utils.js</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> deg = <span class=\"title function_\">getDirection</span>(target.<span class=\"property\">point</span>, currentPoint);</span><br><span class=\"line\">    info = <span class=\"string\">`<span class=\"subst\">$&#123;distance&#125;</span> , <span class=\"subst\">$&#123;deg&#125;</span>点钟方向`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getDirection</span>(<span class=\"params\">p1, p2</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> pi = <span class=\"title class_\">Math</span>.<span class=\"property\">PI</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [x2, y2, x1, y1] = [p1.<span class=\"property\">lng</span>, p1.<span class=\"property\">lat</span>, p2.<span class=\"property\">lng</span>, p2.<span class=\"property\">lat</span>];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> rad = <span class=\"title class_\">Math</span>.<span class=\"title function_\">atan2</span>(y2 - y1, x2 - x1);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> absRad = <span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(rad);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> clockPointer;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (absRad &lt; pi / <span class=\"number\">12</span>) &#123;</span><br><span class=\"line\">    clockPointer = <span class=\"number\">3</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (absRad &lt; pi / <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">    clockPointer = rad &gt; <span class=\"number\">0</span> ? <span class=\"number\">2</span> : <span class=\"number\">4</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (absRad &lt; pi * <span class=\"number\">5</span> / <span class=\"number\">12</span>) &#123;</span><br><span class=\"line\">    clockPointer = rad &gt; <span class=\"number\">0</span> ? <span class=\"number\">1</span> : <span class=\"number\">5</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (absRad &lt; pi * <span class=\"number\">7</span> / <span class=\"number\">12</span>) &#123;</span><br><span class=\"line\">    clockPointer = rad &gt; <span class=\"number\">0</span> ? <span class=\"number\">12</span> : <span class=\"number\">6</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (absRad &lt; pi * <span class=\"number\">3</span> / <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">    clockPointer = rad &gt; <span class=\"number\">0</span> ? <span class=\"number\">11</span> : <span class=\"number\">7</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (absRad &lt; pi * <span class=\"number\">11</span> / <span class=\"number\">12</span>) &#123;</span><br><span class=\"line\">    clockPointer = rad &gt; <span class=\"number\">0</span> ? <span class=\"number\">10</span> : <span class=\"number\">8</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    clockPointer = <span class=\"number\">9</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> clockPointer;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/25459319\">PWA 入门: 写个非常简单的 PWA 页面</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/29570875\">轻松把你的项目升级到PWA</a></li>\n<li><a href=\"https://sii.im/playground/notes/\">Notes</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Manifest\">Web App Manifest</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers\">使用 Service Workers</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000008491458\">Service Workers 与离线缓存</a></li>\n<li><a href=\"http://lbsyun.baidu.com/jsdemo.htm\">地图API示例</a></li>\n<li><a href=\"http://lbsyun.baidu.com/cms/jsapi/reference/jsapi_reference.html\">百度地图JSAPIv2.0类参考</a></li>\n</ul>\n",
            "tags": [
                "JavaScript",
                "PWA",
                "方法论"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2017/11/17/photogallery-improvement-2/",
            "url": "http://shenlvmeng.github.com/blog/2017/11/17/photogallery-improvement-2/",
            "title": "Photogallery技术演进第2步",
            "date_published": "2017-11-17T12:56:12.000Z",
            "content_html": "<h2 id=\"构建工具升级\"><a href=\"#构建工具升级\" class=\"headerlink\" title=\"构建工具升级\"></a>构建工具升级</h2><p>因为要拆分代码，便于管理，需要使用<code>import</code>和<code>export</code>，因此必须要引入webpack这样的打包工具到gulp中，使用<a href=\"https://github.com/shama/webpack-stream\">webpack-stream</a>，具体使用方法和其他的gulp插件类似，在pipe在这样插入就行了<code>.pipe(webpack())</code>，配置方式和webpack一样。（webpack中引入babel-loader的过程就不赘述了）引入webpack后，开发流程和一起类似，<code>gulp</code>启动测试服务器，使用webpack通过<code>entry.js</code>打包代码，CSS和JSON相关流程不变。release时，增加了minify的流程，让js流程后的代码再压缩一遍。</p>\n<p>另外，引入babel后，可以用ES6语法改写<code>gulpfile.js</code>。最后的<code>gulpfile.babel.js</code>像下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> gulp <span class=\"keyword\">from</span> <span class=\"string\">&#x27;gulp&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> rename <span class=\"keyword\">from</span> <span class=\"string\">&#x27;gulp-rename&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> uglify <span class=\"keyword\">from</span> <span class=\"string\">&#x27;gulp-uglify&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> cleanCSS <span class=\"keyword\">from</span> <span class=\"string\">&#x27;gulp-clean-css&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jsonminify <span class=\"keyword\">from</span> <span class=\"string\">&#x27;gulp-jsonminify&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> webserver <span class=\"keyword\">from</span> <span class=\"string\">&#x27;gulp-webserver&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> webpack <span class=\"keyword\">from</span> <span class=\"string\">&#x27;webpack-stream&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;js&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;src/index.js&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">webpack</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">          &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>, <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span>, <span class=\"attr\">loader</span>: <span class=\"string\">&quot;babel-loader&quot;</span> &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">rename</span>(<span class=\"string\">&quot;index.js&quot;</span>))</span><br><span class=\"line\">\t\t.<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;dist&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;minify&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;dist/index.js&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">uglify</span>())</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">rename</span>(<span class=\"string\">&quot;index.min.js&quot;</span>))</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&quot;dist&quot;</span>));</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;css&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>([<span class=\"string\">&#x27;src/index.css&#x27;</span>])</span><br><span class=\"line\">\t\t.<span class=\"title function_\">pipe</span>(<span class=\"title function_\">cleanCSS</span>(&#123;<span class=\"attr\">compatibility</span>: <span class=\"string\">&#x27;ie8&#x27;</span>&#125;))</span><br><span class=\"line\">\t\t.<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;dist&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;json&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;src/meta*.json&#x27;</span>)</span><br><span class=\"line\">\t\t.<span class=\"title function_\">pipe</span>(<span class=\"title function_\">jsonminify</span>())</span><br><span class=\"line\">\t\t.<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;dist&#x27;</span>))</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;webserver&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;./&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">webserver</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">livereload</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">directoryListing</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">open</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;watch&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  gulp.<span class=\"title function_\">watch</span>([<span class=\"string\">&#x27;src/*.js&#x27;</span>, <span class=\"string\">&#x27;src/**/*.js&#x27;</span>, <span class=\"string\">&#x27;src/**/*.vue&#x27;</span>], [<span class=\"string\">&#x27;js&#x27;</span>]);</span><br><span class=\"line\">  gulp.<span class=\"title function_\">watch</span>(<span class=\"string\">&#x27;src/*.css&#x27;</span>, [<span class=\"string\">&#x27;css&#x27;</span>]);</span><br><span class=\"line\">  gulp.<span class=\"title function_\">watch</span>(<span class=\"string\">&#x27;src/*.json&#x27;</span>, [<span class=\"string\">&#x27;json&#x27;</span>]);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;assets&#x27;</span>, [<span class=\"string\">&#x27;json&#x27;</span>, <span class=\"string\">&#x27;css&#x27;</span>, <span class=\"string\">&#x27;js&#x27;</span>]);</span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;default&#x27;</span>, [<span class=\"string\">&#x27;assets&#x27;</span>, <span class=\"string\">&#x27;webserver&#x27;</span>, <span class=\"string\">&#x27;watch&#x27;</span>]);</span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&quot;release&quot;</span>, [<span class=\"string\">&#x27;assets&#x27;</span>, <span class=\"string\">&#x27;minify&#x27;</span>]);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用单文件组件\"><a href=\"#使用单文件组件\" class=\"headerlink\" title=\"使用单文件组件\"></a>使用单文件组件</h2><p>引入webpack后，开始高高兴兴地分模块拆分代码，却发现分组件使用Vue时，不是单纯地定义组件配置信息，然后传给入口组件就行。必须要引入全家桶，<code>vue-loader</code>等工具，文件不得不用.vue这样的形式组织（现在开始觉得React组件的组织比Vue舒服了）。本来使用单文件的形式就是想尽量精简，可随着功能逐渐健全，看来重构也是避免不了的啊。在<a href=\"https://github.com/vuejs/vue-loader\">vue-loader</a>的介绍里，居然还要通过<code>vue-cli</code>来大一统，但是我一是想维持项目尽量轻量精简，使用gulp的工具链；二是项目已经写了很久了，全部迁移过去成本有些大。于是，通过<code>vue-cli</code>新建样本项目，对着<code>package.json</code>和<code>webpack.config.js</code>一抄了事。</p>\n<p>加上种种<code>.vue</code>文件的相关配置，<code>gulp.babel.js</code>最后长下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;js&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;src/index.js&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">webpack</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">          &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>, <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span>, <span class=\"attr\">loader</span>: <span class=\"string\">&quot;babel-loader&quot;</span> &#125;,</span><br><span class=\"line\">          &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.vue$/</span>, <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;vue-loader&#x27;</span>&#125;,</span><br><span class=\"line\">          &#123; <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(png|jpg|gif|svg)$/</span>, <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;file-loader&#x27;</span>, <span class=\"attr\">options</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;[name].[ext]?[hash]&#x27;</span> &#125; &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">alias</span>: &#123;</span><br><span class=\"line\">          <span class=\"string\">&#x27;vue$&#x27;</span>: <span class=\"string\">&#x27;vue/dist/vue.esm.js&#x27;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">extensions</span>: [<span class=\"string\">&#x27;*&#x27;</span>, <span class=\"string\">&#x27;.js&#x27;</span>, <span class=\"string\">&#x27;.vue&#x27;</span>, <span class=\"string\">&#x27;.json&#x27;</span>]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">rename</span>(<span class=\"string\">&quot;index.js&quot;</span>))</span><br><span class=\"line\">\t\t.<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;dist&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n\n<p>下面需要开始拆分代码了。根据React&#x2F;Vue这样框架通常的设计经验，需要下面一些组成：</p>\n<ul>\n<li><code>actions</code>  存储状态管理的动作</li>\n<li><code>components</code>  存储相互解耦的”dumb”组件，最好和业务无关</li>\n<li><code>constants</code>  存储全局常量</li>\n<li><code>containers</code>  存储组织<code>components</code>的业务容器组件</li>\n<li><code>entry</code>  存储入口文件</li>\n<li><code>helper</code>  存储工具函数</li>\n<li><code>reducers</code>  存储状态管理的reducers</li>\n<li><code>settings</code>  存储全局配置，通常用来初始化store</li>\n<li><code>store</code>  存储全局状态</li>\n<li><code>templates</code>  存储引入js的html文件</li>\n</ul>\n<p>我的项目比较简单，一没有状态管理（后面复杂了之后可能会引入😂），二只有三个组件，只要上面的<code>components</code>, <code>constants</code>, <code>containers</code>, <code>helper</code>的就够用了。最后src下的文件目录大概像下面这样</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── App.vue</span><br><span class=\"line\">├── components</span><br><span class=\"line\">│   └── column</span><br><span class=\"line\">│       └── Column.vue</span><br><span class=\"line\">├── constants</span><br><span class=\"line\">│   └── index.js</span><br><span class=\"line\">├── containers</span><br><span class=\"line\">│   ├── info</span><br><span class=\"line\">│   │   └── Info.vue</span><br><span class=\"line\">│   └── wall</span><br><span class=\"line\">│       └── Wall.vue</span><br><span class=\"line\">├── helper</span><br><span class=\"line\">│   └── utils.js</span><br><span class=\"line\">├── index.css</span><br><span class=\"line\">└── index.js</span><br></pre></td></tr></table></figure>\n\n<p>在拆分时遇到了一些数据需要从最外层透传到子组件的情况，如<code>res</code>, <code>tag_list</code>, <code>tag_keys</code>。不过他们是只读的，而且数目很少，所以并不需要状态管理，只用通过props传下去就行了。</p>\n<h2 id=\"新功能\"><a href=\"#新功能\" class=\"headerlink\" title=\"新功能\"></a>新功能</h2><p>重构完之后，终于可以写新功能了。新功能主要是增加两个伪路由，方便页面的分享（这个需求我之前遇到过几次了）。页面是spa类型的，所以前端路由可以采用hash或history H5 API来实现。同时也有许多在这个基础上了前端路由库，提供一站式解决方案。我的需求目前其实不需要完整的路由方案：</p>\n<ul>\n<li>图片详情页可以分享</li>\n<li>搜索结果可以分享</li>\n</ul>\n<p>因此，设计上使用hash的方案，对于图片详情页，用<code>!</code>开头，后接图片序号。对于搜索结果页，则没有开头的<code>!</code>，仅使用<code>/</code>隔开每一个搜索关键字。对hash的读写上，没有什么困难的地方：</p>\n<ul>\n<li><strong>读</strong>：<code>App.vue</code>根据hash注入对应的数据，更改默认视图，对于图片详情页，更改展示组件</li>\n<li><strong>写</strong>：切换组件时，记录当前数据到<code>location.hash</code>，方便直接复制链接分享</li>\n</ul>\n<h2 id=\"后面的计划\"><a href=\"#后面的计划\" class=\"headerlink\" title=\"后面的计划\"></a>后面的计划</h2><p>现在网站还是有点单调了。只能自娱自乐，没有互动。后面应该会考虑在每张图片接入Disqus的问题。</p>\n",
            "tags": [
                "重构",
                "脚手架",
                "技改",
                "Vue",
                "gulp"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2017/09/08/photogallery-improvement/",
            "url": "http://shenlvmeng.github.com/blog/2017/09/08/photogallery-improvement/",
            "title": "PhotoGallery技术改造",
            "date_published": "2017-09-08T11:31:17.000Z",
            "content_html": "<p><img src=\"/blog/blog/images/photogallery.png\"></p>\n<p>最近离职后除了准备面试，多了许多时间对以往的前端个人项目进行改造。<a href=\"http://shenlvmeng.github.io/gallery/index.html\">PhotoGallery</a>就是其中一个个人很喜欢，但由于技术原因没做到完美的例子。最近准备抽出时间进行完善。</p>\n<p>PhotoGallery是一个使用瀑布流展示电影海报以及花絮（当然都是个人比较心水的）的展示型页面。所有的电影图片也是从大一就开始收集的，一直囤积在人人上。页面的诸多功能是根据个人爱好设计的，如</p>\n<ul>\n<li>根据标签搜索</li>\n<li>相似图片</li>\n<li>基于tag的推荐等</li>\n</ul>\n<p>总体来说，就是一个展示、介绍、推荐电影的地方。内容上还是很不错的。但是，去年寒假码代码时，前端技术还有待提高，很多地方写得并不严谨甚至比较丑陋。功能上也有些影响体验必须解决的痛点。大概有下面这些</p>\n<ul>\n<li><strong>首屏渲染时间糟糕</strong>，这是因为图片过多（个人看的太多），又使用了Vue。同时Vue这种MVVM框架和精细化DOM操作一山不容二虎，因此，结合懒加载，效果依然不理想</li>\n<li><strong>图片的时序排布并不自然</strong>，当时图省事，使用纯CSS方案实现瀑布流，牺牲了图片排序。图片只能从上到下再从左到右排序，和正常的阅读顺序并不一致。同时，最老的图片在最前，也不合理</li>\n<li><strong>新增图片困难</strong>，这是由于github.io的纯静态的限制，当时采用了静态图片+meta存数据的方式来实现，后面看了电影再往里加图步骤繁琐，没有人性化的办法</li>\n<li>样式老气，细节粗糙</li>\n<li><strong>本地调试困难</strong>，只使用了gulp来压缩js，css和json代码（代码少，不需要打包），不是全家桶脚手架，本地调试困难，且不能使用ES6语法</li>\n<li><strong>代码语法和风格上不严谨</strong>，考虑结合在公司的规矩规范</li>\n</ul>\n<p>针对上面大大小小几点，以及实际情况（比如只能使用github.io），考虑像下面这样优化</p>\n<h3 id=\"瀑布流布局实现方式待优化\"><a href=\"#瀑布流布局实现方式待优化\" class=\"headerlink\" title=\"瀑布流布局实现方式待优化\"></a>瀑布流布局实现方式待优化</h3><p>放弃使用column-count的方案。原因有二：</p>\n<ol>\n<li>排布顺序是从上到下，再从左到右，和日常经验相悖。类似地，使用flex的方案也不行</li>\n<li>本身和懒加载的设计兼容性并不好，懒加载的新图片会导致整个页面的布局完全改变。类似地，使用grid的方案也不适合</li>\n</ol>\n<p>因此考虑借鉴<a href=\"http://www.zhangxinxu.com/wordpress/2012/03/%E5%A4%9A%E6%A0%8F%E5%88%97%E8%A1%A8%E5%8E%9F%E7%90%86%E4%B8%8B%E5%AE%9E%E7%8E%B0%E7%9A%84%E7%80%91%E5%B8%83%E6%B5%81%E5%B8%83%E5%B1%80-waterfall-layout/\">张鑫旭大神的方案</a>，综合CSS和JS实现懒加载的滚动式瀑布流布局。</p>\n<p><img src=\"http://image.zhangxinxu.com/image/blog/201203/2012-03-23_233114.png\"></p>\n<p>首先，根据屏幕宽度设置合理的列数，再逐列插入5张新图片，作为初始情况，同时，使用<code>flex</code>布局，设置<code>flex-grow</code>和<code>justify-content</code>等属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Wall</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">columns</span>: <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">clientWidth</span> / columnWidth),</span><br><span class=\"line\">      <span class=\"attr\">lastFlag</span>: <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">clientWidth</span> / columnWidth) * <span class=\"number\">5</span> - <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">items</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">itemsForColumns</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> ret = <span class=\"title class_\">Array</span>.<span class=\"title function_\">apply</span>(<span class=\"literal\">null</span>, <span class=\"title class_\">Array</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">columns</span>)).<span class=\"title function_\">map</span>(<span class=\"function\">() =&gt;</span> []);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">items</span>.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">lastFlag</span> + <span class=\"number\">1</span>).<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        ret[i % <span class=\"variable language_\">this</span>.<span class=\"property\">columns</span>].<span class=\"title function_\">push</span>(item);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      <span class=\"comment\">// 每列先只加载5个</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#photos</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">flex-flow</span>: row wrap;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>: flex-start;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: space-around;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.wall-column</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">250px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">8px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>: top;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>之后，监听可能会改变布局的所有情况，在我这个场景下，大概有三种：</p>\n<ul>\n<li>滚动（scroll）事件</li>\n<li>缩放事件（resize）事件</li>\n<li>筛选图片，在改变筛选条件，会导致图片数目的变化</li>\n</ul>\n<p>下面分情况解决之。</p>\n<p><strong>resize时</strong></p>\n<p>监听<code>window</code>的<code>resize</code>事件，当最后一列的位置变化时，意味着布局已经改变，需要触发重排。可以看到上面的<code>itemForColumns</code>中依赖<code>columns</code>和<code>lastFlag</code>两个状态。这里我们利用MVVM框架的优势，维护这两个值，就可以让Vue帮我们完成重排这样的繁琐操作。如下，当<code>columns</code>改变时，才会触发重绘。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;resize&quot;</span>, <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">columns</span> = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">clientWidth</span> / columnWidth);</span><br><span class=\"line\">  <span class=\"comment\">// 已经展示过的图片就不要隐藏了</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">lastFlag</span> = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">columns</span> * <span class=\"number\">5</span> - <span class=\"number\">1</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">lastFlag</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>筛选图片时</strong></p>\n<p>同理，通过关键词筛选图片时，改变了传入Wall的prop <code>factor</code>。会同步更新依赖<code>factor</code>的<code>item</code>，触发重排。有一点有注意的是，**<code>lastFlag</code>需要重新开始累加**。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">watch</span>: &#123;</span><br><span class=\"line\">  <span class=\"title function_\">items</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设置了筛选条件后，lastFlag需要重新开始累加</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">lastFlag</span> = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">clientWidth</span> / columnWidth) * <span class=\"number\">5</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>scroll时</strong></p>\n<p>页面滚动时，需要加入新的图片到column中，我们要做的只是更改<code>lastFlag</code>即可，Vue会帮我们自动完成依赖<code>lastFlag</code>的<code>itemForColumns</code>更新。重点在，我们如何知道lastFlag应该增加到多少。</p>\n<p>我们回看下<code>itemForColumns</code>的逻辑，可以发现<strong>新增的图片是循环摆放的</strong>。这里额外说一句，尽管新图片放在最短列是最合理的，但是工程上并不合算（一是Vue下做这么精细的DOM操作不合适，二是获知最短列意味着DOM操作已经发生，即会有频繁的回流和重绘，这会影响渲染时间）。我们循环考虑每一列的最底部位置，如果在视口内，将图片更新到该列，直到所有列底部都在视口外。直到图片加载完毕。</p>\n<p>另外，在实践时还发现一个问题，<code>handleScroll</code>里更改了<code>lastFlag</code>后，Vue本身有batch的优化，会在microtask栈空后，才会进行耗时的DOM操作。循环添加图片时，需要通过setTimeout异步完成，避免误判，在一次递归中加载了所有图片。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">handleScroll</span>(<span class=\"params\">top</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">items</span>.<span class=\"property\">length</span> &lt;= <span class=\"variable language_\">this</span>.<span class=\"property\">lastFlag</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> delta = -<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">columns</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> col = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">`wall-<span class=\"subst\">$&#123;i&#125;</span>`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (col &amp;&amp; col.<span class=\"property\">offsetTop</span> + col.<span class=\"property\">clientHeight</span> &lt; top + (<span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span> || <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>.<span class=\"property\">clientHeight</span>)) &#123;</span><br><span class=\"line\">      delta = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!!++delta) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">lastFlag</span> += delta;</span><br><span class=\"line\">    <span class=\"comment\">// 直到所有列下沿都不在视口内，</span></span><br><span class=\"line\">    <span class=\"comment\">// 同时，设置时延，保证DOM操作完成后再继续handleScroll</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;  <span class=\"variable language_\">this</span>.<span class=\"title function_\">handleScroll</span>(top); &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"新增图片困难\"><a href=\"#新增图片困难\" class=\"headerlink\" title=\"新增图片困难\"></a>新增图片困难</h3><p><del>由于github.io是纯静态的页面，我并没有后台环境，这个痛点短期内只能缓解不能根除。不过后面考虑将所有图片迁移到图床上，毕竟把图片数据也存在github上感觉还是……有点怪怪的。日后新增图片应该还是通过上传图片，更新<code>meta.json</code>的形式完成。</del></p>\n<p>目前已将所有图片迁移到图床上，图床选择上参考了知乎上的推荐，使用<a href=\"https://www.qiniu.com/\">七牛云存储</a>，在个人实名认证后，免费部分有每月10G国内和国外下载流量，100万次GET和PUT请求次数，和10G存储空间。同时，它还提供对图片的压缩等管理，尽量减少流量。</p>\n<p>迁移之后，仓库体积大大减小。之后日常更新时，图片单独上传，根据外链固定前缀得到最终路径。</p>\n<p><del><code>meta.json</code>的更新上，考虑自己写一个工具，根据新看的电影生成新的content。</del></p>\n<p>已完成自动生成<code>meta.json</code>的<a href=\"https://shenlvmeng.github.io/meta-maker.html\">小工具</a>，原理很简单，就不再介绍了。</p>\n<h3 id=\"细节美化\"><a href=\"#细节美化\" class=\"headerlink\" title=\"细节美化\"></a>细节美化</h3><p>点比较细碎。整体借鉴了<a href=\"https://material.io/guidelines/material-design/introduction.html#introduction-goals\">material design</a>的思想。</p>\n<p><strong>影片详细信息的遮罩</strong></p>\n<p>考虑使用100%的遮罩，同时禁止背景滚动的形式展示图片的详细信息。起初打算用js去实现，后来发现下面的两点使得方案并不简单</p>\n<ul>\n<li>scroll事件不能被cancel，这意味着不能打断默认的滚动行为</li>\n<li>从Mouse，Keyboard，Touch相关触发scroll事件的事件劫持滚动行为倒是可以，不过要监听的事件太多</li>\n</ul>\n<p>只好作罢，通过纯CSS的方式，弹出浮层时，为body指定<code>noscroll</code>的类名。让浮层的<code>overflow</code>属性为<code>scroll</code>即可，同时设置浮层<code>position</code>属性为<code>fixed</code>即可。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#display</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"comment\">/*...*/</span></span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">100</span>;</span><br><span class=\"line\">  <span class=\"attribute\">overflow-y</span>: scroll;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用缓动函数改进回到开头</strong></p>\n<p>这里使用定义域和值域都是<code>[0,1]</code>的<code>easeInOutCubic</code>函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">easeInOutCubic</span> = t =&gt; (t&lt;<span class=\"number\">.5</span> ? <span class=\"number\">4</span>*t*t*t : (t-<span class=\"number\">1</span>)*(<span class=\"number\">2</span>*t-<span class=\"number\">2</span>)*(<span class=\"number\">2</span>*t-<span class=\"number\">2</span>)+<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<p>有了缓动函数后，使用<code>requestAnimationFrame</code>即可高效率地绘制JS动画。这里封装了一个<code>animate</code>函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">animate</span> = (<span class=\"params\">obj, prop, end, time, ease</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!obj || !obj[prop] || time &lt; <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> start = obj[prop],</span><br><span class=\"line\">      k = end - start,</span><br><span class=\"line\">      timer = <span class=\"literal\">null</span>,</span><br><span class=\"line\">      tick = <span class=\"function\"><span class=\"params\">timestamp</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timer === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">          timer = timestamp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> progress = timestamp - timer;</span><br><span class=\"line\">        obj[prop] = start + <span class=\"title function_\">ease</span>(progress / time) * k;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (progress &lt; time) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">requestAnimationFrame</span>(tick);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">requestAnimationFrame</span>(tick);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>后面直接使用<code>animate(document.body, &quot;scrollTop&quot;, 0, 1000, easeInOutCubic)</code>就可以圆滑地上移了。</p>\n<p><strong>移动端的优化</strong></p>\n<ul>\n<li>使用媒体查询，在屏幕宽度更改时，隐藏一些元素</li>\n<li>在UA为移动端设备时，给出提醒</li>\n</ul>\n<p><strong>loading样式</strong></p>\n<p>在改变筛选条件时，设置loading样式提升用户体验。通过积累onload的计数和初始加载图片值进行对比，在达到该值时清除遮罩。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"title function_\">loadedCount</span>(<span class=\"params\">newCount</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (newCount &gt;= <span class=\"title class_\">Math</span>.<span class=\"title function_\">min</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">lastFlag</span> + <span class=\"number\">1</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">items</span>.<span class=\"property\">length</span>)) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;全部加载完成&quot;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">isHidden</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// console.log(&quot;Loading...&quot;);</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>杂项</strong></p>\n<ul>\n<li>导航条交互优化</li>\n<li>导航条部分设置阴影，更改部分字体颜色和背景色</li>\n<li>修改触发分类方式，由<code>click</code>改为<code>mousemove</code></li>\n<li>修改tab的样式</li>\n<li>将vue和lodash的js文件下载到本地，避免CDN失效的问题（之前已经遇到过一次），增加可靠性</li>\n<li>搜索条件不区分大小写</li>\n</ul>\n<h3 id=\"本地调试困难\"><a href=\"#本地调试困难\" class=\"headerlink\" title=\"本地调试困难\"></a>本地调试困难</h3><p>因为代码较少，也只有一个文件，用不着webpack这样的全套解决方案。小巧易用的gulp就够了。针对我们需要的ES6转码，替换minify方案，本地调试等需要，都有对应的gulp插件解决问题。</p>\n<h4 id=\"gulp-babel\"><a href=\"#gulp-babel\" class=\"headerlink\" title=\"gulp-babel\"></a>gulp-babel</h4><p>使用<a href=\"https://babeljs.io/\">babel</a>来转码，<code>gulp-babel</code>依赖<code>babel-core@6</code>或以上版本，同时设置<code>preset</code>为<code>es2015</code>或ES7相关版本时也需要下载对应module。</p>\n<p>我只需要es2015即可。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev babel-core gulp-babel babel-preset-es2015</span><br></pre></td></tr></table></figure>\n\n<p>React和ES7的各阶段可以像下面这样选择安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save-dev babel-preset-react</span><br><span class=\"line\">$ npm install --save-dev babel-preset-stage-0</span><br><span class=\"line\">$ npm install --save-dev babel-preset-stage-1</span><br><span class=\"line\">$ npm install --save-dev babel-preset-stage-2</span><br><span class=\"line\">$ npm install --save-dev babel-preset-stage-3</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"其他工具\"><a href=\"#其他工具\" class=\"headerlink\" title=\"其他工具\"></a>其他工具</h4><ul>\n<li>**<a href=\"https://www.npmjs.com/package/gulp-uglify\">gulp-uglify</a>**，压缩代码</li>\n<li><strong>gulp-rename</strong>，为压缩出的js重命名</li>\n<li>**<a href=\"https://www.npmjs.com/package/gulp-webserver\">gulp-webserver</a>**，开启本地服务，方便本地调试</li>\n</ul>\n<p>上面这些插件按照文档操作即可，坑比较少，使用webserver时的<code>gulp.src()</code>入参通常为<code>./</code>，指以当前目录为服务器根目录。</p>\n<p>最后还需要加一个watch，方便在调试时的修改能同步转码压缩。像下面这样</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;watch&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  gulp.<span class=\"title function_\">watch</span>(<span class=\"string\">&#x27;assets/src/*.js&#x27;</span>, [<span class=\"string\">&#x27;js&#x27;</span>]);</span><br><span class=\"line\">  gulp.<span class=\"title function_\">watch</span>(<span class=\"string\">&#x27;assets/src/*.css&#x27;</span>, [<span class=\"string\">&#x27;css&#x27;</span>]);</span><br><span class=\"line\">  gulp.<span class=\"title function_\">watch</span>(<span class=\"string\">&#x27;assets/src/*.json&#x27;</span>, [<span class=\"string\">&#x27;json&#x27;</span>]);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>最后整个<code>gulpfile.js</code>是下面的样子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp&#x27;</span>),</span><br><span class=\"line\">    babel = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-babel&#x27;</span>),</span><br><span class=\"line\">    uglify = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-uglify&#x27;</span>),</span><br><span class=\"line\">    rename = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-rename&#x27;</span>),</span><br><span class=\"line\">    cleanCSS = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-clean-css&#x27;</span>),</span><br><span class=\"line\">    jsonminify = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-jsonminify&#x27;</span>),</span><br><span class=\"line\">    webserver = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-webserver&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;js&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;assets/src/*.js&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">babel</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">presets</span>: [<span class=\"string\">&#x27;es2015&#x27;</span>]</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">uglify</span>())</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">rename</span>(&#123; <span class=\"attr\">suffix</span>: <span class=\"string\">&#x27;.min&#x27;</span> &#125;))</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;dist&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;css&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>([<span class=\"string\">&#x27;assets/src/*.css&#x27;</span>])</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">cleanCSS</span>(&#123;<span class=\"attr\">compatibility</span>: <span class=\"string\">&#x27;ie8&#x27;</span>&#125;))</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;dist&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;json&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;assets/src/meta.json&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">jsonminify</span>())</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;dist&#x27;</span>))</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;webserver&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;./&#x27;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">webserver</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">livereload</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">directoryListing</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">open</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;watch&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  gulp.<span class=\"title function_\">watch</span>(<span class=\"string\">&#x27;assets/src/*.js&#x27;</span>, [<span class=\"string\">&#x27;js&#x27;</span>]);</span><br><span class=\"line\">  gulp.<span class=\"title function_\">watch</span>(<span class=\"string\">&#x27;assets/src/*.css&#x27;</span>, [<span class=\"string\">&#x27;css&#x27;</span>]);</span><br><span class=\"line\">  gulp.<span class=\"title function_\">watch</span>(<span class=\"string\">&#x27;assets/src/*.json&#x27;</span>, [<span class=\"string\">&#x27;json&#x27;</span>]);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;dev&#x27;</span>, [<span class=\"string\">&#x27;default&#x27;</span>, <span class=\"string\">&#x27;webserver&#x27;</span>, <span class=\"string\">&#x27;watch&#x27;</span>]);</span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&quot;default&quot;</span>, [<span class=\"string\">&#x27;json&#x27;</span>, <span class=\"string\">&#x27;css&#x27;</span>, <span class=\"string\">&#x27;js&#x27;</span>]);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"代码优化\"><a href=\"#代码优化\" class=\"headerlink\" title=\"代码优化\"></a>代码优化</h3><p>从略。HTML和CSS部分参照以往写的<a href=\"https://shenlvmeng.github.io/blog/2017/06/23/HTML-CSS-code-style-guide/\">建议</a>即可。除此以外，优化了下面的部分：</p>\n<ul>\n<li>删除了为兼容移动端额外使用的touchend事件，增加viewport的meta标签，消除移动端chrome浏览器点击300ms延时情况</li>\n<li>由于引入了babel，删除了兼容ES6语法的自己写的polyfill部分</li>\n<li>使用<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\">fetch API</a>请求json</li>\n<li>优化导航条点击事件处理相关的代码</li>\n<li>减少图片数目和json体积</li>\n</ul>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"https://segmentfault.com/a/1190000004394726\">使用gulp 进行ES6开发</a></li>\n<li><a href=\"http://blog.csdn.net/seven0404/article/details/51880162\">node.js利用gulp 启动webServer服务</a></li>\n<li><a href=\"https://stackoverflow.com/questions/2434602/css-setting-width-height-as-percentage-minus-pixels\">CSS: Setting width&#x2F;height as Percentage minus pixels</a></li>\n<li><a href=\"http://easings.net/zh-cn\">缓动函数速查表</a></li>\n<li><a href=\"https://gist.github.com/gre/1650294\">Simple Easing Functions in Javascript</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame\">window.requestAnimationFrame | MDN</a></li>\n<li><a href=\"https://dribbble.com/\">dribbble</a></li>\n<li><a href=\"https://codepen.io/sdthornton/pen/wBZdXq\">Material Design Box Shadows</a></li>\n<li><a href=\"http://tobiasahlin.com/spinkit/\">SpinKit | Simple CSS Spinners</a></li>\n<li><a href=\"https://www.zhihu.com/question/21667151\">国内有什么方便的图床？</a></li>\n</ul>\n",
            "tags": [
                "脚手架",
                "技改",
                "Vue",
                "gulp",
                "瀑布流",
                "电影"
            ]
        }
    ]
}