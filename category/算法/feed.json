{
    "version": "https://jsonfeed.org/version/1",
    "title": "Shenlvmeng's Blog • All posts by \"算法\" category",
    "description": "Be sharp, my friend.",
    "home_page_url": "http://shenlvmeng.github.com/blog",
    "items": [
        {
            "id": "http://shenlvmeng.github.com/blog/2017/07/27/interview-algorithm-md/",
            "url": "http://shenlvmeng.github.com/blog/2017/07/27/interview-algorithm-md/",
            "title": "《剑指Offer》JavaScript版解决方案",
            "date_published": "2017-07-27T11:52:57.000Z",
            "content_html": "<p>问题全部来自《剑指Offer》，顺序一致。</p>\n<h2 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h2><p>1.使用字面量声明对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Singleton</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">prop1</span>: <span class=\"string\">&quot;prop1&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">prop2</span>: <span class=\"string\">&quot;prop2&quot;</span></span><br><span class=\"line\">  <span class=\"title function_\">method1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;I am a method.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或者通过闭包封装自己的私有变量和方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Singleton</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> privateProp = <span class=\"string\">&quot;You can&#x27;t see me&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">privateMethod</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;You can&#x27;t see me either.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">publicProp</span>: <span class=\"string\">`<span class=\"subst\">$&#123;privateProp&#125;</span>!`</span>,</span><br><span class=\"line\">    <span class=\"title function_\">publicMethod</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"title function_\">privateMethod</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.利用闭包</p>\n<p>本质上和上面的方法类似</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Singleton</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> instance;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">init</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">prop</span>: <span class=\"string\">&quot;prop&quot;</span>,</span><br><span class=\"line\">      <span class=\"title function_\">method</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;I am a method.&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">getInstance</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// JS单线程，不考虑锁的问题</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!instance) &#123;</span><br><span class=\"line\">        instance = <span class=\"title function_\">init</span>();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>还有一个酷炫的变种，不过是上面的构造函数写法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Singleton</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> instance = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">prop</span> = <span class=\"string\">&quot;prop&quot;</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">method</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;I am a method.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">Singleton</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3.借助构造函数和JS中函数也是对象的特点</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Singleton</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 这里不取名为instance也可以</span></span><br><span class=\"line\">  <span class=\"comment\">// 显式返回this</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"title class_\">Singleton</span>.<span class=\"property\">instance</span> === <span class=\"string\">&quot;object&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Singleton</span>.<span class=\"property\">instance</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 成员和方法</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">prop</span> = <span class=\"string\">&quot;prop&quot;</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">method</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;I am a method.&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">Singleton</span>.<span class=\"property\">instance</span> = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//隐式返回this</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"http://www.cnblogs.com/TomXu/archive/2012/02/20/2352817.html\">参考</a></p>\n<h2 id=\"找出数组中重复的数字\"><a href=\"#找出数组中重复的数字\" class=\"headerlink\" title=\"找出数组中重复的数字\"></a>找出数组中重复的数字</h2><p><strong>Set</strong>，使用ES6内建的数据结构。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mySet = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>();</span><br><span class=\"line\">arr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">val, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (mySet.<span class=\"title function_\">has</span>(val)) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(val);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    mySet.<span class=\"title function_\">add</span>(val);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>Object</strong>或<strong>Array</strong>（空间复杂度O(n)），换汤不换药，略。</p>\n<p><strong>传统方法</strong>，时间复杂度O(n)，空间复杂度O(1)。交换当前元素和当前索引对应的元素，直到两者相等。（请参考原书中的前提，数字都在0~n-1之间）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">findDuplicate</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 边界检测</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!arr || arr.<span class=\"property\">length</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, len = arr.<span class=\"property\">length</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 循环交换元素直到arr[i] == i</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (arr[i] != i) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arr[i] === arr[arr[i]]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr[i];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 交换</span></span><br><span class=\"line\">      [arr[i], arr[arr[i]]] = [arr[arr[i]], arr[i]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>传统方法，且不修改数组</strong>，利用折半查找，递归寻找重复的元素。时间复杂度O(nlogn)，空间复杂度O(1)。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">findDuplicate</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 边界检测</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!arr || arr.<span class=\"property\">length</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">countRange</span> (arr, start, end) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &gt; end) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (start === end) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> start;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> split = (start + end) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> count = arr.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">last, val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> last + +(val &gt;= start &amp;&amp; val &lt;= split);</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (count &gt; split - start + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">countRange</span>(arr, start, split);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">countRange</span>(arr, split + <span class=\"number\">1</span>, end);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">countRange</span>(arr, <span class=\"number\">0</span>, arr.<span class=\"property\">length</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二维数组中的查找\"><a href=\"#二维数组中的查找\" class=\"headerlink\" title=\"二维数组中的查找\"></a>二维数组中的查找</h2><p><strong>前提</strong>：数组的每一行和每一列都递增</p>\n<p>贪婪算法，从右上角开始。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">find</span>(<span class=\"params\">arr, val</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!arr || !arr.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> [rows, columns] = [arr.<span class=\"property\">length</span>, arr[<span class=\"number\">0</span>].<span class=\"property\">length</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!rows || !columns) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> [x, y] = [columns-<span class=\"number\">1</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(x &gt; <span class=\"number\">0</span> &amp;&amp; y &lt; rows) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[y][x] === val) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr[y][x] &gt; val) &#123;</span><br><span class=\"line\">      x--;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      y++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"替换字符串中的空格\"><a href=\"#替换字符串中的空格\" class=\"headerlink\" title=\"替换字符串中的空格\"></a>替换字符串中的空格</h2><p>JavaScript中很好实现，可以直接使用库函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">replace</span>(<span class=\"params\">str</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str.<span class=\"title function_\">replace</span>(<span class=\"string\">&quot; &quot;</span>, <span class=\"string\">&quot;%20&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用传统方法，思路是先从前到后找到空格数，扩展出足够空间。再使用两个指针，从后到前，P1指向旧字符串的末尾，P2指向新字符串的末尾。碰到空格时，P2插入”%20”。碰到其他字符时，挨个复制即可。</p>\n<p>这种双指针从后向前的思维还可以用在两有序数组合并。从尾到头比较A1和A2数字。</p>\n<h2 id=\"链表设计\"><a href=\"#链表设计\" class=\"headerlink\" title=\"链表设计\"></a>链表设计</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 单向链表</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">LinkedList2</span> = (<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">element</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">element</span> = element;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">next</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">LinkedList</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">length</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">append</span>(<span class=\"params\">element</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> node = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(element);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">head</span> === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = node;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> curr = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(curr.<span class=\"property\">next</span>) &#123;</span><br><span class=\"line\">          curr = curr.<span class=\"property\">next</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        curr.<span class=\"property\">next</span> = node;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">length</span>++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">insert</span>(<span class=\"params\">pos, element</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (pos &lt; <span class=\"number\">0</span> || pos &gt; <span class=\"variable language_\">this</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> curr = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>,</span><br><span class=\"line\">          node = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(element);</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(--pos &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        curr = curr.<span class=\"property\">next</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      node.<span class=\"property\">next</span> = curr.<span class=\"property\">next</span>;</span><br><span class=\"line\">      curr.<span class=\"property\">next</span> = node;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">length</span>++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">remove</span>(<span class=\"params\">pos</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (pos &lt; <span class=\"number\">0</span> || pos &gt; <span class=\"variable language_\">this</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> curr = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>;</span><br><span class=\"line\">          prev;</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(--pos &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        prev = curr;</span><br><span class=\"line\">        curr = curr.<span class=\"property\">next</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"title function_\">isUndefined</span>(prev)) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        prev.<span class=\"property\">next</span> = curr.<span class=\"property\">next</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">length</span>--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">indexOf</span>(<span class=\"params\">element</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> curr = <span class=\"variable language_\">this</span>.<span class=\"property\">head</span>,</span><br><span class=\"line\">          index = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (curr) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (element === curr.<span class=\"property\">element</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> index;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        index++;</span><br><span class=\"line\">        curr = curr.<span class=\"property\">next</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 双向链表</span></span><br><span class=\"line\"><span class=\"comment\">// 略</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"从尾到头打印链表\"><a href=\"#从尾到头打印链表\" class=\"headerlink\" title=\"从尾到头打印链表\"></a>从尾到头打印链表</h2><p><strong>前提</strong>：单向链表。使用递归</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">recursivePrint</span>(<span class=\"params\">node</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (node &amp;&amp; node.<span class=\"property\">next</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">recursivePrint</span>(node.<span class=\"property\">next</span>));</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(node.<span class=\"property\">element</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"重建二叉树\"><a href=\"#重建二叉树\" class=\"headerlink\" title=\"重建二叉树\"></a>重建二叉树</h2><p><strong>前提</strong>：根据前序和中序遍历的结果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BinaryTreeNode</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">element, left, right</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">element</span> = element;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">left</span> = left;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">right</span> = right;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过前序遍历找到根节点，结合中序遍历找到左右子树，之后递归构建左右子树。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">constructTree</span>(<span class=\"params\">preorder, inorder</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (preorder.<span class=\"property\">length</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">construct</span>(<span class=\"params\">preorder, inorder</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 找到根节点元素</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> root = preorder[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 确定左右子树</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> index = inorder.<span class=\"title function_\">indexOf</span>(root),</span><br><span class=\"line\">        left = (index === <span class=\"number\">0</span> ? <span class=\"literal\">null</span> : <span class=\"title function_\">construct</span>(preorder.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, index), inorder.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, index)));</span><br><span class=\"line\">        right = (index === inorder.<span class=\"property\">length</span>-<span class=\"number\">1</span> ? <span class=\"literal\">null</span> : <span class=\"title function_\">construct</span>(preorder.<span class=\"title function_\">slice</span>(index+<span class=\"number\">1</span>), inorder.<span class=\"title function_\">slice</span>(index+<span class=\"number\">1</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BinaryTreeNode</span>(root, left, right);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">construct</span>(preorder, inorder);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二叉树的下一个节点\"><a href=\"#二叉树的下一个节点\" class=\"headerlink\" title=\"二叉树的下一个节点\"></a>二叉树的下一个节点</h2><p><strong>前提</strong>：树的每个节点除了有两个子节点的指针，还有一个指向父节点的指针。寻找中序遍历的下一个节点。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BinaryTreeNode</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">element, left, right, parent</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">element</span> = element;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">left</span> = left;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">right</span> = right;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">parent</span> = parent;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>二叉树中的节点和周围节点可能有四种关系（画图出来更直观）</p>\n<ol>\n<li>左子树的父节点</li>\n<li>右子树的父节点</li>\n<li>父节点的左子树</li>\n<li>父节点的右子树</li>\n</ol>\n<p>从而有下面的流程：</p>\n<ol>\n<li>关系2存在时，返回右子树的最左节点，否则到步骤2</li>\n<li>关系3存在时，返回父节点，否则到步骤3</li>\n<li>关系4存在时，向上回溯，对父节点使用步骤2，否则到步骤4</li>\n<li>（节点是根节点）返回null</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">findNextNode</span>(<span class=\"params\">node</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> curr;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (node.<span class=\"property\">right</span>) &#123;</span><br><span class=\"line\">    curr = node.<span class=\"property\">right</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(curr = curr.<span class=\"property\">left</span>) &#123;</span><br><span class=\"line\">      ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> curr;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (node.<span class=\"property\">parent</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.<span class=\"property\">parent</span>.<span class=\"property\">left</span> === node) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> node.<span class=\"property\">parent</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (node.<span class=\"property\">parent</span>.<span class=\"property\">right</span> === node) &#123;</span><br><span class=\"line\">      curr = node.<span class=\"property\">parent</span>;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (curr.<span class=\"property\">parent</span> &amp;&amp; curr.<span class=\"property\">parent</span>.<span class=\"property\">right</span> === curr) &#123;</span><br><span class=\"line\">        curr = node.<span class=\"property\">parent</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (curr.<span class=\"property\">parent</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> curr.<span class=\"property\">parent</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"用两个栈实现队列\"><a href=\"#用两个栈实现队列\" class=\"headerlink\" title=\"用两个栈实现队列\"></a>用两个栈实现队列</h2><p><strong>前提</strong>，实现append和delete功能，完成在队尾插入和队首删除。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Stack</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span> = []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> <span class=\"title function_\">size</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">push</span>(<span class=\"params\">element</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>.<span class=\"title function_\">push</span>(element);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">pop</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>思路</strong>，栈1只允许正序存放，栈2只允许倒序存放，由于栈2的内容始终较老，因此插入总发生在栈1。删除总发生在栈2（栈2为空时除外）。JS中没有泛型的概念，所以无需考虑栈中的数据类型。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Queue</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">inverseStack</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">append</span>(<span class=\"params\">element</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>.<span class=\"title function_\">push</span>(element);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>.<span class=\"property\">size</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">inverseStack</span>.<span class=\"property\">size</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">delete</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">inverseStack</span>.<span class=\"property\">size</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>.<span class=\"property\">size</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">inverseStack</span>.<span class=\"title function_\">push</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>.<span class=\"title function_\">pop</span>());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判断是否为空</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">inverseStack</span>.<span class=\"property\">size</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">inverseStack</span>.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">warn</span>(<span class=\"string\">&quot;Empty queue!&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"用两个队列实现栈\"><a href=\"#用两个队列实现栈\" class=\"headerlink\" title=\"用两个队列实现栈\"></a>用两个队列实现栈</h2><p>前提同上。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Queue</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">queue</span> = []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> <span class=\"title function_\">size</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">in</span>(<span class=\"params\">element</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>.<span class=\"title function_\">push</span>(element);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">out</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>思路和上面类似，但不大一样。每次元素出队时，所有元素一定会转移到另一个队列中。因此，插入和删除一定发生在有元素的队列。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Stack</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">queue</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Queue</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">backupQueue</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Queue</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">append</span>(<span class=\"params\">element</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (queue.<span class=\"property\">size</span>) &#123;</span><br><span class=\"line\">      queue.<span class=\"title function_\">in</span>(element);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> queue.<span class=\"property\">size</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      backupQueue.<span class=\"title function_\">in</span>(element);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> backupQueue.<span class=\"property\">size</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">delete</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (queue.<span class=\"property\">size</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> element;</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(queue.<span class=\"property\">size</span> &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        element = queue.<span class=\"title function_\">out</span>();</span><br><span class=\"line\">        backupQueue.<span class=\"title function_\">in</span>(element);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> queue.<span class=\"title function_\">out</span>();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(backQueue.<span class=\"property\">size</span> &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> element;</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(backupQueue.<span class=\"property\">size</span>) &#123;</span><br><span class=\"line\">        element = backupQueue.<span class=\"title function_\">out</span>();</span><br><span class=\"line\">        queue.<span class=\"title function_\">in</span>(element);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> backupQueue.<span class=\"title function_\">out</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">warn</span>(<span class=\"string\">&quot;Empty stack!&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"斐波那契数列\"><a href=\"#斐波那契数列\" class=\"headerlink\" title=\"斐波那契数列\"></a>斐波那契数列</h2><p>使用递归的代码好写，但是效率低；使用循环更好。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fibonacci</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">0</span>,</span><br><span class=\"line\">      b = <span class=\"number\">1</span>,</span><br><span class=\"line\">      res = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">2</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">    [res, a, b] = [a + b, b, res];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>变种还有“青蛙跳台阶”等类最优子问题的问题。</p>\n<h2 id=\"旋转数组的最小数字\"><a href=\"#旋转数组的最小数字\" class=\"headerlink\" title=\"旋转数组的最小数字\"></a>旋转数组的最小数字</h2><p><strong>前提</strong>，将数组开头的部分元素搬运到数组的末尾，寻找最小的元素。</p>\n<p>使用二分查找，右半边递增时，最小元素在左半边。左半边递增时，最小元素在右半边。注意下面两种情况：</p>\n<ul>\n<li>数组未做旋转</li>\n<li>旋转后，头尾元素相等</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">findMin</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!arr || !.<span class=\"property\">arr</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> lindex = <span class=\"number\">0</span>,</span><br><span class=\"line\">      rindex = arr.<span class=\"property\">length</span> - <span class=\"number\">1</span>,</span><br><span class=\"line\">      res = lindex;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (arr[lindex] &gt;= arr[rindex]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rindex - lindex === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      res = rindex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    res = (lindex + rindex) / <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 特殊情况</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[res] == arr[lindex] &amp;&amp; arr[res] == arr[rindex]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> arr.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">min, val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">min</span>(min, val);</span><br><span class=\"line\">      &#125;, arr[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[res] &gt;= arr[lindex]) &#123;</span><br><span class=\"line\">      lindex = res;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr[res] &lt;= arr[rindex]) &#123;</span><br><span class=\"line\">      rindex = res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr[res];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"回溯法\"><a href=\"#回溯法\" class=\"headerlink\" title=\"回溯法\"></a>回溯法</h2><p>通常适合用递归法实现，到达某个节点时，尝试所有可能，并在满足条件时递归到下一节点。</p>\n<h3 id=\"矩阵中的路径\"><a href=\"#矩阵中的路径\" class=\"headerlink\" title=\"矩阵中的路径\"></a>矩阵中的路径</h3><p><strong>前提</strong>，判断矩阵中有无一条不交叉路径能够返回指定字符串</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">hasPath</span>(<span class=\"params\">arr, str</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!arr || !arr.<span class=\"property\">length</span> || !str) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 使用数组记录历史数据，防止交叉</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> occupied = arr.<span class=\"title function_\">map</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr[<span class=\"number\">0</span>].<span class=\"title function_\">map</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> pathMath = <span class=\"keyword\">function</span>(<span class=\"params\">i, j, str</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!str) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span> || i &gt;= arr.<span class=\"property\">length</span> || j &lt; <span class=\"number\">0</span> || i &gt;= arr[<span class=\"number\">0</span>].<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str.<span class=\"title function_\">substr</span>(<span class=\"number\">0</span>, <span class=\"number\">1</span>) == arr[i][j]) &#123;</span><br><span class=\"line\">      occupied[i][j] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> newStr = str.<span class=\"title function_\">substr</span>(<span class=\"number\">1</span>),</span><br><span class=\"line\">          res = <span class=\"title function_\">pathMath</span>(i-<span class=\"number\">1</span>, j, newStr) || <span class=\"title function_\">pathMath</span>(i+<span class=\"number\">1</span>, j, newStr) || <span class=\"title function_\">pathMath</span>(i, j-<span class=\"number\">1</span>, newStr) || <span class=\"title function_\">pathMath</span>(i, j+<span class=\"number\">1</span>, newStr);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 回溯</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!res) &#123;</span><br><span class=\"line\">        occupied[i][j] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  arr.<span class=\"title function_\">foreach</span>(<span class=\"function\">(<span class=\"params\">val, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    val.<span class=\"title function_\">foreach</span>(<span class=\"function\">(<span class=\"params\">val, j</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title function_\">pathMatch</span>(i, j, str)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"机器人的运动范围\"><a href=\"#机器人的运动范围\" class=\"headerlink\" title=\"机器人的运动范围\"></a>机器人的运动范围</h3><p><strong>前提</strong>，m行n列的矩阵，机器人从(0,0)出发不能进入数位和大于k的格子，求能到的格子个数。</p>\n<p>思路同上甚至更简单。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">gridCount</span>(<span class=\"params\">rowCount, colCount, limit</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (limit &lt; <span class=\"number\">0</span> || rowCount &lt;= <span class=\"number\">0</span> || colCount &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 使用数组记录历史数据，减少冗余查询</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> walked = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"keyword\">function</span>(<span class=\"params\">row, col</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">check</span>(row, col)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 不必还原，减少重复查询</span></span><br><span class=\"line\">      walked[row * rowCount + col] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      cnt = <span class=\"number\">1</span> + <span class=\"title function_\">count</span>(row-<span class=\"number\">1</span>, col) + <span class=\"title function_\">count</span>(row+<span class=\"number\">1</span>, col) + <span class=\"title function_\">count</span>(row, col-<span class=\"number\">1</span>) + <span class=\"title function_\">count</span>(row, col+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cnt;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">    check = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> row &gt;= <span class=\"number\">0</span> &amp;&amp; col &gt;= <span class=\"number\">0</span> &amp;&amp; !walked[row * rowCount + col] &amp;&amp; <span class=\"title function_\">digitSum</span>(row) + <span class=\"title function_\">digitSum</span>(col) &lt;= limit;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">    digitSum = <span class=\"keyword\">function</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(num &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      sum += num % <span class=\"number\">10</span>;</span><br><span class=\"line\">      num /= <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">count</span>(row, col)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"剪绳子\"><a href=\"#剪绳子\" class=\"headerlink\" title=\"剪绳子\"></a>剪绳子</h2><p><strong>前提</strong>，绳长为整数，切成若干段，使得绳长乘积最大。</p>\n<p>类似于《算法导论》里的裁切钢管。首先可以用<strong>动态规划</strong>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">cutRope</span>(<span class=\"params\">len</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (len &lt; <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> len - <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> cut = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">4</span>; i &lt;= len; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> max = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">1</span>; j &lt;= i / <span class=\"number\">2</span>; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> mul = cut[j-<span class=\"number\">1</span>] * cut[i-j-<span class=\"number\">1</span>];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (max &lt; mul) &#123;</span><br><span class=\"line\">        max = mul;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cut.<span class=\"title function_\">push</span>(max);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> cut[len-<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>经过数学推导，<code>n&gt;=5</code>时，<code>2(n-2)&gt;n</code>且<code>3(n-3)&gt;n</code>且<code>2(n-2)&gt;=3(n-3)</code>，因此有最优子问题的解法。根据<strong>贪婪算法</strong>，应该尽量多切长度为3的绳子段。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">cutRope</span>(<span class=\"params\">len</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (len &lt; <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> len - <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 多切长度为3的绳子段</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> cntOf3 = len / <span class=\"number\">3</span>,</span><br><span class=\"line\">      cntOf2 = <span class=\"number\">1</span>,</span><br><span class=\"line\">      remain = len % <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 长度为4时，应该切成两个2</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (remain === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    cntOf3--;</span><br><span class=\"line\">    cntOf2 = <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">3</span>, cntOf3) * cntOf2</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"位运算\"><a href=\"#位运算\" class=\"headerlink\" title=\"位运算\"></a>位运算</h2><p>经常用于奇技淫巧。在C风格的解法中常用。JS中应该不常出现。</p>\n<h3 id=\"二进制中1的数目\"><a href=\"#二进制中1的数目\" class=\"headerlink\" title=\"二进制中1的数目\"></a>二进制中1的数目</h3><p>通过移位操作，需要注意的是，对入参移位容易出现死循环，可以对1进行移位并比较。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">numOf1</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> cnt = <span class=\"number\">0</span>,</span><br><span class=\"line\">      flag = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(flag) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &amp; flag) &#123;</span><br><span class=\"line\">      cnt++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    flag &lt;&lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> cnt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>二进制整数减1相当于右侧0值变成1，最右侧1变成0，<strong>此时和原数做按位与，可以消掉最右侧0</strong>。利用这个特点可以进一步提高效率。这种思路可以用来解决很多二进制问题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">numOf1</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(n) &#123;</span><br><span class=\"line\">    ++cnt;</span><br><span class=\"line\">    n = (n-<span class=\"number\">1</span>) &amp; n;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> cnt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数值的整数次方\"><a href=\"#数值的整数次方\" class=\"headerlink\" title=\"数值的整数次方\"></a>数值的整数次方</h2><p><strong>前提</strong>，不得使用库函数，需要考虑大数问题</p>\n<p>用类似二分法的思想，由2到4，由4到8，由8到16。时间复杂度O(logn)。同时注意边界情况。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">pow</span>(<span class=\"params\">base, exp</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> isNeg = exp &gt; <span class=\"number\">0</span>,</span><br><span class=\"line\">      res = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (exp == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (base == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">unsignedPow</span>(<span class=\"params\">base, exp</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (exp === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (exp === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> base;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"title function_\">unsigned</span>(base, exp &gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">    res *= res;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (exp &amp; <span class=\"number\">0x1</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      res *= base;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  res = <span class=\"title function_\">unsignedPow</span>(base, <span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(exp));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isNeg) &#123;</span><br><span class=\"line\">    res = <span class=\"number\">1</span> / res;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"按顺序打印从0到最大的n位数字\"><a href=\"#按顺序打印从0到最大的n位数字\" class=\"headerlink\" title=\"按顺序打印从0到最大的n位数字\"></a>按顺序打印从0到最大的n位数字</h2><p>大数问题。自定义数据结构实现整数+1操作，或者通过递归for循环依次打印每一位数字，像下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">printNums</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">print</span>(<span class=\"params\">str, n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">1</span> === n) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str + i);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      n--;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"number\">0</span> === i) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">print</span>(str, n);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">print</span>(str + i, n);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">print</span>(<span class=\"string\">&#x27;&#x27;</span>, n);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除链表节点\"><a href=\"#删除链表节点\" class=\"headerlink\" title=\"删除链表节点\"></a>删除链表节点</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LinkedListNode</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">value, next</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">next</span> = next</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"O-1-时间删除单向链表中某节点\"><a href=\"#O-1-时间删除单向链表中某节点\" class=\"headerlink\" title=\"O(1)时间删除单向链表中某节点\"></a>O(1)时间删除单向链表中某节点</h3><p>通常思路，需要从头结点循环找到节点的上一个节点，将它的<code>next</code>属性设置删除节点的<code>next</code>。但是这么做是O(n)的复杂度。更好的方法是，借尸还魂，覆盖当前节点的<code>next</code>节点，然后重设<code>next</code>节点跳过下一节点。</p>\n<p><em>（因为JS中没有指针一说，这种模拟不能完全还原原题的问题）</em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">removeNode</span>(<span class=\"params\">head, node</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!head || !node) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!node.<span class=\"property\">next</span>) &#123; <span class=\"comment\">// 不是尾节点</span></span><br><span class=\"line\">    node.<span class=\"property\">next</span> = node.<span class=\"property\">next</span>.<span class=\"property\">next</span>;</span><br><span class=\"line\">    node.<span class=\"property\">value</span> = node.<span class=\"property\">value</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (node == head) &#123; <span class=\"comment\">// 链表只有一个节点</span></span><br><span class=\"line\">    head = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 是尾节点，只能循环</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> n = head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n.<span class=\"property\">next</span> !== node) &#123;</span><br><span class=\"line\">      n = n.<span class=\"property\">next</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    n.<span class=\"property\">next</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"表示数值的字符串\"><a href=\"#表示数值的字符串\" class=\"headerlink\" title=\"表示数值的字符串\"></a>表示数值的字符串</h2><p>考察思维的全面性。包括正数负数、小数、科学技术法都要考虑。格式遵循<code>[+|-]?(\\d+)(\\.\\d+)?([e|E][+|-]?\\d+)?</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 正则表达式</span></span><br><span class=\"line\">/\\d/.<span class=\"title function_\">test</span>(str);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 类型转换</span></span><br><span class=\"line\">!<span class=\"built_in\">isNaN</span>(+str);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>JS下解决问题并不如C++自然。下面是C++风格的解法</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">judgeUnsignedInt</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> ** str)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"type\">const</span> <span class=\"type\">char</span> * start = *str;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(**str != \\<span class=\"number\">0</span> &amp;&amp; **str &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; **str &lt;= <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">    ++(*str);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> *str &gt; start;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">judgeInt</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> ** str)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (**str === <span class=\"string\">&#x27;+&#x27;</span> || **str === <span class=\"string\">&#x27;-&#x27;</span>) &#123;</span><br><span class=\"line\">    ++(*str);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">judgeUnisignedInt</span>(str);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isNumber</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> * str)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (str == null) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 先扫描整数部分</span></span><br><span class=\"line\">  <span class=\"type\">bool</span> res = <span class=\"built_in\">judgeInt</span>(&amp;str);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (*str == <span class=\"string\">&#x27;.&#x27;</span>) &#123;</span><br><span class=\"line\">    ++str;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 扫描小数部分</span></span><br><span class=\"line\">    res = <span class=\"built_in\">judgeUnsignedInt</span>(&amp;str) || res;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (*str == <span class=\"string\">&#x27;e&#x27;</span> || *str == <span class=\"string\">&#x27;E&#x27;</span>) &#123;</span><br><span class=\"line\">    ++str;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 扫描指数部分</span></span><br><span class=\"line\">    res = <span class=\"built_in\">judgeInt</span>(&amp;str) &amp;&amp; res;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res &amp;&amp; *str == <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"调整整数数组中奇数和偶数的位置\"><a href=\"#调整整数数组中奇数和偶数的位置\" class=\"headerlink\" title=\"调整整数数组中奇数和偶数的位置\"></a>调整整数数组中奇数和偶数的位置</h2><p><strong>前提</strong>，使得奇数都位于前边，偶数都位于后边。</p>\n<p>考虑拓展性，用一个函数作为衡量指标，判断元素应该在前还是在后。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">adjustArr</span>(<span class=\"params\">arr, standard</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!arr || !arr.<span class=\"property\">length</span> || arr.<span class=\"property\">length</span> &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> start = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> end = arr.<span class=\"property\">length</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (start &lt; end) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start &lt; end &amp;&amp; !<span class=\"title function_\">standard</span>(arr[start])) &#123;</span><br><span class=\"line\">      start++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start &lt; end &amp;&amp; <span class=\"title function_\">standard</span>(arr[end])) &#123;</span><br><span class=\"line\">      end--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &lt; end) &#123;</span><br><span class=\"line\">      [arr[start], arr[end]] = [arr[end], arr[start]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在后面的标准</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">standard</span> (num) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num / <span class=\"number\">2</span> == <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"鲁棒性\"><a href=\"#鲁棒性\" class=\"headerlink\" title=\"鲁棒性\"></a>鲁棒性</h1><h2 id=\"链表的倒数第K的节点\"><a href=\"#链表的倒数第K的节点\" class=\"headerlink\" title=\"链表的倒数第K的节点\"></a>链表的倒数第K的节点</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LinkedList</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">head</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">head</span> = head;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">next</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">next</span> = next;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>考虑鲁棒性：</p>\n<ul>\n<li>空数组</li>\n<li>k超过数组长度</li>\n<li>k&#x3D;0</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">findLastK</span>(<span class=\"params\">head, k</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!head || k === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> flag = head;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (--k &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (head.<span class=\"property\">next</span>) &#123;</span><br><span class=\"line\">      head = head.<span class=\"property\">next</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = head;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(flag = flag.<span class=\"property\">next</span>) &#123;</span><br><span class=\"line\">    res = res.<span class=\"property\">next</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<div class=\"tip\">当一个指针不足以解决链表的问题时，通常两个指针就可以解决问题</div>\n\n<h2 id=\"链表中环的入口节点\"><a href=\"#链表中环的入口节点\" class=\"headerlink\" title=\"链表中环的入口节点\"></a>链表中环的入口节点</h2><p>思路：</p>\n<ol>\n<li>链表中有环存在时，走得快的指针将会追上走得慢的指针。</li>\n<li>确定环的长度k后，让两个指针同速，一个领先k位出发，相遇的位置即是入口</li>\n</ol>\n<p>考虑鲁棒性：</p>\n<ul>\n<li>无环时</li>\n<li>寻找相遇点的时候注意next属性是否存在</li>\n<li>头结点为环入口时</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">entryOfLoop</span>(<span class=\"params\">list</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!list || !list.<span class=\"property\">length</span> || !list.<span class=\"property\">length</span> &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 找到相遇位置</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> slow, fast, meet;</span><br><span class=\"line\">  slow = fast = list.<span class=\"property\">head</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!!fast &amp;&amp; !!slow) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fast === slow) &#123;</span><br><span class=\"line\">      meet = fast;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    slow = slow.<span class=\"property\">next</span>;</span><br><span class=\"line\">    fast = fast.<span class=\"property\">next</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!!fast) &#123;</span><br><span class=\"line\">      fast = fast.<span class=\"property\">next</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 无环存在时跳出</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!!meet) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 确定环的长度</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> length = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> tmpNode = meet.<span class=\"property\">next</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (tmpNode !== meet) &#123;</span><br><span class=\"line\">    tmpNode = tmpNode.<span class=\"property\">next</span>;</span><br><span class=\"line\">    length++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 先移动一个指针</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> first = list.<span class=\"property\">head</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    first = first.<span class=\"property\">next</span>;</span><br><span class=\"line\">    length--;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 再移动第二个指针</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> next = list.<span class=\"property\">head</span>；</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (next !== first) &#123;</span><br><span class=\"line\">    first = first.<span class=\"property\">next</span>;</span><br><span class=\"line\">    next = next.<span class=\"property\">next</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> first;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"反转链表\"><a href=\"#反转链表\" class=\"headerlink\" title=\"反转链表\"></a>反转链表</h2><p><strong>前提</strong>：反转链表并输出反转后的头节点。</p>\n<p>考虑鲁棒性：</p>\n<ul>\n<li>边界情况，如空链表或长度为1的链表</li>\n<li>反转过程中链表断裂</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverseList</span>(<span class=\"params\">list</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> node = list.<span class=\"property\">head</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> prev = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(!!node) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!node.<span class=\"property\">next</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    node.<span class=\"property\">next</span> = prev;</span><br><span class=\"line\">    prev = node;</span><br><span class=\"line\">    node = node.<span class=\"property\">next</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"合并两个排序的链表\"><a href=\"#合并两个排序的链表\" class=\"headerlink\" title=\"合并两个排序的链表\"></a>合并两个排序的链表</h2><p>类似归并排序。</p>\n<p>考虑鲁棒性：</p>\n<ul>\n<li>空链表</li>\n<li>链表长度为1</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">merge</span>(<span class=\"params\">list1, list2</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!list1) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list2;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!list2) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list1;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> node = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>();</span><br><span class=\"line\">  <span class=\"keyword\">let</span> list = <span class=\"keyword\">new</span> <span class=\"title class_\">List</span>(node);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> h1 = list1.<span class=\"property\">head</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> h2 = list2.<span class=\"property\">head</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (!!h1 || !!h2) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> next;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!!h1 &amp;&amp; !h2 || h1.<span class=\"property\">value</span> &lt; h2.<span class=\"property\">value</span>) &#123;</span><br><span class=\"line\">      next = h1.<span class=\"property\">value</span>;</span><br><span class=\"line\">      node = node.<span class=\"property\">next</span>;</span><br><span class=\"line\">      h1 = h1.<span class=\"property\">next</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      next = h2.<span class=\"property\">value</span>;</span><br><span class=\"line\">      h2 = h2.<span class=\"property\">next</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    node.<span class=\"property\">next</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(next);</span><br><span class=\"line\">    node = node.<span class=\"property\">next</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  list.<span class=\"property\">head</span> = list.<span class=\"property\">head</span>.<span class=\"property\">next</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"树的子结构\"><a href=\"#树的子结构\" class=\"headerlink\" title=\"树的子结构\"></a>树的子结构</h2><p><strong>前提</strong>：判断树A中是否能找到和树B结构一样的子树。</p>\n<p>使用递归思路更简单。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">hasSubTree</span>(<span class=\"params\">heap, needle</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">match</span>(<span class=\"params\">root1, root2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!root2) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!root1) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">match</span>(root1.<span class=\"property\">left</span>, root2.<span class=\"property\">left</span>) &amp;&amp; <span class=\"title function_\">match</span>(root1.<span class=\"property\">right</span>, root2.<span class=\"property\">right</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> root1 = heap.<span class=\"property\">root</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> root2 = needle.<span class=\"property\">root</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!root1 &amp;&amp; !root2) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root1.<span class=\"property\">value</span> === root2.<span class=\"property\">value</span>) &#123;</span><br><span class=\"line\">      res = <span class=\"title function_\">match</span>(root1, root2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!res) &#123;</span><br><span class=\"line\">      res = <span class=\"title function_\">hasSubTree</span>(root1.<span class=\"property\">left</span>, root2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!res) &#123;</span><br><span class=\"line\">      res = <span class=\"title function_\">hasSubTree</span>(root1.<span class=\"property\">right</span>, root2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"形象化\"><a href=\"#形象化\" class=\"headerlink\" title=\"形象化\"></a>形象化</h1><h2 id=\"二叉树的镜像\"><a href=\"#二叉树的镜像\" class=\"headerlink\" title=\"二叉树的镜像\"></a>二叉树的镜像</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mirrorBinaryTree</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!root) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 跳过叶子节点</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!root.<span class=\"property\">left</span> &amp;&amp; !root.<span class=\"property\">right</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  [root.<span class=\"property\">left</span>, root.<span class=\"property\">right</span>] = [root.<span class=\"property\">right</span>, root.<span class=\"property\">left</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!!root.<span class=\"property\">left</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">mirrotBinaryTree</span>(root.<span class=\"property\">left</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!!root.<span class=\"property\">right</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">mirrotBinaryTree</span>(root.<span class=\"property\">right</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对称的二叉树\"><a href=\"#对称的二叉树\" class=\"headerlink\" title=\"对称的二叉树\"></a>对称的二叉树</h2><p>即前序和对称遍历结果一致。和上面类似。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isSymmetrical</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">judge</span>(<span class=\"params\">root1, root2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root1 === <span class=\"literal\">null</span> &amp;&amp; root2 === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root1 === <span class=\"literal\">null</span> || root2 === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root1.<span class=\"property\">value</span> !== root2.<span class=\"property\">value2</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">judge</span>(root1.<span class=\"property\">left</span>, root2.<span class=\"property\">right</span>) &amp;&amp; <span class=\"title function_\">judge</span>(root1.<span class=\"property\">right</span>, root2.<span class=\"property\">left</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">judge</span>(root, root);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"顺时针打印矩阵\"><a href=\"#顺时针打印矩阵\" class=\"headerlink\" title=\"顺时针打印矩阵\"></a>顺时针打印矩阵</h2><ul>\n<li>打印一行“删去”一行，打印一列“删去”一列。</li>\n<li>最后一圈先向右再向下再向上再向左，根据顺序共有4种可能，通过if语句区分</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">printMatrix</span>(<span class=\"params\">matrix</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!matrix || !matrix.<span class=\"property\">length</span> || !matrix[<span class=\"number\">0</span>].<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> top = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> bottom = matrix.<span class=\"property\">length</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> right = (matrix[<span class=\"number\">0</span>].<span class=\"property\">length</span> ? matrix[<span class=\"number\">0</span>].<span class=\"property\">length</span> - <span class=\"number\">1</span> : <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (left &lt;= right &amp;&amp; top &lt;= bottom) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 向右</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = left; i &lt;= right; i++) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(matrix[top][i] + <span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    top++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 向下</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (top &lt;= bottom) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = top; i &lt;= bottom; i++) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(matrix[i][right] + <span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      right--;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 向左</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left &lt;= right) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = right; i &gt;= left; i--) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(matrix[bottom][i] + <span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      bottom--;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 向上</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (top &lt;= bottom) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = bottom; i &gt;= top; i--) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(matrix[i][left] + <span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      left++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>剑指offer上的思路是利用每圈的起始x和y坐标相等，判断循环终止条件，再根据条件决定一圈打印几行。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">printMatrix</span>(<span class=\"params\">matrix</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!matrix || !matrix.<span class=\"property\">length</span> || !matrix[<span class=\"number\">0</span>].<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">print</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> width = column - start - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> height = rows - start - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = start; i &lt;= width; i++) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(matrix[start][i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &lt; height) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt;= height; i++) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(matrix[i][width]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &lt; width &amp;&amp; start &lt; height) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = width-<span class=\"number\">1</span>; i &gt;= start; i--) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(matrix[height][i]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &lt; width &amp;&amp; start &lt; height - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = height-<span class=\"number\">1</span>; i &lt; start+<span class=\"number\">1</span>; i--) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(matrix[i][start]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> start = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> rows = matrix.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> column = matrix[<span class=\"number\">0</span>].<span class=\"property\">length</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (column &gt; <span class=\"number\">2</span> * start &amp;&amp; rows &gt; <span class=\"number\">2</span> * start) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">print</span>();</span><br><span class=\"line\">    ++start;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"包含min函数的栈\"><a href=\"#包含min函数的栈\" class=\"headerlink\" title=\"包含min函数的栈\"></a>包含min函数的栈</h2><p><strong>前提</strong>，设计栈的数据结构，使min、push和pop的时间复杂度都是O(1)。</p>\n<p>注意：若使用变量保存最小元素，那么在最小元素出栈后会找不到次小元素。可见只使用一个变量是不够的，为配合原始栈的结构，需要有一个辅助栈记录最小元素的位置。（画图可以很容易理解）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Stack</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span> = [];</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">minStack</span> = [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> <span class=\"title function_\">min</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> len = <span class=\"variable language_\">this</span>.<span class=\"property\">minStack</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (len ? <span class=\"variable language_\">this</span>.<span class=\"property\">minStack</span>[len-<span class=\"number\">1</span>] : <span class=\"title class_\">Infinity</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">push</span>(<span class=\"params\">element</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>.<span class=\"title function_\">push</span>(element);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">minStack</span>.<span class=\"title function_\">push</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">min</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">min</span>, element));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">pop</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">minStack</span>.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">top</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>.<span class=\"property\">length</span> ? <span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">stack</span>.<span class=\"property\">length</span>-<span class=\"number\">1</span>] : <span class=\"literal\">null</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"栈的压入、弹出序列\"><a href=\"#栈的压入、弹出序列\" class=\"headerlink\" title=\"栈的压入、弹出序列\"></a>栈的压入、弹出序列</h2><p><strong>前提</strong>：给定栈的压入顺序，判断某个出栈顺序是否可能</p>\n<p>通过举例具象化思考。如入栈顺序为[1, 2, 3, 4, 5]，[4, 3, 5, 2, 1]就是一个可能的例子。首先，4是第一个出栈元素，则[1,2,3]此时已经入栈，4出栈后，3位栈顶，出栈后，5不在栈内，将5入栈。剩下的5，2，1同理。因此，可以发现下面规律。</p>\n<ol>\n<li>第一个出栈元素前的入栈序列此时正在栈内</li>\n<li>之后所有的出栈元素，先在栈顶寻找，若有，则出栈；若没有，在栈外元素中寻找</li>\n<li>若找到，将其入栈，若找不到，则返回false</li>\n<li>如此循环直到栈空</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isPopOrder</span>(<span class=\"params\">push, pop</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (push.<span class=\"property\">length</span> !== pop.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!push.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 寻找当前栈内元素</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> first = pop[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> index = push.<span class=\"title function_\">indexOf</span>(first);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> stack = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (index === -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt;= index-<span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">    stack.<span class=\"title function_\">push</span>(push[i]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> rest = push.<span class=\"title function_\">slice</span>(index);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">2</span>, len = pop.<span class=\"property\">length</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> value = pop[i];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!push.<span class=\"property\">length</span> || push[push.<span class=\"property\">length</span>-<span class=\"number\">1</span>] !== value) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> index = rest.<span class=\"title function_\">indexOf</span>(value);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (index === -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      push.<span class=\"title function_\">push</span>(value);</span><br><span class=\"line\">      rest.<span class=\"title function_\">splice</span>(index, <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      push.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"从上到下打印二叉树\"><a href=\"#从上到下打印二叉树\" class=\"headerlink\" title=\"从上到下打印二叉树\"></a>从上到下打印二叉树</h2><p>使用队列保证先后顺序。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Queue</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">queue</span> = []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> <span class=\"title function_\">length</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">queue</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">in</span>(<span class=\"params\">element</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">queue</span>.<span class=\"title function_\">push</span>(element);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">queue</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">out</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">queue</span>.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">printTreeByTier</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!root) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> q = <span class=\"keyword\">new</span> <span class=\"title class_\">Queue</span>();</span><br><span class=\"line\">  q.<span class=\"title function_\">in</span>(root);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(q.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> node = q.<span class=\"title function_\">out</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(node.<span class=\"property\">value</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.<span class=\"property\">left</span>) &#123;</span><br><span class=\"line\">      q.<span class=\"title function_\">in</span>(node.<span class=\"property\">left</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.<span class=\"property\">right</span>) &#123;</span><br><span class=\"line\">      q.<span class=\"title function_\">in</span>(node.<span class=\"property\">right</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"进阶：分行从上到下打印二叉树\"><a href=\"#进阶：分行从上到下打印二叉树\" class=\"headerlink\" title=\"进阶：分行从上到下打印二叉树\"></a>进阶：分行从上到下打印二叉树</h3><p>和上面类似，区别在入队时需要携带层数信息。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Queue</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">queue</span> = []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> <span class=\"title function_\">length</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">queue</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">in</span>(<span class=\"params\">element</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">queue</span>.<span class=\"title function_\">push</span>(element);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">queue</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">out</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">queue</span>.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">printTreeByTier</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!root) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> tier = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> q = <span class=\"keyword\">new</span> <span class=\"title class_\">Queue</span>();</span><br><span class=\"line\">  q.<span class=\"title function_\">in</span>(&#123;</span><br><span class=\"line\">    root,</span><br><span class=\"line\">    tier,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (q.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> node = q.<span class=\"title function_\">out</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.<span class=\"property\">tier</span> !== tier) &#123;</span><br><span class=\"line\">      tier = node.<span class=\"property\">tier</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;换行&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (q.<span class=\"property\">root</span>.<span class=\"property\">left</span>) &#123;</span><br><span class=\"line\">      q.<span class=\"title function_\">in</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">root</span>: q.<span class=\"property\">root</span>.<span class=\"property\">left</span>,</span><br><span class=\"line\">        <span class=\"attr\">tier</span>: tier+<span class=\"number\">1</span>,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (q.<span class=\"property\">root</span>.<span class=\"property\">right</span>) &#123;</span><br><span class=\"line\">      q.<span class=\"title function_\">in</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">root</span>: q.<span class=\"property\">root</span>.<span class=\"property\">right</span>,</span><br><span class=\"line\">        <span class=\"attr\">tier</span>: tier+<span class=\"number\">1</span>,</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"进阶2：之字形打印二叉树\"><a href=\"#进阶2：之字形打印二叉树\" class=\"headerlink\" title=\"进阶2：之字形打印二叉树\"></a>进阶2：之字形打印二叉树</h3><p><strong>前提</strong>：第一行从左到右打印，第二行从右到左打印，以此类推。</p>\n<p>因为每层的顺序都相反，很适合栈存储。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 栈的数据结构实现略</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">printTreeByZ</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!root) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> stack1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>();</span><br><span class=\"line\">  <span class=\"keyword\">let</span> stack2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>();</span><br><span class=\"line\">  <span class=\"comment\">// 当前在哪个栈内</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> curr = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  stack1.<span class=\"title function_\">push</span>(root);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!stack1.<span class=\"title function_\">empty</span>() || !stack2.<span class=\"title function_\">empty</span>()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (curr == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> node = stack1.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(node.<span class=\"property\">value</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node.<span class=\"property\">left</span>) &#123;</span><br><span class=\"line\">        stack2.<span class=\"title function_\">push</span>(node.<span class=\"property\">left</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node.<span class=\"property\">right</span>) &#123;</span><br><span class=\"line\">        stack2.<span class=\"title function_\">push</span>(node.<span class=\"property\">right</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (stack1.<span class=\"title function_\">empty</span>()) &#123;</span><br><span class=\"line\">        curr = <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;换行&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> node = stack2.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(node.<span class=\"property\">value</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node.<span class=\"property\">right</span>) &#123;</span><br><span class=\"line\">        stack1.<span class=\"title function_\">push</span>(node.<span class=\"property\">right</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node.<span class=\"property\">left</span>) &#123;</span><br><span class=\"line\">        stack1.<span class=\"title function_\">push</span>(node.<span class=\"property\">left</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (stack2.<span class=\"title function_\">emtpy</span>()) &#123;</span><br><span class=\"line\">        curr = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;换行&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二叉搜索树的后序遍历序列\"><a href=\"#二叉搜索树的后序遍历序列\" class=\"headerlink\" title=\"二叉搜索树的后序遍历序列\"></a>二叉搜索树的后序遍历序列</h2><p><strong>前提</strong>：判断整数序列是否是某个二叉搜索树的后序遍历序列，并假设所有数字都不相同</p>\n<p>利用二叉搜索树的特点，结合后序遍历时尾元素为根节点，递归判断。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">verifySeqOfBST</span>(<span class=\"params\">seq</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!seq || seq.<span class=\"property\">length</span> &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = seq.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> root = seq[len-<span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"comment\">// 找到右子树的起点</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> rightIndex = seq.<span class=\"title function_\">findIndex</span>(<span class=\"function\">(<span class=\"params\">element</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> element &gt; root;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 右子树的节点需要都大于左节点</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (rightIndex == -<span class=\"number\">1</span> || seq.<span class=\"title function_\">slice</span>(rightIndex).<span class=\"title function_\">every</span>(<span class=\"function\">(<span class=\"params\">element</span>)=&gt;</span>&#123; <span class=\"keyword\">return</span> element &gt; root; &#125;)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 递归判断左右子树</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = rightIndex &lt;= <span class=\"number\">0</span> || <span class=\"title function_\">verifySeqOfBST</span>(seq.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, rightIndex));</span><br><span class=\"line\">  <span class=\"keyword\">let</span> right = rightIndex == -<span class=\"number\">1</span> || <span class=\"title function_\">verifySeqOfBST</span>(seq.<span class=\"title function_\">slice</span>(rightIndex));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> left &amp;&amp; right;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二叉树中和为某值的路径\"><a href=\"#二叉树中和为某值的路径\" class=\"headerlink\" title=\"二叉树中和为某值的路径\"></a>二叉树中和为某值的路径</h2><p><strong>前提</strong>：找到所有满足要求的路径</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">findPaths</span>(<span class=\"params\">root, target</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> path = [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> node = root;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 利用闭包共享变量</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"title function_\">find</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    path.<span class=\"title function_\">push</span>(node);</span><br><span class=\"line\">    sum += node.<span class=\"property\">value</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sum === target) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(path)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.<span class=\"property\">left</span>) &#123;</span><br><span class=\"line\">      node = node.<span class=\"property\">left</span>;</span><br><span class=\"line\">      <span class=\"title function_\">find</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.<span class=\"property\">right</span>) &#123;</span><br><span class=\"line\">      node = node.<span class=\"property\">right</span>;</span><br><span class=\"line\">      <span class=\"title function_\">find</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 不要忘了弹出栈顶元素</span></span><br><span class=\"line\">    path.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">find</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"分解\"><a href=\"#分解\" class=\"headerlink\" title=\"分解\"></a>分解</h1><h2 id=\"复杂链表的复制\"><a href=\"#复杂链表的复制\" class=\"headerlink\" title=\"复杂链表的复制\"></a>复杂链表的复制</h2><p><strong>前提</strong>：复杂链表中每个节点除了一个指向下个节点的指针外，还有一个指向任意节点的指针</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ComplexLinkedListNode</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">&#123;value, next, extra&#125;</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">next</span> = next;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">extra</span> = extra;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>困难在extra属性的复制，在O(n)的时间复杂度，O(1)的空间复杂度的要求下，问题可以分解成3步</p>\n<ol>\n<li>在每个原始节点后接上复制节点</li>\n<li>原样复制extra属性</li>\n<li>将复制的链表拆出来</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">copyLinkedList</span>(<span class=\"params\">head</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!head) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> node = head;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Step1: 在每个节点后添加一个复制节点</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (node) &#123;</span><br><span class=\"line\">    node.<span class=\"property\">next</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">ComplexLinkedListNode</span>()(&#123;</span><br><span class=\"line\">      <span class=\"attr\">value</span>: node.<span class=\"property\">value</span>,</span><br><span class=\"line\">      <span class=\"attr\">next</span>: node.<span class=\"property\">next</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    node = node.<span class=\"property\">next</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Step2: 复制每个节点的extra属性</span></span><br><span class=\"line\">  node = head;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (node) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这一步大大减少了时间复杂度</span></span><br><span class=\"line\">    node.<span class=\"property\">next</span>.<span class=\"property\">extra</span> = node.<span class=\"property\">extra</span>.<span class=\"property\">next</span>;</span><br><span class=\"line\">    node = node.<span class=\"property\">next</span>.<span class=\"property\">next</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Step3: 拆开两条链</span></span><br><span class=\"line\">  node = head</span><br><span class=\"line\">  <span class=\"keyword\">let</span> newNode = <span class=\"keyword\">new</span> <span class=\"title class_\">ComplexLinkedListNode</span>();</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (node) &#123;</span><br><span class=\"line\">    newNode.<span class=\"property\">next</span> = node.<span class=\"property\">next</span>;</span><br><span class=\"line\">    node.<span class=\"property\">next</span> = node.<span class=\"property\">next</span>.<span class=\"property\">next</span>;</span><br><span class=\"line\">    node = node.<span class=\"property\">next</span>;</span><br><span class=\"line\">    newNode = newNode.<span class=\"property\">next</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> newNode.<span class=\"property\">next</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二叉搜索树和双向链表\"><a href=\"#二叉搜索树和双向链表\" class=\"headerlink\" title=\"二叉搜索树和双向链表\"></a>二叉搜索树和双向链表</h2><p><strong>前提</strong>：将一个二叉搜索树转换成一个排序的双向链表，不允许新建节点。</p>\n<p>一般涉及到树结构的问题，使用递归都要更直观方便。本题中，可以把问题拆解成，将根节点和已组装好的左右双向链表组装。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">transBSTToBilink</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!root) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"title function_\">split</span> = (<span class=\"params\">root, type</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> node = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(root.<span class=\"property\">value</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = node;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> right = node;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.<span class=\"property\">left</span>) &#123;</span><br><span class=\"line\">      left = <span class=\"title function_\">split</span>(root.<span class=\"property\">left</span>, <span class=\"string\">&#x27;left&#x27;</span>);</span><br><span class=\"line\">      left.<span class=\"property\">next</span> = node;</span><br><span class=\"line\">      node.<span class=\"property\">next</span> = left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.<span class=\"property\">right</span>) &#123;</span><br><span class=\"line\">      right = <span class=\"title function_\">split</span>(root.<span class=\"property\">right</span>, <span class=\"string\">&#x27;right&#x27;</span>)</span><br><span class=\"line\">      node.<span class=\"property\">next</span> = right;</span><br><span class=\"line\">      right.<span class=\"property\">next</span> = node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 通过type区分当前是左子树还是右子树，从而返回最大点或最小点</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (type === <span class=\"string\">&#x27;left&#x27;</span> ? right : left);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">split</span>(root);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"序列化二叉树\"><a href=\"#序列化二叉树\" class=\"headerlink\" title=\"序列化二叉树\"></a>序列化二叉树</h2><p><strong>要求</strong>：实习序列化和反序列化函数</p>\n<p>通常情况需要两种遍历序列才能还原二叉树，这是因为二叉树非完全。对空缺的节点使用特殊字符，即可消除二义性，使用单一遍历序列还原二叉树。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BinaryTree</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">BinaryTree</span>.<span class=\"property\">serialize</span> = <span class=\"function\">(<span class=\"params\">root</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> str = [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"title function_\">serialize</span> = (<span class=\"params\">root</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!root) &#123;</span><br><span class=\"line\">      str.<span class=\"title function_\">push</span>(<span class=\"string\">&#x27;$&#x27;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    str.<span class=\"title function_\">push</span>(root.<span class=\"property\">value</span>);</span><br><span class=\"line\">    <span class=\"title function_\">serialize</span>(root.<span class=\"property\">left</span>);</span><br><span class=\"line\">    <span class=\"title function_\">serialize</span>(root.<span class=\"property\">right</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"title function_\">serialize</span>(root);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">BinaryTree</span>.<span class=\"property\">parse</span> = <span class=\"function\">(<span class=\"params\">str</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!str) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = str.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"title function_\">parse</span> = (<span class=\"params\">str</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str[i] === <span class=\"string\">&#x27;$&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> root = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(+str[i]);</span><br><span class=\"line\">    <span class=\"comment\">// 最后一个节点必是叶节点</span></span><br><span class=\"line\">    ++i, root.<span class=\"property\">left</span> = <span class=\"title function_\">parse</span>(str);</span><br><span class=\"line\">    ++i, root.<span class=\"property\">right</span> = <span class=\"title function_\">parse</span>(str);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">parse</span>(str);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符串的排列\"><a href=\"#字符串的排列\" class=\"headerlink\" title=\"字符串的排列\"></a>字符串的排列</h2><p><strong>前提</strong>：不考虑重复字符的问题<br><strong>要求</strong>：输入一个字符串，输出字符串中字符的所有排列</p>\n<p>此题可以用递归，《剑指offer》上的解法简单易行。JS中对字符串的限制（只读）使得代码和C风格有别。这里我们考虑输入是一个字符数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">combinations</span>(<span class=\"params\">str</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!str.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = str.<span class=\"property\">length</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">combine</span>(<span class=\"params\">comb, strs, start</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start === len - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(comb + strs[start]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = start; i &lt; len; i++) &#123;</span><br><span class=\"line\">      [strs[start], strs[i]] = [strs[i], strs[start]];</span><br><span class=\"line\">      <span class=\"comment\">// 需要通过slice方法传递复制</span></span><br><span class=\"line\">      <span class=\"title function_\">combine</span>(comb + strs[start], strs.<span class=\"title function_\">slice</span>(), start+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">combine</span>(<span class=\"string\">&#x27;&#x27;</span>, str, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"求字符串的组合（也可以叫求子集）\"><a href=\"#求字符串的组合（也可以叫求子集）\" class=\"headerlink\" title=\"求字符串的组合（也可以叫求子集）\"></a>求字符串的组合（也可以叫求子集）</h3><p>总共的解数目为$2^n$。从最低位开始，向上寻找时，有两种可能：新字符不出现，新字符出现。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">subsets</span>(<span class=\"params\">str</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!str.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">reduce</span>(<span class=\"params\">res, i</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i === str.<span class=\"property\">length</span>-<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res + str[i]);</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">reduce</span>(res+str[i], i+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"title function_\">reduce</span>(res, i+<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">reduce</span>(<span class=\"string\">&#x27;&#x27;</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输入8个数字的数组放在正方体的8个顶点，有无可能每对面对应的4个顶点和相等\"><a href=\"#输入8个数字的数组放在正方体的8个顶点，有无可能每对面对应的4个顶点和相等\" class=\"headerlink\" title=\"输入8个数字的数组放在正方体的8个顶点，有无可能每对面对应的4个顶点和相等\"></a>输入8个数字的数组放在正方体的8个顶点，有无可能每对面对应的4个顶点和相等</h3><p>相等于寻找全排列，使得a1+a2+a3+a4&#x3D;a5+a6+a7+a8，且a1+a3+a5+a7&#x3D;a2+a4+a6+a8，且a1+a2+a5+a6&#x3D;a3+a4+a7+a8。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">findComb</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = nums.<span class=\"property\">length</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">combine</span>(<span class=\"params\">nums, start</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start === len-<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"title function_\">test</span>(nums)) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(nums);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = start; i &lt; len; i++) &#123;</span><br><span class=\"line\">      [nums[start], nums[i]] = [nums[i], nums[start]];</span><br><span class=\"line\">      <span class=\"title function_\">combine</span>(nums.<span class=\"title function_\">slice</span>(), start + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums[<span class=\"number\">0</span>] + nums[<span class=\"number\">1</span>] + nums[<span class=\"number\">2</span>] + nums[<span class=\"number\">3</span>] == nums[<span class=\"number\">4</span>] + nums[<span class=\"number\">5</span>] + nums[<span class=\"number\">6</span>] + nums[<span class=\"number\">7</span>] &amp;&amp;</span><br><span class=\"line\">        nums[<span class=\"number\">0</span>] + nums[<span class=\"number\">2</span>] + nums[<span class=\"number\">4</span>] + nums[<span class=\"number\">5</span>] == nums[<span class=\"number\">1</span>] + nums[<span class=\"number\">3</span>] + nums[<span class=\"number\">5</span>] + nums[<span class=\"number\">7</span>] &amp;&amp;</span><br><span class=\"line\">        nums[<span class=\"number\">0</span>] + nums[<span class=\"number\">1</span>] + nums[<span class=\"number\">6</span>] + nums[<span class=\"number\">7</span>] == nums[<span class=\"number\">2</span>] + nums[<span class=\"number\">3</span>] + nums[<span class=\"number\">4</span>] + nums[<span class=\"number\">5</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">combine</span>(nums, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8皇后问题\"><a href=\"#8皇后问题\" class=\"headerlink\" title=\"8皇后问题\"></a>8皇后问题</h3><p>8皇后的限制条件在，不得同行同列，不得位于同一对角线。因此，为长度为8的数组初始化填入1~8，代表行数。填入的数代表列数，因为每行每列都只有一个皇后。所以全排列中，只需要删除满足下面条件的排列即可：</p>\n<ul>\n<li><code>i-j != columns[i] - columns[j]</code>且<code>j-i != columns[i] - columns[j]</code>，即不在一个对角线上</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">eightQueens</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">combine</span>(<span class=\"params\">queens, start</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start === <span class=\"number\">7</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(queens);</span><br><span class=\"line\">      count++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = start; i &lt; <span class=\"number\">8</span>; i++) &#123;</span><br><span class=\"line\">      [queens[start], queens[i]] = [queens[i], queens[start]];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title function_\">test</span>(queens, start)) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">combine</span>(queens.<span class=\"title function_\">slice</span>(), start+<span class=\"number\">1</span>);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        [queens[start], queens[i]] = [queens[i], queens[start]];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\">queens, end</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; end; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> diff = queens[end] - queens[i];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (diff == end - i || -diff == end - i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">combine</span>([<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>], <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(count);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种思路会带来重复的解，按照<a href=\"http://www.matrix67.com/blog/archives/266\">Matrix67的思路</a>，可以通过位运算求解。使用row（列占用情况），ld（左下右上对角线占用），rd（右下左上对角线占用）三个变量存储当前列的禁用情况。使用“1”表示禁用，“0”表示可用。解决n皇后的问题代码仅在10行左右。详细解释见链接。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">nQueens</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!n || n &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> limit = (<span class=\"number\">1</span> &lt;&lt; n) - <span class=\"number\">1</span>, sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">queen</span>(<span class=\"params\">row, ld, rd</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (row !== limit) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> pos = limit &amp; ~(row | ld | rd);</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (pos) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> p = pos &amp; -pos; <span class=\"comment\">// 得到最右侧可放子的位置</span></span><br><span class=\"line\">        pos -= p; <span class=\"comment\">// 除去这个位置</span></span><br><span class=\"line\">        <span class=\"title function_\">queen</span>(row|p, (ld|p) &lt;&lt; <span class=\"number\">1</span>, (rd|p) &gt;&gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> sum++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">queen</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"时间效率\"><a href=\"#时间效率\" class=\"headerlink\" title=\"时间效率\"></a>时间效率</h1><h2 id=\"数组中出现次数超过一半的数字\"><a href=\"#数组中出现次数超过一半的数字\" class=\"headerlink\" title=\"数组中出现次数超过一半的数字\"></a>数组中出现次数超过一半的数字</h2><p>思路1：超过一半的数组一定出现在中位数的位置，结合快排的思想，找到中位数<br>思路2：遍历所有数字，遇到与major相同的元素时，计数器+1，反之-1。计数器为0时，更换major。返回最后的major</p>\n<p>注意：最后需要检查数组是否有满足条件的元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">findMajor</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!nums.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> major;</span><br><span class=\"line\">  times = <span class=\"number\">0</span>;</span><br><span class=\"line\">  nums.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">num</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (times === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      major = num;</span><br><span class=\"line\">      times = <span class=\"number\">1</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (num === major) &#123;</span><br><span class=\"line\">      times++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      times--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (nums.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">sum, num</span>) =&gt;</span> &#123; <span class=\"keyword\">return</span> sum + (num === major); &#125;, <span class=\"number\">0</span>) * <span class=\"number\">2</span> &gt; nums.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> major;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"最小的k个数\"><a href=\"#最小的k个数\" class=\"headerlink\" title=\"最小的k个数\"></a>最小的k个数</h2><p>同样的两种思路：</p>\n<ol>\n<li>利用快排的中的partition，找到前k个数，时间复杂度O(n)，但是会修改数组<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">partition</span>(<span class=\"params\">arr, start, end</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (start &gt;= end) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> index = start -<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> split = arr[end];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = start; i &lt; end; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[i] &lt; split) &#123;</span><br><span class=\"line\">      index++;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (i != index) &#123;</span><br><span class=\"line\">        [arr[i], arr[index]] = [arr[index], arr[i]];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  index++;</span><br><span class=\"line\">  arr[end] = arr[index];</span><br><span class=\"line\">  arr[index] = split;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> index;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">minKNums</span>(<span class=\"params\">nums, k</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!nums || k &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (k &gt;= nums.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> start = <span class=\"number\">0</span>,</span><br><span class=\"line\">      end = nums.<span class=\"property\">length</span> - <span class=\"number\">1</span>,</span><br><span class=\"line\">      index = <span class=\"title function_\">partition</span>(nums, start, end);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(index != k-<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index &gt; k-<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      end = index - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      start = index + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    index = <span class=\"title function_\">partition</span>(nums, start, end);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(nums.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, k));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>维护一个排序的长度为k的数据容器，当容器满时，根据容器最大值更新容器，时间复杂度O(nlogk)，空间复杂度O(k)，但是在k较小时，性能很接近</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MinSet</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> <span class=\"title function_\">max</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> <span class=\"title function_\">len</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">input</span>(<span class=\"params\">element</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">remove</span>(<span class=\"params\">element</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">toString</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">minKNums</span>(<span class=\"params\">nums, k</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!nums || k &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (k &gt;= nums.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> set = <span class=\"keyword\">new</span> <span class=\"title class_\">MinSet</span>();</span><br><span class=\"line\">  nums.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">num</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (set.<span class=\"property\">len</span> === k) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (set.<span class=\"property\">max</span>.<span class=\"property\">value</span> &gt; num) &#123;</span><br><span class=\"line\">        set.<span class=\"title function_\">remove</span>(set.<span class=\"property\">max</span>);</span><br><span class=\"line\">        set.<span class=\"title function_\">input</span>(num);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      set.<span class=\"title function_\">input</span>(num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  set.<span class=\"title function_\">toString</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数据流的中位数\"><a href=\"#数据流的中位数\" class=\"headerlink\" title=\"数据流的中位数\"></a>数据流的中位数</h2><p>使用二叉树、最大堆最小堆完成。保证最大堆和最小堆的数目差不超过1即可。当然，首先要实现最大和最小堆</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">inherit</span>(<span class=\"params\">son, father</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> prototype = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(father.<span class=\"property\"><span class=\"keyword\">prototype</span></span>);</span><br><span class=\"line\">  prototype.<span class=\"property\">constructor</span> = son;</span><br><span class=\"line\">  son.<span class=\"property\">constructor</span> = prototype;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Heap</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">heap</span> = [];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Heap</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">parent</span> = <span class=\"keyword\">function</span>(<span class=\"params\">i</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (i+<span class=\"number\">1</span>) / <span class=\"number\">2</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Heap</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">left</span> = <span class=\"keyword\">function</span>(<span class=\"params\">i</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">2</span> * i + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Heap</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">right</span> = <span class=\"keyword\">function</span>(<span class=\"params\">i</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">2</span> * i + <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Heap</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">size</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">heap</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">MinHeap</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Heap</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">minify</span>(<span class=\"params\">index</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> l = <span class=\"variable language_\">this</span>.<span class=\"title function_\">left</span>(index),</span><br><span class=\"line\">        r = <span class=\"variable language_\">this</span>.<span class=\"title function_\">right</span>(index),</span><br><span class=\"line\">        size = <span class=\"variable language_\">this</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l &lt; size &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">heap</span>[l] &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">heap</span>[index]) &#123;</span><br><span class=\"line\">      i = l;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      i = index;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r &lt; size &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">heap</span>[r] &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">heap</span>[i]) &#123;</span><br><span class=\"line\">      i = r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i != index) &#123;</span><br><span class=\"line\">      [<span class=\"variable language_\">this</span>.<span class=\"property\">heap</span>[index], <span class=\"variable language_\">this</span>.<span class=\"property\">heap</span>[i]] = [<span class=\"variable language_\">this</span>.<span class=\"property\">heap</span>[i], <span class=\"variable language_\">this</span>.<span class=\"property\">heap</span>[index]];</span><br><span class=\"line\">      <span class=\"title function_\">minify</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">add</span> = <span class=\"keyword\">function</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">heap</span>.<span class=\"title function_\">push</span>(num);</span><br><span class=\"line\">    <span class=\"title function_\">minify</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">heap</span>.<span class=\"property\">length</span> / <span class=\"number\">2</span> - <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">shift</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> num = <span class=\"variable language_\">this</span>.<span class=\"property\">heap</span>.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\">    <span class=\"title function_\">minify</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">heap</span>.<span class=\"property\">length</span> / <span class=\"number\">2</span> - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">top</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">heap</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">inherit</span>(<span class=\"title class_\">MinHeap</span>, <span class=\"title class_\">Heap</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">MaxHeap</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Heap</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">maxify</span>(<span class=\"params\">index</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//... 同上</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">add</span> = <span class=\"keyword\">function</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//... 同上</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">shift</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> num = <span class=\"variable language_\">this</span>.<span class=\"property\">heap</span>.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\">    <span class=\"title function_\">maxify</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">heap</span>.<span class=\"property\">length</span> / <span class=\"number\">2</span> - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">top</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">   <span class=\"comment\">//... 同上</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 借助上面的MinHeap和MaxHeap实现 */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">DynamicArray</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">min</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">MinHeap</span>();</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">max</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">MaxHeap</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">DynamicArray</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">insert</span> = <span class=\"keyword\">function</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> minSize = <span class=\"variable language_\">this</span>.<span class=\"property\">min</span>.<span class=\"title function_\">size</span>(),</span><br><span class=\"line\">      maxSize = <span class=\"variable language_\">this</span>.<span class=\"property\">max</span>.<span class=\"title function_\">size</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (minSize === maxSize) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">min</span>.<span class=\"title function_\">add</span>(num);</span><br><span class=\"line\">    <span class=\"comment\">// 插入在最小堆，但是数字在最大堆的范围</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (maxSize &gt; <span class=\"number\">0</span> &amp;&amp; num &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">max</span>.<span class=\"title function_\">top</span>()) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">max</span>.<span class=\"title function_\">add</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">min</span>.<span class=\"title function_\">shift</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">max</span>.<span class=\"title function_\">add</span>(num);</span><br><span class=\"line\">    <span class=\"comment\">// 同理，插入在最大堆，但是数字在最小堆的范围</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (minSize &gt; <span class=\"number\">0</span> &amp;&amp; num &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">min</span>.<span class=\"title function_\">top</span>()) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">min</span>.<span class=\"title function_\">add</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">max</span>.<span class=\"title function_\">shift</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">DynamicArray</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">getMedian</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> size = <span class=\"variable language_\">this</span>.<span class=\"property\">min</span>.<span class=\"title function_\">size</span>() + <span class=\"variable language_\">this</span>.<span class=\"property\">max</span>.<span class=\"title function_\">size</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!size) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">warn</span>(<span class=\"string\">&#x27;Empty array.&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (size &amp; <span class=\"number\">0x01</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">min</span>.<span class=\"title function_\">top</span>();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">min</span>.<span class=\"title function_\">top</span>() + <span class=\"variable language_\">this</span>.<span class=\"property\">max</span>.<span class=\"title function_\">top</span>()) / <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"连续子数组的最大和\"><a href=\"#连续子数组的最大和\" class=\"headerlink\" title=\"连续子数组的最大和\"></a>连续子数组的最大和</h2><p><strong>前提</strong>：数组由正负数组成。</p>\n<p>经典的动态规划问题。用双指针的方法，采用贪婪算法，用<code>f[i]</code>表示以第i位结尾的最大和，当<code>f[i-1]&lt;=0</code>时，可以抛弃之前的和，以当前元素为<code>f[i]</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">maxSum</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!nums.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = nums.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      res = nums[i];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      res += nums[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-n整数中1出现的次数\"><a href=\"#1-n整数中1出现的次数\" class=\"headerlink\" title=\"1~n整数中1出现的次数\"></a>1~n整数中1出现的次数</h2><p>这种数学题，多半会有找规律的简单方法。普通的方法是，逐个寻找每个数字中1出现的次数，时间复杂度O(nlogn)。逐位寻找1出现的次数，再累加，时间复杂度可以降至O(logn)。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">numOf1</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">count</span>(<span class=\"params\">str</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> first = str[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> len = str.<span class=\"property\">length</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str.<span class=\"property\">length</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> first &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 第一位中1出现的次数</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> firstCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (first &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      firstCount = <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">10</span>, len-<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (first == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      firstCount = +str.<span class=\"title function_\">substr</span>(<span class=\"number\">1</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 剩下的位数可以通过排列组合计算</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> otherCount = first * (len - <span class=\"number\">1</span>) * <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">10</span>, len-<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> firstCount + otherCount + <span class=\"title function_\">count</span>(str.<span class=\"title function_\">substr</span>(<span class=\"number\">1</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> numStr = <span class=\"string\">`<span class=\"subst\">$&#123;num&#125;</span>`</span>;</span><br><span class=\"line\">  <span class=\"title function_\">count</span>(numStr);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数字序列中某一位的数字\"><a href=\"#数字序列中某一位的数字\" class=\"headerlink\" title=\"数字序列中某一位的数字\"></a>数字序列中某一位的数字</h2><p><strong>前提</strong>：数字以<code>0123456789101112131415...</code>的格式序列化</p>\n<p>需要找到规律。1位数占用10位，2位数占用180位，3位数占用2700位，……，n位数占用9 * (10 ^ n)位。通过循环确定位数后，对n取余，能知道是n位数第几个数的第几位。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">findKthDigit</span>(<span class=\"params\">k</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">countInDigits</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (n === <span class=\"number\">1</span> ? <span class=\"number\">10</span> : <span class=\"number\">9</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">10</span>, n-<span class=\"number\">1</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 第m个n位数的第k位</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">find</span>(<span class=\"params\">n, m, k</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 找到n位数的起始</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> start = <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">10</span>, n - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> num = start + m;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num / <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">10</span>, n - k - <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (k &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> digits = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (k &gt;= <span class=\"title function_\">countInDigits</span>(digits)) &#123;</span><br><span class=\"line\">    k -= <span class=\"title function_\">countInDigits</span>(digits++);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">find</span>(digits, k / digits, k % digits);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"把数组排成最小的数\"><a href=\"#把数组排成最小的数\" class=\"headerlink\" title=\"把数组排成最小的数\"></a>把数组排成最小的数</h2><p><strong>要求</strong>：拼接数组中的数，使之最小</p>\n<p>此题的思路在拓展排序的规则。当组合<code>mn &lt; nm</code>时，说明m应该在前，即元素间的比较准则是mn和nm的大小关系。注意大数问题，应该比较字符串。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">minComb</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  nums.<span class=\"title function_\">sort</span>(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"string\">&#x27;&#x27;</span> + a + b &gt; <span class=\"string\">&#x27;&#x27;</span> + b + a ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"把数字翻译成字符串\"><a href=\"#把数字翻译成字符串\" class=\"headerlink\" title=\"把数字翻译成字符串\"></a>把数字翻译成字符串</h2><p><strong>前提</strong>：0翻译成‘a’，1翻译成‘b’，逐位进行翻译，有时会有多种结果<br><strong>要求</strong>：求可能的结果数目</p>\n<p>动态规划，避免重复解决子问题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">translateCount</span>(<span class=\"params\">numStr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!numStr || +numStr &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> count;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> counts = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = numStr.<span class=\"property\">length</span> - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i === numStr.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      count[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    count = count[i+<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> comb = +(count[i] + count[i+<span class=\"number\">1</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (comb &lt;= <span class=\"number\">25</span> &amp;&amp; comb &gt;= <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">      count += (i &lt; numStr.<span class=\"property\">length</span> - <span class=\"number\">2</span> ? counts[i+<span class=\"number\">2</span>] : <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    count[i] = count;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> count[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"礼物的最大价值\"><a href=\"#礼物的最大价值\" class=\"headerlink\" title=\"礼物的最大价值\"></a>礼物的最大价值</h2><p><strong>前提</strong>：从m*n的格子中拿礼物，从左上角开始，每次向下或向右取一格，直到右下角<br><strong>要求</strong>：礼物价值总和最大</p>\n<p>和上面的思路很类似，通过循环替代递归。比带有备忘录的递归更省时间和空间。坐标是(i, j)的格子最大总和只取决于(i-1, j)和(i, j-1)。因此可以用一维数组代替二维数组，减少空间使用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getMaxValue</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!nums.<span class=\"property\">length</span> || !nums[<span class=\"number\">0</span>].<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> row = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> rows = nums.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> columns = nums[<span class=\"number\">0</span>].<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; rows; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; columns; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> up = (i &gt; <span class=\"number\">0</span> ? row[j] : <span class=\"number\">0</span>)</span><br><span class=\"line\">      <span class=\"keyword\">let</span> left = (j &gt; <span class=\"number\">0</span> ? row[j-<span class=\"number\">1</span>] : <span class=\"number\">0</span>);</span><br><span class=\"line\">      row[j] = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(left, up) + nums[i][j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> row[columns - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"最长的不包括重复字符的子字符串\"><a href=\"#最长的不包括重复字符的子字符串\" class=\"headerlink\" title=\"最长的不包括重复字符的子字符串\"></a>最长的不包括重复字符的子字符串</h2><p><strong>要求</strong>：返回字符串的长度</p>\n<p>用类似动态规划的思路，借助之前的结果递推。同时，使用Object存储对应字符上次出现的位置，可以保证O(n)的时间复杂度。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">longestSubStrWithDup</span>(<span class=\"params\">str</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!str.<span class=\"property\">length</span> || str.<span class=\"property\">length</span> &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str.<span class=\"property\">length</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> pos = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> strArr = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(str);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> maxLen = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> curLen = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  strArr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">char, num</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 此前未出现过或出现在当前最长子字符串之外</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> position = pos[char];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> position !== <span class=\"string\">&#x27;undefined&#x27;</span> || position + curLen &lt; i) &#123;</span><br><span class=\"line\">      curLen++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 出现在此前的最长子字符串中时，需要更新长度值</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (curLen &gt; maxLen) &#123;</span><br><span class=\"line\">        maxLen = curLen;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      curLen = i - position;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 更新位置</span></span><br><span class=\"line\">    pos[char] = i;</span><br><span class=\"line\">  &#125;)；</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (curLen &gt; maxLen) &#123;</span><br><span class=\"line\">    maxLen = curLen;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> maxLen;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"丑数\"><a href=\"#丑数\" class=\"headerlink\" title=\"丑数\"></a>丑数</h2><p><strong>前提</strong>：丑数是指只包含因子2、3、5的数。求给定位置的丑数</p>\n<p>普通的思路是通过循环依次判断数字是否为丑数直到找到。在允许空间消耗时，我们用数组去存储所有的丑数，并不断更新数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">uglyNum</span>(<span class=\"params\">k</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (k &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ugly = [<span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ugly2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ugly3 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ugly5 = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(count &lt; k) &#123;</span><br><span class=\"line\">    uglynums.<span class=\"title function_\">push</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">min</span>(ugly[ugly2]*<span class=\"number\">2</span>, ugly[ugly3]*<span class=\"number\">3</span>, ugly[ugly5]*<span class=\"number\">5</span>));</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ugly[ugly2]*<span class=\"number\">2</span> &lt;= ugly[count]) &#123;</span><br><span class=\"line\">      ugly2++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ugly[ugly3]*<span class=\"number\">3</span> &lt;= ugly[count]) &#123;</span><br><span class=\"line\">      ugly3++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ugly[ugly5]*<span class=\"number\">5</span> &lt;= ugly[count]) &#123;</span><br><span class=\"line\">      ugly5++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    count++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ugly.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第一个只出现一次的字符\"><a href=\"#第一个只出现一次的字符\" class=\"headerlink\" title=\"第一个只出现一次的字符\"></a>第一个只出现一次的字符</h2><p>哈希表，JavaScript中使用Object即可。第一次扫描时去除所有重复元素，第二次扫描时，打印第一个字符。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">firstUniqueChar</span>(<span class=\"params\">str</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> strArr = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(str);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> chars = &#123;&#125;;</span><br><span class=\"line\">  strArr.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">char</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!chars[char]) &#123;</span><br><span class=\"line\">      chars[char] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      chars[char]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  strArr.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">char</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (chars[char] === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> char;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>类似问题都可以用哈希表解决。</p>\n<h2 id=\"数组中的逆序对\"><a href=\"#数组中的逆序对\" class=\"headerlink\" title=\"数组中的逆序对\"></a>数组中的逆序对</h2><p>逆序对的存在是数组未排序的结果。因此使用排序算法得到交换元素的次数即可。最直观的使用冒泡排序，时间复杂度为O(n^2)。使用归并和快排可以达到O(nlogn)的时间复杂度。</p>\n<p>略。</p>\n<h2 id=\"两个链表的第一个公共节点\"><a href=\"#两个链表的第一个公共节点\" class=\"headerlink\" title=\"两个链表的第一个公共节点\"></a>两个链表的第一个公共节点</h2><p>因为链表从交汇节点后拥有相同的节点，所以，从后向前回溯，直到节点不同为止即可。时间复杂度O(m+n)，空间复杂度O(m+n)。若不使用辅助栈，空间复杂度还可降至O(1)。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">findFirstCommonNode</span>(<span class=\"params\">list1, list2</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!list1 || !list2) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 遍历list1和list2到尾节点</span></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 向前回溯直到节点不同</span></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"排序数组中查找数字（二分查找）\"><a href=\"#排序数组中查找数字（二分查找）\" class=\"headerlink\" title=\"排序数组中查找数字（二分查找）\"></a>排序数组中查找数字（二分查找）</h2><h3 id=\"排序数组中数字出现的次数\"><a href=\"#排序数组中数字出现的次数\" class=\"headerlink\" title=\"排序数组中数字出现的次数\"></a>排序数组中数字出现的次数</h3><p>思路是，查找到数字第一次出现的地方和最后一次出现的地方。通过二分法查找，数字较小时，在右半边；较大时，在左半边；相等时判断左&#x2F;右是否还有该元素。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">numOfK</span>(<span class=\"params\">arr, k</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!arr.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">findFirst</span>(<span class=\"params\">start, end</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &gt; end) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> middle = (start + end) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> median = arr[middle];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (median &lt; k) &#123;</span><br><span class=\"line\">      start = middle + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (median &gt; k) &#123;</span><br><span class=\"line\">      end = middle - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (middle &gt; <span class=\"number\">0</span> &amp;&amp; arr[middle-<span class=\"number\">1</span>] === median) &#123;</span><br><span class=\"line\">        end = middle - <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> middle;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">findFirst</span>(start, end);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">findLast</span>(<span class=\"params\">start, end</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &gt; end) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> middle = (start + end) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> median = arr[middle];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (median &lt; k) &#123;</span><br><span class=\"line\">      start = middle + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (median &gt; k) &#123;</span><br><span class=\"line\">      end = middle - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (middle &lt; arr.<span class=\"property\">length</span>-<span class=\"number\">1</span> &amp;&amp; arr[middle+<span class=\"number\">1</span>] === median) &#123;</span><br><span class=\"line\">        start = middle + <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> middle;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">findLast</span>(start, end);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> first = <span class=\"title function_\">findFirst</span>(<span class=\"number\">0</span>, arr.<span class=\"property\">length</span>-<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> last = <span class=\"title function_\">findLast</span>(<span class=\"number\">0</span>, arr.<span class=\"property\">length</span>-<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title function_\">findFirst</span>() === -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> last - first + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"寻找从0-n-1中缺少的数字\"><a href=\"#寻找从0-n-1中缺少的数字\" class=\"headerlink\" title=\"寻找从0~n-1中缺少的数字\"></a>寻找从0~n-1中缺少的数字</h3><p>数组事先排序时，借助二分法查找，时间复杂度O(logn)；未排序时，通过求和和<code>n(n-1)/2</code>求差得出（不考虑大数问题的话）。中间元素和下标相等时，在右半边寻找；不相等时，若左侧元素相等，则返回该元素，左侧元素不等时，在左半边寻找。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">findLeftNum</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = arr.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!len || len &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> right = len - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> middle = (left + right) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[middle] === middle) &#123;</span><br><span class=\"line\">      left = middle + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (middle &gt; <span class=\"number\">0</span> &amp;&amp; arr[middle-<span class=\"number\">1</span>] !== middle-<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        right = middle - <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> middle;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (left &gt; right) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> len;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数组中和下标相等的元素\"><a href=\"#数组中和下标相等的元素\" class=\"headerlink\" title=\"数组中和下标相等的元素\"></a>数组中和下标相等的元素</h3><p><strong>前提</strong>：数组元素都为整数，且单调递增。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">numsEqualsToIndex</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!nums.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>,</span><br><span class=\"line\">      right = nums.<span class=\"property\">length</span>-<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> mid = (left + right) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums[mid] === mid) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums[mid] &gt; mid) &#123;</span><br><span class=\"line\">      right = middle - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      left = middle + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二叉搜索树的第k大的节点（遍历）\"><a href=\"#二叉搜索树的第k大的节点（遍历）\" class=\"headerlink\" title=\"二叉搜索树的第k大的节点（遍历）\"></a>二叉搜索树的第k大的节点（遍历）</h2><p>利用二叉搜索树的中序遍历的特点，找到第k大的节点。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">findKthNode</span>(<span class=\"params\">root, k</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (k &lt; <span class=\"number\">1</span> || !root) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (root.<span class=\"property\">left</span>) &#123;</span><br><span class=\"line\">    res = <span class=\"title function_\">findKthNode</span>(root.<span class=\"property\">left</span>, k);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      res = root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    k--;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (root.<span class=\"property\">right</span>) &#123;</span><br><span class=\"line\">    res = <span class=\"title function_\">findKthNode</span>(root.<span class=\"property\">right</span>, k);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二叉树的深度\"><a href=\"#二叉树的深度\" class=\"headerlink\" title=\"二叉树的深度\"></a>二叉树的深度</h2><p>使用递归，比较左右子树的深度，取较大值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">treeDepth</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!root) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = <span class=\"title function_\">treeDepth</span>(root.<span class=\"property\">left</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> right = <span class=\"title function_\">treeDepth</span>(root.<span class=\"property\">right</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(left, right) + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"判断一棵树是否是平衡二叉树\"><a href=\"#判断一棵树是否是平衡二叉树\" class=\"headerlink\" title=\"判断一棵树是否是平衡二叉树\"></a>判断一棵树是否是平衡二叉树</h3><p>可以使用上面的思路，递归判断除叶节点外每个节点的左右子树深度。但是这样会重复遍历节点。但是如果使用后序遍历，就可以先遍历左右子树，再回到根节点。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isBalanceTree</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">tree</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!root) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">depth</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"attr\">flag</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = <span class=\"title function_\">tree</span>(root.<span class=\"property\">left</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> right = <span class=\"title function_\">tree</span>(root.<span class=\"property\">right</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left.<span class=\"property\">flag</span> &amp;&amp; right.<span class=\"property\">flag</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> diff = left.<span class=\"property\">depth</span> - right.<span class=\"property\">depth</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (diff &lt;= <span class=\"number\">1</span> &amp;&amp; diff &gt;= -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">          <span class=\"attr\">depth</span>: <span class=\"number\">1</span> + <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(left.<span class=\"property\">depth</span>, right.<span class=\"property\">depth</span>),</span><br><span class=\"line\">          <span class=\"attr\">flag</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">flag</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">tree</span>(root);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组中数字出现的次数（位运算）\"><a href=\"#数组中数字出现的次数（位运算）\" class=\"headerlink\" title=\"数组中数字出现的次数（位运算）\"></a>数组中数字出现的次数（位运算）</h2><h3 id=\"在数组中找到唯二两个只出现一次的元素\"><a href=\"#在数组中找到唯二两个只出现一次的元素\" class=\"headerlink\" title=\"在数组中找到唯二两个只出现一次的元素\"></a>在数组中找到唯二两个只出现一次的元素</h3><p><strong>前提</strong>：数组中其他元素都出现两次。</p>\n<p>还是使用异或，不过这次异或的结果是两个数组的异或结果。找到结果中第一位1，说明这一位两个数不同，据此将数组分成两部分，分别异或，得到最终结果。时间复杂度O(n)，空间复杂度O(1)。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">find2UniqueNums</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sum = nums.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">sum, cur</span>) =&gt;</span> sum ^ cur);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> index = sum &amp; -sum;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> nums1 = nums.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">num</span> =&gt;</span> num &amp; index);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> nums2 = nums.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">num</span> =&gt;</span> !num &amp; index);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">unique1</span>: nums1.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">sum, cur</span>) =&gt;</span> sum ^ cur);</span><br><span class=\"line\">    <span class=\"attr\">unique2</span>: nums2.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">sum, cur</span>) =&gt;</span> sum ^ cur);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在数组中找到唯一一个出现一次的数字\"><a href=\"#在数组中找到唯一一个出现一次的数字\" class=\"headerlink\" title=\"在数组中找到唯一一个出现一次的数字\"></a>在数组中找到唯一一个出现一次的数字</h3><p><strong>前提</strong>：其余数字都出现3次。</p>\n<p>使用和上面类似的思路，使用二进制表示每一个数，用数组存储各位1出现的和，累加后，将每一位数字对3取余，得到的数字就是结果的二进制表示。</p>\n<p>略</p>\n<h2 id=\"和为s的若干数字（双指针）\"><a href=\"#和为s的若干数字（双指针）\" class=\"headerlink\" title=\"和为s的若干数字（双指针）\"></a>和为s的若干数字（双指针）</h2><h3 id=\"2个数\"><a href=\"#2个数\" class=\"headerlink\" title=\"2个数\"></a>2个数</h3><p><strong>前提</strong>：数组是单调递增的。因此可以在头尾放两个指针，向中间靠拢，逼近最终结果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sumS</span>(<span class=\"params\">nums, s</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> len = nums.<span class=\"property\">length</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!len || len &lt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> right = len - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum = nums[left] + nums[right];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sum === s) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> [nums[left], nums[right]];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sum &lt; s) &#123;</span><br><span class=\"line\">      left++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      right--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"正数序列\"><a href=\"#正数序列\" class=\"headerlink\" title=\"正数序列\"></a>正数序列</h3><p><strong>前提</strong>：打印出和为s的<strong>连续正数序列</strong>，长度最少为1。</p>\n<p>若使用双指针，需要先确定上下界。这里的序列起始的上界为<code>n/2</code>，下界是1。然后使用类似的方法，确定起始后，后移后界求序列。时间复杂度O(n^2)。然而，实际上，确定下界后，连续正数序列和与序列长度满足函数关系<code>f(m, n) = (m + n)(n - m + 1) / 2</code>（其中m为起始值，n为截止值）。问题变成了检验后界是否满足一元二次方程组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sumSSeq</span>(<span class=\"params\">s</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (s &lt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">print</span>(<span class=\"params\">i, j</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = i; index &lt;= j; index++) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(index);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>, limit = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(s/<span class=\"number\">2</span>); i &lt;= limit; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> j = i+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (j &lt;= limit+<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> sum = (i + j) * (j - i + <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (sum &gt;= s) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sum === s) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">print</span>(i, j);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      j++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"翻转字符串（多次翻转）\"><a href=\"#翻转字符串（多次翻转）\" class=\"headerlink\" title=\"翻转字符串（多次翻转）\"></a>翻转字符串（多次翻转）</h2><h3 id=\"翻转单词的顺序\"><a href=\"#翻转单词的顺序\" class=\"headerlink\" title=\"翻转单词的顺序\"></a>翻转单词的顺序</h3><p><strong>要求</strong>：翻转一句话中所有单词的顺序。</p>\n<p>此题可以先翻转所有字符，再翻转每个单词内的字符顺序。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverseByWord</span>(<span class=\"params\">sentence</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sentence.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27; &#x27;</span>).<span class=\"title function_\">reverse</span>().<span class=\"title function_\">join</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"左旋转字符串\"><a href=\"#左旋转字符串\" class=\"headerlink\" title=\"左旋转字符串\"></a>左旋转字符串</h3><p><strong>要求</strong>：将字符串头部的若干字符转移到字符尾部。</p>\n<p>使用类似上面的思路，可以不用<code>substring</code>方法，用翻转也可实现，不过在JS中无法对字符串自由写入，法2反而不如法1。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 法1，使用substring</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">leftReverse</span>(<span class=\"params\">str, n</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!str || n &gt;= str.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> str.<span class=\"title function_\">substring</span>(n) + str.<span class=\"title function_\">substring</span>(<span class=\"number\">0</span>, n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 法2，使用reverse</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">leftReverse</span>(<span class=\"params\">str, n</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!str || n &gt;= str.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> strArr = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(str);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> strArr.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, n).<span class=\"title function_\">reverse</span>().<span class=\"title function_\">concat</span>(strArr.<span class=\"title function_\">slice</span>(n).<span class=\"title function_\">reverse</span>()).<span class=\"title function_\">reverse</span>().<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"队列的最大值（队列）\"><a href=\"#队列的最大值（队列）\" class=\"headerlink\" title=\"队列的最大值（队列）\"></a>队列的最大值（队列）</h2><h3 id=\"滑动窗口的最大值\"><a href=\"#滑动窗口的最大值\" class=\"headerlink\" title=\"滑动窗口的最大值\"></a>滑动窗口的最大值</h3><p><strong>前提</strong>：固定滑动窗口的宽度<br><strong>要求</strong>：返回窗口内的最大值组成的数组</p>\n<p>使用双端队列去维护滑动窗口内的最大值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">maxInWindow</span>(<span class=\"params\">nums, k</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!nums.<span class=\"property\">length</span> || k &gt; nums.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> queue = [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; k; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(nums[queue[queue.<span class=\"property\">length</span>-<span class=\"number\">1</span>]] &lt; nums[i]) &#123;</span><br><span class=\"line\">      queue.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    queue.<span class=\"title function_\">push</span>(i);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = k; i &lt; nums.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">push</span>(nums[queue[<span class=\"number\">0</span>]]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(nums[i] &gt;= nums[queue[queue.<span class=\"property\">length</span>-<span class=\"number\">1</span>]]) &#123;</span><br><span class=\"line\">      queue.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 出界的大值要移出</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (queue[<span class=\"number\">0</span>] &lt;= i - k) &#123;</span><br><span class=\"line\">      queue.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    queue.<span class=\"title function_\">push</span>(i);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  res.<span class=\"title function_\">push</span>(nums[queue[<span class=\"number\">0</span>]]);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"队列的最大值\"><a href=\"#队列的最大值\" class=\"headerlink\" title=\"队列的最大值\"></a>队列的最大值</h3><p><strong>要求</strong>：设计队列，使max，shift和push的时间复杂度为1。</p>\n<p>因为在push和shift操作时，队列就像上面的滑动窗口，可以用相同方法实现max。</p>\n<p>略。</p>\n<hr>\n<h1 id=\"建模能力\"><a href=\"#建模能力\" class=\"headerlink\" title=\"建模能力\"></a>建模能力</h1><h2 id=\"n个骰子的点数（化递归为循环）\"><a href=\"#n个骰子的点数（化递归为循环）\" class=\"headerlink\" title=\"n个骰子的点数（化递归为循环）\"></a>n个骰子的点数（化递归为循环）</h2><p><strong>要求</strong>：输入n，返回n个骰子朝上一面的点数之和的概率分布。</p>\n<p>使用循环的角度考虑，骰子递增时，点数和为k的可能性为k-6，k-5，k-4，……，k-1的可能性之和。因此我们可以得到下面的结果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">posibilities</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">2</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">6</span> * n; j &gt; <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">      res[j] = res.<span class=\"title function_\">slice</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(<span class=\"number\">0</span>, j-<span class=\"number\">6</span>), j).<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">sum, cur</span>) =&gt;</span> sum + (cur || <span class=\"number\">0</span>), <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>).<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">num</span> =&gt;</span> num / <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">6</span>, n));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"扑克牌中的顺子\"><a href=\"#扑克牌中的顺子\" class=\"headerlink\" title=\"扑克牌中的顺子\"></a>扑克牌中的顺子</h2><p><strong>前提</strong>：从扑克牌中随机取5张，大小王可以当做任意数字，判断是否为顺子</p>\n<p>这里我们假设传入的数组已经按照扑克牌中的大小对牌进行了排序。整体分3步，首先向数组的指定项插入数字，然后判断0的数目，最后看0的数目是否能填满<code>undefined</code>的个数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isSeq</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!nums.<span class=\"property\">length</span> || nums.<span class=\"property\">length</span> &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> numbers = [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> zeros = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> index = -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  nums.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">num</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      zeros++;</span><br><span class=\"line\">      <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!numbers[num]) &#123;</span><br><span class=\"line\">      numbers[num] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 有对子就不是顺子</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  numbers.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">num, idx</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> num !== <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">        zeros--;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (zeros-- &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          index = idx;</span><br><span class=\"line\">          <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> num !== <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">        flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> numbers.<span class=\"title function_\">slice</span>(index).<span class=\"title function_\">every</span>(<span class=\"function\"><span class=\"params\">num</span> =&gt;</span> <span class=\"keyword\">typeof</span> num === <span class=\"string\">&#x27;undefined&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"约瑟夫问题\"><a href=\"#约瑟夫问题\" class=\"headerlink\" title=\"约瑟夫问题\"></a>约瑟夫问题</h2><p>字面意义的解法就不说了。根据《剑指offer》上的递推公式，可以得到<code>f(n,m)=[f(n-1,m)+m]%n</code>。因此，可以用循环实现。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">joseph</span>(<span class=\"params\">n, m</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span> || m &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> remains = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">    remains = (remains + m) % i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> remains;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"股票的最大利润\"><a href=\"#股票的最大利润\" class=\"headerlink\" title=\"股票的最大利润\"></a>股票的最大利润</h2><p>也即起始、末尾数对最大差值区间。当遍历到<code>f[i]</code>时，寻找之前的最小值，即可得到利润，遍历整个数组即可得到最大利润，时间复杂度为O(n)。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">maxBenifit</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = nums.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!len || len &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> min = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> benifit = nums[i] - min;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> res === <span class=\"string\">&#x27;undefined&#x27;</span> || res &lt; benifit) &#123;</span><br><span class=\"line\">      res = benifit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (benifit &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      min = nums[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"不使用控制结构语句求解1-2-3-…-n\"><a href=\"#不使用控制结构语句求解1-2-3-…-n\" class=\"headerlink\" title=\"不使用控制结构语句求解1+2+3+…+n\"></a>不使用控制结构语句求解1+2+3+…+n</h2><p>使用递归等等价形式即可。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Array</span>(n).<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">sum, i</span>) =&gt;</span> sum + i, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"不用加减乘除做加法\"><a href=\"#不用加减乘除做加法\" class=\"headerlink\" title=\"不用加减乘除做加法\"></a>不用加减乘除做加法</h2><p>使用异或可以得到没有进位的结果。可以通过位与运算得到都是1的位。和异或结果异或，直到位与结果都为0为止。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sum = a ^ b,</span><br><span class=\"line\">      extra = a &amp; b;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (!extra) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tmp = sum &amp; extra;</span><br><span class=\"line\">    sum = sum ^ (extra &lt;&lt; <span class=\"number\">1</span>);</span><br><span class=\"line\">    extra = tmp;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"构建乘积数组\"><a href=\"#构建乘积数组\" class=\"headerlink\" title=\"构建乘积数组\"></a>构建乘积数组</h2><p><strong>要求</strong>：给定数组A，构建数组B，其中每个元素是A中缺少对应位元素的总乘积。不能使用除法。</p>\n<p>使用两个辅助数组分别存储数组从前到后和从后到前两段元素的乘积。空间复杂度O(n)的情况下，可以在O(n)时间上得到结果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">multiArr</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!nums.<span class=\"property\">length</span> || nums.<span class=\"property\">length</span> &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> m1 = <span class=\"number\">1</span>,</span><br><span class=\"line\">      m2 = <span class=\"number\">1</span>,</span><br><span class=\"line\">      mArr1 = [],</span><br><span class=\"line\">      mArr2 = [],</span><br><span class=\"line\">      res = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">    m1 *= nums[i];</span><br><span class=\"line\">    m2 *= nums[n - i - <span class=\"number\">1</span>];</span><br><span class=\"line\">    mArr1.<span class=\"title function_\">push</span>(m1);</span><br><span class=\"line\">    mArr2.<span class=\"title function_\">unshift</span>(m2);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">push</span>(mArr1[i] * mArr2[i]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "面试",
                "JavaScript"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2016/05/16/binary-tree/",
            "url": "http://shenlvmeng.github.com/blog/2016/05/16/binary-tree/",
            "title": "优化二叉搜索树的科普",
            "date_published": "2016-05-16T04:36:51.000Z",
            "content_html": "<p>本文目的在日后再看到这些名词时能有扫盲的作用，所以未做深入探讨。</p>\n<p>二叉搜索树的查询时间复杂度为O(h)，但是h的大小和数据密切相关，随机构建二叉搜索树可以保证期望高度h为O(lgn)，但是我们并不总能随机地构造二叉搜索树。所以就有二叉搜索树的变体来保证基本操作具有好的最坏情况性能，如AVL树，红黑树，treap树，splay树等。它们在二叉搜索树的基础上增加了额外的约束，操作更加复杂，但是保证最坏情况的动态集合操作时间复杂度为O(lgn)。下面按照时间介绍之。</p>\n<h2 id=\"AVL树\"><a href=\"#AVL树\" class=\"headerlink\" title=\"AVL树\"></a>AVL树</h2><p>AVL树是最早发明的自平衡二叉搜索树，查找、插入、删除在平均和最坏情况下都是O(lgn)，自平衡是通过插入和删除时一次或多次树旋转来完成的。节点的平衡因子是左子树减去右子树的高度，1、0、-1被认为是平衡的，-2或2被认为是不平衡的，需要重新平衡树。平衡因子储存在节点中，或是通过计算算出。</p>\n<p>根据不平衡的情况，AVL分成左左、右右、左右、右左四种情况，分别需要1、1、2、2次旋转调整。图略。</p>\n<p>由于AVL是高度平衡树，所以节点插入、删除后，重新平衡需要的旋转次数较多，但是因此带来的搜索效率更高。</p>\n<h2 id=\"红黑树\"><a href=\"#红黑树\" class=\"headerlink\" title=\"红黑树\"></a>红黑树</h2><p>最常见的平衡二叉树，统计性能最好的二叉搜索树。红黑树是满足下列性质的二叉搜索树：</p>\n<ul>\n<li>每个节点都是黑色或是红色</li>\n<li>根节点是黑色</li>\n<li>每个叶节点都是黑色</li>\n<li>如果一个节点是红色，那么它的两个子节点都是黑色</li>\n<li>对于每个节点，从它到其所有子孙叶节点的路径包含的黑色节点数目相同</li>\n</ul>\n<p>由于没有AVL树对平衡的高度要求，红黑树在节点插入、删除时，只需最多3次旋转操作即可完成。虽然牺牲了查找效率，但是在经常改动的动态数据集合中，红黑树的性能要更好。可以说红黑树在复杂度和旋转次数上有比较好的折中，因此常用作数据结构的设计。</p>\n<h2 id=\"Treap树\"><a href=\"#Treap树\" class=\"headerlink\" title=\"Treap树\"></a>Treap树</h2><p>Treap树得名于搜索树trea和堆reap，是有一个附加域满足堆特征的二叉搜索树，结构相当于随机插入数据的二叉搜索树，相较其他平衡二叉树，特点是实现简单，且能基本实现随机平衡。</p>\n<p>在构成Treap树时，还需要满足堆特征，在插入、删除维护堆性质时，只需要两种旋转，相比Splay，编程复杂度要更小。性能在平衡二叉树和二叉搜索树之间。</p>\n<h2 id=\"Splay树\"><a href=\"#Splay树\" class=\"headerlink\" title=\"Splay树\"></a>Splay树</h2><p>Splay树又叫伸展树，发明于1985年。它是一种自调整形式的二叉搜索树，利用了频繁查找的数据集有限，在二叉搜索树的每次搜索后，将搜索条目通过一系列旋转搬移到离树根更近的地方。它的优势在于不需要记录平衡树的冗余信息，且编程复杂度小很多。</p>\n<p>Splay的操作为旋转，分单旋转、一字型、之字形几种。</p>\n<p>这些树的编码都较为复杂，这里略去。</p>\n",
            "tags": [
                "二叉搜索树",
                "算法"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2015/11/03/bloom-filter/",
            "url": "http://shenlvmeng.github.com/blog/2015/11/03/bloom-filter/",
            "title": "海量字符串检索之二 布隆过滤器",
            "date_published": "2015-11-03T10:57:54.000Z",
            "content_html": "<p>海量字符串检索是很考验算法效率的工作。Trie树和PAT树常用，但是内存占用严重。在垃圾邮件过滤或网络爬虫这种不要求检索结果完全正确的场景下，布隆过滤器是个很好的选择。</p>\n<h2 id=\"Hash函数\"><a href=\"#Hash函数\" class=\"headerlink\" title=\"Hash函数\"></a>Hash函数</h2><p>Hash（中译为哈希，或者散列）函数在计算机领域，尤其是数据快速查找领域，加密领域用的极广。其作用是将一个大的数据集映射到一个小的数据集上面（这些小的数据集叫做哈希值，或者散列值）。Hash table（散列表，也叫哈希表），是根据哈希值(Key value)而直接进行访问的数据结构。也就是说，它通过把哈希值映射到表中一个位置来访问记录，以加快查找的速度。时间复杂度只有O(1).</p>\n<p>哈希函数有以下两个特点：</p>\n<ul>\n<li>如果两个散列值是不相同的（根据同一函数），那么这两个散列值的原始输入也是不相同的。</li>\n<li>散列函数的输入和输出不是唯一对应关系的，如果两个散列值相同，两个输入值很可能是相同的。但也可能不同，这种情况称为“散列碰撞”（或者“散列冲突”）。<br>解决冲突的方法有许多，如向左或向右移位，拉链法等等。在数据量不大的情况下，Hash函数作为查找的解决方法看上去是很美好的。然而，数据量大了之后呢。不妨设想下面的应用场景。</li>\n</ul>\n<p>假设要你写一个网络蜘蛛（web crawler）。由于网络间的链接错综复杂，蜘蛛在网络间爬行很可能会形成“环”。为了避免形成“环”，就需要知道蜘蛛已经访问过那些URL。给一个URL，怎样知道蜘蛛是否已经访问过呢？稍微想想，就会有如下几种方案：</p>\n<ol>\n<li>将访问过的URL保存到数据库。</li>\n<li>用HashSet将访问过的URL保存起来。那只需接近O(1)的代价就可以查到一个URL是否被访问过了。</li>\n<li>URL经过MD5或SHA-1等单向哈希后再保存到HashSet或数据库。</li>\n<li>Bit-Map方法。建立一个BitSet，将每个URL经过一个哈希函数映射到某一位。</li>\n</ol>\n<p>以上方法在数据量较小的情况下都能完美解决问题，但是当数据量变得非常庞大时问题就来了。</p>\n<p>方法1的缺点：数据量变得非常庞大后关系型数据库查询的效率会变得很低。而且每来一个URL就启动一次数据库查询是不是太小题大做了？</p>\n<p>方法2的缺点：太消耗内存。随着URL的增多，占用的内存会越来越多。就算只有1亿个URL，每个URL只算50个字符，就需要5GB内存。</p>\n<p>方法3：由于字符串经过MD5处理后的信息摘要长度只有128Bit，SHA-1处理后也只有160Bit，因此方法3比方法2节省了好几倍的内存。</p>\n<p>方法4消耗内存是相对较少的，但缺点是单一哈希函数发生冲突的概率太高。还记得数据结构课上学过的Hash表冲突的各种解决方法么？若要降低冲突发生的概率到1%，就要将BitSet的长度设置为URL个数的100倍</p>\n<p>实质上上面的算法都忽略了一个重要的隐含条件：允许小概率的出错，不一定要100%准确！也就是说少量url实际上没有没网络蜘蛛访问，而将它们错判为已访问的代价是很小的——大不了少抓几个网页呗。</p>\n<p>上面所举的爬虫只是一个例子，在允许少量错误的情况下，布隆过滤器将是最好的选择。</p>\n<h2 id=\"布隆过滤器（Bloom-Filter）\"><a href=\"#布隆过滤器（Bloom-Filter）\" class=\"headerlink\" title=\"布隆过滤器（Bloom Filter）\"></a>布隆过滤器（Bloom Filter）</h2><p><img src=\"/blog/images/bloom-filter-1.png\"></p>\n<p>布隆过滤器（Bloom Filter）是由布隆（Burton Howard Bloom）在1970年提出的。它实际上是由一个很长的二进制向量和一系列随机映射函数组成，布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率（假正例False positives，即Bloom Filter报告某一元素存在于某集合中，但是实际上该元素并不在集合中）和删除困难，但是没有识别错误的情形（即假反例False negatives，如果某个元素确实没有在该集合中，那么Bloom Filter 是不会报告该元素存在于集合中的，所以不会漏报）。</p>\n<h3 id=\"基本思想\"><a href=\"#基本思想\" class=\"headerlink\" title=\"基本思想\"></a>基本思想</h3><p>如果想判断一个元素是不是在一个集合里，一般想到的是将所有元素保存起来，然后通过比较确定。链表，树等等数据结构都是这种思路. 但是随着集合中元素的增加，我们需要的存储空间越来越大，检索速度也越来越慢。不过世界上还有一种叫作散列表（又叫哈希表，Hash table）的数据结构。它可以通过一个Hash函数将一个元素映射成一个位阵列（Bit Array）中的一个点。这样一来，我们只要看看这个点是不是 1 就知道可以集合中有没有它了。这就是布隆过滤器的基本思想。</p>\n<h3 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h3><ul>\n<li>优点——相比于其它的数据结构，布隆过滤器在空间和时间方面都有巨大的优势。布隆过滤器存储空间和插入&#x2F;查询时间都是常数。另外, Hash 函数相互之间没有关系，方便由硬件并行实现。布隆过滤器不需要存储元素本身，在某些对保密要求非常严格的场合有优势。</li>\n<li>缺点——误算率（False Positive）是其中之一。随着存入的元素数量增加，误算率随之增加。但是如果元素数量太少，则使用散列表足矣。另外，一般情况下不能从布隆过滤器中删除元素. 我们很容易想到把位列阵变成整数数组，每插入一个元素相应的计数器加1, 这样删除元素时将计数器减掉就可以了。然而要保证安全的删除元素并非如此简单。</li>\n</ul>\n<h3 id=\"误算率（False-Positive）分析\"><a href=\"#误算率（False-Positive）分析\" class=\"headerlink\" title=\"误算率（False Positive）分析\"></a>误算率（False Positive）分析</h3><p>一个Bloom Filter有以下参数：</p>\n<p>m | bit数组的宽度（bit数）<br>n | 加入其中的key的数量<br>k | 使用的hash函数的个数<br>f | False Positive的比率</p>\n<p>假设 Hash 函数以等概率条件选择并设置 Bit Array 中的某一位，m 是该位数组的大小，k 是 Hash 函数的个数，那么位数组中某一特定的位在进行元素插入时的 Hash 操作中没有被置位的概率是：1 - 1&#x2F;m</p>\n<p>那么在所有 k 次 Hash 操作后该位都没有被置 “1” 的概率是：(1 - 1 &#x2F; m)^k</p>\n<p>如果我们插入了 n 个元素，那么某一位仍然为 “0” 的概率是：(1 - 1 &#x2F; m) ^ k*n</p>\n<p>因而该位为 “1”的概率是：1 - (1 - 1 &#x2F; m) ^ k*n</p>\n<p>现在检测某一元素是否在该集合中。标明某个元素是否在集合中所需的 k 个位置都按照如上的方法设置为 “1”，但是该方法可能会使算法错误的认为某一原本不在集合中的元素却被检测为在该集合中（False Positives），该概率由以下公式确定：</p>\n<p>1 - (1 - 1 &#x2F; m) ^ k*n ≈ (1 - e ^ (-k * n &#x2F; m)) ^ k</p>\n<p>其实上述结果是在假定由每个 Hash 计算出需要设置的位（bit） 的位置是相互独立为前提计算出来的，不难看出，随着 m （位数组大小）的增加，假正例（False Positives）的概率会下降，同时随着插入元素个数 n 的增加，False Positives的概率又会上升，对于给定的m，n，如何选择Hash函数个数 k 由以下公式确定：</p>\n<p>m &#x2F; n * ln2 ≈ 0.7 * m &#x2F; n</p>\n<p>此时False Positives的概率为：2 ^ -k ≈ 0.6185 ^ (m &#x2F; n)</p>\n<p>而对于给定的False Positives概率 p，如何选择最优的位数组大小 m 呢，</p>\n<p>m &#x3D; -n * lnp &#x2F; (ln2) ^ 2</p>\n<p>上式表明，位数组的大小最好与插入元素的个数成线性关系，对于给定的 m，n，k，假正例概率最大为：(1 - e ^ (-k * (n + 0.5)&#x2F;(m - 1))) ^ k</p>\n<p>值得注意的是，k值并非越大越好。可以证明，当 k &#x3D; ln(2) * m&#x2F;n 时出错的概率是最小的。</p>\n<h3 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h3><h4 id=\"1-加入字符串\"><a href=\"#1-加入字符串\" class=\"headerlink\" title=\"1.加入字符串\"></a>1.加入字符串</h4><p><img src=\"/blog/images/bloom-filter-2.jpg\"></p>\n<p>为了表达S&#x3D;{x1, x2,…,xn}这样一个n个元素的集合，Bloom Filter使用k个相互独立的哈希函数（Hash Function），它们分别将集合中的每个元素映射到{1,…,m}的范围中。</p>\n<p>当我们往Bloom Filter中增加任意一个元素x时候，我们使用k个哈希函数得到k个哈希值，然后将数组中对应的比特位设置为1。即第i个哈希函数映射的位置hash<sub>i</sub>(x)就会被置为1（1≤i≤k）。</p>\n<p><strong>注意：</strong>如果一个位置多次被置为1，那么只有第一次会起作用，后面几次将没有任何效果。在下图中，k&#x3D;3，且有两个哈希函数选中同一个位置（从左边数第五位，即第二个”1”处）。</p>\n<h4 id=\"2-检查字符串是否在集合中\"><a href=\"#2-检查字符串是否在集合中\" class=\"headerlink\" title=\"2. 检查字符串是否在集合中\"></a>2. 检查字符串是否在集合中</h4><p><img src=\"/blog/images/bloom-filter-3.jpg\"></p>\n<p>在判断y是否属于这个集合时，我们只需要对y使用k个哈希函数得到k个哈希值，如果所有hash<sub>i</sub>(y)的位置都是1（1≤i≤k），即k个位置都被设置为1了，那么我们就认为y是集合中的元素，否则就认为y不是集合中的元素。下图中y<sub>1</sub>就不是集合中的元素（因为y1有一处指向了“0”位）。y<sub>2</sub>或者属于这个集合，或者刚好是一个false positive。</p>\n<h4 id=\"3-删除字符串\"><a href=\"#3-删除字符串\" class=\"headerlink\" title=\"3. 删除字符串\"></a>3. 删除字符串</h4><p><strong>通常</strong>，字符串加入了就被不能删除了，因为删除会影响到其他字符串，且无法判断删除字符串是否真在集合内。实在需要删除字符串的可以使用Counting bloomfilter(CBF)，这是一种基本Bloom Filter的变体，CBF将基本Bloom Filter每一个Bit改为一个计数器，这样就可以实现删除字符串的功能了。</p>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>C语言内，并没有定义Bitmap这个容器，所以需要自己实现。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAX 268435456</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*init bitmap*/</span></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">char</span> * <span class=\"title function_\">bitmap_init</span><span class=\"params\">(<span class=\"type\">int</span> size)</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> bytes;</span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">char</span> * p = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(size % <span class=\"number\">8</span> == <span class=\"number\">0</span>) </span><br><span class=\"line\">\t\tbytes = size / <span class=\"number\">8</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> </span><br><span class=\"line\">\t\tbytes = size / <span class=\"number\">8</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">\tp = (<span class=\"type\">unsigned</span> <span class=\"type\">char</span> *)<span class=\"built_in\">malloc</span>(bytes);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"literal\">NULL</span> == p)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(p, <span class=\"number\">0</span>, bytes);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*set flag on a certain index bit*/</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">bitmap_set</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">char</span> * bitmap, <span class=\"type\">int</span> index, <span class=\"type\">int</span> flag)</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//index range should have been checked outside!</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> seg = index / <span class=\"number\">8</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> off = index % <span class=\"number\">8</span>;</span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">char</span> p =  <span class=\"number\">0x1</span>&lt;&lt; off;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(flag == <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\tbitmap[seg] |= p;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(flag == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\tbitmap[seg] &amp;= ~p;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*get flag on a certain index bit*/</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">bitmap_get</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">char</span> * bitmap, <span class=\"type\">int</span> index)</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">///check index range outside first!</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> seg = index / <span class=\"number\">8</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> off = index % <span class=\"number\">8</span>;</span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">char</span> p = <span class=\"number\">0x1</span> &lt;&lt; off; \t<span class=\"type\">int</span> tmp = bitmap[seg] &amp; p; \t<span class=\"keyword\">return</span> tmp &gt; <span class=\"number\">0</span> ? <span class=\"number\">1</span> :<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*free bitmap*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">bitmap_free</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">char</span> * bitmap)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(bitmap);</span><br><span class=\"line\">\t*bitmap = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>之后，通过位图的置位和取位即可完成Bloom Filter的插入和检测操作。Hash函数选取如下（实际上，可以通过一个函数生成k个独立的哈希函数，存在优化空间）</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> <span class=\"title function_\">RSHash</span><span class=\"params\">(<span class=\"type\">char</span>* str, <span class=\"type\">unsigned</span> <span class=\"type\">int</span> len)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> b    = <span class=\"number\">378551</span>;</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> a    = <span class=\"number\">63689</span>;</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> hash = <span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> i    = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; str++, i++)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      hash = hash * a + (*str);</span><br><span class=\"line\">      a = a * b;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> hash;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* End Of RS Hash Function */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> <span class=\"title function_\">JSHash</span><span class=\"params\">(<span class=\"type\">char</span>* str, <span class=\"type\">unsigned</span> <span class=\"type\">int</span> len)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> hash = <span class=\"number\">1315423911</span>;</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> i    = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   fo <span class=\"title function_\">r</span><span class=\"params\">(i = <span class=\"number\">0</span>; i &lt; len; str++, i++)</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      hash ^= ((hash &lt;&lt; <span class=\"number\">5</span>) + (*str) + (hash &gt;&gt; <span class=\"number\">2</span>));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> hash;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* End Of JS Hash Function */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> <span class=\"title function_\">PJWHash</span><span class=\"params\">(<span class=\"type\">char</span>* str, <span class=\"type\">unsigned</span> <span class=\"type\">int</span> len)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">int</span> BitsInUnsignedInt = (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)(<span class=\"keyword\">sizeof</span>(<span class=\"type\">unsigned</span> <span class=\"type\">int</span>) * <span class=\"number\">8</span>);</span><br><span class=\"line\">   <span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">int</span> ThreeQuarters     = (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)((BitsInUnsignedInt  * <span class=\"number\">3</span>) / <span class=\"number\">4</span>);</span><br><span class=\"line\">   <span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">int</span> OneEighth         = (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)(BitsInUnsignedInt / <span class=\"number\">8</span>);</span><br><span class=\"line\">   <span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">int</span> HighBits          = (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)(<span class=\"number\">0xFFFFFFFF</span>) &lt;&lt; (BitsInUnsignedInt - OneEighth);</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> hash = <span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> test = <span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> i    = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; len; str++, i++) &#123;</span><br><span class=\"line\">      hash = (hash &lt;&lt; OneEighth) + (*str);</span><br><span class=\"line\">      <span class=\"keyword\">if</span>((test = hash &amp; HighBits) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">         hash = (( hash ^ (test &gt;&gt; ThreeQuarters)) &amp; (~HighBits));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> hash;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* End Of  P. J. Weinberger Hash Function */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> <span class=\"title function_\">ELFHash</span><span class=\"params\">(<span class=\"type\">char</span>* str, <span class=\"type\">unsigned</span> <span class=\"type\">int</span> len)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> hash = <span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> x    = <span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> i    = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; str++, i++) &#123;</span><br><span class=\"line\">      hash = (hash &lt;&lt; <span class=\"number\">4</span>) + (*str);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ((x = hash &amp; <span class=\"number\">0xF0000000</span>L) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">         hash ^= (x &gt;&gt; <span class=\"number\">24</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      hash &amp;= ~x;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> hash;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* End Of ELF Hash Function */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> <span class=\"title function_\">BKDRHash</span><span class=\"params\">(<span class=\"type\">char</span>* str, <span class=\"type\">unsigned</span> <span class=\"type\">int</span> len)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> seed = <span class=\"number\">131</span>; <span class=\"comment\">/* 31 131 1313 13131 131313 etc.. */</span></span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> hash = <span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> i    = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; len; str++, i++) &#123;</span><br><span class=\"line\">      hash = (hash * seed) + (*str);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> hash;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* End Of BKDR Hash Function */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> <span class=\"title function_\">SDBMHash</span><span class=\"params\">(<span class=\"type\">char</span>* str, <span class=\"type\">unsigned</span> <span class=\"type\">int</span> len)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> hash = <span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> i    = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; len; str++, i++) &#123;</span><br><span class=\"line\">      hash = (*str) + (hash &lt;&lt; <span class=\"number\">6</span>) + (hash &lt;&lt; <span class=\"number\">16</span>) - hash;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> hash;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* End Of SDBM Hash Function */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> <span class=\"title function_\">DJBHash</span><span class=\"params\">(<span class=\"type\">char</span>* str, <span class=\"type\">unsigned</span> <span class=\"type\">int</span> len)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> hash = <span class=\"number\">5381</span>;</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> i    = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; len; str++, i++)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      hash = ((hash &lt;&lt; <span class=\"number\">5</span>) + hash) + (*str);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> hash;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* End Of DJB Hash Function */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> <span class=\"title function_\">DEKHash</span><span class=\"params\">(<span class=\"type\">char</span>* str, <span class=\"type\">unsigned</span> <span class=\"type\">int</span> len)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> hash = len;</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> i    = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; len; str++, i++)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      hash = ((hash &lt;&lt; <span class=\"number\">5</span>) ^ (hash &gt;&gt; <span class=\"number\">27</span>)) ^ (*str);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> hash;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* End Of DEK Hash Function */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> <span class=\"title function_\">BPHash</span><span class=\"params\">(<span class=\"type\">char</span>* str, <span class=\"type\">unsigned</span> <span class=\"type\">int</span> len)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> hash = <span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> i    = <span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; len; str++, i++)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      hash = hash &lt;&lt; <span class=\"number\">7</span> ^ (*str);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> hash;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* End Of BP Hash Function */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> <span class=\"title function_\">FNVHash</span><span class=\"params\">(<span class=\"type\">char</span>* str, <span class=\"type\">unsigned</span> <span class=\"type\">int</span> len)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">int</span> fnv_prime = <span class=\"number\">0x811C9DC5</span>;</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> hash      = <span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> i         = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; len; str++, i++)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      hash *= fnv_prime;</span><br><span class=\"line\">      hash ^= (*str);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> hash;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* End Of FNV Hash Function */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> <span class=\"title function_\">APHash</span><span class=\"params\">(<span class=\"type\">char</span>* str, <span class=\"type\">unsigned</span> <span class=\"type\">int</span> len)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> hash = <span class=\"number\">0xAAAAAAAA</span>;</span><br><span class=\"line\">   <span class=\"type\">unsigned</span> <span class=\"type\">int</span> i    = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; len; str++, i++)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      hash ^= ((i &amp; <span class=\"number\">1</span>) == <span class=\"number\">0</span>)</span><br><span class=\"line\">         ? (  (hash &lt;&lt;  <span class=\"number\">7</span>) ^ (*str) * (hash &gt;&gt; <span class=\"number\">3</span>))</span><br><span class=\"line\">         : (~((hash &lt;&lt; <span class=\"number\">11</span>) + ((*str) ^ (hash &gt;&gt; <span class=\"number\">5</span>))));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> hash;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* End Of AP Hash Function */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*Hash string with 11 different hash function(flag = 0)</span></span><br><span class=\"line\"><span class=\"comment\">Or Search string in a maked bloom filter(flag = 1)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">bloomfilter_insert</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">char</span> * bitmap, <span class=\"type\">char</span>* emailstring, <span class=\"type\">int</span> flag)</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">int</span> index;</span><br><span class=\"line\"></span><br><span class=\"line\">\tindex = RSHash(emailstring,<span class=\"built_in\">strlen</span>(emailstring)) % MAX;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(flag == <span class=\"number\">1</span>)&#123;<span class=\"keyword\">if</span>(bitmap_get(bitmap,index) == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> bitmap_set(bitmap,index,<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tindex = JSHash(emailstring,<span class=\"built_in\">strlen</span>(emailstring)) % MAX;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(flag == <span class=\"number\">1</span>)&#123;<span class=\"keyword\">if</span>(bitmap_get(bitmap,index) == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> bitmap_set(bitmap,index,<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tindex = PJWHash(emailstring,<span class=\"built_in\">strlen</span>(emailstring)) % MAX;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(flag == <span class=\"number\">1</span>)&#123;<span class=\"keyword\">if</span>(bitmap_get(bitmap,index) == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> bitmap_set(bitmap,index,<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tindex = ELFHash(emailstring,<span class=\"built_in\">strlen</span>(emailstring)) % MAX;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(flag == <span class=\"number\">1</span>)&#123;<span class=\"keyword\">if</span>(bitmap_get(bitmap,index) == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> bitmap_set(bitmap,index,<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tindex = BKDRHash(emailstring,<span class=\"built_in\">strlen</span>(emailstring)) % MAX;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(flag == <span class=\"number\">1</span>)&#123;<span class=\"keyword\">if</span>(bitmap_get(bitmap,index) == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> bitmap_set(bitmap,index,<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tindex = SDBMHash(emailstring,<span class=\"built_in\">strlen</span>(emailstring)) % MAX;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(flag == <span class=\"number\">1</span>)&#123;<span class=\"keyword\">if</span>(bitmap_get(bitmap,index) == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> bitmap_set(bitmap,index,<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tindex = DJBHash(emailstring,<span class=\"built_in\">strlen</span>(emailstring)) % MAX;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(flag == <span class=\"number\">1</span>)&#123;<span class=\"keyword\">if</span>(bitmap_get(bitmap,index) == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> bitmap_set(bitmap,index,<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tindex = DEKHash(emailstring,<span class=\"built_in\">strlen</span>(emailstring)) % MAX;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(flag == <span class=\"number\">1</span>)&#123;<span class=\"keyword\">if</span>(bitmap_get(bitmap,index) == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> bitmap_set(bitmap,index,<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tindex = BPHash(emailstring,<span class=\"built_in\">strlen</span>(emailstring)) % MAX;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(flag == <span class=\"number\">1</span>)&#123;<span class=\"keyword\">if</span>(bitmap_get(bitmap,index) == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> bitmap_set(bitmap,index,<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tindex = FNVHash(emailstring,<span class=\"built_in\">strlen</span>(emailstring)) % MAX;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(flag == <span class=\"number\">1</span>)&#123;<span class=\"keyword\">if</span>(bitmap_get(bitmap,index) == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> bitmap_set(bitmap,index,<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tindex = APHash(emailstring,<span class=\"built_in\">strlen</span>(emailstring)) % MAX;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(flag == <span class=\"number\">1</span>)&#123;<span class=\"keyword\">if</span>(bitmap_get(bitmap,index) == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> bitmap_set(bitmap,index,<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试部分略。</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>实际操作中，Bloom Filter达到了和Trie一样的效果，且时间短，占用内存少。可见其效率。实际上，Bloom Filter已有诸多应用：</p>\n<ul>\n<li>Google 著名的分布式数据库 Bigtable 使用了布隆过滤器来查找不存在的行或列，以减少磁盘查找的IO次数。</li>\n<li>Squid 网页代理缓存服务器在 <a href=\"http://wiki.squid-cache.org/SquidFaq/CacheDigests\">cache digests</a>中使用了也布隆过滤器。</li>\n<li>Venti 文档存储系统也采用布隆过滤器来检测先前存储的数据。</li>\n<li>SPIN 模型检测器也使用布隆过滤器在大规模验证问题时跟踪可达状态空间。</li>\n<li>Google Chrome浏览器使用了布隆过滤器加速安全浏览服务。</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ol>\n<li><a href=\"http://zh.wikipedia.org/zh/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8\">维基百科：布隆过滤器</a></li>\n<li><a href=\"http://www.google.com.hk/ggblog/googlechinablog/2007/07/bloom-filter_7469.html\">数学之美二十一：布隆过滤器（Bloom Filter）</a></li>\n<li><a href=\"http://www.cnblogs.com/haippy/archive/2012/07/13/2590351.html\">布隆过滤器(Bloom Filter)详解 - Haippy - 博客园</a></li>\n<li><a href=\"http://blog.csdn.net/hguisu/article/details/7866173\">海量数据处理算法—Bloom Filter</a></li>\n<li><a href=\"http://www.cnblogs.com/heaad/archive/2011/01/02/1924195.html\">那些优雅的数据结构(1) : BloomFilter——大规模数据处理利器</a></li>\n<li><a href=\"http://blog.csdn.net/lmh12506/article/details/7575651\">Bloom Filter算法详解及实例</a></li>\n<li><a href=\"http://blog.chinaunix.net/uid-22663647-id-1771837.html\">bitmap应用及C语言实现</a></li>\n<li><a href=\"http://www.oschina.net/code/snippet_1178986_47569\">bitmap C语言实现</a></li>\n<li><a href=\"http://www.partow.net/programming/hashfunctions/\">General Purpose Hash Function Algorithms</a></li>\n</ol>\n",
            "tags": [
                "C",
                "Hash",
                "布隆过滤器",
                "字符串检索"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2015/11/02/trie/",
            "url": "http://shenlvmeng.github.com/blog/2015/11/02/trie/",
            "title": "海量字符串搜索之一 Trie树",
            "date_published": "2015-11-02T11:13:54.000Z",
            "content_html": "<p>前言：编程第一次大作业，海量字符串检索。C语言，并要求使用trie树结构以及bloomfilter两种技术实现，体会它们的特点。这里对Trie做些学习笔记。</p>\n<h2 id=\"Trie树\"><a href=\"#Trie树\" class=\"headerlink\" title=\"Trie树\"></a>Trie树</h2><p>Trie树，又称单词查找树、字典树，是一种树形结构，是一种哈希树的变种，是一种用于快速检索的多叉树结构。典型应用是用于统计和排序大量的字符串（但不仅限于字符串），所以经常被搜索引擎系统用于文本词频统计。<strong>它的优点是：最大限度地减少无谓的字符串比较，查询效率比哈希表高。</strong></p>\n<p><strong>Trie的核心思想是空间换时间。</strong>利用字符串的公共前缀来降低查询时间的开销以达到提高效率的目的，例如邮箱的公共后缀。</p>\n<p><strong>Trie树也有它的缺点</strong>,Trie树的内存消耗非常大.当然,或许用左儿子右兄弟的方法建树的话,可能会好点.</p>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><ol>\n<li>根节点不包含字符，除根节点外每一个节点都只包含一个字符。</li>\n<li>从根节点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串。</li>\n<li>每个节点的所有子节点包含的字符都不相同<br>例如，给出一组单词：inn, int, at, age, adv, ant, 我们可以得到下面的Trie树</li>\n</ol>\n<p><img src=\"/blog/images/trie-1.gif\"></p>\n<p>可以看出：</p>\n<ul>\n<li>每条边对应一个字母。</li>\n<li>每个节点对应一项前缀。叶节点对应最长前缀，即单词本身。</li>\n<li>单词inn与单词int有共同的前缀“in”, 因此他们共享左边的一条分支，root-&gt;i-&gt;in。同理，ate, age, adv, 和ant共享前缀”a”，所以他们共享从根节点到节点”a”的边。</li>\n</ul>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><h4 id=\"1-插入过程\"><a href=\"#1-插入过程\" class=\"headerlink\" title=\"1. 插入过程\"></a>1. 插入过程</h4><p>对于新的单词，从根开始，沿着单词的各个字母所对应的树中的节点分支向下走，直到单词遍历完，将最后的节点做标记，表示该单词已插入trie树。</p>\n<h4 id=\"2-检索过程\"><a href=\"#2-检索过程\" class=\"headerlink\" title=\"2. 检索过程\"></a>2. 检索过程</h4><p>从根开始按照单词的字母顺序向下遍历trie树，一旦发现某个节点标记不存在或者单词遍历完成而最后的节点没有标记，则表示该单词不存在，若最后的节点有标记，表示该单词存在。</p>\n<h4 id=\"3-删除节点\"><a href=\"#3-删除节点\" class=\"headerlink\" title=\"3. 删除节点\"></a>3. 删除节点</h4><p>很少使用，从该节点开始，释放它和所有子节点占用的空间。</p>\n<h4 id=\"4-代码\"><a href=\"#4-代码\" class=\"headerlink\" title=\"4. 代码\"></a>4. 代码</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">TrieNode</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> count; <span class=\"comment\">//statistics</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">TrieNode</span>* <span class=\"title\">next</span>[<span class=\"title\">MAX</span>];</span></span><br><span class=\"line\">&#125;TrieNode;</span><br><span class=\"line\"></span><br><span class=\"line\">TrieNode* <span class=\"title function_\">CreateNode</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\tTrieNode* p = (TrieNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(TrieNode));</span><br><span class=\"line\">\tp-&gt;count=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(p-&gt;next, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(p-&gt;next));</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*Insert new entry*/</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InsertTrieNode</span><span class=\"params\">(TrieNode* pRoot, <span class=\"type\">char</span> *s, <span class=\"type\">int</span> flag)</span>&#123;</span><br><span class=\"line\">\tTrieNode *p = pRoot;</span><br><span class=\"line\">\t<span class=\"type\">int</span> i,k;</span><br><span class=\"line\">\ti = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(s[i])&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//confirm branch</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(s[i] &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; s[i] &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\"> \t\t\tk = s[i++] - <span class=\"string\">&#x27;0&#x27;</span> + <span class=\"number\">2</span>;</span><br><span class=\"line\"> \t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s[i] &gt;= <span class=\"string\">&#x27;@&#x27;</span> &amp;&amp; s[i] &lt;=<span class=\"string\">&#x27;Z&#x27;</span>)</span><br><span class=\"line\"> \t\t\tk = s[i++] - <span class=\"string\">&#x27;@&#x27;</span> + <span class=\"number\">12</span>;</span><br><span class=\"line\"> \t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s[i] &gt;= <span class=\"string\">&#x27;a&#x27;</span> &amp;&amp; s[i] &lt;= <span class=\"string\">&#x27;z&#x27;</span>)</span><br><span class=\"line\"> \t\t\tk = s[i++] - <span class=\"string\">&#x27;a&#x27;</span> + <span class=\"number\">13</span>;</span><br><span class=\"line\"> \t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s[i] == <span class=\"string\">&#x27;.&#x27;</span> || s[i] == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\"> \t\t\tk = s[i++] - <span class=\"string\">&#x27;-&#x27;</span>;</span><br><span class=\"line\"> \t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s[i] == <span class=\"string\">&#x27;_&#x27;</span>)&#123;</span><br><span class=\"line\"> \t\t\tk = <span class=\"number\">39</span>;i++;</span><br><span class=\"line\"> \t\t&#125;</span><br><span class=\"line\"> \t\t<span class=\"keyword\">else</span></span><br><span class=\"line\"> \t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\"> \t\t<span class=\"keyword\">if</span>(<span class=\"literal\">NULL</span> == p-&gt;next[k]) </span><br><span class=\"line\">\t\t\tp-&gt;next[k] = CreateNode();\t\t</span><br><span class=\"line\">\t\tp = p-&gt;next[k];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//mark the trie string</span></span><br><span class=\"line\">\tp-&gt;count = flag;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*Match certain string*/</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">SearchTrie</span><span class=\"params\">(TrieNode* pRoot, <span class=\"type\">char</span> *s)</span>&#123;</span><br><span class=\"line\">\tTrieNode *p = pRoot;</span><br><span class=\"line\">\t<span class=\"type\">int</span> i,k;</span><br><span class=\"line\">\ti = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(s[i])&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(s[i] &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; s[i] &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\"> \t\t\tk = s[i++] - <span class=\"string\">&#x27;0&#x27;</span> + <span class=\"number\">2</span>;</span><br><span class=\"line\"> \t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s[i] &gt;= <span class=\"string\">&#x27;@&#x27;</span> &amp;&amp; s[i] &lt;=<span class=\"string\">&#x27;Z&#x27;</span>)</span><br><span class=\"line\"> \t\t\tk = s[i++] - <span class=\"string\">&#x27;@&#x27;</span> + <span class=\"number\">12</span>;</span><br><span class=\"line\"> \t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s[i] &gt;= <span class=\"string\">&#x27;a&#x27;</span> &amp;&amp; s[i] &lt;= <span class=\"string\">&#x27;z&#x27;</span>) </span><br><span class=\"line\">\t\t\tk = s[i++] - <span class=\"string\">&#x27;a&#x27;</span> + <span class=\"number\">13</span>;</span><br><span class=\"line\"> \t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s[i] == <span class=\"string\">&#x27;.&#x27;</span> || s[i] == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\"> \t\t\tk = s[i++] - <span class=\"string\">&#x27;-&#x27;</span>;</span><br><span class=\"line\"> \t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s[i] == <span class=\"string\">&#x27;_&#x27;</span>)&#123;</span><br><span class=\"line\"> \t\t\tk = <span class=\"number\">39</span>;i++;</span><br><span class=\"line\"> \t\t&#125;</span><br><span class=\"line\"> \t\t<span class=\"keyword\">else</span></span><br><span class=\"line\"> \t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"> \t\t<span class=\"keyword\">if</span>(p-&gt;next[k] == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tp = p-&gt;next[k];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(p-&gt;count &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> p-&gt;count;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果略。</p>\n<h3 id=\"查找性能分析\"><a href=\"#查找性能分析\" class=\"headerlink\" title=\"查找性能分析\"></a>查找性能分析</h3><p>在trie树中查找一个关键字的时间和树中包含的结点数无关，而取决于组成关键字的字符数。而二叉查找树的查找时间和树中的结点数有关O(log2n)。</p>\n<p>如果要查找的关键字可以分解成字符序列且不是很长，利用trie树查找速度优于二叉查找树。如：若关键字长度最大是5，则利用trie树，利用5次比较可以从26^5＝11881376个可能的关键字中检索出指定的关键字。而利用二叉查找树至少要进行约23.5次比较。</p>\n<h3 id=\"Trie树的应用\"><a href=\"#Trie树的应用\" class=\"headerlink\" title=\"Trie树的应用\"></a>Trie树的应用</h3><ul>\n<li>串的快速检索：<br>给出N个单词组成的熟词表，以及一篇全用小写英文书写的文章，请你按最早出现的顺序写出所有不在熟词表中的生词。<br>在这道题中，我们可以用数组枚举，用哈希，用字典树，先把熟词建一棵树，然后读入文章进行比较，这种方法效率是比较高的。</li>\n<li>串排序：<br>给定N个互不相同的仅由一个单词构成的英文名，让你将他们按字典序从小到大输出。<br>用字典树进行排序，采用数组的方式创建字典树，这棵树的每个结点的所有儿子很显然地按照其字母大小排序。对这棵树进行先序遍历即可。</li>\n<li>最长公共前缀<br>对所有串建立字典树，对于两个串的最长公共前缀的长度即他们所在的结点的公共祖先个数，于是，问题就转化为当时公共祖先问题（以后补上）。</li>\n</ul>\n<h3 id=\"Patricia-Trie\"><a href=\"#Patricia-Trie\" class=\"headerlink\" title=\"Patricia Trie\"></a>Patricia Trie</h3><p>针对，Trie树占用空间较多的缺点。可以对每个trie树节点做压缩工作，从而节省程序占用的内存空间。如果一颗Trie中有很多单词只有一个儿子结点，可以用Patricia Trie（Linux内核中叫做Radix Tree）压缩存储。由于#结束符标记被看作是一个叶子结点，那么一颗Patricia Trie的任何内部结点有2个或以上的孩子结点。</p>\n<p>Linux radix树最广泛的用途是用于内存管理，结构address_space通过radix树跟踪绑定到地址映射上的核心页，该radix树允许内存管理代码快速查找标识为dirty或writeback的页。Linux radix树的API函数在lib&#x2F;radix-tree.c中实现。</p>\n<p>作为Trie树的优化变异，Patricia树也可进行Trie树的操作。实现略。</p>\n<h2 id=\"Trie树之外\"><a href=\"#Trie树之外\" class=\"headerlink\" title=\"Trie树之外\"></a>Trie树之外</h2><p>除了Trie树，最常用的字符串检索有<a href=\"https://en.wikipedia.org/wiki/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm\">Knuth-Morris-Pratt</a>算法（最长前缀匹配），以及<a href=\"https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_string_search_algorithm\">Boyer-Moore</a>算法（最长后缀匹配）。关于这两个算法，参考资料的6和7的链接是我见过介绍的最好的，深入浅出易于理解。这里就不再废话了。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ol>\n<li><a href=\"http://blog.csdn.net/hguisu/article/details/8131559\" title=\"http://blog.csdn.net/hguisu/article/details/8131559\">http://blog.csdn.net/hguisu/article/details/8131559</a></li>\n<li><a href=\"http://blog.csdn.net/sjjbupt/article/details/6758309\" title=\"http://blog.csdn.net/sjjbupt/article/details/6758309\">http://blog.csdn.net/sjjbupt/article/details/6758309</a></li>\n<li><a href=\"http://blog.chinaunix.net/xmlrpc.php?r=blog/article&uid=28977986&id=3807947\" title=\"http://blog.chinaunix.net/xmlrpc.php?r=blog/article&amp;uid=28977986&amp;id=3807947\">http://blog.chinaunix.net/xmlrpc.php?r=blog/article&uid=28977986&id=3807947</a></li>\n<li><a href=\"http://www.cnblogs.com/ljsspace/archive/2011/06/27/2091771.html\" title=\"http://www.cnblogs.com/ljsspace/archive/2011/06/27/2091771.html\">http://www.cnblogs.com/ljsspace/archive/2011/06/27/2091771.html</a></li>\n<li><a href=\"http://blog.chinaunix.net/uid-13245160-id-84371.html\" title=\"http://blog.chinaunix.net/uid-13245160-id-84371.html\">http://blog.chinaunix.net/uid-13245160-id-84371.html</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.htm\" title=\"http://www.ruanyifeng.com/blog/2013/05/boyer-moore_string_search_algorithm.html\">http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.htm</a>l</li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2013/05/boyer-moore_string_search_algorithm.html\" title=\"http://www.ruanyifeng.com/blog/2013/05/boyer-moore_string_search_algorithm.html\">http://www.ruanyifeng.com/blog/2013/05/boyer-moore_string_search_algorithm.html</a></li>\n</ol>\n",
            "tags": [
                "字符串检索",
                "C语言",
                "树"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2015/01/31/embed-c/",
            "url": "http://shenlvmeng.github.com/blog/2015/01/31/embed-c/",
            "title": "虚网映射仿真包 embed.c 代码分析",
            "date_published": "2015-01-31T05:03:23.000Z",
            "content_html": "<p>此次论文仿真中，需要对虚网映射的过程进行改进。在原先只考量CPU和带宽的基础上为链路增加VLAN属性，并在映射过程中分配VLAN、检测VLAN是否用尽。经过三天的阅读，这里把仿真包里embed.c这个主要文件的各函数分析在下面，方便日后修改。</p>\n<h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><p>数据结构存储在embed.h中。</p>\n<ul>\n<li>struct_link 描述物理链路，有from、to、带宽三个属性</li>\n<li>request 虚网请求，有split, node, links, CPU[], bw等多个属性。</li>\n<li>substrate_network 底层物理网络，有nodes, struct_link links等属性</li>\n<li>s2v_node 被映射了虚网的物理节点的状态</li>\n<li>s2v_link 被映射了虚网的物理链路的状态</li>\n<li>path 逻辑链路映射成的多段物理链路</li>\n<li>req2sub 描述虚网映射的实时映射关系</li>\n<li>shortest_path 最短路径，通过Floyd算出（用于链路映射）</li>\n<li>bneck 瓶颈节点</li>\n</ul>\n<h2 id=\"相关函数\"><a href=\"#相关函数\" class=\"headerlink\" title=\"相关函数\"></a>相关函数</h2><h3 id=\"节点映射\"><a href=\"#节点映射\" class=\"headerlink\" title=\"节点映射\"></a>节点映射</h3><h4 id=\"find-proper-node\"><a href=\"#find-proper-node\" class=\"headerlink\" title=\"find_proper_node\"></a>find_proper_node</h4><p><strong>目标</strong>：在当前底层物理网络中寻找rest_cou最适合（rest_cpu和request CPU最近，且大于它）当前虚节点的节点。</p>\n<h4 id=\"find-MinNeighborResource-node\"><a href=\"#find-MinNeighborResource-node\" class=\"headerlink\" title=\"find_MinNeighborResource_node\"></a>find_MinNeighborResource_node</h4><p><strong>目标</strong>：在当前底层物理网络中寻找rest_cpu满足要求，且自资源最不丰富的物理节点</p>\n<p>衡量标准：节点rest_cpu * sum(rest_bw)</p>\n<h4 id=\"find-MaxNeighborResource-node\"><a href=\"#find-MaxNeighborResource-node\" class=\"headerlink\" title=\"find_MaxNeighborResource_node\"></a>find_MaxNeighborResource_node</h4><p><strong>目标</strong>：在当前底层物理网络中寻找除了exclude节点外的rest_cpu满足要求的，且自资源最丰富的物理</p>\n<p>节点</p>\n<p>衡量标准：同上</p>\n<h4 id=\"find-available-node\"><a href=\"#find-available-node\" class=\"headerlink\" title=\"find_available_node\"></a>find_available_node</h4><p><strong>目标</strong>：在当前底层物理网络中，从一随机起点出发，寻找第一个rest_cpu满足要求的物理节点</p>\n<h4 id=\"map-node-greedy\"><a href=\"#map-node-greedy\" class=\"headerlink\" title=\"map_node_greedy\"></a>map_node_greedy</h4><p><strong>目标</strong>：在当前物理网络中，为特定index的虚网映射进行节点映射，哟西按占用资源最丰富的节点，成功则更新物理网络的状态（s2v_node, s2v_link），失败则对已映射的节点进行拆除。</p>\n<h4 id=\"map-node-star\"><a href=\"#map-node-star\" class=\"headerlink\" title=\"map_node_star\"></a>map_node_star</h4><p><strong>目标</strong>：在当前物理网络中，为第一个请求节点分配资源最丰富的节点，其余逻辑节点随机分配，成功则更新物理网络的状态（s2v_node, s2v_link），失败则对已映射的节点进行拆除。</p>\n<h3 id=\"链路映射\"><a href=\"#链路映射\" class=\"headerlink\" title=\"链路映射\"></a>链路映射</h3><p>由于链路映射算法大多很复杂，这里将算法流程也一并列在下方。</p>\n<h4 id=\"unsplittable-flow\"><a href=\"#unsplittable-flow\" class=\"headerlink\" title=\"unsplittable_flow\"></a>unsplittable_flow</h4><p><strong>目标</strong>：为不可分割流进行链路映射</p>\n<p><strong>算法流程</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0  初始化变量，位置分配内存空间</span><br><span class=\"line\">1  死循环</span><br><span class=\"line\">1.1  找到请求中状态满足要求（完成了节点映射）且收益最大的请求，直到状态全部更新</span><br><span class=\"line\">1.1.1    存储id,改变其标志位</span><br><span class=\"line\">1.2  判断该请求状态，与是否可分割</span><br><span class=\"line\">1.2.1    找到该请求的所有逻辑链路</span><br><span class=\"line\">1.2.1.1      找到它们的起始、终结物理节点</span><br><span class=\"line\">1.2.1.2      判断它们是否已找到之间的最短路，否则继续寻找</span><br><span class=\"line\">1.2.1.2.1        Floyd矩阵找下一跳</span><br><span class=\"line\">1.2.1.2.2        下一跳若不可达，break</span><br><span class=\"line\">1.2.1.2.3        寻找有没有实体链路对应Floyd的下一跳</span><br><span class=\"line\">1.2.1.2.4        如果没有，或者有但是rest_bw不够，break</span><br><span class=\"line\">1.2.1.2.5        吧路过链路的可用带宽减少，将当前链路存入到路径数组中</span><br><span class=\"line\">1.2.1.3      如果上一步失败，给sub1(底层物理网络)划分内存空间，在sub1里删除上步出现问题的链路</span><br><span class=\"line\">1.2.1.4      在sub1里算出Floyd矩阵，并存储在临时变量里</span><br><span class=\"line\">1.2.1.4.1        一个类似于1.2.1.2的循环</span><br><span class=\"line\">1.2.1.4.1.1          若还不行，break到1.2.1.4.2；若可以减少可用带宽，存入到路径</span><br><span class=\"line\">1.2.1.4.2        返回错误物理链路、虚拟链路、虚网请求id</span><br><span class=\"line\">1.2.1.5      存储当前算出的路径，与逻辑链路一一对应</span><br><span class=\"line\">2  将状态标志位全部清零</span><br><span class=\"line\">3  死循环</span><br><span class=\"line\">3.1    找到请求中状态满足要求（完成了节点映射）且收益最大的请求，直到状态全部更新</span><br><span class=\"line\">3.1.1      存储id, 改变标志位</span><br><span class=\"line\">3.2    判断该请求状态，与是否可分割</span><br><span class=\"line\">3.2.1      更新时间与链路状态值</span><br><span class=\"line\">3.2.2      为请求内的spath赋值(len, bw)</span><br><span class=\"line\">3.2.2.1        为spath内的各段物理链路赋值</span><br><span class=\"line\">3.2.2.2        更新物理网络链路状态</span><br><span class=\"line\">4  释放临时变量空间</span><br><span class=\"line\">5  返回-1(虚网请求成功标志)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"multicommodity-flow\"><a href=\"#multicommodity-flow\" class=\"headerlink\" title=\"multicommodity_flow\"></a>multicommodity_flow</h4><p><strong>目标</strong>：打印基本信息</p>\n<p><strong>算法流程</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1  打开测试文件</span><br><span class=\"line\">2  指定范围内检测有误状态符合条件的请求，</span><br><span class=\"line\">3  若没有，则返回-2并关闭文件</span><br><span class=\"line\">4  打印出满足要求的链路总数</span><br><span class=\"line\">5  打印基本信息到文件</span><br><span class=\"line\">6  打印ARC COSTS到文件</span><br><span class=\"line\">7  打印ARC CAPACITIES到文件</span><br><span class=\"line\">8  打印NODE INJECTIONS到文件</span><br><span class=\"line\">9  打印ARC MUTUAL到文件</span><br><span class=\"line\">10 打印NETWORK TOPOLOGY到文件</span><br><span class=\"line\">11 打印LOWER AND UPPER BOUNDS到文件</span><br><span class=\"line\">12 打印SIDE CONSTRAINTS到文件</span><br><span class=\"line\">13 关闭文件对象</span><br><span class=\"line\">14 运行lintest文件</span><br><span class=\"line\">15 返回 0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"检测\"><a href=\"#检测\" class=\"headerlink\" title=\"检测\"></a>检测</h3><h4 id=\"check-flow\"><a href=\"#check-flow\" class=\"headerlink\" title=\"check_flow\"></a>check_flow</h4><p><strong>目标</strong>：检查映射情况</p>\n<p><strong>算法流程</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1  打开test文件，初始化变量</span><br><span class=\"line\">2  查找STATUS字段，停在此处</span><br><span class=\"line\">3  若不可执行，且阶段 0，则关闭文件，返回 -3</span><br><span class=\"line\">4  若不可执行，且阶段 1，则继续</span><br><span class=\"line\">4.1    查找VARIABLE字段</span><br><span class=\"line\">4.2    在每条链路上查找已使用过的情况，为s2v_link赋值</span><br><span class=\"line\">4.3    查找SIDE CONSTRAINTS字段</span><br><span class=\"line\">4.3.1      找到过载最严重的链路</span><br><span class=\"line\">4.3.2      找到该链路占用最多贷款的租户ID，及其占用带宽，并确定请求ID和虚拟链路ID</span><br><span class=\"line\">5  其余情况，查找OPTIMAL字段，若找到，则继续</span><br><span class=\"line\">5.1    查找VARAIABLE字段</span><br><span class=\"line\">5.2    在每条链路上查找已使用过的情况，为s2v_link赋值</span><br><span class=\"line\">5.3    为v2s赋值</span><br><span class=\"line\">6  关闭文件，释放内存</span><br><span class=\"line\">7 打印租户ID或-1（成功标志）</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"资源分配\"><a href=\"#资源分配\" class=\"headerlink\" title=\"资源分配\"></a>资源分配</h3><p>同样，算法复杂，将具体流程列在下面</p>\n<h4 id=\"allocate\"><a href=\"#allocate\" class=\"headerlink\" title=\"allocate\"></a>allocate</h4><p><strong>目标</strong>：整合节点、链路映射完成虚网映射的核心部分</p>\n<p><strong>算法流程：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1  为变量s2v_node,s2v_link,v2s划分空间，赋初值</span><br><span class=\"line\">2  为节点数组req_count清零</span><br><span class=\"line\">3  将请求按收入大小排序，找出最大收入者，为它进行节点映射，知道请求的节点映射全部完成</span><br><span class=\"line\">4  若全部未完成节点映射，返回-1</span><br><span class=\"line\">5  初始化链路映射相关变量</span><br><span class=\"line\">6  找到瓶颈节点，并进行链路映射（尝试）</span><br><span class=\"line\">7  若映射成功或链路可分割，用新方法找到瓶颈节点</span><br><span class=\"line\">8  循环：</span><br><span class=\"line\">8.1    如果上一步尝试成功，为s2v_node, s2v_link赋值，跳出循环</span><br><span class=\"line\">8.2    否则，计算这一批次的cost之和</span><br><span class=\"line\">8.3    找出剩余资源最少的节点ID，及其剩余资源</span><br><span class=\"line\">8.4    随机从上面移除一个虚拟节点</span><br><span class=\"line\">8.5    找到这个节点以外资源最丰富的节点，成功则映射到这个新节点；否则映射请求失败</span><br><span class=\"line\">8.6    检查有误未完成链路请求的虚网请求，无则跳出循环</span><br><span class=\"line\">8.7    若时间正忙而无法映射，try=门限+1，找到未完成的请求ID</span><br><span class=\"line\">8.8    cost清零，try+1，打印try次数</span><br><span class=\"line\">8.9    若try &gt; 尝试门限，释放资源，更改状态，还原try</span><br><span class=\"line\">8.10   否则，找到瓶颈链路上的任一节点外的资源最丰富的节点</span><br><span class=\"line\">8.10.1     若找到，则映射；否则这个请求失败</span><br><span class=\"line\">8.11   检查链路映射是否完成，为s2v_node, s2v_link, v2s赋值</span><br><span class=\"line\">9  检查当前瓶颈节点，尝试链路映射</span><br><span class=\"line\">10 为s2v_node, s2v_link等赋值，用cost防止重复操作</span><br><span class=\"line\">11 检查新映射是否cost更低，是则更新</span><br><span class=\"line\">12 #允许迁移则继续向下</span><br><span class=\"line\">13 计算原始cost，释放原始映射资源，进行新的映射</span><br><span class=\"line\">14 新的映射成功则计算新cost，否则返回 0</span><br><span class=\"line\">15 新的cost是否更小，是则迁移，否则不做操作</span><br><span class=\"line\">16 还原s2v_node, ltmp</span><br><span class=\"line\">17 用unsplittable映射计算一次cost，若新的cost更小，则迁移；否则不作操作</span><br><span class=\"line\">18 更新s2v_node, s2v_link v2s</span><br><span class=\"line\">19 返回 0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"辅助\"><a href=\"#辅助\" class=\"headerlink\" title=\"辅助\"></a>辅助</h3><h4 id=\"calculate-cost\"><a href=\"#calculate-cost\" class=\"headerlink\" title=\"calculate_cost\"></a>calculate_cost</h4><p><strong>目标</strong>：返回指定范围内的虚网请求cost之和。cost算法同上</p>\n<p>筛选标准：完成链路映射</p>\n<h4 id=\"exist-req\"><a href=\"#exist-req\" class=\"headerlink\" title=\"exist_req\"></a>exist_req</h4><p><strong>目标</strong>：查找是否存在完成了节点映射，未完成链路映射的请求。存在，则返回0，否则返回-1。</p>\n<h4 id=\"主函数-main\"><a href=\"#主函数-main\" class=\"headerlink\" title=\"主函数 main\"></a>主函数 main</h4><p><strong>算法流程</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1  为v2s, s2v_node, s2v_link, sub, req 赋初值</span><br><span class=\"line\">2  打开底层网络文件</span><br><span class=\"line\">3  为sub赋node(sub.s2v_nod(req_count,rest_cpu,cpu),sub.link(from,to,s2v_l,rest_bw))</span><br><span class=\"line\">4  关闭文件</span><br><span class=\"line\">5  循环打各req的文件</span><br><span class=\"line\">5.1   为req的revenue/nodes,links,split,time,duration,topo)赋值</span><br><span class=\"line\">5.2   循环为req的cpu,link.from,link.to,link.bw赋值</span><br><span class=\"line\">5.3   计算出revenue</span><br><span class=\"line\">6  关闭文件</span><br><span class=\"line\">7  为临时变量s2v_node/ltmp2/v2stmp2/spath分配内存空间</span><br><span class=\"line\">8  计算得到spath值</span><br><span class=\"line\">9  初始化临时变量</span><br><span class=\"line\">10 循环：</span><br><span class=\"line\">10.1   循环检测所有完成链路映射的请求，为done_count+1</span><br><span class=\"line\">10.2   更新done,rev,cost,map状态，若映射完成则释放资源</span><br><span class=\"line\">10.3   计算当前req.rev/cost/count</span><br><span class=\"line\">10.4   写入当前数据到文件</span><br><span class=\"line\">11 为当前所有请求进行映射</span><br><span class=\"line\">12 依次次检测所有请求状态，更新未请求成功的状态与错误计数器</span><br><span class=\"line\">13 打开stat文件</span><br><span class=\"line\">14 为成功的虚网请求释放资源</span><br><span class=\"line\">15 计算当前req,dev/cost/count</span><br><span class=\"line\">16 写入当前数据到stat文件/trace文件</span><br><span class=\"line\">17 关闭文件</span><br><span class=\"line\">18 返回 0</span><br></pre></td></tr></table></figure>",
            "tags": [
                "算法",
                "虚网映射"
            ]
        }
    ]
}