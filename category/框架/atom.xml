<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://shenlvmeng.github.com/blog</id>
    <title>Shenlvmeng&#39;s Blog • Posts by &#34;框架&#34; category</title>
    <link href="http://shenlvmeng.github.com/blog" />
    <updated>2018-04-17T15:45:03.000Z</updated>
    <category term="总结" />
    <category term="制度" />
    <category term="道德" />
    <category term="文官" />
    <category term="万历" />
    <category term="明朝" />
    <category term="读书笔记" />
    <category term="展望" />
    <category term="2018" />
    <category term="2019" />
    <category term="flag" />
    <category term="2020" />
    <category term="2021" />
    <category term="2022" />
    <category term="2023" />
    <category term="面试" />
    <category term="前端" />
    <category term="FAQ" />
    <category term="HTML" />
    <category term="CSS" />
    <category term="style guide" />
    <category term="编程" />
    <category term="范式" />
    <category term="设计" />
    <category term="艺术" />
    <category term="质量" />
    <category term="async_hooks" />
    <category term="cls-hooked" />
    <category term="logId" />
    <category term="录音" />
    <category term="getUserMedia" />
    <category term="AudioContext" />
    <category term="PCM" />
    <category term="WAVE" />
    <category term="二叉搜索树" />
    <category term="算法" />
    <category term="回忆" />
    <category term="老朋友" />
    <category term="C" />
    <category term="Hash" />
    <category term="布隆过滤器" />
    <category term="字符串检索" />
    <category term="canvas" />
    <category term="流程图" />
    <category term="d3" />
    <category term="g6" />
    <category term="zrender" />
    <category term="processOn" />
    <category term="SDN" />
    <category term="cbench" />
    <category term="安装说明" />
    <category term="绘图" />
    <category term="动画" />
    <category term="攻略" />
    <category term="流水账" />
    <category term="成都" />
    <category term="重庆" />
    <category term="武汉" />
    <category term="重构" />
    <category term="代码" />
    <category term="代码风格" />
    <category term="数据可视化" />
    <category term="爬虫" />
    <category term="chrome" />
    <category term="crx" />
    <category term="扩展" />
    <category term="CORS" />
    <category term="跨域" />
    <category term="盒模型" />
    <category term="浮动" />
    <category term="Reactive Programming" />
    <category term="JavaScript" />
    <category term="Cycle.js" />
    <category term="Dart" />
    <category term="最佳实践" />
    <category term="引流" />
    <category term="universal-link" />
    <category term="app-link" />
    <category term="脚手架" />
    <category term="degit" />
    <category term="git" />
    <category term="设计模式" />
    <category term="类" />
    <category term="接口" />
    <category term="抽象类" />
    <category term="DOM" />
    <category term="Docker" />
    <category term="ONOS" />
    <category term="控制器" />
    <category term="虚拟化" />
    <category term="笔记" />
    <category term="UX" />
    <category term="UED" />
    <category term="准则" />
    <category term="Java" />
    <category term="Ruby" />
    <category term="反射" />
    <category term="编程范式" />
    <category term="鸭子类型" />
    <category term="管理" />
    <category term="效率" />
    <category term="知识工作者" />
    <category term="卓有成效" />
    <category term="Elm" />
    <category term="框架" />
    <category term="函数式编程" />
    <category term="虚网映射" />
    <category term="Javascript" />
    <category term="并发" />
    <category term="event loop" />
    <category term="覆盖率" />
    <category term="端到端测试" />
    <category term="istanbul" />
    <category term="istanbuljs" />
    <category term="JavaSript" />
    <category term="Express" />
    <category term="源码" />
    <category term="代码覆盖率" />
    <category term="istanbul-middleware" />
    <category term="代码插桩" />
    <category term="require钩子" />
    <category term="babel-plugin-istanbul" />
    <category term="css" />
    <category term="html5" />
    <category term="flex" />
    <category term="javascript" />
    <category term="roadmap" />
    <category term="闭包" />
    <category term="Haskell" />
    <category term="monad" />
    <category term="后端" />
    <category term="管理后台" />
    <category term="egg.js" />
    <category term="工作流" />
    <category term="pull request" />
    <category term="golang" />
    <category term="语言学习" />
    <category term="黑客与画家" />
    <category term="创业" />
    <category term="骑行" />
    <category term="海南" />
    <category term="图文" />
    <category term="reflow" />
    <category term="repaint" />
    <category term="命名法" />
    <category term="成功学" />
    <category term="自我建设" />
    <category term="HTTP" />
    <category term="HTTP/2" />
    <category term="SPDY" />
    <category term="QUIC" />
    <category term="HTTPS" />
    <category term="状态码" />
    <category term="网络攻击" />
    <category term="介绍" />
    <category term="图片渲染" />
    <category term="html2canvas" />
    <category term="dom-to-image" />
    <category term="electron" />
    <category term="indexedDB" />
    <category term="异步" />
    <category term="Generator" />
    <category term="thunk" />
    <category term="async" />
    <category term="函数表达式" />
    <category term="对象" />
    <category term="继承" />
    <category term="类型转换" />
    <category term="==" />
    <category term="类型判断" />
    <category term="猫" />
    <category term="杀手" />
    <category term="管理学" />
    <category term="领导力" />
    <category term="梯队" />
    <category term="移动端" />
    <category term="UI" />
    <category term="自适应" />
    <category term="rem" />
    <category term="Electron" />
    <category term="GUI" />
    <category term="gpx" />
    <category term="template" />
    <category term="Electron Builder" />
    <category term="PWA" />
    <category term="方法论" />
    <category term="夜话" />
    <category term="多线" />
    <category term="生活" />
    <category term="密码" />
    <category term="密钥" />
    <category term="技改" />
    <category term="Vue" />
    <category term="gulp" />
    <category term="瀑布流" />
    <category term="电影" />
    <category term="PHP" />
    <category term="参考" />
    <category term="思维" />
    <category term="学习能力" />
    <category term="右脑" />
    <category term="经济学" />
    <category term="宏观经济学" />
    <category term="术语" />
    <category term="GDP" />
    <category term="CPI" />
    <category term="储蓄" />
    <category term="投资" />
    <category term="金融市场" />
    <category term="股票" />
    <category term="债券" />
    <category term="美联储" />
    <category term="失业" />
    <category term="货币" />
    <category term="现值" />
    <category term="准备金" />
    <category term="货币中性" />
    <category term="通货膨胀" />
    <category term="汇率" />
    <category term="购买力" />
    <category term="净出口" />
    <category term="资产净流出" />
    <category term="总需求" />
    <category term="总供给" />
    <category term="流动性偏好" />
    <category term="乘数效应" />
    <category term="菲利普斯曲线" />
    <category term="微观经济学" />
    <category term="供求" />
    <category term="贸易" />
    <category term="市场" />
    <category term="税" />
    <category term="剩余" />
    <category term="外部性" />
    <category term="公共物品" />
    <category term="公共资源" />
    <category term="生产成本" />
    <category term="利润" />
    <category term="垄断" />
    <category term="价格歧视" />
    <category term="寡头" />
    <category term="垄断竞争" />
    <category term="生产要素市场" />
    <category term="贫困" />
    <category term="消费者选择理论" />
    <category term="不对称信息" />
    <category term="政治经济学" />
    <category term="行为经济学" />
    <category term="VSCode" />
    <category term="编辑器" />
    <category term="IDE" />
    <category term="hybrid" />
    <category term="JSBridge" />
    <category term="Web Worker" />
    <category term="Service Worker" />
    <category term="习惯" />
    <category term="lint" />
    <category term="editorconfig" />
    <category term="commit message" />
    <category term="量子物理" />
    <category term="史话" />
    <category term="埋点" />
    <category term="raven.js" />
    <category term="前端监控" />
    <category term="文本编辑器" />
    <category term="quill" />
    <category term="结构化数据" />
    <category term="React" />
    <category term="Hooks" />
    <category term="函数组件" />
    <category term="复用" />
    <category term="状态管理" />
    <category term="redux" />
    <category term="MobX" />
    <category term="代码质量" />
    <category term="重来" />
    <category term="requestAnimationFrame" />
    <category term="TypeScript" />
    <category term="路书" />
    <category term="gpx解析" />
    <category term="EXIF" />
    <category term="人类" />
    <category term="生存" />
    <category term="基因" />
    <category term="响应式编程" />
    <category term="RxJS" />
    <category term="成长" />
    <category term="业务" />
    <category term="思想" />
    <category term="程序设计" />
    <category term="心理学" />
    <category term="自我" />
    <category term="社会思维" />
    <category term="社会影响" />
    <category term="文化" />
    <category term="性别" />
    <category term="从众" />
    <category term="说服" />
    <category term="临床诊断" />
    <category term="陪审团" />
    <category term="司法" />
    <category term="物质主义" />
    <category term="健康" />
    <category term="社会关系" />
    <category term="偏见" />
    <category term="攻击行为" />
    <category term="亲密关系" />
    <category term="友谊" />
    <category term="爱情" />
    <category term="利他" />
    <category term="冲突" />
    <category term="和解" />
    <category term="软技能" />
    <category term="理财" />
    <category term="健身" />
    <category term="自我营销" />
    <category term="学习" />
    <category term="商业模式" />
    <category term="产品" />
    <category term="校园网" />
    <category term="互联网" />
    <category term="技术" />
    <category term="web开发" />
    <category term="哲思" />
    <category term="择偶观" />
    <category term="validator" />
    <category term="大文件" />
    <category term="visibilityChange" />
    <category term="IntersectionObserver" />
    <category term="图种" />
    <category term="draggable" />
    <category term="webpack" />
    <category term="z-index" />
    <category term="git submodule" />
    <category term="object-fit" />
    <category term="object-position" />
    <category term="BroadcastChannel" />
    <category term="extract-text-webpack-plugin" />
    <category term="lottie" />
    <category term="backface-visibility" />
    <category term="egret" />
    <category term="mock" />
    <category term="SSO" />
    <category term="autoprefixer" />
    <category term="polyfill" />
    <category term="Android" />
    <category term="ffmpeg" />
    <category term="React Hooks" />
    <category term="rollup" />
    <category term="CDN" />
    <category term="DNS" />
    <category term="CNAME" />
    <category term="架构" />
    <category term="组件" />
    <category term="ssh" />
    <category term="fis-receiver" />
    <category term="tmux" />
    <category term="origami" />
    <category term="promise" />
    <category term="encodeURI" />
    <category term="encodeURIComponent" />
    <category term="axios" />
    <category term="charles" />
    <category term="黑色幽默" />
    <category term="朋友" />
    <category term="梦" />
    <category term="濒死" />
    <category term="江南" />
    <category term="苏州" />
    <category term="无锡" />
    <category term="宜兴" />
    <category term="湖州" />
    <category term="南浔" />
    <category term="游记" />
    <category term="随笔" />
    <category term="群众" />
    <category term="理论" />
    <category term="实效" />
    <category term="测试" />
    <category term="长沙" />
    <category term="杭州" />
    <category term="湖南" />
    <category term="核酸" />
    <category term="美食" />
    <category term="云南" />
    <category term="丽江" />
    <category term="大理" />
    <category term="青岛" />
    <category term="济南" />
    <category term="山东" />
    <category term="西北" />
    <category term="银川" />
    <category term="西宁" />
    <category term="青海湖" />
    <category term="西海镇" />
    <category term="茶卡盐湖" />
    <category term="厦门" />
    <category term="感受" />
    <category term="C语言" />
    <category term="树" />
    <category term="主干开发" />
    <category term="GitFlow" />
    <category term="GithubFlow" />
    <category term="typescript" />
    <category term="类型系统" />
    <category term="webrtc" />
    <category term="RTMP" />
    <category term="首屏时间" />
    <category term="性能优化" />
    <category term="公司" />
    <category term="个人发展" />
    <category term="战略" />
    <category term="晋升" />
    <category term="哲学" />
    <category term="幸福" />
    <category term="人生" />
    <category term="叔本华" />
    <category term="Unix" />
    <category term="Rollup" />
    <category term="mouseout" />
    <category term="mouseleave" />
    <category term="lint-staged" />
    <category term="吸顶" />
    <category term="图片组件" />
    <category term="形式系统" />
    <category term="不完全性" />
    <category term="隐喻" />
    <category term="哥德尔" />
    <category term="巴赫" />
    <category term="埃舍尔" />
    <category term="济州" />
    <category term="西归浦" />
    <category term="城山" />
    <category term="咸德" />
    <category term="人工智能" />
    <category term="心智" />
    <category term="自指" />
    <category term="图灵" />
    <category term="马列主义" />
    <category term="恩格斯" />
    <category term="家庭" />
    <category term="国家" />
    <category term="阶级" />
    <category term="氏族" />
    <category term="哲学史" />
    <category term="孔子" />
    <category term="老子" />
    <category term="儒家" />
    <category term="道家" />
    <category term="佛教" />
    <category term="禅宗" />
    <category term="理学" />
    <category term="心学" />
    <category term="计算机" />
    <category term="微机原理" />
    <category term="门" />
    <category term="操作系统" />
    <category term="数字电路" />
    <category term="2024" />
    <entry>
        <id>http://shenlvmeng.github.com/blog/2018/04/17/quill-md/</id>
        <title>使用quill搭建文本编辑器</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2018/04/17/quill-md/"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;官网：&lt;a href=&#34;https://quilljs.com/&#34;&gt;https://quilljs.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;quill可以是一个文本编辑器JS库或是文本编辑器构建库。它提供了结构化数据方式用脱离语言的方式描述编辑器内容，同时预置了内置插件，支持自定义插件，有助于在此基础上进行和业务相关编辑器开发。&lt;/p&gt;
&lt;h3 id=&#34;准备工作&#34;&gt;&lt;a href=&#34;#准备工作&#34; class=&#34;headerlink&#34; title=&#34;准备工作&#34;&gt;&lt;/a&gt;准备工作&lt;/h3&gt;&lt;p&gt;关于&lt;code&gt;contenteditable&lt;/code&gt;属性，&lt;code&gt;selection&lt;/code&gt;对象和&lt;code&gt;range&lt;/code&gt;对象的介绍，可以参考&lt;a href=&#34;https://caelumtian.github.io/2017/08/21/%E5%88%A9%E7%94%A8javascript%E6%90%AD%E5%BB%BA%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/&#34;&gt;这篇文章&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;配置&#34;&gt;&lt;a href=&#34;#配置&#34; class=&#34;headerlink&#34; title=&#34;配置&#34;&gt;&lt;/a&gt;配置&lt;/h3&gt;&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; editor = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Quill&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;#container&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 或是直接传入DOM对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; editor = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Quill&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;body&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;quill通常使用上面的方式初始化。在初始化时，支持用丰富的配置项定义生成的编辑器。下面是一个例子。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; options = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;debug&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;info&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;modules&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;toolbar&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;#toolbar&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;placeholder&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;Tell a story...&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;readOnly&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;them&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;snow&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; editor = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Quill&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;#container&amp;#x27;&lt;/span&gt;, options);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Quill支持的配置项有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bounds&lt;/code&gt;，Quill UI元素的限制范围，默认&lt;code&gt;document.body&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;debug&lt;/code&gt;，是&lt;code&gt;Quill.debug&lt;/code&gt;的快捷方式，用于打印调试信息，默认级别为&lt;code&gt;warn&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;formats&lt;/code&gt;，Quill中允许出现的格式，默认为&lt;a href=&#34;https://quilljs.com/docs/formats/&#34;&gt;所有格式&lt;/a&gt;，它和toolbar是解耦的&lt;/li&gt;
&lt;li&gt;&lt;code&gt;modules&lt;/code&gt;，注册在Quill中的功能模块和与之对应的配置信息，Quill会有默认配置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;placeholder&lt;/code&gt;，提示信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;readOnly&lt;/code&gt;，是否可写&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scrollContainer&lt;/code&gt;，编辑器滚动条的父级，默认为编辑器本身&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strict&lt;/code&gt;，版本更新配置，默认为&lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;theme&lt;/code&gt;，整体外观，默认为&lt;code&gt;snow&lt;/code&gt;，&lt;code&gt;bubble&lt;/code&gt;可选&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;支持的文本格式&#34;&gt;&lt;a href=&#34;#支持的文本格式&#34; class=&#34;headerlink&#34; title=&#34;支持的文本格式&#34;&gt;&lt;/a&gt;支持的文本格式&lt;/h3&gt;&lt;p&gt;分为&lt;strong&gt;行内&lt;/strong&gt;，&lt;strong&gt;块级&lt;/strong&gt;，&lt;strong&gt;嵌入式&lt;/strong&gt;三大类。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;行内：加粗&amp;#x2F;背景色&amp;#x2F;字体颜色&amp;#x2F;字体&amp;#x2F;行内代码&amp;#x2F;斜体&amp;#x2F;下划线&amp;#x2F;删除线&amp;#x2F;链接&amp;#x2F;字体大小&amp;#x2F;上、下标&lt;/li&gt;
&lt;li&gt;块级：引用&amp;#x2F;标题&amp;#x2F;行首缩进&amp;#x2F;有序、无序列表&amp;#x2F;对齐&amp;#x2F;文本方向&amp;#x2F;代码块&lt;/li&gt;
&lt;li&gt;嵌入式：音频&amp;#x2F;视频&amp;#x2F;公式&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;API&#34;&gt;&lt;a href=&#34;#API&#34; class=&#34;headerlink&#34; title=&#34;API&#34;&gt;&lt;/a&gt;API&lt;/h3&gt;&lt;p&gt;按照由浅入深，分为&lt;strong&gt;修改内容&lt;/strong&gt;，&lt;strong&gt;修改格式&lt;/strong&gt;，&lt;strong&gt;选取&lt;/strong&gt;，&lt;strong&gt;编辑器本身&lt;/strong&gt;，&lt;strong&gt;事件&lt;/strong&gt;，&lt;strong&gt;数据模型操作&lt;/strong&gt;，&lt;strong&gt;拓展&lt;/strong&gt;几大类。涉及到内容修改的都会返回代表更改的delta。&lt;/p&gt;
&lt;h4 id=&#34;修改内容&#34;&gt;&lt;a href=&#34;#修改内容&#34; class=&#34;headerlink&#34; title=&#34;修改内容&#34;&gt;&lt;/a&gt;修改内容&lt;/h4&gt;&lt;p&gt;涉及到修改时，最后一个参数都可以选择&lt;code&gt;user&lt;/code&gt;，&lt;code&gt;api&lt;/code&gt;，&lt;code&gt;silent&lt;/code&gt;。&lt;code&gt;user&lt;/code&gt;类型下，disabled时会没有效果。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;deleteText&lt;/code&gt;，输入起始点和长度，删除特定范围的内容，返回delta类型数据。如&lt;code&gt;quill.deleteText(6, 4)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getContents&lt;/code&gt;，获取delta格式的编辑器内容，如&lt;code&gt;quill.getContents()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getLength&lt;/code&gt;，获取文本长度，quill默认会有一个空行，所以默认返回1&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getText&lt;/code&gt;，获取文本内容，跳过非文本如音视频元素，如&lt;code&gt;quill.getText(0, 10)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;insertEmbed&lt;/code&gt;，输入位置，类型，值，插入嵌入式内容，如&lt;code&gt;quill.insertEmbed(10, &amp;#39;image&amp;#39;, &amp;#39;https://quilljs.com/images/cloud.png&amp;#39;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;insertText&lt;/code&gt;，插入文本，可带格式。如下&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;quill.&lt;span class=&#34;title function_&#34;&gt;insertText&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;Hello&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;bold&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;quill.&lt;span class=&#34;title function_&#34;&gt;insertText&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;Quill&amp;#x27;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;#x27;color&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;#ffff00&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;#x27;italic&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setContent&lt;/code&gt;，输入delta，重设编辑器内容，需以&lt;code&gt;\n&lt;/code&gt;结尾。如下：&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;quill.&lt;span class=&#34;title function_&#34;&gt;setContents&lt;/span&gt;([&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#123; &lt;span class=&#34;attr&#34;&gt;insert&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;Hello &amp;#x27;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#123; &lt;span class=&#34;attr&#34;&gt;insert&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;World!&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;attributes&lt;/span&gt;: &amp;#123; &lt;span class=&#34;attr&#34;&gt;bold&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt; &amp;#125; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#123; &lt;span class=&#34;attr&#34;&gt;insert&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;\n&amp;#x27;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;]);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setText&lt;/code&gt;，设置文本，返回代表改变的delta&lt;/li&gt;
&lt;li&gt;&lt;code&gt;updateContent&lt;/code&gt;，输入delta，更新内容，返回代表更新的delta&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;修改格式&#34;&gt;&lt;a href=&#34;#修改格式&#34; class=&#34;headerlink&#34; title=&#34;修改格式&#34;&gt;&lt;/a&gt;修改格式&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;format&lt;/code&gt;，设置用户当前所选的文本格式，如&lt;code&gt;quill.format(&amp;#39;color&amp;#39;, &amp;#39;red&amp;#39;);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;formatLine&lt;/code&gt;，设置给定选择当前整行样式，使用类似&lt;code&gt;format&lt;/code&gt;的方法设置样式，也支持直接传入格式对象。类似&lt;code&gt;quill.formatLine(1, 2, &amp;#123; &amp;#39;align&amp;#39;: &amp;#39;right&amp;#39;&amp;#125;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;formatText&lt;/code&gt;，设置给定范围内文本格式，类似&lt;code&gt;formatLine&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getFormat&lt;/code&gt;，获取给定范围内的格式，没有输入时，返回当前选择的格式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;removeFormat&lt;/code&gt;，移除范围内样式&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;选取&#34;&gt;&lt;a href=&#34;#选取&#34; class=&#34;headerlink&#34; title=&#34;选取&#34;&gt;&lt;/a&gt;选取&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getBounds(index, length = 0)&lt;/code&gt;，返回的top、width、height、left相对于编辑器容器而言&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getSelection(focus = false)&lt;/code&gt;，返回用户的选取范围，由index、length组成&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setSelection(index, length = 0)&lt;/code&gt;，设置选区范围，会自动focus，输入null会自动blur&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;编辑器本身&#34;&gt;&lt;a href=&#34;#编辑器本身&#34; class=&#34;headerlink&#34; title=&#34;编辑器本身&#34;&gt;&lt;/a&gt;编辑器本身&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;blur&lt;/code&gt;，失焦&lt;/li&gt;
&lt;li&gt;&lt;code&gt;disable&lt;/code&gt;，禁用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;enable(enabled = false)&lt;/code&gt;，启用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;focus&lt;/code&gt;，聚焦&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hasFocus&lt;/code&gt;，是否聚焦&lt;/li&gt;
&lt;li&gt;&lt;code&gt;update&lt;/code&gt;，同步用户改动，协同工作时常用&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;事件&#34;&gt;&lt;a href=&#34;#事件&#34; class=&#34;headerlink&#34; title=&#34;事件&#34;&gt;&lt;/a&gt;事件&lt;/h4&gt;&lt;p&gt;事件通过&lt;code&gt;on&lt;/code&gt;方法绑定在quill对象上。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;text-change&lt;/code&gt;，quill内的内容改变时触发，回调函数可以获取delta、oldContent，source。通常来自’user’，&lt;code&gt;source&lt;/code&gt;为’silent’时，该事件不会触发。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;selection-change&lt;/code&gt;，回调函数可以获取range，oldRange，source&lt;/li&gt;
&lt;li&gt;&lt;code&gt;editor-change&lt;/code&gt;，上述两个事件触发时触发，即使source为&lt;code&gt;silent&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了&lt;code&gt;on&lt;/code&gt;方法，还有&lt;code&gt;once&lt;/code&gt;用于绑定一次和&lt;code&gt;off&lt;/code&gt;方法解绑。&lt;/p&gt;
&lt;h4 id=&#34;数据模型操作&#34;&gt;&lt;a href=&#34;#数据模型操作&#34; class=&#34;headerlink&#34; title=&#34;数据模型操作&#34;&gt;&lt;/a&gt;数据模型操作&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;find&lt;/code&gt;，寻找DOM节点对应的quill或Blot对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getIndex&lt;/code&gt;，返回文档开头到给定Blot的偏移量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getLeafBlot&lt;/code&gt;，返回给定位置的Blot&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getLine&lt;/code&gt;，返回给定位置整行的Blot&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getLines&lt;/code&gt;，返回给定范围的Blot&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;拓展&#34;&gt;&lt;a href=&#34;#拓展&#34; class=&#34;headerlink&#34; title=&#34;拓展&#34;&gt;&lt;/a&gt;拓展&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;debug&lt;/code&gt;，设置调试信息级别，&lt;code&gt;info | log | warn | error&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;import&lt;/code&gt;，导出quill相关库，输入相对于quill的路径&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Parchment&lt;/span&gt; = &lt;span class=&#34;title class_&#34;&gt;Quill&lt;/span&gt;.&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;parchment&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Delta&lt;/span&gt; = &lt;span class=&#34;title class_&#34;&gt;Quill&lt;/span&gt;.&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;delta&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Toolbar&lt;/span&gt; = &lt;span class=&#34;title class_&#34;&gt;Quill&lt;/span&gt;.&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;modules/toolbar&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Link&lt;/span&gt; = &lt;span class=&#34;title class_&#34;&gt;Quill&lt;/span&gt;.&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;formats/link&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;register&lt;/code&gt;，注册module到quill中，有下面几种用法&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Quill&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;register&lt;/span&gt;(&lt;span class=&#34;attr&#34;&gt;format&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Attributor&lt;/span&gt; | &lt;span class=&#34;title class_&#34;&gt;BlotDefinintion&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;supressWarning&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Boolean&lt;/span&gt; = &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Quill&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;register&lt;/span&gt;(&lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;String&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;def&lt;/span&gt;: any, &lt;span class=&#34;attr&#34;&gt;supressWarning&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Boolean&lt;/span&gt; = &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Quill&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;register&lt;/span&gt;(&lt;span class=&#34;attr&#34;&gt;defs&lt;/span&gt;: &amp;#123; [&lt;span class=&#34;title class_&#34;&gt;String&lt;/span&gt;]: any &amp;#125;, &lt;span class=&#34;attr&#34;&gt;supressWarning&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Boolean&lt;/span&gt; = &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;addContainer&lt;/code&gt;，新增容器并返回&lt;/li&gt;
&lt;li&gt;&lt;code&gt;enable/disable&lt;/code&gt;，启用、禁用编辑器&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;delta&#34;&gt;&lt;a href=&#34;#delta&#34; class=&#34;headerlink&#34; title=&#34;delta&#34;&gt;&lt;/a&gt;delta&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/quilljs/delta&#34;&gt;delta&lt;/a&gt;是quill中最重要的概念。据&lt;a href=&#34;https://quilljs.com/guides/designing-the-delta-format/&#34;&gt;介绍&lt;/a&gt;所说，quill是“第一个”使用delta（结构化数据）这个概念的。不同于其他大多数文本编辑器需要反复执行修改编辑器中的HTML文档。quill维护一个delta数组，使用JSON数据的方式描述了文档的内容。&lt;/p&gt;
&lt;p&gt;使用delta一词，并没有问题，因为可以理解成文档本身是由空内容 + delta一点点得到的。delta主要有两个特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;权威性，delta和对应的生成结果是一一对应的，没有歧义&lt;/li&gt;
&lt;li&gt;压缩性，delta中描述的操作是经过压缩后的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;delta中的操作可以分为增、删、修改格式，分别对应&lt;code&gt;insert&lt;/code&gt;，&lt;code&gt;delete&lt;/code&gt;和&lt;code&gt;retain&lt;/code&gt;操作。对文本编辑器的一次改动（真实世界中的改动行为）只可能涉及上述三种行为的一种（Quill并不允许Ctrl多处选中）。其中retain的意义类似于光标的移动，它使得这三种操作并不需要使用index描述，便于Quill做优化和压缩。&lt;/p&gt;
&lt;p&gt;delta的操作实际上是对parchment进行的，它类似于vdom，使用JS的数据结构对文本编辑器中可能出现的各元素进行了抽象，称作Blot。Blot有scroll，inline、block、text，break几种。父Blot下必须包含至少一个子Blot，而所有的Blot都包含在一个scroll Blot下。文本编辑器中特定格式的文本块都用特定的Blot表示，每个这样的Blot都必须继承自上面的一种Blot类型。就像通过下面的方式继承了Blot，就可以使对应的行内元素得到对应的编辑器样式元素对应起来，并使用在后面的编辑器里。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Inline&lt;/span&gt; = &lt;span class=&#34;title class_&#34;&gt;Quill&lt;/span&gt;.&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;blots/inline&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;BoldBlot&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_ inherited__&#34;&gt;Inline&lt;/span&gt; &amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;BoldBlot&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;blotName&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;bold&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;BoldBlot&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;tagName&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;strong&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ItalicBlot&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_ inherited__&#34;&gt;Inline&lt;/span&gt; &amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;ItalicBlot&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;blotName&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;italic&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;ItalicBlot&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;tagName&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;em&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Quill&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;register&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;BoldBlot&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Quill&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;register&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;ItalicBlot&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// in your editor&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;quill.&lt;span class=&#34;title function_&#34;&gt;insertText&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;Test&amp;#x27;&lt;/span&gt;, &amp;#123; &lt;span class=&#34;attr&#34;&gt;bold&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;quill.&lt;span class=&#34;title function_&#34;&gt;formatText&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;italic&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;类似地，我们定义一个Link Blot。它相比bold，italic不同的是，它需要一个string而不是boolean初始化。因此需要定义&lt;code&gt;create&lt;/code&gt;和&lt;code&gt;format&lt;/code&gt;两个函数。其中create在构造Blot时使用，value即输入的href，formats将用户的format字段和真实DOM的字段相关联。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;LinkBlot&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_ inherited__&#34;&gt;Inline&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;create&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;value&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; node = &lt;span class=&#34;variable language_&#34;&gt;super&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;create&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Sanitize url value if desired&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    node.&lt;span class=&#34;title function_&#34;&gt;setAttribute&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;href&amp;#x27;&lt;/span&gt;, value);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Okay to set other non-format related attributes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// These are invisible to Parchment so must be static&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    node.&lt;span class=&#34;title function_&#34;&gt;setAttribute&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;target&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;_blank&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; node;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;formats&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;node&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// We will only be called with a node already&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// determined to be a Link blot, so we do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// not need to check ourselves&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; node.&lt;span class=&#34;title function_&#34;&gt;getAttribute&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;href&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;LinkBlot&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;blotName&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;link&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;LinkBlot&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;tagName&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;a&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Quill&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;register&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;LinkBlot&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;定义引用这样的块级元素时，对应地继承Block Blot即可。和inline Blot不同的是，Block Blot无法嵌套，在对已有的块级元素应用时会替换而不是嵌套绑定在元素上。以Header元素为例，可以指定tagName为一个数组，可以在format时使用1、2的方式指定具体哪种tag。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;HeaderBlot&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_ inherited__&#34;&gt;Block&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;formats&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;node&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;HeaderBlot&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;tagName&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;indexOf&lt;/span&gt;(node.&lt;span class=&#34;property&#34;&gt;tagName&lt;/span&gt;) + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;HeaderBlot&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;blotName&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;header&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Medium only supports two header sizes, so we will only demonstrate two,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// but we could easily just add more tags into this array&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;HeaderBlot&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;tagName&lt;/span&gt; = [&lt;span class=&#34;string&#34;&gt;&amp;#x27;H1&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;H2&amp;#x27;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;类似的，可以在插入embed Blot，这种类型效果是插入在元素中间的新的tag。如Image。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;BlockEmbed&lt;/span&gt; = &lt;span class=&#34;title class_&#34;&gt;Quill&lt;/span&gt;.&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;blots/block/embed&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ImageBlot&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_ inherited__&#34;&gt;BlockEmbed&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;create&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;value&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; node = &lt;span class=&#34;variable language_&#34;&gt;super&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;create&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    node.&lt;span class=&#34;title function_&#34;&gt;setAttribute&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;alt&amp;#x27;&lt;/span&gt;, value.&lt;span class=&#34;property&#34;&gt;alt&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    node.&lt;span class=&#34;title function_&#34;&gt;setAttribute&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;src&amp;#x27;&lt;/span&gt;, value.&lt;span class=&#34;property&#34;&gt;url&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; node;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;value&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;node&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;alt&lt;/span&gt;: node.&lt;span class=&#34;title function_&#34;&gt;getAttribute&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;alt&amp;#x27;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;url&lt;/span&gt;: node.&lt;span class=&#34;title function_&#34;&gt;getAttribute&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;src&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;ImageBlot&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;blotName&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;image&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;ImageBlot&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;tagName&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;img&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 使用时&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; range = quill.&lt;span class=&#34;title function_&#34;&gt;getSelection&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;quill.&lt;span class=&#34;title function_&#34;&gt;insertText&lt;/span&gt;(range.&lt;span class=&#34;property&#34;&gt;index&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;\n&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;title class_&#34;&gt;Quill&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;sources&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;USER&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;quill.&lt;span class=&#34;title function_&#34;&gt;insertEmbed&lt;/span&gt;(range.&lt;span class=&#34;property&#34;&gt;index&lt;/span&gt; + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;image&amp;#x27;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;alt&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;Quill Cloud&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;url&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;https://quilljs.com/0.20/assets/images/cloud.png&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;, &lt;span class=&#34;title class_&#34;&gt;Quill&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;sources&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;USER&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;quill.&lt;span class=&#34;title function_&#34;&gt;setSelection&lt;/span&gt;(range.&lt;span class=&#34;property&#34;&gt;index&lt;/span&gt; + &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;title class_&#34;&gt;Quill&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;sources&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;SILENT&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;modules&#34;&gt;&lt;a href=&#34;#modules&#34; class=&#34;headerlink&#34; title=&#34;modules&#34;&gt;&lt;/a&gt;modules&lt;/h3&gt;&lt;p&gt;quill中的module位于quill的应用层。可以通过定制modules，利用quill的功能；或是更改quill内置module，修改quill本身的行为和功能。clipboard、keyboard、history三个module是quill默认加载的。用户完全可以根据业务需求定义自己的module。官网给了&lt;a href=&#34;https://quilljs.com/guides/building-a-custom-module/&#34;&gt;简单的例子&lt;/a&gt;展示了module的大致骨架：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Quill&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;register&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;modules/counter&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;quill, options&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; container = &lt;span class=&#34;variable language_&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;querySelector&lt;/span&gt;(options.&lt;span class=&#34;property&#34;&gt;container&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  quill.&lt;span class=&#34;title function_&#34;&gt;on&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;text-change&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; text = quill.&lt;span class=&#34;title function_&#34;&gt;getText&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (options.&lt;span class=&#34;property&#34;&gt;unit&lt;/span&gt; === &lt;span class=&#34;string&#34;&gt;&amp;#x27;word&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      container.&lt;span class=&#34;property&#34;&gt;innerText&lt;/span&gt; = text.&lt;span class=&#34;title function_&#34;&gt;split&lt;/span&gt;(&lt;span class=&#34;regexp&#34;&gt;/\s+/&lt;/span&gt;).&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt; + &lt;span class=&#34;string&#34;&gt;&amp;#x27; words&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      container.&lt;span class=&#34;property&#34;&gt;innerText&lt;/span&gt; = text.&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt; + &lt;span class=&#34;string&#34;&gt;&amp;#x27; characters&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; quill = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Quill&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;#editor&amp;#x27;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;modules&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;counter&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;container&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;#counter&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;unit&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;word&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;只需要定义一个可以接收quill对象的函数即可，在函数内部利用quill事件监听即可完成应用层的建设。&lt;/p&gt;
&lt;h3 id=&#34;Toolbar和ClipBoard&#34;&gt;&lt;a href=&#34;#Toolbar和ClipBoard&#34; class=&#34;headerlink&#34; title=&#34;Toolbar和ClipBoard&#34;&gt;&lt;/a&gt;Toolbar和ClipBoard&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://quilljs.com/docs/modules/toolbar/&#34;&gt;Toolbar&lt;/a&gt;和&lt;a href=&#34;https://quilljs.com/docs/modules/clipboard/&#34;&gt;Clipboard&lt;/a&gt;是Quill内置的两个module，对你构建自己的文本编辑器有很大的借鉴意义。&lt;/p&gt;
&lt;p&gt;Toolbar用来定制工具栏上的按钮，是自定义编辑器（尤其是业务相关的编辑器）逃不开的一部分。它有几个基本配置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;container&lt;/code&gt;，放置工具栏的DOM容器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;handler&lt;/code&gt;，点击ToolBar图标时注册的函数，传入Blot的value，通过调用Quill的API完成功能。也可以通过下面方式注册。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Handlers can also be added post initialization&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; toolbar = quill.&lt;span class=&#34;title function_&#34;&gt;getModule&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;toolbar&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;toolbar.&lt;span class=&#34;title function_&#34;&gt;addHandler&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;image&amp;#x27;&lt;/span&gt;, showImageUI);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在遇到从别的文本编辑器拷贝内容过来的情况时，需要修改ClipBoard Module中&lt;code&gt;addMatcher&lt;/code&gt;的定义。这个方法向ClipBoard中注册了新的Matcher匹配拷贝过来的HTML文本，将之转换为对应的Blot。如：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;quill.&lt;span class=&#34;property&#34;&gt;clipboard&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;addMatcher&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;Node&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;TEXT_NODE&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;node, delta&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Delta&lt;/span&gt;().&lt;span class=&#34;title function_&#34;&gt;insert&lt;/span&gt;(node.&lt;span class=&#34;property&#34;&gt;data&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Interpret a &amp;lt;b&amp;gt; tag as bold&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;quill.&lt;span class=&#34;property&#34;&gt;clipboard&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;addMatcher&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;.custom-class&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;node, delta&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; delta.&lt;span class=&#34;title function_&#34;&gt;compose&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Delta&lt;/span&gt;().&lt;span class=&#34;title function_&#34;&gt;retain&lt;/span&gt;(delta.&lt;span class=&#34;title function_&#34;&gt;length&lt;/span&gt;(), &amp;#123; &lt;span class=&#34;attr&#34;&gt;bold&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt; &amp;#125;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;或者在configuration中，注入新定义的matcher即可。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; quill = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Quill&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;#editor&amp;#x27;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;modules&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;clipboard&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;matchers&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        [&lt;span class=&#34;string&#34;&gt;&amp;#x27;B&amp;#x27;&lt;/span&gt;, customMatcherA],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        [&lt;span class=&#34;title class_&#34;&gt;Node&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;TEXT_NODE&lt;/span&gt;, customMatcherB]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;参考&#34;&gt;&lt;a href=&#34;#参考&#34; class=&#34;headerlink&#34; title=&#34;参考&#34;&gt;&lt;/a&gt;参考&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://quilljs.com/docs/&#34;&gt;Quill文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://caelumtian.github.io/2017/08/21/%E5%88%A9%E7%94%A8javascript%E6%90%AD%E5%BB%BA%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/&#34;&gt;利用javascript搭建富文本编辑器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="文本编辑器" />
        <category term="quill" />
        <category term="结构化数据" />
        <updated>2018-04-17T15:45:03.000Z</updated>
    </entry>
    <entry>
        <id>http://shenlvmeng.github.com/blog/2017/10/15/cycle-js-introduction/</id>
        <title>cycle.js介绍</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2017/10/15/cycle-js-introduction/"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;下面的内容主要来自&lt;a href=&#34;https://egghead.io/courses/cycle-js-fundamentals&#34;&gt;作者André Staltz的egghead.io&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div style=&#34;width: 50%;margin: 0 auto;&#34;&gt;![cycle-flow](http://ow5o14n5d.bkt.clouddn.com/blogcycle-flow.svg)&lt;/div&gt;

&lt;h2 id=&#34;设计&#34;&gt;&lt;a href=&#34;#设计&#34; class=&#34;headerlink&#34; title=&#34;设计&#34;&gt;&lt;/a&gt;设计&lt;/h2&gt;&lt;p&gt;cycle.js设计上有三个特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;万物都是Stream（collections + &lt;strong&gt;时间&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;Logic和Effect分离（借助&lt;code&gt;main&lt;/code&gt;和&lt;code&gt;drivers&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;app是纯数据流（data flow）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第一部分正如&lt;a href=&#34;https://shenlvmeng.github.io/blog/2017/08/14/rxjs-brief/&#34;&gt;RxJS中介绍&lt;/a&gt;的一样，可以用Observable建模。&lt;/p&gt;
&lt;p&gt;第二部分中，logic是数学相关的东西，是抽象的。effects则是影响实际世界的效应（如DOM、HTTP等），是实际的。将两者更好地分离开来是Cycle.js的设计初衷。而logic纯函数的特点优势也是很明显的（无副作用）。&lt;/p&gt;
&lt;p&gt;上面的两部分在Cycle.js中，借助xstream, RxJS等Reactive Programming的库，以main和driver函数来实现。其中&lt;code&gt;main&lt;/code&gt;实现逻辑、生产数据，&lt;code&gt;driver&lt;/code&gt;订阅消费数据，交由cycle.js制造Effect。&lt;a href=&#34;http://lmatteis.github.io/cyclejs-slides/keynote/assets/player/KeynoteDHTMLPlayer.html#60&#34;&gt;这里&lt;/a&gt;有一个浅显易懂的例子。&lt;/p&gt;
&lt;p&gt;除了简单的DOM Effect外，还有HTTP请求等。交给不同的drivers完成就行了。这一点上和&lt;a href=&#34;https://shenlvmeng.github.io/blog/2017/06/19/elm-introduction/#Effects&#34;&gt;Elm设计&lt;/a&gt;很像。&lt;/p&gt;
&lt;p&gt;对比流行的React、Angular、Vue，组件化的设计模式当然也涉及到。文档的&lt;a href=&#34;https://cycle.js.org/components.html&#34;&gt;Components&lt;/a&gt;部分讲得很清楚：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Any Cycle.js app can be reused as a component in a larger Cycle.js app.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;即任何一个Cycle.js的应用都可以直接重用成更大应用的一个组件，无需额外的操作。原因很简单，任何一个logic都是在&lt;code&gt;main&lt;/code&gt;函数中完成的，这也是开发者唯一需要做的事。而这个函数接收的&lt;code&gt;sources&lt;/code&gt;以及返回给Cycle.js的&lt;code&gt;sinks&lt;/code&gt;都是一个包含DOM、HTTP等stream的对象，且键值对都一样，可以看下面这张图更好理解：&lt;/p&gt;
&lt;div style=&#34;width: 50%;margin: 0 auto;&#34;&gt;![cycle.js component](https://cycle.js.org/img/dataflow-component.svg)&lt;/div&gt;

&lt;h3 id=&#34;原理&#34;&gt;&lt;a href=&#34;#原理&#34; class=&#34;headerlink&#34; title=&#34;原理&#34;&gt;&lt;/a&gt;原理&lt;/h3&gt;&lt;p&gt;完全可以在main中生产多种数据，作为对象返回，交给不同driver的得到不一样的effects。将main中数据交给driver的过程抽象在run函数中，完成数据生产和订阅的过程。这个过程并不复杂。下面是一个简陋的实现。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;run&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;mainFn, drivers&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; sinks = &lt;span class=&#34;title function_&#34;&gt;mainFn&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;keys&lt;/span&gt;(drivers).&lt;span class=&#34;title function_&#34;&gt;forEach&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;key&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (sinks[key]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  	  drivers[key](sinks[key]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;run&lt;/span&gt;(main, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;DOM&lt;/span&gt;: domDriver,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;other&lt;/span&gt;: otherDriver&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上面的实现手法只实现了单向的从逻辑到Effects的映射过程，要完成相反的从实际世界到逻辑的过程，需要读取外界的事件。要这么做，不仅main函数需要可以接受入参&lt;code&gt;sources&lt;/code&gt;，生产Effects的drivers也要能够返回main需要的&lt;code&gt;sources&lt;/code&gt;。类似地，sources的类型可以是DOM或者其他的合法input。同时，连接两者的&lt;code&gt;run&lt;/code&gt;函数会遇到循环的问题，driver的入参和出参正好是main的出参和入参，这也是&lt;strong&gt;Cycle&lt;/strong&gt;一词的来源。解决办法是先fake一个的初始数据流，得到Effects后，再用Effects初始化main，最后用main替换fake的数据流即可。&lt;/p&gt;
&lt;p&gt;继续改造&lt;code&gt;run&lt;/code&gt;函数，考虑到driver有多种类型，需要事先为所有driver都使用fakeSinks。在构造好drivers后，使用drivers的返回，构造main。最后用&lt;code&gt;imitate&lt;/code&gt;替代掉fakeSinks即可。这就是Cycle.js核心部分run的设计思路，实际上，run部分的代码也只有一百余行。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;run&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;mainFn, drivers&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; fakeSinks = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;keys&lt;/span&gt;(drivers).&lt;span class=&#34;title function_&#34;&gt;forEach&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;key&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fakeSinks[key] = xs.&lt;span class=&#34;title function_&#34;&gt;create&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; sources = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;keys&lt;/span&gt;(drivers).&lt;span class=&#34;title function_&#34;&gt;forEach&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;key&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sources[key] = drivers[key](fakeSinks[key]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; sinks = &lt;span class=&#34;title function_&#34;&gt;mainFn&lt;/span&gt;(sources);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;keys&lt;/span&gt;(sinks).&lt;span class=&#34;title function_&#34;&gt;forEach&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;key&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fakeSinks[key].&lt;span class=&#34;title function_&#34;&gt;imitate&lt;/span&gt;(sinks[key];)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;除了run，drivers也是Cycle.js设计的重要部分。它需要能够根据main逻辑的描述灵活地生成对应的Effects。如DOM，在main逻辑中声明所需的DOM结构，对应地，在domDriver中，根据结构生成实际的DOM元素（不论是使用createElement还是vDOM）。&lt;/p&gt;
&lt;p&gt;不过仅仅在main逻辑中描述DOM结构是不够的，逻辑上还应该包括如何响应Effects的输入。类似地，这部分应该从driver中的hardcode抽离出来，由main声明，driver实现。类似下面这样：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;sources&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; events$ = sources.&lt;span class=&#34;property&#34;&gt;DOM&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;selectEvents&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;span&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;click&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;DOM&lt;/span&gt;: events$.&lt;span class=&#34;title function_&#34;&gt;startWith&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;map&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      xs.&lt;span class=&#34;title function_&#34;&gt;periodic&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ).&lt;span class=&#34;title function_&#34;&gt;flatten&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .&lt;span class=&#34;title function_&#34;&gt;map&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;i&lt;/span&gt; =&amp;gt;&lt;/span&gt; (&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;tagName&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;H1&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;children&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;attr&#34;&gt;tagName&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;SPAN&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;attr&#34;&gt;children&lt;/span&gt;:[&lt;span class=&#34;string&#34;&gt;`Seconds elapsed: &lt;span class=&#34;subst&#34;&gt;$&amp;#123;i&amp;#125;&lt;/span&gt;`&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上面的DOM结构可以进一步抽象函数，便于代码书写。另外，Cycle.js中使用makeDOMDriver的方式是为了显示声明DOM容器名，避免hardcode在driver中。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;h&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;tagName, children&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    tagName,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    children&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;h1&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;children&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;tagName&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;H1&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    children&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;span&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;children&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;tagName&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;SPAN&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    children&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.&lt;span class=&#34;title function_&#34;&gt;map&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;h1&lt;/span&gt;([&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;span&lt;/span&gt;([&lt;span class=&#34;string&#34;&gt;`Seconds elapsed: &lt;span class=&#34;subst&#34;&gt;$&amp;#123;i&amp;#125;&lt;/span&gt;`&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;使用&#34;&gt;&lt;a href=&#34;#使用&#34; class=&#34;headerlink&#34; title=&#34;使用&#34;&gt;&lt;/a&gt;使用&lt;/h2&gt;&lt;p&gt;习惯了上面的思考方式后，可以考虑如何使用Cycle.js的问题了。通常情况下，一个空白的Cycle.js的脚手架像下面这样（使用UMD方案时）：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &amp;#123; makeDOMDriver &amp;#125; = &lt;span class=&#34;title class_&#34;&gt;CycleDOM&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;sources&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// TODO&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; drivers = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;DOM&lt;/span&gt;: &lt;span class=&#34;title function_&#34;&gt;makeDOMDriver&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;#app&amp;#x27;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Cycle&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;run&lt;/span&gt;(main, drivers);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;结合HTML内容的声明和用户输入事件的读取，可以得到下面的结果：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &amp;#123; div, label, input, hr, h1, makeDOMDriver &amp;#125; = &lt;span class=&#34;title class_&#34;&gt;CycleDOM&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;sources&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// &amp;#x27;&amp;#x27;---------------&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// div--------------&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; input$ = sources.&lt;span class=&#34;property&#34;&gt;DOM&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;select&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;.name&amp;#x27;&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;events&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;change&amp;#x27;&lt;/span&gt;)；&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; name$ = input$.&lt;span class=&#34;title function_&#34;&gt;map&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;ev&lt;/span&gt; =&amp;gt;&lt;/span&gt; ev.&lt;span class=&#34;property&#34;&gt;target&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;value&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;startWidth&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  	&lt;span class=&#34;attr&#34;&gt;DOM&lt;/span&gt;: name$.&lt;span class=&#34;title function_&#34;&gt;map&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;name&lt;/span&gt; =&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  	  &lt;span class=&#34;title function_&#34;&gt;div&lt;/span&gt;([&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  	  	&lt;span class=&#34;title function_&#34;&gt;label&lt;/span&gt;([&lt;span class=&#34;string&#34;&gt;&amp;#x27;Name: &amp;#x27;&lt;/span&gt;]),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  	  	&lt;span class=&#34;title function_&#34;&gt;input&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;.name&amp;#x27;&lt;/span&gt;, &amp;#123;&lt;span class=&#34;attr&#34;&gt;attrs&lt;/span&gt;: &amp;#123;&lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;text&amp;#x27;&lt;/span&gt;&amp;#125;&amp;#125;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  	  	&lt;span class=&#34;title function_&#34;&gt;hr&lt;/span&gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  	  	&lt;span class=&#34;title function_&#34;&gt;h1&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;`Hello &lt;span class=&#34;subst&#34;&gt;$&amp;#123;name&amp;#125;&lt;/span&gt;!`&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  	  ])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  	)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; drivers = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;DOM&lt;/span&gt;: &lt;span class=&#34;title function_&#34;&gt;makeDOMDriver&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;#app&amp;#x27;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Cycle&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;run&lt;/span&gt;(main, drivers);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;其中要格外注意的是，&lt;code&gt;name$&lt;/code&gt;需要有&lt;code&gt;startWith&lt;/code&gt;才能有流的起始数据，从而初始化真实DOM。&lt;/p&gt;
&lt;p&gt;结合灵活的流操作符，如&lt;code&gt;merge&lt;/code&gt;, &lt;code&gt;fold&lt;/code&gt;等，可以实现更加复杂点的应用，如官网给出的&lt;a href=&#34;https://cycle.js.org/basic-examples.html#basic-examples-increment-a-counter&#34;&gt;计数器&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;除了DOMDriver，HTTPDriver也是很常用的一种Driver，可以借助它实现HTTP的request和response的响应。如官网给的&lt;a href=&#34;https://cycle.js.org/basic-examples.html#basic-examples-http-requests&#34;&gt;样例&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;MVI&#34;&gt;&lt;a href=&#34;#MVI&#34; class=&#34;headerlink&#34; title=&#34;MVI&#34;&gt;&lt;/a&gt;MVI&lt;/h3&gt;&lt;div style=&#34;width:70%;margin: 0 auto;&#34;&gt;![MVI模型](http://ow5o14n5d.bkt.clouddn.com/cycle-mvi.svg)&lt;/div&gt;

&lt;p&gt;MVI（Model-View-Intent）是Cycle.js提出的编程范式，可以将main的内容拆分成三部分，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一部分Intent将Effects传递过来的事件转换成Model逻辑可以接受的类型，&lt;/li&gt;
&lt;li&gt;第二部分Model实现具体逻辑，即state的改动&lt;/li&gt;
&lt;li&gt;最终由View部分将逻辑转换成DOMDriver可以接受的数据流传递到最后的vdom。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用这种方式拆分后的代码实际上类似&lt;code&gt;view(model(intent(sources.DOM)))&lt;/code&gt;。如文档中&lt;a href=&#34;https://cycle.js.org/model-view-intent.html&#34;&gt;介绍&lt;/a&gt;的那样。&lt;/p&gt;
&lt;p&gt;关于组件拆分和&lt;strong&gt;isolate&lt;/strong&gt;，可以参看文档的&lt;a href=&#34;https://cycle.js.org/components.html#components-isolating-multiple-instances&#34;&gt;Components&lt;/a&gt;部分。另外，在Cycle.js的状态管理工具&lt;a href=&#34;https://github.com/staltz/cycle-onionify&#34;&gt;cycle-onionify&lt;/a&gt;中也用到了&lt;code&gt;isolate&lt;/code&gt;，使用&lt;code&gt;isolate&lt;/code&gt;可以保证组件间的stream、状态相互独立。&lt;/p&gt;
&lt;h2 id=&#34;xstream&#34;&gt;&lt;a href=&#34;#xstream&#34; class=&#34;headerlink&#34; title=&#34;xstream&#34;&gt;&lt;/a&gt;xstream&lt;/h2&gt;&lt;p&gt;万物皆Stream的概念是需要额外的库支持的。因此没有接触过RxJS的建议先学习一下这种思路。&lt;/p&gt;
&lt;p&gt;Cycle.js允许使用RxJS等多种Reactive Programming库构造响应式的流结构，不过推荐针对Cycle.js定制的&lt;a href=&#34;https://staltz.com/xstream/&#34;&gt;xstream&lt;/a&gt;。xstream学习成本简单，API仅有26个，此外文件体积小，速度适中。熟悉RxJS后，学习xstream就更简单了。&lt;/p&gt;
&lt;p&gt;xstream的API分为&lt;strong&gt;Factories&lt;/strong&gt;和&lt;strong&gt;Operators&lt;/strong&gt;。前者通过Producer或合并等方式生产新的Stream，后者是Stream的相关方法。&lt;/p&gt;
&lt;p&gt;学习xstream了解4个概念就足够了（如果你已经熟悉RxJS的思想后），&lt;strong&gt;Stream&lt;/strong&gt;, &lt;strong&gt;Listener&lt;/strong&gt;, &lt;strong&gt;Producer&lt;/strong&gt;, &lt;strong&gt;MemoryStream&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Stream&lt;/strong&gt;，类似EventEmitter和RxJS中的Subject，一个Stream可以注册多个Listener，Stream上有event出现时，所有Listener都会收到通知。除此之外，Stream可以通过&lt;strong&gt;operators&lt;/strong&gt;生产新的Stream，如&lt;code&gt;fold&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;等。可以使用&lt;code&gt;shamefullySend*&lt;/code&gt;手动触发event，但是应避免使用这种方式&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Listener&lt;/strong&gt;，和RxJS中的Observer类似，是有&lt;code&gt;next&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt;, &lt;code&gt;complete&lt;/code&gt;三种状态的对象，用来处理stream的三种event。通过&lt;code&gt;addListener&lt;/code&gt;和&lt;code&gt;removeListener&lt;/code&gt;和Stream建立联系。&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; listener = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;next&lt;/span&gt;: &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;value&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;The Stream gave me a value: &amp;#x27;&lt;/span&gt;, value);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;error&lt;/span&gt;: &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;err&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;error&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;The Stream gave me an error: &amp;#x27;&lt;/span&gt;, err);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;complete&lt;/span&gt;: &lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;The Stream told me it is done.&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Producer&lt;/strong&gt;，生产Stream所需的event。xstream使用&lt;code&gt;create(producer)&lt;/code&gt;等方法生产Stream。一个Producer只能绑定一个Stream。Producer本身拥有&lt;code&gt;start&lt;/code&gt;和&lt;code&gt;stop&lt;/code&gt;便于在没有Listener监听时停止工作。&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; producer = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;start&lt;/span&gt;: &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;listener&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;id&lt;/span&gt; = &lt;span class=&#34;built_in&#34;&gt;setInterval&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; listener.&lt;span class=&#34;title function_&#34;&gt;next&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;yo&amp;#x27;&lt;/span&gt;), &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;stop&lt;/span&gt;: &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;clearInterval&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;id&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MemoryStream&lt;/strong&gt;，和Stream不同的是会记录最后一次的event信息。类似RxJS里的BehaviorSubject。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;生产Stream的函数有下面这些：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;create(producer)&lt;/code&gt;和&lt;code&gt;createWithMemory(producer)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;never()&lt;/code&gt; 生产不产生event的Stream&lt;/li&gt;
&lt;li&gt;&lt;code&gt;empty()&lt;/code&gt; 生产立即结束的Stream&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error(error)&lt;/code&gt; 生产立即错误的Stream&lt;/li&gt;
&lt;li&gt;&lt;code&gt;from(input)&lt;/code&gt; 通过数组、Promise、Observable等生产Stream&lt;/li&gt;
&lt;li&gt;&lt;code&gt;of(a1,a2,a3)&lt;/code&gt; 生产根据输入产生的一系列event&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fromArray(array)&lt;/code&gt;, &lt;code&gt;fromPromise(promise)&lt;/code&gt;, &lt;code&gt;fromObservable(observable)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;periodic(period)&lt;/code&gt; 周期性产生递增的数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;merge(s1, s2)&lt;/code&gt; 合并两个流&lt;/li&gt;
&lt;li&gt;&lt;code&gt;combine(s1, s2)&lt;/code&gt; 合并两个流中的值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Stream的相关方法有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;addListener(listener)&lt;/code&gt;和&lt;code&gt;removeListener(listener)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;subscribe(listener)&lt;/code&gt;注册listener返回remove的函数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;map(project)&lt;/code&gt;和&lt;code&gt;mapTo(projectedValue)&lt;/code&gt; 映射event中的值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filter(passes)&lt;/code&gt; 过滤&lt;/li&gt;
&lt;li&gt;&lt;code&gt;take(amount)&lt;/code&gt; 限制Stream的event数目&lt;/li&gt;
&lt;li&gt;&lt;code&gt;drop(amount)&lt;/code&gt; 忽略前&lt;code&gt;amount&lt;/code&gt;次的event数目&lt;/li&gt;
&lt;li&gt;&lt;code&gt;last()&lt;/code&gt; 只释放最后一次event&lt;/li&gt;
&lt;li&gt;&lt;code&gt;startWith(initialValue)&lt;/code&gt; 以给定值开始&lt;/li&gt;
&lt;li&gt;&lt;code&gt;endWhen(other)&lt;/code&gt; 使用其他Stream决定是否完成当前Stream&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fold(accumulate, seed)&lt;/code&gt; 以给定值开始累加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;replaceError(replace)&lt;/code&gt; 取代一个流中的所有error&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flatten()&lt;/code&gt; 将streams的Stream压缩为一个Stream，输出流中的数据只来自于当前Stream&lt;/li&gt;
&lt;li&gt;&lt;code&gt;compose(operator)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;remember()&lt;/code&gt; 缓存最后一个值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;debug(labelOrSpy)&lt;/code&gt; 不修改流，便于debug&lt;/li&gt;
&lt;li&gt;&lt;code&gt;imitate(target)&lt;/code&gt; 使用给定流替换原有Stream&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shamefullySendNext/Error/Complete&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外一些实用的Stream相关方法，在extra部分中引入，包括如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;buffer(separator)&lt;/code&gt; 缓存部分内容一同输出，输出时机由输入的Stream决定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;concat(s1, s2, ..., sn)&lt;/code&gt; 将Stream按照参数顺序从前到后连接起来&lt;/li&gt;
&lt;li&gt;&lt;code&gt;debounce(period)&lt;/code&gt;和&lt;code&gt;throttle(period)&lt;/code&gt; 防抖和节流&lt;/li&gt;
&lt;li&gt;&lt;code&gt;delay(period)&lt;/code&gt; 时延&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dropRepeats(isEquals)&lt;/code&gt; 丢掉邻接的重复数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dropUntil(other)&lt;/code&gt; 根据其他Stream决定该Stream的开始时机&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flattenConcurrently()&lt;/code&gt; 类似&lt;code&gt;flatten()&lt;/code&gt;，不过流中的数据根据时间merge，&lt;code&gt;flattenSequentially()&lt;/code&gt;类似，将Stream先后连接&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fromDiagram(diagram, options)&lt;/code&gt; 通过图表创建Stream&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fromEvent(element, eventName, useCapture)&lt;/code&gt; 通过DOM事件创建Stream&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pairwise()&lt;/code&gt; 和上一个值成对组成event的值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sampleCombine(streams)&lt;/code&gt; source流和其他发生时间最近的流event相组合&lt;/li&gt;
&lt;li&gt;&lt;code&gt;split(separator)&lt;/code&gt; 类似&lt;code&gt;buffer&lt;/code&gt;，将stream拆分为释放streams的Stream&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tween(config)&lt;/code&gt; 根据配置创建缓动函数，用于制作动画&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考&#34;&gt;&lt;a href=&#34;#参考&#34; class=&#34;headerlink&#34; title=&#34;参考&#34;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cyclejs-community/awesome-cyclejs&#34;&gt;cyclejs-community&amp;#x2F;awesome-cyclejs: A curated list of awesome Cycle.js resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Reactive Programming" />
        <category term="JavaScript" />
        <category term="Cycle.js" />
        <updated>2017-10-15T07:29:52.000Z</updated>
    </entry>
</feed>
