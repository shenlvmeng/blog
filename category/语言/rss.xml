<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Shenlvmeng&#39;s Blog • Posts by &#34;语言&#34; category</title>
        <link>http://shenlvmeng.github.com/blog</link>
        <description>Be sharp, my friend.</description>
        <language>zh-CN</language>
        <pubDate>Tue, 24 Dec 2019 23:03:54 +0800</pubDate>
        <lastBuildDate>Tue, 24 Dec 2019 23:03:54 +0800</lastBuildDate>
        <category>总结</category>
        <category>制度</category>
        <category>道德</category>
        <category>文官</category>
        <category>万历</category>
        <category>明朝</category>
        <category>读书笔记</category>
        <category>展望</category>
        <category>2018</category>
        <category>2019</category>
        <category>flag</category>
        <category>2020</category>
        <category>2021</category>
        <category>2022</category>
        <category>2023</category>
        <category>面试</category>
        <category>前端</category>
        <category>FAQ</category>
        <category>HTML</category>
        <category>CSS</category>
        <category>style guide</category>
        <category>编程</category>
        <category>范式</category>
        <category>设计</category>
        <category>艺术</category>
        <category>质量</category>
        <category>async_hooks</category>
        <category>cls-hooked</category>
        <category>logId</category>
        <category>录音</category>
        <category>getUserMedia</category>
        <category>AudioContext</category>
        <category>PCM</category>
        <category>WAVE</category>
        <category>二叉搜索树</category>
        <category>算法</category>
        <category>回忆</category>
        <category>老朋友</category>
        <category>C</category>
        <category>Hash</category>
        <category>布隆过滤器</category>
        <category>字符串检索</category>
        <category>canvas</category>
        <category>流程图</category>
        <category>d3</category>
        <category>g6</category>
        <category>zrender</category>
        <category>processOn</category>
        <category>SDN</category>
        <category>cbench</category>
        <category>安装说明</category>
        <category>绘图</category>
        <category>动画</category>
        <category>攻略</category>
        <category>流水账</category>
        <category>成都</category>
        <category>重庆</category>
        <category>武汉</category>
        <category>重构</category>
        <category>代码</category>
        <category>代码风格</category>
        <category>数据可视化</category>
        <category>爬虫</category>
        <category>chrome</category>
        <category>crx</category>
        <category>扩展</category>
        <category>CORS</category>
        <category>跨域</category>
        <category>盒模型</category>
        <category>浮动</category>
        <category>Reactive Programming</category>
        <category>JavaScript</category>
        <category>Cycle.js</category>
        <category>Dart</category>
        <category>最佳实践</category>
        <category>引流</category>
        <category>universal-link</category>
        <category>app-link</category>
        <category>脚手架</category>
        <category>degit</category>
        <category>git</category>
        <category>设计模式</category>
        <category>类</category>
        <category>接口</category>
        <category>抽象类</category>
        <category>DOM</category>
        <category>Docker</category>
        <category>ONOS</category>
        <category>控制器</category>
        <category>虚拟化</category>
        <category>笔记</category>
        <category>UX</category>
        <category>UED</category>
        <category>准则</category>
        <category>Java</category>
        <category>Ruby</category>
        <category>反射</category>
        <category>编程范式</category>
        <category>鸭子类型</category>
        <category>管理</category>
        <category>效率</category>
        <category>知识工作者</category>
        <category>卓有成效</category>
        <category>Elm</category>
        <category>框架</category>
        <category>函数式编程</category>
        <category>虚网映射</category>
        <category>Javascript</category>
        <category>并发</category>
        <category>event loop</category>
        <category>覆盖率</category>
        <category>端到端测试</category>
        <category>istanbul</category>
        <category>istanbuljs</category>
        <category>JavaSript</category>
        <category>Express</category>
        <category>源码</category>
        <category>代码覆盖率</category>
        <category>istanbul-middleware</category>
        <category>代码插桩</category>
        <category>require钩子</category>
        <category>babel-plugin-istanbul</category>
        <category>css</category>
        <category>html5</category>
        <category>flex</category>
        <category>javascript</category>
        <category>roadmap</category>
        <category>闭包</category>
        <category>Haskell</category>
        <category>monad</category>
        <category>后端</category>
        <category>管理后台</category>
        <category>egg.js</category>
        <category>工作流</category>
        <category>pull request</category>
        <category>golang</category>
        <category>语言学习</category>
        <category>黑客与画家</category>
        <category>创业</category>
        <category>骑行</category>
        <category>海南</category>
        <category>图文</category>
        <category>reflow</category>
        <category>repaint</category>
        <category>命名法</category>
        <category>成功学</category>
        <category>自我建设</category>
        <category>HTTP</category>
        <category>HTTP/2</category>
        <category>SPDY</category>
        <category>QUIC</category>
        <category>HTTPS</category>
        <category>状态码</category>
        <category>网络攻击</category>
        <category>介绍</category>
        <category>图片渲染</category>
        <category>html2canvas</category>
        <category>dom-to-image</category>
        <category>electron</category>
        <category>indexedDB</category>
        <category>异步</category>
        <category>Generator</category>
        <category>thunk</category>
        <category>async</category>
        <category>函数表达式</category>
        <category>对象</category>
        <category>继承</category>
        <category>类型转换</category>
        <category>==</category>
        <category>类型判断</category>
        <category>猫</category>
        <category>杀手</category>
        <category>管理学</category>
        <category>领导力</category>
        <category>梯队</category>
        <category>移动端</category>
        <category>UI</category>
        <category>自适应</category>
        <category>rem</category>
        <category>Electron</category>
        <category>GUI</category>
        <category>gpx</category>
        <category>template</category>
        <category>Electron Builder</category>
        <category>PWA</category>
        <category>方法论</category>
        <category>夜话</category>
        <category>多线</category>
        <category>生活</category>
        <category>密码</category>
        <category>密钥</category>
        <category>技改</category>
        <category>Vue</category>
        <category>gulp</category>
        <category>瀑布流</category>
        <category>电影</category>
        <category>PHP</category>
        <category>参考</category>
        <category>思维</category>
        <category>学习能力</category>
        <category>右脑</category>
        <category>经济学</category>
        <category>宏观经济学</category>
        <category>术语</category>
        <category>GDP</category>
        <category>CPI</category>
        <category>储蓄</category>
        <category>投资</category>
        <category>金融市场</category>
        <category>股票</category>
        <category>债券</category>
        <category>美联储</category>
        <category>失业</category>
        <category>货币</category>
        <category>现值</category>
        <category>准备金</category>
        <category>货币中性</category>
        <category>通货膨胀</category>
        <category>汇率</category>
        <category>购买力</category>
        <category>净出口</category>
        <category>资产净流出</category>
        <category>总需求</category>
        <category>总供给</category>
        <category>流动性偏好</category>
        <category>乘数效应</category>
        <category>菲利普斯曲线</category>
        <category>微观经济学</category>
        <category>供求</category>
        <category>贸易</category>
        <category>市场</category>
        <category>税</category>
        <category>剩余</category>
        <category>外部性</category>
        <category>公共物品</category>
        <category>公共资源</category>
        <category>生产成本</category>
        <category>利润</category>
        <category>垄断</category>
        <category>价格歧视</category>
        <category>寡头</category>
        <category>垄断竞争</category>
        <category>生产要素市场</category>
        <category>贫困</category>
        <category>消费者选择理论</category>
        <category>不对称信息</category>
        <category>政治经济学</category>
        <category>行为经济学</category>
        <category>VSCode</category>
        <category>编辑器</category>
        <category>IDE</category>
        <category>hybrid</category>
        <category>JSBridge</category>
        <category>Web Worker</category>
        <category>Service Worker</category>
        <category>习惯</category>
        <category>lint</category>
        <category>editorconfig</category>
        <category>commit message</category>
        <category>量子物理</category>
        <category>史话</category>
        <category>埋点</category>
        <category>raven.js</category>
        <category>前端监控</category>
        <category>文本编辑器</category>
        <category>quill</category>
        <category>结构化数据</category>
        <category>React</category>
        <category>Hooks</category>
        <category>函数组件</category>
        <category>复用</category>
        <category>状态管理</category>
        <category>redux</category>
        <category>MobX</category>
        <category>代码质量</category>
        <category>重来</category>
        <category>requestAnimationFrame</category>
        <category>TypeScript</category>
        <category>路书</category>
        <category>gpx解析</category>
        <category>EXIF</category>
        <category>人类</category>
        <category>生存</category>
        <category>基因</category>
        <category>响应式编程</category>
        <category>RxJS</category>
        <category>成长</category>
        <category>业务</category>
        <category>思想</category>
        <category>程序设计</category>
        <category>心理学</category>
        <category>自我</category>
        <category>社会思维</category>
        <category>社会影响</category>
        <category>文化</category>
        <category>性别</category>
        <category>从众</category>
        <category>说服</category>
        <category>临床诊断</category>
        <category>陪审团</category>
        <category>司法</category>
        <category>物质主义</category>
        <category>健康</category>
        <category>社会关系</category>
        <category>偏见</category>
        <category>攻击行为</category>
        <category>亲密关系</category>
        <category>友谊</category>
        <category>爱情</category>
        <category>利他</category>
        <category>冲突</category>
        <category>和解</category>
        <category>软技能</category>
        <category>理财</category>
        <category>健身</category>
        <category>自我营销</category>
        <category>学习</category>
        <category>商业模式</category>
        <category>产品</category>
        <category>校园网</category>
        <category>互联网</category>
        <category>技术</category>
        <category>web开发</category>
        <category>哲思</category>
        <category>择偶观</category>
        <category>validator</category>
        <category>大文件</category>
        <category>visibilityChange</category>
        <category>IntersectionObserver</category>
        <category>图种</category>
        <category>draggable</category>
        <category>webpack</category>
        <category>z-index</category>
        <category>git submodule</category>
        <category>object-fit</category>
        <category>object-position</category>
        <category>BroadcastChannel</category>
        <category>extract-text-webpack-plugin</category>
        <category>lottie</category>
        <category>backface-visibility</category>
        <category>egret</category>
        <category>mock</category>
        <category>SSO</category>
        <category>autoprefixer</category>
        <category>polyfill</category>
        <category>Android</category>
        <category>ffmpeg</category>
        <category>React Hooks</category>
        <category>rollup</category>
        <category>CDN</category>
        <category>DNS</category>
        <category>CNAME</category>
        <category>架构</category>
        <category>组件</category>
        <category>ssh</category>
        <category>fis-receiver</category>
        <category>tmux</category>
        <category>origami</category>
        <category>promise</category>
        <category>encodeURI</category>
        <category>encodeURIComponent</category>
        <category>axios</category>
        <category>charles</category>
        <category>黑色幽默</category>
        <category>朋友</category>
        <category>梦</category>
        <category>濒死</category>
        <category>江南</category>
        <category>苏州</category>
        <category>无锡</category>
        <category>宜兴</category>
        <category>湖州</category>
        <category>南浔</category>
        <category>游记</category>
        <category>随笔</category>
        <category>群众</category>
        <category>理论</category>
        <category>实效</category>
        <category>测试</category>
        <category>长沙</category>
        <category>杭州</category>
        <category>湖南</category>
        <category>核酸</category>
        <category>美食</category>
        <category>云南</category>
        <category>丽江</category>
        <category>大理</category>
        <category>青岛</category>
        <category>济南</category>
        <category>山东</category>
        <category>西北</category>
        <category>银川</category>
        <category>西宁</category>
        <category>青海湖</category>
        <category>西海镇</category>
        <category>茶卡盐湖</category>
        <category>厦门</category>
        <category>感受</category>
        <category>C语言</category>
        <category>树</category>
        <category>主干开发</category>
        <category>GitFlow</category>
        <category>GithubFlow</category>
        <category>typescript</category>
        <category>类型系统</category>
        <category>webrtc</category>
        <category>RTMP</category>
        <category>首屏时间</category>
        <category>性能优化</category>
        <category>公司</category>
        <category>个人发展</category>
        <category>战略</category>
        <category>晋升</category>
        <category>哲学</category>
        <category>幸福</category>
        <category>人生</category>
        <category>叔本华</category>
        <category>Unix</category>
        <category>Rollup</category>
        <category>mouseout</category>
        <category>mouseleave</category>
        <category>lint-staged</category>
        <category>吸顶</category>
        <category>图片组件</category>
        <category>形式系统</category>
        <category>不完全性</category>
        <category>隐喻</category>
        <category>哥德尔</category>
        <category>巴赫</category>
        <category>埃舍尔</category>
        <category>济州</category>
        <category>西归浦</category>
        <category>城山</category>
        <category>咸德</category>
        <category>人工智能</category>
        <category>心智</category>
        <category>自指</category>
        <category>图灵</category>
        <category>马列主义</category>
        <category>恩格斯</category>
        <category>家庭</category>
        <category>国家</category>
        <category>阶级</category>
        <category>氏族</category>
        <category>哲学史</category>
        <category>孔子</category>
        <category>老子</category>
        <category>儒家</category>
        <category>道家</category>
        <category>佛教</category>
        <category>禅宗</category>
        <category>理学</category>
        <category>心学</category>
        <category>计算机</category>
        <category>微机原理</category>
        <category>门</category>
        <category>操作系统</category>
        <category>数字电路</category>
        <item>
            <guid isPermalink="true">http://shenlvmeng.github.com/blog/2019/12/24/golang-learning/</guid>
            <title>go语言入门学习</title>
            <link>http://shenlvmeng.github.com/blog/2019/12/24/golang-learning/</link>
            <category>golang</category>
            <category>语言学习</category>
            <pubDate>Tue, 24 Dec 2019 23:03:54 +0800</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;更多：&lt;a href=&#34;https://golang.org/&#34;&gt;go官网&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;题解：&lt;a href=&#34;https://github.com/shenlvmeng/go-learning-exercise&#34;&gt;https://github.com/shenlvmeng/go-learning-exercise&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;历史&#34;&gt;&lt;a href=&#34;#历史&#34; class=&#34;headerlink&#34; title=&#34;历史&#34;&gt;&lt;/a&gt;历史&lt;/h2&gt;&lt;p&gt;Go语言构想与2007年9月，于2009年11月发布。主要思想来自3种语言：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C，基础语法和编译&lt;/li&gt;
&lt;li&gt;Pascal，包概念&lt;/li&gt;
&lt;li&gt;CSP（Communication Sequential Process），并发思想&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go项目诞生是为了解决Google中系统复杂性太高的问题。因此，简单性是Go思想的重要部分。设计上，Go&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;没有隐式类型转换&lt;/li&gt;
&lt;li&gt;没有构造和析构函数&lt;/li&gt;
&lt;li&gt;没有运算符重载&lt;/li&gt;
&lt;li&gt;没有形参默认值&lt;/li&gt;
&lt;li&gt;没有继承&lt;/li&gt;
&lt;li&gt;没有泛型&lt;/li&gt;
&lt;li&gt;没有异常&lt;/li&gt;
&lt;li&gt;没有宏（macro）&lt;/li&gt;
&lt;li&gt;没有函数注记&lt;/li&gt;
&lt;li&gt;没有线程局部存储&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;快速开始&#34;&gt;&lt;a href=&#34;#快速开始&#34; class=&#34;headerlink&#34; title=&#34;快速开始&#34;&gt;&lt;/a&gt;快速开始&lt;/h2&gt;&lt;h3 id=&#34;范例1：Hello-world&#34;&gt;&lt;a href=&#34;#范例1：Hello-world&#34; class=&#34;headerlink&#34; title=&#34;范例1：Hello world&#34;&gt;&lt;/a&gt;范例1：Hello world&lt;/h3&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fmt.Println(&lt;span class=&#34;string&#34;&gt;&amp;quot;Hello world!&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在诸多语言中，C对Go的影响是最深的。&lt;code&gt;.go&lt;/code&gt;文件需要经过编译成二进制文件才可以运行。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;go run&lt;/code&gt;可以直接运行&lt;code&gt;.go&lt;/code&gt;文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;go build&lt;/code&gt;可以编译生成二进制文件，并在之后直接执行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在代码结构上，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先声明当前包名，其中命名为&lt;code&gt;main&lt;/code&gt;的包名代表代码是可执行程序，而非一个库文件&lt;/li&gt;
&lt;li&gt;再&lt;code&gt;import&lt;/code&gt;依赖包，go自带100+内置包。在编译时，编译器会抛弃未被使用的包，减少体积&lt;/li&gt;
&lt;li&gt;接下来是程序代码，命名为&lt;code&gt;main&lt;/code&gt;的函数是执行的入口&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go代码有着标准的代码格式，并可以通过&lt;code&gt;gofmt&lt;/code&gt;格式化代码。&lt;strong&gt;代码中不需要在行尾写分号&lt;/strong&gt;，后面紧跟特定token的换行符会自动转成分号。因此，Go代码中换行会影响代码编译。&lt;/p&gt;
&lt;h3 id=&#34;范例2：命令行参数&#34;&gt;&lt;a href=&#34;#范例2：命令行参数&#34; class=&#34;headerlink&#34; title=&#34;范例2：命令行参数&#34;&gt;&lt;/a&gt;范例2：命令行参数&lt;/h3&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// version 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;os&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; s, sep &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i:= &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; i &amp;lt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(os.Args); i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        s += setp + os.Args[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        setp = &lt;span class=&#34;string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fmt.Println(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;切片（slice）是序列数组元素的表示方式，可以用&lt;code&gt;s[i]&lt;/code&gt;或&lt;code&gt;s[m:n]&lt;/code&gt;（m或n缺失是表示头和尾元素位置）获取1或n-m个元素。使用&lt;code&gt;len(s)&lt;/code&gt;获取长度。&lt;/li&gt;
&lt;li&gt;注释以&lt;code&gt;//&lt;/code&gt;开头&lt;/li&gt;
&lt;li&gt;import多个库时，可以用&lt;code&gt;()&lt;/code&gt;包裹列表的形式声明，这种写法更为常见&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;var&lt;/code&gt;开头表示变量声明，未指定初始值的变量会隐式初始化为当前类型的“零值”（0或’’等）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:=&lt;/code&gt;式的声明可以省去&lt;code&gt;var&lt;/code&gt;更快地为一组变量初始化&lt;/li&gt;
&lt;li&gt;go中的&lt;strong&gt;for循环是唯一的循环语句&lt;/strong&gt;，分为以下三部分。缺失initialization和condition时可以表示while循环&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; initialization; condition; post &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// zero or more statements&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// version 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;os&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    s, sep := &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; _, arg := os.Args[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        s += sep + arg&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        sep = &lt;span class=&#34;string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fmt.Println(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;在循环中，&lt;code&gt;range&lt;/code&gt;可以生产一对值，index和value&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_&lt;/code&gt;专门用来替代不需要使用的变量名，否则go会报错&lt;/li&gt;
&lt;li&gt;另外也可以直接用&lt;code&gt;strings.Join&lt;/code&gt;方法实现效果&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;范例3：寻找重复行&#34;&gt;&lt;a href=&#34;#范例3：寻找重复行&#34; class=&#34;headerlink&#34; title=&#34;范例3：寻找重复行&#34;&gt;&lt;/a&gt;范例3：寻找重复行&lt;/h3&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;bufio&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;os&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    counts = &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;map&lt;/span&gt;[&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;]&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    input = bufio.NewScanner(os.Stdin)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; input.Scan() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        counts[input.Text()]++&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; line, n := &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; counts &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; n &amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            fmt.Printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d\t%s\n&amp;quot;&lt;/span&gt;, n, line)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;同&lt;code&gt;for&lt;/code&gt;循环一样，&lt;code&gt;if&lt;/code&gt;语句也不需要&lt;code&gt;()&lt;/code&gt;包裹&lt;/li&gt;
&lt;li&gt;内置的&lt;code&gt;make&lt;/code&gt;函数可以创建一个新的map。map也可以被&lt;code&gt;for&lt;/code&gt;循环遍历，每次循环的pair分别是key和value&lt;/li&gt;
&lt;li&gt;&lt;code&gt;counts[input.Text()]&lt;/code&gt;中当key不存在时，会返回零值0&lt;/li&gt;
&lt;li&gt;bufio库可以更方便地帮忙处理程序的输入（input）和输出（output）&lt;ul&gt;
&lt;li&gt;&lt;code&gt;input.Scan()&lt;/code&gt;获取下一行，并自动去掉末尾换行符，在没有内容时返回&lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;input.Text()&lt;/code&gt;获取当前位置的文本&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Printf&lt;/code&gt;和C语言风格类似，里面行如&lt;code&gt;%s&lt;/code&gt;，&lt;code&gt;%v&lt;/code&gt;的特殊符号称为&lt;em&gt;verbs&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从文件中寻找代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    counts := &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;map&lt;/span&gt;[&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;]&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    files := os.Args[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(files) == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        countlines(os.Stdin, counts)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; _, file := &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; files &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            f, err := os.Open(file)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; err != &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                fmt.Fprintf(os.Stderr, &lt;span class=&#34;string&#34;&gt;&amp;quot;dup: %v\n&amp;quot;&lt;/span&gt;, err)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            countLines(f, counts)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            f.Close()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; line, n := &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; counts &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; n &amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            fmt.Printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d\t%s\n&amp;quot;&lt;/span&gt;, n, lines)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;countlines&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(f *os.File, counts &lt;span class=&#34;keyword&#34;&gt;map&lt;/span&gt;[&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;]&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    input := bufio.NewScanner(f)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; input.Scan() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        counts[input.Text()]++&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// error handling&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;除了上面的流模式读取文件外，还可以直接把整个文件直接读进内存，再将二进制数据string化并处理。此处可以使用&lt;code&gt;io/ioutil&lt;/code&gt;中的&lt;code&gt;ReadFile&lt;/code&gt;方法。转换过程用&lt;code&gt;string(data)&lt;/code&gt;完成。&lt;/p&gt;
&lt;p&gt;日常使用时，通常借助bufio，ioutil等高层级API就可以完成任务，而不需要深入实现内部。&lt;/p&gt;
&lt;h3 id=&#34;范例4：Gif&#34;&gt;&lt;a href=&#34;#范例4：Gif&#34; class=&#34;headerlink&#34; title=&#34;范例4：Gif&#34;&gt;&lt;/a&gt;范例4：Gif&lt;/h3&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;image&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;image/color&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;image/gif&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;io&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;math&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;math/rand&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;os&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; palette = []color.Color&amp;#123;color.White, color.Black&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	whiteIndex = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	blackIndex = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	lissajous(os.Stdout)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;lissajous&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(out io.Writer)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		cycles  = &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		res     = &lt;span class=&#34;number&#34;&gt;0.001&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		size    = &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		nframes = &lt;span class=&#34;number&#34;&gt;64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		delay   = &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	freq := rand.Float64() * &lt;span class=&#34;number&#34;&gt;3.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	anim := gif.GIF&amp;#123;LoopCount: nframes&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	phase := &lt;span class=&#34;number&#34;&gt;0.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i := &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; nframes; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		rect := image.Rect(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;*size+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;*size+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		img := image.NewPaletted(rect, palette)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; t := &lt;span class=&#34;number&#34;&gt;0.0&lt;/span&gt;; t &amp;lt; cycles*&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;*math.Pi; t += res &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			x := math.Sin(t)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			y := math.Sin(t*freq + phase)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			img.SetColorIndex(size+&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;(x*size+&lt;span class=&#34;number&#34;&gt;0.5&lt;/span&gt;), size+&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;(y*size+&lt;span class=&#34;number&#34;&gt;0.5&lt;/span&gt;), blackIndex)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		phase += &lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		anim.Delay = &lt;span class=&#34;built_in&#34;&gt;append&lt;/span&gt;(anim.Delay, delay)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		anim.Image = &lt;span class=&#34;built_in&#34;&gt;append&lt;/span&gt;(anim.Image, img)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	gif.EncodeAll(out, &amp;amp;anim)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;const&lt;/code&gt;声明常量，常量的值只能是number，string或boolean&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gif.GIF&amp;#123;...&amp;#125;&lt;/code&gt;是合成字面量的写法，其类型是struct，可以字面量声明其field，未声明fields均为零值（zero value）&lt;/li&gt;
&lt;li&gt;image库API可以操作图像&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;范例5：fetch&#34;&gt;&lt;a href=&#34;#范例5：fetch&#34; class=&#34;headerlink&#34; title=&#34;范例5：fetch&#34;&gt;&lt;/a&gt;范例5：fetch&lt;/h3&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;io&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;net/http&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;os&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;strings&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; prefix = &lt;span class=&#34;string&#34;&gt;&amp;quot;http://&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; _, url := &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; os.Args[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; !strings.HasPrefix(url, prefix) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			url = prefix + url&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		resp, err := http.Get(url)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; err != &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			fmt.Fprintf(os.Stderr, &lt;span class=&#34;string&#34;&gt;&amp;quot;fetch: %v\n&amp;quot;&lt;/span&gt;, err)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			os.Exit(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		_, err = io.Copy(os.Stdout, resp.Body)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		resp.Body.Close()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; err != &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			fmt.Fprintf(os.Stderr, &lt;span class=&#34;string&#34;&gt;&amp;quot;fetch: reading %s: %v\n&amp;quot;&lt;/span&gt;, url, err)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;和网络相关的API都位于net库中，如&lt;code&gt;http.Get(url)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;os.Exit(1)&lt;/code&gt;代表异常退出&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;范例6：并行fetch&#34;&gt;&lt;a href=&#34;#范例6：并行fetch&#34; class=&#34;headerlink&#34; title=&#34;范例6：并行fetch&#34;&gt;&lt;/a&gt;范例6：并行fetch&lt;/h3&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;io&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;io/ioutil&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;net/http&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;os&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	start := time.Now()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	ch := &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; _, url := &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; os.Args[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;go&lt;/span&gt; fetch(url, ch)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; os.Args[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		fmt.Println(&amp;lt;-ch)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	fmt.Printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%.2fs elapse\n&amp;quot;&lt;/span&gt;, time.Since(start).Seconds())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;fetch&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(url &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;, ch &lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt;&amp;lt;- &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	start := time.Now()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	res, err := http.Get(url)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; err != &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		ch &amp;lt;- fmt.Sprint(err)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	nbytes, err := io.Copy(ioutil.Discard, res.Body)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	res.Body.Close()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; err != &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		ch &amp;lt;- fmt.Sprintf(&lt;span class=&#34;string&#34;&gt;&amp;quot;while reading %s: %v&amp;quot;&lt;/span&gt;, url, err)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	secs := time.Since(start).Seconds()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	ch &amp;lt;- fmt.Sprintf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%.2fs %7d %s&amp;quot;&lt;/span&gt;, secs, nbytes, url)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;goroutine是go中并行执行函数的表示，channel是goroutine间相互沟通的方式，传递特定类型数据。&lt;strong&gt;goroutine相互沟通时，沟通的两者会对其他goroutine block&lt;/strong&gt;，保证没有冲突&lt;ul&gt;
&lt;li&gt;goroutine使用&lt;code&gt;go&lt;/code&gt;创建，channel使用&lt;code&gt;chan&lt;/code&gt;创建，&lt;code&gt;ch &amp;lt;-&lt;/code&gt;表示向channel发送，&lt;code&gt;&amp;lt;- ch&lt;/code&gt;表示从channel接收&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ioutil.Discard&lt;/code&gt;输出流会直接丢弃流内容&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;范例7：web-server&#34;&gt;&lt;a href=&#34;#范例7：web-server&#34; class=&#34;headerlink&#34; title=&#34;范例7：web server&#34;&gt;&lt;/a&gt;范例7：web server&lt;/h3&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;log&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;net/http&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	http.HandleFunc(&lt;span class=&#34;string&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;, handler)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	log.Fatal(http.ListenAndServe(&lt;span class=&#34;string&#34;&gt;&amp;quot;localhost:8000&amp;quot;&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;handler&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	fmt.Fprintf(w, &lt;span class=&#34;string&#34;&gt;&amp;quot;Path = %q\n&amp;quot;&lt;/span&gt;, r.URL.Path)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;http&lt;/code&gt;库的&lt;code&gt;HandleFunc&lt;/code&gt;和&lt;code&gt;ListenAndServer&lt;/code&gt;可以便捷地启动一个服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;log&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;net/http&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;sync&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; mu sync.Mutex&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; count &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	http.HandleFunc(&lt;span class=&#34;string&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;, handle)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	http.HandleFunc(&lt;span class=&#34;string&#34;&gt;&amp;quot;/count&amp;quot;&lt;/span&gt;, counter)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	log.Fatal(http.ListenAndServe(&lt;span class=&#34;string&#34;&gt;&amp;quot;localhost:8000&amp;quot;&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;handle&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	mu.Lock()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	count++&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	mu.Unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	fmt.Fprintf(w, &lt;span class=&#34;string&#34;&gt;&amp;quot;path = %q\n&amp;quot;&lt;/span&gt;, r.URL.Path)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;counter&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(w http.ResponseWriter, r *http.Request)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	mu.Lock()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	fmt.Fprintf(w, &lt;span class=&#34;string&#34;&gt;&amp;quot;count %d\n&amp;quot;&lt;/span&gt;, count)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	mu.Unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;server会为每个请求创建一个新的goroutine处理，为了避免并发读写count时的bug，使用了mutex锁保证读写是都是串行的&lt;/li&gt;
&lt;li&gt;&lt;code&gt;os.Stdout&lt;/code&gt;,&lt;code&gt;ioutil.Discard&lt;/code&gt;, &lt;code&gt;http.ResponseWriter&lt;/code&gt;都实现了&lt;code&gt;io.Writer&lt;/code&gt;接口，因此可以用在任何需要输出流的地方&lt;/li&gt;
&lt;li&gt;if语句前可以增加前置语句，如&lt;code&gt;if err:=xxx; err != nil&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;杂项&#34;&gt;&lt;a href=&#34;#杂项&#34; class=&#34;headerlink&#34; title=&#34;杂项&#34;&gt;&lt;/a&gt;杂项&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;go中的&lt;code&gt;switch&lt;/code&gt;没有fall through机制，若需要，需要显示声明&lt;code&gt;fallthrough&lt;/code&gt;。&lt;code&gt;case&lt;/code&gt;支持表达式，&lt;code&gt;switch&lt;/code&gt;后支持没有操作数，此时的switch称为tagless switch。&lt;code&gt;break&lt;/code&gt;, &lt;code&gt;continue&lt;/code&gt;, &lt;code&gt;goto&lt;/code&gt;命令如常&lt;/li&gt;
&lt;li&gt;go中有命名类型，类似ts中的&lt;code&gt;interface&lt;/code&gt;，行如&lt;code&gt;type Point struct &amp;#123; X, Y int &amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;go中有指针，&lt;code&gt;*&lt;/code&gt;表示去指针对应的值，&lt;code&gt;&amp;amp;&lt;/code&gt;表示取变量的指针，另外&lt;strong&gt;不支持指针上的算术运算&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;go中的方法指命名类型上的函数，interface意义如常&lt;/li&gt;
&lt;li&gt;可以去&lt;a href=&#34;https://golang.org/pkg&#34;&gt;这里&lt;/a&gt;寻找标准库的包，或去&lt;a href=&#34;https://godoc.org/&#34;&gt;这里&lt;/a&gt;寻找社区贡献的包&lt;/li&gt;
&lt;li&gt;注释风格同其他语言，&lt;code&gt;//&lt;/code&gt;表示单行注释，&lt;code&gt;/* */&lt;/code&gt;表示多行注释。不支持嵌套注释&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;程序结构&#34;&gt;&lt;a href=&#34;#程序结构&#34; class=&#34;headerlink&#34; title=&#34;程序结构&#34;&gt;&lt;/a&gt;程序结构&lt;/h2&gt;&lt;h3 id=&#34;命名&#34;&gt;&lt;a href=&#34;#命名&#34; class=&#34;headerlink&#34; title=&#34;命名&#34;&gt;&lt;/a&gt;命名&lt;/h3&gt;&lt;p&gt;和JS类似&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以**Unicode字母或下划线&lt;code&gt;_&lt;/code&gt;**开头&lt;/li&gt;
&lt;li&gt;后跟&lt;strong&gt;Unicode字母或数字或下划线&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;大小写敏感&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;go目前（2020&amp;#x2F;01&amp;#x2F;01）有25个不允许用来命名的&lt;strong&gt;关键字&lt;/strong&gt;，其中几个可能是对前端较难想到的是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;select&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chan&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;range&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fallthrough&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，还有一些预定义常量、类型、函数&lt;strong&gt;可以用来命名&lt;/strong&gt;，但很容易造成误解，下面举些例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;常量：&lt;code&gt;true&lt;/code&gt; &lt;code&gt;iota&lt;/code&gt; &lt;code&gt;nil&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;类型：&lt;code&gt;int&lt;/code&gt; &lt;code&gt;complex128&lt;/code&gt; &lt;code&gt;uintptr&lt;/code&gt; &lt;code&gt;rune&lt;/code&gt; &lt;code&gt;error&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;函数：&lt;code&gt;make&lt;/code&gt; &lt;code&gt;len&lt;/code&gt; &lt;code&gt;imag&lt;/code&gt; &lt;code&gt;panic&lt;/code&gt; &lt;code&gt;close&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;包名始终小写&lt;/strong&gt;，在函数域内命名的函数只在函数域内可见，否则&lt;strong&gt;在整个包域内可见&lt;/strong&gt;。整个包内声明的变量用首字母区分可见性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;首字母大写的可以被其他包访问&lt;/strong&gt;，如&lt;code&gt;fmt.FPrintf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;反之则只在包内可见&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;命名长度没有限制，但建议&lt;em&gt;scope越大的变量命名越长&lt;/em&gt;。Go使用驼峰风格的变量命名，首字母缩略词和首字母&lt;strong&gt;同大写或同小写&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;声明&#34;&gt;&lt;a href=&#34;#声明&#34; class=&#34;headerlink&#34; title=&#34;声明&#34;&gt;&lt;/a&gt;声明&lt;/h3&gt;&lt;p&gt;声明有4钟：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;var&lt;/code&gt; 变量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const&lt;/code&gt; 常量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;type&lt;/code&gt; 类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;func&lt;/code&gt; 函数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;声明在函数域内可见，或在整个包域内可见。函数返回可以是一组变量。&lt;/p&gt;
&lt;h3 id=&#34;变量&#34;&gt;&lt;a href=&#34;#变量&#34; class=&#34;headerlink&#34; title=&#34;变量&#34;&gt;&lt;/a&gt;变量&lt;/h3&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; name &lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; = expression&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Go中的变量声明如上所示，其中的&lt;code&gt;type&lt;/code&gt;部分或&lt;code&gt;expression&lt;/code&gt;部分可以省略，&lt;strong&gt;但是不能同时省略&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;type缺失时，name的类型由expression字面量或返回值决定&lt;/li&gt;
&lt;li&gt;expression缺失时，name的值&lt;strong&gt;自动设置为type类型的“零值”（zero value）&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;数值零值为0，字符串零值为&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;，布尔类型零值为&lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;其余接口或引用类型零值为&lt;code&gt;nil&lt;/code&gt;，如指针、map、切片、函数、channel&lt;/li&gt;
&lt;li&gt;聚合类型的零值即其所有组成元素的零值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以，&lt;strong&gt;Go中不存在未初始化的变量&lt;/strong&gt;。包级别变量在&lt;code&gt;main&lt;/code&gt;函数开始前初始化，局部变量在声明过程中初始化。一组变量可以同时被初始化。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; b, f, s = &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1.3&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; f, err = os.Open(name)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;简写式&#34;&gt;&lt;a href=&#34;#简写式&#34; class=&#34;headerlink&#34; title=&#34;简写式&#34;&gt;&lt;/a&gt;简写式&lt;/h4&gt;&lt;p&gt;在&lt;strong&gt;函数域&lt;/strong&gt;内的&lt;strong&gt;局部变量声明&lt;/strong&gt;可以使用简写式，即&lt;code&gt;:=&lt;/code&gt;。在已知变量初始值时可以省去写&lt;code&gt;var&lt;/code&gt;。在初始值并不重要或最好显式写明类型时，还是使用&lt;code&gt;var foo type&lt;/code&gt;的形式比较好。和&lt;code&gt;var&lt;/code&gt;声明一样，也可以同时用简写式声明多个局部变量。但要注意，不要把这种写法和&lt;em&gt;元组赋值（tuple assignment）&lt;/em&gt;搞混了。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// multiple initialzier expression&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;i, j := &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// tuple assignment&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;i, j = j, i&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;另外，简写式声明里可以写&lt;strong&gt;部分&lt;/strong&gt;已经声明的局部变量，在这里会当做赋值处理。但是简写式声明中要&lt;strong&gt;至少包含一个未声明变量&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;in, err := os.OpenFile(infile)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;out, err := os.OpenFile(outfile)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;指针&#34;&gt;&lt;a href=&#34;#指针&#34; class=&#34;headerlink&#34; title=&#34;指针&#34;&gt;&lt;/a&gt;指针&lt;/h4&gt;&lt;p&gt;Go中的指针和C中类似，用&lt;code&gt;&amp;amp;&lt;/code&gt;表示取一个&lt;strong&gt;变量&lt;/strong&gt;的地址，用&lt;code&gt;*&lt;/code&gt;表示访问某个地址所在的位置。指针的零值为&lt;code&gt;nil&lt;/code&gt;，因此可以用&lt;code&gt;p != nil&lt;/code&gt;来判断指针是否指向变量。&lt;/p&gt;
&lt;h4 id=&#34;new函数&#34;&gt;&lt;a href=&#34;#new函数&#34; class=&#34;headerlink&#34; title=&#34;new函数&#34;&gt;&lt;/a&gt;&lt;code&gt;new&lt;/code&gt;函数&lt;/h4&gt;&lt;p&gt;可以通过&lt;code&gt;new&lt;/code&gt;函数，声明类型&lt;code&gt;T&lt;/code&gt;创建新的&lt;strong&gt;匿名&lt;/strong&gt;变量，函数返回变量的指针即&lt;code&gt;*T&lt;/code&gt;类型。这在不需要变量名时很好用。每次调用&lt;code&gt;new&lt;/code&gt;函数新建变量时，返回的地址&lt;strong&gt;不同&lt;/strong&gt;，&lt;strong&gt;除非类型不附加任何信息&lt;/strong&gt;，如&lt;code&gt;struct &amp;#123;&amp;#125;&lt;/code&gt;或&lt;code&gt;[0]int&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;p := &lt;span class=&#34;built_in&#34;&gt;new&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;*p = &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;另外，由于&lt;code&gt;new&lt;/code&gt;只是预定义函数，所以可以用来做变量名。&lt;/p&gt;
&lt;h4 id=&#34;生命周期&#34;&gt;&lt;a href=&#34;#生命周期&#34; class=&#34;headerlink&#34; title=&#34;生命周期&#34;&gt;&lt;/a&gt;生命周期&lt;/h4&gt;&lt;p&gt;生命周期即变量从创建到被回收的时间。包级别的变量会在整个程序执行过程中存在。局部变量则会在&lt;em&gt;未被引用（unreachable）&lt;/em&gt;时释放内存。Go中的垃圾回收机制会自动帮你完成这件事。但是如果有下面这种情况出现，则会阻止垃圾回收释放内存。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; global *&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; x &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	x = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	global = &amp;amp;x&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在上述情况下，&lt;code&gt;x&lt;/code&gt;局部变量从&lt;code&gt;f&lt;/code&gt;函数中&lt;strong&gt;逃逸&lt;/strong&gt;，并不会在&lt;code&gt;f&lt;/code&gt;函数返回时被回收，持久存储在堆（heap）中。应尽量避免这种情况带来的额外内存损耗。&lt;/p&gt;
&lt;h3 id=&#34;赋值&#34;&gt;&lt;a href=&#34;#赋值&#34; class=&#34;headerlink&#34; title=&#34;赋值&#34;&gt;&lt;/a&gt;赋值&lt;/h3&gt;&lt;p&gt;和其余语言赋值没什么太大区别。&lt;/p&gt;
&lt;p&gt;不同的是，额外增加了&lt;strong&gt;元组赋值&lt;/strong&gt;。&lt;code&gt;=&lt;/code&gt;右侧的一组变量会先求值，再赋给左侧变量。建议在不需要复杂运算时使用。同时，有些表达式和函数也会返回一组值，此时需要用元组赋值的方式接收。在不需要某个变量时，可以使用&lt;code&gt;_&lt;/code&gt;占位。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;x, y= y, x&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;f, err = os.Open(&lt;span class=&#34;string&#34;&gt;&amp;quot;foo.txt&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;v, ok = m[key]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;v, ok = x.(T)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;v, ok = &amp;lt;- ch&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;可赋值性&#34;&gt;&lt;a href=&#34;#可赋值性&#34; class=&#34;headerlink&#34; title=&#34;可赋值性&#34;&gt;&lt;/a&gt;可赋值性&lt;/h4&gt;&lt;p&gt;除了一些显式的赋值外，还有函数返回、字面量声明等。Go中的赋值&lt;strong&gt;当且仅当&lt;/strong&gt;&lt;code&gt;=&lt;/code&gt;左右的值和变量&lt;strong&gt;类型相同&lt;/strong&gt;才可进行（对于&lt;code&gt;==&lt;/code&gt;和&lt;code&gt;!=&lt;/code&gt;的判断也是这样）。&lt;code&gt;nil&lt;/code&gt;可以赋值给任何复杂类型或引用类型。&lt;/p&gt;
&lt;h3 id=&#34;类型声明&#34;&gt;&lt;a href=&#34;#类型声明&#34; class=&#34;headerlink&#34; title=&#34;类型声明&#34;&gt;&lt;/a&gt;类型声明&lt;/h3&gt;&lt;p&gt;Go中可以定义类型。Go中的类型定义储存值的符号、它们的大小、固有操作以及方法，使用&lt;code&gt;type name underlying-name&lt;/code&gt;声明。它通常出现在包级别，有些也会通过首字母大写的形式export出去。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; Celsius &lt;span class=&#34;type&#34;&gt;float64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; Fahrenheit &lt;span class=&#34;type&#34;&gt;float64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CTOF&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(c Celsius)&lt;/span&gt;&lt;/span&gt; Fahrenheit &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; Fahrenheit(c * &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt; / &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt; + &lt;span class=&#34;number&#34;&gt;32&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;FTOC&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(f Fahrenheit)&lt;/span&gt;&lt;/span&gt; Celsius &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; Celsius((f - &lt;span class=&#34;number&#34;&gt;32&lt;/span&gt;) * &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt; / &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;两个有着相同底层类型的命名类型并不是同一种类型&lt;/strong&gt;，也不能直接相互赋值和比较。但是可以使用&lt;strong&gt;强制类型转换&lt;/strong&gt;转换到想同类型来比较。所有的类型&lt;code&gt;T&lt;/code&gt;都有对应的强制类型转换操作&lt;code&gt;T(x)&lt;/code&gt;。两个有相同类层类型或指向相同底层类型的未命名指针可以相互强制转换。另外，Go中的强制类型转换从不会在运行时出错。&lt;/p&gt;
&lt;p&gt;比较特别的是，类型上还可以声明方法。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;(c Celsius)&lt;/span&gt;&lt;/span&gt; String() &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; fmt.Sprintf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%g°C&amp;quot;&lt;/span&gt;, c)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;包和文件&#34;&gt;&lt;a href=&#34;#包和文件&#34; class=&#34;headerlink&#34; title=&#34;包和文件&#34;&gt;&lt;/a&gt;包和文件&lt;/h3&gt;&lt;p&gt;Go中的包即其他语言中的库、模块。以实现模块化、封装、分发和重用。和Java类似，一个包的代码&lt;strong&gt;可以存放在多个文件内&lt;/strong&gt;，通常位于同一个文件夹下。每个包都有相互隔离的命名空间，需要用·&lt;code&gt;image.Decode&lt;/code&gt;的形式使用。需要&lt;code&gt;export&lt;/code&gt;的变量、类型、函数使用&lt;strong&gt;首字母大写&lt;/strong&gt;的形式。&lt;/p&gt;
&lt;p&gt;建议在每个export出去的变量、类型、函数前使用注释说明。另外，建议在包开头留下&lt;em&gt;doc comment&lt;/em&gt;，或将更多注释放在&lt;code&gt;doc.go&lt;/code&gt;中。&lt;/p&gt;
&lt;h4 id=&#34;import&#34;&gt;&lt;a href=&#34;#import&#34; class=&#34;headerlink&#34; title=&#34;import&#34;&gt;&lt;/a&gt;import&lt;/h4&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;os&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;strconv&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;shenlvmeng/learning/tempconv&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; _, arg := &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; os.Args[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		t, err := strconv.ParseFloat(arg, &lt;span class=&#34;number&#34;&gt;64&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; err != &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			fmt.Fprintf(os.Strerr, &lt;span class=&#34;string&#34;&gt;&amp;quot;convert error: %v\n&amp;quot;&lt;/span&gt;, err)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			os.Exit(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		f := temconv.Fahrenheit(t)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		c := tempconv.Celsius(c)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		fmt.Printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%s = %s, %s = %s\n&amp;quot;&lt;/span&gt;, f, tempconv.FTOC(f), c, tempconv.CTOF(c))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;每一个包都有自己的import路径，Go语言标准并不定义如何解释import路径，这一步交给解释工具完成。每个包的包名通常和路径的最后一段同名。为避免包名冲突，import可以指定包的别名。&lt;/p&gt;
&lt;p&gt;在引用了未被使用的包时会报错。，借助&lt;code&gt;goimports&lt;/code&gt;等工具和正确的IDE配置，可以在保存代码时自动标准化代码格式。&lt;/p&gt;
&lt;h4 id=&#34;包初始化&#34;&gt;&lt;a href=&#34;#包初始化&#34; class=&#34;headerlink&#34; title=&#34;包初始化&#34;&gt;&lt;/a&gt;包初始化&lt;/h4&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; a = b + c &lt;span class=&#34;comment&#34;&gt;//third&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; b = f() &lt;span class=&#34;comment&#34;&gt;// second&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; c = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;// first&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;初始化时，先按照依赖的顺序初始化包级别变量。而&lt;code&gt;.go&lt;/code&gt;文件的处理顺序则按照传给go编译器的顺序。初始化的过程是自底向上的，即当所有依赖包都初始化完成后，才会初始化&lt;code&gt;main&lt;/code&gt;包，再执行&lt;code&gt;main&lt;/code&gt;函数。对于初始化过程复杂的变量，可以在&lt;code&gt;init&lt;/code&gt;函数中声明，而&lt;code&gt;init&lt;/code&gt;是在程序启动时，按照声明的顺序一个一个执行的。&lt;/p&gt;
&lt;h3 id=&#34;作用域&#34;&gt;&lt;a href=&#34;#作用域&#34; class=&#34;headerlink&#34; title=&#34;作用域&#34;&gt;&lt;/a&gt;作用域&lt;/h3&gt;&lt;p&gt;作用域是编译时的，和运行时的生命周期概念相对应。作用域描述一个声明的可见范围。和C系列语言类似，用大括号&lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;包裹会形成&lt;strong&gt;词法块作用域&lt;/strong&gt;。Go在&lt;strong&gt;全局作用域&lt;/strong&gt;下预定义了一些常量、函数、类型等。在函数外声明的作用域是包级别的，&lt;code&gt;import&lt;/code&gt;进来的包作用域是文件级别的。局部声明只在块作用域内。内部作用域会覆盖外部作用域的同名声明。&lt;/p&gt;
&lt;p&gt;另外，Go中还有一些&lt;strong&gt;隐式&lt;/strong&gt;的作用域，比如&lt;code&gt;for&lt;/code&gt;，&lt;code&gt;if&lt;/code&gt;，&lt;code&gt;switch&lt;/code&gt;表达式中的作用域。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	x := &lt;span class=&#34;string&#34;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i:= &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(x); i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		x := x[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; x != &lt;span class=&#34;string&#34;&gt;&amp;quot;o&amp;quot;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			x := x + &lt;span class=&#34;string&#34;&gt;&amp;#x27;A&amp;#x27;&lt;/span&gt; - &lt;span class=&#34;string&#34;&gt;&amp;#x27;a&amp;#x27;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;// 类似upperCase&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			fmt.Prinf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%c&amp;quot;&lt;/span&gt;, x)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上面的&lt;code&gt;for&lt;/code&gt;和&lt;code&gt;if&lt;/code&gt;内部的x是一个单独的作用域。另外注意，简写式中会声明局部变量，会覆盖外部的同名变量，可能会带来意料之外的结果。可以通过&lt;code&gt;var xxx type&lt;/code&gt;的形式声明变量。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; cwd &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	cwd, err := os.Getwd() &lt;span class=&#34;comment&#34;&gt;// compile error: unused cwd&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; err != &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		log.Fatalf(&lt;span class=&#34;string&#34;&gt;&amp;quot;os.Getwd failed: %v&amp;quot;&lt;/span&gt;, err)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;基础数据结构&#34;&gt;&lt;a href=&#34;#基础数据结构&#34; class=&#34;headerlink&#34; title=&#34;基础数据结构&#34;&gt;&lt;/a&gt;基础数据结构&lt;/h2&gt;&lt;p&gt;Go有4大类数据类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基础类型&lt;/strong&gt;，即数字、字符串、布尔值&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;聚合类型&lt;/strong&gt;，即数组、struct&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;引用类型&lt;/strong&gt;，包括函数、指针、slice、map、channel&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;接口类型&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这一部分先说基础类型&lt;/p&gt;
&lt;h3 id=&#34;整型&#34;&gt;&lt;a href=&#34;#整型&#34; class=&#34;headerlink&#34; title=&#34;整型&#34;&gt;&lt;/a&gt;整型&lt;/h3&gt;&lt;p&gt;Go的数字类型包含了不同size的整型、浮点数和复数，以及它们的有无符号性。&lt;/p&gt;
&lt;p&gt;整型有8、16、32、64四种长度，以及对应的signed和unsigned。组合一下即下面8种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int8&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int16&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int32&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int64&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uint8&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uint16&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uint32&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uint64&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，&lt;code&gt;rune&lt;/code&gt;是&lt;code&gt;int32&lt;/code&gt;的别称，通常用来表示1个Unicode字符，&lt;code&gt;byte&lt;/code&gt;是&lt;code&gt;unit8&lt;/code&gt;的别称。&lt;code&gt;uintptr&lt;/code&gt;用来表示一个可以承载任意指针值的无符号整型。&lt;/p&gt;
&lt;p&gt;Go中对整型的处理和C风格很像。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用首位表示符号位（signed int中）&lt;/li&gt;
&lt;li&gt;类型承载范围和C一样，如int8表示-128到127&lt;/li&gt;
&lt;li&gt;和C一样的操作符以及优先级，唯一区别是&lt;code&gt;&amp;amp;^&lt;/code&gt;表示位清除，&lt;code&gt;x &amp;amp;^ y&lt;/code&gt;表示根据y各位将x各位清0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;左移位，空位取0，&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;右移位，无符号数补零，&lt;strong&gt;有符号数补符号位&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;整型间除法会清除小数部分&lt;/li&gt;
&lt;li&gt;取余&lt;code&gt;%&lt;/code&gt;运算结果符号和被除数有关&lt;/li&gt;
&lt;li&gt;超过位数的会溢出&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt;开头表示八进制（通常用来表示POSIX系统中文件权限设置），&lt;code&gt;0x&lt;/code&gt;表示十六进制&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不一样的是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相同类型才可比较大小，否则需要用&lt;code&gt;int()&lt;/code&gt;强制转换为1种类型再比较。某些类型转换只改变值的使用方式，有些则会改变值，如&lt;code&gt;int&lt;/code&gt;和&lt;code&gt;float&lt;/code&gt;之间的转换&lt;/li&gt;
&lt;li&gt;用&lt;code&gt;%d&lt;/code&gt;, &lt;code&gt;%o&lt;/code&gt;, &lt;code&gt;%x&lt;/code&gt;分别表示整型、八进制和十六进制数&lt;/li&gt;
&lt;li&gt;用&lt;code&gt;%c&lt;/code&gt;表示显示对应的Unicode字符，&lt;code&gt;%q&lt;/code&gt;显示带引号版本&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;浮点数&#34;&gt;&lt;a href=&#34;#浮点数&#34; class=&#34;headerlink&#34; title=&#34;浮点数&#34;&gt;&lt;/a&gt;浮点数&lt;/h3&gt;&lt;p&gt;浮点数有&lt;code&gt;float32&lt;/code&gt;和&lt;code&gt;float64&lt;/code&gt;两种类型，服从IEEE754标准。为保证精确性，通常使用&lt;code&gt;flaot64&lt;/code&gt;。另外，还有以下特点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.&lt;/code&gt;前后的0可以省略&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%g&lt;/code&gt;, &lt;code&gt;%e&lt;/code&gt;和&lt;code&gt;%f&lt;/code&gt;分别打印最合适展示精确度版本、指数版本和原始版本&lt;/li&gt;
&lt;li&gt;有&lt;code&gt;+Inf&lt;/code&gt;, &lt;code&gt;-Inf&lt;/code&gt;和&lt;code&gt;NaN&lt;/code&gt;特殊值，表现类似JS&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;复数&#34;&gt;&lt;a href=&#34;#复数&#34; class=&#34;headerlink&#34; title=&#34;复数&#34;&gt;&lt;/a&gt;复数&lt;/h3&gt;&lt;p&gt;Go有两种复数类型：&lt;code&gt;complex64&lt;/code&gt;和&lt;code&gt;complex128&lt;/code&gt;，它们其实是由&lt;code&gt;float32&lt;/code&gt;和&lt;code&gt;float64&lt;/code&gt;组成的。复数可以通过&lt;code&gt;complex&lt;/code&gt;内置函数初始化，或者直接使用字面量。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; x &lt;span class=&#34;type&#34;&gt;complex128&lt;/span&gt; = &lt;span class=&#34;built_in&#34;&gt;complex&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;) &lt;span class=&#34;comment&#34;&gt;// 1 + 2i&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;y := &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt; - &lt;span class=&#34;number&#34;&gt;4i&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;复数间可以判断相等性，无法判断大小。&lt;code&gt;math/cmplx&lt;/code&gt;包里包含一些复数的数学运算。&lt;/p&gt;
&lt;h3 id=&#34;布尔类型&#34;&gt;&lt;a href=&#34;#布尔类型&#34; class=&#34;headerlink&#34; title=&#34;布尔类型&#34;&gt;&lt;/a&gt;布尔类型&lt;/h3&gt;&lt;p&gt;即type &lt;code&gt;bool&lt;/code&gt;，和其他语言类似，有短路行为，&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;比&lt;code&gt;||&lt;/code&gt;优先级更高。&lt;code&gt;bool&lt;/code&gt;类型和整型之间不能相互隐式转换。&lt;/p&gt;
&lt;h3 id=&#34;字符串&#34;&gt;&lt;a href=&#34;#字符串&#34; class=&#34;headerlink&#34; title=&#34;字符串&#34;&gt;&lt;/a&gt;字符串&lt;/h3&gt;&lt;p&gt;字符串表示&lt;strong&gt;一组不可修改的比特位序列&lt;/strong&gt;，但通常用来承载可读的Unicode编码点。&lt;code&gt;len&lt;/code&gt;返回字符串长度，&lt;code&gt;[i]&lt;/code&gt;返回第&lt;code&gt;i&lt;/code&gt;个&lt;strong&gt;字节&lt;/strong&gt;处的值。越界读取会导致panic。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;s[i:j]&lt;/code&gt;表示自带的substring操作，其中&lt;code&gt;i&lt;/code&gt;和&lt;code&gt;j&lt;/code&gt;均可省略&lt;/li&gt;
&lt;li&gt;字符串间可以比较大小和相等性，其中大小通过逐字节子母序比较&lt;/li&gt;
&lt;li&gt;&lt;code&gt;+&lt;/code&gt;可表示字符串拼接&lt;/li&gt;
&lt;li&gt;不可变性：不允许修改字符串的值（如&lt;code&gt;s[0] = &amp;#39;L&amp;#39;&lt;/code&gt;），这使得Go可以在底层复用字符串，节省内存&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;字面量字符串&#34;&gt;&lt;a href=&#34;#字面量字符串&#34; class=&#34;headerlink&#34; title=&#34;字面量字符串&#34;&gt;&lt;/a&gt;字面量字符串&lt;/h4&gt;&lt;p&gt;用双引号&lt;code&gt;&amp;quot;&lt;/code&gt;包裹，UTF-8编码。双引号中的反斜线&lt;code&gt;\&lt;/code&gt;有特殊含义。如&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\n&lt;/code&gt;表示换行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\t&lt;/code&gt;表示制表符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\x&lt;/code&gt;表示后接十六进制的高低位&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\ooo&lt;/code&gt;表示三个八进制位&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由反引号&amp;#96;&amp;#96; &amp;#96;包裹的表示纯文本字面量，其中的换行和格式也会被跨平台保留。可以用来书写多行字符串。&lt;/p&gt;
&lt;h4 id=&#34;Unicode表示&#34;&gt;&lt;a href=&#34;#Unicode表示&#34; class=&#34;headerlink&#34; title=&#34;Unicode表示&#34;&gt;&lt;/a&gt;Unicode表示&lt;/h4&gt;&lt;p&gt;Go中使用UTF-8变长编码：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0xxxxxxx&lt;/code&gt;表示ASCII码&lt;/li&gt;
&lt;li&gt;&lt;code&gt;11xxxxxx 10xxxxxx&lt;/code&gt; 表示两字节长度&lt;/li&gt;
&lt;li&gt;&lt;code&gt;110xxxxx 10xxxxxx 10xxxxxx&lt;/code&gt;表示三字节长度&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx&lt;/code&gt; 表示四字节长度&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以由&lt;code&gt;\uhhhh&lt;/code&gt;表示16比特或&lt;code&gt;\U&lt;/code&gt;表示32比特，如世界：&lt;code&gt;\u4e16\u754c&lt;/code&gt;。&lt;code&gt;unicode&lt;/code&gt;包和&lt;code&gt;unicode/utf8&lt;/code&gt;包提供了编解码工具。&lt;code&gt;utf6.DecodeRuneInString&lt;/code&gt;可以读取一个自然字符的数据，而非一个字节一个字节读取，&lt;code&gt;utf8.RuneCountInString&lt;/code&gt;返回字符串的自然字符长度。幸运的是，&lt;code&gt;range&lt;/code&gt;循环会自动调用utf8解码其中的自然字符。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;unicode/uft8&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;s := &lt;span class=&#34;string&#34;&gt;&amp;quot;Hello, 世界&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fmt.Println(&lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(s)) &lt;span class=&#34;comment&#34;&gt;// 13&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fmt.Println(utf8.RuneCountInString(s) &lt;span class=&#34;comment&#34;&gt;// 9)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;当Go Unicode解析失败时，会使用特殊的Unicode占位符&lt;code&gt;\ufffd&lt;/code&gt;，显示为带有问号的特殊字符。另外，&lt;code&gt;rune[]&lt;/code&gt;可以直接将字符串转成编码后的每个Unicode编码点。这个rune数组进行&lt;code&gt;string()&lt;/code&gt;强制类型转换后即原始字符串。当然你也可以直接&lt;code&gt;string()&lt;/code&gt;装换一个整型数，不合规的整形数会得到上面提到的特殊字符。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;s := &lt;span class=&#34;string&#34;&gt;&amp;quot;世界&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;r := []&lt;span class=&#34;type&#34;&gt;rune&lt;/span&gt;(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fmt.Println(&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;(r))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fmt.Println(&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;65&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fmt.Printlf(&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;12341234&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;字符串和Byte-Slices&#34;&gt;&lt;a href=&#34;#字符串和Byte-Slices&#34; class=&#34;headerlink&#34; title=&#34;字符串和Byte Slices&#34;&gt;&lt;/a&gt;字符串和Byte Slices&lt;/h4&gt;&lt;p&gt;&lt;code&gt;bytes&lt;/code&gt;, &lt;code&gt;strings&lt;/code&gt;, &lt;code&gt;strconv&lt;/code&gt;, &lt;code&gt;unicode&lt;/code&gt;是和string相关的几个包。&lt;code&gt;strings&lt;/code&gt;提供基本的字符串搜索、比较、修改等操作，&lt;code&gt;bytes&lt;/code&gt;提供修改字节数组的一些操作。有时，使用&lt;code&gt;byte.Buffer&lt;/code&gt;类型，在操作字符串字节时会更有效率。&lt;code&gt;strconv&lt;/code&gt;提供了将其他类型转成字符串和修饰字符串的操作函数。&lt;code&gt;unicode&lt;/code&gt;提供了一些以rune为中心的函数，如&lt;code&gt;IsDigit&lt;/code&gt;, &lt;code&gt;IsLetter&lt;/code&gt;, &lt;code&gt;isUpper&lt;/code&gt;等。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// basename removes directory and filename suffix&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;basename&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(s &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	slash := strings.LastIndex(s, &lt;span class=&#34;string&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	s = s[slash+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; dot := strings.LastIndex(s, &lt;span class=&#34;string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;); dot &amp;gt;= &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		s = s[:dot]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; s&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;path&lt;/code&gt;和&lt;code&gt;path/filepath&lt;/code&gt;包提供了更多文件夹和目录的操作函数。&lt;/p&gt;
&lt;p&gt;尽管字符串中的字节序列是不可更改的。&lt;strong&gt;其对应的字节序列数组则是可以自由修改的&lt;/strong&gt;。&lt;code&gt;[]byte(s)&lt;/code&gt;会分配一个字符串&lt;code&gt;s&lt;/code&gt;的字节序列拷贝，也可以对应用&lt;code&gt;string(b)&lt;/code&gt;还原。&lt;code&gt;bytes&lt;/code&gt;包提供的&lt;code&gt;Buffer&lt;/code&gt;类型可以很方便地承载&lt;code&gt;[]byte&lt;/code&gt;类型。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;intsToString&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(values []&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; buf bytes.Buffer&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	buf.WriteByte(&lt;span class=&#34;string&#34;&gt;&amp;#x27;[&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i, v := &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; values &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; i &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			buf.WriteString(&lt;span class=&#34;string&#34;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		fmt.Fprintf(&amp;amp;buf, &lt;span class=&#34;string&#34;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;, v)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	buf.WriteByte(&lt;span class=&#34;string&#34;&gt;&amp;#x27;]&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; buf.String()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上述函数中，&lt;code&gt;WriteString&lt;/code&gt;和&lt;code&gt;WriteByte&lt;/code&gt;用于向Buffer中写入字节或字节序列，该类型还有许多其他应用场景。&lt;/p&gt;
&lt;h4 id=&#34;字符串和整型间的转换&#34;&gt;&lt;a href=&#34;#字符串和整型间的转换&#34; class=&#34;headerlink&#34; title=&#34;字符串和整型间的转换&#34;&gt;&lt;/a&gt;字符串和整型间的转换&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;字符串 -&amp;gt; 整型&lt;/strong&gt;，&lt;code&gt;fmt.Sprintf&lt;/code&gt;或&lt;code&gt;strconv.Itoa&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;整型 -&amp;gt; 字符串&lt;/strong&gt;，&lt;code&gt;strconv.FormatInt&lt;/code&gt;或&lt;code&gt;strconv.FormatUint&lt;/code&gt;或&lt;code&gt;strconv.ParseInt&lt;/code&gt;或&lt;code&gt;Atoi&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;常量&#34;&gt;&lt;a href=&#34;#常量&#34; class=&#34;headerlink&#34; title=&#34;常量&#34;&gt;&lt;/a&gt;常量&lt;/h3&gt;&lt;p&gt;常量有以下几个基本特点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编译时即对编译器可知&lt;/li&gt;
&lt;li&gt;必须是基础类型：boolean，string或number&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;常量使用&lt;code&gt;const&lt;/code&gt;声明，形式看起来和使用&lt;code&gt;var&lt;/code&gt;类似，不过值是常量。对常量进行的所有操作，如数学运算、逻辑运算、比较、内置函数求值，都是在编译期就确定了。&lt;/p&gt;
&lt;p&gt;常量可以组声明，声明时可以不显式声明类型，此时将使用右侧操作数推断常量类型。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	noDelay time.Duration = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	timeout = &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt; * time.Minute&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fmt.Printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%T %[1]v\n&amp;quot;&lt;/span&gt;, noDelay) &lt;span class=&#34;comment&#34;&gt;// &amp;quot;time.Duration 0&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fmt.Printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%T %[1]v\n&amp;quot;&lt;/span&gt;, timeout) &lt;span class=&#34;comment&#34;&gt;// &amp;quot;time.Duration 5m0s&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;还有个不常用的点：组声明时，&lt;strong&gt;除了第一个常量，剩下的常量可以不写右侧操作数&lt;/strong&gt;，此时会使用&lt;strong&gt;上一个常量&lt;/strong&gt;来初始化。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	a = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	b&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	c = &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	d&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;常量生成器iota&#34;&gt;&lt;a href=&#34;#常量生成器iota&#34; class=&#34;headerlink&#34; title=&#34;常量生成器iota&#34;&gt;&lt;/a&gt;常量生成器&lt;code&gt;iota&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;&lt;code&gt;iota&lt;/code&gt;即常量生成器，它从0开始，每次常量声明后加一。利用这个规律可以方便地生成一组常量枚举。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Sunday Weekday = &lt;span class=&#34;literal&#34;&gt;iota&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Monday&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Tuesday&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Wednesday&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Thursday&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Friday&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Saturday&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; _ = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; (&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt; * itoa)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	KB&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	MB&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	GB&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	TB&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	PB&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	EB&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	ZB&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	YB&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;无类型常量&#34;&gt;&lt;a href=&#34;#无类型常量&#34; class=&#34;headerlink&#34; title=&#34;无类型常量&#34;&gt;&lt;/a&gt;无类型常量&lt;/h4&gt;&lt;p&gt;常量和变量不一样的点在，&lt;strong&gt;常量是可以不声明类型的&lt;/strong&gt;，根据常量限定的类型，有下面一些类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无类型整型&lt;/li&gt;
&lt;li&gt;无类型Boolean&lt;/li&gt;
&lt;li&gt;无类型rune&lt;/li&gt;
&lt;li&gt;无类型浮点数&lt;/li&gt;
&lt;li&gt;无类型复数&lt;/li&gt;
&lt;li&gt;无类型字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;常量在使用时，会&lt;strong&gt;隐式&lt;/strong&gt;转换成需要的类型，并在无法转换时抛出错误。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; f &lt;span class=&#34;type&#34;&gt;float64&lt;/span&gt; = &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt; + i &lt;span class=&#34;comment&#34;&gt;// complex -&amp;gt; float64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;f = &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;// integer -&amp;gt; float64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;f = &lt;span class=&#34;number&#34;&gt;1e123&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;// float -&amp;gt; float64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;f = &lt;span class=&#34;string&#34;&gt;&amp;#x27;a&amp;#x27;&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;// rune -&amp;gt; float64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;实际上，这些无类型常量有一个隐含类型，如:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无类型整型 -&amp;gt; &lt;code&gt;int&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;无类型浮点数 -&amp;gt; &lt;code&gt;float64&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;无类型复数 -&amp;gt; &lt;code&gt;complex128&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;无类型rune -&amp;gt; &lt;code&gt;int32&lt;/code&gt;（&lt;code&gt;rune&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;聚合类型&#34;&gt;&lt;a href=&#34;#聚合类型&#34; class=&#34;headerlink&#34; title=&#34;聚合类型&#34;&gt;&lt;/a&gt;聚合类型&lt;/h2&gt;&lt;p&gt;基本类型是数据结构的组成“原子”。原子的组合就构成了“分子”——聚合类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;array&lt;/li&gt;
&lt;li&gt;slices&lt;/li&gt;
&lt;li&gt;maps&lt;/li&gt;
&lt;li&gt;structs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中array和structs是聚合类型的基础，它们都有着&lt;strong&gt;固定大小&lt;/strong&gt;。而slice和map则是动态大小。&lt;/p&gt;
&lt;h3 id=&#34;array&#34;&gt;&lt;a href=&#34;#array&#34; class=&#34;headerlink&#34; title=&#34;array&#34;&gt;&lt;/a&gt;array&lt;/h3&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; a [&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;]&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fmt.Println(a[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fmt.Println(f[&lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(a)&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;类似C风格，array表示由0或多个同一类型元素组成的&lt;strong&gt;定长序列&lt;/strong&gt;。声明数组时，需要使用&lt;strong&gt;常量表达式&lt;/strong&gt;作为数组长度。当数组元素全部列出时，可以用&lt;code&gt;...&lt;/code&gt;代替长度。元素未声明初始值时，按零值（zero value）处理。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; q [&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;]&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; = [&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;]&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fmt.Println(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]) &lt;span class=&#34;comment&#34;&gt;// 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;q = [...]&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;另外，当元素较多时，还可以用index到value的键值对形式声明，未声明的值为零值。下面的例子中，&lt;code&gt;r&lt;/code&gt;长度100，除了最后一个元素为-1之外，其余都为0.&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;r := [...]&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&#34;number&#34;&gt;99&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;若数组数组具有可比性，则数组也具有&lt;strong&gt;可比性&lt;/strong&gt;。另外，不同长度的数组是不同类型。&lt;code&gt;[4]int&lt;/code&gt;和&lt;code&gt;[3]int&lt;/code&gt;不是同一类型。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;crypto/sha256&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	c1 := sha256.Sum256(&lt;span class=&#34;string&#34;&gt;&amp;quot;x&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	c2 := sha256.Sum256(&lt;span class=&#34;string&#34;&gt;&amp;quot;X&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	fmt.Printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;\t\n&amp;quot;&lt;/span&gt;, c1 == c2)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Go中将数组作为参数传递时，&lt;strong&gt;传递的是复制的新数组，而不是传入数组的引用&lt;/strong&gt;，这是Go和其他语言不大一样的地方。当然可以通过传入数组指针的方式，实现在函数内修改数组内容。由于数组是定长的，在更多时候，函数参数使用slice类型传入。&lt;/p&gt;
&lt;h3 id=&#34;slice&#34;&gt;&lt;a href=&#34;#slice&#34; class=&#34;headerlink&#34; title=&#34;slice&#34;&gt;&lt;/a&gt;slice&lt;/h3&gt;&lt;p&gt;slice和array类型紧密相关，使用&lt;code&gt;[]T&lt;/code&gt;声明。每个slice的底层都基于一个array。slice只是一个指针指向array中的某一个元素作为开始，除此之外，它还有&lt;code&gt;len&lt;/code&gt;和&lt;code&gt;cap&lt;/code&gt;函数分别用来表示切片长度，和切片最大容量（从切片开始到底层array结尾）。&lt;/p&gt;
&lt;p&gt;因此不同slice可以共享同一个array，它们之间可以相互重叠。&lt;code&gt;s[i:j]&lt;/code&gt;是从创建slice的方式，遵从左闭右开原则，&lt;code&gt;i&lt;/code&gt;和&lt;code&gt;j&lt;/code&gt;均可省略，省略时分别表示0和数组最末尾元素。&lt;strong&gt;创建可以基于一个array变量或一个array指针或其他slice&lt;/strong&gt;。创建超过array范围会引起panic，只超过&lt;code&gt;len(s)&lt;/code&gt;则会拓展这个slice。因为string实际上是&lt;code&gt;[]byte&lt;/code&gt;切片，所以&lt;code&gt;s[i:j]&lt;/code&gt;和&lt;code&gt;substring&lt;/code&gt;是一个意思。&lt;/p&gt;
&lt;p&gt;从上面可以看到，slice即一个指向数组元素的指针，所以传递一个slice时，可以修改底层array的值。下面这个反转数组的函数不限数组长度：&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(s []&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i, j := &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(s)&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;; i &amp;lt; j; i, j = i+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, j&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		s[i], s[j] := s[j], s[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;s := []&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt; ,&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;reverse(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fmt.Println(s) &lt;span class=&#34;comment&#34;&gt;// [5 4 3 2 1]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上面的&lt;code&gt;s&lt;/code&gt;是一个切片字面量，和array的区别在于没有声明长度。这种写法实际上会生成以后面值为全部元素的数组，并把切片指向这个数组。类似地，还可以使用&lt;code&gt;make&lt;/code&gt;创建一个切片。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;([]T, &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;([]T, &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;cap&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;由于切片只是引用，从效率和可理解性上考虑，&lt;strong&gt;切片间不具有可比性&lt;/strong&gt;。不过切片可以和&lt;code&gt;nil&lt;/code&gt;比较，&lt;code&gt;nil&lt;/code&gt;表示空切片，而非“没有元素”的切片。不过Go中slice相关的函数对待这两种切片行为一样。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; s []&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;// s == nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;S = &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;// s == nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;s = []&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt;) &lt;span class=&#34;comment&#34;&gt;// s == nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;s = []&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;#123;&amp;#125; &lt;span class=&#34;comment&#34;&gt;// len(s) == 0, s != nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;append和copy&#34;&gt;&lt;a href=&#34;#append和copy&#34; class=&#34;headerlink&#34; title=&#34;append和copy&#34;&gt;&lt;/a&gt;&lt;code&gt;append&lt;/code&gt;和&lt;code&gt;copy&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;&lt;code&gt;append&lt;/code&gt;函数可以操作slice。如果append之后，slice长度超过了底层array的长度，&lt;code&gt;append&lt;/code&gt;会自动拓展底层array长度。另外，append不仅可以追加单个元素，还可以追加任意个元素，或解构后的slice。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; runes []&lt;span class=&#34;type&#34;&gt;rune&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; _, r := &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Hello, 世界&amp;quot;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	runes = &lt;span class=&#34;built_in&#34;&gt;append&lt;/span&gt;(runes, r)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fmt.Printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%q\n&amp;quot;&lt;/span&gt;, runes)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; x []&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x = &lt;span class=&#34;built_in&#34;&gt;append&lt;/span&gt;(x, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x = &lt;span class=&#34;built_in&#34;&gt;append&lt;/span&gt;(x, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x = &lt;span class=&#34;built_in&#34;&gt;append&lt;/span&gt;(x, x...)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在不借助&lt;code&gt;append&lt;/code&gt;实现类似&lt;code&gt;append&lt;/code&gt;功能时，就需要自己借助&lt;code&gt;cap(x)&lt;/code&gt;和&lt;code&gt;make&lt;/code&gt;完成底层array的长度扩充。如同下面的一段代码。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;appendInt&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(x []&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;, y ...&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; z []&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	zlen := &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(x) + &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(y)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; zlen &amp;lt;= &lt;span class=&#34;built_in&#34;&gt;cap&lt;/span&gt;(x) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		z = x[:zlen]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		zcap := zlen&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; zcap &amp;lt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; * &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(x) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			zcap := &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; * &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(x)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		z = &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;([]&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;, zlen, zcap)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;copy&lt;/span&gt;(z, x)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;copy&lt;/span&gt;(z[&lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(x)], y)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; z&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上面的&lt;code&gt;...&lt;/code&gt;表示剩余参数，&lt;/p&gt;
&lt;p&gt;借助&lt;code&gt;copy&lt;/code&gt;还能实现一些slice的原址操作。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;remove&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(slice []&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;, i &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; []&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;copy&lt;/span&gt;(slice[i:], slice[i+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; slice[:&lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(slice)&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;map&#34;&gt;&lt;a href=&#34;#map&#34; class=&#34;headerlink&#34; title=&#34;map&#34;&gt;&lt;/a&gt;map&lt;/h3&gt;&lt;p&gt;map即键值对，其中&lt;strong&gt;key要求具有可比较性&lt;/strong&gt;。map有两种构造方式：&lt;code&gt;make&lt;/code&gt;或字面量：&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ages := &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;map&lt;/span&gt;[&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;]&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ages := &lt;span class=&#34;keyword&#34;&gt;map&lt;/span&gt;[&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;]&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;Alice&amp;quot;&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;18&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;string&#34;&gt;&amp;quot;Bob&amp;quot;&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;27&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;map使用&lt;strong&gt;下标访问&lt;/strong&gt;，使用&lt;code&gt;delete&lt;/code&gt;删除键。另外，&lt;strong&gt;访问不存在的key时，值是&lt;code&gt;value&lt;/code&gt;类型的零值&lt;/strong&gt;。因此可以免去一些多余的初始化步骤。由于map的值并不是变量，所以不能用&lt;code&gt;&amp;amp;&lt;/code&gt;获取地址。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ages[&lt;span class=&#34;string&#34;&gt;&amp;quot;Cindy&amp;quot;&lt;/span&gt;] = &lt;span class=&#34;number&#34;&gt;23&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;delete&lt;/span&gt;(ages, &lt;span class=&#34;string&#34;&gt;&amp;quot;bob&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 新的key&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ages[&lt;span class=&#34;string&#34;&gt;&amp;quot;Dred&amp;quot;&lt;/span&gt;] += &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;// 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;_ := &amp;amp;ages[&lt;span class=&#34;string&#34;&gt;&amp;quot;Cindy&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;map在遍历时，顺序是随机的。因此如果需要确定顺序，需要事先手动排序。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;sort&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; names []&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; name := &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; ages &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	names = &lt;span class=&#34;built_in&#34;&gt;append&lt;/span&gt;(names, name)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sort.Strings(names)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; _, names := &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; names &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	fmt.Printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%s\t%d\n&amp;quot;&lt;/span&gt;, name, ages[name])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;map的&lt;code&gt;delete&lt;/code&gt;，&lt;code&gt;len&lt;/code&gt;，&lt;code&gt;range&lt;/code&gt;和取值操作都可以对零值&lt;code&gt;nil&lt;/code&gt;进行，但是存储到&lt;code&gt;nil&lt;/code&gt;map时会报错。由于访问map不存在的key会返回默认的零值，所以下标操作用第二个参数返回是否对应的key，*且参数通常命名&lt;code&gt;ok&lt;/code&gt;*。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; age, ok := ages[&lt;span class=&#34;string&#34;&gt;&amp;quot;Ed&amp;quot;&lt;/span&gt;]; !ok &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Go中没有&lt;code&gt;set&lt;/code&gt;类型，可以用&lt;code&gt;map[string]bool&lt;/code&gt;等价。当key可能不可比较时（如用slice做key），可以用额外的序列化使用。&lt;/p&gt;
&lt;h3 id=&#34;struct&#34;&gt;&lt;a href=&#34;#struct&#34; class=&#34;headerlink&#34; title=&#34;struct&#34;&gt;&lt;/a&gt;struct&lt;/h3&gt;&lt;p&gt;struct类似ts中的&lt;code&gt;interface&lt;/code&gt;。由&lt;strong&gt;零&lt;/strong&gt;或多个fields组成，每个field使用&lt;strong&gt;点&lt;/strong&gt;来访问。struct和field都是变量，所以可以用&lt;code&gt;&amp;amp;&lt;/code&gt;获取地址。对地址也可以使用点来访问field。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; Employee &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Id &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Name &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Address &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	DoB time.Time&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Position &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Salary &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; e Employee&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;e.Salary = &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;pos := &amp;amp;e.Position&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;*pos = &lt;span class=&#34;string&#34;&gt;&amp;quot;Senior &amp;quot;&lt;/span&gt; + *pos&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;相同类型的两个key可以&lt;strong&gt;在一起声明&lt;/strong&gt;。在Go的struct中，&lt;strong&gt;field的组合和排序都意味着不同的type&lt;/strong&gt;。和包一样，大写的field被导出可被访问，这也是Go的一种通用的设计。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; Employee2 &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Id &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Name, Address &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	DoB time.Time&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Position &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Salary &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;struct类型的field不能自指，但是允许包含自己类型的&lt;strong&gt;指针&lt;/strong&gt;，比如最经典的二叉树场景。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; tree &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	value &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	left, right *tree&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;struct的零值由各field零值组成，不是nil，没有field的空struct写作&lt;code&gt;struct&amp;#123;&amp;#125;&lt;/code&gt;。不携带信息，但可能在有些地方会有用。&lt;/p&gt;
&lt;h4 id=&#34;字面量struct&#34;&gt;&lt;a href=&#34;#字面量struct&#34; class=&#34;headerlink&#34; title=&#34;字面量struct&#34;&gt;&lt;/a&gt;字面量struct&lt;/h4&gt;&lt;p&gt;两种声明方式：&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; Point &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt;&amp;#123; X, Y &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;p := Point&amp;#123;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;anim := git.GIF&amp;#123;LoopCount: nframes&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;将所有fields&lt;strong&gt;按顺序&lt;/strong&gt;声明，struct的fields有任何改动都需要修改，所以通常只在小规模struct以及包内部使用&lt;/li&gt;
&lt;li&gt;使用键值对方式声明，可以省略field，且对顺序不敏感&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，在Go中，所有的函数参数传递都是&lt;strong&gt;传值&lt;/strong&gt;。因此，如果函数内部需要修改struct时，不能传递struct类型，而需要传递指针。由于struct传递指针的场景比较多，所以提供了类似&lt;code&gt;p := &amp;amp;Point&amp;#123;1, 1&amp;#125;&lt;/code&gt;的简写语法糖。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;AwardAnnualPrize&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(e *Employee)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	e.Salary = e.Salary * &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; + &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;如果struct的所有field都具有可比性，则struct也具有可比性，可以比较是否相等。因此，struct在有些情况可以用来作为map的key。&lt;/p&gt;
&lt;h4 id=&#34;struct嵌入与匿名域&#34;&gt;&lt;a href=&#34;#struct嵌入与匿名域&#34; class=&#34;headerlink&#34; title=&#34;struct嵌入与匿名域&#34;&gt;&lt;/a&gt;struct嵌入与匿名域&lt;/h4&gt;&lt;p&gt;匿名域用于struct之间的组合，可以达到&lt;em&gt;类似&lt;/em&gt;类继承的效果。在struct声明中，如果field类型是有名称的，则可以忽略掉field名，得到一个匿名域。匿名域类型或类型内的各field对应用struct可见。有点类似TS中&lt;code&gt;interface&lt;/code&gt;的&lt;code&gt;extends&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; Point &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	X, Y &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; Circle &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Point&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Radius: &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; Wheel &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Circle&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Spokes &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; w Wheel&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;w.X = &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;w.Y = &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;w.Radius = &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;w.Spokes = &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;换种说法，匿名域就是向下访问时可以省去不写的中间域。即使中间域类型是首字母小写不对外可见的，只要剩下域对外可见也可以访问。struct这种&lt;strong&gt;组合&lt;/strong&gt;思想是Go在面向对象上的核心。&lt;/p&gt;
&lt;h3 id=&#34;JSON&#34;&gt;&lt;a href=&#34;#JSON&#34; class=&#34;headerlink&#34; title=&#34;JSON&#34;&gt;&lt;/a&gt;JSON&lt;/h3&gt;&lt;p&gt;编解码JSON数据的方法都位于&lt;code&gt;encoding/json&lt;/code&gt;，其中编解码整块数据的函数分别为&lt;code&gt;json.Marshal&lt;/code&gt;和&lt;code&gt;json.Unmarshal&lt;/code&gt;，前者传入Go数据结构，返回压缩后的JSON字符串，使用&lt;code&gt;json.MarshalIndent&lt;/code&gt;可以返回美化后的JSON字符串。编码时，&lt;strong&gt;只有被导出的域才会出现在JSON字符串中&lt;/strong&gt;。且field之后的&lt;em&gt;field tag&lt;/em&gt;可以作为metadata修改JSON行为，如指定被JSON字符串化之后的key名。或用下面的&lt;code&gt;omitempty&lt;/code&gt;忽略掉零值的key。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; Movie &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Title &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Year &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;`json:&amp;quot;released&amp;quot;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Color &lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;`json:&amp;quot;color,omitempty&amp;quot;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Actors []&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;相反，在解码JSON数据时，需要显式声明struct结构来接收JSON数据。&lt;code&gt;json.Unmarshal&lt;/code&gt;方法的第二个入参即struct的指针。在解析JSON时，对key是不区分大小写的，因此只需要对&lt;code&gt;a_b&lt;/code&gt;类型的JSON key指定&lt;em&gt;field tag&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;对于stream格式的JSON数据，使用&lt;code&gt;json.Encode&lt;/code&gt;和&lt;code&gt;json.Decode&lt;/code&gt;编解码。&lt;/p&gt;
&lt;h3 id=&#34;HTML和文本模板&#34;&gt;&lt;a href=&#34;#HTML和文本模板&#34; class=&#34;headerlink&#34; title=&#34;HTML和文本模板&#34;&gt;&lt;/a&gt;HTML和文本模板&lt;/h3&gt;&lt;p&gt;&lt;code&gt;text/template&lt;/code&gt;和&lt;code&gt;html/template&lt;/code&gt;用于文本模板和HTML模板。它们都使用双花括号包裹带有逻辑的简单语句。其中，&lt;code&gt;html/template&lt;/code&gt;还会默认对文本做escape脱敏处理（对&lt;code&gt;template.HTML&lt;/code&gt;不会escape）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;template.New&lt;/code&gt;创建模板&lt;/li&gt;
&lt;li&gt;&lt;code&gt;template.Funcs&lt;/code&gt;向模板内插入函数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;template.Must&lt;/code&gt;保证模板有内容&lt;/li&gt;
&lt;li&gt;&lt;code&gt;template.Parse&lt;/code&gt;解析模板&lt;/li&gt;
&lt;li&gt;使用模板的&lt;code&gt;Execute&lt;/code&gt;方法生成解析后内容&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; report = template.Must(template.New(&lt;span class=&#34;string&#34;&gt;&amp;quot;issueList&amp;quot;&lt;/span&gt;)).Funcs(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	template.FuncMap(&lt;span class=&#34;string&#34;&gt;&amp;quot;daysAgo&amp;quot;&lt;/span&gt;: daysAgo)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;).Parse(templ)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	result, err := github.SearchIssues(os.Args[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; err != &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		log.Fatal(err)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; err := report.Execute(os.Stdout, result); err != &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		log.Fatal(err)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;函数&#34;&gt;&lt;a href=&#34;#函数&#34; class=&#34;headerlink&#34; title=&#34;函数&#34;&gt;&lt;/a&gt;函数&lt;/h2&gt;&lt;h3 id=&#34;声明-1&#34;&gt;&lt;a href=&#34;#声明-1&#34; class=&#34;headerlink&#34; title=&#34;声明&#34;&gt;&lt;/a&gt;声明&lt;/h3&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;add&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;(x, y &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; (z &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;) &amp;#123; z = x - y; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(x &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;, _ &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; x &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;zero&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;相同类型入参可以聚合&lt;code&gt;x, y int&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;返回值为多个时，需要用&lt;code&gt;()&lt;/code&gt;包裹&lt;/li&gt;
&lt;li&gt;返回值也可以给予变量名，这种情况下，相当于提前为返回值声明变量&lt;/li&gt;
&lt;li&gt;入参是&lt;strong&gt;传值&lt;/strong&gt;，即入参会复制一份传递给函数内部，只有像slice、map、function、channel这种引用实现的类型在函数内改变会影响外部值&lt;/li&gt;
&lt;li&gt;只有函数声明，没有函数体的函数表示函数由其他语言实现，如&lt;code&gt;func Sin(x float64) float64&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;递归&#34;&gt;&lt;a href=&#34;#递归&#34; class=&#34;headerlink&#34; title=&#34;递归&#34;&gt;&lt;/a&gt;递归&lt;/h3&gt;&lt;p&gt;Go的递归和其他语言无异。不同的是，传统语言的函数递归借助&lt;strong&gt;定长的栈&lt;/strong&gt;实现，大小从64KB到2MB不等，而Go使用&lt;strong&gt;变长栈&lt;/strong&gt;实现，避免的栈溢出的情况。&lt;/p&gt;
&lt;h3 id=&#34;多返回值&#34;&gt;&lt;a href=&#34;#多返回值&#34; class=&#34;headerlink&#34; title=&#34;多返回值&#34;&gt;&lt;/a&gt;多返回值&lt;/h3&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Size&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(rect image.Rectangle)&lt;/span&gt;&lt;/span&gt; (width, height &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Go支持同时返回多个返回值。同类型返回值可以压缩，还可以声明有名称的返回值。在多返回值时，还可以直接传递给需要多个入参的函数，&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;log.Println(findLinks(url))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 等同于&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;links, err := findLinks(url)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;log.Println(links, err)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;返回值有名称时，会&lt;strong&gt;作为函数体内最外层变量出现&lt;/strong&gt;。因此，不需要显示&lt;code&gt;return&lt;/code&gt;返回值，这种现象也称为“裸返回”（&lt;em&gt;bare return&lt;/em&gt;）。由于裸返回时，&lt;code&gt;return&lt;/code&gt;后不会跟随返回值，不利于代码可读性，所以只在需要的时候使用它。&lt;/p&gt;
&lt;h3 id=&#34;错误&#34;&gt;&lt;a href=&#34;#错误&#34; class=&#34;headerlink&#34; title=&#34;错误&#34;&gt;&lt;/a&gt;错误&lt;/h3&gt;&lt;p&gt;函数&lt;em&gt;返回&lt;/em&gt;错误在Go中是普遍现象。有时，错误类型只需要有1种，这时通常用&lt;code&gt;bool&lt;/code&gt;类型的&lt;code&gt;ok&lt;/code&gt;表示。如对&lt;code&gt;map&lt;/code&gt;类型的变量的访问。但大多数时候，错误原因可能要有比较多种，这时可以用&lt;code&gt;error&lt;/code&gt;类型的&lt;code&gt;err&lt;/code&gt;表示。&lt;/p&gt;
&lt;p&gt;在Go中较少使用exception表示失败（尽管Go也有exception机制），Go只在真正的bug处，才使用异常打印stack trace信息。在Go中较常出现的是普通的error类型，它只作为普通控制流的一部分。&lt;/p&gt;
&lt;h4 id=&#34;处理策略&#34;&gt;&lt;a href=&#34;#处理策略&#34; class=&#34;headerlink&#34; title=&#34;处理策略&#34;&gt;&lt;/a&gt;处理策略&lt;/h4&gt;&lt;p&gt;error处理由调用方负责，有5种策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;向上传递&lt;/strong&gt;，在没有error时，可以用&lt;code&gt;fmt.Errorf&lt;/code&gt;制造一个自定义错误信息的错误。Go建议仔细设计错误信息内容，&lt;strong&gt;不使用大写字母，不使用换行&lt;/strong&gt;。建议函数的每一层补充上更多信息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;重试&lt;/strong&gt;，在有些场景下，如测试服务端连接&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;退出&lt;/strong&gt;，严重问题时，可以用&lt;code&gt;os.Exit(1)&lt;/code&gt;退出，或者用&lt;code&gt;log.Fatalf&lt;/code&gt;打印错误信息后退出&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;打印日志后继续&lt;/strong&gt;，对于简单问题，可以打印日志后继续流程&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;忽略&lt;/strong&gt;，在特殊情况下，可以直接忽略，如错误确实不会影响功能实现&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go建议是使用函数时考虑错误处理的场景。&lt;/p&gt;
&lt;h4 id=&#34;EOF&#34;&gt;&lt;a href=&#34;#EOF&#34; class=&#34;headerlink&#34; title=&#34;EOF&#34;&gt;&lt;/a&gt;EOF&lt;/h4&gt;&lt;p&gt;EOF（End Of File）是一种特殊的错误类型，&lt;code&gt;io.EOF&lt;/code&gt;表示输入流没有更多内容了。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;in := bufio.NewReader(os.Stdin)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    r, _, err := is.ReadRune()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; err == io.EOF &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;作为值的函数&#34;&gt;&lt;a href=&#34;#作为值的函数&#34; class=&#34;headerlink&#34; title=&#34;作为值的函数&#34;&gt;&lt;/a&gt;作为值的函数&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;这一章很类似JS或TS&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Go中函数是&lt;em&gt;一级成员&lt;/em&gt;。这意味着，它可以作为一种类型，传递给变量、入参或者返回，就像其他值的类型一样。函数是一种引用类型，所以可以为&lt;code&gt;nil&lt;/code&gt;，但是&lt;strong&gt;执行&lt;code&gt;nil&lt;/code&gt;会导致panic&lt;/strong&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; f &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;f(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;) &lt;span class=&#34;comment&#34;&gt;// call of nil panic&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;再次基础上，就可以对函数做更灵活而精准的设计，拆分函数关注点和抽象层次。构造出更灵活的程序。以&lt;code&gt;strings.Map&lt;/code&gt;为例&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;add1&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(r &lt;span class=&#34;type&#34;&gt;rune&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;rune&lt;/span&gt; &amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; r + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fmt.Println(strings.Map(add1, &lt;span class=&#34;string&#34;&gt;&amp;quot;Admin&amp;quot;&lt;/span&gt;)) &lt;span class=&#34;comment&#34;&gt;// Benjo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;匿名函数&#34;&gt;&lt;a href=&#34;#匿名函数&#34; class=&#34;headerlink&#34; title=&#34;匿名函数&#34;&gt;&lt;/a&gt;匿名函数&lt;/h4&gt;&lt;p&gt;Go中只能在包级别声明有名函数，而匿名函数可以在块作用域、函数作用域内声明。因此，&lt;strong&gt;高阶函数&lt;/strong&gt;、&lt;strong&gt;闭包&lt;/strong&gt;等概念Go中也有。由于这些概念JS中也有，这里就不再赘述。&lt;/p&gt;
&lt;h3 id=&#34;循环变量捕获&#34;&gt;&lt;a href=&#34;#循环变量捕获&#34; class=&#34;headerlink&#34; title=&#34;循环变量捕获&#34;&gt;&lt;/a&gt;循环变量捕获&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;JS也有类似问题，不过原因不同&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 一段会有问题的代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; rmdirs []&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; _, dir := &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; tempDirs() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    os.MkdirAll(dir, &lt;span class=&#34;number&#34;&gt;0755&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    rmdirs = &lt;span class=&#34;built_in&#34;&gt;append&lt;/span&gt;(rmdirs, &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        os.RemoveAll(dir)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上面的for循环中，循环变量&lt;code&gt;dir&lt;/code&gt;在&lt;code&gt;append&lt;/code&gt;的回调中有使用，我们回忆一下，for循环中循环变量位于for语句块外，在整个for循环后才销毁。所以这会导致每一个回调执行时，dir都被更新为最新的值。将dir在循环体内再次赋值即可。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; rmdirs []&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; _, dir := &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; tempDirs() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 可以运行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    dir := dir&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    os.MkdirAll(dir, &lt;span class=&#34;number&#34;&gt;0755&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    rmdirs = &lt;span class=&#34;built_in&#34;&gt;append&lt;/span&gt;(rmdirs, &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        os.RemoveAll(dir)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;变长参数&#34;&gt;&lt;a href=&#34;#变长参数&#34; class=&#34;headerlink&#34; title=&#34;变长参数&#34;&gt;&lt;/a&gt;变长参数&lt;/h3&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(vals ...&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    total := &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; _, val := &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; vals &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        total += val&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; total&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;类似JS中的剩余参数，Go中也使用&lt;code&gt;rest ...type&lt;/code&gt;表示函数的剩余入参。rest需要声明类型，rest为slice类型。要注意的是，这种函数和直接传入一个slice参数的函数类型并不一样。另外，在剩余参数类型不明确时，可以用&lt;code&gt;interface&amp;#123;&amp;#125;&lt;/code&gt;表示。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 在变量后使用`...`表示解构&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;val := []&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&amp;#123;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fmt.Println(sum(values...))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;延迟函数调用（Deferred-Function-Calls）&#34;&gt;&lt;a href=&#34;#延迟函数调用（Deferred-Function-Calls）&#34; class=&#34;headerlink&#34; title=&#34;延迟函数调用（Deferred Function Calls）&#34;&gt;&lt;/a&gt;延迟函数调用（Deferred Function Calls）&lt;/h3&gt;&lt;p&gt;在语句前加上&lt;code&gt;defer&lt;/code&gt;标识符，会让&lt;code&gt;defer&lt;/code&gt;后的&lt;strong&gt;函数调用&lt;/strong&gt;推迟到所在函数的**&lt;code&gt;return&lt;/code&gt;之后**执行。&lt;code&gt;defer&lt;/code&gt;后的函数和表达式会立即求值。&lt;code&gt;defer&lt;/code&gt;的函数调用在函数panic后仍然会被调用。可以用来执行一些释放资源的操作，如以下场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;open和close&lt;/li&gt;
&lt;li&gt;connect和disconnect&lt;/li&gt;
&lt;li&gt;lock和unlock&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; mu sync.Mutex&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; m = &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;map&lt;/span&gt;[&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;]&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;lookup&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(key &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    mu.Lock()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;defer&lt;/span&gt; mu.Unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; m[key]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;最合适的使用时机是在刚刚获得资源之后&lt;/strong&gt;。还可以利用defer完成&lt;em&gt;进入&lt;/em&gt;和&lt;em&gt;离开&lt;/em&gt;函数的成对操作做一些调试。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;bigSlowOperation&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;defer&lt;/span&gt; trace(&lt;span class=&#34;string&#34;&gt;&amp;quot;bigSlowOperation&amp;quot;&lt;/span&gt;)()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    time.Sleep(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt; * time.Second)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;trace&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(msg &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    start := time.Now()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    log.Printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;enter %s&amp;quot;&lt;/span&gt;, msg)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        log.Printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;exit %s (%s)&amp;quot;&lt;/span&gt;, msg, time.Since(start))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;由于defer在函数最后执行的特点，甚至可以在defer中&lt;strong&gt;获取和修改函数返回值&lt;/strong&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;triple&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(x &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; (result &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;defer&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123; result += x &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; double(x)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fmt.Println(triple(&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;)) &lt;span class=&#34;comment&#34;&gt;// &amp;quot;12&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;同时也由于defer的这个特点，在for循环中使用defer一定要谨慎。&lt;/p&gt;
&lt;h3 id=&#34;panic&#34;&gt;&lt;a href=&#34;#panic&#34; class=&#34;headerlink&#34; title=&#34;panic&#34;&gt;&lt;/a&gt;panic&lt;/h3&gt;&lt;p&gt;Go中的panic类似于其他语言的exception，它一般代表程序中存在bug和不应该出现的情况。panic后，正常程序执行停止，&lt;strong&gt;defer的函数被倒序执行&lt;/strong&gt;，然后函数崩溃并带有错误信息。&lt;/p&gt;
&lt;p&gt;除了系统触发的panic，还可以直接通过&lt;code&gt;panic(&amp;quot;certain message&amp;quot;)&lt;/code&gt;手动触发一个panic。一些包中以&lt;strong&gt;Must&lt;/strong&gt;开头的API通常表示，在不符合规范的时候API会panic。&lt;strong&gt;建议只在内部可信任环境下使用这种API&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;recover&#34;&gt;&lt;a href=&#34;#recover&#34; class=&#34;headerlink&#34; title=&#34;recover&#34;&gt;&lt;/a&gt;recover&lt;/h3&gt;&lt;p&gt;就像其他语言中的try catch一样，Go中的panic同样有机制去妥善处理。Go有内置的&lt;code&gt;recover&lt;/code&gt;函数，可以用于在panic中恢复。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;recover&lt;/code&gt;需要在defer的函数中使用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;recover&lt;/code&gt;函数会返回panic的value，在没有panic的情况下，该函数返回&lt;code&gt;nil&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面是一些使用&lt;code&gt;recover&lt;/code&gt;的建议：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不要毫无条件地从panic中recover，这可能会掩盖一些潜在的bug或资源泄露&lt;/li&gt;
&lt;li&gt;在panic后，可以使用&lt;code&gt;runtime.Stack&lt;/code&gt;这样的方法打印一下错误的详细信息，再recover&lt;/li&gt;
&lt;li&gt;可以定义一些外部不可见的类型，在调用panic时传入，在recover返回时判断类型，从而做到针对特定情况panic执行recover，其余情况仍旧panic&lt;/li&gt;
&lt;li&gt;对于预期中的error不使用panic&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;soleTitle&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(doc *html.Node)&lt;/span&gt;&lt;/span&gt; (title &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;, err &lt;span class=&#34;type&#34;&gt;error&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; bailout &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;defer&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt; p := &lt;span class=&#34;built_in&#34;&gt;recover&lt;/span&gt;(); p &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// no panic&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; bailout&amp;#123;&amp;#125;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            err = fmt.Errorf(&lt;span class=&#34;string&#34;&gt;&amp;quot;multiple titles&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;panic&lt;/span&gt;(p) &lt;span class=&#34;comment&#34;&gt;// resume panic&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;方法&#34;&gt;&lt;a href=&#34;#方法&#34; class=&#34;headerlink&#34; title=&#34;方法&#34;&gt;&lt;/a&gt;方法&lt;/h2&gt;&lt;p&gt;Go也有OOP的特性，即&lt;em&gt;对象&lt;/em&gt;上具有&lt;em&gt;方法&lt;/em&gt;，方法需要关联在一个特定类型上。&lt;/p&gt;
&lt;h3 id=&#34;声明-2&#34;&gt;&lt;a href=&#34;#声明-2&#34; class=&#34;headerlink&#34; title=&#34;声明&#34;&gt;&lt;/a&gt;声明&lt;/h3&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;math&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; Point &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt;&amp;#123; X, Y &lt;span class=&#34;type&#34;&gt;float64&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;(p Point)&lt;/span&gt;&lt;/span&gt; Distance(q Point) &lt;span class=&#34;type&#34;&gt;float64&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; math.Hypot(q.X-p.X, q.Y-p.Y)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;声明里，在普通声明的函数名前，增加函数绑定的类型receiver，即完成了方法的声明。Go中没有&lt;code&gt;this&lt;/code&gt;和&lt;code&gt;self&lt;/code&gt;这样的保留字。类型receiver中的变量，即方法可以访问的类型变量。变量名由于会比较常用，所以通常取类型首字母。&lt;/p&gt;
&lt;p&gt;其他方法的行为类似其他OOP语言：诸如方法名和函数名不在一个命名空间，所以可以重名；方法名之间不能重名；&lt;strong&gt;方法名不能和属性名相同&lt;/strong&gt;。由于Go中声明命名类型比较自由，而方法可以很方便绑定在命名类型上，所以可以给基础类型，如数字、字符串等，增加新方法。&lt;/p&gt;
&lt;h3 id=&#34;指针receiver&#34;&gt;&lt;a href=&#34;#指针receiver&#34; class=&#34;headerlink&#34; title=&#34;指针receiver&#34;&gt;&lt;/a&gt;指针receiver&lt;/h3&gt;&lt;p&gt;上面提到，访问方法需要一个receiver。除了变量本身，指针也可以作为receiver。在Go中函数入参都是传值的，也就是传入值的复制。所以除了map、slice这种引用类型，其余类型的值在方法内改变并不会影响到外部。如果需要方法改变receiver本身的话，可以指定将方法绑定在指针类型上。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;(p *Point)&lt;/span&gt;&lt;/span&gt; ScaleBy(factor &lt;span class=&#34;type&#34;&gt;float64&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    p.X *= factor&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    p.Y *= factor&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;t := &amp;amp;Point&amp;#123;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;r.ScaleBy(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fmt.Println(*r)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;通常会规定，如果类型上有方法是指针类型的receiver，所有的方法都需要有一个指针类型receiver。类似struct一节介绍的，如果变量具有类型&lt;code&gt;T&lt;/code&gt;，而方法的receiver是&lt;code&gt;*T&lt;/code&gt;，我们可以直接使用简写的&lt;code&gt;p.ScaleBy(2)&lt;/code&gt;而不需要写成&lt;code&gt;(&amp;amp;p).ScaleBy(2)&lt;/code&gt;。相反地，receiver要求类型&lt;code&gt;T&lt;/code&gt;，变量传入&lt;code&gt;*T&lt;/code&gt;也是可以的。&lt;/p&gt;
&lt;p&gt;但是，直接将字面量传入给指针类型的receiver是不允许的，如&lt;code&gt;Point&amp;#123;1, 2&amp;#125;.ScaleBy(2)&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;Nil是合法的Receiver&#34;&gt;&lt;a href=&#34;#Nil是合法的Receiver&#34; class=&#34;headerlink&#34; title=&#34;Nil是合法的Receiver&#34;&gt;&lt;/a&gt;Nil是合法的Receiver&lt;/h3&gt;&lt;p&gt;Go中，&lt;code&gt;nil&lt;/code&gt;在很多时候是合法的零值。同样也可以作为receiver。当然在你的命名类型中，最好对合法的&lt;code&gt;nil&lt;/code&gt;类型加以说明。Go的内置类型和操作，如slice，map、struct、append、make等也可以正常地处理&lt;code&gt;nil&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;组合和struct-embedding&#34;&gt;&lt;a href=&#34;#组合和struct-embedding&#34; class=&#34;headerlink&#34; title=&#34;组合和struct embedding&#34;&gt;&lt;/a&gt;组合和struct embedding&lt;/h3&gt;&lt;p&gt;在此前的struct一节中，已经介绍了Go的struct embedding设计。这里结合方法继续讨论一下。首先我们先回忆下struct embedding是啥。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;image/color&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; Point &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt;&amp;#123; X, Y &lt;span class=&#34;type&#34;&gt;float64&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; ColoredPoint &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Point&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Color color.RGBA&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; cp ColoredPoint&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cp.X = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fmt.Println(cp.Point.X)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cp.ScaleBy(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fmt.Print;n(cp.Y)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;匿名的field会直接将field类型中的&lt;strong&gt;成员和方法&lt;/strong&gt;都&lt;strong&gt;组合&lt;/strong&gt;（composite）进当前类型中（和TS中的extends有点像）。如上面的&lt;code&gt;ColoredPoint&lt;/code&gt;就直接拥有了&lt;code&gt;Point&lt;/code&gt;的&lt;code&gt;Distance&lt;/code&gt;和&lt;code&gt;ScaleBy&lt;/code&gt;功能（当然也可以访问Point）。Go更希望用&lt;strong&gt;组合&lt;/strong&gt;（composition）而非&lt;strong&gt;派生&lt;/strong&gt;（derivation）构造更复杂的类型。比如，上面的&lt;code&gt;ColoredPoint&lt;/code&gt;并不是一个&lt;code&gt;Point&lt;/code&gt;，并不能当做一个Point访问和使用。&lt;/p&gt;
&lt;p&gt;匿名field如果是指针类型，除了上面的特性，还能实现让两个变量共享一个底层的结构。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; ColoredPoint &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    *Point&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Color color.RGBA&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;p := ColoredPoint&amp;#123;&amp;amp;Point&amp;#123;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&amp;#125;, red&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;q := ColoredPoint&amp;#123;&amp;amp;Point&amp;#123;&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&amp;#125;, blue&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;p.Point = q.Point&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在访问receiver上的方法时，Go首先会去直接声明的field中寻找，然后再去embedded的field中寻找，再向下寻找。方法只能在命名类型和其指针类型上定义，但是借助struct embedding也可以实现，将&lt;strong&gt;功能聚合&lt;/strong&gt;在一起。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    mu sync.Mutex&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    mapping = &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;map&lt;/span&gt;[&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;]&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Lookup&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(key &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    mu.Lock()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    v := mapping[key]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    mu.Unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; v&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 重构后&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; cache = &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sync.Mutex&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    mapping &lt;span class=&#34;keyword&#34;&gt;map&lt;/span&gt;[&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;]&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    mapping: &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;map&lt;/span&gt;[&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;]&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Lookup&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(key &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cache.Lock()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    v := cache.mapping[key]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cache.Unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; v&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上面重写之后的代码表现力明显更好了。&lt;/p&gt;
&lt;h3 id=&#34;方法值（method-value）和方法表达式（method-expression）&#34;&gt;&lt;a href=&#34;#方法值（method-value）和方法表达式（method-expression）&#34; class=&#34;headerlink&#34; title=&#34;方法值（method value）和方法表达式（method expression）&#34;&gt;&lt;/a&gt;方法值（method value）和方法表达式（method expression）&lt;/h3&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;p := Point&amp;#123;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;q := Point&amp;#123;&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;distanceFromP := p.Distance&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fmt.Println(distanceFromP(q))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;time.AfterFunc(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt; * time.Second(), r.Launch)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;p.Distance&lt;/code&gt;会得到一个method value，它是一个绑定到了特定receiver上的一个方法，本身也是一个函数。可以当做函数类型的值用作入参或返回值。这个和JS还比较像。&lt;/p&gt;
&lt;p&gt;类似的，Go中还有method expression的概念。即直接用类型名加点（&lt;code&gt;.&lt;/code&gt;）访问方法得到一个method expression。它也是一个函数，可以&lt;strong&gt;看做是一个没有绑定receiver的方法&lt;/strong&gt;。调用函数时，传入的第一个入参会当做receiver，后续的作为方法入参。这个特性在需要根据情况灵活选择方法时很好用。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;(p Point)&lt;/span&gt;&lt;/span&gt; Add(q Point) Point &amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; Point&amp;#123;p.X + q.X, p.Y + q.Y&amp;#125; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;(p Point)&lt;/span&gt;&lt;/span&gt; Sub(q Point) Point &amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; Point&amp;#123;p.X - q.X, p.Y - q.Y&amp;#125; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; path []Point&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;(path Path)&lt;/span&gt;&lt;/span&gt; TranslateBy(offset Point, add &lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; op &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(p, q Point)&lt;/span&gt;&lt;/span&gt; Point&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; add &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        op = Point.Add&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        op = Point.Sub&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i := &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; path &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        path[i] = op(path[i], offset)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;一个实例：bitset&#34;&gt;&lt;a href=&#34;#一个实例：bitset&#34; class=&#34;headerlink&#34; title=&#34;一个实例：bitset&#34;&gt;&lt;/a&gt;一个实例：bitset&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bytes.Buffer&lt;/code&gt;经常用来拼接字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fmt&lt;/code&gt;的print打印字符串时会调用变量的&lt;code&gt;String&lt;/code&gt;方法&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;封装&#34;&gt;&lt;a href=&#34;#封装&#34; class=&#34;headerlink&#34; title=&#34;封装&#34;&gt;&lt;/a&gt;封装&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;首先，Go的封装细粒度只到package一层，package内不控制可见性&lt;/strong&gt;。所以当你想要控制可见性时，需要用拆分package实现。&lt;/p&gt;
&lt;p&gt;封装用来掩盖不需要像使用者展示的信息和细节。Go中唯一用来控制可见性的手段是一个&lt;strong&gt;大小写约定&lt;/strong&gt;：大写表示从包中导出，小写表示包内可见，对于struct中的field以及类型的method也是如此（包外访问不了，包内随便访问）。通常来讲，&lt;strong&gt;当需要封装对象时，我们都会使用struct&lt;/strong&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 建议&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; IntSet &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    words []&lt;span class=&#34;type&#34;&gt;uint64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 不建议&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; IntSet []&lt;span class=&#34;type&#34;&gt;uint64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;使用struct封装本来就很简单的类型有以下几个原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用方无法修改对象值，这样只用查阅更少的声明，就能得到对象值大致的可能范围&lt;/li&gt;
&lt;li&gt;对使用方掩盖实现细节，可以避免让使用方依赖那些可能改变的内容，也给开发者重构空间，开发者可以在不改变API兼容性的情况下灵活调整内部实现&lt;/li&gt;
&lt;li&gt;避免使用方任意修改对象值，造成更多边缘情况，提高程序编写难度和程序不稳定性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有时，封装也会暴露出一些&lt;strong&gt;getter&lt;/strong&gt;和&lt;strong&gt;setter&lt;/strong&gt;。通常命名上，会直接使用field的首字母大写形式，省去不必要的&lt;code&gt;Get&lt;/code&gt;，&lt;code&gt;Fetch&lt;/code&gt;，&lt;code&gt;Lookup&lt;/code&gt;前缀。实际上，Go并不禁止导出field，只是在有些情况下，导出field会影响代码可靠性。&lt;/p&gt;
&lt;p&gt;封装并不总是必要的。有时，底层数据结构是目标数据结构的&lt;strong&gt;充要表示&lt;/strong&gt;，不多不少，场景变数不多，这时可以不用struct封装。但是，像IntSet这种，实现细节变数多，程序实现稳定性低，需要被保护起来，避免影响使用者。从而要采取封装的方式，把那些变数变得“不透明”。&lt;/p&gt;
&lt;h2 id=&#34;接口（interface）&#34;&gt;&lt;a href=&#34;#接口（interface）&#34; class=&#34;headerlink&#34; title=&#34;接口（interface）&#34;&gt;&lt;/a&gt;接口（interface）&lt;/h2&gt;&lt;p&gt;如其他OOP语言一样，Go中也有用于标识抽象类型的接口描述。不同的是，Go中的接口都是&lt;strong&gt;隐式&lt;/strong&gt;满足的，松耦合。&lt;/p&gt;
&lt;h3 id=&#34;作为约定的接口&#34;&gt;&lt;a href=&#34;#作为约定的接口&#34; class=&#34;headerlink&#34; title=&#34;作为约定的接口&#34;&gt;&lt;/a&gt;作为约定的接口&lt;/h3&gt;&lt;p&gt;之前介绍过的所有类型都是&lt;strong&gt;具体类型&lt;/strong&gt;（concrete type），具体类型指数据表示和行为实现在类型确定后，就已一清二楚。为了保证语言灵活性，Go中还有&lt;strong&gt;接口类型&lt;/strong&gt;（interface type）。这种类型不暴露内在结构和实现细节，而是给出接口输入输出，作为一种&lt;strong&gt;约定&lt;/strong&gt;交由具体实现方完成，从而实现依赖反转（DI）。这一概念的设计上和其他OOP语言无二。不过在使用上，Go并不要求实现方明确依赖关系，只需实现约定即可。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; fmt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Fprintf&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(w io.Writer, format &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;, args ...&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;)&lt;/span&gt;&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;type&#34;&gt;error&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(format &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;, args ...&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;)&lt;/span&gt;&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;type&#34;&gt;error&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; Fprintf(os.Stdout, format, args...)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Sprintf&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(format &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;, args ...&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &amp;#123;&amp;#125;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; buf bytes.Buffer&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Fprintf(&amp;amp;buf, format, args...)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; buf.String()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; io&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; Writer &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...comments&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Write(p []&lt;span class=&#34;type&#34;&gt;byte&lt;/span&gt;) (n &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;, err &lt;span class=&#34;type&#34;&gt;error&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;同样的，实现&lt;code&gt;String&lt;/code&gt;方法也让类型隐式满足了&lt;code&gt;fmt.Stringer&lt;/code&gt;的定义。Go中单方法interface的命名，通常以动词的名词形态为主。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; fmt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; Stringer &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    String() &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;接口中也有类似struct embedding的&lt;strong&gt;嵌入式写法&lt;/strong&gt;，简化interface的组合成本。另外，interface中方法的顺序不影响interface类型。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; io&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; Reader &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Read(p []&lt;span class=&#34;type&#34;&gt;byte&lt;/span&gt;) (n &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;, err &lt;span class=&#34;type&#34;&gt;error&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; Closer &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Close() &lt;span class=&#34;type&#34;&gt;error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; ReadWriter &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Reader&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Writer&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;接口的满足&#34;&gt;&lt;a href=&#34;#接口的满足&#34; class=&#34;headerlink&#34; title=&#34;接口的满足&#34;&gt;&lt;/a&gt;接口的满足&lt;/h3&gt;&lt;p&gt;Go中变量可以是接口类型，在给接口类型变量赋值时，需要检查值的方法是否满足了接口的类型定义，这一点和其他OOP语言相似。要注意，尽管Go有将变量&lt;code&gt;T&lt;/code&gt;转成&lt;code&gt;*T&lt;/code&gt;的隐式转换，但是类型&lt;code&gt;T&lt;/code&gt;的方法和&lt;code&gt;*T&lt;/code&gt;的方法receiver并不同。而通常具体类型中会在接口声明的方法中做一些写操作，因而指定receiver为指针类型，这有可能会导致无法满足接口定义。&lt;/p&gt;
&lt;p&gt;接口覆盖了其包裹的内部类型，所以，&lt;strong&gt;即使内部类型满足其他方法，赋值给接口类型后，也只能方法接口拥有的方法&lt;/strong&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; w io.Writer&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;w = os.Stdout&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;w.Write([]&lt;span class=&#34;type&#34;&gt;byte&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;)) &lt;span class=&#34;comment&#34;&gt;// OK&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;w.Close() &lt;span class=&#34;comment&#34;&gt;// compile error: io.Writer lacks Close method&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Go中还有一个通用的不可或缺的类型&lt;code&gt;interface&amp;#123;&amp;#125;&lt;/code&gt;它表示对类型没有任何要求，同时也意味着该类型变量上无法执行任何操作，类似ts中的&lt;code&gt;Unknown&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; any &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;any = &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;any = &lt;span class=&#34;number&#34;&gt;12.34&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;any = &lt;span class=&#34;string&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;any = &lt;span class=&#34;built_in&#34;&gt;new&lt;/span&gt;(bytes.Buffer)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Go中具体类型对接口类型的满足都是隐式的，无需显式声明。所以一个具体类型可能会同时满足很多接口类型。可以把接口类型认为是将一些具体类型中公共的部分抽象出来的共同行为，将之作为&lt;strong&gt;grouping&lt;/strong&gt;出来的共性。&lt;/p&gt;
&lt;h4 id=&#34;使用flag-Value解析命令行参数&#34;&gt;&lt;a href=&#34;#使用flag-Value解析命令行参数&#34; class=&#34;headerlink&#34; title=&#34;使用flag.Value解析命令行参数&#34;&gt;&lt;/a&gt;使用&lt;code&gt;flag.Value&lt;/code&gt;解析命令行参数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fmt.Sscanf&lt;/code&gt;可以从输入中按格式解析出特定类型参数&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;接口值&#34;&gt;&lt;a href=&#34;#接口值&#34; class=&#34;headerlink&#34; title=&#34;接口值&#34;&gt;&lt;/a&gt;接口值&lt;/h3&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; w io.Writer&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;w = os.Stdout&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;w = &lt;span class=&#34;built_in&#34;&gt;new&lt;/span&gt;(bytes.Buffer)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;w = &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Go中，接口类型可以作为变量的合法类型。接口类型值因此具有&lt;strong&gt;动态类型&lt;/strong&gt;和&lt;strong&gt;动态值&lt;/strong&gt;。在Go中可以近似用类型描述符（type descriptor）表示，其中type表示具体类型，value表示具体值。在初始化时，type和value都是&lt;code&gt;nil&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;        +-----------+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;type    |    nil    |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        +-----------+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;value   |    nil    |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        +-----------+&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;而在第二和第三行，为w赋值为&lt;code&gt;os.Stdout&lt;/code&gt;以及&lt;code&gt;*bytes.Buffer&lt;/code&gt;类型时，type分别会变成&lt;code&gt;os.Stdout&lt;/code&gt;和&lt;code&gt;*bytes.Buffer&lt;/code&gt;，同时value也会被设置为对应初始值的指针。这个过程会完成类似于&lt;code&gt;io.Writer(os.Stdout)&lt;/code&gt;的隐式类型转换。此时访问&lt;code&gt;w&lt;/code&gt;的方法，会被动态分配到value上实现。而在最后又将&lt;code&gt;w&lt;/code&gt;还原为初始值&lt;code&gt;nil&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;接口类型之间&lt;strong&gt;不一定&lt;/strong&gt;可以比较，当接口值都为&lt;code&gt;nil&lt;/code&gt;或接口值对应的具体类型相同以及具体值相同时，接口值相同。然而，如果具体类型不可比较时（如slice，function等），接口类型也不可比较。Go的&lt;code&gt;fmt&lt;/code&gt;中，可以用&lt;code&gt;%T&lt;/code&gt;打印变量类型。&lt;/p&gt;
&lt;h4 id=&#34;陷阱：nil值可以存在于非nil的接口值中&#34;&gt;&lt;a href=&#34;#陷阱：nil值可以存在于非nil的接口值中&#34; class=&#34;headerlink&#34; title=&#34;陷阱：nil值可以存在于非nil的接口值中&#34;&gt;&lt;/a&gt;陷阱：nil值可以存在于非nil的接口值中&lt;/h4&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; debug = &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; buf *bytes.Buffer&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; debug &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        buf = &lt;span class=&#34;built_in&#34;&gt;new&lt;/span&gt;(bytes.Buffer)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    f(buf)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; debug &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(out io.Writer)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; out != &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        out.Write([]&lt;span class=&#34;type&#34;&gt;byte&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;woops!\n&amp;quot;&lt;/span&gt;)) &lt;span class=&#34;comment&#34;&gt;// panic: nil pointer derefence&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在上面的判断中，&lt;code&gt;out&lt;/code&gt;已经有了具体的类型，因此接口类型的&lt;code&gt;out&lt;/code&gt;不等于&lt;code&gt;nil&lt;/code&gt;，然而&lt;code&gt;out&lt;/code&gt;的具体值却是&lt;code&gt;nil&lt;/code&gt;，这使得&lt;code&gt;Write&lt;/code&gt;行为无法保证。解决办法是，在一开始为&lt;code&gt;buf&lt;/code&gt;声明为&lt;code&gt;io.Writer&lt;/code&gt;类型即可。&lt;/p&gt;
&lt;h3 id=&#34;sort-Interface&#34;&gt;&lt;a href=&#34;#sort-Interface&#34; class=&#34;headerlink&#34; title=&#34;sort.Interface&#34;&gt;&lt;/a&gt;&lt;code&gt;sort.Interface&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;Go使用sort包中的&lt;code&gt;sort.Interface&lt;/code&gt;实现排序功能。同时对于常见类型string、int等也有事先封装好的&lt;code&gt;sort.Strings()&lt;/code&gt;，&lt;code&gt;sort.Int()&lt;/code&gt;。对于自定义类型，在实现&lt;code&gt;sort.Interface&lt;/code&gt;接口后，也可使用&lt;code&gt;sort.Sort&lt;/code&gt;排序。接口定义如下：&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; sort&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; Interface &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Len() &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Less(i, j &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;) &lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Swap(i, j &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;三个方法分别用来&lt;strong&gt;返回长度&lt;/strong&gt;、&lt;strong&gt;比较大小&lt;/strong&gt;和&lt;strong&gt;交换顺序&lt;/strong&gt;。这也是排序的几个基本操作。下面给出了字符串排序的内部实现：&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; StringSlice []&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;(s StringSlice)&lt;/span&gt;&lt;/span&gt; Len() &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(s) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;(s StringSlice)&lt;/span&gt;&lt;/span&gt; Less(i, j &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;) &lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt; &amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; p[i] &amp;lt; p[j] &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;(s StringSlice)&lt;/span&gt;&lt;/span&gt; Swap(i, j &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;) &amp;#123; p[i], p[j] = p[j], p[i] &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;在排序struct等复杂类型slice时，建议定义指针类型数组，这样可以让swap时速度更快&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;sort还有一个方便的反向排序方法&lt;code&gt;sort.Reverse&lt;/code&gt;，它借助了struct embedding，用一个内部类型&lt;code&gt;reverse&lt;/code&gt;封装了外部实现接口的类型，另外，直接在&lt;code&gt;reverse&lt;/code&gt;上定义了Less，覆盖了&lt;code&gt;Interface&lt;/code&gt;的实现，从而实现了反向排序：&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; sort&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; reverse &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &amp;#123; Interface &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;(r reverse)&lt;/span&gt;&lt;/span&gt; Less (i, j &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;) &lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt; &amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; r.Interface.Less(j, i) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Reverse&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(i Interface)&lt;/span&gt;&lt;/span&gt; Interface &amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; reverse&amp;#123;i&amp;#125; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sort.Sort(sort.Reverse(byArtist(tracks)))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;除了slice类型外，其他实现了&lt;code&gt;sort.Interface&lt;/code&gt;接口的类型一样可以排序：&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; customSort &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    t []*Track&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    less &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(x, y *Track)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;(x customSort)&lt;/span&gt;&lt;/span&gt; Len() &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(x.t) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;(x customSort)&lt;/span&gt;&lt;/span&gt; Less(i, j &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;) &lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt; &amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; x.less(x.t[i], x.t[j]) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;(x customSort)&lt;/span&gt;&lt;/span&gt; Swap(i, j &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;) &amp;#123; x.t[i], x.t[j] = x.t[j], x.t[i] &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;http-Handler接口&#34;&gt;&lt;a href=&#34;#http-Handler接口&#34; class=&#34;headerlink&#34; title=&#34;http.Handler接口&#34;&gt;&lt;/a&gt;&lt;code&gt;http.Handler&lt;/code&gt;接口&lt;/h3&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; http&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; Handler &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ServeHTTP(w ResponseWriter, r *Request)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ListenAndServe&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(address &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;, h Handler)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;实现了这个接口的可以传递给&lt;code&gt;ListenAndServe&lt;/code&gt;。但通常用不到这种原始的方式。Go的http包提供的&lt;code&gt;ServeMux&lt;/code&gt;类型可以给请求分路，聚合一堆&lt;code&gt;http.Handlers&lt;/code&gt;。写起来像下面这样：&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    db := database&amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;quot;shoe&amp;quot;&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;socks&amp;quot;&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    mux := http.NewServeMux()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    mux.Handle(&lt;span class=&#34;string&#34;&gt;&amp;quot;/list&amp;quot;&lt;/span&gt;, http.HandlerFunc(db.list))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    mux.Handle(&lt;span class=&#34;string&#34;&gt;&amp;quot;/price&amp;quot;&lt;/span&gt;, http.HandlerFunc(db.price))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; database &lt;span class=&#34;keyword&#34;&gt;map&lt;/span&gt;[&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;]&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;(db database)&lt;/span&gt;&lt;/span&gt; list(w http.ResponseWriter, req *http.Request) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; item, price := &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; db &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        fmt.Fprintf(w, &lt;span class=&#34;string&#34;&gt;&amp;quot;%s: %s\n&amp;quot;&lt;/span&gt;, item, price)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;(db database)&lt;/span&gt;&lt;/span&gt; price(w http.ResponseWriter, req *http.Request) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;其中&lt;code&gt;http.HandlerFunc&lt;/code&gt;将传入的函数包裹成了满足&lt;code&gt;Handler&lt;/code&gt;接口的类型。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; http&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; HandlerFunc &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(w ResponseWriter, r *Request)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;(f HandlerFunc)&lt;/span&gt;&lt;/span&gt; ServeHTTP(w ResponseWriter, r *Request) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    f(w, r)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;对于上面的使用还是要写一些模板代码，对此可以将&lt;code&gt;mux.Handler&lt;/code&gt;简写成&lt;code&gt;mux.HandlerFunc(&amp;quot;list&amp;quot;, db.list)&lt;/code&gt;。可以再减少一点代码。实际上，http还提供了一个全局的&lt;code&gt;ServeMux&lt;/code&gt;对象实例&lt;code&gt;DefaultServeMux&lt;/code&gt;，不需要手动创建。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    db := database&amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;quot;shoes&amp;quot;&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;socks&amp;quot;&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    http.HandlerFunc(&lt;span class=&#34;string&#34;&gt;&amp;quot;/list&amp;quot;&lt;/span&gt;, db.list)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    http.HandlerFunc(&lt;span class=&#34;string&#34;&gt;&amp;quot;/price&amp;quot;&lt;/span&gt;, db.price)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    log.Fatal(http.ListenAndServe(&lt;span class=&#34;string&#34;&gt;&amp;quot;localhost:8000&amp;quot;&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;go中每一个handler都在一个单独的goroutine上，要妥善处理好并发的情况。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;error接口&#34;&gt;&lt;a href=&#34;#error接口&#34; class=&#34;headerlink&#34; title=&#34;error接口&#34;&gt;&lt;/a&gt;&lt;code&gt;error&lt;/code&gt;接口&lt;/h3&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Error() &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;error&lt;/code&gt;类型实现了&lt;code&gt;error&lt;/code&gt;接口。整个&lt;code&gt;errors&lt;/code&gt;包都围绕这个接口设计，除了&lt;code&gt;errors.New()&lt;/code&gt;方法，还可以直接通过&lt;code&gt;fmt.Errorf&lt;/code&gt;返回一个格式化后的error值。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; errors&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;New&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(text &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;error&lt;/span&gt; &amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;amp;errorString&amp;#123;text&amp;#125; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; errorString &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &amp;#123; text &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;(e *errorString)&lt;/span&gt;&lt;/span&gt; Error() &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt; &amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; e.text &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; fmt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;errors&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Errorf&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(format &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;, arags ...&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;error&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; errors.New(Sprintf(format, args...))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;简单的数学表达式求值器&#34;&gt;&lt;a href=&#34;#简单的数学表达式求值器&#34; class=&#34;headerlink&#34; title=&#34;简单的数学表达式求值器&#34;&gt;&lt;/a&gt;简单的数学表达式求值器&lt;/h3&gt;&lt;p&gt;递归的AST解析&lt;/p&gt;
&lt;p&gt;略。&lt;/p&gt;
&lt;h3 id=&#34;类型断言&#34;&gt;&lt;a href=&#34;#类型断言&#34; class=&#34;headerlink&#34; title=&#34;类型断言&#34;&gt;&lt;/a&gt;类型断言&lt;/h3&gt;&lt;p&gt;类型断言（type assertion），写作&lt;code&gt;x.(T)&lt;/code&gt;，通常用来将动态类型限定到更严格的类型。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;T&lt;/code&gt;是具体类型时，会判断&lt;code&gt;x&lt;/code&gt;类型是否和&lt;code&gt;T&lt;/code&gt;&lt;strong&gt;一致&lt;/strong&gt;，是则将&lt;code&gt;x&lt;/code&gt;类型设置为&lt;code&gt;T&lt;/code&gt;，否则&lt;code&gt;panic&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;T&lt;/code&gt;是抽象类型interface时，会判断&lt;code&gt;x&lt;/code&gt;是否&lt;strong&gt;满足&lt;/strong&gt;&lt;code&gt;T&lt;/code&gt;接口，是则将&lt;code&gt;x&lt;/code&gt;类型设置为接口&lt;code&gt;T&lt;/code&gt;，否则panic&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; w io.Writer&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;w = os.Stdout&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;f := w.(*os.File)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;c := w.(*bytes.Buffer) &lt;span class=&#34;comment&#34;&gt;// panic&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;w = &lt;span class=&#34;built_in&#34;&gt;new&lt;/span&gt;(ByteCounter)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rw := w.(io.ReadWriter) &lt;span class=&#34;comment&#34;&gt;// panic&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;当对&lt;code&gt;nil&lt;/code&gt;进行类型断言时时，断言一定失败&lt;/strong&gt;。另外，类型断言可以支持第二个返回参数&lt;code&gt;ok&lt;/code&gt;表示是否成功，此时不会panic。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; w, ok := w.(*os.File); ok &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...use w...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;应用：错误类型区分&#34;&gt;&lt;a href=&#34;#应用：错误类型区分&#34; class=&#34;headerlink&#34; title=&#34;应用：错误类型区分&#34;&gt;&lt;/a&gt;应用：错误类型区分&lt;/h4&gt;&lt;p&gt;借助类型断言，可以将判断抛出的具体错误类型，&lt;code&gt;os&lt;/code&gt;包提供了&lt;code&gt;IsExist&lt;/code&gt;，&lt;code&gt;isNotExist&lt;/code&gt;，&lt;code&gt;isPermission&lt;/code&gt;用来区分文件已存在，文件不存在，不允许几种错误。我们以文件不存在为例，此时抛出的&lt;code&gt;PathError&lt;/code&gt;类型错误包含了具体的错误类型。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; PathError &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Op &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Path &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Err &lt;span class=&#34;type&#34;&gt;error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 满足Error接口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;(e *PathError)&lt;/span&gt;&lt;/span&gt; Error() &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; e.Op + &lt;span class=&#34;string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt; + e.Path + &lt;span class=&#34;string&#34;&gt;&amp;quot;: &amp;quot;&lt;/span&gt; + e.Err.Error()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;_, err := os.Open(&lt;span class=&#34;string&#34;&gt;&amp;quot;/no/such/path&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fmt.Printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%#v\n&amp;quot;&lt;/span&gt;, err)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Output: &amp;amp;os.PathError&amp;#123;Op:&amp;quot;open&amp;quot;, Path:&amp;quot;/no/such/path&amp;quot;, Err:0x2&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;使用断言后，就可以从&lt;code&gt;err&lt;/code&gt;中拿到具体错误类型，从而判断是否是文件不存在导致的：&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;errors&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;syscall&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;IsNotExist&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(err &lt;span class=&#34;type&#34;&gt;error&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; pe, ok := err.(*PathError); ok &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        err = pe.Err&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; err == syscall.ENOENT || err == ErrNotExist&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;另外，建议在错误抛出时就进行检测，在聚合后，原始错误的数据结构可能会丢失从而无法判断。&lt;/p&gt;
&lt;h4 id=&#34;方法查询&#34;&gt;&lt;a href=&#34;#方法查询&#34; class=&#34;headerlink&#34; title=&#34;方法查询&#34;&gt;&lt;/a&gt;方法查询&lt;/h4&gt;&lt;p&gt;抽象类型如&lt;code&gt;io.Writer&lt;/code&gt;可能缺少使用者需要的方法如&lt;code&gt;io.WriteString&lt;/code&gt;（尽管满足&lt;code&gt;io.Writer&lt;/code&gt;的大多数具体类型除了必须满足的&lt;code&gt;Write&lt;/code&gt;方法外，都对写入字符串支持了&lt;code&gt;WriteString&lt;/code&gt;方法）。&lt;/p&gt;
&lt;p&gt;可以定义一个临时接口类型，判断满足抽象类型的变量是否具有指定方法。因为Go中接口的满足是隐式的（类似鸭子类型），不像许多强类型语言一样，需要显式声明。之前使用弱类型语言的可能能很好接受。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;writeString&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(w io.Writer, s &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; (n &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;, err &lt;span class=&#34;type&#34;&gt;error&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; stringWriter &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        WriteString(&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;) (n &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;, err &lt;span class=&#34;type&#34;&gt;error&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; sw, ok := w.(stringWriter); ok &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; sw.WriteString(s) &lt;span class=&#34;comment&#34;&gt;// 更有效率的方案&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; w.Write([]&lt;span class=&#34;type&#34;&gt;byte&lt;/span&gt;(s))  &lt;span class=&#34;comment&#34;&gt;// 兜底方案&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;实际上，&lt;code&gt;fmt.Sprintf&lt;/code&gt;打印不同类型的变量时，也借助了类型断言，对于特定类型调用特定方法，最后再使用&lt;strong&gt;反射&lt;/strong&gt;处理其他类型。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; fmt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;formatOnValue&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(x &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; err, ok := x.(&lt;span class=&#34;type&#34;&gt;error&lt;/span&gt;); ok &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; err.Error()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; str, ok := x.(Stringer); ok &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; str.String()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Type-switch&#34;&gt;&lt;a href=&#34;#Type-switch&#34; class=&#34;headerlink&#34; title=&#34;Type switch&#34;&gt;&lt;/a&gt;Type switch&lt;/h3&gt;&lt;p&gt;interface除了之前说的&lt;strong&gt;让多个具体类型有一致表现&lt;/strong&gt;的用法外，还可以作为&lt;strong&gt;可区分具体类型的合集&lt;/strong&gt;来使用。这种时候需要结合type switch的用法。如下所示：&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt; x.(&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt;: &lt;span class=&#34;comment&#34;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;type&#34;&gt;uint&lt;/span&gt;: &lt;span class=&#34;comment&#34;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt;: &lt;span class=&#34;comment&#34;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;: &lt;span class=&#34;comment&#34;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt;: &lt;span class=&#34;comment&#34;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;通常在确定了&lt;code&gt;x&lt;/code&gt;的类型后，还需要直接使用&lt;code&gt;x&lt;/code&gt;。此时可以写作&lt;code&gt;switch x:= x.(type)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这种用法和之前的用法不同在于：这里接口不作为有&lt;strong&gt;一致表现&lt;/strong&gt;而存在，它只是用来暂存将要区分开的具体类型，而这些具体类型往往时有&lt;strong&gt;不同表现&lt;/strong&gt;的。所以这种用法里的接口&lt;strong&gt;几乎没有方法&lt;/strong&gt;。换一种说法，之前的用法里，接口背后的具体类型细节需要被掩盖来使用，而这里需要使用具体类型的细节。&lt;/p&gt;
&lt;h3 id=&#34;一些忠告&#34;&gt;&lt;a href=&#34;#一些忠告&#34; class=&#34;headerlink&#34; title=&#34;一些忠告&#34;&gt;&lt;/a&gt;一些忠告&lt;/h3&gt;&lt;p&gt;和上一章方法类似，接口是一种很好使用的面向对象的特性。但&lt;strong&gt;不建议上来就从定义一堆接口&lt;/strong&gt;开始，这样通常会产生一大堆只有一个具体类型实现的接口。接口是抽象类型，是通过具体类型抽象得来的。通常是在&lt;strong&gt;需要用统一的方式处理不同类型&lt;/strong&gt;时，拿来使用。&lt;/p&gt;
&lt;p&gt;同时，大多数Go程序中，接口往往小且包含比较少的方法。像是&lt;code&gt;io.Writer&lt;/code&gt;或&lt;code&gt;fmt.Stringer&lt;/code&gt;。和方法一章一样，它们虽然是面向对象的特性，但是不是Go中一定要使用的语言特性。只在需要的时候使用。大多数时候，直接使用函数就足够了。在书中，方法如&lt;code&gt;input.Write&lt;/code&gt;的使用就远不如函数如&lt;code&gt;fmt.Printf&lt;/code&gt;来得频繁。&lt;/p&gt;
&lt;h2 id=&#34;goroutine和信道&#34;&gt;&lt;a href=&#34;#goroutine和信道&#34; class=&#34;headerlink&#34; title=&#34;goroutine和信道&#34;&gt;&lt;/a&gt;goroutine和信道&lt;/h2&gt;&lt;p&gt;Go支持两种并发编程的风格，第一种在本章介绍，通过goroutines和channels支持&lt;strong&gt;通信顺序进程（Communicating sequential processes，CSP）&lt;/strong&gt;，这种情况下，值会在goroutine间来回传递，而变量在多数情况下被限制自单个活动中。下一章介绍的共享变量风格的并发编程更接近传统的并发风格。&lt;/p&gt;
&lt;h3 id=&#34;认识goroutine&#34;&gt;&lt;a href=&#34;#认识goroutine&#34; class=&#34;headerlink&#34; title=&#34;认识goroutine&#34;&gt;&lt;/a&gt;认识goroutine&lt;/h3&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;go&lt;/span&gt; spinner(&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt; * time.Millisecond)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; n = &lt;span class=&#34;number&#34;&gt;45&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fibN := fib(n) &lt;span class=&#34;comment&#34;&gt;// slow&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fmt.Printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;\rFibonacci(%d) = %d\n&amp;quot;&lt;/span&gt;, n, fibN)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;spinner&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(delay time.Duration)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; _, r = &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;`-\|/`&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            fmt.Printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;\r%c&amp;quot;&lt;/span&gt;, r)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            time.Sleep(delay)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;fib&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(x &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; x &amp;lt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; x&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; fib(x&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;) + fib(x&lt;span class=&#34;number&#34;&gt;-2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;goroutine类似线程，有着定量而非定性的差异&lt;/li&gt;
&lt;li&gt;&lt;code&gt;main&lt;/code&gt;函数也会启动一个&lt;em&gt;main goroutine&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;goroutine通过&lt;code&gt;go&lt;/code&gt;启动一个函数或方法调用，并在声明后立即返回&lt;/li&gt;
&lt;li&gt;除了&lt;code&gt;main&lt;/code&gt;函数返回或程序结束（&lt;code&gt;os.Exit&lt;/code&gt;）外，一个goroutine没有办法直接停止另一个，但可以通过传值的方式间接实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;简单示例&#34;&gt;&lt;a href=&#34;#简单示例&#34; class=&#34;headerlink&#34; title=&#34;简单示例&#34;&gt;&lt;/a&gt;简单示例&lt;/h3&gt;&lt;p&gt;服务器处理请求是最典型的并发场景。&lt;/p&gt;
&lt;h4 id=&#34;1-Clock-Server&#34;&gt;&lt;a href=&#34;#1-Clock-Server&#34; class=&#34;headerlink&#34; title=&#34;1. Clock Server&#34;&gt;&lt;/a&gt;1. Clock Server&lt;/h4&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;io&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;log&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;net&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    listener, err := net.Listen(&lt;span class=&#34;string&#34;&gt;&amp;quot;tcp&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;localhost:8000&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; err != &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        log.Fatal(err)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        conn, err := listener.Accept()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; err != &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            log.Print(err)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        handleConn(conn) &lt;span class=&#34;comment&#34;&gt;// go handleConn(conn)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;handleConn&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(c net.Conn)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;defer&lt;/span&gt; c.Close()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        _, err := io.WriteString(c, time.Now().Format(&lt;span class=&#34;string&#34;&gt;&amp;quot;15:04:05\n&amp;quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; err != &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;// e.g. client disconnect&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        time.Sleep(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; * time.Second)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;listener.Accept&lt;/code&gt;会在接收到TCP连接请求前一直阻塞&lt;/li&gt;
&lt;li&gt;&lt;code&gt;time.Format&lt;/code&gt;方法通过一个&lt;strong&gt;特殊的样例&lt;/strong&gt;（15:04:05）表示要格式化的格式，&lt;code&gt;time.Parse&lt;/code&gt;也是如此&lt;/li&gt;
&lt;li&gt;client端可以用&lt;code&gt;net.Dial&lt;/code&gt;发起一个TCP连接请求&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上述的服务端是&lt;strong&gt;串行&lt;/strong&gt;处理client的请求，并每秒打印当前时间，在&lt;code&gt;handleConn(conn)&lt;/code&gt;前加上&lt;code&gt;go&lt;/code&gt;关键字后，即可让服务端&lt;strong&gt;并行&lt;/strong&gt;处理client的请求。&lt;/p&gt;
&lt;h4 id=&#34;2-Echo-Server&#34;&gt;&lt;a href=&#34;#2-Echo-Server&#34; class=&#34;headerlink&#34; title=&#34;2. Echo Server&#34;&gt;&lt;/a&gt;2. Echo Server&lt;/h4&gt;&lt;p&gt;上面的例子是在一个连接中使用一个goroutine，当然每个连接也可以创建多个goroutine。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// server&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;echo&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(c net.Conn, shout &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;, delay time.Duration)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fmt.Fprintln(c, &lt;span class=&#34;string&#34;&gt;&amp;quot;\t&amp;quot;&lt;/span&gt;, strings.ToUpper(shout))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    time.Sleep(delay)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fmt.Fprintln(c, &lt;span class=&#34;string&#34;&gt;&amp;quot;\t&amp;quot;&lt;/span&gt;, shout)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    time.Sleep(delay)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fmt.Fprintln(c, &lt;span class=&#34;string&#34;&gt;&amp;quot;\t&amp;quot;&lt;/span&gt;, strings.ToLower(shout))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;handleConn&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(c net.Conn)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    input := bufio.NewScanner(c)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; input.Scan() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        echo(c, input.Text(), &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;*time.Second) &lt;span class=&#34;comment&#34;&gt;// go echo(...)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    c.Close()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// client&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    conn, err := net.Dial(&lt;span class=&#34;string&#34;&gt;&amp;quot;tcp&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;localhost:8000&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; err != &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        log.Fatal(err)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;defer&lt;/span&gt; conn.Close()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;go&lt;/span&gt; mustCopy(os.Stdout, conn)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    mustCopy(conn, os.Stdin)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在&lt;code&gt;echo&lt;/code&gt;前加上&lt;code&gt;go&lt;/code&gt;即可让服务器同时相应多个请求，返回“回声”。同理，在client端打印服务端返回的代码前加上&lt;code&gt;go&lt;/code&gt;即可让使用者输入的同时打印返回的“回声”。&lt;/p&gt;
&lt;h3 id=&#34;信道（channel）&#34;&gt;&lt;a href=&#34;#信道（channel）&#34; class=&#34;headerlink&#34; title=&#34;信道（channel）&#34;&gt;&lt;/a&gt;信道（channel）&lt;/h3&gt;&lt;p&gt;&lt;code&gt;go&lt;/code&gt;启动并行的活动，信道作为活动间通信的通道，借助它可以发送和接收消息。信道通过&lt;code&gt;make&lt;/code&gt;构造，需要指定传输消息的类型，作为信道类型。可以使用&lt;code&gt;close&lt;/code&gt;关闭信道。后续的&lt;strong&gt;发送&lt;/strong&gt;操作会panic，&lt;strong&gt;接收&lt;/strong&gt;操作会得所有到已发送的值，而再之后的后续&lt;strong&gt;接收&lt;/strong&gt;操作只能得到信道类型对应的&lt;em&gt;零值&lt;/em&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ch := &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ch &amp;lt;- x&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x = &amp;lt;-ch&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 直接丢弃channel来的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;-ch&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;close&lt;/span&gt;(ch)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;信道还分为有缓冲区和无缓冲区两种类型，上述的&lt;code&gt;make&lt;/code&gt;构造的都是无缓冲区的信道，指定第二个参数可以构造有缓冲区的信道。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ch = &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;) &lt;span class=&#34;comment&#34;&gt;// 无缓冲区&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ch = &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &lt;span class=&#34;comment&#34;&gt;// 无缓冲区&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ch = &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;) &lt;span class=&#34;comment&#34;&gt;// 有缓冲区&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;无缓冲信道（Unbuffered-Channels）&#34;&gt;&lt;a href=&#34;#无缓冲信道（Unbuffered-Channels）&#34; class=&#34;headerlink&#34; title=&#34;无缓冲信道（Unbuffered Channels）&#34;&gt;&lt;/a&gt;无缓冲信道（Unbuffered Channels）&lt;/h4&gt;&lt;p&gt;向无缓冲区&lt;strong&gt;发送消息&lt;/strong&gt;会&lt;strong&gt;阻塞发送所在的goroutine&lt;/strong&gt;，直到对应的goroutine在同一个信道上执行接收操作。相反地，&lt;strong&gt;接收消息&lt;/strong&gt;在先的话，也会阻塞直到同一个信道上执行了发送操作。这种机制会&lt;strong&gt;同步&lt;/strong&gt;两个goroutine的执行进度。如果发送信息在先，则接收信息会在发送所在的goroutine之前发生。从而，我们可以基于这个假设的前提保证一些事实。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    conn, err := net.Dial(&lt;span class=&#34;string&#34;&gt;&amp;quot;tcp&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;localhost:8000&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; err != &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        log.Fatal(err)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    done := &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        io.Copy(os.Stdout, conn)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        log.Println(&lt;span class=&#34;string&#34;&gt;&amp;quot;done&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        done &amp;lt;- &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;&amp;#123;&amp;#125; &lt;span class=&#34;comment&#34;&gt;// signal the main goroutine&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    mustCopy(conn, os.Stdin)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    conn.Close()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;-done &lt;span class=&#34;comment&#34;&gt;// wait for background goroutine to finish&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上述程序里，会在接收完服务端返回后，才会关闭客户端。这里需要的是一个&lt;strong&gt;事件&lt;/strong&gt;，使用的信道类型其实并不重要，所以使用了&lt;code&gt;struct&amp;#123;&amp;#125;&lt;/code&gt;。实际应用中会使用&lt;code&gt;bool&lt;/code&gt;或是&lt;code&gt;int&lt;/code&gt;这样的简单类型。&lt;/p&gt;
&lt;h4 id=&#34;流水线&#34;&gt;&lt;a href=&#34;#流水线&#34; class=&#34;headerlink&#34; title=&#34;流水线&#34;&gt;&lt;/a&gt;流水线&lt;/h4&gt;&lt;p&gt;借助上面提到的无缓冲区信道，可以实现多个goroutine之间的接续传递，也可以叫做&lt;em&gt;流水线&lt;/em&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;+-----------+         +-----------+         +-----------+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|  Counter  |   --&amp;gt;   |  Squarer  |   --&amp;gt;   |  Printer  |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+-----------+         +-----------+         +-----------+&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    naturals: &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    squares: &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Counter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; x := &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; x &amp;lt; &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt; ;x++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            naturals &amp;lt;- x&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;close&lt;/span&gt;(naturals)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Squarer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            x := &amp;lt;-naturals&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            squares &amp;lt;- x * x&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        fmt.Println(&amp;lt;-squares)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上面的流水线中，Counter在打印100个自然数后，会关闭信道。会有之前所说的一些特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;向关闭信道写入消息会panic&lt;/li&gt;
&lt;li&gt;从关闭信道读取信息会得到所有未发送的消息，再之后只能得到零值&lt;/li&gt;
&lt;li&gt;关闭信道不会影响其他goroutine执行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以在上面的程序中，Printer会继续打印0，只有Counter正常退出。Go中没有&lt;em&gt;直接&lt;/em&gt;的获取信道是否关闭的方法，但是对于从信道中读取消息有第二个&lt;code&gt;ok&lt;/code&gt;参数，为&lt;code&gt;false&lt;/code&gt;时表示信道已关闭且&lt;strong&gt;读取完所有消息&lt;/strong&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;x, ok := naturals&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; !ok &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上面的模板代码，go用&lt;code&gt;range&lt;/code&gt;已封装好，不必重复书写。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; x := &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; naturals &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        squares &amp;lt;- x * x&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; x := &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; squares &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fmt.Println(x)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;不是所有信道在不用后都要显式关闭&lt;/strong&gt;，只在需要传达信道关闭信息时再手动&lt;code&gt;close&lt;/code&gt;关闭。其余的信道会在gc过程中回收。但这不意味着文件读取也可以不显式关闭：文件的读写操作后一定要执行关闭操作。关闭一个已关闭的信道会panic，关闭&lt;code&gt;nil&lt;/code&gt;的信道也是一样。&lt;/p&gt;
&lt;h4 id=&#34;单向信道&#34;&gt;&lt;a href=&#34;#单向信道&#34; class=&#34;headerlink&#34; title=&#34;单向信道&#34;&gt;&lt;/a&gt;单向信道&lt;/h4&gt;&lt;p&gt;以上一小节为例，有三个goroutine，函数签名如下：&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;counter&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(out &lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;squarer&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(out, in &lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;printer&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(in &lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;其中的信道入参分别用来&lt;strong&gt;接收&lt;/strong&gt;&lt;em&gt;或&lt;/em&gt;&lt;strong&gt;发送&lt;/strong&gt;消息（绝大多数信道也是如此）。因此对于这两种信道的细分，go类型系统提供了&lt;strong&gt;单向信道类型&lt;/strong&gt;，即只读或只写。同时提供了类型助记符：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;chan&amp;lt;-&lt;/code&gt;表示只读，只可读取消息，不可关闭&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;-chan&lt;/code&gt;表示只写，只可发送消息&lt;strong&gt;和关闭&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;违背只读只写上述规则，会在编译期间抛出错误。同时，&lt;strong&gt;双向信道可以隐式covert到单向信道，反之不可以&lt;/strong&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    naturals := &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    squares := &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;go&lt;/span&gt; counter(naturals)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;go&lt;/span&gt; squarer(squares, naturals)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    printer(squares)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;缓冲信道（Buffered-Channel）&#34;&gt;&lt;a href=&#34;#缓冲信道（Buffered-Channel）&#34; class=&#34;headerlink&#34; title=&#34;缓冲信道（Buffered Channel）&#34;&gt;&lt;/a&gt;缓冲信道（Buffered Channel）&lt;/h4&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ch = &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;可以用队列类别缓冲信道，不同的是缓冲信道和goroutine是紧密相连的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;写操作会在&lt;strong&gt;队列充满&lt;/strong&gt;时阻塞&lt;/li&gt;
&lt;li&gt;读操作会在&lt;strong&gt;队列为空&lt;/strong&gt;时阻塞&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过&lt;code&gt;cap&lt;/code&gt;和&lt;code&gt;len&lt;/code&gt;可以查看缓冲信道的实时容量和长度。虽然缓冲信道可以按队列去理解，但是不要把它拿去当队列来用。那么和无缓冲信道相比，缓冲信道应用场景有什么不同呢？&lt;/p&gt;
&lt;p&gt;我们用流水线举例，流水线上的各道工序复杂程度有难有易，如果工作空间有限，每一道工序后都需要在下一道工序空闲时才能交付，一些简单工序就需要等待。这时就像&lt;strong&gt;无缓冲信道&lt;/strong&gt;。假设工作空间宽裕，每道工序完成后，如果下游还未就绪，可以先放在空闲空间下，直接继续工作。这就是&lt;strong&gt;缓冲信道&lt;/strong&gt;，多出来的工作空间即&lt;strong&gt;缓冲区&lt;/strong&gt;，工序即&lt;strong&gt;goroutine&lt;/strong&gt;。缓冲区可以弥补上下游工序工作效率的&lt;em&gt;些微差异&lt;/em&gt;，缓冲区越大，可以容忍的效率差异就越大。如果工序间有明显差异，比如始终更快或更慢，此时增加缓冲区无法提供帮助，可以采用增加工序工人来提高工作效率，即&lt;strong&gt;在同一信道上使用更多goroutine&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;从上面的比喻，可以得出两种信道的区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无缓冲信道重点在&lt;strong&gt;同步&lt;/strong&gt;，它可以确保上下游goroutine的同步性&lt;/li&gt;
&lt;li&gt;缓冲信道则使用了队列来&lt;strong&gt;解耦&lt;/strong&gt;上下游goroutine，使之不因为阻塞影响工作效率&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以，我们假设有多个网站&lt;em&gt;镜像&lt;/em&gt;来为网络请求提供服务，就可以使用缓冲信道，优先响应的可以直接提供服务，且在响应后可以继续工作。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;mirroredQuery&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    responses := &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123; responses &amp;lt;- request(&lt;span class=&#34;string&#34;&gt;&amp;quot;asia.gopl.io&amp;quot;&lt;/span&gt;) &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123; responses &amp;lt;- request(&lt;span class=&#34;string&#34;&gt;&amp;quot;europe.gopl.io&amp;quot;&lt;/span&gt;) &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123; responses &amp;lt;- request(&lt;span class=&#34;string&#34;&gt;&amp;quot;america.gopl.io&amp;quot;&lt;/span&gt;) &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;lt;-responses&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(hostname &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; (res &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;) &amp;#123; &lt;span class=&#34;comment&#34;&gt;/* ... */&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;并行循环&#34;&gt;&lt;a href=&#34;#并行循环&#34; class=&#34;headerlink&#34; title=&#34;并行循环&#34;&gt;&lt;/a&gt;并行循环&lt;/h3&gt;&lt;p&gt;有些任务可以拆分成等效的&lt;strong&gt;相互独立&lt;/strong&gt;的小任务，这种情况也被称为“令人尴尬的并行”，是最简单的并行工作场景，它的工作量和并行数呈线性关系。我们假设有一个并行处理图片缩小的程序，能返回缩小后的文件总体积，并在合适的时候停止。在程序编写过程中，会遇到一些问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有错误出现时，未关闭剩余信道，导致goroutine泄露，并造成程序不响应或内存耗尽&lt;/li&gt;
&lt;li&gt;for循环结合延迟执行代码时，循环描述体中的变量陷阱&lt;/li&gt;
&lt;li&gt;要支持任意长度的图片列表，不能写死缓存信道的容量&lt;/li&gt;
&lt;li&gt;无从直接得知goroutine是否执行完成&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最终得到下面的最终版本：&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;makeThumbnails&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(filenames &amp;lt;-&lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int64&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sizes := &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int64&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; wg sync.WaitGroup&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; f := &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; filenames &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        wg.Add(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// worker&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// avoid loop variable pitfall&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;go&lt;/span&gt; runc(f &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 记录任务完成&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;defer&lt;/span&gt; wg.Done()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            thumb, err := thumbnail.ImageFile(f)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; err != &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                log.Println(err)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            info, _ = os.Stat(thumb)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            sizes &amp;lt;- info.Size()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// closer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 必须写成goroutine的形式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        wg.Wait()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;close&lt;/span&gt;(sizes)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; total &lt;span class=&#34;type&#34;&gt;int64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; size := &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; sizes &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        total += size&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; total&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上面程序里面有几点需要特别说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一个for循环会将信道输入的图片文件列表转成任务的列表，然后再启动一个goroutine负责关闭信道，最后从信道中拿出所有的大小加总返回&lt;/li&gt;
&lt;li&gt;关闭函数必须写成goroutine的形式。因为&lt;code&gt;sizes&lt;/code&gt;的range结束依赖于&lt;code&gt;sizes&lt;/code&gt;信道的关闭，同时&lt;code&gt;sizes&lt;/code&gt;信道又必须&lt;strong&gt;等待&lt;/strong&gt;所有图片处理任务执行完之后再关闭。等待和加总图片大小需要并行，所以需要一个新的goroutine去做&lt;/li&gt;
&lt;li&gt;任务完成借助&lt;code&gt;sync.WaitGroup&lt;/code&gt;完成，&lt;code&gt;wg.Wait()&lt;/code&gt;会阻塞直到&lt;code&gt;wg.Done()&lt;/code&gt;将所有任务清零&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;样例：并发web爬虫&#34;&gt;&lt;a href=&#34;#样例：并发web爬虫&#34; class=&#34;headerlink&#34; title=&#34;样例：并发web爬虫&#34;&gt;&lt;/a&gt;样例：并发web爬虫&lt;/h3&gt;&lt;p&gt;将第5章中的&lt;code&gt;worklist&lt;/code&gt;由&lt;code&gt;slice&lt;/code&gt;改为&lt;code&gt;channel&lt;/code&gt;，让爬取网页内容的过程并发执行即可得到一个并发的web爬虫。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;crawl&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(url &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; []&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fmt.Println(url)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    list, err := links.Extract(url)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; err != &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        log.Print(err)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; list&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 无缓冲信道，也可以使用缓冲信道&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    worklist := &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; []&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 初始化channel&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123; worklist &amp;lt;- os.Args[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:] &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    seen := &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;map&lt;/span&gt;[&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;]&lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 从channel中读取&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; list := &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; worklist &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; _, link := &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; list &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; !seen[link] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                seen[link] = &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(link &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    worklist &amp;lt;- crawl(link)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;(link)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上面的程序在执行了一段时间后，会因为客观限制出现报错信息。这是因为程序&lt;strong&gt;过于并发&lt;/strong&gt;了。由于硬件资源的限制，当并发数超过一定界限后，程序性能反而不如以前甚至会无法运行。因此需要手动限制并发量。这里有两种思路：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过限制发放许可证（token）的方式限制爬取goroutine是否执行，许可证数量有限，许可证用完后，阻止goroutine执行。当然作为信道的token，是在多个爬取goroutine间共享的。&lt;/li&gt;
&lt;li&gt;限制爬取goroutine总数，只创建固定个数的goroutine&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 信号量，占有表示被使用中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; tokens = &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;, &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;crawl&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(url)&lt;/span&gt;&lt;/span&gt; []&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fmt.Println(url)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    token &amp;lt;- &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    list, err := links.Extract(url)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;-tokens&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;将上面代码&lt;code&gt;main&lt;/code&gt;函数中的&lt;code&gt;worklist&lt;/code&gt;延迟在for循环内赋值，使用&lt;code&gt;n&lt;/code&gt;记录当前任务中的正在执行的任务数，可以实现在所有任务执行完成后退出程序。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; n &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    n++&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    seen := &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;map&lt;/span&gt;[&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;]&lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; ; n &amp;lt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; n-- &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        list := &amp;lt;-worklist&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; _, link := &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; list &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; !seen[link] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                seen[link] = &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                n++&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(link &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    worklist &amp;lt;- crawl(link)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;(link)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;select实现多工&#34;&gt;&lt;a href=&#34;#select实现多工&#34; class=&#34;headerlink&#34; title=&#34;select实现多工&#34;&gt;&lt;/a&gt;&lt;code&gt;select&lt;/code&gt;实现多工&lt;/h3&gt;&lt;p&gt;在之前的例子里，从信道中读取&amp;#x2F;写入值，会阻塞当前goroutine进度。如果需要同时接收两个信道的值，需要&lt;code&gt;select&lt;/code&gt;语句块。&lt;code&gt;select&lt;/code&gt;语句块使用类似&lt;code&gt;switch&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &amp;lt;- ch1:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; x := &amp;lt;- ch2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; ch3 &amp;lt;- y:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;每一个&lt;code&gt;case&lt;/code&gt;可以是接收或是发送消息的语句，&lt;code&gt;select&lt;/code&gt;语句在其中一个case发生后，才会继续（&lt;code&gt;select&amp;#123;&amp;#125;&lt;/code&gt;会一直等待程序执行）。&lt;code&gt;default&lt;/code&gt;可以指定没有任何一个case发生时的处理方式。&lt;/p&gt;
&lt;p&gt;原文中给出的&lt;code&gt;time.Tick&lt;/code&gt;例子会返回一个channel，并以设定的时间间隔发送消息。但是，再不从channel读取信息后，会造成goroutine泄露。因此只在整个生命周期都需要时才会使用。倒计时这种场景下建议使用更复杂的方式：&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ticker := time.NewTicker(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; * time.Second)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;- ticker.C&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ticker.Stop()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;对于一个nil信道的发送和接收会一直阻塞，select中的case也不会被选中。利用这个特性可以实现取消等功能。&lt;/p&gt;
&lt;h3 id=&#34;并发目录遍历&#34;&gt;&lt;a href=&#34;#并发目录遍历&#34; class=&#34;headerlink&#34; title=&#34;并发目录遍历&#34;&gt;&lt;/a&gt;并发目录遍历&lt;/h3&gt;&lt;p&gt;借助&lt;code&gt;ioutil.ReadDir&lt;/code&gt;可以实现遍历根文件夹下所有文件体积的功能。下面是一个纯单线程版本。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;walkDir&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(dir &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;, fileSizes &lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt;&amp;lt;- &lt;span class=&#34;type&#34;&gt;int64&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; _, entry := &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; dirents(dir) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; entry.IsDir() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            subdir := filepath.Join(dir, entry.Name())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            walkDir(subdir, fileSizes)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            fileSIzes &amp;lt;- entry.Size()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;dirents&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(dir &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; []os.FileInfo &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    entries, err := ioutil.ReadDir(dir)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; err != &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        fmt.Fprintf(os.Stderr, &lt;span class=&#34;string&#34;&gt;&amp;quot;du1: %v\n&amp;quot;&lt;/span&gt;, err)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; entries&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上面的版本可以实现功能，但是速度很慢，而且不能实时显示进度。这里我们用&lt;code&gt;time.Ticker&lt;/code&gt;定时打印进度，同时通过命令行参数&lt;code&gt;p&lt;/code&gt;控制。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; progress = flag.Bool(&lt;span class=&#34;string&#34;&gt;&amp;quot;v&amp;quot;&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;show progress&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; tick &amp;lt;-&lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; time.Time&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; *progress &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        tick = time.Tick(&lt;span class=&#34;number&#34;&gt;500&lt;/span&gt; * time.Millisecond)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; nFiles, nBytes &lt;span class=&#34;type&#34;&gt;int64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;loop:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; size, ok := fileSizes:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; !ok &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt; loop&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            nFiles++&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            nBytes += size&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &amp;lt;-tick:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            printDiskUsage(nFiles, nBytes)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    printDiskUsage(nFiles, nBytes) &lt;span class=&#34;comment&#34;&gt;// final print&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;其中&lt;code&gt;if *progress&lt;/code&gt;语句在没有传递&lt;code&gt;-p&lt;/code&gt;参数时，不会为tick赋值，而nil的tick值会让select中永远不会进入这个case，从而不打印进度。&lt;/p&gt;
&lt;p&gt;在遍历根目录下的递归调用&lt;code&gt;walkDir&lt;/code&gt;中，也可以使用goroutine，并通过&lt;code&gt;sync.WaitGroup&lt;/code&gt;保证执行完成后关闭&lt;code&gt;fileSizes&lt;/code&gt;信道。当然，无限制的创建goroutine会出现和上上小节一样的问题，所以也需要&lt;em&gt;信号量（semaphore）&lt;/em&gt;，保证不至于创建过多goroutine。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; sema = &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;, &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;dirents&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(dir &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; []os.FileInfo &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sema &amp;lt;- &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;&amp;#123;&amp;#125; &lt;span class=&#34;comment&#34;&gt;// 获取token&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;defer&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123; &amp;lt;-sema &amp;#125;() &lt;span class=&#34;comment&#34;&gt;// 释放token&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;取消&#34;&gt;&lt;a href=&#34;#取消&#34; class=&#34;headerlink&#34; title=&#34;取消&#34;&gt;&lt;/a&gt;取消&lt;/h3&gt;&lt;p&gt;一样的，一个goroutine没有直接关闭另一个goroutine的办法。按照之前提到的&lt;strong&gt;通过信道传递消息&lt;/strong&gt;的思路，但是一个信道只会被消费一次，我们这里的场景需要&lt;strong&gt;广播&lt;/strong&gt;更合适。&lt;/p&gt;
&lt;p&gt;之前提到，一个被关闭的信道在传递完信道内的消息后，后续再从这个信道获取值，会立即返回一个零值。可以利用这个特性，在执行取消操作后，将信道关闭即可，可以写出下面这样的函数。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; done = &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;cancelled&lt;/span&gt; &lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &amp;lt;- done:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;然后在程序的&lt;strong&gt;瓶颈处&lt;/strong&gt;，检查这个函数的返回值，一旦返回&lt;code&gt;true&lt;/code&gt;则立即中止程序。比如，之前提到获取token的函数里。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;dirents&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(dir &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; []os.FileInfo &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; sema &amp;lt;- &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;&amp;#123;&amp;#125;: &lt;span class=&#34;comment&#34;&gt;// acquire token&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &amp;lt;-done:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;defer&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123; &amp;lt;-sema &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;按上面这种方式退出程序后，有可能出现goroutine还没有妥善关闭的情况，可以在调试时，程序的最后用&lt;code&gt;panic&lt;/code&gt;打印系统信息，查看具体情况。&lt;/p&gt;
&lt;h3 id=&#34;样例：聊天服务器&#34;&gt;&lt;a href=&#34;#样例：聊天服务器&#34; class=&#34;headerlink&#34; title=&#34;样例：聊天服务器&#34;&gt;&lt;/a&gt;样例：聊天服务器&lt;/h3&gt;&lt;p&gt;聊天服务器也是并发和各种信道常用的场景，它包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户的接入、退出&lt;/li&gt;
&lt;li&gt;用户信息的广播&lt;/li&gt;
&lt;li&gt;用户session的维护&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们可以用一个信道表示一个接入的用户，在一个全局的文件中处理用户登入、登出，即信道的信息维护，这里可以用map表示，对于接收到的消息，像注册的所有信道逐个发送，即广播。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; client &lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt;&amp;lt;- &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;// 只写信道&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    entering = &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; client)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    messages = &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    leaving = &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; client)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;broadcaster&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    clients := &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;map&lt;/span&gt;[client]&lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt;) &lt;span class=&#34;comment&#34;&gt;// 用户session维护&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; cli := &amp;lt;-entering:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            clients[cli] = &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; cli := &amp;lt;-leaving:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;delete&lt;/span&gt;(clients, cli)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;close&lt;/span&gt;(cli)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; msg := &amp;lt;-messages:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; cli := &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; clients &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                cli &amp;lt;- msg&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;同时，启动一个tcp服务器，单独启动一个goroutine负责上面的信道管理，另外对于每一个接入的连接，启动一个独立的goroutine处理。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    listener, err := net.Listen(&lt;span class=&#34;string&#34;&gt;&amp;quot;tcp&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;localhost:8000&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; err != &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        log.Fatal(err)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;go&lt;/span&gt; broadcaster()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        conn, err := listener.Accept()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; err != &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            log.Print(err)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;go&lt;/span&gt; handleConn(conn)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在处理tcp连接的函数里，负责接入客户端，同时将连接中的内容写入到&lt;code&gt;messages&lt;/code&gt;信道中，以便广播给其他客户端。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;handleConn&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(conn net.Conn)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ch := &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;go&lt;/span&gt; clientWriter(conn, ch)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 唯一标识生成，也可以使用其他规则&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    who := conn.RemoteAddr().String()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ch &amp;lt;- &lt;span class=&#34;string&#34;&gt;&amp;quot;You are &amp;quot;&lt;/span&gt; + who&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    messages &amp;lt;- who + &lt;span class=&#34;string&#34;&gt;&amp;quot; has arrived&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    entering &amp;lt;- ch&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    input := bufio.NewScanner(conn)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; input.Scan() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        messages &amp;lt;- who + &lt;span class=&#34;string&#34;&gt;&amp;quot;: &amp;quot;&lt;/span&gt; + input.Text()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    leaving &amp;lt;- ch&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    messages &amp;lt;- who + &lt;span class=&#34;string&#34;&gt;&amp;quot; has left&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    conn.Close()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;clientWriter&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(conn net.Conn, ch &lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; msg := &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; ch &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        fmt.Fprintln(conn, msg)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上面的map没有使用lock操作，是因为它的读写都限制在了一个goroutine内，因此是&lt;strong&gt;并发安全&lt;/strong&gt;的，其他并发使用的信道和&lt;code&gt;net.Conn&lt;/code&gt;也是并发安全的。&lt;/p&gt;
&lt;h2 id=&#34;并发和共享变量&#34;&gt;&lt;a href=&#34;#并发和共享变量&#34; class=&#34;headerlink&#34; title=&#34;并发和共享变量&#34;&gt;&lt;/a&gt;并发和共享变量&lt;/h2&gt;&lt;p&gt;使用信道在goroutine间沟通是一种并发的范式，其中也略过了一些关键而细小的问题，这些在后面这种并发编程模式中会经常讨论。&lt;/p&gt;
&lt;h3 id=&#34;竞险（race-conditions）&#34;&gt;&lt;a href=&#34;#竞险（race-conditions）&#34; class=&#34;headerlink&#34; title=&#34;竞险（race conditions）&#34;&gt;&lt;/a&gt;竞险（race conditions）&lt;/h3&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; bank&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; balance &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Deposit&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(amount &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    balance += amount&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Balance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; balance &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上面以银行为例，实际上给出了一个可以读写的变量。在串行执行场景下，不会有问题。在并发场景下，对&lt;code&gt;balance&lt;/code&gt;读写的同时进行，就会造成一些问题。这种情况也叫&lt;strong&gt;数据争用（data race）&lt;/strong&gt;，即&lt;strong&gt;有两个goroutine并发访问一个变量，且至少有一个是写操作&lt;/strong&gt;。这种数据争用有时候还会带来未定义的行为。&lt;/p&gt;
&lt;p&gt;在使用共享变量的模式并发编程时，如果不小心处理，很容易遇到数据争用的情况。然而，绝大多数的数据争用都“来者不善”，以至于我们要留心发生数据争用的场景：&lt;strong&gt;有两个goroutine并发访问一个变量，且至少有一个是写操作&lt;/strong&gt;。下面有三种方式去避免：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;不要写变量&lt;/strong&gt;，比如将变量初始化好之后，使之只读或不可变&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免在多个goroutine上操作变量&lt;/strong&gt;，将操作限制在一个goroutine上，就像前一章中的broadcaster，这样的goroutine也叫做&lt;em&gt;调度者goroutine&lt;/em&gt;。Go中有句箴言总结的很好：&lt;strong&gt;不要通过共享变量传递消息，通过传递消息来共享变量&lt;/strong&gt;。这里的传递消息就是指通过信道发送和接收。当实在无法限制多个goroutine访问一个变量，也尽量限制访问，通过信道传递给其他goroutine，达到&lt;strong&gt;串行限制（serial confinement）&lt;/strong&gt;的效果。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在同一时间仅允许一个goroutine访问变量&lt;/strong&gt;，即后面会提到的&lt;strong&gt;互斥锁&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;互斥锁（sync-Mutex）&#34;&gt;&lt;a href=&#34;#互斥锁（sync-Mutex）&#34; class=&#34;headerlink&#34; title=&#34;互斥锁（sync.Mutex）&#34;&gt;&lt;/a&gt;互斥锁（&lt;code&gt;sync.Mutex&lt;/code&gt;）&lt;/h3&gt;&lt;p&gt;互斥锁和之前提到的信号量（counting semaphore）很类似，更像是一个容量为1的信号量，即&lt;em&gt;二进制信号量（binary semaphore）&lt;/em&gt;。每次执行后续操作前，都需要从一个全局信道中获取token，&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sema = &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    balance &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Deposit&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(amount &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sema &amp;lt;- &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;&amp;#123;&amp;#125; &lt;span class=&#34;comment&#34;&gt;// 占用token&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    balance = balance + amount&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;-sema &lt;span class=&#34;comment&#34;&gt;// 释放token&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Balance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sema &amp;lt;- &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;&amp;#123;&amp;#125; &lt;span class=&#34;comment&#34;&gt;// 占用token&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    b := balance&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;lt;-sema &lt;span class=&#34;comment&#34;&gt;// 释放token&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; b&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;将上面的信号量表示使用&lt;code&gt;sync.Mutex&lt;/code&gt;替代就是互斥锁的使用方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;var sema = make(chan struct&amp;#123;&amp;#125;, 1)&lt;/code&gt; &amp;#x3D;&amp;gt; &lt;code&gt;var mu sync.Mutex&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sema &amp;lt;- struct&amp;#123;&amp;#125;&amp;#123;&amp;#125;&lt;/code&gt; &amp;#x3D;&amp;gt; &lt;code&gt;mu.Lock()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;-sema&lt;/code&gt; &amp;#x3D;&amp;gt; &lt;code&gt;mu.Unlock()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通常来说，互斥锁使用的范围很小，这一区域也叫临界区（critical section），被mutex守护的共享变量会紧跟在&lt;code&gt;Lock&lt;/code&gt;之后。在程序较长时，为了避免在所有返回处显式&lt;code&gt;Unlock&lt;/code&gt;可以使用&lt;code&gt;defer&lt;/code&gt;，这会稍微增加一些显式&lt;code&gt;Unlock&lt;/code&gt;的成本，但会让代码更简洁。&lt;/p&gt;
&lt;p&gt;另外，互斥锁是不可重入的，即不能对一个已经上锁的共享变量上锁，这会导致死锁，因此确保互斥锁和其守护的变量不被导出。&lt;/p&gt;
&lt;h3 id=&#34;读-x2F-写互斥锁（sync-RWMutex）&#34;&gt;&lt;a href=&#34;#读-x2F-写互斥锁（sync-RWMutex）&#34; class=&#34;headerlink&#34; title=&#34;读&amp;#x2F;写互斥锁（sync.RWMutex）&#34;&gt;&lt;/a&gt;读&amp;#x2F;写互斥锁（&lt;code&gt;sync.RWMutex&lt;/code&gt;）&lt;/h3&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; mu sync.RWMutex&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; balance &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Balance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    mu.RLock()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;defer&lt;/span&gt; mu.RUnlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; balance&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;sync.RWMutex&lt;/code&gt;可以限制写操作，而允许多个读操作同时进行。&lt;code&gt;RLock&lt;/code&gt;方法开启，&lt;code&gt;RUnlock&lt;/code&gt;关闭互斥锁。注意，只在确定没有对共享变量写操作发生的时候使用&lt;code&gt;RLock&lt;/code&gt;方法，我们不能简单的假设一个&lt;strong&gt;逻辑&lt;/strong&gt;读操作，在背后没有注入写入缓存或更新计数器等行为。如果不确定，请使用完整的互斥锁。&lt;/p&gt;
&lt;p&gt;同时，&lt;code&gt;sync.RWMutex&lt;/code&gt;只在大多数读操作在争用锁时会比较合适。其更复杂的实现，让它在其他场景下工作慢于普通的互斥锁。&lt;/p&gt;
&lt;h3 id=&#34;内存同步&#34;&gt;&lt;a href=&#34;#内存同步&#34; class=&#34;headerlink&#34; title=&#34;内存同步&#34;&gt;&lt;/a&gt;内存同步&lt;/h3&gt;&lt;p&gt;上面提到的对于&lt;code&gt;Balance&lt;/code&gt;这个只读的函数也使用的互斥锁或者信道来限制多个goroutine访问共享变量，其中一个明显的原因是：读取操作发生在写操作如&lt;code&gt;Withdraw&lt;/code&gt;或&lt;code&gt;Deposit&lt;/code&gt;中间时，也会造成问题。另一个不那么明显的原因是，类似互斥锁、信道这种同步操作也会同步内存。&lt;/p&gt;
&lt;p&gt;简单点说，在现代CPU架构中，多个处理器内很可能有缓存，每个goroutine对共享变量的修改很可能在多个缓存中，而对其他goroutine不可见，直到同步操作把缓存中的修改同步到主内存中，保证对所有goroutine可见且一致。&lt;/p&gt;
&lt;p&gt;同一个goroutine内部是串行稳定的，但goroutine之间无法保证顺序。还有一种&lt;strong&gt;错误&lt;/strong&gt;认识，goroutine的代码会&lt;strong&gt;逐行交错&lt;/strong&gt;（interleaving）执行。但在现代的CPU架构和编译器中，并不是这么实现的。总而言之，把对变量的使用限制在同一个goroutine内，对其他变量使用互斥锁。&lt;/p&gt;
&lt;h3 id=&#34;懒初始化（sync-Once）&#34;&gt;&lt;a href=&#34;#懒初始化（sync-Once）&#34; class=&#34;headerlink&#34; title=&#34;懒初始化（sync.Once）&#34;&gt;&lt;/a&gt;懒初始化（&lt;code&gt;sync.Once&lt;/code&gt;）&lt;/h3&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; icons &lt;span class=&#34;keyword&#34;&gt;map&lt;/span&gt;[&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;]image.Image&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;loadIcons&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 初始化写操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Icon&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(name &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; image.Image &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; icons == &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        loadIcons()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; icons[name]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;通常来说，我们会推迟一个计算量比较大的初始化操作到使用时才进行，如上面&lt;code&gt;Icon&lt;/code&gt;函数做的那样。很显然&lt;code&gt;Icon&lt;/code&gt;函数不是并发安全的。在其中混有读写操作，且和外界共享icons变量。这时我们需要在初始化的时候对&lt;code&gt;loadIcons&lt;/code&gt;函数加锁。加锁时要区分&lt;code&gt;icons&lt;/code&gt;的是否初始化状态，可以对只读操作使用读&amp;#x2F;写锁，再对写入操作使用互斥锁。像下面这样：&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; mu sync.RWMutex&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Icon&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(name &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; image.Image &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    mu.RLock()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; icons == &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        icon := icons[name]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        mu.RUnlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; icon&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    mu.RUnlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    mu.Lock()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 因为在Lock前，有短暂的Unlock的时间段，有可能会被其他goroutine初始化，因此需要再次判断&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; icons == &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        loadIcons()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    icon := icons[name]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    mu.Unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; icon&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;实际上，上面就是一个只做一次的操作（通常是初始化操作），为了维护一个是否完成的bool值，额外增加了一些操作，较容易出错。go对这种情况提供了&lt;code&gt;sync.Once&lt;/code&gt;支持，在&lt;code&gt;Do&lt;/code&gt;方法中传入只执行的函数，这个互斥锁会在第一次执行时上锁并将对变量的改动同步到其他goroutine中，同时维护一个bool值，在后续的执行中，直接跳过这一步。重写之后的&lt;code&gt;Icon&lt;/code&gt;变得简单了很多。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; loadIconsOnce sync.Once&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; icons &lt;span class=&#34;keyword&#34;&gt;map&lt;/span&gt;[&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;]image.Image&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 并发安全&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Icon&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(name &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; image.Image &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    loadIconsOnce.Do(loadIcons)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; icons[name]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;竞险检测器&#34;&gt;&lt;a href=&#34;#竞险检测器&#34; class=&#34;headerlink&#34; title=&#34;竞险检测器&#34;&gt;&lt;/a&gt;竞险检测器&lt;/h3&gt;&lt;p&gt;很多时候goroutine访问共享变量导致的竞险并不那么容易发现和避免。Go的配套工具链提供了&lt;code&gt;-race&lt;/code&gt;标志位用来检查程序中可能存在的竞险情况，在&lt;code&gt;go run&lt;/code&gt;, &lt;code&gt;go build&lt;/code&gt;, &lt;code&gt;go test&lt;/code&gt;后添加都可以。它可以记录对共享变量所做的所有读写操作以及对应的goroutine，还有程序中由&lt;code&gt;sync&lt;/code&gt;和信道触发的同步操作。竞险检测器在分析这些事件流的时候可以给出包含共享变量和对其读写goroutine报告。在绝大多数情况下已经足够你查问题了。&lt;/p&gt;
&lt;p&gt;竞险检测器只能报告程序覆盖到代码的竞险情况，所以尽量让测试覆盖到所有代码。竞险检查会稍微占用更多时间和内存，但是是可以接受的。&lt;/p&gt;
&lt;h3 id=&#34;样例：并发无阻塞缓存&#34;&gt;&lt;a href=&#34;#样例：并发无阻塞缓存&#34; class=&#34;headerlink&#34; title=&#34;样例：并发无阻塞缓存&#34;&gt;&lt;/a&gt;样例：并发无阻塞缓存&lt;/h3&gt;&lt;p&gt;实现这么一个并发数据结构，大抵有两种构建思路：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用有锁的共享变量&lt;/li&gt;
&lt;li&gt;借助信道和通信实现串行化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不同场景下，他们实现的复杂度可能会稍有不同。&lt;/p&gt;
&lt;h3 id=&#34;goroutine和线程&#34;&gt;&lt;a href=&#34;#goroutine和线程&#34; class=&#34;headerlink&#34; title=&#34;goroutine和线程&#34;&gt;&lt;/a&gt;goroutine和线程&lt;/h3&gt;&lt;p&gt;goroutine和线程有些很多小地方上的区别，这些区别让goroutine和线程有着较大区别。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线程的栈一般是固定的（通常是2MB），goroutine的栈是灵活的，从较少的大小开始（通常是2KB），可以扩大和缩小&lt;/li&gt;
&lt;li&gt;goroutine有自己的调度机制（m:n调度），把m个goroutine复用或调度到n的操作系统的线程&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GOMAXPROCS&lt;/code&gt;环境变量决定了Go代码可以使用多少个操作系统线程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后，goroutine没有其他操作系统或编程语言中用来支持多线程的为每个线程添加一个唯一标识的设计。这个是特别设计的，用来避免线程池的滥用。Go更推荐只由入参显式决定函数表现的风格，避免让函数收到执行线程的影响。&lt;/p&gt;
&lt;h2 id=&#34;包和Go工具&#34;&gt;&lt;a href=&#34;#包和Go工具&#34; class=&#34;headerlink&#34; title=&#34;包和Go工具&#34;&gt;&lt;/a&gt;包和Go工具&lt;/h2&gt;&lt;p&gt;如今中小型的程序可能会包含10000个函数，其中绝大多数来自其他人的包。包可以将程序中相互关联的特性整理到独立的单元中，进而在组织或社区中重用、分享。包名和导出的类型、变量、函数名都应简短清晰，Go使用首字母大小写控制可见性，从而掩盖实现细节，保证稳定性或实现互斥锁。&lt;/p&gt;
&lt;p&gt;Go的构建速度算是比较快的。主要有3个原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go在每个文件开头都显式列出了引入的文件，无需读取整个文件&lt;/li&gt;
&lt;li&gt;Go中没有引入是一个有向无环图，因此可以并行编译&lt;/li&gt;
&lt;li&gt;编译好的Go包的目标文件会包含自身和&lt;strong&gt;自身的依赖&lt;/strong&gt;，每一次的import只需读取一遍目标文件即可&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;import路径&#34;&gt;&lt;a href=&#34;#import路径&#34; class=&#34;headerlink&#34; title=&#34;import路径&#34;&gt;&lt;/a&gt;import路径&lt;/h3&gt;&lt;p&gt;Go的语言规范并没有规定import路径，路径的实现是由相关工具决定的。但是为了避免冲突，除了标准包以外的包，都需要以域名或组织名开头，如&lt;code&gt;encoding/json&lt;/code&gt;，&lt;code&gt;golang.org/x/net/html&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;声明和import&#34;&gt;&lt;a href=&#34;#声明和import&#34; class=&#34;headerlink&#34; title=&#34;声明和import&#34;&gt;&lt;/a&gt;声明和import&lt;/h3&gt;&lt;p&gt;每一个Go文件的开头，都需要以&lt;code&gt;package xxx&lt;/code&gt;的形式标识包名。通常，包名是import路径的最后一段。但是有3个例外情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;main&lt;/code&gt;包名表示告诉&lt;code&gt;go build&lt;/code&gt;需要构建一个可执行文件&lt;/li&gt;
&lt;li&gt;目录下包含&lt;code&gt;_test&lt;/code&gt;后缀文件名的，在执行&lt;code&gt;go test&lt;/code&gt;时会额外被构建用于测试的包&lt;/li&gt;
&lt;li&gt;有的报名后面会跟版本号，这个时候以没有版本号的作为包名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在import时，如果引入包较多时，可以用圆括号列表形式引入。列表间可以用空行隔开，通常用来分组域名，这个在按照字母顺序排序import时有用——排序会在每组内进行。如果不同域内的包名一样，如&lt;code&gt;math/rand&lt;/code&gt;和&lt;code&gt;crypto/rand&lt;/code&gt;，可以用重命名引入（renaming import）。像下面这样&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;crypto/rand&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    mrand &lt;span class=&#34;string&#34;&gt;&amp;quot;math/rand&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这种重命名只在当前文件内有效。重命名通常可以避免包名冲突，或者简化一些复杂的包名，在简化时，注意对同样的原名，使用同样的缩写名。&lt;code&gt;go build&lt;/code&gt;会报告编译中循环依赖。&lt;/p&gt;
&lt;h3 id=&#34;空导入&#34;&gt;&lt;a href=&#34;#空导入&#34; class=&#34;headerlink&#34; title=&#34;空导入&#34;&gt;&lt;/a&gt;空导入&lt;/h3&gt;&lt;p&gt;有的时候，我们的引入的&lt;strong&gt;目的在包的副作用&lt;/strong&gt;，如其中全局变量的初始化或&lt;code&gt;init&lt;/code&gt;函数的执行。这个时候可以用空白标识符&lt;code&gt;_&lt;/code&gt;进行重命名即可，如&lt;code&gt;import _ &amp;quot;image/png&amp;quot;&lt;/code&gt;。这种即空导入。&lt;/p&gt;
&lt;p&gt;在书中例子里，对&lt;code&gt;image/png&lt;/code&gt;的空导入，实现了png解码相关配置的全局注册（&lt;code&gt;image.RegisterFormat&lt;/code&gt;），从而可以解码png图片。类似的思路在&lt;code&gt;database/sql&lt;/code&gt;包中也有用到。&lt;/p&gt;
&lt;h3 id=&#34;命名-1&#34;&gt;&lt;a href=&#34;#命名-1&#34; class=&#34;headerlink&#34; title=&#34;命名&#34;&gt;&lt;/a&gt;命名&lt;/h3&gt;&lt;p&gt;对于包名，有下面一些建议的命名规范：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用简短明了的包名&lt;/li&gt;
&lt;li&gt;使用有描述性且没有歧义的名字，且最好不要使用经常会用来命名局部变量的包名，如&lt;code&gt;path&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;包名通常使用单数形式，需要和其他情况区分开时，如&lt;code&gt;strings&lt;/code&gt;，&lt;code&gt;bytes&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;避免使用具有隐藏含义的名称，如&lt;code&gt;temp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于包中的成员名：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;考虑和包名一起构成完整的含义，不需要包含包名，如&lt;code&gt;flat.Int&lt;/code&gt;，&lt;code&gt;http.Get&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;有的包名表示一种类型，在内部会有对应的类型定义和&lt;code&gt;New&lt;/code&gt;操作&lt;/li&gt;
&lt;li&gt;即使对于有着很多成员的包，其最关键的几个方法仍然是最简单的&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Go工具&#34;&gt;&lt;a href=&#34;#Go工具&#34; class=&#34;headerlink&#34; title=&#34;Go工具&#34;&gt;&lt;/a&gt;Go工具&lt;/h3&gt;&lt;p&gt;Go工具像一个瑞士军刀，它的各个子命令提供了诸如包管理器（&lt;code&gt;go get&lt;/code&gt;）、构建系统（&lt;code&gt;go build&lt;/code&gt;, &lt;code&gt;go run&lt;/code&gt;, &lt;code&gt;go install&lt;/code&gt;）、测试驱动（&lt;code&gt;go test&lt;/code&gt;）等等。&lt;/p&gt;
&lt;h4 id=&#34;工作区组织&#34;&gt;&lt;a href=&#34;#工作区组织&#34; class=&#34;headerlink&#34; title=&#34;工作区组织&#34;&gt;&lt;/a&gt;工作区组织&lt;/h4&gt;&lt;p&gt;日常经常使用的是&lt;code&gt;GOPATH&lt;/code&gt;环境变量，用于说明当前工作区的根路径。&lt;code&gt;GOROOT&lt;/code&gt;表示go源码的根路径，&lt;code&gt;GOOS&lt;/code&gt;表示操作系统，&lt;code&gt;GOARCH&lt;/code&gt;表示处理器架构。更多配置可以执行&lt;code&gt;go env&lt;/code&gt;查看。&lt;/p&gt;
&lt;h4 id=&#34;包下载&#34;&gt;&lt;a href=&#34;#包下载&#34; class=&#34;headerlink&#34; title=&#34;包下载&#34;&gt;&lt;/a&gt;包下载&lt;/h4&gt;&lt;p&gt;执行&lt;code&gt;go get&lt;/code&gt;下载，下载时不仅包含源码的拷贝，还包含源码的版本控制信息。Go工具会自动判断流行的代码托管方式。对于不那么有名的托管网站，需要自己显式说明保本控制的协议，可以通过&lt;code&gt;go help importpath&lt;/code&gt;查看细节。&lt;/p&gt;
&lt;p&gt;Go工具在访问包的导入路径域名如&lt;code&gt;golang.org&lt;/code&gt;时，会试图从网页的&lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt;标签中寻找类似下面这样指示目标路径的信息。&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;go-import&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;content&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;golang.org/x/net git https://go.googlesource.com/net&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;另外，执行&lt;code&gt;go get -u&lt;/code&gt;时会获取所有包的最新版本，在需要锁定版本时比较麻烦，可以借助&lt;em&gt;vendor&lt;/em&gt;解决，在&lt;code&gt;go help gopath&lt;/code&gt;中有介绍。&lt;/p&gt;
&lt;h4 id=&#34;包构建&#34;&gt;&lt;a href=&#34;#包构建&#34; class=&#34;headerlink&#34; title=&#34;包构建&#34;&gt;&lt;/a&gt;包构建&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;go build&lt;/code&gt;构建时，对于库类型代码只会检查错误，对于main包，则会构建可执行文件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一个目录包含一个包&lt;/strong&gt;，因此导入时，要么指定导入路径，要么指定相对路径，否则会以当前目录为基础构建。构建得到的可执行文件名称是go文件的前缀。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;go build&lt;/code&gt;构建时，会丢弃已编译的代码，只保留可执行文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;go install&lt;/code&gt;构建时，会保留已编译的代码，编译好的包位于&lt;code&gt;$GOPATH/pkg&lt;/code&gt;下，编译得到的执行文件位于&lt;code&gt;$GOPATH/bin&lt;/code&gt;下。再之后，&lt;code&gt;go build&lt;/code&gt;和&lt;code&gt;go install&lt;/code&gt;不会编译未被改变的包或命令，从而让执行过程更快。&lt;code&gt;go build -i&lt;/code&gt;可以安装项目的所有依赖&lt;/li&gt;
&lt;li&gt;修改&lt;code&gt;GOOS&lt;/code&gt;和&lt;code&gt;GOARCH&lt;/code&gt;可以改变包目标的平台和架构，默认只会针对当前平台和架构打包。&lt;/li&gt;
&lt;li&gt;文件末尾以诸如&lt;code&gt;_linux.go&lt;/code&gt;，&lt;code&gt;axm_amd64.s&lt;/code&gt;结尾时，只会在打对应平台包的时候才会编译此文件。另外还可以以&lt;code&gt;// +build linux darwin&lt;/code&gt;的注释形式做到更好的细粒度。&lt;code&gt;// +build ignore&lt;/code&gt;表示编译时跳过该文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;go doc go/build&lt;/code&gt;下有更多介绍。&lt;/p&gt;
&lt;h4 id=&#34;包文档&#34;&gt;&lt;a href=&#34;#包文档&#34; class=&#34;headerlink&#34; title=&#34;包文档&#34;&gt;&lt;/a&gt;包文档&lt;/h4&gt;&lt;p&gt;Go建议在导出的包成员和包声明前使用描述用途和用法的注释。注释宜简单且清晰，对于大段的注释，使用同名的文档文件（通常名为&lt;code&gt;doc.go&lt;/code&gt;）进行说明。如果行为本身就足够明显，就不需要写注释。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;go doc&lt;/code&gt;命令可以查看包、包成员、包方法的文档。还有个很相似的命令&lt;code&gt;godoc&lt;/code&gt;，它可以托管一个能够查看当前工作目录下文档的服务器。&lt;/p&gt;
&lt;h4 id=&#34;内部包&#34;&gt;&lt;a href=&#34;#内部包&#34; class=&#34;headerlink&#34; title=&#34;内部包&#34;&gt;&lt;/a&gt;内部包&lt;/h4&gt;&lt;p&gt;有些包可能希望导出只对个别信任的包可见，对于这种包，导入路径中需要包含&lt;code&gt;internal&lt;/code&gt;。这些内部包只对&lt;code&gt;internal&lt;/code&gt;的父目录下文件可见，如&lt;code&gt;net/http/internal/chunked&lt;/code&gt;对&lt;code&gt;net/http/httputil&lt;/code&gt;可见，但对&lt;code&gt;net/url&lt;/code&gt;不可见。&lt;/p&gt;
&lt;h4 id=&#34;查询包&#34;&gt;&lt;a href=&#34;#查询包&#34; class=&#34;headerlink&#34; title=&#34;查询包&#34;&gt;&lt;/a&gt;查询包&lt;/h4&gt;&lt;p&gt;&lt;code&gt;go list&lt;/code&gt;工具可以查询包的导入路径。使用&lt;code&gt;...&lt;/code&gt;通配符可以查到更多内容。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;go list github.com/go-sql-driver/mysql&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;go list ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;go list gopl.io/ch3/...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;go list ...xml...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;结合&lt;code&gt;-json&lt;/code&gt;可以打印json格式的包详情，或者结合&lt;code&gt;-f&lt;/code&gt;加上&lt;code&gt;text/template&lt;/code&gt;语法打印特定格式的字符串。&lt;/p&gt;
&lt;p&gt;更多使用方式查看&lt;code&gt;go help list&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;测试&#34;&gt;&lt;a href=&#34;#测试&#34; class=&#34;headerlink&#34; title=&#34;测试&#34;&gt;&lt;/a&gt;测试&lt;/h2&gt;&lt;p&gt;同行评审和测试是两种避免代码错误的方式。Go尽量让写自动化测试代码不是一件很困难的事。在Go中进行测试，你需要了解的只不过是普通的Go语法规范和一些约定而已。&lt;/p&gt;
&lt;h3 id=&#34;go-test工具&#34;&gt;&lt;a href=&#34;#go-test工具&#34; class=&#34;headerlink&#34; title=&#34;go test工具&#34;&gt;&lt;/a&gt;&lt;code&gt;go test&lt;/code&gt;工具&lt;/h3&gt;&lt;p&gt;Go的测试都借助&lt;code&gt;go test&lt;/code&gt;完成。所有和测试相关的文件必须以&lt;code&gt;_test.go&lt;/code&gt;结尾，这些文件不会在打包时包括进去，只会在运行测试时运行。在文件中有三类函数会被特殊处理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;测试函数：必须以&lt;code&gt;Test&lt;/code&gt;开头，表示检测一些逻辑的正确性，运行后会给出&lt;code&gt;PASS&lt;/code&gt;或&lt;code&gt;FAIL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;基准测试函数：必须以&lt;code&gt;Benchmark&lt;/code&gt;开头，表示测量一些操作的性能，运行后会给出运行时间&lt;/li&gt;
&lt;li&gt;样例函数：必须以&lt;code&gt;Example&lt;/code&gt;开头，表示提供一些格式化的文档&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;go test&lt;/code&gt;运行完成时，会生成一个临时的&lt;code&gt;main&lt;/code&gt;包，构建并运行，最后给出结果并清理现场&lt;/p&gt;
&lt;h3 id=&#34;测试函数&#34;&gt;&lt;a href=&#34;#测试函数&#34; class=&#34;headerlink&#34; title=&#34;测试函数&#34;&gt;&lt;/a&gt;测试函数&lt;/h3&gt;&lt;p&gt;测试函数均以&lt;code&gt;Test&lt;/code&gt;开头，函数入参是test包提供的用来打印错误或其他日志的工具集。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;testing&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;TestSin&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(t *test.T)&lt;/span&gt;&lt;/span&gt; &amp;#123; &lt;span class=&#34;comment&#34;&gt;/* ... */&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;接着就像写普通Go代码一样去执行case就行了。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; word&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;testing&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;TestPalindrome&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(t *testing.T)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; !IsPalindrome(&lt;span class=&#34;string&#34;&gt;&amp;quot;kayak&amp;quot;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        t.Error(&lt;span class=&#34;string&#34;&gt;`IsPalindrome(&amp;quot;kayak&amp;quot;) = false`&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;运行时，结合&lt;code&gt;-v&lt;/code&gt;标记可以打印详细信息，结合&lt;code&gt;-run&lt;/code&gt;标识可以只运行符合指定模式的case。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;go &lt;span class=&#34;built_in&#34;&gt;test&lt;/span&gt; -v -run=&lt;span class=&#34;string&#34;&gt;&amp;quot;French|Canal&amp;quot;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;case之间的代码相似性很高，建议用配置的方式批量运行case，减少模板代码书写。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;TestPalindrome&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(t *tesing.T)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; tests = []&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        input &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        want &lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;quot;A man, a plan, a canal: Panama&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; _, test := &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; tests &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; got := IsPalindrome(test.input); got != test.want &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            t.Errorf(&lt;span class=&#34;string&#34;&gt;&amp;quot;IsPalindrome(%q) = %v&amp;quot;&lt;/span&gt;, test.input, got)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;go test&lt;/code&gt;在运行测试时，每个case的错误不会中断其他case的执行，也不会panic，来保证一次运行能获得所有case的执行结果。对于需要中断的情况，可以使用&lt;code&gt;t.Fatal&lt;/code&gt;或者&lt;code&gt;t.Fatalf&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;随机化测试&#34;&gt;&lt;a href=&#34;#随机化测试&#34; class=&#34;headerlink&#34; title=&#34;随机化测试&#34;&gt;&lt;/a&gt;随机化测试&lt;/h4&gt;&lt;p&gt;不同于上面提到的选择特定case进行测试。随机化测试可以覆盖更广的范围。在验证随机化测试是否符合预期上，有两种思路：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用另外一种方式给出结果，对比两种方式的结果是否相同&lt;/li&gt;
&lt;li&gt;使用固定的模式生成随机化case，使其预期结果可以事先推导出来&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，在随机化测试时还要考虑能否再次复现问题case的情况。&lt;/p&gt;
&lt;h4 id=&#34;测试一个命令&#34;&gt;&lt;a href=&#34;#测试一个命令&#34; class=&#34;headerlink&#34; title=&#34;测试一个命令&#34;&gt;&lt;/a&gt;测试一个命令&lt;/h4&gt;&lt;p&gt;对于&lt;code&gt;go test&lt;/code&gt;而言，&lt;code&gt;main&lt;/code&gt;包只是一个库，可以将&lt;code&gt;main&lt;/code&gt;函数中需要测试的逻辑抽离成函数，在&lt;code&gt;*_test.go&lt;/code&gt;中测试即可。最好将&lt;code&gt;log.Fatal&lt;/code&gt;或者&lt;code&gt;os.Exit&lt;/code&gt;这种中断程序执行的语句放在&lt;code&gt;main&lt;/code&gt;函数中，避免中断测试流程。&lt;/p&gt;
&lt;h4 id=&#34;白盒测试&#34;&gt;&lt;a href=&#34;#白盒测试&#34; class=&#34;headerlink&#34; title=&#34;白盒测试&#34;&gt;&lt;/a&gt;白盒测试&lt;/h4&gt;&lt;p&gt;白盒测试即在对测试对象有清楚认识的情形下进行测试；黑盒测试则相反，更站在客户端的角度去测试包。在白盒测试下，我们可以修改原先包的一些实现方式，使之更易被测试。比如，可以将其中会有副作用的部分，如发邮件、写数据库、发短信的函数覆盖。（类似mock的思路）&lt;/p&gt;
&lt;p&gt;但是，在覆盖后，别忘了还原回去，避免影响后续测试。类似下面这样：&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;TestCheckQuotaNotificationUser&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(t *testing.T)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    saved := notifyUser&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;defer&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123; notifyUser = saved &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    notifyUser = &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(user, msg &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        notifiedUser, notifiedMsg = user, msg&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这种覆盖方式正常情况下不会有风险，因为&lt;code&gt;go test&lt;/code&gt;通常不会并行运行多个测试。&lt;/p&gt;
&lt;h4 id=&#34;外部测试包&#34;&gt;&lt;a href=&#34;#外部测试包&#34; class=&#34;headerlink&#34; title=&#34;外部测试包&#34;&gt;&lt;/a&gt;外部测试包&lt;/h4&gt;&lt;p&gt;上面提到的都是直接在包下新建&lt;code&gt;*_test.go&lt;/code&gt;文件的方式进行测试。有些情况下，如果测试文件内需要引用更高层包，会产生循环引用，这是上一章提到不允许的。这时可以定义为外部包。如：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;net/url&lt;/code&gt;下的测试文件导入了&lt;code&gt;net/http&lt;/code&gt;包，而&lt;code&gt;net/http&lt;/code&gt;包中又导入了&lt;code&gt;net/url&lt;/code&gt;。这个时候在&lt;code&gt;net/url&lt;/code&gt;下的测试文件使用&lt;code&gt;package url_test&lt;/code&gt;声明，表示是另一个包&lt;code&gt;net/url_test&lt;/code&gt;。然后，通过导入&lt;code&gt;net/url&lt;/code&gt;和&lt;code&gt;net/http&lt;/code&gt;的方式进行测试。就可以避免循环引用。&lt;/p&gt;
&lt;p&gt;可以通过&lt;code&gt;go list -f&lt;/code&gt;指定&lt;code&gt;.GoFiles&lt;/code&gt;，&lt;code&gt;.TestGoFiles&lt;/code&gt;和&lt;code&gt;.XTestGoFiles&lt;/code&gt;分别查看包中的源文件、测试文件和外部测试包文件。&lt;/p&gt;
&lt;p&gt;然而，外部测试包并不能访问到包内对外不可见的变量或函数。这个时候，可以在包内创建一个后门测试文件，用于导出一些内部变量或函数对外部包测试可见，通常命名为&lt;code&gt;export_test.go&lt;/code&gt;。这类文件内不包含实际的测试。如&lt;code&gt;fmt&lt;/code&gt;包下的&lt;code&gt;export_test.go&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; fmt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; IsSpace = isSpace&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;写高效的测试&#34;&gt;&lt;a href=&#34;#写高效的测试&#34; class=&#34;headerlink&#34; title=&#34;写高效的测试&#34;&gt;&lt;/a&gt;写高效的测试&lt;/h4&gt;&lt;p&gt;Go在设计上和其他很多语言不同，并不包含一个大而全的测试框架，也没有创建、清除操作，和常用的断言、判断方法等。Go认为写case是作者自己的事，而且就像写普通的程序一样，不要有死记硬背和长篇大论，只需简明扼要地表达测试意图。&lt;/p&gt;
&lt;p&gt;在写测试代码时，避免过早抽象，先想着把功能实现，然后再想怎么通过抽象减少重复和复杂度。&lt;/p&gt;
&lt;h4 id=&#34;避免“脆弱”的测试&#34;&gt;&lt;a href=&#34;#避免“脆弱”的测试&#34; class=&#34;headerlink&#34; title=&#34;避免“脆弱”的测试&#34;&gt;&lt;/a&gt;避免“脆弱”的测试&lt;/h4&gt;&lt;p&gt;有两种应用：一种是真正bug很多的（buggy），另一种是合理改动也过不了case的（brittle）。而这里过不了case可能只是因为判断逻辑写的不够宽容，死抠细节导致很容易过时。避免这种情况一个很直接的办法是只检查你关心的特性，使用更简单和时间稳定的方式检查，如不要依赖字符串匹配。去检查本质。&lt;/p&gt;
&lt;h3 id=&#34;覆盖率&#34;&gt;&lt;a href=&#34;#覆盖率&#34; class=&#34;headerlink&#34; title=&#34;覆盖率&#34;&gt;&lt;/a&gt;覆盖率&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Testing shows the presence, not the absence of bugs —— Edsger Dijkstra&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;覆盖率一定程度上能对测试的覆盖程度有启发性的指示作用。使用&lt;code&gt;go test -coverprofile&lt;/code&gt;可以指定覆盖率数据输出，如果不需要输出，只看摘要，可以只用&lt;code&gt;go test -cover&lt;/code&gt;。使用&lt;code&gt;go tool cover&lt;/code&gt;可以显示覆盖率使用介绍。&lt;/p&gt;
&lt;p&gt;最后要说明的是，被覆盖到的代码并不是没有bug，测试是一种&lt;strong&gt;务实&lt;/strong&gt;的努力。它是在写测试代价和失败代价的中间的一个折中。&lt;/p&gt;
&lt;h3 id=&#34;性能测试函数&#34;&gt;&lt;a href=&#34;#性能测试函数&#34; class=&#34;headerlink&#34; title=&#34;性能测试函数&#34;&gt;&lt;/a&gt;性能测试函数&lt;/h3&gt;&lt;p&gt;这类函数都以&lt;code&gt;Benchmark&lt;/code&gt;开头，和测试函数类似，函数入参是&lt;code&gt;*testing.B&lt;/code&gt;类型的变量。默认情况下，不会执行任何性能测试，需要指定&lt;code&gt;-bench&lt;/code&gt;值，去匹配对应函数执行，“&lt;code&gt;.&lt;/code&gt;”表示匹配所有。如&lt;code&gt;go test -bench=.&lt;/code&gt;性能测试函数写法如下：&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;testing&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;BenchmarkIsPalindrome&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(b *testing.B)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i := &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; b.N; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        IsPalindrome(&lt;span class=&#34;string&#34;&gt;&amp;quot;A man, a plan, a canal: Panama&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;之所以需要自己在基准测试函数中写循环，而不集成在测试驱动中，是避免一些一次性操作影响执行时间测量。&lt;code&gt;-benchmem&lt;/code&gt;标识会显示内存分配的使用情况。性能测试函数可以用来对比两种策略或算法的相对时间优劣，以及通过调整循环次数，整体上考察代码设计。&lt;/p&gt;
&lt;h3 id=&#34;性能侧写（Profilling）&#34;&gt;&lt;a href=&#34;#性能侧写（Profilling）&#34; class=&#34;headerlink&#34; title=&#34;性能侧写（Profilling）&#34;&gt;&lt;/a&gt;性能侧写（Profilling）&lt;/h3&gt;&lt;p&gt;性能测试函数能帮你发现整体的性能好坏，但不能告诉你哪里做得不够好。&lt;/p&gt;
&lt;p&gt;Knuth曾说过“不要过早优化”，然而结合上下文的原话的意思则是，寻找性能优化点并不那么容易，程序员们在写需求前浪费了大量时间在寻找优化点上，先把事情做出来，不要杞人忧天过早优化。但是优秀的程序员会努力找到优化点并改善之。&lt;/p&gt;
&lt;p&gt;寻找关键点的方式就叫&lt;em&gt;profiling&lt;/em&gt;。profile通过采样的方式给出占用时间、资源最多的对象，从而可以对应去优化。Go提供3种profile&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU profile，标记占用CPU时间最长的函数&lt;/li&gt;
&lt;li&gt;heap profile，标记分配内存最多的声明&lt;/li&gt;
&lt;li&gt;blocking profile，标记阻塞goroutine时间最久的操作&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对应在&lt;code&gt;go test&lt;/code&gt;上的标识为&lt;code&gt;-cpuprofile&lt;/code&gt;，&lt;code&gt;-memprofile&lt;/code&gt;，&lt;code&gt;-blockprofile&lt;/code&gt;。借助&lt;code&gt;go tool pprof&lt;/code&gt;可以打印侧写数据，以及可视化数据。&lt;/p&gt;
&lt;h3 id=&#34;样例函数&#34;&gt;&lt;a href=&#34;#样例函数&#34; class=&#34;headerlink&#34; title=&#34;样例函数&#34;&gt;&lt;/a&gt;样例函数&lt;/h3&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ExampleIsPalindrome&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fmt.Println(IsPalindrome(&lt;span class=&#34;string&#34;&gt;&amp;quot;A man, a plan, a canal: Panama&amp;quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fmt.Println(IsPalindrome(&lt;span class=&#34;string&#34;&gt;&amp;quot;palindrome&amp;quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Output:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;最后一种会被&lt;code&gt;go test&lt;/code&gt;特殊处理的是样例函数，这类函数以&lt;code&gt;Example&lt;/code&gt;开头，并没有入参，也没有返回。它的作用主要有以下3点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文档记录，且更能传达意图，同时由于样例函数是实际的Go代码，对比文档，随着代码演化，不会有过期风险。命名单纯叫&lt;code&gt;Example&lt;/code&gt;的函数作为整个包的样例函数。&lt;/li&gt;
&lt;li&gt;函数最火包含&lt;code&gt;// Output:&lt;/code&gt;注释的话，&lt;code&gt;go test&lt;/code&gt;会检查标准输出是否能匹配注释中的输出&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;godoc&lt;/code&gt;中可以作为playground，提供给用户动态编辑、运行的功能&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;反射&#34;&gt;&lt;a href=&#34;#反射&#34; class=&#34;headerlink&#34; title=&#34;反射&#34;&gt;&lt;/a&gt;反射&lt;/h2&gt;&lt;p&gt;反射能在&lt;strong&gt;运行时&lt;/strong&gt;不知道变量类型情况下去修改和查询变量值。反射还能让我们将类型作为第一成员的值来使用。类似&lt;code&gt;fmt.Sprintf&lt;/code&gt;和&lt;code&gt;text/template&lt;/code&gt;中就有用到这个特性&lt;/p&gt;
&lt;h3 id=&#34;reflect-Type和reflect-Value&#34;&gt;&lt;a href=&#34;#reflect-Type和reflect-Value&#34; class=&#34;headerlink&#34; title=&#34;reflect.Type和reflect.Value&#34;&gt;&lt;/a&gt;&lt;code&gt;reflect.Type&lt;/code&gt;和&lt;code&gt;reflect.Value&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;reflect.Type&lt;/code&gt;和&lt;code&gt;reflect.Value&lt;/code&gt;分别表示变量的类型和值。其中类型通过&lt;code&gt;reflect.TypeOf&lt;/code&gt;得到，得到的&lt;code&gt;reflect.Type&lt;/code&gt;可以保存任何类型值。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;t := reflect.TypeOf(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;) &lt;span class=&#34;comment&#34;&gt;// a reflect.Type&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fmt.Println(t.String()) &lt;span class=&#34;comment&#34;&gt;// &amp;quot;int&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fmt.Println(t) &lt;span class=&#34;comment&#34;&gt;// &amp;quot;int&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;返回的类型总是interface的动态类型，所以总是确切类型。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;reflect.ValueOf&lt;/code&gt;可以得到任意类型的变量值。返回的&lt;code&gt;reflect.Value&lt;/code&gt;满足&lt;code&gt;fmt.Stringer&lt;/code&gt;接口，不过打印出来的是变量类型。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;v := reflect.ValueOf(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;) &lt;span class=&#34;comment&#34;&gt;// a reflect.Value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fmt.Println(v) &lt;span class=&#34;comment&#34;&gt;// &amp;quot;3&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fmt.Printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%v\n&amp;quot;&lt;/span&gt;, v) &lt;span class=&#34;comment&#34;&gt;// &amp;quot;3&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fmt.Println(v.String()) &lt;span class=&#34;comment&#34;&gt;// &amp;quot;&amp;lt;int Value&amp;gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;reflect.Value.Interface&lt;/code&gt;方法返回一个保存相同值的&lt;code&gt;interface&amp;#123;&amp;#125;&lt;/code&gt;类型。它和&lt;code&gt;reflect.Value&lt;/code&gt;不同在于，一个&lt;code&gt;interface&amp;#123;&amp;#125;&lt;/code&gt;类型的变量掩盖了外部表现和内部实现细节，因此无从对其操作。&amp;#96;&amp;#96;reflect.Value&lt;code&gt;的&lt;/code&gt;Kind&amp;#96;方法可以返回类型的底层表示方法，因此使用时，可以只关心Go中定义的类型。&lt;/p&gt;
&lt;h3 id=&#34;递归值输出函数Display&#34;&gt;&lt;a href=&#34;#递归值输出函数Display&#34; class=&#34;headerlink&#34; title=&#34;递归值输出函数Display&#34;&gt;&lt;/a&gt;递归值输出函数&lt;code&gt;Display&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;利用上面提到的&lt;code&gt;Kind&lt;/code&gt;方法，可以实现递归打印任意类型值的函数。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(path &lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;, v reflect.Value)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt; v.Kind()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; reflect.Invalid:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        fmt.Printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%s = invalid\n&amp;quot;&lt;/span&gt;, path)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; reflect.Slice, reflect.Array:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i := &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; v.Len(); i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            display(fmt.Sprintf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%s[%d]&amp;quot;&lt;/span&gt;, path, i), v.Index(i))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; reflect.Struct:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i := &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; v.NumField(); i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            fieldPath := fmt.Sprintf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%s.%s&amp;quot;&lt;/span&gt;, path, v.Type().Field(i).Name)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            display(fieldPath, v.Field(i))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; reflect.Map:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; _, key := &lt;span class=&#34;keyword&#34;&gt;range&lt;/span&gt; v.MapKeys() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            display(fmt.Sprintf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%s[%s]&amp;quot;&lt;/span&gt;, path, formatAtom(key), v.MapIndex(key)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; reflect.Ptr:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; v.IsNil() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            fmt.Printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%s = nil\n&amp;quot;&lt;/span&gt;, path)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            display(fmt.Sprintf(&lt;span class=&#34;string&#34;&gt;&amp;quot;(*%s)&amp;quot;&lt;/span&gt;, path), v.Elem())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; reflect.Interface:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; v.IsNil() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            fmt.Printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%s = nil\n&amp;quot;&lt;/span&gt;, path)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            fmt.Printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%s.type = %s\n&amp;quot;&lt;/span&gt;, path, v.Elem().Type())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            display(path+&lt;span class=&#34;string&#34;&gt;&amp;quot;.value&amp;quot;&lt;/span&gt;, v.Elem())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt;: &lt;span class=&#34;comment&#34;&gt;// 基础类型、信道、函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        fmt.Printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%s = %s\n&amp;quot;&lt;/span&gt;, path, formatAtom(v))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上面用到了许多&lt;code&gt;reflect.Value&lt;/code&gt;的方法，不是所有的都安全：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;v.Index()&lt;/code&gt;和&lt;code&gt;v.Len()&lt;/code&gt;类似&lt;code&gt;len()&lt;/code&gt;和&lt;code&gt;[i]&lt;/code&gt;下标取值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v.NumbField()&lt;/code&gt;返回结构体中的字段数目，&lt;code&gt;v.Field(i)&lt;/code&gt;则返回第i位的&lt;code&gt;reflect.Value&lt;/code&gt;类型值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v.MapKeys()&lt;/code&gt;返回无序的map key&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v.IsNil()&lt;/code&gt;和&lt;code&gt;v.Elem()&lt;/code&gt;分别判断是否为空和获取值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上述方法在遇到有环的数据结构时，会无限打印，可以借助下一章里的&lt;code&gt;unsafe&lt;/code&gt;包解决。&lt;/p&gt;
&lt;h3 id=&#34;使用reflect-Value设置变量&#34;&gt;&lt;a href=&#34;#使用reflect-Value设置变量&#34; class=&#34;headerlink&#34; title=&#34;使用reflect.Value设置变量&#34;&gt;&lt;/a&gt;使用&lt;code&gt;reflect.Value&lt;/code&gt;设置变量&lt;/h3&gt;&lt;p&gt;Go中的变量都是有地址的，可以通过这个地址去修改变量的值。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;x := &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a := reflect.ValueOf(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b := reflect.ValueOf(x)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;c := reflect.ValueOf(&amp;amp;x)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;d := c.Elem() &lt;span class=&#34;comment&#34;&gt;// variable&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上面的&lt;code&gt;d&lt;/code&gt;即变量&lt;code&gt;x&lt;/code&gt;。借助这个方式我们可以用&lt;code&gt;Addr()&lt;/code&gt;获取地址，用&lt;code&gt;Interface()&lt;/code&gt;获取&lt;code&gt;interface&amp;#123;&amp;#125;&lt;/code&gt;类型的值，再使用类型断言转成具体的变量类型。像下面这样。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;px := d.Addr().Interface().(*&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;*px = &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fmt.Println(x) &lt;span class=&#34;comment&#34;&gt;// 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;又或者，可以通过&lt;code&gt;Set&lt;/code&gt;方法设置一个&lt;code&gt;reflect.Value&lt;/code&gt;。针对特定类型，还有&lt;code&gt;SetInt&lt;/code&gt;、&lt;code&gt;SetUint&lt;/code&gt;、&lt;code&gt;SetString&lt;/code&gt;这样的方法。注意，这些方法只使用在特定类型上，对于&lt;code&gt;interface&amp;#123;&amp;#125;&lt;/code&gt;或其他类型使用，会引起panic。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;d.Set(reflect.ValueOf(&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; y &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ry := reflect.ValueOf(&amp;amp;y).Elem()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ry.SetInt(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;) &lt;span class=&#34;comment&#34;&gt;// panic: SetInt called on interface Value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ry.SetInt(reflect.Value(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;)) &lt;span class=&#34;comment&#34;&gt;// OK, y = int(3)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;另外，反射不能更新那些没有对外导出的结构体字段，尽管这些字段可以在发射中读取到。&lt;code&gt;CanSet()&lt;/code&gt;可以判断一个&lt;code&gt;reflect.Value&lt;/code&gt;是否可以修改，类似的，&lt;code&gt;CanAddr()&lt;/code&gt;可以判断一个&lt;code&gt;reflect.Value&lt;/code&gt;是否可以获取到地址。&lt;/p&gt;
&lt;p&gt;利用上面的特性，可以实现encoding&amp;#x2F;json中类似的解析JSON字符串的效果。&lt;/p&gt;
&lt;h3 id=&#34;访问结构体的field-tag&#34;&gt;&lt;a href=&#34;#访问结构体的field-tag&#34; class=&#34;headerlink&#34; title=&#34;访问结构体的field tag&#34;&gt;&lt;/a&gt;访问结构体的field tag&lt;/h3&gt;&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; data &lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Labels []&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;`http:&amp;quot;l&amp;quot;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    MaxResults &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;`http:&amp;quot;max&amp;quot;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Exact &lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;`http:&amp;quot;x&amp;quot;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;我们在JSON一节提到，可以在结构体后使用&lt;em&gt;field tag&lt;/em&gt;作为JSON解析过程中的metadata。实际上，除了&lt;code&gt;json&lt;/code&gt;还可以设置其他tag。这个tag也可以通过反射特性拿到。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;reflect.Type&lt;/code&gt;的&lt;code&gt;Field()&lt;/code&gt;方法可以返回一个&lt;code&gt;reflect.StructField&lt;/code&gt;类型，其中包含了字段名、字段类型以及可选的标签。其中&lt;code&gt;Tag&lt;/code&gt;字段即field tag对应的字符串，它的&lt;code&gt;Get&lt;/code&gt;方法可以返回特定标识后的标签值。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Unpack&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(req *http.Request, ptr &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;error&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; err := req.ParseForm(); err != &lt;span class=&#34;literal&#34;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; err&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fields := &lt;span class=&#34;built_in&#34;&gt;make&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;map&lt;/span&gt;[&lt;span class=&#34;type&#34;&gt;string&lt;/span&gt;]reflect.Value)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    v := reflect.ValueOf(ptr).Elem()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i := &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; v.NumField(); i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        fieldInfo := v.Type().Field(i) &lt;span class=&#34;comment&#34;&gt;// reflect.StructField类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        tag := fieldInfo.Tag &lt;span class=&#34;comment&#34;&gt;// reflect.StructTag类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        name := tag.Get(&lt;span class=&#34;string&#34;&gt;&amp;quot;http&amp;quot;&lt;/span&gt;) &lt;span class=&#34;comment&#34;&gt;// 获取http标识&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; name == &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            name = strings.ToLower(fieldInfo.Name)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        field[name] = v.Field(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;展示类型的方法&#34;&gt;&lt;a href=&#34;#展示类型的方法&#34; class=&#34;headerlink&#34; title=&#34;展示类型的方法&#34;&gt;&lt;/a&gt;展示类型的方法&lt;/h3&gt;&lt;p&gt;&lt;code&gt;reflect.Type&lt;/code&gt;和&lt;code&gt;reflect.Value&lt;/code&gt;都有一个&lt;code&gt;Method()&lt;/code&gt;方法。&lt;code&gt;reflect.Type&lt;/code&gt;中的方法返回&lt;code&gt;reflect.Method&lt;/code&gt;实例，结构体中包含方法名和方法类型。&lt;code&gt;reflect.Value&lt;/code&gt;中的&lt;code&gt;Method()&lt;/code&gt;方法则返回一个&lt;code&gt;reflect.Value&lt;/code&gt;类型，即一个绑定到receiver上的方法。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Print&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(x &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt;&amp;#123;&amp;#125;)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    v := reflect.ValueOf(x)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    t := v.Type()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fmt.Println(&lt;span class=&#34;string&#34;&gt;&amp;quot;type %s\n&amp;quot;&lt;/span&gt;, t)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i := &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; v.NumMethod(); i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        methType := v.Method(i).Type()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        fmt.Printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;func (%s) %s%s\n&amp;quot;&lt;/span&gt;, t, t.Method(i).Name, strings.TrimPrefix(methType.String(), &lt;span class=&#34;string&#34;&gt;&amp;quot;func&amp;quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;一些忠告-1&#34;&gt;&lt;a href=&#34;#一些忠告-1&#34; class=&#34;headerlink&#34; title=&#34;一些忠告&#34;&gt;&lt;/a&gt;一些忠告&lt;/h3&gt;&lt;p&gt;反射在规范的类型系统外，引入了更高自由度和编程的灵活性，但同时也带来了弱类型解释型语言（没错，JS就是你）的弊病：编译期问题会变成运行时问题、代码可读性变差、性能更差。&lt;/p&gt;
&lt;p&gt;反射虽然提供了很强大的功能，但是失去了类型的保护，需要额外处理类型的边界case，否则很容易在运行时出现panic。而这些在使用特定类型时会在编译期就被发现。因此，在使用时，建议将包中使用反射的部分完全封装在内，不对外暴露，同时做一些额外的动态检查。同时，在出错时，给出类型上更友好的提示。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;fmt.Printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d %s\n&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;42&lt;/span&gt;) &lt;span class=&#34;comment&#34;&gt;// &amp;quot;%!d(string=hello) %!s(int=42)&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;另外，&lt;code&gt;interface&amp;#123;&amp;#125;&lt;/code&gt;类型和大量出现的反射代码会让代码安逸理解，需要辅以更加完善的文档和注释来解释。&lt;/p&gt;
&lt;p&gt;最后，基于反射的函数执行速度比普通基于特定类型的函数慢至少一两个级别。因此，尽量不要在代码执行的关键路径上使用反射实现，类似测试代码这种小数据量和执行覆盖频率的代码就可以使用。&lt;/p&gt;
&lt;h2 id=&#34;低阶特性&#34;&gt;&lt;a href=&#34;#低阶特性&#34; class=&#34;headerlink&#34; title=&#34;低阶特性&#34;&gt;&lt;/a&gt;低阶特性&lt;/h2&gt;&lt;p&gt;Go已经尽量掩盖了它在底层的实现，用来避免出现难以调试的神秘问题。但在有些时候，比如为了追求性能，或者希望和操作系统底层交互，可能希望绕开这个限制。这一章的内容介绍的&lt;code&gt;unsafe&lt;/code&gt;包提供了这么一个窗口，&lt;code&gt;cgo&lt;/code&gt;工具可以将创建C库和Go的绑定关系。&lt;/p&gt;
&lt;h3 id=&#34;unsafe-Sizeof，unsafe-Alignof和unsafe-Offsetof&#34;&gt;&lt;a href=&#34;#unsafe-Sizeof，unsafe-Alignof和unsafe-Offsetof&#34; class=&#34;headerlink&#34; title=&#34;unsafe.Sizeof，unsafe.Alignof和unsafe.Offsetof&#34;&gt;&lt;/a&gt;&lt;code&gt;unsafe.Sizeof&lt;/code&gt;，&lt;code&gt;unsafe.Alignof&lt;/code&gt;和&lt;code&gt;unsafe.Offsetof&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;这三个API能让你了解一些Go在内存结构上的一些细节。其中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Sizeof&lt;/code&gt;返回操作数在内存中占用的大小&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Alignof&lt;/code&gt;返回操作数“对齐”需要的内存大小&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Offsetof&lt;/code&gt;返回结构体中字段在结构体内存的偏移量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这几个API并不像它们名字里写的不安全，对于了解底层的内存表示是有帮助的，比如在需要优化内存性能时。&lt;/p&gt;
&lt;h3 id=&#34;unsafe-Pointer&#34;&gt;&lt;a href=&#34;#unsafe-Pointer&#34; class=&#34;headerlink&#34; title=&#34;unsafe.Pointer&#34;&gt;&lt;/a&gt;&lt;code&gt;unsafe.Pointer&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;unsafe.Pointer&lt;/code&gt;是一个可以指向任意类型变量的指针，同时&lt;strong&gt;也可以把&lt;code&gt;unsafe.Pointer&lt;/code&gt;类型指针转换回特定类型指针&lt;/strong&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight go&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;package&lt;/span&gt; math&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Float64bits&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(f &lt;span class=&#34;type&#34;&gt;float64&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;uint64&lt;/span&gt; &amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; *(*&lt;span class=&#34;type&#34;&gt;uint64&lt;/span&gt;)(unsafe.Pointer(&amp;amp;f)) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fmt.Printf(&lt;span class=&#34;string&#34;&gt;&amp;quot;%#016x\n&amp;quot;&lt;/span&gt;, Float64bits(&lt;span class=&#34;number&#34;&gt;1.0&lt;/span&gt;)) &lt;span class=&#34;comment&#34;&gt;// &amp;quot;03xff00000000000000&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;同时&lt;code&gt;unsafe.Pointer&lt;/code&gt;可以转换为&lt;code&gt;uintptr&lt;/code&gt;类型，这个类型用整数表示了地址。这个整数类型足够大，足以表示任何类型的指针。但在使用时要多加注意，因为Go的垃圾回收机制使得一个变量的地址很可能会在运行过程中改变，从而使之前的&lt;code&gt;uintptr&lt;/code&gt;类型变量失去意义。建议尽可能减少&lt;code&gt;unsafe.Pointer&lt;/code&gt;到&lt;code&gt;uintptr&lt;/code&gt;和对&lt;code&gt;uintptr&lt;/code&gt;的使用。如果有包返回了一个&lt;code&gt;uintptr&lt;/code&gt;类型，建议立即将其转换为&lt;code&gt;unsafe.Pointer&lt;/code&gt;类型，确保指针能指向同一个变量。&lt;/p&gt;
&lt;h3 id=&#34;cgo&#34;&gt;&lt;a href=&#34;#cgo&#34; class=&#34;headerlink&#34; title=&#34;cgo&#34;&gt;&lt;/a&gt;cgo&lt;/h3&gt;&lt;p&gt;使用cgo可以在go中使用C语言，反之亦然，这里从略，具体参考&lt;a href=&#34;https://golang.org/cmd/cgo%E3%80%82&#34;&gt;https://golang.org/cmd/cgo。&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;再一些忠告&#34;&gt;&lt;a href=&#34;#再一些忠告&#34; class=&#34;headerlink&#34; title=&#34;再一些忠告&#34;&gt;&lt;/a&gt;再一些忠告&lt;/h3&gt;&lt;p&gt;&lt;code&gt;unsafe&lt;/code&gt;包和&lt;code&gt;reflect&lt;/code&gt;包很像，提供了一些高级特性，但是更甚。它绕开了语言对不可控因素的隔离，会带来一些风险。所以，在特殊场景下，经过仔细考量和验证证实，使用&lt;code&gt;unsafe&lt;/code&gt;确实会带来关键性能提升时，再在代码的关键位置使用&lt;code&gt;unsafe&lt;/code&gt;，同时，尽量保证对代码其他地方透明。&lt;/p&gt;
&lt;p&gt;最后，忘掉最后两章吧，先去踏踏实实写一些Go程序，在能用上&lt;code&gt;reflect&lt;/code&gt;和&lt;code&gt;unsafe&lt;/code&gt;的时候，你自然回想起来的。&lt;/p&gt;
&lt;p&gt;祝，happy Go programming。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;-END-&lt;/em&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://shenlvmeng.github.com/blog/2019/09/10/php-note/</guid>
            <title>（旧文）PHP语言介绍</title>
            <link>http://shenlvmeng.github.com/blog/2019/09/10/php-note/</link>
            <category>PHP</category>
            <category>参考</category>
            <pubDate>Tue, 10 Sep 2019 21:02:17 +0800</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;//php.net&#34;&gt;php.net&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;简介&#34;&gt;&lt;a href=&#34;#简介&#34; class=&#34;headerlink&#34; title=&#34;简介&#34;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;PHP来源于工程PHP&amp;#x2F;FI，由Rasmus Lerdorf创建于1995年，起初只是一套简单的Perl脚本，名字叫做“Personal Home Page Tools”，语法也和Perl很像，随着用户的增加，改进为用C语言实现。1997年，Andi Gutmans 和 Zeev Suraski 重写了代码，推出第三版，PHP&amp;#x2F;FI也演变成PHP（PHP: Hypertext Preprocessor）。注意，这是一个递归的缩写。&lt;/p&gt;
&lt;p&gt;1999年，由两人改进的更具模块化的“Zend Engine”引入PHP，在结合了许多新功能后，2000年5月发布官方版PHP 4.0。如今广泛使用的5.x版本从2004年起发布。5.x版本支持完整的面向对象模型。目前的最新版本已经到了7.x版本（直接从稳定的5.6版跃迁）。&lt;/p&gt;
&lt;p&gt;由于丰富的PHP主要用于服务端的脚本程序，就像其他的CGI程序，如收集表单，生成网页，发送&amp;#x2F;接收Cookie等。除此以外，PHP还用于命令行脚本，编写桌面应用程序。这两种开发可能会用到PHP的拓展库。由于解析器的存在，PHP的跨平台能力很好。 &lt;/p&gt;
&lt;p&gt;关于php的绝大多数内容都可以在&lt;a href=&#34;//php.net&#34;&gt;php.net&lt;/a&gt;上找到，上面介绍的历史也是如此。本文的绝大多数内容更是如此。&lt;/p&gt;
&lt;h2 id=&#34;安装和配置&#34;&gt;&lt;a href=&#34;#安装和配置&#34; class=&#34;headerlink&#34; title=&#34;安装和配置&#34;&gt;&lt;/a&gt;安装和配置&lt;/h2&gt;&lt;p&gt;在通常情况下，php用于服务器端脚本，安装配置较之Javascript复杂很多。在Unix环境下，假设服务器环境（如Apache, Nginx等）已经安装完毕，可以通过configure脚本安装配置。Windows环境下，通过MSI文件安装配置PHP和所有内置以及PECL拓展库。此外Mac OS X，云平台等安装各有不同，详见&lt;a href=&#34;http://php.net/manual/zh/install.php&#34;&gt;官方教程&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;配置文件（&lt;code&gt;php.ini&lt;/code&gt;）在PHP启动时被读取，作为服务器模块版本的PHP，仅在服务器启动时读取1次，作为CGI和CLI版本，每次调用都会读取。用户亦可自定义自己的&lt;code&gt;user.ini&lt;/code&gt;文件。PHP的有些指令可以在PHP脚本中用&lt;code&gt;ini_set()&lt;/code&gt;设定，有些只能在&lt;code&gt;php.ini&lt;/code&gt;或&lt;code&gt;httpd.conf&lt;/code&gt;中设定。这些是由指令的模式决定的，模式有4种：&lt;code&gt;PHP_INI_USER&lt;/code&gt;, &lt;code&gt;PHP_INI_PERDIR&lt;/code&gt;, &lt;code&gt;PHP_INI_SYSTEM&lt;/code&gt;, &lt;code&gt;PHP_INI_ALL&lt;/code&gt;。具体见&lt;a href=&#34;http://php.net/manual/zh/configuration.changes.modes.php&#34;&gt;文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;PHP作为Apache模块运行时，还可以用&lt;code&gt;php_value&lt;/code&gt;, &lt;code&gt;php_flag&lt;/code&gt;, &lt;code&gt;php_admin_value&lt;/code&gt;, &lt;code&gt;php_admin_flag&lt;/code&gt;命令设置。&lt;/p&gt;
&lt;h2 id=&#34;第一段代码&#34;&gt;&lt;a href=&#34;#第一段代码&#34; class=&#34;headerlink&#34; title=&#34;第一段代码&#34;&gt;&lt;/a&gt;第一段代码&lt;/h2&gt;&lt;p&gt;与C等语言通过代码输出HTML不同的是，PHP页面本身就是HTML，你也完全可以像通常建立HTML页面那样创建和编辑PHP页面，只不过其中嵌入了&lt;code&gt;&amp;lt;?php&lt;/code&gt;和&lt;code&gt;?&amp;gt;&lt;/code&gt;包裹的PHP代码。与Javascript不同的是，PHP运行在服务端，用户无从得知脚本是如何运行的。&lt;/p&gt;
&lt;p&gt;值得一提的是，除了上述的开始和结束标记，使用&lt;code&gt;&amp;lt;script language =&amp;quot;php&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;或者asp风格的短标记&lt;code&gt;&amp;lt;?=&lt;/code&gt;, &lt;code&gt;&amp;lt;%=&lt;/code&gt;也行（&lt;em&gt;不建议&lt;/em&gt;）。在这一对标记之外的内容都会被PHP解析器忽略。可以在脚本中通过&lt;code&gt;phpinfo()&lt;/code&gt;打印php的整体配置信息。&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;phpinfo&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在html语句中嵌入php语句时，尽量做到将业务逻辑和展示语句隔离开对维护php工程有着极大的好处。&lt;/p&gt;
&lt;h2 id=&#34;特性参考&#34;&gt;&lt;a href=&#34;#特性参考&#34; class=&#34;headerlink&#34; title=&#34;特性参考&#34;&gt;&lt;/a&gt;特性参考&lt;/h2&gt;&lt;h3 id=&#34;PHP标识&#34;&gt;&lt;a href=&#34;#PHP标识&#34; class=&#34;headerlink&#34; title=&#34;PHP标识&#34;&gt;&lt;/a&gt;PHP标识&lt;/h3&gt;&lt;p&gt;如上文中提到，PHP通过&lt;code&gt;&amp;lt;?php&lt;/code&gt;和&lt;code&gt;?&amp;gt;&lt;/code&gt;分隔php脚本，在&lt;code&gt;php.ini&lt;/code&gt;激活&lt;code&gt;short_open_tag&lt;/code&gt;配置后，支持使用短标记作为分隔符。&lt;strong&gt;如果文件内容为纯PHP代码，最好在文末删除结束标记，以免打印意料之外的空白&lt;/strong&gt;。如下示例：&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Hello world&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// ... more code&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Last statement&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// stop here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;PHP使用&lt;strong&gt;分号&lt;/strong&gt;作为分隔符，支持C，C++，Perl风格的注释。即&lt;code&gt;//&lt;/code&gt;，&lt;code&gt;/**/&lt;/code&gt;和&lt;code&gt;#&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;类型-amp-类型转换&#34;&gt;&lt;a href=&#34;#类型-amp-类型转换&#34; class=&#34;headerlink&#34; title=&#34;类型 &amp;amp; 类型转换&#34;&gt;&lt;/a&gt;类型 &amp;amp; 类型转换&lt;/h3&gt;&lt;p&gt;PHP的原始数据类型有&lt;strong&gt;boolean，integer，float，string，array，object，resource，NULL&lt;/strong&gt;。其中前4种为标量，第5，6中为复合类型。resouce表示资源，&lt;strong&gt;NULL表示无类型&lt;/strong&gt;。PHP中&lt;strong&gt;float也称为double&lt;/strong&gt;。在确保代码易读性上，还有mixed，number和callback几种伪类型。需要注意的是，PHP和Javascript一样，类型往往根据上下文确定。&lt;/p&gt;
&lt;h4 id=&#34;boolean&#34;&gt;&lt;a href=&#34;#boolean&#34; class=&#34;headerlink&#34; title=&#34;boolean&#34;&gt;&lt;/a&gt;boolean&lt;/h4&gt;&lt;p&gt;和JavaScript类似。&lt;/p&gt;
&lt;p&gt;只有TRUE或FALSE，除了false以外，还有下列假值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0&lt;/li&gt;
&lt;li&gt;0.0&lt;/li&gt;
&lt;li&gt;‘’&lt;/li&gt;
&lt;li&gt;“0”&lt;/li&gt;
&lt;li&gt;[],&lt;/li&gt;
&lt;li&gt;{}（仅4.0）&lt;/li&gt;
&lt;li&gt;NULL&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其余均为真值（包含任何resource）。和Javascript类似，支持&amp;#x3D;&amp;#x3D;&amp;#x3D;全等。&lt;/p&gt;
&lt;h4 id=&#34;integer&#34;&gt;&lt;a href=&#34;#integer&#34; class=&#34;headerlink&#34; title=&#34;integer&#34;&gt;&lt;/a&gt;integer&lt;/h4&gt;&lt;p&gt;有十进制，十六进制，八进制，二进制表示。除十进制外，分别以&lt;code&gt;0&lt;/code&gt;, &lt;code&gt;0x&lt;/code&gt;, &lt;code&gt;0b&lt;/code&gt;开头。5.0.5后最大值可以用常量&lt;code&gt;PHP_INT_MAX&lt;/code&gt;设置。&lt;strong&gt;整数溢出时会被解释为float&lt;/strong&gt;。&lt;strong&gt;注意：八进制中传递非法数字后，后面数字会被忽略&lt;/strong&gt;。类型转换时，可以使用&lt;code&gt;intval()&lt;/code&gt;。在浮点数过大，分数强制转换和其他类型转换时，结果未定义。&lt;/p&gt;
&lt;h4 id=&#34;float&#34;&gt;&lt;a href=&#34;#float&#34; class=&#34;headerlink&#34; title=&#34;float&#34;&gt;&lt;/a&gt;float&lt;/h4&gt;&lt;p&gt;又称为double和real，支持科学记数法。运算时精度有限，高精度要求下参考任意精度数学函数和gmp函数。在比较大小时需要谨慎，可以采用相减之差和最大容忍度比较的方法作折衷。常量&lt;code&gt;NAN&lt;/code&gt;表示浮点计算中不可描述的值，为float类型，不等于任何其他变量，甚至自身。可以用&lt;code&gt;is_nan()&lt;/code&gt;检查。&lt;/p&gt;
&lt;h4 id=&#34;string&#34;&gt;&lt;a href=&#34;#string&#34; class=&#34;headerlink&#34; title=&#34;string&#34;&gt;&lt;/a&gt;string&lt;/h4&gt;&lt;p&gt;和JavaScript区别较大。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PHP字符串的字符占1个字节，因此不支持Unicode。字符串最长可达2GB&lt;/li&gt;
&lt;li&gt;表示字符串有4种方法，&lt;strong&gt;单引号，双引号，heredoc和nowdoc&lt;/strong&gt;。&lt;ul&gt;
&lt;li&gt;单引号下，只转义单引号和反斜线，其余字符均为plain text，支持多行；&lt;/li&gt;
&lt;li&gt;双引号下，对换行回车制表符等特殊字符进行转义，还会对变量解析（$xxx）的形式（和Javascript相似）。&lt;/li&gt;
&lt;li&gt;Heredoc结构里，在&amp;lt;&amp;lt;&amp;lt;符号后提供一个标识符然后换行，接下来是字符串本身，字符串后另起一行用前面定义的标识符作为结束标志。中间内容的处理方式同双引号。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$str&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;lt;&amp;lt;&amp;lt;EOD&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;Example of string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;spanning multiple lines&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;using heredoc syntax.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;EOD&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;5.3.0以后，可以使用heredoc结构初始化静态变量和类的属性以及常量。nowdoc结构类似于单引号版的heredoc，但是跟在&lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/code&gt;之后的标识符要用单引号括起来，多用在不解析特殊字符的大段文本中。在双引号或heredoc结构中，变量会被解析，简单语法下，PHP解析器会去组合尽量多的标识形成一个合法的&lt;strong&gt;变量名&lt;/strong&gt;。复杂语法下，&lt;code&gt;$&lt;/code&gt;符号的&lt;strong&gt;外侧或里侧&lt;/strong&gt;会紧贴&lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;，来实现更复杂的变量表达式。&lt;/p&gt;
&lt;p&gt;字符串中的字符可以用&lt;code&gt;[]&lt;/code&gt;或者&lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;（不建议）访问。下标超出字符串长度时，会将&lt;strong&gt;多出的长度用空格填充&lt;/strong&gt;。另外，字符串使用&lt;code&gt;.&lt;/code&gt;连接。使用&lt;code&gt;strval()&lt;/code&gt;转换变量为字符串，boolean会转成&lt;code&gt;&amp;quot;1&amp;quot;&lt;/code&gt;或&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;。integer和float作字面转换。**array总转换成&lt;code&gt;&amp;quot;Array&amp;quot;&lt;/code&gt;**。object总转换成”Object”。NULL总转变成&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;serialize()&lt;/code&gt;可以串行化大部分PHP值。字符串转为数值时，类似Javascript的&lt;code&gt;parseInt()/parseFloat()&lt;/code&gt;，试图从头转换直到遇到不合法字符，支持科学记数法。区别在于PHP中失败时返回&lt;code&gt;0&lt;/code&gt;而不是&lt;code&gt;NAN&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;关于string的更多介绍，参加&lt;a href=&#34;https://www.php.net/manual/zh/language.types.string.php#language.types.string&#34;&gt;官方文档String&lt;/a&gt;一章。&lt;/p&gt;
&lt;h4 id=&#34;array&#34;&gt;&lt;a href=&#34;#array&#34; class=&#34;headerlink&#34; title=&#34;array&#34;&gt;&lt;/a&gt;array&lt;/h4&gt;&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$array&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;array&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 自 PHP 5.4 起&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$array&lt;/span&gt; = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt; =&amp;gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;与Javascript区别较大，PHP中的数组也是个&lt;strong&gt;有序&lt;/strong&gt;映射，描述了keys到values的映射。array使用&lt;code&gt;array()&lt;/code&gt;初始化，在5.4版本后支持字面量定义。&lt;strong&gt;key可以是integer或string&lt;/strong&gt;（integer时是数组，string时是键值对），value可以是任何类型。使用&lt;code&gt;[]&lt;/code&gt;访问和修改数组元素，通过&lt;code&gt;unset()&lt;/code&gt;删除某键值对（类似与Javascript的&lt;code&gt;delete&lt;/code&gt;）。有趣的是，使用&lt;code&gt;[]&lt;/code&gt;不指定键名时，则取当前最大整数索引值（曾经存在即可），新的键名在之上加1。可以使用&lt;code&gt;array_values()&lt;/code&gt;重建索引。&lt;/p&gt;
&lt;p&gt;转换为数组时，除object、NULL类型外，其余类型得到只有一个元素的数组。object类型转换时，单元为对象的属性，键名为成员变量名，还有其他特殊情况见文档&lt;a href=&#34;https://www.php.net/manual/zh/language.types.array.php&#34;&gt;数组&lt;/a&gt;部分。NULL会转换为一个空数组。&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;A&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$A&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// This will become &amp;#x27;\0A\0A&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;B&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;A&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$A&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// This will become &amp;#x27;\0B\0A&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$AA&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// This will become &amp;#x27;AA&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;var_dump&lt;/span&gt;((&lt;span class=&#34;keyword&#34;&gt;array&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title function_ invoke__&#34;&gt;B&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;object&#34;&gt;&lt;a href=&#34;#object&#34; class=&#34;headerlink&#34; title=&#34;object&#34;&gt;&lt;/a&gt;object&lt;/h4&gt;&lt;p&gt;对象，通过new来实例化一个类产生。转换为对象时，PHP会创建一个内置类stdClass的实例，可以通过&lt;code&gt;new stdClass()&lt;/code&gt;创建一个空对象。php 7后，还有&lt;code&gt;new class&amp;#123;&amp;#125;&lt;/code&gt;和&lt;code&gt;(object) []&lt;/code&gt;方法。&lt;/p&gt;
&lt;h4 id=&#34;resource&#34;&gt;&lt;a href=&#34;#resource&#34; class=&#34;headerlink&#34; title=&#34;resource&#34;&gt;&lt;/a&gt;resource&lt;/h4&gt;&lt;p&gt;用于保存到外部资源的一个引用，通过专门的函数建立和使用，由Zend引擎维护资源回收。&lt;/p&gt;
&lt;h4 id=&#34;NULL&#34;&gt;&lt;a href=&#34;#NULL&#34; class=&#34;headerlink&#34; title=&#34;NULL&#34;&gt;&lt;/a&gt;NULL&lt;/h4&gt;&lt;p&gt;表示一个变量没有值。可细分为被赋值为&lt;code&gt;NULL&lt;/code&gt;，尚未赋值和被&lt;code&gt;unset()&lt;/code&gt;。&lt;strong&gt;NULL不区分大小写&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;callback&#34;&gt;&lt;a href=&#34;#callback&#34; class=&#34;headerlink&#34; title=&#34;callback&#34;&gt;&lt;/a&gt;callback&lt;/h4&gt;&lt;p&gt;类似Javascript中的function类型，一些函数如&lt;code&gt;call_user_func()&lt;/code&gt;可以接收用户定义的回调函数作为参数。传递时，以string类型传递函数名。5.3.0后可以直接传递closure给回调参数。&lt;/p&gt;
&lt;p&gt;其余伪类型多用于代码的说明注释中，如&lt;code&gt;mixed&lt;/code&gt;表述多种不确定类型，&lt;code&gt;void&lt;/code&gt;表述函数返回值无用或不接受任何参数等。&lt;/p&gt;
&lt;h4 id=&#34;类型转换&#34;&gt;&lt;a href=&#34;#类型转换&#34; class=&#34;headerlink&#34; title=&#34;类型转换&#34;&gt;&lt;/a&gt;类型转换&lt;/h4&gt;&lt;p&gt;使用&lt;code&gt;var_dump()&lt;/code&gt;查看值和类型，&lt;code&gt;gettype()&lt;/code&gt;查看类型，&lt;code&gt;is_int&lt;/code&gt;&amp;#x2F;&lt;code&gt;is_string&lt;/code&gt;&amp;#x2F;…判断类型，&lt;code&gt;(type)&lt;/code&gt;或&lt;code&gt;settype()&lt;/code&gt;强制类型转换。PHP的强制转换和C非常相似。目前支持&lt;code&gt;(int)&lt;/code&gt;, &lt;code&gt;(bool)&lt;/code&gt;, &lt;code&gt;(float)&lt;/code&gt;, &lt;code&gt;(string)&lt;/code&gt;, &lt;code&gt;(array)&lt;/code&gt;, &lt;code&gt;(object)&lt;/code&gt;, &lt;code&gt;(unset)&lt;/code&gt;（转换为&lt;code&gt;NULL&lt;/code&gt;）。5.2版本后支持&lt;code&gt;(binary)&lt;/code&gt;转换。&lt;/p&gt;
&lt;p&gt;除了强制转换，PHP中会根据需要对变量自动转换，如加法。与Javascript的&lt;code&gt;+&lt;/code&gt;不大不同，PHP会优先将操作数转为float，否则会将操作数解释为integer。数组的键名会优先转换为integer（仅十进制），再转换为string。下面就是一个有趣的例子：&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable&#34;&gt;$foo&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;;  &lt;span class=&#34;comment&#34;&gt;// $foo is a string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable&#34;&gt;$foo&lt;/span&gt; += &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;;   &lt;span class=&#34;comment&#34;&gt;// $foo is an int now&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable&#34;&gt;$foo&lt;/span&gt; = &lt;span class=&#34;variable&#34;&gt;$foo&lt;/span&gt; + &lt;span class=&#34;number&#34;&gt;1.3&lt;/span&gt;;  &lt;span class=&#34;comment&#34;&gt;// $foo is a float now (3.3)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable&#34;&gt;$foo&lt;/span&gt; = &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt; + &lt;span class=&#34;string&#34;&gt;&amp;quot;10 Little Piggies&amp;quot;&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// $foo is an integer (15)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable&#34;&gt;$foo&lt;/span&gt; = &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt; + &lt;span class=&#34;string&#34;&gt;&amp;quot;Small Pigs&amp;quot;&lt;/span&gt;;     &lt;span class=&#34;comment&#34;&gt;// $foo is an integer (5)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;变量-amp-常量&#34;&gt;&lt;a href=&#34;#变量-amp-常量&#34; class=&#34;headerlink&#34; title=&#34;变量 &amp;amp; 常量&#34;&gt;&lt;/a&gt;变量 &amp;amp; 常量&lt;/h3&gt;&lt;p&gt;PHP变量以&lt;code&gt;$&lt;/code&gt;符号开头，只能包含数字字母（这里说的字母包含ASCII字符）和下划线且不能以数字开头。变量区分大小写。&lt;code&gt;$this&lt;/code&gt;是特殊变量不能赋值。可以在&lt;code&gt;$&lt;/code&gt;前加&lt;code&gt;&amp;amp;&lt;/code&gt;符号&lt;strong&gt;引用赋值&lt;/strong&gt;，在改变原变量时，目标变量也会改动。&lt;code&gt;isset()&lt;/code&gt;可以检查变量是否已被赋值。&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$var&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Bob&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$Var&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Joe&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;&lt;span class=&#34;subst&#34;&gt;$var&lt;/span&gt;, &lt;span class=&#34;subst&#34;&gt;$Var&lt;/span&gt;&amp;quot;&lt;/span&gt;;      &lt;span class=&#34;comment&#34;&gt;// 输出 &amp;quot;Bob, Joe&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;site = &lt;span class=&#34;string&#34;&gt;&amp;#x27;not yet&amp;#x27;&lt;/span&gt;;     &lt;span class=&#34;comment&#34;&gt;// 非法变量名；以数字开头&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$_4site&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;not yet&amp;#x27;&lt;/span&gt;;    &lt;span class=&#34;comment&#34;&gt;// 合法变量名；以下划线开头&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$i&lt;/span&gt;站点is = &lt;span class=&#34;string&#34;&gt;&amp;#x27;mansikka&amp;#x27;&lt;/span&gt;;  &lt;span class=&#34;comment&#34;&gt;// 合法变量名；可以用中文&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;用户在为变量命名时，有几点要注意的。function, class, interface, 常量和函数外定义的变量会进入全局命名空间；建议在函数名中用&lt;code&gt;_&lt;/code&gt;区分，类名中用驼峰或首字母大写的驼峰命名。注意：很多情况下，PHP会自动将变量名中的点转换成下划线。&lt;/p&gt;
&lt;h4 id=&#34;可变变量&#34;&gt;&lt;a href=&#34;#可变变量&#34; class=&#34;headerlink&#34; title=&#34;可变变量&#34;&gt;&lt;/a&gt;可变变量&lt;/h4&gt;&lt;p&gt;PHP中的变量名可以很方便地改变，而且可变变量可以用在数组或对象中，如下面的例子，。使用可变变量时，注意通过花括号给属性名清晰定界。&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Given these variables ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$nameTypes&lt;/span&gt;    = &lt;span class=&#34;keyword&#34;&gt;array&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;first&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;last&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;company&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$name_first&lt;/span&gt;   = &lt;span class=&#34;string&#34;&gt;&amp;quot;John&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$name_last&lt;/span&gt;    = &lt;span class=&#34;string&#34;&gt;&amp;quot;Doe&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$name_company&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;quot;PHP.net&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Then this loop is ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;foreach&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$nameTypes&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$type&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;print&lt;/span&gt; $&amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;quot;name_&lt;span class=&#34;subst&#34;&gt;$type&lt;/span&gt;&amp;quot;&lt;/span&gt;&amp;#125; . &lt;span class=&#34;string&#34;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// ... equivalent to this print statement.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;&lt;span class=&#34;subst&#34;&gt;$name_first&lt;/span&gt;\n&lt;span class=&#34;subst&#34;&gt;$name_last&lt;/span&gt;\n&lt;span class=&#34;subst&#34;&gt;$name_company&lt;/span&gt;\n&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;预定义变量&#34;&gt;&lt;a href=&#34;#预定义变量&#34; class=&#34;headerlink&#34; title=&#34;预定义变量&#34;&gt;&lt;/a&gt;预定义变量&lt;/h4&gt;&lt;p&gt;PHP提供许多预定义的变量。PHP中的许多预定义变量都是“超全局的”，这意味着它们在脚本的全部作用域都可见。这种类型在4.1版本中被引入，有&lt;code&gt;$GLOBALS&lt;/code&gt;, &lt;code&gt;$_SERVER&lt;/code&gt;, &lt;code&gt;$_GET&lt;/code&gt;, &lt;code&gt;$_POST&lt;/code&gt;, &lt;code&gt;$_FILES&lt;/code&gt;, &lt;code&gt;$_COOKIE&lt;/code&gt;, &lt;code&gt;$_SESSION&lt;/code&gt;, &lt;code&gt;$_REQUEST&lt;/code&gt;, &lt;code&gt;$_ENV&lt;/code&gt;。它们在5.4版本后不能作为函数的输入参数。通过这些预设的超全局变量，PHP可以轻松地获取请求的各种参数。&lt;/p&gt;
&lt;p&gt;除了上述超全局变量外，还有&lt;code&gt;$php_errormsg&lt;/code&gt;, &lt;code&gt;$HTTP_RAW_POST_DATA&lt;/code&gt;（使用php:&amp;#x2F;&amp;#x2F;input代替）, &lt;code&gt;$http_response_header&lt;/code&gt;(使用HTTP包装其时，该变量会被自动填充)，&lt;code&gt;$argc&lt;/code&gt;和&lt;code&gt;$argv&lt;/code&gt;分别代表传递给脚本的参数数目和参数数组（运行在命令行下时）。&lt;/p&gt;
&lt;h4 id=&#34;作用域&#34;&gt;&lt;a href=&#34;#作用域&#34; class=&#34;headerlink&#34; title=&#34;作用域&#34;&gt;&lt;/a&gt;作用域&lt;/h4&gt;&lt;p&gt;变量作用域通常为文件作用域。函数内部的声明的变量被限制在函数作用域内。同时，和Javascript相同，&lt;strong&gt;PHP没有块级作用域&lt;/strong&gt;。注意，PHP中定义全局变量需使用&lt;code&gt;global&lt;/code&gt;关键字。在函数内部，变量优先视作局部变量。下面的脚本不会有任何输出，因为&lt;code&gt;echo&lt;/code&gt;引用了一个局部变量&lt;code&gt;$a&lt;/code&gt;，但是在函数作用域内它并没有被赋值。要想$a在函数作用域内可见，需要在引用前声明&lt;code&gt;global&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$a&lt;/span&gt; = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;/* global scope */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Test&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$a&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;/* reference to local scope variable */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;Test&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Test2&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;global&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$a&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$a&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;Test2&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;静态变量通过&lt;code&gt;static&lt;/code&gt;声明，&lt;strong&gt;仅在局部作用域存在&lt;/strong&gt;，程序离开作用域时内容不丢失。静态变量不能使用表达式初始化。在下面的例子中，函数仅在第一次调用时初始化&lt;code&gt;$a&lt;/code&gt;变量，之后每次调用都会输出&lt;code&gt;$a&lt;/code&gt;，并加一。&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;test&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$a&lt;/span&gt; = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$a&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable&#34;&gt;$a&lt;/span&gt;++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;常量&#34;&gt;&lt;a href=&#34;#常量&#34; class=&#34;headerlink&#34; title=&#34;常量&#34;&gt;&lt;/a&gt;常量&lt;/h4&gt;&lt;p&gt;在类外，常量通过&lt;code&gt;define(name. value)&lt;/code&gt;函数定义。在类内使用&lt;code&gt;const&lt;/code&gt;定义常量（5.3.0后）。常量的命名规范同C。常量只能是标量。&lt;strong&gt;在访问常量值时，名字前不带&lt;code&gt;$&lt;/code&gt;&lt;strong&gt;。常量名事先无法确定时，使用&lt;code&gt;constant()&lt;/code&gt;获取常量。&lt;/strong&gt;常量没有作用域的限制&lt;/strong&gt;，可以在任何位置访问。&lt;/p&gt;
&lt;p&gt;PHP定义了大量的魔术常量，都以两个下划线开头和结尾。有&lt;code&gt;__LINE__&lt;/code&gt;，&lt;code&gt;__FILE__&lt;/code&gt;, &lt;code&gt;__DIR__&lt;/code&gt;, &lt;code&gt;__FUNCTION__&lt;/code&gt;, &lt;code&gt;__CLASS__&lt;/code&gt;, &lt;code&gt;__TRAIT__&lt;/code&gt;, &lt;code&gt;METHOD__&lt;/code&gt;, &lt;code&gt;__NAMESPACE__&lt;/code&gt;。具体解释见&lt;a href=&#34;http://php.net/manual/zh/language.constants.predefined.php&#34;&gt;官方文档&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;表达式-amp-流程&#34;&gt;&lt;a href=&#34;#表达式-amp-流程&#34; class=&#34;headerlink&#34; title=&#34;表达式 &amp;amp; 流程&#34;&gt;&lt;/a&gt;表达式 &amp;amp; 流程&lt;/h3&gt;&lt;p&gt;PHP的表达式根据官方的定义表述，是&lt;em&gt;任何有值的东西&lt;/em&gt;。表达式的组成类似于其他语言，从略。值得注意的有以下几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PHP的逻辑运算符同时有&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;||&lt;/code&gt;以及&lt;code&gt;and&lt;/code&gt;, &lt;code&gt;xor&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;两套，但是&lt;strong&gt;后一套的优先级最低&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;PHP提供&lt;code&gt;@&lt;/code&gt;作为错误控制运算符，放置在表达式前可以忽略产生的任何错误信息。&lt;strong&gt;强烈不建议使用&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;反引号``执行其中的shell命令，并将输出结果返回，等同于执行&lt;code&gt;shell_exec()&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;+&lt;/code&gt;, &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;===&lt;/code&gt;还可以用于数组间的运算，进行数组的连接，键值对相同的检测。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;instanceof&lt;/code&gt;用于确定变量是否属于某个类的实例。用法如&lt;code&gt;$a instanceof MyClass&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;算法流程上，PHP类似C风格。不同点有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提供在&lt;code&gt;&amp;lt;?php&amp;gt;&lt;/code&gt;闭合标签内使用&lt;code&gt;for endfor&lt;/code&gt;这种用法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;foreach(array as $key =&amp;gt; $value)&lt;/code&gt;便于遍历数组。（注意：在&lt;code&gt;$value&lt;/code&gt;前&lt;code&gt;&amp;amp;&lt;/code&gt;可以在&lt;code&gt;foreach&lt;/code&gt;循环中改变&lt;code&gt;value&lt;/code&gt;的值）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;break&lt;/code&gt;可以接受一个可选的数字决定跳出几层循环&lt;/li&gt;
&lt;li&gt;&lt;code&gt;continue&lt;/code&gt;接受一个可选的数字参数来决定跳过几重循环到循环结尾。默认值是&lt;code&gt;1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;declare&lt;/code&gt;设定一段代码的施行指令，目前只支持&lt;code&gt;ticks&lt;/code&gt;和&lt;code&gt;encoding&lt;/code&gt;。前者控制执行计时的若干条命令后的操作，后者决定代码的运行编码。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;require&lt;/code&gt;和&lt;code&gt;include&lt;/code&gt;效果类似，用法同C，它们也有带后缀&lt;code&gt;_once&lt;/code&gt;的操作符&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;函数&#34;&gt;&lt;a href=&#34;#函数&#34; class=&#34;headerlink&#34; title=&#34;函数&#34;&gt;&lt;/a&gt;函数&lt;/h3&gt;&lt;p&gt;PHP的函数定义和其他语言类似，定义的函数都具有全局作用域。不同的是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PHP可以使用&lt;code&gt;create_function(args, code)&lt;/code&gt;这样的函数定义函数（类似JS中的&lt;code&gt;new Function()&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;函数需要先定义后使用（这个只是与Javascript不同）&lt;/li&gt;
&lt;li&gt;PHP可以定义有条件的函数，通过用if包裹和放在function定义内&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;和C&amp;#x2F;C++风格很像的是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PHP函数参数接收的是一个复制，需要传递引用改变原值；&lt;/li&gt;
&lt;li&gt;支持默认参数，需放在最右；&lt;/li&gt;
&lt;li&gt;5.0之后支持对输入参数类型检查，到5.4为止支持class &amp;#x2F; array &amp;#x2F; callable类型，7.0以后支持标量类型。如果给出的值类型不对，那么将会产生一个错误&lt;/li&gt;
&lt;li&gt;7.0之后支持不对输入参数强制类型转换。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;C&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;D&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;C&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// This doesn&amp;#x27;t extend C.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;E&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;f&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;C &lt;span class=&#34;variable&#34;&gt;$c&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;title function_ invoke__&#34;&gt;get_class&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$c&lt;/span&gt;).&lt;span class=&#34;string&#34;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;f&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; C);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;f&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; D);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;f&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; E);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;和Js相似的一点时，5.6版之后支持使用&lt;code&gt;...&lt;/code&gt;符号获取参数列表。&lt;/p&gt;
&lt;p&gt;和可变变量一样，PHP中有可变函数，用法和可变变量一样。在调用对象的静态方法时，函数调用要优于静态属性，下面是一个例子&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Foo&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$variable&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;static property&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Variable&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;Method Variable called&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Foo&lt;/span&gt;::&lt;span class=&#34;variable&#34;&gt;$variable&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// This prints &amp;#x27;static property&amp;#x27;. It does need a $variable in this scope.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$variable&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;quot;Variable&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Foo&lt;/span&gt;::&lt;span class=&#34;variable&#34;&gt;$variable&lt;/span&gt;();  &lt;span class=&#34;comment&#34;&gt;// This calls $foo-&amp;gt;Variable() reading $variable in this scope.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;5.3之后，PHP也支持匿名函数，并可以传递给一个变量储存。实际中，这种表达式会被转换为内置类Closure的对象实例。闭包可以从父作用域继承变量，但是此类变量需要用&lt;em&gt;use结构&lt;/em&gt;传递进去，类似于&lt;code&gt;function() use($a)&amp;#123;&amp;#125;&lt;/code&gt;这样的形式。&lt;/p&gt;
&lt;h3 id=&#34;类-amp-对象&#34;&gt;&lt;a href=&#34;#类-amp-对象&#34; class=&#34;headerlink&#34; title=&#34;类 &amp;amp; 对象&#34;&gt;&lt;/a&gt;类 &amp;amp; 对象&lt;/h3&gt;&lt;p&gt;PHP承袭着面向对象语言对类和对象的处理。类以&lt;code&gt;class&lt;/code&gt;开头，里面包含属性和方法等，可以包含自己的常量。通过&lt;code&gt;new&lt;/code&gt;实例化，通过&lt;code&gt;extends&lt;/code&gt;实现继承。子类使用&lt;code&gt;parent::&lt;/code&gt;访问被覆盖的属性或方法，使用&lt;code&gt;self::&lt;/code&gt;自身的静态属性和方法。5.5之后使用&lt;code&gt;ClassName::class&lt;/code&gt;可以获取带有命名空间的完整类名。轻量级的类可以通过强制转换关联数组实现。&lt;/p&gt;
&lt;p&gt;类中的静态属性通过&lt;code&gt;::&lt;/code&gt;访问，非静态属性通过&lt;code&gt;-&amp;gt;&lt;/code&gt;访问。定义常量时使用&lt;code&gt;const&lt;/code&gt;，常量的值必须是一个定值（5.6之后可以是数学运算结果）。PHP 5新增了关键字&lt;code&gt;final&lt;/code&gt;，修饰方法或者类不可被继承。&lt;/p&gt;
&lt;p&gt;PHP 5中，**&lt;code&gt;__autoload()&lt;/code&gt;函数会在使用未定义的类时自动调用**，5.3.0之后通常使用&lt;code&gt;spl_autoload_register()&lt;/code&gt;作为&lt;code&gt;autoload&lt;/code&gt;的替代。&lt;code&gt;__construct()&lt;/code&gt;和&lt;code&gt;__destruct()&lt;/code&gt;分别是构造和析构函数，5.3.3之前，在没有&lt;code&gt;__construct()&lt;/code&gt;函数也没有父类时，会寻找命名空间中与类名同名的方法。&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;spl_autoload_register&lt;/span&gt;(function (&lt;span class=&#34;variable&#34;&gt;$class_name&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;require_once&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$class_name&lt;/span&gt; . &lt;span class=&#34;string&#34;&gt;&amp;#x27;.php&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$obj&lt;/span&gt;  = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;MyClass1&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$obj2&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;MyClass2&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;trait-amp-匿名类&#34;&gt;&lt;a href=&#34;#trait-amp-匿名类&#34; class=&#34;headerlink&#34; title=&#34;trait &amp;amp; 匿名类&#34;&gt;&lt;/a&gt;trait &amp;amp; 匿名类&lt;/h4&gt;&lt;p&gt;在访问控制，继承，抽象类，接口等方面PHP和传统的面向对象语言很像。在5.4.0后，PHP提供了&lt;strong&gt;trait作为类之间代码水平复用的特性（很像mixin）&lt;/strong&gt;。在class定义中使用&lt;code&gt;use&lt;/code&gt;来获取trait，类似interface，一个类可以插入多个trait，trait会覆盖基类方法而被当前类方法覆盖。在多个trait的同名方法发生冲突时，通过&lt;code&gt;insteadof&lt;/code&gt;和&lt;code&gt;as&lt;/code&gt;来决定使用哪个，具体见&lt;a href=&#34;https://www.php.net/manual/zh/language.oop5.traits.php&#34;&gt;trait文档&lt;/a&gt;。trait的功能使用依赖注入也可以完成，相关讨论见&lt;a href=&#34;https://stackoverflow.com/questions/7892749/traits-in-php-any-real-world-examples-best-practices&#34;&gt;stackoverflow trait practives&lt;/a&gt;与&lt;a href=&#34;https://stackoverflow.com/questions/9205083/traits-vs-interfaces&#34;&gt;trait vs interface&lt;/a&gt;。trait甚至还支持抽象成员和静态成员。&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;trait&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;A&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;smallTalk&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;a&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;bigTalk&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;A&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;trait&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;B&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;smallTalk&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;b&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;bigTalk&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;B&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Talker&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;A&lt;/span&gt;, &lt;span class=&#34;title&#34;&gt;B&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title&#34;&gt;B&lt;/span&gt;::&lt;span class=&#34;title&#34;&gt;smallTalk&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;insteadof&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;A&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        A::&lt;span class=&#34;variable constant_&#34;&gt;bigTalk&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;insteadof&lt;/span&gt; B;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Aliased_Talker&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;A&lt;/span&gt;, &lt;span class=&#34;title&#34;&gt;B&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title&#34;&gt;B&lt;/span&gt;::&lt;span class=&#34;title&#34;&gt;smallTalk&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;insteadof&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;A&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        A::&lt;span class=&#34;variable constant_&#34;&gt;bigTalk&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;insteadof&lt;/span&gt; B;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        B::&lt;span class=&#34;variable constant_&#34;&gt;bigTalk&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; talk;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;PHP7.0之后支持匿名类，用于创建一次性的简单对象。&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// PHP 7 之前的代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Logger&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$msg&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$msg&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$util&lt;/span&gt;-&amp;gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;setLogger&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Logger&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 使用了 PHP 7+ 后的代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$util&lt;/span&gt;-&amp;gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;setLogger&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; function &lt;span class=&#34;title function_ invoke__&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$msg&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$msg&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;“重载”&#34;&gt;&lt;a href=&#34;#“重载”&#34; class=&#34;headerlink&#34; title=&#34;“重载”&#34;&gt;&lt;/a&gt;“重载”&lt;/h4&gt;&lt;p&gt;PHP提供的&lt;strong&gt;重载（overload）&lt;/strong&gt;语义和其他大部分OOP语言不同，指在调用当前环境下未定义或不可见的类属性或方法时调用重载方法。PHP借助&lt;strong&gt;魔术方法&lt;/strong&gt;实现重载。读写不可访问属性时，&lt;code&gt;__get()&lt;/code&gt;和&lt;code&gt;__set()&lt;/code&gt;分别被调用；对不可访问属性调用&lt;code&gt;isset&lt;/code&gt;和&lt;code&gt;unset&lt;/code&gt;时，&lt;code&gt;__isset()&lt;/code&gt;和&lt;code&gt;__unset()&lt;/code&gt;分别被调用。&lt;strong&gt;属性重载只能在对象中进行&lt;/strong&gt;。调用不可访问的方法和静态方法时，&lt;code&gt;__call()&lt;/code&gt;和&lt;code&gt;__callStatic()&lt;/code&gt;分别被调用，方法重载用法类似属性重载。重载的示例见文档。（&lt;em&gt;不建议使用这个特性，这会影响ide补全和代码的可读性&lt;/em&gt;）。&lt;/p&gt;
&lt;p&gt;PHP5提供foreach方法遍历对象，默认情况可见属性都会被遍历，可以让类实现&lt;code&gt;Iterator&lt;/code&gt;接口从而自行决定如何处理遍历。实现&lt;code&gt;IteratorAggregate&lt;/code&gt;接口可以代替实现所有的Iterator方法，&lt;code&gt;IteratorAggregate&lt;/code&gt;只需实现&lt;code&gt;IteratorAggregate::getIterator()&lt;/code&gt;方法即可。&lt;/p&gt;
&lt;h4 id=&#34;魔术方法&#34;&gt;&lt;a href=&#34;#魔术方法&#34; class=&#34;headerlink&#34; title=&#34;魔术方法&#34;&gt;&lt;/a&gt;魔术方法&lt;/h4&gt;&lt;p&gt;PHP将所有&lt;code&gt;__&lt;/code&gt;开头的类方法保留为&lt;strong&gt;魔术方法&lt;/strong&gt;，&lt;code&gt;__sleep()&lt;/code&gt;方法在&lt;code&gt;serialize()&lt;/code&gt;函数前调用，应返回一个包含对象中所有应被序列化的变量名称的数组，相对的&lt;code&gt;__wakeup()&lt;/code&gt;在反序列化函数前调用。&lt;code&gt;__toString()&lt;/code&gt;在把一个类视作字符串时怎样回应时调用。&lt;code&gt;__invoke()&lt;/code&gt;在把一个类视作函数调用时调用。更多方法见&lt;a href=&#34;https://www.php.net/manual/zh/language.oop5.magic.php&#34;&gt;魔术方法页面&lt;/a&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Connection&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$link&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$server&lt;/span&gt;, &lt;span class=&#34;variable&#34;&gt;$username&lt;/span&gt;, &lt;span class=&#34;variable&#34;&gt;$password&lt;/span&gt;, &lt;span class=&#34;variable&#34;&gt;$db&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;__construct&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$server&lt;/span&gt;, &lt;span class=&#34;variable&#34;&gt;$username&lt;/span&gt;, &lt;span class=&#34;variable&#34;&gt;$password&lt;/span&gt;, &lt;span class=&#34;variable&#34;&gt;$db&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;$this&lt;/span&gt;-&amp;gt;server = &lt;span class=&#34;variable&#34;&gt;$server&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;$this&lt;/span&gt;-&amp;gt;username = &lt;span class=&#34;variable&#34;&gt;$username&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;$this&lt;/span&gt;-&amp;gt;password = &lt;span class=&#34;variable&#34;&gt;$password&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;$this&lt;/span&gt;-&amp;gt;db = &lt;span class=&#34;variable&#34;&gt;$db&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;$this&lt;/span&gt;-&amp;gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;connect&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;connect&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;$this&lt;/span&gt;-&amp;gt;link = &lt;span class=&#34;title function_ invoke__&#34;&gt;mysql_connect&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$this&lt;/span&gt;-&amp;gt;server, &lt;span class=&#34;variable&#34;&gt;$this&lt;/span&gt;-&amp;gt;username, &lt;span class=&#34;variable&#34;&gt;$this&lt;/span&gt;-&amp;gt;password);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_ invoke__&#34;&gt;mysql_select_db&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$this&lt;/span&gt;-&amp;gt;db, &lt;span class=&#34;variable&#34;&gt;$this&lt;/span&gt;-&amp;gt;link);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;__sleep&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;array&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;server&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;username&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;password&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;db&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;__wakeup&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;$this&lt;/span&gt;-&amp;gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;connect&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;PHP使用&lt;code&gt;clone&lt;/code&gt;创造对象的浅复制（即只创造属性的引用），魔术方法&lt;code&gt;__clone()&lt;/code&gt;在clone完成后调用。PHP 5中的对象甚至可以相互比较，使用&lt;code&gt;==&lt;/code&gt;判断属性和属性值是否一致，&lt;code&gt;===&lt;/code&gt;判断变量是否是同一个实例。&lt;/p&gt;
&lt;p&gt;自5.3.0起，PHP增加了&lt;code&gt;static::&lt;/code&gt;关键字和&lt;a href=&#34;https://www.php.net/manual/zh/language.oop5.late-static-bindings.php&#34;&gt;后期静态绑定&lt;/a&gt;的功能，用于在继承范围内引用静态调用的类。静态环境下绑定静态方法可以让子类在&lt;strong&gt;自己的环境&lt;/strong&gt;下（自己的this）调用继承自基类的方法。这种方式绑定非静态方法时，会出现不同结果，尽量避免使用。&lt;/p&gt;
&lt;p&gt;对象通过&lt;code&gt;serialize()&lt;/code&gt;和&lt;code&gt;unserialize()&lt;/code&gt;来序列化和反序列化一个对象，对象的方法和静态成员不会保留。&lt;strong&gt;在解序列的文件域内需要包含类的定义&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;预定义接口&#34;&gt;&lt;a href=&#34;#预定义接口&#34; class=&#34;headerlink&#34; title=&#34;预定义接口&#34;&gt;&lt;/a&gt;预定义接口&lt;/h4&gt;&lt;p&gt;PHP预定义了许多接口。&lt;code&gt;Traversal&lt;/code&gt;接口监测一个类是否可以使用foreach进行遍历（仅供引擎使用）。&lt;code&gt;Iterator&lt;/code&gt;接口用来实现对象的foreach迭代，有&lt;code&gt;rewind&lt;/code&gt;, &lt;code&gt;current&lt;/code&gt;, &lt;code&gt;key&lt;/code&gt;, &lt;code&gt;next&lt;/code&gt;, &lt;code&gt;valid&lt;/code&gt;等成员方法。除此以外还有聚合迭代，数组式访问，序列化，生成器接口等接口和Closure类。这里从略。&lt;/p&gt;
&lt;h3 id=&#34;命名空间&#34;&gt;&lt;a href=&#34;#命名空间&#34; class=&#34;headerlink&#34; title=&#34;命名空间&#34;&gt;&lt;/a&gt;命名空间&lt;/h3&gt;&lt;p&gt;命名空间是PHP一个比较有特点的特性。在PHP中用命名空间解决&lt;strong&gt;类库和用户代码名字冲突的问题&lt;/strong&gt;。实际上命名空间所做的事情就是代码模块化，正如Java的packages和Javascript里CommonJS规范一样。命名空间的命名方法类似变量，不允许使用PHP或php开头的命名空间。下面是一个命名空间的范例：&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;my&lt;/span&gt;\&lt;span class=&#34;title class_&#34;&gt;name&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;MyClass&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;myfunction&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;variable constant_&#34;&gt;MYCONST&lt;/span&gt; = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$a&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;MyClass&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$c&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; \my\name\MyClass; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$a&lt;/span&gt; = &lt;span class=&#34;title function_ invoke__&#34;&gt;strlen&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;hi&amp;#x27;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$d&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt;\&lt;span class=&#34;title class_&#34;&gt;MYCONST&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$d&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;__NAMESPACE__&lt;/span&gt; . &lt;span class=&#34;string&#34;&gt;&amp;#x27;\MYCONST&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;title function_ invoke__&#34;&gt;constant&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$d&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;除了&lt;code&gt;declare&lt;/code&gt;语句以外，&lt;strong&gt;namespace的定义需在文件的最前面&lt;/strong&gt;。PHP与其它的语言特征不同，同一个命名空间可以定义在多个文件中，即&lt;strong&gt;允许将同一个命名空间的内容分割存放在不同的文件中&lt;/strong&gt;。在命名空间中使用define定义常量时，需要带上&lt;code&gt;__NAMESPACE__&lt;/code&gt;，否则意味着定义在全局空间下。&lt;/p&gt;
&lt;p&gt;PHP中的命名空间和文件目录很像，也支持层级化的定义方法，即定义子命名空间，父子间通过反斜线&lt;code&gt;\&lt;/code&gt;隔开。可以在单文件内定义多个namespace（&lt;strong&gt;不提倡&lt;/strong&gt;），建议namespace间通过大括号隔离开。PHP命名空间可以和文件系统进行类比，类名非限定时，会在当前空间寻找，以&lt;code&gt;\&lt;/code&gt;开头时从全局空间寻找（相对目录），否则从当前空间起向下寻找（绝对目录）。下面是一个使用了三种方法的样例：&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Foo&lt;/span&gt;\&lt;span class=&#34;title class_&#34;&gt;Bar&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;file1.php&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;variable constant_&#34;&gt;FOO&lt;/span&gt; = &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;foo&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;staticmethod&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 非限定名称 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;foo&lt;/span&gt;();     &lt;span class=&#34;comment&#34;&gt;// 解析为 Foo\Bar\foo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;foo::&lt;span class=&#34;title function_ invoke__&#34;&gt;staticmethod&lt;/span&gt;();     &lt;span class=&#34;comment&#34;&gt;// 解析为类 Foo\Bar\foo的静态方法static method&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;echo&lt;/span&gt; FOO; &lt;span class=&#34;comment&#34;&gt;// 解析为常量 Foo\Bar\FOO&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 限定名称 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;subnamespace\&lt;span class=&#34;title function_ invoke__&#34;&gt;foo&lt;/span&gt;(); &lt;span class=&#34;comment&#34;&gt;// 解析为函数 Foo\Bar\subnamespace\foo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;subnamespace\foo::&lt;span class=&#34;title function_ invoke__&#34;&gt;staticmethod&lt;/span&gt;(); &lt;span class=&#34;comment&#34;&gt;// 解析为类 Foo\Bar\subnamespace\foo, 以及类的方法 staticmethod&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;echo&lt;/span&gt; subnamespace\FOO; &lt;span class=&#34;comment&#34;&gt;// 解析为常量 Foo\Bar\subnamespace\FOO&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/* 完全限定名称 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;\Foo\Bar\&lt;span class=&#34;title function_ invoke__&#34;&gt;foo&lt;/span&gt;(); &lt;span class=&#34;comment&#34;&gt;// 解析为函数 Foo\Bar\foo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;\Foo\Bar\foo::&lt;span class=&#34;title function_ invoke__&#34;&gt;staticmethod&lt;/span&gt;(); &lt;span class=&#34;comment&#34;&gt;// 解析为类 Foo\Bar\foo, 以及类的方法 staticmethod&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;echo&lt;/span&gt; \Foo\Bar\FOO; &lt;span class=&#34;comment&#34;&gt;// 解析为常量 Foo\Bar\FOO&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;命名空间的装载和名称的解析是在编译期完成的。命名空间有三种定义方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;非限定名称：名称中不包含命名空间分割符，即\，如Foo&lt;/li&gt;
&lt;li&gt;限定名称：名称中包含命名空间分割符，如Foo\Bar&lt;/li&gt;
&lt;li&gt;完全限定名称：名称中包含命名空间分割符，且以\开始的标识符，如\Foo\Bar&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PHP支持使用&lt;code&gt;namespace&lt;/code&gt;关键字或&lt;code&gt;__NAMESPACE__&lt;/code&gt;魔术常量获取当前所在命名空间。所有支持命名空间的PHP版本支持三种别名或导入方式：&lt;strong&gt;为类名称使用别名&lt;/strong&gt;、&lt;strong&gt;为接口使用别名&lt;/strong&gt;、&lt;strong&gt;为命名空间名称使用别名&lt;/strong&gt;。这么做类似于在操作系统中创建符号连接。别名通过操作符&lt;code&gt;use as&lt;/code&gt;实现。注意：导入命名空间后文件内的类名，接口名等会收到导入的影响。在一个命名空间中，当PHP遇到一个非限定的类、函数或常量名称时，它使用不同的优先策略来解析该名称。对于函数和常量来说，如果当前命名空间中不存在该函数或常量，PHP会退而使用全局空间中的函数或常量。因此在访问系统内部或不包含在命名空间中的类名称时，必须使用完全限定名称。&lt;/p&gt;
&lt;h3 id=&#34;错误和异常&#34;&gt;&lt;a href=&#34;#错误和异常&#34; class=&#34;headerlink&#34; title=&#34;错误和异常&#34;&gt;&lt;/a&gt;错误和异常&lt;/h3&gt;&lt;p&gt;PHP的错误类型有很多，可以见&lt;a href=&#34;http://php.net/manual/zh/errorfunc.constants.php&#34;&gt;类型列表&lt;/a&gt;。PHP对错误的汇报方式由&lt;code&gt;php.ini&lt;/code&gt;中的&lt;code&gt;error_reporting&lt;/code&gt;命令控制，可以在运行时通过&lt;code&gt;error_reporting()&lt;/code&gt;函数动态修改。在开发环境，建议将级别设置到&lt;code&gt;E_ALL&lt;/code&gt;，同时在脚本的开头设置级别。&lt;code&gt;php.ini&lt;/code&gt;中的&lt;code&gt;display_errors&lt;/code&gt;指令控制是否将错误显示在脚本输出中，建议在生产环境中关闭。&lt;code&gt;log_errors&lt;/code&gt;指令控制错误记录。&lt;/p&gt;
&lt;p&gt;PHP 5中异常可以被抛出，由try&amp;#x2F;catch语句块获取。&lt;code&gt;catch&lt;/code&gt;获得的是一个&lt;code&gt;Exception&lt;/code&gt;类的实例。类似Java，可以在catch后加上finally语句块。Exception是一个类，有&lt;code&gt;getMessage&lt;/code&gt;，&lt;code&gt;getTraceAsString&lt;/code&gt;等方法可以使用和拓展，详见介绍。PHP 7中，大多数错误都被作为Error异常抛出，可以被第一个匹配的try&amp;#x2F;catch语句块捕获，否则交给PHP相应的异常处理函数处理，如果尚未通过&lt;code&gt;set_exception_handler()&lt;/code&gt;注册童永刚异常处理函数，则会报告一个Fatal Error。注意：捕获错误或异常时，若在自定义命名空间下，Exception需要用完全限定方式书写。&lt;/p&gt;
&lt;p&gt;7.0以后的版本中，&lt;code&gt;Error&lt;/code&gt;和&lt;code&gt;Exception&lt;/code&gt;同属于&lt;code&gt;Throwable&lt;/code&gt;类型，这一点与5.x版本不同。代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//To catch both exceptions and errors in PHP 5.x and 7, add a catch block for Exception AFTER catching Throwable first.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//Once PHP 5.x support is no longer needed, the block catching Exception can be removed.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;comment&#34;&gt;// Code that may throw an Exception or Error.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;Throwable&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$t&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;comment&#34;&gt;// Executed only in PHP 7, will not match in PHP 5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;Exception&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$e&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;comment&#34;&gt;// Executed only in PHP 5, will not be reached in PHP 7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;生成器（generator）&#34;&gt;&lt;a href=&#34;#生成器（generator）&#34; class=&#34;headerlink&#34; title=&#34;生成器（generator）&#34;&gt;&lt;/a&gt;生成器（generator）&lt;/h3&gt;&lt;p&gt;PHP中的生成器的概念与Java等高级语言中生成器的概念无二。生成器函数看起来像一个普通的函数，不同的是普通函数返回一个值，而一个生成器可以&lt;code&gt;yield&lt;/code&gt;生成许多它所需要的值。当一个生成器被调用的时候，它返回一个可以被遍历的对象。PHP 将会在每次需要值的时候调用生成器函数，并在产生一个值之后保存生成器的状态。&lt;strong&gt;生成器不可以返回值&lt;/strong&gt;。return语句只会终止生成器继续执行。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;yield会返回一个值给循环调用此生成器的代码并且只是暂停执行生成器函数&lt;/strong&gt;。可以使用yield返回键值对，引用或&lt;code&gt;NULL&lt;/code&gt;等。在PHP 7以后，使用&lt;code&gt;yield from&lt;/code&gt;可以从实现了Iterator接口的对象或使用yield的函数中yield值。如下：&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;count_to_ten&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;yield&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;yield&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;yield&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; [&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;yield&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;ArrayIterator&lt;/span&gt;([&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;yield&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;title function_ invoke__&#34;&gt;seven_eight&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;yield&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;title function_ invoke__&#34;&gt;nine_ten&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;seven_eight&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;yield&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;yield&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;title function_ invoke__&#34;&gt;eight&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;eight&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;yield&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;nine_ten&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;yield&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$gen&lt;/span&gt; = &lt;span class=&#34;title function_ invoke__&#34;&gt;count_to_ten&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;foreach&lt;/span&gt; (&lt;span class=&#34;variable&#34;&gt;$gen&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$num&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;&lt;span class=&#34;subst&#34;&gt;$num&lt;/span&gt; &amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$gen&lt;/span&gt;-&amp;gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;getReturn&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;对比生成器和实现Iterator接口的类来看，生成器的代码可读性更高，代码量也更少，缺憾在于不能多次迭代和回退，除非重建或使用clone。&lt;/p&gt;
&lt;h3 id=&#34;引用&#34;&gt;&lt;a href=&#34;#引用&#34; class=&#34;headerlink&#34; title=&#34;引用&#34;&gt;&lt;/a&gt;引用&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;PHP的引用意味着不同的名字访问同一个变量内容&lt;/strong&gt;，通过在变量前加上&lt;code&gt;&amp;amp;&lt;/code&gt;使用。在对一个未定义的变量进行引用参数传递或引用返回时，会自动创建该变量。不使用&lt;code&gt;&amp;amp;&lt;/code&gt;符号时，意味着生成一个拷贝。&lt;/p&gt;
&lt;p&gt;在进行引用传递时，只能传递变量，New语句和函数中返回的引用；引用返回时，需要在函数名前加上&amp;amp;符号，同时接受返回值的变量也需写为接收引用的形式。&lt;br&gt;通过&lt;code&gt;unset&lt;/code&gt;销毁引用，销毁引用的同时不会销毁原变量（类似于删除符号链接）。&lt;code&gt;global $var&lt;/code&gt;实际上就是创建了到&lt;code&gt;$GLOBALS[]&lt;/code&gt;的引用。&lt;code&gt;$this&lt;/code&gt;也是同理。&lt;/p&gt;
&lt;h3 id=&#34;支持的协议&#34;&gt;&lt;a href=&#34;#支持的协议&#34; class=&#34;headerlink&#34; title=&#34;支持的协议&#34;&gt;&lt;/a&gt;支持的协议&lt;/h3&gt;&lt;p&gt;PHP带有内置URL风格的封装协议，可用于类似&lt;code&gt;fopen()&lt;/code&gt;、&lt;code&gt;copy()&lt;/code&gt;、&lt;code&gt;file_exists()&lt;/code&gt;和&lt;code&gt;filesize()&lt;/code&gt;的文件系统函数，如file, http, ftp, php, zlib, data等。其中&lt;code&gt;php://&lt;/code&gt;提供的是输入输出流和错误描述符的访问能力。创建数据流前，可以通过&lt;code&gt;stream_context_create()&lt;/code&gt;创建上下文选项，定义数据流的选项。&lt;/p&gt;
&lt;h2 id=&#34;函数参考&#34;&gt;&lt;a href=&#34;#函数参考&#34; class=&#34;headerlink&#34; title=&#34;函数参考&#34;&gt;&lt;/a&gt;函数参考&lt;/h2&gt;&lt;p&gt;PHP本身提供了海量的函数。且都可以全局访问到。&lt;/p&gt;
&lt;h3 id=&#34;内核&#34;&gt;&lt;a href=&#34;#内核&#34; class=&#34;headerlink&#34; title=&#34;内核&#34;&gt;&lt;/a&gt;内核&lt;/h3&gt;&lt;p&gt;内核部分的函数，不能通过编译选项去除。PHP这部分的函数和介绍相当多，这里只撷选了常用的部分。&lt;/p&gt;
&lt;h4 id=&#34;数组&#34;&gt;&lt;a href=&#34;#数组&#34; class=&#34;headerlink&#34; title=&#34;数组&#34;&gt;&lt;/a&gt;数组&lt;/h4&gt;&lt;p&gt;这部分的函数主要用来进行和数组相关的操作，由于PHP中的数组包括了键值对这样类似对象的功能，函数的数量很多，甚至有些冗余。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;array_chunk&lt;/code&gt; 将数组分割为多个，单元数目由size决定。返回一个多维数组。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array_merge&lt;/code&gt; 将多个数组的单元合并在一起，字符串键名相同时，后面的值会覆盖前一个。类似的还有array_merge_recursive。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array_count_values&lt;/code&gt; 统计数组中所有的值出现的次数，返回一个关联数组&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array_diff&lt;/code&gt; 计算数组的差集，返回在array1但不在array2的元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array_intersect&lt;/code&gt; 计算数组的交集，返回一个在array1中出现同时也在其他所有参数数组中出现的值。在差和交的名称前加上u的函数可以自己指定比较方法。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array_fill&lt;/code&gt; 用给定的值填充数组的num个条目，start_index为返回数组的第一个索引值。array_fill_keys函数可以填充键值对。&lt;code&gt;array_pad&lt;/code&gt; 用值将数组填充到指定长度。键从第一个整型数开始，否则从0开始。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array_flip&lt;/code&gt; 返回一个交换键和值的数组。不合法的值将不会反转。类似的&lt;code&gt;array_reverse&lt;/code&gt;返回一个单元顺序相反的数组。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array_combine(array $keys , array $values)&lt;/code&gt;返回一个由&lt;code&gt;keys&lt;/code&gt;数组作键，&lt;code&gt;values&lt;/code&gt;数组作值的新数组，两个数组长度不一样时抛出异常。&lt;code&gt;array_keys(array $array [, mixed $search_value [, bool $strict= false ]])&lt;/code&gt;返回所有值为&lt;code&gt;search_value&lt;/code&gt;的键名，&lt;code&gt;strict&lt;/code&gt;表示是否进行严格比较。类似地，&lt;code&gt;array_values(array $input)&lt;/code&gt;返回一个由所有值组成的数组，并建立起数字索引。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array_multisort&lt;/code&gt;用来一次多多个数组排序，输入数组被当作一个数据表的若干列来排序。常用在对数据库数据的排序。返回值为bool类型。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array_push&lt;/code&gt;和&lt;code&gt;array_pop&lt;/code&gt;分别在array的末尾弹出或压入一个元素。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array_shift&lt;/code&gt;和&lt;code&gt;array_uinshift&lt;/code&gt;完成类似于上面的功能，不过是在数组开头。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array_product()&lt;/code&gt;和&lt;code&gt;array_sum()&lt;/code&gt;分别返回数组的乘积和总和。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array_filter&lt;/code&gt;用回调函数过滤数组单元。没有回调函数时将删除input中等值于FALSE的条目。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array_map&lt;/code&gt;返回一个arr1所有单元经过callback作用后的单元。callback 接受的参数数目应该和传递给 array_map() 函数的数组数目一致。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array_walk&lt;/code&gt;使用用户自定义的函数对数组每个函数做回调处理。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array_reduce&lt;/code&gt;根据回调将array简化为一个值。function变量可以读取result和item。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array_replace(array $array1 , array $array2 [, array $... ])&lt;/code&gt;将前面的数组的键值对覆盖为后面的键值对。多维数组下有recursive版本。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array_key_exists&lt;/code&gt;检查键名是否存在于数组中。&lt;code&gt;array_search(mixed $needle , array $haystack [, bool $strict = false ])&lt;/code&gt;在数组中搜索给定值。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array_slice&lt;/code&gt;根据offset和length从数组中取出一段。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array_splice&lt;/code&gt;把input数组中由offset和length指定的单元去掉，如果提供了replacement参数，则用其中的单元取代。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array_unique&lt;/code&gt;用于移除数组中重复的值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了这些，还有&lt;code&gt;is_array()&lt;/code&gt;，&lt;code&gt;explode()&lt;/code&gt;，&lt;code&gt;split()&lt;/code&gt;等不以array开头的函数和数组相关，大多用来进行一些简单的操作，列表见&lt;a href=&#34;http://php.net/manual/zh/ref.array.php&#34;&gt;数组参考&lt;/a&gt;。和数组排序相关的函数也有很多，它们在排序依据，是否稳定等方面各不相同，更多内容参考对数组进行排序。&lt;/p&gt;
&lt;h4 id=&#34;字符串&#34;&gt;&lt;a href=&#34;#字符串&#34; class=&#34;headerlink&#34; title=&#34;字符串&#34;&gt;&lt;/a&gt;字符串&lt;/h4&gt;&lt;p&gt;和字符串相关的函数也很多，但只有以str开头的是严格意义上的字符串函数。下面列举了部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;addslashes&lt;/code&gt;转义字符串中的单引号，双引号，反斜线和NUL&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chr&lt;/code&gt;返回ASCII码对应的字符，&lt;code&gt;ord()&lt;/code&gt;是其互补函数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chunk_split($body[,int $chunklen = 76 [,string $end = &amp;quot;\r\n&amp;quot; ]] )&lt;/code&gt;拆分&lt;code&gt;$body&lt;/code&gt;为&lt;code&gt;$chunklen&lt;/code&gt;的小块，每块后用&lt;code&gt;$end&lt;/code&gt;结尾&lt;/li&gt;
&lt;li&gt;&lt;code&gt;crypt&lt;/code&gt;返回一个单向字符串散列，&lt;code&gt;md5&lt;/code&gt;计算字符串的MD5散列值，&lt;code&gt;sha1&lt;/code&gt;计算sha1散列值&lt;/li&gt;
&lt;li&gt;echo 输出一组字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;explode&lt;/code&gt;使用一个字符串分割另一个字符串；类似地，&lt;code&gt;implode&lt;/code&gt;将一个一维数组的值转为字符串。又写作&lt;code&gt;join&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;htmlentites&lt;/code&gt;转义所有的特殊字符为HTML实体；&lt;code&gt;html_entity_decode()&lt;/code&gt;实现相反的步骤。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;htmlspecialchars()&lt;/code&gt;和&lt;code&gt;htmlspecialchars_decode()&lt;/code&gt;完成的功能和上面相似，但是转义的字符只有&lt;code&gt;&amp;amp;&lt;/code&gt;，&lt;code&gt;&amp;quot;&lt;/code&gt;，&lt;code&gt;&amp;#39;&lt;/code&gt;，&lt;code&gt;&amp;lt;&lt;/code&gt;，&lt;code&gt;&amp;gt;&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lcfirst&lt;/code&gt;将首字母小写，&lt;code&gt;ucfirst&lt;/code&gt;将首字母大写，&lt;code&gt;ucwords&lt;/code&gt;将每个单词的首字母大写&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ltrim&lt;/code&gt;，&lt;code&gt;rtrim&lt;/code&gt;和&lt;code&gt;trim&lt;/code&gt;删除字符串首部，尾端和两端的空白。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;str_getcsv&lt;/code&gt;解析csv字符串为一个数组&lt;/li&gt;
&lt;li&gt;&lt;code&gt;str_pad&lt;/code&gt;使用另一个字符串填充字符串到指定长度&lt;/li&gt;
&lt;li&gt;&lt;code&gt;str_repeat&lt;/code&gt; 重复一个字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;str_replace&lt;/code&gt; 字符串替换，&lt;code&gt;preg_replace&lt;/code&gt;的特殊情况&lt;/li&gt;
&lt;li&gt;&lt;code&gt;str_shuffle&lt;/code&gt;随机打乱一个字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;str_split&lt;/code&gt;将一个字符串转换为数组&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strstr&lt;/code&gt;查找字符串的第一次出现。&lt;code&gt;stristr()&lt;/code&gt;则不区分大小写地查找&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strcmp&lt;/code&gt;二进制安全字符串比较大小，&lt;code&gt;strncmp&lt;/code&gt;类似，不过允许指定比较的长度，&lt;code&gt;strnatcmp&lt;/code&gt;以自然顺序比较字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strlen&lt;/code&gt;获取字符串长度&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strpos&lt;/code&gt;查找字符串初次出现位置，&lt;code&gt;strrpos&lt;/code&gt;查找最后一次出现，&lt;code&gt;strripos&lt;/code&gt;不区分大小写查找最后一次出现&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strrev&lt;/code&gt;反转字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strip_tags&lt;/code&gt;去除str中的空字符，HTML标记和PHP标记，和&lt;code&gt;fgetss()&lt;/code&gt;机制一样&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strtoupper&lt;/code&gt;将字符串转化为大写，&lt;code&gt;strtolower&lt;/code&gt;将字符串转换为小写&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strtr()&lt;/code&gt;翻译、转换指定字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;substr&lt;/code&gt;返回字符串的子串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;substr_count&lt;/code&gt;返回子字符串在字符串中出现的次数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;变量&#34;&gt;&lt;a href=&#34;#变量&#34; class=&#34;headerlink&#34; title=&#34;变量&#34;&gt;&lt;/a&gt;变量&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boolvar()&lt;/code&gt;转换变量为bool类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;empty()&lt;/code&gt;判断变量是否为空&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isset()&lt;/code&gt;检测变量是否已设置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;intval()&lt;/code&gt;获取变量整数值，&lt;code&gt;floatval()&lt;/code&gt;获取变量浮点数值，&lt;code&gt;strval()&lt;/code&gt;获取变量的字符串表示&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get_resource_type()&lt;/code&gt;获取资源类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gettype()&lt;/code&gt;获取变量类型，&lt;code&gt;settype($var, string $type)&lt;/code&gt;设置变量类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_array&lt;/code&gt;, &lt;code&gt;is_bool&lt;/code&gt;, &lt;code&gt;is_callable&lt;/code&gt;, &lt;code&gt;is_float&lt;/code&gt;, &lt;code&gt;is_int&lt;/code&gt;, &lt;code&gt;is_null&lt;/code&gt;, &lt;code&gt;is_numeric&lt;/code&gt;, &lt;code&gt;is_object&lt;/code&gt;, &lt;code&gt;is_resource&lt;/code&gt;, &lt;code&gt;is_scalar&lt;/code&gt;, &lt;code&gt;is_string&lt;/code&gt;用来检测各种类型。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;print_r()&lt;/code&gt;和&lt;code&gt;var_dump()&lt;/code&gt;打印变量的相关信息，&lt;code&gt;var_export()&lt;/code&gt;以合法PHP代码的形式返回变量的字符串表示&lt;/li&gt;
&lt;li&gt;&lt;code&gt;serialize()&lt;/code&gt;序列化一个变量，&lt;code&gt;unserialize()&lt;/code&gt;反序列化一个变量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unset()&lt;/code&gt;销毁指定的变量&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;类和对象&#34;&gt;&lt;a href=&#34;#类和对象&#34; class=&#34;headerlink&#34; title=&#34;类和对象&#34;&gt;&lt;/a&gt;类和对象&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;spl_autoload_register()&lt;/code&gt;尝试在类名未定义时启动类的自动加载&lt;/li&gt;
&lt;li&gt;&lt;code&gt;class_alias&lt;/code&gt;为一个类创建别名。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;class_exists&lt;/code&gt;检查指定的类是否定义&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get_class()&lt;/code&gt;返回对象实例所属类的名字。类似地还有&lt;code&gt;get_class_vars&lt;/code&gt;和&lt;code&gt;get_class_methods&lt;/code&gt;函数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get_declare_classes&lt;/code&gt;和&lt;code&gt;get_declare_interfaces&lt;/code&gt;以及&lt;code&gt;get_declare_traits&lt;/code&gt;获取脚本中已定义的类、接口、trait数组。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;method_exists( mixed $object , string $method_name )&lt;/code&gt;检查类方法是否存在于指定object中，类似地还有&lt;code&gt;property_exsits&lt;/code&gt;，&lt;code&gt;interface_exists&lt;/code&gt;和&lt;code&gt;trait_exist&lt;/code&gt;等&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;日期和时间&#34;&gt;&lt;a href=&#34;#日期和时间&#34; class=&#34;headerlink&#34; title=&#34;日期和时间&#34;&gt;&lt;/a&gt;日期和时间&lt;/h4&gt;&lt;p&gt;PHP中的时间以64为数字存储。使用时需要配置好&lt;code&gt;php.ini&lt;/code&gt;中时区等信息。&lt;code&gt;DateTime&lt;/code&gt;，&lt;code&gt;DateTimeZone&lt;/code&gt;，&lt;code&gt;DateInterval&lt;/code&gt;等对象便于进行相关的操作。PHP同时提供了OOP风格和过程化风格两种方式使用函数。其中&lt;code&gt;DateTime&lt;/code&gt;和&lt;code&gt;DateTimeImmutable&lt;/code&gt;都继承自&lt;code&gt;DateTimeInterface&lt;/code&gt;接口，有着&lt;code&gt;diff&lt;/code&gt;，&lt;code&gt;format&lt;/code&gt;，&lt;code&gt;getTimestamp&lt;/code&gt;，&lt;code&gt;getTimezone&lt;/code&gt;等方法。&lt;/p&gt;
&lt;p&gt;DateTime中的部分方法如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;add(DateInterval $interval)&lt;/code&gt;在当前时间上加上一个时间段&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sub(DateInterval $interval)&lt;/code&gt;在当前时间上减去一个时间段。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__construct()&lt;/code&gt;，创建一个对象，过程化风格: &lt;code&gt;date_create()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;createFromFormat&lt;/code&gt;创建一种时间格式format的写法格式见&lt;a href=&#34;https://www.php.net/manual/zh/datetime.createfromformat.php&#34;&gt;参考&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;modify&lt;/code&gt;修改当前时间，modify为合法的时间格式。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setDate(int $year, int $month, int $day )&lt;/code&gt;设置日期&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setTime(int $hour ,int $minute [,int $second = 0 ])&lt;/code&gt;设置时间。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setTimestamp()&lt;/code&gt;设置时间戳。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上述方法都有对应的过程化风格的对应函数。&lt;/p&gt;
&lt;p&gt;DatePeriod和DateTimeZone等的介绍从略。除了以上的对象方法过程化的函数外，还有以下一些常用方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;date($format[, $timestamp)&lt;/code&gt;，格式化一个本地时间&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getdate()&lt;/code&gt;，获得日期时间信息，&lt;code&gt;localtime&lt;/code&gt;功能类似，返回一个数组。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mktime&lt;/code&gt;获得一个日期的时间戳，默认为当前。类似的还有&lt;code&gt;time&lt;/code&gt;，&lt;code&gt;microtime&lt;/code&gt;，返回一个时间戳类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strtotime&lt;/code&gt;将英文文本的日期时间解析为Unix时间戳&lt;/li&gt;
&lt;li&gt;有意思的是&lt;code&gt;date_sunset&lt;/code&gt;和&lt;code&gt;date_sunrise&lt;/code&gt;可以获取指定时间戳的日出日落时间&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;文件系统&#34;&gt;&lt;a href=&#34;#文件系统&#34; class=&#34;headerlink&#34; title=&#34;文件系统&#34;&gt;&lt;/a&gt;文件系统&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;basename()&lt;/code&gt;返回路径的文件名部分；&lt;code&gt;dirname()&lt;/code&gt;返回路径中的目录部分，&lt;code&gt;realpath()&lt;/code&gt;返回规范的绝对路径名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chgrp()&lt;/code&gt;改变文件所属组，类似的还有&lt;code&gt;chmod&lt;/code&gt;和&lt;code&gt;chown&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;copy&lt;/code&gt;用于拷贝文件，&lt;code&gt;rename&lt;/code&gt;用于移动和重命名文件。注意，这里没有delete函数。&lt;code&gt;unlink&lt;/code&gt;用于删除文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;link ()&lt;/code&gt;建立一个硬连接，&lt;code&gt;linkinfo&lt;/code&gt;, &lt;code&gt;lstat&lt;/code&gt;给出连接信息。&lt;code&gt;symlink&lt;/code&gt;创建一个符号连接。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mkdir&lt;/code&gt;和&lt;code&gt;rmdir&lt;/code&gt;用来创建和删除文件夹&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file&lt;/code&gt;把整个文件都入到一个数组中，一行一个元素，可以使用URL作为文件名。&lt;code&gt;file_exists&lt;/code&gt;检查文件或目录是否已存在。&lt;code&gt;tmpfile&lt;/code&gt;则会建立一个关闭后自动删除的临时文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_get_contents&lt;/code&gt;将文件读入到字符串中，可以使用&lt;code&gt;stream_context_create&lt;/code&gt;创建上下文进行更细致的操作。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_put_contents()&lt;/code&gt;写文件，和依次调用&lt;code&gt;fopen()&lt;/code&gt;, &lt;code&gt;fwrite()&lt;/code&gt;, &lt;code&gt;fclose()&lt;/code&gt;效果一样。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fileatime&lt;/code&gt;, &lt;code&gt;filectime&lt;/code&gt;, &lt;code&gt;filemtime&lt;/code&gt;, &lt;code&gt;filegroup&lt;/code&gt;, &lt;code&gt;fileowner&lt;/code&gt;, &lt;code&gt;fileperms&lt;/code&gt;, &lt;code&gt;filesize&lt;/code&gt;, &lt;code&gt;filetype&lt;/code&gt;, &lt;code&gt;stat&lt;/code&gt;等和字面意义一样获取文件的各方面信息。它们接收文件路径作为参数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_dir&lt;/code&gt;, &lt;code&gt;is_executable&lt;/code&gt;, &lt;code&gt;is_file&lt;/code&gt;, &lt;code&gt;is_link&lt;/code&gt;, &lt;code&gt;is_readable&lt;/code&gt;, &lt;code&gt;is_uploaded_file&lt;/code&gt;, &lt;code&gt;is_writable&lt;/code&gt;检查文件各种属性&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fopen&lt;/code&gt;打开一个文件，返回一个resource句柄，可以交给&lt;code&gt;fread&lt;/code&gt;, &lt;code&gt;fwrite&lt;/code&gt;, &lt;code&gt;fscanf&lt;/code&gt;, &lt;code&gt;fclose&lt;/code&gt;等函数做读写操作。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fgets&lt;/code&gt;从当前指针处读取一行，&lt;code&gt;fgetc&lt;/code&gt;读取一个字符，&lt;code&gt;fstat&lt;/code&gt;返回文件信息，&lt;code&gt;ftruncate&lt;/code&gt;将文件阶段到给定长度。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;glob()&lt;/code&gt;寻找和pattern匹配的文件路径&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Directory类通过&lt;code&gt;dir()&lt;/code&gt;创建。Directory实例有&lt;code&gt;close&lt;/code&gt;，&lt;code&gt;read&lt;/code&gt;，&lt;code&gt;rewind&lt;/code&gt;三种方法。分别用来释放句柄，读取条目和倒回开头。初次以外还有下面这些常用的目录相关函数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;chdir(string $directory)&lt;/code&gt;用来改变当前目录，&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getcwd&lt;/code&gt;取得当前工作目录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scandir()&lt;/code&gt;返回一个包含目录中所有文件和目录的数组&lt;/li&gt;
&lt;li&gt;&lt;code&gt;closedir()&lt;/code&gt;关闭通过&lt;code&gt;opendir()&lt;/code&gt;打开的目录流。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;readdir()&lt;/code&gt;返回目录中下一个文件的文件名。文件名以在文件系统中的排序返回。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;错误处理&#34;&gt;&lt;a href=&#34;#错误处理&#34; class=&#34;headerlink&#34; title=&#34;错误处理&#34;&gt;&lt;/a&gt;错误处理&lt;/h4&gt;&lt;p&gt;下面这些函数允许你定义自己的错误处理规则，以及修改错误记录的方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;debug_backtrace()&lt;/code&gt;产生一条PHP的回溯跟踪，返回数组类型；&lt;code&gt;debug_print_backtrace()&lt;/code&gt;则将回溯打印出来。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_get_last()&lt;/code&gt;获取最后一个发生错误的信息，&lt;code&gt;error_clear_last()&lt;/code&gt;清除最后一个错误信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_log()&lt;/code&gt;发送错误信息到web服务器的错误日志或是一个文件里。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error_reporting()&lt;/code&gt;设置应该报告的PHP错误级别。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set_error_handler&lt;/code&gt;, &lt;code&gt;set_exception_handler&lt;/code&gt;, &lt;code&gt;restore_error_handler&lt;/code&gt;, &lt;code&gt;restore_exception_handler&lt;/code&gt;分别是设置和重置错误以及异常处理的函数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;trigger_error()&lt;/code&gt;触发一个用户级别的错误条件，在运行出现异常时，需要产生一个特定响应时很有用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;session&#34;&gt;&lt;a href=&#34;#session&#34; class=&#34;headerlink&#34; title=&#34;session&#34;&gt;&lt;/a&gt;session&lt;/h4&gt;&lt;p&gt;在会话支持下，每个访问网站的用户都有一个唯一的id标识，这个标识可以存储在cookie中，也可以通过URL传递。当一个访问者访问网站时，PHP将自动检查(如果&lt;code&gt;session.auto_start&lt;/code&gt;被设置为1）或者在你要求下检查(明确通过&lt;code&gt;session_start()&lt;/code&gt;或者隐式通&lt;code&gt; session_register()&lt;/code&gt;) 当前会话 id 是否是先前发送的请求创建. 如果是这种情况，那么先前保存的环境将被重建。&lt;/p&gt;
&lt;p&gt;安全方面需要注意以下几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;session.cookie_lifetime=0&lt;/code&gt;, 即浏览器不持久化存储cookie数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;session.use_cookies=On&lt;/code&gt; 并且&lt;code&gt;session.use_only_cookies=On&lt;/code&gt;，即通过HTTP cookie实现会话ID管理&lt;/li&gt;
&lt;li&gt;&lt;code&gt;session.use_strict_mode=On&lt;/code&gt;，即禁止使用未初始化会话id的会话，从而防止Javascript进行会话ID的注入&lt;/li&gt;
&lt;li&gt;&lt;code&gt;session.cookie_httponly=On&lt;/code&gt;，禁止Javascript访问会话ID&lt;/li&gt;
&lt;li&gt;&lt;code&gt;session.cookie_secure=On&lt;/code&gt;，仅在HTTPS协议下访问session ID，用在仅支持HTTPS的站点&lt;/li&gt;
&lt;li&gt;&lt;code&gt;session.hash_function=&amp;quot;sha256&amp;quot;&lt;/code&gt;。 高强度的散列函数可以产生高强度的会话ID&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其他注意事项可以在PHP的&lt;a href=&#34;http://php.net/manual/zh/session.security.php&#34;&gt;会话与安全章节&lt;/a&gt;找到，根据实际需要选择。下面是一些session函数的使用:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;session_destroy()&lt;/code&gt;, 销毁一个会话里的全部数据，但不会重置相关全局变量也不会重置cookie，再次使用时需要重新调用&lt;code&gt;session_start()&lt;/code&gt;函数。为彻底删除session，需要调用&lt;code&gt;setcookie()&lt;/code&gt;清除cookie中的session ID。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;session_cache_expire()&lt;/code&gt;设置或读取当前缓存到期时间（这个只和浏览器页面刷新缓存有关）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;session_id()&lt;/code&gt;获取&amp;#x2F;设置当前会话ID，PHP仅允许会话ID包括a-z A-Z 0-9 ,（逗号） -（减号）.如果不是用cookie来存储session ID，session ID通常附在SID常量中，放在URL里。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;session_regenerate_id()&lt;/code&gt;在不修改当前session数据的前提下使用新的ID替换原有会话ID。如果启用了&lt;code&gt;session.use_trans_sid&lt;/code&gt;选项,那么必须在调用&lt;code&gt;session_regenerate_id()&lt;/code&gt;函数之后开始进行输出工作，否则会导致使用原有的会话 ID&lt;/li&gt;
&lt;li&gt;&lt;code&gt;session_start()&lt;/code&gt;创建新会话或者重用现有会话。 如果通过GET或者POST方式，或者使cookie提交了会话ID，则会重用现有会话。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;session_status()&lt;/code&gt;返回当前会话状态&lt;/li&gt;
&lt;li&gt;&lt;code&gt;session_write_close()&lt;/code&gt;写入session数据，然后关闭会话&lt;/li&gt;
&lt;li&gt;&lt;code&gt;session_name()&lt;/code&gt;设置或返回当前回话名称，名称应短小易懂，且不能由纯数字组成，如&lt;code&gt;website_id&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;session_save_path()&lt;/code&gt;读取&amp;#x2F;设置当前会话的保存路径&lt;/li&gt;
&lt;li&gt;&lt;code&gt;session_unset()&lt;/code&gt;释放当前会话注册的所有会话变量&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;进程控制&#34;&gt;&lt;a href=&#34;#进程控制&#34; class=&#34;headerlink&#34; title=&#34;进程控制&#34;&gt;&lt;/a&gt;进程控制&lt;/h4&gt;&lt;p&gt;这部分函数提供执行系统本身命令的能力。注意，&lt;strong&gt;以加锁方式打开的文件，必须在执行后台程序前关闭&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;escapeshellarg(string $arg)&lt;/code&gt;和&lt;code&gt;escapeshellcmd(string $command)&lt;/code&gt;对参数和命令元字符转义，保证安全。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exec()&lt;/code&gt;和&lt;code&gt;passthru()&lt;/code&gt;都能执行一个外部程序，区别是前者返回结果的最后一行，后者返回未经处理的全部输出数据。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shell_exec()&lt;/code&gt;在shell环境下执行命令，以字符串的形式返回完整的字符串。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;system(string $command[, int &amp;amp;$return_var ] )&lt;/code&gt;执行 command 参数所指定的命令，并且输出执行结果。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;函数调用&#34;&gt;&lt;a href=&#34;#函数调用&#34; class=&#34;headerlink&#34; title=&#34;函数调用&#34;&gt;&lt;/a&gt;函数调用&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;call_user_func(callable $callback [, mixed $parameter [, mixed $... ]])&lt;/code&gt;把第一个参数作为回掉函数调用。在参数很多时，建议使用$callback(…values)的形式传入数组。类似的还有&lt;code&gt;forward_static_call&lt;/code&gt;和&lt;code&gt;forward_static_call_array&lt;/code&gt;用来调用静态方法。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;func_get_arg(int $arg_num)&lt;/code&gt;和&lt;code&gt;func_get_arg()&lt;/code&gt;返回自定义函数的参数和参数列表，用在函数体内。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;function_exists()&lt;/code&gt;判断函数是否定义&lt;/li&gt;
&lt;li&gt;&lt;code&gt;register_shutdown_function&lt;/code&gt;, &lt;code&gt;register_tick_function&lt;/code&gt;用来注册&lt;code&gt;exit&lt;/code&gt;之后和每个tick后执行的函数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Hash&#34;&gt;&lt;a href=&#34;#Hash&#34; class=&#34;headerlink&#34; title=&#34;Hash&#34;&gt;&lt;/a&gt;Hash&lt;/h4&gt;&lt;p&gt;这部分函数自5.1.2版本后成为核心的一部分。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hash()&lt;/code&gt;根据指定的哈希算法生成哈希值。类似的还有&lt;code&gt;hash_file&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hash_hmac()&lt;/code&gt;使用HMAC方法生成带有密钥的哈希值，类似的还有&lt;code&gt;hash_hmac_file&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hash_init()&lt;/code&gt;初始化一个哈希运算上下文，返回resource类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hash_update(resource $context , string $data)&lt;/code&gt;向活跃的哈希运算上下文中填充数据。细化的，还有&lt;code&gt;hash_update_file&lt;/code&gt;和&lt;code&gt;hash_update_stream&lt;/code&gt;两个函数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hash_final()&lt;/code&gt;结束哈希上下文，返回摘要内容。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hash_copy()&lt;/code&gt;返回一个哈希运算上下文副本。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;PHP自身&#34;&gt;&lt;a href=&#34;#PHP自身&#34; class=&#34;headerlink&#34; title=&#34;PHP自身&#34;&gt;&lt;/a&gt;PHP自身&lt;/h4&gt;&lt;p&gt;这些函数允许你获得许多关于PHP本身的参数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;assert()&lt;/code&gt;检查一个断言是否为FALSE，并在失败的时候调用&lt;code&gt;assert_options()&lt;/code&gt;中指定的回调函数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dl()&lt;/code&gt;运行时加载一个PHP扩展&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get_cfg_var()&lt;/code&gt;获取PHP配置选项的值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get_current_user()&lt;/code&gt;获取当前PHP脚本所有者名称&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get_included_files()&lt;/code&gt;返回被include和require文件名的 array&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ini_get()&lt;/code&gt;获取一个配置选项的值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ini_set()&lt;/code&gt;设置指定配置选项的值。这个选项会在脚本运行时保持新的值，并在脚本结束时恢复&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ini_restore()&lt;/code&gt;恢复指定的配置选项到它的原始值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;memory_get_usage()&lt;/code&gt;返回当前分配给你的 PHP 脚本的内存量，单位是字节（byte）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;php_sapi_name()&lt;/code&gt;返回web服务器和PHP之间的接口类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;php_uname()&lt;/code&gt;返回运行PHP的系统的有关信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;phpinfo([int $what = INFO_ALL])&lt;/code&gt;输出关于 PHP 配置的信息。可以通过&lt;code&gt;what&lt;/code&gt;筛选输出内容。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;phpversion()&lt;/code&gt;获取当前的PHP版本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;version_compare()&lt;/code&gt;对比两个「PHP 规范化」的版本数字字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;数学&#34;&gt;&lt;a href=&#34;#数学&#34; class=&#34;headerlink&#34; title=&#34;数学&#34;&gt;&lt;/a&gt;数学&lt;/h4&gt;&lt;p&gt;这部分函数处理integer和float范围内的计算。预定义常量包括&lt;code&gt;M_PI&lt;/code&gt;, &lt;code&gt;M_E&lt;/code&gt;, &lt;code&gt;M_LOG2E&lt;/code&gt;, &lt;code&gt;M_LN2&lt;/code&gt;, &lt;code&gt;M_PI_2&lt;/code&gt;, &lt;code&gt;M_1_PI&lt;/code&gt;, &lt;code&gt;M_SQRT2&lt;/code&gt;, &lt;code&gt;M_SQRT3&lt;/code&gt;, &lt;code&gt;INF&lt;/code&gt;等诸多数学常量。函数名和其他语言类似。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;三角函数相关：&lt;code&gt;sin&lt;/code&gt;, &lt;code&gt;cos&lt;/code&gt;, &lt;code&gt;tan&lt;/code&gt;, &lt;code&gt;asin&lt;/code&gt;, &lt;code&gt;acos&lt;/code&gt;, &lt;code&gt;atan&lt;/code&gt;计算单位为弧度&lt;/li&gt;
&lt;li&gt;双曲函数相关：&lt;code&gt;sinh&lt;/code&gt;, &lt;code&gt;cosh&lt;/code&gt;, &lt;code&gt;tanh&lt;/code&gt;, &lt;code&gt;asinh&lt;/code&gt;, &lt;code&gt;acosh&lt;/code&gt;, &lt;code&gt;atanh&lt;/code&gt;, &lt;code&gt;atan2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;对数相关：&lt;code&gt;log&lt;/code&gt;, &lt;code&gt;log10&lt;/code&gt;, &lt;code&gt;log1p&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;指数相关：&lt;code&gt;pow&lt;/code&gt;, &lt;code&gt;exp&lt;/code&gt;, &lt;code&gt;expm&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;近似相关：&lt;code&gt;round&lt;/code&gt;, &lt;code&gt;floor&lt;/code&gt;, &lt;code&gt;ceil&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;随机数相关： &lt;code&gt;rand(int $min , int $max)&lt;/code&gt;, &lt;code&gt;mt_rand&lt;/code&gt;（用法同&lt;code&gt;rand&lt;/code&gt;，性能更好）, &lt;code&gt;srand&lt;/code&gt;和&lt;code&gt;mt_srand&lt;/code&gt;（现已不需要使用）&lt;/li&gt;
&lt;li&gt;进制转换相关：&lt;code&gt;bindec&lt;/code&gt;, &lt;code&gt;octdec&lt;/code&gt;, &lt;code&gt;hexdec&lt;/code&gt;转为十进制数（读取字符串，输出数字），相对应还有&lt;code&gt;decbin&lt;/code&gt;, &lt;code&gt;decbin&lt;/code&gt;, &lt;code&gt;dechex&lt;/code&gt;。&lt;code&gt;base_convert()&lt;/code&gt;可以做任意进制转换&lt;/li&gt;
&lt;li&gt;角度相关：&lt;code&gt;deg2rad&lt;/code&gt;角度转弧度&lt;/li&gt;
&lt;li&gt;运算相关：&lt;code&gt;intdiv&lt;/code&gt;返回商的整数部分，&lt;code&gt;fmod&lt;/code&gt;返回浮点数余数。&lt;code&gt;abs&lt;/code&gt;计算绝对值，&lt;code&gt;sqrt&lt;/code&gt;计算开根号&lt;/li&gt;
&lt;li&gt;判断相关：&lt;code&gt;is_finite&lt;/code&gt;, &lt;code&gt;is_infinite&lt;/code&gt;, &lt;code&gt;is_nan&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;其他：&lt;code&gt;max&lt;/code&gt;, &lt;code&gt;min&lt;/code&gt;（可以输入数组）, &lt;code&gt;pi&lt;/code&gt;, &lt;code&gt;hypot&lt;/code&gt;（根据直角边计算三角形斜边长）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;输出控制&#34;&gt;&lt;a href=&#34;#输出控制&#34; class=&#34;headerlink&#34; title=&#34;输出控制&#34;&gt;&lt;/a&gt;输出控制&lt;/h4&gt;&lt;p&gt;PHP脚本有输出时，输出控制函数可以用这些来控制输出。如通过&lt;code&gt;ob_start()&lt;/code&gt;将下文的输出放在缓冲区直到调用&lt;code&gt;ob_end_flush()&lt;/code&gt;。通常配合&lt;code&gt;header()&lt;/code&gt;使用，在真正返回数据前写入header和cookie。&lt;/p&gt;
&lt;p&gt;从略。&lt;/p&gt;
&lt;h4 id=&#34;杂项&#34;&gt;&lt;a href=&#34;#杂项&#34; class=&#34;headerlink&#34; title=&#34;杂项&#34;&gt;&lt;/a&gt;杂项&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;constant()&lt;/code&gt;返回一个常量的值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;define()&lt;/code&gt;定义一个常量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exit()&lt;/code&gt;输出一个消息并且退出当前脚本，&lt;code&gt;die&lt;/code&gt;是&lt;code&gt;exit&lt;/code&gt;的同名函数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;highlight_file()&lt;/code&gt;语法高亮一个文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;highlight_string()&lt;/code&gt;语法高亮一个字符串，使用方法同上。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sleep()&lt;/code&gt;延迟指定秒数执行。类似的还有&lt;code&gt;usleep&lt;/code&gt;以指定微秒数暂缓执行，&lt;code&gt;time_sleep_until&lt;/code&gt;使脚本睡眠到指定时间&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uniqid()&lt;/code&gt;返回一个基于当前微秒级时间的带前缀的唯一ID。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;绑定拓展库&#34;&gt;&lt;a href=&#34;#绑定拓展库&#34; class=&#34;headerlink&#34; title=&#34;绑定拓展库&#34;&gt;&lt;/a&gt;绑定拓展库&lt;/h3&gt;&lt;p&gt;下面的拓展库绑定在PHP发行包中。较之内核部分的函数，更偏向为解决某类问题而设计。这里也只摘选部分常用的介绍。&lt;/p&gt;
&lt;h4 id=&#34;Ctype&#34;&gt;&lt;a href=&#34;#Ctype&#34; class=&#34;headerlink&#34; title=&#34;Ctype&#34;&gt;&lt;/a&gt;Ctype&lt;/h4&gt;&lt;p&gt;用来检测 在当前的区域设定下，一个字符或者字符串 是否仅包含指定类型的字符。根据官方描述，&lt;strong&gt;“如果可以满足需求，请优先考虑使用 ctype 函数， 而不是正则表达式或者对应的 “str_*” 和 “is_*” 函数。 因为 ctype 使用的是原生 C 库，所以会有明显的性能优势”&lt;/strong&gt;。在4.2.0版本后，这些函数是默认启动的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ctype_alpha()&lt;/code&gt;纯字符检测&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctype_upper()&lt;/code&gt;大写字母检测&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctype_lower()&lt;/code&gt;小写字母检测&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctype_digit()&lt;/code&gt;纯数字检测&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctype_alnum()&lt;/code&gt;检查字符串内的字符否全部为字母或数字&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctype_cntrl()&lt;/code&gt;控制字符检测&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctype_print()&lt;/code&gt;字符是否都可以打印&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctype_graph()&lt;/code&gt;字符输出是否都是可见的&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctype_punct()&lt;/code&gt;字符是否都可打印却不是字母数组和空白&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctype_space()&lt;/code&gt;空白字符检测&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctype_xdigit()&lt;/code&gt;十六进制字符串检测&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;正则表达式&#34;&gt;&lt;a href=&#34;#正则表达式&#34; class=&#34;headerlink&#34; title=&#34;正则表达式&#34;&gt;&lt;/a&gt;正则表达式&lt;/h4&gt;&lt;p&gt;在PHP5.3版本后，原来的POSIX Regex不再推荐使用。兼容Perl的正则表达式库PCRE仍可以使用，且默认开启。这里仅介绍PCRE相关函数，它们均以&lt;code&gt;preg&lt;/code&gt;开头。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;preg_match()&lt;/code&gt;返回pattern在subject中的匹配次数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;preg_match_all()&lt;/code&gt;搜索subject中所有匹配pattern给定正则表达式的匹配结果并且将它们以指定顺序输出到matches结果中.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;preg_replace()&lt;/code&gt;执行一个正则表达式的搜索和替换，当$pattern和$replacement都是数组时，会进行相对应位置的替换。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;preg_grep(string $pattern , array $input [, int $flags = 0 ])&lt;/code&gt;返回给定数组input中与模式pattern 匹配的元素组成的数组.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;preg_split()&lt;/code&gt;通过正则表达式分割字符串，返回一个数组。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;JSON&#34;&gt;&lt;a href=&#34;#JSON&#34; class=&#34;headerlink&#34; title=&#34;JSON&#34;&gt;&lt;/a&gt;JSON&lt;/h4&gt;&lt;p&gt;自5.2.0起，JSON拓展默认内置并编译进PHP。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;json_encode()&lt;/code&gt;JSON编码一个变量。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;json_decode()&lt;/code&gt;解码一个JSON格式的字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;json_last_error()&lt;/code&gt;返回JSON编码时最后的错误&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;多字节字符串&#34;&gt;&lt;a href=&#34;#多字节字符串&#34; class=&#34;headerlink&#34; title=&#34;多字节字符串&#34;&gt;&lt;/a&gt;多字节字符串&lt;/h4&gt;&lt;p&gt;在汉语中，每个字符通常占用2个字节，在使用string的相关函数时，可能会出现意外问题。多字节字符串即为了解决此问题。这不是一个默认扩展，需要在configure选项中显式激活。详见&lt;a href=&#34;http://php.net/manual/zh/mbstring.installation.php&#34;&gt;安装&lt;/a&gt;。另外，&lt;code&gt;mbstring&lt;/code&gt;支持“函数重载”，即使用&lt;code&gt;mb_xxx&lt;/code&gt;替代原有的字符串函数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mb_detect_encoding()&lt;/code&gt;检测字符的编码&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mb_ereg_xxx&lt;/code&gt;打头的与&lt;code&gt;preg_xxx&lt;/code&gt;同名的函数为正则匹配多字节版&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mb_strlen()&lt;/code&gt;获取字符串长度。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mb_split()&lt;/code&gt;使用正则表达式分割多字节字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mb_substr()&lt;/code&gt;执行一个多字节安全的&lt;code&gt;substr()&lt;/code&gt;操作&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mb_strpos()&lt;/code&gt;查找字符串在另一个字符串中首次出现的位置；类似地，&lt;code&gt;mb_strrpos&lt;/code&gt;查找最后出现的位置。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mb_strstr ()&lt;/code&gt;查找字符串在另一个字符串里的首次出现；类似地，&lt;code&gt;mb_strrchr()&lt;/code&gt;查找指定字符在另一个字符串中最后一次的出现&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;BCMath&#34;&gt;&lt;a href=&#34;#BCMath&#34; class=&#34;headerlink&#34; title=&#34;BCMath&#34;&gt;&lt;/a&gt;BCMath&lt;/h4&gt;&lt;p&gt;这部分函数进行任意大小和精度的数字的二进制计算。自4.0.4后随PHP一起发布。Windows版本下是默认支持的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;string bcadd(string $left_operand , string $right_operand [, int $scale ] )&lt;/code&gt;加法。scale用来决定小数点位数，输入输出均未string类型，下同。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bcsub()&lt;/code&gt;减法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int bccomp()&lt;/code&gt;比较&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bcmul()&lt;/code&gt;乘法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bcdiv()&lt;/code&gt;除法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bcmod()&lt;/code&gt;取模&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bcpow()&lt;/code&gt;乘方&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bcsqrt()&lt;/code&gt;二次方根&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bcscale()&lt;/code&gt;设置所有bc数学函数的默认小数点位数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;图像处理&#34;&gt;&lt;a href=&#34;#图像处理&#34; class=&#34;headerlink&#34; title=&#34;图像处理&#34;&gt;&lt;/a&gt;图像处理&lt;/h4&gt;&lt;p&gt;PHP可以处理各种格式的图像，并把它们输出到浏览器。这需要在编译时指定GD库（除了&lt;code&gt;getimagesize()&lt;/code&gt;函数）。GD库不仅能处理图像，还能对字体进行处理。使用PHP可以动态修改图像文件，或为图像添加水印信息，甚至创建一个图像。&lt;/p&gt;
&lt;p&gt;下面是和图像信息相关的函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gd_info()&lt;/code&gt;获取当前安装的GD库信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getimagesize()&lt;/code&gt;获取图像大小，返回数组类型，按顺序分别是宽度，高度，类型，描述宽高的字符串。&lt;code&gt;getimagesizefromstring&lt;/code&gt;函数则通过打开的图片信息（字符串格式）中读取图像尺寸信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;image_type_to_extension()&lt;/code&gt;获取图像类型的文件后缀&lt;/li&gt;
&lt;li&gt;&lt;code&gt;imageistruecolor(resource $image)&lt;/code&gt;检查图像是否为真彩色&lt;/li&gt;
&lt;li&gt;&lt;code&gt;imagesx()&lt;/code&gt;返回image所代表的图像宽度；&lt;code&gt;imagesy()&lt;/code&gt;返回所代表的图像高度&lt;/li&gt;
&lt;li&gt;&lt;code&gt;imagetypes()&lt;/code&gt;返回PHP支持的图像类型，int类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;剩下还有众多以&lt;code&gt;image&lt;/code&gt;开头的和创建、输出、删除图像，画图、编辑图片、设置颜色、设置字体相关的函数，见&lt;a href=&#34;https://www.php.net/manual/zh/book.image.php&#34;&gt;参考&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&#34;Exif&#34;&gt;&lt;a href=&#34;#Exif&#34; class=&#34;headerlink&#34; title=&#34;Exif&#34;&gt;&lt;/a&gt;Exif&lt;/h4&gt;&lt;p&gt;通过Exif拓展，可以操作图像元数据。必须使用&lt;code&gt;--enable-exif&lt;/code&gt;选项编译PHP，Windows用户还需要启用mbstring扩展。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;exif_imagetype()&lt;/code&gt;读取一个图像的第一个字节并检查其签名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exif_read_data()&lt;/code&gt;函数从JPEG或TIFF图像文件中读取EXIF头信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exif_thumbnail()&lt;/code&gt;读取TIFF或JPEG图像中的嵌入缩略图。如果图像不包含缩略图则返回FALSE&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Socket&#34;&gt;&lt;a href=&#34;#Socket&#34; class=&#34;headerlink&#34; title=&#34;Socket&#34;&gt;&lt;/a&gt;Socket&lt;/h4&gt;&lt;p&gt;Socket拓展基于流行的BSD sockets，实现了和socket通讯功能的底层接口。在编译PHP时必须在配置中添加—enable-sockets配置项。利用这部分函数可以很方便地搭建起socket服务器和客户端，示例见&lt;a href=&#34;http://php.net/manual/zh/sockets.examples.php&#34;&gt;官网&lt;/a&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;socket_create(int $domain , int $type , int $protocol)&lt;/code&gt;创建并返回一个套接字（resource类型）。其中&lt;code&gt;domain&lt;/code&gt;指定使用的网络协议族，&lt;code&gt;type&lt;/code&gt;指定建立的套接字类型，&lt;code&gt;protocol&lt;/code&gt;指定使用的具体协议。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;socket_create_listen()&lt;/code&gt;在某端口打开socket以接收连接。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;socket_bind()&lt;/code&gt;绑定网络地址到套接字的源。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;socket_connect()&lt;/code&gt;使用address作为目的地址，建立套接字连接。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;socket_listen()&lt;/code&gt;在创建好socket资源，并绑定了source address后，可以调用此函数监听进入的数据流。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;socket_accept()&lt;/code&gt;在依次使用socket_create创建套接字，使用&lt;code&gt;socket_bind&lt;/code&gt;绑定端口，使用&lt;code&gt;socket_listen&lt;/code&gt;监听连接后。该函数允许到此套接字上的连接，返回一个新的socket资源用来通信。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;socket_read()&lt;/code&gt;从已连接的socket中读取一段长度的数据，返回读出的数据。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;socket_recv()&lt;/code&gt;功能同上，返回字节数并将数据存放在&lt;code&gt;$buf&lt;/code&gt;中。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;socket_recvfrom() &lt;/code&gt;从已连接和还未连接的socket中读取数据。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;socket_write()&lt;/code&gt;向socket中写入数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;socket_send()&lt;/code&gt;向已连接的socket中写入数据。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;socket_sendto()&lt;/code&gt;向socket中发送数据而不管是否已连接&lt;/li&gt;
&lt;li&gt;&lt;code&gt;socket_getsockname()&lt;/code&gt;和&lt;code&gt;socket_getpeername()&lt;/code&gt;获取本地和远端socket信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;socket_set_block()&lt;/code&gt;和&lt;code&gt;socket_set_nonblock()&lt;/code&gt;设置socket是否阻塞&lt;/li&gt;
&lt;li&gt;&lt;code&gt;socket_set_option()&lt;/code&gt;设置套接字选项&lt;/li&gt;
&lt;li&gt;&lt;code&gt;socket_shutdown()&lt;/code&gt;停止从socket中读写数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;socket_close()&lt;/code&gt;关闭给定的socket资源&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;外部拓展库&#34;&gt;&lt;a href=&#34;#外部拓展库&#34; class=&#34;headerlink&#34; title=&#34;外部拓展库&#34;&gt;&lt;/a&gt;外部拓展库&lt;/h3&gt;&lt;p&gt;这些扩展库已经绑定在PHP发行包中，但是要编译以下扩展库，需要外部的库文件。这里仅介绍常用的cURL库。Mysqli和Mongo等可能会用得到的库介绍从略。&lt;/p&gt;
&lt;h4 id=&#34;client-URL&#34;&gt;&lt;a href=&#34;#client-URL&#34; class=&#34;headerlink&#34; title=&#34;client URL&#34;&gt;&lt;/a&gt;client URL&lt;/h4&gt;&lt;p&gt;PHP支持Daniel Stenberg创建的libcurl库，能够连接通讯各种服务器、使用各种协议。这些curl函数在PHP 4.0.2中引入。需要安装libcurl包才能使用PHP的cURL函数。安装过程从略。curl的使用流程思路和socket，mysql等十分相似，先使用&lt;code&gt;curl_init()&lt;/code&gt;初始化会话，再使用&lt;code&gt;curl_setopt()&lt;/code&gt;设置选项，然后通过&lt;code&gt;curl_exec()&lt;/code&gt;执行会话，最后使用&lt;code&gt;curl_close()&lt;/code&gt;关闭。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;curl_setopt()&lt;/code&gt;设置一个传输选项，常用的设置包括&lt;code&gt;CURLOPT_URL&lt;/code&gt;, &lt;code&gt;CURLOPT_HEADER&lt;/code&gt;, &lt;code&gt;CURLOPT_RETURNTRANSFER&lt;/code&gt;, &lt;code&gt;CURLOPT_TIMEOUT&lt;/code&gt;等。类似的，还有&lt;code&gt;curl_setopt_array&lt;/code&gt;函数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;curl_reset()&lt;/code&gt;重置一个libcurl会话句柄的所有的选项&lt;/li&gt;
&lt;li&gt;&lt;code&gt;curl_exec()&lt;/code&gt;执行一个cURL会话。返回TRUE或执行的结果，或是FALSE。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;curl_close()&lt;/code&gt;关闭一个会话，释放所有相关资源&lt;/li&gt;
&lt;li&gt;&lt;code&gt;curl_getinfo()&lt;/code&gt;获取最后一次传输的相关信息。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;curl_error()&lt;/code&gt;返回一条最近一次cURL操作明确的文本的错误信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;curl_version()&lt;/code&gt;获取cURL版本信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;特色&#34;&gt;&lt;a href=&#34;#特色&#34; class=&#34;headerlink&#34; title=&#34;特色&#34;&gt;&lt;/a&gt;特色&lt;/h2&gt;&lt;p&gt;这里列举的特点更多是PHP语言的特殊使用方式与应用特性。如HTTP用户认证（介绍见&lt;a href=&#34;http://php.net/manual/zh/features.http-auth.php&#34;&gt;官网&lt;/a&gt;），cookie等。&lt;/p&gt;
&lt;p&gt;PHP透明地支持HTTP cookie，在PHP的网络函数中可以用&lt;code&gt;setcookie()&lt;/code&gt;或&lt;code&gt;setrawcookie()&lt;/code&gt;函数来设置cookie。cookie是HTTP标头的一部分，因此&lt;code&gt;setcookie()&lt;/code&gt;函数必须在其它信息被输出到浏览器前调用，这和对header()函数的限制类似。可以使用输出缓冲函数来延迟脚本的输出，直到按需要设置好了所有的cookie或者其它HTTP标头。&lt;/p&gt;
&lt;p&gt;PHP允许用户使用POST方法上传文本和二进制文件。一个上传文件的HTML表单代码类似如下，其中的&lt;code&gt;MAX_FILE_SIZE&lt;/code&gt;隐藏字段在浏览器端限制了文件大小（单位字节，不建议依赖于此）：&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;&amp;lt;!-- The data encoding type, enctype, MUST be specified as below --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;form&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;enctype&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;multipart/form-data&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;action&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;__URL__&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;method&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;&amp;lt;!-- MAX_FILE_SIZE must precede the file input field --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;MAX_FILE_SIZE&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;30000&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;&amp;lt;!-- Name of input element determines name in $_FILES array --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Send this file: &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;userfile&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;file&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;Send File&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;全局变量&lt;code&gt;$_FILES&lt;/code&gt;自PHP4.1.0起存在，包含了所有上传的文件信息。&lt;code&gt;$_FILES[&amp;#39;userfile&amp;#39;]&lt;/code&gt;数组有&lt;code&gt;name&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;size&lt;/code&gt;, &lt;code&gt;tmp_name&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt;等字段。error字段状态码在0-7间，分别表示上传成功&amp;#x2F;文件过大&amp;#x2F;部分上传&amp;#x2F;没有文件&amp;#x2F;找不到临时文件夹&amp;#x2F;写入失败。文件被上传后，默认地会被储存到服务端的默认临时目录中。&lt;/p&gt;
&lt;p&gt;PHP支持同时上传多个文件并将它们的信息自动以数组的形式组织。要完成这项功能，需要在HTML表单中对文件上传域使用和多选框与复选框相同的数组式提交语法。像下面的代码那样：&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;form&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;action&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;file-upload.php&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;method&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;post&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;enctype&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;multipart/form-data&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Send these files:&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;br&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;userfile[]&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;file&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;br&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;userfile[]&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;file&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;br&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;Send files&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;同时，PHP还支持PUT方法上传文件，内容见官方文档。下面是一个允许用户上传图片的代码：&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;header&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Content-Type: text/plain; charset=utf-8&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Undefined | Multiple Files | $_FILES Corruption Attack&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// If this request falls under any of them, treat it invalid.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        !&lt;span class=&#34;keyword&#34;&gt;isset&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$_FILES&lt;/span&gt;[&lt;span class=&#34;string&#34;&gt;&amp;#x27;upfile&amp;#x27;&lt;/span&gt;][&lt;span class=&#34;string&#34;&gt;&amp;#x27;error&amp;#x27;&lt;/span&gt;]) ||&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_ invoke__&#34;&gt;is_array&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$_FILES&lt;/span&gt;[&lt;span class=&#34;string&#34;&gt;&amp;#x27;upfile&amp;#x27;&lt;/span&gt;][&lt;span class=&#34;string&#34;&gt;&amp;#x27;error&amp;#x27;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;RuntimeException&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Invalid parameters.&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Check $_FILES[&amp;#x27;upfile&amp;#x27;][&amp;#x27;error&amp;#x27;] value.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt; (&lt;span class=&#34;variable&#34;&gt;$_FILES&lt;/span&gt;[&lt;span class=&#34;string&#34;&gt;&amp;#x27;upfile&amp;#x27;&lt;/span&gt;][&lt;span class=&#34;string&#34;&gt;&amp;#x27;error&amp;#x27;&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; UPLOAD_ERR_OK:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; UPLOAD_ERR_NO_FILE:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;RuntimeException&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;No file sent.&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; UPLOAD_ERR_INI_SIZE:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; UPLOAD_ERR_FORM_SIZE:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;RuntimeException&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Exceeded filesize limit.&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;RuntimeException&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Unknown errors.&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// You should also check filesize here. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;variable&#34;&gt;$_FILES&lt;/span&gt;[&lt;span class=&#34;string&#34;&gt;&amp;#x27;upfile&amp;#x27;&lt;/span&gt;][&lt;span class=&#34;string&#34;&gt;&amp;#x27;size&amp;#x27;&lt;/span&gt;] &amp;gt; &lt;span class=&#34;number&#34;&gt;1000000&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;RuntimeException&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Exceeded filesize limit.&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// DO NOT TRUST $_FILES[&amp;#x27;upfile&amp;#x27;][&amp;#x27;mime&amp;#x27;] VALUE !!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Check MIME Type by yourself.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable&#34;&gt;$finfo&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title function_ invoke__&#34;&gt;finfo&lt;/span&gt;(FILEINFO_MIME_TYPE);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt; === &lt;span class=&#34;variable&#34;&gt;$ext&lt;/span&gt; = &lt;span class=&#34;title function_ invoke__&#34;&gt;array_search&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable&#34;&gt;$finfo&lt;/span&gt;-&amp;gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;file&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$_FILES&lt;/span&gt;[&lt;span class=&#34;string&#34;&gt;&amp;#x27;upfile&amp;#x27;&lt;/span&gt;][&lt;span class=&#34;string&#34;&gt;&amp;#x27;tmp_name&amp;#x27;&lt;/span&gt;]),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;array&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;#x27;jpg&amp;#x27;&lt;/span&gt; =&amp;gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;image/jpeg&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;#x27;png&amp;#x27;&lt;/span&gt; =&amp;gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;image/png&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;#x27;gif&amp;#x27;&lt;/span&gt; =&amp;gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;image/gif&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    )) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;RuntimeException&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Invalid file format.&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// You should name it uniquely.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// DO NOT USE $_FILES[&amp;#x27;upfile&amp;#x27;][&amp;#x27;name&amp;#x27;] WITHOUT ANY VALIDATION !!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// On this example, obtain safe unique name from its binary data.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!&lt;span class=&#34;title function_ invoke__&#34;&gt;move_uploaded_file&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable&#34;&gt;$_FILES&lt;/span&gt;[&lt;span class=&#34;string&#34;&gt;&amp;#x27;upfile&amp;#x27;&lt;/span&gt;][&lt;span class=&#34;string&#34;&gt;&amp;#x27;tmp_name&amp;#x27;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_ invoke__&#34;&gt;sprintf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;./uploads/%s.%s&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_ invoke__&#34;&gt;sha1_file&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$_FILES&lt;/span&gt;[&lt;span class=&#34;string&#34;&gt;&amp;#x27;upfile&amp;#x27;&lt;/span&gt;][&lt;span class=&#34;string&#34;&gt;&amp;#x27;tmp_name&amp;#x27;&lt;/span&gt;]),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;variable&#34;&gt;$ext&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    )) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;RuntimeException&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Failed to move uploaded file.&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;File is uploaded successfully.&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;RuntimeException&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$e&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$e&lt;/span&gt;-&amp;gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;getMessage&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在php.ini文件中激活了&lt;code&gt;allow_url_fopen&lt;/code&gt;选项后，可以在大多数需要用文件名作为参数的函数中使用HTTP和FTP的URL来代替文件名。同时，也可以在&lt;code&gt;include&lt;/code&gt;、&lt;code&gt;include_once&lt;/code&gt;、&lt;code&gt;require&lt;/code&gt;及&lt;code&gt;require_once&lt;/code&gt;语句中使用URL。如果有合法的访问权限，以一个用户的身份和某FTP服务器建立了链接，还可以向该FTP服务器端的文件进行写操作。&lt;/p&gt;
&lt;p&gt;持久的数据库连接是指在脚本结束运行时不关闭的连接。当收到一个持久连接的请求时。PHP将检查是否已经存在一个（前面已经开启的）相同的持久连接。如果存在，将直接使用这个连接；如果不存在，则建立一个新的连接。所谓“相同”的连接是指用相同的用户名和密码到相同主机的连接。&lt;/p&gt;
&lt;p&gt;PHP 5.3后使用GC作为新的垃圾回收机制。每个php变量存在一个叫”zval”的变量容器中。一个zval变量容器，除了包含变量的类型和值，还包括两个字节的额外信息。第一个是”is_ref”，是个bool值，用来标识这个变量是否是属于引用集合(reference set)。第二个额外字节是”refcount”，用以表示指向这个zval变量容器的变量(也称符号即symbol)个数。通常，PHP中的垃圾回收机制，仅仅在循环回收算法确实运行时会有时间消耗上的增加。但是在平常的(更小的)脚本中应根本就没有性能影响。&lt;/p&gt;
&lt;h2 id=&#34;安全&#34;&gt;&lt;a href=&#34;#安全&#34; class=&#34;headerlink&#34; title=&#34;安全&#34;&gt;&lt;/a&gt;安全&lt;/h2&gt;&lt;p&gt;PHP作为一种强大的语言，无论是以模块还是CGI的方式安装，它的解释器都可以在服务器上访问文件、运行命令以及创建网络连接等。这些功能也许会给服务器添加很多不安全因素，但是只要正确地安装和配置PHP，以及编写安全的代码，那么PHP相对于Perl和C来说，是能创建出更安全的CGI程序的。这部分提出一些原则，在不同环境下尽可能提高安全性。&lt;/p&gt;
&lt;h3 id=&#34;安装&#34;&gt;&lt;a href=&#34;#安装&#34; class=&#34;headerlink&#34; title=&#34;安装&#34;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;p&gt;以CGI模式安装PHP时，它的设计可以用以避免访问系统文件和服务器的任意目录。在安装时配置一些选项可以有助避免这类攻击。具体见&lt;a href=&#34;http://php.net/manual/zh/security.cgi-bin.attacks.php&#34;&gt;文档介绍&lt;/a&gt;。同理，以Apache模块安装时，权限的注意也请见&lt;a href=&#34;https://www.php.net/manual/zh/security.apache.php&#34;&gt;官网介绍&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;Session安全&#34;&gt;&lt;a href=&#34;#Session安全&#34; class=&#34;headerlink&#34; title=&#34;Session安全&#34;&gt;&lt;/a&gt;Session安全&lt;/h3&gt;&lt;p&gt;这部分见&lt;a href=&#34;####session&#34;&gt;Session部分&lt;/a&gt;的安全介绍。&lt;/p&gt;
&lt;h3 id=&#34;文件系统-1&#34;&gt;&lt;a href=&#34;#文件系统-1&#34; class=&#34;headerlink&#34; title=&#34;文件系统&#34;&gt;&lt;/a&gt;文件系统&lt;/h3&gt;&lt;p&gt;PHP被设计为以用户级别来访问文件系统，所以完全有可能通过编写一段PHP代码来读取系统文件如&lt;code&gt;/etc/passwd&lt;/code&gt;，更改网络连接以及发送大量打印任务等等。因此必须确保PHP代码读取和写入的是合适的文件。&lt;/p&gt;
&lt;p&gt;由于PHP的文件系统操作是基于C语言的函数的，Null字符在C语言中用于标识字符串结束，一个完整的字符串是从其开头到遇见Null字符为止。因此，任何用于操作文件系统的字符串（特别是程序外部输入的字符串）都必须经过适当的检查。&lt;/p&gt;
&lt;p&gt;这种安全问题也会出现在执行来自用户输入的命令。通常有两条路可以选择：1）检查所有来自外部的变量（&lt;strong&gt;黑名单&lt;/strong&gt;）；2）后台写死可以执行的文件名或命令有限集（&lt;strong&gt;白名单&lt;/strong&gt;）&lt;/p&gt;
&lt;h3 id=&#34;数据库&#34;&gt;&lt;a href=&#34;#数据库&#34; class=&#34;headerlink&#34; title=&#34;数据库&#34;&gt;&lt;/a&gt;数据库&lt;/h3&gt;&lt;p&gt;由于敏感数据和机密数据通常存储在数据库中，数据库安全和保护显得尤为重要。&lt;strong&gt;PHP本身并不能保护数据库的安全&lt;/strong&gt;。这里只是讲述怎样用PHP脚本对数据库进行基本的访问和操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;设计数据库时，永远不要使用数据库所有者或超级用户帐号来连接数据库&lt;/strong&gt;，因为这些帐号可以执行任意的操作。应该为程序的每个方面创建不同的数据库帐号，并赋予对数据库对象的极有限的权限。同时，一些功能可以用视图（view）、触发器（trigger）或者规则（rule）在数据库层面完成。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;连接数据库&lt;/strong&gt;时，把连接建立在 SSL 加密技术上可以增加客户端和服务器端通信的安全性，或者SSH也可以用于加密客户端和数据库之间的连接。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;存储模型&lt;/strong&gt;中，可以散列一些没必要明文显示的数据，建议加盐散列，同时采用新的SHA散列算法（如SHA-2或SHA-3）以增加安全程度。&lt;/p&gt;
&lt;h3 id=&#34;SQL注入&#34;&gt;&lt;a href=&#34;#SQL注入&#34; class=&#34;headerlink&#34; title=&#34;SQL注入&#34;&gt;&lt;/a&gt;SQL注入&lt;/h3&gt;&lt;p&gt;这部分内容是极为常见的网络安全问题，通过构造特殊的SQL语句，获取数据库信息甚至主机权限，介绍从略。&lt;/p&gt;
&lt;p&gt;在预防措施上，&lt;strong&gt;永远不要信任外部输入的任何数据，包括表单里和cookie的信息&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用权限被严格限制的帐号访问数据库&lt;/li&gt;
&lt;li&gt;检查输入的数据是否具有所期望的数据格式&lt;/li&gt;
&lt;li&gt;减少SQL语句的拼接使用&lt;/li&gt;
&lt;li&gt;使用数据库特定的敏感字符转义函数&lt;/li&gt;
&lt;li&gt;还可以选择使用数据库的存储过程和预定义指针等特性来抽象数库访问，使用户不能直接访问数据表和视图&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;错误报告&#34;&gt;&lt;a href=&#34;#错误报告&#34; class=&#34;headerlink&#34; title=&#34;错误报告&#34;&gt;&lt;/a&gt;错误报告&lt;/h3&gt;&lt;p&gt;错误报告是一把双刃剑。一方面可以提高安全性，另一方面又有利于攻击者收集服务器的信息以便寻找弱点。PHP的独有的错误提示风格可以说明系统在运行 PHP，一个函数错误可能暴露系统正在使用的数据库，一个文件系统或者PHP的错误就会暴露web服务器具有什么权限，以及文件在服务器上的组织结构等。&lt;/p&gt;
&lt;p&gt;有三个常用的办法处理这些问题。第一个是彻底地检查所有函数，并尝试弥补大多数错误。第二个是对在线系统彻底关闭错误报告。第三个是使用 PHP 自定义的错误处理函数创建自己的错误处理机制&lt;/p&gt;
&lt;p&gt;可以通过&lt;code&gt;error_reporting()&lt;/code&gt;帮助找到错误所在并使代码更安全。发布程序前，设置为&lt;code&gt;E_ALL&lt;/code&gt;找到所有使用不当的地方；正式发布后，设为0彻底关闭错误报告或设置&lt;code&gt;php.ini&lt;/code&gt;中的&lt;code&gt;display_errors&lt;/code&gt;为&lt;code&gt;off&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;隐藏PHP&#34;&gt;&lt;a href=&#34;#隐藏PHP&#34; class=&#34;headerlink&#34; title=&#34;隐藏PHP&#34;&gt;&lt;/a&gt;隐藏PHP&lt;/h3&gt;&lt;p&gt;一些简单的方法可以帮助隐藏 PHP，这样做可以提高攻击者发现系统弱点的难度。在&lt;code&gt;php.ini&lt;/code&gt;文件里设置&lt;code&gt;expose_php = off&lt;/code&gt;，可以减少他们能获得的有用信息。&lt;/p&gt;
&lt;p&gt;另一个策略就是让web服务器用PHP解析不同扩展名。无论是通过&lt;code&gt;.htaccess&lt;/code&gt;文件还是Apache的配置文件，都可以设置能误导攻击者的文件扩展名。&lt;/p&gt;
&lt;p&gt;更多机智的隐藏方法见官网&lt;a href=&#34;https://www.php.net/manual/zh/security.hiding.php&#34;&gt;隐藏PHP&lt;/a&gt;一节。&lt;/p&gt;
&lt;h2 id=&#34;内核-1&#34;&gt;&lt;a href=&#34;#内核-1&#34; class=&#34;headerlink&#34; title=&#34;内核&#34;&gt;&lt;/a&gt;内核&lt;/h2&gt;&lt;p&gt;考虑到重点所在，这部分内容仅简单地介绍一些涉及到PHP内部原理的东西。由于PHP运行在C语言的基础上，以下的内容和C语言编程靠近。&lt;/p&gt;
&lt;h3 id=&#34;内存管理&#34;&gt;&lt;a href=&#34;#内存管理&#34; class=&#34;headerlink&#34; title=&#34;内存管理&#34;&gt;&lt;/a&gt;内存管理&lt;/h3&gt;&lt;p&gt;用C语言编程时，开发者要手工地进行内存管理。因为PHP经常用作Web服务器的模块，内存管理与预防内存泄漏紧密关联。此外，Zend引擎要面对一个十分特殊的使用模式：在一段比较短的时间内，许多zval结构大小的内存块和其他的小内存块被请求又再被释放。为了满足以上的需求，Zend引擎提供为了处理请求相关数据提供了一种特殊的内存管理器。请求相关数据是指只需要服务于单个请求，最迟会在请求结束时释放的数据。&lt;em&gt;API介绍从略&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;因为安全原因，在请求结束时，Zend引擎会释放所有由上面提到的API所分配的内存。&lt;/p&gt;
&lt;h3 id=&#34;变量使用&#34;&gt;&lt;a href=&#34;#变量使用&#34; class=&#34;headerlink&#34; title=&#34;变量使用&#34;&gt;&lt;/a&gt;变量使用&lt;/h3&gt;&lt;p&gt;PHP变量，通常来说，由两部分组成：标签（例如，可能是符号表中的一个条目）和实际变量容器。变量容器，在代码中称为zval，掌握了所需处理变量的所有数据。 包括实际值、当前类型、统计指向此容器的标签的数量，和指示这些标签是引用还是副本的标志。在PHP 5.3中，结构如下：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; _&lt;span class=&#34;title&#34;&gt;zval_struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;zval&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;union&lt;/span&gt; _&lt;span class=&#34;title&#34;&gt;zvalue_value&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; lval;                 &lt;span class=&#34;comment&#34;&gt;/* long value */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;double&lt;/span&gt; dval;               &lt;span class=&#34;comment&#34;&gt;/* double value */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;                   &lt;span class=&#34;comment&#34;&gt;/* string type */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *val;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; len;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; str;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    HashTable *ht;             &lt;span class=&#34;comment&#34;&gt;/* hash table value */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    zend_object_value obj;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; zvalue_value;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; _&lt;span class=&#34;title&#34;&gt;zval_struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/* Variable information */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    zvalue_value value;        &lt;span class=&#34;comment&#34;&gt;/* value */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    zend_uint refcount__gc;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    zend_uchar type;           &lt;span class=&#34;comment&#34;&gt;/* active type */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    zend_uchar is_ref__gc;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;有关函数，类和对象，流等的介绍从略。&lt;/p&gt;
&lt;h2 id=&#34;FAQ&#34;&gt;&lt;a href=&#34;#FAQ&#34; class=&#34;headerlink&#34; title=&#34;FAQ&#34;&gt;&lt;/a&gt;FAQ&lt;/h2&gt;&lt;p&gt;Q: PHP 版本之间有什么联系？&lt;br&gt;A: PHP&amp;#x2F;FI 2.0是最早的PHP版本，已经不再支持。PHP 3是PHP&amp;#x2F;FI 2.0的后继者，要好很多。PHP 5是目前一代的PHP，内部使用了Zend 2引擎，除了很多新功能之外还提供了许多附加的面向对象编程（OOP）特性。&lt;br&gt;&lt;br&gt;&lt;br&gt;Q: 可以同时运行几个不同版本的PHP吗？&lt;br&gt;A: 可以，请参阅见PHP源程序发行包中的 INSTALL文件。&lt;br&gt;&lt;br&gt;&lt;br&gt;Q: 应该上哪儿去找我的&lt;code&gt;php.ini&lt;/code&gt;文件&lt;br&gt;A: UNIX中默认在&lt;code&gt;/usr/local/lib&lt;/code&gt;目录中，也就是&lt;code&gt;&amp;lt;install-path&amp;gt;/lib&lt;/code&gt;。可以在编译时通过 &lt;code&gt;--with-config-file-path&lt;/code&gt;标记来改变路径。Windows中&lt;code&gt;php.ini&lt;/code&gt;文件的默认路径在Windows目录下。如果使用的是Apache服务器，则会首先在Apache的安装目录中寻找&lt;code&gt;php.ini&lt;/code&gt;。&lt;br&gt;&lt;br&gt;&lt;br&gt;Q: PHP是否仅限于处理GET和POST请求方法？&lt;br&gt;A: 不是，PHP有可能处理任何请求方法，例如&lt;code&gt;CONNECT&lt;/code&gt;。适当的回应状态可以用&lt;code&gt;header()&lt;/code&gt;发送。&lt;br&gt;&lt;br&gt;&lt;br&gt;Q: 我忘了PHP函数的参数顺序，它们是随机的吗？&lt;br&gt;A: 通常情况下，数组函数的参数里，needle在前，haystack在后；字符串函数中，haystack在前，needle在后。&lt;br&gt;&lt;br&gt;&lt;br&gt;Q: PHP选项&lt;code&gt;register_globals&lt;/code&gt;对我有什么影响？&lt;br&gt;A: 强烈不建议开启此选项，&lt;code&gt;register_globals&lt;/code&gt;会自动生成变量。&lt;br&gt;&lt;br&gt;&lt;br&gt;Q: 我需要直接访问请求报头中的信息，怎么能办到？&lt;br&gt;A: 如果以Apache的模块方式运行PHP，那么函数&lt;code&gt;getallheaders()&lt;/code&gt;可以做这件事。&lt;br&gt;&lt;br&gt;&lt;br&gt;Q: 如果不建议使用常用散列函数保护密码， 那么我应该如何对密码进行散列处理？&lt;br&gt;A: 当进行密码散列处理的时候，有两个必须考虑的因素： 计算量以及“盐”。 散列算法的计算量越大，暴力破解所需的时间就越长。PHP 5.5提供了一个原生密码散列API， 它提供一种安全的方式来完成密码散列和验证。 PHP 5.3.7及后续版本中都提供了一个纯PHP的兼容库。PHP 5.3及后续版本中，还可以使用&lt;code&gt;crypt()&lt;/code&gt;函数，它支持多种散列算法。针对每种受支持的散列算法，PHP都提供了对应的原生实现。&lt;br&gt;&lt;br&gt;&lt;br&gt;Q: “盐”是什么？&lt;br&gt;A: 加解密领域中的“盐”是指在进行散列处理的过程中 加入的一些数据，用来避免从已计算的散列值表（被称作“彩虹表”中对比输出数据从而获取明文密码的风险。&lt;br&gt;&lt;br&gt;&lt;br&gt;Q: 我在使用&lt;code&gt;&amp;lt;input type=&amp;quot;image&amp;quot;&amp;gt;&lt;/code&gt;标记，但是没有&lt;code&gt;$foo.x&lt;/code&gt;和&lt;code&gt;$foo.y&lt;/code&gt;变量，它们哪去了？&lt;br&gt;A: 当提交表单时，可以用图片代替标准的提交按钮，用类似这样的标记&lt;br&gt;&lt;code&gt;&amp;lt;input type=&amp;quot;image&amp;quot; src=&amp;quot;image.gif&amp;quot; name=&amp;quot;foo&amp;quot; /&amp;gt;&lt;/code&gt;&lt;br&gt;当用户点击了图片的任何部分，该表单会被发送到服务器并加上两个额外的变量：&lt;code&gt;foo.x&lt;/code&gt;和&lt;code&gt;foo.y&lt;/code&gt;。因为&lt;code&gt;foo.x&lt;/code&gt;和 &lt;code&gt;foo.y&lt;/code&gt;在PHP中会成为非法的变量名，它们被自动转换成了&lt;code&gt;foo_x&lt;/code&gt;和&lt;code&gt;foo_y&lt;/code&gt;。也就是用下划线代替了点。&lt;br&gt;&lt;br&gt;&lt;br&gt;Q: PHP 5中还能用MySQL吗？好像找不到了。&lt;br&gt;A: MySQL依然被支持，唯一区别是PHP 5中默认为不激活。这意味着在PHP的configure一行中不包含有&lt;code&gt;--with-mysql&lt;/code&gt;选项，因此必须在编译时手工加入。Windows用户可以编辑&lt;code&gt;php.ini&lt;/code&gt;并激活&lt;code&gt;php_mysql.dll&lt;/code&gt;。&lt;br&gt;&lt;br&gt;&lt;br&gt;Q: 在函数定义中，参数旁边的&lt;code&gt;&amp;amp;&lt;/code&gt;是什么意思？&lt;br&gt;A: 这表示该参数是引用传递，该函数会修改其值。鼓励使用的方法是在函数定义中指定哪些参数应该用引用传递。在函数调用时通过引用传递参数是不推荐的，因为它影响到了代码的整洁。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;&lt;a href=&#34;#参考&#34; class=&#34;headerlink&#34; title=&#34;参考&#34;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://php.net/manual/zh/book.password.php&#34;&gt;php.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://laravel-china.github.io/php-the-right-way/&#34;&gt;PHP之道中文版&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://shenlvmeng.github.com/blog/2019/07/28/typescript-restudy/</guid>
            <title>TypeScript再学习</title>
            <link>http://shenlvmeng.github.com/blog/2019/07/28/typescript-restudy/</link>
            <category>typescript</category>
            <category>类型系统</category>
            <pubDate>Sun, 28 Jul 2019 22:23:01 +0800</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;尽管项目中已经用上了TypeScript，但是主要场景下对TS的高级特性设计较少，再看过&lt;a href=&#34;https://github.com/LeetCode-OpenSource/hire/blob/master/typescript_zh.md&#34;&gt;leetcode&lt;/a&gt;面试题后，觉得自己的了解程度还远远不够。于是参考&lt;a href=&#34;https://github.com/basarat/typescript-book/&#34;&gt;《TypeScript Deep Dive》&lt;/a&gt;这本开源书（&lt;a href=&#34;https://jkchao.github.io/typescript-book-chinese/&#34;&gt;中文版&lt;/a&gt;）开始再学习&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;TypeScript Playground: &lt;a href=&#34;http://www.typescriptlang.org/play/&#34;&gt;http://www.typescriptlang.org/play/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;TypeScript项目&#34;&gt;&lt;a href=&#34;#TypeScript项目&#34; class=&#34;headerlink&#34; title=&#34;TypeScript项目&#34;&gt;&lt;/a&gt;TypeScript项目&lt;/h2&gt;&lt;h3 id=&#34;编译&#34;&gt;&lt;a href=&#34;#编译&#34; class=&#34;headerlink&#34; title=&#34;编译&#34;&gt;&lt;/a&gt;编译&lt;/h3&gt;&lt;p&gt;TS的编译过程主要通过&lt;code&gt;tsconfig.json&lt;/code&gt;文件来配置（当然你也可以通过命令行的方式指定）。TS有些自己的默认配置，你也可以在&lt;code&gt;complierOptions&lt;/code&gt;下自定义你的配置。&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;compilerOptions&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/* 基本选项 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;target&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;es5&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;                       &lt;span class=&#34;comment&#34;&gt;// 指定 ECMAScript 目标版本: &amp;#x27;ES3&amp;#x27; (default), &amp;#x27;ES5&amp;#x27;, &amp;#x27;ES2015&amp;#x27;, &amp;#x27;ES2016&amp;#x27;, &amp;#x27;ES2017&amp;#x27;, or &amp;#x27;ESNEXT&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;module&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;commonjs&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;                  &lt;span class=&#34;comment&#34;&gt;// 指定使用模块: &amp;#x27;commonjs&amp;#x27;, &amp;#x27;amd&amp;#x27;, &amp;#x27;system&amp;#x27;, &amp;#x27;umd&amp;#x27; or &amp;#x27;es2015&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;lib&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;                             &lt;span class=&#34;comment&#34;&gt;// 指定要包含在编译中的库文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;allowJs&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;                       &lt;span class=&#34;comment&#34;&gt;// 允许编译 javascript 文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;checkJs&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;                       &lt;span class=&#34;comment&#34;&gt;// 报告 javascript 文件中的错误&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;jsx&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;preserve&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;                     &lt;span class=&#34;comment&#34;&gt;// 指定 jsx 代码的生成: &amp;#x27;preserve&amp;#x27;, &amp;#x27;react-native&amp;#x27;, or &amp;#x27;react&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;declaration&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;                   &lt;span class=&#34;comment&#34;&gt;// 生成相应的 &amp;#x27;.d.ts&amp;#x27; 文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;sourceMap&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;                     &lt;span class=&#34;comment&#34;&gt;// 生成相应的 &amp;#x27;.map&amp;#x27; 文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;outFile&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;./&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;                       &lt;span class=&#34;comment&#34;&gt;// 将输出文件合并为一个文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;outDir&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;./&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;                        &lt;span class=&#34;comment&#34;&gt;// 指定输出目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;rootDir&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;./&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;                       &lt;span class=&#34;comment&#34;&gt;// 用来控制输出目录结构 --outDir.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;removeComments&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;                &lt;span class=&#34;comment&#34;&gt;// 删除编译后的所有的注释&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;noEmit&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;                        &lt;span class=&#34;comment&#34;&gt;// 不生成输出文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;importHelpers&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;                 &lt;span class=&#34;comment&#34;&gt;// 从 tslib 导入辅助工具函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;isolatedModules&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;               &lt;span class=&#34;comment&#34;&gt;// 将每个文件做为单独的模块 （与 &amp;#x27;ts.transpileModule&amp;#x27; 类似）.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/* 严格的类型检查选项 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;strict&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;                        &lt;span class=&#34;comment&#34;&gt;// 启用所有严格类型检查选项&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;noImplicitAny&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;                 &lt;span class=&#34;comment&#34;&gt;// 在表达式和声明上有隐含的 any类型时报错&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;strictNullChecks&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;              &lt;span class=&#34;comment&#34;&gt;// 启用严格的 null 检查&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;noImplicitThis&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;                &lt;span class=&#34;comment&#34;&gt;// 当 this 表达式值为 any 类型的时候，生成一个错误&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;alwaysStrict&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;                  &lt;span class=&#34;comment&#34;&gt;// 以严格模式检查每个模块，并在每个文件里加入 &amp;#x27;use strict&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/* 额外的检查 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;noUnusedLocals&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;                &lt;span class=&#34;comment&#34;&gt;// 有未使用的变量时，抛出错误&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;noUnusedParameters&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;            &lt;span class=&#34;comment&#34;&gt;// 有未使用的参数时，抛出错误&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;noImplicitReturns&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;             &lt;span class=&#34;comment&#34;&gt;// 并不是所有函数里的代码都有返回值时，抛出错误&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;noFallthroughCasesInSwitch&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;    &lt;span class=&#34;comment&#34;&gt;// 报告 switch 语句的 fallthrough 错误。（即，不允许 switch 的 case 语句贯穿）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/* 模块解析选项 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;moduleResolution&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;node&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;            &lt;span class=&#34;comment&#34;&gt;// 选择模块解析策略： &amp;#x27;node&amp;#x27; (Node.js) or &amp;#x27;classic&amp;#x27; (TypeScript pre-1.6)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;baseUrl&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;./&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;                       &lt;span class=&#34;comment&#34;&gt;// 用于解析非相对模块名称的基目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;paths&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;                           &lt;span class=&#34;comment&#34;&gt;// 模块名到基于 baseUrl 的路径映射的列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;rootDirs&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;                        &lt;span class=&#34;comment&#34;&gt;// 根文件夹列表，其组合内容表示项目运行时的结构内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;typeRoots&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;                       &lt;span class=&#34;comment&#34;&gt;// 包含类型声明的文件列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;types&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;                           &lt;span class=&#34;comment&#34;&gt;// 需要包含的类型声明文件名列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;allowSyntheticDefaultImports&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;comment&#34;&gt;// 允许从没有设置默认导出的模块中默认导入。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/* Source Map Options */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;sourceRoot&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;./&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;                    &lt;span class=&#34;comment&#34;&gt;// 指定调试器应该找到 TypeScript 文件而不是源文件的位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;mapRoot&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;./&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;                       &lt;span class=&#34;comment&#34;&gt;// 指定调试器应该找到映射文件而不是生成文件的位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;inlineSourceMap&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;               &lt;span class=&#34;comment&#34;&gt;// 生成单个 soucemaps 文件，而不是将 sourcemaps 生成不同的文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;inlineSources&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;                 &lt;span class=&#34;comment&#34;&gt;// 将代码与 sourcemaps 生成到一个文件中，要求同时设置了 --inlineSourceMap 或 --sourceMap 属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/* 其他选项 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;experimentalDecorators&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;        &lt;span class=&#34;comment&#34;&gt;// 启用装饰器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;emitDecoratorMetadata&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;/span&gt;          &lt;span class=&#34;comment&#34;&gt;// 为装饰器提供元数据的支持&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;TS有几种不同的编译方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运行&lt;code&gt;tsc&lt;/code&gt;，自动定位当前目录下tsconfig.json&lt;/li&gt;
&lt;li&gt;运行&lt;code&gt;tsc -p [your path]&lt;/code&gt;，手动指定config路径&lt;/li&gt;
&lt;li&gt;运行&lt;code&gt;tsc -w&lt;/code&gt;进入观测模式，在文件更改时自动重新编译&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你可以通过不同方式指定要编译的文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;files&lt;/code&gt;直接指定要编译的文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;include&lt;/code&gt;指定包含的文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exclude&lt;/code&gt;指定排除的文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;配置值可以是glob格式。&lt;/p&gt;
&lt;h3 id=&#34;声明空间&#34;&gt;&lt;a href=&#34;#声明空间&#34; class=&#34;headerlink&#34; title=&#34;声明空间&#34;&gt;&lt;/a&gt;声明空间&lt;/h3&gt;&lt;p&gt;TypeScript中有两种声明空间：&lt;strong&gt;类型声明空间&lt;/strong&gt;和&lt;strong&gt;变量声明空间&lt;/strong&gt;。前者只能用作类型注解，后者可以用来当做变量使用。&lt;/p&gt;
&lt;h3 id=&#34;文件模块&#34;&gt;&lt;a href=&#34;#文件模块&#34; class=&#34;headerlink&#34; title=&#34;文件模块&#34;&gt;&lt;/a&gt;文件模块&lt;/h3&gt;&lt;p&gt;TS中有多种模块系统选项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AMD：仅在浏览器端使用&lt;/li&gt;
&lt;li&gt;SystemJS：已被ES模块替代&lt;/li&gt;
&lt;li&gt;ES模块：当前的支持有限&lt;/li&gt;
&lt;li&gt;CommonJS：当前比较好的一个选择&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般在工程中使用ES模块语法，模块选项使用CommonJS。TS中对类型也可以同样适用import和export。&lt;/p&gt;
&lt;h4 id=&#34;路径&#34;&gt;&lt;a href=&#34;#路径&#34; class=&#34;headerlink&#34; title=&#34;路径&#34;&gt;&lt;/a&gt;路径&lt;/h4&gt;&lt;p&gt;通常情况由&lt;code&gt;moduleResolution&lt;/code&gt;选项指定。这个选项在&lt;code&gt;tsconfig.json&lt;/code&gt;中声明。在声明&lt;code&gt;module: commonjs&lt;/code&gt;时，&lt;code&gt;moduleResolution&lt;/code&gt;自动指定为&lt;code&gt;node&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;导入路径分两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相对路径，使用&lt;code&gt;./&lt;/code&gt;或是&lt;code&gt;../&lt;/code&gt;与文件、文件夹名称组成&lt;/li&gt;
&lt;li&gt;动态路径，TS模块解析将会模仿&lt;a href=&#34;https://nodejs.org/api/modules.html#modules_all_together&#34;&gt;Node模块解析规则&lt;/a&gt;，即去当前目录、所有父目录的node_modules下寻找对应路径模块&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你本身对node下的模块查找很熟悉，那么恭喜，你已经掌握了TS的模块查找。&lt;/p&gt;
&lt;h4 id=&#34;global-d-ts&#34;&gt;&lt;a href=&#34;#global-d-ts&#34; class=&#34;headerlink&#34; title=&#34;global.d.ts&#34;&gt;&lt;/a&gt;&lt;code&gt;global.d.ts&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;在项目中可以通过&lt;code&gt;declare module &amp;#39;somepath&amp;#39; &amp;#123;&amp;#125;&lt;/code&gt;的方式声明一个全局模块，这样的一个&lt;code&gt;global.d.ts&lt;/code&gt;是声明全局类型的好地方。从js迁移到ts的项目通常需要一个这样的声明&lt;/p&gt;
&lt;h3 id=&#34;命名空间&#34;&gt;&lt;a href=&#34;#命名空间&#34; class=&#34;headerlink&#34; title=&#34;命名空间&#34;&gt;&lt;/a&gt;命名空间&lt;/h3&gt;&lt;p&gt;TypeScript下可以使用&lt;code&gt;namespace&lt;/code&gt;拆分变量的命名空间。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Logger&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;msg&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(msg);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;error&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;msg&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;error&lt;/span&gt;(msg);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// usage&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Logger&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;A message&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Logger&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;error&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;An error&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;namespace&lt;/code&gt;支持嵌套定义，在&lt;strong&gt;快速演示&lt;/strong&gt;和&lt;strong&gt;移植旧的JavaScript&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;动态导入&#34;&gt;&lt;a href=&#34;#动态导入&#34; class=&#34;headerlink&#34; title=&#34;动态导入&#34;&gt;&lt;/a&gt;动态导入&lt;/h3&gt;&lt;p&gt;在使用ES的动态导入功能时，为了保证TS在转换代码时保留&lt;code&gt;import()&lt;/code&gt;语句，&lt;code&gt;tsconfig.json&lt;/code&gt;中的&lt;code&gt;module&lt;/code&gt;需要是&lt;code&gt;esnext&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;类型系统&#34;&gt;&lt;a href=&#34;#类型系统&#34; class=&#34;headerlink&#34; title=&#34;类型系统&#34;&gt;&lt;/a&gt;类型系统&lt;/h2&gt;&lt;h3 id=&#34;概览&#34;&gt;&lt;a href=&#34;#概览&#34; class=&#34;headerlink&#34; title=&#34;概览&#34;&gt;&lt;/a&gt;概览&lt;/h3&gt;&lt;h4 id=&#34;基本注解&#34;&gt;&lt;a href=&#34;#基本注解&#34; class=&#34;headerlink&#34; title=&#34;基本注解&#34;&gt;&lt;/a&gt;基本注解&lt;/h4&gt;&lt;p&gt;包括JS的&lt;strong&gt;原始类型&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;string&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;number&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;object&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;其他基本类型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;数组类型&lt;/strong&gt;在元素类型后追加&lt;code&gt;[]&lt;/code&gt;实现。&lt;strong&gt;键值对&lt;/strong&gt;类型使用&lt;code&gt;&amp;#123;[key: string]: any&amp;#125;&lt;/code&gt;实现。&lt;/p&gt;
&lt;p&gt;你可以使用&lt;code&gt;interface&lt;/code&gt;封装自己的类型：&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;User&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;name&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;age&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;school&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;name&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;location&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;postcode&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;tags&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;name&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;[]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;另外，对于临时的类型需要。可以直接使用&lt;strong&gt;内联&lt;/strong&gt;的方式注解类型。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;user&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;name&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;title&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;name&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;foo&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;title&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;CEO&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;特殊类型&#34;&gt;&lt;a href=&#34;#特殊类型&#34; class=&#34;headerlink&#34; title=&#34;特殊类型&#34;&gt;&lt;/a&gt;特殊类型&lt;/h4&gt;&lt;p&gt;除了上面的基本类型，还有一些常用的特殊类型。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;any&lt;/strong&gt;意味着任意类型，&lt;code&gt;any&lt;/code&gt;类型可以兼容任何TypeScript中的类型。因此：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;任意类型都可以赋值给&lt;code&gt;any&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;any&lt;/code&gt;也可以赋值给任意类型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;初学者在从JavaScript迁移到TypeScript时，通常要借助&lt;code&gt;any&lt;/code&gt;的帮助。但实际上使用&lt;code&gt;any&lt;/code&gt;就代表告诉TypeScript编译器不要进行任何类型检查。&lt;/p&gt;
&lt;p&gt;在&lt;a href=&#34;https://devblogs.microsoft.com/typescript/announcing-typescript-3-0-rc-2/&#34;&gt;TypeScript 3.0&lt;/a&gt;特性中，出现了和&lt;code&gt;any&lt;/code&gt;类似的&lt;code&gt;unknown&lt;/code&gt;关键字。但是后者是type safe的.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;任何类型都可以赋值给&lt;code&gt;unknown&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unknown&lt;/code&gt;在类型检查后才能赋值给任意类型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外在设置编译属性&lt;code&gt;strictNullChecks&lt;/code&gt;为&lt;code&gt;false&lt;/code&gt;时，字面量&lt;code&gt;null&lt;/code&gt;和&lt;code&gt;undefined&lt;/code&gt;也可以赋值给任意类型变量。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;void&lt;/code&gt;用来表示一个函数没有返回值，&lt;code&gt;never&lt;/code&gt;表示不会发生的类型。例如抛出错误的函数、死循环函数的返回值类型、以及字面量空数组的元素类型。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; emptyArr = []; &lt;span class=&#34;comment&#34;&gt;// never[]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;func&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;never&lt;/span&gt; = (&lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Error&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Throw an error&amp;#x27;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;never&lt;/code&gt;类型间可以相互赋值，但不能和其他类型相互赋值。&lt;/p&gt;
&lt;h4 id=&#34;泛型&#34;&gt;&lt;a href=&#34;#泛型&#34; class=&#34;headerlink&#34; title=&#34;泛型&#34;&gt;&lt;/a&gt;泛型&lt;/h4&gt;&lt;p&gt;计算机算法在对封装类型操作时，往往不依赖于元素类型，这种情况下使用泛型描述，TypeScript会帮助推断元素类型，保证类型安全。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; reverse&amp;lt;T&amp;gt;(&lt;span class=&#34;attr&#34;&gt;items&lt;/span&gt;: T[]): T[] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; res1 = &lt;span class=&#34;title function_&#34;&gt;reverse&lt;/span&gt;([&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;res1[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] = &lt;span class=&#34;string&#34;&gt;&amp;#x27;1&amp;#x27;&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// Error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;res1[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] = &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// ok&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;高级类型&#34;&gt;&lt;a href=&#34;#高级类型&#34; class=&#34;headerlink&#34; title=&#34;高级类型&#34;&gt;&lt;/a&gt;高级类型&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;交叉类型&lt;/strong&gt;，写作&lt;code&gt;A &amp;amp; B&lt;/code&gt;，表示同时具有&lt;code&gt;A&lt;/code&gt;和&lt;code&gt;B&lt;/code&gt;两种类型的属性，新类型的对象可以使用A或者B的功能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;联合类型&lt;/strong&gt;，写作&lt;code&gt;A | B&lt;/code&gt;，表示是&lt;code&gt;A&lt;/code&gt;或&lt;code&gt;B&lt;/code&gt;其中一种类型，较常用在入参的内联描述中。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; extend&amp;lt;T, U&amp;gt;(&lt;span class=&#34;attr&#34;&gt;first&lt;/span&gt;: T, &lt;span class=&#34;attr&#34;&gt;second&lt;/span&gt;: U): T &amp;amp; U &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;res&lt;/span&gt;: &lt;span class=&#34;language-xml&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;T&lt;/span&gt; &amp;amp; &lt;span class=&#34;attr&#34;&gt;U&lt;/span&gt;&amp;gt;&lt;/span&gt; = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-xml&#34;&gt;    return &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-xml&#34;&gt;        ...first,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-xml&#34;&gt;        ...second&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-xml&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-xml&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-xml&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-xml&#34;&gt;function batchOperate(id: string | string[]) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-xml&#34;&gt;    operate([].concat(id));&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-xml&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;元组类型&lt;/strong&gt;，这不是一种新类型，它用来描述不同类型元素的集合，就像宽容的JS数组一样。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; user = [&lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;userInfo&lt;/span&gt;: user = [&lt;span class=&#34;string&#34;&gt;&amp;#x27;John&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;32&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; [userName, age] = userInfo;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;类型别名&#34;&gt;&lt;a href=&#34;#类型别名&#34; class=&#34;headerlink&#34; title=&#34;类型别名&#34;&gt;&lt;/a&gt;类型别名&lt;/h4&gt;&lt;p&gt;除开interface，还有&lt;code&gt;type&lt;/code&gt;可以更快捷地定义类型别名。在结合上述高级属性使用时，类型别名&lt;code&gt;type&lt;/code&gt;会是不错的选择。对比&lt;code&gt;interface&lt;/code&gt;和&lt;code&gt;type&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;interface&lt;/code&gt;定义基本的层级结构，它可以和&lt;code&gt;implements&lt;/code&gt;以及&lt;code&gt;extends&lt;/code&gt;配合使用&lt;/li&gt;
&lt;li&gt;在需要的类型不需要从头构造，而是从已有类型推导出来时，使用&lt;code&gt;type&lt;/code&gt;，它更像是给这些computed type一个语义化的名字&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;枚举&#34;&gt;&lt;a href=&#34;#枚举&#34; class=&#34;headerlink&#34; title=&#34;枚举&#34;&gt;&lt;/a&gt;枚举&lt;/h3&gt;&lt;p&gt;枚举是常见的组织互斥的一组常量的方式。TypeScript中用&lt;code&gt;enum&lt;/code&gt;关键字表示。默认的枚举是&lt;strong&gt;数字类型&lt;/strong&gt;的，即使用数字作为索引值；&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Color&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;Red&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;Green&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;Blue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; col = &lt;span class=&#34;title class_&#34;&gt;Color&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;Red&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; anotherCol = &lt;span class=&#34;title class_&#34;&gt;Color&lt;/span&gt;[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]; &lt;span class=&#34;comment&#34;&gt;// &amp;#x27;Red&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;col = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;// ok&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在使用数字类型时，枚举值可以用数字代替。默认情况下，枚举值&lt;strong&gt;从0开始&lt;/strong&gt;，当然可以用&lt;code&gt; = 1&lt;/code&gt;修改默认的枚举值。下面有一个枚举值和标记的组合用法。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AnimalFlags&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;None&lt;/span&gt;        = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;HasClaws&lt;/span&gt;    = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;CanFly&lt;/span&gt;      = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;EatsFish&lt;/span&gt;    = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;Endangered&lt;/span&gt;  = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Animal&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;flags&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;AnimalFlags&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  [&lt;span class=&#34;attr&#34;&gt;key&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;]: &lt;span class=&#34;built_in&#34;&gt;any&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在不同的&lt;code&gt;Animal&lt;/code&gt;的&lt;code&gt;flags&lt;/code&gt;做位运算时可以非常方便地完成布尔代数的一些操作。&lt;/p&gt;
&lt;p&gt;另外，枚举类型的值可以通过赋值成为字符串类型。在使用常量枚举时，TypeScript会将所有出现枚举的位置都替换成内联的常量，而不需要查找枚举变量，从而提高性能提升。&lt;/p&gt;
&lt;h3 id=&#34;从JavaScript中迁移&#34;&gt;&lt;a href=&#34;#从JavaScript中迁移&#34; class=&#34;headerlink&#34; title=&#34;从JavaScript中迁移&#34;&gt;&lt;/a&gt;从JavaScript中迁移&lt;/h3&gt;&lt;p&gt;总的来说有下面几步：&lt;/p&gt;
&lt;p&gt;Step1：添加&lt;code&gt;tsconfig.json&lt;/code&gt;文件。&lt;/p&gt;
&lt;p&gt;Step2：修改文件拓展名为&lt;code&gt;ts&lt;/code&gt;，使用&lt;code&gt;any&lt;/code&gt;避免干扰你主要工作的报错，记得在之后规范&lt;/p&gt;
&lt;p&gt;Step3：写新的TypeScript代码，减少&lt;code&gt;any&lt;/code&gt;使用&lt;/p&gt;
&lt;p&gt;Step4：回头为你的老代码添加类型&lt;/p&gt;
&lt;p&gt;Step5：为你的第三方库引用类型声明，绝大多数优秀的JS库都已经有人帮忙写好&lt;a href=&#34;https://github.com/DefinitelyTyped/DefinitelyTyped&#34;&gt;类型声明&lt;/a&gt;了&lt;/p&gt;
&lt;p&gt;Step6：对于那些没有声明的第三方库，需要你自己书写类型声明或者&lt;code&gt;declare module yourmodule&lt;/code&gt;一劳永逸&lt;/p&gt;
&lt;p&gt;上面提到的类型声明，即DefinitelyTyped通过npm包的方式引入，包有固定前缀&lt;code&gt;@types&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;有些类型声明的引入会带来全局scope的定义，可以通过在&lt;code&gt;tsconfig.json&lt;/code&gt;里配置&lt;code&gt;types&lt;/code&gt;来限制引入的声明文件&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;compilerOptions&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;types&amp;quot;&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;string&#34;&gt;&amp;quot;jquery&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;类型声明文件&#34;&gt;&lt;a href=&#34;#类型声明文件&#34; class=&#34;headerlink&#34; title=&#34;类型声明文件&#34;&gt;&lt;/a&gt;类型声明文件&lt;/h3&gt;&lt;p&gt;通过&lt;code&gt;declare&lt;/code&gt;关键字告诉TypeScript，你正在表述其他位置已经存在的全局变量。强烈建议把所有的声都放在以&lt;code&gt;.d.ts&lt;/code&gt;结尾的文件名的文件内。环境声明不会被编译成代码。&lt;/p&gt;
&lt;p&gt;在这样的模块、变量、类型声明文件里，&lt;code&gt;interface&lt;/code&gt;是最常见的。用户代码中可以用类实现这些接口。但是请记住，&lt;code&gt;interface&lt;/code&gt;旨在声明JavaScript中可能存在的数据结构。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Point&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;x&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;y&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;z&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// New member&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;MyPoint&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Point&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// ERROR : missing member `z`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;x&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;y&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;lib-d-ts&#34;&gt;&lt;a href=&#34;#lib-d-ts&#34; class=&#34;headerlink&#34; title=&#34;lib.d.ts&#34;&gt;&lt;/a&gt;&lt;code&gt;lib.d.ts&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;为了便于你能快速开始书写类型检查的代码，TypeScript自带了BOM的变量声明（包含window、document、math等）位于&lt;code&gt;lib.d.ts&lt;/code&gt;中。你可以在你的项目下添加&lt;code&gt;global.d.ts&lt;/code&gt;，对已有的全局变量做自己的拓展。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Window&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;(): &lt;span class=&#34;built_in&#34;&gt;void&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;DateConstructor&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;lastDay&lt;/span&gt;(): &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;window&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Date&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;lastDay&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;你在自己定义的&lt;code&gt;global.d.ts&lt;/code&gt;中可以通过拓展global，修改全局空间内的类型定义。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;declare&lt;/span&gt; &lt;span class=&#34;variable language_&#34;&gt;global&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;String&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;endsWith&lt;/span&gt;(&lt;span class=&#34;attr&#34;&gt;suffix&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;): &lt;span class=&#34;built_in&#34;&gt;boolean&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;编译选项&#34;&gt;&lt;a href=&#34;#编译选项&#34; class=&#34;headerlink&#34; title=&#34;编译选项&#34;&gt;&lt;/a&gt;编译选项&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;指定&lt;code&gt;--noLib&lt;/code&gt;可以排除TypeScript自动引入的&lt;code&gt;lib.d.ts&lt;/code&gt;，这通常出现在&lt;ul&gt;
&lt;li&gt;运行JavaScript的环境和标准浏览器相距甚远&lt;/li&gt;
&lt;li&gt;你希望严格控制全局变量的使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;指定&lt;code&gt;--lib&lt;/code&gt;可以对编译环境进行细粒度控制引入的包类型&lt;ul&gt;
&lt;li&gt;tsc中，&lt;code&gt;tsc --target es5 --lib dom,es6&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;也可以在&lt;code&gt;tsconfig.json&lt;/code&gt;中声明&lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;&amp;quot;compilerOptions&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;lib&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;dom&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;es6&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果没有指定&lt;code&gt;--lib&lt;/code&gt;，TypeScript会根据当前编译选项中的&lt;code&gt;target&lt;/code&gt;导入默认库。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--target&lt;/code&gt;为es5时，导入es5、dom、scriptdom&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--target&lt;/code&gt;为es6时，导入es6、dom、dom.iterable、scripthost&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;函数&#34;&gt;&lt;a href=&#34;#函数&#34; class=&#34;headerlink&#34; title=&#34;函数&#34;&gt;&lt;/a&gt;函数&lt;/h3&gt;&lt;p&gt;函数注解可以使用内联或&lt;code&gt;interface&lt;/code&gt;的方式。通常编译器可以根据代码自动推断函数的返回类型。函数入参的可选参数通过类型注解前的&lt;code&gt;?&lt;/code&gt;说明。另外，TypeScript允许你&lt;strong&gt;声明&lt;/strong&gt;函数重载，注意，这里只是声明，重载需要自己实现。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;adult&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;itself: human&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;adult&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;itself: human, mate: human, children: human[]&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;adult&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;itself: human, mate?: human, children?: human[]&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!mate) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123; itself &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    itself,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    mate,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;children&lt;/span&gt;: children || []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;adult&lt;/span&gt;(yourself, anotherGuy); &lt;span class=&#34;comment&#34;&gt;// Error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;可调用的&#34;&gt;&lt;a href=&#34;#可调用的&#34; class=&#34;headerlink&#34; title=&#34;可调用的&#34;&gt;&lt;/a&gt;可调用的&lt;/h4&gt;&lt;p&gt;可以用类型别名或接口表示可调用的类型。函数重载和构造函数定义都可以在其中实现。使用&lt;code&gt;new&lt;/code&gt;作为前缀后，需要使用&lt;code&gt;new&lt;/code&gt;关键字去调用这个函数。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Overloaded&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  (&lt;span class=&#34;attr&#34;&gt;foo&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;) =&amp;gt; &lt;span class=&#34;built_in&#34;&gt;void&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;foo: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ConstructorFunc&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; (): &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;除此之外，还可以使用箭头函数作内联函数注解，但这种时候无法表示重载。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;foo&lt;/span&gt;: &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;bar: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; = &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;bar&lt;/span&gt; =&amp;gt;&lt;/span&gt; bar.&lt;span class=&#34;title function_&#34;&gt;toString&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;字面量类型&#34;&gt;&lt;a href=&#34;#字面量类型&#34; class=&#34;headerlink&#34; title=&#34;字面量类型&#34;&gt;&lt;/a&gt;字面量类型&lt;/h3&gt;&lt;p&gt;字面量 + 联合类型构成TS中常用的字面量类型。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Seasons&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;spring&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;summer&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;autumn&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;winter&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; binary = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; | &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; bools = &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt; | &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;很多时候字面量类型会通过&lt;code&gt;keyof&lt;/code&gt;一个键值对的形式来构造。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 用于创建字符串列表映射至 `K: V` 的函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; strEnum&amp;lt;T &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;&amp;gt;(&lt;span class=&#34;attr&#34;&gt;o&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Array&lt;/span&gt;&amp;lt;T&amp;gt;): &amp;#123; [K &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; T]: K &amp;#125; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; o.&lt;span class=&#34;title function_&#34;&gt;reduce&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;res, key&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    res[key] = key;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;, &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;create&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 创建 K: V&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Direction&lt;/span&gt; = &lt;span class=&#34;title function_&#34;&gt;strEnum&lt;/span&gt;([&lt;span class=&#34;string&#34;&gt;&amp;#x27;North&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;South&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;East&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;West&amp;#x27;&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 创建一个类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Direction&lt;/span&gt; = keyof &lt;span class=&#34;keyword&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Direction&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;类型断言&#34;&gt;&lt;a href=&#34;#类型断言&#34; class=&#34;headerlink&#34; title=&#34;类型断言&#34;&gt;&lt;/a&gt;类型断言&lt;/h3&gt;&lt;p&gt;TypeScript有自己的类型推断，但是允许你使用&lt;strong&gt;类型断言&lt;/strong&gt;去覆盖。通过&lt;code&gt;as Something&lt;/code&gt;或&lt;code&gt;&amp;lt;Something&amp;gt;&lt;/code&gt;的方式。但是后者接近JSX语法，所以更多使用前者。&lt;/p&gt;
&lt;p&gt;断言是编译时的，为编译器提供分析代码的方法。TypeScript在进行类型断言时，会判断源类型&lt;code&gt;S&lt;/code&gt;是否是目标类型&lt;code&gt;T&lt;/code&gt;的子集，若不是则不能成功断言。&lt;/p&gt;
&lt;h3 id=&#34;类型保护&#34;&gt;&lt;a href=&#34;#类型保护&#34; class=&#34;headerlink&#34; title=&#34;类型保护&#34;&gt;&lt;/a&gt;类型保护&lt;/h3&gt;&lt;p&gt;使用JS中&lt;code&gt;typeof&lt;/code&gt;和&lt;code&gt;instanceof&lt;/code&gt;可以帮助TypeScript推导出条件语句内的变量类型。使用&lt;code&gt;in&lt;/code&gt;操作符，也可以帮助TypeScript判断类型。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; A &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;x&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; B &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;y&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;doStuff&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;q: A | B&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;string&#34;&gt;&amp;#x27;x&amp;#x27;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; q) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// q: A&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// q: B&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在联合类型中，如果有类型使用字面量，TypeScript甚至可以通过判断字面量确定变量类型。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Foo&lt;/span&gt; = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;kind&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;foo&amp;#x27;&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// 字面量类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;foo&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Bar&lt;/span&gt; = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;kind&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;bar&amp;#x27;&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// 字面量类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;bar&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;doStuff&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;arg: Foo | Bar&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (arg.&lt;span class=&#34;property&#34;&gt;kind&lt;/span&gt; === &lt;span class=&#34;string&#34;&gt;&amp;#x27;foo&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(arg.&lt;span class=&#34;property&#34;&gt;foo&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;// ok&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(arg.&lt;span class=&#34;property&#34;&gt;bar&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;// Error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 一定是 Bar&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(arg.&lt;span class=&#34;property&#34;&gt;foo&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;// Error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(arg.&lt;span class=&#34;property&#34;&gt;bar&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;// ok&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;最后，弥补JS中plain object没有&lt;code&gt;instanceof&lt;/code&gt;或&lt;code&gt;typeof&lt;/code&gt;自我检查的漏洞。TypeScript提供了&lt;code&gt;is&lt;/code&gt;允许自定义类型判断。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 仅仅是一个 interface&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Foo&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;foo&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;common&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Bar&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;bar&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;common&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 用户自己定义的类型保护！&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;isFoo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;arg: Foo | Bar&lt;/span&gt;): arg is &lt;span class=&#34;title class_&#34;&gt;Foo&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; (arg &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Foo&lt;/span&gt;).&lt;span class=&#34;property&#34;&gt;foo&lt;/span&gt; !== &lt;span class=&#34;literal&#34;&gt;undefined&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;类型推断&#34;&gt;&lt;a href=&#34;#类型推断&#34; class=&#34;headerlink&#34; title=&#34;类型推断&#34;&gt;&lt;/a&gt;类型推断&lt;/h3&gt;&lt;p&gt;TypeScript可以根据一些规则推断出变量类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义变量&lt;/li&gt;
&lt;li&gt;函数返回&lt;/li&gt;
&lt;li&gt;赋值&lt;/li&gt;
&lt;li&gt;结构化（数组元素、对象属性）&lt;/li&gt;
&lt;li&gt;解构&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在推断不出类型或使用第三方JS库时，类型会被判定为&lt;code&gt;any&lt;/code&gt;。开启编译选项&lt;code&gt;noImplicitAny&lt;/code&gt;可以避免这种问题。&lt;/p&gt;
&lt;h3 id=&#34;类型兼容&#34;&gt;&lt;a href=&#34;#类型兼容&#34; class=&#34;headerlink&#34; title=&#34;类型兼容&#34;&gt;&lt;/a&gt;类型兼容&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;结构化：只要对象结构匹配，名称无关紧要&lt;/li&gt;
&lt;li&gt;多态性：子类实例可以复制给基类实例，相反则不行&lt;/li&gt;
&lt;li&gt;函数&lt;ul&gt;
&lt;li&gt;返回类型：数据较多的可以赋值给数据较少的&lt;/li&gt;
&lt;li&gt;入参：入参较少的可以赋值给入参较多的&lt;/li&gt;
&lt;li&gt;可选参数、Rest参数：可以相互赋值（可选和必选仅在&lt;code&gt;strictNullChecks&lt;/code&gt;选中时相互兼容）&lt;/li&gt;
&lt;li&gt;入参类型：父类子类相互兼容（牺牲安全性确保便利性）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;枚举：和数字类型兼容、不同枚举间不兼容&lt;/li&gt;
&lt;li&gt;类：仅比较&lt;strong&gt;实例成员和实例方法&lt;/strong&gt;，不比较构造函数和静态成员，&lt;code&gt;private&lt;/code&gt;和&lt;code&gt;protected&lt;/code&gt;成员必须来自相同的类&lt;/li&gt;
&lt;li&gt;泛型：泛型对兼容性没有影响（这可能会带来一些潜在问题）&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Poin2D&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;x&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;y&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;iTakePoint2D&lt;/span&gt; = (&lt;span class=&#34;params&#34;&gt;point: Point2D&lt;/span&gt;) =&amp;gt; &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;iTakePoint3D&lt;/span&gt; = (&lt;span class=&#34;params&#34;&gt;point: Point3D&lt;/span&gt;) =&amp;gt; &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;iTakePoint3D = iTakePoint2D; &lt;span class=&#34;comment&#34;&gt;// ok, 这是合理的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;iTakePoint2D = iTakePoint3D; &lt;span class=&#34;comment&#34;&gt;// also ok，为什么？&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;readonly&#34;&gt;&lt;a href=&#34;#readonly&#34; class=&#34;headerlink&#34; title=&#34;readonly&#34;&gt;&lt;/a&gt;readonly&lt;/h3&gt;&lt;p&gt;用&lt;code&gt;readonly&lt;/code&gt;标记接口属性，表示预期不可修改。获取使用&lt;code&gt;Readonly&lt;/code&gt;封装一个泛型&lt;code&gt;T&lt;/code&gt;，表示泛型内的属性均不可修改。同样地，你可以为索引签名声明&lt;code&gt;readonly&lt;/code&gt;，表示所有索引元素均不可修改。还有些情况下，如果属性配置了&lt;code&gt;getter&lt;/code&gt;，但没有&lt;code&gt;setter&lt;/code&gt;也会被认为是只读的。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Foo&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;readonly&lt;/span&gt; [&lt;span class=&#34;attr&#34;&gt;x&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;]: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;readonly&lt;/code&gt;和&lt;code&gt;const&lt;/code&gt;的主要不同在于，前者用来修改属性，后者用于变量。&lt;/p&gt;
&lt;h3 id=&#34;索引签名&#34;&gt;&lt;a href=&#34;#索引签名&#34; class=&#34;headerlink&#34; title=&#34;索引签名&#34;&gt;&lt;/a&gt;索引签名&lt;/h3&gt;&lt;p&gt;索引即数组或键值对的索引。TypeScript中索引类型只能是&lt;code&gt;string&lt;/code&gt;或&lt;code&gt;number&lt;/code&gt;类型。这意味着，也可以使用字面量类型作为索引类型。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Index&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;a&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;b&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;c&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;FromIndex&lt;/span&gt; = &amp;#123; [k &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Index&lt;/span&gt;]?: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;good&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;FromIndex&lt;/span&gt; = &amp;#123; &lt;span class=&#34;attr&#34;&gt;b&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;c&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在一些特殊场景下，可以同时支持&lt;code&gt;string&lt;/code&gt;和&lt;code&gt;number&lt;/code&gt;类型。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ArrStr&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  [&lt;span class=&#34;attr&#34;&gt;key&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;]: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; | &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// 必须包括所用成员类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  [&lt;span class=&#34;attr&#34;&gt;index&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;]: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// 字符串索引类型的子级&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;流动的类型&#34;&gt;&lt;a href=&#34;#流动的类型&#34; class=&#34;headerlink&#34; title=&#34;流动的类型&#34;&gt;&lt;/a&gt;流动的类型&lt;/h3&gt;&lt;p&gt;&lt;code&gt;typeof&lt;/code&gt;可以捕获变量、类成员类型。使用&lt;code&gt;typeof&lt;/code&gt;在捕获一个字符串字面量时，得到的类型是字面量类型。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; foo = &lt;span class=&#34;number&#34;&gt;123&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;bar&lt;/span&gt;: &lt;span class=&#34;keyword&#34;&gt;typeof&lt;/span&gt; foo; &lt;span class=&#34;comment&#34;&gt;// &amp;#x27;bar&amp;#x27; 类型与 &amp;#x27;foo&amp;#x27; 类型相同（在这里是： &amp;#x27;number&amp;#x27;）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 捕获字符串的类型与值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; faz = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Hello World&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 使用一个捕获的类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;baz&lt;/span&gt;: &lt;span class=&#34;keyword&#34;&gt;typeof&lt;/span&gt; faz;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// bar 仅能被赋值 &amp;#x27;Hello World&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;baz = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Hello World&amp;#x27;&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// ok&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;baz = &lt;span class=&#34;string&#34;&gt;&amp;#x27;anything else&amp;#x27;&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// Error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;使用&lt;code&gt;keyof&lt;/code&gt;捕获一个类型的键。&lt;/p&gt;
&lt;h3 id=&#34;ThisType&#34;&gt;&lt;a href=&#34;#ThisType&#34; class=&#34;headerlink&#34; title=&#34;ThisType&#34;&gt;&lt;/a&gt;ThisType&lt;/h3&gt;&lt;p&gt;在对象字面量方法的类型定义上声明&lt;code&gt;ThisType()&lt;/code&gt;可以修改发放内&lt;code&gt;this&lt;/code&gt;的类型，这常被用在&lt;code&gt;this&lt;/code&gt;值被重新绑定的情况。&lt;/p&gt;
&lt;h2 id=&#34;Tips&#34;&gt;&lt;a href=&#34;#Tips&#34; class=&#34;headerlink&#34; title=&#34;Tips&#34;&gt;&lt;/a&gt;Tips&lt;/h2&gt;&lt;h3 id=&#34;bind的隐患&#34;&gt;&lt;a href=&#34;#bind的隐患&#34; class=&#34;headerlink&#34; title=&#34;bind的隐患&#34;&gt;&lt;/a&gt;&lt;code&gt;bind&lt;/code&gt;的隐患&lt;/h3&gt;&lt;p&gt;在&lt;code&gt;lib.d.ts&lt;/code&gt;中，对&lt;code&gt;bind&lt;/code&gt;的定义如下:&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;attr&#34;&gt;thisArg&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;any&lt;/span&gt;, ...&lt;span class=&#34;attr&#34;&gt;argArray&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;any&lt;/span&gt;[]): &lt;span class=&#34;built_in&#34;&gt;any&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;由于返回值是&lt;code&gt;any&lt;/code&gt;类型，意味着bind返回的函数将失去类型检查（最新的TS 3.2已经优化了这个问题）。&lt;/p&gt;
&lt;h3 id=&#34;柯里化函数&#34;&gt;&lt;a href=&#34;#柯里化函数&#34; class=&#34;headerlink&#34; title=&#34;柯里化函数&#34;&gt;&lt;/a&gt;柯里化函数&lt;/h3&gt;&lt;p&gt;用一系列箭头表示。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 一个柯里化函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;add&lt;/span&gt; = (&lt;span class=&#34;params&#34;&gt;x: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;&lt;/span&gt;) =&amp;gt; &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;y: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; x + y;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 简单使用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;add&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;123&lt;/span&gt;)(&lt;span class=&#34;number&#34;&gt;456&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 部分应用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; add123 = &lt;span class=&#34;title function_&#34;&gt;add&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;123&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// fully apply the function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;add123&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;456&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;一些建议&#34;&gt;&lt;a href=&#34;#一些建议&#34; class=&#34;headerlink&#34; title=&#34;一些建议&#34;&gt;&lt;/a&gt;一些建议&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;使用继承而不是&lt;code&gt;as&lt;/code&gt;来实现泛型实例化&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;as&lt;/code&gt;来初始化对象字面量的空对象&lt;/li&gt;
&lt;li&gt;尝试使用类组织代码&lt;/li&gt;
&lt;li&gt;小心使用&lt;code&gt;setter&lt;/code&gt;，不要牺牲代码可读性&lt;/li&gt;
&lt;li&gt;在参数名可以很好提高可读性、入参很多时，考虑让函数接受一个对象参数&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Reflect-Metadata&#34;&gt;&lt;a href=&#34;#Reflect-Metadata&#34; class=&#34;headerlink&#34; title=&#34;Reflect Metadata&#34;&gt;&lt;/a&gt;Reflect Metadata&lt;/h3&gt;&lt;p&gt;Reflect Metadata是ES7的提案，用于在声明时添加和读取元数据。Reflect Metadata的API可以用于类或类属性上，&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Reflect&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;metadata&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;inClass&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;A&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Test&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;meta&#34;&gt;@Reflect&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;metadata&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;inMethod&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;B&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;hello&lt;/span&gt;(): &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;hello world&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;Reflect&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;getMetadata&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;inClass&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;title class_&#34;&gt;Test&lt;/span&gt;)); &lt;span class=&#34;comment&#34;&gt;// &amp;#x27;A&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;Reflect&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;getMetadata&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;inMethod&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Test&lt;/span&gt;(), &lt;span class=&#34;string&#34;&gt;&amp;#x27;hello&amp;#x27;&lt;/span&gt;)); &lt;span class=&#34;comment&#34;&gt;// &amp;#x27;B&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;因此可以通过&lt;code&gt;Reflect.getMetadata&lt;/code&gt;的API来获取类相关的元数据。&lt;/p&gt;
&lt;h4 id=&#34;自定义metadatakey&#34;&gt;&lt;a href=&#34;#自定义metadatakey&#34; class=&#34;headerlink&#34; title=&#34;自定义metadatakey&#34;&gt;&lt;/a&gt;自定义&lt;code&gt;metadatakey&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;可以定义自己的reflect metadata。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;classDecorator&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;): &lt;span class=&#34;title class_&#34;&gt;ClassDecorator&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;target&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 在类上定义元数据，key 为 `classMetaData`，value 为 `a`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;Reflect&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;defineMetadata&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;classMetaData&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;a&amp;#x27;&lt;/span&gt;, target);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;methodDecorator&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;): &lt;span class=&#34;title class_&#34;&gt;MethodDecorator&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;target, key, descriptor&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 在类的原型属性 &amp;#x27;someMethod&amp;#x27; 上定义元数据，key 为 `methodMetaData`，value 为 `b`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;Reflect&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;defineMetadata&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;methodMetaData&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;b&amp;#x27;&lt;/span&gt;, target, key);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@classDecorator&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;SomeClass&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;meta&#34;&gt;@methodDecorator&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;someMethod&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Reflect&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;getMetadata&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;classMetaData&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;title class_&#34;&gt;SomeClass&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;// &amp;#x27;a&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Reflect&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;getMetadata&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;methodMetaData&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;SomeClass&lt;/span&gt;(), &lt;span class=&#34;string&#34;&gt;&amp;#x27;someMethod&amp;#x27;&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;// &amp;#x27;b&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;可以借助Reflect Metadata的这个特点，实现诸如控制反转、依赖注入、装饰器等功能。&lt;/p&gt;
&lt;h3 id=&#34;条件类型&#34;&gt;&lt;a href=&#34;#条件类型&#34; class=&#34;headerlink&#34; title=&#34;条件类型&#34;&gt;&lt;/a&gt;条件类型&lt;/h3&gt;&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;T &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; U ? &lt;span class=&#34;attr&#34;&gt;X&lt;/span&gt;: Y&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;TypeScript 2.8的一个&lt;a href=&#34;https://github.com/Microsoft/TypeScript/pull/21496&#34;&gt;PR&lt;/a&gt;里第一次提到条件类型。条件类型主要规则如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;上式表示&lt;strong&gt;T如果可以赋值给U&lt;/strong&gt;，返回类型&lt;code&gt;X&lt;/code&gt;，否则返回&lt;code&gt;Y&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;U&lt;/code&gt;中出现&lt;code&gt;infer&lt;/code&gt;时，TypeScript会去推断&lt;code&gt;infer&lt;/code&gt;后的类型变量（假设是&lt;code&gt;V&lt;/code&gt;），如果&lt;code&gt;V&lt;/code&gt;出在协变位置，则返回&lt;code&gt;V&lt;/code&gt;所有可能性的联合类型，如果&lt;code&gt;V&lt;/code&gt;出现在逆变位置，则返回&lt;code&gt;V&lt;/code&gt;所有可能性的交叉类型（参考：&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%8D%8F%E5%8F%98%E4%B8%8E%E9%80%86%E5%8F%98&#34;&gt;协变与逆变&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;分布条件类型&#34;&gt;&lt;a href=&#34;#分布条件类型&#34; class=&#34;headerlink&#34; title=&#34;分布条件类型&#34;&gt;&lt;/a&gt;分布条件类型&lt;/h4&gt;&lt;p&gt;在检查类型（&lt;code&gt;extends&lt;/code&gt;前的类型参数）是原始类型（即没有被泛型等封装）时，称为分布条件类型（Distributive conditional types）。在实例化为实际类型时，联合类型会被拆分开。&lt;/p&gt;
&lt;p&gt;例如，&lt;code&gt;T&lt;/code&gt;实例化为&lt;code&gt;A | B | C&lt;/code&gt;时，&lt;code&gt;T extends U ? X : Y&lt;/code&gt;会被解析成&lt;code&gt;(A extends U ? X : Y) | (B extends U ? X : Y) | (C extends U ? X : Y)&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;FunctionPropertyNames&lt;/span&gt;&amp;lt;T&amp;gt; = &amp;#123; [K &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; keyof T]: T[K] &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Function&lt;/span&gt; ? K : &lt;span class=&#34;built_in&#34;&gt;never&lt;/span&gt; &amp;#125;[keyof T];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;FunctionProperties&lt;/span&gt;&amp;lt;T&amp;gt; = &lt;span class=&#34;title class_&#34;&gt;Pick&lt;/span&gt;&amp;lt;T, &lt;span class=&#34;title class_&#34;&gt;FunctionPropertyNames&lt;/span&gt;&amp;lt;T&amp;gt;&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;NonFunctionPropertyNames&lt;/span&gt;&amp;lt;T&amp;gt; = &amp;#123; [K &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; keyof T]: T[K] &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Function&lt;/span&gt; ? &lt;span class=&#34;built_in&#34;&gt;never&lt;/span&gt; : K &amp;#125;[keyof T];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;NonFunctionProperties&lt;/span&gt;&amp;lt;T&amp;gt; = &lt;span class=&#34;title class_&#34;&gt;Pick&lt;/span&gt;&amp;lt;T, &lt;span class=&#34;title class_&#34;&gt;NonFunctionPropertyNames&lt;/span&gt;&amp;lt;T&amp;gt;&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Part&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;name&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;subparts&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Part&lt;/span&gt;[];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;updatePart&lt;/span&gt;(&lt;span class=&#34;attr&#34;&gt;newName&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;): &lt;span class=&#34;built_in&#34;&gt;void&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;variable constant_&#34;&gt;T40&lt;/span&gt; = &lt;span class=&#34;title class_&#34;&gt;FunctionPropertyNames&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;Part&lt;/span&gt;&amp;gt;;  &lt;span class=&#34;comment&#34;&gt;// &amp;quot;updatePart&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;variable constant_&#34;&gt;T41&lt;/span&gt; = &lt;span class=&#34;title class_&#34;&gt;NonFunctionPropertyNames&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;Part&lt;/span&gt;&amp;gt;;  &lt;span class=&#34;comment&#34;&gt;// &amp;quot;id&amp;quot; | &amp;quot;name&amp;quot; | &amp;quot;subparts&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;variable constant_&#34;&gt;T42&lt;/span&gt; = &lt;span class=&#34;title class_&#34;&gt;FunctionProperties&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;Part&lt;/span&gt;&amp;gt;;  &lt;span class=&#34;comment&#34;&gt;// &amp;#123; updatePart(newName: string): void &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;variable constant_&#34;&gt;T43&lt;/span&gt; = &lt;span class=&#34;title class_&#34;&gt;NonFunctionProperties&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;Part&lt;/span&gt;&amp;gt;;  &lt;span class=&#34;comment&#34;&gt;// &amp;#123; id: number, name: string, subparts: Part[] &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;infer&#34;&gt;&lt;a href=&#34;#infer&#34; class=&#34;headerlink&#34; title=&#34;infer&#34;&gt;&lt;/a&gt;&lt;code&gt;infer&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;如上文所说，&lt;code&gt;infer&lt;/code&gt;最初出现是用来表示&lt;code&gt;extends&lt;/code&gt;条件语句中待推断的类型。下文中若T满足&lt;code&gt;(param: infer P) =&amp;gt; any&lt;/code&gt;类型，则推出&lt;code&gt;P&lt;/code&gt;类型。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ParamType&lt;/span&gt;&amp;lt;T&amp;gt; = T &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; (&lt;span class=&#34;attr&#34;&gt;param&lt;/span&gt;: infer P) =&amp;gt; &lt;span class=&#34;built_in&#34;&gt;any&lt;/span&gt; ? P : T;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;infer&lt;/code&gt;有下面一些常规使用场景。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 获取返回值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ReturnType&lt;/span&gt;&amp;lt;T&amp;gt; = T &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; (...&lt;span class=&#34;attr&#34;&gt;args&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;any&lt;/span&gt;[]) =&amp;gt; infer P ? P : &lt;span class=&#34;built_in&#34;&gt;any&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 获取构造函数的入参或实例类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Constructor&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; (...&lt;span class=&#34;attr&#34;&gt;args&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;any&lt;/span&gt;[]) =&amp;gt; &lt;span class=&#34;built_in&#34;&gt;any&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 获取参数类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ConstructorParameters&lt;/span&gt;&amp;lt;T &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; (...&lt;span class=&#34;attr&#34;&gt;args&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;any&lt;/span&gt;[]) =&amp;gt; &lt;span class=&#34;built_in&#34;&gt;any&lt;/span&gt;&amp;gt; = T &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; (...&lt;span class=&#34;attr&#34;&gt;args&lt;/span&gt;: infer P) =&amp;gt; &lt;span class=&#34;built_in&#34;&gt;any&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ? P&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  : &lt;span class=&#34;built_in&#34;&gt;never&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 获取实例类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;InstanceType&lt;/span&gt;&amp;lt;T &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; (...&lt;span class=&#34;attr&#34;&gt;args&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;any&lt;/span&gt;[]) =&amp;gt; &lt;span class=&#34;built_in&#34;&gt;any&lt;/span&gt;&amp;gt; = T &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; (...&lt;span class=&#34;attr&#34;&gt;args&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;any&lt;/span&gt;[]) =&amp;gt; infer R ? R : &lt;span class=&#34;built_in&#34;&gt;any&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;联合&lt;code&gt;infer&lt;/code&gt;和分布条件类型，可以实现一些骚操作，如tuple、intersection、union之间的转换。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; tupleToIntersection&amp;lt;T&amp;gt; = T[&lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;]；&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; unionToIntersection&amp;lt;T&amp;gt; = (T &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;any&lt;/span&gt; ? &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;k: T&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;void&lt;/span&gt; : &lt;span class=&#34;built_in&#34;&gt;never&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; (&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;k: infer R&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;void&lt;/span&gt;) ? R : &lt;span class=&#34;built_in&#34;&gt;never&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;如原文列的&lt;a href=&#34;https://github.com/LeetCode-OpenSource/hire/blob/master/typescript_zh.md&#34;&gt;LeetCode TypeScript面试题&lt;/a&gt;。借助强大的条件类型和&lt;code&gt;infer&lt;/code&gt;就能实现。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt;&amp;lt;T&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  payload?: T;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 预期的类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Result&lt;/span&gt; = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  asyncMethod&amp;lt;T, U&amp;gt;(&lt;span class=&#34;attr&#34;&gt;input&lt;/span&gt;: T): &lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt;&amp;lt;U&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  syncMethod&amp;lt;T, U&amp;gt;(&lt;span class=&#34;attr&#34;&gt;action&lt;/span&gt;: T): &lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt;&amp;lt;U&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Module&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;count&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;message&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  asyncMethod&amp;lt;T, U&amp;gt;(&lt;span class=&#34;attr&#34;&gt;input&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Promise&lt;/span&gt;&amp;lt;T&amp;gt;): &lt;span class=&#34;title class_&#34;&gt;Promise&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt;&amp;lt;U&amp;gt;&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  syncMethod&amp;lt;T, U&amp;gt;(&lt;span class=&#34;attr&#34;&gt;action&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt;&amp;lt;T&amp;gt;): &lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt;&amp;lt;U&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;FuncNames&lt;/span&gt;&amp;lt;T&amp;gt; = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  [K &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; keyof T]: T[K] &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Function&lt;/span&gt; ? K : &lt;span class=&#34;built_in&#34;&gt;never&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;[keyof T]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;FuncProperties&lt;/span&gt;&amp;lt;T&amp;gt; = &lt;span class=&#34;title class_&#34;&gt;Pick&lt;/span&gt;&amp;lt;T, &lt;span class=&#34;title class_&#34;&gt;FuncNames&lt;/span&gt;&amp;lt;T&amp;gt;&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;UnPackedParams&lt;/span&gt;&amp;lt;T&amp;gt; = T &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Promise&lt;/span&gt;&amp;lt;infer R&amp;gt; ? R :&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  T &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Action&lt;/span&gt;&amp;lt;infer R&amp;gt; ? R : T;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;UnPackedReturn&lt;/span&gt;&amp;lt;T&amp;gt; = T &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Promise&lt;/span&gt;&amp;lt;infer R&amp;gt; ? R : T;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;UnPackedFunction&lt;/span&gt;&amp;lt;T&amp;gt; = T &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; (&lt;span class=&#34;attr&#34;&gt;params&lt;/span&gt;: infer U) =&amp;gt; infer R ? &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;params: UnPackedParams&amp;lt;U&amp;gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;UnPackedReturn&lt;/span&gt;&amp;lt;R&amp;gt; : &lt;span class=&#34;built_in&#34;&gt;never&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Resolve&lt;/span&gt;&amp;lt;T&amp;gt; = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  [K &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; keyof T]: &lt;span class=&#34;title class_&#34;&gt;UnPackedFunction&lt;/span&gt;&amp;lt;T[K]&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 修改 Connect 的类型，让 connected 的类型变成预期的类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Connect&lt;/span&gt; = &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;module&lt;/span&gt;: Module&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Resolve&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;FuncProperties&lt;/span&gt;&amp;lt;&lt;span class=&#34;title class_&#34;&gt;Module&lt;/span&gt;&amp;gt;&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;TypeScript编译原理&#34;&gt;&lt;a href=&#34;#TypeScript编译原理&#34; class=&#34;headerlink&#34; title=&#34;TypeScript编译原理&#34;&gt;&lt;/a&gt;TypeScript编译原理&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;这部分内容较为简要。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;编译器源文件位于&lt;code&gt;src/compiler&lt;/code&gt;下，主要由以下部分组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;扫描器 Scanner&lt;/li&gt;
&lt;li&gt;解析器 Parser&lt;/li&gt;
&lt;li&gt;绑定器 Binder&lt;/li&gt;
&lt;li&gt;检查器 Checker&lt;/li&gt;
&lt;li&gt;发射器 Emitter&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;处理流程分下面几步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Source --扫描器--&amp;gt; Token流&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Token流 --解析器--&amp;gt; AST(抽象语法树)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AST --绑定器--&amp;gt; Symbols&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AST + 符号 --检查器--&amp;gt; 类型验证&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AST + 检查器 --发射器--&amp;gt; JavaScript代码&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;重要文件&#34;&gt;&lt;a href=&#34;#重要文件&#34; class=&#34;headerlink&#34; title=&#34;重要文件&#34;&gt;&lt;/a&gt;重要文件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;core.ts&lt;/code&gt; TypeScript编译器使用的核心工具集&lt;/li&gt;
&lt;li&gt;&lt;code&gt;types.ts&lt;/code&gt; 包含整个编译器使用的关键数据结构和接口&lt;/li&gt;
&lt;li&gt;&lt;code&gt;system.ts&lt;/code&gt; 控制编译器和操作系统的所有交互&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;程序与抽象语法树&#34;&gt;&lt;a href=&#34;#程序与抽象语法树&#34; class=&#34;headerlink&#34; title=&#34;程序与抽象语法树&#34;&gt;&lt;/a&gt;程序与抽象语法树&lt;/h3&gt;&lt;p&gt;这里的“程序”指一个“编译上下文”。它包含SourceFile和编译选项。TypeScript有API获取SourceFile列表，每个SourceFile都是一棵抽象语法树的根节点。&lt;/p&gt;
&lt;h4 id=&#34;节点&#34;&gt;&lt;a href=&#34;#节点&#34; class=&#34;headerlink&#34; title=&#34;节点&#34;&gt;&lt;/a&gt;节点&lt;/h4&gt;&lt;p&gt;节点（Node）是AST的基本组成单位。Node有一些关键成员：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TextRange&lt;/code&gt; 标识节点在源文件的起止位置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;parent?: Node&lt;/code&gt; 标识节点在AST中的父节点&lt;/li&gt;
&lt;li&gt;标志（flags）和修饰符（modifier）等有助于节点遍历的成员&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面有一些常用工具函数的用法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ts.forEachChild&lt;/code&gt; 用来访问任一节点的所有子节点。这个函数会根据每个节点的&lt;code&gt;node.kind&lt;/code&gt;判断node类型，然后再在子节点上调用cbNode。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ts.SyntaxKind&lt;/code&gt;是一个节点类型的常量枚举，用以表示不同的语法树节点&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ts.getLeadingCommentRanges&lt;/code&gt;和&lt;code&gt;ts.getTrailingCommentRanges&lt;/code&gt;分别获取给定位置第一个换行符到token和之前的注释范围。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ts.getStart&lt;/code&gt;和&lt;code&gt;ts.getFullStart&lt;/code&gt;分别获取一个token文本开始位置和上一个重要token开始扫描的位置&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;SyntaxKind&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;Unknown&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;EndOfFileToken&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;SingleLineCommentTrivia&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;扫描器与解析器&#34;&gt;&lt;a href=&#34;#扫描器与解析器&#34; class=&#34;headerlink&#34; title=&#34;扫描器与解析器&#34;&gt;&lt;/a&gt;扫描器与解析器&lt;/h3&gt;&lt;p&gt;扫描器用于读取文本，并转换为Token流。扫描器由解析器（&lt;code&gt;parser.ts&lt;/code&gt;）创建，为了避免创建扫描器的开销。&lt;code&gt;parser.ts&lt;/code&gt;创建的扫描器是单例。&lt;/p&gt;
&lt;p&gt;扫描器&lt;code&gt;scanner.ts&lt;/code&gt;本身提供API给出扫描过程中的各种信息。尽管解析器创建的扫描器是单例，你仍可以使用&lt;code&gt;createScanner&lt;/code&gt;创建自己的扫描器，并调用&lt;code&gt;setText&lt;/code&gt;、&lt;code&gt;setTextPos&lt;/code&gt;随意扫描文件的不同位置。&lt;/p&gt;
&lt;p&gt;解析器由程序经由&lt;code&gt;CompilerHost&lt;/code&gt;创建，&lt;code&gt;CompileHost&lt;/code&gt;通过&lt;code&gt;getSourceFile&lt;/code&gt;准备好待编译文件，再交由解析器处理。解析器根据内部扫描器得到的Token构造一个SourceFile下的语法树。&lt;/p&gt;
&lt;p&gt;解析器使用&lt;code&gt;parseSourceFileWorker&lt;/code&gt;和&lt;code&gt;parseStatements&lt;/code&gt;创建根节点和其余节点。具体解析每种节点的过程写在&lt;code&gt;parseXxx&lt;/code&gt;中。&lt;/p&gt;
&lt;h3 id=&#34;绑定器&#34;&gt;&lt;a href=&#34;#绑定器&#34; class=&#34;headerlink&#34; title=&#34;绑定器&#34;&gt;&lt;/a&gt;绑定器&lt;/h3&gt;&lt;p&gt;绑定器主要职责是创建&lt;em&gt;符号&lt;/em&gt;（Symbol）。符号将AST的声明节点和其他声明连接到相同实体上。绑定器会在检查器内被调用，检查器又被程序调用。&lt;/p&gt;
&lt;p&gt;绑定器有几个重要函数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bindSourceFile&lt;/code&gt;，检查&lt;code&gt;file.locals&lt;/code&gt;是否定义，没有则交给内部函数&lt;code&gt;bind&lt;/code&gt;处理。&lt;code&gt;bindSourceFile&lt;/code&gt;内部还定义了许多别的内部变量，通过闭包被其他内部函数使用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bind&lt;/code&gt;处理任意节点绑定，先分配&lt;code&gt;node.parent&lt;/code&gt;，在交给&lt;code&gt;bindWorker&lt;/code&gt;做主要工作，之后调用&lt;code&gt;bindChildren&lt;/code&gt;执行子节点的绑定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bindWorker&lt;/code&gt;根据节点类型，委托工作给特定的&lt;code&gt;bindXXX&lt;/code&gt;函数完成。在&lt;code&gt;bindXXX&lt;/code&gt;内最常用的是&lt;code&gt;createSymbol&lt;/code&gt;函数&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;createSymbol&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;flags: SymbolFlags, name: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;&lt;/span&gt;): &lt;span class=&#34;title class_&#34;&gt;Symbol&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  symbolCount++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Symbol&lt;/span&gt;(flags, name);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;绑定器会调用&lt;code&gt;addDeclarationToSymbol&lt;/code&gt;绑定一个节点到符号，并把节点添加成符号的一个声明。声明就是一个有可选名字的节点。&lt;/p&gt;
&lt;h3 id=&#34;检查器与发射器&#34;&gt;&lt;a href=&#34;#检查器与发射器&#34; class=&#34;headerlink&#34; title=&#34;检查器与发射器&#34;&gt;&lt;/a&gt;检查器与发射器&lt;/h3&gt;&lt;p&gt;检查器由程序初始化。在发射器中，类型检查在&lt;code&gt;getDiagnostics&lt;/code&gt;中发生，函数被调用时会返回一个&lt;code&gt;EmitResolver&lt;/code&gt;。这是一个&lt;code&gt;createTypeChecker&lt;/code&gt;的本地函数集合。&lt;/p&gt;
&lt;p&gt;TypeScript有两个发射器，&lt;code&gt;emitter.ts&lt;/code&gt;完成TS到JavaScript，&lt;code&gt;declarationEmitter.ts&lt;/code&gt;为&lt;code&gt;.ts&lt;/code&gt;创建声明文件(&lt;code&gt;.d.ts&lt;/code&gt;)。&lt;/p&gt;
&lt;p&gt;程序（Program）通过&lt;code&gt;emit&lt;/code&gt;函数，把工作委托给&lt;code&gt;emitter.ts&lt;/code&gt;的&lt;code&gt;emitFiles&lt;/code&gt;函数。&lt;code&gt;emitFiles&lt;/code&gt;中借助&lt;code&gt;emitJavaScript&lt;/code&gt;完成主要工作，&lt;/p&gt;
&lt;p&gt;&lt;code&gt;emitJavaScript&lt;/code&gt;中有大量内部函数，之后借给&lt;code&gt;emitSourceFile&lt;/code&gt;发射文本，该函数设置&lt;code&gt;currentSourceFile&lt;/code&gt;后交给本地的&lt;code&gt;emit&lt;/code&gt;函数处理。在&lt;code&gt;emitJavaScriptWorker&lt;/code&gt;中会根据不同符号类型调用不同发射器处理。在&lt;code&gt;emitJavaScript&lt;/code&gt;的过程中，&lt;code&gt;initializeEmitterWithSourceMaps&lt;/code&gt;使用带有sourceMap的版本覆盖部分本地函数，使大多数发射器代码无需考虑SourceMap。&lt;/p&gt;
&lt;h2 id=&#34;FAQ&#34;&gt;&lt;a href=&#34;#FAQ&#34; class=&#34;headerlink&#34; title=&#34;FAQ&#34;&gt;&lt;/a&gt;FAQ&lt;/h2&gt;&lt;h3 id=&#34;类型系统的行为&#34;&gt;&lt;a href=&#34;#类型系统的行为&#34; class=&#34;headerlink&#34; title=&#34;类型系统的行为&#34;&gt;&lt;/a&gt;类型系统的行为&lt;/h3&gt;&lt;p&gt;首先有几个需要格外说明的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TypeScript使用&lt;strong&gt;结构化类型&lt;/strong&gt;，即类型间的成员类型兼容即类型兼容。&lt;/li&gt;
&lt;li&gt;TypeScript的类型时&lt;em&gt;编译时&lt;/em&gt;的，在运行时并没有类型信息，无法从反射或元数据中拿到。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此外有些常见问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;没有setter的getter并没有体现出只读属性&lt;/strong&gt;，这在TypeScript2.0+已修复&lt;/li&gt;
&lt;li&gt;更少参数的函数可以赋值给更多参数的函数；返回值更多的函数可以复制给返回值更少的函数&lt;/li&gt;
&lt;li&gt;任何类型都可以等价替代没有属性的interface&lt;/li&gt;
&lt;li&gt;类型别名只是别名而已，进行类型判断时使用的是别名对应的类型&lt;/li&gt;
&lt;li&gt;由于结构化类型，两个不同名但是结构相同的类型，实际上是相互兼容的，有个&lt;a href=&#34;https://github.com/Microsoft/TypeScript/issues/202&#34;&gt;相关issue&lt;/a&gt;，但是尚没有结论&lt;/li&gt;
&lt;li&gt;由于TS的类型只存在于编译时，不能用运行时的&lt;code&gt;typeof&lt;/code&gt;或&lt;code&gt;instanceof&lt;/code&gt;判断类型。同样地，错误的TS类型转化也不会造成运行时的错误&lt;/li&gt;
&lt;li&gt;重载的最后一个声明签名对签名本身没有影响，所以为了获得重载本身的行为，需要添加额外的重载&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;createLog&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;message: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;&lt;/span&gt;): &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;createLog&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;source: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;, message: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;&lt;/span&gt;): &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;createLog&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;source: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;, message?: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;&lt;/span&gt;): &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;一些常见的Feature-Request&#34;&gt;&lt;a href=&#34;#一些常见的Feature-Request&#34; class=&#34;headerlink&#34; title=&#34;一些常见的Feature Request&#34;&gt;&lt;/a&gt;一些常见的Feature Request&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tc39/proposal-optional-chaining&#34;&gt;安全的导航操作符&lt;/a&gt;，类似&lt;code&gt;a?.b?.c&lt;/code&gt;，目前已在tc39的Stage 3阶段，将并入TS的3.7.0版本&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Microsoft/TypeScript/issues/8&#34;&gt;代码压缩&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Microsoft/TypeScript/issues/212&#34;&gt;bind(), call(), apply()返回的函数无类型&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;其他问题&#34;&gt;&lt;a href=&#34;#其他问题&#34; class=&#34;headerlink&#34; title=&#34;其他问题&#34;&gt;&lt;/a&gt;其他问题&lt;/h3&gt;&lt;h4 id=&#34;空类的行为很奇怪&#34;&gt;&lt;a href=&#34;#空类的行为很奇怪&#34; class=&#34;headerlink&#34; title=&#34;空类的行为很奇怪&#34;&gt;&lt;/a&gt;空类的行为很奇怪&lt;/h4&gt;&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Empty&lt;/span&gt; &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;e&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Empty&lt;/span&gt; = &lt;span class=&#34;variable language_&#34;&gt;window&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;和之前提到的一样，&lt;strong&gt;任何内容都可以赋值给空接口&lt;/strong&gt;。所以一般来说，永远不要声明一个没有任何属性的类，对于子类而是如此。&lt;/p&gt;
&lt;h4 id=&#34;如何比较类&#34;&gt;&lt;a href=&#34;#如何比较类&#34; class=&#34;headerlink&#34; title=&#34;如何比较类&#34;&gt;&lt;/a&gt;如何比较类&lt;/h4&gt;&lt;p&gt;TypeScript中，类进行结构上的比较，但是对于&lt;code&gt;private&lt;/code&gt;和&lt;code&gt;protected&lt;/code&gt;属性除外。类在比较时，如果有成员是&lt;code&gt;private&lt;/code&gt;或&lt;code&gt;protected&lt;/code&gt;，它们必须来自同一个声明。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Alpha&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;x&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Bravo&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;x&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Charlie&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;x&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Delta&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;x&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; a = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Alpha&lt;/span&gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  b = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Bravo&lt;/span&gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  c = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Charlie&lt;/span&gt;(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  d = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Delta&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a = b; &lt;span class=&#34;comment&#34;&gt;// OK&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;c = d; &lt;span class=&#34;comment&#34;&gt;// Error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;class和typeof-class的区别&#34;&gt;&lt;a href=&#34;#class和typeof-class的区别&#34; class=&#34;headerlink&#34; title=&#34;class和typeof class的区别&#34;&gt;&lt;/a&gt;&lt;code&gt;class&lt;/code&gt;和&lt;code&gt;typeof class&lt;/code&gt;的区别&lt;/h4&gt;&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;MyClass&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;someMethod&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;x&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;MyClass&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Cannot assign &amp;#x27;typeof MyClass&amp;#x27; to MyClass? Huh?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x = &lt;span class=&#34;title class_&#34;&gt;MyClass&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上面混用了类型名和类本身，在JavaScript中，类仅仅是一个函数而已。而在TypeScript中，类名表示类实例的类型。&lt;/p&gt;
&lt;h4 id=&#34;子类的属性在constructor中会被父类同名属性覆盖&#34;&gt;&lt;a href=&#34;#子类的属性在constructor中会被父类同名属性覆盖&#34; class=&#34;headerlink&#34; title=&#34;子类的属性在constructor中会被父类同名属性覆盖&#34;&gt;&lt;/a&gt;子类的属性在constructor中会被父类同名属性覆盖&lt;/h4&gt;&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Base&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Default value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    myColor = &lt;span class=&#34;string&#34;&gt;&amp;#x27;blue&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;myColor&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Derived&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_ inherited__&#34;&gt;Base&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     myColor = &lt;span class=&#34;string&#34;&gt;&amp;#x27;red&amp;#x27;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Prints &amp;quot;blue&amp;quot;, expected &amp;quot;red&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; x = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Derived&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;直接原因是在子类constructor中，父类的constructor要先执行。见&lt;a href=&#34;https://stackoverflow.com/questions/43595943/why-are-derived-class-property-values-not-seen-in-the-base-class-constructor&#34;&gt;Stack Overflow&lt;/a&gt;的解释。&lt;/p&gt;
&lt;h4 id=&#34;interface和declare-class的区别&#34;&gt;&lt;a href=&#34;#interface和declare-class的区别&#34; class=&#34;headerlink&#34; title=&#34;interface和declare class的区别&#34;&gt;&lt;/a&gt;&lt;code&gt;interface&lt;/code&gt;和&lt;code&gt;declare class&lt;/code&gt;的区别&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;interface&lt;/code&gt;用来声明一种类型，不会生成实际代码。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;declare class&lt;/code&gt;用来描述一个已有类的结构&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;为什么我导入的模块在编译后被删除了&#34;&gt;&lt;a href=&#34;#为什么我导入的模块在编译后被删除了&#34; class=&#34;headerlink&#34; title=&#34;为什么我导入的模块在编译后被删除了&#34;&gt;&lt;/a&gt;为什么我导入的模块在编译后被删除了&lt;/h4&gt;&lt;p&gt;TypeScript默认导入的模块不包含副作用，所以会移除不用于任何表达式的模块导入。使用&lt;code&gt;import &amp;#39;xxx&amp;#39;;&lt;/code&gt;强制导入有副作用的模块。&lt;/p&gt;
&lt;h4 id=&#34;tsconfig-json&#34;&gt;&lt;a href=&#34;#tsconfig-json&#34; class=&#34;headerlink&#34; title=&#34;tsconfig.json&#34;&gt;&lt;/a&gt;&lt;code&gt;tsconfig.json&lt;/code&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;为什么exclude中的文件仍然会被编译器选中？&lt;ul&gt;
&lt;li&gt;当exclude的文件被其他include文件依赖时，仍然会被包含进来&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;除了&lt;code&gt;include&lt;/code&gt;外，还有没有指定包含文件的方式&lt;ul&gt;
&lt;li&gt;&lt;code&gt;files&lt;/code&gt;指定文件列表&lt;/li&gt;
&lt;li&gt;目录中添加&lt;code&gt;///&amp;lt;reference path=&amp;quot;&amp;quot;&amp;gt;&lt;/code&gt;引入&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://shenlvmeng.github.com/blog/2019/06/25/dart-best-practice/</guid>
            <title>Dart快速入门 效率篇</title>
            <link>http://shenlvmeng.github.com/blog/2019/06/25/dart-best-practice/</link>
            <category>Dart</category>
            <category>最佳实践</category>
            <pubDate>Tue, 25 Jun 2019 00:51:28 +0800</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;参考自&lt;a href=&#34;https://dart.dev/guides/language/effective-dart&#34;&gt;Effective Dart&lt;/a&gt;，截至2019&amp;#x2F;06&amp;#x2F;12&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;通用原则&#34;&gt;&lt;a href=&#34;#通用原则&#34; class=&#34;headerlink&#34; title=&#34;通用原则&#34;&gt;&lt;/a&gt;通用原则&lt;/h2&gt;&lt;p&gt;类似其他编程语言，有下面两点注意事项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Be consistent, 统一风格&lt;/li&gt;
&lt;li&gt;Be brief, 保持精简，DRY&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;最佳实践&#34;&gt;&lt;a href=&#34;#最佳实践&#34; class=&#34;headerlink&#34; title=&#34;最佳实践&#34;&gt;&lt;/a&gt;最佳实践&lt;/h2&gt;&lt;p&gt;指南以下面的关键词开头：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;要&lt;/strong&gt;，一定遵守，下面没有前缀的就是以此开头&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不要&lt;/strong&gt;，这么做不是个好主意&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;，应该遵守，当不遵守时确保有合理理由&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;，和上面相反，除非有足够好的理由，否则不应该这么做&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;考虑&lt;/strong&gt;，根据实际情况而定&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同时会提到下面这些客体：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;库成员&lt;/strong&gt;，顶级变量、getter、setter、函数&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;类成员&lt;/strong&gt;，类变量、getter、setter、函数&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;成员&lt;/strong&gt;，库成员或类成员&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;变量&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;属性&lt;/strong&gt;，类中的成员变量、getter、setter，顶级变量、getter、setter&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;样式&#34;&gt;&lt;a href=&#34;#样式&#34; class=&#34;headerlink&#34; title=&#34;样式&#34;&gt;&lt;/a&gt;样式&lt;/h3&gt;&lt;h4 id=&#34;标识符&#34;&gt;&lt;a href=&#34;#标识符&#34; class=&#34;headerlink&#34; title=&#34;标识符&#34;&gt;&lt;/a&gt;标识符&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;类名用UpperCamelCase风格&lt;/li&gt;
&lt;li&gt;库和文件名用lowercase_with_underscores风格&lt;/li&gt;
&lt;li&gt;导入前缀用lowercase_with_underscores风格&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;package:javascript_utils/javascript_utils.dart&amp;#x27;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; js_utils;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;其他标识符使用lowerCamelCase风格&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用lowerCamelCase风格命名常量&lt;ul&gt;
&lt;li&gt;原因：CAPS_STYLE可读性差&amp;#x2F;可能会用于final变量&amp;#x2F;和枚举不搭&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;把超过2个字母的缩略词当做一般单词来做首字母大写&lt;ul&gt;
&lt;li&gt;原因：提高可读性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不要&lt;/strong&gt;在标识符前加前缀&lt;ul&gt;
&lt;li&gt;举例：&lt;code&gt;kTimes&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;顺序&#34;&gt;&lt;a href=&#34;#顺序&#34; class=&#34;headerlink&#34; title=&#34;顺序&#34;&gt;&lt;/a&gt;顺序&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;把”dart:”导入语句放在最前&lt;/li&gt;
&lt;li&gt;把”package:”放在相对导入前&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;把第三方”package:”导入放在其他语句前&lt;/li&gt;
&lt;li&gt;export语句放在最后&lt;/li&gt;
&lt;li&gt;按字母序排序&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;格式化&#34;&gt;&lt;a href=&#34;#格式化&#34; class=&#34;headerlink&#34; title=&#34;格式化&#34;&gt;&lt;/a&gt;格式化&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;使用dartfmt帮你美化&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;考虑&lt;/strong&gt;让你的代码更容易美化&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;每行超过80字符&lt;/li&gt;
&lt;li&gt;所有控制结构都使用大括号&lt;ul&gt;
&lt;li&gt;只有if语句写成1行时可以省略&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;文档&#34;&gt;&lt;a href=&#34;#文档&#34; class=&#34;headerlink&#34; title=&#34;文档&#34;&gt;&lt;/a&gt;文档&lt;/h3&gt;&lt;h4 id=&#34;注释&#34;&gt;&lt;a href=&#34;#注释&#34; class=&#34;headerlink&#34; title=&#34;注释&#34;&gt;&lt;/a&gt;注释&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;使用句子的形式表达注释&lt;/li&gt;
&lt;li&gt;用单行注释符表达注释&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;文档注释&#34;&gt;&lt;a href=&#34;#文档注释&#34; class=&#34;headerlink&#34; title=&#34;文档注释&#34;&gt;&lt;/a&gt;文档注释&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;用&lt;code&gt;///&lt;/code&gt;表达文档注释&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;为公开API书写注释&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;考虑&lt;/strong&gt;为私有API书写注释&lt;/li&gt;
&lt;li&gt;用一句话为文档注释开头&lt;/li&gt;
&lt;li&gt;类似git commit message，第一行后空出一行独立成段&lt;/li&gt;
&lt;li&gt;去掉能从上下文直接读出的冗余信息&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用第三人称动词开头表示函数、方法注释&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用名词短语开头表示变量、成员、getter、setter注释&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用名词短语开头表示库、类型注释&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;考虑&lt;/strong&gt;在注释中添加示例代码&lt;/li&gt;
&lt;li&gt;在注释中用&lt;code&gt;[]&lt;/code&gt;方括号引用作用域里的标识符&lt;/li&gt;
&lt;li&gt;使用简短平实的语言描述参数、返回值和异常&lt;/li&gt;
&lt;li&gt;在注解（annotation）前添加注释&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Markdown&#34;&gt;&lt;a href=&#34;#Markdown&#34; class=&#34;headerlink&#34; title=&#34;Markdown&#34;&gt;&lt;/a&gt;Markdown&lt;/h4&gt;&lt;p&gt;Dart允许在comment中使用Markdown格式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;滥用markdown&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;使用html格式化文本&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用反引号（```）格式化代码&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;行文&#34;&gt;&lt;a href=&#34;#行文&#34; class=&#34;headerlink&#34; title=&#34;行文&#34;&gt;&lt;/a&gt;行文&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;简洁清晰&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;使用缩写和首字母缩略词&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用“this”而不是“the”来引用实例成员&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;实践&#34;&gt;&lt;a href=&#34;#实践&#34; class=&#34;headerlink&#34; title=&#34;实践&#34;&gt;&lt;/a&gt;实践&lt;/h3&gt;&lt;p&gt;下面的规则是书写Dart代码时需要知道的指导原则，尤其是维护你类库的人。&lt;/p&gt;
&lt;h4 id=&#34;库&#34;&gt;&lt;a href=&#34;#库&#34; class=&#34;headerlink&#34; title=&#34;库&#34;&gt;&lt;/a&gt;库&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;出于历史原因，Dart允许通过&lt;code&gt;part of&lt;/code&gt;的方式使用库的一部分文件，使用时通过路径而不是变量名引用&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;library&lt;/span&gt; my_library;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// good case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;part&lt;/span&gt; of &lt;span class=&#34;string&#34;&gt;&amp;quot;../../my_library.dart&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// bad case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;part&lt;/span&gt; of my_library&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不要从库的&lt;code&gt;src&lt;/code&gt;文件夹下引用代码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用相对路径应用库，但是不要跨&lt;code&gt;src&lt;/code&gt;文件夹引用&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;字符串&#34;&gt;&lt;a href=&#34;#字符串&#34; class=&#34;headerlink&#34; title=&#34;字符串&#34;&gt;&lt;/a&gt;字符串&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;在长字符串场景下，使用邻接字符串而不是“+”链接&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// good case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;raiseAlarm(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;#x27;ERROR: Parts of the spaceship are on fire. Other &amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;#x27;parts are overrun by martians. Unclear which are which.&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用插值构造字符串&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;在插值中使用多余的大括号（对于简单的变量）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;集合&#34;&gt;&lt;a href=&#34;#集合&#34; class=&#34;headerlink&#34; title=&#34;集合&#34;&gt;&lt;/a&gt;集合&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;尽可能使用字面量形式定义集合，必要时提供泛型类型即可&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// good case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; points = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; userMap = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// bad case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; points = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;List&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; userMap = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;Map&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;不使用length属性判断集合是否为空，Dart提供了&lt;code&gt;isEmpty&lt;/code&gt;和&lt;code&gt;isNotEmpty&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;考虑&lt;/strong&gt;使用高阶函数来明确表达你的意图&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; aquaticNames = animals&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .where((animal) =&amp;gt; animal.isAquatic)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .map((animal) =&amp;gt; animal.name);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;在&lt;code&gt;Iterable.forEach()&lt;/code&gt;中使用函数声明，Dart里的&lt;code&gt;for-in&lt;/code&gt;循环可以很好完成该工作，当然函数本身已经定义好除外。&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// good case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; person &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; people) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;people.forEach(&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;iterable.toList&lt;/code&gt;替代&lt;code&gt;List.from&lt;/code&gt;，只在改变list类型时使用&lt;code&gt;List.from&lt;/code&gt;&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Creates a List&amp;lt;int&amp;gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; iterable = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Prints &amp;quot;List&amp;lt;int&amp;gt;&amp;quot;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(iterable.toList().runtimeType);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Prints &amp;quot;List&amp;lt;dynamic&amp;gt;&amp;quot;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;List&lt;/span&gt;.from(iterable).runtimeType);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Use it with a type&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; numbers = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2.3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;]; &lt;span class=&#34;comment&#34;&gt;// List&amp;lt;num&amp;gt;.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;numbers.removeAt(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;// Now it only contains integers.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; ints = &lt;span class=&#34;built_in&#34;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;&amp;gt;.from(numbers);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;使用高级的&lt;code&gt;whereType&lt;/code&gt;方法从collection中过滤出特定类型元素&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; objects = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; ints = objects.whereType&amp;lt;&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;有类似用法时，不使用&lt;code&gt;cast()&lt;/code&gt;方法&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; stuff = &amp;lt;&lt;span class=&#34;built_in&#34;&gt;dynamic&lt;/span&gt;&amp;gt;[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Good case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; ints = &lt;span class=&#34;built_in&#34;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;&amp;gt;.from(stuff);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Bad case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; ints = stuff.toList().cast&amp;lt;&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;使用&lt;code&gt;cast()&lt;/code&gt;方法，用该方法可能更慢且更有风险，通常情况下有下面一些备选方案&lt;ul&gt;
&lt;li&gt;创建有正确类型的list&lt;/li&gt;
&lt;li&gt;使用每个集合元素时进行casting操作&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Good case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; printEvens(&lt;span class=&#34;built_in&#34;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;Object&lt;/span&gt;&amp;gt; objects) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// We happen to know the list only contains ints.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; n &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; objects) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ((n &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;).isEven) &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Bad case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; printEvens(&lt;span class=&#34;built_in&#34;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;Object&lt;/span&gt;&amp;gt; objects) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// We happen to know the list only contains ints.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; n &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; objects.cast&amp;lt;&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;&amp;gt;()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (n.isEven) &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;真正想要强制类型转换时，使用附加类型的&lt;code&gt;List.from&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;函数&#34;&gt;&lt;a href=&#34;#函数&#34; class=&#34;headerlink&#34; title=&#34;函数&#34;&gt;&lt;/a&gt;函数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;使用函数声明形式命名有名函数（不要使用lambda表达式）&lt;/li&gt;
&lt;li&gt;当有有名函数可以完成任务时，不要创建lambda表达式&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Good case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;names.forEach(&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Bad case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;names.forEach((name) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(name);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;参数&#34;&gt;&lt;a href=&#34;#参数&#34; class=&#34;headerlink&#34; title=&#34;参数&#34;&gt;&lt;/a&gt;参数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;=&lt;/code&gt;分隔入参和它的默认值&lt;/li&gt;
&lt;li&gt;不要显式地使用&lt;code&gt;null&lt;/code&gt;作为默认值（直接不指定即可）&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; error([&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt; message]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  stderr.write(message ?? &lt;span class=&#34;string&#34;&gt;&amp;#x27;\n&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;变量&#34;&gt;&lt;a href=&#34;#变量&#34; class=&#34;headerlink&#34; title=&#34;变量&#34;&gt;&lt;/a&gt;变量&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;不要显式地使用null初始化变量（语言保证了行为可靠性，不需要再显式设置成null）&lt;/li&gt;
&lt;li&gt;不要存储computed value（即可以推算出的值） ，减少冗余信息，保证数据唯一可信源，使用getter和setter去动态推导出它们&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;考虑&lt;/strong&gt;忽略局部变量的类型，Dart有强大的静态分析工具帮你推断类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;成员&#34;&gt;&lt;a href=&#34;#成员&#34; class=&#34;headerlink&#34; title=&#34;成员&#34;&gt;&lt;/a&gt;成员&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;不要创建没必要的getter和setter&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用final限定只读属性&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;考虑&lt;/strong&gt;使用&lt;code&gt;=&amp;gt;&lt;/code&gt;实现只有单一返回语句的函数，对于多行语句建议还是老老实实使用花括号&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;get&lt;/span&gt; width =&amp;gt; right - left;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt; ready(&lt;span class=&#34;built_in&#34;&gt;num&lt;/span&gt; time) =&amp;gt; minTime == &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt; || minTime &amp;lt;= time;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;containsValue(&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt; value) =&amp;gt; getValues().contains(value);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;不要使用&lt;code&gt;this.&lt;/code&gt;访问成员，除非遇到变量冲突&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Good case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Box&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; value;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; clear() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    update(&lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; update(value) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.value = value;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Bad case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Box&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; value;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; clear() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.update(&lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; update(value) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.value = value;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;尽可能地在定义变量时初始化该值&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;构造函数&#34;&gt;&lt;a href=&#34;#构造函数&#34; class=&#34;headerlink&#34; title=&#34;构造函数&#34;&gt;&lt;/a&gt;构造函数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;尽可能使用更简洁的初始化形式&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Point&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;num&lt;/span&gt; x, y;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Point(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.x, &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;不要在初始化形式中定义类型&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;;&lt;/code&gt;代替&lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;表示空方法&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Point&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; x, y;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Point(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.x, &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;不要使用可选的&lt;code&gt;new&lt;/code&gt;来返回一个对象&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Widget build(BuildContext context) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; Row(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    children: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      RaisedButton(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        child: Text(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Increment&amp;#x27;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      ),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      Text(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Click!&amp;#x27;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;不要无谓地使用&lt;code&gt;const&lt;/code&gt;（基本上const可能出现在所有你能使用&lt;code&gt;new&lt;/code&gt;的地方），因为有些语境已经隐式包含了const语义&lt;ul&gt;
&lt;li&gt;字面量集合&lt;/li&gt;
&lt;li&gt;const构造函数调用&lt;/li&gt;
&lt;li&gt;metadata注解&lt;/li&gt;
&lt;li&gt;switch的每一个case&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;异常处理&#34;&gt;&lt;a href=&#34;#异常处理&#34; class=&#34;headerlink&#34; title=&#34;异常处理&#34;&gt;&lt;/a&gt;异常处理&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;不要在&lt;code&gt;on&lt;/code&gt;以外的语句中丢弃错误，因为在没有&lt;code&gt;on&lt;/code&gt;限定时，catch会捕获&lt;em&gt;所有&lt;/em&gt;异常&lt;/li&gt;
&lt;li&gt;要只在编程错误时抛出Error的异常&lt;/li&gt;
&lt;li&gt;不要显式地捕获Error及其子类&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;rethrow&lt;/code&gt;重新抛出异常&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;异步&#34;&gt;&lt;a href=&#34;#异步&#34; class=&#34;headerlink&#34; title=&#34;异步&#34;&gt;&lt;/a&gt;异步&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用&lt;code&gt;async&lt;/code&gt;和&lt;code&gt;await&lt;/code&gt;提升你的异步代码可读性&lt;/li&gt;
&lt;li&gt;只在必要的时候使用&lt;code&gt;async&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;代码块中使用了&lt;code&gt;await&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;希望返回一个Future&lt;/li&gt;
&lt;li&gt;希望更方便地处理异步中出现的Error&lt;/li&gt;
&lt;li&gt;异步事件发生具有先后顺序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;考虑&lt;/strong&gt;使用高阶函数处理stream&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;直接使用&lt;code&gt;Completer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;用&lt;code&gt;Future&amp;lt;T&amp;gt;&lt;/code&gt;而不是&lt;code&gt;T&lt;/code&gt;判断&lt;code&gt;FutureOr&amp;lt;T&amp;gt;&lt;/code&gt;的具体类型&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;API设计&#34;&gt;&lt;a href=&#34;#API设计&#34; class=&#34;headerlink&#34; title=&#34;API设计&#34;&gt;&lt;/a&gt;API设计&lt;/h3&gt;&lt;h4 id=&#34;命名&#34;&gt;&lt;a href=&#34;#命名&#34; class=&#34;headerlink&#34; title=&#34;命名&#34;&gt;&lt;/a&gt;命名&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;使用一致的术语&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;缩写，只使用广为人知的缩写&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;把描述中心词放在最后&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;考虑&lt;/strong&gt;尽量让代码看起来像普通的句子&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用名词短语命名非布尔类型的成员或变量&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用非命令式短语命名布尔类型成员或变量&lt;ul&gt;
&lt;li&gt;比如配合be动词的不同时态，&lt;code&gt;isEnabled&lt;/code&gt;, &lt;code&gt;hasShown&lt;/code&gt;等&lt;/li&gt;
&lt;li&gt;配合助动词，比如&lt;code&gt;hasChildren&lt;/code&gt;, &lt;code&gt;canSave&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有可能的情况下，&lt;strong&gt;考虑&lt;/strong&gt;省去上一种情况里的动词&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用正向含义的布尔类型变量&amp;#x2F;方法名&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用命令式动词命名带有副作用的函数和方法&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;考虑&lt;/strong&gt;使用名词短语或非命令式动词命名返回数据为主要功能的方法或函数&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;list.elementAt(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;string.codeUnitAt(&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;考虑&lt;/strong&gt;使用命令式动词表示你需要对方法所做工作有所关心&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;使用&lt;em&gt;get&lt;/em&gt;开头的命名，它通常能用getter代替&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用&lt;code&gt;to___()&lt;/code&gt;来命名类型转换&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用&lt;code&gt;as___()&lt;/code&gt;来命名类型快照&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;在命名中使用方法、函数的入参&lt;/li&gt;
&lt;li&gt;使用助记符命名类型参数&lt;ul&gt;
&lt;li&gt;&lt;code&gt;E&lt;/code&gt;代表集合元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;K&lt;/code&gt;和&lt;code&gt;V&lt;/code&gt;代表key和value&lt;/li&gt;
&lt;li&gt;&lt;code&gt;R&lt;/code&gt;代表return type&lt;/li&gt;
&lt;li&gt;&lt;code&gt;T&lt;/code&gt;, &lt;code&gt;S&lt;/code&gt;和&lt;code&gt;U&lt;/code&gt;命名单一通用且上下文表意清晰的泛型&lt;/li&gt;
&lt;li&gt;除上面情况外，可以使用完整词汇作为泛型类型名&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;库-1&#34;&gt;&lt;a href=&#34;#库-1&#34; class=&#34;headerlink&#34; title=&#34;库&#34;&gt;&lt;/a&gt;库&lt;/h4&gt;&lt;p&gt;下划线开头的成员表示成员是私有的，这个特性是内置在Dart语言中的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用私有声明，未用&lt;code&gt;_&lt;/code&gt;开头的库中的公开声明、顶级定义表示其他库可以访问这些成员，同时也会受到库实现契约的约束。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;考虑&lt;/strong&gt;在同一个库内定义多个类，这样便于在类之间共享私有变量&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;类&#34;&gt;&lt;a href=&#34;#类&#34; class=&#34;headerlink&#34; title=&#34;类&#34;&gt;&lt;/a&gt;类&lt;/h4&gt;&lt;p&gt;Dart是纯OOP的语言，它的所有对象都是类实例。当然不像Java，Dart也允许你定义顶级的变量、函数…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;定义一个函数就可以实现的只有一个实现方法的抽象类&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; Predicate&amp;lt;E&amp;gt; = &lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;Function&lt;/span&gt;(E element);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Predicate&lt;/span&gt;&amp;lt;&lt;span class=&#34;title&#34;&gt;E&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt; test(E element);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;定义只有静态成员的类，可以使用顶级变量、函数更方便地实现等价效果。当然，如果变量属于一个组，可以这么实现&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;不必要地定义子类&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;实现一个不作为接口的类&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;mixin不设计用作mixin的类&lt;/li&gt;
&lt;li&gt;在你的类支持拓展时，定义好文档&lt;/li&gt;
&lt;li&gt;在你的类作为接口存在时，定义好文档&lt;/li&gt;
&lt;li&gt;在你的类作为mixin存在时，定义好文档&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;构造函数-1&#34;&gt;&lt;a href=&#34;#构造函数-1&#34; class=&#34;headerlink&#34; title=&#34;构造函数&#34;&gt;&lt;/a&gt;构造函数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;考虑&lt;/strong&gt;在类支持的情况下，让构造函数成为const&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;成员-1&#34;&gt;&lt;a href=&#34;#成员-1&#34; class=&#34;headerlink&#34; title=&#34;成员&#34;&gt;&lt;/a&gt;成员&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;考虑&lt;/strong&gt;尽可能地把成员变量和顶级变量定义为final类型&lt;/li&gt;
&lt;li&gt;使用setter和getter定义computed value&lt;/li&gt;
&lt;li&gt;不要使用没有getter的setter&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;在返回bool，double，int，num的方法里返回null&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;在方法中返回this，只为了串联调用函数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;类型&#34;&gt;&lt;a href=&#34;#类型&#34; class=&#34;headerlink&#34; title=&#34;类型&#34;&gt;&lt;/a&gt;类型&lt;/h4&gt;&lt;p&gt;Dart中的类型可以帮助使用者理解你API中的静态类型设计，它分两种：类型注解和类型参数。前一种放在变量名前注解变量类型，后一种作为泛型参数传入。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt; isEmpty(&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt; parameter) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt; result = parameter.length == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;&amp;gt; ints = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在未指定类型时，Dart会从上下文自动推断或者使用缺省的&lt;code&gt;dynamic&lt;/code&gt;类型。&lt;/p&gt;
&lt;p&gt;简言之，Dart提供了强大的类型推导简化了你声明类型的负担，但同时不声明类型会降低API的可读性，下面一些guideline帮你在两点间找到一个平衡。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;对于类型表意不清晰的public属性和顶级变量使用类型注解&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Future&amp;lt;&lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt;&amp;gt; install(PackageId id, &lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt; destination) =&amp;gt; ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; screenWidth = &lt;span class=&#34;number&#34;&gt;640&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// Inferred as int.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;考虑&lt;/strong&gt;对于类型表意不清晰的private属性添加类型注解&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;为局部变量添加类型注解，如果你需要静态类型提供的便利，可以借助&lt;code&gt;is&lt;/code&gt;限制变量类型&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;在方法表达式上使用类型，考虑到方法表达式通常作为方法入参，类型可以自动推断，不需要类型注解&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;冗余的泛型和类型注解&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Good case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;Set&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt;&amp;gt; things = &lt;span class=&#34;built_in&#34;&gt;Set&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Bad case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;Set&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt;&amp;gt; things = &lt;span class=&#34;built_in&#34;&gt;Set&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;在不希望使用Dart推断的类型时，使用类型注解&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;使用显示的dynamic代替Dart推断失败回退的dynamic&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推荐&lt;/strong&gt;在Function类型注解中添加函数类型签名&lt;/li&gt;
&lt;li&gt;不要为setter指定返回值&lt;/li&gt;
&lt;li&gt;使用新式的typeof判断类型&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; Comparison&amp;lt;T&amp;gt; = &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;Function&lt;/span&gt;(T, T);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;Object&lt;/code&gt;代替&lt;code&gt;dynamic&lt;/code&gt;表示可以接受任何对象&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;Future&amp;lt;void&amp;gt;&lt;/code&gt;作为无返回值的异步函数返回类型&lt;/li&gt;
&lt;li&gt;不使用&lt;code&gt;FutureOr&amp;lt;T&amp;gt;&lt;/code&gt;作为返回值&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;参数-1&#34;&gt;&lt;a href=&#34;#参数-1&#34; class=&#34;headerlink&#34; title=&#34;参数&#34;&gt;&lt;/a&gt;参数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;位置参数作为可选布尔参数，这样可读性比较差&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Bad case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Task(&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Task(&lt;span class=&#34;keyword&#34;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ListBox(&lt;span class=&#34;keyword&#34;&gt;false&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Button(&lt;span class=&#34;keyword&#34;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Good case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;将用户想忽略的参数放在位置可选参数的前列&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;使用强制的无意义的参数&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Bad case&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;string.substring(start, &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;使用&lt;strong&gt;左闭右开&lt;/strong&gt;区间表示两个参数代表的范围&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;相同判断&#34;&gt;&lt;a href=&#34;#相同判断&#34; class=&#34;headerlink&#34; title=&#34;相同判断&#34;&gt;&lt;/a&gt;相同判断&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;覆写&lt;code&gt;==&lt;/code&gt;的同时覆写&lt;code&gt;hashCode&lt;/code&gt;，默认的哈希函数实现了恒等式哈希。&lt;strong&gt;任何两个相等的两个对象必须具有相同的哈希值&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;==&lt;/code&gt;需要遵循数学的相等规则&lt;ul&gt;
&lt;li&gt;自反，a &amp;#x3D;&amp;#x3D; a&lt;/li&gt;
&lt;li&gt;对称，a &amp;#x3D;&amp;#x3D; b &amp;#x3D;&amp;gt; b &amp;#x3D;&amp;#x3D; a&lt;/li&gt;
&lt;li&gt;传递，a &amp;#x3D;&amp;#x3D; b &amp;amp;&amp;amp; b &amp;#x3D;&amp;#x3D; c &amp;#x3D;&amp;gt; a &amp;#x3D;&amp;#x3D; c&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免&lt;/strong&gt;为可变对象自定义相等函数，&lt;code&gt;hashCode&lt;/code&gt;函数会增加你的工作量&lt;/li&gt;
&lt;li&gt;不要在自定义&lt;code&gt;==&lt;/code&gt;中判断null，Dart也已经替你做了这部分工作&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://shenlvmeng.github.com/blog/2019/06/16/dart-lang-intro/</guid>
            <title>Dart快速入门 语法篇</title>
            <link>http://shenlvmeng.github.com/blog/2019/06/16/dart-lang-intro/</link>
            <category>Dart</category>
            <pubDate>Sun, 16 Jun 2019 00:13:19 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;入门&#34;&gt;&lt;a href=&#34;#入门&#34; class=&#34;headerlink&#34; title=&#34;入门&#34;&gt;&lt;/a&gt;入门&lt;/h2&gt;&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 定义个方法。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;printNumber(&lt;span class=&#34;built_in&#34;&gt;num&lt;/span&gt; aNumber) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;The number is &lt;span class=&#34;subst&#34;&gt;$aNumber&lt;/span&gt;.&amp;#x27;&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;// 在控制台打印内容。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 这是程序执行的入口。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; number = &lt;span class=&#34;number&#34;&gt;42&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// 定义并初始化一个变量。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  printNumber(number); &lt;span class=&#34;comment&#34;&gt;// 调用一个方法。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;注释：&lt;code&gt;//&lt;/code&gt;或&lt;code&gt;/* ... */&lt;/code&gt;，同其他主流语言&lt;/li&gt;
&lt;li&gt;类型：num、String、int、bool等&lt;/li&gt;
&lt;li&gt;字面量：42，’Hello world!’&lt;/li&gt;
&lt;li&gt;函数：类似&lt;code&gt;print()&lt;/code&gt;的形式&lt;/li&gt;
&lt;li&gt;字符串插值&lt;/li&gt;
&lt;li&gt;入口方法：&lt;code&gt;main&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;基本理念&#34;&gt;&lt;a href=&#34;#基本理念&#34; class=&#34;headerlink&#34; title=&#34;基本理念&#34;&gt;&lt;/a&gt;基本理念&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;所有可以用变量引用的都是对象，每个对象都是一个类的实例&lt;/strong&gt;，例如数字、方法、null，&lt;strong&gt;所有对象都继承Object类&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Dart是&lt;strong&gt;强类型语言&lt;/strong&gt;。但是不强制使用类型标注，因为它可以通过推导得到变量类型。在你明确不希望有类型时，使用&lt;code&gt;dynamic&lt;/code&gt;关键字表示动态类型&lt;/li&gt;
&lt;li&gt;Dart支持泛型，比如&lt;code&gt;List&amp;lt;int&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Dart支持顶级方法&lt;code&gt;main()&lt;/code&gt;，支持类的静态方法、实例方法，也可以在函数内使用函数&lt;/li&gt;
&lt;li&gt;类似地，Dart支持全局变量、局部变量和在类中定义的成员变量&lt;/li&gt;
&lt;li&gt;Dart&lt;strong&gt;没有&lt;/strong&gt;public、protected、private的区分，如果标识符以&lt;code&gt;_&lt;/code&gt;开头，那么该标识符就是私有的&lt;/li&gt;
&lt;li&gt;Dart的变量名只能以&lt;strong&gt;下划线和字母&lt;/strong&gt;开头，后跟&lt;strong&gt;字符或数字&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Dart区分语句块和表达式，只有表达式有值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;关键字&#34;&gt;&lt;a href=&#34;#关键字&#34; class=&#34;headerlink&#34; title=&#34;关键字&#34;&gt;&lt;/a&gt;关键字&lt;/h2&gt;&lt;p&gt;分为三类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于只在特定上下文环境下生效的&lt;strong&gt;上下文关键字&lt;/strong&gt;，可以用作标识符&lt;/li&gt;
&lt;li&gt;对于&lt;strong&gt;内置标识符&lt;/strong&gt;，为了便于移植JavaScript代码到Dart，这些关键字不可用作类或类型名或import的前缀&lt;/li&gt;
&lt;li&gt;其他关键字为保留字&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;变量&#34;&gt;&lt;a href=&#34;#变量&#34; class=&#34;headerlink&#34; title=&#34;变量&#34;&gt;&lt;/a&gt;变量&lt;/h2&gt;&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; name = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Dart&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt; name = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Dart&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Dynamic name = &lt;span class=&#34;string&#34;&gt;&amp;#x27;Dart&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;根据&lt;em&gt;基本理念&lt;/em&gt;，变量都是存储值的引用。使用&lt;code&gt;var&lt;/code&gt;修饰时，变量类型会自动推导；也可以显示声明变量类型，或者使用&lt;code&gt;dynamic&lt;/code&gt;关键字表示变量可能有多种类型。&lt;/p&gt;
&lt;p&gt;任何没有初始化的变量默认值都为null。&lt;/p&gt;
&lt;p&gt;常量使用&lt;code&gt;final&lt;/code&gt;或&lt;code&gt;const&lt;/code&gt;（实例变量只能用&lt;code&gt;final&lt;/code&gt;）。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; name = &lt;span class=&#34;string&#34;&gt;&amp;#x27;foo&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt; title = &lt;span class=&#34;string&#34;&gt;&amp;#x27;FE&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; foo = &lt;span class=&#34;number&#34;&gt;10000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;double&lt;/span&gt; percent = &lt;span class=&#34;number&#34;&gt;0.314&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; bar = &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt;[];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; baz = []; &lt;span class=&#34;comment&#34;&gt;// 和上面一个效果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;final变量只能赋值一次，const变量是编译时常量。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const&lt;/code&gt;除了用来定义不变量，还可以用来创建不变的值，以及定义创建常量的构造函数。在这么用时可以省略构造过程，像上面的baz变量一样&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;内置类型&#34;&gt;&lt;a href=&#34;#内置类型&#34; class=&#34;headerlink&#34; title=&#34;内置类型&#34;&gt;&lt;/a&gt;内置类型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;numbers&lt;/li&gt;
&lt;li&gt;strings&lt;/li&gt;
&lt;li&gt;booleans&lt;/li&gt;
&lt;li&gt;lists (也被称之为 arrays)&lt;/li&gt;
&lt;li&gt;maps&lt;/li&gt;
&lt;li&gt;runes (用于在字符串中表示 Unicode 字符)&lt;/li&gt;
&lt;li&gt;symbols&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;再次重申，Dart中变量都是一个对象，所以你都可以使用构造函数来初始化。&lt;/p&gt;
&lt;h3 id=&#34;Number&#34;&gt;&lt;a href=&#34;#Number&#34; class=&#34;headerlink&#34; title=&#34;Number&#34;&gt;&lt;/a&gt;Number&lt;/h3&gt;&lt;p&gt;有&lt;code&gt;int&lt;/code&gt;和&lt;code&gt;double&lt;/code&gt;两种类型。提供了原生操作符和&lt;code&gt;abs()&lt;/code&gt;等常用函数，整数和浮点数的字面量初始化类似js。&lt;/p&gt;
&lt;p&gt;字符串和数字互转：&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// String -&amp;gt; int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; one = &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;.parse(&lt;span class=&#34;string&#34;&gt;&amp;#x27;1&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt;(one == &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// String -&amp;gt; double&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; onePointOne = &lt;span class=&#34;built_in&#34;&gt;double&lt;/span&gt;.parse(&lt;span class=&#34;string&#34;&gt;&amp;#x27;1.1&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt;(onePointOne == &lt;span class=&#34;number&#34;&gt;1.1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// int -&amp;gt; String&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt; oneAsString = &lt;span class=&#34;number&#34;&gt;1.&lt;/span&gt;toString();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt;(oneAsString == &lt;span class=&#34;string&#34;&gt;&amp;#x27;1&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// double -&amp;gt; String&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt; piAsString = &lt;span class=&#34;number&#34;&gt;3.14159&lt;/span&gt;.toStringAsFixed(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt;(piAsString == &lt;span class=&#34;string&#34;&gt;&amp;#x27;3.14&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;String&#34;&gt;&lt;a href=&#34;#String&#34; class=&#34;headerlink&#34; title=&#34;String&#34;&gt;&lt;/a&gt;String&lt;/h3&gt;&lt;p&gt;Dart的字符串是UTF-16编码的字符序列。可以使用单引号或双引号创建。字符串中用&lt;code&gt;$&amp;#123;expr&amp;#125;&lt;/code&gt;的语法使用表达式，**如果表达式是一个标识符，可以省去&lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;**，对&lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;内的表达式，Dart使用&lt;code&gt;toString()&lt;/code&gt;方法转成字符串使用。&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/code&gt;或&lt;code&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/code&gt;表示多行字符串。使用&lt;code&gt;r&amp;#39;&amp;#39;&lt;/code&gt;表示纯字符串。&lt;/p&gt;
&lt;h3 id=&#34;Boolean&#34;&gt;&lt;a href=&#34;#Boolean&#34; class=&#34;headerlink&#34; title=&#34;Boolean&#34;&gt;&lt;/a&gt;Boolean&lt;/h3&gt;&lt;p&gt;布尔类型有两个字面量值，&lt;code&gt;true&lt;/code&gt;和&lt;code&gt;false&lt;/code&gt;。和JavaScript不同的是，在&lt;code&gt;if&lt;/code&gt;语句等使用bool类型的地方，&lt;strong&gt;只有&lt;code&gt;true&lt;/code&gt;被认为是true，其余所有值都是false&lt;/strong&gt;。这也是为了避免JavaScript中判断true、false时坑爹的地方。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;JS prints this line.&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Dart in production mode prints this line.&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// However, in checked mode, if (1) throws an&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// exception because 1 is not boolean.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;List&#34;&gt;&lt;a href=&#34;#List&#34; class=&#34;headerlink&#34; title=&#34;List&#34;&gt;&lt;/a&gt;List&lt;/h3&gt;&lt;p&gt;List的字面量写法和JavaScript一样。Dart会做类型推导，在元素类型不一致时报错。你可以使用const语句定义一个不变的List对象。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; list = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; list = &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;2.3后，Dart支持&lt;code&gt;...&lt;/code&gt;解构操作符，以及对空列表兼容的&lt;code&gt;...?&lt;/code&gt;。同时支持collection if和collection for语法。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; nav = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;#x27;Home&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;#x27;Furniture&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;#x27;Plants&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (promoActive) &lt;span class=&#34;string&#34;&gt;&amp;#x27;Outlet&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; listOfInts = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; listOfStrings = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;#x27;#0&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; listOfInts) &lt;span class=&#34;string&#34;&gt;&amp;#x27;#&lt;span class=&#34;subst&#34;&gt;$i&lt;/span&gt;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Set&#34;&gt;&lt;a href=&#34;#Set&#34; class=&#34;headerlink&#34; title=&#34;Set&#34;&gt;&lt;/a&gt;Set&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;2.2版本后支持&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一组元素唯一的无序列表。字面量写法类似数学中集合的定义方法。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; halogens = &amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;#x27;fluorine&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;chlorine&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;bromine&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;iodine&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;astatine&amp;#x27;&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;也可以使用构造函数的方式创建。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; elements = &amp;lt;&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt;&amp;gt;&amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;elements.add(&lt;span class=&#34;string&#34;&gt;&amp;#x27;fluorine&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;elements.addAll(halogens);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;类似List，2.3之后有&lt;code&gt;...&lt;/code&gt;和&lt;code&gt;...?&lt;/code&gt;的语法支持。&lt;/p&gt;
&lt;h3 id=&#34;Map&#34;&gt;&lt;a href=&#34;#Map&#34; class=&#34;headerlink&#34; title=&#34;Map&#34;&gt;&lt;/a&gt;Map&lt;/h3&gt;&lt;p&gt;表达键值对数据，每个键只出现一次，且&lt;strong&gt;可以是任意类型&lt;/strong&gt;。类似Set，可以使用字面量和构造函数两种方式构造。使用字面量时，Dart会做类型推导。&lt;/p&gt;
&lt;p&gt;Map的设置和JavaScript类似，另外类似List，2.3之后有&lt;code&gt;...&lt;/code&gt;和&lt;code&gt;...?&lt;/code&gt;的语法支持。&lt;/p&gt;
&lt;h3 id=&#34;Rune&#34;&gt;&lt;a href=&#34;#Rune&#34; class=&#34;headerlink&#34; title=&#34;Rune&#34;&gt;&lt;/a&gt;Rune&lt;/h3&gt;&lt;p&gt;Dart用Rune类型表示UTF-32的字符，如emoji等。&lt;/p&gt;
&lt;h3 id=&#34;Symbol&#34;&gt;&lt;a href=&#34;#Symbol&#34; class=&#34;headerlink&#34; title=&#34;Symbol&#34;&gt;&lt;/a&gt;Symbol&lt;/h3&gt;&lt;p&gt;用来代表Dart中声明的操作符或标识符，可以在标识符前添加&lt;code&gt;#&lt;/code&gt;获取标识符的Symbol对象。&lt;/p&gt;
&lt;h2 id=&#34;方法&#34;&gt;&lt;a href=&#34;#方法&#34; class=&#34;headerlink&#34; title=&#34;方法&#34;&gt;&lt;/a&gt;方法&lt;/h2&gt;&lt;p&gt;类似JavaScript，Dart中的Function也是对象并具有Function类型。推荐使用显式类型声明方法。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt; isNoble(&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; atomicNumber) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; _nobleGases[atomicNumber] != &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Dart支持箭头函数。&lt;/p&gt;
&lt;h3 id=&#34;可选参数&#34;&gt;&lt;a href=&#34;#可选参数&#34; class=&#34;headerlink&#34; title=&#34;可选参数&#34;&gt;&lt;/a&gt;可选参数&lt;/h3&gt;&lt;p&gt;可选参数分两种：命名参数、位置参数。&lt;/p&gt;
&lt;p&gt;命名参数使用&lt;code&gt;param: value&lt;/code&gt;指定，在调用时使用&lt;code&gt;&amp;#123;param1, param2&amp;#125;&lt;/code&gt;的形式传递参数。支持在参数前添加&lt;code&gt;@required&lt;/code&gt;表示参数必选。&lt;/p&gt;
&lt;p&gt;位置参数使用&lt;code&gt;[]&lt;/code&gt;包裹方法参数，使用时不传参数即可。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;enableFlags(bold: &lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;, hidden: &lt;span class=&#34;keyword&#34;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;enableFlags(&amp;#123;&lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt; bold, &lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt; hidden&amp;#125;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt; say(&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt; from, &lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt; msg, [&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt; device]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt;(say(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Bob&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;Howdy&amp;#x27;&lt;/span&gt;) == &lt;span class=&#34;string&#34;&gt;&amp;#x27;Bob says Howdy&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;定义方法时，可以使用&lt;code&gt;=&lt;/code&gt;定义可选参数的默认值。否则默认值为null。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt; say(&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt; from, &lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt; msg,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt; device = &lt;span class=&#34;string&#34;&gt;&amp;#x27;carrier pigeon&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt; mood]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; result = &lt;span class=&#34;string&#34;&gt;&amp;#x27;&lt;span class=&#34;subst&#34;&gt;$from&lt;/span&gt; says &lt;span class=&#34;subst&#34;&gt;$msg&lt;/span&gt;&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (device != &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    result = &lt;span class=&#34;string&#34;&gt;&amp;#x27;&lt;span class=&#34;subst&#34;&gt;$result&lt;/span&gt; with a &lt;span class=&#34;subst&#34;&gt;$device&lt;/span&gt;&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (mood != &lt;span class=&#34;keyword&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    result = &lt;span class=&#34;string&#34;&gt;&amp;#x27;&lt;span class=&#34;subst&#34;&gt;$result&lt;/span&gt; (in a &lt;span class=&#34;subst&#34;&gt;$mood&lt;/span&gt; mood)&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt;(say(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Bob&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;Howdy&amp;#x27;&lt;/span&gt;) ==&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;#x27;Bob says Howdy with a carrier pigeon&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;main函数&#34;&gt;&lt;a href=&#34;#main函数&#34; class=&#34;headerlink&#34; title=&#34;main函数&#34;&gt;&lt;/a&gt;main函数&lt;/h3&gt;&lt;p&gt;每个应用都需要有顶级的&lt;code&gt;main()&lt;/code&gt;函数作为入口，返回值void类型，并且有可选的&lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt;参数（用于解析命令行输入的参数数据）。如&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;querySelector&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;#sample_text_id&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ..text = &lt;span class=&#34;string&#34;&gt;&amp;quot;Click me!&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ..onClick.listen(reverseText);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;上面的&lt;code&gt;..&lt;/code&gt;语法为级联调用，表示在一个对象上执行多个操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;第一公民&#34;&gt;&lt;a href=&#34;#第一公民&#34; class=&#34;headerlink&#34; title=&#34;第一公民&#34;&gt;&lt;/a&gt;第一公民&lt;/h3&gt;&lt;p&gt;类似JavaScript，Dart中Function可以作为参数、返回值、变量、对象使用。同样也有匿名函数可以使用，区别是箭头后是语句块时，不使用箭头，只在之后是表达式时使用箭头。&lt;/p&gt;
&lt;h3 id=&#34;作用域与闭包&#34;&gt;&lt;a href=&#34;#作用域与闭包&#34; class=&#34;headerlink&#34; title=&#34;作用域与闭包&#34;&gt;&lt;/a&gt;作用域与闭包&lt;/h3&gt;&lt;p&gt;Dart是静态作用域，即变量的作用域在写代码时就确定了，作用域层级即大括号的层级。&lt;/p&gt;
&lt;p&gt;类似JavaScript，Dart的闭包意味着方法可以封闭其作用域内的变量。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/// &lt;span class=&#34;language-markdown&#34;&gt;Returns a function that adds [addBy] to the&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/// &lt;span class=&#34;language-markdown&#34;&gt;function&amp;#x27;s argument.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;Function&lt;/span&gt; makeAdder(&lt;span class=&#34;built_in&#34;&gt;num&lt;/span&gt; addBy) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;num&lt;/span&gt; i) =&amp;gt; addBy + i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// Create a function that adds 2.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; add2 = makeAdder(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// Create a function that adds 4.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; add4 = makeAdder(&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt;(add2(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;) == &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt;(add4(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;) == &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;返回值&#34;&gt;&lt;a href=&#34;#返回值&#34; class=&#34;headerlink&#34; title=&#34;返回值&#34;&gt;&lt;/a&gt;返回值&lt;/h3&gt;&lt;p&gt;所有函数&lt;strong&gt;必须返回一个值&lt;/strong&gt;，否则默认&lt;code&gt;return null&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;操作符&#34;&gt;&lt;a href=&#34;#操作符&#34; class=&#34;headerlink&#34; title=&#34;操作符&#34;&gt;&lt;/a&gt;操作符&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;~/&lt;/code&gt;返回取整截断的商&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;==&lt;/code&gt;判断相等性&lt;ul&gt;
&lt;li&gt;会调用左侧对象的&lt;code&gt;==&lt;/code&gt;方法，和后面的对象对比&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;类型转换：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;as&lt;/code&gt;，类型转换，类似typescript中的as&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is&lt;/code&gt; 判断对象是否是指定类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is!&lt;/code&gt; 判断对象是否不是指定类型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;??=&lt;/code&gt;在value不是null时赋值给变量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;expr1 ?? expr2&lt;/code&gt;表示如果expr1是非null则返回其值，否则执行expr2并返回&lt;/li&gt;
&lt;li&gt;&lt;code&gt;..&lt;/code&gt; 级联操作符，表示在一个对象上连续调用多个函数以及访问成员变量，可以嵌套&lt;/li&gt;
&lt;li&gt;&lt;code&gt;?.&lt;/code&gt;和&lt;code&gt;.&lt;/code&gt;类似，但是在左侧操作对象为null时返回null&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; addressBook = (&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; AddressBookBuilder()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      ..name = &lt;span class=&#34;string&#34;&gt;&amp;#x27;jenny&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      ..email = &lt;span class=&#34;string&#34;&gt;&amp;#x27;jenny@example.com&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      ..phone = (&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; PhoneNumberBuilder()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ..number = &lt;span class=&#34;string&#34;&gt;&amp;#x27;415-555-0100&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ..label = &lt;span class=&#34;string&#34;&gt;&amp;#x27;home&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          .build())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .build();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;流程控制&#34;&gt;&lt;a href=&#34;#流程控制&#34; class=&#34;headerlink&#34; title=&#34;流程控制&#34;&gt;&lt;/a&gt;流程控制&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;for循环中，Dart会自动捕获当时的index索引值，避免JavaScript中问题。对interable的对象可以使用&lt;code&gt;forEach()&lt;/code&gt;方法遍历，对List、Set还支持&lt;code&gt;for-in&lt;/code&gt;形式的遍历&lt;/li&gt;
&lt;li&gt;&lt;code&gt;switch&lt;/code&gt;中的每个case（除了空case）都必须有&lt;code&gt;break&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;assert&lt;/code&gt;在检查模式下会被跳过&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;异常&#34;&gt;&lt;a href=&#34;#异常&#34; class=&#34;headerlink&#34; title=&#34;异常&#34;&gt;&lt;/a&gt;异常&lt;/h2&gt;&lt;p&gt;和JavaScript中的异常类似。&lt;/p&gt;
&lt;p&gt;不一样的是，可以使用&lt;code&gt;on&lt;/code&gt;或&lt;code&gt;catch&lt;/code&gt;捕获异常，可以通过&lt;code&gt;rethrow&lt;/code&gt;在其中重新抛出异常。&lt;/p&gt;
&lt;h2 id=&#34;类&#34;&gt;&lt;a href=&#34;#类&#34; class=&#34;headerlink&#34; title=&#34;类&#34;&gt;&lt;/a&gt;类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;构造方式类似ES6中引入JavaScript Class。&lt;/li&gt;
&lt;li&gt;用成员方式声明的类变量在定义时初始化，也就是在构造函数前&lt;/li&gt;
&lt;li&gt;可以使用Object的runtimeType属性来判断实例的类型&lt;/li&gt;
&lt;li&gt;使用const关键字结合构造函数可以构造出不可变的对象实例&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;构造函数&#34;&gt;&lt;a href=&#34;#构造函数&#34; class=&#34;headerlink&#34; title=&#34;构造函数&#34;&gt;&lt;/a&gt;构造函数&lt;/h3&gt;&lt;p&gt;使用和类名同名的方法作为构造函数（或者使用&lt;em&gt;命名构造函数&lt;/em&gt;）。因为把构造函数参数赋值给实例变量的场景太常见了，Dart提供了下面的语法糖。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Point&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;num&lt;/span&gt; x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;num&lt;/span&gt; y;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// Syntactic sugar for setting x and y&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// before the constructor body runs.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Point(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.x, &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;可以使用命名构造函数实现多个构造函数。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Point&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;num&lt;/span&gt; x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;num&lt;/span&gt; y;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Point(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.x, &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// Named constructor&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Point.fromJson(&lt;span class=&#34;built_in&#34;&gt;Map&lt;/span&gt; json) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x = json[&lt;span class=&#34;string&#34;&gt;&amp;#x27;x&amp;#x27;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    y = json[&lt;span class=&#34;string&#34;&gt;&amp;#x27;y&amp;#x27;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;子类不会从父类继承构造函数&lt;/strong&gt;，在未定义构造函数时，会有一个默认构造函数，这个函数没有参数，且会调起父类的没有参数的构造函数。&lt;/p&gt;
&lt;p&gt;在有初始化参数列表（initializer list）的情况下，初始化参数列表在父类构造函数前执行。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;初始化参数列表&lt;/li&gt;
&lt;li&gt;父类无参构造函数&lt;/li&gt;
&lt;li&gt;子类无参构造函数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;父类没有无参构造函数时，需要手动调用父类的其他构造函数。&lt;/p&gt;
&lt;h4 id=&#34;初始化列表&#34;&gt;&lt;a href=&#34;#初始化列表&#34; class=&#34;headerlink&#34; title=&#34;初始化列表&#34;&gt;&lt;/a&gt;初始化列表&lt;/h4&gt;&lt;p&gt;在执行父类构造函数前，可以初始化实例参数。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Point&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;num&lt;/span&gt; x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;num&lt;/span&gt; y;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Point(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.x, &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// Initializer list sets instance variables before&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// the constructor body runs.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Point.fromJson(&lt;span class=&#34;built_in&#34;&gt;Map&lt;/span&gt; jsonMap)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      : x = jsonMap[&lt;span class=&#34;string&#34;&gt;&amp;#x27;x&amp;#x27;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        y = jsonMap[&lt;span class=&#34;string&#34;&gt;&amp;#x27;y&amp;#x27;&lt;/span&gt;] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;In Point.fromJson(): (&lt;span class=&#34;subst&#34;&gt;$x&lt;/span&gt;, &lt;span class=&#34;subst&#34;&gt;$y&lt;/span&gt;)&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在冒号右边用逗号隔开初始化表达式。注意：等号右边无法访问&lt;code&gt;this&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;重定向构造函数&#34;&gt;&lt;a href=&#34;#重定向构造函数&#34; class=&#34;headerlink&#34; title=&#34;重定向构造函数&#34;&gt;&lt;/a&gt;重定向构造函数&lt;/h4&gt;&lt;p&gt;重定向构造函数没有代码，&lt;strong&gt;在构造函数声明后&lt;/strong&gt;，用冒号调用其他构造函数&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Point&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;num&lt;/span&gt; x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;num&lt;/span&gt; y;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// The main constructor for this class.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Point(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.x, &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// Delegates to the main constructor.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Point.alongXAxis(&lt;span class=&#34;built_in&#34;&gt;num&lt;/span&gt; x) : &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;(x, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;常量构造函数&#34;&gt;&lt;a href=&#34;#常量构造函数&#34; class=&#34;headerlink&#34; title=&#34;常量构造函数&#34;&gt;&lt;/a&gt;常量构造函数&lt;/h4&gt;&lt;p&gt;如果类支持提供状态不变的对象，需要定义一个&lt;code&gt;const&lt;/code&gt;构造函数，且所有类变量都要是&lt;code&gt;final&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ImmutablePoint&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;num&lt;/span&gt; x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;num&lt;/span&gt; y;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; ImmutablePoint(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.x, &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; ImmutablePoint origin =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; ImmutablePoint(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;工厂构造函数&#34;&gt;&lt;a href=&#34;#工厂构造函数&#34; class=&#34;headerlink&#34; title=&#34;工厂构造函数&#34;&gt;&lt;/a&gt;工厂构造函数&lt;/h4&gt;&lt;p&gt;当你的构造函数不需要返回新对象，而从其他地方获取时（如缓存），使用工厂构造函数。**工厂构造函数内无法访问&lt;code&gt;this&lt;/code&gt;**。调用时方式和普通构造函数等同。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Logger&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt; name;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt; mute = &lt;span class=&#34;keyword&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// _cache is library-private, thanks to the _ in front&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// of its name.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;Map&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt;, Logger&amp;gt; _cache =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;lt;&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt;, Logger&amp;gt;&amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;factory&lt;/span&gt; Logger(&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt; name) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (_cache.containsKey(name)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; _cache[name];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; logger = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Logger._internal(name);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      _cache[name] = logger;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; logger;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Logger._internal(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; logger = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Logger(&lt;span class=&#34;string&#34;&gt;&amp;#x27;UI&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;方法-1&#34;&gt;&lt;a href=&#34;#方法-1&#34; class=&#34;headerlink&#34; title=&#34;方法&#34;&gt;&lt;/a&gt;方法&lt;/h3&gt;&lt;p&gt;类方法可以访问&lt;code&gt;this&lt;/code&gt;，另外对于类对象的每个属性都有隐含的getter和setter（final除外）。也可以显式使用&lt;code&gt;get&lt;/code&gt;和&lt;code&gt;set&lt;/code&gt;定义getter和setter的行为。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Rectangle&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;num&lt;/span&gt; left;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;num&lt;/span&gt; top;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;num&lt;/span&gt; width;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;num&lt;/span&gt; height;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Rectangle(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.left, &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.top, &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.width, &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.height);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// Define two calculated properties: right and bottom.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;get&lt;/span&gt; right             =&amp;gt; left + width;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;set&lt;/span&gt; right(&lt;span class=&#34;built_in&#34;&gt;num&lt;/span&gt; value)  =&amp;gt; left = value - width;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;num&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;get&lt;/span&gt; bottom            =&amp;gt; top + height;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;set&lt;/span&gt; bottom(&lt;span class=&#34;built_in&#34;&gt;num&lt;/span&gt; value) =&amp;gt; top = value - height;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;Dart使用&lt;code&gt;extends&lt;/code&gt;继承，用&lt;code&gt;super&lt;/code&gt;指代父类，用&lt;code&gt;@overide&lt;/code&gt;注解重载操作。&lt;/li&gt;
&lt;li&gt;Dart中有抽象类&amp;#x2F;抽象方法，设计和使用类似Java的抽象类&amp;#x2F;抽象方法。如果你希望抽象类可实例化，可以定义一个工厂工造函数。&lt;/li&gt;
&lt;li&gt;每个类都隐式的定义了一个包含所有实例成员的接口，通过使用&lt;code&gt;implement&lt;/code&gt;实现若干其他类的API（不包括构造函数）&lt;/li&gt;
&lt;li&gt;可以重载一些操作符，如&lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;[]&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;等，实现在特定类上的特定表现&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Vector&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; y;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; Vector(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.x, &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;/// &lt;span class=&#34;language-markdown&#34;&gt;Overrides + (a + b).&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Vector &lt;span class=&#34;keyword&#34;&gt;operator&lt;/span&gt; +(Vector v) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Vector(x + v.x, y + v.y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;/// &lt;span class=&#34;language-markdown&#34;&gt;Overrides - (a - b).&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Vector &lt;span class=&#34;keyword&#34;&gt;operator&lt;/span&gt; -(Vector v) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Vector(x - v.x, y - v.y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;有意思的是，Dart提供&lt;code&gt;noSuchMethod()&lt;/code&gt;方法，在访问不存在的类实例或方法时被调用。如果没有填写，默认使用Object的同名方法。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;@proxy&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class A &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  void noSuchMethod(Invocation inv) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     print(&amp;#x27;You tried to use a non-existent member: &amp;#x27; +&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#x27;$&amp;#123;inv.memberName&amp;#125;&amp;#x27;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;枚举&#34;&gt;&lt;a href=&#34;#枚举&#34; class=&#34;headerlink&#34; title=&#34;枚举&#34;&gt;&lt;/a&gt;枚举&lt;/h3&gt;&lt;p&gt;枚举是特殊的类，使用&lt;code&gt;enum&lt;/code&gt;关键字定义。每个枚举值都有index属性的&lt;code&gt;getter&lt;/code&gt;函数，枚举的&lt;code&gt;values&lt;/code&gt;常量可以返回所有枚举值。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;enum&lt;/span&gt; Color &amp;#123; red, green, blue &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt;(Color.red.index == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;List&lt;/span&gt;&amp;lt;Color&amp;gt; colors = Color.values;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt;(colors[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;] == Color.blue);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;mixin&#34;&gt;&lt;a href=&#34;#mixin&#34; class=&#34;headerlink&#34; title=&#34;mixin&#34;&gt;&lt;/a&gt;mixin&lt;/h3&gt;&lt;p&gt;Dart中提供了&lt;strong&gt;多类继承&lt;/strong&gt;中重用类代码的mixin，用&lt;code&gt;with&lt;/code&gt;结合mixin类实现，这种类没有构造函数。除非你想像正常类一样使用mixin，否则使用&lt;code&gt;mixin&lt;/code&gt;关键字。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;mixin&lt;/span&gt; Musical &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt; canPlayPiano = &lt;span class=&#34;keyword&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt; canCompose = &lt;span class=&#34;keyword&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;bool&lt;/span&gt; canConduct = &lt;span class=&#34;keyword&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; entertainMe() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (canPlayPiano) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Playing piano&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (canConduct) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Waving hands&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Humming to self&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当限制mixin只在特定类中使用时，结合&lt;code&gt;on&lt;/code&gt;让mixin也能调用父类方法。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;mixin&lt;/span&gt; MusicalPerformer &lt;span class=&#34;keyword&#34;&gt;on&lt;/span&gt; Musician &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// ···&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;类变量、函数&#34;&gt;&lt;a href=&#34;#类变量、函数&#34; class=&#34;headerlink&#34; title=&#34;类变量、函数&#34;&gt;&lt;/a&gt;类变量、函数&lt;/h3&gt;&lt;p&gt;使用&lt;code&gt;static&lt;/code&gt;前缀修饰，表示类级别的变量、函数。类变量只在第一次使用时初始化。静态方法无法访问this。&lt;/p&gt;
&lt;h2 id=&#34;泛型&#34;&gt;&lt;a href=&#34;#泛型&#34; class=&#34;headerlink&#34; title=&#34;泛型&#34;&gt;&lt;/a&gt;泛型&lt;/h2&gt;&lt;p&gt;使用泛型的两个动机：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有助于IDE、环境、同事帮你定位问题和代码自动生成&lt;/li&gt;
&lt;li&gt;减少重复代码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;List和Map的泛型定义类似C++风格。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; names = &amp;lt;&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt;&amp;gt;[&lt;span class=&#34;string&#34;&gt;&amp;#x27;Seth&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;Kathy&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;Lars&amp;#x27;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; pages = &amp;lt;&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt;&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;#x27;index.html&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;Homepage&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;#x27;robots.txt&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;Hints for web robots&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;#x27;humans.txt&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;We are people, not machines&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; names = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; views = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;Map&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;, View&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(names &lt;span class=&#34;keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt;&amp;gt;); &lt;span class=&#34;comment&#34;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在泛型中使用&lt;code&gt;extends&lt;/code&gt;可以限制泛型的具体类型。在1.21之后，Dart支持泛型函数。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;T first&amp;lt;T&amp;gt;(&lt;span class=&#34;built_in&#34;&gt;List&lt;/span&gt;&amp;lt;T&amp;gt; ts) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// ...Do some initial work or error checking, then...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  T tmp ?= ts[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// ...Do some additional checking or processing...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; tmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;包管理&#34;&gt;&lt;a href=&#34;#包管理&#34; class=&#34;headerlink&#34; title=&#34;包管理&#34;&gt;&lt;/a&gt;包管理&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;import&lt;/code&gt;和&lt;code&gt;library&lt;/code&gt;引入和导出模块。&lt;code&gt;_&lt;/code&gt;开头的标识符只在库内部可见。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;dart:html&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;dart:io&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;package:mylib/mylib.dart&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;package:utils/utils.dart&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;package:lib2/lib2.dart&amp;#x27;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; lib2;  &lt;span class=&#34;comment&#34;&gt;// 指定库前缀，避免重名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;package:lib1/lib1.dart&amp;#x27;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;show&lt;/span&gt; foo; &lt;span class=&#34;comment&#34;&gt;// 部分导入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;dart:&lt;/code&gt;开头代表内置库，&lt;code&gt;package:&lt;/code&gt;开头代表外部库。外部库使用&lt;code&gt;pub&lt;/code&gt;包管理器管理。&lt;/p&gt;
&lt;h3 id=&#34;懒加载库&#34;&gt;&lt;a href=&#34;#懒加载库&#34; class=&#34;headerlink&#34; title=&#34;懒加载库&#34;&gt;&lt;/a&gt;懒加载库&lt;/h3&gt;&lt;p&gt;懒加载即在使用时再加载库，如优化app启动时间，加载很可能用不到的功能。&lt;/p&gt;
&lt;p&gt;加载时使用&lt;code&gt;deferred as&lt;/code&gt;导入，使用&lt;code&gt;loadLibrary()&lt;/code&gt;方法加载。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;package:deferred/hello.dart&amp;#x27;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;deferred&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; hello;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;greet() &lt;span class=&#34;keyword&#34;&gt;async&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;await&lt;/span&gt; hello.loadLibrary();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  hello.printGreeting();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;异步支持&#34;&gt;&lt;a href=&#34;#异步支持&#34; class=&#34;headerlink&#34; title=&#34;异步支持&#34;&gt;&lt;/a&gt;异步支持&lt;/h2&gt;&lt;p&gt;Dart中返回&lt;code&gt;Future&lt;/code&gt;和&lt;code&gt;Stream&lt;/code&gt;的方法都是异步的，意味着设置好耗时操作（I&amp;#x2F;O）后就返回。类似ES7中的&lt;code&gt;await&lt;/code&gt;和&lt;code&gt;async&lt;/code&gt;，你也可以像组织同步代码一样组织你的异步代码。&lt;/p&gt;
&lt;p&gt;Dart中声明异步方法是&lt;strong&gt;在函数名后加入async&lt;/strong&gt;，这类方法返回一个&lt;code&gt;Future&lt;/code&gt;对象，了解JS中&lt;code&gt;Promise&lt;/code&gt;的同学可以很快理解Future是做什么的。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;checkVersion() &lt;span class=&#34;keyword&#34;&gt;async&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; version = &lt;span class=&#34;keyword&#34;&gt;await&lt;/span&gt; lookUpVersion();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (version == expectedVersion) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Do something.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Do something else.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在返回值是Stream时，使用&lt;code&gt;await for&lt;/code&gt;的形式接收Stream中的数据。另外别忘了用&lt;code&gt;async&lt;/code&gt;修饰外界函数。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Future main() &lt;span class=&#34;keyword&#34;&gt;async&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; request &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; requestServer) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    handleRequest(request);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;生成器函数&#34;&gt;&lt;a href=&#34;#生成器函数&#34; class=&#34;headerlink&#34; title=&#34;生成器函数&#34;&gt;&lt;/a&gt;生成器函数&lt;/h2&gt;&lt;p&gt;惰性生产数据，类似ES6中的&lt;code&gt;function*&lt;/code&gt;。Dart提供两种类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同步：返回Iterator&lt;/li&gt;
&lt;li&gt;异步：返回Stream&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;Iterable&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;&amp;gt; naturalsDownFrom(&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; n) &lt;span class=&#34;keyword&#34;&gt;sync&lt;/span&gt;* &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (n &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;yield&lt;/span&gt; n;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;yield&lt;/span&gt;* naturalsDownFrom(n - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Stream&amp;lt;&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt;&amp;gt; asynchronousNaturalsTo(&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; n) &lt;span class=&#34;keyword&#34;&gt;async&lt;/span&gt;* &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; k = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (k &amp;lt; n) &lt;span class=&#34;keyword&#34;&gt;yield&lt;/span&gt; k++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;可调用的类&#34;&gt;&lt;a href=&#34;#可调用的类&#34; class=&#34;headerlink&#34; title=&#34;可调用的类&#34;&gt;&lt;/a&gt;可调用的类&lt;/h2&gt;&lt;p&gt;类中实现了&lt;code&gt;call()&lt;/code&gt;方法时，类实例可以当做方法调用。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;WannabeFunction&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  call(&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; a, &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; b) =&amp;gt; a + b;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; wf = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; WannabeFunction();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;wf(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;// 7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;类型别名&#34;&gt;&lt;a href=&#34;#类型别名&#34; class=&#34;headerlink&#34; title=&#34;类型别名&#34;&gt;&lt;/a&gt;类型别名&lt;/h2&gt;&lt;p&gt;类似typescript中的interface定义，Dart可以借助&lt;code&gt;typedef&lt;/code&gt;进行一些更复杂的类型判断。typedef只是类型别名的一种说法。&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; Compare(&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; a, &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; b);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; sort(&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; a, &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; b) =&amp;gt; a - b;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;assert&lt;/span&gt;(sort &lt;span class=&#34;keyword&#34;&gt;is&lt;/span&gt; Compare); &lt;span class=&#34;comment&#34;&gt;// True!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;元数据&#34;&gt;&lt;a href=&#34;#元数据&#34; class=&#34;headerlink&#34; title=&#34;元数据&#34;&gt;&lt;/a&gt;元数据&lt;/h2&gt;&lt;p&gt;使用元数据给代码添加额外信息，也能便于文档自动生成。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@deprecated&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@override&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@proxy&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你还可以自定义自己的元数据注解：&lt;/p&gt;
&lt;figure class=&#34;highlight dart&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;library&lt;/span&gt; todo;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;todo&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt; who;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;String&lt;/span&gt; what;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; todo(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.who, &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.what);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// another file&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;todo.dart&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@todo&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;seth&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;make this do something&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; doSomething() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;do something&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;注释&#34;&gt;&lt;a href=&#34;#注释&#34; class=&#34;headerlink&#34; title=&#34;注释&#34;&gt;&lt;/a&gt;注释&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;单行，&lt;code&gt;//&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;多行，&lt;code&gt;/**/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;文档注释， &lt;code&gt;///&lt;/code&gt;开头，或&lt;code&gt;/**&lt;/code&gt;开头，&lt;code&gt;*/&lt;/code&gt;结束&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;遵守规范的注释风格会有助于文档自动生成。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://shenlvmeng.github.com/blog/2017/10/13/css-definitive-guide-content/</guid>
            <title>《CSS权威指南》脉络</title>
            <link>http://shenlvmeng.github.com/blog/2017/10/13/css-definitive-guide-content/</link>
            <category>读书笔记</category>
            <category>CSS</category>
            <category>盒模型</category>
            <category>浮动</category>
            <pubDate>Fri, 13 Oct 2017 13:56:33 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;CSS和文档&#34;&gt;&lt;a href=&#34;#CSS和文档&#34; class=&#34;headerlink&#34; title=&#34;CSS和文档&#34;&gt;&lt;/a&gt;CSS和文档&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;CSS的出现和特点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt;和&lt;code&gt;@import&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CSS注释&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;内联样式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;@import&lt;/code&gt;必须写在CSS文档的开头&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;选择器&#34;&gt;&lt;a href=&#34;#选择器&#34; class=&#34;headerlink&#34; title=&#34;选择器&#34;&gt;&lt;/a&gt;选择器&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;基本结构&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;元素选择器（分组选择器、通配选择器）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;类选择器&amp;#x2F;ID选择器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;属性选择器（具体属性、部分属性）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;后代选择器、兄弟选择器（&lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;伪类&amp;#x2F;伪元素选择器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;^=&lt;/code&gt;, &lt;code&gt;$=&lt;/code&gt;, &lt;code&gt;~=&lt;/code&gt;, &lt;code&gt;*=&lt;/code&gt;, &lt;code&gt;|=&lt;/code&gt;用在属性选择中的部分匹配里，eg：&lt;code&gt;span[class~=&amp;quot;bar&amp;quot;]&lt;/code&gt;，&lt;br&gt;其中&lt;code&gt;~=&lt;/code&gt;匹配空格隔开的字符，&lt;code&gt;*=&lt;/code&gt;匹配部分字符串，&lt;code&gt;|=&lt;/code&gt;匹配完整字符串或以字符串开头&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;常用的伪类选择器有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:link&lt;/code&gt; 拥有&lt;code&gt;href&lt;/code&gt;属性的&lt;strong&gt;未访问&lt;/strong&gt;地址&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:visited&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:focus&lt;/code&gt; 当前获得输入焦点的元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:hover&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:active&lt;/code&gt; 被用户激活的元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:first-child&lt;/code&gt; 第一个子元素，类似地还有&lt;code&gt;:last-child&lt;/code&gt;和&lt;code&gt;nth-child()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:lang()&lt;/code&gt; 根据语言选择&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:first-letter&lt;/code&gt;和&lt;code&gt;first-line&lt;/code&gt;针对元素第一个字母和第一行文本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:before&lt;/code&gt;和&lt;code&gt;:after&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;层叠关系&#34;&gt;&lt;a href=&#34;#层叠关系&#34; class=&#34;headerlink&#34; title=&#34;层叠关系&#34;&gt;&lt;/a&gt;层叠关系&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;优先级顺序（ID &amp;gt; 类、属性、伪类 &amp;gt; 元素、伪元素 &amp;gt; 通配或结合符&lt;code&gt;,&lt;/code&gt; &amp;gt; 继承的属性）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;内联样式和&lt;code&gt;!important&lt;/code&gt;的特殊性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;继承&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;层叠规则&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;来源权重关系（读者重要声明 &amp;gt; 创作者的重要声明 &amp;gt; 创作者正常声明 &amp;gt; 读者正常声明 &amp;gt; 用户代理声明）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;LVHA（&lt;code&gt;:link&lt;/code&gt; - &lt;code&gt;:visited&lt;/code&gt; - &lt;code&gt;:hover&lt;/code&gt; - &lt;code&gt;:active&lt;/code&gt;的声明顺序）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一个声明出现的越后，它的权重越大&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;值和单位&#34;&gt;&lt;a href=&#34;#值和单位&#34; class=&#34;headerlink&#34; title=&#34;值和单位&#34;&gt;&lt;/a&gt;值和单位&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;数字&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;百分数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;颜色（具名、rgb&amp;#x2F;rgba、十六进制）、Web安全颜色&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;长度单位（in&amp;#x2F;cm&amp;#x2F;mm&amp;#x2F;pt&amp;#x2F;pc&amp;#x2F;px，em&amp;#x2F;ex&amp;#x2F;rem&amp;#x2F;vw&amp;#x2F;vh&amp;#x2F;vmin&amp;#x2F;vmax）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;URL（&lt;code&gt;url(protocol://server/pathname)&lt;/code&gt;或&lt;code&gt;url(pathname)&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;关键字&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;角度&amp;#x2F;时间&amp;#x2F;频率&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CSS2.1中有一个所有属性共有的关键字：&lt;code&gt;inherit&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;字体&#34;&gt;&lt;a href=&#34;#字体&#34; class=&#34;headerlink&#34; title=&#34;字体&#34;&gt;&lt;/a&gt;字体&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;通用字体（serif&amp;#x2F;sans-serif&amp;#x2F;monospace&amp;#x2F;cursive&amp;#x2F;fantasy）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;指定字体&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;字体加粗（100~900，lighter&amp;#x2F;bolder）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;字体大小（xx-small ~ xx-large；绝对大小；百分数）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;字体风格和变形（font-style，font-variant）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;font&lt;/code&gt;属性（&lt;code&gt;[&amp;lt;font-style&amp;gt; || &amp;lt;font-variant&amp;gt; || &amp;lt;font-weight&amp;gt;]?&amp;lt;font-size&amp;gt;[/&amp;lt;line-height&amp;gt;]?&amp;lt;font-family&amp;gt;&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;font-face&lt;/code&gt;规则（&lt;code&gt;font-family&lt;/code&gt;，&lt;code&gt;font-style&lt;/code&gt;，&lt;code&gt;src&lt;/code&gt;等）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;衬线字体包括Times，Georgia；非衬线字体包括Helvetiva，Geneva，Verdana，Arial；Monospace字体包括Courier，Courier New&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;字体名称中包含空格或特殊字符时，建议用引号包裹&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一般地，400对应normal，700对应bold&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;字体大小是可以继承的，不过继承的是计算值而不是百分数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;italic&lt;/code&gt;是单独的字体风格，&lt;code&gt;oblique&lt;/code&gt;则是正常文本的倾斜版本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;small-caps&lt;/code&gt;表示小型大写字母&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;文本属性&#34;&gt;&lt;a href=&#34;#文本属性&#34; class=&#34;headerlink&#34; title=&#34;文本属性&#34;&gt;&lt;/a&gt;文本属性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;缩进（&lt;code&gt;text-indent&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;水平对齐（&lt;code&gt;text-align&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;垂直对齐（&lt;code&gt;line-height&lt;/code&gt;和&lt;code&gt;vertical-align&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;字间隔和字母间隔（&lt;code&gt;word-spacing&lt;/code&gt;和&lt;code&gt;letter-spacing&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;文本转换（&lt;code&gt;text-transfrom&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;文本装饰（&lt;code&gt;text-decoration&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;文本阴影（&lt;code&gt;text-shadow&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;空白符处理（&lt;code&gt;white-space&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;文本方向（&lt;code&gt;direction&lt;/code&gt;和&lt;code&gt;unicode-bidi&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;text-indent&lt;/code&gt;为负值时表示悬挂缩进效果&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;line-height&lt;/code&gt;有继承性，表示文本基线（baseline）间的距离，继承的仍然是计算值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;行内元素的行框由行间距和内容区组成&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;vertical-align&lt;/code&gt;只应用于行内元素、替换元素和单元格，且不能继承。它可以取百分数和长度值，相对于自身line-height计算。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在基线对齐时，将元素的&lt;strong&gt;底部&lt;/strong&gt;和行框的基线对齐&lt;/li&gt;
&lt;li&gt;取值为&lt;code&gt;sub&lt;/code&gt;或&lt;code&gt;super&lt;/code&gt;时，元素的基线（或底端）将升高或降低&lt;/li&gt;
&lt;li&gt;取值&lt;code&gt;bottom&lt;/code&gt;或&lt;code&gt;top&lt;/code&gt;时，相对行框的顶端和底端&lt;/li&gt;
&lt;li&gt;取值为&lt;code&gt;middle&lt;/code&gt;时，会把行内元素的中点与行框基线上方0.5ex（约为0.25em，因x-height而异）处对齐&lt;/li&gt;
&lt;li&gt;取值为数值时，会相对于父元素行框基线升高&lt;br&gt;最后，父元素的行框的行高会因此做调整&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;text-transform&lt;/code&gt;有&lt;code&gt;uppercase&lt;/code&gt;, &lt;code&gt;lowercase&lt;/code&gt;, &lt;code&gt;capitalize&lt;/code&gt;等几种选择，有继承性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;text-decoration&lt;/code&gt;有&lt;code&gt;underline&lt;/code&gt;, &lt;code&gt;overline&lt;/code&gt;, &lt;code&gt;line-through&lt;/code&gt;, &lt;code&gt;blink&lt;/code&gt;等几种选择，没有继承性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;text-shadow&lt;/code&gt;先确定阴影颜色，前两个长度值确定偏移距离，第三个值确定模糊半径，可以同时设置多个阴影效果&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;white-space&lt;/code&gt;行为如下表&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;值&lt;/th&gt;
&lt;th&gt;空白符&lt;/th&gt;
&lt;th&gt;换行符&lt;/th&gt;
&lt;th&gt;自动换行&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;pre-line&lt;/td&gt;
&lt;td&gt;合并&lt;/td&gt;
&lt;td&gt;保留&lt;/td&gt;
&lt;td&gt;允许&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;normal&lt;/td&gt;
&lt;td&gt;合并&lt;/td&gt;
&lt;td&gt;忽略&lt;/td&gt;
&lt;td&gt;允许&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nowrap&lt;/td&gt;
&lt;td&gt;合并&lt;/td&gt;
&lt;td&gt;忽略&lt;/td&gt;
&lt;td&gt;不允许&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pre&lt;/td&gt;
&lt;td&gt;保留&lt;/td&gt;
&lt;td&gt;保留&lt;/td&gt;
&lt;td&gt;不允许&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pre-wrap&lt;/td&gt;
&lt;td&gt;保留&lt;/td&gt;
&lt;td&gt;保留&lt;/td&gt;
&lt;td&gt;允许&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;盒模型&#34;&gt;&lt;a href=&#34;#盒模型&#34; class=&#34;headerlink&#34; title=&#34;盒模型&#34;&gt;&lt;/a&gt;盒模型&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;基本框与包含块&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;正常流&amp;#x2F;非替换元素&amp;#x2F;替换元素&amp;#x2F;块级元素&amp;#x2F;行内元素&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;水平属性（&lt;code&gt;width&lt;/code&gt;，&lt;code&gt;margin/border/padding-left/right&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;垂直属性（&lt;code&gt;height&lt;/code&gt;，&lt;code&gt;margin/border/padding-top/bottom&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;行内元素（em框、内容区、行间距、行内框、行框）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;元素的显示方式（&lt;code&gt;display&lt;/code&gt;，&lt;code&gt;inline-block&lt;/code&gt;和&lt;code&gt;run-in&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在水平属性中只有&lt;code&gt;width&lt;/code&gt;和外边距可以设置为&lt;code&gt;auto&lt;/code&gt;，其余属性必须设置为特定的值或默认为0。使用&lt;code&gt;auto&lt;/code&gt;将会弥补实际值和所需总和的差距，当格式化属性过度受限时，会强制把&lt;code&gt;margin-right&lt;/code&gt;设置为&lt;code&gt;auto&lt;/code&gt;。相反，不止一个&lt;code&gt;auto&lt;/code&gt;出现时，若&lt;code&gt;width&lt;/code&gt;不为&lt;code&gt;auto&lt;/code&gt;，则会将元素居中，出现三个&lt;code&gt;auto&lt;/code&gt;时，外边距都会设置为0。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;垂直属性类似上面，不一样的是，元素间的外边距会合并，留下较大的外边距。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于非替换元素，元素行内框高度等于&lt;code&gt;line-height&lt;/code&gt;的值；对于替换元素，则由内容区高度决定&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;行内元素的边框边界由&lt;code&gt;font-size&lt;/code&gt;决定，与&lt;code&gt;line-height&lt;/code&gt;无关。类似，内外边距不会影响行框的形成和布局。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;行内替换元素并没有自己的基线，所以说相对较好的方案是将其行内框底部和基线对齐。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;inline-block&lt;/code&gt;元素的&lt;code&gt;width&lt;/code&gt;未定义或声明为&lt;code&gt;auto&lt;/code&gt;时，元素会收缩来适应到框宽度刚好足够包含该内容&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;边距和边框&#34;&gt;&lt;a href=&#34;#边距和边框&#34; class=&#34;headerlink&#34; title=&#34;边距和边框&#34;&gt;&lt;/a&gt;边距和边框&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;基本元素框&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;外边距（负外边距和垂直外边距合并）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;行内元素的外边距&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;边框&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;内边距&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;行内元素的内边距&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;外边距的空白不能放置其他元素&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;内外边距设置为百分数时，相对于父元素的&lt;strong&gt;宽度&lt;/strong&gt;计算，这样做是为了避免高度上导致无限循环&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于行内元素，只有&lt;code&gt;line-height&lt;/code&gt;，&lt;code&gt;font-size&lt;/code&gt;和&lt;code&gt;vertical-align&lt;/code&gt;可以改变元素行高，为替换元素设置的外边距会影响行高&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;边框的默认属性为&lt;code&gt;none medium &amp;lt;color&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;元素的背景会延伸到内边距&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;左内&amp;#x2F;外边距应用到行内元素开始处，右内&amp;#x2F;外边距应用到行内元素结束处&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;背景与颜色&#34;&gt;&lt;a href=&#34;#背景与颜色&#34; class=&#34;headerlink&#34; title=&#34;背景与颜色&#34;&gt;&lt;/a&gt;背景与颜色&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;前景色（&lt;code&gt;color&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;背景色&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;背景图片&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;背景重复、背景定位（&lt;code&gt;background-position&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;背景大小（&lt;code&gt;background-size&lt;/code&gt;，CSS3新增）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一般来说，前景包括元素的&lt;strong&gt;文本和边框&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;前景色属性可以继承&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;所有背景属性都不可继承&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;背景图像放在指定的背景色之上&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;background&lt;/code&gt;简写属性为&lt;code&gt;background-color || background-image || background-repeat || background-attachment || background-position&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;浮动和定位&#34;&gt;&lt;a href=&#34;#浮动和定位&#34; class=&#34;headerlink&#34; title=&#34;浮动和定位&#34;&gt;&lt;/a&gt;浮动和定位&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;浮动元素&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;浮动定位规则&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;浮动行为和浮动内容的的重叠&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;清除（&lt;code&gt;clear&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;定位类型（&lt;code&gt;position&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;宽高限制（&lt;code&gt;max/min-width&lt;/code&gt;和&lt;code&gt;max/min-height&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;内容溢出（&lt;code&gt;overflow&lt;/code&gt;和&lt;code&gt;clip&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;元素可见性（&lt;code&gt;visibility&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;绝对定位、固定定位、相对定位&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;z-index&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;浮动元素的外边距不会合并&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;浮动的非替换元素需要指定&lt;code&gt;width&lt;/code&gt;，否则宽度将趋于0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;浮动元素的包含块为距离最近的块级祖先元素&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;行内框和浮动元素重叠时，边框和内容都在浮动内容之上；块级元素重叠时，内容在之上，边框和背景在之下显示&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;clear&lt;/code&gt;只应用于块级元素，清除区域不允许浮动元素进入&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;absolute&lt;/code&gt;元素会形成一个块级框&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;top&lt;/code&gt;等属性应用在&lt;code&gt;absolute&lt;/code&gt;元素时，描述其距离&lt;strong&gt;外边距边界&lt;/strong&gt;的距离&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可以通过&lt;code&gt;top&lt;/code&gt;, &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;, &lt;code&gt;bottom&lt;/code&gt;这样的定位信息确定绝对定位元素的内容区大小&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;clip&lt;/code&gt;通过&lt;code&gt;rect(top,right,bottom,left)&lt;/code&gt;确定绝对定位元素的剪裁区域&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;绝对定位元素的静态位置为其&lt;code&gt;position&lt;/code&gt;为&lt;code&gt;static&lt;/code&gt;时的位置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于绝对定位元素，垂直方向或水平方向设置&lt;code&gt;auto&lt;/code&gt;可以垂直或水平居中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于相对定位，如遇到过度受限的情况，一个值会设置为另一个的相反数，保证自洽。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;表布局&#34;&gt;&lt;a href=&#34;#表布局&#34; class=&#34;headerlink&#34; title=&#34;表布局&#34;&gt;&lt;/a&gt;表布局&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;表显示值（即相关&lt;code&gt;display&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;以行为主&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;匿名表对象插入法则&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;表标题&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;表单元格（&lt;code&gt;border-collapse&lt;/code&gt;, &lt;code&gt;border-spacing&lt;/code&gt;, &lt;code&gt;empty-cells&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;单元格边框合并&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;表大小（&lt;code&gt;table-layout&lt;/code&gt;, 高度, 对齐）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CSS的列和列组只能接受&lt;code&gt;border&lt;/code&gt;，&lt;code&gt;background&lt;/code&gt;，&lt;code&gt;width&lt;/code&gt;，&lt;code&gt;visibility&lt;/code&gt;四种属性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;单元格垂直对齐有4种可选值，&lt;code&gt;top&lt;/code&gt;, &lt;code&gt;bottom&lt;/code&gt;, &lt;code&gt;middle&lt;/code&gt;, &lt;code&gt;baseline&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;列表和生成内容&#34;&gt;&lt;a href=&#34;#列表和生成内容&#34; class=&#34;headerlink&#34; title=&#34;列表和生成内容&#34;&gt;&lt;/a&gt;列表和生成内容&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;列表类型、列表项图像、列表标志位置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;插入生成内容（&lt;code&gt;content&lt;/code&gt;，&lt;code&gt;attr(xxx)&lt;/code&gt;, &lt;code&gt;quote&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;计数器（&lt;code&gt;counter-reset&lt;/code&gt;, &lt;code&gt;counter-increment&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;列表样式可以简写为&lt;code&gt;&amp;lt;list-style-type&amp;gt; | &amp;lt;list-style-image&amp;gt; | &amp;lt;list-style-position&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在&lt;code&gt;quote&lt;/code&gt;属性里指定开闭字符串后，可以通过content，结合&lt;code&gt;:before&lt;/code&gt;，&lt;code&gt;:after&lt;/code&gt;伪类插入开闭quote的标记&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;用户界面样式&#34;&gt;&lt;a href=&#34;#用户界面样式&#34; class=&#34;headerlink&#34; title=&#34;用户界面样式&#34;&gt;&lt;/a&gt;用户界面样式&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;系统字体（如&lt;code&gt;caption&lt;/code&gt;等）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;系统颜色（已废弃）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;光标（&lt;code&gt;cursor&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;轮廓（&lt;code&gt;outline&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;cursor&lt;/code&gt;有下面一些常见的值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pointer&lt;/code&gt; 用在超链接上&lt;/li&gt;
&lt;li&gt;&lt;code&gt;text&lt;/code&gt; 用来纯文本上&lt;/li&gt;
&lt;li&gt;&lt;code&gt;move&lt;/code&gt; 用来指示目标可以被拖动，相关的还有&lt;code&gt;e-resize&lt;/code&gt;, &lt;code&gt;ne-resize&lt;/code&gt;, &lt;code&gt;se-resize&lt;/code&gt;等边缘的拖动标记&lt;/li&gt;
&lt;li&gt;&lt;code&gt;crosshair&lt;/code&gt; 用来指示可以选取范围，类似截屏的光标效果&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wait&lt;/code&gt; 显示等待标记&lt;/li&gt;
&lt;li&gt;&lt;code&gt;progress&lt;/code&gt; 指示等待的状态，同时表示可以进行其他操作&lt;/li&gt;
&lt;li&gt;&lt;code&gt;help&lt;/code&gt; 显示帮助光标&lt;/li&gt;
&lt;li&gt;&lt;code&gt;url()&lt;/code&gt; 自定义光标图像，建议设置缺省值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;outline&lt;/code&gt;的设置类似&lt;code&gt;border&lt;/code&gt;，由&lt;code&gt;outline-color&lt;/code&gt;, &lt;code&gt;outline-style&lt;/code&gt;, &lt;code&gt;outline-width&lt;/code&gt;组成&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;非屏幕媒体&#34;&gt;&lt;a href=&#34;#非屏幕媒体&#34; class=&#34;headerlink&#34; title=&#34;非屏幕媒体&#34;&gt;&lt;/a&gt;非屏幕媒体&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;分页媒体（&lt;code&gt;size&lt;/code&gt;和&lt;code&gt;page&lt;/code&gt;等）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;投影样式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;声音样式（&lt;code&gt;speak&lt;/code&gt;，&lt;code&gt;stress&lt;/code&gt;，&lt;code&gt;richness&lt;/code&gt;等）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可以在&lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt;标签的&lt;code&gt;media&lt;/code&gt;属性里指定媒体类型，或是在CSS文件中通过&lt;code&gt;@media xxx &amp;#123;&amp;#125;&lt;/code&gt;的形式指定&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
    </channel>
</rss>
