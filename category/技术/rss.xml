<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Shenlvmeng&#39;s Blog • Posts by &#34;技术&#34; category</title>
        <link>http://shenlvmeng.github.com/blog</link>
        <description>Be sharp, my friend.</description>
        <language>zh-CN</language>
        <pubDate>Mon, 20 Dec 2021 22:48:09 +0800</pubDate>
        <lastBuildDate>Mon, 20 Dec 2021 22:48:09 +0800</lastBuildDate>
        <category>总结</category>
        <category>制度</category>
        <category>道德</category>
        <category>文官</category>
        <category>万历</category>
        <category>明朝</category>
        <category>读书笔记</category>
        <category>展望</category>
        <category>2018</category>
        <category>2019</category>
        <category>flag</category>
        <category>2020</category>
        <category>2021</category>
        <category>2022</category>
        <category>2023</category>
        <category>面试</category>
        <category>前端</category>
        <category>FAQ</category>
        <category>HTML</category>
        <category>CSS</category>
        <category>style guide</category>
        <category>编程</category>
        <category>范式</category>
        <category>设计</category>
        <category>艺术</category>
        <category>质量</category>
        <category>async_hooks</category>
        <category>cls-hooked</category>
        <category>logId</category>
        <category>录音</category>
        <category>getUserMedia</category>
        <category>AudioContext</category>
        <category>PCM</category>
        <category>WAVE</category>
        <category>二叉搜索树</category>
        <category>算法</category>
        <category>回忆</category>
        <category>老朋友</category>
        <category>C</category>
        <category>Hash</category>
        <category>布隆过滤器</category>
        <category>字符串检索</category>
        <category>canvas</category>
        <category>流程图</category>
        <category>d3</category>
        <category>g6</category>
        <category>zrender</category>
        <category>processOn</category>
        <category>SDN</category>
        <category>cbench</category>
        <category>安装说明</category>
        <category>绘图</category>
        <category>动画</category>
        <category>攻略</category>
        <category>流水账</category>
        <category>成都</category>
        <category>重庆</category>
        <category>武汉</category>
        <category>重构</category>
        <category>代码</category>
        <category>代码风格</category>
        <category>数据可视化</category>
        <category>爬虫</category>
        <category>chrome</category>
        <category>crx</category>
        <category>扩展</category>
        <category>CORS</category>
        <category>跨域</category>
        <category>盒模型</category>
        <category>浮动</category>
        <category>Reactive Programming</category>
        <category>JavaScript</category>
        <category>Cycle.js</category>
        <category>Dart</category>
        <category>最佳实践</category>
        <category>引流</category>
        <category>universal-link</category>
        <category>app-link</category>
        <category>脚手架</category>
        <category>degit</category>
        <category>git</category>
        <category>设计模式</category>
        <category>类</category>
        <category>接口</category>
        <category>抽象类</category>
        <category>DOM</category>
        <category>Docker</category>
        <category>ONOS</category>
        <category>控制器</category>
        <category>虚拟化</category>
        <category>笔记</category>
        <category>UX</category>
        <category>UED</category>
        <category>准则</category>
        <category>Java</category>
        <category>Ruby</category>
        <category>反射</category>
        <category>编程范式</category>
        <category>鸭子类型</category>
        <category>管理</category>
        <category>效率</category>
        <category>知识工作者</category>
        <category>卓有成效</category>
        <category>Elm</category>
        <category>框架</category>
        <category>函数式编程</category>
        <category>虚网映射</category>
        <category>Javascript</category>
        <category>并发</category>
        <category>event loop</category>
        <category>覆盖率</category>
        <category>端到端测试</category>
        <category>istanbul</category>
        <category>istanbuljs</category>
        <category>JavaSript</category>
        <category>Express</category>
        <category>源码</category>
        <category>代码覆盖率</category>
        <category>istanbul-middleware</category>
        <category>代码插桩</category>
        <category>require钩子</category>
        <category>babel-plugin-istanbul</category>
        <category>css</category>
        <category>html5</category>
        <category>flex</category>
        <category>javascript</category>
        <category>roadmap</category>
        <category>闭包</category>
        <category>Haskell</category>
        <category>monad</category>
        <category>后端</category>
        <category>管理后台</category>
        <category>egg.js</category>
        <category>工作流</category>
        <category>pull request</category>
        <category>golang</category>
        <category>语言学习</category>
        <category>黑客与画家</category>
        <category>创业</category>
        <category>骑行</category>
        <category>海南</category>
        <category>图文</category>
        <category>reflow</category>
        <category>repaint</category>
        <category>命名法</category>
        <category>成功学</category>
        <category>自我建设</category>
        <category>HTTP</category>
        <category>HTTP/2</category>
        <category>SPDY</category>
        <category>QUIC</category>
        <category>HTTPS</category>
        <category>状态码</category>
        <category>网络攻击</category>
        <category>介绍</category>
        <category>图片渲染</category>
        <category>html2canvas</category>
        <category>dom-to-image</category>
        <category>electron</category>
        <category>indexedDB</category>
        <category>异步</category>
        <category>Generator</category>
        <category>thunk</category>
        <category>async</category>
        <category>函数表达式</category>
        <category>对象</category>
        <category>继承</category>
        <category>类型转换</category>
        <category>==</category>
        <category>类型判断</category>
        <category>猫</category>
        <category>杀手</category>
        <category>管理学</category>
        <category>领导力</category>
        <category>梯队</category>
        <category>移动端</category>
        <category>UI</category>
        <category>自适应</category>
        <category>rem</category>
        <category>Electron</category>
        <category>GUI</category>
        <category>gpx</category>
        <category>template</category>
        <category>Electron Builder</category>
        <category>PWA</category>
        <category>方法论</category>
        <category>夜话</category>
        <category>多线</category>
        <category>生活</category>
        <category>密码</category>
        <category>密钥</category>
        <category>技改</category>
        <category>Vue</category>
        <category>gulp</category>
        <category>瀑布流</category>
        <category>电影</category>
        <category>PHP</category>
        <category>参考</category>
        <category>思维</category>
        <category>学习能力</category>
        <category>右脑</category>
        <category>经济学</category>
        <category>宏观经济学</category>
        <category>术语</category>
        <category>GDP</category>
        <category>CPI</category>
        <category>储蓄</category>
        <category>投资</category>
        <category>金融市场</category>
        <category>股票</category>
        <category>债券</category>
        <category>美联储</category>
        <category>失业</category>
        <category>货币</category>
        <category>现值</category>
        <category>准备金</category>
        <category>货币中性</category>
        <category>通货膨胀</category>
        <category>汇率</category>
        <category>购买力</category>
        <category>净出口</category>
        <category>资产净流出</category>
        <category>总需求</category>
        <category>总供给</category>
        <category>流动性偏好</category>
        <category>乘数效应</category>
        <category>菲利普斯曲线</category>
        <category>微观经济学</category>
        <category>供求</category>
        <category>贸易</category>
        <category>市场</category>
        <category>税</category>
        <category>剩余</category>
        <category>外部性</category>
        <category>公共物品</category>
        <category>公共资源</category>
        <category>生产成本</category>
        <category>利润</category>
        <category>垄断</category>
        <category>价格歧视</category>
        <category>寡头</category>
        <category>垄断竞争</category>
        <category>生产要素市场</category>
        <category>贫困</category>
        <category>消费者选择理论</category>
        <category>不对称信息</category>
        <category>政治经济学</category>
        <category>行为经济学</category>
        <category>VSCode</category>
        <category>编辑器</category>
        <category>IDE</category>
        <category>hybrid</category>
        <category>JSBridge</category>
        <category>Web Worker</category>
        <category>Service Worker</category>
        <category>习惯</category>
        <category>lint</category>
        <category>editorconfig</category>
        <category>commit message</category>
        <category>量子物理</category>
        <category>史话</category>
        <category>埋点</category>
        <category>raven.js</category>
        <category>前端监控</category>
        <category>文本编辑器</category>
        <category>quill</category>
        <category>结构化数据</category>
        <category>React</category>
        <category>Hooks</category>
        <category>函数组件</category>
        <category>复用</category>
        <category>状态管理</category>
        <category>redux</category>
        <category>MobX</category>
        <category>代码质量</category>
        <category>重来</category>
        <category>requestAnimationFrame</category>
        <category>TypeScript</category>
        <category>路书</category>
        <category>gpx解析</category>
        <category>EXIF</category>
        <category>人类</category>
        <category>生存</category>
        <category>基因</category>
        <category>响应式编程</category>
        <category>RxJS</category>
        <category>成长</category>
        <category>业务</category>
        <category>思想</category>
        <category>程序设计</category>
        <category>心理学</category>
        <category>自我</category>
        <category>社会思维</category>
        <category>社会影响</category>
        <category>文化</category>
        <category>性别</category>
        <category>从众</category>
        <category>说服</category>
        <category>临床诊断</category>
        <category>陪审团</category>
        <category>司法</category>
        <category>物质主义</category>
        <category>健康</category>
        <category>社会关系</category>
        <category>偏见</category>
        <category>攻击行为</category>
        <category>亲密关系</category>
        <category>友谊</category>
        <category>爱情</category>
        <category>利他</category>
        <category>冲突</category>
        <category>和解</category>
        <category>软技能</category>
        <category>理财</category>
        <category>健身</category>
        <category>自我营销</category>
        <category>学习</category>
        <category>商业模式</category>
        <category>产品</category>
        <category>校园网</category>
        <category>互联网</category>
        <category>技术</category>
        <category>web开发</category>
        <category>哲思</category>
        <category>择偶观</category>
        <category>validator</category>
        <category>大文件</category>
        <category>visibilityChange</category>
        <category>IntersectionObserver</category>
        <category>图种</category>
        <category>draggable</category>
        <category>webpack</category>
        <category>z-index</category>
        <category>git submodule</category>
        <category>object-fit</category>
        <category>object-position</category>
        <category>BroadcastChannel</category>
        <category>extract-text-webpack-plugin</category>
        <category>lottie</category>
        <category>backface-visibility</category>
        <category>egret</category>
        <category>mock</category>
        <category>SSO</category>
        <category>autoprefixer</category>
        <category>polyfill</category>
        <category>Android</category>
        <category>ffmpeg</category>
        <category>React Hooks</category>
        <category>rollup</category>
        <category>CDN</category>
        <category>DNS</category>
        <category>CNAME</category>
        <category>架构</category>
        <category>组件</category>
        <category>ssh</category>
        <category>fis-receiver</category>
        <category>tmux</category>
        <category>origami</category>
        <category>promise</category>
        <category>encodeURI</category>
        <category>encodeURIComponent</category>
        <category>axios</category>
        <category>charles</category>
        <category>黑色幽默</category>
        <category>朋友</category>
        <category>梦</category>
        <category>濒死</category>
        <category>江南</category>
        <category>苏州</category>
        <category>无锡</category>
        <category>宜兴</category>
        <category>湖州</category>
        <category>南浔</category>
        <category>游记</category>
        <category>随笔</category>
        <category>群众</category>
        <category>理论</category>
        <category>实效</category>
        <category>测试</category>
        <category>长沙</category>
        <category>杭州</category>
        <category>湖南</category>
        <category>核酸</category>
        <category>美食</category>
        <category>云南</category>
        <category>丽江</category>
        <category>大理</category>
        <category>青岛</category>
        <category>济南</category>
        <category>山东</category>
        <category>西北</category>
        <category>银川</category>
        <category>西宁</category>
        <category>青海湖</category>
        <category>西海镇</category>
        <category>茶卡盐湖</category>
        <category>厦门</category>
        <category>感受</category>
        <category>C语言</category>
        <category>树</category>
        <category>主干开发</category>
        <category>GitFlow</category>
        <category>GithubFlow</category>
        <category>typescript</category>
        <category>类型系统</category>
        <category>webrtc</category>
        <category>RTMP</category>
        <category>首屏时间</category>
        <category>性能优化</category>
        <category>公司</category>
        <category>个人发展</category>
        <category>战略</category>
        <category>晋升</category>
        <category>哲学</category>
        <category>幸福</category>
        <category>人生</category>
        <category>叔本华</category>
        <category>Unix</category>
        <category>Rollup</category>
        <category>mouseout</category>
        <category>mouseleave</category>
        <category>lint-staged</category>
        <category>吸顶</category>
        <category>图片组件</category>
        <category>形式系统</category>
        <category>不完全性</category>
        <category>隐喻</category>
        <category>哥德尔</category>
        <category>巴赫</category>
        <category>埃舍尔</category>
        <category>济州</category>
        <category>西归浦</category>
        <category>城山</category>
        <category>咸德</category>
        <category>人工智能</category>
        <category>心智</category>
        <category>自指</category>
        <category>图灵</category>
        <category>马列主义</category>
        <category>恩格斯</category>
        <category>家庭</category>
        <category>国家</category>
        <category>阶级</category>
        <category>氏族</category>
        <category>哲学史</category>
        <category>孔子</category>
        <category>老子</category>
        <category>儒家</category>
        <category>道家</category>
        <category>佛教</category>
        <category>禅宗</category>
        <category>理学</category>
        <category>心学</category>
        <category>计算机</category>
        <category>微机原理</category>
        <category>门</category>
        <category>操作系统</category>
        <category>数字电路</category>
        <category>2024</category>
        <category>政府</category>
        <category>经济</category>
        <category>消费</category>
        <category>土地金融</category>
        <category>饮食</category>
        <category>蛋白质</category>
        <category>碳水</category>
        <category>慢性病</category>
        <category>三高</category>
        <category>肿瘤</category>
        <category>启蒙</category>
        <item>
            <guid isPermalink="true">http://shenlvmeng.github.com/blog/2021/12/20/deep-link-note/</guid>
            <title>deeplink技术分析</title>
            <link>http://shenlvmeng.github.com/blog/2021/12/20/deep-link-note/</link>
            <category>引流</category>
            <category>universal-link</category>
            <category>app-link</category>
            <pubDate>Mon, 20 Dec 2021 22:48:09 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Deep_linking&#34;&gt;deep link&lt;/a&gt;是指可以从任何渠道，包括短信、应用内、网页中直接跳转到应用app内的特定页面的技术。它一定程度上打破了移动端app间“孤岛”的局面，实现了快捷的跳转。根据是否安装app，主要有下面两种行为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;已安装，唤起app并跳转到特定页面&lt;/li&gt;
&lt;li&gt;未安装，跳转到App Store或下载页面引导用户下载安装，在下载后的第一次打开自动跳转到特定深度页面，这种情况也叫&lt;strong&gt;deferred deep link&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://support.staffbase.com/hc/article_attachments/115003896431/deeplink_deeplink-browser-app.png&#34; alt=&#34;deep-link-info&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;场景&#34;&gt;&lt;a href=&#34;#场景&#34; class=&#34;headerlink&#34; title=&#34;场景&#34;&gt;&lt;/a&gt;场景&lt;/h2&gt;&lt;p&gt;deep link可以应用在很多常见的场景下，如&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;社交分享&lt;/li&gt;
&lt;li&gt;广告引流&lt;/li&gt;
&lt;li&gt;web和app互通&lt;/li&gt;
&lt;li&gt;裂变活动&lt;/li&gt;
&lt;li&gt;短信、邮件营销&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在web和app互通场景下，可以很方便地实现从外部回流页回到app内特定位置，如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;电商类app：分享H5跳转到特定商品页&lt;/li&gt;
&lt;li&gt;游戏类app：分享H5跳转到特定房间或任务&lt;/li&gt;
&lt;li&gt;直播类app：分享H5跳转到特定直播间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;deep link缩短了操作路径，减少了用户操作成本，从而降低用户流失率，帮助app拉新和留存。&lt;/p&gt;
&lt;h2 id=&#34;实现方式&#34;&gt;&lt;a href=&#34;#实现方式&#34; class=&#34;headerlink&#34; title=&#34;实现方式&#34;&gt;&lt;/a&gt;实现方式&lt;/h2&gt;&lt;p&gt;常见的实现方式有下面几种&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;URL scheme，iOS和Android下的通用方式，打开前会询问是否打开某app&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.chrome.com/docs/multidevice/android/intents/&#34;&gt;Chrome Intent&lt;/a&gt;，Chrome 25+无法通过URL scheme 唤起 App，必须使用Intent&lt;/li&gt;
&lt;li&gt;Universal Link，适用于iOS 9及更高版本，点击http&amp;#x2F;https即跳转，操作丝滑&lt;/li&gt;
&lt;li&gt;App Links，适用于Android 6及更高版本，点击http&amp;#x2F;https即跳转，操作丝滑&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了上面几种，还有&lt;a href=&#34;https://developer.apple.com/documentation/webkit/promoting_apps_with_smart_app_banners&#34;&gt;Smart App Banners&lt;/a&gt;、剪贴板等方案&lt;/p&gt;
&lt;h3 id=&#34;URL-scheme&#34;&gt;&lt;a href=&#34;#URL-scheme&#34; class=&#34;headerlink&#34; title=&#34;URL scheme&#34;&gt;&lt;/a&gt;URL scheme&lt;/h3&gt;&lt;p&gt;格式形如&lt;code&gt;[scheme:][//authority][path][?query][#fragment]&lt;/code&gt;，一般使用在iOS 9和Android 6之前。方法通用，但有以下问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本身没有规范，难以获知要跳转的path或query&lt;/li&gt;
&lt;li&gt;功能不全，app越复杂，scheme就越复杂&lt;/li&gt;
&lt;li&gt;会被拦截，包括浏览器或应用的webview，如微信&lt;/li&gt;
&lt;li&gt;打开app失败后，iOS会有错误弹窗，体验不好&lt;ul&gt;
&lt;li&gt;提示网页无效&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;URL scheme可能重复&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;常见Scheme URL&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;微信&lt;/th&gt;
&lt;th&gt;电商&lt;/th&gt;
&lt;th&gt;浏览器&lt;/th&gt;
&lt;th&gt;系统&lt;/th&gt;
&lt;th&gt;其他&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;weixin:&amp;#x2F;&amp;#x2F;dl&amp;#x2F;scan 扫一扫&lt;br /&gt;weixin:&amp;#x2F;&amp;#x2F;dl&amp;#x2F;moments 朋友圈&lt;br /&gt; weixin:&amp;#x2F;&amp;#x2F;dl&amp;#x2F;settings 设置&lt;/td&gt;
&lt;td&gt;淘宝：taobao:&amp;#x2F;&amp;#x2F;&lt;br /&gt;支付宝：alipay:&amp;#x2F;&amp;#x2F;&lt;br /&gt;美团：imeituan:&amp;#x2F;&amp;#x2F;&lt;/td&gt;
&lt;td&gt;Chrome：googlechrome:&amp;#x2F;&amp;#x2F;&lt;br /&gt;UC 浏览器：ucbrowser:&amp;#x2F;&amp;#x2F;&lt;/td&gt;
&lt;td&gt;邮箱：mailto:&amp;#x2F;&amp;#x2F;&lt;br /&gt;短信：message:&amp;#x2F;&amp;#x2F;&lt;br /&gt;App Store：itms-appss:&amp;#x2F;&amp;#x2F;  macappstores:&amp;#x2F;&amp;#x2F;&lt;/td&gt;
&lt;td&gt;飞书：lark:&amp;#x2F;&amp;#x2F;&lt;br /&gt;微博：sinaweibo:&amp;#x2F;&amp;#x2F;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;Chrome-Intent&#34;&gt;&lt;a href=&#34;#Chrome-Intent&#34; class=&#34;headerlink&#34; title=&#34;Chrome Intent&#34;&gt;&lt;/a&gt;Chrome Intent&lt;/h3&gt;&lt;p&gt;Chrome 25+无法通过iframe的src启动Android app。改为构造形如下面的intent锚点。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;intent:  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   HOST/URI-path // Optional host  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   #Intent;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      package=\[string\];  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      action=\[string\];  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      category=\[string\];  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      component=\[string\];  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      scheme=\[string\];  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   end;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在&lt;code&gt;end&lt;/code&gt;前添加&lt;code&gt;S.browser_fallback_url=[encoded_full_url]&lt;/code&gt;可以指定唤起失败的地址。一个构造好的intent形如：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;intent://path#Intent;scheme=xxx;package=com. xxx;S.browser_fallback_url=https://xxx;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Universal-Link&#34;&gt;&lt;a href=&#34;#Universal-Link&#34; class=&#34;headerlink&#34; title=&#34;Universal Link&#34;&gt;&lt;/a&gt;Universal Link&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/ios/universal-links/&#34;&gt;官方介绍&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Universal Link，即通用链接，是iOS 9推出的通过HTTPS链接来启动app的特性。既可以打开app，在没有安装时，则打开特定网页。对比URL Scheme优势在于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无缝切换，不弹窗确认&lt;/li&gt;
&lt;li&gt;兼容性好，未安装时直接打开网页&lt;/li&gt;
&lt;li&gt;使用通用的HTTP协议，不用担心scheme重复&lt;/li&gt;
&lt;li&gt;通过网站的配置文件和app关联，保证安全&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在网站下根目录或&lt;code&gt;.well-known&lt;/code&gt;路径下需要有&lt;code&gt;apple-app-association&lt;/code&gt;（无后缀名）JSON文件。例如，知乎的配置文件为&lt;a href=&#34;https://oia.zhihu.com/apple-app-site-association%E3%80%82%E5%9C%A8%E9%85%8D%E7%BD%AE%E6%97%B6%EF%BC%8C&#34;&gt;https://oia.zhihu.com/apple-app-site-association。在配置时，&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要保证有一个HTTPS的域名，最好和web网页域名区分开，保证web网页的正常访问&lt;/li&gt;
&lt;li&gt;在开发者中心 ，Identifiers下 AppIDs 找到自己的App ID，编辑打开Associated Domains服务&lt;/li&gt;
&lt;li&gt;打开工程配置中的 Associated Domains ，在其中的 Domains 中填入你想支持的域名，必须以&lt;code&gt;applinks:&lt;/code&gt;为前缀&lt;/li&gt;
&lt;li&gt;配置&lt;code&gt;apple-app-site-association&lt;/code&gt;文件，不带任何后缀，上传该文件到服务器的根目录或者&lt;code&gt;.well-known&lt;/code&gt;目录下&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://docs-assets.developer.apple.com/published/4cbbb0bb235bdd82277b0f8d294afab8/13300/supporting-associated-domains-1@2x.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;在网站下配置好Universal Link后，用户点击网站链接后，即会直接跳转到App，而不需要经过浏览器。当然，微信等app还是会拦截Universal Link的行为，需要在微信注册自己的应用id和Universal Link。&lt;/p&gt;
&lt;h3 id=&#34;App-Links&#34;&gt;&lt;a href=&#34;#App-Links&#34; class=&#34;headerlink&#34; title=&#34;App Links&#34;&gt;&lt;/a&gt;App Links&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.android.google.cn/studio/write/app-link-indexing&#34;&gt;官方介绍&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;App Links，类似Universal Link，是Android 6（Android M）及以上操作系统中适用的HTTPS路径链接。可以直接将用户带入到Android app内的特定页面中，实现上，网站配置文件名为&lt;code&gt;assetlink&lt;/code&gt;，只能放在&lt;code&gt;.well-known&lt;/code&gt;目录下。如&lt;a href=&#34;https://vt.tiktok.com/.well-known/assetlinks.json%E3%80%82%E4%B8%8D%E8%BF%87%EF%BC%8C%E5%9B%BD%E4%BA%A7%E7%9A%84%E5%AE%89%E5%8D%93%E7%89%88%E6%9C%AC%E4%BB%A5%E5%8F%8A%E5%BE%AE%E4%BF%A1%E7%AD%89app%E4%BE%9D%E6%97%A7%E4%BC%9A%E6%8B%A6%E6%88%AA%E3%80%82&#34;&gt;https://vt.tiktok.com/.well-known/assetlinks.json。不过，国产的安卓版本以及微信等app依旧会拦截。&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;其他&#34;&gt;&lt;a href=&#34;#其他&#34; class=&#34;headerlink&#34; title=&#34;其他&#34;&gt;&lt;/a&gt;其他&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Android webview本身支持唤醒第三方app，但如果设置了自定义WebViewClient则需要自己处理，具体是指在&lt;code&gt;shouldOverrideUrlLoading&lt;/code&gt;方法中决定如何处理&lt;/li&gt;
&lt;li&gt;Smart App Banners，在网页里增加一个&lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt;标签，可以在打开页面时，检测手机是否安装某个app，并且在页面顶部显示一个Banner显示App的基本信息，安装时显示打开，未安装时显示安装&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;相关产品或开源库&#34;&gt;&lt;a href=&#34;#相关产品或开源库&#34; class=&#34;headerlink&#34; title=&#34;相关产品或开源库&#34;&gt;&lt;/a&gt;相关产品或开源库&lt;/h2&gt;&lt;p&gt;结合点击行为、重定向行为、来源去向分析、落地页等，还可以做很多事情，市面上也有下面一些产品：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.mob.com/mobService/moblink&#34;&gt;MobLink&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedme.cc/link-page.html&#34;&gt;LinkedMe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.openinstall.io/deeplinking.html&#34;&gt;openinstall&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，也有一些开源库实现web跳转app&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/suanmei/callapp-lib&#34;&gt;https://github.com/suanmei/callapp-lib&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jawidx/web-launch-app&#34;&gt;https://github.com/jawidx/web-launch-app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/luojinghui/web-open-app&#34;&gt;https://github.com/luojinghui/web-open-app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;–END–&lt;/em&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://shenlvmeng.github.com/blog/2020/04/17/fe-coverage-improve/</guid>
            <title>前端代码覆盖率实时统计改进方案</title>
            <link>http://shenlvmeng.github.com/blog/2020/04/17/fe-coverage-improve/</link>
            <category>覆盖率</category>
            <category>端到端测试</category>
            <category>istanbul</category>
            <category>istanbuljs</category>
            <pubDate>Fri, 17 Apr 2020 00:08:03 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;背景&#34;&gt;&lt;a href=&#34;#背景&#34; class=&#34;headerlink&#34; title=&#34;背景&#34;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://shenlvmeng.github.io/blog/2020/04/16/fe-coverage-scheme/&#34;&gt;旧的覆盖率方案&lt;/a&gt;实现了覆盖率采集的可行性探索。但是旧方案中也存在着侵入较多，适用场景有局限性，istanbul版本老旧，sourcemap支持不足等问题需要优化。有关覆盖率采集、维护、呈现、上报需要一个更通用和更具可拓展性的方案。&lt;/p&gt;
&lt;p&gt;因此，在对整个覆盖率要解决的问题和目标进行抽象后，可以得到以下的实现方案。&lt;/p&gt;
&lt;h2 id=&#34;整体结构&#34;&gt;&lt;a href=&#34;#整体结构&#34; class=&#34;headerlink&#34; title=&#34;整体结构&#34;&gt;&lt;/a&gt;整体结构&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/04/16/JEZ1J0.png&#34; alt=&#34;整体结构&#34;&gt;&lt;/p&gt;
&lt;p&gt;新的覆盖率方案可以分为3层：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;采集层&lt;/strong&gt;，这一层主要解决对代码进行&lt;strong&gt;插桩&lt;/strong&gt;（instrument）的过程，只有插桩过的代码才能在执行的过程中不断积累覆盖率数据，从而通过端到端测试得到代码的覆盖率情况&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据层&lt;/strong&gt;，采集到的覆盖率数据有上报的需求，浏览器端数据只有上报到服务端才能查看和操作，如果接入第三方平台，就更需要有专门数据&lt;strong&gt;处理和上报&lt;/strong&gt;，这一层正是完成这部分工作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;视图层&lt;/strong&gt;，方案要自带&lt;strong&gt;视图化&lt;/strong&gt;能力，给开发者更直观的反馈，同时要有&lt;strong&gt;可交互性&lt;/strong&gt;，满足开发者的日常需求。这一层要能比较方便地绑定到流行的服务端环境中，减少侵入成本&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;整体实现上，基于新版本&lt;a href=&#34;https://github.com/gotwarlost/istanbul&#34;&gt;istanbuljs&lt;/a&gt;。下面分层介绍各层实现中需要进行的工作。&lt;/p&gt;
&lt;h2 id=&#34;采集层&#34;&gt;&lt;a href=&#34;#采集层&#34; class=&#34;headerlink&#34; title=&#34;采集层&#34;&gt;&lt;/a&gt;采集层&lt;/h2&gt;&lt;p&gt;代码插桩实现中，拆分为下面几点：&lt;/p&gt;
&lt;h3 id=&#34;babel-preset&#34;&gt;&lt;a href=&#34;#babel-preset&#34; class=&#34;headerlink&#34; title=&#34;babel preset&#34;&gt;&lt;/a&gt;babel preset&lt;/h3&gt;&lt;p&gt;对于使用babel转码的工程来说，&lt;a href=&#34;https://github.com/istanbuljs/babel-plugin-istanbul&#34;&gt;babel-plugin-istanbul&lt;/a&gt;直接提供了一个可以插桩代码的插件。这里要做的只是区分线上和其他环境，以及预定义preset，减少用户babel配置成本。&lt;/p&gt;
&lt;p&gt;babel preset的书写可以参考&lt;a href=&#34;https://babeljs.io/docs/en/presets#creating-a-preset&#34;&gt;babel preset&lt;/a&gt;一节，我们只需将原先&lt;code&gt;.babelrc&lt;/code&gt;或&lt;code&gt;babel.config.js&lt;/code&gt;中的配置项用&lt;code&gt;require&lt;/code&gt;包裹即可。&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;module&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;exports&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;env&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;development&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;attr&#34;&gt;plugins&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    [&lt;span class=&#34;built_in&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;babel-plugin-istanbul&amp;#x27;&lt;/span&gt;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;boe&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;attr&#34;&gt;plugins&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    [&lt;span class=&#34;built_in&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;babel-plugin-istanbul&amp;#x27;&lt;/span&gt;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;相对应的，接入方需要额外在&lt;code&gt;scm_build.sh&lt;/code&gt;脚本中额外传入boe环境变量来区分boe和线上环境：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; [ &lt;span class=&#34;variable&#34;&gt;$BUILD_TYPE&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;quot;offline&amp;quot;&lt;/span&gt; ]; &lt;span class=&#34;keyword&#34;&gt;then&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    BABEL_ENV=boe yarn build&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    yarn build&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;fi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;同时，默认情况下，istanbul只会对后缀为&lt;code&gt;[&amp;#39;.js&amp;#39;, &amp;#39;.cjs&amp;#39;, &amp;#39;.mjs&amp;#39;, &amp;#39;.ts&amp;#39;, &amp;#39;.tsx&amp;#39;, &amp;#39;.jsx&amp;#39;]&lt;/code&gt;的文件进行处理，为了处理&lt;code&gt;.vue&lt;/code&gt;文件，需要显式给&lt;code&gt;babel-plugin-istanbul&lt;/code&gt;文件传入&lt;code&gt;extension&lt;/code&gt;字段。&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;module&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;exports&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;env&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;development&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;attr&#34;&gt;plugins&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    [&lt;span class=&#34;built_in&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;babel-plugin-istanbul&amp;#x27;&lt;/span&gt;), &amp;#123; &lt;span class=&#34;attr&#34;&gt;extension&lt;/span&gt;: [&lt;span class=&#34;string&#34;&gt;&amp;#x27;.js&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;.cjs&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;.mjs&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;.ts&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;.tsx&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;.jsx&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;.vue&amp;#x27;&lt;/span&gt;] &amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;boe&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;attr&#34;&gt;plugins&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    [&lt;span class=&#34;built_in&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;babel-plugin-istanbul&amp;#x27;&lt;/span&gt;), &amp;#123; &lt;span class=&#34;attr&#34;&gt;extension&lt;/span&gt;: [&lt;span class=&#34;string&#34;&gt;&amp;#x27;.js&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;.cjs&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;.mjs&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;.ts&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;.tsx&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;.jsx&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;.vue&amp;#x27;&lt;/span&gt;] &amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;hookRequire动态插桩&#34;&gt;&lt;a href=&#34;#hookRequire动态插桩&#34; class=&#34;headerlink&#34; title=&#34;hookRequire动态插桩&#34;&gt;&lt;/a&gt;&lt;code&gt;hookRequire&lt;/code&gt;动态插桩&lt;/h3&gt;&lt;p&gt;有些场景下并不使用babel进行转码，这里以最典型的TypeScript为例，&lt;code&gt;.ts&lt;/code&gt;文件可以用&lt;code&gt;tsc&lt;/code&gt;编译。&lt;code&gt;tsc&lt;/code&gt;编译后的js代码只有插桩后，才可能采集到的覆盖率数据，因此接入方需要在所有业务代码的import之前调用hook，保证所有的服务端js代码在被执行前都完成了插桩。&lt;/p&gt;
&lt;p&gt;实现上，新版本istanbuljs整个是个monorepo，原来istanbul各模块的功能拆分到了packages的各子项目中。其中和hook相关的位于&lt;strong&gt;istanbul-lib-hook&lt;/strong&gt;。这个库虽然并没有API和文档。但还好，和老版本的hook.js区别不大。使用暴露出来的&lt;strong&gt;hookRequire&lt;/strong&gt;方法即可，使用方式也与之前无异。&lt;/p&gt;
&lt;figure class=&#34;highlight ts&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// old&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; * &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; istanbul &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;istanbul&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &amp;#123; hook &amp;#125; = istanbul;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;instrumenter = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Instrumenter&lt;/span&gt;(options);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; transformer = instrumenter.&lt;span class=&#34;property&#34;&gt;instrumentSync&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(instrumenter);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;hook.&lt;span class=&#34;title function_&#34;&gt;hookRequire&lt;/span&gt;(matcher, transformer, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;postLoadHook&lt;/span&gt;: &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;file: &lt;span class=&#34;built_in&#34;&gt;any&lt;/span&gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// new&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; hookRequire &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;istanbul-lib-hook&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; createInstrumenter &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;istanbul-lib-instrument&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;instrumenter = &lt;span class=&#34;title function_&#34;&gt;createInstrumenter&lt;/span&gt;(options);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; transformer = instrumenter.&lt;span class=&#34;property&#34;&gt;instrumentSync&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(instrumenter);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;hookRequire&lt;/span&gt;(matcher, transformer, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;postLoadHook&lt;/span&gt;: &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;file: &lt;span class=&#34;built_in&#34;&gt;any&lt;/span&gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;hookRequire&lt;/code&gt;方法接受3个参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;matcher&lt;/code&gt;，来自用户输入，用来判断当前文件是否要被hook&lt;/li&gt;
&lt;li&gt;&lt;code&gt;transformer&lt;/code&gt;，最关键的代码转换函数，读入代码，返回转换后的代码，插桩的转换由&lt;strong&gt;istanbul-lib-instrument&lt;/strong&gt;提供（原先的instrumenter.js），理论上也能支持其他的转换函数。这里使用&lt;code&gt;instrumentSync&lt;/code&gt;这个同步转换。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;options&lt;/code&gt;，支持verbose和postLoadHook两个选项&lt;ul&gt;
&lt;li&gt;&lt;code&gt;verbose&lt;/code&gt;，boolean，是否打印详细日志&lt;/li&gt;
&lt;li&gt;&lt;code&gt;postLoadHook&lt;/code&gt;，function，成功回调，函数会传入完整的文件名&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sourcemap处理&#34;&gt;&lt;a href=&#34;#sourcemap处理&#34; class=&#34;headerlink&#34; title=&#34;sourcemap处理&#34;&gt;&lt;/a&gt;sourcemap处理&lt;/h3&gt;&lt;p&gt;由于istanbuljs插桩的是编译后的js代码，需要借助sourcemap才能找到源文件的覆盖情况。编译后文件的覆盖情况对开发者没有借鉴意义。使用&lt;code&gt;hookRequire&lt;/code&gt;动态插桩时，还是需要自己处理sourcemap。&lt;/p&gt;
&lt;p&gt;老版本istanbul对sourcemap并不支持，需要借助&lt;a href=&#34;https://github.com/SitePen/remap-istanbul&#34;&gt;remap-istanbul&lt;/a&gt;才能实现。新版本的istanbuljs有一个独立的包&lt;strong&gt;istanbul-lib-source-maps&lt;/strong&gt;支持这方面的功能。遗憾的是，再次没有文档介绍如何使用。&lt;/p&gt;
&lt;p&gt;通过查看测试样例和阅读源码可以发现，istanbul-lib-instrument中的&lt;code&gt;instrumentSync&lt;/code&gt;支持第三个&lt;code&gt;sourcemap&lt;/code&gt;参数，如果传入，则会在采集文件的覆盖率数据中附加该文件的sourcemap信息到&lt;code&gt;inputSourceMap&lt;/code&gt;字段。而istanbul-lib-source-maps这个包可以对覆盖率数据中带有&lt;code&gt;inputSourceMap&lt;/code&gt;字段的数据进行反映射，得到源文件覆盖情况。最终达到我们的目的。&lt;/p&gt;
&lt;p&gt;源文件的sourcemap信息需要自己采集，这里借鉴的nyc中使用的方案：&lt;a href=&#34;https://github.com/thlorenz/convert-source-map&#34;&gt;convert-source-map&lt;/a&gt;。这个npm包可以读取文件末尾的sourcemap字符串并转换为sourcemap对象。所以整体上，实现sourcemap处理的流程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在hookRequire的transformer中拿到代码字符串&lt;/li&gt;
&lt;li&gt;通过convert-source-map的&lt;code&gt;fromSource&lt;/code&gt;方法拿到sourcemap对象&lt;/li&gt;
&lt;li&gt;在调用istanbul-lib-instrument的&lt;code&gt;instrumentSync&lt;/code&gt;方法时，传入该对象&lt;ol&gt;
&lt;li&gt;instrumenter内部的visitor.js调用source-coverage.js的&lt;code&gt;inputSourceMap&lt;/code&gt;方法将文件的sourcemap传入&lt;/li&gt;
&lt;li&gt;source-coverage.js将sourcemap存入覆盖率数据中&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;使用istanbul-lib-source-maps中的&lt;code&gt;transformCoverage&lt;/code&gt;方法转换覆盖率数据即可得到原始的覆盖率&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight ts&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; createInstrumenter &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;istanbul-lib-instrument&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; convert &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;convert-source-map&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;instrumenter = &lt;span class=&#34;title function_&#34;&gt;createInstrumenter&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Step 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;transformer&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Transformer&lt;/span&gt; = &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;code, options&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Step 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; sourceMap = convert.&lt;span class=&#34;title function_&#34;&gt;fromSource&lt;/span&gt;(code);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Step 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; transformed = instrumenter.&lt;span class=&#34;title function_&#34;&gt;instrumentSync&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        code,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        options.&lt;span class=&#34;property&#34;&gt;filename&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        sourceMap ? sourceMap.&lt;span class=&#34;title function_&#34;&gt;toObject&lt;/span&gt;() : &lt;span class=&#34;literal&#34;&gt;undefined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; transformed;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;hook&lt;/span&gt;(matcher, transformer, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;数据层&#34;&gt;&lt;a href=&#34;#数据层&#34; class=&#34;headerlink&#34; title=&#34;数据层&#34;&gt;&lt;/a&gt;数据层&lt;/h2&gt;&lt;p&gt;在覆盖率数据维护上，主要有下面几点工作：&lt;/p&gt;
&lt;h3 id=&#34;sourcemap处理-1&#34;&gt;&lt;a href=&#34;#sourcemap处理-1&#34; class=&#34;headerlink&#34; title=&#34;sourcemap处理&#34;&gt;&lt;/a&gt;sourcemap处理&lt;/h3&gt;&lt;p&gt;在代码插桩附带上sourcemap信息后，可以参考istanbul-lib-source-maps的测试用例，用&lt;code&gt;transformCoverage&lt;/code&gt;方法转换得到原始的覆盖率，即上一个同名小节中的第4步。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;getOriginalCoverage&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 采集到的覆盖率&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; currCoverage = &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;getCoverage&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; coverageMap = &lt;span class=&#34;title function_&#34;&gt;createCoverageMap&lt;/span&gt;(currCoverage);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; mapStore = &lt;span class=&#34;title function_&#34;&gt;createSourceMapStore&lt;/span&gt;(&amp;#123;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Step 4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; transformed = &lt;span class=&#34;keyword&#34;&gt;await&lt;/span&gt; mapStore.&lt;span class=&#34;title function_&#34;&gt;transformCoverage&lt;/span&gt;(coverageMap);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 对应到源文件的覆盖率&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; transformed.&lt;span class=&#34;property&#34;&gt;data&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;实现时，还需要注意对一些sourcemap结构体中的&lt;code&gt;sourceRoot&lt;/code&gt;进行特殊处理，避免反映射后得到嵌套的错误路径。&lt;/p&gt;
&lt;h3 id=&#34;覆盖率数据维护&#34;&gt;&lt;a href=&#34;#覆盖率数据维护&#34; class=&#34;headerlink&#34; title=&#34;覆盖率数据维护&#34;&gt;&lt;/a&gt;覆盖率数据维护&lt;/h3&gt;&lt;p&gt;在一个测试覆盖率的周期下，需要merge每次产生的新的覆盖率。同时，要能通过原始的覆盖率数据生成摘要，方便UI展示。&lt;/p&gt;
&lt;p&gt;istanbul-lib-coverage的&lt;code&gt;CoverageMap&lt;/code&gt;类型自带的&lt;code&gt;merge&lt;/code&gt;方法，可以merge新的覆盖率数据到源&lt;code&gt;CoverageMap&lt;/code&gt;中。&lt;/p&gt;
&lt;figure class=&#34;highlight ts&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;mergeClientCoverage&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;clientCoverage: CoverageMap&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!clientCoverage) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; currCoverage = &lt;span class=&#34;title function_&#34;&gt;getCoverageObject&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; coverageMap = &lt;span class=&#34;title function_&#34;&gt;createCoverageMap&lt;/span&gt;(currCoverage)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    coverageMap.&lt;span class=&#34;title function_&#34;&gt;merge&lt;/span&gt;(clientCoverage)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;基准覆盖数据维护&#34;&gt;&lt;a href=&#34;#基准覆盖数据维护&#34; class=&#34;headerlink&#34; title=&#34;基准覆盖数据维护&#34;&gt;&lt;/a&gt;基准覆盖数据维护&lt;/h3&gt;&lt;p&gt;有些js代码在未访问到业务代码时就会被执行到，比如&lt;code&gt;import&lt;/code&gt;和&lt;code&gt;export&lt;/code&gt;语句。这些覆盖率如果被清空，就再也无法通过端到端测试找回来，所以需要对于这部分覆盖数据专门维护，这里称作&lt;strong&gt;基准覆盖数据&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;实现上，在hook完成后，取得hook文件的覆盖率数据，即可得到。这里需要异步执行，保证能够取到。&lt;/p&gt;
&lt;figure class=&#34;highlight ts&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;hook&lt;/span&gt;(matcher, transformer, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;postLoadHook&lt;/span&gt;: &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;filename: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;matcher&lt;/span&gt;(filename) &amp;amp;&amp;amp; &lt;span class=&#34;built_in&#34;&gt;setTimeout&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Coverage&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;saveBaselineCoverage&lt;/span&gt;(filename));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;每次reset操作，实现上并非简单的清空数据，而是将覆盖率数据置为基准覆盖数据。&lt;/p&gt;
&lt;figure class=&#34;highlight ts&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// express&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;app.&lt;span class=&#34;title function_&#34;&gt;post&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;/reset&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;req, res&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;Coverage&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;restoreBaselineCoverage&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    res.&lt;span class=&#34;title function_&#34;&gt;json&lt;/span&gt;(&amp;#123; &lt;span class=&#34;attr&#34;&gt;code&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;数据上报&#34;&gt;&lt;a href=&#34;#数据上报&#34; class=&#34;headerlink&#34; title=&#34;数据上报&#34;&gt;&lt;/a&gt;数据上报&lt;/h3&gt;&lt;p&gt;数据上报只需实现定期上报，在上报时通过使用方预先定义好的中间件，便于使用方做预处理的工作。同时，提供一个关闭方法，可以在适当时机停止上报，形如：&lt;/p&gt;
&lt;figure class=&#34;highlight ts&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CoverageCollector&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;use&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;middleware: Middleware&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;middlewares&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;push&lt;/span&gt;(middleware);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;init&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;intervalFlag&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;intervalFlag&lt;/span&gt; = &lt;span class=&#34;built_in&#34;&gt;setInterval&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;send&lt;/span&gt;(), &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;interval&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;close&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;intervalFlag&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;clearInterval&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;intervalFlag&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;intervalFlag&lt;/span&gt; = &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;send&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; coverageData = &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;middlewares&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;reduce&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;data, middle&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;middle&lt;/span&gt;(data), coverage);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;await&lt;/span&gt; axios.&lt;span class=&#34;title function_&#34;&gt;post&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;url&lt;/span&gt;, coverageData);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (err) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Send coverage data failed: &amp;#x27;&lt;/span&gt;, err);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;视图层&#34;&gt;&lt;a href=&#34;#视图层&#34; class=&#34;headerlink&#34; title=&#34;视图层&#34;&gt;&lt;/a&gt;视图层&lt;/h2&gt;&lt;p&gt;视图化和可操作性上，有下面几点工作：&lt;/p&gt;
&lt;h3 id=&#34;路由提供&#34;&gt;&lt;a href=&#34;#路由提供&#34; class=&#34;headerlink&#34; title=&#34;路由提供&#34;&gt;&lt;/a&gt;路由提供&lt;/h3&gt;&lt;p&gt;中间件对于开发者的受益，体现在能够通过浏览器访问得到视图化和可操作性的覆盖率数据。在功能上，中间件提供5个路由：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/&lt;/code&gt;，GET，提供整个项目的覆盖率摘要页面&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/show&lt;/code&gt;，GET，访问文件或文件夹时，提供文件覆盖率详情或文件夹覆盖率摘要&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/reset&lt;/code&gt;，POST，重置当前项目的覆盖率，开始一次新的采集周期&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/object&lt;/code&gt;，GET，返回覆盖率的原始数据的JSON格式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/client&lt;/code&gt;，POST，用来接收来自浏览器端的覆盖率数据，merge到整体的覆盖率数据中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实现上，直接提供预定义好的app或express应用，npm包暴露一个attachHandler API，使用方直接挂载即可拥有上述功能。类似下面所示。&lt;/p&gt;
&lt;figure class=&#34;highlight ts&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;app.&lt;span class=&#34;title function_&#34;&gt;use&lt;/span&gt;(&lt;span class=&#34;title function_&#34;&gt;mount&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;/coverage&amp;#x27;&lt;/span&gt;, attachHandler.&lt;span class=&#34;title function_&#34;&gt;koa&lt;/span&gt;()));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;由于绑定一定发生在服务端环境，可以的话，需要顺便区分线上和其他环境。&lt;/p&gt;
&lt;h3 id=&#34;报告html页面生成&#34;&gt;&lt;a href=&#34;#报告html页面生成&#34; class=&#34;headerlink&#34; title=&#34;报告html页面生成&#34;&gt;&lt;/a&gt;报告html页面生成&lt;/h3&gt;&lt;p&gt;开发者应该能在每个测试周期内（即请求&lt;code&gt;/reset&lt;/code&gt;前），通过访问特定路由得到渲染好的html页面。istanbuljs通过istanbul-lib-report和istanbul-reports两个包相互配合实现导出report的功能。其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;istanbul-lib-report：重点负责构建文件层级结构和生成摘要数据，定义遍历每个节点时行为的几个抽象类&lt;/li&gt;
&lt;li&gt;istanbul-reports：重点实现各种各样导出格式下内容的生成（只考虑了生成静态文件），通过实现istanbul-lib-report中ReportBase基类，完成遍历中内容的生成&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面是README.md给出的示例&lt;/p&gt;
&lt;figure class=&#34;highlight ts&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; libReport = &lt;span class=&#34;built_in&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;istanbul-lib-report&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; reports = &lt;span class=&#34;built_in&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;istanbul-reports&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// coverageMap, for instance, obtained from istanbul-lib-coverage&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; coverageMap;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; configWatermarks = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;statements&lt;/span&gt;: [&lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;80&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;functions&lt;/span&gt;: [&lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;80&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;branches&lt;/span&gt;: [&lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;80&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;lines&lt;/span&gt;: [&lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;80&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// create a context for report generation&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; context = libReport.&lt;span class=&#34;title function_&#34;&gt;createContext&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;dir&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;report/output/dir&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// The summarizer to default to (may be overridden by some reports)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// values can be nested/flat/pkg. Defaults to &amp;#x27;pkg&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;defaultSummarizer&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;nested&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;watermarks&lt;/span&gt;: configWatermarks,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    coverageMap,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// create an instance of the relevant report class, passing the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// report name e.g. json/html/html-spa/text&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; report = reports.&lt;span class=&#34;title function_&#34;&gt;create&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;json&amp;#x27;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;skipEmpty&lt;/span&gt;: configSkipEmpty,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;skipFull&lt;/span&gt;: configSkipFull&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// call execute to synchronously create and write the report to disk&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;report.&lt;span class=&#34;title function_&#34;&gt;execute&lt;/span&gt;(context)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在istanbul-reports&amp;#x2F;lib&amp;#x2F;html中主要定义了html相关内容的生成，但是其中对于fs模块的使用，限制了该npm包在server侧的应用。经过&lt;a href=&#34;https://github.com/istanbuljs/istanbuljs/issues/530&#34;&gt;询问作者&lt;/a&gt;得到，istanbuljs并没有想法支持动态生成html响应。另外，istanbul-lib-report和istanbul-reports关联较多，新开发一个report类型用于生成html响应成本较大。&lt;/p&gt;
&lt;p&gt;综上，使用旧的方案，即旧版本istanbul生成html响应比较合适。&lt;/p&gt;
&lt;h2 id=&#34;新方案&#34;&gt;&lt;a href=&#34;#新方案&#34; class=&#34;headerlink&#34; title=&#34;新方案&#34;&gt;&lt;/a&gt;新方案&lt;/h2&gt;&lt;p&gt;上述工作完成后，最终可以实现一个新的覆盖率方案，基本解决了上面提到的侵入较多，适用场景有局限性，istanbul版本老旧，sourcemap支持不足等问题。&lt;/p&gt;
&lt;h2 id=&#34;已知问题&#34;&gt;&lt;a href=&#34;#已知问题&#34; class=&#34;headerlink&#34; title=&#34;已知问题&#34;&gt;&lt;/a&gt;已知问题&lt;/h2&gt;&lt;p&gt;上面的改进方案解决了方案接入上的困难，和实现上的一些纰漏，满足了开发者自测时的需求。但同时也有以下不足：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于更复杂的数据呈现和与业务流程的整合，即&lt;a href=&#34;https://shenlvmeng.github.io/blog/2020/04/16/fe-coverage-scheme/&#34;&gt;旧方案&lt;/a&gt;已知问题的第4点：“不能以分支、版本、仓库等空间维度或以历史信息、趋势等时间维度查看覆盖率报告，也没有diff内容覆盖率功能”，还需要更多努力。&lt;/li&gt;
&lt;li&gt;对于一些特殊场景，如没有使用babel转码的纯前端，不使用express或koa框架的服务端等无法支持&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考&#34;&gt;&lt;a href=&#34;#参考&#34; class=&#34;headerlink&#34; title=&#34;参考&#34;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/thlorenz/convert-source-map&#34;&gt;convert-source-map&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/istanbuljs/istanbuljs&#34;&gt;istanbuljs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/istanbuljs/nyc&#34;&gt;nyc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://shenlvmeng.github.com/blog/2020/04/16/istanbuljs/</guid>
            <title>JS代码覆盖率工具instanbuljs及其思路介绍</title>
            <link>http://shenlvmeng.github.com/blog/2020/04/16/istanbuljs/</link>
            <category>覆盖率</category>
            <category>istanbul</category>
            <category>istanbuljs</category>
            <pubDate>Thu, 16 Apr 2020 23:51:13 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/04/16/JEZ3WV.png&#34; alt=&#34;istanbul介绍&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://istanbul.js.org/&#34;&gt;intanbuljs&lt;/a&gt;是JS语言中最流行的覆盖率采集工具。其前身是个人发起的&lt;a href=&#34;https://github.com/gotwarlost/istanbul&#34;&gt;istanbul&lt;/a&gt;项目。日常使用中，经常将相关的CLI工具&lt;a href=&#34;https://github.com/istanbuljs/nyc&#34;&gt;nyc&lt;/a&gt;配合着&lt;a href=&#34;https://istanbul.js.org/docs/tutorials/&#34;&gt;流行的前端测试框架&lt;/a&gt;一起使用，达到在单元&amp;#x2F;集成&amp;#x2F;e2e测试的同时，输出测试覆盖率数据的效果。&lt;/p&gt;
&lt;p&gt;当然，你也可以通过&lt;a href=&#34;https://github.com/istanbuljs/babel-plugin-istanbul&#34;&gt;babel-plugin-istanbul&lt;/a&gt;配合测试框架&lt;a href=&#34;https://istanbul.js.org/docs/tutorials/&#34;&gt;使用&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;和istanbul的对比&#34;&gt;&lt;a href=&#34;#和istanbul的对比&#34; class=&#34;headerlink&#34; title=&#34;和istanbul的对比&#34;&gt;&lt;/a&gt;和istanbul的对比&lt;/h2&gt;&lt;p&gt;对于此前对前端测试覆盖率稍有了解了的人来说，可能更熟悉的是旧版的istanbul。istanbuljs在功能上和istanbul没有太大的区别，但在项目组织和实现细节上有着些许不同。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/istanbuljs/istanbuljs&#34;&gt;istanbuljs&lt;/a&gt;使用monorepo组织整个项目，将相对独立的插桩、hook、覆盖率、sourcemap、报告等拆分成多个包独立实现和发版&lt;/li&gt;
&lt;li&gt;使用babel实现源代码的AST解析和插桩（instrument）代码的生成&lt;/li&gt;
&lt;li&gt;内置支持sourcemap&lt;/li&gt;
&lt;li&gt;报告生成上取消了对express的依赖，只在本地产出报告&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;介绍&#34;&gt;&lt;a href=&#34;#介绍&#34; class=&#34;headerlink&#34; title=&#34;介绍&#34;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;对于希望借助istanbuljs实现代码覆盖率相关功能的（nyc也基于istanbuljs实现），了解其各个包工作原理将会有所帮助。下面就按功能范畴介绍各个包的实现原理。&lt;/p&gt;
&lt;h3 id=&#34;代码插桩和hook&#34;&gt;&lt;a href=&#34;#代码插桩和hook&#34; class=&#34;headerlink&#34; title=&#34;代码插桩和hook&#34;&gt;&lt;/a&gt;代码&lt;a href=&#34;https://en.wikipedia.org/wiki/Instrumentation_(computer_programming)&#34;&gt;插桩&lt;/a&gt;和hook&lt;/h3&gt;&lt;p&gt;覆盖率产出建立在&lt;strong&gt;代码插桩&lt;/strong&gt;的基础上。根据插桩时机，分为&lt;strong&gt;编译时插桩&lt;/strong&gt;和&lt;strong&gt;运行时插桩&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;编译时插桩&lt;/strong&gt;，即在代码转译过程中插入覆盖率采集代码，产出代码本身即拥有采集能力，譬如babel-plugin-istanbul&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;运行时插桩&lt;/strong&gt;，即产出代码本身不具有采集能力，在运行时通过hook的方式在使用的代码中插入覆盖率采集代码，譬如&lt;code&gt;hookRequire&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不同于使用babel的编译时插桩，运行时插桩需要额外的hook一步。插桩和hook分别由&lt;a href=&#34;https://github.com/istanbuljs/istanbuljs/tree/master/packages/istanbul-lib-instrument&#34;&gt;istanbul-lib-instrument&lt;/a&gt;和&lt;a href=&#34;https://github.com/istanbuljs/istanbuljs/tree/master/packages/istanbul-lib-hook&#34;&gt;istanbul-lib-hook&lt;/a&gt;实现。&lt;/p&gt;
&lt;h4 id=&#34;istanbul-lib-instrument&#34;&gt;&lt;a href=&#34;#istanbul-lib-instrument&#34; class=&#34;headerlink&#34; title=&#34;istanbul-lib-instrument&#34;&gt;&lt;/a&gt;istanbul-lib-instrument&lt;/h4&gt;&lt;figure class=&#34;highlight ts&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; createInstrumenter &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;istanbul-lib-instrument&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; instrumenter = &lt;span class=&#34;title function_&#34;&gt;createInstrumenter&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    coverageVariable,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;debug&lt;/span&gt;: options &amp;amp;&amp;amp; options.&lt;span class=&#34;property&#34;&gt;debug&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; transformed = instrumenter.&lt;span class=&#34;title function_&#34;&gt;instrumentSync&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    code,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    options.&lt;span class=&#34;property&#34;&gt;filename&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sourceMap ? sourceMap.&lt;span class=&#34;title function_&#34;&gt;toObject&lt;/span&gt;() : &lt;span class=&#34;literal&#34;&gt;undefined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;istanbul-lib-instrument利用babel实现了代码插桩。仓库暴露了3个API：&lt;/p&gt;
&lt;h5 id=&#34;createInstrumenter&#34;&gt;&lt;a href=&#34;#createInstrumenter&#34; class=&#34;headerlink&#34; title=&#34;createInstrumenter&#34;&gt;&lt;/a&gt;&lt;code&gt;createInstrumenter&lt;/code&gt;&lt;/h5&gt;&lt;p&gt;最主要的API。以入参作为配置项创建一个&lt;code&gt;Instrumenter&lt;/code&gt;实例，配置项如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;coverageVariable&lt;/code&gt; 覆盖率全局变量名，可选，默认&lt;code&gt;__coverage__&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;preserveComments&lt;/code&gt; 是否保留注释，可选，默认&lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;esModules&lt;/code&gt; 是否插桩ES6代码，可选，默认&lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;produceSourceMap&lt;/code&gt; 是否为插桩前后代码生成sourcemap，可选，默认&lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;debug&lt;/code&gt; 是否打印详细信息，可选，默认&lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;… 更多配置参见&lt;a href=&#34;https://github.com/istanbuljs/istanbuljs/blob/master/packages/istanbul-lib-instrument/api.md#parameters-4&#34;&gt;文档介绍&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通常使用时，配置项均使用默认值即可。&lt;code&gt;Instrumenter&lt;/code&gt;实例有下面几个重要的方法&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;instrumentSync&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;同步插桩代码，支持ES6和ES5，插桩ES6代码时，需要配置项中的&lt;code&gt;esModules&lt;/code&gt;为&lt;code&gt;true&lt;/code&gt;。解析代码出错时会抛出错误。方法返回插桩后的代码字符串，入参如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;code&lt;/code&gt; 代码字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filename&lt;/code&gt; 文件名（包含路径）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inputSourceMap&lt;/code&gt; 用来将当前代码的覆盖率反映射到源文件中的覆盖率，需要是sourcemap格式。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在指定了&lt;code&gt;inputSourceMap&lt;/code&gt;后，当前文件采集覆盖率时，会附带上传入的这个sourcemap，从而可以结合istanbul-lib-sourcemaps使用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;instrument&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;callback风格的插桩，此时抛出错误将通过回调的入参传入，而非直接抛出。插桩的代码也会在回调中传入而非直接返回。需要注意的是，回调的执行和语句的执行在同一个process tick中，而不是异步的。&lt;/p&gt;
&lt;p&gt;函数入参即&lt;code&gt;instrumentSync&lt;/code&gt;的第三个位置插入函数类型的&lt;code&gt;callback&lt;/code&gt;入参。&lt;/p&gt;
&lt;p&gt;剩余的两个方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lastFileCoverage&lt;/code&gt;，返回最近一次的文件覆盖率对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lastSourceMap&lt;/code&gt;，返回最近一次的文件的sourcemap&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;programVisitor&#34;&gt;&lt;a href=&#34;#programVisitor&#34; class=&#34;headerlink&#34; title=&#34;programVisitor&#34;&gt;&lt;/a&gt;&lt;code&gt;programVisitor&lt;/code&gt;&lt;/h5&gt;&lt;p&gt;&lt;code&gt;programVisitor&lt;/code&gt;是一个将babel用于插桩的适配器函数，该函数会返回一个具有&lt;code&gt;enter&lt;/code&gt;以及&lt;code&gt;exit&lt;/code&gt;方法的对象，这两个方法必须应用在&lt;code&gt;Program&lt;/code&gt;的enter和exit属性上，实现插桩效果。istanbuljs内部也是通过&lt;code&gt;programVisitor&lt;/code&gt;实现的功能。&lt;code&gt;programVisitor&lt;/code&gt;内部并不依赖babel的状态，因此也可以用在babel以外的环境。&lt;/p&gt;
&lt;p&gt;该函数支持以下入参：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;types&lt;/code&gt;，babel-types实例，语法节点类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sourceFilePath&lt;/code&gt;，文件路径，可选，默认为&lt;code&gt;unknown.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;opts&lt;/code&gt;，插桩配置项，可以参见&lt;a href=&#34;https://github.com/istanbuljs/istanbuljs/blob/master/packages/istanbul-lib-instrument/api.md#parameters-4&#34;&gt;文档介绍&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在函数内部集中了插桩的细节实现，即对于特定类型语法树节点插入对应逻辑。&lt;/p&gt;
&lt;h5 id=&#34;readInitialCoverage&#34;&gt;&lt;a href=&#34;#readInitialCoverage&#34; class=&#34;headerlink&#34; title=&#34;readInitialCoverage&#34;&gt;&lt;/a&gt;&lt;code&gt;readInitialCoverage&lt;/code&gt;&lt;/h5&gt;&lt;p&gt;配合&lt;code&gt;Instrumenter&lt;/code&gt;的&lt;code&gt;lastFileCoverage&lt;/code&gt;方法使用，读取文件的初始覆盖率。&lt;/p&gt;
&lt;p&gt;上面这些API中，最常用和最核心的即&lt;code&gt;instrumentSync&lt;/code&gt;方法。在实现上，方法分为下面几步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;根据&lt;code&gt;Instrumenter&lt;/code&gt;的配置项确定babel的配置项，同时，引入&lt;code&gt;programVisitor&lt;/code&gt;作为babel的plugin，指定遍历节点的操作&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;@babel/core&lt;/code&gt;的&lt;code&gt;transformSync&lt;/code&gt;API，得到生成的代码&lt;/li&gt;
&lt;li&gt;更新&lt;code&gt;fileCoverage&lt;/code&gt;和&lt;code&gt;sourcemap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;返回代码&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;istanbul-lib-hook&#34;&gt;&lt;a href=&#34;#istanbul-lib-hook&#34; class=&#34;headerlink&#34; title=&#34;istanbul-lib-hook&#34;&gt;&lt;/a&gt;istanbul-lib-hook&lt;/h4&gt;&lt;figure class=&#34;highlight ts&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; hookRequire &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;istanbul-lib-hook&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;hookRequire&lt;/span&gt;(matcher, transformer, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;verbose&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;postLoadHook&lt;/span&gt;: &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;filename: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;istanbul-lib-hook提供了下面一些API，用来hook JS中对代码的引用，其中后三个API都有对应的unhook API：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hookRequire&lt;/code&gt;，hook了&lt;code&gt;require&lt;/code&gt;引入的代码&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hookCreateScript&lt;/code&gt;，hook了&lt;code&gt;vm.createScript&lt;/code&gt;引入的代码&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hookRunInThisContext&lt;/code&gt;，hook了&lt;code&gt;vm.runInThisContext&lt;/code&gt;引入的代码&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hookRunInContext&lt;/code&gt;，hook了&lt;code&gt;vm.runInContext&lt;/code&gt;引入的代码、&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在其中最常用的是&lt;code&gt;hookRequire&lt;/code&gt;，入参如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;matcher&lt;/code&gt;，函数类型，接收文件的完整路径，返回bool类型，用来判断是否对文件插桩&lt;/li&gt;
&lt;li&gt;&lt;code&gt;transformer&lt;/code&gt;，函数类型，接收代码和文件路径，返回插桩后的代码，可以通过对上面提到的&lt;code&gt;Instrumenter&lt;/code&gt;的&lt;code&gt;instrumentSync&lt;/code&gt;封装得到&lt;/li&gt;
&lt;li&gt;&lt;code&gt;options&lt;/code&gt;，配置项&lt;ul&gt;
&lt;li&gt;&lt;code&gt;verbose&lt;/code&gt;，是否打印详细信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;postLoadHook&lt;/code&gt;，文件hook之后的回调&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;hookRequire&lt;/code&gt;借助Nodejs的Module加载机制实现，hook了后缀为&lt;code&gt;.js&lt;/code&gt;文件的编译过程，在每次&lt;code&gt;require&lt;/code&gt;的时候触发。详细的原理可以参见&lt;a href=&#34;https://shenlvmeng.github.io/blog/2020/04/16/fe-coverage-scheme/&#34;&gt;这里&lt;/a&gt;。唯一的不同是，在istanbuljs中，这一实现被封装在&lt;a href=&#34;https://github.com/istanbuljs/append-transform&#34;&gt;append-transform&lt;/a&gt;包中实现，来兼容异常情况。实现如下：&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; appendTransform = &lt;span class=&#34;built_in&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;append-transform&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;hookRequire&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;matcher, transformer, options&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; fn = &lt;span class=&#34;title function_&#34;&gt;transformFn&lt;/span&gt;(matcher, transformer, options.&lt;span class=&#34;property&#34;&gt;verbose&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; extensions = options.&lt;span class=&#34;property&#34;&gt;extensions&lt;/span&gt; || [&lt;span class=&#34;string&#34;&gt;&amp;#x27;.js&amp;#x27;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    extensions.&lt;span class=&#34;title function_&#34;&gt;forEach&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;ext&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;appendTransform&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;code, filename&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; ret = &lt;span class=&#34;title function_&#34;&gt;fn&lt;/span&gt;(code, filename);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (postLoadHook) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;title function_&#34;&gt;postLoadHook&lt;/span&gt;(filename);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ret.&lt;span class=&#34;property&#34;&gt;code&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;, ext);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;数据维护&#34;&gt;&lt;a href=&#34;#数据维护&#34; class=&#34;headerlink&#34; title=&#34;数据维护&#34;&gt;&lt;/a&gt;数据维护&lt;/h3&gt;&lt;p&gt;在代码插桩的基础上，产出的覆盖率数据会积累在全局变量上。在数据可视化和统计结果展示前，还需要将数据封装成更贴近实际场景的形态，便于进行合并、输出、摘要等操作。&lt;/p&gt;
&lt;p&gt;这部分工作在&lt;a href=&#34;https://github.com/istanbuljs/istanbuljs/tree/master/packages/istanbul-lib-coverage&#34;&gt;istanbul-lib-coverage&lt;/a&gt;中完成。&lt;/p&gt;
&lt;h4 id=&#34;覆盖率数据结构&#34;&gt;&lt;a href=&#34;#覆盖率数据结构&#34; class=&#34;headerlink&#34; title=&#34;覆盖率数据结构&#34;&gt;&lt;/a&gt;覆盖率数据结构&lt;/h4&gt;&lt;p&gt;下面是采集到的原始数据的结构定义，这也是istanbul-lib-coverage的基础。&lt;/p&gt;
&lt;figure class=&#34;highlight ts&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CoverageMapData&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [&lt;span class=&#34;attr&#34;&gt;key&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;]: &lt;span class=&#34;title class_&#34;&gt;FileCoverageData&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;FileCoverageData&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;statementMap&lt;/span&gt;: &amp;#123; [&lt;span class=&#34;attr&#34;&gt;key&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;]: &lt;span class=&#34;title class_&#34;&gt;Range&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;fnMap&lt;/span&gt;: &amp;#123; [&lt;span class=&#34;attr&#34;&gt;key&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;]: &lt;span class=&#34;title class_&#34;&gt;FunctionMapping&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;branchMap&lt;/span&gt;: &amp;#123; [&lt;span class=&#34;attr&#34;&gt;key&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;]: &lt;span class=&#34;title class_&#34;&gt;BranchMapping&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;s&lt;/span&gt;: &amp;#123; [&lt;span class=&#34;attr&#34;&gt;key&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;]: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;f&lt;/span&gt;: &amp;#123; [&lt;span class=&#34;attr&#34;&gt;key&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;]: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;b&lt;/span&gt;: &amp;#123; [&lt;span class=&#34;attr&#34;&gt;key&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;]: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;[] &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Location&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;line&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;column&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Range&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;start&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Location&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;end&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Location&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;BranchMapping&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;loc&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Range&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;locations&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Range&lt;/span&gt;[];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;line&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;FunctionMapping&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;name&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;decl&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Range&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;loc&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Range&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;line&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;istanbul-lib-coverage&#34;&gt;&lt;a href=&#34;#istanbul-lib-coverage&#34; class=&#34;headerlink&#34; title=&#34;istanbul-lib-coverage&#34;&gt;&lt;/a&gt;istanbul-lib-coverage&lt;/h4&gt;&lt;figure class=&#34;highlight ts&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; libCoverage &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;istanbul-lib-coverage&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; map = libCoverage.&lt;span class=&#34;title function_&#34;&gt;createCoverageMap&lt;/span&gt;(globalCoverageVar);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; summary = libCoverage.&lt;span class=&#34;title function_&#34;&gt;createCoverageSummary&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;map.&lt;span class=&#34;title function_&#34;&gt;merge&lt;/span&gt;(otherCoverageMap);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 获取摘要&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;map.&lt;span class=&#34;title function_&#34;&gt;files&lt;/span&gt;().&lt;span class=&#34;title function_&#34;&gt;forEach&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;f&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; fc = map.&lt;span class=&#34;title function_&#34;&gt;fileCoverageFor&lt;/span&gt;(f);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; s = fc.&lt;span class=&#34;title function_&#34;&gt;toSummary&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    summary.&lt;span class=&#34;title function_&#34;&gt;merge&lt;/span&gt;(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Global summary&amp;#x27;&lt;/span&gt;, summary);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;包暴露了3个API, 用来创建封装好的覆盖率数据。&lt;/p&gt;
&lt;h5 id=&#34;createCoverageMap&#34;&gt;&lt;a href=&#34;#createCoverageMap&#34; class=&#34;headerlink&#34; title=&#34;createCoverageMap&#34;&gt;&lt;/a&gt;&lt;code&gt;createCoverageMap&lt;/code&gt;&lt;/h5&gt;&lt;p&gt;传入原始数据（&lt;code&gt;CoverageMapData&lt;/code&gt;类型）或&lt;code&gt;CoverageMap&lt;/code&gt;类型，返回一个&lt;code&gt;CoverageMap&lt;/code&gt;类型对象，在覆盖率数据基础上，提供了方法，包含：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;merge&lt;/code&gt;，合并另一个&lt;code&gt;CoverageMap&lt;/code&gt;对象或数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filter&lt;/code&gt;，传入filter函数，删除部分覆盖率数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;toJSON&lt;/code&gt;，返回原始数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;files&lt;/code&gt;，返回文件列表&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fileCoverageFor&lt;/code&gt;，返回特定文件的覆盖率&lt;/li&gt;
&lt;li&gt;&lt;code&gt;addFileCoverage&lt;/code&gt;，增加特定文件的覆盖率&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getCoverageSummary&lt;/code&gt;，生成覆盖率摘要数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;摘要数据数据结构如下：&lt;/p&gt;
&lt;figure class=&#34;highlight ts&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CoverageSummaryData&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;lines&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Totals&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;statements&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Totals&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;branches&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Totals&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;functions&lt;/span&gt;: &lt;span class=&#34;title class_&#34;&gt;Totals&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Totals&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;total&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;covered&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;skipped&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;pct&lt;/span&gt;: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h5 id=&#34;createFileCoverage&#34;&gt;&lt;a href=&#34;#createFileCoverage&#34; class=&#34;headerlink&#34; title=&#34;createFileCoverage&#34;&gt;&lt;/a&gt;&lt;code&gt;createFileCoverage&lt;/code&gt;&lt;/h5&gt;&lt;p&gt;类似&lt;code&gt;createCoverageMap&lt;/code&gt;，通过传入原始数据或对象的方式，创建&lt;code&gt;FileCoverage&lt;/code&gt;对象。对象有如下方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getLineCoverage&lt;/code&gt;，返回每一行的执行次数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getUncoveredLines&lt;/code&gt;，返回未覆盖的行序号列表&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getBranchCoverageByLine&lt;/code&gt;，获取每个分支按行计算的覆盖率比例&lt;/li&gt;
&lt;li&gt;&lt;code&gt;toJSON&lt;/code&gt;，返回原始数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;merge&lt;/code&gt;，合并另一个&lt;code&gt;FileCoverage&lt;/code&gt;或原始数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;computeSimpleTotals&lt;/code&gt;，根据输入的属性，计算覆盖率摘要&lt;/li&gt;
&lt;li&gt;&lt;code&gt;computeBranchTotals&lt;/code&gt;，根据分支计算覆盖率摘要&lt;/li&gt;
&lt;li&gt;&lt;code&gt;resetHits&lt;/code&gt;，重置所有已执行的数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;toSummary&lt;/code&gt;，生成摘要数据&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;createCoverageSummary&#34;&gt;&lt;a href=&#34;#createCoverageSummary&#34; class=&#34;headerlink&#34; title=&#34;createCoverageSummary&#34;&gt;&lt;/a&gt;&lt;code&gt;createCoverageSummary&lt;/code&gt;&lt;/h5&gt;&lt;p&gt;根据输入数据，创建摘要。方法较简单：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;merge&lt;/code&gt;，合并一个摘要数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;toJSON&lt;/code&gt;，返回原始摘要数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isEmpty&lt;/code&gt;，是否为空&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;整体来看istanbul-lib-coverage所做的工作，即按照约定好的格式，将数据组织起来，为可视化输出做了基础。&lt;/p&gt;
&lt;h4 id=&#34;istanbul-lib-source-maps&#34;&gt;&lt;a href=&#34;#istanbul-lib-source-maps&#34; class=&#34;headerlink&#34; title=&#34;istanbul-lib-source-maps&#34;&gt;&lt;/a&gt;istanbul-lib-source-maps&lt;/h4&gt;&lt;figure class=&#34;highlight ts&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; createSourceMapStore &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;istanbul-lib-source-maps&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; libCoverage &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;istanbul-lib-coverage&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; mapStore = &lt;span class=&#34;title function_&#34;&gt;createSourceMapStore&lt;/span&gt;(&amp;#123;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; coverageMap = libCoverage.&lt;span class=&#34;title function_&#34;&gt;createCoverageMap&lt;/span&gt;(coverageData);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; transformed = &lt;span class=&#34;keyword&#34;&gt;await&lt;/span&gt; mapStore.&lt;span class=&#34;title function_&#34;&gt;transformCoverage&lt;/span&gt;(coverageMap);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; transformedCoverage = transformed.&lt;span class=&#34;property&#34;&gt;data&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(transformedCoverage);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;绝大多数情况下，istanbuljs采集到的都是转译后目标文件的代码覆盖率，这个数据对于开发者来讲意义不大，需要将这里采集到的行列数据反映射到源文件的位置上。内置&lt;a href=&#34;https://github.com/istanbuljs/istanbuljs/tree/master/packages/istanbul-lib-source-maps&#34;&gt;istanbul-lib-source-maps&lt;/a&gt;包用来处理这种情况的。&lt;/p&gt;
&lt;p&gt;istanbul-lib-source-maps只负责转换代码位置和目录，并不能负责收集代码或文件的sourcemap信息，这一步交给使用者自己实现。就像我们在&lt;code&gt;instrumentSync&lt;/code&gt;一节提到的，通过第三个入参&lt;code&gt;inputSourceMap&lt;/code&gt;可以产出满足istanbul-lib-source-maps需要的覆盖率数据，从而借助istanbul-lib-source-maps获取到源文件的覆盖率。&lt;/p&gt;
&lt;p&gt;这个包本身只暴露&lt;code&gt;createSourceMapStore&lt;/code&gt;这一个API，通过传入配置的方式，初始化一个sourcemap的store。配置项如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;verbose&lt;/code&gt;，是否打印详细信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;baseDir&lt;/code&gt;，sourcemap文件的基础目录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SourceStore&lt;/code&gt;，一个&lt;code&gt;SourceStore&lt;/code&gt;对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sourceStoreOpts&lt;/code&gt;，初始化&lt;code&gt;SourceStore&lt;/code&gt;对象的参数列表&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;初始化好的&lt;code&gt;MapStore&lt;/code&gt;对象有如下方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;registerURL&lt;/code&gt;，通过dataURL注册一个sourcemap到store中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;registerMap&lt;/code&gt;，通过sourcemap对象注册一个sourcemap到store中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getSourceMapSync&lt;/code&gt;，从当前store中获取指定文件的sourcemap&lt;/li&gt;
&lt;li&gt;&lt;code&gt;addInputSourceMapsSync&lt;/code&gt;，为当前覆盖率数据同步添加store中的sourcemap数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sourceFinder&lt;/code&gt;，寻找指定文件的源文件路径&lt;/li&gt;
&lt;li&gt;&lt;code&gt;transformCoverage&lt;/code&gt;，利用当前store中的sourcemap信息，将覆盖率对应到源文件上。&lt;strong&gt;覆盖率信息中有&lt;code&gt;inputSourceMap&lt;/code&gt;字段时，优先使用&lt;code&gt;inputSourceMap&lt;/code&gt;字段里的sourcemap信息&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dispose&lt;/code&gt;，清除store数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;包中的其余文件也都基于&lt;code&gt;MapStore&lt;/code&gt;实现诸如路径转换，数据转换等工具方法。更多细节，可以参见&lt;a href=&#34;https://github.com/istanbuljs/istanbuljs/tree/master/packages/istanbul-lib-source-maps&#34;&gt;源文件&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;使用时，有两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先导入没有sourcemap的覆盖率信息，再逐个注册sourcemap到store中，最后执行&lt;code&gt;transformCoverage&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;直接导入有&lt;code&gt;inputSourceMap&lt;/code&gt;信息的覆盖率数据，执行&lt;code&gt;transformCoverage&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以根据实际场景选择使用方式。例如，nyc中就使用的第2种方式，利用&lt;a href=&#34;https://github.com/thlorenz/convert-source-map&#34;&gt;convert-source-map&lt;/a&gt;采集到文件内的sourcemap信息，在代码插桩时传入。&lt;/p&gt;
&lt;h3 id=&#34;可视化与报告&#34;&gt;&lt;a href=&#34;#可视化与报告&#34; class=&#34;headerlink&#34; title=&#34;可视化与报告&#34;&gt;&lt;/a&gt;可视化与报告&lt;/h3&gt;&lt;p&gt;覆盖率工具的最终目的是向使用者呈现可读的数据样式，通常是以UI或文件的形式。因此，要将上一章中维护好的数据按使用者需求输出。可视化和报告由&lt;a href=&#34;https://github.com/istanbuljs/istanbuljs/tree/master/packages/istanbul-lib-report&#34;&gt;istanbul-lib-report&lt;/a&gt;以及&lt;a href=&#34;https://github.com/istanbuljs/istanbuljs/tree/master/packages/istanbul-reports&#34;&gt;istanbul-reports&lt;/a&gt;实现。&lt;/p&gt;
&lt;p&gt;其中，前者定义了产出报告的抽象行为，后者实现了各种具体的报告形态。两个包结合在一起使用的方式如下：&lt;/p&gt;
&lt;figure class=&#34;highlight ts&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; libReport &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;istanbul-lib-report&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; reports &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;istanbul-reports&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; coverageMap;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; configWatermarks = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;statements&lt;/span&gt;: [&lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;80&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;functions&lt;/span&gt;: [&lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;80&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;branches&lt;/span&gt;: [&lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;80&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;lines&lt;/span&gt;: [&lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;80&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; context = libReport.&lt;span class=&#34;title function_&#34;&gt;createContext&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;dir&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;report/output/dir&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 摘要的生成方式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 可以是nested/flat/pkg 默认为&amp;#x27;pkg&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;defaultSummarizer&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;nested&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;watermarks&lt;/span&gt;: configWatermarks,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    coverageMap,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; report = reports.&lt;span class=&#34;title function_&#34;&gt;create&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;json&amp;#x27;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;skipEmpty&lt;/span&gt;: configSkipEmpty,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;skipFull&lt;/span&gt;: configSkipFull&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 同步操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;report.&lt;span class=&#34;title function_&#34;&gt;execute&lt;/span&gt;(context);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;istanbul-lib-report&#34;&gt;&lt;a href=&#34;#istanbul-lib-report&#34; class=&#34;headerlink&#34; title=&#34;istanbul-lib-report&#34;&gt;&lt;/a&gt;istanbul-lib-report&lt;/h4&gt;&lt;p&gt;维护好的覆盖率数据会和具体的文件节点绑定，形成树状数据结构。遍历每个树节点就是产出报告的基本步骤，只不过不同报告格式，遍历节点的操作也不同。istanbul-lib-report中定义了基本的树状结构和遍历规则。&lt;/p&gt;
&lt;p&gt;包暴露了3个API，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;createContext&lt;/code&gt;，创建一个包含产出报告配置信息context对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getDefaultWatermarks&lt;/code&gt;，返回默认的评级指标，默认是0到50到80，分别对应差中好&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ReportBase&lt;/code&gt;，所有报告必须继承的基类&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中context和ReportBase是配合实现生成报告的。先来看简单的ReportBase，&lt;code&gt;ReportBase&lt;/code&gt;类中简单地描述了管理摘要树的方法和定义了通用的&lt;code&gt;execute&lt;/code&gt;方法来生成报告。具体会在istanbul-reports中提到。&lt;/p&gt;
&lt;p&gt;再来看Context类。Context入参配置项包含：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dir&lt;/code&gt;，产出报告的目标目录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;watermarks&lt;/code&gt;，评级指标，默认使用0-50-80-100&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sourceFinder&lt;/code&gt;，通过文件路径返回代码的函数，默认为文件读取操作&lt;/li&gt;
&lt;li&gt;&lt;code&gt;coverageMap&lt;/code&gt;，覆盖率数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defaultSummarizer&lt;/code&gt;，摘要树生成的风格，有&lt;code&gt;flat&lt;/code&gt;,&lt;code&gt;pkg&lt;/code&gt;,&lt;code&gt;nested&lt;/code&gt;3种选择&lt;ul&gt;
&lt;li&gt;&lt;code&gt;flat&lt;/code&gt;，所有文件全部打平到1层里，挂载到最近的公共祖先上&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pkg&lt;/code&gt;，所有文件向上追溯1层文件夹，挂载到最近的公共祖先上&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nested&lt;/code&gt;，所有文件向上追溯，直到追溯到最近的公共祖先上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;构建好的&lt;code&gt;Context&lt;/code&gt;有一个&lt;code&gt;writer&lt;/code&gt;属性挂载在&lt;code&gt;this&lt;/code&gt;和&lt;code&gt;this.data&lt;/code&gt;上，它决定了报告的产出形式，目前这个包提供了两种产出形式：&lt;strong&gt;文件&lt;/strong&gt;和&lt;strong&gt;字符串&lt;/strong&gt;，后者只用在产出XML数据时。其余报告基本都通过文件的形式产出，这也是istanbuljs和istanbul的一大不同。在istanbul中，html可以借助express依赖以HTML响应的形式返回。&lt;/p&gt;
&lt;p&gt;文件的输出类定义在&lt;code&gt;file-writer.js&lt;/code&gt;中，其中的&lt;code&gt;FileWriter&lt;/code&gt;定义了基本的&lt;code&gt;copyFile&lt;/code&gt;，&lt;code&gt;writerForDir&lt;/code&gt;，&lt;code&gt;writeFile&lt;/code&gt;操作用来递归的复制和写入文件。另外在&lt;code&gt;writeFile&lt;/code&gt;中，根据目标是否是file，选择使用&lt;code&gt;ConsoleWriter&lt;/code&gt;或者&lt;code&gt;FileContentWriter&lt;/code&gt;。这两者继承自基本的&lt;code&gt;ContentWriter&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight ts&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ContentWriter&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;colorize&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;str &lt;span class=&#34;comment&#34;&gt;/*, clazz*/&lt;/span&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; str;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;println&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;str&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;write&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;`&lt;span class=&#34;subst&#34;&gt;$&amp;#123;str&amp;#125;&lt;/span&gt;\n`&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;close&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;FileContentWriter&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_ inherited__&#34;&gt;ContentWriter&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;fd&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;super&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;fd&lt;/span&gt; = fd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;write&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;str&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        fs.&lt;span class=&#34;title function_&#34;&gt;writeSync&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;fd&lt;/span&gt;, str);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;close&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        fs.&lt;span class=&#34;title function_&#34;&gt;closeSync&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;fd&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ConsoleWriter&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_ inherited__&#34;&gt;ContentWriter&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;write&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;str&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (capture) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            output += str;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            process.&lt;span class=&#34;property&#34;&gt;stdout&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;write&lt;/span&gt;(str);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;colorize&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;str, clazz&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; colors = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;low&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;31;1&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;medium&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;33;1&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;high&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;32;1&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (supportsColor.&lt;span class=&#34;property&#34;&gt;stdout&lt;/span&gt; &amp;amp;&amp;amp; colors[clazz]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;`\u001b[&lt;span class=&#34;subst&#34;&gt;$&amp;#123;colors[clazz]&amp;#125;&lt;/span&gt;m&lt;span class=&#34;subst&#34;&gt;$&amp;#123;str&amp;#125;&lt;/span&gt;\u001b[0m`&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; str;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;字符串的输出类只有&lt;code&gt;XMLWriter&lt;/code&gt;，位于&lt;code&gt;xml-writer.js&lt;/code&gt;中，在其中定义了xml的开闭标签和缩进操作。&lt;/p&gt;
&lt;p&gt;这个Context还有一些方法提供给reports使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getWriter&lt;/code&gt;&amp;#x2F;&lt;code&gt;getXMLWriter&lt;/code&gt;，返回输出数据的writer&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getSource&lt;/code&gt;，通过&lt;code&gt;sourceFinder&lt;/code&gt;寻找源码&lt;/li&gt;
&lt;li&gt;&lt;code&gt;classForPercent&lt;/code&gt;，将评价转化为HTML类名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getVisitor&lt;/code&gt;，获取一个遍历的vistor对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getTree&lt;/code&gt;，根据摘要风格返回一个用于遍历的树，&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面具体介绍vistor和tree的概念&lt;/p&gt;
&lt;h5 id=&#34;Visitor和BaseTree&#34;&gt;&lt;a href=&#34;#Visitor和BaseTree&#34; class=&#34;headerlink&#34; title=&#34;Visitor和BaseTree&#34;&gt;&lt;/a&gt;&lt;code&gt;Visitor&lt;/code&gt;和&lt;code&gt;BaseTree&lt;/code&gt;&lt;/h5&gt;&lt;p&gt;&lt;code&gt;Visitor&lt;/code&gt;类和&lt;code&gt;BaseNode&lt;/code&gt;类定义了遍历和节点的基本操作，其中Visitor使用代理人模式，在构造时传入一个回调函数对象，当&lt;code&gt;visitor&lt;/code&gt;对象触发特定事件时，会将当前节点和状态交给回调函数，实现遍历效果。&lt;/p&gt;
&lt;figure class=&#34;highlight ts&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Visitor&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;delegate&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;delegate&lt;/span&gt; = delegate;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;string&#34;&gt;&amp;#x27;Start&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;End&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;Summary&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;SummaryEnd&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;Detail&amp;#x27;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .&lt;span class=&#34;title function_&#34;&gt;map&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;k&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;`on&lt;span class=&#34;subst&#34;&gt;$&amp;#123;k&amp;#125;&lt;/span&gt;`&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .&lt;span class=&#34;title function_&#34;&gt;forEach&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;fn&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;defineProperty&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;Visitor&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;, fn, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;writable&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;value&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;node, state&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;delegate&lt;/span&gt;[fn] === &lt;span class=&#34;string&#34;&gt;&amp;#x27;function&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;delegate&lt;/span&gt;[fn](node, state);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;相对应的&lt;code&gt;BaseNode&lt;/code&gt;类定义了用于遍历的&lt;code&gt;visit&lt;/code&gt;方法&lt;/p&gt;
&lt;figure class=&#34;highlight ts&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;BaseNode&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 递归遍历&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;visit&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;visitor, state&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 文件夹没有详情，只有摘要&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;isSummary&lt;/span&gt;()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            visitor.&lt;span class=&#34;title function_&#34;&gt;onSummary&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;, state);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            visitor.&lt;span class=&#34;title function_&#34;&gt;onDetail&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;, state);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;getChildren&lt;/span&gt;().&lt;span class=&#34;title function_&#34;&gt;forEach&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;child&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            child.&lt;span class=&#34;title function_&#34;&gt;visit&lt;/span&gt;(visitor, state);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;isSummary&lt;/span&gt;()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            visitor.&lt;span class=&#34;title function_&#34;&gt;onSummaryEnd&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;, state);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;最后在&lt;code&gt;BaseTree&lt;/code&gt;中从Root开始遍历即可：&lt;/p&gt;
&lt;figure class=&#34;highlight ts&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;BaseTree&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;root&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;root&lt;/span&gt; = root;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;getRoot&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;root&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;visit&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;visitor, state&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!(visitor &lt;span class=&#34;keyword&#34;&gt;instanceof&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Visitor&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            visitor = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Visitor&lt;/span&gt;(visitor);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        visitor.&lt;span class=&#34;title function_&#34;&gt;onStart&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;getRoot&lt;/span&gt;(), state);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;getRoot&lt;/span&gt;().&lt;span class=&#34;title function_&#34;&gt;visit&lt;/span&gt;(visitor, state);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        visitor.&lt;span class=&#34;title function_&#34;&gt;onEnd&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;getRoot&lt;/span&gt;(), state);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;不同的摘要风格形成的树状结构不同，它们都是&lt;code&gt;ReportTree&lt;/code&gt;类型，而&lt;code&gt;ReportTree&lt;/code&gt;正是继承自&lt;code&gt;BaseTree&lt;/code&gt;。&lt;code&gt;ReportTree&lt;/code&gt;由继承自&lt;code&gt;BaseNode&lt;/code&gt;的&lt;code&gt;ReportNode&lt;/code&gt;构建。在&lt;code&gt;ReportNode&lt;/code&gt;上定义了和覆盖率或文件操作相关的一些方法，如&lt;code&gt;getFileCoverage&lt;/code&gt;，&lt;code&gt;getCoverageSummary&lt;/code&gt;等。&lt;/p&gt;
&lt;p&gt;一个context内的visitor和tree可以通过&lt;code&gt;getVisitor&lt;/code&gt;和&lt;code&gt;getTree&lt;/code&gt;得到&lt;/p&gt;
&lt;h4 id=&#34;istanbul-reports&#34;&gt;&lt;a href=&#34;#istanbul-reports&#34; class=&#34;headerlink&#34; title=&#34;istanbul-reports&#34;&gt;&lt;/a&gt;istanbul-reports&lt;/h4&gt;&lt;p&gt;istanbul-reports包中定义了种类繁多的导出格式，在入口文件通过指定的配置项选择使用，如上面样例中的&lt;code&gt;const report = reports.create(&amp;#39;json&amp;#39;, &amp;#123;/* ... */&amp;#125;)&lt;/code&gt;即使用&lt;code&gt;json/lib/index.js&lt;/code&gt;下导出的&lt;code&gt;JsonReport&lt;/code&gt;类。istanbul-reports所有格式都基于istanbul-lib-report中基类的定义。这里以简单的json格式为例。&lt;/p&gt;
&lt;p&gt;其中定义了对于&lt;code&gt;onStart&lt;/code&gt;，&lt;code&gt;onDetail&lt;/code&gt;，&lt;code&gt;onEnd&lt;/code&gt;的定义和上面&lt;code&gt;BaseNode&lt;/code&gt;中介绍的回调函数相对应，在遍历&lt;code&gt;ReportTree&lt;/code&gt;的各个阶段被触发，通过context的writer去输出。而writer从&lt;code&gt;ReportBase&lt;/code&gt;中可以发现是通过context确定的，在context中默认是filewriter。而遍历是如何执行的呢？&lt;/p&gt;
&lt;p&gt;回头看下ReportBase的实现。&lt;/p&gt;
&lt;figure class=&#34;highlight ts&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; _summarizer = &lt;span class=&#34;title class_&#34;&gt;Symbol&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;ReportBase.#summarizer&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ReportBase&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;opts = &amp;#123;&amp;#125;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;[_summarizer] = opts.&lt;span class=&#34;property&#34;&gt;summarizer&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;execute&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;context&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        context.&lt;span class=&#34;title function_&#34;&gt;getTree&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;[_summarizer]).&lt;span class=&#34;title function_&#34;&gt;visit&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;, context);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在&lt;code&gt;execute&lt;/code&gt;中传入context，即可把带有覆盖率信息的树形数据结构交给report代表的visitor遍历，逐个节点地打印出覆盖率报告。&lt;/p&gt;
&lt;p&gt;其余类型的报告也是类似的原理。&lt;/p&gt;
&lt;h2 id=&#34;更多&#34;&gt;&lt;a href=&#34;#更多&#34; class=&#34;headerlink&#34; title=&#34;更多&#34;&gt;&lt;/a&gt;更多&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://shenlvmeng.github.io/blog/2020/04/16/fe-coverage-scheme/&#34;&gt;前端代码覆盖率实时统计方案探索&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://shenlvmeng.github.io/blog/2020/04/17/fe-coverage-improve/&#34;&gt;前端代码覆盖率实时统计改进方案&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://shenlvmeng.github.com/blog/2020/04/16/fe-coverage-scheme/</guid>
            <title>前端代码覆盖率实时统计方案探索</title>
            <link>http://shenlvmeng.github.com/blog/2020/04/16/fe-coverage-scheme/</link>
            <category>前端</category>
            <category>端到端测试</category>
            <category>istanbul</category>
            <category>代码覆盖率</category>
            <category>istanbul-middleware</category>
            <category>代码插桩</category>
            <category>require钩子</category>
            <category>babel-plugin-istanbul</category>
            <pubDate>Thu, 16 Apr 2020 23:46:17 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;背景&#34;&gt;&lt;a href=&#34;#背景&#34; class=&#34;headerlink&#34; title=&#34;背景&#34;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;随着业务增长，代码逐渐复杂，前端有些时候不能通过自测保证代码质量，而测试同学从用户角度进行端到端的case测试，也有可能存在测试case不够全面或重复覆盖的情况。而测试覆盖质量只能通过测试case评审来保证，没有量化的、直观的客观数据。&lt;/p&gt;
&lt;p&gt;然而前端场景和后端不同，UI测试因为业务形态原因，变更会更频繁，编写和维护单测成本比较高。因此目前且短期内前端工程还是以传统的用户角度的端到端测试为主。另外，在SSR项目中，前端开发也会书写API层，这部分代码也需要测试覆盖到。目前前端生态还没有一个能同时覆盖UI层和API层的覆盖率统计框架，需要借助已有的工具实现这点。&lt;/p&gt;
&lt;h3 id=&#34;解决问题&#34;&gt;&lt;a href=&#34;#解决问题&#34; class=&#34;headerlink&#34; title=&#34;解决问题&#34;&gt;&lt;/a&gt;解决问题&lt;/h3&gt;&lt;p&gt;提升开发自测质量和提测质量，避免case覆盖不全的问题，同时有直观的统计指标衡量。&lt;/p&gt;
&lt;h3 id=&#34;预期效果&#34;&gt;&lt;a href=&#34;#预期效果&#34; class=&#34;headerlink&#34; title=&#34;预期效果&#34;&gt;&lt;/a&gt;预期效果&lt;/h3&gt;&lt;p&gt;分3个阶段：&lt;/p&gt;
&lt;p&gt;第一阶段：&lt;strong&gt;基本可用版本&lt;/strong&gt;，能够采集UI层和API层的代码覆盖率，覆盖率采集过程对前端开发透明，无需开发业务以外的开发成本。能够打开浏览器页面直观查看各个代码覆盖率。&lt;/p&gt;
&lt;p&gt;第二阶段：&lt;strong&gt;丰富统计数据&lt;/strong&gt;，在第一阶段基础上，能够&lt;em&gt;记录&lt;/em&gt;不同分支甚至不同版本历史的覆盖率，能够借助gitlab只查看&lt;em&gt;增量文件&lt;/em&gt;的覆盖率。&lt;/p&gt;
&lt;p&gt;第三阶段：&lt;strong&gt;打通QA平台&lt;/strong&gt;，在第二阶段基础上，接入QA已有平台或自建平台，在第三方页面查看数据；形成一套覆盖率采集方案。&lt;/p&gt;
&lt;h3 id=&#34;使用场景&#34;&gt;&lt;a href=&#34;#使用场景&#34; class=&#34;headerlink&#34; title=&#34;使用场景&#34;&gt;&lt;/a&gt;使用场景&lt;/h3&gt;&lt;p&gt;本地、特性分支上使用&lt;/p&gt;
&lt;h3 id=&#34;技术选型&#34;&gt;&lt;a href=&#34;#技术选型&#34; class=&#34;headerlink&#34; title=&#34;技术选型&#34;&gt;&lt;/a&gt;技术选型&lt;/h3&gt;&lt;p&gt;覆盖率采集建立在&lt;a href=&#34;https://en.wikipedia.org/wiki/Instrumentation_(computer_programming)&#34;&gt;代码插桩&lt;/a&gt;基础上。前端生态里比较成熟的工具是&lt;a href=&#34;https://github.com/gotwarlost/istanbul&#34;&gt;istanbuljs&lt;/a&gt;，该库的0.x.x版本位于&lt;a href=&#34;https://github.com/gotwarlost/istanbul&#34;&gt;istanbul&lt;/a&gt;库。关于该库的科普介绍，可以阅读ruanyifeng的&lt;a href=&#34;https://www.ruanyifeng.com/blog/2015/06/istanbul.html&#34;&gt;科普文&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;istanbul提供两种插桩方式：&lt;strong&gt;编译时&lt;/strong&gt;和&lt;strong&gt;运行时&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编译时&lt;ul&gt;
&lt;li&gt;nyc命令行的&lt;a href=&#34;https://github.com/istanbuljs/nyc/blob/master/docs/instrument.md&#34;&gt;instrument子命令&lt;/a&gt;可以完成手动插桩&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/istanbuljs/babel-plugin-istanbul&#34;&gt;babel-plugin-istanbul&lt;/a&gt;可以在使用babel的前端工程里，在&lt;strong&gt;编译阶段&lt;/strong&gt;植入插桩代码。TypeScript项目可以使用&lt;a href=&#34;https://www.npmjs.com/package/@istanbuljs/nyc-config-typescript&#34;&gt;@istanbuljs&amp;#x2F;nyc-config-typescript&lt;/a&gt;插件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;运行时，需要借助&lt;a href=&#34;https://github.com/gotwarlost/istanbul-middleware&#34;&gt;istanbul-middleware&lt;/a&gt;中间件的帮助&lt;ul&gt;
&lt;li&gt;&lt;code&gt;im.hookLoader&lt;/code&gt;，适用于服务端文件的动态插桩，方法利用istanbul-lib-hook中的&lt;code&gt;hookRequire&lt;/code&gt;方法，hook被require引入的&lt;strong&gt;js文件&lt;/strong&gt;，返回插桩后的js文件。因此需要在业务代码require前引入&lt;/li&gt;
&lt;li&gt;&lt;code&gt;im.createClientHandler&lt;/code&gt;，用于客户端&lt;strong&gt;js文件&lt;/strong&gt;的动态插桩，它会把指定根路径下的js文件请求拦截，返回插桩后的代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在后台项目中，服务端代码使用&lt;code&gt;.ts&lt;/code&gt;书写，本地使用&lt;code&gt;ts-node&lt;/code&gt;启动，boe和线上使用&lt;code&gt;tsc&lt;/code&gt;编译后的js文件启动。前端代码使用&lt;code&gt;.ts&lt;/code&gt;书写，本地使用webpack + babel预编译成js。结合这个场景看，在node侧使用&lt;code&gt;hookLoader&lt;/code&gt;，在UI测使用babel-plugin-istanbul插件更合适。&lt;/p&gt;
&lt;p&gt;总体来讲，工作分两步：&lt;strong&gt;代码插桩&lt;/strong&gt;和&lt;strong&gt;可视化&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;代码插桩&#34;&gt;&lt;a href=&#34;#代码插桩&#34; class=&#34;headerlink&#34; title=&#34;代码插桩&#34;&gt;&lt;/a&gt;代码插桩&lt;/h3&gt;&lt;p&gt;规划里一切功能的基础和本质都来自代码插桩。&lt;/p&gt;
&lt;h4 id=&#34;client端&#34;&gt;&lt;a href=&#34;#client端&#34; class=&#34;headerlink&#34; title=&#34;client端&#34;&gt;&lt;/a&gt;client端&lt;/h4&gt;&lt;p&gt;client端可以直接使用目前仍良好维护的&lt;a href=&#34;https://github.com/istanbuljs/babel-plugin-istanbul&#34;&gt;babel-plugin-istanbul&lt;/a&gt;插件。在&lt;code&gt;.babelrc&lt;/code&gt;中引入相关配置：&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;env&amp;quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;test&amp;quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;string&#34;&gt;&amp;quot;plugins&amp;quot;&lt;/span&gt;: [&lt;span class=&#34;string&#34;&gt;&amp;quot;istanbul&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;仅在test环境下开启该插件。可以用&lt;a href=&#34;https://www.npmjs.com/package/cross-env&#34;&gt;cross-env&lt;/a&gt;这样的工具设置&lt;code&gt;NODE_ENV=test&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;scripts&amp;quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;test&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;cross-env NODE_ENV=test npm run start&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;插件还有&lt;code&gt;include&lt;/code&gt;，&lt;code&gt;exclude&lt;/code&gt;，&lt;code&gt;useInlineSourceMaps&lt;/code&gt;这样的配置项。&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;env&amp;quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;test&amp;quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;string&#34;&gt;&amp;quot;plugins&amp;quot;&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        [&lt;span class=&#34;string&#34;&gt;&amp;quot;istanbul&amp;quot;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;string&#34;&gt;&amp;quot;useInlineSourceMaps&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;string&#34;&gt;&amp;quot;exclude&amp;quot;&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;&amp;quot;**/*.spec.js&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;插桩后的业务代码如下所示：&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; cov_ac7rkuoyv = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; path = &lt;span class=&#34;string&#34;&gt;&amp;quot;/Users/test/shenlvmeng/nyc-demo/src/App.js&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; hash = &lt;span class=&#34;string&#34;&gt;&amp;quot;7dec600464f484deef063d183319f809a7c25687&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;variable language_&#34;&gt;global&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Function&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;return this&amp;quot;&lt;/span&gt;)();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; gcv = &lt;span class=&#34;string&#34;&gt;&amp;quot;__coverage__&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; coverageData = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;path&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;/Users/shenlvmeng/nyc-demo/src/App.js&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;statementMap&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;string&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;start&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;attr&#34;&gt;line&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;attr&#34;&gt;column&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;end&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;attr&#34;&gt;line&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;14&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;attr&#34;&gt;column&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;fnMap&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;string&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;name&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;App&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;decl&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;attr&#34;&gt;start&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;line&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;column&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;attr&#34;&gt;end&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;line&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;column&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;loc&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;attr&#34;&gt;start&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;line&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;column&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;15&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;attr&#34;&gt;end&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;line&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;33&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;column&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;line&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;branchMap&lt;/span&gt;: &amp;#123;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;s&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;string&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;f&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;string&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;b&lt;/span&gt;: &amp;#123;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;_coverageSchema&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;43e27e138ebf9cfc5966b082cf9a028302ed4184&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;hash&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;7dec600464f484deef063d183319f809a7c25687&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; coverage = &lt;span class=&#34;variable language_&#34;&gt;global&lt;/span&gt;[gcv] || (&lt;span class=&#34;variable language_&#34;&gt;global&lt;/span&gt;[gcv] = &amp;#123;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (coverage[path] &amp;amp;&amp;amp; coverage[path].&lt;span class=&#34;property&#34;&gt;hash&lt;/span&gt; === hash) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; coverage[path];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; coverage[path] = coverageData;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; _jsxFileName = &lt;span class=&#34;string&#34;&gt;&amp;quot;/Users/test/shenlvmeng/nyc-demo/src/App.js&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;App&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  cov_ac7rkuoyv.&lt;span class=&#34;property&#34;&gt;f&lt;/span&gt;[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  cov_ac7rkuoyv.&lt;span class=&#34;property&#34;&gt;s&lt;/span&gt;[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;(react__WEBPACK_IMPORTED_MODULE_0__[&lt;span class=&#34;string&#34;&gt;&amp;quot;useEffect&amp;quot;&lt;/span&gt;])(&lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cov_ac7rkuoyv.&lt;span class=&#34;property&#34;&gt;f&lt;/span&gt;[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cov_ac7rkuoyv.&lt;span class=&#34;property&#34;&gt;s&lt;/span&gt;[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    (&lt;span class=&#34;keyword&#34;&gt;async&lt;/span&gt; () =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      cov_ac7rkuoyv.&lt;span class=&#34;property&#34;&gt;f&lt;/span&gt;[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      cov_ac7rkuoyv.&lt;span class=&#34;property&#34;&gt;s&lt;/span&gt;[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;window&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;__coverage__&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      cov_ac7rkuoyv.&lt;span class=&#34;property&#34;&gt;s&lt;/span&gt;[&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;]++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      axios__WEBPACK_IMPORTED_MODULE_1___default.&lt;span class=&#34;property&#34;&gt;a&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;defaults&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;headers&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;post&lt;/span&gt;[&lt;span class=&#34;string&#34;&gt;&amp;#x27;Access-Control-Allow-Origin&amp;#x27;&lt;/span&gt;] = &lt;span class=&#34;string&#34;&gt;&amp;#x27;*&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      cov_ac7rkuoyv.&lt;span class=&#34;property&#34;&gt;s&lt;/span&gt;[&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;]++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      axios__WEBPACK_IMPORTED_MODULE_1___default.&lt;span class=&#34;property&#34;&gt;a&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;post&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;http://localhost:4000/coverage/client&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;variable language_&#34;&gt;window&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;__coverage__&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;)();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;, []);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  cov_ac7rkuoyv.&lt;span class=&#34;property&#34;&gt;s&lt;/span&gt;[&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;]++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; react__WEBPACK_IMPORTED_MODULE_0___default.&lt;span class=&#34;property&#34;&gt;a&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;createElement&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;div&amp;quot;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;className&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;App&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;__source&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;fileName&lt;/span&gt;: _jsxFileName,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;lineNumber&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;__self&lt;/span&gt;: &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;, react__WEBPACK_IMPORTED_MODULE_0___default.&lt;span class=&#34;property&#34;&gt;a&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;createElement&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;header&amp;quot;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;className&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;App-header&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;__source&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;fileName&lt;/span&gt;: _jsxFileName,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;lineNumber&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;17&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;__self&lt;/span&gt;: &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;, react__WEBPACK_IMPORTED_MODULE_0___default.&lt;span class=&#34;property&#34;&gt;a&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;createElement&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;img&amp;quot;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;src&lt;/span&gt;: _logo_svg__WEBPACK_IMPORTED_MODULE_2___default.&lt;span class=&#34;property&#34;&gt;a&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;className&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;App-logo&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;alt&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;logo&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;__source&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;fileName&lt;/span&gt;: _jsxFileName,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;lineNumber&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;18&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;__self&lt;/span&gt;: &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;), react__WEBPACK_IMPORTED_MODULE_0___default.&lt;span class=&#34;property&#34;&gt;a&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;createElement&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;__source&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;fileName&lt;/span&gt;: _jsxFileName,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;lineNumber&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;19&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;__self&lt;/span&gt;: &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;, &lt;span class=&#34;string&#34;&gt;&amp;quot;Edit &amp;quot;&lt;/span&gt;, react__WEBPACK_IMPORTED_MODULE_0___default.&lt;span class=&#34;property&#34;&gt;a&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;createElement&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;code&amp;quot;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;__source&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;fileName&lt;/span&gt;: _jsxFileName,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;lineNumber&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;__self&lt;/span&gt;: &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;, &lt;span class=&#34;string&#34;&gt;&amp;quot;src/App.js&amp;quot;&lt;/span&gt;), &lt;span class=&#34;string&#34;&gt;&amp;quot; and save to reload.&amp;quot;&lt;/span&gt;), react__WEBPACK_IMPORTED_MODULE_0___default.&lt;span class=&#34;property&#34;&gt;a&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;createElement&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;className&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;App-link&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;href&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;https://reactjs.org&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;target&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;_blank&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;rel&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;noopener noreferrer&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;__source&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;fileName&lt;/span&gt;: _jsxFileName,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;lineNumber&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;22&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;__self&lt;/span&gt;: &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;, &lt;span class=&#34;string&#34;&gt;&amp;quot;Learn React&amp;quot;&lt;/span&gt;)));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;可以看到针对每个文件，插桩后的代码新建了一个函数，用于更新这个文件的覆盖率信息。在业务代码执行时，会不断更新对应的计数器。前端代码run起来后，可以通过&lt;code&gt;window.__coverage&lt;/code&gt;直接得到当前项目的覆盖率情况。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;覆盖率计算原理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;拿到代码字符串后，使用AST解析库解析出语法树，在对应树节点插入覆盖率语句，之后将语法树转成插桩后的代码。这个过程在0.x.x版本的实现可以参加&lt;a href=&#34;http://gotwarlost.github.io/istanbul/public/apidocs/files/lib_instrumenter.js.html#l467&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;0.x.x版本的instanbul使用&lt;a href=&#34;https://github.com/jquery/esprima&#34;&gt;esprima&lt;/a&gt;和&lt;a href=&#34;https://github.com/estools/escodegen&#34;&gt;escodegen&lt;/a&gt;。在最新的istanbuljs的&lt;a href=&#34;https://github.com/istanbuljs/istanbuljs/tree/master/packages/istanbul-lib-instrument&#34;&gt;istanbul-lib-instrument&lt;/a&gt;中使用babel相关的包完成解析、生成等功能，但插桩思路不变。&lt;/p&gt;
&lt;h4 id=&#34;node端&#34;&gt;&lt;a href=&#34;#node端&#34; class=&#34;headerlink&#34; title=&#34;node端&#34;&gt;&lt;/a&gt;node端&lt;/h4&gt;&lt;p&gt;node端使用istanbul-middleware中间件的&lt;code&gt;hookLoader&lt;/code&gt;完成动态插桩。该中间件为&lt;a href=&#34;https://github.com/gotwarlost/istanbul&#34;&gt;instanbul&lt;/a&gt;作者所写，所依赖的istanbul版本是目前已经不再维护的0.x.x版本，同时中间件也是基于express所写，年代较老。中间件的设计和我们的场景有些距离，因此需要在其基础上进行改造。&lt;/p&gt;
&lt;p&gt;在预期场景下，我们主要使用&lt;code&gt;im.hookLoader&lt;/code&gt;和&lt;code&gt;im.createHandler&lt;/code&gt;两个方法。&lt;/p&gt;
&lt;h5 id=&#34;im-hookLoader&#34;&gt;&lt;a href=&#34;#im-hookLoader&#34; class=&#34;headerlink&#34; title=&#34;im.hookLoader&#34;&gt;&lt;/a&gt;&lt;code&gt;im.hookLoader&lt;/code&gt;&lt;/h5&gt;&lt;p&gt;&lt;code&gt;im.hookLoader&lt;/code&gt;只是在instanbul hook的基础上做的简单封装。看&lt;a href=&#34;http://gotwarlost.github.io/istanbul/public/apidocs/files/lib_hook.js.html#l77&#34;&gt;文档&lt;/a&gt;可以发现：&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;hookRequire&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;matcher, transformer, options&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    options = options || &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; fn = &lt;span class=&#34;title function_&#34;&gt;transformFn&lt;/span&gt;(matcher, transformer, options.&lt;span class=&#34;property&#34;&gt;verbose&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        postLoadHook = options.&lt;span class=&#34;property&#34;&gt;postLoadHook&lt;/span&gt; &amp;amp;&amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;typeof&lt;/span&gt; options.&lt;span class=&#34;property&#34;&gt;postLoadHook&lt;/span&gt; === &lt;span class=&#34;string&#34;&gt;&amp;#x27;function&amp;#x27;&lt;/span&gt; ? options.&lt;span class=&#34;property&#34;&gt;postLoadHook&lt;/span&gt; : &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;Module&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;_extensions&lt;/span&gt;[&lt;span class=&#34;string&#34;&gt;&amp;#x27;.js&amp;#x27;&lt;/span&gt;] = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;module&lt;/span&gt;, filename&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; ret = &lt;span class=&#34;title function_&#34;&gt;fn&lt;/span&gt;(fs.&lt;span class=&#34;title function_&#34;&gt;readFileSync&lt;/span&gt;(filename, &lt;span class=&#34;string&#34;&gt;&amp;#x27;utf8&amp;#x27;&lt;/span&gt;), filename);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (ret.&lt;span class=&#34;property&#34;&gt;changed&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;variable language_&#34;&gt;module&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;_compile&lt;/span&gt;(ret.&lt;span class=&#34;property&#34;&gt;code&lt;/span&gt;, filename);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;originalLoader&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;module&lt;/span&gt;, filename);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (postLoadHook) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;postLoadHook&lt;/span&gt;(filename);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;hook require是利用CommonJS的模块加载规范实现的。这里介绍下模块加载流程相关的背景。&lt;/p&gt;
&lt;h5 id=&#34;模块加载流程&#34;&gt;&lt;a href=&#34;#模块加载流程&#34; class=&#34;headerlink&#34; title=&#34;模块加载流程&#34;&gt;&lt;/a&gt;模块加载流程&lt;/h5&gt;&lt;p&gt;require和module来自nodejs的&lt;a href=&#34;https://nodejs.org/api/modules.html#modules_module&#34;&gt;Modules&lt;/a&gt;模块。无需显式引入（原因下面会提）即可使用里面的&lt;code&gt;module&lt;/code&gt;, &lt;code&gt;require&lt;/code&gt;, &lt;code&gt;exports&lt;/code&gt;的关键字。在require一个包时，分为了&lt;strong&gt;解析、加载、封装、求值、缓存&lt;/strong&gt;几步。&lt;/p&gt;
&lt;ol start=&#34;0&#34;&gt;
&lt;li&gt;解析一步交给&lt;code&gt;module.require(modulename)&lt;/code&gt;方法实现，该方法调用静态方法&lt;code&gt;Module._load&lt;/code&gt;加载模块。&lt;/li&gt;
&lt;li&gt;加载时首先调用&lt;code&gt;Module._resolveFilename&lt;/code&gt;解析路径，解析过程大致分为粗筛和精确定位&lt;/li&gt;
&lt;li&gt;粗筛，原生模块则直接返回模块名，否则从当前目录逐步向上寻找node_modules目录下的模块文件夹&lt;/li&gt;
&lt;li&gt;精确定位，首先在上面的目录下寻找有无没有拓展名的同名文件，再寻找以&lt;code&gt;js&lt;/code&gt;、&lt;code&gt;json&lt;/code&gt;、&lt;code&gt;node&lt;/code&gt;拓展名结尾的文件；再寻找同名目录下&lt;code&gt;package.json&lt;/code&gt;中&lt;code&gt;main&lt;/code&gt;字段指定的路径，最后寻找同名目录下的index.js&lt;/li&gt;
&lt;li&gt;得到路径后，先试图从&lt;code&gt;Module._cache&lt;/code&gt;中寻找有无模块缓存，若没有，则新建模块对象并缓存，之后调用&lt;code&gt;module.load()&lt;/code&gt;方法加载该模块&lt;/li&gt;
&lt;li&gt;node默认只能load以&lt;code&gt;js&lt;/code&gt;, &lt;code&gt;json&lt;/code&gt;, &lt;code&gt;node&lt;/code&gt;结尾的文件，除此之外均视为&lt;code&gt;.js&lt;/code&gt;文件&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Module&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;load&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;filename&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;filename&lt;/span&gt; = filename;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;paths&lt;/span&gt; = &lt;span class=&#34;title class_&#34;&gt;Module&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;_nodeModulePaths&lt;/span&gt;(path.&lt;span class=&#34;title function_&#34;&gt;dirname&lt;/span&gt;(filename));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; extension = path.&lt;span class=&#34;title function_&#34;&gt;extname&lt;/span&gt;(filename) || &lt;span class=&#34;string&#34;&gt;&amp;#x27;.js&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!&lt;span class=&#34;title class_&#34;&gt;Module&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;_extensions&lt;/span&gt;[extension]) extension = &lt;span class=&#34;string&#34;&gt;&amp;#x27;.js&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;Module&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;_extensions&lt;/span&gt;[extension](&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;, filename);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;loaded&lt;/span&gt; = &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;&lt;code&gt;Module._extensions&lt;/code&gt;键值对默认只包含对上述三种文件的处理。其中json和node文件较简单&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;json，读取文件 &amp;#x3D;&amp;gt; &lt;code&gt;JSON.parse&lt;/code&gt; &amp;#x3D;&amp;gt; 注入到&lt;code&gt;module.exports&lt;/code&gt;上&lt;/li&gt;
&lt;li&gt;node，调用&lt;code&gt;process.dlopen&lt;/code&gt;加载&lt;/li&gt;
&lt;li&gt;js，调用&lt;code&gt;module._compile()&lt;/code&gt;处理文件内容&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;&lt;code&gt;module._compile&lt;/code&gt;执行js文件编译，编译前调用&lt;code&gt;Module.wrap&lt;/code&gt;方法将模块封装在函数内，这也是&lt;code&gt;module&lt;/code&gt;，&lt;code&gt;require&lt;/code&gt;，&lt;code&gt;exports&lt;/code&gt;，&lt;code&gt;__filename&lt;/code&gt;，&lt;code&gt;__dirname&lt;/code&gt;可以直接在模块内使用，且模块间的&lt;code&gt;module&lt;/code&gt;，&lt;code&gt;require&lt;/code&gt;，&lt;code&gt;exports&lt;/code&gt;不相互干扰的原因。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Module&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;wrap&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;script&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Module&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;wrapper&lt;/span&gt;[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] + script + &lt;span class=&#34;title class_&#34;&gt;Module&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;wrapper&lt;/span&gt;[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Module&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;wrapper&lt;/span&gt; = [&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;#x27;(function (exports, require, module, __filename, __dirname) &amp;#123; &amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;#x27;\n&amp;#125;);&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;wrap后，调用&lt;code&gt;vm.runInThisContext&lt;/code&gt;将字符串转为可执行的js函数。最后一句执行封装的函数，注入当前module的相关信息到模块中&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Module&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;_compile&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;content, filename&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; wrapper = &lt;span class=&#34;title class_&#34;&gt;Module&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;wrap&lt;/span&gt;(content);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; compiledWrapper = vm.&lt;span class=&#34;title function_&#34;&gt;runInThisContext&lt;/span&gt;(wrapper, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;filename&lt;/span&gt;: filename,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;lineOffset&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;displayErrors&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 执行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  result = compiledWrapper.&lt;span class=&#34;title function_&#34;&gt;call&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;exports&lt;/span&gt;, &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;exports&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;require&lt;/span&gt;, &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;, filename, dirname);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;实际上，可以在REPL中输入&lt;code&gt;require.extensions&lt;/code&gt;看到nodejs支持的3种文件拓展。而hookRequire所做的就是hook了加载&lt;code&gt;.js&lt;/code&gt;的步骤，在交由&lt;code&gt;module._compile&lt;/code&gt;处理前，前进行了插桩处理。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：&lt;code&gt;ts-node&lt;/code&gt;能够import&lt;code&gt;.ts&lt;/code&gt;文件也是因为在&lt;code&gt;module._extendsion&lt;/code&gt;中添加了&lt;code&gt;.ts&lt;/code&gt;的处理方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;综上，在本地测试时，由于通过&lt;code&gt;ts-node&lt;/code&gt;启动，&lt;code&gt;im.hookLoader&lt;/code&gt;只会hook&lt;code&gt;.js&lt;/code&gt;文件（0.x.x版本），会导致没有服务端代码覆盖率，上线前tsc后，就可以顺利注入，从&lt;code&gt;global.__coverage__&lt;/code&gt;中拿到覆盖率数据。&lt;/p&gt;
&lt;h4 id=&#34;数据采集&#34;&gt;&lt;a href=&#34;#数据采集&#34; class=&#34;headerlink&#34; title=&#34;数据采集&#34;&gt;&lt;/a&gt;数据采集&lt;/h4&gt;&lt;p&gt;服务端覆盖率数据采集借助上述的&lt;code&gt;im.hookLoader&lt;/code&gt;就已完成。前端页面的代码覆盖率需要自行周期性上报。&lt;code&gt;im.createHandler&lt;/code&gt;提供的API可以接收前端覆盖率，该方法创建的路由回调会调用&lt;code&gt;utils.mergeFileCoverage&lt;/code&gt;最终将增量覆盖率数据累加在&lt;code&gt;global.__coverage__&lt;/code&gt;中。&lt;/p&gt;
&lt;h3 id=&#34;可视化&#34;&gt;&lt;a href=&#34;#可视化&#34; class=&#34;headerlink&#34; title=&#34;可视化&#34;&gt;&lt;/a&gt;可视化&lt;/h3&gt;&lt;p&gt;可视化需要借助istanbul（0.x版本）本身提供的相关API，又或者直接更方便地使用&lt;code&gt;im.createHandler&lt;/code&gt;。其方便封装了一些istanbul的API，实现的简单的可视化功能，更多介绍可以直接参考istanbul-middleware使用文档。&lt;/p&gt;
&lt;h4 id=&#34;im-createHandler&#34;&gt;&lt;a href=&#34;#im-createHandler&#34; class=&#34;headerlink&#34; title=&#34;im.createHandler&#34;&gt;&lt;/a&gt;&lt;code&gt;im.createHandler&lt;/code&gt;&lt;/h4&gt;&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;createHandler&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;opts&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; app = &lt;span class=&#34;title function_&#34;&gt;express&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//send static file for /asset/asset-name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    app.&lt;span class=&#34;title function_&#34;&gt;use&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;/asset&amp;#x27;&lt;/span&gt;, express.&lt;span class=&#34;title function_&#34;&gt;static&lt;/span&gt;(&lt;span class=&#34;variable constant_&#34;&gt;ASSETS_DIR&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    app.&lt;span class=&#34;title function_&#34;&gt;use&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;/asset&amp;#x27;&lt;/span&gt;, express.&lt;span class=&#34;title function_&#34;&gt;static&lt;/span&gt;(path.&lt;span class=&#34;title function_&#34;&gt;join&lt;/span&gt;(&lt;span class=&#34;variable constant_&#34;&gt;ASSETS_DIR&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;vendor&amp;#x27;&lt;/span&gt;)));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    app.&lt;span class=&#34;title function_&#34;&gt;use&lt;/span&gt;(bodyParser.&lt;span class=&#34;title function_&#34;&gt;urlencoded&lt;/span&gt;(urlOptions));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    app.&lt;span class=&#34;title function_&#34;&gt;use&lt;/span&gt;(bodyParser.&lt;span class=&#34;title function_&#34;&gt;json&lt;/span&gt;(jsonOptions));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    app.&lt;span class=&#34;title function_&#34;&gt;get&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;/&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;req, res&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        core.&lt;span class=&#34;title function_&#34;&gt;render&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;, res, origUrl);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;从上面的使用上看，&lt;code&gt;im.createHandler&lt;/code&gt;的使用是和express绑定的，并不适配koa的风格，要想使用在非express服务端场景里，或者增加额外功能，就需要重构这个方法。不过，由于一些API的使用从0.x.x版本迁移到新的monorepo的版本并不平滑，且新版本API暂无文档。所以尽管instanbul已经不再更新，对istanbul-middleware中间件的重构还只能保持对旧版本istanbul的依赖。&lt;/p&gt;
&lt;h4 id=&#34;重构设计&#34;&gt;&lt;a href=&#34;#重构设计&#34; class=&#34;headerlink&#34; title=&#34;重构设计&#34;&gt;&lt;/a&gt;重构设计&lt;/h4&gt;&lt;p&gt;为了兼容koa环境，从istanbul-middleware库fork新版本istanbul-koa-middleware，使用ts重写。去掉无用的代码，重点需要改造的就是&lt;code&gt;createKoaHandler&lt;/code&gt;方法。&lt;/p&gt;
&lt;p&gt;为减少istanbul-koa-middleware使用方的依赖，考虑使用类似istanbul-middleware的形式，在&lt;code&gt;createKoaHandler&lt;/code&gt;内部定义koa应用，使用方只需引入koa-mount和istanbul-koa-middleware即可在任意路由上挂载覆盖率可视化相关子路由。&lt;/p&gt;
&lt;p&gt;除此之外：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用koa-static替代&lt;code&gt;express.static&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用koa-mount替代&lt;code&gt;app.use(&amp;#39;/some/path&amp;#39;, someMiddleware)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用koa-router替代&lt;code&gt;app.get&lt;/code&gt;和&lt;code&gt;app.post&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;定义&lt;code&gt;WebFramework&lt;/code&gt;接口，掩盖对回调中&lt;code&gt;res&lt;/code&gt;使用方式的不同&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight ts&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;WebFramework&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;setHeader&lt;/span&gt;: &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;key: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;, value: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;void&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;status&lt;/span&gt;: &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;code: &lt;span class=&#34;built_in&#34;&gt;number&lt;/span&gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;void&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;write&lt;/span&gt;: &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;content: &lt;span class=&#34;built_in&#34;&gt;any&lt;/span&gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;void&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;end&lt;/span&gt;: &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;content?: &lt;span class=&#34;built_in&#34;&gt;string&lt;/span&gt;&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;void&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;genWebFrameworkCtxFromKoaCtx&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;ctx: Koa.ParameterizedContext&lt;/span&gt;): &lt;span class=&#34;title class_&#34;&gt;WebFramework&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;setHeader&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;key, value&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ctx.&lt;span class=&#34;title function_&#34;&gt;set&lt;/span&gt;(key, value);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;status&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;code&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ctx.&lt;span class=&#34;property&#34;&gt;status&lt;/span&gt; = code;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;write&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;content&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ctx.&lt;span class=&#34;property&#34;&gt;res&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;write&lt;/span&gt;(content);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;end&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;content&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ctx.&lt;span class=&#34;property&#34;&gt;res&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;end&lt;/span&gt;(content);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这样，重构后的istanbul-koa-middleware就可以帮我们实现最简单的覆盖数据可视化了。后续的新增功能，也都建立在对&lt;code&gt;createHandler&lt;/code&gt;函数的改造上。&lt;/p&gt;
&lt;h3 id=&#34;已知问题&#34;&gt;&lt;a href=&#34;#已知问题&#34; class=&#34;headerlink&#34; title=&#34;已知问题&#34;&gt;&lt;/a&gt;已知问题&lt;/h3&gt;&lt;p&gt;在上面工作完成后，第一阶段目标基本已经实现。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/04/16/JEZliq.png&#34; alt=&#34;效果图1&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/04/16/JEZ8zT.png&#34; alt=&#34;效果图2&#34;&gt;&lt;/p&gt;
&lt;p&gt;但是，还有很多可以优化的地方，这也是后续阶段需要解决的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务端代码如果没有正确设置source-map，覆盖率展示的文件是tsc之后的js文件，可读性差&lt;/li&gt;
&lt;li&gt;需要区分环境，在特定环境下才对代码文件插桩&lt;/li&gt;
&lt;li&gt;本地环境下可以访问到原始的ts文件，上传测试环境后，由于不会打包上传源文件，覆盖率报告将看不了原始ts文件的覆盖详情&lt;/li&gt;
&lt;li&gt;覆盖率报告功能太简单，不能以分支、版本、仓库等空间维度或以历史信息、趋势等时间维度查看&lt;br&gt;，也没有diff内容覆盖率功能&lt;/li&gt;
&lt;li&gt;出现了一些意义不大的文件，需要剔除&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;更多&#34;&gt;&lt;a href=&#34;#更多&#34; class=&#34;headerlink&#34; title=&#34;更多&#34;&gt;&lt;/a&gt;更多&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tech.youzan.com/front-coverage/&#34;&gt;前端精准测试探索：覆盖率实时统计工具&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tech.kujiale.com/qian-duan-fu-gai-lu/&#34;&gt;基于Istanbul 优雅地搭建前端JS覆盖率平台&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/requiring-modules-in-node-js-everything-you-need-to-know-e7fbd119be8/&#34;&gt;Requiring modules in Node.js: Everything you need to know&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://juejin.im/post/5d84456851882556f33d5fb0&#34;&gt;node模块加载机制 - 掘金&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://shenlvmeng.github.com/blog/2020/04/16/crx-intro/</guid>
            <title>Chrome Extension开发须知</title>
            <link>http://shenlvmeng.github.com/blog/2020/04/16/crx-intro/</link>
            <category>chrome</category>
            <category>crx</category>
            <category>扩展</category>
            <pubDate>Thu, 16 Apr 2020 23:42:29 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;基本概念&#34;&gt;&lt;a href=&#34;#基本概念&#34; class=&#34;headerlink&#34; title=&#34;基本概念&#34;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;p&gt;Extension是由HTML、CSS、JavaScript和图片等其他资源文件组成的压缩包。它可以增强浏览器体验，实现个性化。&lt;/p&gt;
&lt;h2 id=&#34;Files&#34;&gt;&lt;a href=&#34;#Files&#34; class=&#34;headerlink&#34; title=&#34;Files&#34;&gt;&lt;/a&gt;Files&lt;/h2&gt;&lt;p&gt;Extension没有做目录的约定，但是它们需要已配置文件的形式写在manifest中。&lt;code&gt;manifest.json&lt;/code&gt;中描述了Extension的基本信息、使用能力和重要文件。&lt;/p&gt;
&lt;h3 id=&#34;manifest-json&#34;&gt;&lt;a href=&#34;#manifest-json&#34; class=&#34;headerlink&#34; title=&#34;manifest.json&#34;&gt;&lt;/a&gt;&lt;code&gt;manifest.json&lt;/code&gt;&lt;/h3&gt;&lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// Required&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;manifest_version&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;My Extension&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;version&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;versionString&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// Recommended&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;default_locale&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;A plain text description&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;icons&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;...&lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// Pick one (or none)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;browser_action&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;...&lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;page_action&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;...&lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// Optional&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;action&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; ...&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;author&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; ...&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;automation&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; ...&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;background&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Recommended&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;persistent&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Optional&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;service_worker&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;chrome_settings_overrides&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;...&lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;chrome_ui_overrides&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;bookmarks_ui&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;&amp;quot;remove_bookmark_shortcut&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;&amp;quot;remove_button&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;chrome_url_overrides&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;...&lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;commands&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;...&lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;content_capabilities&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; ...&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;content_scripts&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;...&lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;content_security_policy&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;policyString&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;converted_from_user_script&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; ...&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;current_locale&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; ...&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;declarative_net_request&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; ...&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;devtools_page&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;devtools.html&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;event_rules&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;...&lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;externally_connectable&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;matches&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;*://*.example.com/*&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;file_browser_handlers&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;...&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;file_system_provider_capabilities&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;configurable&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;multiple_mounts&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;source&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;network&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;homepage_url&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;http://path/to/homepage&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;import&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;attr&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;incognito&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;spanning, split, or not_allowed&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;input_components&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; ...&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;key&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;publicKey&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;minimum_chrome_version&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;versionString&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;nacl_modules&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;...&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;oauth2&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; ...&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;offline_enabled&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;omnibox&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;keyword&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;aString&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;optional_permissions&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;tabs&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;options_page&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;options.html&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;options_ui&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;chrome_style&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;page&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;options.html&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;permissions&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;tabs&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;platforms&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; ...&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;replacement_web_app&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; ...&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;requirements&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;...&lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;sandbox&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;...&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;short_name&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Short Name&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;signature&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; ...&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;spellcheck&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; ...&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;storage&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;managed_schema&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;schema.json&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;system_indicator&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; ...&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;tts_engine&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;...&lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;update_url&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;http://path/to/updateInfo.xml&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;version_name&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;aString&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;web_accessible_resources&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;...&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;manifest_version&lt;/code&gt;表明使用manifest的格式版本号，目前是整数2&lt;/li&gt;
&lt;li&gt;&lt;code&gt;icons&lt;/code&gt;推荐使用PNG格式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;browser_action&lt;/code&gt;和&lt;code&gt;page_action&lt;/code&gt;类型二选一，前者用于所有页面，后者用于特定一些页面。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;background&lt;/code&gt;可以指定在后台运行的脚本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chrome&lt;/code&gt;打头的三个配置可以定制浏览器本身的UI或行为&lt;/li&gt;
&lt;li&gt;&lt;code&gt;commands&lt;/code&gt;快捷键配置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;content_scripts&lt;/code&gt;描述需要声明式插入的规则&lt;/li&gt;
&lt;li&gt;&lt;code&gt;devtools_page&lt;/code&gt;描述自定义的devtools选项卡&lt;/li&gt;
&lt;li&gt;&lt;code&gt;externally_connectable&lt;/code&gt;描述其他能够连接到该Extension的url规则&lt;/li&gt;
&lt;li&gt;&lt;code&gt;omnibox&lt;/code&gt;配置关键词当用户在地址栏输入特定字符时，变成与Extension交互&lt;/li&gt;
&lt;li&gt;&lt;code&gt;permissions&lt;/code&gt;显式声明Extension需要使用的权限&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Extension中的文件路径类似HTML中，通常使用相对路径访问。在使用绝对路径时，需要使用&lt;code&gt;chrome-extension://&amp;lt;extensionID&amp;gt;/&amp;lt;pathToFile&amp;gt;&lt;/code&gt;风格的路径，可以使用&lt;code&gt;chrome.runtime.getURL()&lt;/code&gt;得到某资源的绝对路径。&lt;/p&gt;
&lt;h3 id=&#34;browser-action&#34;&gt;&lt;a href=&#34;#browser-action&#34; class=&#34;headerlink&#34; title=&#34;browser_action&#34;&gt;&lt;/a&gt;browser_action&lt;/h3&gt;&lt;p&gt;下面是一个browser_action的manifest样例。&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// browser action&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;My extension&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;browser_action&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;&amp;quot;default_icon&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;                    &lt;span class=&#34;comment&#34;&gt;// optional&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;&amp;quot;16&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;images/icon16.png&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;           &lt;span class=&#34;comment&#34;&gt;// optional&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;&amp;quot;24&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;images/icon24.png&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;           &lt;span class=&#34;comment&#34;&gt;// optional&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;&amp;quot;32&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;images/icon32.png&amp;quot;&lt;/span&gt;            &lt;span class=&#34;comment&#34;&gt;// optional&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;&amp;quot;default_title&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Google Mail&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;      &lt;span class=&#34;comment&#34;&gt;// optional; shown in tooltip&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;&amp;quot;default_popup&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;popup.html&amp;quot;&lt;/span&gt;        &lt;span class=&#34;comment&#34;&gt;// optional&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;browser_action的UI可以包括icon、tooltip、badge、popup。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;icon，可以是图片文件或HTML5 canvas元素。后者可以动态创建，以提供更流畅的效果。&lt;/li&gt;
&lt;li&gt;tooltip，即配置文件中的title&lt;/li&gt;
&lt;li&gt;badge，用于描述Extension工作状态的徽章，最长4个字符，可以调用browserAction API动态修改内容或背景色&lt;/li&gt;
&lt;li&gt;popup，点击Extension按钮弹窗的窗口，可以包含任意HTML内容，可以在&lt;code&gt;default_popup&lt;/code&gt;中定义，或调用API动态修改&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;browser_action有下面一些最佳实践：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在Extension作用于&lt;strong&gt;大多数页面&lt;/strong&gt;时使用，在作用于&lt;strong&gt;少数页面&lt;/strong&gt;时使用page_action&lt;/li&gt;
&lt;li&gt;使用更多彩和重的图标，体现出和轻量级page_action的区别&lt;/li&gt;
&lt;li&gt;不要模仿chrome内置图标，会造成误解&lt;/li&gt;
&lt;li&gt;注意图标在不同主题背景色下的表现形态&lt;/li&gt;
&lt;li&gt;不要使用动图，会引起用户焦虑&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;page-action&#34;&gt;&lt;a href=&#34;#page-action&#34; class=&#34;headerlink&#34; title=&#34;page_action&#34;&gt;&lt;/a&gt;page_action&lt;/h3&gt;&lt;p&gt;更轻量级。&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// page action&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;My extension&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;page_action&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;&amp;quot;default_icon&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;                    &lt;span class=&#34;comment&#34;&gt;// optional&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;&amp;quot;16&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;images/icon16.png&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;           &lt;span class=&#34;comment&#34;&gt;// optional&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;&amp;quot;24&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;images/icon24.png&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;           &lt;span class=&#34;comment&#34;&gt;// optional&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;&amp;quot;32&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;images/icon32.png&amp;quot;&lt;/span&gt;            &lt;span class=&#34;comment&#34;&gt;// optional&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;&amp;quot;default_title&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Google Mail&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;      &lt;span class=&#34;comment&#34;&gt;// optional; shown in tooltip&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;&amp;quot;default_popup&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;popup.html&amp;quot;&lt;/span&gt;        &lt;span class=&#34;comment&#34;&gt;// optional&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;UI上没有badge，其余和browser_action一致。另外，在非指定页面下，会有灰度展示。最佳实践同上。&lt;/p&gt;
&lt;h2 id=&#34;架构&#34;&gt;&lt;a href=&#34;#架构&#34; class=&#34;headerlink&#34; title=&#34;架构&#34;&gt;&lt;/a&gt;架构&lt;/h2&gt;&lt;p&gt;除了manifest描述项目结构外，需要另外一些组件组成完整的Extension功能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;background script，Extension的事件handler，用于监听对于Extension来说重要的浏览器事件&lt;/li&gt;
&lt;li&gt;UI元素，有多种体现形式，如右键菜单，omnibox，点击按钮的弹出层等&lt;/li&gt;
&lt;li&gt;content scripts，用于和页面交互的js脚本。它可以传递消息给Extension的其他部分&lt;/li&gt;
&lt;li&gt;options page，用于配置Extension的页面&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面是一些详细介绍&lt;/p&gt;
&lt;h3 id=&#34;background-scripts&#34;&gt;&lt;a href=&#34;#background-scripts&#34; class=&#34;headerlink&#34; title=&#34;background scripts&#34;&gt;&lt;/a&gt;background scripts&lt;/h3&gt;&lt;p&gt;有效率的后台脚本应该由浏览器事件触发，执行命令之后卸载。这部分脚本在manifest的&lt;code&gt;background&lt;/code&gt;中声明。&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Awesome Test Extension&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;&amp;quot;background&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;scripts&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;background.js&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;&amp;quot;persistent&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在&lt;code&gt;scripts&lt;/code&gt;可以指定需要执行的多个后台脚本。&lt;code&gt;persistent&lt;/code&gt;需要指定为false。只有使用了&lt;code&gt;chrome.webRequest&lt;/code&gt;API的后台脚本才指定persistent为true。&lt;/p&gt;
&lt;p&gt;使用上，&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在Extension加载时，初始化一次性配置。&lt;/li&gt;
&lt;li&gt;添加监听函数，一些监听函数还提供更多参数便于筛选事件。&lt;/li&gt;
&lt;li&gt;在监听函数内，实现业务逻辑&lt;/li&gt;
&lt;li&gt;在卸载前，执行持久化数据、释放请求等操作&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;content-scripts&#34;&gt;&lt;a href=&#34;#content-scripts&#34; class=&#34;headerlink&#34; title=&#34;content scripts&#34;&gt;&lt;/a&gt;content scripts&lt;/h3&gt;&lt;p&gt;Content scripts运行在页面的执行环境下，通过DOM访问页面元素并和所在的Extension交互。它还可以调用Chrome APIs完成一些原生操作。Content scripts执行在和页面JS脚本相隔离的环境里，两者共享1个DOM。&lt;/p&gt;
&lt;p&gt;Content scripts有两种执行方式，命令式插入或声明式插入。前者通过&lt;code&gt;chrome.tabs.executeScript&lt;/code&gt;实现，后者通过在manifest中声明实现在访问特定url时自动加载js文件：&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;attr&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;My extension&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;attr&#34;&gt;&amp;quot;content_scripts&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;attr&#34;&gt;&amp;quot;matches&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;http://*.nytimes.com/*&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;attr&#34;&gt;&amp;quot;css&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;myStyles.css&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;attr&#34;&gt;&amp;quot;js&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;contentScript.js&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Content scripts和页面脚本虽然是隔离开的，但共享一个DOM，可以通过&lt;code&gt;window.postMessage&lt;/code&gt;沟通和传递消息。&lt;/p&gt;
&lt;h2 id=&#34;Chrome-API&#34;&gt;&lt;a href=&#34;#Chrome-API&#34; class=&#34;headerlink&#34; title=&#34;Chrome API&#34;&gt;&lt;/a&gt;Chrome API&lt;/h2&gt;&lt;p&gt;Extension使用特定的Chrome API在浏览器的环境下执行原生操作。API绝大多数都是异步的，这意味着如果想知道操作的结果，需要在回调函数中进行操作。Chrome的所有API都整合在Chrome这个namespace下，根据类型拆分成多个子模块，如chrome.runtime。&lt;/p&gt;
&lt;h2 id=&#34;页面通信&#34;&gt;&lt;a href=&#34;#页面通信&#34; class=&#34;headerlink&#34; title=&#34;页面通信&#34;&gt;&lt;/a&gt;页面通信&lt;/h2&gt;&lt;p&gt;由于content scripts运行在网页环境下，它通常需要和Extension本身进行通信。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一次性通信，content scripts端使用&lt;code&gt;chrome.runtime.sendMessage&lt;/code&gt;，Extension端使用&lt;code&gt;chrome.tabs.sendMessage&lt;/code&gt;。接收侧一律使用&lt;code&gt;chrome.runtime.onMessage.addListener&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;持久性连接，类似上面使用&lt;code&gt;chrome.runtime.connect&lt;/code&gt;或&lt;code&gt;tabs.connect&lt;/code&gt;，详见&lt;a href=&#34;https://developer.chrome.com/extensions/messaging#connect&#34;&gt;文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;跨Extension通信，使用&lt;code&gt;chrome.onMessageExternal&lt;/code&gt;或&lt;code&gt;runtime.onConnectExternal&lt;/code&gt;接收事件，发送事件可以使用上面的一次性通信或持久性连接的方式&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://shenlvmeng.github.com/blog/2019/08/25/async-hooks-and-cls/</guid>
            <title>NodeJS async_hooks API与CLS（Continuation-local-storage）</title>
            <link>http://shenlvmeng.github.com/blog/2019/08/25/async-hooks-and-cls/</link>
            <category>async_hooks</category>
            <category>cls-hooked</category>
            <category>logId</category>
            <pubDate>Sun, 25 Aug 2019 22:55:52 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;async-hooks&#34;&gt;&lt;a href=&#34;#async-hooks&#34; class=&#34;headerlink&#34; title=&#34;async_hooks&#34;&gt;&lt;/a&gt;async_hooks&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://nodejs.org/api/async_hooks.html#async_hooks_async_hooks&#34;&gt;async_hooks&lt;/a&gt;是nodejs在8.2.1后引入的特性，目前仍然是Experimental状态。它被用来追踪NodeJS中异步资源的生命周期。&lt;/p&gt;
&lt;p&gt;在async_hooks特性加入之前，想要了解异步调用上下文或追踪异步调用逻辑是件比较困难的事情:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最早在v0.11中有实现&lt;a href=&#34;https://github.com/nodejs/node-v0.x-archive/pull/6011&#34;&gt;AsyncListener&lt;/a&gt;，但在v0.12时&lt;a href=&#34;https://github.com/nodejs/node-v0.x-archive/pull/8110&#34;&gt;被移除&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在Node6和7时，有非官方的&lt;a href=&#34;http://blog.trevnorris.com/2015/02/asyncwrap-tutorial-introduction.html&#34;&gt;AsyncWrap&lt;/a&gt;实现，指定回调函数监听异步资源的创建、调用前、调用后时机&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;async_hooks友好地解决了异步资源创建、调用的追踪问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;异步资源代表一个关联了回调的对象，回调可能被调用1次或多次，比如&lt;code&gt;net.createServer()&lt;/code&gt;里的&lt;code&gt;connect&lt;/code&gt;事件或&lt;code&gt;fs.open()&lt;/code&gt;。&lt;code&gt;AsyncHook&lt;/code&gt;不区分这些场景，统一视作异步资源&lt;/li&gt;
&lt;li&gt;每一个异步上下文都有一个关联的id，即asyncId。asyncId是从1开始递增的，同一个async上下文中的id相同（在未enable async hook时，promise执行不会被分配asyncId）。&lt;code&gt;executionAsyncId()&lt;/code&gt;可以获取当前异步上下文的asyncId，&lt;code&gt;triggerAsyncId()&lt;/code&gt;获取触发当前异步上下文的异步上下文。借助asynId和triggerAsyncId可以追踪异步的调用关系和链路。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;async_hooks.createHook()&lt;/code&gt;函数可以注册异步资源生命周期中init&amp;#x2F;before&amp;#x2F;after&amp;#x2F;destroy&amp;#x2F;promiseResolve事件的监听函数&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; async_hooks = &lt;span class=&#34;built_in&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;async_hooks&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// ID of the current execution context&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; eid = async_hooks.&lt;span class=&#34;title function_&#34;&gt;executionAsyncId&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// ID of the handle responsible for triggering the callback of the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// current execution scope to call&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; tid = async_hooks.&lt;span class=&#34;title function_&#34;&gt;triggerAsyncId&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; asyncHook = async_hooks.&lt;span class=&#34;title function_&#34;&gt;createHook&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// called during object construction&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;init&lt;/span&gt;: &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;asyncId, type, triggerAsyncId, resource&lt;/span&gt;) &amp;#123; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// called just before the resource&amp;#x27;s callback is called&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;before&lt;/span&gt;: &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;asyncId&lt;/span&gt;) &amp;#123; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// called just after the resource&amp;#x27;s callback has finished&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;after&lt;/span&gt;: &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;asyncId&lt;/span&gt;) &amp;#123; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// called when an AsyncWrap instance is destroyed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;destroy&lt;/span&gt;: &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;asyncId&lt;/span&gt;) &amp;#123; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// called only for promise resources, when the `resolve`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// function passed to the `Promise` constructor is invoked&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;promiseResolve&lt;/span&gt;: &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;asyncId&lt;/span&gt;) &amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// starts listening for async events&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;asyncHook.&lt;span class=&#34;title function_&#34;&gt;enable&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// stops listening for new async events&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;asyncHook.&lt;span class=&#34;title function_&#34;&gt;disable&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;executionAsyncId和triggerAsyncId&#34;&gt;&lt;a href=&#34;#executionAsyncId和triggerAsyncId&#34; class=&#34;headerlink&#34; title=&#34;executionAsyncId和triggerAsyncId&#34;&gt;&lt;/a&gt;executionAsyncId和triggerAsyncId&lt;/h3&gt;&lt;p&gt;调用&lt;code&gt;executionAsyncId&lt;/code&gt;和&lt;code&gt;triggerAsyncId&lt;/code&gt;函数获取当前异步上下文的asyncId和triggerAsyncId。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;executionAsyncId&lt;/code&gt;的返回值由运行时决定，&lt;code&gt;triggerAsyncId&lt;/code&gt;可以返回当前上下文的触发原因上下文id。见下面的示例代码：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; server = net.&lt;span class=&#34;title function_&#34;&gt;createServer&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;conn&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Returns the ID of the server, not of the new connection, because the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// callback runs in the execution scope of the server&amp;#x27;s MakeCallback().&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    async_hooks.&lt;span class=&#34;title function_&#34;&gt;executionAsyncId&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// The resource that caused (or triggered) this callback to be called&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// was that of the new connection. Thus the return value of triggerAsyncId()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// is the asyncId of &amp;quot;conn&amp;quot;.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    async_hooks.&lt;span class=&#34;title function_&#34;&gt;triggerAsyncId&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;listen&lt;/span&gt;(port, &lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Returns the ID of a TickObject (i.e. process.nextTick()) because all&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// callbacks passed to .listen() are wrapped in a nextTick().&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    async_hooks.&lt;span class=&#34;title function_&#34;&gt;executionAsyncId&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Even though all callbacks passed to .listen() are wrapped in a nextTick()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// the callback itself exists because the call to the server&amp;#x27;s .listen()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// was made. So the return value would be the ID of the server.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    async_hooks.&lt;span class=&#34;title function_&#34;&gt;triggerAsyncId&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;createHook&#34;&gt;&lt;a href=&#34;#createHook&#34; class=&#34;headerlink&#34; title=&#34;createHook&#34;&gt;&lt;/a&gt;&lt;code&gt;createHook&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;更常用地，我们使用&lt;code&gt;async_hooks.createHook&lt;/code&gt;创建异步资源的钩子，注册异步资源生命周期各阶段的回调函数，目前支持init&amp;#x2F;before&amp;#x2F;after&amp;#x2F;destroy&amp;#x2F;promiseResolve这几种。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：打印信息到控制台也是一个异步操作，&lt;code&gt;console.log()&lt;/code&gt;会触发AsyncHooks的各个回调。因此AsyncHook回调内使用&lt;code&gt;console.log()&lt;/code&gt;或类似异步日志打印，会造成无限递归。一种解决办法是使用&lt;code&gt;fs.writeFileSync&lt;/code&gt;或&lt;code&gt;process._rawDebug&lt;/code&gt;这种同步日志操作。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; fs = &lt;span class=&#34;built_in&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;fs&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; util = &lt;span class=&#34;built_in&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;util&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;debug&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;...args&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Use a function like this one when debugging inside an AsyncHooks callback&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fs.&lt;span class=&#34;title function_&#34;&gt;writeFileSync&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;log.out&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;`&lt;span class=&#34;subst&#34;&gt;$&amp;#123;util.format(...args)&amp;#125;&lt;/span&gt;\n`&lt;/span&gt;, &amp;#123; &lt;span class=&#34;attr&#34;&gt;flag&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;a&amp;#x27;&lt;/span&gt; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// OR&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    process.&lt;span class=&#34;title function_&#34;&gt;_rawDebug&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;`&lt;span class=&#34;subst&#34;&gt;$&amp;#123;util.format(...args)&amp;#125;&lt;/span&gt;\n`&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;init-asyncId-type-triggerAsyncId-resource&#34;&gt;&lt;a href=&#34;#init-asyncId-type-triggerAsyncId-resource&#34; class=&#34;headerlink&#34; title=&#34;init(asyncId, type, triggerAsyncId, resource)&#34;&gt;&lt;/a&gt;init(asyncId, type, triggerAsyncId, resource)&lt;/h4&gt;&lt;p&gt;在&lt;em&gt;可能&lt;/em&gt;会触发异步事件的资源构造时调用。这不代表后面的&lt;code&gt;before/after&lt;/code&gt;事件回调会在&lt;code&gt;destroy&lt;/code&gt;回调触发，只是说有这个可能。举个例子：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;net&amp;#x27;&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;createServer&lt;/span&gt;().&lt;span class=&#34;title function_&#34;&gt;listen&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123; &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;close&lt;/span&gt;(); &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// OR&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;clearTimeout&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;setTimeout&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&amp;#125;, &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;参数解释如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;asyncId&lt;/code&gt; 异步资源id&lt;/li&gt;
&lt;li&gt;&lt;code&gt;type&lt;/code&gt; 异步资源类型，字符串枚举值，具体参见&lt;a href=&#34;https://nodejs.org/api/async_hooks.html#async_hooks_type&#34;&gt;官方文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;triggerAsyncId&lt;/code&gt; 触发当前异步资源创建的异步上下文的asyncId&lt;/li&gt;
&lt;li&gt;&lt;code&gt;resource&lt;/code&gt; 被初始化的异步资源对象&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;triggerAsyncId&lt;/code&gt;表示的是资源创建的原因，&lt;code&gt;async_hooks.executionAsyncId()&lt;/code&gt;表示的是资源创建的时机。如下面例子里体现的一样：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;async_hooks.&lt;span class=&#34;title function_&#34;&gt;createHook&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;init&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;asyncId, type, triggerAsyncId&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; eid = async_hooks.&lt;span class=&#34;title function_&#34;&gt;executionAsyncId&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fs.&lt;span class=&#34;title function_&#34;&gt;writeSync&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;`&lt;span class=&#34;subst&#34;&gt;$&amp;#123;type&amp;#125;&lt;/span&gt;(&lt;span class=&#34;subst&#34;&gt;$&amp;#123;asyncId&amp;#125;&lt;/span&gt;): trigger: &lt;span class=&#34;subst&#34;&gt;$&amp;#123;triggerAsyncId&amp;#125;&lt;/span&gt; execution: &lt;span class=&#34;subst&#34;&gt;$&amp;#123;eid&amp;#125;&lt;/span&gt;\n`&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;enable&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;net&amp;#x27;&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;createServer&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;conn&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;listen&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;8080&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在&lt;code&gt;nc localhost 8080&lt;/code&gt;后，打印信息如下：&lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;TCPSERVERWRAP(5): trigger: 1 execution: 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;TCPWRAP(7): trigger: 5 execution: 0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;before-asyncId&#34;&gt;&lt;a href=&#34;#before-asyncId&#34; class=&#34;headerlink&#34; title=&#34;before(asyncId)&#34;&gt;&lt;/a&gt;before(asyncId)&lt;/h4&gt;&lt;p&gt;在异步操作初始化完成（如TCP服务器接收新连接）或资源准备完成（写数据到磁盘），准备执行回调时触发。入参&lt;code&gt;asyncId&lt;/code&gt;即这个异步资源的ID。&lt;code&gt;before&lt;/code&gt;事件可能会触发0~N次。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0次，异步操作被撤销&lt;/li&gt;
&lt;li&gt;&amp;gt; 1次，持久化的异步资源，如TCP服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;after-asyncId&#34;&gt;&lt;a href=&#34;#after-asyncId&#34; class=&#34;headerlink&#34; title=&#34;after(asyncId)&#34;&gt;&lt;/a&gt;after(asyncId)&lt;/h4&gt;&lt;p&gt;回调执行完成后立即触发。当执行回调过程中有未捕获异常，会在触发“uncaughtException”事件后触发。&lt;/p&gt;
&lt;h4 id=&#34;destroy-asyncId&#34;&gt;&lt;a href=&#34;#destroy-asyncId&#34; class=&#34;headerlink&#34; title=&#34;destroy(asyncId)&#34;&gt;&lt;/a&gt;destroy(asyncId)&lt;/h4&gt;&lt;p&gt;当asyncId对应的异步资源被销毁时调用。有些异步资源的销毁要依赖垃圾回收机制，所以当引用了传递到&lt;code&gt;init&lt;/code&gt;函数的resource时，destory事件可能永远不会被触发，从而造成内存泄漏。&lt;/p&gt;
&lt;h4 id=&#34;promiseResolve-asyncId&#34;&gt;&lt;a href=&#34;#promiseResolve-asyncId&#34; class=&#34;headerlink&#34; title=&#34;promiseResolve(asyncId)&#34;&gt;&lt;/a&gt;promiseResolve(asyncId)&lt;/h4&gt;&lt;p&gt;当Promise构造器中的resolve函数被执行时，promiseResolve事件被触发。有些情况下，有些resolve函数是被隐式执行的，比如&lt;code&gt;.then&lt;/code&gt;函数会返回一个新的Promise，这个时候也会被调用。&lt;/p&gt;
&lt;p&gt;当&lt;code&gt;new Promise((resolve) =&amp;gt; resolve(true)).then((a) =&amp;gt; &amp;#123;&amp;#125;);&lt;/code&gt;语句执行时，会顺序触发下列函数：&lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;init for PROMISE with id 5, trigger id: 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  promise resolve 5      # corresponds to resolve(true)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;init for PROMISE with id 6, trigger id: 5  # the Promise returned by then()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  before 6               # the then() callback is entered&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  promise resolve 6      # the then() callback resolves the promise by returning&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  after 6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;AsyncHook实例定义好后，需要通过&lt;code&gt;enable&lt;/code&gt;开启。可以使用&lt;code&gt;disable&lt;/code&gt;关闭AsyncHook的回调执行。&lt;/p&gt;
&lt;p&gt;下面是一个AsyncHook的实例：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; indent = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;async_hooks.&lt;span class=&#34;title function_&#34;&gt;createHook&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;init&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;asyncId, type, triggerAsyncId&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; eid = async_hooks.&lt;span class=&#34;title function_&#34;&gt;executionAsyncId&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; indentStr = &lt;span class=&#34;string&#34;&gt;&amp;#x27; &amp;#x27;&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;repeat&lt;/span&gt;(indent);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        fs.&lt;span class=&#34;title function_&#34;&gt;writeSync&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;`&lt;span class=&#34;subst&#34;&gt;$&amp;#123;indentStr&amp;#125;&lt;/span&gt;&lt;span class=&#34;subst&#34;&gt;$&amp;#123;type&amp;#125;&lt;/span&gt;(&lt;span class=&#34;subst&#34;&gt;$&amp;#123;asyncId&amp;#125;&lt;/span&gt;):`&lt;/span&gt; +&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;string&#34;&gt;` trigger: &lt;span class=&#34;subst&#34;&gt;$&amp;#123;triggerAsyncId&amp;#125;&lt;/span&gt; execution: &lt;span class=&#34;subst&#34;&gt;$&amp;#123;eid&amp;#125;&lt;/span&gt;\n`&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;before&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;asyncId&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; indentStr = &lt;span class=&#34;string&#34;&gt;&amp;#x27; &amp;#x27;&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;repeat&lt;/span&gt;(indent);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        fs.&lt;span class=&#34;title function_&#34;&gt;writeFileSync&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;log.out&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;`&lt;span class=&#34;subst&#34;&gt;$&amp;#123;indentStr&amp;#125;&lt;/span&gt;before:  &lt;span class=&#34;subst&#34;&gt;$&amp;#123;asyncId&amp;#125;&lt;/span&gt;\n`&lt;/span&gt;, &amp;#123; &lt;span class=&#34;attr&#34;&gt;flag&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;a&amp;#x27;&lt;/span&gt; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        indent += &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;after&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;asyncId&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        indent -= &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; indentStr = &lt;span class=&#34;string&#34;&gt;&amp;#x27; &amp;#x27;&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;repeat&lt;/span&gt;(indent);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        fs.&lt;span class=&#34;title function_&#34;&gt;writeFileSync&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;log.out&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;`&lt;span class=&#34;subst&#34;&gt;$&amp;#123;indentStr&amp;#125;&lt;/span&gt;after:  &lt;span class=&#34;subst&#34;&gt;$&amp;#123;asyncId&amp;#125;&lt;/span&gt;\n`&lt;/span&gt;, &amp;#123; &lt;span class=&#34;attr&#34;&gt;flag&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;a&amp;#x27;&lt;/span&gt; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;destroy&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;asyncId&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; indentStr = &lt;span class=&#34;string&#34;&gt;&amp;#x27; &amp;#x27;&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;repeat&lt;/span&gt;(indent);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        fs.&lt;span class=&#34;title function_&#34;&gt;writeFileSync&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;log.out&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;`&lt;span class=&#34;subst&#34;&gt;$&amp;#123;indentStr&amp;#125;&lt;/span&gt;destroy:  &lt;span class=&#34;subst&#34;&gt;$&amp;#123;asyncId&amp;#125;&lt;/span&gt;\n`&lt;/span&gt;, &amp;#123; &lt;span class=&#34;attr&#34;&gt;flag&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;a&amp;#x27;&lt;/span&gt; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;enable&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;net&amp;#x27;&lt;/span&gt;).&lt;span class=&#34;title function_&#34;&gt;createServer&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;listen&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;8080&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Let&amp;#x27;s wait 10ms before logging the server started.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;setTimeout&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;gt;&amp;gt;&amp;gt;&amp;#x27;&lt;/span&gt;, async_hooks.&lt;span class=&#34;title function_&#34;&gt;executionAsyncId&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;, &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在启动服务器后，打印信息如下：&lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;TCPSERVERWRAP(5): trigger: 1 execution: 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;TickObject(6): trigger: 5 execution: 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;before:  6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Timeout(7): trigger: 6 execution: 6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;after:   6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;destroy: 6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;before:  7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;gt;&amp;gt;&amp;gt; 7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  TickObject(8): trigger: 7 execution: 7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;after:   7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;before:  8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;after:   8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;异常处理&#34;&gt;&lt;a href=&#34;#异常处理&#34; class=&#34;headerlink&#34; title=&#34;异常处理&#34;&gt;&lt;/a&gt;异常处理&lt;/h3&gt;&lt;p&gt;可以直接参考&lt;a href=&#34;https://nodejs.org/api/async_hooks.html#async_hooks_error_handling&#34;&gt;官方文档描述&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;可以用来干嘛&#34;&gt;&lt;a href=&#34;#可以用来干嘛&#34; class=&#34;headerlink&#34; title=&#34;可以用来干嘛&#34;&gt;&lt;/a&gt;可以用来干嘛&lt;/h3&gt;&lt;p&gt;一个最为人知的使用场景是我们下面会提到的CLS（Continuation-local-storage）。cls-hooked库通过async_hooks建立了context对象和当前async执行上下文的关系，从而在整个执行链（execution chain）上维护一个统一的数据存储。&lt;/p&gt;
&lt;p&gt;还有一个是结合&lt;a href=&#34;https://nodejs.org/api/perf_hooks.html&#34;&gt;Performance Timing API&lt;/a&gt;这样的性能监测工具诊断整个异步操作流程的性能。比如&lt;a href=&#34;https://clinicjs.org/blog/introducing-bubbleprof/&#34;&gt;这篇文章&lt;/a&gt;所介绍的。&lt;/p&gt;
&lt;h3 id=&#34;参考&#34;&gt;&lt;a href=&#34;#参考&#34; class=&#34;headerlink&#34; title=&#34;参考&#34;&gt;&lt;/a&gt;参考&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://nodejs.org/api/async_hooks.html&#34;&gt;Async Hooks | Node.js Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://itnext.io/a-pragmatic-overview-of-async-hooks-api-in-node-js-e514b31460e9&#34;&gt;A Pragmatic Overview of Async Hooks API in Node.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;CLS&#34;&gt;&lt;a href=&#34;#CLS&#34; class=&#34;headerlink&#34; title=&#34;CLS&#34;&gt;&lt;/a&gt;CLS&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/othiym23/node-continuation-local-storage&#34;&gt;Continuation-local storage(CLS)&lt;/a&gt;类似线程编程里的线程存储，不过基于nodeJS风格的链式回调函数调用。它得名于函数式编程中的&lt;a href=&#34;https://en.wikipedia.org/wiki/Continuation-passing_style&#34;&gt;Continuation-passing style&lt;/a&gt;，旨在链式函数调用过程中维护一个持久的数据。&lt;/p&gt;
&lt;p&gt;在node V8之前，分别基于AsyncListener和AsyncWrap实现。在V8后，基于async_hook实现的库名为&lt;a href=&#34;https://github.com/jeff-lewis/cls-hooked#readme&#34;&gt;cls-hooked&lt;/a&gt;。但使用方法一致。&lt;/p&gt;
&lt;p&gt;这里借用cls README里的一个例子。假设你写了一个获取用户信息的模块，将获取到的用户信息放在session中。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// setup.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; createNamespace = &lt;span class=&#34;built_in&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;cls-hooked&amp;#x27;&lt;/span&gt;).&lt;span class=&#34;property&#34;&gt;createNamespace&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; session = &lt;span class=&#34;title function_&#34;&gt;createNamespace&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;my session&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; db = &lt;span class=&#34;built_in&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;./lib/db.js&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;start&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;options, next&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  db.&lt;span class=&#34;title function_&#34;&gt;fetchUserById&lt;/span&gt;(options.&lt;span class=&#34;property&#34;&gt;id&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;error, user&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (error) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;next&lt;/span&gt;(error);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    session.&lt;span class=&#34;title function_&#34;&gt;set&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;user&amp;#x27;&lt;/span&gt;, user);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;next&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;之后，需要将用户信息转化为一个HTML文档，你在另外一个文件中定义了转换函数，并从session中取出你想要的用户信息。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// send_response.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; getNamespace = &lt;span class=&#34;built_in&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;cls-hooked&amp;#x27;&lt;/span&gt;).&lt;span class=&#34;property&#34;&gt;getNamespace&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; session = &lt;span class=&#34;title function_&#34;&gt;getNamespace&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;my session&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; render = &lt;span class=&#34;built_in&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;./lib/render.js&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;finish&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;response&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; user = session.&lt;span class=&#34;title function_&#34;&gt;get&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;user&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;render&lt;/span&gt;(&amp;#123;&lt;span class=&#34;attr&#34;&gt;user&lt;/span&gt;: user&amp;#125;).&lt;span class=&#34;title function_&#34;&gt;pipe&lt;/span&gt;(response);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;使用&#34;&gt;&lt;a href=&#34;#使用&#34; class=&#34;headerlink&#34; title=&#34;使用&#34;&gt;&lt;/a&gt;使用&lt;/h3&gt;&lt;p&gt;cls的使用围绕namespace展开，你可以根据需要自由组织namespace，需要持久化的信息读写在namespace的context上进行。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cls.createNamespace&lt;/code&gt;、&lt;code&gt;cls.getNamespace&lt;/code&gt; 创建和获取一个namespace&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cls.destroyNamespace&lt;/code&gt;、&lt;code&gt;cls.reset&lt;/code&gt; 删除一个namespace和重置所有namespace&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ns.get&lt;/code&gt;、&lt;code&gt;ns.set&lt;/code&gt; 在namespace的context上读取和设置持久化数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ns.run&lt;/code&gt;、&lt;code&gt;ns.runAndReturn&lt;/code&gt;、&lt;code&gt;ns.runPromise&lt;/code&gt; 在给定context下执行函数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ns.bind&lt;/code&gt;、&lt;code&gt;ns.bindEmitter&lt;/code&gt; 绑定context到给定函数或eventEmitter&lt;/li&gt;
&lt;li&gt;&lt;code&gt;context&lt;/code&gt; 维护持久化数据的plain object&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更多API参考&lt;a href=&#34;https://github.com/jeff-lewis/cls-hooked#clscreatenamespacename&#34;&gt;文档&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;实现原理&#34;&gt;&lt;a href=&#34;#实现原理&#34; class=&#34;headerlink&#34; title=&#34;实现原理&#34;&gt;&lt;/a&gt;实现原理&lt;/h3&gt;&lt;p&gt;正如上面所说，“cls-hooked库通过async_hooks建立了context对象和当前async执行上下文的关系”。下面有张图通过例子描述了cls的工作过程：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/924/1*PPk_uEmQFVKO16byHpwnXA.jpeg&#34; alt=&#34;CLS workflow&#34;&gt;&lt;/p&gt;
&lt;p&gt;简单拆解一下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先，我们有一个典型的web server和应用上的中间件，我们在整个应用的生命周期里创建一个cls的namespace。&lt;/li&gt;
&lt;li&gt;新请求到达中间件时，cls通过&lt;code&gt;ns.run&lt;/code&gt;（别的方式也行）创建一个空的cls context，并入栈该context，设置为active context。&lt;/li&gt;
&lt;li&gt;由于cls内部注册了AsyncHook，在&lt;code&gt;init&lt;/code&gt;阶段，在Map中关联对应active context到当前asyncId。从而有异步操作（如查数据库）时，此前入栈的context就和操作的asyncId对应上。此后get&lt;br&gt;、set操作都会针对同一active context进行。&lt;/li&gt;
&lt;li&gt;异步操作完成后，&lt;code&gt;after&lt;/code&gt;回调触发，active context变成undefined，同时出栈当前context。当&lt;code&gt;destroy&lt;/code&gt;回调触发时，会将关联到asyncId的context从Map中移除。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在cls-hooked实现中，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ns.get&lt;/code&gt;和&lt;code&gt;ns.set&lt;/code&gt;和&lt;code&gt;ns.active&lt;/code&gt;相关联&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ns.active&lt;/code&gt;通过&lt;code&gt;ns.enter&lt;/code&gt;、&lt;code&gt;ns.exit&lt;/code&gt;变更或者在&lt;code&gt;init&lt;/code&gt;回调中从contextMap中改变。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ns.enter&lt;/code&gt;、&lt;code&gt;ns.exit&lt;/code&gt;、&lt;code&gt;init&lt;/code&gt;回调最终都经由&lt;code&gt;ns.runxxx&lt;/code&gt;或&lt;code&gt;ns.bindxxx&lt;/code&gt;得到初始的context&lt;/li&gt;
&lt;li&gt;cls-hooked借助async_hook和&lt;code&gt;ns.enter&lt;/code&gt;、&lt;code&gt;ns.exit&lt;/code&gt;保证异步流程中context和异步上下文的正确对应关系&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;考虑到cls-hooked的js代码可读性，可维护性和工程角度上还有改善空间，基于上面的原理，做了ts的重构，源码见这里(待补充)，供大家参考和学习cls-hooked。&lt;/p&gt;
&lt;h3 id=&#34;追踪logId&#34;&gt;&lt;a href=&#34;#追踪logId&#34; class=&#34;headerlink&#34; title=&#34;追踪logId&#34;&gt;&lt;/a&gt;追踪logId&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;醉翁之意不在酒&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有了cls的帮助，我们就可以利用它帮我们持久化logId，避免“continuation-passing-context”。可以写一个中间件，为req、res包装context，同时为每次请求持久化logId。在后面的controller、services这些位置就可以拿到之前持久化的logId。&lt;/p&gt;
&lt;p&gt;一个express风格的中间件类似下面这样：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; cls = &lt;span class=&#34;built_in&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;cls-hooked&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; uuidv4 = &lt;span class=&#34;built_in&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;uuid/v4&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; clsNamespace = cls.&lt;span class=&#34;title function_&#34;&gt;createNamespace&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;app&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;clsMiddleware&lt;/span&gt; = (&lt;span class=&#34;params&#34;&gt;req, res, next&lt;/span&gt;) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// req and res are event emitters. We want to access CLS context inside of their event callbacks&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  clsNamespace.&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(req);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  clsNamespace.&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;(res);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; logId = &lt;span class=&#34;title function_&#34;&gt;uuidv4&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  clsNamespace.&lt;span class=&#34;title function_&#34;&gt;run&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    clsNamespace.&lt;span class=&#34;title function_&#34;&gt;set&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;logId&amp;#x27;&lt;/span&gt;, logId);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;next&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// controller.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;controller&lt;/span&gt; = (&lt;span class=&#34;params&#34;&gt;req, res, next&lt;/span&gt;) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; traceID = clsNamespace.&lt;span class=&#34;title function_&#34;&gt;get&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;logId&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在这个思路的基础上，有类似&lt;a href=&#34;https://github.com/puzpuzpuz/cls-rtracer&#34;&gt;cls-rtracer&lt;/a&gt;或&lt;a href=&#34;https://github.com/keenondrums/cls-proxify&#34;&gt;cls-proxify&lt;/a&gt;这样的库，提供针对express、koa、fastify等常见后端框架的中间件，只需简单指定配置，便可以在请求的生命周期里透传logId，免去“continuation-passing-context”的尴尬，对已有代码侵入性也很小。有需要透传logId，但并不想（或暂时不能）使用后端框架的场景下可以考虑使用这种方案。&lt;/p&gt;
&lt;h2 id=&#34;参考-1&#34;&gt;&lt;a href=&#34;#参考-1&#34; class=&#34;headerlink&#34; title=&#34;参考&#34;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/nodejs/node-v0.x-archive/issues/5243&#34;&gt;context: core module to manage generic contexts for async call chains · Issue #5423&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://datahero.com/blog/2014/05/22/node-js-preserving-data-across-async-callbacks/&#34;&gt;Node.js – Preserving Data Across Async Callbacks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://itnext.io/nodejs-logging-made-right-117a19e8b4ce&#34;&gt;NodeJS logging made right&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://shenlvmeng.github.com/blog/2019/03/12/indexeddb-introduction/</guid>
            <title>Electron应用数据库选型暨indexedDB扫盲</title>
            <link>http://shenlvmeng.github.com/blog/2019/03/12/indexeddb-introduction/</link>
            <category>electron</category>
            <category>indexedDB</category>
            <pubDate>Tue, 12 Mar 2019 00:01:59 +0800</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;名谓扫盲，实则扫自己的盲&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;选型&#34;&gt;&lt;a href=&#34;#选型&#34; class=&#34;headerlink&#34; title=&#34;选型&#34;&gt;&lt;/a&gt;选型&lt;/h2&gt;&lt;p&gt;要说到最近的一个个人项目&lt;a href=&#34;https://github.com/shenlvmeng/calendone&#34;&gt;calendone&lt;/a&gt;，它是一个普通的Electron日历应用，有每日记录，定计划等功能，需要做数据持久化。数据量不大，不需要考虑性能问题。简单看了些方案。&lt;/p&gt;
&lt;h3 id=&#34;SQLite&#34;&gt;&lt;a href=&#34;#SQLite&#34; class=&#34;headerlink&#34; title=&#34;SQLite&#34;&gt;&lt;/a&gt;SQLite&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;关系型数据库&lt;/strong&gt;，具有关系型数据库的一切特性，事务遵循ACID属性。小巧轻便，有knex这样的库做ORM。&lt;/li&gt;
&lt;li&gt;是node原生模块，需要重新编译，而且有坑&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;NeDB&#34;&gt;&lt;a href=&#34;#NeDB&#34; class=&#34;headerlink&#34; title=&#34;NeDB&#34;&gt;&lt;/a&gt;NeDB&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;NoSQL类型数据库&lt;/strong&gt;，可以实现本地存储，也可以作为内存存储&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;API是MongoDB的一个子集&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;纯js实现，一个文件对应一张表&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Leveldb&#34;&gt;&lt;a href=&#34;#Leveldb&#34; class=&#34;headerlink&#34; title=&#34;Leveldb&#34;&gt;&lt;/a&gt;Leveldb&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;NoSQL类型数据库&lt;/strong&gt;，支持内存和持久化存储&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;没有事务机制&lt;/strong&gt;，默认按key查询，没有索引&lt;/li&gt;
&lt;li&gt;默认保存的不是js对象，而是字符串。如果要保存为对象，可以在level函数第二个参数加入&lt;code&gt;&amp;#123; valueEncoding: &amp;quot;json&amp;quot; &amp;#125;&lt;/code&gt;来让保存的js对象以json的形式读取&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Lowdb&#34;&gt;&lt;a href=&#34;#Lowdb&#34; class=&#34;headerlink&#34; title=&#34;Lowdb&#34;&gt;&lt;/a&gt;Lowdb&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;基于Loadsh的&lt;strong&gt;纯JSON文件数据库&lt;/strong&gt;，速度较慢&lt;/li&gt;
&lt;li&gt;不支持索引&amp;#x2F;事务&amp;#x2F;批量操作等数据库功能&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;indexedDB&#34;&gt;&lt;a href=&#34;#indexedDB&#34; class=&#34;headerlink&#34; title=&#34;indexedDB&#34;&gt;&lt;/a&gt;indexedDB&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;NoSQL数据库&lt;/strong&gt;，浏览器自带，可以储存大量数据，容量为250MB以上&lt;/li&gt;
&lt;li&gt;支持事务，有版本号的概念。&lt;/li&gt;
&lt;li&gt;支持较多的字段类型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;综上考虑，最后采用浏览器自带的indexedDB，足够满足要求，漫游接入成本，升级方便，调试方便。&lt;/p&gt;
&lt;h2 id=&#34;indexedDB介绍&#34;&gt;&lt;a href=&#34;#indexedDB介绍&#34; class=&#34;headerlink&#34; title=&#34;indexedDB介绍&#34;&gt;&lt;/a&gt;indexedDB介绍&lt;/h2&gt;&lt;p&gt;indexedDB脱胎于HTML本地存储。&lt;/p&gt;
&lt;h3 id=&#34;HTML本地存储&#34;&gt;&lt;a href=&#34;#HTML本地存储&#34; class=&#34;headerlink&#34; title=&#34;HTML本地存储&#34;&gt;&lt;/a&gt;HTML本地存储&lt;/h3&gt;&lt;p&gt;上古时代中，HTML中持久化数据只有几种方法[1]：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cookie。cookie的缺点很明显，最多只能存储4KB的数据，且会携带在同域名下每个HTTP请求的头部，明文传输（除非你使用SSL）。&lt;/li&gt;
&lt;li&gt;IE userData。微软在上世纪90年代的浏览器大战时推出的本地存储方案，允许每个页面最多存储64K数据，每个站点最多640K数据，它不是Web标准的一部分&lt;/li&gt;
&lt;li&gt;Flash cookie。它实际上和HTTP cookie并不是一回事，它的名字可能叫做”Flash本地存储”更为合适。考虑到Flash已经是要被淘汰的技术……&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本地存储出现后，有了下面一些标准化的更简单的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API&#34;&gt;Web Storage接口&lt;/a&gt;，即localStorage和sessionStorage&lt;/li&gt;
&lt;li&gt;Web SQL，这是一个&lt;strong&gt;已经废弃&lt;/strong&gt;的规范。就跟它的名字一样，它就是浏览器端的一个SQL数据库，可以执行SQL语句。由于语法和SQLite绑定过紧，后被标准组织废弃&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/API/IndexedDB_API&#34;&gt;indexedDB&lt;/a&gt;，Web SQL的替代品，也是浏览器端的数据库，但他是No SQL的。有MongoDB使用体验的，对它就不会感到陌生。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;indexedDB-1&#34;&gt;&lt;a href=&#34;#indexedDB-1&#34; class=&#34;headerlink&#34; title=&#34;indexedDB&#34;&gt;&lt;/a&gt;indexedDB&lt;/h3&gt;&lt;p&gt;indexedDB是浏览器提供的本地数据库，目标是持久化存储大量数据，提供类No SQL的增删改查体验。因此它有以下几点特色：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;键值对存储&lt;/strong&gt;，采用对象仓库（object store）存放数据，所有类型的数据都可以直接存入，包括 JavaScript 对象。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持索引&lt;/strong&gt;，indexedDB没有表列的概念，但可以建立索引，查询数据时使用id或索引搜索&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持事务&lt;/strong&gt;，保证操作的原子性，事务中的任意一步失败，数据库都会回滚到操作事务前的状态&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;异步操作&lt;/strong&gt;，indexedDB操作都是异步的，在执行数据增删改查时，不会影响界面性能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;同源限制&lt;/strong&gt;，每一个数据库会关联创建它的域名。网页只能访问自身域名下的数据库，不能跨域访问数据库。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;其他&lt;/strong&gt;，包括存储空间大、支持二进制存储等…&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;基本概念&#34;&gt;&lt;a href=&#34;#基本概念&#34; class=&#34;headerlink&#34; title=&#34;基本概念&#34;&gt;&lt;/a&gt;基本概念&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数据库&lt;/strong&gt;，IDBDatabase对象类型，每个域名（协议 + 域名 + 端口）可以新建任意多个数据库。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对象仓库&lt;/strong&gt;，IDBObjectStore对象类型，一个数据库包含若干个对象仓库，类似于关系型数据库中的表&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据记录&lt;/strong&gt;，类型于关系型数据库中的行，但是只有主键和数据体两部分。&lt;strong&gt;数据体可以是任意数据类型，不限于对象&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;索引&lt;/strong&gt;，IDBIndex对象类型，数据记录里除了主键以外的搜索参照&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事务&lt;/strong&gt;，IDBTransaction数据类型，对数据库的增删改查都需要通过事务进行，执行结果通过&lt;code&gt;error&lt;/code&gt;，&lt;code&gt;success&lt;/code&gt;，&lt;code&gt;abort&lt;/code&gt;事件回调拿到&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;indexedDB定义了许多对象接口，即API，除了上面介绍的一些，更完善的接口介绍可以参考MDN的介绍。&lt;/p&gt;
&lt;h4 id=&#34;操作&#34;&gt;&lt;a href=&#34;#操作&#34; class=&#34;headerlink&#34; title=&#34;操作&#34;&gt;&lt;/a&gt;操作&lt;/h4&gt;&lt;p&gt;indexedDB 鼓励使用的基本模式如下所示：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开数据库。&lt;/li&gt;
&lt;li&gt;在数据库中创建一个对象仓库（object store）。&lt;/li&gt;
&lt;li&gt;启动一个事务，并发送一个请求来执行一些数据库操作，像增加或提取数据等。&lt;/li&gt;
&lt;li&gt;通过监听正确类型的DOM事件以等待操作完成。&lt;/li&gt;
&lt;li&gt;在操作结果上进行一些操作（可以在request对象中找到）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;打开数据库&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用 IndexedDB 的第一步是打开数据库，使用indexedDB.open()方法如下。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; request = &lt;span class=&#34;variable language_&#34;&gt;window&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;indexedDB&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;open&lt;/span&gt;(databaseName, version);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;其中第一个参数为数据库名，第二个参数是数据库版本号。&lt;code&gt;indexedDB.open()&lt;/code&gt;方法返回一个&lt;code&gt;IDBRequest&lt;/code&gt;对象。这个对象通过三种事件error、success、upgradeneeded，处理打开数据库的操作结果。&lt;/p&gt;
&lt;p&gt;如果数据库不存在，open操作会创建该数据库，然后&lt;code&gt;onupgradeneeded&lt;/code&gt;事件被触发，需要在该事件的处理函数中创建数据库模式。如果数据库已经存在，但指定了一个更高的数据库版本，会直接触发 &lt;code&gt;onupgradeneeded&lt;/code&gt;事件，允许你在处理函数中更新数据库模式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：这里的版本号是一个unsigned long long数字，使用浮点数是会被转化到最近的整数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;绑定处理函数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;几乎所有我们产生的请求我们在处理的时候首先要做的就是添加成功和失败处理函数。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;request.&lt;span class=&#34;property&#34;&gt;onerror&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;event&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// Do something with request.errorCode!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;request.&lt;span class=&#34;property&#34;&gt;onsuccess&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;event&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// Do something with request.result!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;如果一切顺利的话，相关request的&lt;code&gt;onsuccess()&lt;/code&gt;处理函数就会被触发。如果不是所有事情都成功的话，&lt;code&gt;error &lt;/code&gt;事件会在request上被触发。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;新建数据库&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;新建数据库与打开数据库是同一个操作。不同之处在于，后续的操作主要在&lt;code&gt;upgradeneeded&lt;/code&gt;事件的监听函数里面完成。通常新建数据库后，第一件事是新建对象仓库，即下面这样：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;request.&lt;span class=&#34;property&#34;&gt;onupgradeneeded&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;event&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  db = event.&lt;span class=&#34;property&#34;&gt;target&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;result&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; objectStore;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!db.&lt;span class=&#34;property&#34;&gt;objectStoreNames&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;contains&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;person&amp;#x27;&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    objectStore = db.&lt;span class=&#34;title function_&#34;&gt;createObjectStore&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;person&amp;#x27;&lt;/span&gt;, &amp;#123; &lt;span class=&#34;attr&#34;&gt;keyPath&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;id&amp;#x27;&lt;/span&gt; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上面这段语句使用id作为对象仓库的主键，如果没有合适作为主键的属性，可以让indexedDB自动生成主键。为了便于查询，可以在数据仓库中建立索引。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; objectStore = db.&lt;span class=&#34;title function_&#34;&gt;createObjectStore&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;#x27;person&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#123; &lt;span class=&#34;attr&#34;&gt;autoIncrement&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;objectStore.&lt;span class=&#34;title function_&#34;&gt;createIndex&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;name&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;name&amp;#x27;&lt;/span&gt;, &amp;#123; &lt;span class=&#34;attr&#34;&gt;unique&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;objectStore.&lt;span class=&#34;title function_&#34;&gt;createIndex&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;email&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;email&amp;#x27;&lt;/span&gt;, &amp;#123; &lt;span class=&#34;attr&#34;&gt;unique&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;增删改查&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;增删改查都通过事务进行。事务来自于数据库对象，必须指定你想让这个事务跨越哪些对象仓库。事务中有三种模式，表示你想对数据库进行的操作类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;readonly&lt;/code&gt; &lt;strong&gt;默认&lt;/strong&gt;，只读&lt;/li&gt;
&lt;li&gt;&lt;code&gt;readwrite&lt;/code&gt; 读写操作&lt;/li&gt;
&lt;li&gt;&lt;code&gt;versionchange&lt;/code&gt; 修改数据库模式或结构&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只在必要时指定 readwrite 事务。你可以同时执行多个readonly事务，哪怕它们的作用域有重叠；但对于在一个对象仓库上只能运行一个readwrite事务。&lt;/p&gt;
&lt;p&gt;增加一条数据的语句如下：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; transaction = db.&lt;span class=&#34;title function_&#34;&gt;transaction&lt;/span&gt;([&lt;span class=&#34;string&#34;&gt;&amp;quot;person&amp;quot;&lt;/span&gt;], &lt;span class=&#34;string&#34;&gt;&amp;quot;readwrite&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 在所有数据添加完毕后的处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;transaction.&lt;span class=&#34;property&#34;&gt;oncomplete&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;event&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;alert&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;成功&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;transaction.&lt;span class=&#34;property&#34;&gt;onerror&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;event&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;alert&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;失败&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; objectStore = transaction.&lt;span class=&#34;title function_&#34;&gt;objectStore&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;person&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    .&lt;span class=&#34;title function_&#34;&gt;add&lt;/span&gt;(&amp;#123; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;name&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;foo&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;email&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;foo@bar.com&amp;#x27;&lt;/span&gt; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在有了数据后，可以通过几种方法对它进行提取。首先是简单的 &lt;code&gt;get()&lt;/code&gt;，通过键获得值。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; transaction = db.&lt;span class=&#34;title function_&#34;&gt;transaction&lt;/span&gt;([&lt;span class=&#34;string&#34;&gt;&amp;quot;person&amp;quot;&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; objectStore = transaction.&lt;span class=&#34;title function_&#34;&gt;objectStore&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;person&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; request = objectStore.&lt;span class=&#34;title function_&#34;&gt;get&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;request.&lt;span class=&#34;property&#34;&gt;onsuccess&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;event&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 对 request.result 做些操作！&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;alert&lt;/span&gt;(request.&lt;span class=&#34;property&#34;&gt;result&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;name&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;request.&lt;span class=&#34;property&#34;&gt;onerror&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;event&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;alert&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;出错了&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在很多场景下你并不知道数据的键，这时可以用索引找到你要的数据。例子中的&lt;code&gt;name&lt;/code&gt;属性可能并不是唯一的，在这种情况下，你总是得到键值最小的那个。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 前提是你已经建立了name索引&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; index = objectStore.&lt;span class=&#34;title function_&#34;&gt;index&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;index.&lt;span class=&#34;title function_&#34;&gt;get&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;foo&amp;#x27;&lt;/span&gt;).&lt;span class=&#34;property&#34;&gt;onsuccess&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;event&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;alert&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;foo&amp;#x27;s id is &amp;quot;&lt;/span&gt; + event.&lt;span class=&#34;property&#34;&gt;target&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;result&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;id&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在需要遍历某一范围的数据集合时，也可以使用&lt;strong&gt;游标&lt;/strong&gt;，这里要用到&lt;code&gt;openCursor&lt;/code&gt;方法。比如查询整个数据对象存储。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;objectStore.&lt;span class=&#34;title function_&#34;&gt;openCursor&lt;/span&gt;().&lt;span class=&#34;property&#34;&gt;onsuccess&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;event&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; cursor = event.&lt;span class=&#34;property&#34;&gt;target&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;result&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (cursor) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(cursor.&lt;span class=&#34;property&#34;&gt;value&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cursor.&lt;span class=&#34;title function_&#34;&gt;continue&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;alert&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;遍历结束&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;上面的功能也可以通过&lt;code&gt;getAll&lt;/code&gt;完成，但是由于数据对象是懒生成的，&lt;code&gt;getAll&lt;/code&gt;性能会有消耗。当然你如果想直接拿到整个数据组成的数组，还是&lt;code&gt;getAll&lt;/code&gt;好点&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;结合索引（IDBIndex）和游标（IDBCursor）可以查询指定索引的所有记录，方法&lt;code&gt;openCursor&lt;/code&gt;和&lt;code&gt;openKeyCursor&lt;/code&gt;分别返回不同的数据结构。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;index.&lt;span class=&#34;title function_&#34;&gt;openCursor&lt;/span&gt;().&lt;span class=&#34;property&#34;&gt;onsuccess&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;event&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; cursor = event.&lt;span class=&#34;property&#34;&gt;target&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;result&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (cursor) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// cursor.key 是一个 name, 就像 &amp;quot;Bill&amp;quot;, 然后 cursor.value 是整个对象。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;alert&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Name: &amp;quot;&lt;/span&gt; + cursor.&lt;span class=&#34;property&#34;&gt;key&lt;/span&gt; + &lt;span class=&#34;string&#34;&gt;&amp;quot;, email: &amp;quot;&lt;/span&gt; + cursor.&lt;span class=&#34;property&#34;&gt;value&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;email&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cursor.&lt;span class=&#34;title function_&#34;&gt;continue&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;index.&lt;span class=&#34;title function_&#34;&gt;openKeyCursor&lt;/span&gt;().&lt;span class=&#34;property&#34;&gt;onsuccess&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;event&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; cursor = event.&lt;span class=&#34;property&#34;&gt;target&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;result&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (cursor) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// cursor.key 是一个 name, 就像 &amp;quot;Bill&amp;quot;, 然后 cursor.value是主键的值。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 没办法得到存储对象的其余部分。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;alert&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Name: &amp;quot;&lt;/span&gt; + cursor.&lt;span class=&#34;property&#34;&gt;key&lt;/span&gt; + &lt;span class=&#34;string&#34;&gt;&amp;quot;, id: &amp;quot;&lt;/span&gt; + cursor.&lt;span class=&#34;property&#34;&gt;value&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cursor.&lt;span class=&#34;title function_&#34;&gt;continue&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;更多游标设置参考&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/API/IndexedDB_API/Using_IndexedDB#%E6%8C%87%E5%AE%9A%E6%B8%B8%E6%A0%87%E7%9A%84%E8%8C%83%E5%9B%B4%E5%92%8C%E6%96%B9%E5%90%91&#34;&gt;mdn&lt;/a&gt;的介绍。&lt;/p&gt;
&lt;p&gt;更新和删除数据，分别使用&lt;code&gt;put&lt;/code&gt;和&lt;code&gt;delete&lt;/code&gt;方法。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; request = db.&lt;span class=&#34;title function_&#34;&gt;transaction&lt;/span&gt;([&lt;span class=&#34;string&#34;&gt;&amp;#x27;person&amp;#x27;&lt;/span&gt;], &lt;span class=&#34;string&#34;&gt;&amp;#x27;readwrite&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .&lt;span class=&#34;title function_&#34;&gt;objectStore&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;person&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .&lt;span class=&#34;title function_&#34;&gt;put&lt;/span&gt;(&amp;#123; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;name&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;李四&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;age&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;35&lt;/span&gt;, &lt;span class=&#34;attr&#34;&gt;email&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;lisi@example.com&amp;#x27;&lt;/span&gt; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;request.&lt;span class=&#34;property&#34;&gt;onsuccess&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;event&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;数据更新成功&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;request.&lt;span class=&#34;property&#34;&gt;onerror&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;event&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;数据更新失败&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; request = db.&lt;span class=&#34;title function_&#34;&gt;transaction&lt;/span&gt;([&lt;span class=&#34;string&#34;&gt;&amp;#x27;person&amp;#x27;&lt;/span&gt;], &lt;span class=&#34;string&#34;&gt;&amp;#x27;readwrite&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .&lt;span class=&#34;title function_&#34;&gt;objectStore&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;person&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  .&lt;span class=&#34;title function_&#34;&gt;delete&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;request.&lt;span class=&#34;property&#34;&gt;onsuccess&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;event&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;数据删除成功&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;其中put的数据为全量替换，可以通过get方法拿到数据后，修改特定值再交给put完成增量替换。&lt;/p&gt;
&lt;h2 id=&#34;indexedDB封装库&#34;&gt;&lt;a href=&#34;#indexedDB封装库&#34; class=&#34;headerlink&#34; title=&#34;indexedDB封装库&#34;&gt;&lt;/a&gt;indexedDB封装库&lt;/h2&gt;&lt;p&gt;indexedDB虽然强大，但是有些API对于用户来说还是不够方便，下面是几个indexedDB的封装库：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://localforage.github.io/localForage/&#34;&gt;localForage&lt;/a&gt;，支持类Storage API语法的客户端数据存储polyfill，支持回退到Storage和Web SQL&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dexie.org/&#34;&gt;dexie.js&lt;/a&gt;，提供更友好和简单的语法便于快速的编码开发，&lt;strong&gt;有Typescript支持&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/erikolson186/zangodb&#34;&gt;ZangoDB&lt;/a&gt;，提供类MongoDB的接口实现，提供了许多MangoDB的特性实现&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jsstore.net/&#34;&gt;JsStore&lt;/a&gt;，提供基于indexedDB的类SQL的语法实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;综上，考虑到dexie.js的语法更加友善，文档页较完善。最终选择它作为客户端存储的实现。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;&lt;a href=&#34;#参考&#34; class=&#34;headerlink&#34; title=&#34;参考&#34;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jiangzhenghua.iteye.com/blog/1225201&#34;&gt;HTML5本地存储不完全指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wangdoc.com/javascript/bom/indexeddb.html&#34;&gt;IndexedDB API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/API/IndexedDB_API/Using_IndexedDB&#34;&gt;使用 IndexedDB - Web API接口参考 | MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dexie.org/docs/API-Reference&#34;&gt;Dexie.js API Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://shenlvmeng.github.com/blog/2018/11/21/audio-recorder-improvement/</guid>
            <title>前端录音方案优化实践</title>
            <link>http://shenlvmeng.github.com/blog/2018/11/21/audio-recorder-improvement/</link>
            <category>录音</category>
            <category>getUserMedia</category>
            <category>AudioContext</category>
            <category>PCM</category>
            <category>WAVE</category>
            <pubDate>Wed, 21 Nov 2018 23:04:53 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;背景&#34;&gt;&lt;a href=&#34;#背景&#34; class=&#34;headerlink&#34; title=&#34;背景&#34;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;在视听类业务或重交互的业务场景下，有时需要在前端采集用户语音。前端实现录音功能可以使用&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder&#34;&gt;MediaRecorder&lt;/a&gt;，或&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia&#34;&gt;getUserMedia&lt;/a&gt;结合&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/AudioContext&#34;&gt;AudioContext&lt;/a&gt;。其中，前一种方法的支持度惨不忍睹，使用getUserMedia的方式是较为常用的选择。&lt;/p&gt;
&lt;p class=&#34;img-tip&#34; data-str=&#34;MediaRecorder支持度&#34;&gt;&lt;img src=&#39;https://sf3-ttcdn-tos.pstatp.com/img/tos-cn-v-0000/87e5a7855500447eb22349f29814bdf5~noop.png&#39; height=465 width=1261/&gt;&lt;/p&gt;

&lt;h2 id=&#34;现有问题&#34;&gt;&lt;a href=&#34;#现有问题&#34; class=&#34;headerlink&#34; title=&#34;现有问题&#34;&gt;&lt;/a&gt;现有问题&lt;/h2&gt;&lt;p&gt;在实现前端录音上，&lt;a href=&#34;https://github.com/mattdiamond/Recorderjs&#34;&gt;Recorder.js&lt;/a&gt;实现了一个基础可用版，不过它支持的可配置项很少，音频采样率、声道数、采样的比特位数都使用的采集配置的默认值。但在大多场景下，录音文件体积较大，4s的录音可以达到700 ~ 800KB，不利于网络传输，需要录音采集参数可配置，以优化文件体积。&lt;/p&gt;
&lt;p class=&#34;img-tip&#34; data-str=&#34;4s录音的文件体积&#34;&gt;&lt;img src=&#39;https://sf3-ttcdn-tos.pstatp.com/img/tos-cn-v-0000/c2f3c40147a4447fad41d3bea41c4256~noop.png&#39; height=94 width=1178/&gt;&lt;/p&gt;

&lt;p&gt;另外，有些场景录制的语音需要交给算法组做语音识别，对语音有特定要求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;采样率16000Hz&lt;/li&gt;
&lt;li&gt;单声道&lt;/li&gt;
&lt;li&gt;采样位数16bit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这时就需要一个优化的前端录音方案，支持根据输入配置修改音频流数据。&lt;/p&gt;
&lt;h2 id=&#34;优化&#34;&gt;&lt;a href=&#34;#优化&#34; class=&#34;headerlink&#34; title=&#34;优化&#34;&gt;&lt;/a&gt;优化&lt;/h2&gt;&lt;p&gt;这里将原有录音方案的几个关键代码流程整理如下：&lt;/p&gt;
&lt;p class=&#34;img-tip&#34; data-str=&#34;原有录音方案&#34;&gt;&lt;img src=&#39;https://sf3-ttcdn-tos.pstatp.com/img/tos-cn-v-0000/5379450a44474160b9fa09e7dc7ee31d~noop.png&#39; height=490 width=871/&gt;&lt;/p&gt;

&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先调用&lt;code&gt;getUserMedia&lt;/code&gt;获取音频流，并初始化一个&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioSourceNode&#34;&gt;&lt;code&gt;MediaStreamAudioSourceNode&lt;/code&gt;&lt;/a&gt;。使用&lt;code&gt;connect&lt;/code&gt;连接到&lt;code&gt;ScriptProcessorNode&lt;/code&gt;上，并连续触发&lt;code&gt;audioprocess&lt;/code&gt;事件。&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;onaudioprocess&lt;/code&gt;事件处理函数中，拿到录音数据。根据当前&lt;code&gt;recording&lt;/code&gt;的值判断是否写入&lt;code&gt;recBuffers&lt;/code&gt;中。&lt;code&gt;recording&lt;/code&gt;状态可以通过&lt;code&gt;record&lt;/code&gt;和&lt;code&gt;stop&lt;/code&gt;方法控制。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exportWAV&lt;/code&gt;方法会触发导出流程，导出步骤里&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mergeBuffers&lt;/code&gt;将&lt;code&gt;recBuffers&lt;/code&gt;数组扁平化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;interleave&lt;/code&gt;将各声道信息数组扁平化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;encodeWAV&lt;/code&gt;为即将生成的音频文件写入音频头&lt;/li&gt;
&lt;li&gt;最后&lt;code&gt;floatTo16bitPCM&lt;/code&gt;将音频设备采集的元素范围在[0,1]之间的Float32Array，转换成一个元素是16位有符号整数的Float32Array中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最后拿到的Blob类型数据可以本地播放或通过FormData上传服务端使用。&lt;br&gt;下面分几方面介绍录音方案优化的设计和实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;音频头拓展&#34;&gt;&lt;a href=&#34;#音频头拓展&#34; class=&#34;headerlink&#34; title=&#34;音频头拓展&#34;&gt;&lt;/a&gt;音频头拓展&lt;/h3&gt;&lt;p&gt;要支持可拓展的采样率、声道、采样比特数，wav音频头也要动态配置。&lt;/p&gt;
&lt;p&gt;WAVE格式是&lt;a href=&#34;https://en.wikipedia.org/wiki/Resource_Interchange_File_Format&#34;&gt;Resource Interchange File Format&lt;/a&gt;（RIFF）的一种，其基本块名称是“WAVE”，其中包含两个子块“fmt”和“data”。结构上由WAVE_HEADER、WAVE_FMT、WAVE_DATA、采样数据4个部分组成。可以看到实际上就是在PCM数据前面加了一个文件头。WAVE类型文件整体结构图如下：&lt;/p&gt;
&lt;p class=&#34;img-tip&#34; data-str=&#34;WAVE文件头示例&#34;&gt;&lt;img src=&#39;https://sf3-ttcdn-tos.pstatp.com/img/tos-cn-v-0000/e5c3f9bc6d3545308fb50fc10ce64790~noop.png&#39; height=449 width=673/&gt;&lt;/p&gt;

&lt;p&gt;其中和采样率、声道、采样位数相关的字段有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NumChannels&lt;/li&gt;
&lt;li&gt;SampleRate&lt;/li&gt;
&lt;li&gt;ByteRate，等于SampleRate * BlockAlign&lt;/li&gt;
&lt;li&gt;BlockAlign，等于ChannelCount * BitsPerSample &amp;#x2F; 8&lt;/li&gt;
&lt;li&gt;BitsPerSample&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这几个字段根据输入的配置项设置即可实现音频头拓展部分。&lt;br&gt;另外，需要注意的是其中字段有Big Endian和Little Endian的区分，对应在代码里，通过&lt;code&gt;setUint16&lt;/code&gt;和&lt;code&gt;setUIint32&lt;/code&gt;的最后一个入参决定。如下所示：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;encodeWAV&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;samples&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; buffer = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ArrayBuffer&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;44&lt;/span&gt; + samples.&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt; * &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; view = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;DataView&lt;/span&gt;(buffer);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/* RIFF identifier */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;writeString&lt;/span&gt;(view, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;RIFF&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/* RIFF chunk length */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    view.&lt;span class=&#34;title function_&#34;&gt;setUint32&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;36&lt;/span&gt; + samples.&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt; * &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/* RIFF type */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;writeString&lt;/span&gt;(view, &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;WAVE&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/* format chunk identifier */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;writeString&lt;/span&gt;(view, &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;fmt &amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/* format chunk length, PCM use 16 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    view.&lt;span class=&#34;title function_&#34;&gt;setUint32&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/* sample format (raw), PCM use 1 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    view.&lt;span class=&#34;title function_&#34;&gt;setUint16&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/* channel count */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    view.&lt;span class=&#34;title function_&#34;&gt;setUint16&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;22&lt;/span&gt;, numChannels, &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/* sample rate */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    view.&lt;span class=&#34;title function_&#34;&gt;setUint32&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;24&lt;/span&gt;, sampleRate, &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/* byte rate (sample rate * block align) */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    view.&lt;span class=&#34;title function_&#34;&gt;setUint32&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;28&lt;/span&gt;, sampleRate * numChannels * sampleBit / &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/* block align (channel count * bytes per sample) */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    view.&lt;span class=&#34;title function_&#34;&gt;setUint16&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;32&lt;/span&gt;, numChannels * sampleBit / &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/* bits per sample */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    view.&lt;span class=&#34;title function_&#34;&gt;setUint16&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;34&lt;/span&gt;, sampleBit, &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/* data chunk identifier */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;writeString&lt;/span&gt;(view, &lt;span class=&#34;number&#34;&gt;36&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;data&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/* data chunk length */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    view.&lt;span class=&#34;title function_&#34;&gt;setUint32&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;40&lt;/span&gt;, samples.&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt; * &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; view;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;采样率&#34;&gt;&lt;a href=&#34;#采样率&#34; class=&#34;headerlink&#34; title=&#34;采样率&#34;&gt;&lt;/a&gt;采样率&lt;/h3&gt;&lt;p&gt;通常前端录音的音频采样率是音频设备默认使用的44.1kHz（或48kHz）。开发者需要默认以外的采样率时（比如16kHz），可以在录音数据交给&lt;code&gt;encodeWAV&lt;/code&gt;封装前根据新的采样率做重采样。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;compress&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;samples, ratio&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; length = samples.&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt; / ratio;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; result = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Float32Array&lt;/span&gt;(length);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; index = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; index &amp;lt; length; index++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        result[index] = samples[index * ratio];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;重采样的原理上，程序根据重采样和原始采用率的比值，间隔采样音频原数据，丢弃掉其他采样点数据，从而模拟采样率的等比例下降。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;注：间隔丢弃原数据在重采样率是原采样率的整数倍分之一时（即1、1&amp;#x2F;2、1&amp;#x2F;3…）才不会损失用户音色。另外，重采样率比原采样率高时，需要在采样点中间额外插值，这里未实现；&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;声道数&#34;&gt;&lt;a href=&#34;#声道数&#34; class=&#34;headerlink&#34; title=&#34;声道数&#34;&gt;&lt;/a&gt;声道数&lt;/h3&gt;&lt;p&gt;在&lt;code&gt;audioprocess&lt;/code&gt;事件中，需要根据配置项中的声道数，从inputBuffer取对应声道数据，一般的处理下，会丢弃多余的声道数据。类似地，在存储声道数据时，也要灵活考虑配置项。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;node&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;onaudioprocess&lt;/span&gt; = &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;e&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;recording&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; buffer = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; channel = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; channel &amp;lt; &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;config&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;numChannels&lt;/span&gt;; channel++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        buffer.&lt;span class=&#34;title function_&#34;&gt;push&lt;/span&gt;(e.&lt;span class=&#34;property&#34;&gt;inputBuffer&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;getChannelData&lt;/span&gt;(channel));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;record&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;inputBuffer&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; channel = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; channel &amp;lt; numChannels; channel++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        recBuffers[channel].&lt;span class=&#34;title function_&#34;&gt;push&lt;/span&gt;(inputBuffer[channel]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    recLength += inputBuffer[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在最后导出时，根据声道数判断是否需要interleave的步骤。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (numChannels === &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    interleaved = &lt;span class=&#34;title function_&#34;&gt;interleave&lt;/span&gt;(buffers[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;], buffers[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [interleaved] = buffers;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;采样位数&#34;&gt;&lt;a href=&#34;#采样位数&#34; class=&#34;headerlink&#34; title=&#34;采样位数&#34;&gt;&lt;/a&gt;采样位数&lt;/h3&gt;&lt;p&gt;默认的采样位数是16位，在对音质或位数没有明确要求时，可以转成8位。&lt;/p&gt;
&lt;p&gt;PCM16LE格式的采样数据的取值范围是-32768到32767，而PCM8格式的采样数据的取值范围是0到255。因此PCM16LE转换到PCM8需要将-32768到32767的16bit有符号数值转换为0到255的8bit无符号数值。实现上，见下面的对比：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;floatTo16BitPCM&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;output, offset, input&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; initOffset = offset;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; input.&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt;; i++, initOffset += &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; s = &lt;span class=&#34;title class_&#34;&gt;Math&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;max&lt;/span&gt;(-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;title class_&#34;&gt;Math&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;min&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, input[i]));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        output.&lt;span class=&#34;title function_&#34;&gt;setInt16&lt;/span&gt;(initOffset, s &amp;lt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; ? s * &lt;span class=&#34;number&#34;&gt;0x8000&lt;/span&gt; : s * &lt;span class=&#34;number&#34;&gt;0x7FFF&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;floatTo8bitPCM&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;output, offset, input&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; initOffset = offset;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; input.&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt;; i++, initOffset++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; s = &lt;span class=&#34;title class_&#34;&gt;Math&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;max&lt;/span&gt;(-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;title class_&#34;&gt;Math&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;min&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, input[i]));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; val = s &amp;lt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; ? s * &lt;span class=&#34;number&#34;&gt;0x8000&lt;/span&gt; : s * &lt;span class=&#34;number&#34;&gt;0x7FFF&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        output.&lt;span class=&#34;title function_&#34;&gt;setInt8&lt;/span&gt;(initOffset, &lt;span class=&#34;built_in&#34;&gt;parseInt&lt;/span&gt;(val / &lt;span class=&#34;number&#34;&gt;256&lt;/span&gt; + &lt;span class=&#34;number&#34;&gt;128&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;), &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上方的&lt;code&gt;floatTo16BitPCM&lt;/code&gt;是转换音频采样数据到PCM数据的原始方法，下面的&lt;code&gt;floatTo8BitPCM&lt;/code&gt;方法中&lt;code&gt;parseInt(val / 256 + 128, 10)&lt;/code&gt;做了16位到8位的转换。最后在封装音频数据为Blob类型时，根据采样位数使用不同函数即可。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;encodeWAV&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;samples&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sampleBit === &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ? &lt;span class=&#34;title function_&#34;&gt;floatTo8bitPCM&lt;/span&gt;(view, &lt;span class=&#34;number&#34;&gt;44&lt;/span&gt;, samples)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        : &lt;span class=&#34;title function_&#34;&gt;floatTo16BitPCM&lt;/span&gt;(view, &lt;span class=&#34;number&#34;&gt;44&lt;/span&gt;, samples);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; view;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;其他&#34;&gt;&lt;a href=&#34;#其他&#34; class=&#34;headerlink&#34; title=&#34;其他&#34;&gt;&lt;/a&gt;其他&lt;/h3&gt;&lt;p&gt;最后，由于前端录音场景下，音频流基本都来自&lt;code&gt;getUserMedia&lt;/code&gt;，为了减少模板代码，库里封装了一个static方法，快捷地直接由&lt;code&gt;getUserMedia&lt;/code&gt;构造一个recorder对象。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;createFromUserMedia&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;config&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; stream = &lt;span class=&#34;keyword&#34;&gt;await&lt;/span&gt; navigator.&lt;span class=&#34;property&#34;&gt;mediaDevices&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;getUserMedia&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;audio&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;mandatory&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;attr&#34;&gt;googEchoCancellation&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;false&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;attr&#34;&gt;googAutoGainControl&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;false&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;attr&#34;&gt;googNoiseSuppression&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;false&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;attr&#34;&gt;googHighpassFilter&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;false&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;optional&lt;/span&gt;: []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;video&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; context = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AudioContext&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Recorder&lt;/span&gt;(context.&lt;span class=&#34;title function_&#34;&gt;createMediaStreamSource&lt;/span&gt;(stream, config));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;使用&#34;&gt;&lt;a href=&#34;#使用&#34; class=&#34;headerlink&#34; title=&#34;使用&#34;&gt;&lt;/a&gt;使用&lt;/h2&gt;&lt;p&gt;在之前提到了需要算法组音频识别的场景下，只需要在构造时指定配置项即可。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Recorder&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;./audio-recorder&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;recorder&lt;/span&gt; = &lt;span class=&#34;title class_&#34;&gt;Recorder&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;createFromUserMedia&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;sampleBit&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;, &lt;span class=&#34;comment&#34;&gt;// 可省略&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;numChannels&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;sampleRate&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;16000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;此时，一个500ms的录音大概15KB，换算下来4s大约120KB，比此前的体积小了很多。在不强调音质的场景下，表现要好许多。&lt;/p&gt;
&lt;h2 id=&#34;小结&#34;&gt;&lt;a href=&#34;#小结&#34; class=&#34;headerlink&#34; title=&#34;小结&#34;&gt;&lt;/a&gt;小结&lt;/h2&gt;&lt;p&gt;上面的录音方案优化实践主要包含下面几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WAVE音频头修改&lt;/li&gt;
&lt;li&gt;重采样音频数据&lt;/li&gt;
&lt;li&gt;丢弃多余的声道数据&lt;/li&gt;
&lt;li&gt;转换16位音频数据到8位&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;源码在&lt;a href=&#34;https://github.com/shenlvmeng/audio-recorder&#34;&gt;这里&lt;/a&gt;，欢迎使用与拍砖。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;&lt;a href=&#34;#参考&#34; class=&#34;headerlink&#34; title=&#34;参考&#34;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mattdiamond/Recorderjs&#34;&gt;mattdiamond&amp;#x2F;Recorderjs A plugin for recording&amp;#x2F;exporting the output of Web Audio API nodes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/leixiaohua1020/article/details/50534316&#34;&gt;视音频数据处理入门：PCM音频采样数据处理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://soundfile.sapp.org/doc/WaveFormat/&#34;&gt;Microsoft WAVE soundfile format&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://shenlvmeng.github.com/blog/2018/10/31/react-hooks-intro/</guid>
            <title>React Hooks简要介绍</title>
            <link>http://shenlvmeng.github.com/blog/2018/10/31/react-hooks-intro/</link>
            <category>React</category>
            <category>Hooks</category>
            <category>函数组件</category>
            <category>复用</category>
            <pubDate>Wed, 31 Oct 2018 23:32:17 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;a href=&#34;https://reactjs.org/docs/hooks-intro.html&#34;&gt;Hooks&lt;/a&gt;是&lt;a href=&#34;https://www.npmjs.com/package/react?activeTab=versions&#34;&gt;React v16.7.0-alpha&lt;/a&gt;中引入的新特性，目前（2018年10月底）还在&lt;a href=&#34;https://github.com/reactjs/rfcs/pull/68&#34;&gt;讨论之中&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;关于这次改动，官网里特地表明&lt;a href=&#34;https://reactjs.org/docs/hooks-intro.html#no-breaking-changes&#34;&gt;&lt;strong&gt;这不是Breaking Changes&lt;/strong&gt;&lt;/a&gt;，并且向前兼容，大家可以放心地使用。在动机上：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用Hooks将便于开发者拆分和复用state&lt;strong&gt;管理的逻辑&lt;/strong&gt;（而不是state本身）&lt;/li&gt;
&lt;li&gt;使用Hooks将把Class组件中的React生命周期方法抽象成effects，根据需要插入&lt;/li&gt;
&lt;li&gt;除了state和生命周期方法，React还将class提供的更多features拆分出来作为额外功能，按需使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面将从上面几点分别展开介绍，并给出一些使用须知。&lt;/p&gt;
&lt;h2 id=&#34;State-Hook&#34;&gt;&lt;a href=&#34;#State-Hook&#34; class=&#34;headerlink&#34; title=&#34;State Hook&#34;&gt;&lt;/a&gt;State Hook&lt;/h2&gt;&lt;p&gt;根据上面所述，用来拆分和复用state管理逻辑。通常情况下，class组件中的state更新逻辑比较简单。和&lt;a href=&#34;https://reactjs.org/docs/hooks-state.html&#34;&gt;官网给的例子&lt;/a&gt;本质上没什么差别。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; useState &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;react&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;Example&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// Declare a new state variable, which we&amp;#x27;ll call &amp;quot;count&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; [count, setCount] = &lt;span class=&#34;title function_&#34;&gt;useState&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;language-xml&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-xml&#34;&gt;      &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;You clicked &amp;#123;count&amp;#125; times&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-xml&#34;&gt;      &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;button&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;onClick&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;#123;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; setCount(count + 1)&amp;#125;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-xml&#34;&gt;        Click me&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-xml&#34;&gt;      &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-xml&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;useState&lt;/code&gt;是State Hook提供的API方法，它只需&lt;strong&gt;1个入参&lt;/strong&gt;，表示状态的初始值。返回一个pair：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一个元素，状态本身，类似&lt;code&gt;this.state.xxx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;第二个元素，设置状态方法，类似&lt;code&gt;this.setState(&amp;#123; xxx: &amp;#39;foo&amp;#39; &amp;#125;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;需要注意的是，第二个元素，设置状态的方法不是增量更新，而是直接替换&lt;/strong&gt;，这点和&lt;code&gt;setState&lt;/code&gt;有区别。&lt;/p&gt;
&lt;p&gt;在下面的渲染部分，直接使用状态名即可。当然这里只声明了一个需要的状态变量，需要新的状态变量（比如：&lt;code&gt;[fruit, setFruit]&lt;/code&gt;）时，需要用同样的方法获得返回，像下面这样：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Declare multiple state variables!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; [age, setAge] = &lt;span class=&#34;title function_&#34;&gt;useState&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;42&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; [fruit, setFruit] = &lt;span class=&#34;title function_&#34;&gt;useState&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;banana&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; [todos, setTodos] = &lt;span class=&#34;title function_&#34;&gt;useState&lt;/span&gt;([&amp;#123; &lt;span class=&#34;attr&#34;&gt;text&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;Learn Hooks&amp;#x27;&lt;/span&gt; &amp;#125;]);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;可以看到，使用State Hook时，如何&lt;strong&gt;拆分state&lt;/strong&gt;到各useState中是需要考虑的事情。&lt;/p&gt;
&lt;h2 id=&#34;Effect-Hook&#34;&gt;&lt;a href=&#34;#Effect-Hook&#34; class=&#34;headerlink&#34; title=&#34;Effect Hook&#34;&gt;&lt;/a&gt;Effect Hook&lt;/h2&gt;&lt;p&gt;Effect Hook用来处理&lt;strong&gt;React每次渲染完成后的副作用&lt;/strong&gt;。它等同于&lt;code&gt;componentDidMount&lt;/code&gt;, &lt;code&gt;componentDidUpdate&lt;/code&gt;, 再加上&lt;code&gt;componentWillUnmount&lt;/code&gt;。副作用分两种，需要cleanup和不需要cleanup的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不需要Cleanup&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通常的副作用包括数据请求、DOM修改等等。这些操作不需要清理占用的资源。使用时类似下面这样。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; useState, useEffect &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;react&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;Example&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; [count, setCount] = &lt;span class=&#34;title function_&#34;&gt;useState&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;useEffect&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;title&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;`You clicked &lt;span class=&#34;subst&#34;&gt;$&amp;#123;count&amp;#125;&lt;/span&gt; times`&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;language-xml&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-xml&#34;&gt;      &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;You clicked &amp;#123;count&amp;#125; times&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-xml&#34;&gt;      &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;button&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;onClick&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;#123;()&lt;/span&gt; =&amp;gt;&lt;/span&gt; setCount(count + 1)&amp;#125;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-xml&#34;&gt;        Click me&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-xml&#34;&gt;      &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-xml&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;使用&lt;code&gt;useEffect&lt;/code&gt;方法，传入一个函数作为唯一入参。这样，在&lt;strong&gt;每次render完成后（包含第一次render）&lt;/strong&gt;，都会执行这个函数，去完成副作用的部分。&lt;/p&gt;
&lt;p&gt;你可能有些疑惑，如果我有某个副作用，只在componentDidMount使用一次，比如获取DOM ref这种呢？另外，每次重新渲染后，如果副作用依赖于当前的状态值，难道还需要写if语句判断状态有没有变化吗？接着，往下看。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;userEffect&lt;/code&gt;这个方法可以有第二个入参，这个入参是数组类型，表示这个effects所依赖的内部状态。（&lt;strong&gt;注意：这个状态必须是上面用&lt;code&gt;useState&lt;/code&gt;声明的&lt;/strong&gt;）只有数组内的状态变化时，React才会去执行第一个入参的函数。&lt;/p&gt;
&lt;p&gt;另外，数组为空时，表示函数没有依赖，即只在componentDidMount时执行一次即可。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;useEffect&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable language_&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;title&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;`You clicked &lt;span class=&#34;subst&#34;&gt;$&amp;#123;count&amp;#125;&lt;/span&gt; times`&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;, [count]); &lt;span class=&#34;comment&#34;&gt;// Only re-run the effect if count changes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;useEffect&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;This component has been rendered.&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;, []); &lt;span class=&#34;comment&#34;&gt;// Only re-run at the first rendering&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;最后，&lt;code&gt;useEffect&lt;/code&gt;是异步完成的，即不会block浏览器更新屏幕内容，以节省资源。在一些不常见的场景，如需要测量当前布局时，需要用同步的&lt;code&gt;useLayoutEffect&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;需要Cleanup&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有的副作用以添加事件监听、设置定时器等等的subscription的形式进行，这些在组件销毁后需要释放掉占用的资源，避免内存泄漏。类似你之前在&lt;code&gt;componentWillUnmount&lt;/code&gt;里写的逻辑。&lt;/p&gt;
&lt;p&gt;React用&lt;code&gt;useEffect&lt;/code&gt;表示这个副作用的清除操作。用法类似&lt;code&gt;setTimeout&lt;/code&gt;，用返回值作为handler。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;useEffect&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;ChatAPI&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;subscribeToFriendStatus&lt;/span&gt;(props.&lt;span class=&#34;property&#34;&gt;friend&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;id&lt;/span&gt;, handleStatusChange);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// Specify how to clean up after this effect:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;cleanup&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;ChatAPI&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;unsubscribeFromFriendStatus&lt;/span&gt;(props.&lt;span class=&#34;property&#34;&gt;friend&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;id&lt;/span&gt;, handleStatusChange);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在实际运行时，一个Effect在组件re-render时都会被重新销毁再重建，以便于在componentDidUpdate时，也能跟踪到副作用内使用的状态的最新值。上面那段代码可能会遇到下面这样的实际运行情况：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Mount with &amp;#123; friend: &amp;#123; id: 100 &amp;#125; &amp;#125; props&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;ChatAPI&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;subscribeToFriendStatus&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;, handleStatusChange);     &lt;span class=&#34;comment&#34;&gt;// Run first effect&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Update with &amp;#123; friend: &amp;#123; id: 200 &amp;#125; &amp;#125; props&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;ChatAPI&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;unsubscribeFromFriendStatus&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;, handleStatusChange); &lt;span class=&#34;comment&#34;&gt;// Clean up previous effect&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;ChatAPI&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;subscribeToFriendStatus&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;200&lt;/span&gt;, handleStatusChange);     &lt;span class=&#34;comment&#34;&gt;// Run next effect&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Update with &amp;#123; friend: &amp;#123; id: 300 &amp;#125; &amp;#125; props&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;ChatAPI&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;unsubscribeFromFriendStatus&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;200&lt;/span&gt;, handleStatusChange); &lt;span class=&#34;comment&#34;&gt;// Clean up previous effect&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;ChatAPI&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;subscribeToFriendStatus&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;300&lt;/span&gt;, handleStatusChange);     &lt;span class=&#34;comment&#34;&gt;// Run next effect&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Unmount&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;ChatAPI&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;unsubscribeFromFriendStatus&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;300&lt;/span&gt;, handleStatusChange); &lt;span class=&#34;comment&#34;&gt;// Clean up last effect&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;为了避免这样的频繁操作影响性能，可以通过上面介绍的传第二个参数的方式优化性能。&lt;a href=&#34;https://reactjs.org/docs/hooks-effect.html#tip-optimizing-performance-by-skipping-effects&#34;&gt;官方文档&lt;/a&gt;在最后还补充了一句：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In the future, the second argument might get added automatically by a build-time transformation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;一些使用准则&#34;&gt;&lt;a href=&#34;#一些使用准则&#34; class=&#34;headerlink&#34; title=&#34;一些使用准则&#34;&gt;&lt;/a&gt;一些使用准则&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在函数内部的最外层使用，&lt;strong&gt;别在块语句内使用&lt;/strong&gt;，以保证正确的内部状态&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;只在函数组件和自定义Hooks中使用Hooks API&lt;/strong&gt;，以保证可读性&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/eslint-plugin-react-hooks&#34;&gt;这个eslint-plugin&lt;/a&gt;能帮助你检查代码风格&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为什么会有看起来比较别扭的上面两条规则呢？&lt;/p&gt;
&lt;p&gt;从&lt;code&gt;useState&lt;/code&gt;和&lt;code&gt;useEffect&lt;/code&gt;看到，API本身是没有状态的，并不知道API的返回赋值给了哪个变量名。所以，就像介绍里说的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;React relies on the order in which Hooks are called.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;React依赖于Hooks的调用顺序，因此在每次render时，Hooks方法的调用顺序&lt;strong&gt;一定要保持一致&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;（猜测内部用类似数组的结构保存了一个函数组件内的多个Hooks）&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;从而，所有导致Hooks可能不按一致顺序执行的写法都不建议使用。为了保证Hooks执行顺序所见即所得，又有了第二条准则。&lt;/p&gt;
&lt;h2 id=&#34;组合-自定义Hooks&#34;&gt;&lt;a href=&#34;#组合-自定义Hooks&#34; class=&#34;headerlink&#34; title=&#34;组合 - 自定义Hooks&#34;&gt;&lt;/a&gt;组合 - 自定义Hooks&lt;/h2&gt;&lt;p&gt;Hooks除了或多或少基于React提供的Hooks外，只是再普通不过的JavaScript function而已。可以将组件中共用的&lt;strong&gt;状态逻辑&lt;/strong&gt;拆分出来作为自定义Hooks。类似下面这样：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; &amp;#123; useState, useEffect &amp;#125; &lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;react&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;useFriendStatus&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;friendID&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; [isOnline, setIsOnline] = &lt;span class=&#34;title function_&#34;&gt;useState&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;handleStatusChange&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;status&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;setIsOnline&lt;/span&gt;(status.&lt;span class=&#34;property&#34;&gt;isOnline&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;useEffect&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;ChatAPI&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;subscribeToFriendStatus&lt;/span&gt;(friendID, handleStatusChange);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title class_&#34;&gt;ChatAPI&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;unsubscribeFromFriendStatus&lt;/span&gt;(friendID, handleStatusChange);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; isOnline;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;强烈建议用户自定义的Hooks函数也以&lt;code&gt;use&lt;/code&gt;开头&lt;/strong&gt;。在使用时，就像使用正常的函数即可。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;FriendStatus&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;props&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; isOnline = &lt;span class=&#34;title function_&#34;&gt;useFriendStatus&lt;/span&gt;(props.&lt;span class=&#34;property&#34;&gt;friend&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;id&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (isOnline === &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;Loading...&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; isOnline ? &lt;span class=&#34;string&#34;&gt;&amp;#x27;Online&amp;#x27;&lt;/span&gt; : &lt;span class=&#34;string&#34;&gt;&amp;#x27;Offline&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;FriendListItem&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;props&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; isOnline = &lt;span class=&#34;title function_&#34;&gt;useFriendStatus&lt;/span&gt;(props.&lt;span class=&#34;property&#34;&gt;friend&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;id&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;language-xml&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;li&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;style&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;#123;&amp;#123;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;color:&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;isOnline&lt;/span&gt; ? &amp;#x27;&lt;span class=&#34;attr&#34;&gt;green&lt;/span&gt;&amp;#x27; &lt;span class=&#34;attr&#34;&gt;:&lt;/span&gt; &amp;#x27;&lt;span class=&#34;attr&#34;&gt;black&lt;/span&gt;&amp;#x27; &amp;#125;&amp;#125;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-xml&#34;&gt;      &amp;#123;props.friend.name&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-xml&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Hooks共用的是状态逻辑，使用同一个自定义Hooks创建的状态是相互隔离的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;你可以发挥你的想象力，抽象共用的状态逻辑，使用组合的方式（在函数中组合，React并不建议在class组件中使用mixin）构建新组件，减少组件代码长度。&lt;/p&gt;
&lt;p&gt;官网举了个非常简单却普遍的&lt;code&gt;useReducer&lt;/code&gt;的例子。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;useReducer&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;reducer, initialState&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; [state, setState] = &lt;span class=&#34;title function_&#34;&gt;useState&lt;/span&gt;(initialState);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;dispatch&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;action&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; nextState = &lt;span class=&#34;title function_&#34;&gt;reducer&lt;/span&gt;(state, action);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;setState&lt;/span&gt;(nextState);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; [state, dispatch];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;Todos&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; [todos, dispatch] = &lt;span class=&#34;title function_&#34;&gt;useReducer&lt;/span&gt;(todosReducer, []);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;handleAddClick&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;text&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;dispatch&lt;/span&gt;(&amp;#123; &lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;add&amp;#x27;&lt;/span&gt;, text &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;还有什么Hooks&#34;&gt;&lt;a href=&#34;#还有什么Hooks&#34; class=&#34;headerlink&#34; title=&#34;还有什么Hooks&#34;&gt;&lt;/a&gt;还有什么Hooks&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;useContext&lt;/code&gt;，接受&lt;code&gt;React.createContext&lt;/code&gt;作为入参，在每次provider更新后，自动用最新的context重渲染。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;useReducer&lt;/code&gt;，组件状态逻辑很复杂时，代替&lt;code&gt;useState&lt;/code&gt;使用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;useCallback&lt;/code&gt;，保存一个和当前状态相关的函数，只有状态变化时，函数才会更新，避免重复创建函数。  &lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; memoizedCallback = &lt;span class=&#34;title function_&#34;&gt;useCallback&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;doSomething&lt;/span&gt;(a, b);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  [a, b]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;useMemo&lt;/code&gt;，保存一个和当前状态相关的值，只有状态变化时，值才会重新计算。不提供数组代表每次渲染都会更新。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;useRef&lt;/code&gt;，获取DOM ref  &lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;TextInputWithFocusButton&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; inputEl = &lt;span class=&#34;title function_&#34;&gt;useRef&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;onButtonClick&lt;/span&gt; = (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// `current` points to the mounted text input element&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    inputEl.&lt;span class=&#34;property&#34;&gt;current&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;focus&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;language-xml&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-xml&#34;&gt;      &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;ref&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;#123;inputEl&amp;#125;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-xml&#34;&gt;      &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;button&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;onClick&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;#123;onButtonClick&amp;#125;&lt;/span&gt;&amp;gt;&lt;/span&gt;Focus the input&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-xml&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;useImperativeMethods&lt;/code&gt;，暴露当前组件Ref给父组件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;useMutationEffect&lt;/code&gt;和&lt;code&gt;useLayoutEffect&lt;/code&gt;，类似&lt;code&gt;useEffect&lt;/code&gt;只是同步执行，而且执行时机有区别&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更多参考&lt;a href=&#34;https://reactjs.org/docs/hooks-reference.html&#34;&gt;文档介绍&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;还有问题？&#34;&gt;&lt;a href=&#34;#还有问题？&#34; class=&#34;headerlink&#34; title=&#34;还有问题？&#34;&gt;&lt;/a&gt;还有问题？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://reactjs.org/docs/hooks-faq.html#do-hooks-cover-all-use-cases-for-classes&#34;&gt;不常见的方法如&lt;code&gt;componentDidCatch&lt;/code&gt;未来会支持&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://reactjs.org/docs/hooks-faq.html#do-hooks-replace-render-props-and-higher-order-components&#34;&gt;范式上，Hooks是高阶组件的更简单形式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://reactjs.org/docs/hooks-faq.html#how-do-i-implement-shouldcomponentupdate&#34;&gt;借助&lt;code&gt;useMemo&lt;/code&gt;，&lt;code&gt;shouldComponentUpdate&lt;/code&gt;可以有更好的写法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://reactjs.org/docs/hooks-faq.html#is-there-something-like-instance-variables&#34;&gt;&lt;code&gt;this.foo&lt;/code&gt;这种写法可以用&lt;code&gt;useRef&lt;/code&gt;实现&lt;/a&gt; - 个人感觉有点不符合直觉&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://reactjs.org/docs/hooks-faq.html#should-i-use-one-or-many-state-variables&#34;&gt;state split准则：将一起改变的state split到一起&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state&#34;&gt;&lt;code&gt;useEffect&lt;/code&gt;需要用到prevState，prevProps时需要hack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://reactjs.org/docs/hooks-faq.html#are-hooks-slow-because-of-creating-functions-in-render&#34;&gt;使用Hooks不会更慢，反而会更快&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://reactjs.org/docs/hooks-faq.html#under-the-hood&#34;&gt;idea来源&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;实践&#34;&gt;&lt;a href=&#34;#实践&#34; class=&#34;headerlink&#34; title=&#34;实践&#34;&gt;&lt;/a&gt;实践&lt;/h3&gt;&lt;p&gt;刚好最近在某管理后台需要有用户列表页的展示，除了获取数据的副作用，只有渲染的功能，用Hooks实现起来就很自然，而在原来的范式下，因为一个额外的网络请求，就需要把functional组件转成class，随之而来的又是一系列的模板代码和声明周期函数。&lt;/p&gt;
&lt;p&gt;使用Hooks之后的代码像下面这样：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;UserList&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; [users, setUsers] = &lt;span class=&#34;title function_&#34;&gt;useState&lt;/span&gt;([]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;fetchData&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; res = &lt;span class=&#34;keyword&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;getUsers&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (res.&lt;span class=&#34;property&#34;&gt;code&lt;/span&gt; === &lt;span class=&#34;number&#34;&gt;200&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;setUsers&lt;/span&gt;(res.&lt;span class=&#34;property&#34;&gt;data&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;useEffect&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;fetchData&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;, []);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;language-xml&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;className&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;admin-users&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-xml&#34;&gt;            &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;用户信息&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-xml&#34;&gt;            &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;Table&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&lt;span class=&#34;language-xml&#34;&gt;                &lt;span class=&#34;attr&#34;&gt;columns&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;#123;columns&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&lt;span class=&#34;language-xml&#34;&gt;                &lt;span class=&#34;attr&#34;&gt;dataSource&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;#123;users&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&lt;span class=&#34;language-xml&#34;&gt;                &lt;span class=&#34;attr&#34;&gt;pagination&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;#123;false&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&lt;span class=&#34;language-xml&#34;&gt;            /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-xml&#34;&gt;        &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;使用原来的模式时，大概像下面这样：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;UserList&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_ inherited__&#34;&gt;Component&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;props&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;super&lt;/span&gt;(props);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;state&lt;/span&gt; = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;attr&#34;&gt;users&lt;/span&gt;: []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;componentDidMount&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; res = &lt;span class=&#34;keyword&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;getUsers&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (res.&lt;span class=&#34;property&#34;&gt;code&lt;/span&gt; === &lt;span class=&#34;number&#34;&gt;200&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;setState&lt;/span&gt;(&amp;#123; &lt;span class=&#34;attr&#34;&gt;users&lt;/span&gt;: res.&lt;span class=&#34;property&#34;&gt;data&lt;/span&gt; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;render&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;language-xml&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;className&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;admin-users&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-xml&#34;&gt;                &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;用户信息&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-xml&#34;&gt;                &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;Table&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&lt;span class=&#34;language-xml&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;columns&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;#123;columns&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&lt;span class=&#34;language-xml&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;dataSource&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;#123;this.state.users&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&lt;span class=&#34;language-xml&#34;&gt;                    &lt;span class=&#34;attr&#34;&gt;pagination&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;#123;false&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&lt;span class=&#34;language-xml&#34;&gt;                /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-xml&#34;&gt;            &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;虽然代码行数类似，但是代码信噪比和可拓展性明显上面更优。&lt;/p&gt;
&lt;h2 id=&#34;感受与展望&#34;&gt;&lt;a href=&#34;#感受与展望&#34; class=&#34;headerlink&#34; title=&#34;感受与展望&#34;&gt;&lt;/a&gt;感受与展望&lt;/h2&gt;&lt;p&gt;我理解Hooks的目的并不是强行把class组件里的功能硬塞到functional组件里（虽然从用法上确实有这种感觉），推荐使用funcational组件的形式。而是一次&lt;strong&gt;新的复用组件逻辑方式的尝试&lt;/strong&gt;。毕竟组合函数比组合class简单多了（React并不建议mixin）。同时通过上面的简单实践可以发现，使用Hooks之后，少了许多&lt;a href=&#34;https://en.wikipedia.org/wiki/Spaghetti_code&#34;&gt;Spaghetti code&lt;/a&gt;，看上去清爽了许多，可读性也随着提高。&lt;/p&gt;
&lt;p&gt;不过另一方面，Hooks的API初看上去挺美，挺简洁好用，那是因为最开始举例的场景简单，不需要hack。由于使用Hooks就意味着用全盘用function的形式写组件，原来用class写法写的复杂的业务组件，如果都用Hooks的方式写，也需要开发者具有一定的设计模式意识。同时在有些场景（比如上面说的prevState，prevProps）要使用比较反直觉的操作才能完成。期待后面Hooks API不断优化后的结果。&lt;/p&gt;
&lt;p&gt;在逐渐使用Hooks的方式写组件后，业务中会有一些共用的Hooks抽象出来，整个项目目录结构也会发生变化，Hooks文件的管理方式还要再实践。期待Hooks能让每个模块代码都能小于200行的一天更早到来😌。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://shenlvmeng.github.com/blog/2018/10/30/password-tech-note/</guid>
            <title>《图解密码技术》总结整理</title>
            <link>http://shenlvmeng.github.com/blog/2018/10/30/password-tech-note/</link>
            <category>算法</category>
            <category>密码</category>
            <category>密钥</category>
            <pubDate>Tue, 30 Oct 2018 00:07:43 +0800</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;本文来自&lt;a href=&#34;https://book.douban.com/subject/26265544/&#34;&gt;《图解密码技术》&lt;/a&gt;一书&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;基本概念&#34;&gt;&lt;a href=&#34;#基本概念&#34; class=&#34;headerlink&#34; title=&#34;基本概念&#34;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;信源、信宿、信道&lt;/li&gt;
&lt;li&gt;加密、解密、密钥&lt;/li&gt;
&lt;li&gt;对称密码、公钥密码、混合密码&lt;/li&gt;
&lt;li&gt;单向散列（hash）函数、信息认证&lt;/li&gt;
&lt;li&gt;数字签名 &amp;#x2F; 篡改和否认&lt;/li&gt;
&lt;li&gt;伪随机数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;信息传递时面临的风险：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;窃听 -&amp;gt; 对称、公钥密码&lt;/li&gt;
&lt;li&gt;篡改 -&amp;gt; 散列函数、消息认证、数字签名&lt;/li&gt;
&lt;li&gt;伪装 -&amp;gt; 消息认证、数字签名&lt;/li&gt;
&lt;li&gt;否认 -&amp;gt; 数字签名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有悖常识的几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不要使用保密的加密算法&lt;/li&gt;
&lt;li&gt;使用低强度密码不如不用&lt;/li&gt;
&lt;li&gt;任何密码都有可能被破解&lt;/li&gt;
&lt;li&gt;密码只是安全的一部分（社工）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;入门&#34;&gt;&lt;a href=&#34;#入门&#34; class=&#34;headerlink&#34; title=&#34;入门&#34;&gt;&lt;/a&gt;入门&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;凯撒密码 &amp;#x2F; 平移 &amp;#x2F; 暴力破解&lt;/li&gt;
&lt;li&gt;简单替换密码 &amp;#x2F; 替换 &amp;#x2F; 频率分析&lt;/li&gt;
&lt;li&gt;Enigma &amp;#x2F; 加密密码的密码 &amp;#x2F; 针对每日密钥的破解&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;对称密码&#34;&gt;&lt;a href=&#34;#对称密码&#34; class=&#34;headerlink&#34; title=&#34;对称密码&#34;&gt;&lt;/a&gt;对称密码&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;编码和异或&lt;/li&gt;
&lt;li&gt;一次性密码和它的问题&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用对称密码时，我们通常默认密钥配送问题已解决&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;DES&#34;&gt;&lt;a href=&#34;#DES&#34; class=&#34;headerlink&#34; title=&#34;DES&#34;&gt;&lt;/a&gt;DES&lt;/h3&gt;&lt;p&gt;全称Data Encryption Standard。于1977年在美国发明并使用。目前可以被暴力破解，因此不应再使用了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DES以&lt;strong&gt;64bit&lt;/strong&gt;为一个单位，使用和明文等长的密钥。&lt;/li&gt;
&lt;li&gt;密钥每8位包含1位纠错码&lt;/li&gt;
&lt;li&gt;基本结构使用Feistel网络&lt;ul&gt;
&lt;li&gt;加密&amp;#x2F;解密步骤以轮为单位，DES有16轮&lt;/li&gt;
&lt;li&gt;每轮运算不加密右半侧，同时右半侧比特和该轮密钥通过轮函数得到本轮加密左侧的密钥，和左侧做异或得到左侧密文&lt;/li&gt;
&lt;li&gt;每轮加密后，进行左右对调，保证右侧的保密&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;解密时用相同结构&lt;/strong&gt;，反向使用子密钥和轮函数即可&lt;/li&gt;
&lt;li&gt;轮函数可以任意复杂&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;差分分析和线性分析衡量分组密码强度&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;三重DES&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由IBM开发，步骤为DES加密 -&amp;gt; DES解密 -&amp;gt; DES加密。密钥长度是原来三倍，即168比特。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;三步使用同一密钥，即向下兼容DES&lt;/li&gt;
&lt;li&gt;根据1、3步是否使用同一密钥，分为DES-EDE2和DES-EDE3&lt;/li&gt;
&lt;li&gt;处理速度慢&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;AES&#34;&gt;&lt;a href=&#34;#AES&#34; class=&#34;headerlink&#34; title=&#34;AES&#34;&gt;&lt;/a&gt;AES&lt;/h3&gt;&lt;p&gt;全称Advanced Encrytion Standard，用来取代DES。由NIST开于1997年开始募集，将作为国家标准。算法要求开源免费，并在社群里公开评审，最终于2000年确定为Rijndael。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基本结构为SPN结构&lt;/li&gt;
&lt;li&gt;明文分组长度固定为&lt;strong&gt;128bit&lt;/strong&gt;、密钥长度可以是128、192、256比特三种&lt;/li&gt;
&lt;li&gt;每轮分为SubBytes、ShiftRows、MixColumns、AddRoundKey四步&lt;ul&gt;
&lt;li&gt;SubBytes，将4字节 * 4字节的矩阵与一个转换矩阵相乘，得到替换后的矩阵&lt;/li&gt;
&lt;li&gt;ShiftRows，逐行做平移&lt;/li&gt;
&lt;li&gt;MixColumns，逐列做矩阵运算&lt;/li&gt;
&lt;li&gt;AddRoundKey，和轮密钥矩阵做对应位上的异或运算&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;解密时，除了AddRoundKey一步，其余均需要做逆运算&lt;/li&gt;
&lt;li&gt;目前还没有针对Rijndael的有效攻击&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;避免使用DES，选择AES&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;分组密码的迭代模式&#34;&gt;&lt;a href=&#34;#分组密码的迭代模式&#34; class=&#34;headerlink&#34; title=&#34;分组密码的迭代模式&#34;&gt;&lt;/a&gt;分组密码的迭代模式&lt;/h2&gt;&lt;p&gt;分组密码只能加密&lt;strong&gt;固定长度&lt;/strong&gt;的密码。因此，需要有&lt;strong&gt;模式&lt;/strong&gt;来迭代加密任意长度的明文。与分组密码相对的是流密码，对数据进行连续处理。&lt;/p&gt;
&lt;h3 id=&#34;ECB&#34;&gt;&lt;a href=&#34;#ECB&#34; class=&#34;headerlink&#34; title=&#34;ECB&#34;&gt;&lt;/a&gt;ECB&lt;/h3&gt;&lt;p&gt;全称为Electronic CodeBook。是最简单直接的分组方式。将明文分组加密后直接得到对应位置的密文。不足的位用特定数据&lt;strong&gt;填充&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;问题很明显，&lt;strong&gt;不要使用&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;相同的明文分组会得到相同的密文分组&lt;/li&gt;
&lt;li&gt;攻击者无需破译密码也可通过修改密文操纵明文，比如替换或删除分组&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;CBC&#34;&gt;&lt;a href=&#34;#CBC&#34; class=&#34;headerlink&#34; title=&#34;CBC&#34;&gt;&lt;/a&gt;CBC&lt;/h3&gt;&lt;p&gt;全称Cipher Block Chaining。和ECB的最大不同在于明文分组加密前会和上一个密文分组做一次异或运算。开头的明文分组会和一个随机序列做XOR。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个密文分组的损坏会影响关联的两个分组的解密&lt;/li&gt;
&lt;li&gt;比特的缺失将会影响整个密文的解密&lt;/li&gt;
&lt;li&gt;操纵初始化向量反转某一位比特可以反转第一个密文分组的某一位&lt;/li&gt;
&lt;li&gt;填充提示攻击，攻击padding部分&lt;/li&gt;
&lt;li&gt;SSL&amp;#x2F;TLS使用CBC模式保证通信机密&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CTS&lt;/strong&gt;使用最后一个密文填充不足的明文部分&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;CFB&#34;&gt;&lt;a href=&#34;#CFB&#34; class=&#34;headerlink&#34; title=&#34;CFB&#34;&gt;&lt;/a&gt;CFB&lt;/h3&gt;&lt;p&gt;全程Cipher FeedBack模式。和CBC模式的区别在密文分组先加密，再和下一个明文做异或运算。实际上明文分组和密文分组间只相差了一个异或运算。很类似一次性密码本的模式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解密时，需要对密文分组和初始向量做&lt;strong&gt;加密&lt;/strong&gt;操作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;重放&lt;/strong&gt;攻击，替换密文分组为原有分组，可使得解密出的明文为原有明文&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;OFB&#34;&gt;&lt;a href=&#34;#OFB&#34; class=&#34;headerlink&#34; title=&#34;OFB&#34;&gt;&lt;/a&gt;OFB&lt;/h3&gt;&lt;p&gt;全称Output-FeedBack模式。和CFB很像，区别在于OFB每次做XOR的密钥流仅来自于上一次的密钥，&lt;strong&gt;和密文分组无关&lt;/strong&gt;。因为密钥流可以提前准备好，分组加密过程可以是并行的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一次的密钥来自初始化向量&lt;/li&gt;
&lt;li&gt;速度快&lt;/li&gt;
&lt;li&gt;如果碰巧密钥加密后和加密前一样，那么之后的密钥就会是同一个值&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;CTR&#34;&gt;&lt;a href=&#34;#CTR&#34; class=&#34;headerlink&#34; title=&#34;CTR&#34;&gt;&lt;/a&gt;CTR&lt;/h3&gt;&lt;p&gt;全称CounTeR。CTR和OFB类似，区别在于它的密钥流来自于累加的计数器。密文分组来自于密钥流和明文分组的XOR运算。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;计数器由nonce和序号两部分各8字节组成，nonce是随机生成的，序号是从1累加的。&lt;/li&gt;
&lt;li&gt;和OFB一样，加密解密速度快，结构简单&lt;/li&gt;
&lt;li&gt;CTR的密钥流在选定nonce后就确定了，因此可以以&lt;strong&gt;任意顺序并行&lt;/strong&gt;加密、解密&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;公钥密码&#34;&gt;&lt;a href=&#34;#公钥密码&#34; class=&#34;headerlink&#34; title=&#34;公钥密码&#34;&gt;&lt;/a&gt;公钥密码&lt;/h2&gt;&lt;p&gt;解决了对称密码的密钥配送问题。&lt;/p&gt;
&lt;h3 id=&#34;密钥配送问题&#34;&gt;&lt;a href=&#34;#密钥配送问题&#34; class=&#34;headerlink&#34; title=&#34;密钥配送问题&#34;&gt;&lt;/a&gt;密钥配送问题&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;事先共享&lt;/strong&gt;，在现实生活中传送&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;密钥配送中心&lt;/strong&gt;，集中式管理用户密钥，用其加密临时的会话密钥&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用Diffie-Hellman密钥交换&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用公钥密码&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;公钥密码-1&#34;&gt;&lt;a href=&#34;#公钥密码-1&#34; class=&#34;headerlink&#34; title=&#34;公钥密码&#34;&gt;&lt;/a&gt;公钥密码&lt;/h3&gt;&lt;p&gt;使用加密密钥（公钥）加密，使用解密密钥（私钥）解密，避免密钥的泄露。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发送者使用加密密钥&lt;/li&gt;
&lt;li&gt;接收者使用解密密钥&lt;/li&gt;
&lt;li&gt;加密密钥可以公开&lt;/li&gt;
&lt;li&gt;解密密钥一定要保密&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;目前所使用的公钥密码RSA来自于1978年的发明。流程上，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;接收者&lt;/strong&gt;生成公私钥对，发送公钥给发送者&lt;/li&gt;
&lt;li&gt;发送者使用公钥加密明文&lt;/li&gt;
&lt;li&gt;接收者使用私钥解密密文&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;公钥密码有两个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;认证公钥的合法性&lt;/li&gt;
&lt;li&gt;处理速度慢&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;RSA&#34;&gt;&lt;a href=&#34;#RSA&#34; class=&#34;headerlink&#34; title=&#34;RSA&#34;&gt;&lt;/a&gt;RSA&lt;/h3&gt;&lt;p&gt;利用了数论中求解离散对数困难且耗时的特点。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;加密&lt;/strong&gt;，使用&lt;code&gt;密文=明文 ^ E mod N&lt;/code&gt;。E和N组合成公钥。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;解密&lt;/strong&gt;，使用&lt;code&gt;明文=密文 ^ D mod N&lt;/code&gt;。D和N组合成密钥。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;生成N、E、D和顺序如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;寻找互质的两个大数p和q，N为二者的乘积&lt;/li&gt;
&lt;li&gt;p-1和q-1的最小公倍数记为L&lt;/li&gt;
&lt;li&gt;寻找比L小的和L互质的数，即为E&lt;/li&gt;
&lt;li&gt;寻找比L小的和E乘积取模L为1的数，即为D&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因为解密时有对N取模操作，因此加密的明文不能大于N。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;攻击方式&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;破解密文 -&amp;gt; 求解离散对数很难&lt;/li&gt;
&lt;li&gt;暴力破解D -&amp;gt; 比特位太长，很难破解&lt;/li&gt;
&lt;li&gt;通过E求解D，只要知道p和q就能算出D -&amp;gt; 不知道p和q的组合 -&amp;gt; &lt;strong&gt;对N质因数分解很难&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;中间人攻击&lt;/strong&gt;里，攻击者可以替换掉原本的公钥，发送给接收者，使用自己的私钥解密，从而实现攻击。这时需要&lt;strong&gt;证书&lt;/strong&gt;保证公钥的权威性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;选择密文攻击&lt;/strong&gt;里，攻击者可以利用服务端返回的错误消息收集加密算法信息。RSA-OAEP会在明文开头加上明文散列值和填充位，解密时发现散列值和内容对不上时，会隐藏错误信息。&lt;/p&gt;
&lt;p&gt;除了RSA外，还有ElGamal方式、Robin方式、ECC（椭圆曲线密码）等公钥密码。它们分别利用了mod N下求离散对数，mod N下求平方根，和椭圆曲线上做乘法运算逆运算在数学上很难求解的特点。&lt;/p&gt;
&lt;h3 id=&#34;FAQ&#34;&gt;&lt;a href=&#34;#FAQ&#34; class=&#34;headerlink&#34; title=&#34;FAQ&#34;&gt;&lt;/a&gt;FAQ&lt;/h3&gt;&lt;p&gt;Q: 和对称密码的强度对比&lt;br&gt;A: 达到同等强度，RSA大致需要密钥是AES长度的20倍&lt;/p&gt;
&lt;p&gt;Q: RSA使用的质数会用完么&lt;br&gt;A: 512bit的质数数目大约是10 ^ 150。足够使用。&lt;/p&gt;
&lt;p&gt;Q: RSA破解难度如何？&lt;br&gt;A: 和大整数质因数分解一样难度&lt;/p&gt;
&lt;p&gt;Q: 要保证RSA强度，N的长度要达到多少位&lt;br&gt;A: 2048bit，4096bit更好&lt;/p&gt;
&lt;h2 id=&#34;混合密码系统&#34;&gt;&lt;a href=&#34;#混合密码系统&#34; class=&#34;headerlink&#34; title=&#34;混合密码系统&#34;&gt;&lt;/a&gt;混合密码系统&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;用对称密码加密明文&lt;/li&gt;
&lt;li&gt;用公钥密码加密上述对称密码的密钥（通常用随机数生成器得到，只用于此次会话）&lt;/li&gt;
&lt;li&gt;公钥密码的密钥由外部赋予（证书）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;密码软件PGP、HTTPS中使用的SSL&amp;#x2F;TLS就使用了混合密码系统。当然它们还包含数字签名、认证、私钥管理等更多处理。&lt;/p&gt;
&lt;p&gt;类似混合密码系统，后面要介绍的数字签名、证书、消息认证、伪随机数生成也都是&lt;strong&gt;基础密码技术的组合&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;单向散列函数&#34;&gt;&lt;a href=&#34;#单向散列函数&#34; class=&#34;headerlink&#34; title=&#34;单向散列函数&#34;&gt;&lt;/a&gt;单向散列函数&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;将任意长度的消息转换到&lt;strong&gt;固定长度&lt;/strong&gt;散列&lt;/li&gt;
&lt;li&gt;具有抗碰撞性，即找到具有相同散列函数的消息很困难&lt;/li&gt;
&lt;li&gt;单向性，即无法从三列中还原原信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;MD4、MD5&#34;&gt;&lt;a href=&#34;#MD4、MD5&#34; class=&#34;headerlink&#34; title=&#34;MD4、MD5&#34;&gt;&lt;/a&gt;MD4、MD5&lt;/h3&gt;&lt;p&gt;全称Message Digest。由Rivest设计于1990和1991年。能够产生&lt;strong&gt;128bit&lt;/strong&gt;的散列值。它们的强抗碰撞性已被攻破，&lt;strong&gt;不建议使用&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;RIPEMD-160&#34;&gt;&lt;a href=&#34;#RIPEMD-160&#34; class=&#34;headerlink&#34; title=&#34;RIPEMD-160&#34;&gt;&lt;/a&gt;RIPEMD-160&lt;/h3&gt;&lt;p&gt;1996年设计，是欧盟RIPE项目的修订版，能产生160bit长度的散列值。比特币中使用的散列函数就是RIPEMD-160。&lt;/p&gt;
&lt;h3 id=&#34;SHA&#34;&gt;&lt;a href=&#34;#SHA&#34; class=&#34;headerlink&#34; title=&#34;SHA&#34;&gt;&lt;/a&gt;SHA&lt;/h3&gt;&lt;p&gt;SHA于1993年由NIST设计，在1995年发布了SHA-1修订版，能够产生&lt;strong&gt;160bit&lt;/strong&gt;的散列值。它的强抗碰撞性已被攻破，&lt;strong&gt;也不建议使用&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;SHA-2于2002年发布，它是包括SHA-256，SHA-384和SHA-512的集合，分别产生&lt;strong&gt;256、384和512bit&lt;/strong&gt;的散列值。目前未被攻破。SHA-2的几种散列长度来自SHA-256和SHA-512的组合。&lt;/p&gt;
&lt;p&gt;SHA-3作为SHA-1的升级替代算法，和AES一样，由NIST公开选拔，并在2012年确定为一个叫&lt;strong&gt;Keccak&lt;/strong&gt;的算法。之后会和SHA-2并存一段时间。&lt;/p&gt;
&lt;h3 id=&#34;Keccak&#34;&gt;&lt;a href=&#34;#Keccak&#34; class=&#34;headerlink&#34; title=&#34;Keccak&#34;&gt;&lt;/a&gt;Keccak&lt;/h3&gt;&lt;p&gt;Keccak可以输入&lt;strong&gt;任意长度&lt;/strong&gt;的数据，产生&lt;strong&gt;任意长度&lt;/strong&gt;的散列值。实现上，Keccak采用海绵结构，有&lt;strong&gt;吸收&lt;/strong&gt;和&lt;strong&gt;挤出&lt;/strong&gt;两阶段。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;吸收阶段，按分组长度r逐段读入消息内容，和内部状态做异或运算，之后和长度为c的内部状态一起交给函数f做“搅拌”。完成一轮处理，输出作为内部状态继读入输入的消息分组。&lt;/li&gt;
&lt;li&gt;挤出阶段，内部消息r和c逐段和函数f做运算，一段段输出散列值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Keccak的双工结构下，输入和输出可以同时进行。Keccak内部状态由5 * 5 * z的一个三维比特数组组成，共有b个bit。Keccak的本质就是实现一个充分搅拌上述数组的函数f。SHA-3中使用的是Keccak-f[1600]函数。其中b就是内部状态的bit数。函数的每一轮包含θ、ρ、π、χ、ι5步。循环轮数为12 + 2 * log2(b &amp;#x2F; 25)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;θ，将不同两个column的各5个bit通过异或运算加起来，再和当前位做异或替换&lt;/li&gt;
&lt;li&gt;ρ，各比特沿z轴方向进行平移&lt;/li&gt;
&lt;li&gt;π，对一个slice上的5 * 5个比特做旋转、轮换操作&lt;/li&gt;
&lt;li&gt;χ，对一个row上的各位做某个逻辑运算&lt;/li&gt;
&lt;li&gt;ι，用某个轮常数对所有比特做异或运算，避免对称性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Keccak采用的海绵结构和此前各散列算法使用的MD结构（循环执行压缩函数）方法截然不同，这也是它最后成为标准的一个原因。目前还未出现针对Keccak的有效攻击手段。&lt;/p&gt;
&lt;h3 id=&#34;攻击方式&#34;&gt;&lt;a href=&#34;#攻击方式&#34; class=&#34;headerlink&#34; title=&#34;攻击方式&#34;&gt;&lt;/a&gt;攻击方式&lt;/h3&gt;&lt;p&gt;利用文件的冗余性，构造&lt;strong&gt;一大堆&lt;/strong&gt;和想要内容一样的数据，找到和原内容散列值一样的结果。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原像攻击，给定散列值，找到具有该散列值的任意消息&lt;/li&gt;
&lt;li&gt;第二原像攻击，给定消息1，找到和消息1有相同散列值的消息2&lt;/li&gt;
&lt;li&gt;生日攻击，攻击散列算法的“强抗碰撞性”（寻找两个具有相同散列值的消息），利用了从有N个元素的集合中依次取并放回M个元素，两次取到同一元素的概率约为根号N的特点。大大减少暴力破解需要的次数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;消息认证&#34;&gt;&lt;a href=&#34;#消息认证&#34; class=&#34;headerlink&#34; title=&#34;消息认证&#34;&gt;&lt;/a&gt;消息认证&lt;/h2&gt;&lt;p&gt;可以同时防止消息的伪装和篡改。消息认证码简称MAC（Message Authentication Code）。可以简单理解成&lt;strong&gt;需要密钥参与的单向散列过程&lt;/strong&gt;。在使用时：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发送者伴随消息发送计算出的MAC&lt;/li&gt;
&lt;li&gt;接受者对消息通过共享密钥计算出MAC值，进行对比，一致则表示认证成功&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;这个密钥不能被中间人获取！&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用消息认证码（MAC）机制的场景有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SWIFT&lt;/li&gt;
&lt;li&gt;IPSec&lt;/li&gt;
&lt;li&gt;SSL&amp;#x2F;TLS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在认证加密时，Encrypt-then-MAC表示对密文计算MAC值，从而能判断密文是由知道明文和密钥的人生成的。除了Encrypt-then-MAC外，还有Encrypt-and-MAC和MAC-then-Encrypt两种方式。&lt;/p&gt;
&lt;h3 id=&#34;HMAC&#34;&gt;&lt;a href=&#34;#HMAC&#34; class=&#34;headerlink&#34; title=&#34;HMAC&#34;&gt;&lt;/a&gt;HMAC&lt;/h3&gt;&lt;p&gt;HMAC即Hash MAC，是使用单向散列函数构造认证码的方法。分为下面几步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在密钥后填充0到长度达到单向散列函数的分组长度&lt;/li&gt;
&lt;li&gt;填充后的密钥和ipad序列做XOR运算，ipad序列是00110110为单位循环的比特序列&lt;/li&gt;
&lt;li&gt;组合在消息&lt;strong&gt;头部&lt;/strong&gt;，并计算出散列值&lt;/li&gt;
&lt;li&gt;填充后的密钥和opad做XOR运算，opad是01011100位单位循环的比特序列&lt;/li&gt;
&lt;li&gt;结果拼在散列值&lt;strong&gt;后面&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;根据5的结果计算最终的散列值&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;应对攻击方式&#34;&gt;&lt;a href=&#34;#应对攻击方式&#34; class=&#34;headerlink&#34; title=&#34;应对攻击方式&#34;&gt;&lt;/a&gt;应对攻击方式&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;消息认证需要解决&lt;strong&gt;重放攻击&lt;/strong&gt;的问题，即再次发送相同的消息和MAC值。可以在消息中额外带上序号、时间戳，或先发送一个nonce一次性随机数保证相同的消息也会有完全不同的MAC值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;密钥推测攻击&lt;/strong&gt;，应保证不能根据MAC值推测出双方使用的密钥，必须使用安全、高强度的伪随机数生成器。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，消息认证无法解决下面的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;向第三方证明，密钥的共享只在通信的双方，无法证明给第三方&lt;/li&gt;
&lt;li&gt;同样的，不能防止通信的一方&lt;strong&gt;否认&lt;/strong&gt;消息&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;数字签名&#34;&gt;&lt;a href=&#34;#数字签名&#34; class=&#34;headerlink&#34; title=&#34;数字签名&#34;&gt;&lt;/a&gt;数字签名&lt;/h2&gt;&lt;p&gt;和公钥密码&lt;strong&gt;相反&lt;/strong&gt;的使用方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发布者使用私钥加密消息，私钥保密&lt;/li&gt;
&lt;li&gt;使用发布者的公钥可以解密消息，公钥公开&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;签名有两种方式：&lt;strong&gt;对消息签名&lt;/strong&gt;和&lt;strong&gt;对消息的散列值签名&lt;/strong&gt;。它们主要区别在签名的对象不同。基本过程是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;生成公、私钥对，发送公钥给接收者&lt;/li&gt;
&lt;li&gt;使用私钥加密消息&amp;#x2F;消息的hash值，得到签名&lt;/li&gt;
&lt;li&gt;发送消息和签名给接收者&lt;/li&gt;
&lt;li&gt;接收者使用公钥解密，对比消息&amp;#x2F;消息hash值，验证发送者身份&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在签名中，密钥只是起着“保证消息发送者的可靠来源目的的”，被复制并不影响它发挥作用。同时，由于不知道私钥，修改消息后无法伪造消息的签名。&lt;/p&gt;
&lt;p&gt;实际应用数字签名的地方有很多：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安全信息公告&lt;/li&gt;
&lt;li&gt;软件下载&lt;/li&gt;
&lt;li&gt;公钥证书，确保公钥的合法来源&lt;/li&gt;
&lt;li&gt;SSL&amp;#x2F;TLS，交换公钥的过程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数字签名基于公钥密码，因此数字签名的实现方式因采用的公钥密码而异，如RSA、ElGamal、ECDSA（椭圆曲线密码）。对数字签名的攻击可以基于单向散列函数或是公钥密码。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;不要对不清楚来源的数据做数字签名&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对消息的散列值函数做数字签名&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数字签名无法解决&lt;strong&gt;验证签名正确性的公钥被伪造&lt;/strong&gt;的问题，因为公钥正确性也依赖于数字签名技术。这里需要&lt;strong&gt;证书&lt;/strong&gt;以及&lt;strong&gt;公钥基础设施PKI&lt;/strong&gt;这种社会学的基础设施辅助。&lt;/p&gt;
&lt;h2 id=&#34;证书&#34;&gt;&lt;a href=&#34;#证书&#34; class=&#34;headerlink&#34; title=&#34;证书&#34;&gt;&lt;/a&gt;证书&lt;/h2&gt;&lt;p&gt;证书即&lt;strong&gt;公钥证书&lt;/strong&gt;，用来验证公钥密码和数字签名的公钥，由认证机构（CA）发布，认证机构可以是政府机关、一般企业或个人。证书的发布过程包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;申请人生成一对密钥，并把公钥发送给CA&lt;/li&gt;
&lt;li&gt;CA验证申请人身份&lt;/li&gt;
&lt;li&gt;通过验证后，CA使用自己的私钥对公钥施加数字签名并生成证书&lt;/li&gt;
&lt;li&gt;使用申请人证书的使用者通过CA的公钥验证申请人的公钥是否合法&lt;/li&gt;
&lt;li&gt;验证通过后，使用公钥完成公钥密码或数字签名&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;PKI是为了能够更有效运用公钥制定的一系列规范的总称。PKI组成要素有3个：使用PKI的用户、认证机构、仓库。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户，分为注册公钥的用户和使用注册公钥的用户&lt;/li&gt;
&lt;li&gt;CA，包括生成密钥、验证本人身份、验证公钥合法性、作废证书&lt;/li&gt;
&lt;li&gt;仓库，是保存证书的数据库&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中认证机构做了以下事情：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;生成密钥对&lt;/strong&gt;，可以由用户或是CA生成，若是CA生成，需要根据规范发送私钥给用户&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注册证书&lt;/strong&gt;，用户根据规范申请证书，认证机构根据业务准则生成符合X.509规范的证书&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作废证书&lt;/strong&gt;，因为私钥丢失等原因需要作废证书时，需要认证机构制作CRL（Certificate Revocation List，证书作废清单），PKI用户总需要从CA获取最新的CRL，以确认自己拿到的公钥证书是否有效。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;认证机构的证书认证&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;认证机构的公钥证书可以由其他的认证机构施加数字签名。这个关系可以嵌套很多层，比如部门认证机构、分公司认证机构、总公司认证机构。一直往上直到根CA，可以对自己的公钥做自签名。&lt;/p&gt;
&lt;p&gt;从而，在验证证书合法性上，也会出现&lt;strong&gt;从上至下&lt;/strong&gt;的验证过程。&lt;/p&gt;
&lt;h3 id=&#34;证书的攻击&#34;&gt;&lt;a href=&#34;#证书的攻击&#34; class=&#34;headerlink&#34; title=&#34;证书的攻击&#34;&gt;&lt;/a&gt;证书的攻击&lt;/h3&gt;&lt;p&gt;对证书的攻击即对数字签名的攻击。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对施加数字签名前的公钥攻击&lt;/li&gt;
&lt;li&gt;注册相似人名进行攻击&lt;/li&gt;
&lt;li&gt;窃取CA的私钥&lt;/li&gt;
&lt;li&gt;伪装成CA发放证书进行攻击，认证机构本身的可信度也很重要&lt;/li&gt;
&lt;li&gt;利用发送CRL的时间间隔，窃取了使用者的私钥，当使用者联系CA发布CRL时，有一定的时间间隔&lt;/li&gt;
&lt;li&gt;同样利用CRL，使用合法私钥发送消息后，发送CRL作废自己的公钥，&lt;strong&gt;否认&lt;/strong&gt;自己之前发送的消息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;不可能在完全不可信的状态下创建出信任关系，除非以已经存在的信任关系为基础。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;密钥&#34;&gt;&lt;a href=&#34;#密钥&#34; class=&#34;headerlink&#34; title=&#34;密钥&#34;&gt;&lt;/a&gt;密钥&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;密钥长度（DES：56bit，三重DES：112bit或168bit，AES：128、192、256bit&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对称密码和公钥密码&lt;strong&gt;用于确保机密性&lt;/strong&gt;，消息认证码和数字签名使用的密码&lt;strong&gt;用于认证，防止篡改内容和伪装身份&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;只使用一次的密钥称为&lt;strong&gt;会话密钥&lt;/strong&gt;，重复使用的密钥称为&lt;strong&gt;主密钥&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;密码学用途的随机数生成器必须为密码学用途专门设计&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;定期改变会话密钥可以减少密钥泄露的损失&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;保存密钥时，使用KEK（Key Encrypting Key）方式保存密钥可以减少管理密钥的数目。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Diffie-Hellman密钥交换&#34;&gt;&lt;a href=&#34;#Diffie-Hellman密钥交换&#34; class=&#34;headerlink&#34; title=&#34;Diffie-Hellman密钥交换&#34;&gt;&lt;/a&gt;Diffie-Hellman密钥交换&lt;/h3&gt;&lt;p&gt;Diffie-Hellman密钥交换里，通信的双方通过交换一些可以公开的消息，就能够生成共享的密钥。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;确定一个非常大的质数P，寻找P的生成元（原根）G&lt;/li&gt;
&lt;li&gt;通信双方各自找1个1 ~ P-2的随机数A、B，生成G ^ A mod P与G ^ B mod P，发送给对方&lt;/li&gt;
&lt;li&gt;对方用收到的数字根据自己选的随机数做乘方运算，得到相等的值作为密钥&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;它同样利用了离散对数问题难以快速求解的特点。这种交换方法可以做中间人攻击，可以用数字签名、证书等方式应对。&lt;/p&gt;
&lt;h3 id=&#34;基于口令的密码（PBE）&#34;&gt;&lt;a href=&#34;#基于口令的密码（PBE）&#34; class=&#34;headerlink&#34; title=&#34;基于口令的密码（PBE）&#34;&gt;&lt;/a&gt;基于口令的密码（PBE）&lt;/h3&gt;&lt;p&gt;基于口令的密码避免了：记忆CEK -&amp;gt; 记忆KEK -&amp;gt; 记忆KEK的KEK的死循环。使用好记忆的口令配合盐生成CEK。使用过程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用随机数生成器生成盐（随机数），加上用户口令，使用单向散列函数得到KEK&lt;/li&gt;
&lt;li&gt;使用KEK加密会话使用的CEK&lt;/li&gt;
&lt;li&gt;保存好盐以及使用KEK加密的会话秘钥&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;盐的目的是避免字典攻击&lt;/li&gt;
&lt;li&gt;口令虽然便于生成，但是强度不高，因此需要格外地小心保管&lt;/li&gt;
&lt;li&gt;可以对KEK迭代使用单向散列函数得到最后的KEK（拉伸），这将加大攻击者的攻击负担&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;生成安全的口令&#34;&gt;&lt;a href=&#34;#生成安全的口令&#34; class=&#34;headerlink&#34; title=&#34;生成安全的口令&#34;&gt;&lt;/a&gt;生成安全的口令&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;使用&lt;strong&gt;只有自己&lt;/strong&gt;知道的信息&lt;ul&gt;
&lt;li&gt;不包括别人见过的信息&lt;/li&gt;
&lt;li&gt;不包括可以很容易推测的信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不应该重复使用口令，容易受牵连影响&lt;/li&gt;
&lt;li&gt;物理保存是可以的，但要注意安全&lt;/li&gt;
&lt;li&gt;可以使用口令生成和管理工具（比如1Password）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;随机数生成&#34;&gt;&lt;a href=&#34;#随机数生成&#34; class=&#34;headerlink&#34; title=&#34;随机数生成&#34;&gt;&lt;/a&gt;随机数生成&lt;/h2&gt;&lt;p&gt;随机数生成在密码学中很常用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;生成密钥&lt;/li&gt;
&lt;li&gt;生成分组密码的初始化向量&lt;/li&gt;
&lt;li&gt;生成CTR模式的nonce&lt;/li&gt;
&lt;li&gt;生成盐&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;随机数至少需要具有下面的属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;随机等概性&lt;/li&gt;
&lt;li&gt;无状态，即无法从上一个推测下一个，生成序列无法重现&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于计算机构成的抽象世界是&lt;strong&gt;离散的&lt;/strong&gt;，内部状态有限，不能满足无状态的特点，因此只能称作&lt;strong&gt;伪随机数生成器&lt;/strong&gt;。基于计算机硬件的随机数生成器可以认为是“真”随机数，它通常提前储存在一个随机数池中，在需要的时候直接从池中取用。伪随机数生成器根据随机的种子（seed）通过算法将内部状态转化为最终的随机数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;线性同余法&lt;/strong&gt;，以当前随机数为内部状态（初始值为种子），(A x Rn + C) mod M，计算下一个值。其中A、C、M都需要事先选好，线性同余法生成的随机数数列具有可预测性，即不需要知道种子也可以推测下随机数值&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;单向散列函数&lt;/strong&gt;，利用单向散列函数保护内部状态，以种子为初始值，逐次递加得到新的内部状态，再通过单向散列函数输出为随机数&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;密码法&lt;/strong&gt;，类似单向散列函数，使用密钥加密内部状态输出也可以作为随机数，此时保护内部状态的加密算法和密钥&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ANSI X9.17&lt;/strong&gt;中，使用AES和三重DES作为密码算法&lt;ol&gt;
&lt;li&gt;初始化内部状态&lt;/li&gt;
&lt;li&gt;使用当前时间生成掩码&lt;/li&gt;
&lt;li&gt;掩码和内部状态做XOR&lt;/li&gt;
&lt;li&gt;加密3的输出，作为随机数输出&lt;/li&gt;
&lt;li&gt;对加密后的输出与掩码做XOR&lt;/li&gt;
&lt;li&gt;加密5的结果作为新的内部状态&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;PGP介绍&#34;&gt;&lt;a href=&#34;#PGP介绍&#34; class=&#34;headerlink&#34; title=&#34;PGP介绍&#34;&gt;&lt;/a&gt;PGP介绍&lt;/h2&gt;&lt;p&gt;PGP全程Pretty Good Privacy，编写于1990年，具备现代密码软件所需的几乎所有功能。OpenPGP是一对密文和数字签名进行定义的标准规格。&lt;/p&gt;
&lt;h3 id=&#34;加密和解密&#34;&gt;&lt;a href=&#34;#加密和解密&#34; class=&#34;headerlink&#34; title=&#34;加密和解密&#34;&gt;&lt;/a&gt;加密和解密&lt;/h3&gt;&lt;p&gt;加密时，使用混合密码系统的流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用伪随机数生成会话密钥&lt;/li&gt;
&lt;li&gt;用&lt;strong&gt;接收者&lt;/strong&gt;的公钥加密会话密钥&lt;/li&gt;
&lt;li&gt;压缩消息，并使用对称密码加密，密钥为上面生成的会话密钥&lt;/li&gt;
&lt;li&gt;将加密后的密钥和密文拼接在一起&lt;/li&gt;
&lt;li&gt;将4的结果转换为文本数据，即为报文数据&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;解密时，PGP的私钥通过用户口令加密保存。在收到密文时：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;输入接收者的口令&lt;/li&gt;
&lt;li&gt;求口令的散列值，生成用户解密私钥的秘钥&lt;/li&gt;
&lt;li&gt;解密得到私钥&lt;/li&gt;
&lt;li&gt;将报文数据转换为二进制，并拆解成加密的会话密钥和压缩的密文&lt;/li&gt;
&lt;li&gt;用自己的私钥解密得到会话密钥&lt;/li&gt;
&lt;li&gt;用会话密钥解密密文&lt;/li&gt;
&lt;li&gt;解压缩明文得到原始消息&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;生成数字签名&#34;&gt;&lt;a href=&#34;#生成数字签名&#34; class=&#34;headerlink&#34; title=&#34;生成数字签名&#34;&gt;&lt;/a&gt;生成数字签名&lt;/h3&gt;&lt;p&gt;同样，生成数字签名时：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;输入接收者的口令&lt;/li&gt;
&lt;li&gt;求口令的散列值，生成用户解密私钥的秘钥&lt;/li&gt;
&lt;li&gt;解密得到私钥&lt;/li&gt;
&lt;li&gt;使用单向散列函数计算消息散列值&lt;/li&gt;
&lt;li&gt;对散列值签名，即使用私钥加密&lt;/li&gt;
&lt;li&gt;拼合签名和消息，进行压缩&lt;/li&gt;
&lt;li&gt;&lt;em&gt;（可选）&lt;/em&gt;转换二进制为文本数据，即最后的报文数据&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;类似地，验证时：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;转换为二进制文件，解压缩数据&lt;/li&gt;
&lt;li&gt;分解出签名和消息两部分&lt;/li&gt;
&lt;li&gt;使用公钥解密签名，得到散列值&lt;/li&gt;
&lt;li&gt;使用单向散列函数计算消息散列值，对比3中的散列值&lt;/li&gt;
&lt;li&gt;相等即验证成功&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;生成数字签名并加密&#34;&gt;&lt;a href=&#34;#生成数字签名并加密&#34; class=&#34;headerlink&#34; title=&#34;生成数字签名并加密&#34;&gt;&lt;/a&gt;生成数字签名并加密&lt;/h3&gt;&lt;p&gt;实际情况下，我们往往需要使用加密算法加密数字签名中的原消息。实现步骤是上两节的组合。即先进行数字签名，再对签名结果加密。&lt;/p&gt;
&lt;p&gt;验证过程是相反的，先解密密文得到签名结果，再验证数字签名。&lt;/p&gt;
&lt;h3 id=&#34;信任网&#34;&gt;&lt;a href=&#34;#信任网&#34; class=&#34;headerlink&#34; title=&#34;信任网&#34;&gt;&lt;/a&gt;信任网&lt;/h3&gt;&lt;p&gt;PGP确认公钥合法性的方法不依赖于认证机构颁发证书，而是采用所有者信任级别构成信任网（也叫信任圈、朋友圈）的方式，让用户自己决定该信任谁。建立信任有三种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过自己的签名来确认。用户在通过其他方式（比如线下）确认公钥可信任后，对该公钥加上自己的数字签名。由于PGP中，使用者本人的公钥是绝对信任，被施加签名的公钥因此可信任。&lt;em&gt;注意：这并不代表被施加签名的公钥所有者被&lt;strong&gt;完全&lt;/strong&gt;信任&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;通过自己完全信任的数字签名进行确认。即&lt;strong&gt;完全信任&lt;/strong&gt;某个公钥进行的数字签名，用户可对当前信任的每个公钥所有者设置信任级别，级别为&lt;strong&gt;完全信任&lt;/strong&gt;时，所有者公钥施加签名的公钥也会被信任。&lt;/li&gt;
&lt;li&gt;通过有限信任的多个数字签名进行确认。在设置信任级别为&lt;strong&gt;有限信任&lt;/strong&gt;时，有限信任的公钥&lt;strong&gt;都&lt;/strong&gt;施加数字签名后，新的公钥才会被信任。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过上面三种方式，PGP使用者可以构建起自己的信任网，从而根据自己的决定信任某个公钥。&lt;/p&gt;
&lt;h2 id=&#34;SSL-x2F-TLS&#34;&gt;&lt;a href=&#34;#SSL-x2F-TLS&#34; class=&#34;headerlink&#34; title=&#34;SSL&amp;#x2F;TLS&#34;&gt;&lt;/a&gt;SSL&amp;#x2F;TLS&lt;/h2&gt;&lt;p&gt;TLS是SSL的后续版本，但在大多数情况下，可以统一写成SSL&amp;#x2F;TLS。&lt;strong&gt;SSL&amp;#x2F;TLS可以承载应用层协议，保证应用层传输的安全性，HTTP就是其中一种&lt;/strong&gt;。其余SSL&amp;#x2F;TLS可以承载的应用层协议还包括SMTP、POP3等等。&lt;/p&gt;
&lt;p&gt;SSL于1994年在网景公司开发，在1995年发布了SSL3.0版本，后被发现会导致POODLE攻击。TLS是IETF在1999年作为SSL3.1发布。2006年发布TLS1.1，之后又发布了TLS1.2。&lt;/p&gt;
&lt;p&gt;HTTPS中SSL&amp;#x2F;TLS要保证以下三点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保证消息传输中&lt;strong&gt;不被窃听&lt;/strong&gt; -&amp;gt; &lt;strong&gt;对称密码&lt;/strong&gt;加密消息，&lt;strong&gt;公钥密码&lt;/strong&gt;加密对称密码的密钥&lt;/li&gt;
&lt;li&gt;保证消息传输中&lt;strong&gt;不被篡改&lt;/strong&gt; -&amp;gt; &lt;strong&gt;消息认证&lt;/strong&gt;码&lt;/li&gt;
&lt;li&gt;保证消息传输&lt;strong&gt;双方的合法性&lt;/strong&gt; -&amp;gt; &lt;strong&gt;数字签名&lt;/strong&gt;生成证书&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;通信过程&#34;&gt;&lt;a href=&#34;#通信过程&#34; class=&#34;headerlink&#34; title=&#34;通信过程&#34;&gt;&lt;/a&gt;通信过程&lt;/h3&gt;&lt;p&gt;下面的流程以TLS1.2为例。TLS协议分为两层：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;TLS握手协议&lt;/strong&gt;，位于上层，处理除加密的部分。可以进一步分为：&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;握手协议&lt;/strong&gt;，负责在客户端和服务器间协商密码算法和共享密钥&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;密码规格变更协议&lt;/strong&gt;，向通信对象传达变更密码方式&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;警告协议&lt;/strong&gt;，在发生错误时将错误传达给对方&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;应用数据协议&lt;/strong&gt;，将TLS上承载的应用数据传达给通信对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TLS记录协议&lt;/strong&gt;，位于底层，处理加密的部分。使用了对称密码和消息认证码，但具体的算法和密钥需要通信双方具体协商&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;TLS记录协议&#34;&gt;&lt;a href=&#34;#TLS记录协议&#34; class=&#34;headerlink&#34; title=&#34;TLS记录协议&#34;&gt;&lt;/a&gt;TLS记录协议&lt;/h3&gt;&lt;p&gt;记录协议负责数据的压缩、加密、数据认证，工作方式如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;分割消息为较小的片段，再分段压缩，&lt;strong&gt;压缩方式需要协商决定&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;对压缩过的消息进行消息认证，加上MAC值。为了避免重放攻击，在计算MAC值时，加上了片段的编号。其中的&lt;strong&gt;单向散列函数的算法、使用的密钥都需要协商确定&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;把MAC值和压缩过的消息片段组合在一起，使用对称密码加密。迭代模式使用CBC模式，CBC模式的初始化向量通过主密码生成。&lt;strong&gt;对称密码的算法、密钥则需要协商决定&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;上述经过加密的数据，再加上&lt;strong&gt;数据类型、版本号、压缩后的长度&lt;/strong&gt;，构成最终的报文数据。数据类型就是之前提到的TLS握手协议的4类子协议&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;握手协议&#34;&gt;&lt;a href=&#34;#握手协议&#34; class=&#34;headerlink&#34; title=&#34;握手协议&#34;&gt;&lt;/a&gt;握手协议&lt;/h3&gt;&lt;p&gt;握手协议负责生成对称密码中的共享密钥以及交换证书。因为握手的整个过程都是明文进行的，因此需要使用公钥密码或是Diffie-Hellman密钥交换。整个握手协议有下面几步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;ClientHello&lt;/strong&gt;，客户端发送一些信息给服务器，便于协商算法和密钥&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;可用版本号，即支持的SSL&amp;#x2F;TLS版本号&lt;/li&gt;
&lt;li&gt;客户端生成的随机数，在后面的步骤会用到&lt;/li&gt;
&lt;li&gt;会话ID，在需要重新使用以前的会话时用到&lt;/li&gt;
&lt;li&gt;客户端可用的密码套件清单&lt;/li&gt;
&lt;li&gt;客户端可用的压缩方式清单&lt;/li&gt;
&lt;li&gt;当前时间&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;ServerHello&lt;/strong&gt;，服务器根据客户端传来的信息，选择合适的算法和密码套件，返回的消息中带有下面几条&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;使用的版本号&lt;/li&gt;
&lt;li&gt;服务端生成的随机数，后面步骤会用到&lt;/li&gt;
&lt;li&gt;会话ID，作用同上&lt;/li&gt;
&lt;li&gt;使用的密码套件&lt;/li&gt;
&lt;li&gt;使用的压缩方式&lt;/li&gt;
&lt;li&gt;当前时间&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;Certificate&lt;/strong&gt;，&lt;strong&gt;非匿名通信&lt;/strong&gt;时，服务器发送自己的证书，以及对服务器证书签名的CA的证书&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ServerKeyExchange&lt;/strong&gt;，当Certificate消息不足时，服务器通过此消息传递额外信息&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CertificateRequest&lt;/strong&gt;，需要进行&lt;strong&gt;客户端认证&lt;/strong&gt;时，服务端发送此消息，并带上服务器能理解的证书类型、CA名称清单。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ServerHelloDone&lt;/strong&gt;，服务器发送此消息结束服务器的返回&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Certificate&lt;/strong&gt;，作为CertificateRequest的回应，客户端发送自己的证书，交给服务器验证&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ClientKeyExchange&lt;/strong&gt;，密码套件包含RSA时，会发送&lt;strong&gt;经过服务器公钥加密的预备主密码&lt;/strong&gt;；密码套件包含Diffie-Hellman密钥交换时，会发送Diffie-Hellman密钥交换中的公开值。&lt;strong&gt;预备主密码（pre-master secret）&lt;/strong&gt;是客户端生成的随机数，之后会用做生成主密码的种子。根据预备主密码，通信双方计算出&lt;strong&gt;相同的主密码&lt;/strong&gt;。主密码会用做以下用途：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;对称密码的密钥&lt;/li&gt;
&lt;li&gt;消息认证码的密钥&lt;/li&gt;
&lt;li&gt;CBC模式中的初始化向量&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;9&#34;&gt;
&lt;li&gt;&lt;strong&gt;CertificateVerify&lt;/strong&gt;，在服务器发送CertificateRequest时，通过此消息发送客户端使用自己私钥签名的主密码和握手协议传输消息的散列值。证明自己是客户端证书的持有人。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ChangeCipherSpec&lt;/strong&gt;，客户端发送，表示切换密码开始，实际上是密码规格变更协议的一类报文&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Finished&lt;/strong&gt;，握手结束，此时已使用切换后的密码套件来加密发送。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ChangeCipherSpec&lt;/strong&gt;，&lt;strong&gt;Finished&lt;/strong&gt;。来自服务器，作用同上。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过上面的步骤，双方达成了下面的目标：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端获得了服务器的公钥，完成了服务器认证&lt;/li&gt;
&lt;li&gt;服务器获得了客户端公钥，完成了客户端认证（如果需要的话）&lt;/li&gt;
&lt;li&gt;生成了对称密码的密钥&lt;/li&gt;
&lt;li&gt;生成了消息认证码中的共享密钥&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;密码规格变更协议&#34;&gt;&lt;a href=&#34;#密码规格变更协议&#34; class=&#34;headerlink&#34; title=&#34;密码规格变更协议&#34;&gt;&lt;/a&gt;密码规格变更协议&lt;/h3&gt;&lt;p&gt;用于在一开始从明文通信切换到使用密码套件沟通。&lt;/p&gt;
&lt;h3 id=&#34;警告协议&#34;&gt;&lt;a href=&#34;#警告协议&#34; class=&#34;headerlink&#34; title=&#34;警告协议&#34;&gt;&lt;/a&gt;警告协议&lt;/h3&gt;&lt;p&gt;用在握手协议异常、消息认证码错误、无法解压数据等异常情况。&lt;/p&gt;
&lt;h3 id=&#34;应用数据协议&#34;&gt;&lt;a href=&#34;#应用数据协议&#34; class=&#34;headerlink&#34; title=&#34;应用数据协议&#34;&gt;&lt;/a&gt;应用数据协议&lt;/h3&gt;&lt;p&gt;通信对象间传递应用数据。&lt;/p&gt;
&lt;h3 id=&#34;主密码&#34;&gt;&lt;a href=&#34;#主密码&#34; class=&#34;headerlink&#34; title=&#34;主密码&#34;&gt;&lt;/a&gt;主密码&lt;/h3&gt;&lt;p&gt;主密码根据预备主密码（pre-master secret）或Diffie-Hellman密钥交换的公开值生成。生成的主密码用于生成&lt;strong&gt;对称密码的密钥、消息认证码的密钥、CBC模式的初始化向量&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;对SSL-x2F-TLS的攻击&#34;&gt;&lt;a href=&#34;#对SSL-x2F-TLS的攻击&#34; class=&#34;headerlink&#34; title=&#34;对SSL&amp;#x2F;TLS的攻击&#34;&gt;&lt;/a&gt;对SSL&amp;#x2F;TLS的攻击&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;SSL&amp;#x2F;TLS框架性的特点让它不依赖于某个特定的密码技术，因此对特定密码技术的攻击对SSL&amp;#x2F;TLS本身影响不大&lt;/li&gt;
&lt;li&gt;心脏出血漏洞，发现于2014年，利用TLS心跳拓展对请求的数据大小没有检查，可以获取内存中与请求无关的信息。是OpenSSL实现的漏洞。&lt;/li&gt;
&lt;li&gt;POODLE攻击，利用CBC中的填充提示攻击，发现于2014年SSL3.0中。&lt;/li&gt;
&lt;li&gt;FREAK攻击，可以在密码套件协商时，利用中间人攻击，强制使用强度很低的RSA Export Suites。从而在加密后，暴力破解明文。&lt;/li&gt;
&lt;li&gt;对伪随机数生成器的攻击&lt;/li&gt;
&lt;li&gt;利用之前提过的CRL&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a href=&#34;#总结&#34; class=&#34;headerlink&#34; title=&#34;总结&#34;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;密码技术因为人类的不完美而必定不会完美。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;对称密码&lt;/strong&gt;，使用相同密钥加密、解密，保证消息&lt;strong&gt;机密性&lt;/strong&gt;。目前主要使用AES。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;公钥密码&lt;/strong&gt;，使用不同密钥加密、解密，作用同上。使用最广泛的是RSA，还有相关的Diffie-Hellman密钥交换&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;单向散列函数&lt;/strong&gt;，将消息转为固定长度散列值的技术，保证消息&lt;strong&gt;完整性&lt;/strong&gt;，目前使用SHA2和SHA3（Keccak）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;消息认证码&lt;/strong&gt;，结合单向散列函数和对称密码，保证消息&lt;strong&gt;完整性&lt;/strong&gt;并&lt;strong&gt;认证消息&lt;/strong&gt;，但无法防御&lt;strong&gt;否认&lt;/strong&gt;。目前主要使用HMAC&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数字签名&lt;/strong&gt;，结合单向散列函数和公钥秘钥，保证&lt;strong&gt;完整性&lt;/strong&gt;，&lt;strong&gt;不可否认性&lt;/strong&gt;和&lt;strong&gt;认证消息&lt;/strong&gt;。是公钥证书采用的技术&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;伪随机数生成器&lt;/strong&gt;，配合上述技术使用，需要保证&lt;strong&gt;不可预测性&lt;/strong&gt;和&lt;strong&gt;不可重现性&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;密码技术从某种角度看是一种压缩技术：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;密钥是机密性的压缩&lt;/li&gt;
&lt;li&gt;散列值是消息完整性的压缩&lt;/li&gt;
&lt;li&gt;认证值时认证的压缩&lt;/li&gt;
&lt;li&gt;随机数种子是不可预测性的压缩&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;比特币&#34;&gt;&lt;a href=&#34;#比特币&#34; class=&#34;headerlink&#34; title=&#34;比特币&#34;&gt;&lt;/a&gt;比特币&lt;/h3&gt;&lt;p&gt;比特币来自于Satoshi Nakamoto（中本聪，化名）的一篇论文，并于2009年开始实际运用。比特币是一种&lt;strong&gt;基于P2P网络的支付结算系统&lt;/strong&gt;。用户通过它进行进行价值转移。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;地址&lt;/strong&gt;，将公钥使用散列函数求散列值得到，地址都以1开头，剩下内容 不包含O，0,1和I。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;钱包&lt;/strong&gt;，即比特币客户端，可以生成密钥对，公钥用于收款，密钥用于付款&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;区块链&lt;/strong&gt;，保存了比特币所有交易记录的账簿，若干交易组成一个区块，在区块头有所有交易的散列值，以及上一个区块的散列值，有交易添加时会触发区块头的散列值变化，并链式传递下去&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;交易&lt;/strong&gt;，收、付款方各自生成密钥对，付款方创建交易“地址A向地址B转账x BTC”，&lt;strong&gt;并用自己的私钥签署数字签名&lt;/strong&gt;，之后广播至P2P网络中，完成交易。比特币使用的数字签名基于椭圆曲线DSA，方程为x^2 &amp;#x3D; y^3 + 7&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;挖矿&lt;/strong&gt;，向区块链中添加新区块的行为被称为挖矿，第一个挖矿成功的矿工会获得挖矿奖励和区块所有交易的手续费。为了证明自己确实完成了规定工作，矿工需要进行&lt;strong&gt;工作量证明&lt;/strong&gt;（PoW），即生成的区块头中，前一区块头的散列值必须以若干位的0开头，这个工作需要投入大量的计算资源。区块大约每10分钟添加一个，为了避免通货膨胀，所需的0的个数会不断调整。&lt;ul&gt;
&lt;li&gt;根据协议规定，挖矿奖励每4年减少一半&lt;/li&gt;
&lt;li&gt;当区块链上同时出现分支时，P2P网络会选择计算量大的分支进行工作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;比特币的匿名性只限于交易地址&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;附录：椭圆曲线&#34;&gt;&lt;a href=&#34;#附录：椭圆曲线&#34; class=&#34;headerlink&#34; title=&#34;附录：椭圆曲线&#34;&gt;&lt;/a&gt;附录：椭圆曲线&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;椭圆曲线（EC）源自于求椭圆弧长的椭圆积分的反函数。&lt;/li&gt;
&lt;li&gt;定义椭圆曲线上的加法运算&lt;/li&gt;
&lt;li&gt;椭圆曲线上的离散对数（ECDLP） - 已知点G和点xG，求整数x&lt;/li&gt;
&lt;li&gt;有限域上的离散对数，对点进行模运算&lt;/li&gt;
&lt;li&gt;椭圆曲线Diffie-Hellman密钥交换&lt;/li&gt;
&lt;li&gt;椭圆曲线ElGamal密码&lt;/li&gt;
&lt;li&gt;椭圆曲线DSA（ECDSA）&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://shenlvmeng.github.com/blog/2018/09/13/http-intro-note/</guid>
            <title>《图解HTTP》整理</title>
            <link>http://shenlvmeng.github.com/blog/2018/09/13/http-intro-note/</link>
            <category>笔记</category>
            <category>HTTP</category>
            <category>HTTPS</category>
            <category>状态码</category>
            <category>网络攻击</category>
            <category>介绍</category>
            <pubDate>Thu, 13 Sep 2018 23:35:11 +0800</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;读完了《图解HTTP》，就算是对计算机网络和HTTP部分内容做了个温习吧。同步做了整理，以便加强记忆和后面回顾。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;概述&#34;&gt;&lt;a href=&#34;#概述&#34; class=&#34;headerlink&#34; title=&#34;概述&#34;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;请求报文构成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方法&lt;/li&gt;
&lt;li&gt;URI（绝对或是相对）&lt;/li&gt;
&lt;li&gt;HTTP版本&lt;/li&gt;
&lt;li&gt;请求首部&lt;/li&gt;
&lt;li&gt;内容实体&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;响应报文构成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP版本号&lt;/li&gt;
&lt;li&gt;状态码&lt;/li&gt;
&lt;li&gt;状态码原语&lt;/li&gt;
&lt;li&gt;响应头部&lt;/li&gt;
&lt;li&gt;响应主体&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;请求URI是服务器本身时，可以用&lt;code&gt;*&lt;/code&gt;代替URI。&lt;/p&gt;
&lt;p&gt;可用的方法列表：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GET 获取资源&lt;/li&gt;
&lt;li&gt;POST 传输信息&lt;/li&gt;
&lt;li&gt;PUT 传输文件，&lt;strong&gt;没有用户验证机制&lt;/strong&gt;，很少用到&lt;/li&gt;
&lt;li&gt;DELETE 删除文件，同上，很少用到&lt;/li&gt;
&lt;li&gt;HEAD 获得响应头部，不返回主体&lt;/li&gt;
&lt;li&gt;OPTIONS 询问支持方法&lt;/li&gt;
&lt;li&gt;CONNECT 用来建立HTTPS连接的隧道&lt;/li&gt;
&lt;li&gt;TRACE 追踪路径上的所有服务器节点，很少用到&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中后面三个是HTTP1.1才开始支持的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;持久化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在HTTP1.1后，HTTP建立的TCP连接默认是长连接（&lt;code&gt;keep-alive&lt;/code&gt;），避免不必要的多次TCP握手和挥手。在此基础上，客户端可以同时向服务端发起多个资源请求。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;状态化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HTTP本身是无状态的。通过cookie实现状态化，cookie通过服务端在响应头部的&lt;code&gt;set-cookie&lt;/code&gt;字段下发，设置信息、使用范围、过期时间等内容。客户端在使用范围内的请求默认会携带上cookie信息。&lt;/p&gt;
&lt;h2 id=&#34;HTTP报文结构&#34;&gt;&lt;a href=&#34;#HTTP报文结构&#34; class=&#34;headerlink&#34; title=&#34;HTTP报文结构&#34;&gt;&lt;/a&gt;HTTP报文结构&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;请求首部和主体通过CR+LF分割开来&lt;/li&gt;
&lt;li&gt;报文编码&lt;ul&gt;
&lt;li&gt;编码压缩&lt;ul&gt;
&lt;li&gt;gzip （GNU zip）&lt;/li&gt;
&lt;li&gt;compress（UNIX compress）&lt;/li&gt;
&lt;li&gt;deflate（zlib）&lt;/li&gt;
&lt;li&gt;indentity（不压缩）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分块发送&lt;/li&gt;
&lt;li&gt;多部分发送（multipart）&lt;ul&gt;
&lt;li&gt;multipart&amp;#x2F;form-data 表单文件上传，用boundary字符&lt;code&gt;--&lt;/code&gt;表示新的part的开始&lt;/li&gt;
&lt;li&gt;multipart&amp;#x2F;byterange 配合206响应只包含了部分数据时使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;部分发送&lt;ul&gt;
&lt;li&gt;Range指定字节范围&lt;/li&gt;
&lt;li&gt;206响应状态码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内容协商&lt;ul&gt;
&lt;li&gt;双方就合适的语言、字符集、编码方式、过期时间进行协商&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;HTTP状态码&#34;&gt;&lt;a href=&#34;#HTTP状态码&#34; class=&#34;headerlink&#34; title=&#34;HTTP状态码&#34;&gt;&lt;/a&gt;HTTP状态码&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1xx 这一类型的状态码，代表请求已被接受，需要继续处理&lt;ul&gt;
&lt;li&gt;100 Continue：客户端应当继续发送请求。&lt;/li&gt;
&lt;li&gt;101 Switching Protocals：将通过Upgrade消息头通知客户端采用不同的协议来完成这个请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2xx 成功：这一类型的状态码，代表请求已成功被服务器接收、理解、并接受。&lt;ul&gt;
&lt;li&gt;200 OK：请求已成功，在方法时HEAD时不返回响应主体&lt;/li&gt;
&lt;li&gt;204 No Content：服务器成功处理了请求，但不需要返回任何实体内容，&lt;strong&gt;用户浏览器应保留发送了该请求的页面&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;205 Reset Content：和204的唯一不同是返回此状态码的响应要求请求者重置文档视图&lt;/li&gt;
&lt;li&gt;206 Partial Content：服务器已经成功处理了部分GET请求。请求必须包含Range头信息来指示客户端希望得到的内容范围，返回使用&lt;code&gt;Content-Range&lt;/code&gt;多用于下载工具&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;3xx 重定向：这类状态码代表需要客户端采取进一步的操作才能完成请求。通常，这些状态码用来重定向，后续的请求地址在本次响应的Location域中指明。&lt;ul&gt;
&lt;li&gt;300 Multiple Choices：被请求的资源有一系列可供选择的回馈信息，每个都有自己特定的地址和浏览器驱动的商议信息。用户或浏览器能够自行选择一个首选的地址进行重定向。&lt;/li&gt;
&lt;li&gt;301 Moved Permanently：被请求的资源已永久移动到新位置，建议使用Location中的新地址&lt;/li&gt;
&lt;li&gt;302 Found：请求的资源现在临时从不同的URI响应请求&lt;/li&gt;
&lt;li&gt;303 See Other：和302的区别是，客户端&lt;strong&gt;应当采用GET的方式&lt;/strong&gt;访问新的资源&lt;/li&gt;
&lt;li&gt;304 Not Modified：如果客户端发送了一个带条件（包括缓存相关的请求头部）的GET请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变&lt;/li&gt;
&lt;li&gt;305 Use Proxy：被请求的资源必须通过指定的代理才能被访问&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;4xx 客户端错误：客户端发生了错误&lt;ul&gt;
&lt;li&gt;400 Bad Request：由于包含语法错误，当前请求无法被服务器理解&lt;/li&gt;
&lt;li&gt;401 Unauthorized：当前请求需要用户验证，或用户未通过验证。&lt;/li&gt;
&lt;li&gt;403 Forbidden：服务器已经理解请求，但是拒绝执行它&lt;/li&gt;
&lt;li&gt;404 Not Found：资源未被在服务器上发现&lt;/li&gt;
&lt;li&gt;405 Method Not Allowed：请求行中指定的请求方法不能被用于请求相应的资源，响应中必须返回一个Allow头信息用以表示出当前资源能够接受的请求方法的列表&lt;/li&gt;
&lt;li&gt;406 Not Acceptable：请求的资源的内容特性无法满足请求头中的条件&lt;/li&gt;
&lt;li&gt;413 Request Entity Too Large&lt;/li&gt;
&lt;li&gt;414 Request-URI Too Long&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;5xx 服务器错误：服务器在处理请求的过程中有错误发生&lt;ul&gt;
&lt;li&gt;500 Internal Server Error：这个问题会在服务器的代码出错时出现&lt;/li&gt;
&lt;li&gt;501 Not Implemented：服务器不支持当前请求所需要的某个功能&lt;/li&gt;
&lt;li&gt;502 Bad GateWay：作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应&lt;/li&gt;
&lt;li&gt;503 Service Unavailable：临时的服务器维护或者过载。这个状况是临时的，并且将在一段时间以后恢复。&lt;/li&gt;
&lt;li&gt;504 Gateway Timeout：作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器或者辅助服务器收到响应&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;协作机制&#34;&gt;&lt;a href=&#34;#协作机制&#34; class=&#34;headerlink&#34; title=&#34;协作机制&#34;&gt;&lt;/a&gt;协作机制&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;代理（Proxy），单纯转发HTTP请求，会在响应头部的&lt;code&gt;Via&lt;/code&gt;字段留下痕迹&lt;/li&gt;
&lt;li&gt;网关（Gateway），隔绝服务器和客户端，有安全、计费等逻辑&lt;/li&gt;
&lt;li&gt;隧道（tunnel），基于协议搭建，保证传输安全，对用户侧透明&lt;/li&gt;
&lt;li&gt;缓存（Cache），本地、服务端二级缓存，加快响应时间，有过期时间&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;报文头部&#34;&gt;&lt;a href=&#34;#报文头部&#34; class=&#34;headerlink&#34; title=&#34;报文头部&#34;&gt;&lt;/a&gt;报文头部&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;首部用来进行连接的各种信息描述。每个首部的字段用字段名和值组成，两者用&lt;code&gt;:&lt;/code&gt;隔开。&lt;/li&gt;
&lt;li&gt;首部分为端到端和逐跳两类，前者在报文转发的整个过程都保留，后者在转发后就会丢弃。典型的逐条首部有&lt;code&gt;Connection&lt;/code&gt;, &lt;code&gt;Keep-Alive&lt;/code&gt;, &lt;code&gt;Transfer-Encoding&lt;/code&gt;, &lt;code&gt;Upgrade&lt;/code&gt;等&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;通用首部&#34;&gt;&lt;a href=&#34;#通用首部&#34; class=&#34;headerlink&#34; title=&#34;通用首部&#34;&gt;&lt;/a&gt;通用首部&lt;/h3&gt;&lt;h4 id=&#34;Cache-Control&#34;&gt;&lt;a href=&#34;#Cache-Control&#34; class=&#34;headerlink&#34; title=&#34;Cache-Control&#34;&gt;&lt;/a&gt;Cache-Control&lt;/h4&gt;&lt;p&gt;客户端和服务端协商缓存机制。配合下面一些首部字段使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Etag&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Last-Modified&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Expires&lt;/code&gt;（HTTP1.0）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Pragma&lt;/code&gt;（HTTP1.0）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Age&lt;/code&gt;（HTTP1.0）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;If-None-Match&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;If-Not-Modified-Since&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Cache-Control&lt;/code&gt;有下面一些可配置项。&lt;/p&gt;
&lt;p&gt;缓冲能力上，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private，缓存只针对当前用户而言&lt;/li&gt;
&lt;li&gt;public，缓存对所有用户生效&lt;/li&gt;
&lt;li&gt;no-cache，始终对缓存进行过期验证&lt;/li&gt;
&lt;li&gt;no-store，不允许缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;过期时间上，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;min-fresh，返回指定时间范围内的非过期资源&lt;/li&gt;
&lt;li&gt;max-stale，返回指定时间范围内过期、非过期资源&lt;/li&gt;
&lt;li&gt;max-age，单位：秒，最大缓存时间&lt;/li&gt;
&lt;li&gt;s-max-age，同上，只用于CDN缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;二次验证上，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;only-if-cached，强制从缓存服务器中获取内容&lt;/li&gt;
&lt;li&gt;immutable，一旦缓存不可更改&lt;/li&gt;
&lt;li&gt;must-revalidate，即使本地已缓存，仍要求检查CDN缓存&lt;/li&gt;
&lt;li&gt;proxy-revalidate，缓存服务器必须检查源内容是否改变&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Connection&#34;&gt;&lt;a href=&#34;#Connection&#34; class=&#34;headerlink&#34; title=&#34;Connection&#34;&gt;&lt;/a&gt;Connection&lt;/h4&gt;&lt;p&gt;管理连接，主要有两个用途。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指定不希望转发给代理的字段&lt;/li&gt;
&lt;li&gt;管理持久连接。使用&lt;code&gt;Connection: Keep-Alive&lt;/code&gt;建立连接（HTTP1.1默认行为），使用&lt;code&gt;Connection: Close&lt;/code&gt;终止连接&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Date&#34;&gt;&lt;a href=&#34;#Date&#34; class=&#34;headerlink&#34; title=&#34;Date&#34;&gt;&lt;/a&gt;Date&lt;/h4&gt;&lt;p&gt;报文创建时间。行如“Date: Tue, 03 Jul 2012 04:31:12 GMT”&lt;/p&gt;
&lt;h4 id=&#34;Pragma&#34;&gt;&lt;a href=&#34;#Pragma&#34; class=&#34;headerlink&#34; title=&#34;Pragma&#34;&gt;&lt;/a&gt;Pragma&lt;/h4&gt;&lt;p&gt;历史遗留字段。&lt;code&gt;Pragma: no-cache&lt;/code&gt;等同于&lt;code&gt;Cache-Control: no-cache&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;除此外还有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Trailer，说明报文主体中记录的首部字段&lt;/li&gt;
&lt;li&gt;Transfer-Encoding，分段传输的主体编码&lt;/li&gt;
&lt;li&gt;Upgrade，切换协议，&lt;strong&gt;配合&lt;code&gt;Connection: Upgrade&lt;/code&gt;使用&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Via，标明沿途的整条路径&lt;/li&gt;
&lt;li&gt;Warning，缓存相关警告&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;请求首部&#34;&gt;&lt;a href=&#34;#请求首部&#34; class=&#34;headerlink&#34; title=&#34;请求首部&#34;&gt;&lt;/a&gt;请求首部&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Accept 接受文件的类型，类型间可以指定&lt;code&gt;q=x&lt;/code&gt;表示权重值，x的取值在0到1之间。下同&lt;/li&gt;
&lt;li&gt;Accept-Charset 可以接受的文件字符集&lt;/li&gt;
&lt;li&gt;Accept-Encoding 可以接受的文件编码，有gzip，compress，deflate，indentity几种&lt;/li&gt;
&lt;li&gt;Accept-Language 可接受的语言&lt;/li&gt;
&lt;li&gt;Authorization 服务端需要的用户验证信息&lt;/li&gt;
&lt;li&gt;Age 从缓存实体产生到现在经历的时间&lt;/li&gt;
&lt;li&gt;Expect 期望的服务端返回状态码，服务端无法满足时返回417状态码，客户端等待服务端100响应时发送的请求都要带上该字段&lt;/li&gt;
&lt;li&gt;Host 服务器的主机名，通常是请求资源的URL&lt;/li&gt;
&lt;li&gt;If-Match 需要匹配的Etag，不满足时返回412，表示不满足条件&lt;/li&gt;
&lt;li&gt;If-Modified-Since 返回指定日期后的新内容，否则返回304&lt;/li&gt;
&lt;li&gt;If-Unmodified-Since 类似上&lt;/li&gt;
&lt;li&gt;If-Range 类似If-Match不过是范围匹配&lt;/li&gt;
&lt;li&gt;Max-Forwards 报文最多转发次数，通常配合TRACE方法使用&lt;/li&gt;
&lt;li&gt;Proxy-Authorization 代理服务端需要的用户验证信息&lt;/li&gt;
&lt;li&gt;Range 请求资源的部分内容，一般用在多线程下载（客户端发起）&lt;/li&gt;
&lt;li&gt;Referer 当前请求从哪个地址发起&lt;/li&gt;
&lt;li&gt;User-Agent 请求发起终端信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;响应首部&#34;&gt;&lt;a href=&#34;#响应首部&#34; class=&#34;headerlink&#34; title=&#34;响应首部&#34;&gt;&lt;/a&gt;响应首部&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Accept-Ranges，表示服务器是否支持Range请求，支持时值为bytes，否则是none&lt;/li&gt;
&lt;li&gt;Age，表示缓存到目前为止过了多久（HTTP1.0）&lt;/li&gt;
&lt;li&gt;Etag，资源的唯一标识，分为强Etag和弱Etag&lt;/li&gt;
&lt;li&gt;Location，用在3xx的请求中，表示客户端需要重定向到的新地址&lt;/li&gt;
&lt;li&gt;WWW-Authentication&amp;#x2F;Proxy-Authentication，服务器、代理使用的认证类型&lt;/li&gt;
&lt;li&gt;Server，服务器信息&lt;/li&gt;
&lt;li&gt;Vary，与Vary指定首部字段同名的请求才会命中缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;实体首部&#34;&gt;&lt;a href=&#34;#实体首部&#34; class=&#34;headerlink&#34; title=&#34;实体首部&#34;&gt;&lt;/a&gt;实体首部&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Allow 允许的访问方法&lt;/li&gt;
&lt;li&gt;Content-Encoding&amp;#x2F;Content-Language&amp;#x2F;Content-Length&amp;#x2F; 内容的编码、语言、长度、类型&lt;/li&gt;
&lt;li&gt;Content-Location 内容的位置，通常在和访问URI时会用到&lt;/li&gt;
&lt;li&gt;Content-MD5 内容MD5编码，便于和客户端编码后进行对比，防止内容篡改&lt;/li&gt;
&lt;li&gt;Content-Range 用于部分请求&lt;/li&gt;
&lt;li&gt;Content-Type 文件类型，包括MIME type和字符集&lt;/li&gt;
&lt;li&gt;Expires&amp;#x2F;Last-Modified 文件的过期时间和上次修改时间，用户判断缓存是否过期&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除此之外，还有和Cookie相关的两个头部，它们来自网景公司对于Cookie的设计。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Set-Cookie，服务端下发设置Cookie信息。包含下列信息&lt;ul&gt;
&lt;li&gt;expires，过期时间&lt;/li&gt;
&lt;li&gt;path，适用路径&lt;/li&gt;
&lt;li&gt;domain，适用域名&lt;/li&gt;
&lt;li&gt;secure，限制https才会携带Cookie&lt;/li&gt;
&lt;li&gt;HttpOnly，限制JS脚本访问Cookie&lt;/li&gt;
&lt;li&gt;下发的cookie内容&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cookie，客户端期望的cookie内容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外还有一些常用的首部字段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;X-Frame-Options，规定页面在iframe中的呈现方式&lt;ul&gt;
&lt;li&gt;DENY 禁止访问&lt;/li&gt;
&lt;li&gt;SAMEORIGIN 仅允许同源访问&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;X-XSS-Protection，为1时开启XSS防御&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;不建议使用”X-“开头的方式拓展非标准首部&lt;/strong&gt;。 &lt;/p&gt;
&lt;h2 id=&#34;HTTPS简介&#34;&gt;&lt;a href=&#34;#HTTPS简介&#34; class=&#34;headerlink&#34; title=&#34;HTTPS简介&#34;&gt;&lt;/a&gt;HTTPS简介&lt;/h2&gt;&lt;p&gt;HTTP缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用明文 -&amp;gt; 通信内容可以被窃听 –HTTPS–&amp;gt; 加密通信内容&lt;/li&gt;
&lt;li&gt;不能验证身份 -&amp;gt; DDoS攻击和伪装服务器、客户端身份 –HTTPS–&amp;gt; 证书证明身份&lt;/li&gt;
&lt;li&gt;不能验证内容完整性 -&amp;gt; 中间人攻击 –HTTPS–&amp;gt; HTTPS保证完整性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;HTTPS特征：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加密内容&lt;/li&gt;
&lt;li&gt;证书&lt;/li&gt;
&lt;li&gt;完整性保护&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;HTTPS建立在SSL连接之上，SSL建立在TCP连接上。SSL使用共享秘钥和公开秘钥加密两种方式混合加密。在秘钥确保安全的情况下，使用共享秘钥对称加密，优化速度；否则使用公开秘钥确保安全性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;共享秘钥，双方使用同一秘钥加密和解密，秘钥被监听后加密就失去了意义&lt;/li&gt;
&lt;li&gt;公开秘钥，使用公开秘钥加密，使用私有秘钥解密&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然而公开密钥本身并不能确保完整性，需要证书机构（CA）颁发证书认证，确保秘钥和端的有效以及合法性。服务端也可以使用OpenSSL为自己颁发自认证证书，但是一般会在浏览器上弹出警告。&lt;/p&gt;
&lt;p&gt;HTTPS建立连接的过程包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;协商决定秘钥组件&lt;/li&gt;
&lt;li&gt;服务端发送公开密钥、证书&lt;/li&gt;
&lt;li&gt;客户端检查证书合法性，以确认服务端身份，并拿到公钥&lt;/li&gt;
&lt;li&gt;客户端发送pre-master secret随机字符串&lt;/li&gt;
&lt;li&gt;服务端使用私钥加密pre-master secret hash值，返回加密的hash值（避免黑客尝试破解私钥）&lt;/li&gt;
&lt;li&gt;客户端使用公钥解密hash，对比自己之前生成的pre-master secret字符串hash，若一致，及证明服务端身份的合法性&lt;/li&gt;
&lt;li&gt;客户端生成一个对称加密算法和秘钥master-secret，使用公钥加密，发送给服务端&lt;/li&gt;
&lt;li&gt;双方使用master-secret进行通信&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通信的完整性可以通过将报文内容生成hash交由客户端验证来实现。&lt;/p&gt;
&lt;p&gt;SSL最初由网景开发，1.0和2.0版本被发现存在问题已被废弃。3.0后由IETF接手。目前可用的协议版本有SSL3.0和TLS1.0、TLS1.1、TLS1.2，其中最常用的是SSL3.0和TLS1.0。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;证书&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;证书包含：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发布机构（CA）&lt;/li&gt;
&lt;li&gt;有效期&lt;/li&gt;
&lt;li&gt;持有者（由CA担保证明持有者身份）&lt;/li&gt;
&lt;li&gt;公钥&lt;/li&gt;
&lt;li&gt;数字签名算法&lt;/li&gt;
&lt;li&gt;指纹算法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了保证安全，在证书的发布机构发布证书时，证书的指纹和指纹算法，都会用自己的私钥加密后再和证书放到一起发布。使用者在打开证书时，根据加密算法，系统使用自带的公钥解密指纹和指纹算法，使用指纹算法计算证书的hash值和指纹对比，如果对的上就代表证书没问题。系统使用的公钥和证书一般由证书发布机构自己生成，内嵌在操作系统中。&lt;/p&gt;
&lt;p&gt;证书颁发机构（CA）通常会去做很多工作确保持有者的合法性，信任CA代表着信任CA颁发证书中的所有信息。所以一般系统只选择信誉较好的CA机构。公司内部使用或自生成的证书就只能被在指定范围内被信任。&lt;/p&gt;
&lt;h2 id=&#34;身份验证&#34;&gt;&lt;a href=&#34;#身份验证&#34; class=&#34;headerlink&#34; title=&#34;身份验证&#34;&gt;&lt;/a&gt;身份验证&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;BASIC 使用用户名密码验证，明文传输&lt;/li&gt;
&lt;li&gt;DIGEST 质询响应，防止密码被拦截，安全度和便利性都较差&lt;/li&gt;
&lt;li&gt;SSL 客户端证书 + HTTPS传输，成本高&lt;/li&gt;
&lt;li&gt;HTTP表单 + Cookie&amp;#x2F;Session验证&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;功能追加协议&#34;&gt;&lt;a href=&#34;#功能追加协议&#34; class=&#34;headerlink&#34; title=&#34;功能追加协议&#34;&gt;&lt;/a&gt;功能追加协议&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;WebSocket&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;全双工，解决Ajax，长短轮询的局限。握手过程很简单：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请求方添加&lt;code&gt;Upgrade&lt;/code&gt;首部字段，声明升级到websocket。包含Sec-WebSocket-Key，Sec-WebSocket-Protocol，Sec-WebSocket-Verison等必要字段&lt;/li&gt;
&lt;li&gt;响应方回复101状态码，包含Sec-WebSocket-Accept（是根据Sec-WebSocket-Key生成的），Sec-WebSocket-Protocol&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;连接建立后，双方使用WebSocket的方式进行通信&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WebDAV&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;基于Web的文件属性管理。新增了一些方法和状态码，允许客户端远程修改服务器上的文件。&lt;/p&gt;
&lt;h2 id=&#34;Web应用&#34;&gt;&lt;a href=&#34;#Web应用&#34; class=&#34;headerlink&#34; title=&#34;Web应用&#34;&gt;&lt;/a&gt;Web应用&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;RSS&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;RDF Site Summary，简易内容聚合。和Atom一样，使用XML的形式发布信息，通过特定的RSS阅读器阅读。&lt;/p&gt;
&lt;h2 id=&#34;常见Web攻击方式&#34;&gt;&lt;a href=&#34;#常见Web攻击方式&#34; class=&#34;headerlink&#34; title=&#34;常见Web攻击方式&#34;&gt;&lt;/a&gt;常见Web攻击方式&lt;/h2&gt;&lt;p&gt;根本原因：HTTP本身没有必要的安全机制。&lt;/p&gt;
&lt;h3 id=&#34;输出值转义相关攻击方式&#34;&gt;&lt;a href=&#34;#输出值转义相关攻击方式&#34; class=&#34;headerlink&#34; title=&#34;输出值转义相关攻击方式&#34;&gt;&lt;/a&gt;输出值转义相关攻击方式&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;XSS，跨站脚本攻击，主要出现在&lt;strong&gt;动态拼接HTML&lt;/strong&gt;的场景中，用户恶意注入的script代码段埋下陷阱，诱导用户误操作触发。盗取用户密码或Cookie信息&lt;/li&gt;
&lt;li&gt;SQL注入，通过URL注入的方式，制造恶意SQL语句，出现在&lt;strong&gt;动态拼接SQL语句&lt;/strong&gt;的场景下。可以绕过认证、甚至破坏整个数据库&lt;/li&gt;
&lt;li&gt;OS命令注入，类似SQL注入，出现在&lt;strong&gt;动态拼接OS语句&lt;/strong&gt;的场景下。&lt;/li&gt;
&lt;li&gt;HTTP首部攻击，出现在服务端响应头部使用了用户侧输入场景下，比如302响应中的Location头部可能存在的query部分。攻击者可以通过添加换行符，恶意添加新的首部字段，甚至篡改原有的响应主体&lt;/li&gt;
&lt;li&gt;邮箱首部注入攻击，类似HTTP首部攻击&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;类似地还有目录遍历漏洞、远程文件引用漏洞。&lt;/p&gt;
&lt;p&gt;通过上面几种攻击方式，可以看到，&lt;strong&gt;永远不要信任用户侧输入&lt;/strong&gt;，&lt;strong&gt;使用白名单机制，禁止动态拼接用户输入的语句&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;设计缺陷相关攻击方式&#34;&gt;&lt;a href=&#34;#设计缺陷相关攻击方式&#34; class=&#34;headerlink&#34; title=&#34;设计缺陷相关攻击方式&#34;&gt;&lt;/a&gt;设计缺陷相关攻击方式&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;强制浏览，在服务器公开目录下，浏览开发者本非自愿公开的文件。&lt;/li&gt;
&lt;li&gt;不正确的系统错误处理方式，数据库等内部系统抛出的错误，对用户毫无帮助，反倒能让攻击者看到服务背后的一些细节。包括，数据库错误、PHP等脚本错误、Web服务器的错误&lt;/li&gt;
&lt;li&gt;开放重定向，网站有诸如&lt;code&gt;?redirect=xxx&lt;/code&gt;的path可以重定向时，一定要对redirect后的网址进行白名单控制，防止成为钓鱼攻击的跳板&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;session相关&#34;&gt;&lt;a href=&#34;#session相关&#34; class=&#34;headerlink&#34; title=&#34;session相关&#34;&gt;&lt;/a&gt;session相关&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;XSS盗取cookie，伪装用户登录&lt;/li&gt;
&lt;li&gt;发送恶意链接，强制用户使用攻击者指定的session ID&lt;/li&gt;
&lt;li&gt;CSRF，跨站信息伪造，在带有用户信息的domain里留下恶意的网络请求，伪造用户发起请求，伪造请求可以通过&lt;code&gt;&amp;lt;img src=&amp;quot;xx&amp;quot; /&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;video src=&amp;quot;xxx&amp;gt;&amp;lt;/video&amp;gt;&lt;/code&gt;等多种形式&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;其他&#34;&gt;&lt;a href=&#34;#其他&#34; class=&#34;headerlink&#34; title=&#34;其他&#34;&gt;&lt;/a&gt;其他&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;穷举法破解密码，暴力破解。使用图片验证码、手机验证码、机器检测等方式限制同IP的访问频率。&lt;ul&gt;
&lt;li&gt;彩虹表。使用salt，增加破解难度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;撞库。建议用户在不同域内使用不一样的密码&lt;/li&gt;
&lt;li&gt;点击劫持，使用透明元素覆盖在目标网页上。在18+网页中最常出现（😂）。&lt;/li&gt;
&lt;li&gt;DoS（Denial of Service）拒绝服务攻击，构造大量合法的网络请求，导致服务器超负荷。通常都是DDoS（Distributed Denial of Service）的形式。需要在IP层去过滤攻击的IP。&lt;/li&gt;
&lt;li&gt;后门程序&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://shenlvmeng.github.com/blog/2018/08/15/frontend-roadmap/</guid>
            <title>frontend-roadmap</title>
            <link>http://shenlvmeng.github.com/blog/2018/08/15/frontend-roadmap/</link>
            <category>前端</category>
            <category>roadmap</category>
            <pubDate>Wed, 15 Aug 2018 23:52:55 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;前端科技树探索之路&#34;&gt;&lt;a href=&#34;#前端科技树探索之路&#34; class=&#34;headerlink&#34; title=&#34;前端科技树探索之路&#34;&gt;&lt;/a&gt;前端科技树探索之路&lt;/h2&gt;&lt;p&gt;前端的涵盖范畴是和客户直接交互的部分。&lt;/p&gt;
&lt;p&gt;以下几个因素促进了前端在这些年差异化成一个需要专业人才的领域&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Web API不断丰富和更新，允许JS做更多的事情，同时也需要不停学习跟进&lt;/li&gt;
&lt;li&gt;语言规范赋予JS更多的特性和可能，允许专业的人做更专业的事&lt;/li&gt;
&lt;li&gt;Node等轮子的出现拓展了JS的应用场景，方向更加细化&lt;/li&gt;
&lt;li&gt;用户对界面要求越来越高，需要专门的人处理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从而使前端渐渐分化出来成为一个面向复杂场景、承诺服务质量、进入工程领域的职业。&lt;/p&gt;
&lt;p&gt;更细化的说，面向复杂场景包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;浏览器应用、桌面应用、移动端应用、后端应用多宿主&lt;/li&gt;
&lt;li&gt;复杂的网络环境&lt;/li&gt;
&lt;li&gt;差异化巨大的浏览器和浏览器版本（所幸比以前好了很多）&lt;/li&gt;
&lt;li&gt;用户群体的不同&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;承诺服务质量包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更快地渲染页面&lt;/li&gt;
&lt;li&gt;更美观的页面效果&lt;/li&gt;
&lt;li&gt;更流畅的用户交互体验&lt;/li&gt;
&lt;li&gt;更高的代码稳定性（对应着lint和debug能力）&lt;/li&gt;
&lt;li&gt;差异化环境的表现一致性&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;进入工程领域包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更舒适的开发体验（设计模式与诸多轮子）&lt;/li&gt;
&lt;li&gt;更高的开发效率（如工作流的设计）&lt;/li&gt;
&lt;li&gt;更顺滑的团队间协作（如mock）&lt;/li&gt;
&lt;li&gt;版本控制&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面是作为一个技术的要求，在公司应用范畴，还需要考虑下面这些：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;产品设计&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;团队建设&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;人才培养&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;项目管理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;立身之本&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;DOM&lt;/li&gt;
&lt;li&gt;JavaScript基本语法&lt;/li&gt;
&lt;li&gt;CSS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;关联技术&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Web API&lt;/li&gt;
&lt;li&gt;ajax&lt;/li&gt;
&lt;li&gt;JSON&lt;/li&gt;
&lt;li&gt;正则&lt;/li&gt;
&lt;li&gt;SVG&amp;#x2F;Canvas&amp;#x2F;WebGL&lt;/li&gt;
&lt;li&gt;PWA&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;深入了解&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ES6 ES7&lt;/li&gt;
&lt;li&gt;TypeScript&lt;/li&gt;
&lt;li&gt;CSS3&lt;/li&gt;
&lt;li&gt;SASS Less&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;现有轮子&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NodeJS&lt;/li&gt;
&lt;li&gt;Electron&lt;/li&gt;
&lt;li&gt;React&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://shenlvmeng.github.com/blog/2018/06/26/canvas-flowchart-compare/</guid>
            <title>流程图JS实现方案对比</title>
            <link>http://shenlvmeng.github.com/blog/2018/06/26/canvas-flowchart-compare/</link>
            <category>canvas</category>
            <category>流程图</category>
            <category>d3</category>
            <category>g6</category>
            <category>zrender</category>
            <category>processOn</category>
            <pubDate>Tue, 26 Jun 2018 21:09:27 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;实现流程图和类流程图的工具主要需要解决&lt;strong&gt;数据 -&amp;gt; 图形&lt;/strong&gt;和&lt;strong&gt;交互&lt;/strong&gt;两方面问题。在实现图形元素时也有canvas，SVG，canvas with DOM，SVG with DOM，DOM with canvas一些实现方式。&lt;/p&gt;
&lt;p&gt;canvas和SVG的实现方式区别比较明显：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大规模元素、频繁重绘上，canvas完胜&lt;/li&gt;
&lt;li&gt;强调光影效果上，canvas小胜&lt;/li&gt;
&lt;li&gt;强调导出图片上，canvas小胜&lt;/li&gt;
&lt;li&gt;强调元素可交互上，SVG完胜&lt;/li&gt;
&lt;li&gt;强调画图元素可缩放上，SVG完胜&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用SVG实现时，元素规模大以及频繁重绘时会出现卡顿现象，在大规模元素场景下交互也会有卡顿。使用canvas实现时，保证流程图元素的可交互性将成为头疼的难题，开发者需要自己模拟浏览器的一部分行为。&lt;/p&gt;
&lt;p&gt;下面是一些流程图实现基础的对比。&lt;/p&gt;
&lt;h2 id=&#34;d3&#34;&gt;&lt;a href=&#34;#d3&#34; class=&#34;headerlink&#34; title=&#34;d3&#34;&gt;&lt;/a&gt;d3&lt;/h2&gt;&lt;p&gt;d3着眼在数据可视化，重点在使用不同layout组织数据，完成可视化。&lt;/p&gt;
&lt;p&gt;d3最初是天然支持SVG的，这点从类jQuery的API也能看出来。d3和canvas的结合上，绘制需要&lt;a href=&#34;https://bl.ocks.org/mbostock/1276463&#34;&gt;额外的data binding&lt;/a&gt;操作，周期性地将虚拟的DOM节点映射到canvas上，重绘得到下一帧画面。要实现canvas可交互的话也需要一些&lt;a href=&#34;https://medium.freecodecamp.org/d3-and-canvas-in-3-steps-8505c8b27444&#34;&gt;hack的手段&lt;/a&gt;。基于d3实现流程图并不划算。&lt;/p&gt;
&lt;h2 id=&#34;zrender&#34;&gt;&lt;a href=&#34;#zrender&#34; class=&#34;headerlink&#34; title=&#34;zrender&#34;&gt;&lt;/a&gt;zrender&lt;/h2&gt;&lt;p&gt;zrender是一个canvas画图的基础库。它并不负责数据的组织和渲染，需要自己完成这一部分工作。但是zrender提供了让canvas可交互的重要功能。&lt;/p&gt;
&lt;p&gt;zrender下，mixin了Eventful特性的元素上可以监听交互事件。Eventful只是为元素提供了类似EventEmitter的功能。真正实现元素可交互的handler。&lt;/p&gt;
&lt;p&gt;handler内会拦截发生在canvas内的&lt;code&gt;click&lt;/code&gt;&amp;#x2F;&lt;code&gt;mousedown&lt;/code&gt;&amp;#x2F;&lt;code&gt;mouseup&lt;/code&gt;&amp;#x2F;&lt;code&gt;mousewheel&lt;/code&gt;&amp;#x2F;&lt;code&gt;dblclick&lt;/code&gt;&amp;#x2F;&lt;code&gt;contextmenu&lt;/code&gt;事件，交予prototype内对应的处理方法处理，handler内有下面几个关键方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mousemove&lt;/code&gt;，监听canvas内mousemove事件，调用&lt;code&gt;findHover&lt;/code&gt;得到当前位置对应的元素，根据情况调用&lt;code&gt;dispatchToElement&lt;/code&gt;方法，分发&lt;code&gt;mouseout&lt;/code&gt;，&lt;code&gt;mouseover&lt;/code&gt;，&lt;code&gt;mousemove&lt;/code&gt;给刚才得到的元素实例&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dispatchToElement&lt;/code&gt;，分发事件到对应实例，将事件对象封装，trigger实例的对应事件handler，并通过&lt;code&gt;el.parent&lt;/code&gt;向上冒泡&lt;/li&gt;
&lt;li&gt;&lt;code&gt;findHover&lt;/code&gt;，指定x, y坐标寻找该坐标位置的元素。从storage中拿到所有的displayable的list。挨个调用&lt;code&gt;isHover&lt;/code&gt;判断displayable和[x, y]坐标的关系&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isHover&lt;/code&gt;函数，根据displayable的rectHover属性，即是否使用包围盒检测鼠标进入。调用displayable的&lt;code&gt;rectContain&lt;/code&gt;或&lt;code&gt;contain&lt;/code&gt;检测是否在其中。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;isHover&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;displayable, x, y&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (displayable[displayable.&lt;span class=&#34;property&#34;&gt;rectHover&lt;/span&gt; ? &lt;span class=&#34;string&#34;&gt;&amp;#x27;rectContain&amp;#x27;&lt;/span&gt; : &lt;span class=&#34;string&#34;&gt;&amp;#x27;contain&amp;#x27;&lt;/span&gt;](x, y)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; el = displayable;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; isSilent;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (el) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// If clipped by ancestor.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// &lt;span class=&#34;doctag&#34;&gt;FIXME:&lt;/span&gt; If clipPath has neither stroke nor fill,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// el.clipPath.contain(x, y) will always return false.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (el.&lt;span class=&#34;property&#34;&gt;clipPath&lt;/span&gt; &amp;amp;&amp;amp; !el.&lt;span class=&#34;property&#34;&gt;clipPath&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;contain&lt;/span&gt;(x, y))  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (el.&lt;span class=&#34;property&#34;&gt;silent&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                isSilent = &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            el = el.&lt;span class=&#34;property&#34;&gt;parent&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; isSilent ? &lt;span class=&#34;variable constant_&#34;&gt;SILENT&lt;/span&gt; : &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;先简单看下storage，因为zrender里绘制的元素之间没有逻辑关联，因此需要有一个全局存储storage去统一管理加入的Group或Shape。storage的&lt;code&gt;getDisplayList&lt;/code&gt;方法返回所有图形的绘制队列。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;getDisplayList&lt;/span&gt;: &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;update, includeIgnore&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    includeIgnore = includeIgnore || &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (update) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;updateDisplayList&lt;/span&gt;(includeIgnore);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;_displayList&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;注：方法中提到的&lt;code&gt;updateDisplayList&lt;/code&gt;用于更新图形的绘制队列，在每次绘制前调用，它会深度优先遍历整个树，更新所有的变换后，根据优先级排序得到新的绘制队列。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;在displayable的基类中，&lt;code&gt;contain&lt;/code&gt;方法只是单纯调用了&lt;code&gt;rectContain&lt;/code&gt;（子类都有区别于&lt;code&gt;rectContain&lt;/code&gt;的自己的实现）。在&lt;code&gt;rectContain&lt;/code&gt;中，获取到坐标相对于图形的坐标（&lt;code&gt;transformCoordToLocal&lt;/code&gt;）和图形的包围盒（&lt;code&gt;getBoundingRect&lt;/code&gt;）。这里先说简单的&lt;code&gt;RectContain&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;rectContain&lt;/span&gt;: &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;x, y&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; coord = &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;transformCoordToLocal&lt;/span&gt;(x, y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; rect = &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;getBoundingRect&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; rect.&lt;span class=&#34;title function_&#34;&gt;contain&lt;/span&gt;(coord[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;], coord[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;其中&lt;code&gt;getBoundingRect&lt;/code&gt;是各自类自己实现的。除了个别情况，如Text，形状都基于Path类。在Path的&lt;code&gt;getBoundingRect&lt;/code&gt;中可以看到，path的绘制又额外包装了一层&lt;code&gt;PathProxy&lt;/code&gt;，&lt;code&gt;getBoundingRect&lt;/code&gt;也是使用的&lt;code&gt;PathProxy&lt;/code&gt;的方法。在实现上，PathProxy把绘制路径的操作命令拆分成了命令数组。通过记录每一段子路径上x、y的最大最小值，再将所有这些极值比较得到最后的最值。在PathProxy返回结果后，根据描边粗细得到最终结果。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;getBoundingRect&lt;/span&gt;: &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// _rect变量做缓存用，计算完成后只在重绘时置空，避免重复计算&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; rect = &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;_rect&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; style = &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;style&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; needsUpdateRect = !rect;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (needsUpdateRect) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; path = &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;path&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!path) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// Create path on demand.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            path = &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;path&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;PathProxy&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;__dirtyPath&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            path.&lt;span class=&#34;title function_&#34;&gt;beginPath&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;buildPath&lt;/span&gt;(path, &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;shape&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rect = path.&lt;span class=&#34;title function_&#34;&gt;getBoundingRect&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;_rect&lt;/span&gt; = rect;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (style.&lt;span class=&#34;title function_&#34;&gt;hasStroke&lt;/span&gt;()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// Return rect with stroke&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; rectWithStroke;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; rect;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;Displayable&lt;/code&gt;继承自&lt;code&gt;Element&lt;/code&gt;，&lt;code&gt;Element&lt;/code&gt;通过mixin得到来自&lt;code&gt;Transformable&lt;/code&gt;中的&lt;code&gt;transformCoordToLocal&lt;/code&gt;方法。这里要说到，zrender中元素和Group都有一个构造时的初始位置，而后的所有变化都是作为transform叠加在元素上的。例如拖拽元素对应的是“原始位置 + transform”而不是一个“新位置”。&lt;/p&gt;
&lt;p&gt;在每次变换后，&lt;code&gt;Transformable&lt;/code&gt;中的&lt;code&gt;updateTransform&lt;/code&gt;方法都会调用，设置自身&lt;code&gt;invTransform&lt;/code&gt;属性为这次变化的逆矩阵。在&lt;code&gt;transformCoordToLocal&lt;/code&gt;中对向量[x, y]应用这个逆矩阵即可得到点相对于当前形状的位置（可以理解成将点逆变换到形状变换前的位置）。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;transformableProto.&lt;span class=&#34;property&#34;&gt;updateTransform&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m = m || matrix.&lt;span class=&#34;title function_&#34;&gt;create&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 保存这个变换矩阵&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;transform&lt;/span&gt; = m;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;invTransform&lt;/span&gt; = &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;invTransform&lt;/span&gt; || matrix.&lt;span class=&#34;title function_&#34;&gt;create&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    matrix.&lt;span class=&#34;title function_&#34;&gt;invert&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;invTransform&lt;/span&gt;, m);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;transformableProto.&lt;span class=&#34;property&#34;&gt;transformCoordToLocal&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;x, y&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; v2 = [x, y];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; invTransform = &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;invTransform&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (invTransform) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        vector.&lt;span class=&#34;title function_&#34;&gt;applyTransform&lt;/span&gt;(v2, v2, invTransform);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; v2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;综合这两个方法即可判断点是否在某元素的包围盒中。&lt;/p&gt;
&lt;p&gt;判断&lt;code&gt;contain&lt;/code&gt;时，首先需要满足&lt;code&gt;rectContain&lt;/code&gt;的关系。之后根据描边和填充情况，执行&lt;code&gt;contain/path&lt;/code&gt;下对应的&lt;code&gt;contain&lt;/code&gt;或&lt;code&gt;containStroke&lt;/code&gt;方法。前者实际上是后者stroke为0时的特殊情况。除了path外，可以判断点是否在元素图形内的所有元素在&lt;code&gt;contain&lt;/code&gt;下都有对应文件。基本所有的包含都可以转化为指定闭合路径是否包含指定点的问题。&lt;/p&gt;
&lt;p&gt;zrender利用&lt;a href=&#34;https://en.wikipedia.org/wiki/Point_in_polygon&#34;&gt;PIP&lt;/a&gt;（point-in-polygon）问题&lt;a href=&#34;https://www.quora.com/How-do-I-know-a-point-is-inside-a-closed-curve-or-not#&#34;&gt;winding number&lt;/a&gt;的解法判断点是否在path中；canvas提供的API中也有&lt;code&gt;isPointInPath&lt;/code&gt;和&lt;code&gt;isPointInStroke&lt;/code&gt;，不过只能针对当前的path。&lt;/p&gt;
&lt;p&gt;综上，zrender可以实现canvas内的元素和交互。&lt;/p&gt;
&lt;h2 id=&#34;g6&#34;&gt;&lt;a href=&#34;#g6&#34; class=&#34;headerlink&#34; title=&#34;g6&#34;&gt;&lt;/a&gt;g6&lt;/h2&gt;&lt;p&gt;g6是antv的一部分，是一个canvas实现的展示关系型数据的JS可视化库。使用canvas的原因应该也在展示大量数据和重绘上更流畅。&lt;/p&gt;
&lt;p&gt;使用canvas实现时，g6一样会遇到zrender遇到的实现元素可交互的难题。从处理event的event.js中能看到，关联事件和元素的实现在&lt;code&gt;_getEventObj&lt;/code&gt;处完成，剩下的步骤只是额外的封装操作：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Util&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;each&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;MouseEventTypes&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;item&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    _events.&lt;span class=&#34;title function_&#34;&gt;push&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;Util&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;addEventListener&lt;/span&gt;(el, item, &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;ev&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; oldEventObj = &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;_currentEventObj&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;_oldEventObj&lt;/span&gt; = oldEventObj;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;_processEventObj&lt;/span&gt;(ev);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; currentEventObj = &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;_currentEventObj&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;_processEventObj&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;ev&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; graph = &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;graph&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; canvas = graph.&lt;span class=&#34;title function_&#34;&gt;get&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;_canvas&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; frontCanvas = graph.&lt;span class=&#34;title function_&#34;&gt;get&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;_frontCanvas&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; evObj = &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;_getEventObj&lt;/span&gt;(ev, canvas);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; frontEvObj = &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;_getEventObj&lt;/span&gt;(ev, frontCanvas);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;_getEventObj&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;ev, canvas&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; graph = &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;graph&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; clientX = ev.&lt;span class=&#34;property&#34;&gt;clientX&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; clientY = ev.&lt;span class=&#34;property&#34;&gt;clientY&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; canvasPoint = canvas.&lt;span class=&#34;title function_&#34;&gt;getPointByClient&lt;/span&gt;(clientX, clientY);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; point = &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;_parsePoint&lt;/span&gt;(canvasPoint.&lt;span class=&#34;property&#34;&gt;x&lt;/span&gt;, canvasPoint.&lt;span class=&#34;property&#34;&gt;y&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;// 根据pixel ratio做一个转换&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; shape = canvas.&lt;span class=&#34;title function_&#34;&gt;getShape&lt;/span&gt;(canvasPoint.&lt;span class=&#34;property&#34;&gt;x&lt;/span&gt;, canvasPoint.&lt;span class=&#34;property&#34;&gt;y&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; item = graph.&lt;span class=&#34;title function_&#34;&gt;getItemByShape&lt;/span&gt;(shape);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;p.s. 另说一点，frontCanvas的作用是绘制拖拽状态中的元素和辅助线等信息。&lt;/p&gt;
&lt;p&gt;最关键的方法&lt;code&gt;getPointByClient&lt;/code&gt;和&lt;code&gt;getShape&lt;/code&gt;来自Graph的&lt;code&gt;canvas&lt;/code&gt;属性，这个属性通过‘@antv&amp;#x2F;g’（G2）的canvas构造得来。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; G = &lt;span class=&#34;built_in&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;@antv/g&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Canvas&lt;/span&gt; = G.&lt;span class=&#34;property&#34;&gt;Canvas&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在G2中，Canvas继承自Group，可以认为Canvas本身已经扮演了根节点的角色。Canvas判断坐标对应元素的方法&lt;code&gt;getShape(x,y)&lt;/code&gt;也来自Group。此方法遍历Group下所有元素（包括单个元素或Group），判断点[x, y]是否在范围内：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;find&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;children, x, y&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; rst;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; i = children.&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt; - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; i &amp;gt;= &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i--) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; child = children[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (child.&lt;span class=&#34;property&#34;&gt;__cfg&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;visible&lt;/span&gt; &amp;amp;&amp;amp; child.&lt;span class=&#34;property&#34;&gt;__cfg&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;capture&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// 是Group就继续向下寻找&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (child.&lt;span class=&#34;property&#34;&gt;isGroup&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rst = child.&lt;span class=&#34;title function_&#34;&gt;getShape&lt;/span&gt;(x, y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (child.&lt;span class=&#34;title function_&#34;&gt;isHit&lt;/span&gt;(x, y)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        rst = child;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (rst) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; rst;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;关键的&lt;code&gt;child.isHit&lt;/code&gt;方法类似zrender里的&lt;code&gt;contain&lt;/code&gt;方法。区别使用包围盒还是自身范围判断。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;isHit&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;x, y&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; self = &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; v = [ x, y, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; ];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    self.&lt;span class=&#34;title function_&#34;&gt;invert&lt;/span&gt;(v); &lt;span class=&#34;comment&#34;&gt;// canvas&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (self.&lt;span class=&#34;title function_&#34;&gt;isHitBox&lt;/span&gt;()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; box = self.&lt;span class=&#34;title function_&#34;&gt;getBBox&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (box &amp;amp;&amp;amp; !&lt;span class=&#34;title class_&#34;&gt;Inside&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;box&lt;/span&gt;(box.&lt;span class=&#34;property&#34;&gt;minX&lt;/span&gt;, box.&lt;span class=&#34;property&#34;&gt;maxX&lt;/span&gt;, box.&lt;span class=&#34;property&#34;&gt;minY&lt;/span&gt;, box.&lt;span class=&#34;property&#34;&gt;maxY&lt;/span&gt;, v[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;], v[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;])) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; clip = self.&lt;span class=&#34;property&#34;&gt;__attrs&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;clip&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (clip) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (clip.&lt;span class=&#34;title function_&#34;&gt;inside&lt;/span&gt;(x, y)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; self.&lt;span class=&#34;title function_&#34;&gt;isPointInPath&lt;/span&gt;(v[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;], v[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; self.&lt;span class=&#34;title function_&#34;&gt;isPointInPath&lt;/span&gt;(v[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;], v[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;使用包围盒时用&lt;code&gt;getBBox()&lt;/code&gt;判断，类似zrender；否则使用&lt;code&gt;isPointInPath&lt;/code&gt;。这点上g2不同，它只对特殊的闭合曲线如圆、矩形、贝塞尔曲线等等进行自己的实现。对一般性的path，直接使用上面提到的canvas的API来判断。&lt;/p&gt;
&lt;h2 id=&#34;processOn&#34;&gt;&lt;a href=&#34;#processOn&#34; class=&#34;headerlink&#34; title=&#34;processOn&#34;&gt;&lt;/a&gt;processOn&lt;/h2&gt;&lt;p&gt;processOn严格意义上是一个产品，类似于在线的visio，编辑很流畅。使用DOM + canvas实现。具体来说：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DOM绘制每个元素占位，响应交互&lt;/li&gt;
&lt;li&gt;canvas绘制每个DOM内的图形本身&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这么做的好处在有二：1. 天然解决了元素交互的问题；2. 更平滑的元素拖拽效果。&lt;/p&gt;
&lt;p&gt;类似的还有jsPlumb这样的使用SVG的方案，使用SVG的优势体现在交互更容易实现。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://shenlvmeng.github.com/blog/2018/05/14/canvas-introduction/</guid>
            <title>canvas相关介绍</title>
            <link>http://shenlvmeng.github.com/blog/2018/05/14/canvas-introduction/</link>
            <category>canvas</category>
            <category>绘图</category>
            <category>动画</category>
            <pubDate>Mon, 14 May 2018 21:28:01 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;canvas由Apple首先提出，现在已经有非常好的浏览器支持度。它和&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;标签很像，但是只有&lt;code&gt;width&lt;/code&gt;和&lt;code&gt;height&lt;/code&gt;两个属性，在未设置时，为300px和150px。canvas类似&lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt;和&lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt;可以设置替换内容，应对标签本身不被支持的情况。另外，canvas不同于&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;，它必须要有一个&lt;code&gt;&amp;lt;/canvas&amp;gt;&lt;/code&gt;作为闭合标志。&lt;/p&gt;
&lt;p&gt;canvas是一个2D渲染上下文环境（就像webGL是3D渲染上下文环境），在获取到&lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;元素后，可以通过其&lt;code&gt;getContext&lt;/code&gt;方法得到渲染上下文和相关功能，通常传入&lt;code&gt;2d&lt;/code&gt;，用来绘制2D图案。&lt;/p&gt;
&lt;h2 id=&#34;形状&#34;&gt;&lt;a href=&#34;#形状&#34; class=&#34;headerlink&#34; title=&#34;形状&#34;&gt;&lt;/a&gt;形状&lt;/h2&gt;&lt;p&gt;&lt;code&gt;canvas.getContext(&amp;#39;2d&amp;#39;)&lt;/code&gt;得到一个CanvasRenderingContext2D对象。剩下的绘制操作都通过调用对象上的API实现。&lt;/p&gt;
&lt;p&gt;canvas的坐标系系统和svg一样，从左上角开始，向右和向下为正，坐标轴单位为像素。下面列出最常见的绘制图形API。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fillRect(x, y, width, height)&lt;/code&gt; 绘制矩形&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strokeRect(x, y, width, height)&lt;/code&gt; 绘制矩形边框&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clearRect(x, y, width, height)&lt;/code&gt; 擦除矩形范围&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;path被用来绘制通用曲线，注意&lt;strong&gt;path都是封闭的&lt;/strong&gt;。绘制路径有4步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;beginPath()&lt;/code&gt; 新建一条路径，生成之后，图形绘制命令被指向到路径上生成路径。&lt;/li&gt;
&lt;li&gt;使用画图命令去画出路径&lt;/li&gt;
&lt;li&gt;&lt;code&gt;closePath()&lt;/code&gt; 闭合路径&lt;/li&gt;
&lt;li&gt;&lt;em&gt;可选&lt;/em&gt; &lt;code&gt;fill()&lt;/code&gt; 通过填充路径的内容区域生成实心的图形，使用&lt;code&gt;fill()&lt;/code&gt;时可以不手动闭合路径&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stroke()&lt;/code&gt;，为路径添加描边&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 样例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ctx.&lt;span class=&#34;title function_&#34;&gt;beginPath&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ctx.&lt;span class=&#34;title function_&#34;&gt;moveTo&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;75&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ctx.&lt;span class=&#34;title function_&#34;&gt;lineTo&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;75&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ctx.&lt;span class=&#34;title function_&#34;&gt;lineTo&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;25&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ctx.&lt;span class=&#34;title function_&#34;&gt;fill&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;div class=&#34;tip&#34;&gt;所有的路径通过`stroke()`和`fill()`才能体现效果。&lt;/div&gt;

&lt;p&gt;里面包含了常见的&lt;code&gt;moveTo&lt;/code&gt;和&lt;code&gt;lineTo&lt;/code&gt;，表示移动画笔&amp;#x2F;画直线到(x,y)处。画曲线时可以选择：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;arc(x, y, radius, startAngle, endAngle, anticlockwise)&lt;/code&gt;&lt;br&gt;画一个以（x,y）为圆心的以radius为半径的圆弧（圆），从startAngle开始到endAngle结束，按照anticlockwise给定的方向（默认为顺时针）来生成。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;arcTo(x1, y1, x2, y2, radius)&lt;/code&gt; 根据给定的控制点和半径画一段圆弧，再以直线连接两个控制点。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;quadraticCurveTo(cp1x, cp1y, x, y)&lt;/code&gt; 绘制二次贝塞尔曲线，cp1x,cp1y为一个控制点，x,y为结束点。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y)&lt;/code&gt; 绘制三次贝塞尔曲线，cp1x,cp1y为控制点一，cp2x,cp2y为控制点二，x,y为结束点。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;path2D&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过&lt;code&gt;new path2D()&lt;/code&gt;用path2D声明子路径，允许你保留和重用路径对象。除了CanvasRenderingContext2D对象的API外，还可以用&lt;code&gt;addPath&lt;/code&gt;新增路径到path2D对象中，它还支持通过SVG格式的字符串导入为路径。&lt;/p&gt;
&lt;h2 id=&#34;样式&#34;&gt;&lt;a href=&#34;#样式&#34; class=&#34;headerlink&#34; title=&#34;样式&#34;&gt;&lt;/a&gt;样式&lt;/h2&gt;&lt;p&gt;通过修改&lt;code&gt;fillStyle&lt;/code&gt;和&lt;code&gt;strokeStyle&lt;/code&gt;改变当前填充和描边的默认颜色。支持的颜色格式有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;颜色名&lt;/li&gt;
&lt;li&gt;hex&lt;/li&gt;
&lt;li&gt;rgb&lt;/li&gt;
&lt;li&gt;rgba&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过&lt;code&gt;globalAlpha&lt;/code&gt;修改画布里的所有图形的透明度，取值在0到1之间。&lt;/p&gt;
&lt;p&gt;线型样式选择有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lineWidth &amp;#x3D; value 设置线条宽度。&lt;/li&gt;
&lt;li&gt;lineCap &amp;#x3D; type 设置线条末端样式。默认为butt，还有round、square可选。&lt;/li&gt;
&lt;li&gt;lineJoin &amp;#x3D; type 设定线条与线条间接合处的样式。round, bevel 和 miter三种可选，miter时，miterLimit可以限制尖角的高度。&lt;/li&gt;
&lt;li&gt;miterLimit &amp;#x3D; value 限制当两条线相交时交接处最大长度；所谓交接处长度（斜接长度）是指线条交接处内角顶点到外角顶点的长度&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;设置虚线时，&lt;code&gt;setLineDash(segments)&lt;/code&gt;设置当前虚线样式。&lt;code&gt;lineDashOffset = value&lt;/code&gt;设置虚线样式的起始偏移量。&lt;code&gt;getLineDash()&lt;/code&gt;返回一个包含当前虚线样式，长度为非负偶数的数组。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;渐变&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;渐变需要先指定类型和覆盖范围：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;createLinearGradient(x1, y1, x2, y2)&lt;/code&gt; 方法接受4个参数，表示渐变的起点 (x1,y1) 与终点 (x2,y2)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;createRadialGradient(x1, y1, r1, x2, y2, r2)&lt;/code&gt; 方法接受6个参数，前三个定义一个以 (x1,y1) 为原点，半径为r1的圆，后三个参数则定义另一个以 (x2,y2) 为原点，半径为r2的圆。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;创建的渐变通过&lt;code&gt;addColorStop(position, color)&lt;/code&gt;添加多个color stop。position参数是一个0.0与1.0之间的数值，表示渐变中颜色所在的相对位置。&lt;strong&gt;渐变是一种样式，通过指定给fillStyle或是strokeStyle发挥作用&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;模式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过&lt;code&gt;createPattern(image, type)&lt;/code&gt;创建pattern，Image可以是一个Image对象的引用，或者另一个canvas对象。Type描述重复的格式，是下面的字符串值之一：repeat，repeat-x，repeat-y 和 no-repeat。&lt;/p&gt;
&lt;p&gt;同样，通过指定给&lt;code&gt;fillStyle&lt;/code&gt;和&lt;code&gt;strokeStyle&lt;/code&gt;使用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;阴影&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;shadowOffsetX &amp;#x3D; float&lt;/li&gt;
&lt;li&gt;shadowOffsetY &amp;#x3D; float&lt;br&gt;shadowOffsetX和shadowOffsetY用来设定阴影在X和Y轴的延伸距离，它们是不受变换矩阵所影响的。负值表示阴影会往上或左延伸，正值则表示会往下或右延伸，它们默认都为0。&lt;/li&gt;
&lt;li&gt;shadowBlur &amp;#x3D; float shadowBlur 用于设定阴影的模糊程度，默认为 0。&lt;/li&gt;
&lt;li&gt;shadowColor &amp;#x3D; color，默认为黑色&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;canvas有两种填充规则&lt;a href=&#34;https://en.wikipedia.org/wiki/Nonzero-rule&#34;&gt;&lt;code&gt;non-zero&lt;/code&gt;&lt;/a&gt;和&lt;code&gt;even-odd&lt;/code&gt;，默认为前者。&lt;/p&gt;
&lt;h2 id=&#34;文字&#34;&gt;&lt;a href=&#34;#文字&#34; class=&#34;headerlink&#34; title=&#34;文字&#34;&gt;&lt;/a&gt;文字&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fillText(text, x, y [, maxWidth])&lt;/code&gt; 在指定的(x,y)位置填充指定的文本，绘制的最大宽度是可选的&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strokeText(text, x, y [, maxWidth])&lt;/code&gt; 在指定的(x,y)位置绘制文本边框，绘制的最大宽度是可选的&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ctx.&lt;span class=&#34;property&#34;&gt;font&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;quot;48px PingFangSC&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ctx.&lt;span class=&#34;title function_&#34;&gt;strokeText&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Hello world&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;除了&lt;code&gt;font&lt;/code&gt;（语法和CSS的font相同）外，还有下面的选择：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;textAlign &amp;#x3D; value 文本对齐选项. 可选的值包括：start, end, left, right or center. 默认值是 start。&lt;/li&gt;
&lt;li&gt;textBaseline &amp;#x3D; value 基线对齐选项. 可选的值包括：top, hanging, middle, alphabetic, ideographic, bottom。默认值是 alphabetic。&lt;/li&gt;
&lt;li&gt;direction &amp;#x3D; value 文本方向&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，可以通过&lt;code&gt;measureText()&lt;/code&gt;，得到文本绘制的宽度。&lt;/p&gt;
&lt;h2 id=&#34;使用图片&#34;&gt;&lt;a href=&#34;#使用图片&#34; class=&#34;headerlink&#34; title=&#34;使用图片&#34;&gt;&lt;/a&gt;使用图片&lt;/h2&gt;&lt;p&gt;canvas里可以引入Image对象或其他canvas元素，或者通过URL方式使用图片。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用相同页面内的图片，使用正常地获取元素的方式获取即可&lt;/li&gt;
&lt;li&gt;使用其它域名下的图片，在HTMLImageElement上使用&lt;code&gt;crossOrigin&lt;/code&gt;属性，可以请求加载其它域名上的图片。若服务器不允许跨域加载，则会污染canvas，即不能导出数据&lt;/li&gt;
&lt;li&gt;使用canvas，按获取元素的方式获取即可&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;image可以指定&lt;code&gt;src&lt;/code&gt;属性为URL或&lt;code&gt;data:url&lt;/code&gt;的形式。甚至引入&lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt;使用视频帧作为image。绘制图片时，使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;drawImage(image, x, y)&lt;/code&gt; 其中image是image或者canvas对象，x和y是其在目标canvas里的起始坐标。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight)&lt;/code&gt;是包含了缩放和切片后完整的&lt;code&gt;drawImage&lt;/code&gt;用法&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;变形和裁剪&#34;&gt;&lt;a href=&#34;#变形和裁剪&#34; class=&#34;headerlink&#34; title=&#34;变形和裁剪&#34;&gt;&lt;/a&gt;变形和裁剪&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;save&lt;/strong&gt;和&lt;strong&gt;restore&lt;/strong&gt;用来保存和恢复canvas状态。每当&lt;code&gt;save()&lt;/code&gt;方法被调用后，当前的状态就被推送到栈中保存。状态包括所有变形、样式信息。每次&lt;code&gt;restore&lt;/code&gt;时会弹出栈顶的状态。&lt;strong&gt;建议在做变形和裁剪前保存状态&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;变形用到的属性和CSS很像：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;translate(x,y)&lt;/code&gt;改变当前原点位置，&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rotate(angle)&lt;/code&gt;以当前原点为圆心旋转画布，angle为弧度值。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scale(x, y)&lt;/code&gt;缩放当前canvas中的图形大小，x和y分别表示两轴上的缩放因子&lt;/li&gt;
&lt;li&gt;&lt;code&gt;transform(m11, m12, m21, m22, dx, dy)&lt;/code&gt;通过变形矩阵进行变换&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setTransform(m11, m12, m21, m22, dx, dy)&lt;/code&gt;先还原为单位矩阵，再按入参的矩阵变换&lt;/li&gt;
&lt;li&gt;&lt;code&gt;resetTransform&lt;/code&gt;重置变形为单位矩阵&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;globalCompositeOperation&lt;/code&gt;定义了图形相互重叠时的处理策略，类似PS中图层的混合模式，默认为&lt;code&gt;darker&lt;/code&gt;，还有很多&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation&#34;&gt;别的选项&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;clip()&lt;/code&gt;即裁剪方法，和&lt;code&gt;fill&lt;/code&gt;以及&lt;code&gt;stroke&lt;/code&gt;类似，不过&lt;code&gt;clip&lt;/code&gt;将路径对应的部分裁剪出指定区域。&lt;/p&gt;
&lt;h2 id=&#34;动画&#34;&gt;&lt;a href=&#34;#动画&#34; class=&#34;headerlink&#34; title=&#34;动画&#34;&gt;&lt;/a&gt;动画&lt;/h2&gt;&lt;p&gt;canvas只是一个画布，画出的东西都会保持原样。制作动画只能采取重绘，逐帧绘制，而每一帧包括下面几步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;清空canvas，可以使用&lt;code&gt;clearRect&lt;/code&gt;方法&lt;/li&gt;
&lt;li&gt;&lt;em&gt;可选&lt;/em&gt;，保存当前状态&lt;/li&gt;
&lt;li&gt;使用上面提过的种种方法绘制下一帧&lt;/li&gt;
&lt;li&gt;&lt;em&gt;可选&lt;/em&gt;，恢复状态&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;绘制动画通常要结合用户交互以及&lt;code&gt;setTimeout&lt;/code&gt;，&lt;code&gt;setInterval&lt;/code&gt;，&lt;code&gt;requestAnimationFrame&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;MDN给个一个&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial/Advanced_animations&#34;&gt;小球的组合动画&lt;/a&gt;可以参考。&lt;/p&gt;
&lt;h2 id=&#34;像素级操作&#34;&gt;&lt;a href=&#34;#像素级操作&#34; class=&#34;headerlink&#34; title=&#34;像素级操作&#34;&gt;&lt;/a&gt;像素级操作&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ImageData&lt;/code&gt;接口描述&lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;元素的一个包含像素数据的区域。它包含&lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;, &lt;code&gt;data&lt;/code&gt;单个只读属性。&lt;code&gt;ImageData&lt;/code&gt;可以通过&lt;code&gt;ctx.createImageData(width, height)&lt;/code&gt;或者从已有对象中创建，除此创建的所有像素都是透明黑。&lt;/p&gt;
&lt;p&gt;可以用&lt;code&gt;getImageData(left, top, width, height)&lt;/code&gt;方法获取指定范围的&lt;code&gt;ImageData&lt;/code&gt;信息，当&lt;code&gt;width&lt;/code&gt;和&lt;code&gt;height&lt;/code&gt;都为1时，取得当前像素信息。&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;putImageData(imageData, dx, dy)&lt;/code&gt;可以在当前画布(dx, dy)处绘制imageData像素数据。&lt;code&gt;imageSmoothingEnabled&lt;/code&gt;默认开启，关闭后可以在图片缩放时看到清楚颗粒化的细节。&lt;/p&gt;
&lt;h2 id=&#34;导出&#34;&gt;&lt;a href=&#34;#导出&#34; class=&#34;headerlink&#34; title=&#34;导出&#34;&gt;&lt;/a&gt;导出&lt;/h2&gt;&lt;p&gt;主要有三种用法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;canvas.toDataURL(&amp;#39;image/png&amp;#39;)&lt;/code&gt;，默认将canvas导出成png文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;canvas.toDataURL(&amp;#39;image/jpeg&amp;#39;, quality)&lt;/code&gt;，quality指定在0到1之间，默认为0.92。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;canvas.toBlob(callback, type, encoderOptions)&lt;/code&gt;，这个创建了一个在画布中的代表图片的Blob对像&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;toDataURL&lt;/code&gt;除了上面两种导出格式还有别的选择。&lt;/p&gt;
&lt;h2 id=&#34;交互&#34;&gt;&lt;a href=&#34;#交互&#34; class=&#34;headerlink&#34; title=&#34;交互&#34;&gt;&lt;/a&gt;交互&lt;/h2&gt;&lt;p&gt;&lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;标签只是一个位图，它并不提供任何已经绘制在上面的对象的信息。canvas的内容不能像语义化的HTML一样暴露给一些协助工具。一般来说，你应该避免在交互型的网站或者App上使用canvas。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;addHitRegion(options)&lt;/code&gt;可以将添加一个点击区域，options可以参考&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/addHitRegion&#34;&gt;MDN文档&lt;/a&gt;，鼠标事件如果触发在点击区域中，会带上region用于定位点击区域。&lt;/p&gt;
&lt;p&gt;另外&lt;code&gt;drawFocusIfNeeded()&lt;/code&gt;和&lt;code&gt;scrollPathIntoView()&lt;/code&gt;方法还可以绘制焦点圈。&lt;/p&gt;
&lt;h2 id=&#34;性能问题&#34;&gt;&lt;a href=&#34;#性能问题&#34; class=&#34;headerlink&#34; title=&#34;性能问题&#34;&gt;&lt;/a&gt;性能问题&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;预渲染相似或重复对象&lt;/li&gt;
&lt;li&gt;为了避免抗锯齿带来的额外运算，减少使用浮点数&lt;/li&gt;
&lt;li&gt;在离屏canvas中缓存图片的不同尺寸，不要用&lt;code&gt;drawImage()&lt;/code&gt;去缩放它们&lt;/li&gt;
&lt;li&gt;使用多层画布去画一个复杂的场景，比如使用多层画布，描绘不同层级的内容。  &lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;div id=&lt;span class=&#34;string&#34;&gt;&amp;quot;stage&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;language-xml&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;canvas&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;ui-layer&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;width&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;480&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;height&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;320&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;canvas&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;language-xml&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;canvas&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;game-layer&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;width&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;480&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;height&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;320&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;canvas&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;language-xml&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;canvas&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;background-layer&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;width&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;480&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;height&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;320&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;canvas&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;用CSS画大的背景图&lt;/li&gt;
&lt;li&gt;用CSS transforms特性缩放画布，建议不要将小画布放大，而是去将大画布缩小&lt;/li&gt;
&lt;li&gt;尽可能避免text rendering&lt;/li&gt;
&lt;li&gt;尽可能避免 shadowBlur&lt;/li&gt;
&lt;li&gt;&lt;code&gt;window.requestAnimationFrame()&lt;/code&gt;性能优于&lt;code&gt;window.setInterval()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://shenlvmeng.github.com/blog/2018/04/25/webrtc-practice/</guid>
            <title>webrtc学习笔记</title>
            <link>http://shenlvmeng.github.com/blog/2018/04/25/webrtc-practice/</link>
            <category>webrtc</category>
            <category>RTMP</category>
            <pubDate>Wed, 25 Apr 2018 23:09:06 +0800</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;必读：&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/API/WebRTC_API&#34;&gt;WebRTC API - Web API接口 | MDN&lt;/a&gt;&lt;br&gt;必读：&lt;a href=&#34;https://blog.coding.net/blog/getting-started-with-webrtc&#34;&gt;WebRTC的前世今生&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Web端用户视频推流使用webRTC方案，使用已有JS SDK（和&lt;a href=&#34;https://docs.agora.io/cn/2.1/product/Video/API%20Reference/communication_web_video?platform=Web&#34;&gt;这个&lt;/a&gt;兼容）。&lt;/p&gt;
&lt;p&gt;WebRTC由Google主推，全称Web Browser Real Time Communication。目标是希望在Web端进行点对点音视频通信。&lt;/p&gt;
&lt;p&gt;整个P2P过程很复杂，但是对于浏览器而言，WebRTC实际上只是提供了三个API：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;MediaStream&lt;/strong&gt;, 即getUserMedia（&lt;code&gt;navigator.getUserMedia&lt;/code&gt;），获取媒体数据，如来自用户摄像头和麦克风的音视频流&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RTCPeerConnection&lt;/strong&gt;，用于peer跟peer之间呼叫和建立连接以便传输音视频数据流；这个不同浏览器的实现不同，官网推荐使用&lt;code&gt;adapter.js&lt;/code&gt;进行适配&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RTCDataChannel&lt;/strong&gt;，用于peer跟peer之间传输音视频之外的一般数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;MediaStream&#34;&gt;&lt;a href=&#34;#MediaStream&#34; class=&#34;headerlink&#34; title=&#34;MediaStream&#34;&gt;&lt;/a&gt;MediaStream&lt;/h2&gt;&lt;p&gt;参考&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/API/MediaStream&#34;&gt;MDN&lt;/a&gt;。来自&lt;code&gt;navigator.getUserMedia()&lt;/code&gt;，这个方法接收三个参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个约束对象，如&lt;code&gt;&amp;#123; audio: false, video: true &amp;#125;&lt;/code&gt;，除了这两种，其他外设也可以作为输入&lt;/li&gt;
&lt;li&gt;一个成功回调&lt;/li&gt;
&lt;li&gt;一个失败回调&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;返回的MediaStream对象有&lt;code&gt;addTrack&lt;/code&gt;, &lt;code&gt;getAudioTracks&lt;/code&gt;, &lt;code&gt;getVideoTracks&lt;/code&gt;等方法。通过这些方法取出的MediaStreamTrack数组代表对应类型的流，可以把取出的这些流导入到&lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt;等标签输出。在Chrome或Opera中，&lt;code&gt;URL.createObjectURL()&lt;/code&gt;方法可以转换一个MediaStream到一个Blob URL，可以被设置作为视频的源。除了这种方法，还可以使用&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/AudioContext&#34;&gt;&lt;code&gt;AudioContext&lt;/code&gt;&lt;/a&gt;API，对音频做处理后输出。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;gotStream&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;stream&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;window&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;AudioContext&lt;/span&gt; = &lt;span class=&#34;variable language_&#34;&gt;window&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;AudioContext&lt;/span&gt; || &lt;span class=&#34;variable language_&#34;&gt;window&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;webkitAudioContext&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; audioContext = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AudioContext&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Create an AudioNode from the stream&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; mediaStreamSource = audioContext.&lt;span class=&#34;title function_&#34;&gt;createMediaStreamSource&lt;/span&gt;(stream);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Connect it to destination to hear yourself&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// or any other node for processing!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    mediaStreamSource.&lt;span class=&#34;title function_&#34;&gt;connect&lt;/span&gt;(audioContext.&lt;span class=&#34;property&#34;&gt;destination&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;navigator.&lt;span class=&#34;title function_&#34;&gt;getUserMedia&lt;/span&gt;(&amp;#123;&lt;span class=&#34;attr&#34;&gt;audio&lt;/span&gt;:&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;&amp;#125;, gotStream);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;使用HTTPS请求&lt;code&gt;getUserMedia&lt;/code&gt;会向用户给出一次提示。不建议在HTTP环境下使用。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://webrtc.github.io/samples/src/content/getusermedia/gum/&#34;&gt;这里&lt;/a&gt;是一个demo，打开console，查看全局变量stream就明白MediaStream结构了。&lt;/p&gt;
&lt;p&gt;约束对象中可以商议视频分辨率等信息。它会影响获取到的视频流。&lt;/p&gt;
&lt;h2 id=&#34;RTCPeerConnection&#34;&gt;&lt;a href=&#34;#RTCPeerConnection&#34; class=&#34;headerlink&#34; title=&#34;RTCPeerConnection&#34;&gt;&lt;/a&gt;RTCPeerConnection&lt;/h2&gt;&lt;p&gt;WebRTC使用RTCPeerConnection在浏览器间传递数据流，但在之前需要有一个交换信令的过程。这个过程不在WebRTC中定义，开发者可以使用任何想用的消息协议，比如WebSocket或XHR轮询什么的。信令过程需要传递三种信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;连接控制信息：初始化或者关闭连接报告错误。&lt;/li&gt;
&lt;li&gt;网络配置：对于外网，我们电脑的 IP 地址和端口？&lt;/li&gt;
&lt;li&gt;多媒体数据：使用什么编码解码器，浏览器可以处理什么信息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;点对点的连接需要ICE（Interactive Connectivity Establishment）的帮助，ICE靠STUN和TURN服务器处理NAT穿透等复杂问题。起初连接建立在UDP之上，STUN服务器让位于NAT中的client获知自己的公网IP和端口。如果UDP建立失败，考虑TCP连接，再考虑HTTP和HTTPS连接。否则使用TURN服务器做中转工作。&lt;/p&gt;
&lt;p&gt;W3C给了RTCPeerConnection的样例，&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; signalingChannel = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;SignalingChannel&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; configuration = &amp;#123; &lt;span class=&#34;string&#34;&gt;&amp;quot;iceServers&amp;quot;&lt;/span&gt;: [&amp;#123; &lt;span class=&#34;string&#34;&gt;&amp;quot;url&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;stun:stun.example.org&amp;quot;&lt;/span&gt; &amp;#125;] &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; pc;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 调用start()建立连接&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;start&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  pc = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;RTCPeerConnection&lt;/span&gt;(configuration);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 有任何 ICE candidates 可用，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 通过signalingChannel传递candidate给对方&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  pc.&lt;span class=&#34;property&#34;&gt;onicecandidate&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;evt&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (evt.&lt;span class=&#34;property&#34;&gt;candidate&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      signalingChannel.&lt;span class=&#34;title function_&#34;&gt;send&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;JSON&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;stringify&lt;/span&gt;(&amp;#123; &lt;span class=&#34;string&#34;&gt;&amp;quot;candidate&amp;quot;&lt;/span&gt;: evt.&lt;span class=&#34;property&#34;&gt;candidate&lt;/span&gt; &amp;#125;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// let the &amp;quot;negotiationneeded&amp;quot; event trigger offer generation&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  pc.&lt;span class=&#34;property&#34;&gt;onnegotiationneeded&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    pc.&lt;span class=&#34;title function_&#34;&gt;createOffer&lt;/span&gt;(localDescCreated, logError);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 远端流到达时，在remoteView中做展示&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  pc.&lt;span class=&#34;property&#34;&gt;onaddstream&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;evt&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    remoteView.&lt;span class=&#34;property&#34;&gt;src&lt;/span&gt; = &lt;span class=&#34;variable constant_&#34;&gt;URL&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;createObjectURL&lt;/span&gt;(evt.&lt;span class=&#34;property&#34;&gt;stream&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 获取本地流，展示并传递&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  navigator.&lt;span class=&#34;title function_&#34;&gt;getUserMedia&lt;/span&gt;(&amp;#123; &lt;span class=&#34;string&#34;&gt;&amp;quot;audio&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;video&amp;quot;&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt; &amp;#125;, &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;stream&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    selfView.&lt;span class=&#34;property&#34;&gt;src&lt;/span&gt; = &lt;span class=&#34;variable constant_&#34;&gt;URL&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;createObjectURL&lt;/span&gt;(stream);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    pc.&lt;span class=&#34;title function_&#34;&gt;addStream&lt;/span&gt;(stream);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;, logError);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;localDescCreated&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;desc&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  pc.&lt;span class=&#34;title function_&#34;&gt;setLocalDescription&lt;/span&gt;(desc, &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    signalingChannel.&lt;span class=&#34;title function_&#34;&gt;send&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;JSON&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;stringify&lt;/span&gt;(&amp;#123; &lt;span class=&#34;string&#34;&gt;&amp;quot;sdp&amp;quot;&lt;/span&gt;: pc.&lt;span class=&#34;property&#34;&gt;localDescription&lt;/span&gt; &amp;#125;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;, logError);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;signalingChannel.&lt;span class=&#34;property&#34;&gt;onmessage&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;evt&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!pc)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;start&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; message = &lt;span class=&#34;title class_&#34;&gt;JSON&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;parse&lt;/span&gt;(evt.&lt;span class=&#34;property&#34;&gt;data&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (message.&lt;span class=&#34;property&#34;&gt;sdp&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    pc.&lt;span class=&#34;title function_&#34;&gt;setRemoteDescription&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;RTCSessionDescription&lt;/span&gt;(message.&lt;span class=&#34;property&#34;&gt;sdp&lt;/span&gt;), &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// 接收到offer时，回应一个answer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (pc.&lt;span class=&#34;property&#34;&gt;remoteDescription&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;type&lt;/span&gt; == &lt;span class=&#34;string&#34;&gt;&amp;quot;offer&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        pc.&lt;span class=&#34;title function_&#34;&gt;createAnswer&lt;/span&gt;(localDescCreated, logError);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;, logError);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 接收对方candidate并加入自己的RTCPeerConnection&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    pc.&lt;span class=&#34;title function_&#34;&gt;addIceCandidate&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;RTCIceCandidate&lt;/span&gt;(message.&lt;span class=&#34;property&#34;&gt;candidate&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;logError&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;error&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(error.&lt;span class=&#34;property&#34;&gt;name&lt;/span&gt; + &lt;span class=&#34;string&#34;&gt;&amp;quot;: &amp;quot;&lt;/span&gt; + error.&lt;span class=&#34;property&#34;&gt;message&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在开始建立连接时，调用&lt;code&gt;start()&lt;/code&gt;，创建&lt;code&gt;RTCPeerConnection&lt;/code&gt;对象，接着完成下面步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;交换网络信息&lt;/strong&gt;，&lt;code&gt;onicecandidate&lt;/code&gt;回调在有任何candidate出现时，将通过SignalChannel（使用额外方法创建，如WebSocket）传递给对方。同样地，在通过SignalChannel接收到对方发来的该信息时，加入这个candidate到RTCPeerConnection中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;交换多媒体信息&lt;/strong&gt;，使用SDP（Session Description Protocol）与对端交换多媒体资讯，在&lt;code&gt;onnegotiationneeded&lt;/code&gt;中，调用&lt;code&gt;createOffer&lt;/code&gt;通过&lt;code&gt;setLocalDescription&lt;/code&gt;创建&lt;code&gt;RTCSessionDecription&lt;/code&gt;对象进行本地存储，并传给对方。接收方通过&lt;code&gt;setRemoteDescription&lt;/code&gt;方法设定remote description。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上述过程称为JavaScript Session Establishment Protocol（JSEP）。一旦这个signaling完成了，数据可以直接的在端到端之间进行数据传输。如果失败了，通过中介服务器relay服务进行转发。&lt;/p&gt;
&lt;p&gt;通常RTCPeerConnection的API太复杂，所以有很多在此基础上的库封装出了更加友善的API。&lt;/p&gt;
&lt;h2 id=&#34;JS-SDK接入流程&#34;&gt;&lt;a href=&#34;#JS-SDK接入流程&#34; class=&#34;headerlink&#34; title=&#34;JS-SDK接入流程&#34;&gt;&lt;/a&gt;JS-SDK接入流程&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;参考：&lt;a href=&#34;https://docs.agora.io/cn/2.1/product/Video/API%20Reference/communication_web_video?platform=Web&#34;&gt;Agora：视频通话API&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;准备工作，包括界面绘制等&lt;/li&gt;
&lt;li&gt;向远端注册当前用户，获取token，为后面做准备&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;createClient()&lt;/code&gt;方法创建客户端&lt;/li&gt;
&lt;li&gt;指定回调，包括已订阅流、已添加流、移除、失败等生命周期事件的回调&lt;/li&gt;
&lt;li&gt;初始化客户端，传入appId和成功回调&lt;/li&gt;
&lt;li&gt;初始化成功后，调用join方法根据获取到的token加入指定房间（原理是WebRTC的stream有id）&lt;/li&gt;
&lt;li&gt;指定配置创建本地流（getUserMedia），发布本地流，播放本地流&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;RTMP相关&#34;&gt;&lt;a href=&#34;#RTMP相关&#34; class=&#34;headerlink&#34; title=&#34;RTMP相关&#34;&gt;&lt;/a&gt;RTMP相关&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;必读：&lt;a href=&#34;https://www.villainhr.com/page/2017/08/05/RTMP%20H5%20%E7%9B%B4%E6%92%AD%E6%B5%81%E6%8A%80%E6%9C%AF%E8%A7%A3%E6%9E%90&#34;&gt;RTMP H5 直播流技术解析&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一次RTMP握手的模拟。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 握手协议模拟&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;C&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;time, random&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;time&lt;/span&gt; = time || &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;random&lt;/span&gt; = random || &lt;span class=&#34;title class_&#34;&gt;Buffer&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;alloc&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;// Buffer类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;C0&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; buf = &lt;span class=&#34;title class_&#34;&gt;Buffer&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;alloc&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; buf;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;C1&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; buf = &lt;span class=&#34;title class_&#34;&gt;Buffer&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;alloc&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1536&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; buf;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * write C2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;C2&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; buf = &lt;span class=&#34;title class_&#34;&gt;Buffer&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;alloc&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1536&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        buf.&lt;span class=&#34;title function_&#34;&gt;writeUInt32BE&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;time&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;random&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;copy&lt;/span&gt;(buf, &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1528&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 客户端&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; client = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; net.&lt;span class=&#34;title function_&#34;&gt;socket&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;variable constant_&#34;&gt;RTMP_C&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;C&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;client.&lt;span class=&#34;title function_&#34;&gt;connect&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;port&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;1935&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;host&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;example.live.com&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;connected&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;client.&lt;span class=&#34;title function_&#34;&gt;on&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;data&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;data&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!data) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;warn&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Empty Buffer.&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!&lt;span class=&#34;variable constant_&#34;&gt;RTMP_C&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;S0&lt;/span&gt; &amp;amp;&amp;amp; data.&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt; &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable constant_&#34;&gt;RTMP_C&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;S0&lt;/span&gt; = data.&lt;span class=&#34;title function_&#34;&gt;readUInt8&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        data = data.&lt;span class=&#34;title function_&#34;&gt;slice&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!&lt;span class=&#34;variable constant_&#34;&gt;RTMP_C&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;S1&lt;/span&gt; &amp;amp;&amp;amp; data.&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt; &amp;gt;= &lt;span class=&#34;number&#34;&gt;1536&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable constant_&#34;&gt;RTMP_C&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;time&lt;/span&gt; = data.&lt;span class=&#34;title function_&#34;&gt;readUInt32BE&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable constant_&#34;&gt;RTMP_C&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;random&lt;/span&gt; = data.&lt;span class=&#34;title function_&#34;&gt;slice&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1536&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable constant_&#34;&gt;RTMP_C&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;S1&lt;/span&gt; = &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        data = data.&lt;span class=&#34;title function_&#34;&gt;slice&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1536&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;send C2&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        client.&lt;span class=&#34;title function_&#34;&gt;write&lt;/span&gt;(&lt;span class=&#34;variable constant_&#34;&gt;RTMP_C&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;C2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!&lt;span class=&#34;variable constant_&#34;&gt;RTMP_C&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;S2&lt;/span&gt; &amp;amp;&amp;amp; data.&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt; &amp;gt;= &lt;span class=&#34;number&#34;&gt;1536&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable constant_&#34;&gt;RTMP_C&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;S2&lt;/span&gt; = &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        data = data.&lt;span class=&#34;title function_&#34;&gt;slice&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1536&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://shenlvmeng.github.com/blog/2018/01/22/design-pattern-note/</guid>
            <title>设计模式学习</title>
            <link>http://shenlvmeng.github.com/blog/2018/01/22/design-pattern-note/</link>
            <category>JavaScript</category>
            <category>设计模式</category>
            <category>类</category>
            <category>接口</category>
            <category>抽象类</category>
            <pubDate>Mon, 22 Jan 2018 17:28:45 +0800</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;全文参考&lt;a href=&#34;https://book.douban.com/subject/4260618/&#34;&gt;《设计模式之禅》&lt;/a&gt;，&lt;a href=&#34;https://book.douban.com/subject/1400656/&#34;&gt;Head First Design Pattern&lt;/a&gt;这本也不错。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;准备&#34;&gt;&lt;a href=&#34;#准备&#34; class=&#34;headerlink&#34; title=&#34;准备&#34;&gt;&lt;/a&gt;准备&lt;/h2&gt;&lt;p&gt;JavaScript学久了，在看设计原则时，顺带温习了下OOP中的一些传统概念。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;类图&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;一&amp;gt;&lt;/code&gt;: 关联，类定义中的相互引用，通常使用类的属性表达。 比如客户类和订单类&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--&amp;gt;&lt;/code&gt;: 依赖，最弱的关系，对象间的临时关联，用函数参数、局部变量、返回值等表达&lt;/li&gt;
&lt;li&gt;&lt;code&gt;一▷&lt;/code&gt;: 继承&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--▷&lt;/code&gt;: 实现&lt;/li&gt;
&lt;li&gt;&lt;code&gt;一◇&lt;/code&gt;: has-a关系，表示整体与局部，但不稳定。比如公司类和雇员类&lt;/li&gt;
&lt;li&gt;&lt;code&gt;一◆&lt;/code&gt;: contains-a关系，表示整体与局部，部分不能脱离整体而存在。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;override和overload&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;区别&lt;/th&gt;
&lt;th&gt;覆写&lt;/th&gt;
&lt;th&gt;重载&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;单词&lt;/td&gt;
&lt;td&gt;OverLoading&lt;/td&gt;
&lt;td&gt;Override&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;概念&lt;/td&gt;
&lt;td&gt;方法名称相同，参数的类型或个数不同&lt;/td&gt;
&lt;td&gt;方法名称相同，参数的类型或个数相同，返回值类型相同&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;范围&lt;/td&gt;
&lt;td&gt;发生在一个类之中&lt;/td&gt;
&lt;td&gt;发生在类的继承关系中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;权限&lt;/td&gt;
&lt;td&gt;一个类中所重载多个方法可以不同的权限&lt;/td&gt;
&lt;td&gt;被子类所覆写的方法不能拥有比父类更严格的访问控制权限&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;接口和抽象类的不同&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;两者都为“面向契约编程”而存在。总体来说，接口是对能力的抽象，抽象类是对事物的抽象。从而有着下面的不同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接口被类实现，抽象类被子类继承。&lt;/li&gt;
&lt;li&gt;接口只做方法声明，抽象类中可以做方法声明，也可以做方法实现。&lt;/li&gt;
&lt;li&gt;接口里定义的变量只能是公共静态常量，抽象类中的变量可以是普通变量。&lt;/li&gt;
&lt;li&gt;抽象类里可以没有抽象方法，接口是设计的结果，抽象类是重构的结果。&lt;/li&gt;
&lt;li&gt;Java中接口可继承接口，并可多继承接口，但类只能单继承。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;它们还有以下特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在实现时必须全部实现，否则仍是接口&amp;#x2F;抽象类&lt;/li&gt;
&lt;li&gt;抽象类中可以没有抽象方法&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;设计6原则&#34;&gt;&lt;a href=&#34;#设计6原则&#34; class=&#34;headerlink&#34; title=&#34;设计6原则&#34;&gt;&lt;/a&gt;设计6原则&lt;/h2&gt;&lt;p&gt;SOLID原则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单一职责（接口细分到单一业务）&lt;/li&gt;
&lt;li&gt;里氏替换（实现都按接口来）&lt;/li&gt;
&lt;li&gt;依赖倒置（多使用抽象概念）&lt;/li&gt;
&lt;li&gt;接口隔离原则（接口尽量细分）&lt;/li&gt;
&lt;li&gt;迪米特法则（低耦合）&lt;/li&gt;
&lt;li&gt;开闭原则（高内聚，低耦合）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总结来说，就是&lt;strong&gt;好好设计、合理拆分接口，一旦确定，避免更改；减少接口耦合；面向接口编程；使用中间层应对需求变更&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;常见设计模式&#34;&gt;&lt;a href=&#34;#常见设计模式&#34; class=&#34;headerlink&#34; title=&#34;常见设计模式&#34;&gt;&lt;/a&gt;常见设计模式&lt;/h2&gt;&lt;h3 id=&#34;单例模式&#34;&gt;&lt;a href=&#34;#单例模式&#34; class=&#34;headerlink&#34; title=&#34;单例模式&#34;&gt;&lt;/a&gt;单例模式&lt;/h3&gt;&lt;p&gt;单例模式是最简单的设计模式。即一个类只有一个实例，或一个构造函数只能初始化一次（JS版本），且&lt;strong&gt;自行实例化&lt;/strong&gt;，并像整个系统提供整个实例。常用在下面这些场景下，解决特定的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;整个项目需要一个&lt;strong&gt;共享&lt;/strong&gt;访问点或共享数据&lt;/li&gt;
&lt;li&gt;包含了大量静态常量（通常是配置数据）和静态方法的&lt;strong&gt;工具类&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;创建一个对象需要消耗的资源过多&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实现上，分懒汉型和饿汉型。它们的主要区别在初始化单一实例的时机在类创建时还是访问时。懒汉型需要注意&lt;strong&gt;线程安全&lt;/strong&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 饿汉型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Singleton&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Singleton&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;singleton&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Singleton&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 限制外部访问&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;Singleton&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 暴露的public方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; Singleton &lt;span class=&#34;title function_&#34;&gt;getInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; singleton;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 其他方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 懒汉型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Singleton&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Singleton&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;singleton&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 限制外部访问&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;Singleton&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 暴露的public方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; sychronized Singleton &lt;span class=&#34;title function_&#34;&gt;getInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (singleton == &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      singleton = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Singleton&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; singleton;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;JavaScript中就灵活多了。最常用的字面量变量就是最简单的单例，强行使用构造函数，也可以借助闭包的特点实现。另外，JavaScript是单线程，不需要考虑线程安全的问题。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 字面量变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; singleton = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 一些属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;foo&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;bar&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 一些方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;baz&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Hello world!&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 闭包&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;Singleton&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; singleton = &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;foo&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;bar&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;baz&lt;/span&gt; = &lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123; &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Hello world!&amp;#x27;&lt;/span&gt;); &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;Singleton&lt;/span&gt; = &lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; singleton;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;拓展&#34;&gt;&lt;a href=&#34;#拓展&#34; class=&#34;headerlink&#34; title=&#34;拓展&#34;&gt;&lt;/a&gt;拓展&lt;/h4&gt;&lt;p&gt;当放开单例限制，编程多例模式时，可以通过加入计数器来限制。但不常用，下面给出JavaScript版本例子。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;Singleton&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; singleton = &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt; = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 比如限制为3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; limit = &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 一些初始化工作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; limit; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [].&lt;span class=&#34;title function_&#34;&gt;push&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title class_&#34;&gt;Singleton&lt;/span&gt; = &lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; singleton;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;h3 id=&#34;工厂模式&#34;&gt;&lt;a href=&#34;#工厂模式&#34; class=&#34;headerlink&#34; title=&#34;工厂模式&#34;&gt;&lt;/a&gt;工厂模式&lt;/h3&gt;&lt;p&gt;工厂模式意思是，将创建对象的过程封装起来，在OOP语言中体现在定义一个创建一类对象的接口，让实例化过程在子类中完成。浅显的来讲，就是让工厂类将具有共性、创建过程复杂的一类对象的创建过程封装起来，便于业务类使用，同时也便于日后拓展。业务类只需要交给工厂类需要的对象类名（Java）或别的标志就可以得到所需对象。&lt;/p&gt;
&lt;p&gt;使用场景上，它是new模式的替代品，在任何需要对象的场景下都可以使用，但是只有下面这些情况下是比较合适的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要灵活解耦的框架&lt;/li&gt;
&lt;li&gt;产品类创建过程复杂、有差异性且有共性。比如连接邮箱客户端的三种协议POP3、IMAP、HTTP的构造过程抽象成一个&lt;code&gt;IConnectMail&lt;/code&gt;接口，再设计各自的工厂类。在日后有新的连接邮箱客户端协议时，只需新增一个工厂类即可。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Java中工厂类可以使用反射等方法创建新对象。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 产品类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;abstractProduct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 共有方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 抽象方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;abstractMethod&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;product1&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;abstractProduct&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;abstractMethod&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 差异化方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;product2&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;abstractProduct&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;abstractMethod&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 差异化方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Factory&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 入参根据场景调整&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &amp;lt;T &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;abstractProduct&lt;/span&gt;&amp;gt; T &lt;span class=&#34;title function_&#34;&gt;createProduct&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Class&amp;lt;T&amp;gt; c)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Factory1&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Factory&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &amp;lt;T &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Product&lt;/span&gt;&amp;gt; T &lt;span class=&#34;title function_&#34;&gt;createProduct&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Class&amp;lt;T&amp;gt; c)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;Product&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      p = (Product)Class.forName(c.getName()).newInstance();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;JavaScript中，工厂模式的实现更加轻量级，因为构造对象的方式更加简单，使用函数将多个产品类间的共性抽出来就行了。样例略。&lt;/p&gt;
&lt;h3 id=&#34;抽象工厂模式&#34;&gt;&lt;a href=&#34;#抽象工厂模式&#34; class=&#34;headerlink&#34; title=&#34;抽象工厂模式&#34;&gt;&lt;/a&gt;抽象工厂模式&lt;/h3&gt;&lt;p&gt;抽象模式在工厂模式的基础上又抽象了一层，产品类接口下是多个&lt;strong&gt;产品族&lt;/strong&gt;抽象类，产品族下才是明确的产品类。相对应的，工厂接口下的多个工厂方法根据最细节的产品类生产对象。它的优势在：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以不公开地控制产品族间的约束&lt;/li&gt;
&lt;li&gt;更好地组织多维度（更多是2维）上多个产品间的生产&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点也很明显，产品族的修改将会直接影响工厂接口和产品抽象类，这是开闭原则的大忌。因此，在&lt;strong&gt;产品维度固定，且有必要从多维度上划分产品&lt;/strong&gt;时，才会使用抽象工厂模式。比如Windows、Linux、Mac OS上的文本编辑器与图像处理程序就是两个维度的多个产品。&lt;/p&gt;
&lt;p&gt;样例略。&lt;/p&gt;
&lt;h3 id=&#34;模板方法模式&#34;&gt;&lt;a href=&#34;#模板方法模式&#34; class=&#34;headerlink&#34; title=&#34;模板方法模式&#34;&gt;&lt;/a&gt;模板方法模式&lt;/h3&gt;&lt;p&gt;模板方法模式比较好理解，就是将子类中共有的&lt;strong&gt;算法框架&lt;/strong&gt;抽象到抽象类中实现，注意是框架，而不是具体的步骤。子类可以根据自己的需要，在不改变框架的基础上，重定义算法的某些步骤，得到不同的结果。下面举个例子就能更方便地看明白了。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; student = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;study&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;gotoPrimarySchool&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;gotoMiddleSchool&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;gotoUniversity&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; stu1 = &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;assign&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;create&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;Student&lt;/span&gt;), &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;gotoPrimarySchool&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;子弟学校 &amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;gotoMiddleSchool&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;人大附中 &amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;gotoUniversity&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;清华大学 &amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; stu2 = &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;assign&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;create&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;Student&lt;/span&gt;), &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;gotoPrimarySchool&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;子弟学校 &amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;gotoMiddleSchool&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;华师一附中 &amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;gotoUniversity&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;中科大 &amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;stu1.&lt;span class=&#34;title function_&#34;&gt;study&lt;/span&gt;(); &lt;span class=&#34;comment&#34;&gt;//子弟学校 人大附中 清华大学 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;stu2.&lt;span class=&#34;title function_&#34;&gt;study&lt;/span&gt;(); &lt;span class=&#34;comment&#34;&gt;//子弟学校 华师一附中 中科大 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;可以看到，同样是调用学习方法&lt;code&gt;study&lt;/code&gt;，&lt;code&gt;stu1&lt;/code&gt;和&lt;code&gt;stu2&lt;/code&gt;可以再不影响公用算法流程下，定义自己的算法步骤。使用Java实现是一样的思路：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义抽象类，声明可以差异化的基本方法，实现模板方法，在模板方法中调用可以差异化的基本方法&lt;/li&gt;
&lt;li&gt;子类根据需要，实现自己的基本方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;模板方法模式核心就在于&lt;strong&gt;封装不变部分，开放可变部分&lt;/strong&gt;，共有的算法步骤也较容易维护。因此，使用在下面的场景里：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;子类共有相同算法流程&lt;/li&gt;
&lt;li&gt;将核心算法设计为模板方法，细节功能由子类补充&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;建造者模式&#34;&gt;&lt;a href=&#34;#建造者模式&#34; class=&#34;headerlink&#34; title=&#34;建造者模式&#34;&gt;&lt;/a&gt;建造者模式&lt;/h3&gt;&lt;p&gt;建造者模式和工厂模式类似，意思是，讲一个复杂对象的&lt;strong&gt;构建&lt;/strong&gt;和&lt;strong&gt;表示&lt;/strong&gt;分离，使同样的构建过程可以有不同的表示。其中的&lt;strong&gt;构建&lt;/strong&gt;强调的是不同基本方法的调用顺序安排，而不是基本方法的实现（这也是它和工厂方法的最大区别）；&lt;strong&gt;表示&lt;/strong&gt;是指产品子类对于基本方法的差异性实现。&lt;/p&gt;
&lt;p&gt;对比上面模板方法模式来看，就是&lt;code&gt;study&lt;/code&gt;的顺序对于不同人不一样，这个顺序有另外的建造类描述并实现。可以看到，建造者模式主要的使用场景是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相同的执行方法，不同的执行顺序，产生不同的结果&lt;/li&gt;
&lt;li&gt;产品类中，不同的构建顺序会有不同的结果&lt;/li&gt;
&lt;li&gt;用户希望执行次序可控&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在实现时，建造类通过传入新状态或其他方式影响产品类的模板方式执行次序。在建造类和产品类之上，使用导演类可以起到封装的作用。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 产品类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Product&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 差异化业务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 抽象建造类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Builder&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 设置构建的次序，以获得不同的结果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;setSequence&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 建造&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; Product &lt;span class=&#34;title function_&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 具体建造类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Builder1&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Builder&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Product&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;product&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Product&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;setSequence&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 差异化逻辑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Product &lt;span class=&#34;title function_&#34;&gt;buildProduct&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; product;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 导演类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Director&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Builder&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;builder&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Builder1&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Product &lt;span class=&#34;title function_&#34;&gt;getProductA&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    builder.setSequence();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; builder.build();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;代理模式&#34;&gt;&lt;a href=&#34;#代理模式&#34; class=&#34;headerlink&#34; title=&#34;代理模式&#34;&gt;&lt;/a&gt;代理模式&lt;/h3&gt;&lt;p&gt;代理模式即为其他对象提供一个代理来控制对这个对象的访问，浅显易懂。利用代理模式还可以拦截原始请求，做额外的事情。应用很广泛。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 作为示例的一个方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;RealObject&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 业务逻辑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 代理的对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;object&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;Proxy&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.subject = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Proxy&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 传递代理者&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;Proxy&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Object o)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.before();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.object.request();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.after();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 预处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;before&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 善后处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;after&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;除了普通代理，还有强制代理即只能通过被代理对象对象访问到代理。另外，AOP（Aspect Oriented Progarmming）模式也是建立在代理模式的基础上的。ES6中的proxy和ES7中的装饰器就是AOP概念下的产物。&lt;/p&gt;
&lt;h3 id=&#34;原型模式&#34;&gt;&lt;a href=&#34;#原型模式&#34; class=&#34;headerlink&#34; title=&#34;原型模式&#34;&gt;&lt;/a&gt;原型模式&lt;/h3&gt;&lt;p&gt;原型模式即不通过&lt;code&gt;new&lt;/code&gt;而是通过对象复制生产同类对象。非常好理解。在Java中，一个实现了&lt;code&gt;cloneable&lt;/code&gt;接口的对象即使用了原型模式。而JavaScript更是&lt;a href=&#34;https://shenlvmeng.github.io/blog/2017/12/13/you-dont-know-js-part1/#%E5%8E%9F%E5%9E%8B%E7%BB%A7%E6%89%BF&#34;&gt;天生使用原型模式&lt;/a&gt;实现对象的继承和拓展。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;public &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;PrototypeClass&lt;/span&gt; implements &lt;span class=&#34;title class_&#34;&gt;Cloneable&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  @&lt;span class=&#34;title class_&#34;&gt;Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  public &lt;span class=&#34;title class_&#34;&gt;PrototypeClass&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;clone&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;PrototypeClass&lt;/span&gt; p = &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      p = (&lt;span class=&#34;title class_&#34;&gt;PrototypeClass&lt;/span&gt;)&lt;span class=&#34;variable language_&#34;&gt;super&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;clone&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// 其他操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;CloneNotSupportedException&lt;/span&gt; e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; p;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;它的优势在于更加轻量级，避免了构造函数的约束。问题在于，第一会跳过构造函数（这个JavaScript没有），第二是深浅拷贝的问题，第三在Java中，clone带有final成员的类会抛出异常。&lt;/p&gt;
&lt;h3 id=&#34;中介者模式&#34;&gt;&lt;a href=&#34;#中介者模式&#34; class=&#34;headerlink&#34; title=&#34;中介者模式&#34;&gt;&lt;/a&gt;中介者模式&lt;/h3&gt;&lt;p&gt;中介者模式主要用在多个对象那个间有比较复杂的交互场景下，用一个中介对象封装对象间的一系列交互，中介往往与各对象都有交互，从而使其耦合松散，符合迪米特法则。从类图上看，它把原先的蛛网状结构简化为了星型结构。&lt;/p&gt;
&lt;p&gt;它的优点是减少了类间依赖，缺点是有些时候中介者会膨胀的很大。使用场景上，在有协调概念出现的场景都有它的发挥空间：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;机场调度中心&lt;/li&gt;
&lt;li&gt;MVC框架中的Controller&lt;/li&gt;
&lt;li&gt;媒体网关，中介服务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为应用场景广泛，这里不举样例。&lt;/p&gt;
&lt;h3 id=&#34;命令模式&#34;&gt;&lt;a href=&#34;#命令模式&#34; class=&#34;headerlink&#34; title=&#34;命令模式&#34;&gt;&lt;/a&gt;命令模式&lt;/h3&gt;&lt;p&gt;命令模式即将一个用对象组织每一个请求，从而允许使用请求完成一系列操作，同时还可以对请求排队或记录日志或&lt;strong&gt;撤销以及恢复&lt;/strong&gt;。模式主要包括三个角色：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;接受者&lt;/strong&gt;，完成请求内操作的角色&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;命令&lt;/strong&gt;，封装好的系列操作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;调用者&lt;/strong&gt;，接受、执行命令的角色&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这种设计模式在存在上面三种角色的场景很适用，易于封装常用的命令，且很容易拓展，当命令间共同点较多时，还可以结合模板方法模式进行改进。&lt;/p&gt;
&lt;p&gt;例子如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Receiver&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 定义所有接受者必须完成的业务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;work&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Receiver1&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Receiver&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;work&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 差异化业务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;otherWork1&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Receiver2&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Receiver&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;work&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 差异化业务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;otherWork2&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Command&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Command1&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Command&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 对特定接受者命令&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; Receiver receiver;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;Command1&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Receiver _receiver)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.receiver = _receiver;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.receiver.work();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Command2&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Command&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 对特定接受者命令&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; Receiver receiver;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;Command2&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Receiver _receiver)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.receiver = _receiver;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.receiver.work();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 调用者&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Invoker&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; Command command;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;setCommand&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Command _command)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.command = _command;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;react&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.command.exec();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;责任链模式&#34;&gt;&lt;a href=&#34;#责任链模式&#34; class=&#34;headerlink&#34; title=&#34;责任链模式&#34;&gt;&lt;/a&gt;责任链模式&lt;/h3&gt;&lt;p&gt;责任链模式重点在“链”，将有机会处理请求的所有对象组成链，沿着这条链传递请求直到有对象处理它为止。它和Express和Redux中的&lt;strong&gt;中间件&lt;/strong&gt;的概念有相似之处，区别在于责任链上一般只会有一个或部分对象处理请求。它替换了场景代码中的大堆&lt;code&gt;if else&lt;/code&gt;与&lt;code&gt;switch&lt;/code&gt;语句。&lt;/p&gt;
&lt;p&gt;一个狭义的抽象处理者像下面这样。使用模板方法模式，将抽象的业务逻辑外的处理流程实现在抽象类，细节的业务逻辑放在子类里完成。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Handler&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 下一个处理者&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; Handler next;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 处理逻辑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; Response &lt;span class=&#34;title function_&#34;&gt;handle&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Request req)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;Response&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.getLevel().equals(req.getLevel())) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// 只处理属于自己的level&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      res = &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.exec(req);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// 如果有下一个处理者，交给它&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.next != &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        res = &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.next.handle(req);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 自行处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 设置下一个处理者&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;setNext&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Handler _handler)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.next = _handler;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 处理者有自己的处理级别&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; Level &lt;span class=&#34;title function_&#34;&gt;getLevel&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 处理者有自己的处理逻辑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; Response &lt;span class=&#34;title function_&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Request req)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 子类示例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; classHandler1 &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Handler&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 自己的处理逻辑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; Response &lt;span class=&#34;title function_&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Request req)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 自己的处理级别&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; Level &lt;span class=&#34;title function_&#34;&gt;getHandlerLevel&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Level&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 定义一个请求和处理等级&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Request&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 获取请求等级&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Level &lt;span class=&#34;title function_&#34;&gt;getRequestLevel&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Response&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 定义返回的数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;它的优点在解耦了请求与处理者，使系统更加灵活。问题在责任链比较长时，遍历整个责任链会带来性能问题。Express中类似的中间件则不会，因为处理后可以决定是否执行&lt;code&gt;next()&lt;/code&gt;，跳到下一个中间件。&lt;/p&gt;
&lt;p&gt;上面Java的实现通过&lt;code&gt;next&lt;/code&gt;属性连接所有的处理者（类似链表），在JavaScript的工程实现上，一般在上层又有一层封装，用数组保存所有处理者，再建立之间的连接。这种动态的连接支持动态增删处理者，甚至改变他们的处理顺序。&lt;/p&gt;
&lt;h3 id=&#34;装饰模式&#34;&gt;&lt;a href=&#34;#装饰模式&#34; class=&#34;headerlink&#34; title=&#34;装饰模式&#34;&gt;&lt;/a&gt;装饰模式&lt;/h3&gt;&lt;p&gt;装饰模式也是一种比较常见的模式，它可以动态地为一个对象增加一些额外的功能，使用装饰器类返回对象比定义子类继承要来得更加灵活。在设计上，有下面几个角色：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;抽象构件，即被修饰的对象抽象&lt;/li&gt;
&lt;li&gt;具体构件，被修饰的客体&lt;/li&gt;
&lt;li&gt;装饰器，一般是一个抽象类，将具体装饰器的共性抽出来，&lt;strong&gt;其必有一个private属性指向原始的抽象构件&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;具体装饰器，装饰具体构件的原有方法，一般来说需要有所有与具体构件public方法同名的方法，&lt;strong&gt;且在方法内会使用到而非单纯替换原同名方法&lt;/strong&gt;（类似滚雪球的过程）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;它的使用类似下面：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 场景类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Scene&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;Component&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Component&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 装饰&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    c = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Decorator1&lt;/span&gt;(c);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 再次装饰&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    c = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Decorator2&lt;/span&gt;(c);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 执行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    c.exec();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;JavaScript中的&lt;code&gt;Object.create()&lt;/code&gt;和&lt;code&gt;Object.assign()&lt;/code&gt;和装饰模式有几分相似。&lt;/p&gt;
&lt;p&gt;它的优势在于装饰类间不相互耦合，且装饰次序可以灵活修改，可以很好地重构、替换继承关系。劣势在于包装层次过多时，不利于调试时发现错误。装饰模式一般用于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;动态增强一个类、对象的功能&lt;/li&gt;
&lt;li&gt;批量为一批对象或类改装或增加功能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总之就是使用继承总感觉小题大做的场合下（OOP语言中）。JS下扩展功能要容易很多。&lt;/p&gt;
&lt;h3 id=&#34;策略模式&#34;&gt;&lt;a href=&#34;#策略模式&#34; class=&#34;headerlink&#34; title=&#34;策略模式&#34;&gt;&lt;/a&gt;策略模式&lt;/h3&gt;&lt;p&gt;策略模式意为定义一组算法，将每个算法单独封装为可以相互替换的模块。在使用时，有三个主要角色：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;策略模块，被封装好的算法策略，屏蔽了高层逻辑对策略的直接访问（&lt;strong&gt;高内聚&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;抽象策略，抽出策略共性的接口，如下面的&lt;/li&gt;
&lt;li&gt;具体策略，具体的算法策略，包含具体的算法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在算法间可以自由切换、最好屏蔽算法细节时常用，比如Web编程中常见的&lt;strong&gt;表格验证&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; strategy = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;notEmpty&lt;/span&gt;: &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;val&lt;/span&gt; =&amp;gt;&lt;/span&gt; val.&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt; &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;name&lt;/span&gt;: &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;val&lt;/span&gt; =&amp;gt;&lt;/span&gt; val.&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt; &amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &amp;amp;&amp;amp; val.&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt; &amp;lt; &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;age&lt;/span&gt;: &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;val&lt;/span&gt; =&amp;gt;&lt;/span&gt; +val &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;password&lt;/span&gt;: &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;val&lt;/span&gt; =&amp;gt;&lt;/span&gt; val.&lt;span class=&#34;title function_&#34;&gt;match&lt;/span&gt;(&lt;span class=&#34;regexp&#34;&gt;/\d+&amp;#123;6,&amp;#125;/g&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; validator = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;rules&lt;/span&gt;: strategy,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;verify&lt;/span&gt;: &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;rule, val&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;rules&lt;/span&gt;[rule](val)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;formValidate&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;formData&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &amp;#123; name, age, password, introduction &amp;#125; = formData;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; validator.&lt;span class=&#34;title function_&#34;&gt;verify&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;name&amp;#x27;&lt;/span&gt;, name) &amp;amp;&amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      validator.&lt;span class=&#34;title function_&#34;&gt;verify&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;age&amp;#x27;&lt;/span&gt;, age) &amp;amp;&amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      validator.&lt;span class=&#34;title function_&#34;&gt;verify&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;password&amp;#x27;&lt;/span&gt;, password) &amp;amp;&amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      validator.&lt;span class=&#34;title function_&#34;&gt;verify&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;notEmpty&amp;#x27;&lt;/span&gt;, introduction);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;策略模式的优势在扩展性良好，同时避免了&lt;code&gt;if else&lt;/code&gt;以及&lt;code&gt;switch&lt;/code&gt;语句。它的问题也很明显，策略类增多时，会不好维护，同时所有策略类都需要对外暴露。当策略类数目膨胀时需要考虑到这些问题。同时，现在在哪些时机如何组合策略并没有严格定义，实际实现时，会参考建造者模式里一样，定义一个&lt;strong&gt;导演类&lt;/strong&gt;，把常用的组合方式定义出来。减少策略类的暴露。&lt;/p&gt;
&lt;h3 id=&#34;适配器模式&#34;&gt;&lt;a href=&#34;#适配器模式&#34; class=&#34;headerlink&#34; title=&#34;适配器模式&#34;&gt;&lt;/a&gt;适配器模式&lt;/h3&gt;&lt;p&gt;适配器模式即，把一个类的接口变成客户端期待的另一个接口，从而使原先不匹配的两个类能够一起工作。简单点说，就是加了一个中间层做翻译工作。这种模式下有三种角色：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;目标角色，即期望接口&lt;/li&gt;
&lt;li&gt;源角色，即原始接口&lt;/li&gt;
&lt;li&gt;适配器角色，即转换类&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在实现上，通常使用一个同时继承两个类的类作为中转。因为对象很轻量级，JS中就更容易实现了。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Target&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Target1&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Target&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 目标逻辑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Adaptee&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 原有逻辑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Adapter&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Adaptee&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Target&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;super&lt;/span&gt;.foo();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;它的优点在可以将两个不相关的类在一起运行，提高了类的复用程度，它通常用来救火，完成拓展。由于实际工程中，业务变更较常出现，适配器模式也很常用。&lt;/p&gt;
&lt;h4 id=&#34;拓展-1&#34;&gt;&lt;a href=&#34;#拓展-1&#34; class=&#34;headerlink&#34; title=&#34;拓展&#34;&gt;&lt;/a&gt;拓展&lt;/h4&gt;&lt;p&gt;如需要多适配一的场景，此时无法多继承（Java），在适配类中引用多个类即可。&lt;/p&gt;
&lt;h3 id=&#34;迭代器模式&#34;&gt;&lt;a href=&#34;#迭代器模式&#34; class=&#34;headerlink&#34; title=&#34;迭代器模式&#34;&gt;&lt;/a&gt;迭代器模式&lt;/h3&gt;&lt;p&gt;迭代器模式，顾名思义是提供一种方法按顺序访问容器中的每个元素，而&lt;strong&gt;无需暴露容器的细节&lt;/strong&gt;。在实现时，通常要自己实现一个迭代器。Java中通过拓展&lt;code&gt;java.util.Iterator&lt;/code&gt;实现，JavaScript中，则通过封装数组实现。实现时，要考虑下面几个方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;判断是否到达尾部&lt;/li&gt;
&lt;li&gt;返回下一个元素&lt;/li&gt;
&lt;li&gt;删除当前元素&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;像下面这样&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 迭代器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Iterator&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Object &lt;span class=&#34;title function_&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;hasNext&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;remove&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 容器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Demo&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Object o)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;remove&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Object o)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Iterator &lt;span class=&#34;title function_&#34;&gt;iterator&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;现在所有高级语言基本都有这个接口或基础实现。这个模式已经很少用到。&lt;/p&gt;
&lt;h3 id=&#34;组合模式&#34;&gt;&lt;a href=&#34;#组合模式&#34; class=&#34;headerlink&#34; title=&#34;组合模式&#34;&gt;&lt;/a&gt;组合模式&lt;/h3&gt;&lt;p&gt;组合模式用在表示&lt;strong&gt;树状结构的数据&lt;/strong&gt;中，使用户对单个对象和组合对象使用具有一致性。组合模式下有三种角色：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Component，节点抽象角色，参与组合对象的共有方法和属性&lt;/li&gt;
&lt;li&gt;Leaf，叶子对象，遍历的最小单位&lt;/li&gt;
&lt;li&gt;Composite，树枝节点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用JavaScript表示，就像下面这样。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; node = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;commonMethod&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; branchNode = &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;create&lt;/span&gt;(node);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; leafNode = &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;create&lt;/span&gt;(node);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;branchNode = &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;create&lt;/span&gt;(branch, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;children&lt;/span&gt;: [],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;add&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;node&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    children.&lt;span class=&#34;title function_&#34;&gt;push&lt;/span&gt;(node);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;remove&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;index&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    children.&lt;span class=&#34;title function_&#34;&gt;splice&lt;/span&gt;(index,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    children.&lt;span class=&#34;title function_&#34;&gt;forEach&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;child&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123; &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(child); &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;leafNode = &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;create&lt;/span&gt;(leafNode, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// ...重写node的同名方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;组合模式在表示整合局部的关系时很有用，但是由于树枝节点和叶子节点的使用方式不同，在使用两种节点时，需要直接调用接口的实现类，这一点违背了依赖导致原则（面向接口编程）。使用上分为透明模式和安全模式，后者就像上面一样，在实现类上区分开树枝和叶子节点，透明模式下，所有的方法均抽象到抽象类中实现，而在叶子节点调用不合法方法时抛出异常。&lt;/p&gt;
&lt;p&gt;综上来看，组合模式即使用用数据结构描述一颗多叉树。&lt;/p&gt;
&lt;h3 id=&#34;观察者模式&#34;&gt;&lt;a href=&#34;#观察者模式&#34; class=&#34;headerlink&#34; title=&#34;观察者模式&#34;&gt;&lt;/a&gt;观察者模式&lt;/h3&gt;&lt;p&gt;观察者模式，也叫发布订阅模式，可以说是前端最熟悉也是最常见的一种设计模式了。小到页面事件监听，大到Vue的设计原理都能看到观察者模式的影子。它的内涵在将信息流从原来的&lt;strong&gt;pull变成push&lt;/strong&gt;。从而不需要使用&lt;code&gt;while&lt;/code&gt;，&lt;code&gt;setInterval&lt;/code&gt;这种很消耗资源的方式。代价是，需要硬编码到被监听者中，在状态改变时，push信息到监听者那里。通常实现时，这个过程可以抽象到很底层完成，如Vue使用&lt;code&gt;Object.defineProperty&lt;/code&gt;，并不影响整体实现。另外，为了实现多对多的监听，往往需要在被监听者和监听者之间增加spy（或者叫probe）这样的角色进行中转和广播通知。&lt;/p&gt;
&lt;p&gt;这时候可以定义&lt;code&gt;Observable&lt;/code&gt;接口，当然了，它需要可以增删监听者和在发生事件后提醒监听者。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Observer o)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Observer o)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;notify&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String text)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;IFoo&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;work&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Observer&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String text)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Victim&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Observable&lt;/span&gt;, IFoo &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; ArrayList&amp;lt;Observer&amp;gt; oList = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;Observer&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Observer o)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.oList.add(o);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Observer o)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.oList.remove(o);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;notify&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String text)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (Observer o: oList) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      o.update(text);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;work&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.notify(&lt;span class=&#34;string&#34;&gt;&amp;quot;Working...&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.notify(&lt;span class=&#34;string&#34;&gt;&amp;quot;Sleeping...&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;一个简单的JavaScript实现如下：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;EventUtil&lt;/span&gt; = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 全局事件管理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; events = &amp;#123;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 注册事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    on = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;type, handler&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (events[type]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        events[type].&lt;span class=&#34;title function_&#34;&gt;push&lt;/span&gt;(handler);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        events[type] = [handler];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 触发事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    emit = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;type&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!events[type]) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, len = events[type].&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt;; i &amp;lt; len; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        events[type][i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;观察者模式的优势在于在两个对象有&lt;strong&gt;频繁信息交互或希望监听特定时机&lt;/strong&gt;时很有用，当信息很多时，可以考虑增加中间层，设计消息队列处理。Java本身也提供&lt;code&gt;java.util.Observer&lt;/code&gt;和&lt;code&gt;java.util.Observable&lt;/code&gt;用来实现这种模式。&lt;/p&gt;
&lt;p&gt;建立在观察者模式的基础上，有响应式编程这样新的编程范式出现，&lt;a href=&#34;http://reactivex.io/&#34;&gt;ReactiveX&lt;/a&gt;就是在这种范式基础上推出的多语言框架。JavaScript版本的叫做&lt;a href=&#34;http://reactivex.io/rxjs/manual/overview.html&#34;&gt;RxJS&lt;/a&gt;，相信看完这个简介对你会非常有帮助。&lt;/p&gt;
&lt;h3 id=&#34;门面模式&#34;&gt;&lt;a href=&#34;#门面模式&#34; class=&#34;headerlink&#34; title=&#34;门面模式&#34;&gt;&lt;/a&gt;门面模式&lt;/h3&gt;&lt;p&gt;门面模式又叫外观模式，它要求所有子系统与外部通信时必须使用统一的对象进行，提供高层的接口，尽量掩盖不必要的业务细节，使得子系统更易用。因为实现起来重点在于统一通信数据格式和封装业务细节。这种模式也非常常用。比如在通常的前后端协调时，后端回传前端请求的数据通常都是统一的格式，避免错误同时减少前端工作量。比如下面这样。同样，有时后端也会要求前端在请求时使用统一的数据格式（不常见）。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; successRet = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 错误码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;code&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 返回数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;data&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;userInfo&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;0000001&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; errorRet = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;code&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;0002&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 错误原因&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;message&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;请求过于频繁！&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;门面模式可以极大地提升封装性，增加系统的高内聚，同时也减少了系统内外的耦合，提高了灵活度和安全性。劣势在于对扩展不利，所有的改动几乎都要对应到门面（Facade）类的硬编码。因此门面模式的使用场景是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为一个复杂的系统或模块提供对外接口&lt;/li&gt;
&lt;li&gt;子系统间相对独立&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通常情况下，门面类只负责聚合，不参与具体的子系统逻辑。另外，在系统庞大时，很可能有不止一个门面入口。后端接口微服务化的趋势下，在系统内，拆分原来庞大的接口，同时面向前端不同设备，设计不同的服务汇合接入点正是门面模式的体现。&lt;/p&gt;
&lt;h3 id=&#34;备忘录模式&#34;&gt;&lt;a href=&#34;#备忘录模式&#34; class=&#34;headerlink&#34; title=&#34;备忘录模式&#34;&gt;&lt;/a&gt;备忘录模式&lt;/h3&gt;&lt;p&gt;备忘录模式即，在不破坏封装性的前提下，捕获一个对象的内部状态，在对象外保存，并在合适的时候可以将对象恢复到保存的状态。这个概念很简单，涉及到三个角色：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发起人，需要记录状态的对象&lt;/li&gt;
&lt;li&gt;备忘录， 用来储存状态&lt;/li&gt;
&lt;li&gt;备忘录管理者，对备忘录进行管理，保存和恢复&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Memorial&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;state&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;memorize&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Memento&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;state&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;restore&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;memento&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;state&lt;/span&gt; = memento.&lt;span class=&#34;property&#34;&gt;state&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Memento&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;state&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;state&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;state&lt;/span&gt; = state;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Manager&lt;/span&gt; = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;memento&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; m = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Memorial&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Manager&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;memento&lt;/span&gt; = &lt;span class=&#34;title class_&#34;&gt;Memorial&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;memorize&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Memorize&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;restore&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;Manager&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;memento&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;它的优点很明显，可以保存和回复状态，支持回滚事务。但在使用时，通常是结合了别的设计模式的变种。&lt;/p&gt;
&lt;h4 id=&#34;拓展-2&#34;&gt;&lt;a href=&#34;#拓展-2&#34; class=&#34;headerlink&#34; title=&#34;拓展&#34;&gt;&lt;/a&gt;拓展&lt;/h4&gt;&lt;p&gt;结合原型模式，可以直接用clone对象的方式保存状态。这么做问题是当状态对象较大时，会有时间和空间的开销，优势是可以直接将状态存储在类内部，避免了其余类的定义。&lt;/p&gt;
&lt;p&gt;在多状态存储上，Java可以借用BeanUtil工具类（书中所说），JavaScript中就灵活很多了（还是因为轻量级的对象）。同样的多备忘录模式就不再赘述。另外，需要保证备忘录的保密性时，封装成业务类的内置类，设置权限为&lt;code&gt;private&lt;/code&gt;即可，JS中同理。&lt;/p&gt;
&lt;h3 id=&#34;访问者模式&#34;&gt;&lt;a href=&#34;#访问者模式&#34; class=&#34;headerlink&#34; title=&#34;访问者模式&#34;&gt;&lt;/a&gt;访问者模式&lt;/h3&gt;&lt;p&gt;访问者模式指，封装作用在数据结构上各元素的操作，它可以在不改变数据的前提下定义新的对于元素的操作。实现原理上，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;被访问类新增访问方法（如&lt;code&gt;accept&lt;/code&gt;），注入访问类，同时将自己交给访问类&lt;/li&gt;
&lt;li&gt;访问类根据得到的被访问类对象，执行想要的操作&lt;/li&gt;
&lt;li&gt;场景类中通过调用访问方法访问被访问类&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Element&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;accept&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(IVisitor v)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Element&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 注入访问类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;accept&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(IVisitor v)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    visitor.visit(&lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;IVisitor&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 通过重载对不同元素定义不同的访问方式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;visit&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Element e)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;visit&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(OtherElement e)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;当然，为了保证依赖倒置原则，被访问类和访问类都可以再抽象出抽象类和接口。另外，访问者模式通常和组合模式、迭代器模式一同出现。访问者模式的优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;符合单一职责原则&lt;/li&gt;
&lt;li&gt;拓展性优秀&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点在于，被访问者要暴露细节给访问者，通常会增加很多约定，使代码不稳定。另外重载中依赖的是具体元素违背了依赖倒置原则。&lt;/p&gt;
&lt;p&gt;访问器模式的应用场景&lt;strong&gt;通常是使用迭代器模式已经不能满足的场合&lt;/strong&gt;。比如对不同的元素有不同的遍历操作，甚至涉及到元素内部的逻辑。使用访问器模式可以封装和掩盖这种差异性。&lt;/p&gt;
&lt;h4 id=&#34;拓展-3&#34;&gt;&lt;a href=&#34;#拓展-3&#34; class=&#34;headerlink&#34; title=&#34;拓展&#34;&gt;&lt;/a&gt;拓展&lt;/h4&gt;&lt;p&gt;在访问器模式和迭代器模式一同出现时，可以增加统计功能，在每次访问元素时收集统计信息。在往深处拓展，甚至可以抽象访问器为接口，从而拓展不同类型的访问器，如用来展示数据和用来统计数据的。&lt;/p&gt;
&lt;h3 id=&#34;状态模式&#34;&gt;&lt;a href=&#34;#状态模式&#34; class=&#34;headerlink&#34; title=&#34;状态模式&#34;&gt;&lt;/a&gt;状态模式&lt;/h3&gt;&lt;p&gt;这种模式就很好理解了。即将客体抽象成一个&lt;strong&gt;有限状态机&lt;/strong&gt;，客体有一个初始状态，在某特定时机下会跃迁到另一状态，且状态间的跳转是有规律可循的。这种模式在编程中非常常见，自然语言分析、所有可以用马尔科夫过程描述的事物变化都可以抽象成状态模式实现。在实现时，主要要完成三方面工作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义&lt;strong&gt;所有状态&lt;/strong&gt;，根据状态的薄厚程度，用常量或类定义&lt;/li&gt;
&lt;li&gt;定义修改状态的行为，在方法内往往要根据上一时刻状态做判断，这些行为定义在状态内部&lt;/li&gt;
&lt;li&gt;在上下文中调用这些行为&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在实现时，为了避免&lt;code&gt;switch&lt;/code&gt;语句，会使用一个上下文类，托管当前状态，在状态切换时，先调用状态类中的行为，再通知上下文类更换托管的状态。两者相互注入。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;State&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 注入上下文对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; Context c;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 设置上下文&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;setContext&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Context c)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.context = c;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 行为&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;action1&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;action2&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;State1&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;action1&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;action2&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;super&lt;/span&gt;.context.setState(Context.STATE2);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 切换到state2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;super&lt;/span&gt;.context.handleAction2();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Context&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 注入所有状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;state&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;STATE1&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;State1&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;state&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;STATE2&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;State2&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; State CurrState;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; State &lt;span class=&#34;title function_&#34;&gt;getState&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.CurrState;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 设置当前状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;setState&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(State currState)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.currState = currState;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 切换当前状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.CurrState.setContext(&lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 行为委托&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;handleAction1&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.CurrState.action1();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;handleAction2&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.CurrState.action2();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;增加了上下文类Context后，避免了大量的&lt;code&gt;switch&lt;/code&gt;语句，问题是，状态较多时，定义的类也会较多。状态模式在工作流开发中很常用。&lt;/p&gt;
&lt;h3 id=&#34;解释器模式&#34;&gt;&lt;a href=&#34;#解释器模式&#34; class=&#34;headerlink&#34; title=&#34;解释器模式&#34;&gt;&lt;/a&gt;解释器模式&lt;/h3&gt;&lt;p&gt;解释器模式顾名思义，即定义一个解释器，去按文法解释一种语言中的句子。当然这个语言以科学运算和编程语句居多。它的应用场景比较特殊，即需要语句解析介入的场景，比如自然语言分析、或者真的编写一个语言的解释器。通常开发解释器工程量和难度都较大，且会遇到效率问题。一般应用较少。&lt;/p&gt;
&lt;p&gt;在这个模式下。主要有下面这些角色；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;抽象解释器，用来派生具体的表达式解释器&lt;/li&gt;
&lt;li&gt;终结符解释器，即不需要解释的，字面意义的符号，比如&lt;code&gt;1&lt;/code&gt;或&lt;code&gt;a&lt;/code&gt;等&lt;/li&gt;
&lt;li&gt;非终结符解释器，和两边表达式相关联的符号解释器，比如&lt;code&gt;+&lt;/code&gt;或&lt;code&gt;*&lt;/code&gt;等&lt;/li&gt;
&lt;li&gt;上下文角色&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;享元模式&#34;&gt;&lt;a href=&#34;#享元模式&#34; class=&#34;headerlink&#34; title=&#34;享元模式&#34;&gt;&lt;/a&gt;享元模式&lt;/h3&gt;&lt;p&gt;享元模式是一种重要的池技术，原理上指使用共享对象支持大量的细粒度的对象。我们可以将这些对象内的状态拆分成可共享状态和不可共享状态。对象往往可以按可共享状态拆分为细粒度较大的若干部分，放在共享对象池中，再贴上自己的不可共享状态。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 享元&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;SharedObject&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; String intrinsic;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 共享的状态作为享元的key&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; String Extrinsic;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 共享的状态需要可以设置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;SharedObject&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String E)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.Extrinsic = E;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 业务方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 不可共享状态的getter/setter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;title function_&#34;&gt;getIntrinsic&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; intrinsic;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;setIntrinsic&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String intrinsic)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.intrinsic = intrinsic;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 享元工厂&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;SharedObjectFactory&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 共享池&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; HashMap&amp;lt;String, SharedObject&amp;gt; pool = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;HashMap&lt;/span&gt;&amp;lt;String, SharedObject&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 工厂方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; SharedObject &lt;span class=&#34;title function_&#34;&gt;getSharedObject&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String Extrinsic)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;SharedObject&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;o&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 从池中寻找&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (pool.containsKey(Extrinsic)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      o = pool.get(Extrinsic);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      o = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;SharedObject1&lt;/span&gt;(Extrinsic);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// 放到池中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      pool.put(Extrinsic, o);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; o;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在共享对象池中，建议使用可共享状态的简单组合构成池内元素的key值（最好是基本类型），一方面减少编程负担，另一方面还可以提高工作效率。享元模式主要使用在下面场景下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统中存在大量相似对象&lt;/li&gt;
&lt;li&gt;对象具备相近的外部状态和与环境无关的内部状态&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;桥梁模式&#34;&gt;&lt;a href=&#34;#桥梁模式&#34; class=&#34;headerlink&#34; title=&#34;桥梁模式&#34;&gt;&lt;/a&gt;桥梁模式&lt;/h3&gt;&lt;p&gt;桥梁模式又叫桥接模式，是比较轻量级的一种设计模式，意为将抽象和实现解耦，使两者可以独立变化。角色上，桥梁模式分为主体和客体，在主体内注入客体的接口&amp;#x2F;抽象类，并在主体的方法内使用，提供setter或构造函数方法。这样继承自主体的类就可以根据传入setter&amp;#x2F;构造函数的客体实现类的不同得到不同的实现结果。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 基本方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Object1&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 自己的逻辑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Object2&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 自己的逻辑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Subject&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 必须有一个注入的客体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; Object o;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 必须可以通过构造函数/setter注入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;Subject&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Object o)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.o = o;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 获得客体行为&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.o.foo();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 获得客体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Object &lt;span class=&#34;title function_&#34;&gt;getObject&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; o;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Subject1&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Subject&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 覆写构造函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;Subject1&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Object o)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;super&lt;/span&gt;(o);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 自身业务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;super&lt;/span&gt;.bar();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ... 其余业务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Scene&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;o&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Object1&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;Subject&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Subject1&lt;/span&gt;(o);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    s.bar();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;桥梁模式的扩展能力很强，它是&lt;strong&gt;对普通的继承的一种灵活的补充&lt;/strong&gt;，避免了父类对子类的强侵入，可以将父类可能会变化的部分抽出去，通过注入的方式引入，方便子类随时更换。&lt;/p&gt;
&lt;h2 id=&#34;设计模式的比较&#34;&gt;&lt;a href=&#34;#设计模式的比较&#34; class=&#34;headerlink&#34; title=&#34;设计模式的比较&#34;&gt;&lt;/a&gt;设计模式的比较&lt;/h2&gt;&lt;h3 id=&#34;创建类&#34;&gt;&lt;a href=&#34;#创建类&#34; class=&#34;headerlink&#34; title=&#34;创建类&#34;&gt;&lt;/a&gt;创建类&lt;/h3&gt;&lt;p&gt;和创建类相关的模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;工厂模式&lt;/li&gt;
&lt;li&gt;抽象工厂模式&lt;/li&gt;
&lt;li&gt;建造者模式&lt;/li&gt;
&lt;li&gt;单例模式&lt;/li&gt;
&lt;li&gt;原型模式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;后两者容易理解。重点对比上面三个模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;工厂模式注重&lt;strong&gt;整体的构建过程&lt;/strong&gt;，成产出的对象具有很强的&lt;strong&gt;相似性&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;建造者模式注重&lt;strong&gt;建造的过程&lt;/strong&gt;，希望在每一步最好都可定制，根据步骤的不同生产出差异化的对象，&lt;strong&gt;通常伴生导演类&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;抽象工厂模式通常和&lt;strong&gt;产品族&lt;/strong&gt;关系密切，尤其是一组事物有很明显的两个或多个划分方法时使用，其余等同工厂模式&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;结构类&#34;&gt;&lt;a href=&#34;#结构类&#34; class=&#34;headerlink&#34; title=&#34;结构类&#34;&gt;&lt;/a&gt;结构类&lt;/h3&gt;&lt;p&gt;结构类指调整或组合类产生更大结构来适应更高层次逻辑需求，大多通过增加中间层解决问题，有下面的相关模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;适配器模式&lt;/li&gt;
&lt;li&gt;桥梁模式&lt;/li&gt;
&lt;li&gt;组合模式&lt;/li&gt;
&lt;li&gt;装饰模式&lt;/li&gt;
&lt;li&gt;门面模式&lt;/li&gt;
&lt;li&gt;享元模式&lt;/li&gt;
&lt;li&gt;代理模式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中简单明了的有桥梁模式、组合模式、门面模式、享元模式，下面对比下其他的几种模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代理模式即在原对象和用户间增加了一个中间层，在不改变原接口的情况下，&lt;strong&gt;增加准入和限定操作&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;装饰模式是代理模式的加强，装饰类并不起中间层的作用，不做准入判断，它&lt;strong&gt;单纯地在原接口上增强或削弱功能&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;适配器模式和它们差别较大，它也起包装作用，作用于两个不同的对象，重点在&lt;strong&gt;伪装和转换&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;行为类&#34;&gt;&lt;a href=&#34;#行为类&#34; class=&#34;headerlink&#34; title=&#34;行为类&#34;&gt;&lt;/a&gt;行为类&lt;/h3&gt;&lt;p&gt;这一批模式重点在修饰类的行为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;责任链模式&lt;/li&gt;
&lt;li&gt;命令模式&lt;/li&gt;
&lt;li&gt;解释器模式&lt;/li&gt;
&lt;li&gt;迭代器模式&lt;/li&gt;
&lt;li&gt;中介者模式&lt;/li&gt;
&lt;li&gt;备忘录模式&lt;/li&gt;
&lt;li&gt;观察者模式&lt;/li&gt;
&lt;li&gt;状态模式&lt;/li&gt;
&lt;li&gt;策略模式&lt;/li&gt;
&lt;li&gt;模板方法模式&lt;/li&gt;
&lt;li&gt;访问者模式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面比较一些类似的模式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;命令模式强调把&lt;strong&gt;动作解耦&lt;/strong&gt;，将其分为&lt;strong&gt;执行对象和执行行为&lt;/strong&gt;，在行为类内部注入执行对象，使用执行者操作命令&lt;/li&gt;
&lt;li&gt;策略模式强调包装&lt;strong&gt;对等的可替换的多个算法&lt;/strong&gt;，通常有一个上下文类，封装所有的算法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比如在表单验证时，策略模式会将所有的验证规则对等地定义出来，再由一个表单验证上下文对象包裹起来；命令模式下，首先要明确所有验证规则的接受者（Receiver），再定义所有的验证“命令”，最后由执行者（Invoker）操作命令完成工作，具体工作是在接受者那里完成的，命令只负责组织。&lt;/p&gt;
&lt;p&gt;关于策略模式和状态模式，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;策略模式没有状态的概念，虽然有上下文类&lt;code&gt;Context&lt;/code&gt;，但是切换的状态只是不同的算法而已&lt;/li&gt;
&lt;li&gt;状态模式重点关注状态，它同样有上下文类&lt;code&gt;Context&lt;/code&gt;，但&lt;strong&gt;相同的行为在不同的状态下产生的结果不同&lt;/strong&gt;。在实现上体现在，上下文类内保存了当前状态，虽然状态间都有相同方法，但实现不同。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;至于观察者模式和责任链模式，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;观察者模式重点在&lt;strong&gt;观察和被观察的关系&lt;/strong&gt;（想想事件监听），被观察者中需要注入监听者（Observable），再由监听者告知观察者（Observer），整条链是有回调的，链上传递的信息可以自由变化，即最后返回给用户数据的总是第一个被观察者&lt;/li&gt;
&lt;li&gt;责任链模式重点在&lt;strong&gt;事务链条化处理&lt;/strong&gt;的过程（想想中间件），每个处理者都必须通过&lt;code&gt;next&lt;/code&gt;属性明确指定下一个目标，整条链是责任链，链上角色相互平等，传递的信息一般不会改变结构，最终由最后一个角色返回结果&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;其他&#34;&gt;&lt;a href=&#34;#其他&#34; class=&#34;headerlink&#34; title=&#34;其他&#34;&gt;&lt;/a&gt;其他&lt;/h3&gt;&lt;p&gt;首先先来比较策略模式和桥梁模式。它俩的共同点在都有一个注入依赖关系。策略模式中算法封装被注入到上下文类&lt;code&gt;Context&lt;/code&gt;中，桥梁模式中差异化继承的部分被单独抽出再注入父类里。它们的区别主要在：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;策略模式着重于封装一系列不同的行为&lt;/li&gt;
&lt;li&gt;桥梁模式在不破坏封装的情况下将差异化的实现部分从抽象部分抽取出来，因此必然有抽象化角色和实现化角色&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;门面模式和中介者模式就比较好区分了，它们的应用场景有很大不同;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;门面模式用来掩盖下面复杂的子系统，提供统一的高层接口（“金玉其外”），它并不管下面的子系统间怎样耦合（“败絮其中”）&lt;/li&gt;
&lt;li&gt;中介者模式要用在同事对象间（通常至少3个）复杂交互时，化网状结构为星型结构，减少耦合&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后，代理模式、装饰模式、适配器模式（不严格）、桥梁模式、门面模式都可以总结为&lt;strong&gt;包装模式&lt;/strong&gt;，它们并没有为原来的类增加新的功能，只是增加了新的包装或插件。&lt;/p&gt;
&lt;h2 id=&#34;设计模式的组合&#34;&gt;&lt;a href=&#34;#设计模式的组合&#34; class=&#34;headerlink&#34; title=&#34;设计模式的组合&#34;&gt;&lt;/a&gt;设计模式的组合&lt;/h2&gt;&lt;h3 id=&#34;shell命令解释demo&#34;&gt;&lt;a href=&#34;#shell命令解释demo&#34; class=&#34;headerlink&#34; title=&#34;shell命令解释demo&#34;&gt;&lt;/a&gt;shell命令解释demo&lt;/h3&gt;&lt;p&gt;主要采用命令模式、责任链模式、模板方法模式。&lt;/p&gt;
&lt;h3 id=&#34;银行扣款demo&#34;&gt;&lt;a href=&#34;#银行扣款demo&#34; class=&#34;headerlink&#34; title=&#34;银行扣款demo&#34;&gt;&lt;/a&gt;银行扣款demo&lt;/h3&gt;&lt;p&gt;主要采用策略模式、工厂方法模式、门面模式&lt;/p&gt;
&lt;h3 id=&#34;产品消费事件demo&#34;&gt;&lt;a href=&#34;#产品消费事件demo&#34; class=&#34;headerlink&#34; title=&#34;产品消费事件demo&#34;&gt;&lt;/a&gt;产品消费事件demo&lt;/h3&gt;&lt;p&gt;产品创建时摄影工厂模式，保证产品和工厂的紧耦合，避免创建事件不触发的可能性&lt;/p&gt;
&lt;h2 id=&#34;新模式&#34;&gt;&lt;a href=&#34;#新模式&#34; class=&#34;headerlink&#34; title=&#34;新模式&#34;&gt;&lt;/a&gt;新模式&lt;/h2&gt;&lt;h3 id=&#34;MVC&#34;&gt;&lt;a href=&#34;#MVC&#34; class=&#34;headerlink&#34; title=&#34;MVC&#34;&gt;&lt;/a&gt;MVC&lt;/h3&gt;&lt;p&gt;MVC其实算不上一种新模式，但是从上世纪90年代起到现在实在是太流行了。它的目的是通过C（Controller）将模型M（Model）和视图V（View）分离开。书中具体在讲MVC在Java Web开发中的实现，这里从略。&lt;/p&gt;
&lt;h3 id=&#34;规格书模式&#34;&gt;&lt;a href=&#34;#规格书模式&#34; class=&#34;headerlink&#34; title=&#34;规格书模式&#34;&gt;&lt;/a&gt;规格书模式&lt;/h3&gt;&lt;p&gt;规格书模式多用在描述一个规范或条件的场合下，比如“性别男年龄大于20且位于北京”。通过定义抽象类以及&lt;code&gt;AND&lt;/code&gt;，&lt;code&gt;OR&lt;/code&gt;，&lt;code&gt;NOT&lt;/code&gt;等的组合，可以得到更复杂的规格书对象。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ISpec&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;isSatisfied&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Object o)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; ISpec &lt;span class=&#34;title function_&#34;&gt;and&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(ISpec s)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; ISpec &lt;span class=&#34;title function_&#34;&gt;or&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(ISpec s)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; ISpec &lt;span class=&#34;title function_&#34;&gt;not&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(ISpec s)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; Spec &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ISpec&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;isSatisfied&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Object o)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; ISpec &lt;span class=&#34;title function_&#34;&gt;and&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(ISpec s)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AndSpec&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;, spec);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; ISpec &lt;span class=&#34;title function_&#34;&gt;or&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(ISpec s)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; newOrSpec(&lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;, spec);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; ISpec &lt;span class=&#34;title function_&#34;&gt;not&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; notSpec(&lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AndSpec&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Spec&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; ISpec left;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; ISpec right;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;AndSpec&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(ISpec left, ISpec right)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.left = left;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.right = right;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;isSatisfied&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Object o)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; left.isSatisfied(o) &amp;amp;&amp;amp; right.isSatisfied(o);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;OrSpec&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Spec&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; ISpec left;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; ISpec right;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;OrSpec&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(ISpec left, ISpec right)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.left = left;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.right = right;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;isSatisfied&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Object o)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; left.isSatisfied(o) || right.isSatisfied(o);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;NotSpec&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Spec&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; ISpec spec;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;NotSpec&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(ISpec s)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.spec = s;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;isSatisfied&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Object o)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; !&lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.spec.isSatisfied(o);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;bizSpec&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Spec&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; Object obj;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;bizSpec&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Object o)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.obj = o;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;isSatisfied&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Object o)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 根据业务逻辑决定真值判断&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;规格模式应用场景比较局限，在LINQ（Language INtegrated Query，语言集成查询）中常见，用来构造WHERE子句。&lt;/p&gt;
&lt;h3 id=&#34;对象池模式&#34;&gt;&lt;a href=&#34;#对象池模式&#34; class=&#34;headerlink&#34; title=&#34;对象池模式&#34;&gt;&lt;/a&gt;对象池模式&lt;/h3&gt;&lt;p&gt;对象池模式和享元模式相似，都是循环使用对象，但是对象池模式是整个直接取出到池中，避免初始化和释放资源时的消耗。如连接池和线程池就是常见的例子。&lt;/p&gt;
&lt;h3 id=&#34;雇工模式&#34;&gt;&lt;a href=&#34;#雇工模式&#34; class=&#34;headerlink&#34; title=&#34;雇工模式&#34;&gt;&lt;/a&gt;雇工模式&lt;/h3&gt;&lt;p&gt;雇工模式是常见的“接口-实现”的倒转实现。比如，小学老师教小学学生，中学老师教中学学生，大学老师教大学学生。在实现时，我们先定义学习接口，再实现所有的学生类。再实现老师时，直接调用学生接口的学习方法就完成了教学的实现。雇工模式为一组类提供通用的功能，不需要类实现这些功能，而在客体上实现功能。它和命令模式有相似之处。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;IService&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;serving&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;IService&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;serving&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 服务完成&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Servant&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;service&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(IService s)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    s.serving();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;黑板模式&#34;&gt;&lt;a href=&#34;#黑板模式&#34; class=&#34;headerlink&#34; title=&#34;黑板模式&#34;&gt;&lt;/a&gt;黑板模式&lt;/h3&gt;&lt;p&gt;黑板模式是观察者模式的拓展，它允许消息有多个读写者，且同时进行。消息生产者通过“黑板”这个总线，将消息传递给对应的消息消费者。这可以是一种宏观的设计理念，使用数据库或者消息队列当做“黑板”都是可以的。&lt;/p&gt;
&lt;h3 id=&#34;空对象模式&#34;&gt;&lt;a href=&#34;#空对象模式&#34; class=&#34;headerlink&#34; title=&#34;空对象模式&#34;&gt;&lt;/a&gt;空对象模式&lt;/h3&gt;&lt;p&gt;空对象通过实现一个无意义的默认类避免程序出现null值。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;NullAnimal&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Animal&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; makeSound &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 什么都不写&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;–END–&lt;/em&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://shenlvmeng.github.com/blog/2017/12/15/you-dont-know-js-part2/</guid>
            <title>《You don&#39;t know JS》 下（类型文法&amp;异步&amp;ES6与未来）</title>
            <link>http://shenlvmeng.github.com/blog/2017/12/15/you-dont-know-js-part2/</link>
            <category>读书笔记</category>
            <category>JavaScript</category>
            <pubDate>Fri, 15 Dec 2017 20:59:38 +0800</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;原作：&lt;a href=&#34;https://github.com/getify/You-Dont-Know-JS&#34;&gt;You-Dont-Know-JS&lt;/a&gt;&lt;br&gt;本文的99.9%的内容都来自《You dont know JS》的&lt;a href=&#34;https://github.com/getify/You-Dont-Know-JS/tree/1ed-zh-CN&#34;&gt;电子中文版&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;传送门：&lt;a href=&#34;https://shenlvmeng.github.io/blog/2017/12/13/you-dont-know-js-part1/&#34;&gt;《You don’t know JS》 上（入门&amp;amp;作用域&amp;amp;对象）&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;类型和文法&#34;&gt;&lt;a href=&#34;#类型和文法&#34; class=&#34;headerlink&#34; title=&#34;类型和文法&#34;&gt;&lt;/a&gt;类型和文法&lt;/h2&gt;&lt;h3 id=&#34;内建类型&#34;&gt;&lt;a href=&#34;#内建类型&#34; class=&#34;headerlink&#34; title=&#34;内建类型&#34;&gt;&lt;/a&gt;内建类型&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;7种类型&lt;/li&gt;
&lt;li&gt;值才有类型，变量没有&lt;/li&gt;
&lt;li&gt;&lt;code&gt;undefined&lt;/code&gt; ≠ is not defined（undeclared）。&lt;code&gt;undefined&lt;/code&gt;表示定义却没有赋值的变量类型。然而&lt;code&gt;typeof&lt;/code&gt;一个未声明的变量也会返回&lt;code&gt;undefined&lt;/code&gt;，这是&lt;code&gt;typeof&lt;/code&gt;的安全机制，它给了我们更多空间检查变量是否可用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;值&#34;&gt;&lt;a href=&#34;#值&#34; class=&#34;headerlink&#34; title=&#34;值&#34;&gt;&lt;/a&gt;值&lt;/h3&gt;&lt;p&gt;由于JS里String的只读性，所有String的相关方法都是返回一个新字符串。&lt;/p&gt;
&lt;p&gt;使用二进制浮点数的最出名（臭名昭著）的副作用是（记住，这是对 所有 使用 IEEE 754 的语言都成立的 —— 不是许多人认为&amp;#x2F;假装 仅 在 JavaScript 中存在的问题）：&lt;code&gt;0.1 + 0.2 === 0.3 // false&lt;/code&gt;。不过可以用&lt;code&gt;Number.EPSILON&lt;/code&gt;做最小误差得到足够精确的近似结果。ES6下已经可以用&lt;code&gt;Number.isInteger()&lt;/code&gt;和&lt;code&gt;Number.isSafeInteger()&lt;/code&gt;检查数字是不是整数&amp;#x2F;安全整数。&lt;/p&gt;
&lt;h4 id=&#34;特殊值&#34;&gt;&lt;a href=&#34;#特殊值&#34; class=&#34;headerlink&#34; title=&#34;特殊值&#34;&gt;&lt;/a&gt;特殊值&lt;/h4&gt;&lt;p&gt;&lt;code&gt;undefined&lt;/code&gt;和&lt;code&gt;null&lt;/code&gt;是JS里比较特殊的两类值，它们既是类型又是唯一的值。更加不幸的是，在非strict模式下，&lt;code&gt;undefined&lt;/code&gt;还可以作为标识符，像下面这样：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;literal&#34;&gt;undefined&lt;/span&gt; = &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;另外，在特别需要&lt;code&gt;undefined&lt;/code&gt;时，&lt;code&gt;void&lt;/code&gt;操作符会变得很有用。&lt;/p&gt;
&lt;p&gt;Infinity &amp;#x2F; Infinity &amp;#x3D;&amp;#x3D; undefined。&lt;/p&gt;
&lt;p&gt;针对一些特殊的等价情况（NaN和-0），ES6使用&lt;code&gt;Object.is()&lt;/code&gt;判断其相等性。&lt;/p&gt;
&lt;h4 id=&#34;值与引用&#34;&gt;&lt;a href=&#34;#值与引用&#34; class=&#34;headerlink&#34; title=&#34;值与引用&#34;&gt;&lt;/a&gt;值与引用&lt;/h4&gt;&lt;p&gt;在JS中没有指针，只有引用，同时页没有语法上的提示可以控制值和引用的赋值&amp;#x2F;传递。取而代之的是，值的类型用来唯一控制值是通过值拷贝，还是引用拷贝来赋予（复合值）。引用指向的是值本身而不是变量，不能使用一个引用来改变另一个引用所指向的值。&lt;/p&gt;
&lt;p&gt;底层的基本标量值是不可变的（String和Boolean也一样）。比如一个Number对象持有一个基本标量值2，那么这个Number对象就永远不能再持有另一个值；你只能用一个不同的值创建一个全新的Number对象：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;x&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x = x + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x; &lt;span class=&#34;comment&#34;&gt;// 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; a = &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; b = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Number&lt;/span&gt;( a ); &lt;span class=&#34;comment&#34;&gt;// 或等价的 `Object(a)`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;( b );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;( b ); &lt;span class=&#34;comment&#34;&gt;// 2, 不是 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在其中&lt;code&gt;x = x + 1&lt;/code&gt;这一步，包装值内的x被取出+1后，赋值给x，将其从一个引用变成一个基本标量值3。&lt;/p&gt;
&lt;h3 id=&#34;类型转换&#34;&gt;&lt;a href=&#34;#类型转换&#34; class=&#34;headerlink&#34; title=&#34;类型转换&#34;&gt;&lt;/a&gt;类型转换&lt;/h3&gt;&lt;p&gt;对于最简单的值，JSON字符串化行为基本上和&lt;code&gt;toString()&lt;/code&gt;转换是相同的，在对String字符串化时，结果也会包含&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;，如&lt;code&gt;JSON.stringify(&amp;quot;11&amp;quot;) // &amp;quot;&amp;quot;11&amp;quot;&amp;quot;&lt;/code&gt;。另外，对于JSON不安全值（即不能移植到消费JSON的语言中），有下面的处理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;忽略&lt;code&gt;undefined&lt;/code&gt;，&lt;code&gt;function&lt;/code&gt;，&lt;code&gt;symbol&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;Array&lt;/code&gt;中遇到这种类型的值，会被替换为null（避免修改位置信息）&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;Object&lt;/code&gt;的属性中遇到时，属性会被简单的忽略掉&lt;/li&gt;
&lt;li&gt;带有循环引用时，&lt;code&gt;JSON.stringify()&lt;/code&gt;会报错&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，对于有&lt;code&gt;toJSON()&lt;/code&gt;方法的对象，JSON字符串化会优先使用该方法。&lt;code&gt;JSON.stringify()&lt;/code&gt;的第二个参数可以指定Array或Function说明可以编辑的对象属性。第三个参数是填充符，填充在各级开头，用来友好展示结果，最多取入参的前10个字符。&lt;/p&gt;
&lt;p&gt;在对象上使用&lt;code&gt;toNumber&lt;/code&gt;和&lt;code&gt;toString&lt;/code&gt;方法，首先会找到其原始类型（&lt;code&gt;toPrimitives()&lt;/code&gt;），即使用其&lt;code&gt;valueOf()&lt;/code&gt;或&lt;code&gt;toString()&lt;/code&gt;方法（也会在&lt;code&gt;[[prototype]]&lt;/code&gt;上寻找）。&lt;/p&gt;
&lt;h4 id=&#34;gt-Number&#34;&gt;&lt;a href=&#34;#gt-Number&#34; class=&#34;headerlink&#34; title=&#34;-&amp;gt; Number&#34;&gt;&lt;/a&gt;-&amp;gt; Number&lt;/h4&gt;&lt;p&gt;可以用&lt;code&gt;Date.now()&lt;/code&gt;代替&lt;code&gt;+new Date()&lt;/code&gt;获取更好的语义。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;~&lt;/code&gt;除了可以用来检查&lt;code&gt;-1&lt;/code&gt;这个特殊的值，还可以通过&lt;code&gt;~~&lt;/code&gt;对小数取整，因为执行位操作时会先将数字转为Int32类型。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;parseInt&lt;/code&gt;以及&lt;code&gt;parseFloat&lt;/code&gt;和&lt;code&gt;+&lt;/code&gt;或&lt;code&gt;Number()&lt;/code&gt;强制类型转换存在区别。&lt;/strong&gt;它们的作用是，从字符串中解析出一个&lt;code&gt;number&lt;/code&gt;出来。两者是不能相互替换的。后者是不能&lt;em&gt;容忍&lt;/em&gt;非数字字符的。另外，**请在字符串上使用&lt;code&gt;parseInt&lt;/code&gt;和&lt;code&gt;parseFloat&lt;/code&gt;**，这也是它们的设计目的。对非字符串类型使用它们可能得到意外的结果：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;parseInt&lt;/span&gt;( &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;/&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;19&lt;/span&gt; ); &lt;span class=&#34;comment&#34;&gt;// 18，惊不惊喜，意不意外&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;原因是，parseInt会把第一个参数&lt;code&gt;toString&lt;/code&gt;（这不能责怪它，因为它本来就是设计对String使用的）。类似的例子还能举出很多：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;parseInt&lt;/span&gt;( &lt;span class=&#34;number&#34;&gt;0.000008&lt;/span&gt; );       &lt;span class=&#34;comment&#34;&gt;// 0   (&amp;quot;0&amp;quot; from &amp;quot;0.000008&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;parseInt&lt;/span&gt;( &lt;span class=&#34;number&#34;&gt;0.0000008&lt;/span&gt; );      &lt;span class=&#34;comment&#34;&gt;// 8   (&amp;quot;8&amp;quot; from &amp;quot;8e-7&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;parseInt&lt;/span&gt;( &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt; );      &lt;span class=&#34;comment&#34;&gt;// 250 (&amp;quot;fa&amp;quot; from &amp;quot;false&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;parseInt&lt;/span&gt;( &lt;span class=&#34;built_in&#34;&gt;parseInt&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt; );   &lt;span class=&#34;comment&#34;&gt;// 15  (&amp;quot;f&amp;quot; from &amp;quot;function..&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;parseInt&lt;/span&gt;( &lt;span class=&#34;string&#34;&gt;&amp;quot;0x10&amp;quot;&lt;/span&gt; );         &lt;span class=&#34;comment&#34;&gt;// 16&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;parseInt&lt;/span&gt;( &lt;span class=&#34;string&#34;&gt;&amp;quot;103&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; );       &lt;span class=&#34;comment&#34;&gt;// 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;另外，&lt;code&gt;parseInt&lt;/code&gt;会通过前缀试图猜测数字进制，默认是10进制。以&lt;code&gt;0x&lt;/code&gt;开头表示16进制，以&lt;code&gt;0b&lt;/code&gt;开头表示2进制，以&lt;code&gt;0o&lt;/code&gt;开头表示8进制。&lt;/p&gt;
&lt;h4 id=&#34;gt-Boolean&#34;&gt;&lt;a href=&#34;#gt-Boolean&#34; class=&#34;headerlink&#34; title=&#34;-&amp;gt; Boolean&#34;&gt;&lt;/a&gt;-&amp;gt; Boolean&lt;/h4&gt;&lt;p&gt;使用&lt;code&gt;!!&lt;/code&gt;强制转换类型。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;与&lt;code&gt;||&lt;/code&gt;在JS中的逻辑和C++以及Java中的不大一样，它并不一定返回boolean类型的值，而是根据比较的两个数判断返回哪一个。其中&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;可以用来进行短路操作。&lt;/p&gt;
&lt;p&gt;另外，对于Symbol来说，只能通过&lt;code&gt;String()&lt;/code&gt;的形式转为String类型，却不能转为Boolean类型。&lt;/p&gt;
&lt;h4 id=&#34;等价&#34;&gt;&lt;a href=&#34;#等价&#34; class=&#34;headerlink&#34; title=&#34;等价&#34;&gt;&lt;/a&gt;等价&lt;/h4&gt;&lt;p&gt;等价分为&lt;code&gt;==&lt;/code&gt;和&lt;code&gt;===&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;String&lt;/code&gt;和&lt;code&gt;Number&lt;/code&gt;进行比较时，会对&lt;code&gt;String&lt;/code&gt;使用强制类型转换（类似&lt;code&gt;+&lt;/code&gt;和&lt;code&gt;Number()&lt;/code&gt;）；&lt;/p&gt;
&lt;p&gt;在和&lt;code&gt;Boolean&lt;/code&gt;比较时，&lt;strong&gt;会首先把Boolean类型转为Number类型，再进行比较&lt;/strong&gt;。这会产生下面这样比较迷惑的情况：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;42&amp;quot;&lt;/span&gt; == &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;  &lt;span class=&#34;comment&#34;&gt;// false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;42&amp;quot;&lt;/span&gt; == &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;// false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在&lt;code&gt;Object&lt;/code&gt;和非&lt;code&gt;Object&lt;/code&gt;比较时，会先对&lt;code&gt;Object&lt;/code&gt;进行&lt;code&gt;toPrimtives&lt;/code&gt;，即先使用&lt;code&gt;valueOf()&lt;/code&gt;看能否转成基本类型，再使用&lt;code&gt;toString()&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;下面有一些疯狂的例子，但却可以由上面的规则解释：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; == &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;    &lt;span class=&#34;comment&#34;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt; == []     &lt;span class=&#34;comment&#34;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; == []         &lt;span class=&#34;comment&#34;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[] == ![];      &lt;span class=&#34;comment&#34;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; == [&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;];       &lt;span class=&#34;comment&#34;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; == []        &lt;span class=&#34;comment&#34;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; == [&lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;];   &lt;span class=&#34;comment&#34;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; == &lt;span class=&#34;string&#34;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;       &lt;span class=&#34;comment&#34;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;通过上面的坑可以看到，等号的两边总有&lt;code&gt;[]&lt;/code&gt;或&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;或&lt;code&gt;false&lt;/code&gt;或&lt;code&gt;0&lt;/code&gt;。建议在这些情况使用&lt;code&gt;===&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;下面是由Alex Dorey(@dorey on GitHub)制作的一个方便的表格，将各种比较进行了可视化：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/getify/You-Dont-Know-JS/raw/1ed-zh-CN/types%20%26%20grammar/fig1.png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;大小关系比较&#34;&gt;&lt;a href=&#34;#大小关系比较&#34; class=&#34;headerlink&#34; title=&#34;大小关系比较&#34;&gt;&lt;/a&gt;大小关系比较&lt;/h4&gt;&lt;p&gt;首先对值进行&lt;code&gt;toPrimitives&lt;/code&gt;转换，如果有一个不是String，则使用&lt;code&gt;Number&lt;/code&gt;类型比较。见下面的例子：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// toNumber&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; a = [ &lt;span class=&#34;number&#34;&gt;42&lt;/span&gt; ];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; b = [ &lt;span class=&#34;string&#34;&gt;&amp;quot;43&amp;quot;&lt;/span&gt; ];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a &amp;lt; b;  &lt;span class=&#34;comment&#34;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// toString&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; a = &amp;#123; &lt;span class=&#34;attr&#34;&gt;b&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;42&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; b = &amp;#123; &lt;span class=&#34;attr&#34;&gt;b&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;43&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a &amp;lt; b;  &lt;span class=&#34;comment&#34;&gt;// false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a == b; &lt;span class=&#34;comment&#34;&gt;// false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a &amp;gt; b;  &lt;span class=&#34;comment&#34;&gt;// false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a &amp;lt;= b; &lt;span class=&#34;comment&#34;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a &amp;gt;= b; &lt;span class=&#34;comment&#34;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在下面的例子里，a和b在比较时，都会转成”[object Object]”。而等价比较上会比较引用是否相同。因此都返回false，而JS中的&lt;code&gt;&amp;lt;=&lt;/code&gt;和&lt;code&gt;&amp;gt;=&lt;/code&gt;操作会去对应计算&lt;code&gt;&amp;gt;&lt;/code&gt;和&lt;code&gt;&amp;lt;&lt;/code&gt;的结果再取反，从而会得到两个&lt;code&gt;true&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;语法&#34;&gt;&lt;a href=&#34;#语法&#34; class=&#34;headerlink&#34; title=&#34;语法&#34;&gt;&lt;/a&gt;语法&lt;/h3&gt;&lt;h4 id=&#34;语句和表达式&#34;&gt;&lt;a href=&#34;#语句和表达式&#34; class=&#34;headerlink&#34; title=&#34;语句和表达式&#34;&gt;&lt;/a&gt;语句和表达式&lt;/h4&gt;&lt;p&gt;JS中的表达式都有一个隐式的返回值，但是它只会打印在控制台中，并不会真实返回。块语句的返回值是块中最后一个语句的返回值。ES7中可能会引入do语句显式地使用这个返回值。&lt;/p&gt;
&lt;p&gt;JS中的&lt;code&gt;++&lt;/code&gt;和C风格类似，表示自增，有前后之分。但是&lt;code&gt;++a++&lt;/code&gt;这种用法是不合法的。&lt;/p&gt;
&lt;p&gt;赋值表达式的返回是赋予的值，这在链式赋值时很好用：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; a, b, c;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a = b = c = &lt;span class=&#34;number&#34;&gt;42&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这里，&lt;code&gt;c = 42&lt;/code&gt;被求值得出42（带有将42赋值给c的副作用），然后&lt;code&gt;b = 42&lt;/code&gt;被求值得出42（带有将42赋值给b的副作用），而最后&lt;code&gt;a = 42&lt;/code&gt;被求值（带有将42赋值给a的副作用）。&lt;/p&gt;
&lt;p&gt;另一种用法是直接将之放在&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;和&lt;code&gt;||&lt;/code&gt;的前后，检查赋值语句的真值。&lt;/p&gt;
&lt;h4 id=&#34;上下文&#34;&gt;&lt;a href=&#34;#上下文&#34; class=&#34;headerlink&#34; title=&#34;上下文&#34;&gt;&lt;/a&gt;上下文&lt;/h4&gt;&lt;p&gt;&lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;包裹的内容作为表达式结果可以直接赋值给变量，但是直接声明时会被当做代码块，但是可能仍然是合法的，如：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;foo&lt;/span&gt;: &lt;span class=&#34;title function_&#34;&gt;bar&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因为，JS中允许使用语句标签，便于&lt;code&gt;break&lt;/code&gt;和&lt;code&gt;continue&lt;/code&gt;跳转（JS中没有&lt;code&gt;goto&lt;/code&gt;）。而JSON中带有&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;的键则不会被这么解释，因为语句标签不允许出现引号。&lt;/p&gt;
&lt;p&gt;我们现在来解决下面的问题：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[] + &amp;#123;&amp;#125;; &lt;span class=&#34;comment&#34;&gt;// &amp;quot;[object Object]&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&amp;#125; + []; &lt;span class=&#34;comment&#34;&gt;// 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;为什么交换顺序会对&lt;code&gt;+&lt;/code&gt;的规则有影响？在第一个式子里一切都是正常的，&lt;code&gt;[]&lt;/code&gt;转换成&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;，&lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;转换成&lt;code&gt;[object Object]&lt;/code&gt;；在第二个式子里，&lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;被理解成一个空代码块儿，&lt;code&gt;[]&lt;/code&gt;被强制转换为0。&lt;/p&gt;
&lt;h4 id=&#34;操作符优先级&#34;&gt;&lt;a href=&#34;#操作符优先级&#34; class=&#34;headerlink&#34; title=&#34;操作符优先级&#34;&gt;&lt;/a&gt;操作符优先级&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;优先于&lt;code&gt;||&lt;/code&gt;。&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence&#34;&gt;这里&lt;/a&gt;有完整的表格。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;和&lt;code&gt;||&lt;/code&gt;有短接的特点，即当第一个表达式为true或false时直接返回结果。&lt;/li&gt;
&lt;li&gt;赋值表达式和三元表达式&lt;code&gt;? : &lt;/code&gt;一样是从右向左结合的&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;ASI（自动分号）&#34;&gt;&lt;a href=&#34;#ASI（自动分号）&#34; class=&#34;headerlink&#34; title=&#34;ASI（自动分号）&#34;&gt;&lt;/a&gt;ASI（自动分号）&lt;/h4&gt;&lt;p&gt;尽量避免ASI，只在确认没有歧义的地方依赖ASI。&lt;/p&gt;
&lt;h4 id=&#34;错误&#34;&gt;&lt;a href=&#34;#错误&#34; class=&#34;headerlink&#34; title=&#34;错误&#34;&gt;&lt;/a&gt;错误&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;JS有早期错误一说，即运行前编译期间的错误&lt;/li&gt;
&lt;li&gt;&lt;code&gt;let&lt;/code&gt;会造成块域内的TDZ（Temporal Dead Zone，时间死区），&lt;code&gt;typeof&lt;/code&gt;在此时会报错，而不会返回&lt;code&gt;undefined&lt;/code&gt;。TDZ是指变量还没到能使用它的时候，还需要初始化。下面还有一个例子：&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; b = &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt; a = &lt;span class=&#34;number&#34;&gt;42&lt;/span&gt;, b = a + b + &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt; &lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ..&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;ES6提供了剩余参数来代替原有的&lt;code&gt;arguments&lt;/code&gt;对象，这更加安全。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;finally&lt;/code&gt;子句&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;try catch&lt;/code&gt;在和&lt;code&gt;finally&lt;/code&gt;一起使用时，&lt;code&gt;finally&lt;/code&gt;的语句一定会被执行，而且一定会在&lt;code&gt;try&lt;/code&gt;语句执行完后立即执行，即使&lt;code&gt;try&lt;/code&gt;中有&lt;code&gt;return&lt;/code&gt;或者&lt;code&gt;throw&lt;/code&gt;、&lt;code&gt;continue&lt;/code&gt;等控制语句。可以在&lt;code&gt;finally&lt;/code&gt;中修改&lt;code&gt;try&lt;/code&gt;中的结果，但是最后不要这么做，因为会影响程序可读性。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;42&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;finally&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;( &lt;span class=&#34;string&#34;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;( &lt;span class=&#34;string&#34;&gt;&amp;quot;never runs&amp;quot;&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;( &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;() );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Hello&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Uncaught Exception: 42&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;宿主环境&#34;&gt;&lt;a href=&#34;#宿主环境&#34; class=&#34;headerlink&#34; title=&#34;宿主环境&#34;&gt;&lt;/a&gt;宿主环境&lt;/h4&gt;&lt;p&gt;由于浏览器的遗留行为，使用id属性创建DOM元素会创建同名的全局变量。&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;typeof&lt;/span&gt; foo == &lt;span class=&#34;string&#34;&gt;&amp;quot;undefined&amp;quot;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    foo = &lt;span class=&#34;number&#34;&gt;42&lt;/span&gt;;       &lt;span class=&#34;comment&#34;&gt;// 永远不会运行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;( foo ); &lt;span class=&#34;comment&#34;&gt;// HTML元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;永远不要修改内建类型。&lt;/li&gt;
&lt;li&gt;JS的函数和变量声明提升只在同一&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签内&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;保留字&#34;&gt;&lt;a href=&#34;#保留字&#34; class=&#34;headerlink&#34; title=&#34;保留字&#34;&gt;&lt;/a&gt;保留字&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;Let this long package float, Goto private class if short. While protected with debugger case, Continue volatile interface. Instanceof super synchronized throw, Extends final export throws.&lt;/p&gt;
&lt;p&gt;Try import double enum?&lt;/p&gt;
&lt;p&gt;False, boolean, abstract function, Implements typeof transient break! Void static, default do, Switch int native new. Else, delete null public var In return for const, true, char …Finally catch byte.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;来自StackOverflow用户“art4theSould”创造性的一首&lt;a href=&#34;http://stackoverflow.com/questions/26255/reserved-keywords-in-javascript/12114140#12114140&#34;&gt;小诗&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;另外，在ES6+中，可以使用保留字作为对象字面量中的属性名或键。&lt;/p&gt;
&lt;h2 id=&#34;异步与性能&#34;&gt;&lt;a href=&#34;#异步与性能&#34; class=&#34;headerlink&#34; title=&#34;异步与性能&#34;&gt;&lt;/a&gt;异步与性能&lt;/h2&gt;&lt;p&gt;JS引擎对时间没有天生的感觉，只是一个任意JS代码段的按需执行环境。是周围的宿主环境在不停地安排“事件”（JS代码的执行）。举例来说，当你的JS程序发起一个从服务器取得数据的Ajax请求时，你在一个函数（通常称为回调）中建立好“应答”代码，然后JS引擎就会告诉宿主环境，“嘿，我就要暂时停止执行了，但不管你什么时候完成了这个网络请求，而且你还得到一些数据的话，请&lt;em&gt;回来调&lt;/em&gt;这个函数。”&lt;/p&gt;
&lt;p&gt;然后浏览器就会为网络的应答设置一个监听器，当它有东西要交给你的时候，它会通过将回调函数插入&lt;strong&gt;事件轮询&lt;/strong&gt;来安排它的执行。&lt;/p&gt;
&lt;p&gt;关于事件轮询队列，&lt;a href=&#34;https://shenlvmeng.github.io/blog/2017/02/27/event-loop/&#34;&gt;之前&lt;/a&gt;也有过一些介绍。&lt;/p&gt;
&lt;h3 id=&#34;异步概览&#34;&gt;&lt;a href=&#34;#异步概览&#34; class=&#34;headerlink&#34; title=&#34;异步概览&#34;&gt;&lt;/a&gt;异步概览&lt;/h3&gt;&lt;p&gt;异步≠并行。异步本质上还是串行的。工作依然有先后之分，没有线程、线程池的概念。从而，在JS中的函数都是原子的，即不会与别的函数的代码&lt;strong&gt;相互穿插&lt;/strong&gt;（除非使用&lt;code&gt;Generator&lt;/code&gt;）。&lt;/p&gt;
&lt;h4 id=&#34;并发&#34;&gt;&lt;a href=&#34;#并发&#34; class=&#34;headerlink&#34; title=&#34;并发&#34;&gt;&lt;/a&gt;并发&lt;/h4&gt;&lt;p&gt;并发是当两个或多个“进程”（或任务）在同一时间段内同时执行，而不管构成它们的每个操作是不是同时进行的。在JS中，单线程事件轮询是并发的一种表达。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不互动&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当程序中运行多个“进程”（或任务），如果它们之间没有逻辑联系，那么不互动是完全可以接受的。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; res = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;results&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    res.&lt;span class=&#34;property&#34;&gt;foo&lt;/span&gt; = results;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;bar&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;results&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    res.&lt;span class=&#34;property&#34;&gt;bar&lt;/span&gt; = results;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// ajax(..) 是某个包中任意的Ajax函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;ajax&lt;/span&gt;( &lt;span class=&#34;string&#34;&gt;&amp;quot;http://some.url.1&amp;quot;&lt;/span&gt;, foo );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;ajax&lt;/span&gt;( &lt;span class=&#34;string&#34;&gt;&amp;quot;http://some.url.2&amp;quot;&lt;/span&gt;, bar );&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;互动&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;相反，如果它们之间有依赖关系，或者前后次序而产生互动时，&lt;code&gt;let it alone&lt;/code&gt;就会出事。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; res = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;response&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;data&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    res.&lt;span class=&#34;title function_&#34;&gt;push&lt;/span&gt;( data );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// ajax(..) 是某个包中任意的Ajax函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;ajax&lt;/span&gt;( &lt;span class=&#34;string&#34;&gt;&amp;quot;http://some.url.1&amp;quot;&lt;/span&gt;, response );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;ajax&lt;/span&gt;( &lt;span class=&#34;string&#34;&gt;&amp;quot;http://some.url.2&amp;quot;&lt;/span&gt;, response );&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;协调&#34;&gt;&lt;a href=&#34;#协调&#34; class=&#34;headerlink&#34; title=&#34;协调&#34;&gt;&lt;/a&gt;协调&lt;/h4&gt;&lt;p&gt;跳过使用全局变量等丑陋的协作手段，有一种方法，将长时间处理的任务打断成多个小段的请求外加setTimeout，以便将任务穿插完成。&lt;/p&gt;
&lt;h4 id=&#34;Jobs&#34;&gt;&lt;a href=&#34;#Jobs&#34; class=&#34;headerlink&#34; title=&#34;Jobs&#34;&gt;&lt;/a&gt;Jobs&lt;/h4&gt;&lt;p&gt;ES6在事件轮询队列之上引入了一层新概念，称为“工作队列（Job queue）”。它和轮询队列的关系类似于Macrotask和Microtask。&lt;/p&gt;
&lt;h3 id=&#34;回调&#34;&gt;&lt;a href=&#34;#回调&#34; class=&#34;headerlink&#34; title=&#34;回调&#34;&gt;&lt;/a&gt;回调&lt;/h3&gt;&lt;h4 id=&#34;顺序的大脑&#34;&gt;&lt;a href=&#34;#顺序的大脑&#34; class=&#34;headerlink&#34; title=&#34;顺序的大脑&#34;&gt;&lt;/a&gt;顺序的大脑&lt;/h4&gt;&lt;p&gt;回调不符合正常思维逻辑顺序 &amp;amp; 回调地狱。&lt;/p&gt;
&lt;h4 id=&#34;信任问题&#34;&gt;&lt;a href=&#34;#信任问题&#34; class=&#34;headerlink&#34; title=&#34;信任问题&#34;&gt;&lt;/a&gt;信任问题&lt;/h4&gt;&lt;p&gt;&lt;em&gt;（本人并不完全赞同）&lt;/em&gt;回调遭受着&lt;em&gt;控制反转&lt;/em&gt;的蹂躏，它们隐含地将控制权交给第三方（通常第三方工具不受你控制！）来调用你程序的延续。&lt;/p&gt;
&lt;h3 id=&#34;Promise&#34;&gt;&lt;a href=&#34;#Promise&#34; class=&#34;headerlink&#34; title=&#34;Promise&#34;&gt;&lt;/a&gt;Promise&lt;/h3&gt;&lt;p&gt;Promise的&lt;code&gt;then&lt;/code&gt;和&lt;code&gt;catch&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;可靠的Promise&#34;&gt;&lt;a href=&#34;#可靠的Promise&#34; class=&#34;headerlink&#34; title=&#34;可靠的Promise&#34;&gt;&lt;/a&gt;可靠的Promise&lt;/h4&gt;&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; p3 = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Promise&lt;/span&gt;( &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;resolve,reject&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;resolve&lt;/span&gt;( &lt;span class=&#34;string&#34;&gt;&amp;quot;B&amp;quot;&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; p1 = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Promise&lt;/span&gt;( &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;resolve,reject&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;resolve&lt;/span&gt;( p3 );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; p2 = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Promise&lt;/span&gt;( &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;resolve,reject&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;resolve&lt;/span&gt;( &lt;span class=&#34;string&#34;&gt;&amp;quot;A&amp;quot;&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;p1.&lt;span class=&#34;title function_&#34;&gt;then&lt;/span&gt;( &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;v&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;( v );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;p2.&lt;span class=&#34;title function_&#34;&gt;then&lt;/span&gt;( &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;v&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;( v );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// A B  &amp;lt;-- 不是你可能期望的 B A&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这是因为p1由p3解析的结果所解析，这个过程是异步地。&lt;/p&gt;
&lt;p&gt;作者认为Promise在很大程度上，解决了下面的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调的太早&amp;#x2F;太晚（本人并不赞同）&lt;/li&gt;
&lt;li&gt;根本不调回调（勉强成立），Promise通知状态改变是由编程者自己代码控制的，用&lt;code&gt;resolve&lt;/code&gt;或&lt;code&gt;reject&lt;/code&gt;（用户只能借助外部环境API发起异步操作，resolve一样要么放在传统的回调，要么转交给第三方完成）。&lt;/li&gt;
&lt;li&gt;调太少或太多次（成立），一个Promise一旦resolve或者reject，状态就不再发生变化&lt;/li&gt;
&lt;li&gt;没能传入任何参数&amp;#x2F;环境（勉强成立），原因与第二条相同&lt;/li&gt;
&lt;li&gt;吞掉所有错误和异常（勉强成立），Promise中在catch字句里捕获异常。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Promise.resolve(p)&lt;/code&gt;会把thenable的入参&lt;code&gt;p&lt;/code&gt;转换为合法的Promise。这里猜测下这个&lt;code&gt;resolve(p)&lt;/code&gt;的实现（个人猜想）：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Promise&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;resolve&lt;/span&gt; = &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;thenable&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// if `thenable` is a promise, just return it&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// if `thenable` is plain, just resolve&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;typeof&lt;/span&gt; thenable.&lt;span class=&#34;property&#34;&gt;then&lt;/span&gt; != &lt;span class=&#34;string&#34;&gt;&amp;#x27;function&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Promise&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;resolve&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;resolve&lt;/span&gt;(thenable);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Promise&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;resolve, reject&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        thenable.&lt;span class=&#34;title function_&#34;&gt;then&lt;/span&gt;(resolve, reject);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 一个thenable的例子&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; p = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;then&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;cb, err&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title class_&#34;&gt;Math&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;random&lt;/span&gt; &amp;lt; &lt;span class=&#34;number&#34;&gt;0.5&lt;/span&gt; ? &lt;span class=&#34;title function_&#34;&gt;cb&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;42&lt;/span&gt;) : &lt;span class=&#34;title function_&#34;&gt;err&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;oops! Something bad happens.&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;链式调用&#34;&gt;&lt;a href=&#34;#链式调用&#34; class=&#34;headerlink&#34; title=&#34;链式调用&#34;&gt;&lt;/a&gt;链式调用&lt;/h4&gt;&lt;p&gt;看看RxJS的&lt;a href=&#34;http://reactivex.io/rxjs/manual/overview.html&#34;&gt;Introduction&lt;/a&gt;。就可以很轻松地理解Promise的流程和链式过程了。&lt;/p&gt;
&lt;h4 id=&#34;Promise模式&#34;&gt;&lt;a href=&#34;#Promise模式&#34; class=&#34;headerlink&#34; title=&#34;Promise模式&#34;&gt;&lt;/a&gt;Promise模式&lt;/h4&gt;&lt;p&gt;&lt;code&gt;Promise.all()&lt;/code&gt;和&lt;code&gt;Promise.race()&lt;/code&gt;。除了这两个官方钦定的方法外，其他的Promise库还实现了像是&lt;code&gt;any()&lt;/code&gt;，&lt;code&gt;none()&lt;/code&gt;，&lt;code&gt;first()&lt;/code&gt;，&lt;code&gt;last()&lt;/code&gt;这样的方法，看看RxJS的&lt;a href=&#34;http://reactivex.io/rxjs/manual/overview.html#categories-of-operators&#34;&gt;operators&lt;/a&gt;会有更多选择。&lt;/p&gt;
&lt;h4 id=&#34;Promise的限制&#34;&gt;&lt;a href=&#34;#Promise的限制&#34; class=&#34;headerlink&#34; title=&#34;Promise的限制&#34;&gt;&lt;/a&gt;Promise的限制&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;顺序的错误处理&lt;/li&gt;
&lt;li&gt;只能传单一的值（其实就是状态改变不可逆）&lt;/li&gt;
&lt;li&gt;单次解析（同上），文章也在&lt;a href=&#34;https://github.com/getify/You-Dont-Know-JS/blob/1ed-zh-CN/async%20%26%20performance/ch3.md#%E6%83%B0%E6%80%A7&#34;&gt;惰性&lt;/a&gt;的上方提到了观察者模式的RxJS，的确在设计时间概念的领域，RxJS要厉害多了&lt;/li&gt;
&lt;li&gt;惰性（生产生产Promise函数的工厂函数）&lt;/li&gt;
&lt;li&gt;不可反悔（即不能中途撤销）&lt;/li&gt;
&lt;li&gt;性能&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Generator&#34;&gt;&lt;a href=&#34;#Generator&#34; class=&#34;headerlink&#34; title=&#34;Generator&#34;&gt;&lt;/a&gt;Generator&lt;/h3&gt;&lt;p&gt;使用同步风格书写异步代码的基础在Generator。关于这部分的更详细介绍见本人之前参考阮一峰大神写的&lt;a href=&#34;https://shenlvmeng.github.io/blog/2017/03/29/javascript-async-programming-2/&#34;&gt;博文&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;打破运行至完成&#34;&gt;&lt;a href=&#34;#打破运行至完成&#34; class=&#34;headerlink&#34; title=&#34;打破运行至完成&#34;&gt;&lt;/a&gt;打破运行至完成&lt;/h4&gt;&lt;p&gt;generator（生成器）是一个可以和别的代码穿插执行的非原子的特殊函数。使用&lt;code&gt;new&lt;/code&gt;构造generator得到的只是一个迭代器，迭代器在执行到&lt;code&gt;yield&lt;/code&gt;时会让出执行权。真正执行这个迭代器需要用调用或者执行器的方式。&lt;/p&gt;
&lt;p&gt;yield和next是generator可以和外部甚至是其他generator双向通信。但是generator只是声明了自己将要以什么样的形式去执行。还需要一个下面这样的帮助函数去推动它执行：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;step&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;gen&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; it = &lt;span class=&#34;title function_&#34;&gt;gen&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; last;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 不论`yield`出什么，只管在下一次时直接把它塞回去！&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        last = it.&lt;span class=&#34;title function_&#34;&gt;next&lt;/span&gt;( last ).&lt;span class=&#34;property&#34;&gt;value&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;生成器&#34;&gt;&lt;a href=&#34;#生成器&#34; class=&#34;headerlink&#34; title=&#34;生成器&#34;&gt;&lt;/a&gt;生成器&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;可以把generator像状态机一样使用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for of&lt;/code&gt;需要迭代器的实现&lt;/li&gt;
&lt;li&gt;可以在generator上使用&lt;code&gt;for of&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;return&lt;/code&gt;而非&lt;code&gt;next&lt;/code&gt;可以终止生成器执行&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;在异步流程中使用generator&#34;&gt;&lt;a href=&#34;#在异步流程中使用generator&#34; class=&#34;headerlink&#34; title=&#34;在异步流程中使用generator&#34;&gt;&lt;/a&gt;在异步流程中使用generator&lt;/h4&gt;&lt;p&gt;generator的yield暂停特性不仅意味着我们可以从异步的函数调用那里得到&lt;em&gt;看起来&lt;/em&gt;同步的return值。&lt;/p&gt;
&lt;h4 id=&#34;带有promise的generator&#34;&gt;&lt;a href=&#34;#带有promise的generator&#34; class=&#34;headerlink&#34; title=&#34;带有promise的generator&#34;&gt;&lt;/a&gt;带有promise的generator&lt;/h4&gt;&lt;p&gt;在ES6的世界中最棒的就是将generator（看似同步的异步代码）与Promise（可靠性和可组合性）组合起来。&lt;/p&gt;
&lt;p&gt;co与koa。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ES7中的await和async&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;像下面这样，没有&lt;code&gt;run&lt;/code&gt;函数，没有生成器函数的&lt;code&gt;*&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;x,y&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;request&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;http://some.url.1/?x=&amp;quot;&lt;/span&gt; + x + &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;amp;y=&amp;quot;&lt;/span&gt; + y&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; text = &lt;span class=&#34;keyword&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;( &lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;31&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;( text );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (err) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;error&lt;/span&gt;( err );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;yield委托&#34;&gt;&lt;a href=&#34;#yield委托&#34; class=&#34;headerlink&#34; title=&#34;yield委托&#34;&gt;&lt;/a&gt;yield委托&lt;/h4&gt;&lt;p&gt;使用&lt;code&gt;yield * foo&lt;/code&gt;可以把其他的生成器函数整合进当前生成器中。除了生成器外，还可以委托一个非generator的iterator。错误可以委托，promise可以委托，委托还可以递归。&lt;/p&gt;
&lt;p&gt;结合yield可以很方便地协调多个generator&lt;/p&gt;
&lt;h4 id=&#34;thunk&#34;&gt;&lt;a href=&#34;#thunk&#34; class=&#34;headerlink&#34; title=&#34;thunk&#34;&gt;&lt;/a&gt;thunk&lt;/h4&gt;&lt;p&gt;同步的thunk即包装了所有预设形参的函数执行的函数。异步thunk指需要指定callback的包装所有其他预设形参异步函数的函数。像下面这样：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 同步thunk&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;x,y&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; x + y;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;fooThunk&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;( &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 异步thunk&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;x,y,cb&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;setTimeout&lt;/span&gt;( &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;cb&lt;/span&gt;( x + y );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;, &lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;fooThunk&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;cb&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;( &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, cb );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;一旦来说会有一个工具thunkify帮你完成制造函数thunk的工作（放心，总会有人这么做的）。它的用法是下面这样的：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; fooThunkory = &lt;span class=&#34;title function_&#34;&gt;thunkify&lt;/span&gt;( foo );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; fooThunk1 = &lt;span class=&#34;title function_&#34;&gt;fooThunkory&lt;/span&gt;( &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; fooThunk2 = &lt;span class=&#34;title function_&#34;&gt;fooThunkory&lt;/span&gt;( &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 稍后&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;fooThunk1&lt;/span&gt;( &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;sum&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;( sum );     &lt;span class=&#34;comment&#34;&gt;// 7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;fooThunk2&lt;/span&gt;( &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;sum&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;( sum );     &lt;span class=&#34;comment&#34;&gt;// 11&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; );&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;包装函数生产一个thunkory，之后指定除cb以外的其他参数得到thunk函数。&lt;/p&gt;
&lt;p&gt;thunk和Promise本质上其实是等价的。只不过是回调所在的为之不一样罢了。所以使用Promise.wrap包装得到的promise还是thunkify包装得到的thunk函数其实都可以yield出来。因为，它们都能通过指定回调来让generator进一步推动下去。&lt;/p&gt;
&lt;p&gt;当然了无论是在可组合性还是错误处理上，Promise都有更胜一筹。所以，thunk通常作为替代性的前ES6方案。&lt;/p&gt;
&lt;h4 id=&#34;前ES6的Generator&#34;&gt;&lt;a href=&#34;#前ES6的Generator&#34; class=&#34;headerlink&#34; title=&#34;前ES6的Generator&#34;&gt;&lt;/a&gt;前ES6的Generator&lt;/h4&gt;&lt;p&gt;当然了Generator也是可以通过其他方式&lt;a href=&#34;https://github.com/getify/You-Dont-Know-JS/blob/1ed-zh-CN/async%20%26%20performance/ch4.md#%E5%89%8Des6%E6%97%B6%E4%BB%A3%E7%9A%84generator&#34;&gt;实现&lt;/a&gt;的。&lt;/p&gt;
&lt;h3 id=&#34;性能&#34;&gt;&lt;a href=&#34;#性能&#34; class=&#34;headerlink&#34; title=&#34;性能&#34;&gt;&lt;/a&gt;性能&lt;/h3&gt;&lt;h4 id=&#34;Web-Worker&#34;&gt;&lt;a href=&#34;#Web-Worker&#34; class=&#34;headerlink&#34; title=&#34;Web Worker&#34;&gt;&lt;/a&gt;Web Worker&lt;/h4&gt;&lt;p&gt;近HTML5时代被加入web平台的特性，称为“Web Worker”。这是一个浏览器（也就是宿主环境）特性，而且几乎和JS语言本身没有任何关系。&lt;a href=&#34;https://shenlvmeng.github.io/blog/2017/09/04/pwa-and-hybrid-brief/&#34;&gt;这里&lt;/a&gt;简单说了下它和Service Worker的区别。&lt;/p&gt;
&lt;h4 id=&#34;asm-js&#34;&gt;&lt;a href=&#34;#asm-js&#34; class=&#34;headerlink&#34; title=&#34;asm.js&#34;&gt;&lt;/a&gt;asm.js&lt;/h4&gt;&lt;p&gt;“&lt;a href=&#34;http://asmjs.org/&#34;&gt;asm.js&lt;/a&gt;”是可以被高度优化的JavaScript语言子集的标志。通过小心地回避那些特定的很难优化的（垃圾回收，强制转换，等等）机制和模式，asm.js风格的代码可以被JS引擎识别，而且用主动地底层优化进行特殊的处理。&lt;/p&gt;
&lt;h3 id=&#34;基准分析（BenchMark）和调优&#34;&gt;&lt;a href=&#34;#基准分析（BenchMark）和调优&#34; class=&#34;headerlink&#34; title=&#34;基准分析（BenchMark）和调优&#34;&gt;&lt;/a&gt;基准分析（BenchMark）和调优&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://benchmarkjs.com/&#34;&gt;Benchmark.js&lt;/a&gt;用统计学的方式避免时间戳测量语句性能时的不准确&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jsperf.com/&#34;&gt;jsPerf.com&lt;/a&gt;基于Benchmark.js的代码性能测试平台&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;编写好的测试&#34;&gt;&lt;a href=&#34;#编写好的测试&#34; class=&#34;headerlink&#34; title=&#34;编写好的测试&#34;&gt;&lt;/a&gt;编写好的测试&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;注意上下文的影响&lt;/li&gt;
&lt;li&gt;“过早的优化是万恶之源”&lt;/li&gt;
&lt;li&gt;尾部调用优化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ES6与未来&#34;&gt;&lt;a href=&#34;#ES6与未来&#34; class=&#34;headerlink&#34; title=&#34;ES6与未来&#34;&gt;&lt;/a&gt;ES6与未来&lt;/h2&gt;&lt;h3 id=&#34;ES？现在与未来&#34;&gt;&lt;a href=&#34;#ES？现在与未来&#34; class=&#34;headerlink&#34; title=&#34;ES？现在与未来&#34;&gt;&lt;/a&gt;ES？现在与未来&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;polyfill与转译&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;语法-1&#34;&gt;&lt;a href=&#34;#语法-1&#34; class=&#34;headerlink&#34; title=&#34;语法&#34;&gt;&lt;/a&gt;语法&lt;/h3&gt;&lt;p&gt;尽管ES6算是JS最新的官方特性，下面说的大部分特性已经被很经常地使用了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;块作用域（之前的部分已经提到过了）&lt;/li&gt;
&lt;li&gt;扩散、剩余，&lt;code&gt;...&lt;/code&gt;操作符，用在函数入参，数组和对象中&lt;/li&gt;
&lt;li&gt;函数默认参数值（是不是很神奇），默认参数值可以是合理的表达式甚至是函数调用&lt;/li&gt;
&lt;li&gt;解构赋值，也可以有默认参数值&lt;/li&gt;
&lt;li&gt;对象字面量拓展，简约声明&amp;#x2F;简约方法&amp;#x2F;getter，setter&amp;#x2F;计算型属性名&amp;#x2F;&lt;code&gt;__proto__&lt;/code&gt;&amp;#x2F;&lt;code&gt;super&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/getify/You-Dont-Know-JS/blob/1ed-zh-CN/es6%20%26%20beyond/ch2.md#%E6%A8%A1%E6%9D%BF%E5%AD%97%E9%9D%A2%E9%87%8F&#34;&gt;模板字面量&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;箭头函数，词法&lt;code&gt;this&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for of&lt;/code&gt;和iterator&lt;/li&gt;
&lt;li&gt;正则表达式拓展&lt;ul&gt;
&lt;li&gt;Unicode标识&lt;/li&gt;
&lt;li&gt;粘性标志&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数字，八进制&lt;/li&gt;
&lt;li&gt;Unicode&lt;ul&gt;
&lt;li&gt;合理的string长度，&lt;code&gt;String.prototype.normalize()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;charCodeAt&lt;/code&gt; &amp;#x3D;&amp;gt; &lt;code&gt;codePointAt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fromCharCode&lt;/code&gt; &amp;#x3D;&amp;gt; &lt;code&gt;fromCodePoint&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Unicode标识符名称&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Symbol，新的基本类型，它是一个新的包装器对象，可以认为每个&lt;code&gt;EVT_LOGIN&lt;/code&gt;持有一个不能被其他任何值所（有意或无意地）重复的值。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Symbol.for()&lt;/code&gt;先查询是否有一个同名的Symbol，如果有就返回，没有就创建一个&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;组织&#34;&gt;&lt;a href=&#34;#组织&#34; class=&#34;headerlink&#34; title=&#34;组织&#34;&gt;&lt;/a&gt;组织&lt;/h3&gt;&lt;h4 id=&#34;迭代器&#34;&gt;&lt;a href=&#34;#迭代器&#34; class=&#34;headerlink&#34; title=&#34;迭代器&#34;&gt;&lt;/a&gt;迭代器&lt;/h4&gt;&lt;p&gt;迭代器&lt;code&gt;Iterator&lt;/code&gt;接口有一个必选接口&lt;code&gt;next()&lt;/code&gt;，和两个可选接口&lt;code&gt;return()&lt;/code&gt;和&lt;code&gt;throw()&lt;/code&gt;，它的result被规定为包括属性&lt;code&gt;value&lt;/code&gt;和&lt;code&gt;done&lt;/code&gt;，下面是一个数组的迭代：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; arr = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; it = arr[&lt;span class=&#34;title class_&#34;&gt;Symbol&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;iterator&lt;/span&gt;]();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;it.&lt;span class=&#34;title function_&#34;&gt;next&lt;/span&gt;();      &lt;span class=&#34;comment&#34;&gt;// &amp;#123; value: 1, done: false &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;it.&lt;span class=&#34;title function_&#34;&gt;next&lt;/span&gt;();      &lt;span class=&#34;comment&#34;&gt;// &amp;#123; value: 2, done: false &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;it.&lt;span class=&#34;title function_&#34;&gt;next&lt;/span&gt;();      &lt;span class=&#34;comment&#34;&gt;// &amp;#123; value: 3, done: false &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;it.&lt;span class=&#34;title function_&#34;&gt;next&lt;/span&gt;();      &lt;span class=&#34;comment&#34;&gt;// &amp;#123; value: undefined, done: true &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;但通常使用&lt;code&gt;for of&lt;/code&gt;就足够了。我们可以依照这个接口，定义一个自己的迭代器：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Fib&lt;/span&gt; = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [&lt;span class=&#34;title class_&#34;&gt;Symbol&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;iterator&lt;/span&gt;]() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; n1 = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, n2 = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 使迭代器成为一个可迭代对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            [&lt;span class=&#34;title class_&#34;&gt;Symbol&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;iterator&lt;/span&gt;]() &amp;#123; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;next&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; current = n2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                n2 = n1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                n1 = n1 + current;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123; &lt;span class=&#34;attr&#34;&gt;value&lt;/span&gt;: current, &lt;span class=&#34;attr&#34;&gt;done&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;(v) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;string&#34;&gt;&amp;quot;Fibonacci sequence abandoned.&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123; &lt;span class=&#34;attr&#34;&gt;value&lt;/span&gt;: v, &lt;span class=&#34;attr&#34;&gt;done&lt;/span&gt;: &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;Generator-1&#34;&gt;&lt;a href=&#34;#Generator-1&#34; class=&#34;headerlink&#34; title=&#34;Generator&#34;&gt;&lt;/a&gt;Generator&lt;/h4&gt;&lt;p&gt;这个上一章已经提到了。它可以用来：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;生产一系列值，即状态机&lt;/li&gt;
&lt;li&gt;串行执行的任务队列，化&lt;em&gt;异步&lt;/em&gt;为&lt;em&gt;同步&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;模块&#34;&gt;&lt;a href=&#34;#模块&#34; class=&#34;headerlink&#34; title=&#34;模块&#34;&gt;&lt;/a&gt;模块&lt;/h4&gt;&lt;p&gt;&lt;code&gt;import&lt;/code&gt;和&lt;code&gt;export&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;类&#34;&gt;&lt;a href=&#34;#类&#34; class=&#34;headerlink&#34; title=&#34;类&#34;&gt;&lt;/a&gt;类&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;ES6引入了元属性的概念，用&lt;code&gt;new.target&lt;/code&gt;表示。在任意的构造器中，&lt;code&gt;new.target&lt;/code&gt;总是指向&lt;code&gt;new&lt;/code&gt;实际直接调用的构造器。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;集合&#34;&gt;&lt;a href=&#34;#集合&#34; class=&#34;headerlink&#34; title=&#34;集合&#34;&gt;&lt;/a&gt;集合&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;ArrayBuffer&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;它表示一组比特位，但是这些比特的实际意义是由结构化数组控制的，由它表示这些比特上的“视图”究竟是8位有符号整数还是字符串。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; buf = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ArrayBuffer&lt;/span&gt;( &lt;span class=&#34;number&#34;&gt;32&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;buf.&lt;span class=&#34;property&#34;&gt;byteLength&lt;/span&gt;;                     &lt;span class=&#34;comment&#34;&gt;// 32字节&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; arr = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Uint16Array&lt;/span&gt;( buf );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;arr.&lt;span class=&#34;property&#34;&gt;length&lt;/span&gt;;                         &lt;span class=&#34;comment&#34;&gt;// 16&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;一个单独的缓冲可以连接多个视图&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; buf = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ArrayBuffer&lt;/span&gt;( &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; view8 = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Uint8Array&lt;/span&gt;( buf );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; view16 = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Uint16Array&lt;/span&gt;( buf );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;view16[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] = &lt;span class=&#34;number&#34;&gt;3085&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;view8[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;];                       &lt;span class=&#34;comment&#34;&gt;// 13&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;view8[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;];                       &lt;span class=&#34;comment&#34;&gt;// 12&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在ES6中可以使用下面的类型化数组构造器：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Int8Array（8位有符号整数），Uint8Array（8位无符号整数）&lt;/li&gt;
&lt;li&gt;Uint8ClampedArray（8位无符号整数，每个值都被卡在0 - 255范围内）&lt;/li&gt;
&lt;li&gt;Int16Array（16位有符号整数），Uint16Array（16位无符号整数）&lt;/li&gt;
&lt;li&gt;Int32Array（32位有符号整数），Uint32Array（32位无符号整数）&lt;/li&gt;
&lt;li&gt;Float32Array（32位浮点数，IEEE-754）&lt;/li&gt;
&lt;li&gt;Float64Array（64位浮点数，IEEE-754）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Maps&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;摆脱对象只能使用字符串做键值的限制。有&lt;code&gt;get&lt;/code&gt;、&lt;code&gt;set&lt;/code&gt;、&lt;code&gt;delete&lt;/code&gt;、&lt;code&gt;has&lt;/code&gt;、&lt;code&gt;clear&lt;/code&gt;等方法。类似地还有WeakMap，不过它只能使用对象做键。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sets&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个集合。类似Map，不过&lt;code&gt;set&lt;/code&gt;换成了&lt;code&gt;add&lt;/code&gt;，且没有&lt;code&gt;get&lt;/code&gt;。Set和Map都有自己的迭代器。也可以通过&lt;code&gt;keys&lt;/code&gt;，&lt;code&gt;values&lt;/code&gt;，&lt;code&gt;entries&lt;/code&gt;来访问里面的内容。&lt;/p&gt;
&lt;h3 id=&#34;新增API-amp-元编程&#34;&gt;&lt;a href=&#34;#新增API-amp-元编程&#34; class=&#34;headerlink&#34; title=&#34;新增API &amp;amp; 元编程&#34;&gt;&lt;/a&gt;新增API &amp;amp; 元编程&lt;/h3&gt;&lt;p&gt;略，参考&lt;a href=&#34;https://github.com/getify/You-Dont-Know-JS/blob/1ed-zh-CN/es6%20%26%20beyond/ch6.md&#34;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;ES6以后&#34;&gt;&lt;a href=&#34;#ES6以后&#34; class=&#34;headerlink&#34; title=&#34;ES6以后&#34;&gt;&lt;/a&gt;ES6以后&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;asnyc function&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Object.observe&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;指数运算符&lt;code&gt;**&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Array#includes&lt;/code&gt;替代&lt;code&gt;~Array.indexOf(value)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;SIMD（多个数据），用于多个元素的并行数学操作，参考下面&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; v1 = &lt;span class=&#34;variable constant_&#34;&gt;SIMD&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;float32x4&lt;/span&gt;( &lt;span class=&#34;number&#34;&gt;3.14159&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;21.0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;32.3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;55.55&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; v2 = &lt;span class=&#34;variable constant_&#34;&gt;SIMD&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;float32x4&lt;/span&gt;( &lt;span class=&#34;number&#34;&gt;2.1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3.2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4.3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5.4&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable constant_&#34;&gt;SIMD&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;float32x4&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;mul&lt;/span&gt;( v1, v2 );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// [ 6.597339, 67.2, 138.89, 299.97 ]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;WASM（Web Assembly）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;-END-&lt;/em&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://shenlvmeng.github.com/blog/2017/12/13/you-dont-know-js-part1/</guid>
            <title>《You don&#39;t know JS》 上（入门&amp;作用域&amp;对象）</title>
            <link>http://shenlvmeng.github.com/blog/2017/12/13/you-dont-know-js-part1/</link>
            <category>读书笔记</category>
            <category>JavaScript</category>
            <pubDate>Wed, 13 Dec 2017 20:54:12 +0800</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;原作：&lt;a href=&#34;https://github.com/getify/You-Dont-Know-JS&#34;&gt;You-Dont-Know-JS&lt;/a&gt;&lt;br&gt;本文的99.9%的内容都来自《You dont know JS》的&lt;a href=&#34;https://github.com/getify/You-Dont-Know-JS/tree/1ed-zh-CN&#34;&gt;电子中文版&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;传送门：&lt;a href=&#34;https://shenlvmeng.github.io/blog/2017/12/15/you-dont-know-js-part2/&#34;&gt;《You don’t know JS》 下（类型文法&amp;amp;异步&amp;amp;ES6与未来）&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;入门与进阶&#34;&gt;&lt;a href=&#34;#入门与进阶&#34; class=&#34;headerlink&#34; title=&#34;入门与进阶&#34;&gt;&lt;/a&gt;入门与进阶&lt;/h2&gt;&lt;h3 id=&#34;值和类型&#34;&gt;&lt;a href=&#34;#值和类型&#34; class=&#34;headerlink&#34; title=&#34;值和类型&#34;&gt;&lt;/a&gt;值和类型&lt;/h3&gt;&lt;p&gt;JavaScript只有带类型的值，没有带类型的变量。大家都知道JS的基本类型共6类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;undefined&lt;/li&gt;
&lt;li&gt;null&lt;/li&gt;
&lt;li&gt;boolean&lt;/li&gt;
&lt;li&gt;number&lt;/li&gt;
&lt;li&gt;string&lt;/li&gt;
&lt;li&gt;object&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是在ES6之后，需要新增一类&lt;code&gt;symbol&lt;/code&gt;。另外，对null使用&lt;code&gt;typeof&lt;/code&gt;将得到“object”的结果。&lt;/p&gt;
&lt;p&gt;JavaScript中对“falsy”的定义包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“”&lt;/li&gt;
&lt;li&gt;0, -0, NaN&lt;/li&gt;
&lt;li&gt;null, undefined&lt;/li&gt;
&lt;li&gt;false&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除此之外的值都是truthy。&lt;/p&gt;
&lt;p&gt;关于JavaScript中的&lt;code&gt;==&lt;/code&gt;和&lt;code&gt;===&lt;/code&gt;，作者的看法是在必要的时候&lt;code&gt;==&lt;/code&gt;会很好地改善程序。然而&lt;code&gt;==&lt;/code&gt;的&lt;a href=&#34;http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3&#34;&gt;判断规则&lt;/a&gt;比较复杂，可以总结出一些情况便于我们选择是否使用&lt;code&gt;==&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果一个比较的两个值之一可能是&lt;code&gt;true&lt;/code&gt;或&lt;code&gt;false&lt;/code&gt;，避免&amp;#x3D;&amp;#x3D;而使用&amp;#x3D;&amp;#x3D;&amp;#x3D;。&lt;/li&gt;
&lt;li&gt;如果一个比较的两个值之一可能是&lt;code&gt;0&lt;/code&gt;&amp;#x2F;&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;&amp;#x2F;&lt;code&gt;[]&lt;/code&gt;，避免&amp;#x3D;&amp;#x3D;而使用&amp;#x3D;&amp;#x3D;&amp;#x3D;。&lt;/li&gt;
&lt;li&gt;其他情况下，放心使用&lt;code&gt;==&lt;/code&gt;。不仅安全，在许多情况下它可以简化你的代码并改善可读性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;变量&#34;&gt;&lt;a href=&#34;#变量&#34; class=&#34;headerlink&#34; title=&#34;变量&#34;&gt;&lt;/a&gt;变量&lt;/h3&gt;&lt;p&gt;一个变量标识符必须以a-z，A-Z，$，或&lt;code&gt;_&lt;/code&gt;开头。它可以包含任意这些字符外加数字0-9，但不能使用保留字。&lt;/p&gt;
&lt;p&gt;变量作用域提升（var定义）和嵌套就不多说了。&lt;/p&gt;
&lt;h3 id=&#34;Strict模式&#34;&gt;&lt;a href=&#34;#Strict模式&#34; class=&#34;headerlink&#34; title=&#34;Strict模式&#34;&gt;&lt;/a&gt;Strict模式&lt;/h3&gt;&lt;p&gt;让代码更严谨，同样可以选择用在全局或是函数中。&lt;/p&gt;
&lt;h3 id=&#34;函数作为值&#34;&gt;&lt;a href=&#34;#函数作为值&#34; class=&#34;headerlink&#34; title=&#34;函数作为值&#34;&gt;&lt;/a&gt;函数作为值&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;IIFE&lt;/strong&gt;（立即执行函数）和&lt;strong&gt;闭包&lt;/strong&gt;是JS中值得玩味的特性。除了使用&lt;code&gt;()&lt;/code&gt;包裹，还可以用&lt;code&gt;void&lt;/code&gt;打头开始一个IIFE。&lt;/p&gt;
&lt;p&gt;闭包经常用来包装模块。&lt;/p&gt;
&lt;h3 id=&#34;this指代和prototype&#34;&gt;&lt;a href=&#34;#this指代和prototype&#34; class=&#34;headerlink&#34; title=&#34;this指代和prototype&#34;&gt;&lt;/a&gt;this指代和prototype&lt;/h3&gt;&lt;p&gt;略&lt;/p&gt;
&lt;h3 id=&#34;新的特性&#34;&gt;&lt;a href=&#34;#新的特性&#34; class=&#34;headerlink&#34; title=&#34;新的特性&#34;&gt;&lt;/a&gt;新的特性&lt;/h3&gt;&lt;p&gt;填充（polyfill）和转译（transpile）&lt;/p&gt;
&lt;h2 id=&#34;作用域与闭包&#34;&gt;&lt;a href=&#34;#作用域与闭包&#34; class=&#34;headerlink&#34; title=&#34;作用域与闭包&#34;&gt;&lt;/a&gt;作用域与闭包&lt;/h2&gt;&lt;h3 id=&#34;作用域&#34;&gt;&lt;a href=&#34;#作用域&#34; class=&#34;headerlink&#34; title=&#34;作用域&#34;&gt;&lt;/a&gt;作用域&lt;/h3&gt;&lt;p&gt;作用域与LHS，RHS。在非Strict模式下，如果到全局作用域还找不到变量，会在作用域内创建一个新的同名变量。在Strict模式下，不允许这种行为（意外地创建全局变量），此时会抛出ReferenceError，即找不到变量。如果找到了值，但是并不能对它做一些事情，就会抛出TypeError。&lt;/p&gt;
&lt;h3 id=&#34;词法作用域&#34;&gt;&lt;a href=&#34;#词法作用域&#34; class=&#34;headerlink&#34; title=&#34;词法作用域&#34;&gt;&lt;/a&gt;词法作用域&lt;/h3&gt;&lt;p&gt;JavaScript使用词法作用域，即变量和作用域在编写代码阶段已经确定。JS引擎也可以在这个阶段针对作用域和变量对代码进行优化，但是&lt;code&gt;eval()&lt;/code&gt;和&lt;code&gt;with()&lt;/code&gt;会在代码中动态改变作用域，从而使得引擎无法进行优化，使代码运行得更慢。在strict模式下，&lt;code&gt;eval()&lt;/code&gt;的不安全用法（修改作用域）以及&lt;code&gt;with()&lt;/code&gt;都是不允许使用的。&lt;/p&gt;
&lt;p&gt;词法作用域是编写时的，而动态作用域（和this）是运行时的。词法作用域关心的是函数&lt;strong&gt;在何处被声明&lt;/strong&gt;，但是动态作用域关心的是函数&lt;strong&gt;从何处被调用&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;this&lt;/code&gt;在JS中始终是运行时的，即根据运行时的调用情况有不同的值。在&lt;strong&gt;箭头函数&lt;/strong&gt;中则是词法this的，即声明时决定。&lt;/p&gt;
&lt;h3 id=&#34;块作用域&#34;&gt;&lt;a href=&#34;#块作用域&#34; class=&#34;headerlink&#34; title=&#34;块作用域&#34;&gt;&lt;/a&gt;块作用域&lt;/h3&gt;&lt;p&gt;封装、匿名函数、IIFE。&lt;/p&gt;
&lt;p&gt;for循环、if、while、switch等流程控制语句的&lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;，都是&lt;em&gt;假的&lt;/em&gt;块作用域，其中的内容都依附于外部的函数作用域。with（不建议使用），try catch，let，const可以形成新的块作用域。&lt;/p&gt;
&lt;p&gt;在ES6到ES5的转译时，具有块作用域的代码，会采用&lt;code&gt;try catch&lt;/code&gt;来实现：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// ES6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; a = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(a);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// ES5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;undefined&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt;(a) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    a = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(a);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;提升&#34;&gt;&lt;a href=&#34;#提升&#34; class=&#34;headerlink&#34; title=&#34;提升&#34;&gt;&lt;/a&gt;提升&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在代码被执行前，所有的声明，变量和函数，都会首先被处理。处理的只有“声明”，而没有“赋值”。&lt;/li&gt;
&lt;li&gt;函数提升优先于变量的提升&lt;/li&gt;
&lt;li&gt;后续的提升会覆盖此前的同名提升&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;闭包&#34;&gt;&lt;a href=&#34;#闭包&#34; class=&#34;headerlink&#34; title=&#34;闭包&#34;&gt;&lt;/a&gt;闭包&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;闭包就是函数能够记住并访问它的词法作用域，即使当这个函数在它的词法作用域之外执行时。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;循环加闭包会出现面试中的经典问题：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; i=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; i&amp;lt;=&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;setTimeout&lt;/span&gt;( &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;timer&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;( i );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;, i*&lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上面的代码为啥不好用？&lt;/p&gt;
&lt;p&gt;从之前关于作用域的讨论来看，每次setTimeout只是完成了函数声明，并丢进队列里而已。当定时器函数在其词法作用域外执行时，因为闭包的特点会保留有父级的作用域。而这5个函数都定义在同一个父级函数作用域内，对变量i的引用自然是同一个了。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; i=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; i&amp;lt;=&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    (&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;j&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;setTimeout&lt;/span&gt;( &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;timer&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;( j );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;, j*&lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;)( i );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;有IIFE的加持，父级作用域现在变成了每个IIFE而非for循环所在的作用域。即每个变量i来自不同的独立作用域，自然就可以得到理想的效果了。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; i=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; i&amp;lt;=&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;setTimeout&lt;/span&gt;( &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;timer&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;( i );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;, i*&lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;不就是想要个块作用域嘛，使用&lt;code&gt;let&lt;/code&gt;关键字后变量将不是只为循环声明一次，而是为每次迭代声明一次。每次都能得到一个新的块作用域，自然得到和IIFE一样的效果。&lt;/p&gt;
&lt;h2 id=&#34;this与对象&#34;&gt;&lt;a href=&#34;#this与对象&#34; class=&#34;headerlink&#34; title=&#34;this与对象&#34;&gt;&lt;/a&gt;&lt;code&gt;this&lt;/code&gt;与对象&lt;/h2&gt;&lt;h3 id=&#34;this是什么&#34;&gt;&lt;a href=&#34;#this是什么&#34; class=&#34;headerlink&#34; title=&#34;this是什么&#34;&gt;&lt;/a&gt;&lt;code&gt;this&lt;/code&gt;是什么&lt;/h3&gt;&lt;p&gt;也许JS已经入门的前端程序员们早就对this在不同环境下的不同值烂熟在心。但可能没有想过这种情况的本质：上一部分提到的&lt;strong&gt;JS中的this是运行时的&lt;/strong&gt;，和作用域完全不一样。&lt;/p&gt;
&lt;p&gt;对比一下按照传统OOP理解下的JS代码，从不同的角度看，能进一步得到对this的认识：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; a = &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;bar&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;bar&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;( &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;a&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;(); &lt;span class=&#34;comment&#34;&gt;//undefined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;num&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;( &lt;span class=&#34;string&#34;&gt;&amp;quot;foo: &amp;quot;&lt;/span&gt; + num );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 追踪 `foo` 被调用了多少次&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;count&lt;/span&gt;++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;foo.&lt;span class=&#34;property&#34;&gt;count&lt;/span&gt; = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (i=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (i &amp;gt; &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;( i );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// foo: 6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// foo: 7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// foo: 8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// foo: 9&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// `foo` 被调用了多少次？&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;( foo.&lt;span class=&#34;property&#34;&gt;count&lt;/span&gt; ); &lt;span class=&#34;comment&#34;&gt;// 0 -- 这他妈怎么回事……？&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;虽然看上去很愚蠢，但是从词法作用域的角度去理解，是不是能更清楚看到JS中&lt;code&gt;this&lt;/code&gt;的特殊之处。&lt;/p&gt;
&lt;h3 id=&#34;this豁然开朗&#34;&gt;&lt;a href=&#34;#this豁然开朗&#34; class=&#34;headerlink&#34; title=&#34;this豁然开朗&#34;&gt;&lt;/a&gt;&lt;code&gt;this&lt;/code&gt;豁然开朗&lt;/h3&gt;&lt;p&gt;根据上面的描述，&lt;code&gt;this&lt;/code&gt;是根据调用点确定含义的。下面的4个规则，在准备JS面试的时候肯定都见过：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;默认绑定，独立函数调用。可以认为这种this规则是在没有其他规则适用时的默认规则。此时&lt;code&gt;this&lt;/code&gt;指向全局对象，在strict mode下，&lt;code&gt;this&lt;/code&gt;指向undefined。&lt;/li&gt;
&lt;li&gt;隐含绑定，调用点有一个环境对象，即作为函数方法，但是下面的情况下会回退到默认绑定，因为调用点实际位于独立函数内&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;( &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;a&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; obj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;a&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;foo&lt;/span&gt;: foo&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; bar = obj.&lt;span class=&#34;property&#34;&gt;foo&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// 函数引用！&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; a = &lt;span class=&#34;string&#34;&gt;&amp;quot;oops, global&amp;quot;&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// `a`也是一个全局对象的属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;bar&lt;/span&gt;(); &lt;span class=&#34;comment&#34;&gt;// &amp;quot;oops, global&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;( &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;a&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;========&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;doFoo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;fn&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// `fn` 只不过 `foo` 的另一个引用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;fn&lt;/span&gt;(); &lt;span class=&#34;comment&#34;&gt;// &amp;lt;-- 调用点!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; obj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;a&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;foo&lt;/span&gt;: foo&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; a = &lt;span class=&#34;string&#34;&gt;&amp;quot;oops, global&amp;quot;&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// `a`也是一个全局对象的属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title function_&#34;&gt;doFoo&lt;/span&gt;( obj.&lt;span class=&#34;property&#34;&gt;foo&lt;/span&gt; ); &lt;span class=&#34;comment&#34;&gt;// &amp;quot;oops, global&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;显式绑定，&lt;code&gt;call&lt;/code&gt;与&lt;code&gt;apply&lt;/code&gt;可以显式attach context到函数上，使用&lt;code&gt;bind&lt;/code&gt;可以避免前面那种&lt;code&gt;this&lt;/code&gt;丢失的情况。&lt;/li&gt;
&lt;li&gt;new绑定，函数作为构造函数调用时，&lt;code&gt;this&lt;/code&gt;指向即将返回的新对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从优先级上看，new &amp;gt; 硬绑定 &amp;gt; 隐含绑定 &amp;gt; 默认绑定。其中“new &amp;gt; 硬绑定”有趣的一点是，使用&lt;code&gt;bind&lt;/code&gt;在第一个后的参数实际上会作为函数的默认入参（类似于函数柯里化），如下：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;p1,p2&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;val&lt;/span&gt; = p1 + p2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 在这里使用 `null` 是因为在这种场景下我们不关心 `this` 的硬绑定&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 而且反正它将会被 `new` 调用覆盖掉！&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; bar = foo.&lt;span class=&#34;title function_&#34;&gt;bind&lt;/span&gt;( &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;p1&amp;quot;&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; baz = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;bar&lt;/span&gt;( &lt;span class=&#34;string&#34;&gt;&amp;quot;p2&amp;quot;&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;baz.&lt;span class=&#34;property&#34;&gt;val&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// p1p2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;除了上面的规则，还有一些特例：&lt;/p&gt;
&lt;p&gt;传递&lt;code&gt;null&lt;/code&gt;或&lt;code&gt;undefined&lt;/code&gt;给&lt;code&gt;call&lt;/code&gt;，&lt;code&gt;apply&lt;/code&gt;或&lt;code&gt;bind&lt;/code&gt;时，那么这些值会被忽略掉，取而代之的是&lt;strong&gt;默认绑定&lt;/strong&gt;规则将适用于这个调用。单纯使用apply数组化输入参数（现在已经可以用&lt;code&gt;[...foo]&lt;/code&gt;了）和bind柯里化函数时常用到。&lt;/p&gt;
&lt;p&gt;不过，这么做还是有风险，建议用&lt;code&gt;Object.create(null)&lt;/code&gt;创建的对象替代&lt;code&gt;null&lt;/code&gt;，既能表示无意义的值，又能避免&lt;strong&gt;默认绑定&lt;/strong&gt;的行为。&lt;/p&gt;
&lt;p&gt;作者给出了软绑定的工具方法，提高了硬绑定的灵活性，又避免了&lt;strong&gt;默认绑定&lt;/strong&gt;的问题。逻辑是在绑定时检查&lt;code&gt;this&lt;/code&gt;是否是全局对象，如果是才使用输入的&lt;code&gt;this&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!&lt;span class=&#34;title class_&#34;&gt;Function&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;softBind&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;Function&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;softBind&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;obj&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; fn = &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            curried = [].&lt;span class=&#34;property&#34;&gt;slice&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;call&lt;/span&gt;( &lt;span class=&#34;variable language_&#34;&gt;arguments&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; ),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            bound = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;bound&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; fn.&lt;span class=&#34;title function_&#34;&gt;apply&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    (!&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt; ||&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        (&lt;span class=&#34;keyword&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;variable language_&#34;&gt;window&lt;/span&gt; !== &lt;span class=&#34;string&#34;&gt;&amp;quot;undefined&amp;quot;&lt;/span&gt; &amp;amp;&amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt; === &lt;span class=&#34;variable language_&#34;&gt;window&lt;/span&gt;) ||&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        (&lt;span class=&#34;keyword&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;variable language_&#34;&gt;global&lt;/span&gt; !== &lt;span class=&#34;string&#34;&gt;&amp;quot;undefined&amp;quot;&lt;/span&gt; &amp;amp;&amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt; === &lt;span class=&#34;variable language_&#34;&gt;global&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    ) ? obj : &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    curried.&lt;span class=&#34;property&#34;&gt;concat&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;apply&lt;/span&gt;( curried, &lt;span class=&#34;variable language_&#34;&gt;arguments&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        bound.&lt;span class=&#34;property&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt; = &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;create&lt;/span&gt;( fn.&lt;span class=&#34;property&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; bound;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;p&gt;另外，前面提到的箭头函数具有词法&lt;code&gt;this&lt;/code&gt;，等同在调用前声明&lt;code&gt;self = this&lt;/code&gt;，再把&lt;code&gt;self&lt;/code&gt;传入的效果。&lt;/p&gt;
&lt;h3 id=&#34;对象&#34;&gt;&lt;a href=&#34;#对象&#34; class=&#34;headerlink&#34; title=&#34;对象&#34;&gt;&lt;/a&gt;对象&lt;/h3&gt;&lt;p&gt;内建对象中，只有&lt;code&gt;Date()&lt;/code&gt;是必须要使用&lt;code&gt;new&lt;/code&gt;创建的。&lt;/p&gt;
&lt;p&gt;对象的属性有两种访问方法：&lt;code&gt;.&lt;/code&gt;操作符或&lt;code&gt;[ ]&lt;/code&gt;操作符。不同的是&lt;code&gt;.&lt;/code&gt;操作符后只能使用标识符兼容的属性名，&lt;code&gt;[...]&lt;/code&gt;操作符后可以使用任何合理的UTF-8的字符串。另外，对象的属性名总是字符串，如果使用了其他类型值，会进行强制转换：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; myObject = &amp;#123; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;myObject[&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;] = &lt;span class=&#34;string&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;myObject[&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;] = &lt;span class=&#34;string&#34;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;myObject[myObject] = &lt;span class=&#34;string&#34;&gt;&amp;quot;baz&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;myObject[&lt;span class=&#34;string&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;];               &lt;span class=&#34;comment&#34;&gt;// &amp;quot;foo&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;myObject[&lt;span class=&#34;string&#34;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;];                  &lt;span class=&#34;comment&#34;&gt;// &amp;quot;bar&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;myObject[&lt;span class=&#34;string&#34;&gt;&amp;quot;[object Object]&amp;quot;&lt;/span&gt;];    &lt;span class=&#34;comment&#34;&gt;// &amp;quot;baz&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;计算型属性名&#34;&gt;&lt;a href=&#34;#计算型属性名&#34; class=&#34;headerlink&#34; title=&#34;计算型属性名&#34;&gt;&lt;/a&gt;计算型属性名&lt;/h4&gt;&lt;p&gt;ES6中新增了&lt;em&gt;计算型属性名&lt;/em&gt;，允许使用表达式作为一个键名称，表达式用&lt;code&gt;[ ]&lt;/code&gt;括起来。像下面这样：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; prefix = &lt;span class=&#34;string&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; myObject = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [prefix + &lt;span class=&#34;string&#34;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;]: &lt;span class=&#34;string&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    [prefix + &lt;span class=&#34;string&#34;&gt;&amp;quot;baz&amp;quot;&lt;/span&gt;]: &lt;span class=&#34;string&#34;&gt;&amp;quot;world&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;myObject[&lt;span class=&#34;string&#34;&gt;&amp;quot;foobar&amp;quot;&lt;/span&gt;]; &lt;span class=&#34;comment&#34;&gt;// hello&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;myObject[&lt;span class=&#34;string&#34;&gt;&amp;quot;foobaz&amp;quot;&lt;/span&gt;]; &lt;span class=&#34;comment&#34;&gt;// world&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;深、浅复制与对象属性描述符（description），&lt;code&gt;writable&lt;/code&gt;和&lt;code&gt;configurable&lt;/code&gt;，&lt;code&gt;getOwnPropertyDescriptor()&lt;/code&gt;与&lt;code&gt;defineProperty()&lt;/code&gt;。在JS中，&lt;code&gt;delete&lt;/code&gt;仅用于直接从目标对象移除该对象的（可以被移除的）属性，与释放内存并无直接关系。&lt;/p&gt;
&lt;h4 id=&#34;Immutability&#34;&gt;&lt;a href=&#34;#Immutability&#34; class=&#34;headerlink&#34; title=&#34;Immutability&#34;&gt;&lt;/a&gt;Immutability&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;注意：所有这些方法创建的都是浅不可变性。也就是，它们仅影响对象和它的直属属性的性质。如果对象拥有对其他对象（数组、对象、函数等）的引用，那个对象的内容不会受影响，任然保持可变&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;属性描述符里的&lt;code&gt;writable&lt;/code&gt;和&lt;code&gt;configuratable&lt;/code&gt;限制了对属性和属性值的修改。&lt;code&gt;preventExtensions()&lt;/code&gt;方法可以防止对象被添加新属性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;seal()&lt;/code&gt; &amp;#x3D; &lt;code&gt;configuratable: false&lt;/code&gt; + &lt;code&gt;preventExtensions()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;freeze()&lt;/code&gt; &amp;#x3D; &lt;code&gt;seal()&lt;/code&gt; + &lt;code&gt;writable: false&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;getter与setter&#34;&gt;&lt;a href=&#34;#getter与setter&#34; class=&#34;headerlink&#34; title=&#34;getter与setter&#34;&gt;&lt;/a&gt;getter与setter&lt;/h4&gt;&lt;p&gt;除了使用&lt;code&gt;defineProperty&lt;/code&gt;外，可以直接用字面量的形式，通过&lt;code&gt;get prop1()&lt;/code&gt;或&lt;code&gt;set prop1(val)&lt;/code&gt;的形式设置getter和setter。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;for in&lt;/code&gt;和&lt;code&gt;for of&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;混合（淆）“类”的对象&#34;&gt;&lt;a href=&#34;#混合（淆）“类”的对象&#34; class=&#34;headerlink&#34; title=&#34;混合（淆）“类”的对象&#34;&gt;&lt;/a&gt;混合（淆）“类”的对象&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;有些语言（比如Java）不给你选择，所以这根本没什么 选择性 —— 一切都是类。其他语言如C&amp;#x2F;C++或PHP同时给你过程式和面向类的语法，在使用哪种风格合适或混合风格上，留给开发者更多选择。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;类意味着拷贝。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当一个传统的类被实例化时，就发生了类的行为向实例中拷贝。当类被继承时，也发生父类的行为向子类的拷贝。多态也是拷贝行为的结果。&lt;/p&gt;
&lt;p&gt;但是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一，JavaScript并&lt;strong&gt;不会&lt;/strong&gt;自动地 （像类那样）在对象间创建拷贝；&lt;/li&gt;
&lt;li&gt;第二，显式mixin只能复制函数或对象的&lt;strong&gt;引用&lt;/strong&gt;，而不是自身。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;正如我们在第四章讲解的，在 JavaScript 中，对于对象来说没有抽象模式&amp;#x2F;蓝图，即没有面向类的语言中那样的称为类的东西。JavaScript 只有 对象。&lt;/p&gt;
&lt;p&gt;实际上，在所有语言中，JavaScript 几乎是独一无二的，也许是唯一的可以被称为“面向对象”的语言，因为可以根本没有类而直接创建对象的语言很少，而 JavaScript 就是其中之一。&lt;/p&gt;
&lt;p&gt;在 JavaScript 中，类不能（因为根本不存在）描述对象可以做什么。对象直接定义它自己的行为。这里 仅有 对象。&lt;/p&gt;
&lt;p&gt;总之，JavaScript中面向对象的部分和大多数OOP语言不完全一样。这使得在JS中模拟类编程将既累又会埋下很多坑。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;原型&#34;&gt;&lt;a href=&#34;#原型&#34; class=&#34;headerlink&#34; title=&#34;原型&#34;&gt;&lt;/a&gt;原型&lt;/h3&gt;&lt;p&gt;使用&lt;code&gt;[[get]]&lt;/code&gt;查询属性时，也会在&lt;code&gt;[[prototype]]&lt;/code&gt;链上寻找，因此修改对象属性的时候，应该注意&lt;strong&gt;属性遮蔽&lt;/strong&gt;（即在&lt;code&gt;[[prototype]]&lt;/code&gt;中找到）的情况。它会增加代码的复杂度和可读性，如下：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; anotherObject = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;a&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; myObject = &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;create&lt;/span&gt;( anotherObject );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;anotherObject.&lt;span class=&#34;property&#34;&gt;a&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;myObject.&lt;span class=&#34;property&#34;&gt;a&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;anotherObject.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;( &lt;span class=&#34;string&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt; ); &lt;span class=&#34;comment&#34;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;myObject.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;( &lt;span class=&#34;string&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt; ); &lt;span class=&#34;comment&#34;&gt;// false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;myObject.&lt;span class=&#34;property&#34;&gt;a&lt;/span&gt;++; &lt;span class=&#34;comment&#34;&gt;// 噢，隐式遮蔽！&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;anotherObject.&lt;span class=&#34;property&#34;&gt;a&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;myObject.&lt;span class=&#34;property&#34;&gt;a&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;myObject.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;( &lt;span class=&#34;string&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt; ); &lt;span class=&#34;comment&#34;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在&lt;code&gt;for in&lt;/code&gt;循环中，同样注意用&lt;code&gt;hasOwnProperty()&lt;/code&gt;排除&lt;code&gt;[[prototype]]&lt;/code&gt;上的属性。&lt;/p&gt;
&lt;p&gt;所有用&lt;code&gt;constructor&lt;/code&gt;构建的对象都有所指向的prototype，而在prototype中的&lt;code&gt;.constructor&lt;/code&gt;又会指回&lt;code&gt;constructor&lt;/code&gt;。但是这个关系是可以被覆盖的。&lt;/p&gt;
&lt;h3 id=&#34;原型继承&#34;&gt;&lt;a href=&#34;#原型继承&#34; class=&#34;headerlink&#34; title=&#34;原型继承&#34;&gt;&lt;/a&gt;原型继承&lt;/h3&gt;&lt;p&gt;作者认为，JS中的对象是通过链接组织起来的。说是原型继承，实际上就是在两个原型间建立了&lt;code&gt;[[prototype]]&lt;/code&gt;的关系。这个关系的建立方法很多，各有优劣。最简单的还是用ES5提供的&lt;code&gt;Object.create()&lt;/code&gt;方法，对&lt;code&gt;__proto__&lt;/code&gt;和&lt;code&gt;constructor&lt;/code&gt;等视而不见。它的polyfill像下面这样：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!&lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;create&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;create&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;o&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;F&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        F.&lt;span class=&#34;property&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt; = o;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;F&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;另外，&lt;code&gt;Object.create()&lt;/code&gt;第一个后面的参数可以用来声明对象属性描述符，不过用得不多。&lt;/p&gt;
&lt;h4 id=&#34;总结&#34;&gt;&lt;a href=&#34;#总结&#34; class=&#34;headerlink&#34; title=&#34;总结&#34;&gt;&lt;/a&gt;总结&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;虽然这些JavaScript机制看起来和传统面向类语言的“初始化类”和“类继承”类似，而在JavaScript中的关键区别是，没有拷贝发生。取而代之的是对象最终通过&lt;code&gt;[[Prototype]]&lt;/code&gt;链链接在一起。&lt;/p&gt;
&lt;p&gt;相反，“委托”是一个更确切的术语，因为这些关系不是拷贝而是委托链接。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从这个角度去看&lt;code&gt;new Foo()&lt;/code&gt;过程中发生的事，除了返回一个新的对象外，&lt;code&gt;Foo()&lt;/code&gt;还会将这个对象和&lt;code&gt;Foo.prototype&lt;/code&gt;链接起来（通过指定&lt;code&gt;[[prototype]]&lt;/code&gt;），&lt;code&gt;Foo.prototype&lt;/code&gt;和别的对象并没有本质区别。&lt;/p&gt;
&lt;h3 id=&#34;行为委托&#34;&gt;&lt;a href=&#34;#行为委托&#34; class=&#34;headerlink&#34; title=&#34;行为委托&#34;&gt;&lt;/a&gt;行为委托&lt;/h3&gt;&lt;p&gt;在上面一章提到，&lt;code&gt;[[prototype]]&lt;/code&gt;是存在于对象内部的引用另一个对象的内部连接。当一个属性&amp;#x2F;方法引用在一个对象上发生，而这样的属性&amp;#x2F;方法又不存在时，这个链接就会被使用。在这种情况下，&lt;code&gt;[[Prototype]]&lt;/code&gt;链接告诉引擎去那个被链接的对象上寻找该属性&amp;#x2F;方法。接下来，如果那个对象也不能满足查询，就沿着它的&lt;code&gt;[[Prototype]]&lt;/code&gt;查询，如此继续。这种对象间的一系列链接构成了所谓的“原形链”。&lt;/p&gt;
&lt;p&gt;其重要的实质&lt;strong&gt;全部在于被连接到其他对象的对象&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;下面是一段OLOO（链接到其他对象的对象）风格的例子：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Task&lt;/span&gt; = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;setID&lt;/span&gt;: &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;ID&lt;/span&gt;) &amp;#123; &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;id&lt;/span&gt; = &lt;span class=&#34;variable constant_&#34;&gt;ID&lt;/span&gt;; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;outputID&lt;/span&gt;: &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123; &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;( &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;id&lt;/span&gt; ); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 使 `XYZ` 委托到 `Task`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;variable constant_&#34;&gt;XYZ&lt;/span&gt; = &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;create&lt;/span&gt;( &lt;span class=&#34;title class_&#34;&gt;Task&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable constant_&#34;&gt;XYZ&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;prepareTask&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;ID,Label&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;setID&lt;/span&gt;( &lt;span class=&#34;variable constant_&#34;&gt;ID&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;label&lt;/span&gt; = &lt;span class=&#34;title class_&#34;&gt;Label&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable constant_&#34;&gt;XYZ&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;outputTaskDetails&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;outputID&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;( &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;label&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;它的特点在于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;状态保留在委托者上&lt;/li&gt;
&lt;li&gt;避免&lt;code&gt;[[prototype]]&lt;/code&gt;链上的重复命名&lt;/li&gt;
&lt;li&gt;行为委托用在内部实现，避免暴露在API的设计上&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;思维的转变&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;放弃传统OO思路在JS中的蹩脚实现（像下面这样），抓住&lt;code&gt;[[prototype]]&lt;/code&gt;链接对象以及“原型链”的特殊性，可以让思路更加自然且符合JS的特点（像下面的下面那样）。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;Foo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;who&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;me&lt;/span&gt; = who;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Foo&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;identify&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;I am &amp;quot;&lt;/span&gt; + &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;me&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;Bar&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;who&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;Foo&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;call&lt;/span&gt;( &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;, who );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Bar&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt; = &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;create&lt;/span&gt;( &lt;span class=&#34;title class_&#34;&gt;Foo&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Bar&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;speak&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;alert&lt;/span&gt;( &lt;span class=&#34;string&#34;&gt;&amp;quot;Hello, &amp;quot;&lt;/span&gt; + &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;identify&lt;/span&gt;() + &lt;span class=&#34;string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; b1 = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Bar&lt;/span&gt;( &lt;span class=&#34;string&#34;&gt;&amp;quot;b1&amp;quot;&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; b2 = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Bar&lt;/span&gt;( &lt;span class=&#34;string&#34;&gt;&amp;quot;b2&amp;quot;&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b1.&lt;span class=&#34;title function_&#34;&gt;speak&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b2.&lt;span class=&#34;title function_&#34;&gt;speak&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Foo&lt;/span&gt; = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;init&lt;/span&gt;: &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;who&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;me&lt;/span&gt; = who;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;identify&lt;/span&gt;: &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;I am &amp;quot;&lt;/span&gt; + &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;me&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Bar&lt;/span&gt; = &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;create&lt;/span&gt;( &lt;span class=&#34;title class_&#34;&gt;Foo&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title class_&#34;&gt;Bar&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;speak&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title function_&#34;&gt;alert&lt;/span&gt;( &lt;span class=&#34;string&#34;&gt;&amp;quot;Hello, &amp;quot;&lt;/span&gt; + &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;identify&lt;/span&gt;() + &lt;span class=&#34;string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; b1 = &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;create&lt;/span&gt;( &lt;span class=&#34;title class_&#34;&gt;Bar&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b1.&lt;span class=&#34;title function_&#34;&gt;init&lt;/span&gt;( &lt;span class=&#34;string&#34;&gt;&amp;quot;b1&amp;quot;&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; b2 = &lt;span class=&#34;title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;create&lt;/span&gt;( &lt;span class=&#34;title class_&#34;&gt;Bar&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b2.&lt;span class=&#34;title function_&#34;&gt;init&lt;/span&gt;( &lt;span class=&#34;string&#34;&gt;&amp;quot;b2&amp;quot;&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b1.&lt;span class=&#34;title function_&#34;&gt;speak&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b2.&lt;span class=&#34;title function_&#34;&gt;speak&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在这种委托的思路下，不存在严格的父子关系，甚至不存在继承和类的说法。全程通过&lt;code&gt;Object.create()&lt;/code&gt;建立起对象和对象的联系，连&lt;code&gt;new&lt;/code&gt;也是不建议使用的。&lt;/p&gt;
&lt;p&gt;但是这种思路也有个明显的问题，“子类”没法定义“父类”的同名方法，因为整个程序建立在&lt;code&gt;[[prototype]]&lt;/code&gt;联系的基础上，重复命名将会隔断连接。&lt;/p&gt;
&lt;p&gt;作者并不推荐匿名函数的使用，认为：1，追踪调试栈困难；2，难以自引用；3，代码变得不好理解。这点上我是保留意见的。&lt;/p&gt;
&lt;h3 id=&#34;类型自省&#34;&gt;&lt;a href=&#34;#类型自省&#34; class=&#34;headerlink&#34; title=&#34;类型自省&#34;&gt;&lt;/a&gt;类型自省&lt;/h3&gt;&lt;p&gt;类型自省即&lt;code&gt;instanceof&lt;/code&gt;，而这个操作符是依赖于&lt;code&gt;[[prototype]]&lt;/code&gt;中的constructor属性的，这个属性除了不可枚举外，相较其他属性并没有特别之处。重写或者&lt;code&gt;[[prototype]]&lt;/code&gt;的改变就可以改变它。因此，&lt;code&gt;instanceof&lt;/code&gt;在很多情况下可能并不会那么可靠。&lt;/p&gt;
&lt;p&gt;使用鸭子类型的类型自省就更加不可靠了。&lt;/p&gt;
&lt;p&gt;在作者提出的OLOO范式中，采取&lt;code&gt;isPrototypeOf()&lt;/code&gt;和&lt;code&gt;Object.getPrototypeOf()&lt;/code&gt;进行类型自省。&lt;/p&gt;
&lt;h3 id=&#34;新的class关键字&#34;&gt;&lt;a href=&#34;#新的class关键字&#34; class=&#34;headerlink&#34; title=&#34;新的class关键字&#34;&gt;&lt;/a&gt;新的&lt;code&gt;class&lt;/code&gt;关键字&lt;/h3&gt;&lt;p&gt;为了便于“类”思维编程者，&lt;code&gt;class&lt;/code&gt;可以说是一大福音。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不再有&lt;code&gt;.prototype&lt;/code&gt;的困扰&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extends&lt;/code&gt;一键式继承&lt;/li&gt;
&lt;li&gt;&lt;code&gt;super&lt;/code&gt;对多态的支持&lt;/li&gt;
&lt;li&gt;语法上使用更加贴近OOP语言&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但实际上，这里的&lt;code&gt;class&lt;/code&gt;只是语法糖，它还是没实现从类（“蓝图”）到实例（“建筑”）以及从父类到子类的复制，还建立在&lt;code&gt;[[prototype]]&lt;/code&gt;的基础上。&lt;a href=&#34;https://github.com/getify/You-Dont-Know-JS/blob/1ed-zh-CN/this%20%26%20object%20prototypes/apA.md&#34;&gt;原文&lt;/a&gt;给出了很多例子说明这点。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在传统面向类的语言中，你从不会在晚些时候调整类的定义，所以类设计模式不提供这样的能力。但是JS的一个最强大的部分就是它是动态的，而且任何对象的定义都是（除非你将它设定为不可变）不固定的可变的东西。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;换句话说，class 好像在告诉你：“动态太坏了，所以这可能不是一个好主意。这里有看似静态语法，把你的东西静态编码。”&lt;/p&gt;
&lt;p&gt;关于 JavaScript 的评论是多么悲伤啊：动态太难了，让我们假装成（但实际上不是！）静态吧。&lt;/p&gt;
&lt;/blockquote&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://shenlvmeng.github.com/blog/2017/12/11/raven/</guid>
            <title>Sentry Raven.js学习</title>
            <link>http://shenlvmeng.github.com/blog/2017/12/11/raven/</link>
            <category>埋点</category>
            <category>raven.js</category>
            <category>前端监控</category>
            <pubDate>Mon, 11 Dec 2017 23:03:47 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;最近看看要不要在网上学习下性能监测和告警的解决方案，加在项目里。已经调研了一下才发现，项目里已经用上Raven.js了。实际上，各大公司也都有自己的实现方式，除了sentry的Raven.js外，还有腾讯的badjs，淘宝的JSTracker，阿里巴巴的FdSafe，支付宝的saijs等。早在几年前，就已经有许多解决方案了。&lt;/p&gt;
&lt;p&gt;异常监测和信息采集的需要实现的主要功能点包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前端SDK实现包括错误拦截和监控，错误信息包装、信息上报、API设计等&lt;/li&gt;
&lt;li&gt;提供一个可视化的管理后台&lt;/li&gt;
&lt;li&gt;可以正确定位错误位置&lt;/li&gt;
&lt;li&gt;可以对上报的日志进行筛选、查询、聚类等操作&lt;/li&gt;
&lt;li&gt;可以用邮件、短信或集成在其他平台中通知开发者&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从一个前端初学者的角度，下面更多聊一下前端SDK的细节。&lt;/p&gt;
&lt;h3 id=&#34;前端SDK实现&#34;&gt;&lt;a href=&#34;#前端SDK实现&#34; class=&#34;headerlink&#34; title=&#34;前端SDK实现&#34;&gt;&lt;/a&gt;前端SDK实现&lt;/h3&gt;&lt;p&gt;前端实现上的技术重点有三：&lt;strong&gt;错误捕获和封装&lt;/strong&gt;，&lt;strong&gt;AJAX上报&lt;/strong&gt;和&lt;strong&gt;JSON字符串化参数&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在raven-js的&lt;code&gt;vendor&lt;/code&gt;目录下，引用&lt;code&gt;json-stringify-safe&lt;/code&gt;和&lt;code&gt;Tracekit&lt;/code&gt;。前者为了避免&lt;code&gt;JSON.stringify&lt;/code&gt;中出现的循环引用的情况，下面主要介绍后者。&lt;/p&gt;
&lt;h4 id=&#34;Tracekit&#34;&gt;&lt;a href=&#34;#Tracekit&#34; class=&#34;headerlink&#34; title=&#34;Tracekit&#34;&gt;&lt;/a&gt;Tracekit&lt;/h4&gt;&lt;p&gt;常见的方案就是拦截&lt;code&gt;window.onerror&lt;/code&gt;方法，在做完自己的工作后，调用原来的&lt;code&gt;window.onerror&lt;/code&gt;。自己的工作里包括对错误信息的同一美化和包装。raven.js在这里是借助Tracekit.js完成的。&lt;/p&gt;
&lt;p&gt;Tracekit主要分为两部分，&lt;code&gt;Tracekit.report()&lt;/code&gt;和&lt;code&gt;Tracekit.computeStackTraceWrapper()&lt;/code&gt;。前者主要用来绑定和解绑错误监听函数、拦截错误；后者主要用来格式化错误信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;Tracekit.report()&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;report()&lt;/code&gt;里，整体的设计和基本的观察者设计模式一样，内部成员&lt;code&gt;handlers&lt;/code&gt;保存所有的事件消费者，与事件处理函数相关的有四个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;subscribe()&lt;/code&gt;，绑定一个监听错误的函数，并在绑定第一个函数时替换原有的&lt;code&gt;window.onerror&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unsubscribe()&lt;/code&gt;，解绑一个监听错误的函数，需要提供函数的引用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unsubscribeAll()&lt;/code&gt;，解绑所有监听错误的函数，还原原有的&lt;code&gt;window.onerror&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;notifyHandlers()&lt;/code&gt;，触发错误时，将处理过的错误分发给各handlers&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;notifyHandlers&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;stack, isWindowError&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; exception = &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (isWindowError &amp;amp;&amp;amp; !&lt;span class=&#34;title class_&#34;&gt;TraceKit&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;collectWindowErrors&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; handlers) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (handlers.&lt;span class=&#34;title function_&#34;&gt;hasOwnProperty&lt;/span&gt;(i)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                handlers[i].&lt;span class=&#34;title function_&#34;&gt;apply&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;, [stack].&lt;span class=&#34;title function_&#34;&gt;concat&lt;/span&gt;(_slice.&lt;span class=&#34;title function_&#34;&gt;call&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;arguments&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (inner) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                exception = inner;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (exception) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; exception;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;另外，函数&lt;code&gt;installGlobalHandler()&lt;/code&gt;和&lt;code&gt;uninstallGlobalHandler()&lt;/code&gt;就是上文中用来拦截&lt;code&gt;window.onerror&lt;/code&gt;的函数。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;installGlobalHandler&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (_onErrorHandlerInstalled) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    _oldOnerrorHandler = _window.&lt;span class=&#34;property&#34;&gt;onerror&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    _window.&lt;span class=&#34;property&#34;&gt;onerror&lt;/span&gt; = traceKitWindowOnError;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    _onErrorHandlerInstalled = &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;uninstallGlobalHandler&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!_onErrorHandlerInstalled) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    _window.&lt;span class=&#34;property&#34;&gt;onerror&lt;/span&gt; = _oldOnerrorHandler;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    _onErrorHandlerInstalled = &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    _oldOnerrorHandler = &lt;span class=&#34;literal&#34;&gt;undefined&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;report()&lt;/code&gt;中最主要的函数是&lt;code&gt;traceKitWindowOnError()&lt;/code&gt;。它的工作流程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;查看lastException是否有正在处理的error，如果有则说明是当前错误引起的，使用&lt;code&gt;computeStackTrace.augmentStackTraceWithInitialElement()&lt;/code&gt;追加到当前的错误栈前。调用&lt;code&gt;processLastException()&lt;/code&gt;，将lastException的信息交给handler处理，并将lastException置空。&lt;/li&gt;
&lt;li&gt;如果lastException为空，且Error为错误对象，使用&lt;code&gt;computeStackTrace()&lt;/code&gt;格式化错误信息，再交给错误消费者。&lt;/li&gt;
&lt;li&gt;如果lastException为空，且Error不是错误对象（如字符串），则自行包装错误信息，交给消费者&lt;/li&gt;
&lt;li&gt;使用原来的&lt;code&gt;window.onerror()&lt;/code&gt;处理事件&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;traceKitWindowOnError&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;message, url, lineNo, colNo, ex&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; stack = &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (lastExceptionStack) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title class_&#34;&gt;TraceKit&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;computeStackTrace&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;augmentStackTraceWithInitialElement&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            lastExceptionStack,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            url,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            lineNo,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            message&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;processLastException&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (ex &amp;amp;&amp;amp; utils.&lt;span class=&#34;title function_&#34;&gt;isError&lt;/span&gt;(ex)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// non-string `ex` arg; attempt to extract stack trace&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        stack = &lt;span class=&#34;title class_&#34;&gt;TraceKit&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;computeStackTrace&lt;/span&gt;(ex);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;notifyHandlers&lt;/span&gt;(stack, &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 自行封装&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title function_&#34;&gt;notifyHandlers&lt;/span&gt;(stack, &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (_oldOnerrorHandler) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; _oldOnerrorHandler.&lt;span class=&#34;title function_&#34;&gt;apply&lt;/span&gt;(&lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;, &lt;span class=&#34;variable language_&#34;&gt;arguments&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Tracekit.computeStackTraceWrapper()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这一部分主要由下面几个函数组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;computeStackTraceFromStackProp()&lt;/code&gt;，处理Chrome和Gecko浏览器下的错误信息格式化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;computeStackTraceByWalkingCallerChain()&lt;/code&gt;，处理IE和Safari浏览器下的错误信息格式化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;augmentStackTraceWithInitialElement()&lt;/code&gt;，在当前错误栈底新增新的错误信息，用于&lt;code&gt;computeStackTraceByWalkingCallerChain()&lt;/code&gt;和第一部分的&lt;code&gt;processLastException()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;computeStackTrace()&lt;/code&gt;，格式化错误栈信息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中&lt;code&gt;computeStackTraceFromStackProp()&lt;/code&gt;通过换行符得到stack信息，并通过正则格式化所需要的错误信息，&lt;code&gt;computeStackTraceByWalkingCallerChain()&lt;/code&gt;是利用&lt;code&gt;arguments.caller&lt;/code&gt;得到错误栈信息并格式化。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;computeStackTrace()&lt;/code&gt;代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;computeStackTrace&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;ex, depth&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; stack = &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    depth = depth == &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt; ? &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; : +depth;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        stack = &lt;span class=&#34;title function_&#34;&gt;computeStackTraceFromStackProp&lt;/span&gt;(ex);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (stack) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; stack;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;title class_&#34;&gt;TraceKit&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;debug&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; e;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        stack = &lt;span class=&#34;title function_&#34;&gt;computeStackTraceByWalkingCallerChain&lt;/span&gt;(ex, depth + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (stack) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; stack;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;title class_&#34;&gt;TraceKit&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;debug&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; e;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;name&lt;/span&gt;: ex.&lt;span class=&#34;property&#34;&gt;name&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;message&lt;/span&gt;: ex.&lt;span class=&#34;property&#34;&gt;message&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;url&lt;/span&gt;: &lt;span class=&#34;title function_&#34;&gt;getLocationHref&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;除了Tracekit所做的工作外，raven本身也对console的log&amp;#x2F;warning&amp;#x2F;assert&amp;#x2F;error方法，&lt;code&gt;setTimeout&lt;/code&gt;，&lt;code&gt;setInterval&lt;/code&gt;,&lt;code&gt;requestAnimationFrame()&lt;/code&gt;以及各种事件handler进行了拦截。&lt;/p&gt;
&lt;p&gt;这里有个坑，跨域的问题无法拦截错误，解决办法就是对跨域的script标签加入crossorigin属性，并在后台配置&lt;code&gt;Access-Control-Allow-Origin=*&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;Raven&#34;&gt;&lt;a href=&#34;#Raven&#34; class=&#34;headerlink&#34; title=&#34;Raven&#34;&gt;&lt;/a&gt;Raven&lt;/h4&gt;&lt;p&gt;实际上，Tracekit本身已经完成对&lt;strong&gt;错误捕获和封装&lt;/strong&gt;。Raven为了便于在管理后台展示和管理，进一步提出了DSN、context等设计。raven-js的源码主要在&lt;code&gt;src/raven.js&lt;/code&gt;中。剩下两部分也是在其中实现的。下面分部分介绍一些：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DSN&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;DSN（Data Source Name）是Sentry对一个项目的定义。它由协议、端口、用户、密码、后台Sentry服务器地址、项目名组成。通过&lt;code&gt;Raven.config()&lt;/code&gt;设置。在&lt;code&gt;config()&lt;/code&gt;中通过正则匹配用户输入的DSN字符串，得到后台地址。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;config&lt;/span&gt;: &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;dsn, options&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; self = &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!dsn) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; self;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; globalOptions = self.&lt;span class=&#34;property&#34;&gt;_globalOptions&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 设置全局参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (options) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title function_&#34;&gt;each&lt;/span&gt;(options, &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;key, value&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// tags and extra are special and need to be put into context&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (key === &lt;span class=&#34;string&#34;&gt;&amp;#x27;tags&amp;#x27;&lt;/span&gt; || key === &lt;span class=&#34;string&#34;&gt;&amp;#x27;extra&amp;#x27;&lt;/span&gt; || key === &lt;span class=&#34;string&#34;&gt;&amp;#x27;user&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          self.&lt;span class=&#34;property&#34;&gt;_globalContext&lt;/span&gt;[key] = value;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          globalOptions[key] = value;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    self.&lt;span class=&#34;title function_&#34;&gt;setDSN&lt;/span&gt;(dsn);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 屏蔽跨域的无效错误&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    globalOptions.&lt;span class=&#34;property&#34;&gt;ignoreErrors&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;push&lt;/span&gt;(&lt;span class=&#34;regexp&#34;&gt;/^Script error\.?$/&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    globalOptions.&lt;span class=&#34;property&#34;&gt;ignoreErrors&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;push&lt;/span&gt;(&lt;span class=&#34;regexp&#34;&gt;/^Javascript error: Script error\.? on line 0$/&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// return for chaining&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; self;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;安装和卸载&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;install()&lt;/code&gt;和&lt;code&gt;uninstall()&lt;/code&gt;函数中完成。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;install()&lt;/code&gt;中完成了下面的工作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;借助Tracekit监听了全局的错误事件&lt;/li&gt;
&lt;li&gt;监听try catch和一些浏览器事件过程（如console，click，fetch等）中的信息&lt;/li&gt;
&lt;li&gt;安装插件&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;install&lt;/span&gt;: &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; self = &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (self.&lt;span class=&#34;title function_&#34;&gt;isSetup&lt;/span&gt;() &amp;amp;&amp;amp; !self.&lt;span class=&#34;property&#34;&gt;_isRavenInstalled&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 订阅所有错误事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;title class_&#34;&gt;TraceKit&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;report&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;subscribe&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            self.&lt;span class=&#34;property&#34;&gt;_handleOnErrorStackInfo&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;apply&lt;/span&gt;(self, &lt;span class=&#34;variable language_&#34;&gt;arguments&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 下方的函数会修改原回调函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 需要修改函数的toString方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.&lt;span class=&#34;title function_&#34;&gt;_patchFunctionToString&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 封装定时器和事件回调函数以提供更好的错误监控&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (self.&lt;span class=&#34;property&#34;&gt;_globalOptions&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;instrument&lt;/span&gt; &amp;amp;&amp;amp; self.&lt;span class=&#34;property&#34;&gt;_globalOptions&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;instrument&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;tryCatch&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            self.&lt;span class=&#34;title function_&#34;&gt;_instrumentTryCatch&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 一些浏览器原生方法的封装，以捕获事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 设置里可关闭&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (self.&lt;span class=&#34;property&#34;&gt;_globalOptions&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;autoBreadcrumbs&lt;/span&gt;) self.&lt;span class=&#34;title function_&#34;&gt;_instrumentBreadcrumbs&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 安装所有插件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.&lt;span class=&#34;title function_&#34;&gt;_drainPlugins&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 更新状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.&lt;span class=&#34;property&#34;&gt;_isRavenInstalled&lt;/span&gt; = &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;title class_&#34;&gt;Error&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;stackTraceLimit&lt;/span&gt; = self.&lt;span class=&#34;property&#34;&gt;_globalOptions&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;stackTraceLimit&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;uninstall&lt;/code&gt;中还原了对浏览器原方法的修改，并卸载了Tracekit的report。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;封装函数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;相关函数：&lt;code&gt;context()&lt;/code&gt;和&lt;code&gt;wrap()&lt;/code&gt;。完成的主要工作是对浏览器原生方法的拦截，使得能更好地捕获其中的错误，在对象内部使用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;capture相关&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;用来捕获事件，有三种用法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;captureException()&lt;/code&gt;，最典型的用法，借助Tracekit捕获页面的异常，之后进一步封装成frame后交给&lt;code&gt;_send()&lt;/code&gt;发送&lt;/li&gt;
&lt;li&gt;&lt;code&gt;captureMessage()&lt;/code&gt;，最常用的用法，类似埋点，将信息封装成frame后交给&lt;code&gt;_send()&lt;/code&gt;发送&lt;/li&gt;
&lt;li&gt;&lt;code&gt;captureBreadcrumb&lt;/code&gt;，类似&lt;code&gt;captureMessage()&lt;/code&gt;，不过储存信息在&lt;code&gt;this._breadcrumbs&lt;/code&gt;，并不交给&lt;code&gt;_send()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;captureException&lt;/span&gt;: &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;ex, options&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ex不是错误时的处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Get actual Error from ErrorEvent&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;title function_&#34;&gt;isErrorEvent&lt;/span&gt;(ex)) ex = ex.&lt;span class=&#34;property&#34;&gt;error&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Store the raw exception object for potential debugging and introspection&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;_lastCapturedException&lt;/span&gt; = ex;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// TraceKit.report will re-raise any exception passed to it,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// which means you have to wrap it in try/catch. Instead, we&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// can wrap it here and only re-raise if TraceKit.report&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// raises an exception different from the one we asked to&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// report on.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; stack = &lt;span class=&#34;title class_&#34;&gt;TraceKit&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;computeStackTrace&lt;/span&gt;(ex);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;_handleStackInfo&lt;/span&gt;(stack, options);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;catch&lt;/span&gt; (ex1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (ex !== ex1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; ex1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;variable language_&#34;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;值得注意的是&lt;code&gt;captureMessage&lt;/code&gt;中可以设置rate，使一些消息不上报。白名单、正则过滤也是在这里完成的。&lt;code&gt;captureException&lt;/code&gt;则是在&lt;code&gt;_processException&lt;/code&gt;中完成的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;设置context&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;context包括三部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tags，用于从不同维度标识错误或信息，使用&lt;code&gt;setTagsContext()&lt;/code&gt;全局配置&lt;/li&gt;
&lt;li&gt;users，用于标识错误来源，使用&lt;code&gt;setUsersContext()&lt;/code&gt;配置&lt;/li&gt;
&lt;li&gt;extra，用来携带额外的信息，这部分信息不会被索引，使用&lt;code&gt;setExtraContext()&lt;/code&gt;配置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;它们都放在&lt;code&gt;Raven._globalContext&lt;/code&gt;中。涉及的函数还有&lt;code&gt;clearContext()&lt;/code&gt;和&lt;code&gt;getContext()&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;同时&lt;code&gt;environment&lt;/code&gt;和&lt;code&gt;release&lt;/code&gt;也放在&lt;code&gt;Raven._globalContext&lt;/code&gt;中，可以通过&lt;code&gt;setEnvironment&lt;/code&gt;和&lt;code&gt;setRelease&lt;/code&gt;设置&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BreadCrumb&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这部分功能是在&lt;code&gt;_instrumentTryCatch&lt;/code&gt;和&lt;code&gt;_instrumentBreadcrumbs&lt;/code&gt;方法里实现的。它们通过重写原方法，捕获其中的错误和事件。在卸载时，通过&lt;code&gt;restoreBuiltin&lt;/code&gt;还原。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;发送&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在&lt;code&gt;send()&lt;/code&gt;方法中，会使用封装好的数据附加上&lt;code&gt;_globalOptions&lt;/code&gt;中的数据，附带浏览器的状态信息（&lt;code&gt;_getHttpdata()&lt;/code&gt;中实现）之后交由&lt;code&gt;_sendProcessedPayload()&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;_sendProcessedPayload()&lt;/code&gt;中，会裁剪过长的信息（message, stack, url, referer等）添加请求头，设置发送目标，传入成功和失败回调调用发送函数&lt;code&gt;_makeRequest()&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;_makeRequest()&lt;/code&gt;中，为了跨域发送，会优先尝试fetch，然后尝试带有withCredentials字段的XMLHttpRequest，最后采用XDomainRequest对象发送。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;_makeRequest&lt;/span&gt;: &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;opts&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Auth is intentionally sent as part of query string (NOT as custom HTTP header) to avoid preflight CORS requests&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; url = opts.&lt;span class=&#34;property&#34;&gt;url&lt;/span&gt; + &lt;span class=&#34;string&#34;&gt;&amp;#x27;?&amp;#x27;&lt;/span&gt; + &lt;span class=&#34;title function_&#34;&gt;urlencode&lt;/span&gt;(opts.&lt;span class=&#34;property&#34;&gt;auth&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;title function_&#34;&gt;supportsFetch&lt;/span&gt;()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; _window&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            .&lt;span class=&#34;title function_&#34;&gt;fetch&lt;/span&gt;(url, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;attr&#34;&gt;method&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;POST&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;attr&#34;&gt;body&lt;/span&gt;: &lt;span class=&#34;title function_&#34;&gt;stringify&lt;/span&gt;(opts.&lt;span class=&#34;property&#34;&gt;data&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            .&lt;span class=&#34;title function_&#34;&gt;then&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;response&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (response.&lt;span class=&#34;property&#34;&gt;ok&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    opts.&lt;span class=&#34;property&#34;&gt;onSuccess&lt;/span&gt; &amp;amp;&amp;amp; opts.&lt;span class=&#34;title function_&#34;&gt;onSuccess&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;span class=&#34;comment&#34;&gt;// ..&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            [&lt;span class=&#34;string&#34;&gt;&amp;#x27;catch&amp;#x27;&lt;/span&gt;](&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                opts.&lt;span class=&#34;property&#34;&gt;onError&lt;/span&gt; &amp;amp;&amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    opts.&lt;span class=&#34;title function_&#34;&gt;onError&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Error&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Sentry error code: network unavailable&amp;#x27;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; request = _window.&lt;span class=&#34;property&#34;&gt;XMLHttpRequest&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; _window.&lt;span class=&#34;title class_&#34;&gt;XMLHttpRequest&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!request) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// if browser doesn&amp;#x27;t support CORS (e.g. IE7), we are out of luck&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; hasCORS = &lt;span class=&#34;string&#34;&gt;&amp;#x27;withCredentials&amp;#x27;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; request || &lt;span class=&#34;keyword&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;XDomainRequest&lt;/span&gt; !== &lt;span class=&#34;string&#34;&gt;&amp;#x27;undefined&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!hasCORS) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;string&#34;&gt;&amp;#x27;withCredentials&amp;#x27;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; request) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        request.&lt;span class=&#34;property&#34;&gt;onreadystatechange&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (request.&lt;span class=&#34;property&#34;&gt;readyState&lt;/span&gt; !== &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (request.&lt;span class=&#34;property&#34;&gt;status&lt;/span&gt; === &lt;span class=&#34;number&#34;&gt;200&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                opts.&lt;span class=&#34;property&#34;&gt;onSuccess&lt;/span&gt; &amp;amp;&amp;amp; opts.&lt;span class=&#34;title function_&#34;&gt;onSuccess&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (opts.&lt;span class=&#34;property&#34;&gt;onError&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; err = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Error&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Sentry error code: &amp;#x27;&lt;/span&gt; + request.&lt;span class=&#34;property&#34;&gt;status&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                err.&lt;span class=&#34;property&#34;&gt;request&lt;/span&gt; = request;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                opts.&lt;span class=&#34;title function_&#34;&gt;onError&lt;/span&gt;(err);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        request = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;XDomainRequest&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// xdomainrequest cannot go http -&amp;gt; https (or vice versa),&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// so always use protocol relative&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        url = url.&lt;span class=&#34;title function_&#34;&gt;replace&lt;/span&gt;(&lt;span class=&#34;regexp&#34;&gt;/^https?:/&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// onreadystatechange not supported by XDomainRequest&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (opts.&lt;span class=&#34;property&#34;&gt;onSuccess&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            request.&lt;span class=&#34;property&#34;&gt;onload&lt;/span&gt; = opts.&lt;span class=&#34;property&#34;&gt;onSuccess&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (opts.&lt;span class=&#34;property&#34;&gt;onError&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            request.&lt;span class=&#34;property&#34;&gt;onerror&lt;/span&gt; = &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; err = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Error&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Sentry error code: XDomainRequest&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                err.&lt;span class=&#34;property&#34;&gt;request&lt;/span&gt; = request;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                opts.&lt;span class=&#34;title function_&#34;&gt;onError&lt;/span&gt;(err);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    request.&lt;span class=&#34;title function_&#34;&gt;open&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;POST&amp;#x27;&lt;/span&gt;, url);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    request.&lt;span class=&#34;title function_&#34;&gt;send&lt;/span&gt;(&lt;span class=&#34;title function_&#34;&gt;stringify&lt;/span&gt;(opts.&lt;span class=&#34;property&#34;&gt;data&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;至此，&lt;strong&gt;错误捕获和封装&lt;/strong&gt;，&lt;strong&gt;AJAX上报&lt;/strong&gt;和&lt;strong&gt;JSON字符串化参数&lt;/strong&gt;都已完成。&lt;/p&gt;
&lt;h3 id=&#34;可视化后台&#34;&gt;&lt;a href=&#34;#可视化后台&#34; class=&#34;headerlink&#34; title=&#34;可视化后台&#34;&gt;&lt;/a&gt;可视化后台&lt;/h3&gt;&lt;p&gt;在自己设计异常监控系统时，需要和后台商量好接口的设定。用Express + React&amp;#x2F;Vue等方案快速搭建。&lt;/p&gt;
&lt;h3 id=&#34;参考&#34;&gt;&lt;a href=&#34;#参考&#34; class=&#34;headerlink&#34; title=&#34;参考&#34;&gt;&lt;/a&gt;参考&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://sentry.io/&#34;&gt;sentry.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/getsentry/raven-js&#34;&gt;getsentry&amp;#x2F;raven-js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/26085642&#34;&gt;前端异常监控系统的落地&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://shenlvmeng.github.com/blog/2017/09/04/pwa-and-hybrid-brief/</guid>
            <title>PWA以及Hybrid开发方案简介</title>
            <link>http://shenlvmeng.github.com/blog/2017/09/04/pwa-and-hybrid-brief/</link>
            <category>PWA</category>
            <category>hybrid</category>
            <category>JSBridge</category>
            <category>Web Worker</category>
            <category>Service Worker</category>
            <pubDate>Mon, 04 Sep 2017 17:59:00 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;PWA&#34;&gt;&lt;a href=&#34;#PWA&#34; class=&#34;headerlink&#34; title=&#34;PWA&#34;&gt;&lt;/a&gt;PWA&lt;/h2&gt;&lt;p&gt;PWA(Progressive Web App)渐进增强的Web App。最早提出在2015年，它最初的设计理念是，保留Web的精髓，让Web逐渐演进成App，而非现在Hybrid App（即现在最常用的UIWebView&amp;#x2F;WebView+前端）形式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可安装性&lt;/li&gt;
&lt;li&gt;离线能力&lt;/li&gt;
&lt;li&gt;推送能力&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在PWA的概念下，网页可以被添加到主屏同时支持全屏运行，在Service Worker帮助下可以离线运行，最后它仍是Web而并不用添加到App Store中。&lt;/p&gt;
&lt;p&gt;说到Service Worker很多人可能会想到Web Worker的概念。这两个看起来是包含关系的概念实际上有区别。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Web Worker是JS多线程的一种实现方式，借助它可以让脚本在后台运行，worker对象和主线程通过message的方式交流，caniuse上的支持度为93%&lt;/li&gt;
&lt;li&gt;Service Worker是浏览器的一个新特性，配合PWA的概念一起使用，是PWA网络请求的代理，结合缓存管理等方案，提供很好的离线体验，caniuse支持度仅有73%&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个&lt;a href=&#34;https://nolanlawson.github.io/cascadia-2016/#/35&#34;&gt;介绍ppt&lt;/a&gt;上展示了具体的区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;和tab的关系，Web Worker是一tab对多Web Worker，Service Worker则是多对一&lt;/li&gt;
&lt;li&gt;生命周期，Web Worker和选项卡同生共死，Service Worker则是完全独立的&lt;/li&gt;
&lt;li&gt;擅长场景，Web Worker用在多线程协同，Service Worker则可以提供很好的离线体验&lt;/li&gt;
&lt;li&gt;为保证安全Service Worker要求scheme为https&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Service Worker通过&lt;code&gt;navigator.serviceWorker.register(&amp;#39;path&amp;#39;).then&lt;/code&gt;的方式注册，之后便能通过监听事件拿到所有scope里发生的请求，当然，可以在path后的第二个参数中显式地声明作用域（如&lt;code&gt;&amp;#123;scope: &amp;#39;/js&amp;#39;&amp;#125;&lt;/code&gt;）。Service Worker可以监听它声明周期中的各事件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Install&lt;/strong&gt; 发生在第一次注册和sw.js（这里的文件名只是举个例子）改变时，通常在这个阶段设定SW的初始状态和准备好缓存。缓存可以借助&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/API/Cache&#34;&gt;caches API&lt;/a&gt;完成。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fetch&lt;/strong&gt; 发生在网络请求产生时，任何匹配了Request的网络请求都会被拦截，并返回缓存数据。只有找不到存在的缓存，才会产生一个请求&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Activate&lt;/strong&gt; 发生在SW更新或网页关掉再重新打开时，触发在install之后&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sync&lt;/strong&gt; 发生在用户有网络时，用在用户进行依赖网络的操作时，会推迟到有网络时再执行。简单来说，所有的依赖网络的操作，都需要使用sync事件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了Service Worker，Manifest也是很重要的一部分。它用来描述应用程序的各种信息。它包括下面一些成员&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;background-color&lt;/strong&gt; 在css加载前用作应用背景颜色&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt; 应用名，&lt;strong&gt;short_name&lt;/strong&gt;也是类似意思&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;description&lt;/strong&gt; 应用描述&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;display&lt;/strong&gt; 显示模式，有&lt;code&gt;fullscreen&lt;/code&gt;, &lt;code&gt;standalone&lt;/code&gt;, &lt;code&gt;minimal-ui&lt;/code&gt;和&lt;code&gt;browser&lt;/code&gt;几种可以选择&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;icons&lt;/strong&gt; 应用图标，数组类型，每项包含&lt;code&gt;src&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt;和&lt;code&gt;sizes&lt;/code&gt;几个属性&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;orientation&lt;/strong&gt; 默认的屏幕朝向&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://pwa.rocks/&#34;&gt;这里&lt;/a&gt;有一个收集PWA酷站的地方。&lt;/p&gt;
&lt;h2 id=&#34;Hybrid方案相关&#34;&gt;&lt;a href=&#34;#Hybrid方案相关&#34; class=&#34;headerlink&#34; title=&#34;Hybrid方案相关&#34;&gt;&lt;/a&gt;Hybrid方案相关&lt;/h2&gt;&lt;p&gt;离线包管理方案：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;本地开发测试，提交特性分支到远端，&lt;/li&gt;
&lt;li&gt;通过提MR的方式合并在当前迭代分支上，触发basement自动CI为zip格式，根据当前发包的状态，传递给NebulaMng管理&lt;/li&gt;
&lt;li&gt;NebulaMng基于zip生成版本号和配置文件，构建整个离线包，并推送给应用中心&lt;/li&gt;
&lt;li&gt;应用中心负责向客户端推送更新&lt;/li&gt;
&lt;li&gt;客户端根据策略拉取离线包、解压、渲染&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;离线包本地渲染方案：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;加载公共资源包&lt;/li&gt;
&lt;li&gt;判断本地是否已安装该离线包，若有，则加载到内存，否则触发离线包下载&lt;/li&gt;
&lt;li&gt;WebView加载离线包url链接，加载前检查内存中是否存在页面数据，若有，从内存中取出并渲染，否则fallback到线上cdn地址&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;离线包更新方案：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;应用中心广播或服务端发sync消息触发&lt;/li&gt;
&lt;li&gt;向wapcenter获取当前客户端下所有包信息&lt;/li&gt;
&lt;li&gt;在本地没有当前版本且WiFi条件或auto_install为1时更新本地包&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;双向通信和JSBridge原理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WebView在载入页面时，注入JSBridge脚本。通过调用JSBridge.call，触发调用参数的序列化，并调用&lt;code&gt;console.log(h5container.message:xxx)&lt;/code&gt;或&lt;code&gt;window.prompt&lt;/code&gt;事件。WebView监听页面的console或prompt事件，解析传递的参数信息，然后通过NebulaService分发事件&lt;/li&gt;
&lt;li&gt;Service、Session、Page实例化时，内部都有一个H5PluginManager成员，通过类似EventEmitter的形式存储着一个action -&amp;gt; plugin的map。每个plugin都有interceptEvent和handleEvent两个函数，处理事件的拦截和处理两个阶段&lt;/li&gt;
&lt;li&gt;WebView通过loadUrl(“javascript:JsBridge.callback”)的形式输入结果并运行回调&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实现上类似这样：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;;&lt;span class=&#34;comment&#34;&gt;//JsBridge&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;window&lt;/span&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; callbackList = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable language_&#34;&gt;window&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;JsBridge&lt;/span&gt; = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/* 参数说明&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * @evt &amp;#123;string&amp;#125; 调用接口名称 (必须)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * @params &amp;#123;object&amp;#125; 配置参数 (可选)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * @callback &amp;#123;function&amp;#125; 回调函数 (可选)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;call&lt;/span&gt;: &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;evt, params, callback&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;//第一个参数必须为string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;typeof&lt;/span&gt; evt != &lt;span class=&#34;string&#34;&gt;&amp;#x27;string&amp;#x27;&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;typeof&lt;/span&gt; params == &lt;span class=&#34;string&#34;&gt;&amp;#x27;function&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        callback = params;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        params = &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;typeof&lt;/span&gt; params != &lt;span class=&#34;string&#34;&gt;&amp;#x27;object&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        params = &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; callbackId = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Date&lt;/span&gt;().&lt;span class=&#34;title function_&#34;&gt;getTime&lt;/span&gt;() + &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;typeof&lt;/span&gt; callback == &lt;span class=&#34;string&#34;&gt;&amp;#x27;function&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        callbackList[callbackId] = callback;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; msg = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;callbackId&lt;/span&gt;: callbackId,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;action&lt;/span&gt;: evt,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;attr&#34;&gt;data&lt;/span&gt;: params || &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title function_&#34;&gt;prompt&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;JsBridgeCall&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;title class_&#34;&gt;JSON&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;stringify&lt;/span&gt;(msg));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/* 参数说明&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * @params &amp;#123;object&amp;#125; 返回的数据 (必须)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 数据示例：&amp;#123; callbackId: &amp;#x27;xxx&amp;#x27;, data: &amp;#x27;&amp;#x27; &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;callback&lt;/span&gt;: &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;params&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// params = JSON.parse(params);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; callbackId = params.&lt;span class=&#34;property&#34;&gt;callbackId&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        data = params.&lt;span class=&#34;property&#34;&gt;data&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        callbackHandler = callbackList[callbackId];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      callbackHandler &amp;amp;&amp;amp; callbackHandler.&lt;span class=&#34;title function_&#34;&gt;call&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;, data);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;delete&lt;/span&gt; callbackList[callbackId]; &lt;span class=&#34;comment&#34;&gt;//删除回调&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)(&lt;span class=&#34;variable language_&#34;&gt;window&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;;&lt;span class=&#34;comment&#34;&gt;//JsBridgeReady&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;variable language_&#34;&gt;document&lt;/span&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; evt = &lt;span class=&#34;variable language_&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;createEvent&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;HTMLEvents&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  evt.&lt;span class=&#34;title function_&#34;&gt;initEvent&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;JsBridgeReady&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable language_&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;dispatchEvent&lt;/span&gt;(evt)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)(&lt;span class=&#34;variable language_&#34;&gt;document&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;native和H5混合方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在RootView中创建离线包View再异步添加进来&lt;/li&gt;
&lt;li&gt;通过JSBridge进行交互&lt;/li&gt;
&lt;li&gt;提前拦截touch事件，防止冲突&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
    </channel>
</rss>
