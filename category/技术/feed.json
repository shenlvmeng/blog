{
    "version": "https://jsonfeed.org/version/1",
    "title": "Shenlvmeng's Blog • All posts by \"技术\" category",
    "description": "Be sharp, my friend.",
    "home_page_url": "http://shenlvmeng.github.com/blog",
    "items": [
        {
            "id": "http://shenlvmeng.github.com/blog/2021/12/20/deep-link-note/",
            "url": "http://shenlvmeng.github.com/blog/2021/12/20/deep-link-note/",
            "title": "deeplink技术分析",
            "date_published": "2021-12-20T14:48:09.000Z",
            "content_html": "<p><a href=\"https://en.wikipedia.org/wiki/Deep_linking\">deep link</a>是指可以从任何渠道，包括短信、应用内、网页中直接跳转到应用app内的特定页面的技术。它一定程度上打破了移动端app间“孤岛”的局面，实现了快捷的跳转。根据是否安装app，主要有下面两种行为：</p>\n<ul>\n<li>已安装，唤起app并跳转到特定页面</li>\n<li>未安装，跳转到App Store或下载页面引导用户下载安装，在下载后的第一次打开自动跳转到特定深度页面，这种情况也叫<strong>deferred deep link</strong></li>\n</ul>\n<p><img src=\"https://support.staffbase.com/hc/article_attachments/115003896431/deeplink_deeplink-browser-app.png\" alt=\"deep-link-info\"></p>\n<h2 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h2><p>deep link可以应用在很多常见的场景下，如</p>\n<ul>\n<li>社交分享</li>\n<li>广告引流</li>\n<li>web和app互通</li>\n<li>裂变活动</li>\n<li>短信、邮件营销</li>\n</ul>\n<p>在web和app互通场景下，可以很方便地实现从外部回流页回到app内特定位置，如：</p>\n<ul>\n<li>电商类app：分享H5跳转到特定商品页</li>\n<li>游戏类app：分享H5跳转到特定房间或任务</li>\n<li>直播类app：分享H5跳转到特定直播间</li>\n</ul>\n<p>deep link缩短了操作路径，减少了用户操作成本，从而降低用户流失率，帮助app拉新和留存。</p>\n<h2 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h2><p>常见的实现方式有下面几种</p>\n<ul>\n<li>URL scheme，iOS和Android下的通用方式，打开前会询问是否打开某app</li>\n<li><a href=\"https://developer.chrome.com/docs/multidevice/android/intents/\">Chrome Intent</a>，Chrome 25+无法通过URL scheme 唤起 App，必须使用Intent</li>\n<li>Universal Link，适用于iOS 9及更高版本，点击http&#x2F;https即跳转，操作丝滑</li>\n<li>App Links，适用于Android 6及更高版本，点击http&#x2F;https即跳转，操作丝滑</li>\n</ul>\n<p>除了上面几种，还有<a href=\"https://developer.apple.com/documentation/webkit/promoting_apps_with_smart_app_banners\">Smart App Banners</a>、剪贴板等方案</p>\n<h3 id=\"URL-scheme\"><a href=\"#URL-scheme\" class=\"headerlink\" title=\"URL scheme\"></a>URL scheme</h3><p>格式形如<code>[scheme:][//authority][path][?query][#fragment]</code>，一般使用在iOS 9和Android 6之前。方法通用，但有以下问题：</p>\n<ul>\n<li>本身没有规范，难以获知要跳转的path或query</li>\n<li>功能不全，app越复杂，scheme就越复杂</li>\n<li>会被拦截，包括浏览器或应用的webview，如微信</li>\n<li>打开app失败后，iOS会有错误弹窗，体验不好<ul>\n<li>提示网页无效</li>\n</ul>\n</li>\n<li>URL scheme可能重复</li>\n</ul>\n<p>常见Scheme URL</p>\n<table>\n<thead>\n<tr>\n<th>微信</th>\n<th>电商</th>\n<th>浏览器</th>\n<th>系统</th>\n<th>其他</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>weixin:&#x2F;&#x2F;dl&#x2F;scan 扫一扫<br />weixin:&#x2F;&#x2F;dl&#x2F;moments 朋友圈<br /> weixin:&#x2F;&#x2F;dl&#x2F;settings 设置</td>\n<td>淘宝：taobao:&#x2F;&#x2F;<br />支付宝：alipay:&#x2F;&#x2F;<br />美团：imeituan:&#x2F;&#x2F;</td>\n<td>Chrome：googlechrome:&#x2F;&#x2F;<br />UC 浏览器：ucbrowser:&#x2F;&#x2F;</td>\n<td>邮箱：mailto:&#x2F;&#x2F;<br />短信：message:&#x2F;&#x2F;<br />App Store：itms-appss:&#x2F;&#x2F;  macappstores:&#x2F;&#x2F;</td>\n<td>飞书：lark:&#x2F;&#x2F;<br />微博：sinaweibo:&#x2F;&#x2F;</td>\n</tr>\n</tbody></table>\n<h3 id=\"Chrome-Intent\"><a href=\"#Chrome-Intent\" class=\"headerlink\" title=\"Chrome Intent\"></a>Chrome Intent</h3><p>Chrome 25+无法通过iframe的src启动Android app。改为构造形如下面的intent锚点。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">intent:  </span><br><span class=\"line\">   HOST/URI-path // Optional host  </span><br><span class=\"line\">   #Intent;  </span><br><span class=\"line\">      package=\\[string\\];  </span><br><span class=\"line\">      action=\\[string\\];  </span><br><span class=\"line\">      category=\\[string\\];  </span><br><span class=\"line\">      component=\\[string\\];  </span><br><span class=\"line\">      scheme=\\[string\\];  </span><br><span class=\"line\">   end;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>end</code>前添加<code>S.browser_fallback_url=[encoded_full_url]</code>可以指定唤起失败的地址。一个构造好的intent形如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">intent://path#Intent;scheme=xxx;package=com. xxx;S.browser_fallback_url=https://xxx;end</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Universal-Link\"><a href=\"#Universal-Link\" class=\"headerlink\" title=\"Universal Link\"></a>Universal Link</h3><blockquote>\n<p><a href=\"https://developer.apple.com/ios/universal-links/\">官方介绍</a></p>\n</blockquote>\n<p>Universal Link，即通用链接，是iOS 9推出的通过HTTPS链接来启动app的特性。既可以打开app，在没有安装时，则打开特定网页。对比URL Scheme优势在于：</p>\n<ul>\n<li>无缝切换，不弹窗确认</li>\n<li>兼容性好，未安装时直接打开网页</li>\n<li>使用通用的HTTP协议，不用担心scheme重复</li>\n<li>通过网站的配置文件和app关联，保证安全</li>\n</ul>\n<p>在网站下根目录或<code>.well-known</code>路径下需要有<code>apple-app-association</code>（无后缀名）JSON文件。例如，知乎的配置文件为<a href=\"https://oia.zhihu.com/apple-app-site-association%E3%80%82%E5%9C%A8%E9%85%8D%E7%BD%AE%E6%97%B6%EF%BC%8C\">https://oia.zhihu.com/apple-app-site-association。在配置时，</a></p>\n<ul>\n<li>需要保证有一个HTTPS的域名，最好和web网页域名区分开，保证web网页的正常访问</li>\n<li>在开发者中心 ，Identifiers下 AppIDs 找到自己的App ID，编辑打开Associated Domains服务</li>\n<li>打开工程配置中的 Associated Domains ，在其中的 Domains 中填入你想支持的域名，必须以<code>applinks:</code>为前缀</li>\n<li>配置<code>apple-app-site-association</code>文件，不带任何后缀，上传该文件到服务器的根目录或者<code>.well-known</code>目录下</li>\n</ul>\n<p><img src=\"https://docs-assets.developer.apple.com/published/4cbbb0bb235bdd82277b0f8d294afab8/13300/supporting-associated-domains-1@2x.png\"></p>\n<p>在网站下配置好Universal Link后，用户点击网站链接后，即会直接跳转到App，而不需要经过浏览器。当然，微信等app还是会拦截Universal Link的行为，需要在微信注册自己的应用id和Universal Link。</p>\n<h3 id=\"App-Links\"><a href=\"#App-Links\" class=\"headerlink\" title=\"App Links\"></a>App Links</h3><blockquote>\n<p><a href=\"https://developer.android.google.cn/studio/write/app-link-indexing\">官方介绍</a></p>\n</blockquote>\n<p>App Links，类似Universal Link，是Android 6（Android M）及以上操作系统中适用的HTTPS路径链接。可以直接将用户带入到Android app内的特定页面中，实现上，网站配置文件名为<code>assetlink</code>，只能放在<code>.well-known</code>目录下。如<a href=\"https://vt.tiktok.com/.well-known/assetlinks.json%E3%80%82%E4%B8%8D%E8%BF%87%EF%BC%8C%E5%9B%BD%E4%BA%A7%E7%9A%84%E5%AE%89%E5%8D%93%E7%89%88%E6%9C%AC%E4%BB%A5%E5%8F%8A%E5%BE%AE%E4%BF%A1%E7%AD%89app%E4%BE%9D%E6%97%A7%E4%BC%9A%E6%8B%A6%E6%88%AA%E3%80%82\">https://vt.tiktok.com/.well-known/assetlinks.json。不过，国产的安卓版本以及微信等app依旧会拦截。</a></p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><ul>\n<li>Android webview本身支持唤醒第三方app，但如果设置了自定义WebViewClient则需要自己处理，具体是指在<code>shouldOverrideUrlLoading</code>方法中决定如何处理</li>\n<li>Smart App Banners，在网页里增加一个<code>&lt;meta&gt;</code>标签，可以在打开页面时，检测手机是否安装某个app，并且在页面顶部显示一个Banner显示App的基本信息，安装时显示打开，未安装时显示安装</li>\n</ul>\n<h2 id=\"相关产品或开源库\"><a href=\"#相关产品或开源库\" class=\"headerlink\" title=\"相关产品或开源库\"></a>相关产品或开源库</h2><p>结合点击行为、重定向行为、来源去向分析、落地页等，还可以做很多事情，市面上也有下面一些产品：</p>\n<ul>\n<li><a href=\"https://www.mob.com/mobService/moblink\">MobLink</a></li>\n<li><a href=\"https://www.linkedme.cc/link-page.html\">LinkedMe</a></li>\n<li><a href=\"https://www.openinstall.io/deeplinking.html\">openinstall</a></li>\n</ul>\n<p>另外，也有一些开源库实现web跳转app</p>\n<ul>\n<li><a href=\"https://github.com/suanmei/callapp-lib\">https://github.com/suanmei/callapp-lib</a></li>\n<li><a href=\"https://github.com/jawidx/web-launch-app\">https://github.com/jawidx/web-launch-app</a></li>\n<li><a href=\"https://github.com/luojinghui/web-open-app\">https://github.com/luojinghui/web-open-app</a></li>\n</ul>\n<p><em>–END–</em></p>\n",
            "tags": [
                "引流",
                "universal-link",
                "app-link"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2020/04/17/fe-coverage-improve/",
            "url": "http://shenlvmeng.github.com/blog/2020/04/17/fe-coverage-improve/",
            "title": "前端代码覆盖率实时统计改进方案",
            "date_published": "2020-04-16T16:08:03.000Z",
            "content_html": "<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p><a href=\"https://shenlvmeng.github.io/blog/2020/04/16/fe-coverage-scheme/\">旧的覆盖率方案</a>实现了覆盖率采集的可行性探索。但是旧方案中也存在着侵入较多，适用场景有局限性，istanbul版本老旧，sourcemap支持不足等问题需要优化。有关覆盖率采集、维护、呈现、上报需要一个更通用和更具可拓展性的方案。</p>\n<p>因此，在对整个覆盖率要解决的问题和目标进行抽象后，可以得到以下的实现方案。</p>\n<h2 id=\"整体结构\"><a href=\"#整体结构\" class=\"headerlink\" title=\"整体结构\"></a>整体结构</h2><p><img src=\"https://s1.ax1x.com/2020/04/16/JEZ1J0.png\" alt=\"整体结构\"></p>\n<p>新的覆盖率方案可以分为3层：</p>\n<ul>\n<li><strong>采集层</strong>，这一层主要解决对代码进行<strong>插桩</strong>（instrument）的过程，只有插桩过的代码才能在执行的过程中不断积累覆盖率数据，从而通过端到端测试得到代码的覆盖率情况</li>\n<li><strong>数据层</strong>，采集到的覆盖率数据有上报的需求，浏览器端数据只有上报到服务端才能查看和操作，如果接入第三方平台，就更需要有专门数据<strong>处理和上报</strong>，这一层正是完成这部分工作</li>\n<li><strong>视图层</strong>，方案要自带<strong>视图化</strong>能力，给开发者更直观的反馈，同时要有<strong>可交互性</strong>，满足开发者的日常需求。这一层要能比较方便地绑定到流行的服务端环境中，减少侵入成本</li>\n</ul>\n<p>整体实现上，基于新版本<a href=\"https://github.com/gotwarlost/istanbul\">istanbuljs</a>。下面分层介绍各层实现中需要进行的工作。</p>\n<h2 id=\"采集层\"><a href=\"#采集层\" class=\"headerlink\" title=\"采集层\"></a>采集层</h2><p>代码插桩实现中，拆分为下面几点：</p>\n<h3 id=\"babel-preset\"><a href=\"#babel-preset\" class=\"headerlink\" title=\"babel preset\"></a>babel preset</h3><p>对于使用babel转码的工程来说，<a href=\"https://github.com/istanbuljs/babel-plugin-istanbul\">babel-plugin-istanbul</a>直接提供了一个可以插桩代码的插件。这里要做的只是区分线上和其他环境，以及预定义preset，减少用户babel配置成本。</p>\n<p>babel preset的书写可以参考<a href=\"https://babeljs.io/docs/en/presets#creating-a-preset\">babel preset</a>一节，我们只需将原先<code>.babelrc</code>或<code>babel.config.js</code>中的配置项用<code>require</code>包裹即可。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">env</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">development</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">                    [<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;babel-plugin-istanbul&#x27;</span>)]</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"attr\">boe</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">                    [<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;babel-plugin-istanbul&#x27;</span>)]</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>相对应的，接入方需要额外在<code>scm_build.sh</code>脚本中额外传入boe环境变量来区分boe和线上环境：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$BUILD_TYPE</span> = <span class=\"string\">&quot;offline&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    BABEL_ENV=boe yarn build</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    yarn build</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n\n<p>同时，默认情况下，istanbul只会对后缀为<code>[&#39;.js&#39;, &#39;.cjs&#39;, &#39;.mjs&#39;, &#39;.ts&#39;, &#39;.tsx&#39;, &#39;.jsx&#39;]</code>的文件进行处理，为了处理<code>.vue</code>文件，需要显式给<code>babel-plugin-istanbul</code>文件传入<code>extension</code>字段。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">env</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">development</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">                    [<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;babel-plugin-istanbul&#x27;</span>), &#123; <span class=\"attr\">extension</span>: [<span class=\"string\">&#x27;.js&#x27;</span>, <span class=\"string\">&#x27;.cjs&#x27;</span>, <span class=\"string\">&#x27;.mjs&#x27;</span>, <span class=\"string\">&#x27;.ts&#x27;</span>, <span class=\"string\">&#x27;.tsx&#x27;</span>, <span class=\"string\">&#x27;.jsx&#x27;</span>, <span class=\"string\">&#x27;.vue&#x27;</span>] &#125;]</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"attr\">boe</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">                    [<span class=\"built_in\">require</span>(<span class=\"string\">&#x27;babel-plugin-istanbul&#x27;</span>), &#123; <span class=\"attr\">extension</span>: [<span class=\"string\">&#x27;.js&#x27;</span>, <span class=\"string\">&#x27;.cjs&#x27;</span>, <span class=\"string\">&#x27;.mjs&#x27;</span>, <span class=\"string\">&#x27;.ts&#x27;</span>, <span class=\"string\">&#x27;.tsx&#x27;</span>, <span class=\"string\">&#x27;.jsx&#x27;</span>, <span class=\"string\">&#x27;.vue&#x27;</span>] &#125;]</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"hookRequire动态插桩\"><a href=\"#hookRequire动态插桩\" class=\"headerlink\" title=\"hookRequire动态插桩\"></a><code>hookRequire</code>动态插桩</h3><p>有些场景下并不使用babel进行转码，这里以最典型的TypeScript为例，<code>.ts</code>文件可以用<code>tsc</code>编译。<code>tsc</code>编译后的js代码只有插桩后，才可能采集到的覆盖率数据，因此接入方需要在所有业务代码的import之前调用hook，保证所有的服务端js代码在被执行前都完成了插桩。</p>\n<p>实现上，新版本istanbuljs整个是个monorepo，原来istanbul各模块的功能拆分到了packages的各子项目中。其中和hook相关的位于<strong>istanbul-lib-hook</strong>。这个库虽然并没有API和文档。但还好，和老版本的hook.js区别不大。使用暴露出来的<strong>hookRequire</strong>方法即可，使用方式也与之前无异。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// old</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> istanbul <span class=\"keyword\">from</span> <span class=\"string\">&#x27;istanbul&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; hook &#125; = istanbul;</span><br><span class=\"line\"></span><br><span class=\"line\">instrumenter = <span class=\"keyword\">new</span> <span class=\"title class_\">Instrumenter</span>(options);</span><br><span class=\"line\"><span class=\"keyword\">const</span> transformer = instrumenter.<span class=\"property\">instrumentSync</span>.<span class=\"title function_\">bind</span>(instrumenter);</span><br><span class=\"line\">hook.<span class=\"title function_\">hookRequire</span>(matcher, transformer, &#123;</span><br><span class=\"line\">    <span class=\"attr\">postLoadHook</span>: <span class=\"function\">(<span class=\"params\">file: <span class=\"built_in\">any</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// new</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; hookRequire &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;istanbul-lib-hook&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createInstrumenter &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;istanbul-lib-instrument&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">instrumenter = <span class=\"title function_\">createInstrumenter</span>(options);</span><br><span class=\"line\"><span class=\"keyword\">const</span> transformer = instrumenter.<span class=\"property\">instrumentSync</span>.<span class=\"title function_\">bind</span>(instrumenter);</span><br><span class=\"line\"><span class=\"title function_\">hookRequire</span>(matcher, transformer, &#123;</span><br><span class=\"line\">    <span class=\"attr\">postLoadHook</span>: <span class=\"function\">(<span class=\"params\">file: <span class=\"built_in\">any</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><code>hookRequire</code>方法接受3个参数：</p>\n<ul>\n<li><code>matcher</code>，来自用户输入，用来判断当前文件是否要被hook</li>\n<li><code>transformer</code>，最关键的代码转换函数，读入代码，返回转换后的代码，插桩的转换由<strong>istanbul-lib-instrument</strong>提供（原先的instrumenter.js），理论上也能支持其他的转换函数。这里使用<code>instrumentSync</code>这个同步转换。</li>\n<li><code>options</code>，支持verbose和postLoadHook两个选项<ul>\n<li><code>verbose</code>，boolean，是否打印详细日志</li>\n<li><code>postLoadHook</code>，function，成功回调，函数会传入完整的文件名</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"sourcemap处理\"><a href=\"#sourcemap处理\" class=\"headerlink\" title=\"sourcemap处理\"></a>sourcemap处理</h3><p>由于istanbuljs插桩的是编译后的js代码，需要借助sourcemap才能找到源文件的覆盖情况。编译后文件的覆盖情况对开发者没有借鉴意义。使用<code>hookRequire</code>动态插桩时，还是需要自己处理sourcemap。</p>\n<p>老版本istanbul对sourcemap并不支持，需要借助<a href=\"https://github.com/SitePen/remap-istanbul\">remap-istanbul</a>才能实现。新版本的istanbuljs有一个独立的包<strong>istanbul-lib-source-maps</strong>支持这方面的功能。遗憾的是，再次没有文档介绍如何使用。</p>\n<p>通过查看测试样例和阅读源码可以发现，istanbul-lib-instrument中的<code>instrumentSync</code>支持第三个<code>sourcemap</code>参数，如果传入，则会在采集文件的覆盖率数据中附加该文件的sourcemap信息到<code>inputSourceMap</code>字段。而istanbul-lib-source-maps这个包可以对覆盖率数据中带有<code>inputSourceMap</code>字段的数据进行反映射，得到源文件覆盖情况。最终达到我们的目的。</p>\n<p>源文件的sourcemap信息需要自己采集，这里借鉴的nyc中使用的方案：<a href=\"https://github.com/thlorenz/convert-source-map\">convert-source-map</a>。这个npm包可以读取文件末尾的sourcemap字符串并转换为sourcemap对象。所以整体上，实现sourcemap处理的流程如下：</p>\n<ol>\n<li>在hookRequire的transformer中拿到代码字符串</li>\n<li>通过convert-source-map的<code>fromSource</code>方法拿到sourcemap对象</li>\n<li>在调用istanbul-lib-instrument的<code>instrumentSync</code>方法时，传入该对象<ol>\n<li>instrumenter内部的visitor.js调用source-coverage.js的<code>inputSourceMap</code>方法将文件的sourcemap传入</li>\n<li>source-coverage.js将sourcemap存入覆盖率数据中</li>\n</ol>\n</li>\n<li>使用istanbul-lib-source-maps中的<code>transformCoverage</code>方法转换覆盖率数据即可得到原始的覆盖率</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createInstrumenter &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;istanbul-lib-instrument&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> convert <span class=\"keyword\">from</span> <span class=\"string\">&#x27;convert-source-map&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">instrumenter = <span class=\"title function_\">createInstrumenter</span>(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// Step 1</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">transformer</span>: <span class=\"title class_\">Transformer</span> = <span class=\"function\">(<span class=\"params\">code, options</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Step 2</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> sourceMap = convert.<span class=\"title function_\">fromSource</span>(code);</span><br><span class=\"line\">    <span class=\"comment\">// Step 3</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> transformed = instrumenter.<span class=\"title function_\">instrumentSync</span>(</span><br><span class=\"line\">        code,</span><br><span class=\"line\">        options.<span class=\"property\">filename</span>,</span><br><span class=\"line\">        sourceMap ? sourceMap.<span class=\"title function_\">toObject</span>() : <span class=\"literal\">undefined</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> transformed;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">hook</span>(matcher, transformer, &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数据层\"><a href=\"#数据层\" class=\"headerlink\" title=\"数据层\"></a>数据层</h2><p>在覆盖率数据维护上，主要有下面几点工作：</p>\n<h3 id=\"sourcemap处理-1\"><a href=\"#sourcemap处理-1\" class=\"headerlink\" title=\"sourcemap处理\"></a>sourcemap处理</h3><p>在代码插桩附带上sourcemap信息后，可以参考istanbul-lib-source-maps的测试用例，用<code>transformCoverage</code>方法转换得到原始的覆盖率，即上一个同名小节中的第4步。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getOriginalCoverage</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 采集到的覆盖率</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> currCoverage = <span class=\"variable language_\">this</span>.<span class=\"title function_\">getCoverage</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> coverageMap = <span class=\"title function_\">createCoverageMap</span>(currCoverage);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> mapStore = <span class=\"title function_\">createSourceMapStore</span>(&#123;&#125;);</span><br><span class=\"line\">    <span class=\"comment\">// Step 4</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> transformed = <span class=\"keyword\">await</span> mapStore.<span class=\"title function_\">transformCoverage</span>(coverageMap);</span><br><span class=\"line\">    <span class=\"comment\">// 对应到源文件的覆盖率</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> transformed.<span class=\"property\">data</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实现时，还需要注意对一些sourcemap结构体中的<code>sourceRoot</code>进行特殊处理，避免反映射后得到嵌套的错误路径。</p>\n<h3 id=\"覆盖率数据维护\"><a href=\"#覆盖率数据维护\" class=\"headerlink\" title=\"覆盖率数据维护\"></a>覆盖率数据维护</h3><p>在一个测试覆盖率的周期下，需要merge每次产生的新的覆盖率。同时，要能通过原始的覆盖率数据生成摘要，方便UI展示。</p>\n<p>istanbul-lib-coverage的<code>CoverageMap</code>类型自带的<code>merge</code>方法，可以merge新的覆盖率数据到源<code>CoverageMap</code>中。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">mergeClientCoverage</span>(<span class=\"params\">clientCoverage: CoverageMap</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!clientCoverage) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> currCoverage = <span class=\"title function_\">getCoverageObject</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> coverageMap = <span class=\"title function_\">createCoverageMap</span>(currCoverage)</span><br><span class=\"line\">    coverageMap.<span class=\"title function_\">merge</span>(clientCoverage)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"基准覆盖数据维护\"><a href=\"#基准覆盖数据维护\" class=\"headerlink\" title=\"基准覆盖数据维护\"></a>基准覆盖数据维护</h3><p>有些js代码在未访问到业务代码时就会被执行到，比如<code>import</code>和<code>export</code>语句。这些覆盖率如果被清空，就再也无法通过端到端测试找回来，所以需要对于这部分覆盖数据专门维护，这里称作<strong>基准覆盖数据</strong>。</p>\n<p>实现上，在hook完成后，取得hook文件的覆盖率数据，即可得到。这里需要异步执行，保证能够取到。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">hook</span>(matcher, transformer, &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"attr\">postLoadHook</span>: <span class=\"function\">(<span class=\"params\">filename: <span class=\"built_in\">string</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">        <span class=\"title function_\">matcher</span>(filename) &amp;&amp; <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"title class_\">Coverage</span>.<span class=\"title function_\">saveBaselineCoverage</span>(filename));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>每次reset操作，实现上并非简单的清空数据，而是将覆盖率数据置为基准覆盖数据。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// express</span></span><br><span class=\"line\">app.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;/reset&#x27;</span>, <span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Coverage</span>.<span class=\"title function_\">restoreBaselineCoverage</span>();</span><br><span class=\"line\">    res.<span class=\"title function_\">json</span>(&#123; <span class=\"attr\">code</span>: <span class=\"number\">0</span> &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数据上报\"><a href=\"#数据上报\" class=\"headerlink\" title=\"数据上报\"></a>数据上报</h3><p>数据上报只需实现定期上报，在上报时通过使用方预先定义好的中间件，便于使用方做预处理的工作。同时，提供一个关闭方法，可以在适当时机停止上报，形如：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CoverageCollector</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"title function_\">use</span>(<span class=\"params\">middleware: Middleware</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">middlewares</span>.<span class=\"title function_\">push</span>(middleware);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"title function_\">init</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">intervalFlag</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">intervalFlag</span> = <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">send</span>(), <span class=\"variable language_\">this</span>.<span class=\"property\">interval</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"title function_\">close</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">intervalFlag</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">clearInterval</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">intervalFlag</span>);</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">intervalFlag</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">async</span> <span class=\"title function_\">send</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> coverageData = <span class=\"variable language_\">this</span>.<span class=\"property\">middlewares</span>.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">data, middle</span>) =&gt;</span> <span class=\"title function_\">middle</span>(data), coverage);</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> axios.<span class=\"title function_\">post</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">url</span>, coverageData);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Send coverage data failed: &#x27;</span>, err);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"视图层\"><a href=\"#视图层\" class=\"headerlink\" title=\"视图层\"></a>视图层</h2><p>视图化和可操作性上，有下面几点工作：</p>\n<h3 id=\"路由提供\"><a href=\"#路由提供\" class=\"headerlink\" title=\"路由提供\"></a>路由提供</h3><p>中间件对于开发者的受益，体现在能够通过浏览器访问得到视图化和可操作性的覆盖率数据。在功能上，中间件提供5个路由：</p>\n<ul>\n<li><code>/</code>，GET，提供整个项目的覆盖率摘要页面</li>\n<li><code>/show</code>，GET，访问文件或文件夹时，提供文件覆盖率详情或文件夹覆盖率摘要</li>\n<li><code>/reset</code>，POST，重置当前项目的覆盖率，开始一次新的采集周期</li>\n<li><code>/object</code>，GET，返回覆盖率的原始数据的JSON格式</li>\n<li><code>/client</code>，POST，用来接收来自浏览器端的覆盖率数据，merge到整体的覆盖率数据中</li>\n</ul>\n<p>实现上，直接提供预定义好的app或express应用，npm包暴露一个attachHandler API，使用方直接挂载即可拥有上述功能。类似下面所示。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"title function_\">mount</span>(<span class=\"string\">&#x27;/coverage&#x27;</span>, attachHandler.<span class=\"title function_\">koa</span>()));</span><br></pre></td></tr></table></figure>\n\n<p>由于绑定一定发生在服务端环境，可以的话，需要顺便区分线上和其他环境。</p>\n<h3 id=\"报告html页面生成\"><a href=\"#报告html页面生成\" class=\"headerlink\" title=\"报告html页面生成\"></a>报告html页面生成</h3><p>开发者应该能在每个测试周期内（即请求<code>/reset</code>前），通过访问特定路由得到渲染好的html页面。istanbuljs通过istanbul-lib-report和istanbul-reports两个包相互配合实现导出report的功能。其中：</p>\n<ul>\n<li>istanbul-lib-report：重点负责构建文件层级结构和生成摘要数据，定义遍历每个节点时行为的几个抽象类</li>\n<li>istanbul-reports：重点实现各种各样导出格式下内容的生成（只考虑了生成静态文件），通过实现istanbul-lib-report中ReportBase基类，完成遍历中内容的生成</li>\n</ul>\n<p>下面是README.md给出的示例</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> libReport = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;istanbul-lib-report&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> reports = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;istanbul-reports&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// coverageMap, for instance, obtained from istanbul-lib-coverage</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> coverageMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> configWatermarks = &#123;</span><br><span class=\"line\">    <span class=\"attr\">statements</span>: [<span class=\"number\">50</span>, <span class=\"number\">80</span>],</span><br><span class=\"line\">    <span class=\"attr\">functions</span>: [<span class=\"number\">50</span>, <span class=\"number\">80</span>],</span><br><span class=\"line\">    <span class=\"attr\">branches</span>: [<span class=\"number\">50</span>, <span class=\"number\">80</span>],</span><br><span class=\"line\">    <span class=\"attr\">lines</span>: [<span class=\"number\">50</span>, <span class=\"number\">80</span>]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// create a context for report generation</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> context = libReport.<span class=\"title function_\">createContext</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">dir</span>: <span class=\"string\">&#x27;report/output/dir&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// The summarizer to default to (may be overridden by some reports)</span></span><br><span class=\"line\">    <span class=\"comment\">// values can be nested/flat/pkg. Defaults to &#x27;pkg&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">defaultSummarizer</span>: <span class=\"string\">&#x27;nested&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">watermarks</span>: configWatermarks,</span><br><span class=\"line\">    coverageMap,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// create an instance of the relevant report class, passing the</span></span><br><span class=\"line\"><span class=\"comment\">// report name e.g. json/html/html-spa/text</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> report = reports.<span class=\"title function_\">create</span>(<span class=\"string\">&#x27;json&#x27;</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">skipEmpty</span>: configSkipEmpty,</span><br><span class=\"line\">    <span class=\"attr\">skipFull</span>: configSkipFull</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// call execute to synchronously create and write the report to disk</span></span><br><span class=\"line\">report.<span class=\"title function_\">execute</span>(context)</span><br></pre></td></tr></table></figure>\n\n<p>在istanbul-reports&#x2F;lib&#x2F;html中主要定义了html相关内容的生成，但是其中对于fs模块的使用，限制了该npm包在server侧的应用。经过<a href=\"https://github.com/istanbuljs/istanbuljs/issues/530\">询问作者</a>得到，istanbuljs并没有想法支持动态生成html响应。另外，istanbul-lib-report和istanbul-reports关联较多，新开发一个report类型用于生成html响应成本较大。</p>\n<p>综上，使用旧的方案，即旧版本istanbul生成html响应比较合适。</p>\n<h2 id=\"新方案\"><a href=\"#新方案\" class=\"headerlink\" title=\"新方案\"></a>新方案</h2><p>上述工作完成后，最终可以实现一个新的覆盖率方案，基本解决了上面提到的侵入较多，适用场景有局限性，istanbul版本老旧，sourcemap支持不足等问题。</p>\n<h2 id=\"已知问题\"><a href=\"#已知问题\" class=\"headerlink\" title=\"已知问题\"></a>已知问题</h2><p>上面的改进方案解决了方案接入上的困难，和实现上的一些纰漏，满足了开发者自测时的需求。但同时也有以下不足：</p>\n<ul>\n<li>对于更复杂的数据呈现和与业务流程的整合，即<a href=\"https://shenlvmeng.github.io/blog/2020/04/16/fe-coverage-scheme/\">旧方案</a>已知问题的第4点：“不能以分支、版本、仓库等空间维度或以历史信息、趋势等时间维度查看覆盖率报告，也没有diff内容覆盖率功能”，还需要更多努力。</li>\n<li>对于一些特殊场景，如没有使用babel转码的纯前端，不使用express或koa框架的服务端等无法支持</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://github.com/thlorenz/convert-source-map\">convert-source-map</a></li>\n<li><a href=\"https://github.com/istanbuljs/istanbuljs\">istanbuljs</a></li>\n<li><a href=\"https://github.com/istanbuljs/nyc\">nyc</a></li>\n</ul>\n",
            "tags": [
                "覆盖率",
                "端到端测试",
                "istanbul",
                "istanbuljs"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2020/04/16/istanbuljs/",
            "url": "http://shenlvmeng.github.com/blog/2020/04/16/istanbuljs/",
            "title": "JS代码覆盖率工具instanbuljs及其思路介绍",
            "date_published": "2020-04-16T15:51:13.000Z",
            "content_html": "<p><img src=\"https://s1.ax1x.com/2020/04/16/JEZ3WV.png\" alt=\"istanbul介绍\"></p>\n<p><a href=\"https://istanbul.js.org/\">intanbuljs</a>是JS语言中最流行的覆盖率采集工具。其前身是个人发起的<a href=\"https://github.com/gotwarlost/istanbul\">istanbul</a>项目。日常使用中，经常将相关的CLI工具<a href=\"https://github.com/istanbuljs/nyc\">nyc</a>配合着<a href=\"https://istanbul.js.org/docs/tutorials/\">流行的前端测试框架</a>一起使用，达到在单元&#x2F;集成&#x2F;e2e测试的同时，输出测试覆盖率数据的效果。</p>\n<p>当然，你也可以通过<a href=\"https://github.com/istanbuljs/babel-plugin-istanbul\">babel-plugin-istanbul</a>配合测试框架<a href=\"https://istanbul.js.org/docs/tutorials/\">使用</a>。</p>\n<h2 id=\"和istanbul的对比\"><a href=\"#和istanbul的对比\" class=\"headerlink\" title=\"和istanbul的对比\"></a>和istanbul的对比</h2><p>对于此前对前端测试覆盖率稍有了解了的人来说，可能更熟悉的是旧版的istanbul。istanbuljs在功能上和istanbul没有太大的区别，但在项目组织和实现细节上有着些许不同。</p>\n<ul>\n<li><a href=\"https://github.com/istanbuljs/istanbuljs\">istanbuljs</a>使用monorepo组织整个项目，将相对独立的插桩、hook、覆盖率、sourcemap、报告等拆分成多个包独立实现和发版</li>\n<li>使用babel实现源代码的AST解析和插桩（instrument）代码的生成</li>\n<li>内置支持sourcemap</li>\n<li>报告生成上取消了对express的依赖，只在本地产出报告</li>\n</ul>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>对于希望借助istanbuljs实现代码覆盖率相关功能的（nyc也基于istanbuljs实现），了解其各个包工作原理将会有所帮助。下面就按功能范畴介绍各个包的实现原理。</p>\n<h3 id=\"代码插桩和hook\"><a href=\"#代码插桩和hook\" class=\"headerlink\" title=\"代码插桩和hook\"></a>代码<a href=\"https://en.wikipedia.org/wiki/Instrumentation_(computer_programming)\">插桩</a>和hook</h3><p>覆盖率产出建立在<strong>代码插桩</strong>的基础上。根据插桩时机，分为<strong>编译时插桩</strong>和<strong>运行时插桩</strong>。</p>\n<ul>\n<li><strong>编译时插桩</strong>，即在代码转译过程中插入覆盖率采集代码，产出代码本身即拥有采集能力，譬如babel-plugin-istanbul</li>\n<li><strong>运行时插桩</strong>，即产出代码本身不具有采集能力，在运行时通过hook的方式在使用的代码中插入覆盖率采集代码，譬如<code>hookRequire</code></li>\n</ul>\n<p>不同于使用babel的编译时插桩，运行时插桩需要额外的hook一步。插桩和hook分别由<a href=\"https://github.com/istanbuljs/istanbuljs/tree/master/packages/istanbul-lib-instrument\">istanbul-lib-instrument</a>和<a href=\"https://github.com/istanbuljs/istanbuljs/tree/master/packages/istanbul-lib-hook\">istanbul-lib-hook</a>实现。</p>\n<h4 id=\"istanbul-lib-instrument\"><a href=\"#istanbul-lib-instrument\" class=\"headerlink\" title=\"istanbul-lib-instrument\"></a>istanbul-lib-instrument</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createInstrumenter &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;istanbul-lib-instrument&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> instrumenter = <span class=\"title function_\">createInstrumenter</span>(&#123;</span><br><span class=\"line\">    coverageVariable,</span><br><span class=\"line\">    <span class=\"attr\">debug</span>: options &amp;&amp; options.<span class=\"property\">debug</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> transformed = instrumenter.<span class=\"title function_\">instrumentSync</span>(</span><br><span class=\"line\">    code,</span><br><span class=\"line\">    options.<span class=\"property\">filename</span>,</span><br><span class=\"line\">    sourceMap ? sourceMap.<span class=\"title function_\">toObject</span>() : <span class=\"literal\">undefined</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>istanbul-lib-instrument利用babel实现了代码插桩。仓库暴露了3个API：</p>\n<h5 id=\"createInstrumenter\"><a href=\"#createInstrumenter\" class=\"headerlink\" title=\"createInstrumenter\"></a><code>createInstrumenter</code></h5><p>最主要的API。以入参作为配置项创建一个<code>Instrumenter</code>实例，配置项如下：</p>\n<ul>\n<li><code>coverageVariable</code> 覆盖率全局变量名，可选，默认<code>__coverage__</code></li>\n<li><code>preserveComments</code> 是否保留注释，可选，默认<code>false</code></li>\n<li><code>esModules</code> 是否插桩ES6代码，可选，默认<code>false</code></li>\n<li><code>produceSourceMap</code> 是否为插桩前后代码生成sourcemap，可选，默认<code>false</code></li>\n<li><code>debug</code> 是否打印详细信息，可选，默认<code>false</code></li>\n<li>… 更多配置参见<a href=\"https://github.com/istanbuljs/istanbuljs/blob/master/packages/istanbul-lib-instrument/api.md#parameters-4\">文档介绍</a></li>\n</ul>\n<p>通常使用时，配置项均使用默认值即可。<code>Instrumenter</code>实例有下面几个重要的方法</p>\n<p><strong><code>instrumentSync</code></strong></p>\n<p>同步插桩代码，支持ES6和ES5，插桩ES6代码时，需要配置项中的<code>esModules</code>为<code>true</code>。解析代码出错时会抛出错误。方法返回插桩后的代码字符串，入参如下：</p>\n<ul>\n<li><code>code</code> 代码字符串</li>\n<li><code>filename</code> 文件名（包含路径）</li>\n<li><code>inputSourceMap</code> 用来将当前代码的覆盖率反映射到源文件中的覆盖率，需要是sourcemap格式。</li>\n</ul>\n<p>在指定了<code>inputSourceMap</code>后，当前文件采集覆盖率时，会附带上传入的这个sourcemap，从而可以结合istanbul-lib-sourcemaps使用。</p>\n<p><strong><code>instrument</code></strong></p>\n<p>callback风格的插桩，此时抛出错误将通过回调的入参传入，而非直接抛出。插桩的代码也会在回调中传入而非直接返回。需要注意的是，回调的执行和语句的执行在同一个process tick中，而不是异步的。</p>\n<p>函数入参即<code>instrumentSync</code>的第三个位置插入函数类型的<code>callback</code>入参。</p>\n<p>剩余的两个方法：</p>\n<ul>\n<li><code>lastFileCoverage</code>，返回最近一次的文件覆盖率对象</li>\n<li><code>lastSourceMap</code>，返回最近一次的文件的sourcemap</li>\n</ul>\n<h5 id=\"programVisitor\"><a href=\"#programVisitor\" class=\"headerlink\" title=\"programVisitor\"></a><code>programVisitor</code></h5><p><code>programVisitor</code>是一个将babel用于插桩的适配器函数，该函数会返回一个具有<code>enter</code>以及<code>exit</code>方法的对象，这两个方法必须应用在<code>Program</code>的enter和exit属性上，实现插桩效果。istanbuljs内部也是通过<code>programVisitor</code>实现的功能。<code>programVisitor</code>内部并不依赖babel的状态，因此也可以用在babel以外的环境。</p>\n<p>该函数支持以下入参：</p>\n<ul>\n<li><code>types</code>，babel-types实例，语法节点类型</li>\n<li><code>sourceFilePath</code>，文件路径，可选，默认为<code>unknown.js</code></li>\n<li><code>opts</code>，插桩配置项，可以参见<a href=\"https://github.com/istanbuljs/istanbuljs/blob/master/packages/istanbul-lib-instrument/api.md#parameters-4\">文档介绍</a></li>\n</ul>\n<p>在函数内部集中了插桩的细节实现，即对于特定类型语法树节点插入对应逻辑。</p>\n<h5 id=\"readInitialCoverage\"><a href=\"#readInitialCoverage\" class=\"headerlink\" title=\"readInitialCoverage\"></a><code>readInitialCoverage</code></h5><p>配合<code>Instrumenter</code>的<code>lastFileCoverage</code>方法使用，读取文件的初始覆盖率。</p>\n<p>上面这些API中，最常用和最核心的即<code>instrumentSync</code>方法。在实现上，方法分为下面几步：</p>\n<ol>\n<li>根据<code>Instrumenter</code>的配置项确定babel的配置项，同时，引入<code>programVisitor</code>作为babel的plugin，指定遍历节点的操作</li>\n<li>使用<code>@babel/core</code>的<code>transformSync</code>API，得到生成的代码</li>\n<li>更新<code>fileCoverage</code>和<code>sourcemap</code></li>\n<li>返回代码</li>\n</ol>\n<h4 id=\"istanbul-lib-hook\"><a href=\"#istanbul-lib-hook\" class=\"headerlink\" title=\"istanbul-lib-hook\"></a>istanbul-lib-hook</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; hookRequire &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;istanbul-lib-hook&#x27;</span>;</span><br><span class=\"line\"><span class=\"title function_\">hookRequire</span>(matcher, transformer, &#123;</span><br><span class=\"line\">    <span class=\"attr\">verbose</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">postLoadHook</span>: <span class=\"function\">(<span class=\"params\">filename: <span class=\"built_in\">string</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>istanbul-lib-hook提供了下面一些API，用来hook JS中对代码的引用，其中后三个API都有对应的unhook API：</p>\n<ul>\n<li><code>hookRequire</code>，hook了<code>require</code>引入的代码</li>\n<li><code>hookCreateScript</code>，hook了<code>vm.createScript</code>引入的代码</li>\n<li><code>hookRunInThisContext</code>，hook了<code>vm.runInThisContext</code>引入的代码</li>\n<li><code>hookRunInContext</code>，hook了<code>vm.runInContext</code>引入的代码、</li>\n</ul>\n<p>在其中最常用的是<code>hookRequire</code>，入参如下：</p>\n<ul>\n<li><code>matcher</code>，函数类型，接收文件的完整路径，返回bool类型，用来判断是否对文件插桩</li>\n<li><code>transformer</code>，函数类型，接收代码和文件路径，返回插桩后的代码，可以通过对上面提到的<code>Instrumenter</code>的<code>instrumentSync</code>封装得到</li>\n<li><code>options</code>，配置项<ul>\n<li><code>verbose</code>，是否打印详细信息</li>\n<li><code>postLoadHook</code>，文件hook之后的回调</li>\n</ul>\n</li>\n</ul>\n<p><code>hookRequire</code>借助Nodejs的Module加载机制实现，hook了后缀为<code>.js</code>文件的编译过程，在每次<code>require</code>的时候触发。详细的原理可以参见<a href=\"https://shenlvmeng.github.io/blog/2020/04/16/fe-coverage-scheme/\">这里</a>。唯一的不同是，在istanbuljs中，这一实现被封装在<a href=\"https://github.com/istanbuljs/append-transform\">append-transform</a>包中实现，来兼容异常情况。实现如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> appendTransform = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;append-transform&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">hookRequire</span>(<span class=\"params\">matcher, transformer, options</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> fn = <span class=\"title function_\">transformFn</span>(matcher, transformer, options.<span class=\"property\">verbose</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> extensions = options.<span class=\"property\">extensions</span> || [<span class=\"string\">&#x27;.js&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    extensions.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">ext</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">appendTransform</span>(<span class=\"function\">(<span class=\"params\">code, filename</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// ...</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> ret = <span class=\"title function_\">fn</span>(code, filename);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (postLoadHook) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">postLoadHook</span>(filename);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ret.<span class=\"property\">code</span>;</span><br><span class=\"line\">        &#125;, ext);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数据维护\"><a href=\"#数据维护\" class=\"headerlink\" title=\"数据维护\"></a>数据维护</h3><p>在代码插桩的基础上，产出的覆盖率数据会积累在全局变量上。在数据可视化和统计结果展示前，还需要将数据封装成更贴近实际场景的形态，便于进行合并、输出、摘要等操作。</p>\n<p>这部分工作在<a href=\"https://github.com/istanbuljs/istanbuljs/tree/master/packages/istanbul-lib-coverage\">istanbul-lib-coverage</a>中完成。</p>\n<h4 id=\"覆盖率数据结构\"><a href=\"#覆盖率数据结构\" class=\"headerlink\" title=\"覆盖率数据结构\"></a>覆盖率数据结构</h4><p>下面是采集到的原始数据的结构定义，这也是istanbul-lib-coverage的基础。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">CoverageMapData</span> &#123;</span><br><span class=\"line\">    [<span class=\"attr\">key</span>: <span class=\"built_in\">string</span>]: <span class=\"title class_\">FileCoverageData</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">FileCoverageData</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"attr\">statementMap</span>: &#123; [<span class=\"attr\">key</span>: <span class=\"built_in\">string</span>]: <span class=\"title class_\">Range</span> &#125;;</span><br><span class=\"line\">    <span class=\"attr\">fnMap</span>: &#123; [<span class=\"attr\">key</span>: <span class=\"built_in\">string</span>]: <span class=\"title class_\">FunctionMapping</span> &#125;;</span><br><span class=\"line\">    <span class=\"attr\">branchMap</span>: &#123; [<span class=\"attr\">key</span>: <span class=\"built_in\">string</span>]: <span class=\"title class_\">BranchMapping</span> &#125;;</span><br><span class=\"line\">    <span class=\"attr\">s</span>: &#123; [<span class=\"attr\">key</span>: <span class=\"built_in\">string</span>]: <span class=\"built_in\">number</span> &#125;;</span><br><span class=\"line\">    <span class=\"attr\">f</span>: &#123; [<span class=\"attr\">key</span>: <span class=\"built_in\">string</span>]: <span class=\"built_in\">number</span> &#125;;</span><br><span class=\"line\">    <span class=\"attr\">b</span>: &#123; [<span class=\"attr\">key</span>: <span class=\"built_in\">string</span>]: <span class=\"built_in\">number</span>[] &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Location</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">line</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    <span class=\"attr\">column</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Range</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">start</span>: <span class=\"title class_\">Location</span>;</span><br><span class=\"line\">    <span class=\"attr\">end</span>: <span class=\"title class_\">Location</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">BranchMapping</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">loc</span>: <span class=\"title class_\">Range</span>;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"attr\">locations</span>: <span class=\"title class_\">Range</span>[];</span><br><span class=\"line\">    <span class=\"attr\">line</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">FunctionMapping</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"attr\">decl</span>: <span class=\"title class_\">Range</span>;</span><br><span class=\"line\">    <span class=\"attr\">loc</span>: <span class=\"title class_\">Range</span>;</span><br><span class=\"line\">    <span class=\"attr\">line</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"istanbul-lib-coverage\"><a href=\"#istanbul-lib-coverage\" class=\"headerlink\" title=\"istanbul-lib-coverage\"></a>istanbul-lib-coverage</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> libCoverage <span class=\"keyword\">from</span> <span class=\"string\">&#x27;istanbul-lib-coverage&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> map = libCoverage.<span class=\"title function_\">createCoverageMap</span>(globalCoverageVar);</span><br><span class=\"line\"><span class=\"keyword\">const</span> summary = libCoverage.<span class=\"title function_\">createCoverageSummary</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">map.<span class=\"title function_\">merge</span>(otherCoverageMap);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取摘要</span></span><br><span class=\"line\">map.<span class=\"title function_\">files</span>().<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">f</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fc = map.<span class=\"title function_\">fileCoverageFor</span>(f);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> s = fc.<span class=\"title function_\">toSummary</span>();</span><br><span class=\"line\">    summary.<span class=\"title function_\">merge</span>(s);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Global summary&#x27;</span>, summary);</span><br></pre></td></tr></table></figure>\n\n<p>包暴露了3个API, 用来创建封装好的覆盖率数据。</p>\n<h5 id=\"createCoverageMap\"><a href=\"#createCoverageMap\" class=\"headerlink\" title=\"createCoverageMap\"></a><code>createCoverageMap</code></h5><p>传入原始数据（<code>CoverageMapData</code>类型）或<code>CoverageMap</code>类型，返回一个<code>CoverageMap</code>类型对象，在覆盖率数据基础上，提供了方法，包含：</p>\n<ul>\n<li><code>merge</code>，合并另一个<code>CoverageMap</code>对象或数据</li>\n<li><code>filter</code>，传入filter函数，删除部分覆盖率数据</li>\n<li><code>toJSON</code>，返回原始数据</li>\n<li><code>files</code>，返回文件列表</li>\n<li><code>fileCoverageFor</code>，返回特定文件的覆盖率</li>\n<li><code>addFileCoverage</code>，增加特定文件的覆盖率</li>\n<li><code>getCoverageSummary</code>，生成覆盖率摘要数据</li>\n</ul>\n<p>摘要数据数据结构如下：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">CoverageSummaryData</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">lines</span>: <span class=\"title class_\">Totals</span>;</span><br><span class=\"line\">    <span class=\"attr\">statements</span>: <span class=\"title class_\">Totals</span>;</span><br><span class=\"line\">    <span class=\"attr\">branches</span>: <span class=\"title class_\">Totals</span>;</span><br><span class=\"line\">    <span class=\"attr\">functions</span>: <span class=\"title class_\">Totals</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Totals</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">total</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    <span class=\"attr\">covered</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    <span class=\"attr\">skipped</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    <span class=\"attr\">pct</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"createFileCoverage\"><a href=\"#createFileCoverage\" class=\"headerlink\" title=\"createFileCoverage\"></a><code>createFileCoverage</code></h5><p>类似<code>createCoverageMap</code>，通过传入原始数据或对象的方式，创建<code>FileCoverage</code>对象。对象有如下方法：</p>\n<ul>\n<li><code>getLineCoverage</code>，返回每一行的执行次数</li>\n<li><code>getUncoveredLines</code>，返回未覆盖的行序号列表</li>\n<li><code>getBranchCoverageByLine</code>，获取每个分支按行计算的覆盖率比例</li>\n<li><code>toJSON</code>，返回原始数据</li>\n<li><code>merge</code>，合并另一个<code>FileCoverage</code>或原始数据</li>\n<li><code>computeSimpleTotals</code>，根据输入的属性，计算覆盖率摘要</li>\n<li><code>computeBranchTotals</code>，根据分支计算覆盖率摘要</li>\n<li><code>resetHits</code>，重置所有已执行的数据</li>\n<li><code>toSummary</code>，生成摘要数据</li>\n</ul>\n<h5 id=\"createCoverageSummary\"><a href=\"#createCoverageSummary\" class=\"headerlink\" title=\"createCoverageSummary\"></a><code>createCoverageSummary</code></h5><p>根据输入数据，创建摘要。方法较简单：</p>\n<ul>\n<li><code>merge</code>，合并一个摘要数据</li>\n<li><code>toJSON</code>，返回原始摘要数据</li>\n<li><code>isEmpty</code>，是否为空</li>\n</ul>\n<p>整体来看istanbul-lib-coverage所做的工作，即按照约定好的格式，将数据组织起来，为可视化输出做了基础。</p>\n<h4 id=\"istanbul-lib-source-maps\"><a href=\"#istanbul-lib-source-maps\" class=\"headerlink\" title=\"istanbul-lib-source-maps\"></a>istanbul-lib-source-maps</h4><figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createSourceMapStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;istanbul-lib-source-maps&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> libCoverage <span class=\"keyword\">from</span> <span class=\"string\">&#x27;istanbul-lib-coverage&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> mapStore = <span class=\"title function_\">createSourceMapStore</span>(&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> coverageMap = libCoverage.<span class=\"title function_\">createCoverageMap</span>(coverageData);</span><br><span class=\"line\"><span class=\"keyword\">const</span> transformed = <span class=\"keyword\">await</span> mapStore.<span class=\"title function_\">transformCoverage</span>(coverageMap);</span><br><span class=\"line\"><span class=\"keyword\">const</span> transformedCoverage = transformed.<span class=\"property\">data</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(transformedCoverage);</span><br></pre></td></tr></table></figure>\n\n<p>绝大多数情况下，istanbuljs采集到的都是转译后目标文件的代码覆盖率，这个数据对于开发者来讲意义不大，需要将这里采集到的行列数据反映射到源文件的位置上。内置<a href=\"https://github.com/istanbuljs/istanbuljs/tree/master/packages/istanbul-lib-source-maps\">istanbul-lib-source-maps</a>包用来处理这种情况的。</p>\n<p>istanbul-lib-source-maps只负责转换代码位置和目录，并不能负责收集代码或文件的sourcemap信息，这一步交给使用者自己实现。就像我们在<code>instrumentSync</code>一节提到的，通过第三个入参<code>inputSourceMap</code>可以产出满足istanbul-lib-source-maps需要的覆盖率数据，从而借助istanbul-lib-source-maps获取到源文件的覆盖率。</p>\n<p>这个包本身只暴露<code>createSourceMapStore</code>这一个API，通过传入配置的方式，初始化一个sourcemap的store。配置项如下：</p>\n<ul>\n<li><code>verbose</code>，是否打印详细信息</li>\n<li><code>baseDir</code>，sourcemap文件的基础目录</li>\n<li><code>SourceStore</code>，一个<code>SourceStore</code>对象</li>\n<li><code>sourceStoreOpts</code>，初始化<code>SourceStore</code>对象的参数列表</li>\n</ul>\n<p>初始化好的<code>MapStore</code>对象有如下方法：</p>\n<ul>\n<li><code>registerURL</code>，通过dataURL注册一个sourcemap到store中</li>\n<li><code>registerMap</code>，通过sourcemap对象注册一个sourcemap到store中</li>\n<li><code>getSourceMapSync</code>，从当前store中获取指定文件的sourcemap</li>\n<li><code>addInputSourceMapsSync</code>，为当前覆盖率数据同步添加store中的sourcemap数据</li>\n<li><code>sourceFinder</code>，寻找指定文件的源文件路径</li>\n<li><code>transformCoverage</code>，利用当前store中的sourcemap信息，将覆盖率对应到源文件上。<strong>覆盖率信息中有<code>inputSourceMap</code>字段时，优先使用<code>inputSourceMap</code>字段里的sourcemap信息</strong></li>\n<li><code>dispose</code>，清除store数据</li>\n</ul>\n<p>包中的其余文件也都基于<code>MapStore</code>实现诸如路径转换，数据转换等工具方法。更多细节，可以参见<a href=\"https://github.com/istanbuljs/istanbuljs/tree/master/packages/istanbul-lib-source-maps\">源文件</a>。</p>\n<p>使用时，有两种方式：</p>\n<ul>\n<li>先导入没有sourcemap的覆盖率信息，再逐个注册sourcemap到store中，最后执行<code>transformCoverage</code></li>\n<li>直接导入有<code>inputSourceMap</code>信息的覆盖率数据，执行<code>transformCoverage</code></li>\n</ul>\n<p>可以根据实际场景选择使用方式。例如，nyc中就使用的第2种方式，利用<a href=\"https://github.com/thlorenz/convert-source-map\">convert-source-map</a>采集到文件内的sourcemap信息，在代码插桩时传入。</p>\n<h3 id=\"可视化与报告\"><a href=\"#可视化与报告\" class=\"headerlink\" title=\"可视化与报告\"></a>可视化与报告</h3><p>覆盖率工具的最终目的是向使用者呈现可读的数据样式，通常是以UI或文件的形式。因此，要将上一章中维护好的数据按使用者需求输出。可视化和报告由<a href=\"https://github.com/istanbuljs/istanbuljs/tree/master/packages/istanbul-lib-report\">istanbul-lib-report</a>以及<a href=\"https://github.com/istanbuljs/istanbuljs/tree/master/packages/istanbul-reports\">istanbul-reports</a>实现。</p>\n<p>其中，前者定义了产出报告的抽象行为，后者实现了各种具体的报告形态。两个包结合在一起使用的方式如下：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> libReport <span class=\"keyword\">from</span> <span class=\"string\">&#x27;istanbul-lib-report&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> reports <span class=\"keyword\">from</span> <span class=\"string\">&#x27;istanbul-reports&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> coverageMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> configWatermarks = &#123;</span><br><span class=\"line\">    <span class=\"attr\">statements</span>: [<span class=\"number\">50</span>, <span class=\"number\">80</span>],</span><br><span class=\"line\">    <span class=\"attr\">functions</span>: [<span class=\"number\">50</span>, <span class=\"number\">80</span>],</span><br><span class=\"line\">    <span class=\"attr\">branches</span>: [<span class=\"number\">50</span>, <span class=\"number\">80</span>],</span><br><span class=\"line\">    <span class=\"attr\">lines</span>: [<span class=\"number\">50</span>, <span class=\"number\">80</span>]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> context = libReport.<span class=\"title function_\">createContext</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">dir</span>: <span class=\"string\">&#x27;report/output/dir&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 摘要的生成方式</span></span><br><span class=\"line\">    <span class=\"comment\">// 可以是nested/flat/pkg 默认为&#x27;pkg&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">defaultSummarizer</span>: <span class=\"string\">&#x27;nested&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">watermarks</span>: configWatermarks,</span><br><span class=\"line\">    coverageMap,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> report = reports.<span class=\"title function_\">create</span>(<span class=\"string\">&#x27;json&#x27;</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">skipEmpty</span>: configSkipEmpty,</span><br><span class=\"line\">    <span class=\"attr\">skipFull</span>: configSkipFull</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 同步操作</span></span><br><span class=\"line\">report.<span class=\"title function_\">execute</span>(context);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"istanbul-lib-report\"><a href=\"#istanbul-lib-report\" class=\"headerlink\" title=\"istanbul-lib-report\"></a>istanbul-lib-report</h4><p>维护好的覆盖率数据会和具体的文件节点绑定，形成树状数据结构。遍历每个树节点就是产出报告的基本步骤，只不过不同报告格式，遍历节点的操作也不同。istanbul-lib-report中定义了基本的树状结构和遍历规则。</p>\n<p>包暴露了3个API，</p>\n<ul>\n<li><code>createContext</code>，创建一个包含产出报告配置信息context对象</li>\n<li><code>getDefaultWatermarks</code>，返回默认的评级指标，默认是0到50到80，分别对应差中好</li>\n<li><code>ReportBase</code>，所有报告必须继承的基类</li>\n</ul>\n<p>其中context和ReportBase是配合实现生成报告的。先来看简单的ReportBase，<code>ReportBase</code>类中简单地描述了管理摘要树的方法和定义了通用的<code>execute</code>方法来生成报告。具体会在istanbul-reports中提到。</p>\n<p>再来看Context类。Context入参配置项包含：</p>\n<ul>\n<li><code>dir</code>，产出报告的目标目录</li>\n<li><code>watermarks</code>，评级指标，默认使用0-50-80-100</li>\n<li><code>sourceFinder</code>，通过文件路径返回代码的函数，默认为文件读取操作</li>\n<li><code>coverageMap</code>，覆盖率数据</li>\n<li><code>defaultSummarizer</code>，摘要树生成的风格，有<code>flat</code>,<code>pkg</code>,<code>nested</code>3种选择<ul>\n<li><code>flat</code>，所有文件全部打平到1层里，挂载到最近的公共祖先上</li>\n<li><code>pkg</code>，所有文件向上追溯1层文件夹，挂载到最近的公共祖先上</li>\n<li><code>nested</code>，所有文件向上追溯，直到追溯到最近的公共祖先上</li>\n</ul>\n</li>\n</ul>\n<p>构建好的<code>Context</code>有一个<code>writer</code>属性挂载在<code>this</code>和<code>this.data</code>上，它决定了报告的产出形式，目前这个包提供了两种产出形式：<strong>文件</strong>和<strong>字符串</strong>，后者只用在产出XML数据时。其余报告基本都通过文件的形式产出，这也是istanbuljs和istanbul的一大不同。在istanbul中，html可以借助express依赖以HTML响应的形式返回。</p>\n<p>文件的输出类定义在<code>file-writer.js</code>中，其中的<code>FileWriter</code>定义了基本的<code>copyFile</code>，<code>writerForDir</code>，<code>writeFile</code>操作用来递归的复制和写入文件。另外在<code>writeFile</code>中，根据目标是否是file，选择使用<code>ConsoleWriter</code>或者<code>FileContentWriter</code>。这两者继承自基本的<code>ContentWriter</code>。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ContentWriter</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">colorize</span>(<span class=\"params\">str <span class=\"comment\">/*, clazz*/</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">println</span>(<span class=\"params\">str</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">write</span>(<span class=\"string\">`<span class=\"subst\">$&#123;str&#125;</span>\\n`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">close</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FileContentWriter</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">ContentWriter</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">fd</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">super</span>();</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">fd</span> = fd;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">write</span>(<span class=\"params\">str</span>) &#123;</span><br><span class=\"line\">        fs.<span class=\"title function_\">writeSync</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">fd</span>, str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">close</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        fs.<span class=\"title function_\">closeSync</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">fd</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ConsoleWriter</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">ContentWriter</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">write</span>(<span class=\"params\">str</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (capture) &#123;</span><br><span class=\"line\">            output += str;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            process.<span class=\"property\">stdout</span>.<span class=\"title function_\">write</span>(str);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">colorize</span>(<span class=\"params\">str, clazz</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> colors = &#123;</span><br><span class=\"line\">            <span class=\"attr\">low</span>: <span class=\"string\">&#x27;31;1&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">medium</span>: <span class=\"string\">&#x27;33;1&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">high</span>: <span class=\"string\">&#x27;32;1&#x27;</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (supportsColor.<span class=\"property\">stdout</span> &amp;&amp; colors[clazz]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">`\\u001b[<span class=\"subst\">$&#123;colors[clazz]&#125;</span>m<span class=\"subst\">$&#123;str&#125;</span>\\u001b[0m`</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>字符串的输出类只有<code>XMLWriter</code>，位于<code>xml-writer.js</code>中，在其中定义了xml的开闭标签和缩进操作。</p>\n<p>这个Context还有一些方法提供给reports使用：</p>\n<ul>\n<li><code>getWriter</code>&#x2F;<code>getXMLWriter</code>，返回输出数据的writer</li>\n<li><code>getSource</code>，通过<code>sourceFinder</code>寻找源码</li>\n<li><code>classForPercent</code>，将评价转化为HTML类名</li>\n<li><code>getVisitor</code>，获取一个遍历的vistor对象</li>\n<li><code>getTree</code>，根据摘要风格返回一个用于遍历的树，</li>\n</ul>\n<p>下面具体介绍vistor和tree的概念</p>\n<h5 id=\"Visitor和BaseTree\"><a href=\"#Visitor和BaseTree\" class=\"headerlink\" title=\"Visitor和BaseTree\"></a><code>Visitor</code>和<code>BaseTree</code></h5><p><code>Visitor</code>类和<code>BaseNode</code>类定义了遍历和节点的基本操作，其中Visitor使用代理人模式，在构造时传入一个回调函数对象，当<code>visitor</code>对象触发特定事件时，会将当前节点和状态交给回调函数，实现遍历效果。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Visitor</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">delegate</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">delegate</span> = delegate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"string\">&#x27;Start&#x27;</span>, <span class=\"string\">&#x27;End&#x27;</span>, <span class=\"string\">&#x27;Summary&#x27;</span>, <span class=\"string\">&#x27;SummaryEnd&#x27;</span>, <span class=\"string\">&#x27;Detail&#x27;</span>]</span><br><span class=\"line\">    .<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">k</span> =&gt;</span> <span class=\"string\">`on<span class=\"subst\">$&#123;k&#125;</span>`</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">fn</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(<span class=\"title class_\">Visitor</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>, fn, &#123;</span><br><span class=\"line\">            <span class=\"attr\">writable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"title function_\">value</span>(<span class=\"params\">node, state</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"variable language_\">this</span>.<span class=\"property\">delegate</span>[fn] === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">                    <span class=\"variable language_\">this</span>.<span class=\"property\">delegate</span>[fn](node, state);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>相对应的<code>BaseNode</code>类定义了用于遍历的<code>visit</code>方法</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BaseNode</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"comment\">// 递归遍历</span></span><br><span class=\"line\">    <span class=\"title function_\">visit</span>(<span class=\"params\">visitor, state</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 文件夹没有详情，只有摘要</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"title function_\">isSummary</span>()) &#123;</span><br><span class=\"line\">            visitor.<span class=\"title function_\">onSummary</span>(<span class=\"variable language_\">this</span>, state);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            visitor.<span class=\"title function_\">onDetail</span>(<span class=\"variable language_\">this</span>, state);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">getChildren</span>().<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">child</span> =&gt;</span> &#123;</span><br><span class=\"line\">            child.<span class=\"title function_\">visit</span>(visitor, state);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"title function_\">isSummary</span>()) &#123;</span><br><span class=\"line\">            visitor.<span class=\"title function_\">onSummaryEnd</span>(<span class=\"variable language_\">this</span>, state);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后在<code>BaseTree</code>中从Root开始遍历即可：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BaseTree</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">root</span> = root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">getRoot</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">root</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">visit</span>(<span class=\"params\">visitor, state</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(visitor <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Visitor</span>)) &#123;</span><br><span class=\"line\">            visitor = <span class=\"keyword\">new</span> <span class=\"title class_\">Visitor</span>(visitor);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        visitor.<span class=\"title function_\">onStart</span>(<span class=\"variable language_\">this</span>.<span class=\"title function_\">getRoot</span>(), state);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">getRoot</span>().<span class=\"title function_\">visit</span>(visitor, state);</span><br><span class=\"line\">        visitor.<span class=\"title function_\">onEnd</span>(<span class=\"variable language_\">this</span>.<span class=\"title function_\">getRoot</span>(), state);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不同的摘要风格形成的树状结构不同，它们都是<code>ReportTree</code>类型，而<code>ReportTree</code>正是继承自<code>BaseTree</code>。<code>ReportTree</code>由继承自<code>BaseNode</code>的<code>ReportNode</code>构建。在<code>ReportNode</code>上定义了和覆盖率或文件操作相关的一些方法，如<code>getFileCoverage</code>，<code>getCoverageSummary</code>等。</p>\n<p>一个context内的visitor和tree可以通过<code>getVisitor</code>和<code>getTree</code>得到</p>\n<h4 id=\"istanbul-reports\"><a href=\"#istanbul-reports\" class=\"headerlink\" title=\"istanbul-reports\"></a>istanbul-reports</h4><p>istanbul-reports包中定义了种类繁多的导出格式，在入口文件通过指定的配置项选择使用，如上面样例中的<code>const report = reports.create(&#39;json&#39;, &#123;/* ... */&#125;)</code>即使用<code>json/lib/index.js</code>下导出的<code>JsonReport</code>类。istanbul-reports所有格式都基于istanbul-lib-report中基类的定义。这里以简单的json格式为例。</p>\n<p>其中定义了对于<code>onStart</code>，<code>onDetail</code>，<code>onEnd</code>的定义和上面<code>BaseNode</code>中介绍的回调函数相对应，在遍历<code>ReportTree</code>的各个阶段被触发，通过context的writer去输出。而writer从<code>ReportBase</code>中可以发现是通过context确定的，在context中默认是filewriter。而遍历是如何执行的呢？</p>\n<p>回头看下ReportBase的实现。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> _summarizer = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&#x27;ReportBase.#summarizer&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ReportBase</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">opts = &#123;&#125;</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>[_summarizer] = opts.<span class=\"property\">summarizer</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">execute</span>(<span class=\"params\">context</span>) &#123;</span><br><span class=\"line\">        context.<span class=\"title function_\">getTree</span>(<span class=\"variable language_\">this</span>[_summarizer]).<span class=\"title function_\">visit</span>(<span class=\"variable language_\">this</span>, context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>execute</code>中传入context，即可把带有覆盖率信息的树形数据结构交给report代表的visitor遍历，逐个节点地打印出覆盖率报告。</p>\n<p>其余类型的报告也是类似的原理。</p>\n<h2 id=\"更多\"><a href=\"#更多\" class=\"headerlink\" title=\"更多\"></a>更多</h2><ul>\n<li><a href=\"https://shenlvmeng.github.io/blog/2020/04/16/fe-coverage-scheme/\">前端代码覆盖率实时统计方案探索</a></li>\n<li><a href=\"https://shenlvmeng.github.io/blog/2020/04/17/fe-coverage-improve/\">前端代码覆盖率实时统计改进方案</a></li>\n</ul>\n",
            "tags": [
                "覆盖率",
                "istanbul",
                "istanbuljs"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2020/04/16/fe-coverage-scheme/",
            "url": "http://shenlvmeng.github.com/blog/2020/04/16/fe-coverage-scheme/",
            "title": "前端代码覆盖率实时统计方案探索",
            "date_published": "2020-04-16T15:46:17.000Z",
            "content_html": "<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>随着业务增长，代码逐渐复杂，前端有些时候不能通过自测保证代码质量，而测试同学从用户角度进行端到端的case测试，也有可能存在测试case不够全面或重复覆盖的情况。而测试覆盖质量只能通过测试case评审来保证，没有量化的、直观的客观数据。</p>\n<p>然而前端场景和后端不同，UI测试因为业务形态原因，变更会更频繁，编写和维护单测成本比较高。因此目前且短期内前端工程还是以传统的用户角度的端到端测试为主。另外，在SSR项目中，前端开发也会书写API层，这部分代码也需要测试覆盖到。目前前端生态还没有一个能同时覆盖UI层和API层的覆盖率统计框架，需要借助已有的工具实现这点。</p>\n<h3 id=\"解决问题\"><a href=\"#解决问题\" class=\"headerlink\" title=\"解决问题\"></a>解决问题</h3><p>提升开发自测质量和提测质量，避免case覆盖不全的问题，同时有直观的统计指标衡量。</p>\n<h3 id=\"预期效果\"><a href=\"#预期效果\" class=\"headerlink\" title=\"预期效果\"></a>预期效果</h3><p>分3个阶段：</p>\n<p>第一阶段：<strong>基本可用版本</strong>，能够采集UI层和API层的代码覆盖率，覆盖率采集过程对前端开发透明，无需开发业务以外的开发成本。能够打开浏览器页面直观查看各个代码覆盖率。</p>\n<p>第二阶段：<strong>丰富统计数据</strong>，在第一阶段基础上，能够<em>记录</em>不同分支甚至不同版本历史的覆盖率，能够借助gitlab只查看<em>增量文件</em>的覆盖率。</p>\n<p>第三阶段：<strong>打通QA平台</strong>，在第二阶段基础上，接入QA已有平台或自建平台，在第三方页面查看数据；形成一套覆盖率采集方案。</p>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>本地、特性分支上使用</p>\n<h3 id=\"技术选型\"><a href=\"#技术选型\" class=\"headerlink\" title=\"技术选型\"></a>技术选型</h3><p>覆盖率采集建立在<a href=\"https://en.wikipedia.org/wiki/Instrumentation_(computer_programming)\">代码插桩</a>基础上。前端生态里比较成熟的工具是<a href=\"https://github.com/gotwarlost/istanbul\">istanbuljs</a>，该库的0.x.x版本位于<a href=\"https://github.com/gotwarlost/istanbul\">istanbul</a>库。关于该库的科普介绍，可以阅读ruanyifeng的<a href=\"https://www.ruanyifeng.com/blog/2015/06/istanbul.html\">科普文</a>。</p>\n<p>istanbul提供两种插桩方式：<strong>编译时</strong>和<strong>运行时</strong>。</p>\n<ul>\n<li>编译时<ul>\n<li>nyc命令行的<a href=\"https://github.com/istanbuljs/nyc/blob/master/docs/instrument.md\">instrument子命令</a>可以完成手动插桩</li>\n<li><a href=\"https://github.com/istanbuljs/babel-plugin-istanbul\">babel-plugin-istanbul</a>可以在使用babel的前端工程里，在<strong>编译阶段</strong>植入插桩代码。TypeScript项目可以使用<a href=\"https://www.npmjs.com/package/@istanbuljs/nyc-config-typescript\">@istanbuljs&#x2F;nyc-config-typescript</a>插件</li>\n</ul>\n</li>\n<li>运行时，需要借助<a href=\"https://github.com/gotwarlost/istanbul-middleware\">istanbul-middleware</a>中间件的帮助<ul>\n<li><code>im.hookLoader</code>，适用于服务端文件的动态插桩，方法利用istanbul-lib-hook中的<code>hookRequire</code>方法，hook被require引入的<strong>js文件</strong>，返回插桩后的js文件。因此需要在业务代码require前引入</li>\n<li><code>im.createClientHandler</code>，用于客户端<strong>js文件</strong>的动态插桩，它会把指定根路径下的js文件请求拦截，返回插桩后的代码。</li>\n</ul>\n</li>\n</ul>\n<p>在后台项目中，服务端代码使用<code>.ts</code>书写，本地使用<code>ts-node</code>启动，boe和线上使用<code>tsc</code>编译后的js文件启动。前端代码使用<code>.ts</code>书写，本地使用webpack + babel预编译成js。结合这个场景看，在node侧使用<code>hookLoader</code>，在UI测使用babel-plugin-istanbul插件更合适。</p>\n<p>总体来讲，工作分两步：<strong>代码插桩</strong>和<strong>可视化</strong>。</p>\n<h3 id=\"代码插桩\"><a href=\"#代码插桩\" class=\"headerlink\" title=\"代码插桩\"></a>代码插桩</h3><p>规划里一切功能的基础和本质都来自代码插桩。</p>\n<h4 id=\"client端\"><a href=\"#client端\" class=\"headerlink\" title=\"client端\"></a>client端</h4><p>client端可以直接使用目前仍良好维护的<a href=\"https://github.com/istanbuljs/babel-plugin-istanbul\">babel-plugin-istanbul</a>插件。在<code>.babelrc</code>中引入相关配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;env&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;test&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;plugins&quot;</span>: [<span class=\"string\">&quot;istanbul&quot;</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>仅在test环境下开启该插件。可以用<a href=\"https://www.npmjs.com/package/cross-env\">cross-env</a>这样的工具设置<code>NODE_ENV=test</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;test&quot;</span>: <span class=\"string\">&quot;cross-env NODE_ENV=test npm run start&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>插件还有<code>include</code>，<code>exclude</code>，<code>useInlineSourceMaps</code>这样的配置项。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;env&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;test&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;plugins&quot;</span>: [</span><br><span class=\"line\">        [<span class=\"string\">&quot;istanbul&quot;</span>, &#123;</span><br><span class=\"line\">          <span class=\"string\">&quot;useInlineSourceMaps&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">          <span class=\"string\">&quot;exclude&quot;</span>: [</span><br><span class=\"line\">            <span class=\"string\">&quot;**/*.spec.js&quot;</span></span><br><span class=\"line\">          ]</span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>插桩后的业务代码如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cov_ac7rkuoyv = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> path = <span class=\"string\">&quot;/Users/test/shenlvmeng/nyc-demo/src/App.js&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> hash = <span class=\"string\">&quot;7dec600464f484deef063d183319f809a7c25687&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> <span class=\"variable language_\">global</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Function</span>(<span class=\"string\">&quot;return this&quot;</span>)();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> gcv = <span class=\"string\">&quot;__coverage__&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> coverageData = &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&quot;/Users/shenlvmeng/nyc-demo/src/App.js&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">statementMap</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;0&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">start</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">line</span>: <span class=\"number\">8</span>,</span><br><span class=\"line\">          <span class=\"attr\">column</span>: <span class=\"number\">2</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">end</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">line</span>: <span class=\"number\">14</span>,</span><br><span class=\"line\">          <span class=\"attr\">column</span>: <span class=\"number\">9</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">fnMap</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;0&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&quot;App&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">decl</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">start</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">line</span>: <span class=\"number\">7</span>,</span><br><span class=\"line\">            <span class=\"attr\">column</span>: <span class=\"number\">9</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"attr\">end</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">line</span>: <span class=\"number\">7</span>,</span><br><span class=\"line\">            <span class=\"attr\">column</span>: <span class=\"number\">12</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">loc</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">start</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">line</span>: <span class=\"number\">7</span>,</span><br><span class=\"line\">            <span class=\"attr\">column</span>: <span class=\"number\">15</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"attr\">end</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">line</span>: <span class=\"number\">33</span>,</span><br><span class=\"line\">            <span class=\"attr\">column</span>: <span class=\"number\">1</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">line</span>: <span class=\"number\">7</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">branchMap</span>: &#123;&#125;,</span><br><span class=\"line\">    <span class=\"attr\">s</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;0&quot;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">f</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;0&quot;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">b</span>: &#123;&#125;,</span><br><span class=\"line\">    <span class=\"attr\">_coverageSchema</span>: <span class=\"string\">&quot;43e27e138ebf9cfc5966b082cf9a028302ed4184&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">hash</span>: <span class=\"string\">&quot;7dec600464f484deef063d183319f809a7c25687&quot;</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> coverage = <span class=\"variable language_\">global</span>[gcv] || (<span class=\"variable language_\">global</span>[gcv] = &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (coverage[path] &amp;&amp; coverage[path].<span class=\"property\">hash</span> === hash) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> coverage[path];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> coverage[path] = coverageData;</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> _jsxFileName = <span class=\"string\">&quot;/Users/test/shenlvmeng/nyc-demo/src/App.js&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  cov_ac7rkuoyv.<span class=\"property\">f</span>[<span class=\"number\">0</span>]++;</span><br><span class=\"line\">  cov_ac7rkuoyv.<span class=\"property\">s</span>[<span class=\"number\">0</span>]++;</span><br><span class=\"line\">  <span class=\"title class_\">Object</span>(react__WEBPACK_IMPORTED_MODULE_0__[<span class=\"string\">&quot;useEffect&quot;</span>])(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    cov_ac7rkuoyv.<span class=\"property\">f</span>[<span class=\"number\">1</span>]++;</span><br><span class=\"line\">    cov_ac7rkuoyv.<span class=\"property\">s</span>[<span class=\"number\">1</span>]++;</span><br><span class=\"line\"></span><br><span class=\"line\">    (<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">      cov_ac7rkuoyv.<span class=\"property\">f</span>[<span class=\"number\">2</span>]++;</span><br><span class=\"line\">      cov_ac7rkuoyv.<span class=\"property\">s</span>[<span class=\"number\">2</span>]++;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">__coverage__</span>);</span><br><span class=\"line\">      cov_ac7rkuoyv.<span class=\"property\">s</span>[<span class=\"number\">3</span>]++;</span><br><span class=\"line\">      axios__WEBPACK_IMPORTED_MODULE_1___default.<span class=\"property\">a</span>.<span class=\"property\">defaults</span>.<span class=\"property\">headers</span>.<span class=\"property\">post</span>[<span class=\"string\">&#x27;Access-Control-Allow-Origin&#x27;</span>] = <span class=\"string\">&#x27;*&#x27;</span>;</span><br><span class=\"line\">      cov_ac7rkuoyv.<span class=\"property\">s</span>[<span class=\"number\">4</span>]++;</span><br><span class=\"line\">      axios__WEBPACK_IMPORTED_MODULE_1___default.<span class=\"property\">a</span>.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;http://localhost:4000/coverage/client&#x27;</span>, <span class=\"variable language_\">window</span>.<span class=\"property\">__coverage__</span>);</span><br><span class=\"line\">    &#125;)();</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\">  cov_ac7rkuoyv.<span class=\"property\">s</span>[<span class=\"number\">5</span>]++;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> react__WEBPACK_IMPORTED_MODULE_0___default.<span class=\"property\">a</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;div&quot;</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">className</span>: <span class=\"string\">&quot;App&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">__source</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">fileName</span>: _jsxFileName,</span><br><span class=\"line\">      <span class=\"attr\">lineNumber</span>: <span class=\"number\">16</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">__self</span>: <span class=\"variable language_\">this</span></span><br><span class=\"line\">  &#125;, react__WEBPACK_IMPORTED_MODULE_0___default.<span class=\"property\">a</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;header&quot;</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">className</span>: <span class=\"string\">&quot;App-header&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">__source</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">fileName</span>: _jsxFileName,</span><br><span class=\"line\">      <span class=\"attr\">lineNumber</span>: <span class=\"number\">17</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">__self</span>: <span class=\"variable language_\">this</span></span><br><span class=\"line\">  &#125;, react__WEBPACK_IMPORTED_MODULE_0___default.<span class=\"property\">a</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;img&quot;</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">src</span>: _logo_svg__WEBPACK_IMPORTED_MODULE_2___default.<span class=\"property\">a</span>,</span><br><span class=\"line\">    <span class=\"attr\">className</span>: <span class=\"string\">&quot;App-logo&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">alt</span>: <span class=\"string\">&quot;logo&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">__source</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">fileName</span>: _jsxFileName,</span><br><span class=\"line\">      <span class=\"attr\">lineNumber</span>: <span class=\"number\">18</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">__self</span>: <span class=\"variable language_\">this</span></span><br><span class=\"line\">  &#125;), react__WEBPACK_IMPORTED_MODULE_0___default.<span class=\"property\">a</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;p&quot;</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">__source</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">fileName</span>: _jsxFileName,</span><br><span class=\"line\">      <span class=\"attr\">lineNumber</span>: <span class=\"number\">19</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">__self</span>: <span class=\"variable language_\">this</span></span><br><span class=\"line\">  &#125;, <span class=\"string\">&quot;Edit &quot;</span>, react__WEBPACK_IMPORTED_MODULE_0___default.<span class=\"property\">a</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;code&quot;</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">__source</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">fileName</span>: _jsxFileName,</span><br><span class=\"line\">      <span class=\"attr\">lineNumber</span>: <span class=\"number\">20</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">__self</span>: <span class=\"variable language_\">this</span></span><br><span class=\"line\">  &#125;, <span class=\"string\">&quot;src/App.js&quot;</span>), <span class=\"string\">&quot; and save to reload.&quot;</span>), react__WEBPACK_IMPORTED_MODULE_0___default.<span class=\"property\">a</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;a&quot;</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">className</span>: <span class=\"string\">&quot;App-link&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">href</span>: <span class=\"string\">&quot;https://reactjs.org&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">target</span>: <span class=\"string\">&quot;_blank&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">rel</span>: <span class=\"string\">&quot;noopener noreferrer&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">__source</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">fileName</span>: _jsxFileName,</span><br><span class=\"line\">      <span class=\"attr\">lineNumber</span>: <span class=\"number\">22</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">__self</span>: <span class=\"variable language_\">this</span></span><br><span class=\"line\">  &#125;, <span class=\"string\">&quot;Learn React&quot;</span>)));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到针对每个文件，插桩后的代码新建了一个函数，用于更新这个文件的覆盖率信息。在业务代码执行时，会不断更新对应的计数器。前端代码run起来后，可以通过<code>window.__coverage</code>直接得到当前项目的覆盖率情况。</p>\n<p><strong>覆盖率计算原理</strong></p>\n<p>拿到代码字符串后，使用AST解析库解析出语法树，在对应树节点插入覆盖率语句，之后将语法树转成插桩后的代码。这个过程在0.x.x版本的实现可以参加<a href=\"http://gotwarlost.github.io/istanbul/public/apidocs/files/lib_instrumenter.js.html#l467\">这里</a>。</p>\n<p>0.x.x版本的instanbul使用<a href=\"https://github.com/jquery/esprima\">esprima</a>和<a href=\"https://github.com/estools/escodegen\">escodegen</a>。在最新的istanbuljs的<a href=\"https://github.com/istanbuljs/istanbuljs/tree/master/packages/istanbul-lib-instrument\">istanbul-lib-instrument</a>中使用babel相关的包完成解析、生成等功能，但插桩思路不变。</p>\n<h4 id=\"node端\"><a href=\"#node端\" class=\"headerlink\" title=\"node端\"></a>node端</h4><p>node端使用istanbul-middleware中间件的<code>hookLoader</code>完成动态插桩。该中间件为<a href=\"https://github.com/gotwarlost/istanbul\">instanbul</a>作者所写，所依赖的istanbul版本是目前已经不再维护的0.x.x版本，同时中间件也是基于express所写，年代较老。中间件的设计和我们的场景有些距离，因此需要在其基础上进行改造。</p>\n<p>在预期场景下，我们主要使用<code>im.hookLoader</code>和<code>im.createHandler</code>两个方法。</p>\n<h5 id=\"im-hookLoader\"><a href=\"#im-hookLoader\" class=\"headerlink\" title=\"im.hookLoader\"></a><code>im.hookLoader</code></h5><p><code>im.hookLoader</code>只是在instanbul hook的基础上做的简单封装。看<a href=\"http://gotwarlost.github.io/istanbul/public/apidocs/files/lib_hook.js.html#l77\">文档</a>可以发现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">hookRequire</span>(<span class=\"params\">matcher, transformer, options</span>) &#123;</span><br><span class=\"line\">    options = options || &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> fn = <span class=\"title function_\">transformFn</span>(matcher, transformer, options.<span class=\"property\">verbose</span>),</span><br><span class=\"line\">        postLoadHook = options.<span class=\"property\">postLoadHook</span> &amp;&amp;</span><br><span class=\"line\">            <span class=\"keyword\">typeof</span> options.<span class=\"property\">postLoadHook</span> === <span class=\"string\">&#x27;function&#x27;</span> ? options.<span class=\"property\">postLoadHook</span> : <span class=\"literal\">null</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"title class_\">Module</span>.<span class=\"property\">_extensions</span>[<span class=\"string\">&#x27;.js&#x27;</span>] = <span class=\"keyword\">function</span> (<span class=\"params\"><span class=\"variable language_\">module</span>, filename</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ret = <span class=\"title function_\">fn</span>(fs.<span class=\"title function_\">readFileSync</span>(filename, <span class=\"string\">&#x27;utf8&#x27;</span>), filename);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ret.<span class=\"property\">changed</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">module</span>.<span class=\"title function_\">_compile</span>(ret.<span class=\"property\">code</span>, filename);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">originalLoader</span>(<span class=\"variable language_\">module</span>, filename);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (postLoadHook) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">postLoadHook</span>(filename);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>hook require是利用CommonJS的模块加载规范实现的。这里介绍下模块加载流程相关的背景。</p>\n<h5 id=\"模块加载流程\"><a href=\"#模块加载流程\" class=\"headerlink\" title=\"模块加载流程\"></a>模块加载流程</h5><p>require和module来自nodejs的<a href=\"https://nodejs.org/api/modules.html#modules_module\">Modules</a>模块。无需显式引入（原因下面会提）即可使用里面的<code>module</code>, <code>require</code>, <code>exports</code>的关键字。在require一个包时，分为了<strong>解析、加载、封装、求值、缓存</strong>几步。</p>\n<ol start=\"0\">\n<li>解析一步交给<code>module.require(modulename)</code>方法实现，该方法调用静态方法<code>Module._load</code>加载模块。</li>\n<li>加载时首先调用<code>Module._resolveFilename</code>解析路径，解析过程大致分为粗筛和精确定位</li>\n<li>粗筛，原生模块则直接返回模块名，否则从当前目录逐步向上寻找node_modules目录下的模块文件夹</li>\n<li>精确定位，首先在上面的目录下寻找有无没有拓展名的同名文件，再寻找以<code>js</code>、<code>json</code>、<code>node</code>拓展名结尾的文件；再寻找同名目录下<code>package.json</code>中<code>main</code>字段指定的路径，最后寻找同名目录下的index.js</li>\n<li>得到路径后，先试图从<code>Module._cache</code>中寻找有无模块缓存，若没有，则新建模块对象并缓存，之后调用<code>module.load()</code>方法加载该模块</li>\n<li>node默认只能load以<code>js</code>, <code>json</code>, <code>node</code>结尾的文件，除此之外均视为<code>.js</code>文件</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Module</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">load</span> = <span class=\"keyword\">function</span>(<span class=\"params\">filename</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">filename</span> = filename;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">paths</span> = <span class=\"title class_\">Module</span>.<span class=\"title function_\">_nodeModulePaths</span>(path.<span class=\"title function_\">dirname</span>(filename));</span><br><span class=\"line\">    <span class=\"keyword\">var</span> extension = path.<span class=\"title function_\">extname</span>(filename) || <span class=\"string\">&#x27;.js&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"title class_\">Module</span>.<span class=\"property\">_extensions</span>[extension]) extension = <span class=\"string\">&#x27;.js&#x27;</span>;</span><br><span class=\"line\">    <span class=\"title class_\">Module</span>.<span class=\"property\">_extensions</span>[extension](<span class=\"variable language_\">this</span>, filename);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">loaded</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li><code>Module._extensions</code>键值对默认只包含对上述三种文件的处理。其中json和node文件较简单</li>\n</ol>\n<ul>\n<li>json，读取文件 &#x3D;&gt; <code>JSON.parse</code> &#x3D;&gt; 注入到<code>module.exports</code>上</li>\n<li>node，调用<code>process.dlopen</code>加载</li>\n<li>js，调用<code>module._compile()</code>处理文件内容</li>\n</ul>\n<ol start=\"5\">\n<li><code>module._compile</code>执行js文件编译，编译前调用<code>Module.wrap</code>方法将模块封装在函数内，这也是<code>module</code>，<code>require</code>，<code>exports</code>，<code>__filename</code>，<code>__dirname</code>可以直接在模块内使用，且模块间的<code>module</code>，<code>require</code>，<code>exports</code>不相互干扰的原因。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Module</span>.<span class=\"property\">wrap</span> = <span class=\"keyword\">function</span>(<span class=\"params\">script</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Module</span>.<span class=\"property\">wrapper</span>[<span class=\"number\">0</span>] + script + <span class=\"title class_\">Module</span>.<span class=\"property\">wrapper</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"title class_\">Module</span>.<span class=\"property\">wrapper</span> = [</span><br><span class=\"line\">    <span class=\"string\">&#x27;(function (exports, require, module, __filename, __dirname) &#123; &#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;\\n&#125;);&#x27;</span></span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>wrap后，调用<code>vm.runInThisContext</code>将字符串转为可执行的js函数。最后一句执行封装的函数，注入当前module的相关信息到模块中</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Module</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">_compile</span> = <span class=\"keyword\">function</span>(<span class=\"params\">content, filename</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> wrapper = <span class=\"title class_\">Module</span>.<span class=\"title function_\">wrap</span>(content);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> compiledWrapper = vm.<span class=\"title function_\">runInThisContext</span>(wrapper, &#123;</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: filename,</span><br><span class=\"line\">    <span class=\"attr\">lineOffset</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"attr\">displayErrors</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"comment\">// 执行</span></span><br><span class=\"line\">  result = compiledWrapper.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">exports</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">exports</span>, <span class=\"built_in\">require</span>, <span class=\"variable language_\">this</span>, filename, dirname);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实际上，可以在REPL中输入<code>require.extensions</code>看到nodejs支持的3种文件拓展。而hookRequire所做的就是hook了加载<code>.js</code>的步骤，在交由<code>module._compile</code>处理前，前进行了插桩处理。</p>\n<blockquote>\n<p>注：<code>ts-node</code>能够import<code>.ts</code>文件也是因为在<code>module._extendsion</code>中添加了<code>.ts</code>的处理方法</p>\n</blockquote>\n<p>综上，在本地测试时，由于通过<code>ts-node</code>启动，<code>im.hookLoader</code>只会hook<code>.js</code>文件（0.x.x版本），会导致没有服务端代码覆盖率，上线前tsc后，就可以顺利注入，从<code>global.__coverage__</code>中拿到覆盖率数据。</p>\n<h4 id=\"数据采集\"><a href=\"#数据采集\" class=\"headerlink\" title=\"数据采集\"></a>数据采集</h4><p>服务端覆盖率数据采集借助上述的<code>im.hookLoader</code>就已完成。前端页面的代码覆盖率需要自行周期性上报。<code>im.createHandler</code>提供的API可以接收前端覆盖率，该方法创建的路由回调会调用<code>utils.mergeFileCoverage</code>最终将增量覆盖率数据累加在<code>global.__coverage__</code>中。</p>\n<h3 id=\"可视化\"><a href=\"#可视化\" class=\"headerlink\" title=\"可视化\"></a>可视化</h3><p>可视化需要借助istanbul（0.x版本）本身提供的相关API，又或者直接更方便地使用<code>im.createHandler</code>。其方便封装了一些istanbul的API，实现的简单的可视化功能，更多介绍可以直接参考istanbul-middleware使用文档。</p>\n<h4 id=\"im-createHandler\"><a href=\"#im-createHandler\" class=\"headerlink\" title=\"im.createHandler\"></a><code>im.createHandler</code></h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createHandler</span>(<span class=\"params\">opts</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> app = <span class=\"title function_\">express</span>();</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//send static file for /asset/asset-name</span></span><br><span class=\"line\">    app.<span class=\"title function_\">use</span>(<span class=\"string\">&#x27;/asset&#x27;</span>, express.<span class=\"title function_\">static</span>(<span class=\"variable constant_\">ASSETS_DIR</span>));</span><br><span class=\"line\">    app.<span class=\"title function_\">use</span>(<span class=\"string\">&#x27;/asset&#x27;</span>, express.<span class=\"title function_\">static</span>(path.<span class=\"title function_\">join</span>(<span class=\"variable constant_\">ASSETS_DIR</span>, <span class=\"string\">&#x27;vendor&#x27;</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\">    app.<span class=\"title function_\">use</span>(bodyParser.<span class=\"title function_\">urlencoded</span>(urlOptions));</span><br><span class=\"line\">    app.<span class=\"title function_\">use</span>(bodyParser.<span class=\"title function_\">json</span>(jsonOptions));</span><br><span class=\"line\"></span><br><span class=\"line\">    app.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">        core.<span class=\"title function_\">render</span>(<span class=\"literal\">null</span>, res, origUrl);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从上面的使用上看，<code>im.createHandler</code>的使用是和express绑定的，并不适配koa的风格，要想使用在非express服务端场景里，或者增加额外功能，就需要重构这个方法。不过，由于一些API的使用从0.x.x版本迁移到新的monorepo的版本并不平滑，且新版本API暂无文档。所以尽管instanbul已经不再更新，对istanbul-middleware中间件的重构还只能保持对旧版本istanbul的依赖。</p>\n<h4 id=\"重构设计\"><a href=\"#重构设计\" class=\"headerlink\" title=\"重构设计\"></a>重构设计</h4><p>为了兼容koa环境，从istanbul-middleware库fork新版本istanbul-koa-middleware，使用ts重写。去掉无用的代码，重点需要改造的就是<code>createKoaHandler</code>方法。</p>\n<p>为减少istanbul-koa-middleware使用方的依赖，考虑使用类似istanbul-middleware的形式，在<code>createKoaHandler</code>内部定义koa应用，使用方只需引入koa-mount和istanbul-koa-middleware即可在任意路由上挂载覆盖率可视化相关子路由。</p>\n<p>除此之外：</p>\n<ul>\n<li>使用koa-static替代<code>express.static</code></li>\n<li>使用koa-mount替代<code>app.use(&#39;/some/path&#39;, someMiddleware)</code></li>\n<li>使用koa-router替代<code>app.get</code>和<code>app.post</code></li>\n<li>定义<code>WebFramework</code>接口，掩盖对回调中<code>res</code>使用方式的不同</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">WebFramework</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">setHeader</span>: <span class=\"function\">(<span class=\"params\">key: <span class=\"built_in\">string</span>, value: <span class=\"built_in\">string</span></span>) =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">    <span class=\"attr\">status</span>: <span class=\"function\">(<span class=\"params\">code: <span class=\"built_in\">number</span></span>) =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">    <span class=\"attr\">write</span>: <span class=\"function\">(<span class=\"params\">content: <span class=\"built_in\">any</span></span>) =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">    <span class=\"attr\">end</span>: <span class=\"function\">(<span class=\"params\">content?: <span class=\"built_in\">string</span></span>) =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">genWebFrameworkCtxFromKoaCtx</span>(<span class=\"params\">ctx: Koa.ParameterizedContext</span>): <span class=\"title class_\">WebFramework</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">setHeader</span>(<span class=\"params\">key, value</span>) &#123;</span><br><span class=\"line\">            ctx.<span class=\"title function_\">set</span>(key, value);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"title function_\">status</span>(<span class=\"params\">code</span>) &#123;</span><br><span class=\"line\">            ctx.<span class=\"property\">status</span> = code;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"title function_\">write</span>(<span class=\"params\">content</span>) &#123;</span><br><span class=\"line\">            ctx.<span class=\"property\">res</span>.<span class=\"title function_\">write</span>(content);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"title function_\">end</span>(<span class=\"params\">content</span>) &#123;</span><br><span class=\"line\">            ctx.<span class=\"property\">res</span>.<span class=\"title function_\">end</span>(content);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样，重构后的istanbul-koa-middleware就可以帮我们实现最简单的覆盖数据可视化了。后续的新增功能，也都建立在对<code>createHandler</code>函数的改造上。</p>\n<h3 id=\"已知问题\"><a href=\"#已知问题\" class=\"headerlink\" title=\"已知问题\"></a>已知问题</h3><p>在上面工作完成后，第一阶段目标基本已经实现。</p>\n<p><img src=\"https://s1.ax1x.com/2020/04/16/JEZliq.png\" alt=\"效果图1\"><br><img src=\"https://s1.ax1x.com/2020/04/16/JEZ8zT.png\" alt=\"效果图2\"></p>\n<p>但是，还有很多可以优化的地方，这也是后续阶段需要解决的问题：</p>\n<ul>\n<li>服务端代码如果没有正确设置source-map，覆盖率展示的文件是tsc之后的js文件，可读性差</li>\n<li>需要区分环境，在特定环境下才对代码文件插桩</li>\n<li>本地环境下可以访问到原始的ts文件，上传测试环境后，由于不会打包上传源文件，覆盖率报告将看不了原始ts文件的覆盖详情</li>\n<li>覆盖率报告功能太简单，不能以分支、版本、仓库等空间维度或以历史信息、趋势等时间维度查看<br>，也没有diff内容覆盖率功能</li>\n<li>出现了一些意义不大的文件，需要剔除</li>\n</ul>\n<h3 id=\"更多\"><a href=\"#更多\" class=\"headerlink\" title=\"更多\"></a>更多</h3><ul>\n<li><a href=\"https://tech.youzan.com/front-coverage/\">前端精准测试探索：覆盖率实时统计工具</a></li>\n<li><a href=\"https://tech.kujiale.com/qian-duan-fu-gai-lu/\">基于Istanbul 优雅地搭建前端JS覆盖率平台</a></li>\n<li><a href=\"https://www.freecodecamp.org/news/requiring-modules-in-node-js-everything-you-need-to-know-e7fbd119be8/\">Requiring modules in Node.js: Everything you need to know</a></li>\n<li><a href=\"https://juejin.im/post/5d84456851882556f33d5fb0\">node模块加载机制 - 掘金</a></li>\n</ul>\n",
            "tags": [
                "前端",
                "端到端测试",
                "istanbul",
                "代码覆盖率",
                "istanbul-middleware",
                "代码插桩",
                "require钩子",
                "babel-plugin-istanbul"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2020/04/16/crx-intro/",
            "url": "http://shenlvmeng.github.com/blog/2020/04/16/crx-intro/",
            "title": "Chrome Extension开发须知",
            "date_published": "2020-04-16T15:42:29.000Z",
            "content_html": "<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><p>Extension是由HTML、CSS、JavaScript和图片等其他资源文件组成的压缩包。它可以增强浏览器体验，实现个性化。</p>\n<h2 id=\"Files\"><a href=\"#Files\" class=\"headerlink\" title=\"Files\"></a>Files</h2><p>Extension没有做目录的约定，但是它们需要已配置文件的形式写在manifest中。<code>manifest.json</code>中描述了Extension的基本信息、使用能力和重要文件。</p>\n<h3 id=\"manifest-json\"><a href=\"#manifest-json\" class=\"headerlink\" title=\"manifest.json\"></a><code>manifest.json</code></h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"comment\">// Required</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;manifest_version&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;My Extension&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;versionString&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Recommended</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;default_locale&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;en&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;description&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;A plain text description&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;icons&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span>...<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Pick one (or none)</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;browser_action&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span>...<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;page_action&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span>...<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Optional</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;action&quot;</span><span class=\"punctuation\">:</span> ...<span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;author&quot;</span><span class=\"punctuation\">:</span> ...<span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;automation&quot;</span><span class=\"punctuation\">:</span> ...<span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;background&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">// Recommended</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;persistent&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"comment\">// Optional</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;service_worker&quot;</span><span class=\"punctuation\">:</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;chrome_settings_overrides&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span>...<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;chrome_ui_overrides&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;bookmarks_ui&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;remove_bookmark_shortcut&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;remove_button&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;chrome_url_overrides&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span>...<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;commands&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span>...<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;content_capabilities&quot;</span><span class=\"punctuation\">:</span> ...<span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;content_scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">&#123;</span>...<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;content_security_policy&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;policyString&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;converted_from_user_script&quot;</span><span class=\"punctuation\">:</span> ...<span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;current_locale&quot;</span><span class=\"punctuation\">:</span> ...<span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;declarative_net_request&quot;</span><span class=\"punctuation\">:</span> ...<span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;devtools_page&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;devtools.html&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;event_rules&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">&#123;</span>...<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;externally_connectable&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;matches&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;*://*.example.com/*&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;file_browser_handlers&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span>...<span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;file_system_provider_capabilities&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;configurable&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;multiple_mounts&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;source&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;network&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;homepage_url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://path/to/homepage&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;import&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;incognito&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;spanning, split, or not_allowed&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;input_components&quot;</span><span class=\"punctuation\">:</span> ...<span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;key&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;publicKey&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;minimum_chrome_version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;versionString&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;nacl_modules&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span>...<span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;oauth2&quot;</span><span class=\"punctuation\">:</span> ...<span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;offline_enabled&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;omnibox&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;keyword&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;aString&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;optional_permissions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;tabs&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;options_page&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;options.html&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;options_ui&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;chrome_style&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;page&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;options.html&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;permissions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;tabs&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;platforms&quot;</span><span class=\"punctuation\">:</span> ...<span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;replacement_web_app&quot;</span><span class=\"punctuation\">:</span> ...<span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;requirements&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span>...<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;sandbox&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span>...<span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;short_name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Short Name&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;signature&quot;</span><span class=\"punctuation\">:</span> ...<span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;spellcheck&quot;</span><span class=\"punctuation\">:</span> ...<span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;storage&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;managed_schema&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;schema.json&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;system_indicator&quot;</span><span class=\"punctuation\">:</span> ...<span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;tts_engine&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span>...<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;update_url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://path/to/updateInfo.xml&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version_name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;aString&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;web_accessible_resources&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span>...<span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>manifest_version</code>表明使用manifest的格式版本号，目前是整数2</li>\n<li><code>icons</code>推荐使用PNG格式</li>\n<li><code>browser_action</code>和<code>page_action</code>类型二选一，前者用于所有页面，后者用于特定一些页面。</li>\n<li><code>background</code>可以指定在后台运行的脚本</li>\n<li><code>chrome</code>打头的三个配置可以定制浏览器本身的UI或行为</li>\n<li><code>commands</code>快捷键配置</li>\n<li><code>content_scripts</code>描述需要声明式插入的规则</li>\n<li><code>devtools_page</code>描述自定义的devtools选项卡</li>\n<li><code>externally_connectable</code>描述其他能够连接到该Extension的url规则</li>\n<li><code>omnibox</code>配置关键词当用户在地址栏输入特定字符时，变成与Extension交互</li>\n<li><code>permissions</code>显式声明Extension需要使用的权限</li>\n</ul>\n<p>Extension中的文件路径类似HTML中，通常使用相对路径访问。在使用绝对路径时，需要使用<code>chrome-extension://&lt;extensionID&gt;/&lt;pathToFile&gt;</code>风格的路径，可以使用<code>chrome.runtime.getURL()</code>得到某资源的绝对路径。</p>\n<h3 id=\"browser-action\"><a href=\"#browser-action\" class=\"headerlink\" title=\"browser_action\"></a>browser_action</h3><p>下面是一个browser_action的manifest样例。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// browser action</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;My extension&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"attr\">&quot;browser_action&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;default_icon&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span>                    <span class=\"comment\">// optional</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;16&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;images/icon16.png&quot;</span><span class=\"punctuation\">,</span>           <span class=\"comment\">// optional</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;24&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;images/icon24.png&quot;</span><span class=\"punctuation\">,</span>           <span class=\"comment\">// optional</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;32&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;images/icon32.png&quot;</span>            <span class=\"comment\">// optional</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;default_title&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Google Mail&quot;</span><span class=\"punctuation\">,</span>      <span class=\"comment\">// optional; shown in tooltip</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;default_popup&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;popup.html&quot;</span>        <span class=\"comment\">// optional</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>browser_action的UI可以包括icon、tooltip、badge、popup。</p>\n<ul>\n<li>icon，可以是图片文件或HTML5 canvas元素。后者可以动态创建，以提供更流畅的效果。</li>\n<li>tooltip，即配置文件中的title</li>\n<li>badge，用于描述Extension工作状态的徽章，最长4个字符，可以调用browserAction API动态修改内容或背景色</li>\n<li>popup，点击Extension按钮弹窗的窗口，可以包含任意HTML内容，可以在<code>default_popup</code>中定义，或调用API动态修改</li>\n</ul>\n<p>browser_action有下面一些最佳实践：</p>\n<ul>\n<li>在Extension作用于<strong>大多数页面</strong>时使用，在作用于<strong>少数页面</strong>时使用page_action</li>\n<li>使用更多彩和重的图标，体现出和轻量级page_action的区别</li>\n<li>不要模仿chrome内置图标，会造成误解</li>\n<li>注意图标在不同主题背景色下的表现形态</li>\n<li>不要使用动图，会引起用户焦虑</li>\n</ul>\n<h3 id=\"page-action\"><a href=\"#page-action\" class=\"headerlink\" title=\"page_action\"></a>page_action</h3><p>更轻量级。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// page action</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;My extension&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"attr\">&quot;page_action&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;default_icon&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span>                    <span class=\"comment\">// optional</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;16&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;images/icon16.png&quot;</span><span class=\"punctuation\">,</span>           <span class=\"comment\">// optional</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;24&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;images/icon24.png&quot;</span><span class=\"punctuation\">,</span>           <span class=\"comment\">// optional</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;32&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;images/icon32.png&quot;</span>            <span class=\"comment\">// optional</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;default_title&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Google Mail&quot;</span><span class=\"punctuation\">,</span>      <span class=\"comment\">// optional; shown in tooltip</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;default_popup&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;popup.html&quot;</span>        <span class=\"comment\">// optional</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>UI上没有badge，其余和browser_action一致。另外，在非指定页面下，会有灰度展示。最佳实践同上。</p>\n<h2 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h2><p>除了manifest描述项目结构外，需要另外一些组件组成完整的Extension功能。</p>\n<ul>\n<li>background script，Extension的事件handler，用于监听对于Extension来说重要的浏览器事件</li>\n<li>UI元素，有多种体现形式，如右键菜单，omnibox，点击按钮的弹出层等</li>\n<li>content scripts，用于和页面交互的js脚本。它可以传递消息给Extension的其他部分</li>\n<li>options page，用于配置Extension的页面</li>\n</ul>\n<p>下面是一些详细介绍</p>\n<h3 id=\"background-scripts\"><a href=\"#background-scripts\" class=\"headerlink\" title=\"background scripts\"></a>background scripts</h3><p>有效率的后台脚本应该由浏览器事件触发，执行命令之后卸载。这部分脚本在manifest的<code>background</code>中声明。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Awesome Test Extension&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"attr\">&quot;background&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;background.js&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;persistent&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>在<code>scripts</code>可以指定需要执行的多个后台脚本。<code>persistent</code>需要指定为false。只有使用了<code>chrome.webRequest</code>API的后台脚本才指定persistent为true。</p>\n<p>使用上，</p>\n<ol>\n<li>在Extension加载时，初始化一次性配置。</li>\n<li>添加监听函数，一些监听函数还提供更多参数便于筛选事件。</li>\n<li>在监听函数内，实现业务逻辑</li>\n<li>在卸载前，执行持久化数据、释放请求等操作</li>\n</ol>\n<h3 id=\"content-scripts\"><a href=\"#content-scripts\" class=\"headerlink\" title=\"content scripts\"></a>content scripts</h3><p>Content scripts运行在页面的执行环境下，通过DOM访问页面元素并和所在的Extension交互。它还可以调用Chrome APIs完成一些原生操作。Content scripts执行在和页面JS脚本相隔离的环境里，两者共享1个DOM。</p>\n<p>Content scripts有两种执行方式，命令式插入或声明式插入。前者通过<code>chrome.tabs.executeScript</code>实现，后者通过在manifest中声明实现在访问特定url时自动加载js文件：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"> <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;My extension&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"> ...</span><br><span class=\"line\"> <span class=\"attr\">&quot;content_scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">   <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">     <span class=\"attr\">&quot;matches&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;http://*.nytimes.com/*&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">     <span class=\"attr\">&quot;css&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;myStyles.css&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">     <span class=\"attr\">&quot;js&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;contentScript.js&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">   <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"> <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"> ...</span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>Content scripts和页面脚本虽然是隔离开的，但共享一个DOM，可以通过<code>window.postMessage</code>沟通和传递消息。</p>\n<h2 id=\"Chrome-API\"><a href=\"#Chrome-API\" class=\"headerlink\" title=\"Chrome API\"></a>Chrome API</h2><p>Extension使用特定的Chrome API在浏览器的环境下执行原生操作。API绝大多数都是异步的，这意味着如果想知道操作的结果，需要在回调函数中进行操作。Chrome的所有API都整合在Chrome这个namespace下，根据类型拆分成多个子模块，如chrome.runtime。</p>\n<h2 id=\"页面通信\"><a href=\"#页面通信\" class=\"headerlink\" title=\"页面通信\"></a>页面通信</h2><p>由于content scripts运行在网页环境下，它通常需要和Extension本身进行通信。</p>\n<ul>\n<li>一次性通信，content scripts端使用<code>chrome.runtime.sendMessage</code>，Extension端使用<code>chrome.tabs.sendMessage</code>。接收侧一律使用<code>chrome.runtime.onMessage.addListener</code></li>\n<li>持久性连接，类似上面使用<code>chrome.runtime.connect</code>或<code>tabs.connect</code>，详见<a href=\"https://developer.chrome.com/extensions/messaging#connect\">文档</a></li>\n<li>跨Extension通信，使用<code>chrome.onMessageExternal</code>或<code>runtime.onConnectExternal</code>接收事件，发送事件可以使用上面的一次性通信或持久性连接的方式</li>\n</ul>\n",
            "tags": [
                "chrome",
                "crx",
                "扩展"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2019/08/25/async-hooks-and-cls/",
            "url": "http://shenlvmeng.github.com/blog/2019/08/25/async-hooks-and-cls/",
            "title": "NodeJS async_hooks API与CLS（Continuation-local-storage）",
            "date_published": "2019-08-25T14:55:52.000Z",
            "content_html": "<h2 id=\"async-hooks\"><a href=\"#async-hooks\" class=\"headerlink\" title=\"async_hooks\"></a>async_hooks</h2><p><a href=\"https://nodejs.org/api/async_hooks.html#async_hooks_async_hooks\">async_hooks</a>是nodejs在8.2.1后引入的特性，目前仍然是Experimental状态。它被用来追踪NodeJS中异步资源的生命周期。</p>\n<p>在async_hooks特性加入之前，想要了解异步调用上下文或追踪异步调用逻辑是件比较困难的事情:</p>\n<ul>\n<li>最早在v0.11中有实现<a href=\"https://github.com/nodejs/node-v0.x-archive/pull/6011\">AsyncListener</a>，但在v0.12时<a href=\"https://github.com/nodejs/node-v0.x-archive/pull/8110\">被移除</a></li>\n<li>在Node6和7时，有非官方的<a href=\"http://blog.trevnorris.com/2015/02/asyncwrap-tutorial-introduction.html\">AsyncWrap</a>实现，指定回调函数监听异步资源的创建、调用前、调用后时机</li>\n</ul>\n<p>async_hooks友好地解决了异步资源创建、调用的追踪问题：</p>\n<ul>\n<li>异步资源代表一个关联了回调的对象，回调可能被调用1次或多次，比如<code>net.createServer()</code>里的<code>connect</code>事件或<code>fs.open()</code>。<code>AsyncHook</code>不区分这些场景，统一视作异步资源</li>\n<li>每一个异步上下文都有一个关联的id，即asyncId。asyncId是从1开始递增的，同一个async上下文中的id相同（在未enable async hook时，promise执行不会被分配asyncId）。<code>executionAsyncId()</code>可以获取当前异步上下文的asyncId，<code>triggerAsyncId()</code>获取触发当前异步上下文的异步上下文。借助asynId和triggerAsyncId可以追踪异步的调用关系和链路。</li>\n<li><code>async_hooks.createHook()</code>函数可以注册异步资源生命周期中init&#x2F;before&#x2F;after&#x2F;destroy&#x2F;promiseResolve事件的监听函数</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> async_hooks = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;async_hooks&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// ID of the current execution context</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> eid = async_hooks.<span class=\"title function_\">executionAsyncId</span>()</span><br><span class=\"line\"><span class=\"comment\">// ID of the handle responsible for triggering the callback of the</span></span><br><span class=\"line\"><span class=\"comment\">// current execution scope to call</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> tid = async_hooks.<span class=\"title function_\">triggerAsyncId</span>()</span><br><span class=\"line\"><span class=\"keyword\">const</span> asyncHook = async_hooks.<span class=\"title function_\">createHook</span>(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// called during object construction</span></span><br><span class=\"line\">    <span class=\"attr\">init</span>: <span class=\"keyword\">function</span> (<span class=\"params\">asyncId, type, triggerAsyncId, resource</span>) &#123; &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// called just before the resource&#x27;s callback is called</span></span><br><span class=\"line\">    <span class=\"attr\">before</span>: <span class=\"keyword\">function</span> (<span class=\"params\">asyncId</span>) &#123; &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// called just after the resource&#x27;s callback has finished</span></span><br><span class=\"line\">    <span class=\"attr\">after</span>: <span class=\"keyword\">function</span> (<span class=\"params\">asyncId</span>) &#123; &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// called when an AsyncWrap instance is destroyed</span></span><br><span class=\"line\">    <span class=\"attr\">destroy</span>: <span class=\"keyword\">function</span> (<span class=\"params\">asyncId</span>) &#123; &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// called only for promise resources, when the `resolve`</span></span><br><span class=\"line\">    <span class=\"comment\">// function passed to the `Promise` constructor is invoked</span></span><br><span class=\"line\">    <span class=\"attr\">promiseResolve</span>: <span class=\"keyword\">function</span> (<span class=\"params\">asyncId</span>) &#123; &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// starts listening for async events</span></span><br><span class=\"line\">asyncHook.<span class=\"title function_\">enable</span>()</span><br><span class=\"line\"><span class=\"comment\">// stops listening for new async events</span></span><br><span class=\"line\">asyncHook.<span class=\"title function_\">disable</span>()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"executionAsyncId和triggerAsyncId\"><a href=\"#executionAsyncId和triggerAsyncId\" class=\"headerlink\" title=\"executionAsyncId和triggerAsyncId\"></a>executionAsyncId和triggerAsyncId</h3><p>调用<code>executionAsyncId</code>和<code>triggerAsyncId</code>函数获取当前异步上下文的asyncId和triggerAsyncId。</p>\n<p><code>executionAsyncId</code>的返回值由运行时决定，<code>triggerAsyncId</code>可以返回当前上下文的触发原因上下文id。见下面的示例代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> server = net.<span class=\"title function_\">createServer</span>(<span class=\"function\">(<span class=\"params\">conn</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Returns the ID of the server, not of the new connection, because the</span></span><br><span class=\"line\">    <span class=\"comment\">// callback runs in the execution scope of the server&#x27;s MakeCallback().</span></span><br><span class=\"line\">    async_hooks.<span class=\"title function_\">executionAsyncId</span>();</span><br><span class=\"line\">    <span class=\"comment\">// The resource that caused (or triggered) this callback to be called</span></span><br><span class=\"line\">    <span class=\"comment\">// was that of the new connection. Thus the return value of triggerAsyncId()</span></span><br><span class=\"line\">    <span class=\"comment\">// is the asyncId of &quot;conn&quot;.</span></span><br><span class=\"line\">    async_hooks.<span class=\"title function_\">triggerAsyncId</span>();</span><br><span class=\"line\">&#125;).<span class=\"title function_\">listen</span>(port, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Returns the ID of a TickObject (i.e. process.nextTick()) because all</span></span><br><span class=\"line\">    <span class=\"comment\">// callbacks passed to .listen() are wrapped in a nextTick().</span></span><br><span class=\"line\">    async_hooks.<span class=\"title function_\">executionAsyncId</span>();</span><br><span class=\"line\">    <span class=\"comment\">// Even though all callbacks passed to .listen() are wrapped in a nextTick()</span></span><br><span class=\"line\">    <span class=\"comment\">// the callback itself exists because the call to the server&#x27;s .listen()</span></span><br><span class=\"line\">    <span class=\"comment\">// was made. So the return value would be the ID of the server.</span></span><br><span class=\"line\">    async_hooks.<span class=\"title function_\">triggerAsyncId</span>();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"createHook\"><a href=\"#createHook\" class=\"headerlink\" title=\"createHook\"></a><code>createHook</code></h3><p>更常用地，我们使用<code>async_hooks.createHook</code>创建异步资源的钩子，注册异步资源生命周期各阶段的回调函数，目前支持init&#x2F;before&#x2F;after&#x2F;destroy&#x2F;promiseResolve这几种。</p>\n<p><strong>注意</strong>：打印信息到控制台也是一个异步操作，<code>console.log()</code>会触发AsyncHooks的各个回调。因此AsyncHook回调内使用<code>console.log()</code>或类似异步日志打印，会造成无限递归。一种解决办法是使用<code>fs.writeFileSync</code>或<code>process._rawDebug</code>这种同步日志操作。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;util&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">debug</span>(<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Use a function like this one when debugging inside an AsyncHooks callback</span></span><br><span class=\"line\">    fs.<span class=\"title function_\">writeFileSync</span>(<span class=\"string\">&#x27;log.out&#x27;</span>, <span class=\"string\">`<span class=\"subst\">$&#123;util.format(...args)&#125;</span>\\n`</span>, &#123; <span class=\"attr\">flag</span>: <span class=\"string\">&#x27;a&#x27;</span> &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// OR</span></span><br><span class=\"line\">    process.<span class=\"title function_\">_rawDebug</span>(<span class=\"string\">`<span class=\"subst\">$&#123;util.format(...args)&#125;</span>\\n`</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"init-asyncId-type-triggerAsyncId-resource\"><a href=\"#init-asyncId-type-triggerAsyncId-resource\" class=\"headerlink\" title=\"init(asyncId, type, triggerAsyncId, resource)\"></a>init(asyncId, type, triggerAsyncId, resource)</h4><p>在<em>可能</em>会触发异步事件的资源构造时调用。这不代表后面的<code>before/after</code>事件回调会在<code>destroy</code>回调触发，只是说有这个可能。举个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#x27;net&#x27;</span>).<span class=\"title function_\">createServer</span>().<span class=\"title function_\">listen</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123; <span class=\"variable language_\">this</span>.<span class=\"title function_\">close</span>(); &#125;);</span><br><span class=\"line\"><span class=\"comment\">// OR</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(<span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;&#125;, <span class=\"number\">10</span>));</span><br></pre></td></tr></table></figure>\n\n<p>参数解释如下：</p>\n<ul>\n<li><code>asyncId</code> 异步资源id</li>\n<li><code>type</code> 异步资源类型，字符串枚举值，具体参见<a href=\"https://nodejs.org/api/async_hooks.html#async_hooks_type\">官方文档</a></li>\n<li><code>triggerAsyncId</code> 触发当前异步资源创建的异步上下文的asyncId</li>\n<li><code>resource</code> 被初始化的异步资源对象</li>\n</ul>\n<p><code>triggerAsyncId</code>表示的是资源创建的原因，<code>async_hooks.executionAsyncId()</code>表示的是资源创建的时机。如下面例子里体现的一样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">async_hooks.<span class=\"title function_\">createHook</span>(&#123;</span><br><span class=\"line\">  <span class=\"title function_\">init</span>(<span class=\"params\">asyncId, type, triggerAsyncId</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> eid = async_hooks.<span class=\"title function_\">executionAsyncId</span>();</span><br><span class=\"line\">    fs.<span class=\"title function_\">writeSync</span>(</span><br><span class=\"line\">      <span class=\"number\">1</span>, <span class=\"string\">`<span class=\"subst\">$&#123;type&#125;</span>(<span class=\"subst\">$&#123;asyncId&#125;</span>): trigger: <span class=\"subst\">$&#123;triggerAsyncId&#125;</span> execution: <span class=\"subst\">$&#123;eid&#125;</span>\\n`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;).<span class=\"title function_\">enable</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#x27;net&#x27;</span>).<span class=\"title function_\">createServer</span>(<span class=\"function\">(<span class=\"params\">conn</span>) =&gt;</span> &#123;&#125;).<span class=\"title function_\">listen</span>(<span class=\"number\">8080</span>);</span><br></pre></td></tr></table></figure>\n\n<p>在<code>nc localhost 8080</code>后，打印信息如下：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TCPSERVERWRAP(5): trigger: 1 execution: 1</span><br><span class=\"line\">TCPWRAP(7): trigger: 5 execution: 0</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"before-asyncId\"><a href=\"#before-asyncId\" class=\"headerlink\" title=\"before(asyncId)\"></a>before(asyncId)</h4><p>在异步操作初始化完成（如TCP服务器接收新连接）或资源准备完成（写数据到磁盘），准备执行回调时触发。入参<code>asyncId</code>即这个异步资源的ID。<code>before</code>事件可能会触发0~N次。</p>\n<ul>\n<li>0次，异步操作被撤销</li>\n<li>&gt; 1次，持久化的异步资源，如TCP服务器</li>\n</ul>\n<h4 id=\"after-asyncId\"><a href=\"#after-asyncId\" class=\"headerlink\" title=\"after(asyncId)\"></a>after(asyncId)</h4><p>回调执行完成后立即触发。当执行回调过程中有未捕获异常，会在触发“uncaughtException”事件后触发。</p>\n<h4 id=\"destroy-asyncId\"><a href=\"#destroy-asyncId\" class=\"headerlink\" title=\"destroy(asyncId)\"></a>destroy(asyncId)</h4><p>当asyncId对应的异步资源被销毁时调用。有些异步资源的销毁要依赖垃圾回收机制，所以当引用了传递到<code>init</code>函数的resource时，destory事件可能永远不会被触发，从而造成内存泄漏。</p>\n<h4 id=\"promiseResolve-asyncId\"><a href=\"#promiseResolve-asyncId\" class=\"headerlink\" title=\"promiseResolve(asyncId)\"></a>promiseResolve(asyncId)</h4><p>当Promise构造器中的resolve函数被执行时，promiseResolve事件被触发。有些情况下，有些resolve函数是被隐式执行的，比如<code>.then</code>函数会返回一个新的Promise，这个时候也会被调用。</p>\n<p>当<code>new Promise((resolve) =&gt; resolve(true)).then((a) =&gt; &#123;&#125;);</code>语句执行时，会顺序触发下列函数：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">init for PROMISE with id 5, trigger id: 1</span><br><span class=\"line\">  promise resolve 5      # corresponds to resolve(true)</span><br><span class=\"line\">init for PROMISE with id 6, trigger id: 5  # the Promise returned by then()</span><br><span class=\"line\">  before 6               # the then() callback is entered</span><br><span class=\"line\">  promise resolve 6      # the then() callback resolves the promise by returning</span><br><span class=\"line\">  after 6</span><br></pre></td></tr></table></figure>\n\n<p>AsyncHook实例定义好后，需要通过<code>enable</code>开启。可以使用<code>disable</code>关闭AsyncHook的回调执行。</p>\n<p>下面是一个AsyncHook的实例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> indent = <span class=\"number\">0</span>;</span><br><span class=\"line\">async_hooks.<span class=\"title function_\">createHook</span>(&#123;</span><br><span class=\"line\">    <span class=\"title function_\">init</span>(<span class=\"params\">asyncId, type, triggerAsyncId</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> eid = async_hooks.<span class=\"title function_\">executionAsyncId</span>();</span><br><span class=\"line\">        <span class=\"keyword\">const</span> indentStr = <span class=\"string\">&#x27; &#x27;</span>.<span class=\"title function_\">repeat</span>(indent);</span><br><span class=\"line\">        fs.<span class=\"title function_\">writeSync</span>(</span><br><span class=\"line\">            <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"string\">`<span class=\"subst\">$&#123;indentStr&#125;</span><span class=\"subst\">$&#123;type&#125;</span>(<span class=\"subst\">$&#123;asyncId&#125;</span>):`</span> +</span><br><span class=\"line\">            <span class=\"string\">` trigger: <span class=\"subst\">$&#123;triggerAsyncId&#125;</span> execution: <span class=\"subst\">$&#123;eid&#125;</span>\\n`</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">before</span>(<span class=\"params\">asyncId</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> indentStr = <span class=\"string\">&#x27; &#x27;</span>.<span class=\"title function_\">repeat</span>(indent);</span><br><span class=\"line\">        fs.<span class=\"title function_\">writeFileSync</span>(<span class=\"string\">&#x27;log.out&#x27;</span>, <span class=\"string\">`<span class=\"subst\">$&#123;indentStr&#125;</span>before:  <span class=\"subst\">$&#123;asyncId&#125;</span>\\n`</span>, &#123; <span class=\"attr\">flag</span>: <span class=\"string\">&#x27;a&#x27;</span> &#125;);</span><br><span class=\"line\">        indent += <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">after</span>(<span class=\"params\">asyncId</span>) &#123;</span><br><span class=\"line\">        indent -= <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> indentStr = <span class=\"string\">&#x27; &#x27;</span>.<span class=\"title function_\">repeat</span>(indent);</span><br><span class=\"line\">        fs.<span class=\"title function_\">writeFileSync</span>(<span class=\"string\">&#x27;log.out&#x27;</span>, <span class=\"string\">`<span class=\"subst\">$&#123;indentStr&#125;</span>after:  <span class=\"subst\">$&#123;asyncId&#125;</span>\\n`</span>, &#123; <span class=\"attr\">flag</span>: <span class=\"string\">&#x27;a&#x27;</span> &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">destroy</span>(<span class=\"params\">asyncId</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> indentStr = <span class=\"string\">&#x27; &#x27;</span>.<span class=\"title function_\">repeat</span>(indent);</span><br><span class=\"line\">        fs.<span class=\"title function_\">writeFileSync</span>(<span class=\"string\">&#x27;log.out&#x27;</span>, <span class=\"string\">`<span class=\"subst\">$&#123;indentStr&#125;</span>destroy:  <span class=\"subst\">$&#123;asyncId&#125;</span>\\n`</span>, &#123; <span class=\"attr\">flag</span>: <span class=\"string\">&#x27;a&#x27;</span> &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).<span class=\"title function_\">enable</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#x27;net&#x27;</span>).<span class=\"title function_\">createServer</span>(<span class=\"function\">() =&gt;</span> &#123;&#125;).<span class=\"title function_\">listen</span>(<span class=\"number\">8080</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Let&#x27;s wait 10ms before logging the server started.</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;&gt;&gt;&gt;&#x27;</span>, async_hooks.<span class=\"title function_\">executionAsyncId</span>());</span><br><span class=\"line\">    &#125;, <span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>在启动服务器后，打印信息如下：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TCPSERVERWRAP(5): trigger: 1 execution: 1</span><br><span class=\"line\">TickObject(6): trigger: 5 execution: 1</span><br><span class=\"line\">before:  6</span><br><span class=\"line\">  Timeout(7): trigger: 6 execution: 6</span><br><span class=\"line\">after:   6</span><br><span class=\"line\">destroy: 6</span><br><span class=\"line\">before:  7</span><br><span class=\"line\">&gt;&gt;&gt; 7</span><br><span class=\"line\">  TickObject(8): trigger: 7 execution: 7</span><br><span class=\"line\">after:   7</span><br><span class=\"line\">before:  8</span><br><span class=\"line\">after:   8</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h3><p>可以直接参考<a href=\"https://nodejs.org/api/async_hooks.html#async_hooks_error_handling\">官方文档描述</a></p>\n<h3 id=\"可以用来干嘛\"><a href=\"#可以用来干嘛\" class=\"headerlink\" title=\"可以用来干嘛\"></a>可以用来干嘛</h3><p>一个最为人知的使用场景是我们下面会提到的CLS（Continuation-local-storage）。cls-hooked库通过async_hooks建立了context对象和当前async执行上下文的关系，从而在整个执行链（execution chain）上维护一个统一的数据存储。</p>\n<p>还有一个是结合<a href=\"https://nodejs.org/api/perf_hooks.html\">Performance Timing API</a>这样的性能监测工具诊断整个异步操作流程的性能。比如<a href=\"https://clinicjs.org/blog/introducing-bubbleprof/\">这篇文章</a>所介绍的。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"https://nodejs.org/api/async_hooks.html\">Async Hooks | Node.js Documentation</a></li>\n<li><a href=\"https://itnext.io/a-pragmatic-overview-of-async-hooks-api-in-node-js-e514b31460e9\">A Pragmatic Overview of Async Hooks API in Node.js</a></li>\n</ul>\n<h2 id=\"CLS\"><a href=\"#CLS\" class=\"headerlink\" title=\"CLS\"></a>CLS</h2><p><a href=\"https://github.com/othiym23/node-continuation-local-storage\">Continuation-local storage(CLS)</a>类似线程编程里的线程存储，不过基于nodeJS风格的链式回调函数调用。它得名于函数式编程中的<a href=\"https://en.wikipedia.org/wiki/Continuation-passing_style\">Continuation-passing style</a>，旨在链式函数调用过程中维护一个持久的数据。</p>\n<p>在node V8之前，分别基于AsyncListener和AsyncWrap实现。在V8后，基于async_hook实现的库名为<a href=\"https://github.com/jeff-lewis/cls-hooked#readme\">cls-hooked</a>。但使用方法一致。</p>\n<p>这里借用cls README里的一个例子。假设你写了一个获取用户信息的模块，将获取到的用户信息放在session中。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// setup.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> createNamespace = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;cls-hooked&#x27;</span>).<span class=\"property\">createNamespace</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> session = <span class=\"title function_\">createNamespace</span>(<span class=\"string\">&#x27;my session&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> db = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./lib/db.js&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">start</span>(<span class=\"params\">options, next</span>) &#123;</span><br><span class=\"line\">  db.<span class=\"title function_\">fetchUserById</span>(options.<span class=\"property\">id</span>, <span class=\"keyword\">function</span> (<span class=\"params\">error, user</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (error) <span class=\"keyword\">return</span> <span class=\"title function_\">next</span>(error);</span><br><span class=\"line\"></span><br><span class=\"line\">    session.<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;user&#x27;</span>, user);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">next</span>();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>之后，需要将用户信息转化为一个HTML文档，你在另外一个文件中定义了转换函数，并从session中取出你想要的用户信息。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// send_response.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> getNamespace = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;cls-hooked&#x27;</span>).<span class=\"property\">getNamespace</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> session = <span class=\"title function_\">getNamespace</span>(<span class=\"string\">&#x27;my session&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> render = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./lib/render.js&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">finish</span>(<span class=\"params\">response</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> user = session.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;user&#x27;</span>);</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(&#123;<span class=\"attr\">user</span>: user&#125;).<span class=\"title function_\">pipe</span>(response);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>cls的使用围绕namespace展开，你可以根据需要自由组织namespace，需要持久化的信息读写在namespace的context上进行。</p>\n<ul>\n<li><code>cls.createNamespace</code>、<code>cls.getNamespace</code> 创建和获取一个namespace</li>\n<li><code>cls.destroyNamespace</code>、<code>cls.reset</code> 删除一个namespace和重置所有namespace</li>\n<li><code>ns.get</code>、<code>ns.set</code> 在namespace的context上读取和设置持久化数据</li>\n<li><code>ns.run</code>、<code>ns.runAndReturn</code>、<code>ns.runPromise</code> 在给定context下执行函数</li>\n<li><code>ns.bind</code>、<code>ns.bindEmitter</code> 绑定context到给定函数或eventEmitter</li>\n<li><code>context</code> 维护持久化数据的plain object</li>\n</ul>\n<p>更多API参考<a href=\"https://github.com/jeff-lewis/cls-hooked#clscreatenamespacename\">文档</a>。</p>\n<h3 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h3><p>正如上面所说，“cls-hooked库通过async_hooks建立了context对象和当前async执行上下文的关系”。下面有张图通过例子描述了cls的工作过程：</p>\n<p><img src=\"https://miro.medium.com/max/924/1*PPk_uEmQFVKO16byHpwnXA.jpeg\" alt=\"CLS workflow\"></p>\n<p>简单拆解一下：</p>\n<ul>\n<li>首先，我们有一个典型的web server和应用上的中间件，我们在整个应用的生命周期里创建一个cls的namespace。</li>\n<li>新请求到达中间件时，cls通过<code>ns.run</code>（别的方式也行）创建一个空的cls context，并入栈该context，设置为active context。</li>\n<li>由于cls内部注册了AsyncHook，在<code>init</code>阶段，在Map中关联对应active context到当前asyncId。从而有异步操作（如查数据库）时，此前入栈的context就和操作的asyncId对应上。此后get<br>、set操作都会针对同一active context进行。</li>\n<li>异步操作完成后，<code>after</code>回调触发，active context变成undefined，同时出栈当前context。当<code>destroy</code>回调触发时，会将关联到asyncId的context从Map中移除。</li>\n</ul>\n<p>在cls-hooked实现中，</p>\n<ul>\n<li><code>ns.get</code>和<code>ns.set</code>和<code>ns.active</code>相关联</li>\n<li><code>ns.active</code>通过<code>ns.enter</code>、<code>ns.exit</code>变更或者在<code>init</code>回调中从contextMap中改变。</li>\n<li><code>ns.enter</code>、<code>ns.exit</code>、<code>init</code>回调最终都经由<code>ns.runxxx</code>或<code>ns.bindxxx</code>得到初始的context</li>\n<li>cls-hooked借助async_hook和<code>ns.enter</code>、<code>ns.exit</code>保证异步流程中context和异步上下文的正确对应关系</li>\n</ul>\n<p>考虑到cls-hooked的js代码可读性，可维护性和工程角度上还有改善空间，基于上面的原理，做了ts的重构，源码见这里(待补充)，供大家参考和学习cls-hooked。</p>\n<h3 id=\"追踪logId\"><a href=\"#追踪logId\" class=\"headerlink\" title=\"追踪logId\"></a>追踪logId</h3><blockquote>\n<p>醉翁之意不在酒</p>\n</blockquote>\n<p>有了cls的帮助，我们就可以利用它帮我们持久化logId，避免“continuation-passing-context”。可以写一个中间件，为req、res包装context，同时为每次请求持久化logId。在后面的controller、services这些位置就可以拿到之前持久化的logId。</p>\n<p>一个express风格的中间件类似下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> cls = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;cls-hooked&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> uuidv4 = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;uuid/v4&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> clsNamespace = cls.<span class=\"title function_\">createNamespace</span>(<span class=\"string\">&#x27;app&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">clsMiddleware</span> = (<span class=\"params\">req, res, next</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// req and res are event emitters. We want to access CLS context inside of their event callbacks</span></span><br><span class=\"line\">  clsNamespace.<span class=\"title function_\">bind</span>(req);</span><br><span class=\"line\">  clsNamespace.<span class=\"title function_\">bind</span>(res);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> logId = <span class=\"title function_\">uuidv4</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  clsNamespace.<span class=\"title function_\">run</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    clsNamespace.<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;logId&#x27;</span>, logId);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">next</span>();</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// controller.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">controller</span> = (<span class=\"params\">req, res, next</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> traceID = clsNamespace.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;logId&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个思路的基础上，有类似<a href=\"https://github.com/puzpuzpuz/cls-rtracer\">cls-rtracer</a>或<a href=\"https://github.com/keenondrums/cls-proxify\">cls-proxify</a>这样的库，提供针对express、koa、fastify等常见后端框架的中间件，只需简单指定配置，便可以在请求的生命周期里透传logId，免去“continuation-passing-context”的尴尬，对已有代码侵入性也很小。有需要透传logId，但并不想（或暂时不能）使用后端框架的场景下可以考虑使用这种方案。</p>\n<h2 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://github.com/nodejs/node-v0.x-archive/issues/5243\">context: core module to manage generic contexts for async call chains · Issue #5423</a></li>\n<li><a href=\"https://datahero.com/blog/2014/05/22/node-js-preserving-data-across-async-callbacks/\">Node.js – Preserving Data Across Async Callbacks</a></li>\n<li><a href=\"https://itnext.io/nodejs-logging-made-right-117a19e8b4ce\">NodeJS logging made right</a></li>\n</ul>\n",
            "tags": [
                "async_hooks",
                "cls-hooked",
                "logId"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2019/03/12/indexeddb-introduction/",
            "url": "http://shenlvmeng.github.com/blog/2019/03/12/indexeddb-introduction/",
            "title": "Electron应用数据库选型暨indexedDB扫盲",
            "date_published": "2019-03-11T16:01:59.000Z",
            "content_html": "<blockquote>\n<p>名谓扫盲，实则扫自己的盲</p>\n</blockquote>\n<h2 id=\"选型\"><a href=\"#选型\" class=\"headerlink\" title=\"选型\"></a>选型</h2><p>要说到最近的一个个人项目<a href=\"https://github.com/shenlvmeng/calendone\">calendone</a>，它是一个普通的Electron日历应用，有每日记录，定计划等功能，需要做数据持久化。数据量不大，不需要考虑性能问题。简单看了些方案。</p>\n<h3 id=\"SQLite\"><a href=\"#SQLite\" class=\"headerlink\" title=\"SQLite\"></a>SQLite</h3><ul>\n<li><strong>关系型数据库</strong>，具有关系型数据库的一切特性，事务遵循ACID属性。小巧轻便，有knex这样的库做ORM。</li>\n<li>是node原生模块，需要重新编译，而且有坑</li>\n</ul>\n<h3 id=\"NeDB\"><a href=\"#NeDB\" class=\"headerlink\" title=\"NeDB\"></a>NeDB</h3><ul>\n<li><strong>NoSQL类型数据库</strong>，可以实现本地存储，也可以作为内存存储</li>\n<li><strong>API是MongoDB的一个子集</strong></li>\n<li>纯js实现，一个文件对应一张表</li>\n</ul>\n<h3 id=\"Leveldb\"><a href=\"#Leveldb\" class=\"headerlink\" title=\"Leveldb\"></a>Leveldb</h3><ul>\n<li><strong>NoSQL类型数据库</strong>，支持内存和持久化存储</li>\n<li><strong>没有事务机制</strong>，默认按key查询，没有索引</li>\n<li>默认保存的不是js对象，而是字符串。如果要保存为对象，可以在level函数第二个参数加入<code>&#123; valueEncoding: &quot;json&quot; &#125;</code>来让保存的js对象以json的形式读取</li>\n</ul>\n<h3 id=\"Lowdb\"><a href=\"#Lowdb\" class=\"headerlink\" title=\"Lowdb\"></a>Lowdb</h3><ul>\n<li>基于Loadsh的<strong>纯JSON文件数据库</strong>，速度较慢</li>\n<li>不支持索引&#x2F;事务&#x2F;批量操作等数据库功能</li>\n</ul>\n<h3 id=\"indexedDB\"><a href=\"#indexedDB\" class=\"headerlink\" title=\"indexedDB\"></a>indexedDB</h3><ul>\n<li><strong>NoSQL数据库</strong>，浏览器自带，可以储存大量数据，容量为250MB以上</li>\n<li>支持事务，有版本号的概念。</li>\n<li>支持较多的字段类型</li>\n</ul>\n<p>综上考虑，最后采用浏览器自带的indexedDB，足够满足要求，漫游接入成本，升级方便，调试方便。</p>\n<h2 id=\"indexedDB介绍\"><a href=\"#indexedDB介绍\" class=\"headerlink\" title=\"indexedDB介绍\"></a>indexedDB介绍</h2><p>indexedDB脱胎于HTML本地存储。</p>\n<h3 id=\"HTML本地存储\"><a href=\"#HTML本地存储\" class=\"headerlink\" title=\"HTML本地存储\"></a>HTML本地存储</h3><p>上古时代中，HTML中持久化数据只有几种方法[1]：</p>\n<ul>\n<li>cookie。cookie的缺点很明显，最多只能存储4KB的数据，且会携带在同域名下每个HTTP请求的头部，明文传输（除非你使用SSL）。</li>\n<li>IE userData。微软在上世纪90年代的浏览器大战时推出的本地存储方案，允许每个页面最多存储64K数据，每个站点最多640K数据，它不是Web标准的一部分</li>\n<li>Flash cookie。它实际上和HTTP cookie并不是一回事，它的名字可能叫做”Flash本地存储”更为合适。考虑到Flash已经是要被淘汰的技术……</li>\n</ul>\n<p>本地存储出现后，有了下面一些标准化的更简单的方法：</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API\">Web Storage接口</a>，即localStorage和sessionStorage</li>\n<li>Web SQL，这是一个<strong>已经废弃</strong>的规范。就跟它的名字一样，它就是浏览器端的一个SQL数据库，可以执行SQL语句。由于语法和SQLite绑定过紧，后被标准组织废弃</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/IndexedDB_API\">indexedDB</a>，Web SQL的替代品，也是浏览器端的数据库，但他是No SQL的。有MongoDB使用体验的，对它就不会感到陌生。</li>\n</ul>\n<h3 id=\"indexedDB-1\"><a href=\"#indexedDB-1\" class=\"headerlink\" title=\"indexedDB\"></a>indexedDB</h3><p>indexedDB是浏览器提供的本地数据库，目标是持久化存储大量数据，提供类No SQL的增删改查体验。因此它有以下几点特色：</p>\n<ul>\n<li><strong>键值对存储</strong>，采用对象仓库（object store）存放数据，所有类型的数据都可以直接存入，包括 JavaScript 对象。</li>\n<li><strong>支持索引</strong>，indexedDB没有表列的概念，但可以建立索引，查询数据时使用id或索引搜索</li>\n<li><strong>支持事务</strong>，保证操作的原子性，事务中的任意一步失败，数据库都会回滚到操作事务前的状态</li>\n<li><strong>异步操作</strong>，indexedDB操作都是异步的，在执行数据增删改查时，不会影响界面性能。</li>\n<li><strong>同源限制</strong>，每一个数据库会关联创建它的域名。网页只能访问自身域名下的数据库，不能跨域访问数据库。</li>\n<li><strong>其他</strong>，包括存储空间大、支持二进制存储等…</li>\n</ul>\n<h4 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h4><ul>\n<li><strong>数据库</strong>，IDBDatabase对象类型，每个域名（协议 + 域名 + 端口）可以新建任意多个数据库。</li>\n<li><strong>对象仓库</strong>，IDBObjectStore对象类型，一个数据库包含若干个对象仓库，类似于关系型数据库中的表</li>\n<li><strong>数据记录</strong>，类型于关系型数据库中的行，但是只有主键和数据体两部分。<strong>数据体可以是任意数据类型，不限于对象</strong>。</li>\n<li><strong>索引</strong>，IDBIndex对象类型，数据记录里除了主键以外的搜索参照</li>\n<li><strong>事务</strong>，IDBTransaction数据类型，对数据库的增删改查都需要通过事务进行，执行结果通过<code>error</code>，<code>success</code>，<code>abort</code>事件回调拿到</li>\n</ul>\n<p>indexedDB定义了许多对象接口，即API，除了上面介绍的一些，更完善的接口介绍可以参考MDN的介绍。</p>\n<h4 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h4><p>indexedDB 鼓励使用的基本模式如下所示：</p>\n<ol>\n<li>打开数据库。</li>\n<li>在数据库中创建一个对象仓库（object store）。</li>\n<li>启动一个事务，并发送一个请求来执行一些数据库操作，像增加或提取数据等。</li>\n<li>通过监听正确类型的DOM事件以等待操作完成。</li>\n<li>在操作结果上进行一些操作（可以在request对象中找到）</li>\n</ol>\n<p><strong>打开数据库</strong></p>\n<p>使用 IndexedDB 的第一步是打开数据库，使用indexedDB.open()方法如下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> request = <span class=\"variable language_\">window</span>.<span class=\"property\">indexedDB</span>.<span class=\"title function_\">open</span>(databaseName, version);</span><br></pre></td></tr></table></figure>\n\n<p>其中第一个参数为数据库名，第二个参数是数据库版本号。<code>indexedDB.open()</code>方法返回一个<code>IDBRequest</code>对象。这个对象通过三种事件error、success、upgradeneeded，处理打开数据库的操作结果。</p>\n<p>如果数据库不存在，open操作会创建该数据库，然后<code>onupgradeneeded</code>事件被触发，需要在该事件的处理函数中创建数据库模式。如果数据库已经存在，但指定了一个更高的数据库版本，会直接触发 <code>onupgradeneeded</code>事件，允许你在处理函数中更新数据库模式。</p>\n<p><strong>注意：这里的版本号是一个unsigned long long数字，使用浮点数是会被转化到最近的整数</strong></p>\n<p><strong>绑定处理函数</strong></p>\n<p>几乎所有我们产生的请求我们在处理的时候首先要做的就是添加成功和失败处理函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request.<span class=\"property\">onerror</span> = <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Do something with request.errorCode!</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">request.<span class=\"property\">onsuccess</span> = <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Do something with request.result!</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>如果一切顺利的话，相关request的<code>onsuccess()</code>处理函数就会被触发。如果不是所有事情都成功的话，<code>error </code>事件会在request上被触发。</p>\n<p><strong>新建数据库</strong></p>\n<p>新建数据库与打开数据库是同一个操作。不同之处在于，后续的操作主要在<code>upgradeneeded</code>事件的监听函数里面完成。通常新建数据库后，第一件事是新建对象仓库，即下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request.<span class=\"property\">onupgradeneeded</span> = <span class=\"keyword\">function</span> (<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  db = event.<span class=\"property\">target</span>.<span class=\"property\">result</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> objectStore;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!db.<span class=\"property\">objectStoreNames</span>.<span class=\"title function_\">contains</span>(<span class=\"string\">&#x27;person&#x27;</span>)) &#123;</span><br><span class=\"line\">    objectStore = db.<span class=\"title function_\">createObjectStore</span>(<span class=\"string\">&#x27;person&#x27;</span>, &#123; <span class=\"attr\">keyPath</span>: <span class=\"string\">&#x27;id&#x27;</span> &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面这段语句使用id作为对象仓库的主键，如果没有合适作为主键的属性，可以让indexedDB自动生成主键。为了便于查询，可以在数据仓库中建立索引。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> objectStore = db.<span class=\"title function_\">createObjectStore</span>(</span><br><span class=\"line\">  <span class=\"string\">&#x27;person&#x27;</span>,</span><br><span class=\"line\">  &#123; <span class=\"attr\">autoIncrement</span>: <span class=\"literal\">true</span> &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\">objectStore.<span class=\"title function_\">createIndex</span>(<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;name&#x27;</span>, &#123; <span class=\"attr\">unique</span>: <span class=\"literal\">false</span> &#125;);</span><br><span class=\"line\">objectStore.<span class=\"title function_\">createIndex</span>(<span class=\"string\">&#x27;email&#x27;</span>, <span class=\"string\">&#x27;email&#x27;</span>, &#123; <span class=\"attr\">unique</span>: <span class=\"literal\">true</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>增删改查</strong></p>\n<p>增删改查都通过事务进行。事务来自于数据库对象，必须指定你想让这个事务跨越哪些对象仓库。事务中有三种模式，表示你想对数据库进行的操作类型：</p>\n<ul>\n<li><code>readonly</code> <strong>默认</strong>，只读</li>\n<li><code>readwrite</code> 读写操作</li>\n<li><code>versionchange</code> 修改数据库模式或结构</li>\n</ul>\n<p>只在必要时指定 readwrite 事务。你可以同时执行多个readonly事务，哪怕它们的作用域有重叠；但对于在一个对象仓库上只能运行一个readwrite事务。</p>\n<p>增加一条数据的语句如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> transaction = db.<span class=\"title function_\">transaction</span>([<span class=\"string\">&quot;person&quot;</span>], <span class=\"string\">&quot;readwrite&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在所有数据添加完毕后的处理</span></span><br><span class=\"line\">transaction.<span class=\"property\">oncomplete</span> = <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;成功&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">transaction.<span class=\"property\">onerror</span> = <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;失败&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> objectStore = transaction.<span class=\"title function_\">objectStore</span>(<span class=\"string\">&quot;person&quot;</span>);</span><br><span class=\"line\">    .<span class=\"title function_\">add</span>(&#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;foo&#x27;</span>, <span class=\"attr\">email</span>: <span class=\"string\">&#x27;foo@bar.com&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>在有了数据后，可以通过几种方法对它进行提取。首先是简单的 <code>get()</code>，通过键获得值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> transaction = db.<span class=\"title function_\">transaction</span>([<span class=\"string\">&quot;person&quot;</span>]);</span><br><span class=\"line\"><span class=\"keyword\">var</span> objectStore = transaction.<span class=\"title function_\">objectStore</span>(<span class=\"string\">&quot;person&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> request = objectStore.<span class=\"title function_\">get</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">request.<span class=\"property\">onsuccess</span> = <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 对 request.result 做些操作！</span></span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(request.<span class=\"property\">result</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">request.<span class=\"property\">onerror</span> = <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;出错了&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在很多场景下你并不知道数据的键，这时可以用索引找到你要的数据。例子中的<code>name</code>属性可能并不是唯一的，在这种情况下，你总是得到键值最小的那个。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 前提是你已经建立了name索引</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> index = objectStore.<span class=\"title function_\">index</span>(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">index.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;foo&#x27;</span>).<span class=\"property\">onsuccess</span> = <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;foo&#x27;s id is &quot;</span> + event.<span class=\"property\">target</span>.<span class=\"property\">result</span>.<span class=\"property\">id</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在需要遍历某一范围的数据集合时，也可以使用<strong>游标</strong>，这里要用到<code>openCursor</code>方法。比如查询整个数据对象存储。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objectStore.<span class=\"title function_\">openCursor</span>().<span class=\"property\">onsuccess</span> = <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> cursor = event.<span class=\"property\">target</span>.<span class=\"property\">result</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (cursor) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(cursor.<span class=\"property\">value</span>);</span><br><span class=\"line\">    cursor.<span class=\"title function_\">continue</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;遍历结束&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><em>上面的功能也可以通过<code>getAll</code>完成，但是由于数据对象是懒生成的，<code>getAll</code>性能会有消耗。当然你如果想直接拿到整个数据组成的数组，还是<code>getAll</code>好点</em></p>\n<p>结合索引（IDBIndex）和游标（IDBCursor）可以查询指定索引的所有记录，方法<code>openCursor</code>和<code>openKeyCursor</code>分别返回不同的数据结构。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index.<span class=\"title function_\">openCursor</span>().<span class=\"property\">onsuccess</span> = <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> cursor = event.<span class=\"property\">target</span>.<span class=\"property\">result</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (cursor) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// cursor.key 是一个 name, 就像 &quot;Bill&quot;, 然后 cursor.value 是整个对象。</span></span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;Name: &quot;</span> + cursor.<span class=\"property\">key</span> + <span class=\"string\">&quot;, email: &quot;</span> + cursor.<span class=\"property\">value</span>.<span class=\"property\">email</span>);</span><br><span class=\"line\">    cursor.<span class=\"title function_\">continue</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">index.<span class=\"title function_\">openKeyCursor</span>().<span class=\"property\">onsuccess</span> = <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> cursor = event.<span class=\"property\">target</span>.<span class=\"property\">result</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (cursor) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// cursor.key 是一个 name, 就像 &quot;Bill&quot;, 然后 cursor.value是主键的值。</span></span><br><span class=\"line\">    <span class=\"comment\">// 没办法得到存储对象的其余部分。</span></span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;Name: &quot;</span> + cursor.<span class=\"property\">key</span> + <span class=\"string\">&quot;, id: &quot;</span> + cursor.<span class=\"property\">value</span>);</span><br><span class=\"line\">    cursor.<span class=\"title function_\">continue</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>更多游标设置参考<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/IndexedDB_API/Using_IndexedDB#%E6%8C%87%E5%AE%9A%E6%B8%B8%E6%A0%87%E7%9A%84%E8%8C%83%E5%9B%B4%E5%92%8C%E6%96%B9%E5%90%91\">mdn</a>的介绍。</p>\n<p>更新和删除数据，分别使用<code>put</code>和<code>delete</code>方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> request = db.<span class=\"title function_\">transaction</span>([<span class=\"string\">&#x27;person&#x27;</span>], <span class=\"string\">&#x27;readwrite&#x27;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">objectStore</span>(<span class=\"string\">&#x27;person&#x27;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">put</span>(&#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;李四&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">35</span>, <span class=\"attr\">email</span>: <span class=\"string\">&#x27;lisi@example.com&#x27;</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">request.<span class=\"property\">onsuccess</span> = <span class=\"keyword\">function</span> (<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;数据更新成功&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">request.<span class=\"property\">onerror</span> = <span class=\"keyword\">function</span> (<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;数据更新失败&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> request = db.<span class=\"title function_\">transaction</span>([<span class=\"string\">&#x27;person&#x27;</span>], <span class=\"string\">&#x27;readwrite&#x27;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">objectStore</span>(<span class=\"string\">&#x27;person&#x27;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">delete</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">request.<span class=\"property\">onsuccess</span> = <span class=\"keyword\">function</span> (<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;数据删除成功&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>其中put的数据为全量替换，可以通过get方法拿到数据后，修改特定值再交给put完成增量替换。</p>\n<h2 id=\"indexedDB封装库\"><a href=\"#indexedDB封装库\" class=\"headerlink\" title=\"indexedDB封装库\"></a>indexedDB封装库</h2><p>indexedDB虽然强大，但是有些API对于用户来说还是不够方便，下面是几个indexedDB的封装库：</p>\n<ul>\n<li><a href=\"https://localforage.github.io/localForage/\">localForage</a>，支持类Storage API语法的客户端数据存储polyfill，支持回退到Storage和Web SQL</li>\n<li><a href=\"https://dexie.org/\">dexie.js</a>，提供更友好和简单的语法便于快速的编码开发，<strong>有Typescript支持</strong>。</li>\n<li><a href=\"https://github.com/erikolson186/zangodb\">ZangoDB</a>，提供类MongoDB的接口实现，提供了许多MangoDB的特性实现</li>\n<li><a href=\"http://jsstore.net/\">JsStore</a>，提供基于indexedDB的类SQL的语法实现。</li>\n</ul>\n<p>综上，考虑到dexie.js的语法更加友善，文档页较完善。最终选择它作为客户端存储的实现。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://jiangzhenghua.iteye.com/blog/1225201\">HTML5本地存储不完全指南</a></li>\n<li><a href=\"https://wangdoc.com/javascript/bom/indexeddb.html\">IndexedDB API</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/IndexedDB_API/Using_IndexedDB\">使用 IndexedDB - Web API接口参考 | MDN</a></li>\n<li><a href=\"https://dexie.org/docs/API-Reference\">Dexie.js API Reference</a></li>\n</ul>\n",
            "tags": [
                "electron",
                "indexedDB"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2018/11/21/audio-recorder-improvement/",
            "url": "http://shenlvmeng.github.com/blog/2018/11/21/audio-recorder-improvement/",
            "title": "前端录音方案优化实践",
            "date_published": "2018-11-21T15:04:53.000Z",
            "content_html": "<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在视听类业务或重交互的业务场景下，有时需要在前端采集用户语音。前端实现录音功能可以使用<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder\">MediaRecorder</a>，或<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\">getUserMedia</a>结合<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/AudioContext\">AudioContext</a>。其中，前一种方法的支持度惨不忍睹，使用getUserMedia的方式是较为常用的选择。</p>\n<p class=\"img-tip\" data-str=\"MediaRecorder支持度\"><img src='https://sf3-ttcdn-tos.pstatp.com/img/tos-cn-v-0000/87e5a7855500447eb22349f29814bdf5~noop.png' height=465 width=1261/></p>\n\n<h2 id=\"现有问题\"><a href=\"#现有问题\" class=\"headerlink\" title=\"现有问题\"></a>现有问题</h2><p>在实现前端录音上，<a href=\"https://github.com/mattdiamond/Recorderjs\">Recorder.js</a>实现了一个基础可用版，不过它支持的可配置项很少，音频采样率、声道数、采样的比特位数都使用的采集配置的默认值。但在大多场景下，录音文件体积较大，4s的录音可以达到700 ~ 800KB，不利于网络传输，需要录音采集参数可配置，以优化文件体积。</p>\n<p class=\"img-tip\" data-str=\"4s录音的文件体积\"><img src='https://sf3-ttcdn-tos.pstatp.com/img/tos-cn-v-0000/c2f3c40147a4447fad41d3bea41c4256~noop.png' height=94 width=1178/></p>\n\n<p>另外，有些场景录制的语音需要交给算法组做语音识别，对语音有特定要求：</p>\n<ul>\n<li>采样率16000Hz</li>\n<li>单声道</li>\n<li>采样位数16bit</li>\n</ul>\n<p>这时就需要一个优化的前端录音方案，支持根据输入配置修改音频流数据。</p>\n<h2 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h2><p>这里将原有录音方案的几个关键代码流程整理如下：</p>\n<p class=\"img-tip\" data-str=\"原有录音方案\"><img src='https://sf3-ttcdn-tos.pstatp.com/img/tos-cn-v-0000/5379450a44474160b9fa09e7dc7ee31d~noop.png' height=490 width=871/></p>\n\n<p>其中：</p>\n<ul>\n<li>先调用<code>getUserMedia</code>获取音频流，并初始化一个<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioSourceNode\"><code>MediaStreamAudioSourceNode</code></a>。使用<code>connect</code>连接到<code>ScriptProcessorNode</code>上，并连续触发<code>audioprocess</code>事件。</li>\n<li>在<code>onaudioprocess</code>事件处理函数中，拿到录音数据。根据当前<code>recording</code>的值判断是否写入<code>recBuffers</code>中。<code>recording</code>状态可以通过<code>record</code>和<code>stop</code>方法控制。</li>\n<li><code>exportWAV</code>方法会触发导出流程，导出步骤里<ul>\n<li><code>mergeBuffers</code>将<code>recBuffers</code>数组扁平化</li>\n<li><code>interleave</code>将各声道信息数组扁平化</li>\n<li><code>encodeWAV</code>为即将生成的音频文件写入音频头</li>\n<li>最后<code>floatTo16bitPCM</code>将音频设备采集的元素范围在[0,1]之间的Float32Array，转换成一个元素是16位有符号整数的Float32Array中</li>\n</ul>\n</li>\n<li>最后拿到的Blob类型数据可以本地播放或通过FormData上传服务端使用。<br>下面分几方面介绍录音方案优化的设计和实现。</li>\n</ul>\n<h3 id=\"音频头拓展\"><a href=\"#音频头拓展\" class=\"headerlink\" title=\"音频头拓展\"></a>音频头拓展</h3><p>要支持可拓展的采样率、声道、采样比特数，wav音频头也要动态配置。</p>\n<p>WAVE格式是<a href=\"https://en.wikipedia.org/wiki/Resource_Interchange_File_Format\">Resource Interchange File Format</a>（RIFF）的一种，其基本块名称是“WAVE”，其中包含两个子块“fmt”和“data”。结构上由WAVE_HEADER、WAVE_FMT、WAVE_DATA、采样数据4个部分组成。可以看到实际上就是在PCM数据前面加了一个文件头。WAVE类型文件整体结构图如下：</p>\n<p class=\"img-tip\" data-str=\"WAVE文件头示例\"><img src='https://sf3-ttcdn-tos.pstatp.com/img/tos-cn-v-0000/e5c3f9bc6d3545308fb50fc10ce64790~noop.png' height=449 width=673/></p>\n\n<p>其中和采样率、声道、采样位数相关的字段有：</p>\n<ul>\n<li>NumChannels</li>\n<li>SampleRate</li>\n<li>ByteRate，等于SampleRate * BlockAlign</li>\n<li>BlockAlign，等于ChannelCount * BitsPerSample &#x2F; 8</li>\n<li>BitsPerSample</li>\n</ul>\n<p>这几个字段根据输入的配置项设置即可实现音频头拓展部分。<br>另外，需要注意的是其中字段有Big Endian和Little Endian的区分，对应在代码里，通过<code>setUint16</code>和<code>setUIint32</code>的最后一个入参决定。如下所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">encodeWAV</span>(<span class=\"params\">samples</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> buffer = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayBuffer</span>(<span class=\"number\">44</span> + samples.<span class=\"property\">length</span> * <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> view = <span class=\"keyword\">new</span> <span class=\"title class_\">DataView</span>(buffer);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* RIFF identifier */</span></span><br><span class=\"line\">    <span class=\"title function_\">writeString</span>(view, <span class=\"number\">0</span>, <span class=\"string\">&#x27;RIFF&#x27;</span>);</span><br><span class=\"line\">    <span class=\"comment\">/* RIFF chunk length */</span></span><br><span class=\"line\">    view.<span class=\"title function_\">setUint32</span>(<span class=\"number\">4</span>, <span class=\"number\">36</span> + samples.<span class=\"property\">length</span> * <span class=\"number\">2</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    <span class=\"comment\">/* RIFF type */</span></span><br><span class=\"line\">    <span class=\"title function_\">writeString</span>(view, <span class=\"number\">8</span>, <span class=\"string\">&#x27;WAVE&#x27;</span>);</span><br><span class=\"line\">    <span class=\"comment\">/* format chunk identifier */</span></span><br><span class=\"line\">    <span class=\"title function_\">writeString</span>(view, <span class=\"number\">12</span>, <span class=\"string\">&#x27;fmt &#x27;</span>);</span><br><span class=\"line\">    <span class=\"comment\">/* format chunk length, PCM use 16 */</span></span><br><span class=\"line\">    view.<span class=\"title function_\">setUint32</span>(<span class=\"number\">16</span>, <span class=\"number\">16</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    <span class=\"comment\">/* sample format (raw), PCM use 1 */</span></span><br><span class=\"line\">    view.<span class=\"title function_\">setUint16</span>(<span class=\"number\">20</span>, <span class=\"number\">1</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    <span class=\"comment\">/* channel count */</span></span><br><span class=\"line\">    view.<span class=\"title function_\">setUint16</span>(<span class=\"number\">22</span>, numChannels, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    <span class=\"comment\">/* sample rate */</span></span><br><span class=\"line\">    view.<span class=\"title function_\">setUint32</span>(<span class=\"number\">24</span>, sampleRate, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    <span class=\"comment\">/* byte rate (sample rate * block align) */</span></span><br><span class=\"line\">    view.<span class=\"title function_\">setUint32</span>(<span class=\"number\">28</span>, sampleRate * numChannels * sampleBit / <span class=\"number\">8</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    <span class=\"comment\">/* block align (channel count * bytes per sample) */</span></span><br><span class=\"line\">    view.<span class=\"title function_\">setUint16</span>(<span class=\"number\">32</span>, numChannels * sampleBit / <span class=\"number\">8</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    <span class=\"comment\">/* bits per sample */</span></span><br><span class=\"line\">    view.<span class=\"title function_\">setUint16</span>(<span class=\"number\">34</span>, sampleBit, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    <span class=\"comment\">/* data chunk identifier */</span></span><br><span class=\"line\">    <span class=\"title function_\">writeString</span>(view, <span class=\"number\">36</span>, <span class=\"string\">&#x27;data&#x27;</span>);</span><br><span class=\"line\">    <span class=\"comment\">/* data chunk length */</span></span><br><span class=\"line\">    view.<span class=\"title function_\">setUint32</span>(<span class=\"number\">40</span>, samples.<span class=\"property\">length</span> * <span class=\"number\">2</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> view;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"采样率\"><a href=\"#采样率\" class=\"headerlink\" title=\"采样率\"></a>采样率</h3><p>通常前端录音的音频采样率是音频设备默认使用的44.1kHz（或48kHz）。开发者需要默认以外的采样率时（比如16kHz），可以在录音数据交给<code>encodeWAV</code>封装前根据新的采样率做重采样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">compress</span>(<span class=\"params\">samples, ratio</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> length = samples.<span class=\"property\">length</span> / ratio;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = <span class=\"keyword\">new</span> <span class=\"title class_\">Float32Array</span>(length);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; length; index++) &#123;</span><br><span class=\"line\">        result[index] = samples[index * ratio];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>重采样的原理上，程序根据重采样和原始采用率的比值，间隔采样音频原数据，丢弃掉其他采样点数据，从而模拟采样率的等比例下降。</p>\n<p><em>注：间隔丢弃原数据在重采样率是原采样率的整数倍分之一时（即1、1&#x2F;2、1&#x2F;3…）才不会损失用户音色。另外，重采样率比原采样率高时，需要在采样点中间额外插值，这里未实现；</em></p>\n<h3 id=\"声道数\"><a href=\"#声道数\" class=\"headerlink\" title=\"声道数\"></a>声道数</h3><p>在<code>audioprocess</code>事件中，需要根据配置项中的声道数，从inputBuffer取对应声道数据，一般的处理下，会丢弃多余的声道数据。类似地，在存储声道数据时，也要灵活考虑配置项。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">node</span>.<span class=\"property\">onaudioprocess</span> = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">recording</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> buffer = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> channel = <span class=\"number\">0</span>; channel &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">config</span>.<span class=\"property\">numChannels</span>; channel++) &#123;</span><br><span class=\"line\">        buffer.<span class=\"title function_\">push</span>(e.<span class=\"property\">inputBuffer</span>.<span class=\"title function_\">getChannelData</span>(channel));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">record</span>(<span class=\"params\">inputBuffer</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> channel = <span class=\"number\">0</span>; channel &lt; numChannels; channel++) &#123;</span><br><span class=\"line\">        recBuffers[channel].<span class=\"title function_\">push</span>(inputBuffer[channel]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    recLength += inputBuffer[<span class=\"number\">0</span>].<span class=\"property\">length</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在最后导出时，根据声道数判断是否需要interleave的步骤。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (numChannels === <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    interleaved = <span class=\"title function_\">interleave</span>(buffers[<span class=\"number\">0</span>], buffers[<span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    [interleaved] = buffers;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"采样位数\"><a href=\"#采样位数\" class=\"headerlink\" title=\"采样位数\"></a>采样位数</h3><p>默认的采样位数是16位，在对音质或位数没有明确要求时，可以转成8位。</p>\n<p>PCM16LE格式的采样数据的取值范围是-32768到32767，而PCM8格式的采样数据的取值范围是0到255。因此PCM16LE转换到PCM8需要将-32768到32767的16bit有符号数值转换为0到255的8bit无符号数值。实现上，见下面的对比：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">floatTo16BitPCM</span>(<span class=\"params\">output, offset, input</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> initOffset = offset;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; input.<span class=\"property\">length</span>; i++, initOffset += <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> s = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(-<span class=\"number\">1</span>, <span class=\"title class_\">Math</span>.<span class=\"title function_\">min</span>(<span class=\"number\">1</span>, input[i]));</span><br><span class=\"line\">        output.<span class=\"title function_\">setInt16</span>(initOffset, s &lt; <span class=\"number\">0</span> ? s * <span class=\"number\">0x8000</span> : s * <span class=\"number\">0x7FFF</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">floatTo8bitPCM</span>(<span class=\"params\">output, offset, input</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> initOffset = offset;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; input.<span class=\"property\">length</span>; i++, initOffset++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> s = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(-<span class=\"number\">1</span>, <span class=\"title class_\">Math</span>.<span class=\"title function_\">min</span>(<span class=\"number\">1</span>, input[i]));</span><br><span class=\"line\">        <span class=\"keyword\">const</span> val = s &lt; <span class=\"number\">0</span> ? s * <span class=\"number\">0x8000</span> : s * <span class=\"number\">0x7FFF</span>;</span><br><span class=\"line\">        output.<span class=\"title function_\">setInt8</span>(initOffset, <span class=\"built_in\">parseInt</span>(val / <span class=\"number\">256</span> + <span class=\"number\">128</span>, <span class=\"number\">10</span>), <span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上方的<code>floatTo16BitPCM</code>是转换音频采样数据到PCM数据的原始方法，下面的<code>floatTo8BitPCM</code>方法中<code>parseInt(val / 256 + 128, 10)</code>做了16位到8位的转换。最后在封装音频数据为Blob类型时，根据采样位数使用不同函数即可。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">encodeWAV</span>(<span class=\"params\">samples</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    sampleBit === <span class=\"number\">8</span></span><br><span class=\"line\">        ? <span class=\"title function_\">floatTo8bitPCM</span>(view, <span class=\"number\">44</span>, samples)</span><br><span class=\"line\">        : <span class=\"title function_\">floatTo16BitPCM</span>(view, <span class=\"number\">44</span>, samples);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> view;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>最后，由于前端录音场景下，音频流基本都来自<code>getUserMedia</code>，为了减少模板代码，库里封装了一个static方法，快捷地直接由<code>getUserMedia</code>构造一个recorder对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">async</span> <span class=\"title function_\">createFromUserMedia</span>(<span class=\"params\">config</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> stream = <span class=\"keyword\">await</span> navigator.<span class=\"property\">mediaDevices</span>.<span class=\"title function_\">getUserMedia</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">audio</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">mandatory</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">googEchoCancellation</span>: <span class=\"string\">&#x27;false&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">googAutoGainControl</span>: <span class=\"string\">&#x27;false&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">googNoiseSuppression</span>: <span class=\"string\">&#x27;false&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">googHighpassFilter</span>: <span class=\"string\">&#x27;false&#x27;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"attr\">optional</span>: []</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">video</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> context = <span class=\"keyword\">new</span> <span class=\"title class_\">AudioContext</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Recorder</span>(context.<span class=\"title function_\">createMediaStreamSource</span>(stream, config));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>在之前提到了需要算法组音频识别的场景下，只需要在构造时指定配置项即可。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Recorder</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./audio-recorder&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">recorder</span> = <span class=\"title class_\">Recorder</span>.<span class=\"title function_\">createFromUserMedia</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">sampleBit</span>: <span class=\"number\">16</span>, <span class=\"comment\">// 可省略</span></span><br><span class=\"line\">    <span class=\"attr\">numChannels</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">sampleRate</span>: <span class=\"number\">16000</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>此时，一个500ms的录音大概15KB，换算下来4s大约120KB，比此前的体积小了很多。在不强调音质的场景下，表现要好许多。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>上面的录音方案优化实践主要包含下面几点：</p>\n<ul>\n<li>WAVE音频头修改</li>\n<li>重采样音频数据</li>\n<li>丢弃多余的声道数据</li>\n<li>转换16位音频数据到8位</li>\n</ul>\n<p>源码在<a href=\"https://github.com/shenlvmeng/audio-recorder\">这里</a>，欢迎使用与拍砖。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://github.com/mattdiamond/Recorderjs\">mattdiamond&#x2F;Recorderjs A plugin for recording&#x2F;exporting the output of Web Audio API nodes</a></li>\n<li><a href=\"https://blog.csdn.net/leixiaohua1020/article/details/50534316\">视音频数据处理入门：PCM音频采样数据处理</a></li>\n<li><a href=\"http://soundfile.sapp.org/doc/WaveFormat/\">Microsoft WAVE soundfile format</a></li>\n</ul>\n",
            "tags": [
                "录音",
                "getUserMedia",
                "AudioContext",
                "PCM",
                "WAVE"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2018/10/31/react-hooks-intro/",
            "url": "http://shenlvmeng.github.com/blog/2018/10/31/react-hooks-intro/",
            "title": "React Hooks简要介绍",
            "date_published": "2018-10-31T15:32:17.000Z",
            "content_html": "<p><a href=\"https://reactjs.org/docs/hooks-intro.html\">Hooks</a>是<a href=\"https://www.npmjs.com/package/react?activeTab=versions\">React v16.7.0-alpha</a>中引入的新特性，目前（2018年10月底）还在<a href=\"https://github.com/reactjs/rfcs/pull/68\">讨论之中</a>。</p>\n<p>关于这次改动，官网里特地表明<a href=\"https://reactjs.org/docs/hooks-intro.html#no-breaking-changes\"><strong>这不是Breaking Changes</strong></a>，并且向前兼容，大家可以放心地使用。在动机上：</p>\n<ul>\n<li>使用Hooks将便于开发者拆分和复用state<strong>管理的逻辑</strong>（而不是state本身）</li>\n<li>使用Hooks将把Class组件中的React生命周期方法抽象成effects，根据需要插入</li>\n<li>除了state和生命周期方法，React还将class提供的更多features拆分出来作为额外功能，按需使用</li>\n</ul>\n<p>下面将从上面几点分别展开介绍，并给出一些使用须知。</p>\n<h2 id=\"State-Hook\"><a href=\"#State-Hook\" class=\"headerlink\" title=\"State Hook\"></a>State Hook</h2><p>根据上面所述，用来拆分和复用state管理逻辑。通常情况下，class组件中的state更新逻辑比较简单。和<a href=\"https://reactjs.org/docs/hooks-state.html\">官网给的例子</a>本质上没什么差别。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Example</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Declare a new state variable, which we&#x27;ll call &quot;count&quot;</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>You clicked &#123;count&#125; times<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">        Click me</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>useState</code>是State Hook提供的API方法，它只需<strong>1个入参</strong>，表示状态的初始值。返回一个pair：</p>\n<ul>\n<li>第一个元素，状态本身，类似<code>this.state.xxx</code></li>\n<li>第二个元素，设置状态方法，类似<code>this.setState(&#123; xxx: &#39;foo&#39; &#125;)</code></li>\n</ul>\n<p><strong>需要注意的是，第二个元素，设置状态的方法不是增量更新，而是直接替换</strong>，这点和<code>setState</code>有区别。</p>\n<p>在下面的渲染部分，直接使用状态名即可。当然这里只声明了一个需要的状态变量，需要新的状态变量（比如：<code>[fruit, setFruit]</code>）时，需要用同样的方法获得返回，像下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Declare multiple state variables!</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> [age, setAge] = <span class=\"title function_\">useState</span>(<span class=\"number\">42</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> [fruit, setFruit] = <span class=\"title function_\">useState</span>(<span class=\"string\">&#x27;banana&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> [todos, setTodos] = <span class=\"title function_\">useState</span>([&#123; <span class=\"attr\">text</span>: <span class=\"string\">&#x27;Learn Hooks&#x27;</span> &#125;]);</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，使用State Hook时，如何<strong>拆分state</strong>到各useState中是需要考虑的事情。</p>\n<h2 id=\"Effect-Hook\"><a href=\"#Effect-Hook\" class=\"headerlink\" title=\"Effect Hook\"></a>Effect Hook</h2><p>Effect Hook用来处理<strong>React每次渲染完成后的副作用</strong>。它等同于<code>componentDidMount</code>, <code>componentDidUpdate</code>, 再加上<code>componentWillUnmount</code>。副作用分两种，需要cleanup和不需要cleanup的。</p>\n<p><strong>不需要Cleanup</strong></p>\n<p>通常的副作用包括数据请求、DOM修改等等。这些操作不需要清理占用的资源。使用时类似下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useState, useEffect &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Example</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">title</span> = <span class=\"string\">`You clicked <span class=\"subst\">$&#123;count&#125;</span> times`</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>You clicked &#123;count&#125; times<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">        Click me</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>useEffect</code>方法，传入一个函数作为唯一入参。这样，在<strong>每次render完成后（包含第一次render）</strong>，都会执行这个函数，去完成副作用的部分。</p>\n<p>你可能有些疑惑，如果我有某个副作用，只在componentDidMount使用一次，比如获取DOM ref这种呢？另外，每次重新渲染后，如果副作用依赖于当前的状态值，难道还需要写if语句判断状态有没有变化吗？接着，往下看。</p>\n<p><code>userEffect</code>这个方法可以有第二个入参，这个入参是数组类型，表示这个effects所依赖的内部状态。（<strong>注意：这个状态必须是上面用<code>useState</code>声明的</strong>）只有数组内的状态变化时，React才会去执行第一个入参的函数。</p>\n<p>另外，数组为空时，表示函数没有依赖，即只在componentDidMount时执行一次即可。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"property\">title</span> = <span class=\"string\">`You clicked <span class=\"subst\">$&#123;count&#125;</span> times`</span>;</span><br><span class=\"line\">&#125;, [count]); <span class=\"comment\">// Only re-run the effect if count changes</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;This component has been rendered.&#x27;</span>);</span><br><span class=\"line\">&#125;, []); <span class=\"comment\">// Only re-run at the first rendering</span></span><br></pre></td></tr></table></figure>\n\n<p>最后，<code>useEffect</code>是异步完成的，即不会block浏览器更新屏幕内容，以节省资源。在一些不常见的场景，如需要测量当前布局时，需要用同步的<code>useLayoutEffect</code>。</p>\n<p><strong>需要Cleanup</strong></p>\n<p>有的副作用以添加事件监听、设置定时器等等的subscription的形式进行，这些在组件销毁后需要释放掉占用的资源，避免内存泄漏。类似你之前在<code>componentWillUnmount</code>里写的逻辑。</p>\n<p>React用<code>useEffect</code>表示这个副作用的清除操作。用法类似<code>setTimeout</code>，用返回值作为handler。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title class_\">ChatAPI</span>.<span class=\"title function_\">subscribeToFriendStatus</span>(props.<span class=\"property\">friend</span>.<span class=\"property\">id</span>, handleStatusChange);</span><br><span class=\"line\">  <span class=\"comment\">// Specify how to clean up after this effect:</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">cleanup</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">ChatAPI</span>.<span class=\"title function_\">unsubscribeFromFriendStatus</span>(props.<span class=\"property\">friend</span>.<span class=\"property\">id</span>, handleStatusChange);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>在实际运行时，一个Effect在组件re-render时都会被重新销毁再重建，以便于在componentDidUpdate时，也能跟踪到副作用内使用的状态的最新值。上面那段代码可能会遇到下面这样的实际运行情况：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Mount with &#123; friend: &#123; id: 100 &#125; &#125; props</span></span><br><span class=\"line\"><span class=\"title class_\">ChatAPI</span>.<span class=\"title function_\">subscribeToFriendStatus</span>(<span class=\"number\">100</span>, handleStatusChange);     <span class=\"comment\">// Run first effect</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Update with &#123; friend: &#123; id: 200 &#125; &#125; props</span></span><br><span class=\"line\"><span class=\"title class_\">ChatAPI</span>.<span class=\"title function_\">unsubscribeFromFriendStatus</span>(<span class=\"number\">100</span>, handleStatusChange); <span class=\"comment\">// Clean up previous effect</span></span><br><span class=\"line\"><span class=\"title class_\">ChatAPI</span>.<span class=\"title function_\">subscribeToFriendStatus</span>(<span class=\"number\">200</span>, handleStatusChange);     <span class=\"comment\">// Run next effect</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Update with &#123; friend: &#123; id: 300 &#125; &#125; props</span></span><br><span class=\"line\"><span class=\"title class_\">ChatAPI</span>.<span class=\"title function_\">unsubscribeFromFriendStatus</span>(<span class=\"number\">200</span>, handleStatusChange); <span class=\"comment\">// Clean up previous effect</span></span><br><span class=\"line\"><span class=\"title class_\">ChatAPI</span>.<span class=\"title function_\">subscribeToFriendStatus</span>(<span class=\"number\">300</span>, handleStatusChange);     <span class=\"comment\">// Run next effect</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Unmount</span></span><br><span class=\"line\"><span class=\"title class_\">ChatAPI</span>.<span class=\"title function_\">unsubscribeFromFriendStatus</span>(<span class=\"number\">300</span>, handleStatusChange); <span class=\"comment\">// Clean up last effect</span></span><br></pre></td></tr></table></figure>\n\n<p>为了避免这样的频繁操作影响性能，可以通过上面介绍的传第二个参数的方式优化性能。<a href=\"https://reactjs.org/docs/hooks-effect.html#tip-optimizing-performance-by-skipping-effects\">官方文档</a>在最后还补充了一句：</p>\n<blockquote>\n<p>In the future, the second argument might get added automatically by a build-time transformation.</p>\n</blockquote>\n<h2 id=\"一些使用准则\"><a href=\"#一些使用准则\" class=\"headerlink\" title=\"一些使用准则\"></a>一些使用准则</h2><ul>\n<li>在函数内部的最外层使用，<strong>别在块语句内使用</strong>，以保证正确的内部状态</li>\n<li><strong>只在函数组件和自定义Hooks中使用Hooks API</strong>，以保证可读性</li>\n<li><a href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks\">这个eslint-plugin</a>能帮助你检查代码风格</li>\n</ul>\n<p>为什么会有看起来比较别扭的上面两条规则呢？</p>\n<p>从<code>useState</code>和<code>useEffect</code>看到，API本身是没有状态的，并不知道API的返回赋值给了哪个变量名。所以，就像介绍里说的：</p>\n<blockquote>\n<p>React relies on the order in which Hooks are called.</p>\n</blockquote>\n<p>React依赖于Hooks的调用顺序，因此在每次render时，Hooks方法的调用顺序<strong>一定要保持一致</strong>。</p>\n<p><em>（猜测内部用类似数组的结构保存了一个函数组件内的多个Hooks）</em></p>\n<p>从而，所有导致Hooks可能不按一致顺序执行的写法都不建议使用。为了保证Hooks执行顺序所见即所得，又有了第二条准则。</p>\n<h2 id=\"组合-自定义Hooks\"><a href=\"#组合-自定义Hooks\" class=\"headerlink\" title=\"组合 - 自定义Hooks\"></a>组合 - 自定义Hooks</h2><p>Hooks除了或多或少基于React提供的Hooks外，只是再普通不过的JavaScript function而已。可以将组件中共用的<strong>状态逻辑</strong>拆分出来作为自定义Hooks。类似下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useState, useEffect &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">useFriendStatus</span>(<span class=\"params\">friendID</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [isOnline, setIsOnline] = <span class=\"title function_\">useState</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">handleStatusChange</span>(<span class=\"params\">status</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setIsOnline</span>(status.<span class=\"property\">isOnline</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title class_\">ChatAPI</span>.<span class=\"title function_\">subscribeToFriendStatus</span>(friendID, handleStatusChange);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title class_\">ChatAPI</span>.<span class=\"title function_\">unsubscribeFromFriendStatus</span>(friendID, handleStatusChange);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> isOnline;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>强烈建议用户自定义的Hooks函数也以<code>use</code>开头</strong>。在使用时，就像使用正常的函数即可。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">FriendStatus</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isOnline = <span class=\"title function_\">useFriendStatus</span>(props.<span class=\"property\">friend</span>.<span class=\"property\">id</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isOnline === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Loading...&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> isOnline ? <span class=\"string\">&#x27;Online&#x27;</span> : <span class=\"string\">&#x27;Offline&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">FriendListItem</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isOnline = <span class=\"title function_\">useFriendStatus</span>(props.<span class=\"property\">friend</span>.<span class=\"property\">id</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span> <span class=\"attr\">color:</span> <span class=\"attr\">isOnline</span> ? &#x27;<span class=\"attr\">green</span>&#x27; <span class=\"attr\">:</span> &#x27;<span class=\"attr\">black</span>&#x27; &#125;&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;props.friend.name&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Hooks共用的是状态逻辑，使用同一个自定义Hooks创建的状态是相互隔离的</strong>。</p>\n<p>你可以发挥你的想象力，抽象共用的状态逻辑，使用组合的方式（在函数中组合，React并不建议在class组件中使用mixin）构建新组件，减少组件代码长度。</p>\n<p>官网举了个非常简单却普遍的<code>useReducer</code>的例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">useReducer</span>(<span class=\"params\">reducer, initialState</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [state, setState] = <span class=\"title function_\">useState</span>(initialState);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">dispatch</span>(<span class=\"params\">action</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> nextState = <span class=\"title function_\">reducer</span>(state, action);</span><br><span class=\"line\">    <span class=\"title function_\">setState</span>(nextState);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> [state, dispatch];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Todos</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [todos, dispatch] = <span class=\"title function_\">useReducer</span>(todosReducer, []);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">handleAddClick</span>(<span class=\"params\">text</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">dispatch</span>(&#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;add&#x27;</span>, text &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"还有什么Hooks\"><a href=\"#还有什么Hooks\" class=\"headerlink\" title=\"还有什么Hooks\"></a>还有什么Hooks</h2><ul>\n<li><code>useContext</code>，接受<code>React.createContext</code>作为入参，在每次provider更新后，自动用最新的context重渲染。</li>\n<li><code>useReducer</code>，组件状态逻辑很复杂时，代替<code>useState</code>使用</li>\n<li><code>useCallback</code>，保存一个和当前状态相关的函数，只有状态变化时，函数才会更新，避免重复创建函数。  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> memoizedCallback = <span class=\"title function_\">useCallback</span>(</span><br><span class=\"line\">  <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">doSomething</span>(a, b);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  [a, b]</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></li>\n<li><code>useMemo</code>，保存一个和当前状态相关的值，只有状态变化时，值才会重新计算。不提供数组代表每次渲染都会更新。</li>\n<li><code>useRef</code>，获取DOM ref  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">TextInputWithFocusButton</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> inputEl = <span class=\"title function_\">useRef</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">onButtonClick</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// `current` points to the mounted text input element</span></span><br><span class=\"line\">    inputEl.<span class=\"property\">current</span>.<span class=\"title function_\">focus</span>();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;inputEl&#125;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;onButtonClick&#125;</span>&gt;</span>Focus the input<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><code>useImperativeMethods</code>，暴露当前组件Ref给父组件</li>\n<li><code>useMutationEffect</code>和<code>useLayoutEffect</code>，类似<code>useEffect</code>只是同步执行，而且执行时机有区别</li>\n</ul>\n<p>更多参考<a href=\"https://reactjs.org/docs/hooks-reference.html\">文档介绍</a></p>\n<h2 id=\"还有问题？\"><a href=\"#还有问题？\" class=\"headerlink\" title=\"还有问题？\"></a>还有问题？</h2><ul>\n<li><a href=\"https://reactjs.org/docs/hooks-faq.html#do-hooks-cover-all-use-cases-for-classes\">不常见的方法如<code>componentDidCatch</code>未来会支持</a></li>\n<li><a href=\"https://reactjs.org/docs/hooks-faq.html#do-hooks-replace-render-props-and-higher-order-components\">范式上，Hooks是高阶组件的更简单形式</a></li>\n<li><a href=\"https://reactjs.org/docs/hooks-faq.html#how-do-i-implement-shouldcomponentupdate\">借助<code>useMemo</code>，<code>shouldComponentUpdate</code>可以有更好的写法</a></li>\n<li><a href=\"https://reactjs.org/docs/hooks-faq.html#is-there-something-like-instance-variables\"><code>this.foo</code>这种写法可以用<code>useRef</code>实现</a> - 个人感觉有点不符合直觉</li>\n<li><a href=\"https://reactjs.org/docs/hooks-faq.html#should-i-use-one-or-many-state-variables\">state split准则：将一起改变的state split到一起</a></li>\n<li><a href=\"https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state\"><code>useEffect</code>需要用到prevState，prevProps时需要hack</a></li>\n<li><a href=\"https://reactjs.org/docs/hooks-faq.html#are-hooks-slow-because-of-creating-functions-in-render\">使用Hooks不会更慢，反而会更快</a></li>\n<li><a href=\"https://reactjs.org/docs/hooks-faq.html#under-the-hood\">idea来源</a></li>\n</ul>\n<h3 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h3><p>刚好最近在某管理后台需要有用户列表页的展示，除了获取数据的副作用，只有渲染的功能，用Hooks实现起来就很自然，而在原来的范式下，因为一个额外的网络请求，就需要把functional组件转成class，随之而来的又是一系列的模板代码和声明周期函数。</p>\n<p>使用Hooks之后的代码像下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">UserList</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [users, setUsers] = <span class=\"title function_\">useState</span>([]);</span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fetchData</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> <span class=\"title function_\">getUsers</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (res.<span class=\"property\">code</span> === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">setUsers</span>(res.<span class=\"property\">data</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">fetchData</span>();</span><br><span class=\"line\">    &#125;, []);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;admin-users&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>用户信息<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Table</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                <span class=\"attr\">columns</span>=<span class=\"string\">&#123;columns&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                <span class=\"attr\">dataSource</span>=<span class=\"string\">&#123;users&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                <span class=\"attr\">pagination</span>=<span class=\"string\">&#123;false&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用原来的模式时，大概像下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UserList</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Component</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">super</span>(props);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">            <span class=\"attr\">users</span>: []</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"title function_\">componentDidMount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> <span class=\"title function_\">getUsers</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (res.<span class=\"property\">code</span> === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123; <span class=\"attr\">users</span>: res.<span class=\"property\">data</span> &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;admin-users&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>用户信息<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;<span class=\"name\">Table</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                    <span class=\"attr\">columns</span>=<span class=\"string\">&#123;columns&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                    <span class=\"attr\">dataSource</span>=<span class=\"string\">&#123;this.state.users&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                    <span class=\"attr\">pagination</span>=<span class=\"string\">&#123;false&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>虽然代码行数类似，但是代码信噪比和可拓展性明显上面更优。</p>\n<h2 id=\"感受与展望\"><a href=\"#感受与展望\" class=\"headerlink\" title=\"感受与展望\"></a>感受与展望</h2><p>我理解Hooks的目的并不是强行把class组件里的功能硬塞到functional组件里（虽然从用法上确实有这种感觉），推荐使用funcational组件的形式。而是一次<strong>新的复用组件逻辑方式的尝试</strong>。毕竟组合函数比组合class简单多了（React并不建议mixin）。同时通过上面的简单实践可以发现，使用Hooks之后，少了许多<a href=\"https://en.wikipedia.org/wiki/Spaghetti_code\">Spaghetti code</a>，看上去清爽了许多，可读性也随着提高。</p>\n<p>不过另一方面，Hooks的API初看上去挺美，挺简洁好用，那是因为最开始举例的场景简单，不需要hack。由于使用Hooks就意味着用全盘用function的形式写组件，原来用class写法写的复杂的业务组件，如果都用Hooks的方式写，也需要开发者具有一定的设计模式意识。同时在有些场景（比如上面说的prevState，prevProps）要使用比较反直觉的操作才能完成。期待后面Hooks API不断优化后的结果。</p>\n<p>在逐渐使用Hooks的方式写组件后，业务中会有一些共用的Hooks抽象出来，整个项目目录结构也会发生变化，Hooks文件的管理方式还要再实践。期待Hooks能让每个模块代码都能小于200行的一天更早到来😌。</p>\n",
            "tags": [
                "React",
                "Hooks",
                "函数组件",
                "复用"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2018/10/30/password-tech-note/",
            "url": "http://shenlvmeng.github.com/blog/2018/10/30/password-tech-note/",
            "title": "《图解密码技术》总结整理",
            "date_published": "2018-10-29T16:07:43.000Z",
            "content_html": "<blockquote>\n<p>本文来自<a href=\"https://book.douban.com/subject/26265544/\">《图解密码技术》</a>一书</p>\n</blockquote>\n<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><ul>\n<li>信源、信宿、信道</li>\n<li>加密、解密、密钥</li>\n<li>对称密码、公钥密码、混合密码</li>\n<li>单向散列（hash）函数、信息认证</li>\n<li>数字签名 &#x2F; 篡改和否认</li>\n<li>伪随机数</li>\n</ul>\n<p>信息传递时面临的风险：</p>\n<ul>\n<li>窃听 -&gt; 对称、公钥密码</li>\n<li>篡改 -&gt; 散列函数、消息认证、数字签名</li>\n<li>伪装 -&gt; 消息认证、数字签名</li>\n<li>否认 -&gt; 数字签名</li>\n</ul>\n<p>有悖常识的几点：</p>\n<ul>\n<li>不要使用保密的加密算法</li>\n<li>使用低强度密码不如不用</li>\n<li>任何密码都有可能被破解</li>\n<li>密码只是安全的一部分（社工）</li>\n</ul>\n<h2 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h2><ul>\n<li>凯撒密码 &#x2F; 平移 &#x2F; 暴力破解</li>\n<li>简单替换密码 &#x2F; 替换 &#x2F; 频率分析</li>\n<li>Enigma &#x2F; 加密密码的密码 &#x2F; 针对每日密钥的破解</li>\n</ul>\n<h2 id=\"对称密码\"><a href=\"#对称密码\" class=\"headerlink\" title=\"对称密码\"></a>对称密码</h2><ul>\n<li>编码和异或</li>\n<li>一次性密码和它的问题</li>\n<li><strong>使用对称密码时，我们通常默认密钥配送问题已解决</strong></li>\n</ul>\n<h3 id=\"DES\"><a href=\"#DES\" class=\"headerlink\" title=\"DES\"></a>DES</h3><p>全称Data Encryption Standard。于1977年在美国发明并使用。目前可以被暴力破解，因此不应再使用了。</p>\n<ul>\n<li>DES以<strong>64bit</strong>为一个单位，使用和明文等长的密钥。</li>\n<li>密钥每8位包含1位纠错码</li>\n<li>基本结构使用Feistel网络<ul>\n<li>加密&#x2F;解密步骤以轮为单位，DES有16轮</li>\n<li>每轮运算不加密右半侧，同时右半侧比特和该轮密钥通过轮函数得到本轮加密左侧的密钥，和左侧做异或得到左侧密文</li>\n<li>每轮加密后，进行左右对调，保证右侧的保密</li>\n<li><strong>解密时用相同结构</strong>，反向使用子密钥和轮函数即可</li>\n<li>轮函数可以任意复杂</li>\n</ul>\n</li>\n<li>差分分析和线性分析衡量分组密码强度</li>\n</ul>\n<p><strong>三重DES</strong></p>\n<p>由IBM开发，步骤为DES加密 -&gt; DES解密 -&gt; DES加密。密钥长度是原来三倍，即168比特。</p>\n<ul>\n<li>三步使用同一密钥，即向下兼容DES</li>\n<li>根据1、3步是否使用同一密钥，分为DES-EDE2和DES-EDE3</li>\n<li>处理速度慢</li>\n</ul>\n<h3 id=\"AES\"><a href=\"#AES\" class=\"headerlink\" title=\"AES\"></a>AES</h3><p>全称Advanced Encrytion Standard，用来取代DES。由NIST开于1997年开始募集，将作为国家标准。算法要求开源免费，并在社群里公开评审，最终于2000年确定为Rijndael。</p>\n<ul>\n<li>基本结构为SPN结构</li>\n<li>明文分组长度固定为<strong>128bit</strong>、密钥长度可以是128、192、256比特三种</li>\n<li>每轮分为SubBytes、ShiftRows、MixColumns、AddRoundKey四步<ul>\n<li>SubBytes，将4字节 * 4字节的矩阵与一个转换矩阵相乘，得到替换后的矩阵</li>\n<li>ShiftRows，逐行做平移</li>\n<li>MixColumns，逐列做矩阵运算</li>\n<li>AddRoundKey，和轮密钥矩阵做对应位上的异或运算</li>\n</ul>\n</li>\n<li>解密时，除了AddRoundKey一步，其余均需要做逆运算</li>\n<li>目前还没有针对Rijndael的有效攻击</li>\n<li><strong>避免使用DES，选择AES</strong></li>\n</ul>\n<h2 id=\"分组密码的迭代模式\"><a href=\"#分组密码的迭代模式\" class=\"headerlink\" title=\"分组密码的迭代模式\"></a>分组密码的迭代模式</h2><p>分组密码只能加密<strong>固定长度</strong>的密码。因此，需要有<strong>模式</strong>来迭代加密任意长度的明文。与分组密码相对的是流密码，对数据进行连续处理。</p>\n<h3 id=\"ECB\"><a href=\"#ECB\" class=\"headerlink\" title=\"ECB\"></a>ECB</h3><p>全称为Electronic CodeBook。是最简单直接的分组方式。将明文分组加密后直接得到对应位置的密文。不足的位用特定数据<strong>填充</strong>。</p>\n<ul>\n<li>问题很明显，<strong>不要使用</strong></li>\n<li>相同的明文分组会得到相同的密文分组</li>\n<li>攻击者无需破译密码也可通过修改密文操纵明文，比如替换或删除分组</li>\n</ul>\n<h3 id=\"CBC\"><a href=\"#CBC\" class=\"headerlink\" title=\"CBC\"></a>CBC</h3><p>全称Cipher Block Chaining。和ECB的最大不同在于明文分组加密前会和上一个密文分组做一次异或运算。开头的明文分组会和一个随机序列做XOR。</p>\n<ul>\n<li>一个密文分组的损坏会影响关联的两个分组的解密</li>\n<li>比特的缺失将会影响整个密文的解密</li>\n<li>操纵初始化向量反转某一位比特可以反转第一个密文分组的某一位</li>\n<li>填充提示攻击，攻击padding部分</li>\n<li>SSL&#x2F;TLS使用CBC模式保证通信机密</li>\n<li><strong>CTS</strong>使用最后一个密文填充不足的明文部分</li>\n</ul>\n<h3 id=\"CFB\"><a href=\"#CFB\" class=\"headerlink\" title=\"CFB\"></a>CFB</h3><p>全程Cipher FeedBack模式。和CBC模式的区别在密文分组先加密，再和下一个明文做异或运算。实际上明文分组和密文分组间只相差了一个异或运算。很类似一次性密码本的模式。</p>\n<ul>\n<li>解密时，需要对密文分组和初始向量做<strong>加密</strong>操作</li>\n<li><strong>重放</strong>攻击，替换密文分组为原有分组，可使得解密出的明文为原有明文</li>\n</ul>\n<h3 id=\"OFB\"><a href=\"#OFB\" class=\"headerlink\" title=\"OFB\"></a>OFB</h3><p>全称Output-FeedBack模式。和CFB很像，区别在于OFB每次做XOR的密钥流仅来自于上一次的密钥，<strong>和密文分组无关</strong>。因为密钥流可以提前准备好，分组加密过程可以是并行的。</p>\n<ul>\n<li>第一次的密钥来自初始化向量</li>\n<li>速度快</li>\n<li>如果碰巧密钥加密后和加密前一样，那么之后的密钥就会是同一个值</li>\n</ul>\n<h3 id=\"CTR\"><a href=\"#CTR\" class=\"headerlink\" title=\"CTR\"></a>CTR</h3><p>全称CounTeR。CTR和OFB类似，区别在于它的密钥流来自于累加的计数器。密文分组来自于密钥流和明文分组的XOR运算。</p>\n<ul>\n<li>计数器由nonce和序号两部分各8字节组成，nonce是随机生成的，序号是从1累加的。</li>\n<li>和OFB一样，加密解密速度快，结构简单</li>\n<li>CTR的密钥流在选定nonce后就确定了，因此可以以<strong>任意顺序并行</strong>加密、解密</li>\n</ul>\n<h2 id=\"公钥密码\"><a href=\"#公钥密码\" class=\"headerlink\" title=\"公钥密码\"></a>公钥密码</h2><p>解决了对称密码的密钥配送问题。</p>\n<h3 id=\"密钥配送问题\"><a href=\"#密钥配送问题\" class=\"headerlink\" title=\"密钥配送问题\"></a>密钥配送问题</h3><ul>\n<li><strong>事先共享</strong>，在现实生活中传送</li>\n<li><strong>密钥配送中心</strong>，集中式管理用户密钥，用其加密临时的会话密钥</li>\n<li><strong>使用Diffie-Hellman密钥交换</strong></li>\n<li><strong>使用公钥密码</strong></li>\n</ul>\n<h3 id=\"公钥密码-1\"><a href=\"#公钥密码-1\" class=\"headerlink\" title=\"公钥密码\"></a>公钥密码</h3><p>使用加密密钥（公钥）加密，使用解密密钥（私钥）解密，避免密钥的泄露。</p>\n<ul>\n<li>发送者使用加密密钥</li>\n<li>接收者使用解密密钥</li>\n<li>加密密钥可以公开</li>\n<li>解密密钥一定要保密</li>\n</ul>\n<p>目前所使用的公钥密码RSA来自于1978年的发明。流程上，</p>\n<ul>\n<li><strong>接收者</strong>生成公私钥对，发送公钥给发送者</li>\n<li>发送者使用公钥加密明文</li>\n<li>接收者使用私钥解密密文</li>\n</ul>\n<p>公钥密码有两个问题：</p>\n<ul>\n<li>认证公钥的合法性</li>\n<li>处理速度慢</li>\n</ul>\n<h3 id=\"RSA\"><a href=\"#RSA\" class=\"headerlink\" title=\"RSA\"></a>RSA</h3><p>利用了数论中求解离散对数困难且耗时的特点。</p>\n<ul>\n<li><strong>加密</strong>，使用<code>密文=明文 ^ E mod N</code>。E和N组合成公钥。</li>\n<li><strong>解密</strong>，使用<code>明文=密文 ^ D mod N</code>。D和N组合成密钥。</li>\n</ul>\n<p>生成N、E、D和顺序如下：</p>\n<ol>\n<li>寻找互质的两个大数p和q，N为二者的乘积</li>\n<li>p-1和q-1的最小公倍数记为L</li>\n<li>寻找比L小的和L互质的数，即为E</li>\n<li>寻找比L小的和E乘积取模L为1的数，即为D</li>\n</ol>\n<p>因为解密时有对N取模操作，因此加密的明文不能大于N。</p>\n<p><strong>攻击方式</strong></p>\n<ul>\n<li>破解密文 -&gt; 求解离散对数很难</li>\n<li>暴力破解D -&gt; 比特位太长，很难破解</li>\n<li>通过E求解D，只要知道p和q就能算出D -&gt; 不知道p和q的组合 -&gt; <strong>对N质因数分解很难</strong></li>\n</ul>\n<p><strong>中间人攻击</strong>里，攻击者可以替换掉原本的公钥，发送给接收者，使用自己的私钥解密，从而实现攻击。这时需要<strong>证书</strong>保证公钥的权威性。</p>\n<p><strong>选择密文攻击</strong>里，攻击者可以利用服务端返回的错误消息收集加密算法信息。RSA-OAEP会在明文开头加上明文散列值和填充位，解密时发现散列值和内容对不上时，会隐藏错误信息。</p>\n<p>除了RSA外，还有ElGamal方式、Robin方式、ECC（椭圆曲线密码）等公钥密码。它们分别利用了mod N下求离散对数，mod N下求平方根，和椭圆曲线上做乘法运算逆运算在数学上很难求解的特点。</p>\n<h3 id=\"FAQ\"><a href=\"#FAQ\" class=\"headerlink\" title=\"FAQ\"></a>FAQ</h3><p>Q: 和对称密码的强度对比<br>A: 达到同等强度，RSA大致需要密钥是AES长度的20倍</p>\n<p>Q: RSA使用的质数会用完么<br>A: 512bit的质数数目大约是10 ^ 150。足够使用。</p>\n<p>Q: RSA破解难度如何？<br>A: 和大整数质因数分解一样难度</p>\n<p>Q: 要保证RSA强度，N的长度要达到多少位<br>A: 2048bit，4096bit更好</p>\n<h2 id=\"混合密码系统\"><a href=\"#混合密码系统\" class=\"headerlink\" title=\"混合密码系统\"></a>混合密码系统</h2><ul>\n<li>用对称密码加密明文</li>\n<li>用公钥密码加密上述对称密码的密钥（通常用随机数生成器得到，只用于此次会话）</li>\n<li>公钥密码的密钥由外部赋予（证书）</li>\n</ul>\n<p>密码软件PGP、HTTPS中使用的SSL&#x2F;TLS就使用了混合密码系统。当然它们还包含数字签名、认证、私钥管理等更多处理。</p>\n<p>类似混合密码系统，后面要介绍的数字签名、证书、消息认证、伪随机数生成也都是<strong>基础密码技术的组合</strong>。</p>\n<h2 id=\"单向散列函数\"><a href=\"#单向散列函数\" class=\"headerlink\" title=\"单向散列函数\"></a>单向散列函数</h2><ul>\n<li>将任意长度的消息转换到<strong>固定长度</strong>散列</li>\n<li>具有抗碰撞性，即找到具有相同散列函数的消息很困难</li>\n<li>单向性，即无法从三列中还原原信息</li>\n</ul>\n<h3 id=\"MD4、MD5\"><a href=\"#MD4、MD5\" class=\"headerlink\" title=\"MD4、MD5\"></a>MD4、MD5</h3><p>全称Message Digest。由Rivest设计于1990和1991年。能够产生<strong>128bit</strong>的散列值。它们的强抗碰撞性已被攻破，<strong>不建议使用</strong>。</p>\n<h3 id=\"RIPEMD-160\"><a href=\"#RIPEMD-160\" class=\"headerlink\" title=\"RIPEMD-160\"></a>RIPEMD-160</h3><p>1996年设计，是欧盟RIPE项目的修订版，能产生160bit长度的散列值。比特币中使用的散列函数就是RIPEMD-160。</p>\n<h3 id=\"SHA\"><a href=\"#SHA\" class=\"headerlink\" title=\"SHA\"></a>SHA</h3><p>SHA于1993年由NIST设计，在1995年发布了SHA-1修订版，能够产生<strong>160bit</strong>的散列值。它的强抗碰撞性已被攻破，<strong>也不建议使用</strong>。</p>\n<p>SHA-2于2002年发布，它是包括SHA-256，SHA-384和SHA-512的集合，分别产生<strong>256、384和512bit</strong>的散列值。目前未被攻破。SHA-2的几种散列长度来自SHA-256和SHA-512的组合。</p>\n<p>SHA-3作为SHA-1的升级替代算法，和AES一样，由NIST公开选拔，并在2012年确定为一个叫<strong>Keccak</strong>的算法。之后会和SHA-2并存一段时间。</p>\n<h3 id=\"Keccak\"><a href=\"#Keccak\" class=\"headerlink\" title=\"Keccak\"></a>Keccak</h3><p>Keccak可以输入<strong>任意长度</strong>的数据，产生<strong>任意长度</strong>的散列值。实现上，Keccak采用海绵结构，有<strong>吸收</strong>和<strong>挤出</strong>两阶段。</p>\n<ul>\n<li>吸收阶段，按分组长度r逐段读入消息内容，和内部状态做异或运算，之后和长度为c的内部状态一起交给函数f做“搅拌”。完成一轮处理，输出作为内部状态继读入输入的消息分组。</li>\n<li>挤出阶段，内部消息r和c逐段和函数f做运算，一段段输出散列值。</li>\n</ul>\n<p>Keccak的双工结构下，输入和输出可以同时进行。Keccak内部状态由5 * 5 * z的一个三维比特数组组成，共有b个bit。Keccak的本质就是实现一个充分搅拌上述数组的函数f。SHA-3中使用的是Keccak-f[1600]函数。其中b就是内部状态的bit数。函数的每一轮包含θ、ρ、π、χ、ι5步。循环轮数为12 + 2 * log2(b &#x2F; 25)。</p>\n<ul>\n<li>θ，将不同两个column的各5个bit通过异或运算加起来，再和当前位做异或替换</li>\n<li>ρ，各比特沿z轴方向进行平移</li>\n<li>π，对一个slice上的5 * 5个比特做旋转、轮换操作</li>\n<li>χ，对一个row上的各位做某个逻辑运算</li>\n<li>ι，用某个轮常数对所有比特做异或运算，避免对称性</li>\n</ul>\n<p>Keccak采用的海绵结构和此前各散列算法使用的MD结构（循环执行压缩函数）方法截然不同，这也是它最后成为标准的一个原因。目前还未出现针对Keccak的有效攻击手段。</p>\n<h3 id=\"攻击方式\"><a href=\"#攻击方式\" class=\"headerlink\" title=\"攻击方式\"></a>攻击方式</h3><p>利用文件的冗余性，构造<strong>一大堆</strong>和想要内容一样的数据，找到和原内容散列值一样的结果。</p>\n<ul>\n<li>原像攻击，给定散列值，找到具有该散列值的任意消息</li>\n<li>第二原像攻击，给定消息1，找到和消息1有相同散列值的消息2</li>\n<li>生日攻击，攻击散列算法的“强抗碰撞性”（寻找两个具有相同散列值的消息），利用了从有N个元素的集合中依次取并放回M个元素，两次取到同一元素的概率约为根号N的特点。大大减少暴力破解需要的次数。</li>\n</ul>\n<h2 id=\"消息认证\"><a href=\"#消息认证\" class=\"headerlink\" title=\"消息认证\"></a>消息认证</h2><p>可以同时防止消息的伪装和篡改。消息认证码简称MAC（Message Authentication Code）。可以简单理解成<strong>需要密钥参与的单向散列过程</strong>。在使用时：</p>\n<ul>\n<li>发送者伴随消息发送计算出的MAC</li>\n<li>接受者对消息通过共享密钥计算出MAC值，进行对比，一致则表示认证成功</li>\n<li><strong>这个密钥不能被中间人获取！</strong></li>\n</ul>\n<p>使用消息认证码（MAC）机制的场景有：</p>\n<ul>\n<li>SWIFT</li>\n<li>IPSec</li>\n<li>SSL&#x2F;TLS</li>\n</ul>\n<p>在认证加密时，Encrypt-then-MAC表示对密文计算MAC值，从而能判断密文是由知道明文和密钥的人生成的。除了Encrypt-then-MAC外，还有Encrypt-and-MAC和MAC-then-Encrypt两种方式。</p>\n<h3 id=\"HMAC\"><a href=\"#HMAC\" class=\"headerlink\" title=\"HMAC\"></a>HMAC</h3><p>HMAC即Hash MAC，是使用单向散列函数构造认证码的方法。分为下面几步：</p>\n<ol>\n<li>在密钥后填充0到长度达到单向散列函数的分组长度</li>\n<li>填充后的密钥和ipad序列做XOR运算，ipad序列是00110110为单位循环的比特序列</li>\n<li>组合在消息<strong>头部</strong>，并计算出散列值</li>\n<li>填充后的密钥和opad做XOR运算，opad是01011100位单位循环的比特序列</li>\n<li>结果拼在散列值<strong>后面</strong></li>\n<li>根据5的结果计算最终的散列值</li>\n</ol>\n<h3 id=\"应对攻击方式\"><a href=\"#应对攻击方式\" class=\"headerlink\" title=\"应对攻击方式\"></a>应对攻击方式</h3><ul>\n<li>消息认证需要解决<strong>重放攻击</strong>的问题，即再次发送相同的消息和MAC值。可以在消息中额外带上序号、时间戳，或先发送一个nonce一次性随机数保证相同的消息也会有完全不同的MAC值。</li>\n<li><strong>密钥推测攻击</strong>，应保证不能根据MAC值推测出双方使用的密钥，必须使用安全、高强度的伪随机数生成器。</li>\n</ul>\n<p>另外，消息认证无法解决下面的问题：</p>\n<ul>\n<li>向第三方证明，密钥的共享只在通信的双方，无法证明给第三方</li>\n<li>同样的，不能防止通信的一方<strong>否认</strong>消息</li>\n</ul>\n<h2 id=\"数字签名\"><a href=\"#数字签名\" class=\"headerlink\" title=\"数字签名\"></a>数字签名</h2><p>和公钥密码<strong>相反</strong>的使用方式：</p>\n<ul>\n<li>发布者使用私钥加密消息，私钥保密</li>\n<li>使用发布者的公钥可以解密消息，公钥公开</li>\n</ul>\n<p>签名有两种方式：<strong>对消息签名</strong>和<strong>对消息的散列值签名</strong>。它们主要区别在签名的对象不同。基本过程是：</p>\n<ol>\n<li>生成公、私钥对，发送公钥给接收者</li>\n<li>使用私钥加密消息&#x2F;消息的hash值，得到签名</li>\n<li>发送消息和签名给接收者</li>\n<li>接收者使用公钥解密，对比消息&#x2F;消息hash值，验证发送者身份</li>\n</ol>\n<p>在签名中，密钥只是起着“保证消息发送者的可靠来源目的的”，被复制并不影响它发挥作用。同时，由于不知道私钥，修改消息后无法伪造消息的签名。</p>\n<p>实际应用数字签名的地方有很多：</p>\n<ul>\n<li>安全信息公告</li>\n<li>软件下载</li>\n<li>公钥证书，确保公钥的合法来源</li>\n<li>SSL&#x2F;TLS，交换公钥的过程</li>\n</ul>\n<p>数字签名基于公钥密码，因此数字签名的实现方式因采用的公钥密码而异，如RSA、ElGamal、ECDSA（椭圆曲线密码）。对数字签名的攻击可以基于单向散列函数或是公钥密码。</p>\n<ul>\n<li><strong>不要对不清楚来源的数据做数字签名</strong></li>\n<li><strong>对消息的散列值函数做数字签名</strong></li>\n</ul>\n<p>数字签名无法解决<strong>验证签名正确性的公钥被伪造</strong>的问题，因为公钥正确性也依赖于数字签名技术。这里需要<strong>证书</strong>以及<strong>公钥基础设施PKI</strong>这种社会学的基础设施辅助。</p>\n<h2 id=\"证书\"><a href=\"#证书\" class=\"headerlink\" title=\"证书\"></a>证书</h2><p>证书即<strong>公钥证书</strong>，用来验证公钥密码和数字签名的公钥，由认证机构（CA）发布，认证机构可以是政府机关、一般企业或个人。证书的发布过程包括：</p>\n<ol>\n<li>申请人生成一对密钥，并把公钥发送给CA</li>\n<li>CA验证申请人身份</li>\n<li>通过验证后，CA使用自己的私钥对公钥施加数字签名并生成证书</li>\n<li>使用申请人证书的使用者通过CA的公钥验证申请人的公钥是否合法</li>\n<li>验证通过后，使用公钥完成公钥密码或数字签名</li>\n</ol>\n<p>PKI是为了能够更有效运用公钥制定的一系列规范的总称。PKI组成要素有3个：使用PKI的用户、认证机构、仓库。</p>\n<ul>\n<li>用户，分为注册公钥的用户和使用注册公钥的用户</li>\n<li>CA，包括生成密钥、验证本人身份、验证公钥合法性、作废证书</li>\n<li>仓库，是保存证书的数据库</li>\n</ul>\n<p>其中认证机构做了以下事情：</p>\n<ul>\n<li><strong>生成密钥对</strong>，可以由用户或是CA生成，若是CA生成，需要根据规范发送私钥给用户</li>\n<li><strong>注册证书</strong>，用户根据规范申请证书，认证机构根据业务准则生成符合X.509规范的证书</li>\n<li><strong>作废证书</strong>，因为私钥丢失等原因需要作废证书时，需要认证机构制作CRL（Certificate Revocation List，证书作废清单），PKI用户总需要从CA获取最新的CRL，以确认自己拿到的公钥证书是否有效。</li>\n</ul>\n<p><strong>认证机构的证书认证</strong></p>\n<p>认证机构的公钥证书可以由其他的认证机构施加数字签名。这个关系可以嵌套很多层，比如部门认证机构、分公司认证机构、总公司认证机构。一直往上直到根CA，可以对自己的公钥做自签名。</p>\n<p>从而，在验证证书合法性上，也会出现<strong>从上至下</strong>的验证过程。</p>\n<h3 id=\"证书的攻击\"><a href=\"#证书的攻击\" class=\"headerlink\" title=\"证书的攻击\"></a>证书的攻击</h3><p>对证书的攻击即对数字签名的攻击。</p>\n<ul>\n<li>对施加数字签名前的公钥攻击</li>\n<li>注册相似人名进行攻击</li>\n<li>窃取CA的私钥</li>\n<li>伪装成CA发放证书进行攻击，认证机构本身的可信度也很重要</li>\n<li>利用发送CRL的时间间隔，窃取了使用者的私钥，当使用者联系CA发布CRL时，有一定的时间间隔</li>\n<li>同样利用CRL，使用合法私钥发送消息后，发送CRL作废自己的公钥，<strong>否认</strong>自己之前发送的消息</li>\n</ul>\n<p><strong>不可能在完全不可信的状态下创建出信任关系，除非以已经存在的信任关系为基础。</strong></p>\n<h2 id=\"密钥\"><a href=\"#密钥\" class=\"headerlink\" title=\"密钥\"></a>密钥</h2><ul>\n<li><p>密钥长度（DES：56bit，三重DES：112bit或168bit，AES：128、192、256bit</p>\n</li>\n<li><p>对称密码和公钥密码<strong>用于确保机密性</strong>，消息认证码和数字签名使用的密码<strong>用于认证，防止篡改内容和伪装身份</strong></p>\n</li>\n<li><p>只使用一次的密钥称为<strong>会话密钥</strong>，重复使用的密钥称为<strong>主密钥</strong>。</p>\n</li>\n<li><p><strong>密码学用途的随机数生成器必须为密码学用途专门设计</strong></p>\n</li>\n<li><p>定期改变会话密钥可以减少密钥泄露的损失</p>\n</li>\n<li><p>保存密钥时，使用KEK（Key Encrypting Key）方式保存密钥可以减少管理密钥的数目。</p>\n</li>\n</ul>\n<h3 id=\"Diffie-Hellman密钥交换\"><a href=\"#Diffie-Hellman密钥交换\" class=\"headerlink\" title=\"Diffie-Hellman密钥交换\"></a>Diffie-Hellman密钥交换</h3><p>Diffie-Hellman密钥交换里，通信的双方通过交换一些可以公开的消息，就能够生成共享的密钥。</p>\n<ol>\n<li>确定一个非常大的质数P，寻找P的生成元（原根）G</li>\n<li>通信双方各自找1个1 ~ P-2的随机数A、B，生成G ^ A mod P与G ^ B mod P，发送给对方</li>\n<li>对方用收到的数字根据自己选的随机数做乘方运算，得到相等的值作为密钥</li>\n</ol>\n<p>它同样利用了离散对数问题难以快速求解的特点。这种交换方法可以做中间人攻击，可以用数字签名、证书等方式应对。</p>\n<h3 id=\"基于口令的密码（PBE）\"><a href=\"#基于口令的密码（PBE）\" class=\"headerlink\" title=\"基于口令的密码（PBE）\"></a>基于口令的密码（PBE）</h3><p>基于口令的密码避免了：记忆CEK -&gt; 记忆KEK -&gt; 记忆KEK的KEK的死循环。使用好记忆的口令配合盐生成CEK。使用过程如下：</p>\n<ol>\n<li>使用随机数生成器生成盐（随机数），加上用户口令，使用单向散列函数得到KEK</li>\n<li>使用KEK加密会话使用的CEK</li>\n<li>保存好盐以及使用KEK加密的会话秘钥</li>\n</ol>\n<ul>\n<li>盐的目的是避免字典攻击</li>\n<li>口令虽然便于生成，但是强度不高，因此需要格外地小心保管</li>\n<li>可以对KEK迭代使用单向散列函数得到最后的KEK（拉伸），这将加大攻击者的攻击负担</li>\n</ul>\n<h3 id=\"生成安全的口令\"><a href=\"#生成安全的口令\" class=\"headerlink\" title=\"生成安全的口令\"></a>生成安全的口令</h3><ul>\n<li>使用<strong>只有自己</strong>知道的信息<ul>\n<li>不包括别人见过的信息</li>\n<li>不包括可以很容易推测的信息</li>\n</ul>\n</li>\n<li>不应该重复使用口令，容易受牵连影响</li>\n<li>物理保存是可以的，但要注意安全</li>\n<li>可以使用口令生成和管理工具（比如1Password）</li>\n</ul>\n<h2 id=\"随机数生成\"><a href=\"#随机数生成\" class=\"headerlink\" title=\"随机数生成\"></a>随机数生成</h2><p>随机数生成在密码学中很常用：</p>\n<ul>\n<li>生成密钥</li>\n<li>生成分组密码的初始化向量</li>\n<li>生成CTR模式的nonce</li>\n<li>生成盐</li>\n</ul>\n<p>随机数至少需要具有下面的属性：</p>\n<ul>\n<li>随机等概性</li>\n<li>无状态，即无法从上一个推测下一个，生成序列无法重现</li>\n</ul>\n<p>由于计算机构成的抽象世界是<strong>离散的</strong>，内部状态有限，不能满足无状态的特点，因此只能称作<strong>伪随机数生成器</strong>。基于计算机硬件的随机数生成器可以认为是“真”随机数，它通常提前储存在一个随机数池中，在需要的时候直接从池中取用。伪随机数生成器根据随机的种子（seed）通过算法将内部状态转化为最终的随机数。</p>\n<ul>\n<li><strong>线性同余法</strong>，以当前随机数为内部状态（初始值为种子），(A x Rn + C) mod M，计算下一个值。其中A、C、M都需要事先选好，线性同余法生成的随机数数列具有可预测性，即不需要知道种子也可以推测下随机数值</li>\n<li><strong>单向散列函数</strong>，利用单向散列函数保护内部状态，以种子为初始值，逐次递加得到新的内部状态，再通过单向散列函数输出为随机数</li>\n<li><strong>密码法</strong>，类似单向散列函数，使用密钥加密内部状态输出也可以作为随机数，此时保护内部状态的加密算法和密钥</li>\n<li><strong>ANSI X9.17</strong>中，使用AES和三重DES作为密码算法<ol>\n<li>初始化内部状态</li>\n<li>使用当前时间生成掩码</li>\n<li>掩码和内部状态做XOR</li>\n<li>加密3的输出，作为随机数输出</li>\n<li>对加密后的输出与掩码做XOR</li>\n<li>加密5的结果作为新的内部状态</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"PGP介绍\"><a href=\"#PGP介绍\" class=\"headerlink\" title=\"PGP介绍\"></a>PGP介绍</h2><p>PGP全程Pretty Good Privacy，编写于1990年，具备现代密码软件所需的几乎所有功能。OpenPGP是一对密文和数字签名进行定义的标准规格。</p>\n<h3 id=\"加密和解密\"><a href=\"#加密和解密\" class=\"headerlink\" title=\"加密和解密\"></a>加密和解密</h3><p>加密时，使用混合密码系统的流程：</p>\n<ol>\n<li>用伪随机数生成会话密钥</li>\n<li>用<strong>接收者</strong>的公钥加密会话密钥</li>\n<li>压缩消息，并使用对称密码加密，密钥为上面生成的会话密钥</li>\n<li>将加密后的密钥和密文拼接在一起</li>\n<li>将4的结果转换为文本数据，即为报文数据</li>\n</ol>\n<p>解密时，PGP的私钥通过用户口令加密保存。在收到密文时：</p>\n<ol>\n<li>输入接收者的口令</li>\n<li>求口令的散列值，生成用户解密私钥的秘钥</li>\n<li>解密得到私钥</li>\n<li>将报文数据转换为二进制，并拆解成加密的会话密钥和压缩的密文</li>\n<li>用自己的私钥解密得到会话密钥</li>\n<li>用会话密钥解密密文</li>\n<li>解压缩明文得到原始消息</li>\n</ol>\n<h3 id=\"生成数字签名\"><a href=\"#生成数字签名\" class=\"headerlink\" title=\"生成数字签名\"></a>生成数字签名</h3><p>同样，生成数字签名时：</p>\n<ol>\n<li>输入接收者的口令</li>\n<li>求口令的散列值，生成用户解密私钥的秘钥</li>\n<li>解密得到私钥</li>\n<li>使用单向散列函数计算消息散列值</li>\n<li>对散列值签名，即使用私钥加密</li>\n<li>拼合签名和消息，进行压缩</li>\n<li><em>（可选）</em>转换二进制为文本数据，即最后的报文数据</li>\n</ol>\n<p>类似地，验证时：</p>\n<ol>\n<li>转换为二进制文件，解压缩数据</li>\n<li>分解出签名和消息两部分</li>\n<li>使用公钥解密签名，得到散列值</li>\n<li>使用单向散列函数计算消息散列值，对比3中的散列值</li>\n<li>相等即验证成功</li>\n</ol>\n<h3 id=\"生成数字签名并加密\"><a href=\"#生成数字签名并加密\" class=\"headerlink\" title=\"生成数字签名并加密\"></a>生成数字签名并加密</h3><p>实际情况下，我们往往需要使用加密算法加密数字签名中的原消息。实现步骤是上两节的组合。即先进行数字签名，再对签名结果加密。</p>\n<p>验证过程是相反的，先解密密文得到签名结果，再验证数字签名。</p>\n<h3 id=\"信任网\"><a href=\"#信任网\" class=\"headerlink\" title=\"信任网\"></a>信任网</h3><p>PGP确认公钥合法性的方法不依赖于认证机构颁发证书，而是采用所有者信任级别构成信任网（也叫信任圈、朋友圈）的方式，让用户自己决定该信任谁。建立信任有三种方式：</p>\n<ul>\n<li>通过自己的签名来确认。用户在通过其他方式（比如线下）确认公钥可信任后，对该公钥加上自己的数字签名。由于PGP中，使用者本人的公钥是绝对信任，被施加签名的公钥因此可信任。<em>注意：这并不代表被施加签名的公钥所有者被<strong>完全</strong>信任</em></li>\n<li>通过自己完全信任的数字签名进行确认。即<strong>完全信任</strong>某个公钥进行的数字签名，用户可对当前信任的每个公钥所有者设置信任级别，级别为<strong>完全信任</strong>时，所有者公钥施加签名的公钥也会被信任。</li>\n<li>通过有限信任的多个数字签名进行确认。在设置信任级别为<strong>有限信任</strong>时，有限信任的公钥<strong>都</strong>施加数字签名后，新的公钥才会被信任。</li>\n</ul>\n<p>通过上面三种方式，PGP使用者可以构建起自己的信任网，从而根据自己的决定信任某个公钥。</p>\n<h2 id=\"SSL-x2F-TLS\"><a href=\"#SSL-x2F-TLS\" class=\"headerlink\" title=\"SSL&#x2F;TLS\"></a>SSL&#x2F;TLS</h2><p>TLS是SSL的后续版本，但在大多数情况下，可以统一写成SSL&#x2F;TLS。<strong>SSL&#x2F;TLS可以承载应用层协议，保证应用层传输的安全性，HTTP就是其中一种</strong>。其余SSL&#x2F;TLS可以承载的应用层协议还包括SMTP、POP3等等。</p>\n<p>SSL于1994年在网景公司开发，在1995年发布了SSL3.0版本，后被发现会导致POODLE攻击。TLS是IETF在1999年作为SSL3.1发布。2006年发布TLS1.1，之后又发布了TLS1.2。</p>\n<p>HTTPS中SSL&#x2F;TLS要保证以下三点：</p>\n<ul>\n<li>保证消息传输中<strong>不被窃听</strong> -&gt; <strong>对称密码</strong>加密消息，<strong>公钥密码</strong>加密对称密码的密钥</li>\n<li>保证消息传输中<strong>不被篡改</strong> -&gt; <strong>消息认证</strong>码</li>\n<li>保证消息传输<strong>双方的合法性</strong> -&gt; <strong>数字签名</strong>生成证书</li>\n</ul>\n<h3 id=\"通信过程\"><a href=\"#通信过程\" class=\"headerlink\" title=\"通信过程\"></a>通信过程</h3><p>下面的流程以TLS1.2为例。TLS协议分为两层：</p>\n<ul>\n<li><strong>TLS握手协议</strong>，位于上层，处理除加密的部分。可以进一步分为：<ul>\n<li><strong>握手协议</strong>，负责在客户端和服务器间协商密码算法和共享密钥</li>\n<li><strong>密码规格变更协议</strong>，向通信对象传达变更密码方式</li>\n<li><strong>警告协议</strong>，在发生错误时将错误传达给对方</li>\n<li><strong>应用数据协议</strong>，将TLS上承载的应用数据传达给通信对象</li>\n</ul>\n</li>\n<li><strong>TLS记录协议</strong>，位于底层，处理加密的部分。使用了对称密码和消息认证码，但具体的算法和密钥需要通信双方具体协商</li>\n</ul>\n<h3 id=\"TLS记录协议\"><a href=\"#TLS记录协议\" class=\"headerlink\" title=\"TLS记录协议\"></a>TLS记录协议</h3><p>记录协议负责数据的压缩、加密、数据认证，工作方式如下：</p>\n<ol>\n<li>分割消息为较小的片段，再分段压缩，<strong>压缩方式需要协商决定</strong></li>\n<li>对压缩过的消息进行消息认证，加上MAC值。为了避免重放攻击，在计算MAC值时，加上了片段的编号。其中的<strong>单向散列函数的算法、使用的密钥都需要协商确定</strong></li>\n<li>把MAC值和压缩过的消息片段组合在一起，使用对称密码加密。迭代模式使用CBC模式，CBC模式的初始化向量通过主密码生成。<strong>对称密码的算法、密钥则需要协商决定</strong></li>\n<li>上述经过加密的数据，再加上<strong>数据类型、版本号、压缩后的长度</strong>，构成最终的报文数据。数据类型就是之前提到的TLS握手协议的4类子协议</li>\n</ol>\n<h3 id=\"握手协议\"><a href=\"#握手协议\" class=\"headerlink\" title=\"握手协议\"></a>握手协议</h3><p>握手协议负责生成对称密码中的共享密钥以及交换证书。因为握手的整个过程都是明文进行的，因此需要使用公钥密码或是Diffie-Hellman密钥交换。整个握手协议有下面几步：</p>\n<ol>\n<li><strong>ClientHello</strong>，客户端发送一些信息给服务器，便于协商算法和密钥</li>\n</ol>\n<ul>\n<li>可用版本号，即支持的SSL&#x2F;TLS版本号</li>\n<li>客户端生成的随机数，在后面的步骤会用到</li>\n<li>会话ID，在需要重新使用以前的会话时用到</li>\n<li>客户端可用的密码套件清单</li>\n<li>客户端可用的压缩方式清单</li>\n<li>当前时间</li>\n</ul>\n<ol start=\"2\">\n<li><strong>ServerHello</strong>，服务器根据客户端传来的信息，选择合适的算法和密码套件，返回的消息中带有下面几条</li>\n</ol>\n<ul>\n<li>使用的版本号</li>\n<li>服务端生成的随机数，后面步骤会用到</li>\n<li>会话ID，作用同上</li>\n<li>使用的密码套件</li>\n<li>使用的压缩方式</li>\n<li>当前时间</li>\n</ul>\n<ol start=\"3\">\n<li><strong>Certificate</strong>，<strong>非匿名通信</strong>时，服务器发送自己的证书，以及对服务器证书签名的CA的证书</li>\n<li><strong>ServerKeyExchange</strong>，当Certificate消息不足时，服务器通过此消息传递额外信息</li>\n<li><strong>CertificateRequest</strong>，需要进行<strong>客户端认证</strong>时，服务端发送此消息，并带上服务器能理解的证书类型、CA名称清单。</li>\n<li><strong>ServerHelloDone</strong>，服务器发送此消息结束服务器的返回</li>\n<li><strong>Certificate</strong>，作为CertificateRequest的回应，客户端发送自己的证书，交给服务器验证</li>\n<li><strong>ClientKeyExchange</strong>，密码套件包含RSA时，会发送<strong>经过服务器公钥加密的预备主密码</strong>；密码套件包含Diffie-Hellman密钥交换时，会发送Diffie-Hellman密钥交换中的公开值。<strong>预备主密码（pre-master secret）</strong>是客户端生成的随机数，之后会用做生成主密码的种子。根据预备主密码，通信双方计算出<strong>相同的主密码</strong>。主密码会用做以下用途：</li>\n</ol>\n<ul>\n<li>对称密码的密钥</li>\n<li>消息认证码的密钥</li>\n<li>CBC模式中的初始化向量</li>\n</ul>\n<ol start=\"9\">\n<li><strong>CertificateVerify</strong>，在服务器发送CertificateRequest时，通过此消息发送客户端使用自己私钥签名的主密码和握手协议传输消息的散列值。证明自己是客户端证书的持有人。</li>\n<li><strong>ChangeCipherSpec</strong>，客户端发送，表示切换密码开始，实际上是密码规格变更协议的一类报文</li>\n<li><strong>Finished</strong>，握手结束，此时已使用切换后的密码套件来加密发送。</li>\n<li><strong>ChangeCipherSpec</strong>，<strong>Finished</strong>。来自服务器，作用同上。</li>\n</ol>\n<p>通过上面的步骤，双方达成了下面的目标：</p>\n<ul>\n<li>客户端获得了服务器的公钥，完成了服务器认证</li>\n<li>服务器获得了客户端公钥，完成了客户端认证（如果需要的话）</li>\n<li>生成了对称密码的密钥</li>\n<li>生成了消息认证码中的共享密钥</li>\n</ul>\n<h3 id=\"密码规格变更协议\"><a href=\"#密码规格变更协议\" class=\"headerlink\" title=\"密码规格变更协议\"></a>密码规格变更协议</h3><p>用于在一开始从明文通信切换到使用密码套件沟通。</p>\n<h3 id=\"警告协议\"><a href=\"#警告协议\" class=\"headerlink\" title=\"警告协议\"></a>警告协议</h3><p>用在握手协议异常、消息认证码错误、无法解压数据等异常情况。</p>\n<h3 id=\"应用数据协议\"><a href=\"#应用数据协议\" class=\"headerlink\" title=\"应用数据协议\"></a>应用数据协议</h3><p>通信对象间传递应用数据。</p>\n<h3 id=\"主密码\"><a href=\"#主密码\" class=\"headerlink\" title=\"主密码\"></a>主密码</h3><p>主密码根据预备主密码（pre-master secret）或Diffie-Hellman密钥交换的公开值生成。生成的主密码用于生成<strong>对称密码的密钥、消息认证码的密钥、CBC模式的初始化向量</strong>。</p>\n<h3 id=\"对SSL-x2F-TLS的攻击\"><a href=\"#对SSL-x2F-TLS的攻击\" class=\"headerlink\" title=\"对SSL&#x2F;TLS的攻击\"></a>对SSL&#x2F;TLS的攻击</h3><ul>\n<li>SSL&#x2F;TLS框架性的特点让它不依赖于某个特定的密码技术，因此对特定密码技术的攻击对SSL&#x2F;TLS本身影响不大</li>\n<li>心脏出血漏洞，发现于2014年，利用TLS心跳拓展对请求的数据大小没有检查，可以获取内存中与请求无关的信息。是OpenSSL实现的漏洞。</li>\n<li>POODLE攻击，利用CBC中的填充提示攻击，发现于2014年SSL3.0中。</li>\n<li>FREAK攻击，可以在密码套件协商时，利用中间人攻击，强制使用强度很低的RSA Export Suites。从而在加密后，暴力破解明文。</li>\n<li>对伪随机数生成器的攻击</li>\n<li>利用之前提过的CRL</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>密码技术因为人类的不完美而必定不会完美。</p>\n<ul>\n<li><strong>对称密码</strong>，使用相同密钥加密、解密，保证消息<strong>机密性</strong>。目前主要使用AES。</li>\n<li><strong>公钥密码</strong>，使用不同密钥加密、解密，作用同上。使用最广泛的是RSA，还有相关的Diffie-Hellman密钥交换</li>\n<li><strong>单向散列函数</strong>，将消息转为固定长度散列值的技术，保证消息<strong>完整性</strong>，目前使用SHA2和SHA3（Keccak）</li>\n<li><strong>消息认证码</strong>，结合单向散列函数和对称密码，保证消息<strong>完整性</strong>并<strong>认证消息</strong>，但无法防御<strong>否认</strong>。目前主要使用HMAC</li>\n<li><strong>数字签名</strong>，结合单向散列函数和公钥秘钥，保证<strong>完整性</strong>，<strong>不可否认性</strong>和<strong>认证消息</strong>。是公钥证书采用的技术</li>\n<li><strong>伪随机数生成器</strong>，配合上述技术使用，需要保证<strong>不可预测性</strong>和<strong>不可重现性</strong></li>\n</ul>\n<p>密码技术从某种角度看是一种压缩技术：</p>\n<ul>\n<li>密钥是机密性的压缩</li>\n<li>散列值是消息完整性的压缩</li>\n<li>认证值时认证的压缩</li>\n<li>随机数种子是不可预测性的压缩</li>\n</ul>\n<h3 id=\"比特币\"><a href=\"#比特币\" class=\"headerlink\" title=\"比特币\"></a>比特币</h3><p>比特币来自于Satoshi Nakamoto（中本聪，化名）的一篇论文，并于2009年开始实际运用。比特币是一种<strong>基于P2P网络的支付结算系统</strong>。用户通过它进行进行价值转移。</p>\n<ul>\n<li><strong>地址</strong>，将公钥使用散列函数求散列值得到，地址都以1开头，剩下内容 不包含O，0,1和I。</li>\n<li><strong>钱包</strong>，即比特币客户端，可以生成密钥对，公钥用于收款，密钥用于付款</li>\n<li><strong>区块链</strong>，保存了比特币所有交易记录的账簿，若干交易组成一个区块，在区块头有所有交易的散列值，以及上一个区块的散列值，有交易添加时会触发区块头的散列值变化，并链式传递下去</li>\n<li><strong>交易</strong>，收、付款方各自生成密钥对，付款方创建交易“地址A向地址B转账x BTC”，<strong>并用自己的私钥签署数字签名</strong>，之后广播至P2P网络中，完成交易。比特币使用的数字签名基于椭圆曲线DSA，方程为x^2 &#x3D; y^3 + 7</li>\n<li><strong>挖矿</strong>，向区块链中添加新区块的行为被称为挖矿，第一个挖矿成功的矿工会获得挖矿奖励和区块所有交易的手续费。为了证明自己确实完成了规定工作，矿工需要进行<strong>工作量证明</strong>（PoW），即生成的区块头中，前一区块头的散列值必须以若干位的0开头，这个工作需要投入大量的计算资源。区块大约每10分钟添加一个，为了避免通货膨胀，所需的0的个数会不断调整。<ul>\n<li>根据协议规定，挖矿奖励每4年减少一半</li>\n<li>当区块链上同时出现分支时，P2P网络会选择计算量大的分支进行工作</li>\n</ul>\n</li>\n<li>比特币的匿名性只限于交易地址</li>\n</ul>\n<h2 id=\"附录：椭圆曲线\"><a href=\"#附录：椭圆曲线\" class=\"headerlink\" title=\"附录：椭圆曲线\"></a>附录：椭圆曲线</h2><ul>\n<li>椭圆曲线（EC）源自于求椭圆弧长的椭圆积分的反函数。</li>\n<li>定义椭圆曲线上的加法运算</li>\n<li>椭圆曲线上的离散对数（ECDLP） - 已知点G和点xG，求整数x</li>\n<li>有限域上的离散对数，对点进行模运算</li>\n<li>椭圆曲线Diffie-Hellman密钥交换</li>\n<li>椭圆曲线ElGamal密码</li>\n<li>椭圆曲线DSA（ECDSA）</li>\n</ul>\n",
            "tags": [
                "算法",
                "密码",
                "密钥"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2018/09/13/http-intro-note/",
            "url": "http://shenlvmeng.github.com/blog/2018/09/13/http-intro-note/",
            "title": "《图解HTTP》整理",
            "date_published": "2018-09-13T15:35:11.000Z",
            "content_html": "<blockquote>\n<p>读完了《图解HTTP》，就算是对计算机网络和HTTP部分内容做了个温习吧。同步做了整理，以便加强记忆和后面回顾。</p>\n</blockquote>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>请求报文构成：</p>\n<ul>\n<li>方法</li>\n<li>URI（绝对或是相对）</li>\n<li>HTTP版本</li>\n<li>请求首部</li>\n<li>内容实体</li>\n</ul>\n<p>响应报文构成：</p>\n<ul>\n<li>HTTP版本号</li>\n<li>状态码</li>\n<li>状态码原语</li>\n<li>响应头部</li>\n<li>响应主体</li>\n</ul>\n<p>请求URI是服务器本身时，可以用<code>*</code>代替URI。</p>\n<p>可用的方法列表：</p>\n<ul>\n<li>GET 获取资源</li>\n<li>POST 传输信息</li>\n<li>PUT 传输文件，<strong>没有用户验证机制</strong>，很少用到</li>\n<li>DELETE 删除文件，同上，很少用到</li>\n<li>HEAD 获得响应头部，不返回主体</li>\n<li>OPTIONS 询问支持方法</li>\n<li>CONNECT 用来建立HTTPS连接的隧道</li>\n<li>TRACE 追踪路径上的所有服务器节点，很少用到</li>\n</ul>\n<p>其中后面三个是HTTP1.1才开始支持的。</p>\n<p><strong>持久化</strong></p>\n<p>在HTTP1.1后，HTTP建立的TCP连接默认是长连接（<code>keep-alive</code>），避免不必要的多次TCP握手和挥手。在此基础上，客户端可以同时向服务端发起多个资源请求。</p>\n<p><strong>状态化</strong></p>\n<p>HTTP本身是无状态的。通过cookie实现状态化，cookie通过服务端在响应头部的<code>set-cookie</code>字段下发，设置信息、使用范围、过期时间等内容。客户端在使用范围内的请求默认会携带上cookie信息。</p>\n<h2 id=\"HTTP报文结构\"><a href=\"#HTTP报文结构\" class=\"headerlink\" title=\"HTTP报文结构\"></a>HTTP报文结构</h2><ul>\n<li>请求首部和主体通过CR+LF分割开来</li>\n<li>报文编码<ul>\n<li>编码压缩<ul>\n<li>gzip （GNU zip）</li>\n<li>compress（UNIX compress）</li>\n<li>deflate（zlib）</li>\n<li>indentity（不压缩）</li>\n</ul>\n</li>\n<li>分块发送</li>\n<li>多部分发送（multipart）<ul>\n<li>multipart&#x2F;form-data 表单文件上传，用boundary字符<code>--</code>表示新的part的开始</li>\n<li>multipart&#x2F;byterange 配合206响应只包含了部分数据时使用</li>\n</ul>\n</li>\n<li>部分发送<ul>\n<li>Range指定字节范围</li>\n<li>206响应状态码</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>内容协商<ul>\n<li>双方就合适的语言、字符集、编码方式、过期时间进行协商</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"HTTP状态码\"><a href=\"#HTTP状态码\" class=\"headerlink\" title=\"HTTP状态码\"></a>HTTP状态码</h2><ul>\n<li>1xx 这一类型的状态码，代表请求已被接受，需要继续处理<ul>\n<li>100 Continue：客户端应当继续发送请求。</li>\n<li>101 Switching Protocals：将通过Upgrade消息头通知客户端采用不同的协议来完成这个请求。</li>\n</ul>\n</li>\n<li>2xx 成功：这一类型的状态码，代表请求已成功被服务器接收、理解、并接受。<ul>\n<li>200 OK：请求已成功，在方法时HEAD时不返回响应主体</li>\n<li>204 No Content：服务器成功处理了请求，但不需要返回任何实体内容，<strong>用户浏览器应保留发送了该请求的页面</strong></li>\n<li>205 Reset Content：和204的唯一不同是返回此状态码的响应要求请求者重置文档视图</li>\n<li>206 Partial Content：服务器已经成功处理了部分GET请求。请求必须包含Range头信息来指示客户端希望得到的内容范围，返回使用<code>Content-Range</code>多用于下载工具</li>\n</ul>\n</li>\n<li>3xx 重定向：这类状态码代表需要客户端采取进一步的操作才能完成请求。通常，这些状态码用来重定向，后续的请求地址在本次响应的Location域中指明。<ul>\n<li>300 Multiple Choices：被请求的资源有一系列可供选择的回馈信息，每个都有自己特定的地址和浏览器驱动的商议信息。用户或浏览器能够自行选择一个首选的地址进行重定向。</li>\n<li>301 Moved Permanently：被请求的资源已永久移动到新位置，建议使用Location中的新地址</li>\n<li>302 Found：请求的资源现在临时从不同的URI响应请求</li>\n<li>303 See Other：和302的区别是，客户端<strong>应当采用GET的方式</strong>访问新的资源</li>\n<li>304 Not Modified：如果客户端发送了一个带条件（包括缓存相关的请求头部）的GET请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变</li>\n<li>305 Use Proxy：被请求的资源必须通过指定的代理才能被访问</li>\n</ul>\n</li>\n<li>4xx 客户端错误：客户端发生了错误<ul>\n<li>400 Bad Request：由于包含语法错误，当前请求无法被服务器理解</li>\n<li>401 Unauthorized：当前请求需要用户验证，或用户未通过验证。</li>\n<li>403 Forbidden：服务器已经理解请求，但是拒绝执行它</li>\n<li>404 Not Found：资源未被在服务器上发现</li>\n<li>405 Method Not Allowed：请求行中指定的请求方法不能被用于请求相应的资源，响应中必须返回一个Allow头信息用以表示出当前资源能够接受的请求方法的列表</li>\n<li>406 Not Acceptable：请求的资源的内容特性无法满足请求头中的条件</li>\n<li>413 Request Entity Too Large</li>\n<li>414 Request-URI Too Long</li>\n</ul>\n</li>\n<li>5xx 服务器错误：服务器在处理请求的过程中有错误发生<ul>\n<li>500 Internal Server Error：这个问题会在服务器的代码出错时出现</li>\n<li>501 Not Implemented：服务器不支持当前请求所需要的某个功能</li>\n<li>502 Bad GateWay：作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应</li>\n<li>503 Service Unavailable：临时的服务器维护或者过载。这个状况是临时的，并且将在一段时间以后恢复。</li>\n<li>504 Gateway Timeout：作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器或者辅助服务器收到响应</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"协作机制\"><a href=\"#协作机制\" class=\"headerlink\" title=\"协作机制\"></a>协作机制</h2><ul>\n<li>代理（Proxy），单纯转发HTTP请求，会在响应头部的<code>Via</code>字段留下痕迹</li>\n<li>网关（Gateway），隔绝服务器和客户端，有安全、计费等逻辑</li>\n<li>隧道（tunnel），基于协议搭建，保证传输安全，对用户侧透明</li>\n<li>缓存（Cache），本地、服务端二级缓存，加快响应时间，有过期时间</li>\n</ul>\n<h2 id=\"报文头部\"><a href=\"#报文头部\" class=\"headerlink\" title=\"报文头部\"></a>报文头部</h2><ul>\n<li>首部用来进行连接的各种信息描述。每个首部的字段用字段名和值组成，两者用<code>:</code>隔开。</li>\n<li>首部分为端到端和逐跳两类，前者在报文转发的整个过程都保留，后者在转发后就会丢弃。典型的逐条首部有<code>Connection</code>, <code>Keep-Alive</code>, <code>Transfer-Encoding</code>, <code>Upgrade</code>等</li>\n</ul>\n<h3 id=\"通用首部\"><a href=\"#通用首部\" class=\"headerlink\" title=\"通用首部\"></a>通用首部</h3><h4 id=\"Cache-Control\"><a href=\"#Cache-Control\" class=\"headerlink\" title=\"Cache-Control\"></a>Cache-Control</h4><p>客户端和服务端协商缓存机制。配合下面一些首部字段使用：</p>\n<ul>\n<li><code>Etag</code></li>\n<li><code>Last-Modified</code></li>\n<li><code>Expires</code>（HTTP1.0）</li>\n<li><code>Pragma</code>（HTTP1.0）</li>\n<li><code>Age</code>（HTTP1.0）</li>\n<li><code>If-None-Match</code></li>\n<li><code>If-Not-Modified-Since</code></li>\n</ul>\n<p><code>Cache-Control</code>有下面一些可配置项。</p>\n<p>缓冲能力上，</p>\n<ul>\n<li>private，缓存只针对当前用户而言</li>\n<li>public，缓存对所有用户生效</li>\n<li>no-cache，始终对缓存进行过期验证</li>\n<li>no-store，不允许缓存</li>\n</ul>\n<p>过期时间上，</p>\n<ul>\n<li>min-fresh，返回指定时间范围内的非过期资源</li>\n<li>max-stale，返回指定时间范围内过期、非过期资源</li>\n<li>max-age，单位：秒，最大缓存时间</li>\n<li>s-max-age，同上，只用于CDN缓存</li>\n</ul>\n<p>二次验证上，</p>\n<ul>\n<li>only-if-cached，强制从缓存服务器中获取内容</li>\n<li>immutable，一旦缓存不可更改</li>\n<li>must-revalidate，即使本地已缓存，仍要求检查CDN缓存</li>\n<li>proxy-revalidate，缓存服务器必须检查源内容是否改变</li>\n</ul>\n<h4 id=\"Connection\"><a href=\"#Connection\" class=\"headerlink\" title=\"Connection\"></a>Connection</h4><p>管理连接，主要有两个用途。</p>\n<ul>\n<li>指定不希望转发给代理的字段</li>\n<li>管理持久连接。使用<code>Connection: Keep-Alive</code>建立连接（HTTP1.1默认行为），使用<code>Connection: Close</code>终止连接</li>\n</ul>\n<h4 id=\"Date\"><a href=\"#Date\" class=\"headerlink\" title=\"Date\"></a>Date</h4><p>报文创建时间。行如“Date: Tue, 03 Jul 2012 04:31:12 GMT”</p>\n<h4 id=\"Pragma\"><a href=\"#Pragma\" class=\"headerlink\" title=\"Pragma\"></a>Pragma</h4><p>历史遗留字段。<code>Pragma: no-cache</code>等同于<code>Cache-Control: no-cache</code>。</p>\n<p>除此外还有：</p>\n<ul>\n<li>Trailer，说明报文主体中记录的首部字段</li>\n<li>Transfer-Encoding，分段传输的主体编码</li>\n<li>Upgrade，切换协议，<strong>配合<code>Connection: Upgrade</code>使用</strong></li>\n<li>Via，标明沿途的整条路径</li>\n<li>Warning，缓存相关警告</li>\n</ul>\n<h3 id=\"请求首部\"><a href=\"#请求首部\" class=\"headerlink\" title=\"请求首部\"></a>请求首部</h3><ul>\n<li>Accept 接受文件的类型，类型间可以指定<code>q=x</code>表示权重值，x的取值在0到1之间。下同</li>\n<li>Accept-Charset 可以接受的文件字符集</li>\n<li>Accept-Encoding 可以接受的文件编码，有gzip，compress，deflate，indentity几种</li>\n<li>Accept-Language 可接受的语言</li>\n<li>Authorization 服务端需要的用户验证信息</li>\n<li>Age 从缓存实体产生到现在经历的时间</li>\n<li>Expect 期望的服务端返回状态码，服务端无法满足时返回417状态码，客户端等待服务端100响应时发送的请求都要带上该字段</li>\n<li>Host 服务器的主机名，通常是请求资源的URL</li>\n<li>If-Match 需要匹配的Etag，不满足时返回412，表示不满足条件</li>\n<li>If-Modified-Since 返回指定日期后的新内容，否则返回304</li>\n<li>If-Unmodified-Since 类似上</li>\n<li>If-Range 类似If-Match不过是范围匹配</li>\n<li>Max-Forwards 报文最多转发次数，通常配合TRACE方法使用</li>\n<li>Proxy-Authorization 代理服务端需要的用户验证信息</li>\n<li>Range 请求资源的部分内容，一般用在多线程下载（客户端发起）</li>\n<li>Referer 当前请求从哪个地址发起</li>\n<li>User-Agent 请求发起终端信息</li>\n</ul>\n<h3 id=\"响应首部\"><a href=\"#响应首部\" class=\"headerlink\" title=\"响应首部\"></a>响应首部</h3><ul>\n<li>Accept-Ranges，表示服务器是否支持Range请求，支持时值为bytes，否则是none</li>\n<li>Age，表示缓存到目前为止过了多久（HTTP1.0）</li>\n<li>Etag，资源的唯一标识，分为强Etag和弱Etag</li>\n<li>Location，用在3xx的请求中，表示客户端需要重定向到的新地址</li>\n<li>WWW-Authentication&#x2F;Proxy-Authentication，服务器、代理使用的认证类型</li>\n<li>Server，服务器信息</li>\n<li>Vary，与Vary指定首部字段同名的请求才会命中缓存</li>\n</ul>\n<h3 id=\"实体首部\"><a href=\"#实体首部\" class=\"headerlink\" title=\"实体首部\"></a>实体首部</h3><ul>\n<li>Allow 允许的访问方法</li>\n<li>Content-Encoding&#x2F;Content-Language&#x2F;Content-Length&#x2F; 内容的编码、语言、长度、类型</li>\n<li>Content-Location 内容的位置，通常在和访问URI时会用到</li>\n<li>Content-MD5 内容MD5编码，便于和客户端编码后进行对比，防止内容篡改</li>\n<li>Content-Range 用于部分请求</li>\n<li>Content-Type 文件类型，包括MIME type和字符集</li>\n<li>Expires&#x2F;Last-Modified 文件的过期时间和上次修改时间，用户判断缓存是否过期</li>\n</ul>\n<p>除此之外，还有和Cookie相关的两个头部，它们来自网景公司对于Cookie的设计。</p>\n<ul>\n<li>Set-Cookie，服务端下发设置Cookie信息。包含下列信息<ul>\n<li>expires，过期时间</li>\n<li>path，适用路径</li>\n<li>domain，适用域名</li>\n<li>secure，限制https才会携带Cookie</li>\n<li>HttpOnly，限制JS脚本访问Cookie</li>\n<li>下发的cookie内容</li>\n</ul>\n</li>\n<li>Cookie，客户端期望的cookie内容</li>\n</ul>\n<p>另外还有一些常用的首部字段：</p>\n<ul>\n<li>X-Frame-Options，规定页面在iframe中的呈现方式<ul>\n<li>DENY 禁止访问</li>\n<li>SAMEORIGIN 仅允许同源访问</li>\n</ul>\n</li>\n<li>X-XSS-Protection，为1时开启XSS防御</li>\n</ul>\n<p><strong>不建议使用”X-“开头的方式拓展非标准首部</strong>。 </p>\n<h2 id=\"HTTPS简介\"><a href=\"#HTTPS简介\" class=\"headerlink\" title=\"HTTPS简介\"></a>HTTPS简介</h2><p>HTTP缺点：</p>\n<ul>\n<li>使用明文 -&gt; 通信内容可以被窃听 –HTTPS–&gt; 加密通信内容</li>\n<li>不能验证身份 -&gt; DDoS攻击和伪装服务器、客户端身份 –HTTPS–&gt; 证书证明身份</li>\n<li>不能验证内容完整性 -&gt; 中间人攻击 –HTTPS–&gt; HTTPS保证完整性</li>\n</ul>\n<p>HTTPS特征：</p>\n<ul>\n<li>加密内容</li>\n<li>证书</li>\n<li>完整性保护</li>\n</ul>\n<p>HTTPS建立在SSL连接之上，SSL建立在TCP连接上。SSL使用共享秘钥和公开秘钥加密两种方式混合加密。在秘钥确保安全的情况下，使用共享秘钥对称加密，优化速度；否则使用公开秘钥确保安全性。</p>\n<ul>\n<li>共享秘钥，双方使用同一秘钥加密和解密，秘钥被监听后加密就失去了意义</li>\n<li>公开秘钥，使用公开秘钥加密，使用私有秘钥解密</li>\n</ul>\n<p>然而公开密钥本身并不能确保完整性，需要证书机构（CA）颁发证书认证，确保秘钥和端的有效以及合法性。服务端也可以使用OpenSSL为自己颁发自认证证书，但是一般会在浏览器上弹出警告。</p>\n<p>HTTPS建立连接的过程包括：</p>\n<ol>\n<li>协商决定秘钥组件</li>\n<li>服务端发送公开密钥、证书</li>\n<li>客户端检查证书合法性，以确认服务端身份，并拿到公钥</li>\n<li>客户端发送pre-master secret随机字符串</li>\n<li>服务端使用私钥加密pre-master secret hash值，返回加密的hash值（避免黑客尝试破解私钥）</li>\n<li>客户端使用公钥解密hash，对比自己之前生成的pre-master secret字符串hash，若一致，及证明服务端身份的合法性</li>\n<li>客户端生成一个对称加密算法和秘钥master-secret，使用公钥加密，发送给服务端</li>\n<li>双方使用master-secret进行通信</li>\n</ol>\n<p>通信的完整性可以通过将报文内容生成hash交由客户端验证来实现。</p>\n<p>SSL最初由网景开发，1.0和2.0版本被发现存在问题已被废弃。3.0后由IETF接手。目前可用的协议版本有SSL3.0和TLS1.0、TLS1.1、TLS1.2，其中最常用的是SSL3.0和TLS1.0。</p>\n<p><strong>证书</strong></p>\n<p>证书包含：</p>\n<ul>\n<li>发布机构（CA）</li>\n<li>有效期</li>\n<li>持有者（由CA担保证明持有者身份）</li>\n<li>公钥</li>\n<li>数字签名算法</li>\n<li>指纹算法</li>\n</ul>\n<p>为了保证安全，在证书的发布机构发布证书时，证书的指纹和指纹算法，都会用自己的私钥加密后再和证书放到一起发布。使用者在打开证书时，根据加密算法，系统使用自带的公钥解密指纹和指纹算法，使用指纹算法计算证书的hash值和指纹对比，如果对的上就代表证书没问题。系统使用的公钥和证书一般由证书发布机构自己生成，内嵌在操作系统中。</p>\n<p>证书颁发机构（CA）通常会去做很多工作确保持有者的合法性，信任CA代表着信任CA颁发证书中的所有信息。所以一般系统只选择信誉较好的CA机构。公司内部使用或自生成的证书就只能被在指定范围内被信任。</p>\n<h2 id=\"身份验证\"><a href=\"#身份验证\" class=\"headerlink\" title=\"身份验证\"></a>身份验证</h2><ul>\n<li>BASIC 使用用户名密码验证，明文传输</li>\n<li>DIGEST 质询响应，防止密码被拦截，安全度和便利性都较差</li>\n<li>SSL 客户端证书 + HTTPS传输，成本高</li>\n<li>HTTP表单 + Cookie&#x2F;Session验证</li>\n</ul>\n<h2 id=\"功能追加协议\"><a href=\"#功能追加协议\" class=\"headerlink\" title=\"功能追加协议\"></a>功能追加协议</h2><p><strong>WebSocket</strong></p>\n<p>全双工，解决Ajax，长短轮询的局限。握手过程很简单：</p>\n<ul>\n<li>请求方添加<code>Upgrade</code>首部字段，声明升级到websocket。包含Sec-WebSocket-Key，Sec-WebSocket-Protocol，Sec-WebSocket-Verison等必要字段</li>\n<li>响应方回复101状态码，包含Sec-WebSocket-Accept（是根据Sec-WebSocket-Key生成的），Sec-WebSocket-Protocol</li>\n</ul>\n<p>连接建立后，双方使用WebSocket的方式进行通信</p>\n<p><strong>WebDAV</strong></p>\n<p>基于Web的文件属性管理。新增了一些方法和状态码，允许客户端远程修改服务器上的文件。</p>\n<h2 id=\"Web应用\"><a href=\"#Web应用\" class=\"headerlink\" title=\"Web应用\"></a>Web应用</h2><p><strong>RSS</strong></p>\n<p>RDF Site Summary，简易内容聚合。和Atom一样，使用XML的形式发布信息，通过特定的RSS阅读器阅读。</p>\n<h2 id=\"常见Web攻击方式\"><a href=\"#常见Web攻击方式\" class=\"headerlink\" title=\"常见Web攻击方式\"></a>常见Web攻击方式</h2><p>根本原因：HTTP本身没有必要的安全机制。</p>\n<h3 id=\"输出值转义相关攻击方式\"><a href=\"#输出值转义相关攻击方式\" class=\"headerlink\" title=\"输出值转义相关攻击方式\"></a>输出值转义相关攻击方式</h3><ul>\n<li>XSS，跨站脚本攻击，主要出现在<strong>动态拼接HTML</strong>的场景中，用户恶意注入的script代码段埋下陷阱，诱导用户误操作触发。盗取用户密码或Cookie信息</li>\n<li>SQL注入，通过URL注入的方式，制造恶意SQL语句，出现在<strong>动态拼接SQL语句</strong>的场景下。可以绕过认证、甚至破坏整个数据库</li>\n<li>OS命令注入，类似SQL注入，出现在<strong>动态拼接OS语句</strong>的场景下。</li>\n<li>HTTP首部攻击，出现在服务端响应头部使用了用户侧输入场景下，比如302响应中的Location头部可能存在的query部分。攻击者可以通过添加换行符，恶意添加新的首部字段，甚至篡改原有的响应主体</li>\n<li>邮箱首部注入攻击，类似HTTP首部攻击</li>\n</ul>\n<p>类似地还有目录遍历漏洞、远程文件引用漏洞。</p>\n<p>通过上面几种攻击方式，可以看到，<strong>永远不要信任用户侧输入</strong>，<strong>使用白名单机制，禁止动态拼接用户输入的语句</strong>。</p>\n<h3 id=\"设计缺陷相关攻击方式\"><a href=\"#设计缺陷相关攻击方式\" class=\"headerlink\" title=\"设计缺陷相关攻击方式\"></a>设计缺陷相关攻击方式</h3><ul>\n<li>强制浏览，在服务器公开目录下，浏览开发者本非自愿公开的文件。</li>\n<li>不正确的系统错误处理方式，数据库等内部系统抛出的错误，对用户毫无帮助，反倒能让攻击者看到服务背后的一些细节。包括，数据库错误、PHP等脚本错误、Web服务器的错误</li>\n<li>开放重定向，网站有诸如<code>?redirect=xxx</code>的path可以重定向时，一定要对redirect后的网址进行白名单控制，防止成为钓鱼攻击的跳板</li>\n</ul>\n<h3 id=\"session相关\"><a href=\"#session相关\" class=\"headerlink\" title=\"session相关\"></a>session相关</h3><ul>\n<li>XSS盗取cookie，伪装用户登录</li>\n<li>发送恶意链接，强制用户使用攻击者指定的session ID</li>\n<li>CSRF，跨站信息伪造，在带有用户信息的domain里留下恶意的网络请求，伪造用户发起请求，伪造请求可以通过<code>&lt;img src=&quot;xx&quot; /&gt;</code>, <code>&lt;video src=&quot;xxx&gt;&lt;/video&gt;</code>等多种形式</li>\n</ul>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><ul>\n<li>穷举法破解密码，暴力破解。使用图片验证码、手机验证码、机器检测等方式限制同IP的访问频率。<ul>\n<li>彩虹表。使用salt，增加破解难度</li>\n</ul>\n</li>\n<li>撞库。建议用户在不同域内使用不一样的密码</li>\n<li>点击劫持，使用透明元素覆盖在目标网页上。在18+网页中最常出现（😂）。</li>\n<li>DoS（Denial of Service）拒绝服务攻击，构造大量合法的网络请求，导致服务器超负荷。通常都是DDoS（Distributed Denial of Service）的形式。需要在IP层去过滤攻击的IP。</li>\n<li>后门程序</li>\n</ul>\n",
            "tags": [
                "笔记",
                "HTTP",
                "HTTPS",
                "状态码",
                "网络攻击",
                "介绍"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2018/08/15/frontend-roadmap/",
            "url": "http://shenlvmeng.github.com/blog/2018/08/15/frontend-roadmap/",
            "title": "frontend-roadmap",
            "date_published": "2018-08-15T15:52:55.000Z",
            "content_html": "<h2 id=\"前端科技树探索之路\"><a href=\"#前端科技树探索之路\" class=\"headerlink\" title=\"前端科技树探索之路\"></a>前端科技树探索之路</h2><p>前端的涵盖范畴是和客户直接交互的部分。</p>\n<p>以下几个因素促进了前端在这些年差异化成一个需要专业人才的领域</p>\n<ul>\n<li>Web API不断丰富和更新，允许JS做更多的事情，同时也需要不停学习跟进</li>\n<li>语言规范赋予JS更多的特性和可能，允许专业的人做更专业的事</li>\n<li>Node等轮子的出现拓展了JS的应用场景，方向更加细化</li>\n<li>用户对界面要求越来越高，需要专门的人处理</li>\n</ul>\n<p>从而使前端渐渐分化出来成为一个面向复杂场景、承诺服务质量、进入工程领域的职业。</p>\n<p>更细化的说，面向复杂场景包括：</p>\n<ul>\n<li>浏览器应用、桌面应用、移动端应用、后端应用多宿主</li>\n<li>复杂的网络环境</li>\n<li>差异化巨大的浏览器和浏览器版本（所幸比以前好了很多）</li>\n<li>用户群体的不同</li>\n<li>……</li>\n</ul>\n<p>承诺服务质量包括：</p>\n<ul>\n<li>更快地渲染页面</li>\n<li>更美观的页面效果</li>\n<li>更流畅的用户交互体验</li>\n<li>更高的代码稳定性（对应着lint和debug能力）</li>\n<li>差异化环境的表现一致性</li>\n<li>……</li>\n</ul>\n<p>进入工程领域包括：</p>\n<ul>\n<li>更舒适的开发体验（设计模式与诸多轮子）</li>\n<li>更高的开发效率（如工作流的设计）</li>\n<li>更顺滑的团队间协作（如mock）</li>\n<li>版本控制</li>\n<li>……</li>\n</ul>\n<p>上面是作为一个技术的要求，在公司应用范畴，还需要考虑下面这些：</p>\n<ul>\n<li><p>产品设计</p>\n</li>\n<li><p>团队建设</p>\n</li>\n<li><p>人才培养</p>\n</li>\n<li><p>项目管理</p>\n</li>\n<li><p>立身之本</p>\n<ul>\n<li>HTML</li>\n<li>DOM</li>\n<li>JavaScript基本语法</li>\n<li>CSS</li>\n</ul>\n</li>\n<li><p>关联技术</p>\n<ul>\n<li>Web API</li>\n<li>ajax</li>\n<li>JSON</li>\n<li>正则</li>\n<li>SVG&#x2F;Canvas&#x2F;WebGL</li>\n<li>PWA</li>\n</ul>\n</li>\n<li><p>深入了解</p>\n<ul>\n<li>ES6 ES7</li>\n<li>TypeScript</li>\n<li>CSS3</li>\n<li>SASS Less</li>\n</ul>\n</li>\n<li><p>现有轮子</p>\n<ul>\n<li>NodeJS</li>\n<li>Electron</li>\n<li>React</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "前端",
                "roadmap"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2018/06/26/canvas-flowchart-compare/",
            "url": "http://shenlvmeng.github.com/blog/2018/06/26/canvas-flowchart-compare/",
            "title": "流程图JS实现方案对比",
            "date_published": "2018-06-26T13:09:27.000Z",
            "content_html": "<p>实现流程图和类流程图的工具主要需要解决<strong>数据 -&gt; 图形</strong>和<strong>交互</strong>两方面问题。在实现图形元素时也有canvas，SVG，canvas with DOM，SVG with DOM，DOM with canvas一些实现方式。</p>\n<p>canvas和SVG的实现方式区别比较明显：</p>\n<ul>\n<li>大规模元素、频繁重绘上，canvas完胜</li>\n<li>强调光影效果上，canvas小胜</li>\n<li>强调导出图片上，canvas小胜</li>\n<li>强调元素可交互上，SVG完胜</li>\n<li>强调画图元素可缩放上，SVG完胜</li>\n</ul>\n<p>使用SVG实现时，元素规模大以及频繁重绘时会出现卡顿现象，在大规模元素场景下交互也会有卡顿。使用canvas实现时，保证流程图元素的可交互性将成为头疼的难题，开发者需要自己模拟浏览器的一部分行为。</p>\n<p>下面是一些流程图实现基础的对比。</p>\n<h2 id=\"d3\"><a href=\"#d3\" class=\"headerlink\" title=\"d3\"></a>d3</h2><p>d3着眼在数据可视化，重点在使用不同layout组织数据，完成可视化。</p>\n<p>d3最初是天然支持SVG的，这点从类jQuery的API也能看出来。d3和canvas的结合上，绘制需要<a href=\"https://bl.ocks.org/mbostock/1276463\">额外的data binding</a>操作，周期性地将虚拟的DOM节点映射到canvas上，重绘得到下一帧画面。要实现canvas可交互的话也需要一些<a href=\"https://medium.freecodecamp.org/d3-and-canvas-in-3-steps-8505c8b27444\">hack的手段</a>。基于d3实现流程图并不划算。</p>\n<h2 id=\"zrender\"><a href=\"#zrender\" class=\"headerlink\" title=\"zrender\"></a>zrender</h2><p>zrender是一个canvas画图的基础库。它并不负责数据的组织和渲染，需要自己完成这一部分工作。但是zrender提供了让canvas可交互的重要功能。</p>\n<p>zrender下，mixin了Eventful特性的元素上可以监听交互事件。Eventful只是为元素提供了类似EventEmitter的功能。真正实现元素可交互的handler。</p>\n<p>handler内会拦截发生在canvas内的<code>click</code>&#x2F;<code>mousedown</code>&#x2F;<code>mouseup</code>&#x2F;<code>mousewheel</code>&#x2F;<code>dblclick</code>&#x2F;<code>contextmenu</code>事件，交予prototype内对应的处理方法处理，handler内有下面几个关键方法：</p>\n<ul>\n<li><code>mousemove</code>，监听canvas内mousemove事件，调用<code>findHover</code>得到当前位置对应的元素，根据情况调用<code>dispatchToElement</code>方法，分发<code>mouseout</code>，<code>mouseover</code>，<code>mousemove</code>给刚才得到的元素实例</li>\n<li><code>dispatchToElement</code>，分发事件到对应实例，将事件对象封装，trigger实例的对应事件handler，并通过<code>el.parent</code>向上冒泡</li>\n<li><code>findHover</code>，指定x, y坐标寻找该坐标位置的元素。从storage中拿到所有的displayable的list。挨个调用<code>isHover</code>判断displayable和[x, y]坐标的关系</li>\n<li><code>isHover</code>函数，根据displayable的rectHover属性，即是否使用包围盒检测鼠标进入。调用displayable的<code>rectContain</code>或<code>contain</code>检测是否在其中。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isHover</span>(<span class=\"params\">displayable, x, y</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (displayable[displayable.<span class=\"property\">rectHover</span> ? <span class=\"string\">&#x27;rectContain&#x27;</span> : <span class=\"string\">&#x27;contain&#x27;</span>](x, y)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> el = displayable;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> isSilent;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (el) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// If clipped by ancestor.</span></span><br><span class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">FIXME:</span> If clipPath has neither stroke nor fill,</span></span><br><span class=\"line\">            <span class=\"comment\">// el.clipPath.contain(x, y) will always return false.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (el.<span class=\"property\">clipPath</span> &amp;&amp; !el.<span class=\"property\">clipPath</span>.<span class=\"title function_\">contain</span>(x, y))  &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (el.<span class=\"property\">silent</span>) &#123;</span><br><span class=\"line\">                isSilent = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            el = el.<span class=\"property\">parent</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> isSilent ? <span class=\"variable constant_\">SILENT</span> : <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>先简单看下storage，因为zrender里绘制的元素之间没有逻辑关联，因此需要有一个全局存储storage去统一管理加入的Group或Shape。storage的<code>getDisplayList</code>方法返回所有图形的绘制队列。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">getDisplayList</span>: <span class=\"keyword\">function</span> (<span class=\"params\">update, includeIgnore</span>) &#123;</span><br><span class=\"line\">    includeIgnore = includeIgnore || <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (update) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">updateDisplayList</span>(includeIgnore);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_displayList</span>;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p><em>注：方法中提到的<code>updateDisplayList</code>用于更新图形的绘制队列，在每次绘制前调用，它会深度优先遍历整个树，更新所有的变换后，根据优先级排序得到新的绘制队列。</em></p>\n<p>在displayable的基类中，<code>contain</code>方法只是单纯调用了<code>rectContain</code>（子类都有区别于<code>rectContain</code>的自己的实现）。在<code>rectContain</code>中，获取到坐标相对于图形的坐标（<code>transformCoordToLocal</code>）和图形的包围盒（<code>getBoundingRect</code>）。这里先说简单的<code>RectContain</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">rectContain</span>: <span class=\"keyword\">function</span> (<span class=\"params\">x, y</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> coord = <span class=\"variable language_\">this</span>.<span class=\"title function_\">transformCoordToLocal</span>(x, y);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rect = <span class=\"variable language_\">this</span>.<span class=\"title function_\">getBoundingRect</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rect.<span class=\"title function_\">contain</span>(coord[<span class=\"number\">0</span>], coord[<span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>getBoundingRect</code>是各自类自己实现的。除了个别情况，如Text，形状都基于Path类。在Path的<code>getBoundingRect</code>中可以看到，path的绘制又额外包装了一层<code>PathProxy</code>，<code>getBoundingRect</code>也是使用的<code>PathProxy</code>的方法。在实现上，PathProxy把绘制路径的操作命令拆分成了命令数组。通过记录每一段子路径上x、y的最大最小值，再将所有这些极值比较得到最后的最值。在PathProxy返回结果后，根据描边粗细得到最终结果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">getBoundingRect</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// _rect变量做缓存用，计算完成后只在重绘时置空，避免重复计算</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> rect = <span class=\"variable language_\">this</span>.<span class=\"property\">_rect</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> style = <span class=\"variable language_\">this</span>.<span class=\"property\">style</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> needsUpdateRect = !rect;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (needsUpdateRect) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> path = <span class=\"variable language_\">this</span>.<span class=\"property\">path</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!path) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Create path on demand.</span></span><br><span class=\"line\">            path = <span class=\"variable language_\">this</span>.<span class=\"property\">path</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">PathProxy</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">__dirtyPath</span>) &#123;</span><br><span class=\"line\">            path.<span class=\"title function_\">beginPath</span>();</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"title function_\">buildPath</span>(path, <span class=\"variable language_\">this</span>.<span class=\"property\">shape</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        rect = path.<span class=\"title function_\">getBoundingRect</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_rect</span> = rect;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (style.<span class=\"title function_\">hasStroke</span>()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Return rect with stroke</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> rectWithStroke;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> rect;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p><code>Displayable</code>继承自<code>Element</code>，<code>Element</code>通过mixin得到来自<code>Transformable</code>中的<code>transformCoordToLocal</code>方法。这里要说到，zrender中元素和Group都有一个构造时的初始位置，而后的所有变化都是作为transform叠加在元素上的。例如拖拽元素对应的是“原始位置 + transform”而不是一个“新位置”。</p>\n<p>在每次变换后，<code>Transformable</code>中的<code>updateTransform</code>方法都会调用，设置自身<code>invTransform</code>属性为这次变化的逆矩阵。在<code>transformCoordToLocal</code>中对向量[x, y]应用这个逆矩阵即可得到点相对于当前形状的位置（可以理解成将点逆变换到形状变换前的位置）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">transformableProto.<span class=\"property\">updateTransform</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    m = m || matrix.<span class=\"title function_\">create</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保存这个变换矩阵</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">transform</span> = m;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">invTransform</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">invTransform</span> || matrix.<span class=\"title function_\">create</span>();</span><br><span class=\"line\">    matrix.<span class=\"title function_\">invert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">invTransform</span>, m);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">transformableProto.<span class=\"property\">transformCoordToLocal</span> = <span class=\"keyword\">function</span> (<span class=\"params\">x, y</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> v2 = [x, y];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> invTransform = <span class=\"variable language_\">this</span>.<span class=\"property\">invTransform</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (invTransform) &#123;</span><br><span class=\"line\">        vector.<span class=\"title function_\">applyTransform</span>(v2, v2, invTransform);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> v2;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>综合这两个方法即可判断点是否在某元素的包围盒中。</p>\n<p>判断<code>contain</code>时，首先需要满足<code>rectContain</code>的关系。之后根据描边和填充情况，执行<code>contain/path</code>下对应的<code>contain</code>或<code>containStroke</code>方法。前者实际上是后者stroke为0时的特殊情况。除了path外，可以判断点是否在元素图形内的所有元素在<code>contain</code>下都有对应文件。基本所有的包含都可以转化为指定闭合路径是否包含指定点的问题。</p>\n<p>zrender利用<a href=\"https://en.wikipedia.org/wiki/Point_in_polygon\">PIP</a>（point-in-polygon）问题<a href=\"https://www.quora.com/How-do-I-know-a-point-is-inside-a-closed-curve-or-not#\">winding number</a>的解法判断点是否在path中；canvas提供的API中也有<code>isPointInPath</code>和<code>isPointInStroke</code>，不过只能针对当前的path。</p>\n<p>综上，zrender可以实现canvas内的元素和交互。</p>\n<h2 id=\"g6\"><a href=\"#g6\" class=\"headerlink\" title=\"g6\"></a>g6</h2><p>g6是antv的一部分，是一个canvas实现的展示关系型数据的JS可视化库。使用canvas的原因应该也在展示大量数据和重绘上更流畅。</p>\n<p>使用canvas实现时，g6一样会遇到zrender遇到的实现元素可交互的难题。从处理event的event.js中能看到，关联事件和元素的实现在<code>_getEventObj</code>处完成，剩下的步骤只是额外的封装操作：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Util</span>.<span class=\"title function_\">each</span>(<span class=\"title class_\">MouseEventTypes</span>, <span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    _events.<span class=\"title function_\">push</span>(<span class=\"title class_\">Util</span>.<span class=\"title function_\">addEventListener</span>(el, item, <span class=\"function\"><span class=\"params\">ev</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> oldEventObj = <span class=\"variable language_\">this</span>.<span class=\"property\">_currentEventObj</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">_oldEventObj</span> = oldEventObj;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">_processEventObj</span>(ev);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> currentEventObj = <span class=\"variable language_\">this</span>.<span class=\"property\">_currentEventObj</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">_processEventObj</span>(<span class=\"params\">ev</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> graph = <span class=\"variable language_\">this</span>.<span class=\"property\">graph</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> canvas = graph.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;_canvas&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> frontCanvas = graph.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;_frontCanvas&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> evObj = <span class=\"variable language_\">this</span>.<span class=\"title function_\">_getEventObj</span>(ev, canvas);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> frontEvObj = <span class=\"variable language_\">this</span>.<span class=\"title function_\">_getEventObj</span>(ev, frontCanvas);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">_getEventObj</span>(<span class=\"params\">ev, canvas</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> graph = <span class=\"variable language_\">this</span>.<span class=\"property\">graph</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> clientX = ev.<span class=\"property\">clientX</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> clientY = ev.<span class=\"property\">clientY</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> canvasPoint = canvas.<span class=\"title function_\">getPointByClient</span>(clientX, clientY);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> point = <span class=\"variable language_\">this</span>.<span class=\"title function_\">_parsePoint</span>(canvasPoint.<span class=\"property\">x</span>, canvasPoint.<span class=\"property\">y</span>); <span class=\"comment\">// 根据pixel ratio做一个转换</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> shape = canvas.<span class=\"title function_\">getShape</span>(canvasPoint.<span class=\"property\">x</span>, canvasPoint.<span class=\"property\">y</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> item = graph.<span class=\"title function_\">getItemByShape</span>(shape);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>p.s. 另说一点，frontCanvas的作用是绘制拖拽状态中的元素和辅助线等信息。</p>\n<p>最关键的方法<code>getPointByClient</code>和<code>getShape</code>来自Graph的<code>canvas</code>属性，这个属性通过‘@antv&#x2F;g’（G2）的canvas构造得来。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> G = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;@antv/g&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Canvas</span> = G.<span class=\"property\">Canvas</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在G2中，Canvas继承自Group，可以认为Canvas本身已经扮演了根节点的角色。Canvas判断坐标对应元素的方法<code>getShape(x,y)</code>也来自Group。此方法遍历Group下所有元素（包括单个元素或Group），判断点[x, y]是否在范围内：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">find</span>(<span class=\"params\">children, x, y</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> rst;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = children.<span class=\"property\">length</span> - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> child = children[i];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (child.<span class=\"property\">__cfg</span>.<span class=\"property\">visible</span> &amp;&amp; child.<span class=\"property\">__cfg</span>.<span class=\"property\">capture</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 是Group就继续向下寻找</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (child.<span class=\"property\">isGroup</span>) &#123;</span><br><span class=\"line\">        rst = child.<span class=\"title function_\">getShape</span>(x, y);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (child.<span class=\"title function_\">isHit</span>(x, y)) &#123;</span><br><span class=\"line\">        rst = child;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rst) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> rst;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>关键的<code>child.isHit</code>方法类似zrender里的<code>contain</code>方法。区别使用包围盒还是自身范围判断。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">isHit</span>(<span class=\"params\">x, y</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> self = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> v = [ x, y, <span class=\"number\">1</span> ];</span><br><span class=\"line\">    self.<span class=\"title function_\">invert</span>(v); <span class=\"comment\">// canvas</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (self.<span class=\"title function_\">isHitBox</span>()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> box = self.<span class=\"title function_\">getBBox</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (box &amp;&amp; !<span class=\"title class_\">Inside</span>.<span class=\"title function_\">box</span>(box.<span class=\"property\">minX</span>, box.<span class=\"property\">maxX</span>, box.<span class=\"property\">minY</span>, box.<span class=\"property\">maxY</span>, v[<span class=\"number\">0</span>], v[<span class=\"number\">1</span>])) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> clip = self.<span class=\"property\">__attrs</span>.<span class=\"property\">clip</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (clip) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (clip.<span class=\"title function_\">inside</span>(x, y)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.<span class=\"title function_\">isPointInPath</span>(v[<span class=\"number\">0</span>], v[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.<span class=\"title function_\">isPointInPath</span>(v[<span class=\"number\">0</span>], v[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用包围盒时用<code>getBBox()</code>判断，类似zrender；否则使用<code>isPointInPath</code>。这点上g2不同，它只对特殊的闭合曲线如圆、矩形、贝塞尔曲线等等进行自己的实现。对一般性的path，直接使用上面提到的canvas的API来判断。</p>\n<h2 id=\"processOn\"><a href=\"#processOn\" class=\"headerlink\" title=\"processOn\"></a>processOn</h2><p>processOn严格意义上是一个产品，类似于在线的visio，编辑很流畅。使用DOM + canvas实现。具体来说：</p>\n<ul>\n<li>DOM绘制每个元素占位，响应交互</li>\n<li>canvas绘制每个DOM内的图形本身</li>\n</ul>\n<p>这么做的好处在有二：1. 天然解决了元素交互的问题；2. 更平滑的元素拖拽效果。</p>\n<p>类似的还有jsPlumb这样的使用SVG的方案，使用SVG的优势体现在交互更容易实现。</p>\n",
            "tags": [
                "canvas",
                "流程图",
                "d3",
                "g6",
                "zrender",
                "processOn"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2018/05/14/canvas-introduction/",
            "url": "http://shenlvmeng.github.com/blog/2018/05/14/canvas-introduction/",
            "title": "canvas相关介绍",
            "date_published": "2018-05-14T13:28:01.000Z",
            "content_html": "<p>canvas由Apple首先提出，现在已经有非常好的浏览器支持度。它和<code>&lt;img&gt;</code>标签很像，但是只有<code>width</code>和<code>height</code>两个属性，在未设置时，为300px和150px。canvas类似<code>&lt;video&gt;</code>和<code>&lt;audio&gt;</code>可以设置替换内容，应对标签本身不被支持的情况。另外，canvas不同于<code>&lt;img&gt;</code>，它必须要有一个<code>&lt;/canvas&gt;</code>作为闭合标志。</p>\n<p>canvas是一个2D渲染上下文环境（就像webGL是3D渲染上下文环境），在获取到<code>&lt;canvas&gt;</code>元素后，可以通过其<code>getContext</code>方法得到渲染上下文和相关功能，通常传入<code>2d</code>，用来绘制2D图案。</p>\n<h2 id=\"形状\"><a href=\"#形状\" class=\"headerlink\" title=\"形状\"></a>形状</h2><p><code>canvas.getContext(&#39;2d&#39;)</code>得到一个CanvasRenderingContext2D对象。剩下的绘制操作都通过调用对象上的API实现。</p>\n<p>canvas的坐标系系统和svg一样，从左上角开始，向右和向下为正，坐标轴单位为像素。下面列出最常见的绘制图形API。</p>\n<ul>\n<li><code>fillRect(x, y, width, height)</code> 绘制矩形</li>\n<li><code>strokeRect(x, y, width, height)</code> 绘制矩形边框</li>\n<li><code>clearRect(x, y, width, height)</code> 擦除矩形范围</li>\n</ul>\n<p>path被用来绘制通用曲线，注意<strong>path都是封闭的</strong>。绘制路径有4步：</p>\n<ul>\n<li><code>beginPath()</code> 新建一条路径，生成之后，图形绘制命令被指向到路径上生成路径。</li>\n<li>使用画图命令去画出路径</li>\n<li><code>closePath()</code> 闭合路径</li>\n<li><em>可选</em> <code>fill()</code> 通过填充路径的内容区域生成实心的图形，使用<code>fill()</code>时可以不手动闭合路径</li>\n<li><code>stroke()</code>，为路径添加描边</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 样例</span></span><br><span class=\"line\">ctx.<span class=\"title function_\">beginPath</span>();</span><br><span class=\"line\">ctx.<span class=\"title function_\">moveTo</span>(<span class=\"number\">75</span>,<span class=\"number\">50</span>);</span><br><span class=\"line\">ctx.<span class=\"title function_\">lineTo</span>(<span class=\"number\">100</span>,<span class=\"number\">75</span>);</span><br><span class=\"line\">ctx.<span class=\"title function_\">lineTo</span>(<span class=\"number\">100</span>,<span class=\"number\">25</span>);</span><br><span class=\"line\">ctx.<span class=\"title function_\">fill</span>();</span><br></pre></td></tr></table></figure>\n\n<div class=\"tip\">所有的路径通过`stroke()`和`fill()`才能体现效果。</div>\n\n<p>里面包含了常见的<code>moveTo</code>和<code>lineTo</code>，表示移动画笔&#x2F;画直线到(x,y)处。画曲线时可以选择：</p>\n<ul>\n<li><code>arc(x, y, radius, startAngle, endAngle, anticlockwise)</code><br>画一个以（x,y）为圆心的以radius为半径的圆弧（圆），从startAngle开始到endAngle结束，按照anticlockwise给定的方向（默认为顺时针）来生成。</li>\n<li><code>arcTo(x1, y1, x2, y2, radius)</code> 根据给定的控制点和半径画一段圆弧，再以直线连接两个控制点。</li>\n<li><code>quadraticCurveTo(cp1x, cp1y, x, y)</code> 绘制二次贝塞尔曲线，cp1x,cp1y为一个控制点，x,y为结束点。</li>\n<li><code>bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y)</code> 绘制三次贝塞尔曲线，cp1x,cp1y为控制点一，cp2x,cp2y为控制点二，x,y为结束点。</li>\n</ul>\n<p><strong>path2D</strong></p>\n<p>通过<code>new path2D()</code>用path2D声明子路径，允许你保留和重用路径对象。除了CanvasRenderingContext2D对象的API外，还可以用<code>addPath</code>新增路径到path2D对象中，它还支持通过SVG格式的字符串导入为路径。</p>\n<h2 id=\"样式\"><a href=\"#样式\" class=\"headerlink\" title=\"样式\"></a>样式</h2><p>通过修改<code>fillStyle</code>和<code>strokeStyle</code>改变当前填充和描边的默认颜色。支持的颜色格式有</p>\n<ul>\n<li>颜色名</li>\n<li>hex</li>\n<li>rgb</li>\n<li>rgba</li>\n</ul>\n<p>通过<code>globalAlpha</code>修改画布里的所有图形的透明度，取值在0到1之间。</p>\n<p>线型样式选择有：</p>\n<ul>\n<li>lineWidth &#x3D; value 设置线条宽度。</li>\n<li>lineCap &#x3D; type 设置线条末端样式。默认为butt，还有round、square可选。</li>\n<li>lineJoin &#x3D; type 设定线条与线条间接合处的样式。round, bevel 和 miter三种可选，miter时，miterLimit可以限制尖角的高度。</li>\n<li>miterLimit &#x3D; value 限制当两条线相交时交接处最大长度；所谓交接处长度（斜接长度）是指线条交接处内角顶点到外角顶点的长度</li>\n</ul>\n<p>设置虚线时，<code>setLineDash(segments)</code>设置当前虚线样式。<code>lineDashOffset = value</code>设置虚线样式的起始偏移量。<code>getLineDash()</code>返回一个包含当前虚线样式，长度为非负偶数的数组。</p>\n<p><strong>渐变</strong></p>\n<p>渐变需要先指定类型和覆盖范围：</p>\n<ul>\n<li><code>createLinearGradient(x1, y1, x2, y2)</code> 方法接受4个参数，表示渐变的起点 (x1,y1) 与终点 (x2,y2)。</li>\n<li><code>createRadialGradient(x1, y1, r1, x2, y2, r2)</code> 方法接受6个参数，前三个定义一个以 (x1,y1) 为原点，半径为r1的圆，后三个参数则定义另一个以 (x2,y2) 为原点，半径为r2的圆。</li>\n</ul>\n<p>创建的渐变通过<code>addColorStop(position, color)</code>添加多个color stop。position参数是一个0.0与1.0之间的数值，表示渐变中颜色所在的相对位置。<strong>渐变是一种样式，通过指定给fillStyle或是strokeStyle发挥作用</strong>。</p>\n<p><strong>模式</strong></p>\n<p>通过<code>createPattern(image, type)</code>创建pattern，Image可以是一个Image对象的引用，或者另一个canvas对象。Type描述重复的格式，是下面的字符串值之一：repeat，repeat-x，repeat-y 和 no-repeat。</p>\n<p>同样，通过指定给<code>fillStyle</code>和<code>strokeStyle</code>使用。</p>\n<p><strong>阴影</strong></p>\n<ul>\n<li>shadowOffsetX &#x3D; float</li>\n<li>shadowOffsetY &#x3D; float<br>shadowOffsetX和shadowOffsetY用来设定阴影在X和Y轴的延伸距离，它们是不受变换矩阵所影响的。负值表示阴影会往上或左延伸，正值则表示会往下或右延伸，它们默认都为0。</li>\n<li>shadowBlur &#x3D; float shadowBlur 用于设定阴影的模糊程度，默认为 0。</li>\n<li>shadowColor &#x3D; color，默认为黑色</li>\n</ul>\n<p>canvas有两种填充规则<a href=\"https://en.wikipedia.org/wiki/Nonzero-rule\"><code>non-zero</code></a>和<code>even-odd</code>，默认为前者。</p>\n<h2 id=\"文字\"><a href=\"#文字\" class=\"headerlink\" title=\"文字\"></a>文字</h2><ul>\n<li><code>fillText(text, x, y [, maxWidth])</code> 在指定的(x,y)位置填充指定的文本，绘制的最大宽度是可选的</li>\n<li><code>strokeText(text, x, y [, maxWidth])</code> 在指定的(x,y)位置绘制文本边框，绘制的最大宽度是可选的</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.<span class=\"property\">font</span> = <span class=\"string\">&quot;48px PingFangSC&quot;</span>;</span><br><span class=\"line\">ctx.<span class=\"title function_\">strokeText</span>(<span class=\"string\">&quot;Hello world&quot;</span>, <span class=\"number\">10</span>, <span class=\"number\">50</span>);</span><br></pre></td></tr></table></figure>\n\n<p>除了<code>font</code>（语法和CSS的font相同）外，还有下面的选择：</p>\n<ul>\n<li>textAlign &#x3D; value 文本对齐选项. 可选的值包括：start, end, left, right or center. 默认值是 start。</li>\n<li>textBaseline &#x3D; value 基线对齐选项. 可选的值包括：top, hanging, middle, alphabetic, ideographic, bottom。默认值是 alphabetic。</li>\n<li>direction &#x3D; value 文本方向</li>\n</ul>\n<p>另外，可以通过<code>measureText()</code>，得到文本绘制的宽度。</p>\n<h2 id=\"使用图片\"><a href=\"#使用图片\" class=\"headerlink\" title=\"使用图片\"></a>使用图片</h2><p>canvas里可以引入Image对象或其他canvas元素，或者通过URL方式使用图片。</p>\n<ul>\n<li>使用相同页面内的图片，使用正常地获取元素的方式获取即可</li>\n<li>使用其它域名下的图片，在HTMLImageElement上使用<code>crossOrigin</code>属性，可以请求加载其它域名上的图片。若服务器不允许跨域加载，则会污染canvas，即不能导出数据</li>\n<li>使用canvas，按获取元素的方式获取即可</li>\n</ul>\n<p>image可以指定<code>src</code>属性为URL或<code>data:url</code>的形式。甚至引入<code>&lt;video&gt;</code>使用视频帧作为image。绘制图片时，使用：</p>\n<ul>\n<li><code>drawImage(image, x, y)</code> 其中image是image或者canvas对象，x和y是其在目标canvas里的起始坐标。</li>\n<li><code>drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight)</code>是包含了缩放和切片后完整的<code>drawImage</code>用法</li>\n</ul>\n<h2 id=\"变形和裁剪\"><a href=\"#变形和裁剪\" class=\"headerlink\" title=\"变形和裁剪\"></a>变形和裁剪</h2><p><strong>save</strong>和<strong>restore</strong>用来保存和恢复canvas状态。每当<code>save()</code>方法被调用后，当前的状态就被推送到栈中保存。状态包括所有变形、样式信息。每次<code>restore</code>时会弹出栈顶的状态。<strong>建议在做变形和裁剪前保存状态</strong>。</p>\n<p>变形用到的属性和CSS很像：</p>\n<ul>\n<li><code>translate(x,y)</code>改变当前原点位置，</li>\n<li><code>rotate(angle)</code>以当前原点为圆心旋转画布，angle为弧度值。</li>\n<li><code>scale(x, y)</code>缩放当前canvas中的图形大小，x和y分别表示两轴上的缩放因子</li>\n<li><code>transform(m11, m12, m21, m22, dx, dy)</code>通过变形矩阵进行变换</li>\n<li><code>setTransform(m11, m12, m21, m22, dx, dy)</code>先还原为单位矩阵，再按入参的矩阵变换</li>\n<li><code>resetTransform</code>重置变形为单位矩阵</li>\n</ul>\n<p><code>globalCompositeOperation</code>定义了图形相互重叠时的处理策略，类似PS中图层的混合模式，默认为<code>darker</code>，还有很多<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation\">别的选项</a>。</p>\n<p><code>clip()</code>即裁剪方法，和<code>fill</code>以及<code>stroke</code>类似，不过<code>clip</code>将路径对应的部分裁剪出指定区域。</p>\n<h2 id=\"动画\"><a href=\"#动画\" class=\"headerlink\" title=\"动画\"></a>动画</h2><p>canvas只是一个画布，画出的东西都会保持原样。制作动画只能采取重绘，逐帧绘制，而每一帧包括下面几步：</p>\n<ul>\n<li>清空canvas，可以使用<code>clearRect</code>方法</li>\n<li><em>可选</em>，保存当前状态</li>\n<li>使用上面提过的种种方法绘制下一帧</li>\n<li><em>可选</em>，恢复状态</li>\n</ul>\n<p>绘制动画通常要结合用户交互以及<code>setTimeout</code>，<code>setInterval</code>，<code>requestAnimationFrame</code>。</p>\n<p>MDN给个一个<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial/Advanced_animations\">小球的组合动画</a>可以参考。</p>\n<h2 id=\"像素级操作\"><a href=\"#像素级操作\" class=\"headerlink\" title=\"像素级操作\"></a>像素级操作</h2><p><code>ImageData</code>接口描述<code>&lt;canvas&gt;</code>元素的一个包含像素数据的区域。它包含<code>width</code>, <code>height</code>, <code>data</code>单个只读属性。<code>ImageData</code>可以通过<code>ctx.createImageData(width, height)</code>或者从已有对象中创建，除此创建的所有像素都是透明黑。</p>\n<p>可以用<code>getImageData(left, top, width, height)</code>方法获取指定范围的<code>ImageData</code>信息，当<code>width</code>和<code>height</code>都为1时，取得当前像素信息。</p>\n<p>使用<code>putImageData(imageData, dx, dy)</code>可以在当前画布(dx, dy)处绘制imageData像素数据。<code>imageSmoothingEnabled</code>默认开启，关闭后可以在图片缩放时看到清楚颗粒化的细节。</p>\n<h2 id=\"导出\"><a href=\"#导出\" class=\"headerlink\" title=\"导出\"></a>导出</h2><p>主要有三种用法：</p>\n<ul>\n<li><code>canvas.toDataURL(&#39;image/png&#39;)</code>，默认将canvas导出成png文件</li>\n<li><code>canvas.toDataURL(&#39;image/jpeg&#39;, quality)</code>，quality指定在0到1之间，默认为0.92。</li>\n<li><code>canvas.toBlob(callback, type, encoderOptions)</code>，这个创建了一个在画布中的代表图片的Blob对像</li>\n</ul>\n<p><code>toDataURL</code>除了上面两种导出格式还有别的选择。</p>\n<h2 id=\"交互\"><a href=\"#交互\" class=\"headerlink\" title=\"交互\"></a>交互</h2><p><code>&lt;canvas&gt;</code>标签只是一个位图，它并不提供任何已经绘制在上面的对象的信息。canvas的内容不能像语义化的HTML一样暴露给一些协助工具。一般来说，你应该避免在交互型的网站或者App上使用canvas。</p>\n<p><code>addHitRegion(options)</code>可以将添加一个点击区域，options可以参考<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/addHitRegion\">MDN文档</a>，鼠标事件如果触发在点击区域中，会带上region用于定位点击区域。</p>\n<p>另外<code>drawFocusIfNeeded()</code>和<code>scrollPathIntoView()</code>方法还可以绘制焦点圈。</p>\n<h2 id=\"性能问题\"><a href=\"#性能问题\" class=\"headerlink\" title=\"性能问题\"></a>性能问题</h2><ul>\n<li>预渲染相似或重复对象</li>\n<li>为了避免抗锯齿带来的额外运算，减少使用浮点数</li>\n<li>在离屏canvas中缓存图片的不同尺寸，不要用<code>drawImage()</code>去缩放它们</li>\n<li>使用多层画布去画一个复杂的场景，比如使用多层画布，描绘不同层级的内容。  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=<span class=\"string\">&quot;stage&quot;</span>&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;ui-layer&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;480&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;320&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;game-layer&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;480&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;320&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">canvas</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;background-layer&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;480&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;320&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">canvas</span>&gt;</span></span></span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li>\n<li>用CSS画大的背景图</li>\n<li>用CSS transforms特性缩放画布，建议不要将小画布放大，而是去将大画布缩小</li>\n<li>尽可能避免text rendering</li>\n<li>尽可能避免 shadowBlur</li>\n<li><code>window.requestAnimationFrame()</code>性能优于<code>window.setInterval()</code></li>\n</ul>\n",
            "tags": [
                "canvas",
                "绘图",
                "动画"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2018/04/25/webrtc-practice/",
            "url": "http://shenlvmeng.github.com/blog/2018/04/25/webrtc-practice/",
            "title": "webrtc学习笔记",
            "date_published": "2018-04-25T15:09:06.000Z",
            "content_html": "<blockquote>\n<p>必读：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/WebRTC_API\">WebRTC API - Web API接口 | MDN</a><br>必读：<a href=\"https://blog.coding.net/blog/getting-started-with-webrtc\">WebRTC的前世今生</a></p>\n</blockquote>\n<p>Web端用户视频推流使用webRTC方案，使用已有JS SDK（和<a href=\"https://docs.agora.io/cn/2.1/product/Video/API%20Reference/communication_web_video?platform=Web\">这个</a>兼容）。</p>\n<p>WebRTC由Google主推，全称Web Browser Real Time Communication。目标是希望在Web端进行点对点音视频通信。</p>\n<p>整个P2P过程很复杂，但是对于浏览器而言，WebRTC实际上只是提供了三个API：</p>\n<ul>\n<li><strong>MediaStream</strong>, 即getUserMedia（<code>navigator.getUserMedia</code>），获取媒体数据，如来自用户摄像头和麦克风的音视频流</li>\n<li><strong>RTCPeerConnection</strong>，用于peer跟peer之间呼叫和建立连接以便传输音视频数据流；这个不同浏览器的实现不同，官网推荐使用<code>adapter.js</code>进行适配</li>\n<li><strong>RTCDataChannel</strong>，用于peer跟peer之间传输音视频之外的一般数据。</li>\n</ul>\n<h2 id=\"MediaStream\"><a href=\"#MediaStream\" class=\"headerlink\" title=\"MediaStream\"></a>MediaStream</h2><p>参考<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/MediaStream\">MDN</a>。来自<code>navigator.getUserMedia()</code>，这个方法接收三个参数：</p>\n<ul>\n<li>一个约束对象，如<code>&#123; audio: false, video: true &#125;</code>，除了这两种，其他外设也可以作为输入</li>\n<li>一个成功回调</li>\n<li>一个失败回调</li>\n</ul>\n<p>返回的MediaStream对象有<code>addTrack</code>, <code>getAudioTracks</code>, <code>getVideoTracks</code>等方法。通过这些方法取出的MediaStreamTrack数组代表对应类型的流，可以把取出的这些流导入到<code>&lt;video&gt;</code>等标签输出。在Chrome或Opera中，<code>URL.createObjectURL()</code>方法可以转换一个MediaStream到一个Blob URL，可以被设置作为视频的源。除了这种方法，还可以使用<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/AudioContext\"><code>AudioContext</code></a>API，对音频做处理后输出。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">gotStream</span>(<span class=\"params\">stream</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"property\">AudioContext</span> = <span class=\"variable language_\">window</span>.<span class=\"property\">AudioContext</span> || <span class=\"variable language_\">window</span>.<span class=\"property\">webkitAudioContext</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> audioContext = <span class=\"keyword\">new</span> <span class=\"title class_\">AudioContext</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Create an AudioNode from the stream</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> mediaStreamSource = audioContext.<span class=\"title function_\">createMediaStreamSource</span>(stream);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Connect it to destination to hear yourself</span></span><br><span class=\"line\">    <span class=\"comment\">// or any other node for processing!</span></span><br><span class=\"line\">    mediaStreamSource.<span class=\"title function_\">connect</span>(audioContext.<span class=\"property\">destination</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">navigator.<span class=\"title function_\">getUserMedia</span>(&#123;<span class=\"attr\">audio</span>:<span class=\"literal\">true</span>&#125;, gotStream);</span><br></pre></td></tr></table></figure>\n\n<p>使用HTTPS请求<code>getUserMedia</code>会向用户给出一次提示。不建议在HTTP环境下使用。</p>\n<p><a href=\"https://webrtc.github.io/samples/src/content/getusermedia/gum/\">这里</a>是一个demo，打开console，查看全局变量stream就明白MediaStream结构了。</p>\n<p>约束对象中可以商议视频分辨率等信息。它会影响获取到的视频流。</p>\n<h2 id=\"RTCPeerConnection\"><a href=\"#RTCPeerConnection\" class=\"headerlink\" title=\"RTCPeerConnection\"></a>RTCPeerConnection</h2><p>WebRTC使用RTCPeerConnection在浏览器间传递数据流，但在之前需要有一个交换信令的过程。这个过程不在WebRTC中定义，开发者可以使用任何想用的消息协议，比如WebSocket或XHR轮询什么的。信令过程需要传递三种信息：</p>\n<ul>\n<li>连接控制信息：初始化或者关闭连接报告错误。</li>\n<li>网络配置：对于外网，我们电脑的 IP 地址和端口？</li>\n<li>多媒体数据：使用什么编码解码器，浏览器可以处理什么信息</li>\n</ul>\n<p>点对点的连接需要ICE（Interactive Connectivity Establishment）的帮助，ICE靠STUN和TURN服务器处理NAT穿透等复杂问题。起初连接建立在UDP之上，STUN服务器让位于NAT中的client获知自己的公网IP和端口。如果UDP建立失败，考虑TCP连接，再考虑HTTP和HTTPS连接。否则使用TURN服务器做中转工作。</p>\n<p>W3C给了RTCPeerConnection的样例，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> signalingChannel = <span class=\"keyword\">new</span> <span class=\"title class_\">SignalingChannel</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> configuration = &#123; <span class=\"string\">&quot;iceServers&quot;</span>: [&#123; <span class=\"string\">&quot;url&quot;</span>: <span class=\"string\">&quot;stun:stun.example.org&quot;</span> &#125;] &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> pc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用start()建立连接</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">start</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  pc = <span class=\"keyword\">new</span> <span class=\"title class_\">RTCPeerConnection</span>(configuration);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 有任何 ICE candidates 可用，</span></span><br><span class=\"line\">  <span class=\"comment\">// 通过signalingChannel传递candidate给对方</span></span><br><span class=\"line\">  pc.<span class=\"property\">onicecandidate</span> = <span class=\"keyword\">function</span> (<span class=\"params\">evt</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (evt.<span class=\"property\">candidate</span>)</span><br><span class=\"line\">      signalingChannel.<span class=\"title function_\">send</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(&#123; <span class=\"string\">&quot;candidate&quot;</span>: evt.<span class=\"property\">candidate</span> &#125;));</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// let the &quot;negotiationneeded&quot; event trigger offer generation</span></span><br><span class=\"line\">  pc.<span class=\"property\">onnegotiationneeded</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    pc.<span class=\"title function_\">createOffer</span>(localDescCreated, logError);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 远端流到达时，在remoteView中做展示</span></span><br><span class=\"line\">  pc.<span class=\"property\">onaddstream</span> = <span class=\"keyword\">function</span> (<span class=\"params\">evt</span>) &#123;</span><br><span class=\"line\">    remoteView.<span class=\"property\">src</span> = <span class=\"variable constant_\">URL</span>.<span class=\"title function_\">createObjectURL</span>(evt.<span class=\"property\">stream</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 获取本地流，展示并传递</span></span><br><span class=\"line\">  navigator.<span class=\"title function_\">getUserMedia</span>(&#123; <span class=\"string\">&quot;audio&quot;</span>: <span class=\"literal\">true</span>, <span class=\"string\">&quot;video&quot;</span>: <span class=\"literal\">true</span> &#125;, <span class=\"keyword\">function</span> (<span class=\"params\">stream</span>) &#123;</span><br><span class=\"line\">    selfView.<span class=\"property\">src</span> = <span class=\"variable constant_\">URL</span>.<span class=\"title function_\">createObjectURL</span>(stream);</span><br><span class=\"line\">    pc.<span class=\"title function_\">addStream</span>(stream);</span><br><span class=\"line\">  &#125;, logError);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">localDescCreated</span>(<span class=\"params\">desc</span>) &#123;</span><br><span class=\"line\">  pc.<span class=\"title function_\">setLocalDescription</span>(desc, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    signalingChannel.<span class=\"title function_\">send</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(&#123; <span class=\"string\">&quot;sdp&quot;</span>: pc.<span class=\"property\">localDescription</span> &#125;));</span><br><span class=\"line\">  &#125;, logError);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">signalingChannel.<span class=\"property\">onmessage</span> = <span class=\"keyword\">function</span> (<span class=\"params\">evt</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!pc)</span><br><span class=\"line\">    <span class=\"title function_\">start</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> message = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(evt.<span class=\"property\">data</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (message.<span class=\"property\">sdp</span>) &#123;</span><br><span class=\"line\">    pc.<span class=\"title function_\">setRemoteDescription</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">RTCSessionDescription</span>(message.<span class=\"property\">sdp</span>), <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 接收到offer时，回应一个answer</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (pc.<span class=\"property\">remoteDescription</span>.<span class=\"property\">type</span> == <span class=\"string\">&quot;offer&quot;</span>)</span><br><span class=\"line\">        pc.<span class=\"title function_\">createAnswer</span>(localDescCreated, logError);</span><br><span class=\"line\">    &#125;, logError);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 接收对方candidate并加入自己的RTCPeerConnection</span></span><br><span class=\"line\">    pc.<span class=\"title function_\">addIceCandidate</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">RTCIceCandidate</span>(message.<span class=\"property\">candidate</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">logError</span>(<span class=\"params\">error</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">log</span>(error.<span class=\"property\">name</span> + <span class=\"string\">&quot;: &quot;</span> + error.<span class=\"property\">message</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在开始建立连接时，调用<code>start()</code>，创建<code>RTCPeerConnection</code>对象，接着完成下面步骤：</p>\n<ul>\n<li><strong>交换网络信息</strong>，<code>onicecandidate</code>回调在有任何candidate出现时，将通过SignalChannel（使用额外方法创建，如WebSocket）传递给对方。同样地，在通过SignalChannel接收到对方发来的该信息时，加入这个candidate到RTCPeerConnection中。</li>\n<li><strong>交换多媒体信息</strong>，使用SDP（Session Description Protocol）与对端交换多媒体资讯，在<code>onnegotiationneeded</code>中，调用<code>createOffer</code>通过<code>setLocalDescription</code>创建<code>RTCSessionDecription</code>对象进行本地存储，并传给对方。接收方通过<code>setRemoteDescription</code>方法设定remote description。</li>\n</ul>\n<p>上述过程称为JavaScript Session Establishment Protocol（JSEP）。一旦这个signaling完成了，数据可以直接的在端到端之间进行数据传输。如果失败了，通过中介服务器relay服务进行转发。</p>\n<p>通常RTCPeerConnection的API太复杂，所以有很多在此基础上的库封装出了更加友善的API。</p>\n<h2 id=\"JS-SDK接入流程\"><a href=\"#JS-SDK接入流程\" class=\"headerlink\" title=\"JS-SDK接入流程\"></a>JS-SDK接入流程</h2><blockquote>\n<p>参考：<a href=\"https://docs.agora.io/cn/2.1/product/Video/API%20Reference/communication_web_video?platform=Web\">Agora：视频通话API</a></p>\n</blockquote>\n<ol>\n<li>准备工作，包括界面绘制等</li>\n<li>向远端注册当前用户，获取token，为后面做准备</li>\n<li>使用<code>createClient()</code>方法创建客户端</li>\n<li>指定回调，包括已订阅流、已添加流、移除、失败等生命周期事件的回调</li>\n<li>初始化客户端，传入appId和成功回调</li>\n<li>初始化成功后，调用join方法根据获取到的token加入指定房间（原理是WebRTC的stream有id）</li>\n<li>指定配置创建本地流（getUserMedia），发布本地流，播放本地流</li>\n</ol>\n<h2 id=\"RTMP相关\"><a href=\"#RTMP相关\" class=\"headerlink\" title=\"RTMP相关\"></a>RTMP相关</h2><blockquote>\n<p>必读：<a href=\"https://www.villainhr.com/page/2017/08/05/RTMP%20H5%20%E7%9B%B4%E6%92%AD%E6%B5%81%E6%8A%80%E6%9C%AF%E8%A7%A3%E6%9E%90\">RTMP H5 直播流技术解析</a></p>\n</blockquote>\n<p>一次RTMP握手的模拟。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 握手协议模拟</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">C</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">time, random</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">time</span> = time || <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">random</span> = random || <span class=\"title class_\">Buffer</span>.<span class=\"title function_\">alloc</span>(<span class=\"number\">0</span>); <span class=\"comment\">// Buffer类型</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">get</span> <span class=\"title function_\">C0</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> buf = <span class=\"title class_\">Buffer</span>.<span class=\"title function_\">alloc</span>(<span class=\"number\">1</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> buf;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">get</span> <span class=\"title function_\">C1</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> buf = <span class=\"title class_\">Buffer</span>.<span class=\"title function_\">alloc</span>(<span class=\"number\">1536</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> buf;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * write C2</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">get</span> <span class=\"title function_\">C2</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> buf = <span class=\"title class_\">Buffer</span>.<span class=\"title function_\">alloc</span>(<span class=\"number\">1536</span>);</span><br><span class=\"line\">        buf.<span class=\"title function_\">writeUInt32BE</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">time</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">random</span>.<span class=\"title function_\">copy</span>(buf, <span class=\"number\">8</span>, <span class=\"number\">0</span>, <span class=\"number\">1528</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 客户端</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> client = <span class=\"keyword\">new</span> net.<span class=\"title function_\">socket</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">RTMP_C</span> = <span class=\"keyword\">new</span> <span class=\"title function_\">C</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">client.<span class=\"title function_\">connect</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">port</span>: <span class=\"number\">1935</span>,</span><br><span class=\"line\">    <span class=\"attr\">host</span>: <span class=\"string\">&#x27;example.live.com&#x27;</span>,</span><br><span class=\"line\">    <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;connected&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">client.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;data&#x27;</span>, <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!data) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">warn</span>(<span class=\"string\">&#x27;Empty Buffer.&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable constant_\">RTMP_C</span>.<span class=\"property\">S0</span> &amp;&amp; data.<span class=\"property\">length</span> &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable constant_\">RTMP_C</span>.<span class=\"property\">S0</span> = data.<span class=\"title function_\">readUInt8</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        data = data.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable constant_\">RTMP_C</span>.<span class=\"property\">S1</span> &amp;&amp; data.<span class=\"property\">length</span> &gt;= <span class=\"number\">1536</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable constant_\">RTMP_C</span>.<span class=\"property\">time</span> = data.<span class=\"title function_\">readUInt32BE</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"variable constant_\">RTMP_C</span>.<span class=\"property\">random</span> = data.<span class=\"title function_\">slice</span>(<span class=\"number\">8</span>, <span class=\"number\">1536</span>);</span><br><span class=\"line\">        <span class=\"variable constant_\">RTMP_C</span>.<span class=\"property\">S1</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        data = data.<span class=\"title function_\">slice</span>(<span class=\"number\">1536</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;send C2&#x27;</span>);</span><br><span class=\"line\">        client.<span class=\"title function_\">write</span>(<span class=\"variable constant_\">RTMP_C</span>.<span class=\"property\">C2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable constant_\">RTMP_C</span>.<span class=\"property\">S2</span> &amp;&amp; data.<span class=\"property\">length</span> &gt;= <span class=\"number\">1536</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable constant_\">RTMP_C</span>.<span class=\"property\">S2</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        data = data.<span class=\"title function_\">slice</span>(<span class=\"number\">1536</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "webrtc",
                "RTMP"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2018/01/22/design-pattern-note/",
            "url": "http://shenlvmeng.github.com/blog/2018/01/22/design-pattern-note/",
            "title": "设计模式学习",
            "date_published": "2018-01-22T09:28:45.000Z",
            "content_html": "<blockquote>\n<p>全文参考<a href=\"https://book.douban.com/subject/4260618/\">《设计模式之禅》</a>，<a href=\"https://book.douban.com/subject/1400656/\">Head First Design Pattern</a>这本也不错。</p>\n</blockquote>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p>JavaScript学久了，在看设计原则时，顺带温习了下OOP中的一些传统概念。</p>\n<p><strong>类图</strong></p>\n<ul>\n<li><code>一&gt;</code>: 关联，类定义中的相互引用，通常使用类的属性表达。 比如客户类和订单类</li>\n<li><code>--&gt;</code>: 依赖，最弱的关系，对象间的临时关联，用函数参数、局部变量、返回值等表达</li>\n<li><code>一▷</code>: 继承</li>\n<li><code>--▷</code>: 实现</li>\n<li><code>一◇</code>: has-a关系，表示整体与局部，但不稳定。比如公司类和雇员类</li>\n<li><code>一◆</code>: contains-a关系，表示整体与局部，部分不能脱离整体而存在。</li>\n</ul>\n<p><strong>override和overload</strong></p>\n<table>\n<thead>\n<tr>\n<th>区别</th>\n<th>覆写</th>\n<th>重载</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>单词</td>\n<td>OverLoading</td>\n<td>Override</td>\n</tr>\n<tr>\n<td>概念</td>\n<td>方法名称相同，参数的类型或个数不同</td>\n<td>方法名称相同，参数的类型或个数相同，返回值类型相同</td>\n</tr>\n<tr>\n<td>范围</td>\n<td>发生在一个类之中</td>\n<td>发生在类的继承关系中</td>\n</tr>\n<tr>\n<td>权限</td>\n<td>一个类中所重载多个方法可以不同的权限</td>\n<td>被子类所覆写的方法不能拥有比父类更严格的访问控制权限</td>\n</tr>\n</tbody></table>\n<p><strong>接口和抽象类的不同</strong></p>\n<p>两者都为“面向契约编程”而存在。总体来说，接口是对能力的抽象，抽象类是对事物的抽象。从而有着下面的不同：</p>\n<ul>\n<li>接口被类实现，抽象类被子类继承。</li>\n<li>接口只做方法声明，抽象类中可以做方法声明，也可以做方法实现。</li>\n<li>接口里定义的变量只能是公共静态常量，抽象类中的变量可以是普通变量。</li>\n<li>抽象类里可以没有抽象方法，接口是设计的结果，抽象类是重构的结果。</li>\n<li>Java中接口可继承接口，并可多继承接口，但类只能单继承。</li>\n</ul>\n<p>它们还有以下特点：</p>\n<ul>\n<li>在实现时必须全部实现，否则仍是接口&#x2F;抽象类</li>\n<li>抽象类中可以没有抽象方法</li>\n</ul>\n<h2 id=\"设计6原则\"><a href=\"#设计6原则\" class=\"headerlink\" title=\"设计6原则\"></a>设计6原则</h2><p>SOLID原则：</p>\n<ul>\n<li>单一职责（接口细分到单一业务）</li>\n<li>里氏替换（实现都按接口来）</li>\n<li>依赖倒置（多使用抽象概念）</li>\n<li>接口隔离原则（接口尽量细分）</li>\n<li>迪米特法则（低耦合）</li>\n<li>开闭原则（高内聚，低耦合）</li>\n</ul>\n<p>总结来说，就是<strong>好好设计、合理拆分接口，一旦确定，避免更改；减少接口耦合；面向接口编程；使用中间层应对需求变更</strong>。</p>\n<h2 id=\"常见设计模式\"><a href=\"#常见设计模式\" class=\"headerlink\" title=\"常见设计模式\"></a>常见设计模式</h2><h3 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h3><p>单例模式是最简单的设计模式。即一个类只有一个实例，或一个构造函数只能初始化一次（JS版本），且<strong>自行实例化</strong>，并像整个系统提供整个实例。常用在下面这些场景下，解决特定的问题：</p>\n<ul>\n<li>整个项目需要一个<strong>共享</strong>访问点或共享数据</li>\n<li>包含了大量静态常量（通常是配置数据）和静态方法的<strong>工具类</strong></li>\n<li>创建一个对象需要消耗的资源过多</li>\n</ul>\n<p>实现上，分懒汉型和饿汉型。它们的主要区别在初始化单一实例的时机在类创建时还是访问时。懒汉型需要注意<strong>线程安全</strong>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 饿汉型</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Singleton</span> <span class=\"variable\">singleton</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 限制外部访问</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 暴露的public方法</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> singleton;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 其他方法</span></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 懒汉型</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">Singleton</span> <span class=\"variable\">singleton</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 限制外部访问</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 暴露的public方法</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> sychronized Singleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (singleton == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      singleton = <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> singleton;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>JavaScript中就灵活多了。最常用的字面量变量就是最简单的单例，强行使用构造函数，也可以借助闭包的特点实现。另外，JavaScript是单线程，不需要考虑线程安全的问题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 字面量变量</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> singleton = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 一些属性</span></span><br><span class=\"line\">  <span class=\"attr\">foo</span>: <span class=\"string\">&#x27;bar&#x27;</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 一些方法</span></span><br><span class=\"line\">  <span class=\"title function_\">baz</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Hello world!&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 闭包</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Singleton</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> singleton = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">foo</span> = <span class=\"string\">&#x27;bar&#x27;</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">baz</span> = <span class=\"function\">() =&gt;</span> &#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Hello world!&#x27;</span>); &#125;;</span><br><span class=\"line\">  <span class=\"title class_\">Singleton</span> = <span class=\"function\">() =&gt;</span> singleton;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h4><p>当放开单例限制，编程多例模式时，可以通过加入计数器来限制。但不常用，下面给出JavaScript版本例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Singleton</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> singleton = <span class=\"variable language_\">this</span> = [];</span><br><span class=\"line\">  <span class=\"comment\">// 比如限制为3</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> limit = <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 一些初始化工作</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; limit; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    [].<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title class_\">Singleton</span> = <span class=\"function\">() =&gt;</span> singleton;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h3><p>工厂模式意思是，将创建对象的过程封装起来，在OOP语言中体现在定义一个创建一类对象的接口，让实例化过程在子类中完成。浅显的来讲，就是让工厂类将具有共性、创建过程复杂的一类对象的创建过程封装起来，便于业务类使用，同时也便于日后拓展。业务类只需要交给工厂类需要的对象类名（Java）或别的标志就可以得到所需对象。</p>\n<p>使用场景上，它是new模式的替代品，在任何需要对象的场景下都可以使用，但是只有下面这些情况下是比较合适的：</p>\n<ul>\n<li>需要灵活解耦的框架</li>\n<li>产品类创建过程复杂、有差异性且有共性。比如连接邮箱客户端的三种协议POP3、IMAP、HTTP的构造过程抽象成一个<code>IConnectMail</code>接口，再设计各自的工厂类。在日后有新的连接邮箱客户端协议时，只需新增一个工厂类即可。</li>\n</ul>\n<p>Java中工厂类可以使用反射等方法创建新对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 产品类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">abstractProduct</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 共有方法</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\">// 抽象方法</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">abstractMethod</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">product1</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">abstractProduct</span>() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">abstractMethod</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 差异化方法</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">product2</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">abstractProduct</span>() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">abstractMethod</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 差异化方法</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Factory</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 入参根据场景调整</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> &lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">abstractProduct</span>&gt; T <span class=\"title function_\">createProduct</span><span class=\"params\">(Class&lt;T&gt; c)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Factory1</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Factory</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> &lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">Product</span>&gt; T <span class=\"title function_\">createProduct</span><span class=\"params\">(Class&lt;T&gt; c)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Product</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      p = (Product)Class.forName(c.getName()).newInstance();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>JavaScript中，工厂模式的实现更加轻量级，因为构造对象的方式更加简单，使用函数将多个产品类间的共性抽出来就行了。样例略。</p>\n<h3 id=\"抽象工厂模式\"><a href=\"#抽象工厂模式\" class=\"headerlink\" title=\"抽象工厂模式\"></a>抽象工厂模式</h3><p>抽象模式在工厂模式的基础上又抽象了一层，产品类接口下是多个<strong>产品族</strong>抽象类，产品族下才是明确的产品类。相对应的，工厂接口下的多个工厂方法根据最细节的产品类生产对象。它的优势在：</p>\n<ul>\n<li>可以不公开地控制产品族间的约束</li>\n<li>更好地组织多维度（更多是2维）上多个产品间的生产</li>\n</ul>\n<p>缺点也很明显，产品族的修改将会直接影响工厂接口和产品抽象类，这是开闭原则的大忌。因此，在<strong>产品维度固定，且有必要从多维度上划分产品</strong>时，才会使用抽象工厂模式。比如Windows、Linux、Mac OS上的文本编辑器与图像处理程序就是两个维度的多个产品。</p>\n<p>样例略。</p>\n<h3 id=\"模板方法模式\"><a href=\"#模板方法模式\" class=\"headerlink\" title=\"模板方法模式\"></a>模板方法模式</h3><p>模板方法模式比较好理解，就是将子类中共有的<strong>算法框架</strong>抽象到抽象类中实现，注意是框架，而不是具体的步骤。子类可以根据自己的需要，在不改变框架的基础上，重定义算法的某些步骤，得到不同的结果。下面举个例子就能更方便地看明白了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> student = &#123;</span><br><span class=\"line\">  <span class=\"title function_\">study</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">gotoPrimarySchool</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">gotoMiddleSchool</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">gotoUniversity</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> stu1 = <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"title class_\">Student</span>), &#123;</span><br><span class=\"line\">  <span class=\"title function_\">gotoPrimarySchool</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;子弟学校 &quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">gotoMiddleSchool</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;人大附中 &quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">gotoUniversity</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;清华大学 &quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> stu2 = <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"title class_\">Student</span>), &#123;</span><br><span class=\"line\">  <span class=\"title function_\">gotoPrimarySchool</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;子弟学校 &quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">gotoMiddleSchool</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;华师一附中 &quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">gotoUniversity</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;中科大 &quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">stu1.<span class=\"title function_\">study</span>(); <span class=\"comment\">//子弟学校 人大附中 清华大学 </span></span><br><span class=\"line\">stu2.<span class=\"title function_\">study</span>(); <span class=\"comment\">//子弟学校 华师一附中 中科大 </span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到，同样是调用学习方法<code>study</code>，<code>stu1</code>和<code>stu2</code>可以再不影响公用算法流程下，定义自己的算法步骤。使用Java实现是一样的思路：</p>\n<ul>\n<li>定义抽象类，声明可以差异化的基本方法，实现模板方法，在模板方法中调用可以差异化的基本方法</li>\n<li>子类根据需要，实现自己的基本方法</li>\n</ul>\n<p>模板方法模式核心就在于<strong>封装不变部分，开放可变部分</strong>，共有的算法步骤也较容易维护。因此，使用在下面的场景里：</p>\n<ul>\n<li>子类共有相同算法流程</li>\n<li>将核心算法设计为模板方法，细节功能由子类补充</li>\n</ul>\n<h3 id=\"建造者模式\"><a href=\"#建造者模式\" class=\"headerlink\" title=\"建造者模式\"></a>建造者模式</h3><p>建造者模式和工厂模式类似，意思是，讲一个复杂对象的<strong>构建</strong>和<strong>表示</strong>分离，使同样的构建过程可以有不同的表示。其中的<strong>构建</strong>强调的是不同基本方法的调用顺序安排，而不是基本方法的实现（这也是它和工厂方法的最大区别）；<strong>表示</strong>是指产品子类对于基本方法的差异性实现。</p>\n<p>对比上面模板方法模式来看，就是<code>study</code>的顺序对于不同人不一样，这个顺序有另外的建造类描述并实现。可以看到，建造者模式主要的使用场景是：</p>\n<ul>\n<li>相同的执行方法，不同的执行顺序，产生不同的结果</li>\n<li>产品类中，不同的构建顺序会有不同的结果</li>\n<li>用户希望执行次序可控</li>\n</ul>\n<p>在实现时，建造类通过传入新状态或其他方式影响产品类的模板方式执行次序。在建造类和产品类之上，使用导演类可以起到封装的作用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 产品类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Product</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 差异化业务</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 抽象建造类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Builder</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 设置构建的次序，以获得不同的结果</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setSequence</span><span class=\"params\">()</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 建造</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Product <span class=\"title function_\">build</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 具体建造类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Builder1</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Builder</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">Product</span> <span class=\"variable\">product</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Product</span>();</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setSequence</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 差异化逻辑</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> Product <span class=\"title function_\">buildProduct</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> product;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 导演类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Director</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">Builder</span> <span class=\"variable\">builder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Builder1</span>();</span><br><span class=\"line\">  <span class=\"keyword\">public</span> Product <span class=\"title function_\">getProductA</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    builder.setSequence();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> builder.build();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h3><p>代理模式即为其他对象提供一个代理来控制对这个对象的访问，浅显易懂。利用代理模式还可以拦截原始请求，做额外的事情。应用很广泛。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Object</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 作为示例的一个方法</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">request</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RealObject</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Object</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">request</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 业务逻辑</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Object</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 代理的对象</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">Object</span> <span class=\"variable\">object</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">Proxy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.subject = <span class=\"keyword\">new</span> <span class=\"title class_\">Proxy</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 传递代理者</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">Proxy</span><span class=\"params\">(Object o)</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">request</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.before();</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.object.request();</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.after();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 预处理</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">before</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 善后处理</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">after</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>除了普通代理，还有强制代理即只能通过被代理对象对象访问到代理。另外，AOP（Aspect Oriented Progarmming）模式也是建立在代理模式的基础上的。ES6中的proxy和ES7中的装饰器就是AOP概念下的产物。</p>\n<h3 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h3><p>原型模式即不通过<code>new</code>而是通过对象复制生产同类对象。非常好理解。在Java中，一个实现了<code>cloneable</code>接口的对象即使用了原型模式。而JavaScript更是<a href=\"https://shenlvmeng.github.io/blog/2017/12/13/you-dont-know-js-part1/#%E5%8E%9F%E5%9E%8B%E7%BB%A7%E6%89%BF\">天生使用原型模式</a>实现对象的继承和拓展。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"keyword\">class</span> <span class=\"title class_\">PrototypeClass</span> implements <span class=\"title class_\">Cloneable</span> &#123;</span><br><span class=\"line\">  @<span class=\"title class_\">Override</span></span><br><span class=\"line\">  public <span class=\"title class_\">PrototypeClass</span> <span class=\"title function_\">clone</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">PrototypeClass</span> p = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      p = (<span class=\"title class_\">PrototypeClass</span>)<span class=\"variable language_\">super</span>.<span class=\"title function_\">clone</span>();</span><br><span class=\"line\">      <span class=\"comment\">// 其他操作</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(<span class=\"title class_\">CloneNotSupportedException</span> e) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>它的优势在于更加轻量级，避免了构造函数的约束。问题在于，第一会跳过构造函数（这个JavaScript没有），第二是深浅拷贝的问题，第三在Java中，clone带有final成员的类会抛出异常。</p>\n<h3 id=\"中介者模式\"><a href=\"#中介者模式\" class=\"headerlink\" title=\"中介者模式\"></a>中介者模式</h3><p>中介者模式主要用在多个对象那个间有比较复杂的交互场景下，用一个中介对象封装对象间的一系列交互，中介往往与各对象都有交互，从而使其耦合松散，符合迪米特法则。从类图上看，它把原先的蛛网状结构简化为了星型结构。</p>\n<p>它的优点是减少了类间依赖，缺点是有些时候中介者会膨胀的很大。使用场景上，在有协调概念出现的场景都有它的发挥空间：</p>\n<ul>\n<li>机场调度中心</li>\n<li>MVC框架中的Controller</li>\n<li>媒体网关，中介服务</li>\n</ul>\n<p>因为应用场景广泛，这里不举样例。</p>\n<h3 id=\"命令模式\"><a href=\"#命令模式\" class=\"headerlink\" title=\"命令模式\"></a>命令模式</h3><p>命令模式即将一个用对象组织每一个请求，从而允许使用请求完成一系列操作，同时还可以对请求排队或记录日志或<strong>撤销以及恢复</strong>。模式主要包括三个角色：</p>\n<ul>\n<li><strong>接受者</strong>，完成请求内操作的角色</li>\n<li><strong>命令</strong>，封装好的系列操作</li>\n<li><strong>调用者</strong>，接受、执行命令的角色</li>\n</ul>\n<p>这种设计模式在存在上面三种角色的场景很适用，易于封装常用的命令，且很容易拓展，当命令间共同点较多时，还可以结合模板方法模式进行改进。</p>\n<p>例子如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Receiver</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 定义所有接受者必须完成的业务</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">work</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Receiver1</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Receiver</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">work</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 差异化业务</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">otherWork1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Receiver2</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Receiver</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">work</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 差异化业务</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">otherWork2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Command</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">exec</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Command1</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Command</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 对特定接受者命令</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> Receiver receiver;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">Command1</span><span class=\"params\">(Receiver _receiver)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.receiver = _receiver;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">exec</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.receiver.work();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Command2</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Command</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 对特定接受者命令</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> Receiver receiver;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">Command2</span><span class=\"params\">(Receiver _receiver)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.receiver = _receiver;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">exec</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.receiver.work();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用者</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Invoker</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Command command;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setCommand</span><span class=\"params\">(Command _command)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.command = _command;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">react</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.command.exec();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"责任链模式\"><a href=\"#责任链模式\" class=\"headerlink\" title=\"责任链模式\"></a>责任链模式</h3><p>责任链模式重点在“链”，将有机会处理请求的所有对象组成链，沿着这条链传递请求直到有对象处理它为止。它和Express和Redux中的<strong>中间件</strong>的概念有相似之处，区别在于责任链上一般只会有一个或部分对象处理请求。它替换了场景代码中的大堆<code>if else</code>与<code>switch</code>语句。</p>\n<p>一个狭义的抽象处理者像下面这样。使用模板方法模式，将抽象的业务逻辑外的处理流程实现在抽象类，细节的业务逻辑放在子类里完成。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Handler</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 下一个处理者</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> Handler next;</span><br><span class=\"line\">  <span class=\"comment\">// 处理逻辑</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Response <span class=\"title function_\">handle</span><span class=\"params\">(Request req)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Response</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.getLevel().equals(req.getLevel())) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 只处理属于自己的level</span></span><br><span class=\"line\">      res = <span class=\"built_in\">this</span>.exec(req);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果有下一个处理者，交给它</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.next != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        res = <span class=\"built_in\">this</span>.next.handle(req);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 自行处理</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 设置下一个处理者</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setNext</span><span class=\"params\">(Handler _handler)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.next = _handler;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 处理者有自己的处理级别</span></span><br><span class=\"line\">  <span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> Level <span class=\"title function_\">getLevel</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 处理者有自己的处理逻辑</span></span><br><span class=\"line\">  <span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> Response <span class=\"title function_\">exec</span><span class=\"params\">(Request req)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子类示例</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> classHandler1 <span class=\"keyword\">extends</span> <span class=\"title class_\">Handler</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 自己的处理逻辑</span></span><br><span class=\"line\">  <span class=\"keyword\">protected</span> Response <span class=\"title function_\">exec</span><span class=\"params\">(Request req)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 自己的处理级别</span></span><br><span class=\"line\">  <span class=\"keyword\">protected</span> Level <span class=\"title function_\">getHandlerLevel</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Level</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 定义一个请求和处理等级</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Request</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取请求等级</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> Level <span class=\"title function_\">getRequestLevel</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Response</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 定义返回的数据</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>它的优点在解耦了请求与处理者，使系统更加灵活。问题在责任链比较长时，遍历整个责任链会带来性能问题。Express中类似的中间件则不会，因为处理后可以决定是否执行<code>next()</code>，跳到下一个中间件。</p>\n<p>上面Java的实现通过<code>next</code>属性连接所有的处理者（类似链表），在JavaScript的工程实现上，一般在上层又有一层封装，用数组保存所有处理者，再建立之间的连接。这种动态的连接支持动态增删处理者，甚至改变他们的处理顺序。</p>\n<h3 id=\"装饰模式\"><a href=\"#装饰模式\" class=\"headerlink\" title=\"装饰模式\"></a>装饰模式</h3><p>装饰模式也是一种比较常见的模式，它可以动态地为一个对象增加一些额外的功能，使用装饰器类返回对象比定义子类继承要来得更加灵活。在设计上，有下面几个角色：</p>\n<ul>\n<li>抽象构件，即被修饰的对象抽象</li>\n<li>具体构件，被修饰的客体</li>\n<li>装饰器，一般是一个抽象类，将具体装饰器的共性抽出来，<strong>其必有一个private属性指向原始的抽象构件</strong>。</li>\n<li>具体装饰器，装饰具体构件的原有方法，一般来说需要有所有与具体构件public方法同名的方法，<strong>且在方法内会使用到而非单纯替换原同名方法</strong>（类似滚雪球的过程）。</li>\n</ul>\n<p>它的使用类似下面：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 场景类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Scene</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Component</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Component</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 装饰</span></span><br><span class=\"line\">    c = <span class=\"keyword\">new</span> <span class=\"title class_\">Decorator1</span>(c);</span><br><span class=\"line\">    <span class=\"comment\">// 再次装饰</span></span><br><span class=\"line\">    c = <span class=\"keyword\">new</span> <span class=\"title class_\">Decorator2</span>(c);</span><br><span class=\"line\">    <span class=\"comment\">// 执行</span></span><br><span class=\"line\">    c.exec();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>JavaScript中的<code>Object.create()</code>和<code>Object.assign()</code>和装饰模式有几分相似。</p>\n<p>它的优势在于装饰类间不相互耦合，且装饰次序可以灵活修改，可以很好地重构、替换继承关系。劣势在于包装层次过多时，不利于调试时发现错误。装饰模式一般用于：</p>\n<ul>\n<li>动态增强一个类、对象的功能</li>\n<li>批量为一批对象或类改装或增加功能</li>\n</ul>\n<p>总之就是使用继承总感觉小题大做的场合下（OOP语言中）。JS下扩展功能要容易很多。</p>\n<h3 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h3><p>策略模式意为定义一组算法，将每个算法单独封装为可以相互替换的模块。在使用时，有三个主要角色：</p>\n<ul>\n<li>策略模块，被封装好的算法策略，屏蔽了高层逻辑对策略的直接访问（<strong>高内聚</strong>）</li>\n<li>抽象策略，抽出策略共性的接口，如下面的</li>\n<li>具体策略，具体的算法策略，包含具体的算法</li>\n</ul>\n<p>在算法间可以自由切换、最好屏蔽算法细节时常用，比如Web编程中常见的<strong>表格验证</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> strategy = &#123;</span><br><span class=\"line\">  <span class=\"attr\">notEmpty</span>: <span class=\"function\"><span class=\"params\">val</span> =&gt;</span> val.<span class=\"property\">length</span> &gt; <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"function\"><span class=\"params\">val</span> =&gt;</span> val.<span class=\"property\">length</span> &gt; <span class=\"number\">1</span> &amp;&amp; val.<span class=\"property\">length</span> &lt; <span class=\"number\">10</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"function\"><span class=\"params\">val</span> =&gt;</span> +val &gt; <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"attr\">password</span>: <span class=\"function\"><span class=\"params\">val</span> =&gt;</span> val.<span class=\"title function_\">match</span>(<span class=\"regexp\">/\\d+&#123;6,&#125;/g</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> validator = &#123;</span><br><span class=\"line\">  <span class=\"attr\">rules</span>: strategy,</span><br><span class=\"line\">  <span class=\"attr\">verify</span>: <span class=\"function\">(<span class=\"params\">rule, val</span>) =&gt;</span> <span class=\"variable language_\">this</span>.<span class=\"property\">rules</span>[rule](val)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">formValidate</span>(<span class=\"params\">formData</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; name, age, password, introduction &#125; = formData;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> validator.<span class=\"title function_\">verify</span>(<span class=\"string\">&#x27;name&#x27;</span>, name) &amp;&amp;</span><br><span class=\"line\">      validator.<span class=\"title function_\">verify</span>(<span class=\"string\">&#x27;age&#x27;</span>, age) &amp;&amp;</span><br><span class=\"line\">      validator.<span class=\"title function_\">verify</span>(<span class=\"string\">&#x27;password&#x27;</span>, password) &amp;&amp;</span><br><span class=\"line\">      validator.<span class=\"title function_\">verify</span>(<span class=\"string\">&#x27;notEmpty&#x27;</span>, introduction);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>策略模式的优势在扩展性良好，同时避免了<code>if else</code>以及<code>switch</code>语句。它的问题也很明显，策略类增多时，会不好维护，同时所有策略类都需要对外暴露。当策略类数目膨胀时需要考虑到这些问题。同时，现在在哪些时机如何组合策略并没有严格定义，实际实现时，会参考建造者模式里一样，定义一个<strong>导演类</strong>，把常用的组合方式定义出来。减少策略类的暴露。</p>\n<h3 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h3><p>适配器模式即，把一个类的接口变成客户端期待的另一个接口，从而使原先不匹配的两个类能够一起工作。简单点说，就是加了一个中间层做翻译工作。这种模式下有三种角色：</p>\n<ul>\n<li>目标角色，即期望接口</li>\n<li>源角色，即原始接口</li>\n<li>适配器角色，即转换类</li>\n</ul>\n<p>在实现上，通常使用一个同时继承两个类的类作为中转。因为对象很轻量级，JS中就更容易实现了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Target</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">request</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Target1</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Target</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">request</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 目标逻辑</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Adaptee</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 原有逻辑</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">foo</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Adapter</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Adaptee</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Target</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">request</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>.foo();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>它的优点在可以将两个不相关的类在一起运行，提高了类的复用程度，它通常用来救火，完成拓展。由于实际工程中，业务变更较常出现，适配器模式也很常用。</p>\n<h4 id=\"拓展-1\"><a href=\"#拓展-1\" class=\"headerlink\" title=\"拓展\"></a>拓展</h4><p>如需要多适配一的场景，此时无法多继承（Java），在适配类中引用多个类即可。</p>\n<h3 id=\"迭代器模式\"><a href=\"#迭代器模式\" class=\"headerlink\" title=\"迭代器模式\"></a>迭代器模式</h3><p>迭代器模式，顾名思义是提供一种方法按顺序访问容器中的每个元素，而<strong>无需暴露容器的细节</strong>。在实现时，通常要自己实现一个迭代器。Java中通过拓展<code>java.util.Iterator</code>实现，JavaScript中，则通过封装数组实现。实现时，要考虑下面几个方法：</p>\n<ul>\n<li>判断是否到达尾部</li>\n<li>返回下一个元素</li>\n<li>删除当前元素</li>\n</ul>\n<p>像下面这样</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 迭代器</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Iterator</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> Object <span class=\"title function_\">next</span><span class=\"params\">()</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasNext</span><span class=\"params\">()</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">remove</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 容器</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(Object o)</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">remove</span><span class=\"params\">(Object o)</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> Iterator <span class=\"title function_\">iterator</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在所有高级语言基本都有这个接口或基础实现。这个模式已经很少用到。</p>\n<h3 id=\"组合模式\"><a href=\"#组合模式\" class=\"headerlink\" title=\"组合模式\"></a>组合模式</h3><p>组合模式用在表示<strong>树状结构的数据</strong>中，使用户对单个对象和组合对象使用具有一致性。组合模式下有三种角色：</p>\n<ul>\n<li>Component，节点抽象角色，参与组合对象的共有方法和属性</li>\n<li>Leaf，叶子对象，遍历的最小单位</li>\n<li>Composite，树枝节点</li>\n</ul>\n<p>用JavaScript表示，就像下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> node = &#123;</span><br><span class=\"line\">  <span class=\"title function_\">commonMethod</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> branchNode = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(node);</span><br><span class=\"line\"><span class=\"keyword\">const</span> leafNode = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(node);</span><br><span class=\"line\"></span><br><span class=\"line\">branchNode = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(branch, &#123;</span><br><span class=\"line\">  <span class=\"attr\">children</span>: [],</span><br><span class=\"line\">  <span class=\"title function_\">add</span>(<span class=\"params\">node</span>) &#123;</span><br><span class=\"line\">    children.<span class=\"title function_\">push</span>(node);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">remove</span>(<span class=\"params\">index</span>) &#123;</span><br><span class=\"line\">    children.<span class=\"title function_\">splice</span>(index,<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">print</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    children.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">child</span> =&gt;</span> &#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(child); &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">leafNode = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(leafNode, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...重写node的同名方法</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>组合模式在表示整合局部的关系时很有用，但是由于树枝节点和叶子节点的使用方式不同，在使用两种节点时，需要直接调用接口的实现类，这一点违背了依赖导致原则（面向接口编程）。使用上分为透明模式和安全模式，后者就像上面一样，在实现类上区分开树枝和叶子节点，透明模式下，所有的方法均抽象到抽象类中实现，而在叶子节点调用不合法方法时抛出异常。</p>\n<p>综上来看，组合模式即使用用数据结构描述一颗多叉树。</p>\n<h3 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h3><p>观察者模式，也叫发布订阅模式，可以说是前端最熟悉也是最常见的一种设计模式了。小到页面事件监听，大到Vue的设计原理都能看到观察者模式的影子。它的内涵在将信息流从原来的<strong>pull变成push</strong>。从而不需要使用<code>while</code>，<code>setInterval</code>这种很消耗资源的方式。代价是，需要硬编码到被监听者中，在状态改变时，push信息到监听者那里。通常实现时，这个过程可以抽象到很底层完成，如Vue使用<code>Object.defineProperty</code>，并不影响整体实现。另外，为了实现多对多的监听，往往需要在被监听者和监听者之间增加spy（或者叫probe）这样的角色进行中转和广播通知。</p>\n<p>这时候可以定义<code>Observable</code>接口，当然了，它需要可以增删监听者和在发生事件后提醒监听者。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Observable</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(Observer o)</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">delete</span><span class=\"params\">(Observer o)</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">notify</span><span class=\"params\">(String text)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">IFoo</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">work</span><span class=\"params\">()</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sleep</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Observer</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">update</span><span class=\"params\">(String text)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Victim</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Observable</span>, IFoo &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> ArrayList&lt;Observer&gt; oList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Observer&gt;();</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(Observer o)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.oList.add(o);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">delete</span><span class=\"params\">(Observer o)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.oList.remove(o);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">notify</span><span class=\"params\">(String text)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Observer o: oList) &#123;</span><br><span class=\"line\">      o.update(text);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">work</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.notify(<span class=\"string\">&quot;Working...&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sleep</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.notify(<span class=\"string\">&quot;Sleeping...&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一个简单的JavaScript实现如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">EventUtil</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 全局事件管理</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> events = &#123;&#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 注册事件</span></span><br><span class=\"line\">    on = <span class=\"keyword\">function</span> (<span class=\"params\">type, handler</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (events[type]) &#123;</span><br><span class=\"line\">        events[type].<span class=\"title function_\">push</span>(handler);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        events[type] = [handler];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 触发事件</span></span><br><span class=\"line\">    emit = <span class=\"keyword\">function</span> (<span class=\"params\">type</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!events[type]) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = events[type].<span class=\"property\">length</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        events[type][i];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>观察者模式的优势在于在两个对象有<strong>频繁信息交互或希望监听特定时机</strong>时很有用，当信息很多时，可以考虑增加中间层，设计消息队列处理。Java本身也提供<code>java.util.Observer</code>和<code>java.util.Observable</code>用来实现这种模式。</p>\n<p>建立在观察者模式的基础上，有响应式编程这样新的编程范式出现，<a href=\"http://reactivex.io/\">ReactiveX</a>就是在这种范式基础上推出的多语言框架。JavaScript版本的叫做<a href=\"http://reactivex.io/rxjs/manual/overview.html\">RxJS</a>，相信看完这个简介对你会非常有帮助。</p>\n<h3 id=\"门面模式\"><a href=\"#门面模式\" class=\"headerlink\" title=\"门面模式\"></a>门面模式</h3><p>门面模式又叫外观模式，它要求所有子系统与外部通信时必须使用统一的对象进行，提供高层的接口，尽量掩盖不必要的业务细节，使得子系统更易用。因为实现起来重点在于统一通信数据格式和封装业务细节。这种模式也非常常用。比如在通常的前后端协调时，后端回传前端请求的数据通常都是统一的格式，避免错误同时减少前端工作量。比如下面这样。同样，有时后端也会要求前端在请求时使用统一的数据格式（不常见）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> successRet = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 错误码</span></span><br><span class=\"line\">  <span class=\"attr\">code</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 返回数据</span></span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">userInfo</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">id</span>: <span class=\"number\">0000001</span>,</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> errorRet = &#123;</span><br><span class=\"line\">  <span class=\"attr\">code</span>: <span class=\"number\">0002</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 错误原因</span></span><br><span class=\"line\">  <span class=\"attr\">message</span>: <span class=\"string\">&quot;请求过于频繁！&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>门面模式可以极大地提升封装性，增加系统的高内聚，同时也减少了系统内外的耦合，提高了灵活度和安全性。劣势在于对扩展不利，所有的改动几乎都要对应到门面（Facade）类的硬编码。因此门面模式的使用场景是：</p>\n<ul>\n<li>为一个复杂的系统或模块提供对外接口</li>\n<li>子系统间相对独立</li>\n</ul>\n<p>通常情况下，门面类只负责聚合，不参与具体的子系统逻辑。另外，在系统庞大时，很可能有不止一个门面入口。后端接口微服务化的趋势下，在系统内，拆分原来庞大的接口，同时面向前端不同设备，设计不同的服务汇合接入点正是门面模式的体现。</p>\n<h3 id=\"备忘录模式\"><a href=\"#备忘录模式\" class=\"headerlink\" title=\"备忘录模式\"></a>备忘录模式</h3><p>备忘录模式即，在不破坏封装性的前提下，捕获一个对象的内部状态，在对象外保存，并在合适的时候可以将对象恢复到保存的状态。这个概念很简单，涉及到三个角色：</p>\n<ul>\n<li>发起人，需要记录状态的对象</li>\n<li>备忘录， 用来储存状态</li>\n<li>备忘录管理者，对备忘录进行管理，保存和恢复</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Memorial</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">state</span>: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">memorize</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Memento</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">state</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">restore</span>(<span class=\"params\">memento</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = memento.<span class=\"property\">state</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Memento</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">state</span>: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">state</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = state;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Manager</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">memento</span>: <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> m = <span class=\"keyword\">new</span> <span class=\"title class_\">Memorial</span>();</span><br><span class=\"line\"><span class=\"title class_\">Manager</span>.<span class=\"property\">memento</span> = <span class=\"title class_\">Memorial</span>.<span class=\"title function_\">memorize</span>();</span><br><span class=\"line\"><span class=\"title class_\">Memorize</span>.<span class=\"title function_\">restore</span>(<span class=\"title class_\">Manager</span>.<span class=\"property\">memento</span>);</span><br></pre></td></tr></table></figure>\n\n<p>它的优点很明显，可以保存和回复状态，支持回滚事务。但在使用时，通常是结合了别的设计模式的变种。</p>\n<h4 id=\"拓展-2\"><a href=\"#拓展-2\" class=\"headerlink\" title=\"拓展\"></a>拓展</h4><p>结合原型模式，可以直接用clone对象的方式保存状态。这么做问题是当状态对象较大时，会有时间和空间的开销，优势是可以直接将状态存储在类内部，避免了其余类的定义。</p>\n<p>在多状态存储上，Java可以借用BeanUtil工具类（书中所说），JavaScript中就灵活很多了（还是因为轻量级的对象）。同样的多备忘录模式就不再赘述。另外，需要保证备忘录的保密性时，封装成业务类的内置类，设置权限为<code>private</code>即可，JS中同理。</p>\n<h3 id=\"访问者模式\"><a href=\"#访问者模式\" class=\"headerlink\" title=\"访问者模式\"></a>访问者模式</h3><p>访问者模式指，封装作用在数据结构上各元素的操作，它可以在不改变数据的前提下定义新的对于元素的操作。实现原理上，</p>\n<ul>\n<li>被访问类新增访问方法（如<code>accept</code>），注入访问类，同时将自己交给访问类</li>\n<li>访问类根据得到的被访问类对象，执行想要的操作</li>\n<li>场景类中通过调用访问方法访问被访问类</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Element</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">accept</span><span class=\"params\">(IVisitor v)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Element</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">foo</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 注入访问类</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">accept</span><span class=\"params\">(IVisitor v)</span> &#123;</span><br><span class=\"line\">    visitor.visit(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">IVisitor</span>() &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 通过重载对不同元素定义不同的访问方式</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">visit</span><span class=\"params\">(Element e)</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">visit</span><span class=\"params\">(OtherElement e)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然，为了保证依赖倒置原则，被访问类和访问类都可以再抽象出抽象类和接口。另外，访问者模式通常和组合模式、迭代器模式一同出现。访问者模式的优点：</p>\n<ul>\n<li>符合单一职责原则</li>\n<li>拓展性优秀</li>\n</ul>\n<p>缺点在于，被访问者要暴露细节给访问者，通常会增加很多约定，使代码不稳定。另外重载中依赖的是具体元素违背了依赖倒置原则。</p>\n<p>访问器模式的应用场景<strong>通常是使用迭代器模式已经不能满足的场合</strong>。比如对不同的元素有不同的遍历操作，甚至涉及到元素内部的逻辑。使用访问器模式可以封装和掩盖这种差异性。</p>\n<h4 id=\"拓展-3\"><a href=\"#拓展-3\" class=\"headerlink\" title=\"拓展\"></a>拓展</h4><p>在访问器模式和迭代器模式一同出现时，可以增加统计功能，在每次访问元素时收集统计信息。在往深处拓展，甚至可以抽象访问器为接口，从而拓展不同类型的访问器，如用来展示数据和用来统计数据的。</p>\n<h3 id=\"状态模式\"><a href=\"#状态模式\" class=\"headerlink\" title=\"状态模式\"></a>状态模式</h3><p>这种模式就很好理解了。即将客体抽象成一个<strong>有限状态机</strong>，客体有一个初始状态，在某特定时机下会跃迁到另一状态，且状态间的跳转是有规律可循的。这种模式在编程中非常常见，自然语言分析、所有可以用马尔科夫过程描述的事物变化都可以抽象成状态模式实现。在实现时，主要要完成三方面工作：</p>\n<ul>\n<li>定义<strong>所有状态</strong>，根据状态的薄厚程度，用常量或类定义</li>\n<li>定义修改状态的行为，在方法内往往要根据上一时刻状态做判断，这些行为定义在状态内部</li>\n<li>在上下文中调用这些行为</li>\n</ul>\n<p>在实现时，为了避免<code>switch</code>语句，会使用一个上下文类，托管当前状态，在状态切换时，先调用状态类中的行为，再通知上下文类更换托管的状态。两者相互注入。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">State</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 注入上下文对象</span></span><br><span class=\"line\">  <span class=\"keyword\">protected</span> Context c;</span><br><span class=\"line\">  <span class=\"comment\">// 设置上下文</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setContext</span><span class=\"params\">(Context c)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.context = c;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 行为</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"title function_\">action1</span><span class=\"params\">()</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"title function_\">action2</span><span class=\"params\">()</span>;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">State1</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">action1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">action2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>.context.setState(Context.STATE2);</span><br><span class=\"line\">    <span class=\"comment\">// 切换到state2</span></span><br><span class=\"line\">    <span class=\"built_in\">super</span>.context.handleAction2();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Context</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 注入所有状态</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">state</span> <span class=\"variable\">STATE1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">State1</span>();</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">state</span> <span class=\"variable\">STATE2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">State2</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> State CurrState;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> State <span class=\"title function_\">getState</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.CurrState;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 设置当前状态</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setState</span><span class=\"params\">(State currState)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.currState = currState;</span><br><span class=\"line\">    <span class=\"comment\">// 切换当前状态</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.CurrState.setContext(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 行为委托</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleAction1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.CurrState.action1();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleAction2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.CurrState.action2();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>增加了上下文类Context后，避免了大量的<code>switch</code>语句，问题是，状态较多时，定义的类也会较多。状态模式在工作流开发中很常用。</p>\n<h3 id=\"解释器模式\"><a href=\"#解释器模式\" class=\"headerlink\" title=\"解释器模式\"></a>解释器模式</h3><p>解释器模式顾名思义，即定义一个解释器，去按文法解释一种语言中的句子。当然这个语言以科学运算和编程语句居多。它的应用场景比较特殊，即需要语句解析介入的场景，比如自然语言分析、或者真的编写一个语言的解释器。通常开发解释器工程量和难度都较大，且会遇到效率问题。一般应用较少。</p>\n<p>在这个模式下。主要有下面这些角色；</p>\n<ul>\n<li>抽象解释器，用来派生具体的表达式解释器</li>\n<li>终结符解释器，即不需要解释的，字面意义的符号，比如<code>1</code>或<code>a</code>等</li>\n<li>非终结符解释器，和两边表达式相关联的符号解释器，比如<code>+</code>或<code>*</code>等</li>\n<li>上下文角色</li>\n</ul>\n<h3 id=\"享元模式\"><a href=\"#享元模式\" class=\"headerlink\" title=\"享元模式\"></a>享元模式</h3><p>享元模式是一种重要的池技术，原理上指使用共享对象支持大量的细粒度的对象。我们可以将这些对象内的状态拆分成可共享状态和不可共享状态。对象往往可以按可共享状态拆分为细粒度较大的若干部分，放在共享对象池中，再贴上自己的不可共享状态。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 享元</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SharedObject</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String intrinsic;</span><br><span class=\"line\">  <span class=\"comment\">// 共享的状态作为享元的key</span></span><br><span class=\"line\">  <span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> String Extrinsic;</span><br><span class=\"line\">  <span class=\"comment\">// 共享的状态需要可以设置</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">SharedObject</span><span class=\"params\">(String E)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.Extrinsic = E;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 业务方法</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"title function_\">foo</span><span class=\"params\">()</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 不可共享状态的getter/setter</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> String <span class=\"title function_\">getIntrinsic</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> intrinsic;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setIntrinsic</span><span class=\"params\">(String intrinsic)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.intrinsic = intrinsic;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 享元工厂</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SharedObjectFactory</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 共享池</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> HashMap&lt;String, SharedObject&gt; pool = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;String, SharedObject&gt;();</span><br><span class=\"line\">  <span class=\"comment\">// 工厂方法</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SharedObject <span class=\"title function_\">getSharedObject</span><span class=\"params\">(String Extrinsic)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">SharedObject</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 从池中寻找</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pool.containsKey(Extrinsic)) &#123;</span><br><span class=\"line\">      o = pool.get(Extrinsic);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      o = <span class=\"keyword\">new</span> <span class=\"title class_\">SharedObject1</span>(Extrinsic);</span><br><span class=\"line\">      <span class=\"comment\">// 放到池中</span></span><br><span class=\"line\">      pool.put(Extrinsic, o);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在共享对象池中，建议使用可共享状态的简单组合构成池内元素的key值（最好是基本类型），一方面减少编程负担，另一方面还可以提高工作效率。享元模式主要使用在下面场景下：</p>\n<ul>\n<li>系统中存在大量相似对象</li>\n<li>对象具备相近的外部状态和与环境无关的内部状态</li>\n</ul>\n<h3 id=\"桥梁模式\"><a href=\"#桥梁模式\" class=\"headerlink\" title=\"桥梁模式\"></a>桥梁模式</h3><p>桥梁模式又叫桥接模式，是比较轻量级的一种设计模式，意为将抽象和实现解耦，使两者可以独立变化。角色上，桥梁模式分为主体和客体，在主体内注入客体的接口&#x2F;抽象类，并在主体的方法内使用，提供setter或构造函数方法。这样继承自主体的类就可以根据传入setter&#x2F;构造函数的客体实现类的不同得到不同的实现结果。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Object</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 基本方法</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">foo</span><span class=\"params\">()</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Object1</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Object</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">foo</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 自己的逻辑</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Object2</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Object</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">foo</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 自己的逻辑</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Subject</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 必须有一个注入的客体</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> Object o;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 必须可以通过构造函数/setter注入</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">Subject</span><span class=\"params\">(Object o)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.o = o;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 获得客体行为</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">bar</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.o.foo();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 获得客体</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> Object <span class=\"title function_\">getObject</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Subject1</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Subject</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 覆写构造函数</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">Subject1</span><span class=\"params\">(Object o)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>(o);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 自身业务</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">bar</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>.bar();</span><br><span class=\"line\">    <span class=\"comment\">// ... 其余业务</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Scene</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Object</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object1</span>();</span><br><span class=\"line\">    <span class=\"type\">Subject</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Subject1</span>(o);</span><br><span class=\"line\">    s.bar();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>桥梁模式的扩展能力很强，它是<strong>对普通的继承的一种灵活的补充</strong>，避免了父类对子类的强侵入，可以将父类可能会变化的部分抽出去，通过注入的方式引入，方便子类随时更换。</p>\n<h2 id=\"设计模式的比较\"><a href=\"#设计模式的比较\" class=\"headerlink\" title=\"设计模式的比较\"></a>设计模式的比较</h2><h3 id=\"创建类\"><a href=\"#创建类\" class=\"headerlink\" title=\"创建类\"></a>创建类</h3><p>和创建类相关的模式：</p>\n<ul>\n<li>工厂模式</li>\n<li>抽象工厂模式</li>\n<li>建造者模式</li>\n<li>单例模式</li>\n<li>原型模式</li>\n</ul>\n<p>后两者容易理解。重点对比上面三个模式：</p>\n<ul>\n<li>工厂模式注重<strong>整体的构建过程</strong>，成产出的对象具有很强的<strong>相似性</strong></li>\n<li>建造者模式注重<strong>建造的过程</strong>，希望在每一步最好都可定制，根据步骤的不同生产出差异化的对象，<strong>通常伴生导演类</strong>。</li>\n<li>抽象工厂模式通常和<strong>产品族</strong>关系密切，尤其是一组事物有很明显的两个或多个划分方法时使用，其余等同工厂模式</li>\n</ul>\n<h3 id=\"结构类\"><a href=\"#结构类\" class=\"headerlink\" title=\"结构类\"></a>结构类</h3><p>结构类指调整或组合类产生更大结构来适应更高层次逻辑需求，大多通过增加中间层解决问题，有下面的相关模式：</p>\n<ul>\n<li>适配器模式</li>\n<li>桥梁模式</li>\n<li>组合模式</li>\n<li>装饰模式</li>\n<li>门面模式</li>\n<li>享元模式</li>\n<li>代理模式</li>\n</ul>\n<p>其中简单明了的有桥梁模式、组合模式、门面模式、享元模式，下面对比下其他的几种模式：</p>\n<ul>\n<li>代理模式即在原对象和用户间增加了一个中间层，在不改变原接口的情况下，<strong>增加准入和限定操作</strong></li>\n<li>装饰模式是代理模式的加强，装饰类并不起中间层的作用，不做准入判断，它<strong>单纯地在原接口上增强或削弱功能</strong></li>\n<li>适配器模式和它们差别较大，它也起包装作用，作用于两个不同的对象，重点在<strong>伪装和转换</strong></li>\n</ul>\n<h3 id=\"行为类\"><a href=\"#行为类\" class=\"headerlink\" title=\"行为类\"></a>行为类</h3><p>这一批模式重点在修饰类的行为：</p>\n<ul>\n<li>责任链模式</li>\n<li>命令模式</li>\n<li>解释器模式</li>\n<li>迭代器模式</li>\n<li>中介者模式</li>\n<li>备忘录模式</li>\n<li>观察者模式</li>\n<li>状态模式</li>\n<li>策略模式</li>\n<li>模板方法模式</li>\n<li>访问者模式</li>\n</ul>\n<p>下面比较一些类似的模式</p>\n<ul>\n<li>命令模式强调把<strong>动作解耦</strong>，将其分为<strong>执行对象和执行行为</strong>，在行为类内部注入执行对象，使用执行者操作命令</li>\n<li>策略模式强调包装<strong>对等的可替换的多个算法</strong>，通常有一个上下文类，封装所有的算法</li>\n</ul>\n<p>比如在表单验证时，策略模式会将所有的验证规则对等地定义出来，再由一个表单验证上下文对象包裹起来；命令模式下，首先要明确所有验证规则的接受者（Receiver），再定义所有的验证“命令”，最后由执行者（Invoker）操作命令完成工作，具体工作是在接受者那里完成的，命令只负责组织。</p>\n<p>关于策略模式和状态模式，</p>\n<ul>\n<li>策略模式没有状态的概念，虽然有上下文类<code>Context</code>，但是切换的状态只是不同的算法而已</li>\n<li>状态模式重点关注状态，它同样有上下文类<code>Context</code>，但<strong>相同的行为在不同的状态下产生的结果不同</strong>。在实现上体现在，上下文类内保存了当前状态，虽然状态间都有相同方法，但实现不同。</li>\n</ul>\n<p>至于观察者模式和责任链模式，</p>\n<ul>\n<li>观察者模式重点在<strong>观察和被观察的关系</strong>（想想事件监听），被观察者中需要注入监听者（Observable），再由监听者告知观察者（Observer），整条链是有回调的，链上传递的信息可以自由变化，即最后返回给用户数据的总是第一个被观察者</li>\n<li>责任链模式重点在<strong>事务链条化处理</strong>的过程（想想中间件），每个处理者都必须通过<code>next</code>属性明确指定下一个目标，整条链是责任链，链上角色相互平等，传递的信息一般不会改变结构，最终由最后一个角色返回结果</li>\n</ul>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>首先先来比较策略模式和桥梁模式。它俩的共同点在都有一个注入依赖关系。策略模式中算法封装被注入到上下文类<code>Context</code>中，桥梁模式中差异化继承的部分被单独抽出再注入父类里。它们的区别主要在：</p>\n<ul>\n<li>策略模式着重于封装一系列不同的行为</li>\n<li>桥梁模式在不破坏封装的情况下将差异化的实现部分从抽象部分抽取出来，因此必然有抽象化角色和实现化角色</li>\n</ul>\n<p>门面模式和中介者模式就比较好区分了，它们的应用场景有很大不同;</p>\n<ul>\n<li>门面模式用来掩盖下面复杂的子系统，提供统一的高层接口（“金玉其外”），它并不管下面的子系统间怎样耦合（“败絮其中”）</li>\n<li>中介者模式要用在同事对象间（通常至少3个）复杂交互时，化网状结构为星型结构，减少耦合</li>\n</ul>\n<p>最后，代理模式、装饰模式、适配器模式（不严格）、桥梁模式、门面模式都可以总结为<strong>包装模式</strong>，它们并没有为原来的类增加新的功能，只是增加了新的包装或插件。</p>\n<h2 id=\"设计模式的组合\"><a href=\"#设计模式的组合\" class=\"headerlink\" title=\"设计模式的组合\"></a>设计模式的组合</h2><h3 id=\"shell命令解释demo\"><a href=\"#shell命令解释demo\" class=\"headerlink\" title=\"shell命令解释demo\"></a>shell命令解释demo</h3><p>主要采用命令模式、责任链模式、模板方法模式。</p>\n<h3 id=\"银行扣款demo\"><a href=\"#银行扣款demo\" class=\"headerlink\" title=\"银行扣款demo\"></a>银行扣款demo</h3><p>主要采用策略模式、工厂方法模式、门面模式</p>\n<h3 id=\"产品消费事件demo\"><a href=\"#产品消费事件demo\" class=\"headerlink\" title=\"产品消费事件demo\"></a>产品消费事件demo</h3><p>产品创建时摄影工厂模式，保证产品和工厂的紧耦合，避免创建事件不触发的可能性</p>\n<h2 id=\"新模式\"><a href=\"#新模式\" class=\"headerlink\" title=\"新模式\"></a>新模式</h2><h3 id=\"MVC\"><a href=\"#MVC\" class=\"headerlink\" title=\"MVC\"></a>MVC</h3><p>MVC其实算不上一种新模式，但是从上世纪90年代起到现在实在是太流行了。它的目的是通过C（Controller）将模型M（Model）和视图V（View）分离开。书中具体在讲MVC在Java Web开发中的实现，这里从略。</p>\n<h3 id=\"规格书模式\"><a href=\"#规格书模式\" class=\"headerlink\" title=\"规格书模式\"></a>规格书模式</h3><p>规格书模式多用在描述一个规范或条件的场合下，比如“性别男年龄大于20且位于北京”。通过定义抽象类以及<code>AND</code>，<code>OR</code>，<code>NOT</code>等的组合，可以得到更复杂的规格书对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ISpec</span>() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isSatisfied</span><span class=\"params\">(Object o)</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> ISpec <span class=\"title function_\">and</span><span class=\"params\">(ISpec s)</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> ISpec <span class=\"title function_\">or</span><span class=\"params\">(ISpec s)</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> ISpec <span class=\"title function_\">not</span><span class=\"params\">(ISpec s)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Spec <span class=\"keyword\">implements</span> <span class=\"title class_\">ISpec</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"title function_\">isSatisfied</span><span class=\"params\">(Object o)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> ISpec <span class=\"title function_\">and</span><span class=\"params\">(ISpec s)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AndSpec</span>(<span class=\"built_in\">this</span>, spec);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> ISpec <span class=\"title function_\">or</span><span class=\"params\">(ISpec s)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newOrSpec(<span class=\"built_in\">this</span>, spec);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> ISpec <span class=\"title function_\">not</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> notSpec(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AndSpec</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Spec</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> ISpec left;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> ISpec right;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">AndSpec</span><span class=\"params\">(ISpec left, ISpec right)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.left = left;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.right = right;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isSatisfied</span><span class=\"params\">(Object o)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> left.isSatisfied(o) &amp;&amp; right.isSatisfied(o);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OrSpec</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Spec</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> ISpec left;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> ISpec right;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">OrSpec</span><span class=\"params\">(ISpec left, ISpec right)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.left = left;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.right = right;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isSatisfied</span><span class=\"params\">(Object o)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> left.isSatisfied(o) || right.isSatisfied(o);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NotSpec</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Spec</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> ISpec spec;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">NotSpec</span><span class=\"params\">(ISpec s)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.spec = s;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isSatisfied</span><span class=\"params\">(Object o)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !<span class=\"built_in\">this</span>.spec.isSatisfied(o);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">bizSpec</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Spec</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Object obj;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">bizSpec</span><span class=\"params\">(Object o)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.obj = o;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isSatisfied</span><span class=\"params\">(Object o)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 根据业务逻辑决定真值判断</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>规格模式应用场景比较局限，在LINQ（Language INtegrated Query，语言集成查询）中常见，用来构造WHERE子句。</p>\n<h3 id=\"对象池模式\"><a href=\"#对象池模式\" class=\"headerlink\" title=\"对象池模式\"></a>对象池模式</h3><p>对象池模式和享元模式相似，都是循环使用对象，但是对象池模式是整个直接取出到池中，避免初始化和释放资源时的消耗。如连接池和线程池就是常见的例子。</p>\n<h3 id=\"雇工模式\"><a href=\"#雇工模式\" class=\"headerlink\" title=\"雇工模式\"></a>雇工模式</h3><p>雇工模式是常见的“接口-实现”的倒转实现。比如，小学老师教小学学生，中学老师教中学学生，大学老师教大学学生。在实现时，我们先定义学习接口，再实现所有的学生类。再实现老师时，直接调用学生接口的学习方法就完成了教学的实现。雇工模式为一组类提供通用的功能，不需要类实现这些功能，而在客体上实现功能。它和命令模式有相似之处。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">IService</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">serving</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Object</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IService</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">serving</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 服务完成</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Servant</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">service</span><span class=\"params\">(IService s)</span> &#123;</span><br><span class=\"line\">    s.serving();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"黑板模式\"><a href=\"#黑板模式\" class=\"headerlink\" title=\"黑板模式\"></a>黑板模式</h3><p>黑板模式是观察者模式的拓展，它允许消息有多个读写者，且同时进行。消息生产者通过“黑板”这个总线，将消息传递给对应的消息消费者。这可以是一种宏观的设计理念，使用数据库或者消息队列当做“黑板”都是可以的。</p>\n<h3 id=\"空对象模式\"><a href=\"#空对象模式\" class=\"headerlink\" title=\"空对象模式\"></a>空对象模式</h3><p>空对象通过实现一个无意义的默认类避免程序出现null值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">NullAnimal</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> makeSound &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 什么都不写</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>–END–</em></p>\n",
            "tags": [
                "JavaScript",
                "设计模式",
                "类",
                "接口",
                "抽象类"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2017/12/15/you-dont-know-js-part2/",
            "url": "http://shenlvmeng.github.com/blog/2017/12/15/you-dont-know-js-part2/",
            "title": "《You don't know JS》 下（类型文法&异步&ES6与未来）",
            "date_published": "2017-12-15T12:59:38.000Z",
            "content_html": "<blockquote>\n<p>原作：<a href=\"https://github.com/getify/You-Dont-Know-JS\">You-Dont-Know-JS</a><br>本文的99.9%的内容都来自《You dont know JS》的<a href=\"https://github.com/getify/You-Dont-Know-JS/tree/1ed-zh-CN\">电子中文版</a></p>\n<p>传送门：<a href=\"https://shenlvmeng.github.io/blog/2017/12/13/you-dont-know-js-part1/\">《You don’t know JS》 上（入门&amp;作用域&amp;对象）</a></p>\n</blockquote>\n<h2 id=\"类型和文法\"><a href=\"#类型和文法\" class=\"headerlink\" title=\"类型和文法\"></a>类型和文法</h2><h3 id=\"内建类型\"><a href=\"#内建类型\" class=\"headerlink\" title=\"内建类型\"></a>内建类型</h3><ul>\n<li>7种类型</li>\n<li>值才有类型，变量没有</li>\n<li><code>undefined</code> ≠ is not defined（undeclared）。<code>undefined</code>表示定义却没有赋值的变量类型。然而<code>typeof</code>一个未声明的变量也会返回<code>undefined</code>，这是<code>typeof</code>的安全机制，它给了我们更多空间检查变量是否可用。</li>\n</ul>\n<h3 id=\"值\"><a href=\"#值\" class=\"headerlink\" title=\"值\"></a>值</h3><p>由于JS里String的只读性，所有String的相关方法都是返回一个新字符串。</p>\n<p>使用二进制浮点数的最出名（臭名昭著）的副作用是（记住，这是对 所有 使用 IEEE 754 的语言都成立的 —— 不是许多人认为&#x2F;假装 仅 在 JavaScript 中存在的问题）：<code>0.1 + 0.2 === 0.3 // false</code>。不过可以用<code>Number.EPSILON</code>做最小误差得到足够精确的近似结果。ES6下已经可以用<code>Number.isInteger()</code>和<code>Number.isSafeInteger()</code>检查数字是不是整数&#x2F;安全整数。</p>\n<h4 id=\"特殊值\"><a href=\"#特殊值\" class=\"headerlink\" title=\"特殊值\"></a>特殊值</h4><p><code>undefined</code>和<code>null</code>是JS里比较特殊的两类值，它们既是类型又是唯一的值。更加不幸的是，在非strict模式下，<code>undefined</code>还可以作为标识符，像下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">undefined</span> = <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n\n<p>另外，在特别需要<code>undefined</code>时，<code>void</code>操作符会变得很有用。</p>\n<p>Infinity &#x2F; Infinity &#x3D;&#x3D; undefined。</p>\n<p>针对一些特殊的等价情况（NaN和-0），ES6使用<code>Object.is()</code>判断其相等性。</p>\n<h4 id=\"值与引用\"><a href=\"#值与引用\" class=\"headerlink\" title=\"值与引用\"></a>值与引用</h4><p>在JS中没有指针，只有引用，同时页没有语法上的提示可以控制值和引用的赋值&#x2F;传递。取而代之的是，值的类型用来唯一控制值是通过值拷贝，还是引用拷贝来赋予（复合值）。引用指向的是值本身而不是变量，不能使用一个引用来改变另一个引用所指向的值。</p>\n<p>底层的基本标量值是不可变的（String和Boolean也一样）。比如一个Number对象持有一个基本标量值2，那么这个Number对象就永远不能再持有另一个值；你只能用一个不同的值创建一个全新的Number对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">x</span>) &#123;</span><br><span class=\"line\">    x = x + <span class=\"number\">1</span>;</span><br><span class=\"line\">    x; <span class=\"comment\">// 3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> <span class=\"title class_\">Number</span>( a ); <span class=\"comment\">// 或等价的 `Object(a)`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>( b );</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( b ); <span class=\"comment\">// 2, 不是 3</span></span><br></pre></td></tr></table></figure>\n\n<p>在其中<code>x = x + 1</code>这一步，包装值内的x被取出+1后，赋值给x，将其从一个引用变成一个基本标量值3。</p>\n<h3 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h3><p>对于最简单的值，JSON字符串化行为基本上和<code>toString()</code>转换是相同的，在对String字符串化时，结果也会包含<code>&quot;&quot;</code>，如<code>JSON.stringify(&quot;11&quot;) // &quot;&quot;11&quot;&quot;</code>。另外，对于JSON不安全值（即不能移植到消费JSON的语言中），有下面的处理：</p>\n<ul>\n<li>忽略<code>undefined</code>，<code>function</code>，<code>symbol</code></li>\n<li>在<code>Array</code>中遇到这种类型的值，会被替换为null（避免修改位置信息）</li>\n<li>在<code>Object</code>的属性中遇到时，属性会被简单的忽略掉</li>\n<li>带有循环引用时，<code>JSON.stringify()</code>会报错</li>\n</ul>\n<p>另外，对于有<code>toJSON()</code>方法的对象，JSON字符串化会优先使用该方法。<code>JSON.stringify()</code>的第二个参数可以指定Array或Function说明可以编辑的对象属性。第三个参数是填充符，填充在各级开头，用来友好展示结果，最多取入参的前10个字符。</p>\n<p>在对象上使用<code>toNumber</code>和<code>toString</code>方法，首先会找到其原始类型（<code>toPrimitives()</code>），即使用其<code>valueOf()</code>或<code>toString()</code>方法（也会在<code>[[prototype]]</code>上寻找）。</p>\n<h4 id=\"gt-Number\"><a href=\"#gt-Number\" class=\"headerlink\" title=\"-&gt; Number\"></a>-&gt; Number</h4><p>可以用<code>Date.now()</code>代替<code>+new Date()</code>获取更好的语义。</p>\n<p><code>~</code>除了可以用来检查<code>-1</code>这个特殊的值，还可以通过<code>~~</code>对小数取整，因为执行位操作时会先将数字转为Int32类型。</p>\n<p><strong><code>parseInt</code>以及<code>parseFloat</code>和<code>+</code>或<code>Number()</code>强制类型转换存在区别。</strong>它们的作用是，从字符串中解析出一个<code>number</code>出来。两者是不能相互替换的。后者是不能<em>容忍</em>非数字字符的。另外，**请在字符串上使用<code>parseInt</code>和<code>parseFloat</code>**，这也是它们的设计目的。对非字符串类型使用它们可能得到意外的结果：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseInt</span>( <span class=\"number\">1</span>/<span class=\"number\">0</span>, <span class=\"number\">19</span> ); <span class=\"comment\">// 18，惊不惊喜，意不意外</span></span><br></pre></td></tr></table></figure>\n\n<p>原因是，parseInt会把第一个参数<code>toString</code>（这不能责怪它，因为它本来就是设计对String使用的）。类似的例子还能举出很多：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseInt</span>( <span class=\"number\">0.000008</span> );       <span class=\"comment\">// 0   (&quot;0&quot; from &quot;0.000008&quot;)</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>( <span class=\"number\">0.0000008</span> );      <span class=\"comment\">// 8   (&quot;8&quot; from &quot;8e-7&quot;)</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>( <span class=\"literal\">false</span>, <span class=\"number\">16</span> );      <span class=\"comment\">// 250 (&quot;fa&quot; from &quot;false&quot;)</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>( <span class=\"built_in\">parseInt</span>, <span class=\"number\">16</span> );   <span class=\"comment\">// 15  (&quot;f&quot; from &quot;function..&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>( <span class=\"string\">&quot;0x10&quot;</span> );         <span class=\"comment\">// 16</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>( <span class=\"string\">&quot;103&quot;</span>, <span class=\"number\">2</span> );       <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<p>另外，<code>parseInt</code>会通过前缀试图猜测数字进制，默认是10进制。以<code>0x</code>开头表示16进制，以<code>0b</code>开头表示2进制，以<code>0o</code>开头表示8进制。</p>\n<h4 id=\"gt-Boolean\"><a href=\"#gt-Boolean\" class=\"headerlink\" title=\"-&gt; Boolean\"></a>-&gt; Boolean</h4><p>使用<code>!!</code>强制转换类型。</p>\n<p><code>&amp;&amp;</code>与<code>||</code>在JS中的逻辑和C++以及Java中的不大一样，它并不一定返回boolean类型的值，而是根据比较的两个数判断返回哪一个。其中<code>&amp;&amp;</code>可以用来进行短路操作。</p>\n<p>另外，对于Symbol来说，只能通过<code>String()</code>的形式转为String类型，却不能转为Boolean类型。</p>\n<h4 id=\"等价\"><a href=\"#等价\" class=\"headerlink\" title=\"等价\"></a>等价</h4><p>等价分为<code>==</code>和<code>===</code>。</p>\n<p>在<code>String</code>和<code>Number</code>进行比较时，会对<code>String</code>使用强制类型转换（类似<code>+</code>和<code>Number()</code>）；</p>\n<p>在和<code>Boolean</code>比较时，<strong>会首先把Boolean类型转为Number类型，再进行比较</strong>。这会产生下面这样比较迷惑的情况：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;42&quot;</span> == <span class=\"literal\">true</span>  <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"string\">&quot;42&quot;</span> == <span class=\"literal\">false</span> <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<p>在<code>Object</code>和非<code>Object</code>比较时，会先对<code>Object</code>进行<code>toPrimtives</code>，即先使用<code>valueOf()</code>看能否转成基本类型，再使用<code>toString()</code>。</p>\n<p>下面有一些疯狂的例子，但却可以由上面的规则解释：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;0&quot;</span> == <span class=\"literal\">false</span>    <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"literal\">false</span> == []     <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"number\">0</span> == []         <span class=\"comment\">// true</span></span><br><span class=\"line\">[] == ![];      <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"number\">2</span> == [<span class=\"number\">2</span>];       <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;</span> == []        <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;</span> == [<span class=\"literal\">null</span>];   <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"number\">0</span> == <span class=\"string\">&quot;\\n&quot;</span>       <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>通过上面的坑可以看到，等号的两边总有<code>[]</code>或<code>&quot;&quot;</code>或<code>false</code>或<code>0</code>。建议在这些情况使用<code>===</code>。</p>\n<p>下面是由Alex Dorey(@dorey on GitHub)制作的一个方便的表格，将各种比较进行了可视化：</p>\n<p><img src=\"https://github.com/getify/You-Dont-Know-JS/raw/1ed-zh-CN/types%20%26%20grammar/fig1.png\"></p>\n<h4 id=\"大小关系比较\"><a href=\"#大小关系比较\" class=\"headerlink\" title=\"大小关系比较\"></a>大小关系比较</h4><p>首先对值进行<code>toPrimitives</code>转换，如果有一个不是String，则使用<code>Number</code>类型比较。见下面的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// toNumber</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [ <span class=\"number\">42</span> ];</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = [ <span class=\"string\">&quot;43&quot;</span> ];</span><br><span class=\"line\"></span><br><span class=\"line\">a &lt; b;  <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// toString</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123; <span class=\"attr\">b</span>: <span class=\"number\">42</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = &#123; <span class=\"attr\">b</span>: <span class=\"number\">43</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">a &lt; b;  <span class=\"comment\">// false</span></span><br><span class=\"line\">a == b; <span class=\"comment\">// false</span></span><br><span class=\"line\">a &gt; b;  <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\">a &lt;= b; <span class=\"comment\">// true</span></span><br><span class=\"line\">a &gt;= b; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>在下面的例子里，a和b在比较时，都会转成”[object Object]”。而等价比较上会比较引用是否相同。因此都返回false，而JS中的<code>&lt;=</code>和<code>&gt;=</code>操作会去对应计算<code>&gt;</code>和<code>&lt;</code>的结果再取反，从而会得到两个<code>true</code>。</p>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><h4 id=\"语句和表达式\"><a href=\"#语句和表达式\" class=\"headerlink\" title=\"语句和表达式\"></a>语句和表达式</h4><p>JS中的表达式都有一个隐式的返回值，但是它只会打印在控制台中，并不会真实返回。块语句的返回值是块中最后一个语句的返回值。ES7中可能会引入do语句显式地使用这个返回值。</p>\n<p>JS中的<code>++</code>和C风格类似，表示自增，有前后之分。但是<code>++a++</code>这种用法是不合法的。</p>\n<p>赋值表达式的返回是赋予的值，这在链式赋值时很好用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a, b, c;</span><br><span class=\"line\">a = b = c = <span class=\"number\">42</span>;</span><br></pre></td></tr></table></figure>\n\n<p>这里，<code>c = 42</code>被求值得出42（带有将42赋值给c的副作用），然后<code>b = 42</code>被求值得出42（带有将42赋值给b的副作用），而最后<code>a = 42</code>被求值（带有将42赋值给a的副作用）。</p>\n<p>另一种用法是直接将之放在<code>&amp;&amp;</code>和<code>||</code>的前后，检查赋值语句的真值。</p>\n<h4 id=\"上下文\"><a href=\"#上下文\" class=\"headerlink\" title=\"上下文\"></a>上下文</h4><p><code>&#123;&#125;</code>包裹的内容作为表达式结果可以直接赋值给变量，但是直接声明时会被当做代码块，但是可能仍然是合法的，如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">foo</span>: <span class=\"title function_\">bar</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为，JS中允许使用语句标签，便于<code>break</code>和<code>continue</code>跳转（JS中没有<code>goto</code>）。而JSON中带有<code>&quot;&quot;</code>的键则不会被这么解释，因为语句标签不允许出现引号。</p>\n<p>我们现在来解决下面的问题：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[] + &#123;&#125;; <span class=\"comment\">// &quot;[object Object]&quot;</span></span><br><span class=\"line\">&#123;&#125; + []; <span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure>\n\n<p>为什么交换顺序会对<code>+</code>的规则有影响？在第一个式子里一切都是正常的，<code>[]</code>转换成<code>&quot;&quot;</code>，<code>&#123;&#125;</code>转换成<code>[object Object]</code>；在第二个式子里，<code>&#123;&#125;</code>被理解成一个空代码块儿，<code>[]</code>被强制转换为0。</p>\n<h4 id=\"操作符优先级\"><a href=\"#操作符优先级\" class=\"headerlink\" title=\"操作符优先级\"></a>操作符优先级</h4><ul>\n<li><code>&amp;&amp;</code>优先于<code>||</code>。<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\">这里</a>有完整的表格。</li>\n<li><code>&amp;&amp;</code>和<code>||</code>有短接的特点，即当第一个表达式为true或false时直接返回结果。</li>\n<li>赋值表达式和三元表达式<code>? : </code>一样是从右向左结合的</li>\n</ul>\n<h4 id=\"ASI（自动分号）\"><a href=\"#ASI（自动分号）\" class=\"headerlink\" title=\"ASI（自动分号）\"></a>ASI（自动分号）</h4><p>尽量避免ASI，只在确认没有歧义的地方依赖ASI。</p>\n<h4 id=\"错误\"><a href=\"#错误\" class=\"headerlink\" title=\"错误\"></a>错误</h4><ul>\n<li>JS有早期错误一说，即运行前编译期间的错误</li>\n<li><code>let</code>会造成块域内的TDZ（Temporal Dead Zone，时间死区），<code>typeof</code>在此时会报错，而不会返回<code>undefined</code>。TDZ是指变量还没到能使用它的时候，还需要初始化。下面还有一个例子：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"> a = <span class=\"number\">42</span>, b = a + b + <span class=\"number\">5</span> </span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ..</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>ES6提供了剩余参数来代替原有的<code>arguments</code>对象，这更加安全。</li>\n</ul>\n<p><strong><code>finally</code>子句</strong></p>\n<p><code>try catch</code>在和<code>finally</code>一起使用时，<code>finally</code>的语句一定会被执行，而且一定会在<code>try</code>语句执行完后立即执行，即使<code>try</code>中有<code>return</code>或者<code>throw</code>、<code>continue</code>等控制语句。可以在<code>finally</code>中修改<code>try</code>中的结果，但是最后不要这么做，因为会影响程序可读性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"number\">42</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( <span class=\"string\">&quot;Hello&quot;</span> );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( <span class=\"string\">&quot;never runs&quot;</span> );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( <span class=\"title function_\">foo</span>() );</span><br><span class=\"line\"><span class=\"comment\">// Hello</span></span><br><span class=\"line\"><span class=\"comment\">// Uncaught Exception: 42</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"宿主环境\"><a href=\"#宿主环境\" class=\"headerlink\" title=\"宿主环境\"></a>宿主环境</h4><p>由于浏览器的遗留行为，使用id属性创建DOM元素会创建同名的全局变量。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;foo&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> foo == <span class=\"string\">&quot;undefined&quot;</span>) &#123;</span><br><span class=\"line\">    foo = <span class=\"number\">42</span>;       <span class=\"comment\">// 永远不会运行</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( foo ); <span class=\"comment\">// HTML元素</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>永远不要修改内建类型。</li>\n<li>JS的函数和变量声明提升只在同一<code>&lt;script&gt;</code>标签内</li>\n</ul>\n<h4 id=\"保留字\"><a href=\"#保留字\" class=\"headerlink\" title=\"保留字\"></a>保留字</h4><blockquote>\n<p>Let this long package float, Goto private class if short. While protected with debugger case, Continue volatile interface. Instanceof super synchronized throw, Extends final export throws.</p>\n<p>Try import double enum?</p>\n<p>False, boolean, abstract function, Implements typeof transient break! Void static, default do, Switch int native new. Else, delete null public var In return for const, true, char …Finally catch byte.</p>\n</blockquote>\n<p>来自StackOverflow用户“art4theSould”创造性的一首<a href=\"http://stackoverflow.com/questions/26255/reserved-keywords-in-javascript/12114140#12114140\">小诗</a>。</p>\n<p>另外，在ES6+中，可以使用保留字作为对象字面量中的属性名或键。</p>\n<h2 id=\"异步与性能\"><a href=\"#异步与性能\" class=\"headerlink\" title=\"异步与性能\"></a>异步与性能</h2><p>JS引擎对时间没有天生的感觉，只是一个任意JS代码段的按需执行环境。是周围的宿主环境在不停地安排“事件”（JS代码的执行）。举例来说，当你的JS程序发起一个从服务器取得数据的Ajax请求时，你在一个函数（通常称为回调）中建立好“应答”代码，然后JS引擎就会告诉宿主环境，“嘿，我就要暂时停止执行了，但不管你什么时候完成了这个网络请求，而且你还得到一些数据的话，请<em>回来调</em>这个函数。”</p>\n<p>然后浏览器就会为网络的应答设置一个监听器，当它有东西要交给你的时候，它会通过将回调函数插入<strong>事件轮询</strong>来安排它的执行。</p>\n<p>关于事件轮询队列，<a href=\"https://shenlvmeng.github.io/blog/2017/02/27/event-loop/\">之前</a>也有过一些介绍。</p>\n<h3 id=\"异步概览\"><a href=\"#异步概览\" class=\"headerlink\" title=\"异步概览\"></a>异步概览</h3><p>异步≠并行。异步本质上还是串行的。工作依然有先后之分，没有线程、线程池的概念。从而，在JS中的函数都是原子的，即不会与别的函数的代码<strong>相互穿插</strong>（除非使用<code>Generator</code>）。</p>\n<h4 id=\"并发\"><a href=\"#并发\" class=\"headerlink\" title=\"并发\"></a>并发</h4><p>并发是当两个或多个“进程”（或任务）在同一时间段内同时执行，而不管构成它们的每个操作是不是同时进行的。在JS中，单线程事件轮询是并发的一种表达。</p>\n<p><strong>不互动</strong></p>\n<p>当程序中运行多个“进程”（或任务），如果它们之间没有逻辑联系，那么不互动是完全可以接受的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> res = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">results</span>) &#123;</span><br><span class=\"line\">    res.<span class=\"property\">foo</span> = results;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">bar</span>(<span class=\"params\">results</span>) &#123;</span><br><span class=\"line\">    res.<span class=\"property\">bar</span> = results;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ajax(..) 是某个包中任意的Ajax函数</span></span><br><span class=\"line\"><span class=\"title function_\">ajax</span>( <span class=\"string\">&quot;http://some.url.1&quot;</span>, foo );</span><br><span class=\"line\"><span class=\"title function_\">ajax</span>( <span class=\"string\">&quot;http://some.url.2&quot;</span>, bar );</span><br></pre></td></tr></table></figure>\n\n<p><strong>互动</strong></p>\n<p>相反，如果它们之间有依赖关系，或者前后次序而产生互动时，<code>let it alone</code>就会出事。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> res = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">response</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">push</span>( data );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ajax(..) 是某个包中任意的Ajax函数</span></span><br><span class=\"line\"><span class=\"title function_\">ajax</span>( <span class=\"string\">&quot;http://some.url.1&quot;</span>, response );</span><br><span class=\"line\"><span class=\"title function_\">ajax</span>( <span class=\"string\">&quot;http://some.url.2&quot;</span>, response );</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"协调\"><a href=\"#协调\" class=\"headerlink\" title=\"协调\"></a>协调</h4><p>跳过使用全局变量等丑陋的协作手段，有一种方法，将长时间处理的任务打断成多个小段的请求外加setTimeout，以便将任务穿插完成。</p>\n<h4 id=\"Jobs\"><a href=\"#Jobs\" class=\"headerlink\" title=\"Jobs\"></a>Jobs</h4><p>ES6在事件轮询队列之上引入了一层新概念，称为“工作队列（Job queue）”。它和轮询队列的关系类似于Macrotask和Microtask。</p>\n<h3 id=\"回调\"><a href=\"#回调\" class=\"headerlink\" title=\"回调\"></a>回调</h3><h4 id=\"顺序的大脑\"><a href=\"#顺序的大脑\" class=\"headerlink\" title=\"顺序的大脑\"></a>顺序的大脑</h4><p>回调不符合正常思维逻辑顺序 &amp; 回调地狱。</p>\n<h4 id=\"信任问题\"><a href=\"#信任问题\" class=\"headerlink\" title=\"信任问题\"></a>信任问题</h4><p><em>（本人并不完全赞同）</em>回调遭受着<em>控制反转</em>的蹂躏，它们隐含地将控制权交给第三方（通常第三方工具不受你控制！）来调用你程序的延续。</p>\n<h3 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h3><p>Promise的<code>then</code>和<code>catch</code>。</p>\n<h4 id=\"可靠的Promise\"><a href=\"#可靠的Promise\" class=\"headerlink\" title=\"可靠的Promise\"></a>可靠的Promise</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p3 = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>( <span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)&#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>( <span class=\"string\">&quot;B&quot;</span> );</span><br><span class=\"line\">&#125; );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>( <span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)&#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>( p3 );</span><br><span class=\"line\">&#125; );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>( <span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)&#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>( <span class=\"string\">&quot;A&quot;</span> );</span><br><span class=\"line\">&#125; );</span><br><span class=\"line\"></span><br><span class=\"line\">p1.<span class=\"title function_\">then</span>( <span class=\"keyword\">function</span>(<span class=\"params\">v</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( v );</span><br><span class=\"line\">&#125; );</span><br><span class=\"line\"></span><br><span class=\"line\">p2.<span class=\"title function_\">then</span>( <span class=\"keyword\">function</span>(<span class=\"params\">v</span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( v );</span><br><span class=\"line\">&#125; );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// A B  &lt;-- 不是你可能期望的 B A</span></span><br></pre></td></tr></table></figure>\n\n<p>这是因为p1由p3解析的结果所解析，这个过程是异步地。</p>\n<p>作者认为Promise在很大程度上，解决了下面的问题：</p>\n<ul>\n<li>调的太早&#x2F;太晚（本人并不赞同）</li>\n<li>根本不调回调（勉强成立），Promise通知状态改变是由编程者自己代码控制的，用<code>resolve</code>或<code>reject</code>（用户只能借助外部环境API发起异步操作，resolve一样要么放在传统的回调，要么转交给第三方完成）。</li>\n<li>调太少或太多次（成立），一个Promise一旦resolve或者reject，状态就不再发生变化</li>\n<li>没能传入任何参数&#x2F;环境（勉强成立），原因与第二条相同</li>\n<li>吞掉所有错误和异常（勉强成立），Promise中在catch字句里捕获异常。</li>\n</ul>\n<p><code>Promise.resolve(p)</code>会把thenable的入参<code>p</code>转换为合法的Promise。这里猜测下这个<code>resolve(p)</code>的实现（个人猜想）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"property\">resolve</span> = <span class=\"function\"><span class=\"params\">thenable</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// if `thenable` is a promise, just return it</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// if `thenable` is plain, just resolve</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> thenable.<span class=\"property\">then</span> != <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">resolve</span>(thenable);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        thenable.<span class=\"title function_\">then</span>(resolve, reject);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 一个thenable的例子</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> p = &#123;</span><br><span class=\"line\">    <span class=\"title function_\">then</span>(<span class=\"params\">cb, err</span>) &#123;</span><br><span class=\"line\">        <span class=\"title class_\">Math</span>.<span class=\"property\">random</span> &lt; <span class=\"number\">0.5</span> ? <span class=\"title function_\">cb</span>(<span class=\"number\">42</span>) : <span class=\"title function_\">err</span>(<span class=\"string\">&quot;oops! Something bad happens.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"链式调用\"><a href=\"#链式调用\" class=\"headerlink\" title=\"链式调用\"></a>链式调用</h4><p>看看RxJS的<a href=\"http://reactivex.io/rxjs/manual/overview.html\">Introduction</a>。就可以很轻松地理解Promise的流程和链式过程了。</p>\n<h4 id=\"Promise模式\"><a href=\"#Promise模式\" class=\"headerlink\" title=\"Promise模式\"></a>Promise模式</h4><p><code>Promise.all()</code>和<code>Promise.race()</code>。除了这两个官方钦定的方法外，其他的Promise库还实现了像是<code>any()</code>，<code>none()</code>，<code>first()</code>，<code>last()</code>这样的方法，看看RxJS的<a href=\"http://reactivex.io/rxjs/manual/overview.html#categories-of-operators\">operators</a>会有更多选择。</p>\n<h4 id=\"Promise的限制\"><a href=\"#Promise的限制\" class=\"headerlink\" title=\"Promise的限制\"></a>Promise的限制</h4><ul>\n<li>顺序的错误处理</li>\n<li>只能传单一的值（其实就是状态改变不可逆）</li>\n<li>单次解析（同上），文章也在<a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1ed-zh-CN/async%20%26%20performance/ch3.md#%E6%83%B0%E6%80%A7\">惰性</a>的上方提到了观察者模式的RxJS，的确在设计时间概念的领域，RxJS要厉害多了</li>\n<li>惰性（生产生产Promise函数的工厂函数）</li>\n<li>不可反悔（即不能中途撤销）</li>\n<li>性能</li>\n</ul>\n<h3 id=\"Generator\"><a href=\"#Generator\" class=\"headerlink\" title=\"Generator\"></a>Generator</h3><p>使用同步风格书写异步代码的基础在Generator。关于这部分的更详细介绍见本人之前参考阮一峰大神写的<a href=\"https://shenlvmeng.github.io/blog/2017/03/29/javascript-async-programming-2/\">博文</a></p>\n<h4 id=\"打破运行至完成\"><a href=\"#打破运行至完成\" class=\"headerlink\" title=\"打破运行至完成\"></a>打破运行至完成</h4><p>generator（生成器）是一个可以和别的代码穿插执行的非原子的特殊函数。使用<code>new</code>构造generator得到的只是一个迭代器，迭代器在执行到<code>yield</code>时会让出执行权。真正执行这个迭代器需要用调用或者执行器的方式。</p>\n<p>yield和next是generator可以和外部甚至是其他generator双向通信。但是generator只是声明了自己将要以什么样的形式去执行。还需要一个下面这样的帮助函数去推动它执行：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">step</span>(<span class=\"params\">gen</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> it = <span class=\"title function_\">gen</span>();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> last;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 不论`yield`出什么，只管在下一次时直接把它塞回去！</span></span><br><span class=\"line\">        last = it.<span class=\"title function_\">next</span>( last ).<span class=\"property\">value</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"生成器\"><a href=\"#生成器\" class=\"headerlink\" title=\"生成器\"></a>生成器</h4><ul>\n<li>可以把generator像状态机一样使用。</li>\n<li><code>for of</code>需要迭代器的实现</li>\n<li>可以在generator上使用<code>for of</code></li>\n<li>使用<code>return</code>而非<code>next</code>可以终止生成器执行</li>\n</ul>\n<h4 id=\"在异步流程中使用generator\"><a href=\"#在异步流程中使用generator\" class=\"headerlink\" title=\"在异步流程中使用generator\"></a>在异步流程中使用generator</h4><p>generator的yield暂停特性不仅意味着我们可以从异步的函数调用那里得到<em>看起来</em>同步的return值。</p>\n<h4 id=\"带有promise的generator\"><a href=\"#带有promise的generator\" class=\"headerlink\" title=\"带有promise的generator\"></a>带有promise的generator</h4><p>在ES6的世界中最棒的就是将generator（看似同步的异步代码）与Promise（可靠性和可组合性）组合起来。</p>\n<p>co与koa。</p>\n<p><strong>ES7中的await和async</strong></p>\n<p>像下面这样，没有<code>run</code>函数，没有生成器函数的<code>*</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">x,y</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">request</span>(</span><br><span class=\"line\">        <span class=\"string\">&quot;http://some.url.1/?x=&quot;</span> + x + <span class=\"string\">&quot;&amp;y=&quot;</span> + y</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">main</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> text = <span class=\"keyword\">await</span> <span class=\"title function_\">foo</span>( <span class=\"number\">11</span>, <span class=\"number\">31</span> );</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( text );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>( err );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">main</span>();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"yield委托\"><a href=\"#yield委托\" class=\"headerlink\" title=\"yield委托\"></a>yield委托</h4><p>使用<code>yield * foo</code>可以把其他的生成器函数整合进当前生成器中。除了生成器外，还可以委托一个非generator的iterator。错误可以委托，promise可以委托，委托还可以递归。</p>\n<p>结合yield可以很方便地协调多个generator</p>\n<h4 id=\"thunk\"><a href=\"#thunk\" class=\"headerlink\" title=\"thunk\"></a>thunk</h4><p>同步的thunk即包装了所有预设形参的函数执行的函数。异步thunk指需要指定callback的包装所有其他预设形参异步函数的函数。像下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 同步thunk</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">x,y</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fooThunk</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">foo</span>( <span class=\"number\">3</span>, <span class=\"number\">4</span> );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 异步thunk</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">x,y,cb</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>( <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"title function_\">cb</span>( x + y );</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span> );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fooThunk</span>(<span class=\"params\">cb</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">foo</span>( <span class=\"number\">3</span>, <span class=\"number\">4</span>, cb );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一旦来说会有一个工具thunkify帮你完成制造函数thunk的工作（放心，总会有人这么做的）。它的用法是下面这样的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fooThunkory = <span class=\"title function_\">thunkify</span>( foo );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fooThunk1 = <span class=\"title function_\">fooThunkory</span>( <span class=\"number\">3</span>, <span class=\"number\">4</span> );</span><br><span class=\"line\"><span class=\"keyword\">var</span> fooThunk2 = <span class=\"title function_\">fooThunkory</span>( <span class=\"number\">5</span>, <span class=\"number\">6</span> );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 稍后</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fooThunk1</span>( <span class=\"keyword\">function</span>(<span class=\"params\">sum</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( sum );     <span class=\"comment\">// 7</span></span><br><span class=\"line\">&#125; );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fooThunk2</span>( <span class=\"keyword\">function</span>(<span class=\"params\">sum</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( sum );     <span class=\"comment\">// 11</span></span><br><span class=\"line\">&#125; );</span><br></pre></td></tr></table></figure>\n\n<p>包装函数生产一个thunkory，之后指定除cb以外的其他参数得到thunk函数。</p>\n<p>thunk和Promise本质上其实是等价的。只不过是回调所在的为之不一样罢了。所以使用Promise.wrap包装得到的promise还是thunkify包装得到的thunk函数其实都可以yield出来。因为，它们都能通过指定回调来让generator进一步推动下去。</p>\n<p>当然了无论是在可组合性还是错误处理上，Promise都有更胜一筹。所以，thunk通常作为替代性的前ES6方案。</p>\n<h4 id=\"前ES6的Generator\"><a href=\"#前ES6的Generator\" class=\"headerlink\" title=\"前ES6的Generator\"></a>前ES6的Generator</h4><p>当然了Generator也是可以通过其他方式<a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1ed-zh-CN/async%20%26%20performance/ch4.md#%E5%89%8Des6%E6%97%B6%E4%BB%A3%E7%9A%84generator\">实现</a>的。</p>\n<h3 id=\"性能\"><a href=\"#性能\" class=\"headerlink\" title=\"性能\"></a>性能</h3><h4 id=\"Web-Worker\"><a href=\"#Web-Worker\" class=\"headerlink\" title=\"Web Worker\"></a>Web Worker</h4><p>近HTML5时代被加入web平台的特性，称为“Web Worker”。这是一个浏览器（也就是宿主环境）特性，而且几乎和JS语言本身没有任何关系。<a href=\"https://shenlvmeng.github.io/blog/2017/09/04/pwa-and-hybrid-brief/\">这里</a>简单说了下它和Service Worker的区别。</p>\n<h4 id=\"asm-js\"><a href=\"#asm-js\" class=\"headerlink\" title=\"asm.js\"></a>asm.js</h4><p>“<a href=\"http://asmjs.org/\">asm.js</a>”是可以被高度优化的JavaScript语言子集的标志。通过小心地回避那些特定的很难优化的（垃圾回收，强制转换，等等）机制和模式，asm.js风格的代码可以被JS引擎识别，而且用主动地底层优化进行特殊的处理。</p>\n<h3 id=\"基准分析（BenchMark）和调优\"><a href=\"#基准分析（BenchMark）和调优\" class=\"headerlink\" title=\"基准分析（BenchMark）和调优\"></a>基准分析（BenchMark）和调优</h3><ul>\n<li><a href=\"http://benchmarkjs.com/\">Benchmark.js</a>用统计学的方式避免时间戳测量语句性能时的不准确</li>\n<li><a href=\"http://jsperf.com/\">jsPerf.com</a>基于Benchmark.js的代码性能测试平台</li>\n</ul>\n<h4 id=\"编写好的测试\"><a href=\"#编写好的测试\" class=\"headerlink\" title=\"编写好的测试\"></a>编写好的测试</h4><ul>\n<li>注意上下文的影响</li>\n<li>“过早的优化是万恶之源”</li>\n<li>尾部调用优化</li>\n</ul>\n<h2 id=\"ES6与未来\"><a href=\"#ES6与未来\" class=\"headerlink\" title=\"ES6与未来\"></a>ES6与未来</h2><h3 id=\"ES？现在与未来\"><a href=\"#ES？现在与未来\" class=\"headerlink\" title=\"ES？现在与未来\"></a>ES？现在与未来</h3><ul>\n<li>polyfill与转译</li>\n</ul>\n<h3 id=\"语法-1\"><a href=\"#语法-1\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p>尽管ES6算是JS最新的官方特性，下面说的大部分特性已经被很经常地使用了。</p>\n<ul>\n<li>块作用域（之前的部分已经提到过了）</li>\n<li>扩散、剩余，<code>...</code>操作符，用在函数入参，数组和对象中</li>\n<li>函数默认参数值（是不是很神奇），默认参数值可以是合理的表达式甚至是函数调用</li>\n<li>解构赋值，也可以有默认参数值</li>\n<li>对象字面量拓展，简约声明&#x2F;简约方法&#x2F;getter，setter&#x2F;计算型属性名&#x2F;<code>__proto__</code>&#x2F;<code>super</code></li>\n<li><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1ed-zh-CN/es6%20%26%20beyond/ch2.md#%E6%A8%A1%E6%9D%BF%E5%AD%97%E9%9D%A2%E9%87%8F\">模板字面量</a></li>\n<li>箭头函数，词法<code>this</code></li>\n<li><code>for of</code>和iterator</li>\n<li>正则表达式拓展<ul>\n<li>Unicode标识</li>\n<li>粘性标志</li>\n</ul>\n</li>\n<li>数字，八进制</li>\n<li>Unicode<ul>\n<li>合理的string长度，<code>String.prototype.normalize()</code></li>\n<li><code>charCodeAt</code> &#x3D;&gt; <code>codePointAt</code></li>\n<li><code>fromCharCode</code> &#x3D;&gt; <code>fromCodePoint</code></li>\n<li>Unicode标识符名称</li>\n</ul>\n</li>\n<li>Symbol，新的基本类型，它是一个新的包装器对象，可以认为每个<code>EVT_LOGIN</code>持有一个不能被其他任何值所（有意或无意地）重复的值。<ul>\n<li><code>Symbol.for()</code>先查询是否有一个同名的Symbol，如果有就返回，没有就创建一个</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"组织\"><a href=\"#组织\" class=\"headerlink\" title=\"组织\"></a>组织</h3><h4 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h4><p>迭代器<code>Iterator</code>接口有一个必选接口<code>next()</code>，和两个可选接口<code>return()</code>和<code>throw()</code>，它的result被规定为包括属性<code>value</code>和<code>done</code>，下面是一个数组的迭代：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> it = arr[<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>]();</span><br><span class=\"line\"></span><br><span class=\"line\">it.<span class=\"title function_\">next</span>();      <span class=\"comment\">// &#123; value: 1, done: false &#125;</span></span><br><span class=\"line\">it.<span class=\"title function_\">next</span>();      <span class=\"comment\">// &#123; value: 2, done: false &#125;</span></span><br><span class=\"line\">it.<span class=\"title function_\">next</span>();      <span class=\"comment\">// &#123; value: 3, done: false &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">it.<span class=\"title function_\">next</span>();      <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>但通常使用<code>for of</code>就足够了。我们可以依照这个接口，定义一个自己的迭代器：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Fib</span> = &#123;</span><br><span class=\"line\">    [<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>]() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> n1 = <span class=\"number\">1</span>, n2 = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 使迭代器成为一个可迭代对象</span></span><br><span class=\"line\">            [<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>]() &#123; <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>; &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"title function_\">next</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> current = n2;</span><br><span class=\"line\">                n2 = n1;</span><br><span class=\"line\">                n1 = n1 + current;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> &#123; <span class=\"attr\">value</span>: current, <span class=\"attr\">done</span>: <span class=\"literal\">false</span> &#125;;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span>(v) &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(</span><br><span class=\"line\">                    <span class=\"string\">&quot;Fibonacci sequence abandoned.&quot;</span></span><br><span class=\"line\">                );</span><br><span class=\"line\">                <span class=\"keyword\">return</span> &#123; <span class=\"attr\">value</span>: v, <span class=\"attr\">done</span>: <span class=\"literal\">true</span> &#125;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Generator-1\"><a href=\"#Generator-1\" class=\"headerlink\" title=\"Generator\"></a>Generator</h4><p>这个上一章已经提到了。它可以用来：</p>\n<ul>\n<li>生产一系列值，即状态机</li>\n<li>串行执行的任务队列，化<em>异步</em>为<em>同步</em></li>\n</ul>\n<h4 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h4><p><code>import</code>和<code>export</code></p>\n<h4 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h4><ul>\n<li>ES6引入了元属性的概念，用<code>new.target</code>表示。在任意的构造器中，<code>new.target</code>总是指向<code>new</code>实际直接调用的构造器。</li>\n</ul>\n<h3 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h3><p><strong>ArrayBuffer</strong></p>\n<p>它表示一组比特位，但是这些比特的实际意义是由结构化数组控制的，由它表示这些比特上的“视图”究竟是8位有符号整数还是字符串。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> buf = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayBuffer</span>( <span class=\"number\">32</span> );</span><br><span class=\"line\">buf.<span class=\"property\">byteLength</span>;                     <span class=\"comment\">// 32字节</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> <span class=\"title class_\">Uint16Array</span>( buf );</span><br><span class=\"line\">arr.<span class=\"property\">length</span>;                         <span class=\"comment\">// 16</span></span><br></pre></td></tr></table></figure>\n\n<p>一个单独的缓冲可以连接多个视图</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> buf = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayBuffer</span>( <span class=\"number\">2</span> );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> view8 = <span class=\"keyword\">new</span> <span class=\"title class_\">Uint8Array</span>( buf );</span><br><span class=\"line\"><span class=\"keyword\">var</span> view16 = <span class=\"keyword\">new</span> <span class=\"title class_\">Uint16Array</span>( buf );</span><br><span class=\"line\"></span><br><span class=\"line\">view16[<span class=\"number\">0</span>] = <span class=\"number\">3085</span>;</span><br><span class=\"line\">view8[<span class=\"number\">0</span>];                       <span class=\"comment\">// 13</span></span><br><span class=\"line\">view8[<span class=\"number\">1</span>];                       <span class=\"comment\">// 12</span></span><br></pre></td></tr></table></figure>\n\n<p>在ES6中可以使用下面的类型化数组构造器：</p>\n<ul>\n<li>Int8Array（8位有符号整数），Uint8Array（8位无符号整数）</li>\n<li>Uint8ClampedArray（8位无符号整数，每个值都被卡在0 - 255范围内）</li>\n<li>Int16Array（16位有符号整数），Uint16Array（16位无符号整数）</li>\n<li>Int32Array（32位有符号整数），Uint32Array（32位无符号整数）</li>\n<li>Float32Array（32位浮点数，IEEE-754）</li>\n<li>Float64Array（64位浮点数，IEEE-754）</li>\n</ul>\n<p><strong>Maps</strong></p>\n<p>摆脱对象只能使用字符串做键值的限制。有<code>get</code>、<code>set</code>、<code>delete</code>、<code>has</code>、<code>clear</code>等方法。类似地还有WeakMap，不过它只能使用对象做键。</p>\n<p><strong>Sets</strong></p>\n<p>一个集合。类似Map，不过<code>set</code>换成了<code>add</code>，且没有<code>get</code>。Set和Map都有自己的迭代器。也可以通过<code>keys</code>，<code>values</code>，<code>entries</code>来访问里面的内容。</p>\n<h3 id=\"新增API-amp-元编程\"><a href=\"#新增API-amp-元编程\" class=\"headerlink\" title=\"新增API &amp; 元编程\"></a>新增API &amp; 元编程</h3><p>略，参考<a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1ed-zh-CN/es6%20%26%20beyond/ch6.md\">原文</a></p>\n<h3 id=\"ES6以后\"><a href=\"#ES6以后\" class=\"headerlink\" title=\"ES6以后\"></a>ES6以后</h3><ul>\n<li>asnyc function</li>\n<li><code>Object.observe</code></li>\n<li>指数运算符<code>**</code></li>\n<li><code>Array#includes</code>替代<code>~Array.indexOf(value)</code></li>\n<li>SIMD（多个数据），用于多个元素的并行数学操作，参考下面<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> v1 = <span class=\"variable constant_\">SIMD</span>.<span class=\"title function_\">float32x4</span>( <span class=\"number\">3.14159</span>, <span class=\"number\">21.0</span>, <span class=\"number\">32.3</span>, <span class=\"number\">55.55</span> );</span><br><span class=\"line\"><span class=\"keyword\">var</span> v2 = <span class=\"variable constant_\">SIMD</span>.<span class=\"title function_\">float32x4</span>( <span class=\"number\">2.1</span>, <span class=\"number\">3.2</span>, <span class=\"number\">4.3</span>, <span class=\"number\">5.4</span> );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable constant_\">SIMD</span>.<span class=\"property\">float32x4</span>.<span class=\"title function_\">mul</span>( v1, v2 );</span><br><span class=\"line\"><span class=\"comment\">// [ 6.597339, 67.2, 138.89, 299.97 ]</span></span><br></pre></td></tr></table></figure></li>\n<li>WASM（Web Assembly）</li>\n</ul>\n<p><em>-END-</em></p>\n",
            "tags": [
                "读书笔记",
                "JavaScript"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2017/12/13/you-dont-know-js-part1/",
            "url": "http://shenlvmeng.github.com/blog/2017/12/13/you-dont-know-js-part1/",
            "title": "《You don't know JS》 上（入门&作用域&对象）",
            "date_published": "2017-12-13T12:54:12.000Z",
            "content_html": "<blockquote>\n<p>原作：<a href=\"https://github.com/getify/You-Dont-Know-JS\">You-Dont-Know-JS</a><br>本文的99.9%的内容都来自《You dont know JS》的<a href=\"https://github.com/getify/You-Dont-Know-JS/tree/1ed-zh-CN\">电子中文版</a></p>\n<p>传送门：<a href=\"https://shenlvmeng.github.io/blog/2017/12/15/you-dont-know-js-part2/\">《You don’t know JS》 下（类型文法&amp;异步&amp;ES6与未来）</a></p>\n</blockquote>\n<h2 id=\"入门与进阶\"><a href=\"#入门与进阶\" class=\"headerlink\" title=\"入门与进阶\"></a>入门与进阶</h2><h3 id=\"值和类型\"><a href=\"#值和类型\" class=\"headerlink\" title=\"值和类型\"></a>值和类型</h3><p>JavaScript只有带类型的值，没有带类型的变量。大家都知道JS的基本类型共6类：</p>\n<ul>\n<li>undefined</li>\n<li>null</li>\n<li>boolean</li>\n<li>number</li>\n<li>string</li>\n<li>object</li>\n</ul>\n<p>但是在ES6之后，需要新增一类<code>symbol</code>。另外，对null使用<code>typeof</code>将得到“object”的结果。</p>\n<p>JavaScript中对“falsy”的定义包括：</p>\n<ul>\n<li>“”</li>\n<li>0, -0, NaN</li>\n<li>null, undefined</li>\n<li>false</li>\n</ul>\n<p>除此之外的值都是truthy。</p>\n<p>关于JavaScript中的<code>==</code>和<code>===</code>，作者的看法是在必要的时候<code>==</code>会很好地改善程序。然而<code>==</code>的<a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3\">判断规则</a>比较复杂，可以总结出一些情况便于我们选择是否使用<code>==</code>：</p>\n<ul>\n<li>如果一个比较的两个值之一可能是<code>true</code>或<code>false</code>，避免&#x3D;&#x3D;而使用&#x3D;&#x3D;&#x3D;。</li>\n<li>如果一个比较的两个值之一可能是<code>0</code>&#x2F;<code>&quot;&quot;</code>&#x2F;<code>[]</code>，避免&#x3D;&#x3D;而使用&#x3D;&#x3D;&#x3D;。</li>\n<li>其他情况下，放心使用<code>==</code>。不仅安全，在许多情况下它可以简化你的代码并改善可读性。</li>\n</ul>\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>一个变量标识符必须以a-z，A-Z，$，或<code>_</code>开头。它可以包含任意这些字符外加数字0-9，但不能使用保留字。</p>\n<p>变量作用域提升（var定义）和嵌套就不多说了。</p>\n<h3 id=\"Strict模式\"><a href=\"#Strict模式\" class=\"headerlink\" title=\"Strict模式\"></a>Strict模式</h3><p>让代码更严谨，同样可以选择用在全局或是函数中。</p>\n<h3 id=\"函数作为值\"><a href=\"#函数作为值\" class=\"headerlink\" title=\"函数作为值\"></a>函数作为值</h3><p><strong>IIFE</strong>（立即执行函数）和<strong>闭包</strong>是JS中值得玩味的特性。除了使用<code>()</code>包裹，还可以用<code>void</code>打头开始一个IIFE。</p>\n<p>闭包经常用来包装模块。</p>\n<h3 id=\"this指代和prototype\"><a href=\"#this指代和prototype\" class=\"headerlink\" title=\"this指代和prototype\"></a>this指代和prototype</h3><p>略</p>\n<h3 id=\"新的特性\"><a href=\"#新的特性\" class=\"headerlink\" title=\"新的特性\"></a>新的特性</h3><p>填充（polyfill）和转译（transpile）</p>\n<h2 id=\"作用域与闭包\"><a href=\"#作用域与闭包\" class=\"headerlink\" title=\"作用域与闭包\"></a>作用域与闭包</h2><h3 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h3><p>作用域与LHS，RHS。在非Strict模式下，如果到全局作用域还找不到变量，会在作用域内创建一个新的同名变量。在Strict模式下，不允许这种行为（意外地创建全局变量），此时会抛出ReferenceError，即找不到变量。如果找到了值，但是并不能对它做一些事情，就会抛出TypeError。</p>\n<h3 id=\"词法作用域\"><a href=\"#词法作用域\" class=\"headerlink\" title=\"词法作用域\"></a>词法作用域</h3><p>JavaScript使用词法作用域，即变量和作用域在编写代码阶段已经确定。JS引擎也可以在这个阶段针对作用域和变量对代码进行优化，但是<code>eval()</code>和<code>with()</code>会在代码中动态改变作用域，从而使得引擎无法进行优化，使代码运行得更慢。在strict模式下，<code>eval()</code>的不安全用法（修改作用域）以及<code>with()</code>都是不允许使用的。</p>\n<p>词法作用域是编写时的，而动态作用域（和this）是运行时的。词法作用域关心的是函数<strong>在何处被声明</strong>，但是动态作用域关心的是函数<strong>从何处被调用</strong>。</p>\n<p><code>this</code>在JS中始终是运行时的，即根据运行时的调用情况有不同的值。在<strong>箭头函数</strong>中则是词法this的，即声明时决定。</p>\n<h3 id=\"块作用域\"><a href=\"#块作用域\" class=\"headerlink\" title=\"块作用域\"></a>块作用域</h3><p>封装、匿名函数、IIFE。</p>\n<p>for循环、if、while、switch等流程控制语句的<code>&#123;&#125;</code>，都是<em>假的</em>块作用域，其中的内容都依附于外部的函数作用域。with（不建议使用），try catch，let，const可以形成新的块作用域。</p>\n<p>在ES6到ES5的转译时，具有块作用域的代码，会采用<code>try catch</code>来实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES6</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES5</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(a) &#123;</span><br><span class=\"line\">    a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"提升\"><a href=\"#提升\" class=\"headerlink\" title=\"提升\"></a>提升</h3><ul>\n<li>在代码被执行前，所有的声明，变量和函数，都会首先被处理。处理的只有“声明”，而没有“赋值”。</li>\n<li>函数提升优先于变量的提升</li>\n<li>后续的提升会覆盖此前的同名提升</li>\n</ul>\n<h3 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h3><blockquote>\n<p>闭包就是函数能够记住并访问它的词法作用域，即使当这个函数在它的词法作用域之外执行时。</p>\n</blockquote>\n<p>循环加闭包会出现面试中的经典问题：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>; i&lt;=<span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>( <span class=\"keyword\">function</span> <span class=\"title function_\">timer</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( i );</span><br><span class=\"line\">    &#125;, i*<span class=\"number\">1000</span> );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码为啥不好用？</p>\n<p>从之前关于作用域的讨论来看，每次setTimeout只是完成了函数声明，并丢进队列里而已。当定时器函数在其词法作用域外执行时，因为闭包的特点会保留有父级的作用域。而这5个函数都定义在同一个父级函数作用域内，对变量i的引用自然是同一个了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">1</span>; i&lt;=<span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    (<span class=\"keyword\">function</span>(<span class=\"params\">j</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>( <span class=\"keyword\">function</span> <span class=\"title function_\">timer</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( j );</span><br><span class=\"line\">        &#125;, j*<span class=\"number\">1000</span> );</span><br><span class=\"line\">    &#125;)( i );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>有IIFE的加持，父级作用域现在变成了每个IIFE而非for循环所在的作用域。即每个变量i来自不同的独立作用域，自然就可以得到理想的效果了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i=<span class=\"number\">1</span>; i&lt;=<span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>( <span class=\"keyword\">function</span> <span class=\"title function_\">timer</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( i );</span><br><span class=\"line\">    &#125;, i*<span class=\"number\">1000</span> );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不就是想要个块作用域嘛，使用<code>let</code>关键字后变量将不是只为循环声明一次，而是为每次迭代声明一次。每次都能得到一个新的块作用域，自然得到和IIFE一样的效果。</p>\n<h2 id=\"this与对象\"><a href=\"#this与对象\" class=\"headerlink\" title=\"this与对象\"></a><code>this</code>与对象</h2><h3 id=\"this是什么\"><a href=\"#this是什么\" class=\"headerlink\" title=\"this是什么\"></a><code>this</code>是什么</h3><p>也许JS已经入门的前端程序员们早就对this在不同环境下的不同值烂熟在心。但可能没有想过这种情况的本质：上一部分提到的<strong>JS中的this是运行时的</strong>，和作用域完全不一样。</p>\n<p>对比一下按照传统OOP理解下的JS代码，从不同的角度看，能进一步得到对this的认识：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">bar</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">bar</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( <span class=\"variable language_\">this</span>.<span class=\"property\">a</span> );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>(); <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( <span class=\"string\">&quot;foo: &quot;</span> + num );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 追踪 `foo` 被调用了多少次</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">count</span>++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo.<span class=\"property\">count</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">foo</span>( i );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// foo: 6</span></span><br><span class=\"line\"><span class=\"comment\">// foo: 7</span></span><br><span class=\"line\"><span class=\"comment\">// foo: 8</span></span><br><span class=\"line\"><span class=\"comment\">// foo: 9</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// `foo` 被调用了多少次？</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( foo.<span class=\"property\">count</span> ); <span class=\"comment\">// 0 -- 这他妈怎么回事……？</span></span><br></pre></td></tr></table></figure>\n\n<p>虽然看上去很愚蠢，但是从词法作用域的角度去理解，是不是能更清楚看到JS中<code>this</code>的特殊之处。</p>\n<h3 id=\"this豁然开朗\"><a href=\"#this豁然开朗\" class=\"headerlink\" title=\"this豁然开朗\"></a><code>this</code>豁然开朗</h3><p>根据上面的描述，<code>this</code>是根据调用点确定含义的。下面的4个规则，在准备JS面试的时候肯定都见过：</p>\n<ul>\n<li>默认绑定，独立函数调用。可以认为这种this规则是在没有其他规则适用时的默认规则。此时<code>this</code>指向全局对象，在strict mode下，<code>this</code>指向undefined。</li>\n<li>隐含绑定，调用点有一个环境对象，即作为函数方法，但是下面的情况下会回退到默认绑定，因为调用点实际位于独立函数内<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( <span class=\"variable language_\">this</span>.<span class=\"property\">a</span> );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"attr\">foo</span>: foo</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = obj.<span class=\"property\">foo</span>; <span class=\"comment\">// 函数引用！</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&quot;oops, global&quot;</span>; <span class=\"comment\">// `a`也是一个全局对象的属性</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">bar</span>(); <span class=\"comment\">// &quot;oops, global&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( <span class=\"variable language_\">this</span>.<span class=\"property\">a</span> );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">========</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">doFoo</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// `fn` 只不过 `foo` 的另一个引用</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">fn</span>(); <span class=\"comment\">// &lt;-- 调用点!</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"attr\">foo</span>: foo</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">&quot;oops, global&quot;</span>; <span class=\"comment\">// `a`也是一个全局对象的属性</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">doFoo</span>( obj.<span class=\"property\">foo</span> ); <span class=\"comment\">// &quot;oops, global&quot;</span></span><br></pre></td></tr></table></figure></li>\n<li>显式绑定，<code>call</code>与<code>apply</code>可以显式attach context到函数上，使用<code>bind</code>可以避免前面那种<code>this</code>丢失的情况。</li>\n<li>new绑定，函数作为构造函数调用时，<code>this</code>指向即将返回的新对象。</li>\n</ul>\n<p>从优先级上看，new &gt; 硬绑定 &gt; 隐含绑定 &gt; 默认绑定。其中“new &gt; 硬绑定”有趣的一点是，使用<code>bind</code>在第一个后的参数实际上会作为函数的默认入参（类似于函数柯里化），如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">p1,p2</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">val</span> = p1 + p2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在这里使用 `null` 是因为在这种场景下我们不关心 `this` 的硬绑定</span></span><br><span class=\"line\"><span class=\"comment\">// 而且反正它将会被 `new` 调用覆盖掉！</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = foo.<span class=\"title function_\">bind</span>( <span class=\"literal\">null</span>, <span class=\"string\">&quot;p1&quot;</span> );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> baz = <span class=\"keyword\">new</span> <span class=\"title function_\">bar</span>( <span class=\"string\">&quot;p2&quot;</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">baz.<span class=\"property\">val</span>; <span class=\"comment\">// p1p2</span></span><br></pre></td></tr></table></figure>\n\n<p>除了上面的规则，还有一些特例：</p>\n<p>传递<code>null</code>或<code>undefined</code>给<code>call</code>，<code>apply</code>或<code>bind</code>时，那么这些值会被忽略掉，取而代之的是<strong>默认绑定</strong>规则将适用于这个调用。单纯使用apply数组化输入参数（现在已经可以用<code>[...foo]</code>了）和bind柯里化函数时常用到。</p>\n<p>不过，这么做还是有风险，建议用<code>Object.create(null)</code>创建的对象替代<code>null</code>，既能表示无意义的值，又能避免<strong>默认绑定</strong>的行为。</p>\n<p>作者给出了软绑定的工具方法，提高了硬绑定的灵活性，又避免了<strong>默认绑定</strong>的问题。逻辑是在绑定时检查<code>this</code>是否是全局对象，如果是才使用输入的<code>this</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">softBind</span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">softBind</span> = <span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> fn = <span class=\"variable language_\">this</span>,</span><br><span class=\"line\">            curried = [].<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>( <span class=\"variable language_\">arguments</span>, <span class=\"number\">1</span> ),</span><br><span class=\"line\">            bound = <span class=\"keyword\">function</span> <span class=\"title function_\">bound</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> fn.<span class=\"title function_\">apply</span>(</span><br><span class=\"line\">                    (!<span class=\"variable language_\">this</span> ||</span><br><span class=\"line\">                        (<span class=\"keyword\">typeof</span> <span class=\"variable language_\">window</span> !== <span class=\"string\">&quot;undefined&quot;</span> &amp;&amp;</span><br><span class=\"line\">                            <span class=\"variable language_\">this</span> === <span class=\"variable language_\">window</span>) ||</span><br><span class=\"line\">                        (<span class=\"keyword\">typeof</span> <span class=\"variable language_\">global</span> !== <span class=\"string\">&quot;undefined&quot;</span> &amp;&amp;</span><br><span class=\"line\">                            <span class=\"variable language_\">this</span> === <span class=\"variable language_\">global</span>)</span><br><span class=\"line\">                    ) ? obj : <span class=\"variable language_\">this</span>,</span><br><span class=\"line\">                    curried.<span class=\"property\">concat</span>.<span class=\"title function_\">apply</span>( curried, <span class=\"variable language_\">arguments</span> )</span><br><span class=\"line\">                );</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        bound.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>( fn.<span class=\"property\"><span class=\"keyword\">prototype</span></span> );</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bound;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>另外，前面提到的箭头函数具有词法<code>this</code>，等同在调用前声明<code>self = this</code>，再把<code>self</code>传入的效果。</p>\n<h3 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h3><p>内建对象中，只有<code>Date()</code>是必须要使用<code>new</code>创建的。</p>\n<p>对象的属性有两种访问方法：<code>.</code>操作符或<code>[ ]</code>操作符。不同的是<code>.</code>操作符后只能使用标识符兼容的属性名，<code>[...]</code>操作符后可以使用任何合理的UTF-8的字符串。另外，对象的属性名总是字符串，如果使用了其他类型值，会进行强制转换：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myObject = &#123; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">myObject[<span class=\"literal\">true</span>] = <span class=\"string\">&quot;foo&quot;</span>;</span><br><span class=\"line\">myObject[<span class=\"number\">3</span>] = <span class=\"string\">&quot;bar&quot;</span>;</span><br><span class=\"line\">myObject[myObject] = <span class=\"string\">&quot;baz&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">myObject[<span class=\"string\">&quot;true&quot;</span>];               <span class=\"comment\">// &quot;foo&quot;</span></span><br><span class=\"line\">myObject[<span class=\"string\">&quot;3&quot;</span>];                  <span class=\"comment\">// &quot;bar&quot;</span></span><br><span class=\"line\">myObject[<span class=\"string\">&quot;[object Object]&quot;</span>];    <span class=\"comment\">// &quot;baz&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"计算型属性名\"><a href=\"#计算型属性名\" class=\"headerlink\" title=\"计算型属性名\"></a>计算型属性名</h4><p>ES6中新增了<em>计算型属性名</em>，允许使用表达式作为一个键名称，表达式用<code>[ ]</code>括起来。像下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> prefix = <span class=\"string\">&quot;foo&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> myObject = &#123;</span><br><span class=\"line\">    [prefix + <span class=\"string\">&quot;bar&quot;</span>]: <span class=\"string\">&quot;hello&quot;</span>,</span><br><span class=\"line\">    [prefix + <span class=\"string\">&quot;baz&quot;</span>]: <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">myObject[<span class=\"string\">&quot;foobar&quot;</span>]; <span class=\"comment\">// hello</span></span><br><span class=\"line\">myObject[<span class=\"string\">&quot;foobaz&quot;</span>]; <span class=\"comment\">// world</span></span><br></pre></td></tr></table></figure>\n\n<p>深、浅复制与对象属性描述符（description），<code>writable</code>和<code>configurable</code>，<code>getOwnPropertyDescriptor()</code>与<code>defineProperty()</code>。在JS中，<code>delete</code>仅用于直接从目标对象移除该对象的（可以被移除的）属性，与释放内存并无直接关系。</p>\n<h4 id=\"Immutability\"><a href=\"#Immutability\" class=\"headerlink\" title=\"Immutability\"></a>Immutability</h4><p><strong>注意：所有这些方法创建的都是浅不可变性。也就是，它们仅影响对象和它的直属属性的性质。如果对象拥有对其他对象（数组、对象、函数等）的引用，那个对象的内容不会受影响，任然保持可变</strong>。</p>\n<p>属性描述符里的<code>writable</code>和<code>configuratable</code>限制了对属性和属性值的修改。<code>preventExtensions()</code>方法可以防止对象被添加新属性。</p>\n<ul>\n<li><code>seal()</code> &#x3D; <code>configuratable: false</code> + <code>preventExtensions()</code></li>\n<li><code>freeze()</code> &#x3D; <code>seal()</code> + <code>writable: false</code></li>\n</ul>\n<h4 id=\"getter与setter\"><a href=\"#getter与setter\" class=\"headerlink\" title=\"getter与setter\"></a>getter与setter</h4><p>除了使用<code>defineProperty</code>外，可以直接用字面量的形式，通过<code>get prop1()</code>或<code>set prop1(val)</code>的形式设置getter和setter。</p>\n<p><code>for in</code>和<code>for of</code>。</p>\n<h3 id=\"混合（淆）“类”的对象\"><a href=\"#混合（淆）“类”的对象\" class=\"headerlink\" title=\"混合（淆）“类”的对象\"></a>混合（淆）“类”的对象</h3><blockquote>\n<p>有些语言（比如Java）不给你选择，所以这根本没什么 选择性 —— 一切都是类。其他语言如C&#x2F;C++或PHP同时给你过程式和面向类的语法，在使用哪种风格合适或混合风格上，留给开发者更多选择。</p>\n</blockquote>\n<p><strong>类意味着拷贝。</strong></p>\n<p>当一个传统的类被实例化时，就发生了类的行为向实例中拷贝。当类被继承时，也发生父类的行为向子类的拷贝。多态也是拷贝行为的结果。</p>\n<p>但是：</p>\n<ul>\n<li>第一，JavaScript并<strong>不会</strong>自动地 （像类那样）在对象间创建拷贝；</li>\n<li>第二，显式mixin只能复制函数或对象的<strong>引用</strong>，而不是自身。</li>\n</ul>\n<blockquote>\n<p>正如我们在第四章讲解的，在 JavaScript 中，对于对象来说没有抽象模式&#x2F;蓝图，即没有面向类的语言中那样的称为类的东西。JavaScript 只有 对象。</p>\n<p>实际上，在所有语言中，JavaScript 几乎是独一无二的，也许是唯一的可以被称为“面向对象”的语言，因为可以根本没有类而直接创建对象的语言很少，而 JavaScript 就是其中之一。</p>\n<p>在 JavaScript 中，类不能（因为根本不存在）描述对象可以做什么。对象直接定义它自己的行为。这里 仅有 对象。</p>\n<p>总之，JavaScript中面向对象的部分和大多数OOP语言不完全一样。这使得在JS中模拟类编程将既累又会埋下很多坑。</p>\n</blockquote>\n<h3 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a>原型</h3><p>使用<code>[[get]]</code>查询属性时，也会在<code>[[prototype]]</code>链上寻找，因此修改对象属性的时候，应该注意<strong>属性遮蔽</strong>（即在<code>[[prototype]]</code>中找到）的情况。它会增加代码的复杂度和可读性，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> anotherObject = &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: <span class=\"number\">2</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> myObject = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>( anotherObject );</span><br><span class=\"line\"></span><br><span class=\"line\">anotherObject.<span class=\"property\">a</span>; <span class=\"comment\">// 2</span></span><br><span class=\"line\">myObject.<span class=\"property\">a</span>; <span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\">anotherObject.<span class=\"title function_\">hasOwnProperty</span>( <span class=\"string\">&quot;a&quot;</span> ); <span class=\"comment\">// true</span></span><br><span class=\"line\">myObject.<span class=\"title function_\">hasOwnProperty</span>( <span class=\"string\">&quot;a&quot;</span> ); <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\">myObject.<span class=\"property\">a</span>++; <span class=\"comment\">// 噢，隐式遮蔽！</span></span><br><span class=\"line\"></span><br><span class=\"line\">anotherObject.<span class=\"property\">a</span>; <span class=\"comment\">// 2</span></span><br><span class=\"line\">myObject.<span class=\"property\">a</span>; <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\">myObject.<span class=\"title function_\">hasOwnProperty</span>( <span class=\"string\">&quot;a&quot;</span> ); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>在<code>for in</code>循环中，同样注意用<code>hasOwnProperty()</code>排除<code>[[prototype]]</code>上的属性。</p>\n<p>所有用<code>constructor</code>构建的对象都有所指向的prototype，而在prototype中的<code>.constructor</code>又会指回<code>constructor</code>。但是这个关系是可以被覆盖的。</p>\n<h3 id=\"原型继承\"><a href=\"#原型继承\" class=\"headerlink\" title=\"原型继承\"></a>原型继承</h3><p>作者认为，JS中的对象是通过链接组织起来的。说是原型继承，实际上就是在两个原型间建立了<code>[[prototype]]</code>的关系。这个关系的建立方法很多，各有优劣。最简单的还是用ES5提供的<code>Object.create()</code>方法，对<code>__proto__</code>和<code>constructor</code>等视而不见。它的polyfill像下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"title class_\">Object</span>.<span class=\"property\">create</span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"property\">create</span> = <span class=\"keyword\">function</span>(<span class=\"params\">o</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">function</span> <span class=\"title function_\">F</span>(<span class=\"params\"></span>)&#123;&#125;</span><br><span class=\"line\">        F.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = o;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title function_\">F</span>();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>另外，<code>Object.create()</code>第一个后面的参数可以用来声明对象属性描述符，不过用得不多。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><blockquote>\n<p>虽然这些JavaScript机制看起来和传统面向类语言的“初始化类”和“类继承”类似，而在JavaScript中的关键区别是，没有拷贝发生。取而代之的是对象最终通过<code>[[Prototype]]</code>链链接在一起。</p>\n<p>相反，“委托”是一个更确切的术语，因为这些关系不是拷贝而是委托链接。</p>\n</blockquote>\n<p>从这个角度去看<code>new Foo()</code>过程中发生的事，除了返回一个新的对象外，<code>Foo()</code>还会将这个对象和<code>Foo.prototype</code>链接起来（通过指定<code>[[prototype]]</code>），<code>Foo.prototype</code>和别的对象并没有本质区别。</p>\n<h3 id=\"行为委托\"><a href=\"#行为委托\" class=\"headerlink\" title=\"行为委托\"></a>行为委托</h3><p>在上面一章提到，<code>[[prototype]]</code>是存在于对象内部的引用另一个对象的内部连接。当一个属性&#x2F;方法引用在一个对象上发生，而这样的属性&#x2F;方法又不存在时，这个链接就会被使用。在这种情况下，<code>[[Prototype]]</code>链接告诉引擎去那个被链接的对象上寻找该属性&#x2F;方法。接下来，如果那个对象也不能满足查询，就沿着它的<code>[[Prototype]]</code>查询，如此继续。这种对象间的一系列链接构成了所谓的“原形链”。</p>\n<p>其重要的实质<strong>全部在于被连接到其他对象的对象</strong>。</p>\n<p>下面是一段OLOO（链接到其他对象的对象）风格的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Task</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">setID</span>: <span class=\"keyword\">function</span>(<span class=\"params\">ID</span>) &#123; <span class=\"variable language_\">this</span>.<span class=\"property\">id</span> = <span class=\"variable constant_\">ID</span>; &#125;,</span><br><span class=\"line\">    <span class=\"attr\">outputID</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( <span class=\"variable language_\">this</span>.<span class=\"property\">id</span> ); &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使 `XYZ` 委托到 `Task`</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"variable constant_\">XYZ</span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>( <span class=\"title class_\">Task</span> );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable constant_\">XYZ</span>.<span class=\"property\">prepareTask</span> = <span class=\"keyword\">function</span>(<span class=\"params\">ID,Label</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setID</span>( <span class=\"variable constant_\">ID</span> );</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">label</span> = <span class=\"title class_\">Label</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable constant_\">XYZ</span>.<span class=\"property\">outputTaskDetails</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">outputID</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( <span class=\"variable language_\">this</span>.<span class=\"property\">label</span> );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n\n<p>它的特点在于：</p>\n<ul>\n<li>状态保留在委托者上</li>\n<li>避免<code>[[prototype]]</code>链上的重复命名</li>\n<li>行为委托用在内部实现，避免暴露在API的设计上</li>\n</ul>\n<p><strong>思维的转变</strong></p>\n<p>放弃传统OO思路在JS中的蹩脚实现（像下面这样），抓住<code>[[prototype]]</code>链接对象以及“原型链”的特殊性，可以让思路更加自然且符合JS的特点（像下面的下面那样）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Foo</span>(<span class=\"params\">who</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">me</span> = who;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Foo</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">identify</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;I am &quot;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">me</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Bar</span>(<span class=\"params\">who</span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Foo</span>.<span class=\"title function_\">call</span>( <span class=\"variable language_\">this</span>, who );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Bar</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>( <span class=\"title class_\">Foo</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Bar</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">speak</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>( <span class=\"string\">&quot;Hello, &quot;</span> + <span class=\"variable language_\">this</span>.<span class=\"title function_\">identify</span>() + <span class=\"string\">&quot;.&quot;</span> );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Bar</span>( <span class=\"string\">&quot;b1&quot;</span> );</span><br><span class=\"line\"><span class=\"keyword\">var</span> b2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Bar</span>( <span class=\"string\">&quot;b2&quot;</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">b1.<span class=\"title function_\">speak</span>();</span><br><span class=\"line\">b2.<span class=\"title function_\">speak</span>();</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Foo</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">init</span>: <span class=\"keyword\">function</span>(<span class=\"params\">who</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">me</span> = who;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">identify</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;I am &quot;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">me</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Bar</span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>( <span class=\"title class_\">Foo</span> );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Bar</span>.<span class=\"property\">speak</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>( <span class=\"string\">&quot;Hello, &quot;</span> + <span class=\"variable language_\">this</span>.<span class=\"title function_\">identify</span>() + <span class=\"string\">&quot;.&quot;</span> );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b1 = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>( <span class=\"title class_\">Bar</span> );</span><br><span class=\"line\">b1.<span class=\"title function_\">init</span>( <span class=\"string\">&quot;b1&quot;</span> );</span><br><span class=\"line\"><span class=\"keyword\">var</span> b2 = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>( <span class=\"title class_\">Bar</span> );</span><br><span class=\"line\">b2.<span class=\"title function_\">init</span>( <span class=\"string\">&quot;b2&quot;</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">b1.<span class=\"title function_\">speak</span>();</span><br><span class=\"line\">b2.<span class=\"title function_\">speak</span>();</span><br></pre></td></tr></table></figure>\n\n<p>在这种委托的思路下，不存在严格的父子关系，甚至不存在继承和类的说法。全程通过<code>Object.create()</code>建立起对象和对象的联系，连<code>new</code>也是不建议使用的。</p>\n<p>但是这种思路也有个明显的问题，“子类”没法定义“父类”的同名方法，因为整个程序建立在<code>[[prototype]]</code>联系的基础上，重复命名将会隔断连接。</p>\n<p>作者并不推荐匿名函数的使用，认为：1，追踪调试栈困难；2，难以自引用；3，代码变得不好理解。这点上我是保留意见的。</p>\n<h3 id=\"类型自省\"><a href=\"#类型自省\" class=\"headerlink\" title=\"类型自省\"></a>类型自省</h3><p>类型自省即<code>instanceof</code>，而这个操作符是依赖于<code>[[prototype]]</code>中的constructor属性的，这个属性除了不可枚举外，相较其他属性并没有特别之处。重写或者<code>[[prototype]]</code>的改变就可以改变它。因此，<code>instanceof</code>在很多情况下可能并不会那么可靠。</p>\n<p>使用鸭子类型的类型自省就更加不可靠了。</p>\n<p>在作者提出的OLOO范式中，采取<code>isPrototypeOf()</code>和<code>Object.getPrototypeOf()</code>进行类型自省。</p>\n<h3 id=\"新的class关键字\"><a href=\"#新的class关键字\" class=\"headerlink\" title=\"新的class关键字\"></a>新的<code>class</code>关键字</h3><p>为了便于“类”思维编程者，<code>class</code>可以说是一大福音。</p>\n<ul>\n<li>不再有<code>.prototype</code>的困扰</li>\n<li><code>extends</code>一键式继承</li>\n<li><code>super</code>对多态的支持</li>\n<li>语法上使用更加贴近OOP语言</li>\n</ul>\n<p>但实际上，这里的<code>class</code>只是语法糖，它还是没实现从类（“蓝图”）到实例（“建筑”）以及从父类到子类的复制，还建立在<code>[[prototype]]</code>的基础上。<a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1ed-zh-CN/this%20%26%20object%20prototypes/apA.md\">原文</a>给出了很多例子说明这点。</p>\n<blockquote>\n<p>在传统面向类的语言中，你从不会在晚些时候调整类的定义，所以类设计模式不提供这样的能力。但是JS的一个最强大的部分就是它是动态的，而且任何对象的定义都是（除非你将它设定为不可变）不固定的可变的东西。</p>\n</blockquote>\n<blockquote>\n<p>换句话说，class 好像在告诉你：“动态太坏了，所以这可能不是一个好主意。这里有看似静态语法，把你的东西静态编码。”</p>\n<p>关于 JavaScript 的评论是多么悲伤啊：动态太难了，让我们假装成（但实际上不是！）静态吧。</p>\n</blockquote>\n",
            "tags": [
                "读书笔记",
                "JavaScript"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2017/12/11/raven/",
            "url": "http://shenlvmeng.github.com/blog/2017/12/11/raven/",
            "title": "Sentry Raven.js学习",
            "date_published": "2017-12-11T15:03:47.000Z",
            "content_html": "<p>最近看看要不要在网上学习下性能监测和告警的解决方案，加在项目里。已经调研了一下才发现，项目里已经用上Raven.js了。实际上，各大公司也都有自己的实现方式，除了sentry的Raven.js外，还有腾讯的badjs，淘宝的JSTracker，阿里巴巴的FdSafe，支付宝的saijs等。早在几年前，就已经有许多解决方案了。</p>\n<p>异常监测和信息采集的需要实现的主要功能点包括：</p>\n<ul>\n<li>前端SDK实现包括错误拦截和监控，错误信息包装、信息上报、API设计等</li>\n<li>提供一个可视化的管理后台</li>\n<li>可以正确定位错误位置</li>\n<li>可以对上报的日志进行筛选、查询、聚类等操作</li>\n<li>可以用邮件、短信或集成在其他平台中通知开发者</li>\n</ul>\n<p>从一个前端初学者的角度，下面更多聊一下前端SDK的细节。</p>\n<h3 id=\"前端SDK实现\"><a href=\"#前端SDK实现\" class=\"headerlink\" title=\"前端SDK实现\"></a>前端SDK实现</h3><p>前端实现上的技术重点有三：<strong>错误捕获和封装</strong>，<strong>AJAX上报</strong>和<strong>JSON字符串化参数</strong>。</p>\n<p>在raven-js的<code>vendor</code>目录下，引用<code>json-stringify-safe</code>和<code>Tracekit</code>。前者为了避免<code>JSON.stringify</code>中出现的循环引用的情况，下面主要介绍后者。</p>\n<h4 id=\"Tracekit\"><a href=\"#Tracekit\" class=\"headerlink\" title=\"Tracekit\"></a>Tracekit</h4><p>常见的方案就是拦截<code>window.onerror</code>方法，在做完自己的工作后，调用原来的<code>window.onerror</code>。自己的工作里包括对错误信息的同一美化和包装。raven.js在这里是借助Tracekit.js完成的。</p>\n<p>Tracekit主要分为两部分，<code>Tracekit.report()</code>和<code>Tracekit.computeStackTraceWrapper()</code>。前者主要用来绑定和解绑错误监听函数、拦截错误；后者主要用来格式化错误信息。</p>\n<p><strong><code>Tracekit.report()</code></strong></p>\n<p>在<code>report()</code>里，整体的设计和基本的观察者设计模式一样，内部成员<code>handlers</code>保存所有的事件消费者，与事件处理函数相关的有四个：</p>\n<ul>\n<li><code>subscribe()</code>，绑定一个监听错误的函数，并在绑定第一个函数时替换原有的<code>window.onerror</code></li>\n<li><code>unsubscribe()</code>，解绑一个监听错误的函数，需要提供函数的引用</li>\n<li><code>unsubscribeAll()</code>，解绑所有监听错误的函数，还原原有的<code>window.onerror</code></li>\n<li><code>notifyHandlers()</code>，触发错误时，将处理过的错误分发给各handlers</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">notifyHandlers</span>(<span class=\"params\">stack, isWindowError</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> exception = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isWindowError &amp;&amp; !<span class=\"title class_\">TraceKit</span>.<span class=\"property\">collectWindowErrors</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> handlers) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (handlers.<span class=\"title function_\">hasOwnProperty</span>(i)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                handlers[i].<span class=\"title function_\">apply</span>(<span class=\"literal\">null</span>, [stack].<span class=\"title function_\">concat</span>(_slice.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>, <span class=\"number\">2</span>)));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (inner) &#123;</span><br><span class=\"line\">                exception = inner;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (exception) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> exception;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>另外，函数<code>installGlobalHandler()</code>和<code>uninstallGlobalHandler()</code>就是上文中用来拦截<code>window.onerror</code>的函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">installGlobalHandler</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_onErrorHandlerInstalled) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    _oldOnerrorHandler = _window.<span class=\"property\">onerror</span>;</span><br><span class=\"line\">    _window.<span class=\"property\">onerror</span> = traceKitWindowOnError;</span><br><span class=\"line\">    _onErrorHandlerInstalled = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">uninstallGlobalHandler</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!_onErrorHandlerInstalled) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    _window.<span class=\"property\">onerror</span> = _oldOnerrorHandler;</span><br><span class=\"line\">    _onErrorHandlerInstalled = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    _oldOnerrorHandler = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>report()</code>中最主要的函数是<code>traceKitWindowOnError()</code>。它的工作流程如下：</p>\n<ol>\n<li>查看lastException是否有正在处理的error，如果有则说明是当前错误引起的，使用<code>computeStackTrace.augmentStackTraceWithInitialElement()</code>追加到当前的错误栈前。调用<code>processLastException()</code>，将lastException的信息交给handler处理，并将lastException置空。</li>\n<li>如果lastException为空，且Error为错误对象，使用<code>computeStackTrace()</code>格式化错误信息，再交给错误消费者。</li>\n<li>如果lastException为空，且Error不是错误对象（如字符串），则自行包装错误信息，交给消费者</li>\n<li>使用原来的<code>window.onerror()</code>处理事件</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">traceKitWindowOnError</span>(<span class=\"params\">message, url, lineNo, colNo, ex</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> stack = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lastExceptionStack) &#123;</span><br><span class=\"line\">        <span class=\"title class_\">TraceKit</span>.<span class=\"property\">computeStackTrace</span>.<span class=\"title function_\">augmentStackTraceWithInitialElement</span>(</span><br><span class=\"line\">            lastExceptionStack,</span><br><span class=\"line\">            url,</span><br><span class=\"line\">            lineNo,</span><br><span class=\"line\">            message</span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"title function_\">processLastException</span>();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ex &amp;&amp; utils.<span class=\"title function_\">isError</span>(ex)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// non-string `ex` arg; attempt to extract stack trace</span></span><br><span class=\"line\">        stack = <span class=\"title class_\">TraceKit</span>.<span class=\"title function_\">computeStackTrace</span>(ex);</span><br><span class=\"line\">        <span class=\"title function_\">notifyHandlers</span>(stack, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 自行封装</span></span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">        <span class=\"title function_\">notifyHandlers</span>(stack, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_oldOnerrorHandler) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _oldOnerrorHandler.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, <span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Tracekit.computeStackTraceWrapper()</strong></p>\n<p>这一部分主要由下面几个函数组成：</p>\n<ul>\n<li><code>computeStackTraceFromStackProp()</code>，处理Chrome和Gecko浏览器下的错误信息格式化</li>\n<li><code>computeStackTraceByWalkingCallerChain()</code>，处理IE和Safari浏览器下的错误信息格式化</li>\n<li><code>augmentStackTraceWithInitialElement()</code>，在当前错误栈底新增新的错误信息，用于<code>computeStackTraceByWalkingCallerChain()</code>和第一部分的<code>processLastException()</code></li>\n<li><code>computeStackTrace()</code>，格式化错误栈信息</li>\n</ul>\n<p>其中<code>computeStackTraceFromStackProp()</code>通过换行符得到stack信息，并通过正则格式化所需要的错误信息，<code>computeStackTraceByWalkingCallerChain()</code>是利用<code>arguments.caller</code>得到错误栈信息并格式化。</p>\n<p><code>computeStackTrace()</code>代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">computeStackTrace</span>(<span class=\"params\">ex, depth</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> stack = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    depth = depth == <span class=\"literal\">null</span> ? <span class=\"number\">0</span> : +depth;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        stack = <span class=\"title function_\">computeStackTraceFromStackProp</span>(ex);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (stack) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> stack;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title class_\">TraceKit</span>.<span class=\"property\">debug</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        stack = <span class=\"title function_\">computeStackTraceByWalkingCallerChain</span>(ex, depth + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (stack) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> stack;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title class_\">TraceKit</span>.<span class=\"property\">debug</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: ex.<span class=\"property\">name</span>,</span><br><span class=\"line\">        <span class=\"attr\">message</span>: ex.<span class=\"property\">message</span>,</span><br><span class=\"line\">        <span class=\"attr\">url</span>: <span class=\"title function_\">getLocationHref</span>()</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>除了Tracekit所做的工作外，raven本身也对console的log&#x2F;warning&#x2F;assert&#x2F;error方法，<code>setTimeout</code>，<code>setInterval</code>,<code>requestAnimationFrame()</code>以及各种事件handler进行了拦截。</p>\n<p>这里有个坑，跨域的问题无法拦截错误，解决办法就是对跨域的script标签加入crossorigin属性，并在后台配置<code>Access-Control-Allow-Origin=*</code></p>\n<h4 id=\"Raven\"><a href=\"#Raven\" class=\"headerlink\" title=\"Raven\"></a>Raven</h4><p>实际上，Tracekit本身已经完成对<strong>错误捕获和封装</strong>。Raven为了便于在管理后台展示和管理，进一步提出了DSN、context等设计。raven-js的源码主要在<code>src/raven.js</code>中。剩下两部分也是在其中实现的。下面分部分介绍一些：</p>\n<p><strong>DSN</strong></p>\n<p>DSN（Data Source Name）是Sentry对一个项目的定义。它由协议、端口、用户、密码、后台Sentry服务器地址、项目名组成。通过<code>Raven.config()</code>设置。在<code>config()</code>中通过正则匹配用户输入的DSN字符串，得到后台地址。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">config</span>: <span class=\"keyword\">function</span>(<span class=\"params\">dsn, options</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!dsn) <span class=\"keyword\">return</span> self;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> globalOptions = self.<span class=\"property\">_globalOptions</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置全局参数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">each</span>(options, <span class=\"keyword\">function</span>(<span class=\"params\">key, value</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// tags and extra are special and need to be put into context</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key === <span class=\"string\">&#x27;tags&#x27;</span> || key === <span class=\"string\">&#x27;extra&#x27;</span> || key === <span class=\"string\">&#x27;user&#x27;</span>) &#123;</span><br><span class=\"line\">          self.<span class=\"property\">_globalContext</span>[key] = value;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          globalOptions[key] = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    self.<span class=\"title function_\">setDSN</span>(dsn);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 屏蔽跨域的无效错误</span></span><br><span class=\"line\">    globalOptions.<span class=\"property\">ignoreErrors</span>.<span class=\"title function_\">push</span>(<span class=\"regexp\">/^Script error\\.?$/</span>);</span><br><span class=\"line\">    globalOptions.<span class=\"property\">ignoreErrors</span>.<span class=\"title function_\">push</span>(<span class=\"regexp\">/^Javascript error: Script error\\.? on line 0$/</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// return for chaining</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> self;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n<p><strong>安装和卸载</strong></p>\n<p>在<code>install()</code>和<code>uninstall()</code>函数中完成。</p>\n<p><code>install()</code>中完成了下面的工作：</p>\n<ul>\n<li>借助Tracekit监听了全局的错误事件</li>\n<li>监听try catch和一些浏览器事件过程（如console，click，fetch等）中的信息</li>\n<li>安装插件</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">install</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (self.<span class=\"title function_\">isSetup</span>() &amp;&amp; !self.<span class=\"property\">_isRavenInstalled</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 订阅所有错误事件</span></span><br><span class=\"line\">        <span class=\"title class_\">TraceKit</span>.<span class=\"property\">report</span>.<span class=\"title function_\">subscribe</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            self.<span class=\"property\">_handleOnErrorStackInfo</span>.<span class=\"title function_\">apply</span>(self, <span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 下方的函数会修改原回调函数</span></span><br><span class=\"line\">        <span class=\"comment\">// 需要修改函数的toString方法</span></span><br><span class=\"line\">        self.<span class=\"title function_\">_patchFunctionToString</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 封装定时器和事件回调函数以提供更好的错误监控</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (self.<span class=\"property\">_globalOptions</span>.<span class=\"property\">instrument</span> &amp;&amp; self.<span class=\"property\">_globalOptions</span>.<span class=\"property\">instrument</span>.<span class=\"property\">tryCatch</span>) &#123;</span><br><span class=\"line\">            self.<span class=\"title function_\">_instrumentTryCatch</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 一些浏览器原生方法的封装，以捕获事件</span></span><br><span class=\"line\">        <span class=\"comment\">// 设置里可关闭</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (self.<span class=\"property\">_globalOptions</span>.<span class=\"property\">autoBreadcrumbs</span>) self.<span class=\"title function_\">_instrumentBreadcrumbs</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 安装所有插件</span></span><br><span class=\"line\">        self.<span class=\"title function_\">_drainPlugins</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 更新状态</span></span><br><span class=\"line\">        self.<span class=\"property\">_isRavenInstalled</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title class_\">Error</span>.<span class=\"property\">stackTraceLimit</span> = self.<span class=\"property\">_globalOptions</span>.<span class=\"property\">stackTraceLimit</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>uninstall</code>中还原了对浏览器原方法的修改，并卸载了Tracekit的report。</p>\n<p><strong>封装函数</strong></p>\n<p>相关函数：<code>context()</code>和<code>wrap()</code>。完成的主要工作是对浏览器原生方法的拦截，使得能更好地捕获其中的错误，在对象内部使用。</p>\n<p><strong>capture相关</strong></p>\n<p>用来捕获事件，有三种用法。</p>\n<ul>\n<li><code>captureException()</code>，最典型的用法，借助Tracekit捕获页面的异常，之后进一步封装成frame后交给<code>_send()</code>发送</li>\n<li><code>captureMessage()</code>，最常用的用法，类似埋点，将信息封装成frame后交给<code>_send()</code>发送</li>\n<li><code>captureBreadcrumb</code>，类似<code>captureMessage()</code>，不过储存信息在<code>this._breadcrumbs</code>，并不交给<code>_send()</code></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">captureException</span>: <span class=\"keyword\">function</span>(<span class=\"params\">ex, options</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ex不是错误时的处理</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Get actual Error from ErrorEvent</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isErrorEvent</span>(ex)) ex = ex.<span class=\"property\">error</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Store the raw exception object for potential debugging and introspection</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_lastCapturedException</span> = ex;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// TraceKit.report will re-raise any exception passed to it,</span></span><br><span class=\"line\">    <span class=\"comment\">// which means you have to wrap it in try/catch. Instead, we</span></span><br><span class=\"line\">    <span class=\"comment\">// can wrap it here and only re-raise if TraceKit.report</span></span><br><span class=\"line\">    <span class=\"comment\">// raises an exception different from the one we asked to</span></span><br><span class=\"line\">    <span class=\"comment\">// report on.</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> stack = <span class=\"title class_\">TraceKit</span>.<span class=\"title function_\">computeStackTrace</span>(ex);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">_handleStackInfo</span>(stack, options);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (ex1) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ex !== ex1) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> ex1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>值得注意的是<code>captureMessage</code>中可以设置rate，使一些消息不上报。白名单、正则过滤也是在这里完成的。<code>captureException</code>则是在<code>_processException</code>中完成的。</p>\n<p><strong>设置context</strong></p>\n<p>context包括三部分：</p>\n<ul>\n<li>tags，用于从不同维度标识错误或信息，使用<code>setTagsContext()</code>全局配置</li>\n<li>users，用于标识错误来源，使用<code>setUsersContext()</code>配置</li>\n<li>extra，用来携带额外的信息，这部分信息不会被索引，使用<code>setExtraContext()</code>配置</li>\n</ul>\n<p>它们都放在<code>Raven._globalContext</code>中。涉及的函数还有<code>clearContext()</code>和<code>getContext()</code>。</p>\n<p>同时<code>environment</code>和<code>release</code>也放在<code>Raven._globalContext</code>中，可以通过<code>setEnvironment</code>和<code>setRelease</code>设置</p>\n<p><strong>BreadCrumb</strong></p>\n<p>这部分功能是在<code>_instrumentTryCatch</code>和<code>_instrumentBreadcrumbs</code>方法里实现的。它们通过重写原方法，捕获其中的错误和事件。在卸载时，通过<code>restoreBuiltin</code>还原。</p>\n<p><strong>发送</strong></p>\n<ul>\n<li>在<code>send()</code>方法中，会使用封装好的数据附加上<code>_globalOptions</code>中的数据，附带浏览器的状态信息（<code>_getHttpdata()</code>中实现）之后交由<code>_sendProcessedPayload()</code>。</li>\n<li>在<code>_sendProcessedPayload()</code>中，会裁剪过长的信息（message, stack, url, referer等）添加请求头，设置发送目标，传入成功和失败回调调用发送函数<code>_makeRequest()</code>。</li>\n<li>在<code>_makeRequest()</code>中，为了跨域发送，会优先尝试fetch，然后尝试带有withCredentials字段的XMLHttpRequest，最后采用XDomainRequest对象发送。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">_makeRequest</span>: <span class=\"keyword\">function</span>(<span class=\"params\">opts</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Auth is intentionally sent as part of query string (NOT as custom HTTP header) to avoid preflight CORS requests</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> url = opts.<span class=\"property\">url</span> + <span class=\"string\">&#x27;?&#x27;</span> + <span class=\"title function_\">urlencode</span>(opts.<span class=\"property\">auth</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">supportsFetch</span>()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _window</span><br><span class=\"line\">            .<span class=\"title function_\">fetch</span>(url, &#123;</span><br><span class=\"line\">                <span class=\"attr\">method</span>: <span class=\"string\">&#x27;POST&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">body</span>: <span class=\"title function_\">stringify</span>(opts.<span class=\"property\">data</span>)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            .<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\">response</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (response.<span class=\"property\">ok</span>) &#123;</span><br><span class=\"line\">                    opts.<span class=\"property\">onSuccess</span> &amp;&amp; opts.<span class=\"title function_\">onSuccess</span>();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// ..</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            [<span class=\"string\">&#x27;catch&#x27;</span>](<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                opts.<span class=\"property\">onError</span> &amp;&amp;</span><br><span class=\"line\">                    opts.<span class=\"title function_\">onError</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Sentry error code: network unavailable&#x27;</span>));</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> request = _window.<span class=\"property\">XMLHttpRequest</span> &amp;&amp; <span class=\"keyword\">new</span> _window.<span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!request) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// if browser doesn&#x27;t support CORS (e.g. IE7), we are out of luck</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> hasCORS = <span class=\"string\">&#x27;withCredentials&#x27;</span> <span class=\"keyword\">in</span> request || <span class=\"keyword\">typeof</span> <span class=\"title class_\">XDomainRequest</span> !== <span class=\"string\">&#x27;undefined&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!hasCORS) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"string\">&#x27;withCredentials&#x27;</span> <span class=\"keyword\">in</span> request) &#123;</span><br><span class=\"line\">        request.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (request.<span class=\"property\">readyState</span> !== <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (request.<span class=\"property\">status</span> === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">                opts.<span class=\"property\">onSuccess</span> &amp;&amp; opts.<span class=\"title function_\">onSuccess</span>();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (opts.<span class=\"property\">onError</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> err = <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Sentry error code: &#x27;</span> + request.<span class=\"property\">status</span>);</span><br><span class=\"line\">                err.<span class=\"property\">request</span> = request;</span><br><span class=\"line\">                opts.<span class=\"title function_\">onError</span>(err);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        request = <span class=\"keyword\">new</span> <span class=\"title class_\">XDomainRequest</span>();</span><br><span class=\"line\">        <span class=\"comment\">// xdomainrequest cannot go http -&gt; https (or vice versa),</span></span><br><span class=\"line\">        <span class=\"comment\">// so always use protocol relative</span></span><br><span class=\"line\">        url = url.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/^https?:/</span>, <span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// onreadystatechange not supported by XDomainRequest</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (opts.<span class=\"property\">onSuccess</span>) &#123;</span><br><span class=\"line\">            request.<span class=\"property\">onload</span> = opts.<span class=\"property\">onSuccess</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (opts.<span class=\"property\">onError</span>) &#123;</span><br><span class=\"line\">            request.<span class=\"property\">onerror</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> err = <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Sentry error code: XDomainRequest&#x27;</span>);</span><br><span class=\"line\">                err.<span class=\"property\">request</span> = request;</span><br><span class=\"line\">                opts.<span class=\"title function_\">onError</span>(err);</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    request.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;POST&#x27;</span>, url);</span><br><span class=\"line\">    request.<span class=\"title function_\">send</span>(<span class=\"title function_\">stringify</span>(opts.<span class=\"property\">data</span>));</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>至此，<strong>错误捕获和封装</strong>，<strong>AJAX上报</strong>和<strong>JSON字符串化参数</strong>都已完成。</p>\n<h3 id=\"可视化后台\"><a href=\"#可视化后台\" class=\"headerlink\" title=\"可视化后台\"></a>可视化后台</h3><p>在自己设计异常监控系统时，需要和后台商量好接口的设定。用Express + React&#x2F;Vue等方案快速搭建。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"https://sentry.io/\">sentry.io</a></li>\n<li><a href=\"https://github.com/getsentry/raven-js\">getsentry&#x2F;raven-js</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/26085642\">前端异常监控系统的落地</a></li>\n</ul>\n",
            "tags": [
                "埋点",
                "raven.js",
                "前端监控"
            ]
        },
        {
            "id": "http://shenlvmeng.github.com/blog/2017/09/04/pwa-and-hybrid-brief/",
            "url": "http://shenlvmeng.github.com/blog/2017/09/04/pwa-and-hybrid-brief/",
            "title": "PWA以及Hybrid开发方案简介",
            "date_published": "2017-09-04T09:59:00.000Z",
            "content_html": "<h2 id=\"PWA\"><a href=\"#PWA\" class=\"headerlink\" title=\"PWA\"></a>PWA</h2><p>PWA(Progressive Web App)渐进增强的Web App。最早提出在2015年，它最初的设计理念是，保留Web的精髓，让Web逐渐演进成App，而非现在Hybrid App（即现在最常用的UIWebView&#x2F;WebView+前端）形式。</p>\n<ul>\n<li>可安装性</li>\n<li>离线能力</li>\n<li>推送能力</li>\n</ul>\n<p>在PWA的概念下，网页可以被添加到主屏同时支持全屏运行，在Service Worker帮助下可以离线运行，最后它仍是Web而并不用添加到App Store中。</p>\n<p>说到Service Worker很多人可能会想到Web Worker的概念。这两个看起来是包含关系的概念实际上有区别。</p>\n<ul>\n<li>Web Worker是JS多线程的一种实现方式，借助它可以让脚本在后台运行，worker对象和主线程通过message的方式交流，caniuse上的支持度为93%</li>\n<li>Service Worker是浏览器的一个新特性，配合PWA的概念一起使用，是PWA网络请求的代理，结合缓存管理等方案，提供很好的离线体验，caniuse支持度仅有73%</li>\n</ul>\n<p>一个<a href=\"https://nolanlawson.github.io/cascadia-2016/#/35\">介绍ppt</a>上展示了具体的区别：</p>\n<ul>\n<li>和tab的关系，Web Worker是一tab对多Web Worker，Service Worker则是多对一</li>\n<li>生命周期，Web Worker和选项卡同生共死，Service Worker则是完全独立的</li>\n<li>擅长场景，Web Worker用在多线程协同，Service Worker则可以提供很好的离线体验</li>\n<li>为保证安全Service Worker要求scheme为https</li>\n</ul>\n<p>Service Worker通过<code>navigator.serviceWorker.register(&#39;path&#39;).then</code>的方式注册，之后便能通过监听事件拿到所有scope里发生的请求，当然，可以在path后的第二个参数中显式地声明作用域（如<code>&#123;scope: &#39;/js&#39;&#125;</code>）。Service Worker可以监听它声明周期中的各事件</p>\n<ul>\n<li><strong>Install</strong> 发生在第一次注册和sw.js（这里的文件名只是举个例子）改变时，通常在这个阶段设定SW的初始状态和准备好缓存。缓存可以借助<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Cache\">caches API</a>完成。</li>\n<li><strong>Fetch</strong> 发生在网络请求产生时，任何匹配了Request的网络请求都会被拦截，并返回缓存数据。只有找不到存在的缓存，才会产生一个请求</li>\n<li><strong>Activate</strong> 发生在SW更新或网页关掉再重新打开时，触发在install之后</li>\n<li><strong>Sync</strong> 发生在用户有网络时，用在用户进行依赖网络的操作时，会推迟到有网络时再执行。简单来说，所有的依赖网络的操作，都需要使用sync事件</li>\n</ul>\n<p>除了Service Worker，Manifest也是很重要的一部分。它用来描述应用程序的各种信息。它包括下面一些成员</p>\n<ul>\n<li><strong>background-color</strong> 在css加载前用作应用背景颜色</li>\n<li><strong>name</strong> 应用名，<strong>short_name</strong>也是类似意思</li>\n<li><strong>description</strong> 应用描述</li>\n<li><strong>display</strong> 显示模式，有<code>fullscreen</code>, <code>standalone</code>, <code>minimal-ui</code>和<code>browser</code>几种可以选择</li>\n<li><strong>icons</strong> 应用图标，数组类型，每项包含<code>src</code>, <code>type</code>和<code>sizes</code>几个属性</li>\n<li><strong>orientation</strong> 默认的屏幕朝向</li>\n</ul>\n<p><a href=\"https://pwa.rocks/\">这里</a>有一个收集PWA酷站的地方。</p>\n<h2 id=\"Hybrid方案相关\"><a href=\"#Hybrid方案相关\" class=\"headerlink\" title=\"Hybrid方案相关\"></a>Hybrid方案相关</h2><p>离线包管理方案：</p>\n<ol>\n<li>本地开发测试，提交特性分支到远端，</li>\n<li>通过提MR的方式合并在当前迭代分支上，触发basement自动CI为zip格式，根据当前发包的状态，传递给NebulaMng管理</li>\n<li>NebulaMng基于zip生成版本号和配置文件，构建整个离线包，并推送给应用中心</li>\n<li>应用中心负责向客户端推送更新</li>\n<li>客户端根据策略拉取离线包、解压、渲染</li>\n</ol>\n<p>离线包本地渲染方案：</p>\n<ol>\n<li>加载公共资源包</li>\n<li>判断本地是否已安装该离线包，若有，则加载到内存，否则触发离线包下载</li>\n<li>WebView加载离线包url链接，加载前检查内存中是否存在页面数据，若有，从内存中取出并渲染，否则fallback到线上cdn地址</li>\n</ol>\n<p>离线包更新方案：</p>\n<ol>\n<li>应用中心广播或服务端发sync消息触发</li>\n<li>向wapcenter获取当前客户端下所有包信息</li>\n<li>在本地没有当前版本且WiFi条件或auto_install为1时更新本地包</li>\n</ol>\n<p>双向通信和JSBridge原理：</p>\n<ul>\n<li>WebView在载入页面时，注入JSBridge脚本。通过调用JSBridge.call，触发调用参数的序列化，并调用<code>console.log(h5container.message:xxx)</code>或<code>window.prompt</code>事件。WebView监听页面的console或prompt事件，解析传递的参数信息，然后通过NebulaService分发事件</li>\n<li>Service、Session、Page实例化时，内部都有一个H5PluginManager成员，通过类似EventEmitter的形式存储着一个action -&gt; plugin的map。每个plugin都有interceptEvent和handleEvent两个函数，处理事件的拦截和处理两个阶段</li>\n<li>WebView通过loadUrl(“javascript:JsBridge.callback”)的形式输入结果并运行回调</li>\n</ul>\n<p>实现上类似这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;<span class=\"comment\">//JsBridge</span></span><br><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"variable language_\">window</span></span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> callbackList = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">window</span>.<span class=\"property\">JsBridge</span> = &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 参数说明</span></span><br><span class=\"line\"><span class=\"comment\">     * @evt &#123;string&#125; 调用接口名称 (必须)</span></span><br><span class=\"line\"><span class=\"comment\">     * @params &#123;object&#125; 配置参数 (可选)</span></span><br><span class=\"line\"><span class=\"comment\">     * @callback &#123;function&#125; 回调函数 (可选)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"attr\">call</span>: <span class=\"keyword\">function</span>(<span class=\"params\">evt, params, callback</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//第一个参数必须为string</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> evt != <span class=\"string\">&#x27;string&#x27;</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> params == <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">        callback = params;</span><br><span class=\"line\">        params = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> params != <span class=\"string\">&#x27;object&#x27;</span>) &#123;</span><br><span class=\"line\">        params = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">var</span> callbackId = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>() + <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> callback == <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">        callbackList[callbackId] = callback;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">var</span> msg = &#123;</span><br><span class=\"line\">        <span class=\"attr\">callbackId</span>: callbackId,</span><br><span class=\"line\">        <span class=\"attr\">action</span>: evt,</span><br><span class=\"line\">        <span class=\"attr\">data</span>: params || &#123;&#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"title function_\">prompt</span>(<span class=\"string\">&#x27;JsBridgeCall&#x27;</span>, <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(msg));</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">/* 参数说明</span></span><br><span class=\"line\"><span class=\"comment\">     * @params &#123;object&#125; 返回的数据 (必须)</span></span><br><span class=\"line\"><span class=\"comment\">     * 数据示例：&#123; callbackId: &#x27;xxx&#x27;, data: &#x27;&#x27; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"attr\">callback</span>: <span class=\"keyword\">function</span>(<span class=\"params\">params</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// params = JSON.parse(params);</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> callbackId = params.<span class=\"property\">callbackId</span>,</span><br><span class=\"line\">        data = params.<span class=\"property\">data</span>,</span><br><span class=\"line\">        callbackHandler = callbackList[callbackId];</span><br><span class=\"line\">      callbackHandler &amp;&amp; callbackHandler.<span class=\"title function_\">call</span>(<span class=\"literal\">null</span>, data);</span><br><span class=\"line\">      <span class=\"keyword\">delete</span> callbackList[callbackId]; <span class=\"comment\">//删除回调</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)(<span class=\"variable language_\">window</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">;<span class=\"comment\">//JsBridgeReady</span></span><br><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"variable language_\">document</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> evt = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createEvent</span>(<span class=\"string\">&#x27;HTMLEvents&#x27;</span>);</span><br><span class=\"line\">  evt.<span class=\"title function_\">initEvent</span>(<span class=\"string\">&#x27;JsBridgeReady&#x27;</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"title function_\">dispatchEvent</span>(evt)</span><br><span class=\"line\">&#125;)(<span class=\"variable language_\">document</span>);</span><br></pre></td></tr></table></figure>\n\n<p>native和H5混合方案：</p>\n<ul>\n<li>在RootView中创建离线包View再异步添加进来</li>\n<li>通过JSBridge进行交互</li>\n<li>提前拦截touch事件，防止冲突</li>\n</ul>\n",
            "tags": [
                "PWA",
                "hybrid",
                "JSBridge",
                "Web Worker",
                "Service Worker"
            ]
        }
    ]
}