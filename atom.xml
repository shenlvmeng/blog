<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://shenlvmeng.github.com/blog</id>
    <title>Shenlvmeng&#39;s Blog</title>
    <link href="http://shenlvmeng.github.com/blog" />
    <updated>2022-12-30T10:31:02.000Z</updated>
    <category term="总结" />
    <category term="制度" />
    <category term="道德" />
    <category term="文官" />
    <category term="万历" />
    <category term="明朝" />
    <category term="读书笔记" />
    <category term="展望" />
    <category term="2018" />
    <category term="2019" />
    <category term="flag" />
    <category term="2020" />
    <category term="2021" />
    <category term="2022" />
    <category term="2023" />
    <category term="面试" />
    <category term="前端" />
    <category term="FAQ" />
    <category term="HTML" />
    <category term="CSS" />
    <category term="style guide" />
    <category term="编程" />
    <category term="范式" />
    <category term="设计" />
    <category term="艺术" />
    <category term="质量" />
    <category term="async_hooks" />
    <category term="cls-hooked" />
    <category term="logId" />
    <category term="录音" />
    <category term="getUserMedia" />
    <category term="AudioContext" />
    <category term="PCM" />
    <category term="WAVE" />
    <category term="二叉搜索树" />
    <category term="算法" />
    <category term="回忆" />
    <category term="老朋友" />
    <category term="C" />
    <category term="Hash" />
    <category term="布隆过滤器" />
    <category term="字符串检索" />
    <category term="canvas" />
    <category term="流程图" />
    <category term="d3" />
    <category term="g6" />
    <category term="zrender" />
    <category term="processOn" />
    <category term="SDN" />
    <category term="cbench" />
    <category term="安装说明" />
    <category term="绘图" />
    <category term="动画" />
    <category term="攻略" />
    <category term="流水账" />
    <category term="成都" />
    <category term="重庆" />
    <category term="武汉" />
    <category term="重构" />
    <category term="代码" />
    <category term="代码风格" />
    <category term="数据可视化" />
    <category term="爬虫" />
    <category term="chrome" />
    <category term="crx" />
    <category term="扩展" />
    <category term="CORS" />
    <category term="跨域" />
    <category term="盒模型" />
    <category term="浮动" />
    <category term="Reactive Programming" />
    <category term="JavaScript" />
    <category term="Cycle.js" />
    <category term="Dart" />
    <category term="最佳实践" />
    <category term="引流" />
    <category term="universal-link" />
    <category term="app-link" />
    <category term="脚手架" />
    <category term="degit" />
    <category term="git" />
    <category term="设计模式" />
    <category term="类" />
    <category term="接口" />
    <category term="抽象类" />
    <category term="DOM" />
    <category term="Docker" />
    <category term="ONOS" />
    <category term="控制器" />
    <category term="虚拟化" />
    <category term="笔记" />
    <category term="UX" />
    <category term="UED" />
    <category term="准则" />
    <category term="Java" />
    <category term="Ruby" />
    <category term="反射" />
    <category term="编程范式" />
    <category term="鸭子类型" />
    <category term="管理" />
    <category term="效率" />
    <category term="知识工作者" />
    <category term="卓有成效" />
    <category term="Elm" />
    <category term="框架" />
    <category term="函数式编程" />
    <category term="虚网映射" />
    <category term="Javascript" />
    <category term="并发" />
    <category term="event loop" />
    <category term="覆盖率" />
    <category term="端到端测试" />
    <category term="istanbul" />
    <category term="istanbuljs" />
    <category term="JavaSript" />
    <category term="Express" />
    <category term="源码" />
    <category term="代码覆盖率" />
    <category term="istanbul-middleware" />
    <category term="代码插桩" />
    <category term="require钩子" />
    <category term="babel-plugin-istanbul" />
    <category term="css" />
    <category term="html5" />
    <category term="flex" />
    <category term="javascript" />
    <category term="roadmap" />
    <category term="闭包" />
    <category term="Haskell" />
    <category term="monad" />
    <category term="后端" />
    <category term="管理后台" />
    <category term="egg.js" />
    <category term="工作流" />
    <category term="pull request" />
    <category term="golang" />
    <category term="语言学习" />
    <category term="黑客与画家" />
    <category term="创业" />
    <category term="骑行" />
    <category term="海南" />
    <category term="图文" />
    <category term="reflow" />
    <category term="repaint" />
    <category term="命名法" />
    <category term="成功学" />
    <category term="自我建设" />
    <category term="HTTP" />
    <category term="HTTP/2" />
    <category term="SPDY" />
    <category term="QUIC" />
    <category term="HTTPS" />
    <category term="状态码" />
    <category term="网络攻击" />
    <category term="介绍" />
    <category term="图片渲染" />
    <category term="html2canvas" />
    <category term="dom-to-image" />
    <category term="electron" />
    <category term="indexedDB" />
    <category term="异步" />
    <category term="Generator" />
    <category term="thunk" />
    <category term="async" />
    <category term="函数表达式" />
    <category term="对象" />
    <category term="继承" />
    <category term="类型转换" />
    <category term="==" />
    <category term="类型判断" />
    <category term="猫" />
    <category term="杀手" />
    <category term="管理学" />
    <category term="领导力" />
    <category term="梯队" />
    <category term="移动端" />
    <category term="UI" />
    <category term="自适应" />
    <category term="rem" />
    <category term="Electron" />
    <category term="GUI" />
    <category term="gpx" />
    <category term="template" />
    <category term="Electron Builder" />
    <category term="PWA" />
    <category term="方法论" />
    <category term="夜话" />
    <category term="多线" />
    <category term="生活" />
    <category term="密码" />
    <category term="密钥" />
    <category term="技改" />
    <category term="Vue" />
    <category term="gulp" />
    <category term="瀑布流" />
    <category term="电影" />
    <category term="PHP" />
    <category term="参考" />
    <category term="思维" />
    <category term="学习能力" />
    <category term="右脑" />
    <category term="经济学" />
    <category term="宏观经济学" />
    <category term="术语" />
    <category term="GDP" />
    <category term="CPI" />
    <category term="储蓄" />
    <category term="投资" />
    <category term="金融市场" />
    <category term="股票" />
    <category term="债券" />
    <category term="美联储" />
    <category term="失业" />
    <category term="货币" />
    <category term="现值" />
    <category term="准备金" />
    <category term="货币中性" />
    <category term="通货膨胀" />
    <category term="汇率" />
    <category term="购买力" />
    <category term="净出口" />
    <category term="资产净流出" />
    <category term="总需求" />
    <category term="总供给" />
    <category term="流动性偏好" />
    <category term="乘数效应" />
    <category term="菲利普斯曲线" />
    <category term="微观经济学" />
    <category term="供求" />
    <category term="贸易" />
    <category term="市场" />
    <category term="税" />
    <category term="剩余" />
    <category term="外部性" />
    <category term="公共物品" />
    <category term="公共资源" />
    <category term="生产成本" />
    <category term="利润" />
    <category term="垄断" />
    <category term="价格歧视" />
    <category term="寡头" />
    <category term="垄断竞争" />
    <category term="生产要素市场" />
    <category term="贫困" />
    <category term="消费者选择理论" />
    <category term="不对称信息" />
    <category term="政治经济学" />
    <category term="行为经济学" />
    <category term="VSCode" />
    <category term="编辑器" />
    <category term="IDE" />
    <category term="hybrid" />
    <category term="JSBridge" />
    <category term="Web Worker" />
    <category term="Service Worker" />
    <category term="习惯" />
    <category term="lint" />
    <category term="editorconfig" />
    <category term="commit message" />
    <category term="量子物理" />
    <category term="史话" />
    <category term="埋点" />
    <category term="raven.js" />
    <category term="前端监控" />
    <category term="文本编辑器" />
    <category term="quill" />
    <category term="结构化数据" />
    <category term="React" />
    <category term="Hooks" />
    <category term="函数组件" />
    <category term="复用" />
    <category term="状态管理" />
    <category term="redux" />
    <category term="MobX" />
    <category term="代码质量" />
    <category term="重来" />
    <category term="requestAnimationFrame" />
    <category term="TypeScript" />
    <category term="路书" />
    <category term="gpx解析" />
    <category term="EXIF" />
    <category term="人类" />
    <category term="生存" />
    <category term="基因" />
    <category term="响应式编程" />
    <category term="RxJS" />
    <category term="成长" />
    <category term="业务" />
    <category term="思想" />
    <category term="程序设计" />
    <category term="心理学" />
    <category term="自我" />
    <category term="社会思维" />
    <category term="社会影响" />
    <category term="文化" />
    <category term="性别" />
    <category term="从众" />
    <category term="说服" />
    <category term="临床诊断" />
    <category term="陪审团" />
    <category term="司法" />
    <category term="物质主义" />
    <category term="健康" />
    <category term="社会关系" />
    <category term="偏见" />
    <category term="攻击行为" />
    <category term="亲密关系" />
    <category term="友谊" />
    <category term="爱情" />
    <category term="利他" />
    <category term="冲突" />
    <category term="和解" />
    <category term="软技能" />
    <category term="理财" />
    <category term="健身" />
    <category term="自我营销" />
    <category term="学习" />
    <category term="商业模式" />
    <category term="产品" />
    <category term="校园网" />
    <category term="互联网" />
    <category term="技术" />
    <category term="web开发" />
    <category term="哲思" />
    <category term="择偶观" />
    <category term="validator" />
    <category term="大文件" />
    <category term="visibilityChange" />
    <category term="IntersectionObserver" />
    <category term="图种" />
    <category term="draggable" />
    <category term="webpack" />
    <category term="z-index" />
    <category term="git submodule" />
    <category term="object-fit" />
    <category term="object-position" />
    <category term="BroadcastChannel" />
    <category term="extract-text-webpack-plugin" />
    <category term="lottie" />
    <category term="backface-visibility" />
    <category term="egret" />
    <category term="mock" />
    <category term="SSO" />
    <category term="autoprefixer" />
    <category term="polyfill" />
    <category term="Android" />
    <category term="ffmpeg" />
    <category term="React Hooks" />
    <category term="rollup" />
    <category term="CDN" />
    <category term="DNS" />
    <category term="CNAME" />
    <category term="架构" />
    <category term="组件" />
    <category term="ssh" />
    <category term="fis-receiver" />
    <category term="tmux" />
    <category term="origami" />
    <category term="promise" />
    <category term="encodeURI" />
    <category term="encodeURIComponent" />
    <category term="axios" />
    <category term="charles" />
    <category term="黑色幽默" />
    <category term="朋友" />
    <category term="梦" />
    <category term="濒死" />
    <category term="江南" />
    <category term="苏州" />
    <category term="无锡" />
    <category term="宜兴" />
    <category term="湖州" />
    <category term="南浔" />
    <category term="游记" />
    <category term="随笔" />
    <category term="群众" />
    <category term="理论" />
    <category term="实效" />
    <category term="测试" />
    <category term="长沙" />
    <category term="杭州" />
    <category term="湖南" />
    <category term="核酸" />
    <category term="美食" />
    <category term="云南" />
    <category term="丽江" />
    <category term="大理" />
    <category term="青岛" />
    <category term="济南" />
    <category term="山东" />
    <category term="西北" />
    <category term="银川" />
    <category term="西宁" />
    <category term="青海湖" />
    <category term="西海镇" />
    <category term="茶卡盐湖" />
    <category term="厦门" />
    <category term="感受" />
    <category term="C语言" />
    <category term="树" />
    <category term="主干开发" />
    <category term="GitFlow" />
    <category term="GithubFlow" />
    <category term="typescript" />
    <category term="类型系统" />
    <category term="webrtc" />
    <category term="RTMP" />
    <category term="首屏时间" />
    <category term="性能优化" />
    <category term="公司" />
    <category term="个人发展" />
    <category term="战略" />
    <category term="晋升" />
    <category term="哲学" />
    <category term="幸福" />
    <category term="人生" />
    <category term="叔本华" />
    <category term="Unix" />
    <category term="Rollup" />
    <category term="mouseout" />
    <category term="mouseleave" />
    <category term="lint-staged" />
    <category term="吸顶" />
    <category term="图片组件" />
    <entry>
        <id>http://shenlvmeng.github.com/blog/2022/12/30/2022-to-2023/</id>
        <title>2022-to-2023</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2022/12/30/2022-to-2023/"/>
        <content type="html">&lt;h1 id=&#34;2022回顾暨2023畅想&#34;&gt;&lt;a href=&#34;#2022回顾暨2023畅想&#34; class=&#34;headerlink&#34; title=&#34;2022回顾暨2023畅想&#34;&gt;&lt;/a&gt;2022回顾暨2023畅想&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;2021-2022: &lt;a href=&#34;https://shenlvmeng.github.io/blog/2021/12/22/2021-to-2022/&#34;&gt;https://shenlvmeng.github.io/blog/2021/12/22/2021-to-2022/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2022比想象中过去得要快，这一年是紧贴时代脉搏一起脱轨的一年。生活的很多方面也不免受到影响。在日常琐事之中也埋着个人命运的一条主线——告别单身，走向家庭。在上面两个基调的影响下，回头看看过去1年拍过的照和写下的博文，似乎比往年少了些浓墨重彩的趣事。也许生活本身的难以预料琢磨，才是它令人着迷的地方吧。&lt;/p&gt;
&lt;h2 id=&#34;2022回顾&#34;&gt;&lt;a href=&#34;#2022回顾&#34; class=&#34;headerlink&#34; title=&#34;2022回顾&#34;&gt;&lt;/a&gt;2022回顾&lt;/h2&gt;&lt;p&gt;书籍阅读上，经过大半年的努力，完成大部头《代码大全》的阅读；同时，神书《GEB》在进行中。读书进度受疫情影响较大，经常因为居家办公而打断。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://shenlvmeng.github.io/blog/2022/03/03/all-about-code/&#34;&gt;关于编码的一切 ——《代码大全》 上&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://shenlvmeng.github.io/blog/2022/08/25/all-about-code-2/&#34;&gt;关于编码的一切 ——《代码大全》 下&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;小说的阅读倒是没受到丝毫影响，剩余的推理和刑侦小说一本不落的看完了。去年未完成的X、Y、Z的悲剧还有《犹大之窗》比想象中出彩。去年剩下的管理学书籍在工作中实在有些屠龙之术的处境，对于我这样的入行年限，研究这么高深的管理学技巧有捡了芝麻丢了西瓜的嫌疑。所以先暂时搁置。一项全新领域的研究也在《GEB》的阅读中有一定收获，其关于自我指代、悖论的介绍既艰深又有趣。&lt;/p&gt;
&lt;p&gt;今年的黑天鹅事件比去年只多不少，先是3月份魔都疫情爆发导致封城3个月到6月初，我也是既20年在湖北隔离2个月后，体验到更久禁足的滋味。在家早起抢菜、做饭洗碗、白天下楼排队核酸、晚上跟着刘畊宏上下翻飞，快递动辄等个数月，数个节假日都只能在家庆祝。这种脱轨的生活在相册里体现就是清一色的做饭返图，在身体上体现就是精打细算的吃喝和锻炼让体重最多减了10斤，在竞技技术上体现就是出色的分手厨房技术，在脸上体现就是我已经记不起嘉雯化妆之后的样子。管中窥豹，可以想见我和嘉雯天天都在做些啥。因为这个原因，2022年3个硬菜的目标算是超额完成，卤牛肉、卤蛋、炸鸡柳、糖醋排骨、葱油拌面、鱼汤、骨头汤，这些以前不会尝试的大菜也算是给隔离时光带来了些许挑战的乐趣。隔离在家的3个月也算是部分弥补了之前异地的4个月里我和嘉雯聚少离多的场面。每天低头不见抬头见的同居生活，似乎并没有让我俩觉得枯燥，反而过得有滋有味的，属实奇妙。&lt;/p&gt;
&lt;p&gt;待6月初接触禁足后，车还没骑过，2022业已过半。扑朔迷离的疫情形式和管控手势下，长途骑行和旅行也成了开盲盒。本来打算在国庆来一次上海到宁波的旅行，由于凯哥的婚礼被迫取消，2022也因此没了唯一的长途骑行机会。不过，能带着嘉雯参加我最好兄弟的婚礼，还是很棒的，基友也一同去了邵东。我和嘉雯还趁着机会见缝插针在长沙和杭州&lt;a href=&#34;https://shenlvmeng.github.io/blog/2022/10/14/tour-to-changsha-and-hangzhou/&#34;&gt;玩了一圈&lt;/a&gt;。这趟旅途也是意外满满，看来2022并不适合旅行。livehouse和旅行一样，因为疫情并未履行。饮酒频率在封控的上半年，作为苦中作乐的方式，一直保持不高不低的频率。在凯哥婚礼的晚上俩人喝high了导致吐个没完差点影响旅行后，一直戒酒至今。运动上，骑行和游泳的频率比去年有所下降，早睡早起也间歇性遵守。出外娱乐上，我俩还是以吃为主，但更多是熟悉的老店，可能是疫情让人变宅，探店的兴致也受到了影响。&lt;/p&gt;
&lt;p&gt;每年都会有新的兴趣，2022也不例外。疫情在家莫名其妙燃起了桌游的兴趣，通过视频了解了美式、德式各种桌游的风格，隔三差五屯起了桌游。一度每个周末要组织2场桌游局，快乐的同时感觉大脑和嗓门也得到了充分的锻炼。为此家里还专门置办了一个书柜，其中1&amp;#x2F;3用来放我买回来的桌游。另外，我俩对于拼图的兴趣也让我们陆续买了3件2000片的大幅拼图，看着整幅画面从最开始的零散到逐渐完整，成就感满满。社交上，在那些桌游局中认识了不少嘉雯的朋友。中秋时候带嘉雯回了趟老家，相处得也很是愉快。因为老大哥尚在北京出差，去沈阳的计划没能成行。&lt;/p&gt;
&lt;p&gt;工作上，似乎和之前有了不一样的认识，在转换了工作角色和工作位置后，渐渐找到了新位置的感觉。虽然和之前在教育的时候很不一样，但也胜在踏实和轻松。尽管团队规模也不算大，但也在尝试之前没有做过的东西，且有一定的学习和产出，整体还是朝好的方向发展的。回头想想自己去年的定位，可能有点过于浮躁和眼高手低了。在公司的定位下，还不需要我有多高的管理技巧，而需要有这种技巧的位置，我是否真得准备好了呢？看看现在扮演这些角色的人，他们的一天是不是你想要过的呢？这么想完之后，我又觉得现在这样也挺好。作为一只下金蛋的鸡，能保持自己一直下出金蛋也不错。至于下一步的计划，不能心急，还要慢慢积累。去年说的脚踏实地的状态，大概就是我现在的态度。我觉得这不算躺平，也算是在付着应付的责任。&lt;/p&gt;
&lt;p&gt;时间来到12月，防疫政策陆续放松，情理之中又在意料之外，大家恢复自由身的同时，医疗和药物资源的挤兑也带来了一些困难。谢天谢地，在药品并不齐备的情况下，我和嘉雯的家人暂时扛过了第一波疫情高峰，成为了康。期待明年春暖花开之后，生活秩序恢复到疫情前的模样。&lt;/p&gt;
&lt;h2 id=&#34;2022小结&#34;&gt;&lt;a href=&#34;#2022小结&#34; class=&#34;headerlink&#34; title=&#34;2022小结&#34;&gt;&lt;/a&gt;2022小结&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;继续脚踏实地&lt;/li&gt;
&lt;li&gt;身体才是本钱&lt;/li&gt;
&lt;li&gt;只要方向是对的，好事就会不疾不徐地发生&lt;/li&gt;
&lt;li&gt;不要太“躺”，去做成一些事情，再小的也行&lt;/li&gt;
&lt;li&gt;两个人在一起久了之后，就成了命运共同体，很多事情要一同经历一同解决&lt;/li&gt;
&lt;li&gt;大脑像水车，书籍像水，只有不断往水车上浇水，才能保证大脑新鲜灵活&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2023畅想&#34;&gt;&lt;a href=&#34;#2023畅想&#34; class=&#34;headerlink&#34; title=&#34;2023畅想&#34;&gt;&lt;/a&gt;2023畅想&lt;/h2&gt;&lt;p&gt;23年有些明确的路径，譬如求婚、领证、介绍双方父母认识，还有欠下的长途骑行和旅行等等。其他的就让它自然发生吧。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;家庭&lt;ul&gt;
&lt;li&gt;接待父母来魔都1次&lt;/li&gt;
&lt;li&gt;回家看望家人1次&lt;/li&gt;
&lt;li&gt;求婚成功&lt;/li&gt;
&lt;li&gt;领证&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;个人&lt;ul&gt;
&lt;li&gt;完成GEB的阅读&lt;/li&gt;
&lt;li&gt;为之后的身份转变体验积累知识&lt;/li&gt;
&lt;li&gt;升级对象的骑行体验&lt;/li&gt;
&lt;li&gt;控制体重在当前附近&lt;/li&gt;
&lt;li&gt;坚持骑行和游泳&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;生活&lt;ul&gt;
&lt;li&gt;至少1次户外长途骑行&lt;/li&gt;
&lt;li&gt;至少1次旅行&lt;/li&gt;
&lt;li&gt;看一次livehouse&lt;/li&gt;
&lt;li&gt;继续保持探店的热情&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;事业&lt;ul&gt;
&lt;li&gt;在划定方向上完成里程碑&lt;/li&gt;
&lt;li&gt;所在小方向上为团队每个成员确定定位&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;剩下的，就让它顺其自然吧。我们明年见。&lt;/p&gt;
&lt;p&gt;Bye~&lt;/p&gt;
</content>
        <category term="总结" />
        <category term="2022" />
        <category term="2023" />
        <updated>2022-12-30T10:31:02.000Z</updated>
    </entry>
    <entry>
        <id>http://shenlvmeng.github.com/blog/2022/10/14/tour-to-changsha-and-hangzhou/</id>
        <title>长沙、杭州之行 —— 惊不惊喜、意不意外</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2022/10/14/tour-to-changsha-and-hangzhou/"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;后疫情时代，旅游消费也带上了运气成分，再没有“说走就走”般的潇洒&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;序：疫情&#34;&gt;&lt;a href=&#34;#序：疫情&#34; class=&#34;headerlink&#34; title=&#34;序：疫情&#34;&gt;&lt;/a&gt;序：疫情&lt;/h2&gt;&lt;p&gt;疫情管控下，旅行如同开盲盒。能去哪里玩耍并不由自己的财力喜好决定，也要仰仗病毒大人给面子。上海的病毒就格外不懂事，在打工人上班的工作日岁月静好，一临近节假日就格外来精神。中秋假期，和嘉雯就和病毒擦边而过，居家办公数日得以回家过节。这次国庆前也是提心吊胆，所幸所在区疫情未扩大，倒是一路辗转，核酸7天7检，在病毒边上跳舞。&lt;/p&gt;
&lt;p&gt;这次选定长沙主要是因为姚凯婚礼，我和圣僧也是一起放弃了长途骑行计划，来邵阳蹭蹭喜气。来都来了，就顺道去长沙看看，刚好嘉雯也没去过。&lt;/p&gt;
&lt;h2 id=&#34;Day-1-婚礼&#34;&gt;&lt;a href=&#34;#Day-1-婚礼&#34; class=&#34;headerlink&#34; title=&#34;Day 1 婚礼&#34;&gt;&lt;/a&gt;Day 1 婚礼&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;邵阳&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们10月1日下午从上海南站出发，搭上前往邵阳的卧铺，嘉雯之前还未坐过卧铺，适应也挺快，躺床上一路晃晃悠悠，第二天一早便到了目的地。车窗外一片阳光普照，甚是美好。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/10/14/xw14P0.jpg&#34; alt=&#34;邵阳&#34;&gt;&lt;/p&gt;
&lt;p&gt;邵阳是个县级市，类似母亲老家枣阳的感觉。城市不大，尽管姚凯预定的酒店在城市的边缘，滴滴快车开了10多分钟就到了。在酒店大堂正巧碰到姚凯和伴郎在拍摄婚礼用的短片，人逢喜事，红光满面。我和嘉雯不便打扰人家的大喜之日，简单寒暄几句，住进了姚凯事先定好的房间。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/10/14/xw1oxU.jpg&#34; alt=&#34;酒店&#34;&gt;&lt;/p&gt;
&lt;p&gt;中午的婚礼现场很完美，主持人沉着冷静，凯哥表现可圈可点，整个流程也没有让人尬到脚趾扣地的情节，现场一片其乐融融，像是我未来的理想婚宴。婚宴过后，姚凯忙东忙西，我和嘉雯找了个号称邵东环境第一的网吧，吸了2个小时二手烟。屋内空调还坏了，老板一人发了根老冰棍想让我们冷静下来。&lt;/p&gt;
&lt;p&gt;在烟雾缭绕中拿到了首胜，做够了神仙，我们仓皇逃出，往市中心的百富广场走走。边走边走马观花地领略这里的风土民情。红绿灯对于这里的行人约束力并不强，大家秉承着实用主义至上的思路。路上无甚可逛，倒是见到了许多山寨品牌。晚上姚凯攒了个小局，可能是近2年不见，我俩喝得很尽兴，以至于我上头到夜里2点才睡下。&lt;/p&gt;
&lt;h2 id=&#34;Day-2-美食&#34;&gt;&lt;a href=&#34;#Day-2-美食&#34; class=&#34;headerlink&#34; title=&#34;Day 2 美食&#34;&gt;&lt;/a&gt;Day 2 美食&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;黄兴路、茶颜悦色、坡子街、南门口、电动车、东瓜山&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从邵阳去长沙的火车很早，一大早被嘉雯喊起来，胃里还是酒意，头脑天旋地转，脚如腾云驾雾，8点的火车，我在车上睡了一路，出站后又吃了个酒店楼下的&lt;strong&gt;杀猪粉&lt;/strong&gt;，算是恢复了大半元气。杀猪粉里的胡椒粉放得很有诚意，一碗下来喉咙和胃里都是暖暖的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/10/14/xw1I2T.jpg&#34; alt=&#34;杀猪粉&#34;&gt;&lt;/p&gt;
&lt;p&gt;来长沙的第一天，天气其实算是相当阳光明媚了。哦不，甚至是明媚得过了头，到了不打伞会晒伤的程度。也许是这个天气，又或许是郊区出现的零星病例，黄兴步行街上游客并没有想象中那么密集。作为长沙第一天的第一站，也是做好了敞开了胃吃一路的心里准备。这趟美食旅程从茶颜悦色自由开始。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/10/14/xw15GV.jpg&#34; alt=&#34;茶颜悦色-1&#34;&gt;&lt;/p&gt;
&lt;p&gt;长沙街头&lt;strong&gt;茶颜悦色&lt;/strong&gt;的密度相当大，而这个相当大的极值恰在黄兴路步行街。本以为要排长队的奶茶店，在三步一茶颜的密度下，极大的提升了赏味体验。第一次我们尝试了幽兰拿铁和花木兰，风味果然名不虚传，恰逢活动两杯24，性价比拉满。坐在阴凉下抿一口，哈———，巴适。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/blog/&#34; alt=&#34;幽兰拿铁&#34;&gt;&lt;/p&gt;
&lt;p&gt;在等位中间，我们还尝试了大众点评推荐的刘记特色里脊肉，口感滑嫩，但口味偏咸，稍有些失望。中午我们顺道去了附近的&lt;strong&gt;德天顺盖码饭&lt;/strong&gt;。招牌的孜然牛肉还有辣椒炒肉味道尚可，不过性价比略低。好好拍的话，应该还挺好出图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/10/14/xw17MF.jpg&#34; alt=&#34;盖码饭&#34;&gt;&lt;/p&gt;
&lt;p&gt;吃完不像午饭的午饭，正赶上日头最毒辣的时候，在嘉雯的提醒下，&lt;strong&gt;臭豆腐&lt;/strong&gt;是不可少的。我们顺道走到了坡子街，去了一家也是连锁店遍地的臭豆腐网红店，用了张优惠券买了个大份。俩人像砌墙一样，一人一块用臭豆腐砌到了嗓子眼。不得不说，从辣度上说，还是挺正宗的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/10/14/xw1Hr4.jpg&#34; alt=&#34;臭豆腐&#34;&gt;&lt;/p&gt;
&lt;p&gt;既然吃了辣，解辣的奶茶自不能少，我俩浅排了个小队，坐在&lt;strong&gt;费大厨&lt;/strong&gt;的门口，假装等号，享用着第二顿的茶颜悦色。栀子生椰就像涓涓细流，从墙砖的缝隙中滋润火热的胃。臭豆腐垒成的砖墙瞬间融化，胃口又找了回来。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/10/14/xw1bqJ.jpg&#34; alt=&#34;栀子生椰&#34;&gt;&lt;/p&gt;
&lt;p&gt;尽管已经不知道吃了多少，在坡子街走了走之后，我还能吃的壮志又回来了。路上遇到M记新品——红糖冰粉，入之。刚到长沙的这几个小时似乎一直在吃，但我发现不止是我，步行街上的人们也都化身饕餮。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/10/14/xw1LZ9.jpg&#34; alt=&#34;红糖冰粉&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/10/14/xw1XI1.jpg&#34; alt=&#34;吃&#34;&gt;&lt;/p&gt;
&lt;p&gt;下午沿着步行街一路走到南门口，兜兜转转好不快活。不过直到第3天，我俩才发现步行街的地下一样精彩。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/10/14/xw1OaR.jpg&#34; alt=&#34;柠檬茶&#34;&gt;&lt;/p&gt;
&lt;p&gt;不知不觉，来到南门口的时候，时间已近5点，我俩在日头地下行色疲惫，想找个能歇歇脚吹吹空调的地方。秉承着光荣传统，我们骑着电动车去了网鱼网咖，并用充值体现我们对这家连锁企业的支持。&lt;/p&gt;
&lt;p&gt;嘉雯是第一次骑&lt;strong&gt;电动车&lt;/strong&gt;，我虽是第二次，也比她强不少。只见她最开始慌慌张张，拒绝相信电动车有手就能骑比自行车还简单，没骑到几分钟后脸上就逐渐浮现出笑容。“啊，真香。”，我想她一定想这么喊出来。&lt;/p&gt;
&lt;p&gt;从网吧出来日头已经落下，我们要去寻找晚饭的觅食地点。才骑过一次电动车的嘉雯果断选择骑着去。骑电动车的简单快乐魔咒一定是她来长沙的最大收获。不过这可能也和养猫养狗一个道理，别人家的猫狗肯定比自己家的香，毕竟不用自己喂粮、洗澡、吸毛、铲屎就可以撸，只需办张6块钱的卡就能3次免费骑到不用自己充电的电动车，这也太爽了吧。看嘉雯掩饰不住的笑容就知道。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/10/14/xw1vPx.jpg&#34; alt=&#34;电动车&#34;&gt;&lt;/p&gt;
&lt;p&gt;拐到湘江中路后，便来到了风景最好的一段，虽然看不到江，但是一路晚风吹着，一边江边步道上不少市民游客漫步起舞，另一边高楼彩灯鳞次栉比迷乱人眼，这种不受约束自由的快乐可能正是旅行的一大意义吧。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/10/14/xw1xG6.jpg&#34; alt=&#34;高楼&#34;&gt;&lt;/p&gt;
&lt;p&gt;在意外发现&lt;strong&gt;馨砣粉店&lt;/strong&gt;只有早上营业后，我们正巧赶上&lt;strong&gt;东瓜山&lt;/strong&gt;夜市的时间，可能是晚上气温宜人，本就狭窄的东瓜山街头人头攒动，路边的摊位卖着酒酿汤圆、紫苏桃子、糖油坨坨，饭店多是烧烤，赤膊和半赤膊的人们流着汗翘着腿坐在长条板凳上，撸串碰杯，交谈混着叫号声满是喧闹。打开大众点评搜索，附近网红店，高分店不胜枚举，选择困难。不由得感慨，长沙这座城市，不论白天夜晚都是映入眼帘的小吃文化，不多带1个胃来，怕是得多带好多关于美食的遗憾离开。&lt;/p&gt;
&lt;p&gt;由于来的晚，加上对密集人群的天生厌恶，我俩并没有去朋友推荐的小龙虾店，将就选择了一家有空调的烧烤，对付着解决了晚饭的问题。下次要是再来，还是要赶早点，去那家&lt;strong&gt;天宝兄弟&lt;/strong&gt;探探究竟。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/10/14/xw1zRK.jpg&#34; alt=&#34;东瓜山&#34;&gt;&lt;/p&gt;
&lt;p&gt;饭后，我们骑上电动车，沿着白沙路——韭菜园路一路直行回到酒店。路上还经过了&lt;strong&gt;天心阁&lt;/strong&gt;。可惜时间有限，只是远远拍了张剪影。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/10/14/xw3SxO.jpg&#34; alt=&#34;天心阁&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Day-3-徒步&#34;&gt;&lt;a href=&#34;#Day-3-徒步&#34; class=&#34;headerlink&#34; title=&#34;Day 3 徒步&#34;&gt;&lt;/a&gt;Day 3 徒步&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;糖油坨坨、橘子洲、岳麓山、冰箱贴&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由于前一夜空调不给力加上睡觉不踏实，早上起床就发觉有些感冒。想到晚上看到的望城区和天心区有病例，细思恐极。再加上西伯利亚远道而来的冷空气前锋已经来袭，天色阴沉了许多。实在是有点打扰游览的雅兴。洗漱过后，我们打起精神，先去太平街区转转。这里有点像宽敞版的南锣鼓巷，也许是疫情也许是天气，街头的人不多。我们叫了个糖油坨坨，垫了点肚子。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/10/14/xw39MD.jpg&#34; alt=&#34;糖油坨坨&#34;&gt;&lt;/p&gt;
&lt;p&gt;浅走了一段，在西牌楼的街上看到了传说中的&lt;strong&gt;公交新村粉店&lt;/strong&gt;和&lt;strong&gt;笨罗卜湘菜&lt;/strong&gt;。粉店环境一般，食客即吃即走，排队的人尚不算长，湘菜店则排好排到几百桌。我俩叫了雪里蕻牛肉粉，感觉不过如此，甚至不如酒店楼下的杀猪粉。考虑到价格10元出头，我们也没有太过抱怨。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/10/14/xw3PqH.jpg&#34; alt=&#34;公交新村粉店&#34;&gt;&lt;/p&gt;
&lt;p&gt;吃饱喝足，我们沿湘江大桥走向橘子洲，恰如我7年前第一次来长沙那样。不同于那次8月底七月流火尚有暑热未散尽，此时桥面江风尽是萧瑟秋意，昨日的烈日高照完全不见了踪影。橘子洲角的绿树和江岸的高楼相互应和，我一边拍照一边握紧手机。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/10/14/xw3Cse.jpg&#34; alt=&#34;湘江-1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/10/14/xw3kdA.jpg&#34; alt=&#34;湘江-2&#34;&gt;&lt;/p&gt;
&lt;p&gt;沿着桥面的方向向对岸望去，岳麓山的曲线格外明显，那里正是我俩下午要去的地方。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/10/14/xw3FZd.jpg&#34; alt=&#34;岳麓山&#34;&gt;&lt;/p&gt;
&lt;p&gt;在江中间下桥便到了橘子洲。下了桥看到核酸点排队人不多，为了保险，我们顺带做了个核酸（没想到第二天救了我们）。时间不充裕的情况下，想在橘子洲头看伟人头像和指点江山题字，小火车是必坐的，40元不限次数还算良心。只可惜头像周围的人实在太多，没有办法拍下我们仨的合影，我和嘉雯也不想和围栏边密密麻麻的人群一起凑热闹，只是坐在江滨的台阶上安静吹风。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/10/14/xw3AII.jpg&#34; alt=&#34;头像&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/10/14/xw3Vit.jpg&#34; alt=&#34;广场&#34;&gt;&lt;/p&gt;
&lt;p&gt;坐太久不利于感冒康复，兴尽我俩又坐地铁来到湖南师大，准备吃个午饭再从岳麓书院方向爬&lt;strong&gt;岳麓山&lt;/strong&gt;。没想到这里的人比昨天还要夸张，不禁感慨防疫的困难程度。最终花了1个小时终于拿到茶颜悦色和M记。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/10/14/xw3ZJP.jpg&#34; alt=&#34;声声乌龙&#34;&gt;&lt;/p&gt;
&lt;p&gt;爬山的过程其实比想象中更快，依旧是从书院出口沿爱晚亭上山，依旧是走一段石板路走一段野路，欣慰的是嘉雯终于买到了心心念念的冰箱贴。山顶并不算高，也就200来米，铺设的柏油路上走满了游人。此时天色已不早，我俩赶在缆车卖票的最后时刻买到了下山的缆车，真是好险。单人下山只需25元，能坐10来分钟，还在俯瞰橘子洲、湘江两岸，性价比很高。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/10/14/xw3eRf.jpg&#34; alt=&#34;缆车&#34;&gt;&lt;/p&gt;
&lt;p&gt;下了山已经是5点多了，天色渐暗，我们在虎头局吃了俩泡芙，也没有到处走走的念头，想着去网吧坐一会儿再去IFS逛逛，没想到因为胜率问题，还没拿到首胜就已经9点。屋外气温已不适合短袖出行，我俩干脆打道回府。&lt;/p&gt;
&lt;h2 id=&#34;Day-4-意外&#34;&gt;&lt;a href=&#34;#Day-4-意外&#34; class=&#34;headerlink&#34; title=&#34;Day 4 意外&#34;&gt;&lt;/a&gt;Day 4 意外&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;黄码、绿码、IFS&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;早上起床，感冒没有好转，天气却进一步入冬，窗外下起了小雨，气温更低了。等来到地铁站准备前往五一广场时，发现健康码居然变黄了，这也是疫情这几天，健康码第一次变黄。想到最近3天也有2次核酸阴性，应该可以申诉转绿，于是回到酒店向所在社区报备，工作人员说可以再做一次核酸就可以变回来。我们便前往最近的核酸监测点做核酸，结果黄码的检测队伍已经排满了，只能去湖南第二人民医院去做。从队伍里的人聊天的内容看，健康码突然变黄的游客似乎并不少。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/10/14/xw3uQS.jpg&#34; alt=&#34;黄码&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们打了个车去往下一个核酸点，还好也就10分钟车程，令人哭笑不得的是，车还没到码就神奇地又变绿了。为了保险起见，我们还是打算做一次，正排着绿码核酸的队伍，健康码又变黄了。只能再去黄码队伍里排着，寒风里像我们这样排队的人并不少，也有挺多黄了又绿绿了又黄的。在网上搜了下黄码申诉的渠道，结果电话到最后都没有打通过。只能被迫下载极为难用的app，也不顾忌个人信息的安全问题，做了黄码专属核酸，填了申诉表单；填完也看不到申诉进度，只能祈祷黄码能早点转绿。在微博上搜了下#长沙 黄码#关键词，不出意外，受害者颇多，甚至也有当地人前来吐槽。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/10/14/xw3MLQ.jpg&#34; alt=&#34;申诉&#34;&gt;&lt;/p&gt;
&lt;p&gt;做完核酸也到了午饭的时间，户外实在太冷，也没有心情和健康码前往五一广场吃湘菜，只能就地在马路对面的巡湘记解决。期间又经历了一次黄转绿转黄。而我已风轻云淡，伴随着黄码和因感冒失灵的鼻子，这顿饭吃得并不算香。不过，其中的豌豆还是相当不错。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/10/14/xw3mz8.jpg&#34; alt=&#34;豌豆&#34;&gt;&lt;/p&gt;
&lt;p&gt;饭后码依旧是黄的，参考小上的经验，我们去韭菜园社区线下申诉，幸运的是因为做了3天两检，我们的情况可以通过填表申诉解决，欣然配合后社区提交疾控中心，说2个小时内解决。在码转绿之前也没有商场能容下我们，我俩只能再次光临网鱼网咖。由于抵达时间过早，码还没有变绿网吧小哥还收到了社区电话，结果等我俩打车准备回酒店的时候，码突然好了。在给网吧小哥解释后，我们在这里战斗了一个下午。&lt;/p&gt;
&lt;p&gt;晚饭时间，我们打车去了最后的目的地IFS，享用了最后的茶颜悦色，以一顿不辣的湘菜结束了第三天。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/10/14/xw3Ksg.jpg&#34; alt=&#34;茶颜.jpg&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Day-5-宅&#34;&gt;&lt;a href=&#34;#Day-5-宅&#34; class=&#34;headerlink&#34; title=&#34;Day 5 宅&#34;&gt;&lt;/a&gt;Day 5 宅&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;杭州&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;绿码坚强地坚持到了这一天一早，我们6点不到便启程前往长沙南车站，一路和满口湘普的滴滴司机交谈甚欢。经过4个小时车程，我俩成功“逃离”长沙，来了杭州。杭州东站的检疫措施一点不输长沙，偌大的站厅被划成迷宫，好在核酸效率很高，只用了10多分钟我们就坐上了去江边的地铁。&lt;/p&gt;
&lt;p&gt;杭州也是阴雨连绵，我们满心期待预定的江景房风景也打了折扣，江面和对岸的群山如同被盖上了薄纱。我俩感冒没好，也没有心情冒着雨去西湖散步，叫了个外卖奶茶吃饱喝足便回到床上躺下。嗯……果然还是茶颜悦色更胜一筹。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/10/14/xw3lZj.jpg&#34; alt=&#34;江景&#34;&gt;&lt;/p&gt;
&lt;p&gt;晚上我们去附近的一家泰式餐厅南妈stay解决了晚饭，性价比还是不错的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/10/14/xw31ds.jpg&#34; alt=&#34;南妈stay&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Day-6-返程&#34;&gt;&lt;a href=&#34;#Day-6-返程&#34; class=&#34;headerlink&#34; title=&#34;Day 6 返程&#34;&gt;&lt;/a&gt;Day 6 返程&lt;/h2&gt;&lt;p&gt;旅程的最后一天，我们睡到12点才出发，雨还在淅淅沥沥下着，雾倒是消散了些，旅行的兴致已经没剩多少。商城里的点都德还是熟悉的味道，各种点心和在上海还有广州尝到的区别不大。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/10/14/xw3Giq.jpg&#34; alt=&#34;点都德&#34;&gt;&lt;/p&gt;
&lt;p&gt;饭后再商场里闲逛，发现居然有KTV，价格还算公道，于是在中包里度过了愉快的一个下午，唱到了许多许久未唱的老歌。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/10/14/xw33on.jpg&#34; alt=&#34;KTV&#34;&gt;&lt;/p&gt;
&lt;p&gt;从商场出来，时间也不早了，我们打着伞，拖着拉杆箱，坐地铁来到杭州站。晚上9点多久回到了上海，还是熟悉的上海南站。补做了车站的核酸，顺利回了家，结束了这次惊喜意外的国庆旅程。&lt;/p&gt;
&lt;p&gt;尽管和去年相比，因为核酸和天气多了意外，但也是我和嘉雯的第一次一起出发一起回家，期待下一次出发。坏天气总会过去，坏运气也是。&lt;/p&gt;
</content>
        <category term="随笔" />
        <category term="长沙" />
        <category term="杭州" />
        <category term="湖南" />
        <category term="核酸" />
        <category term="美食" />
        <updated>2022-10-14T09:17:48.000Z</updated>
    </entry>
    <entry>
        <id>http://shenlvmeng.github.com/blog/2022/08/25/all-about-code-2/</id>
        <title>关于编码的一切 ——《代码大全》 下</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2022/08/25/all-about-code-2/"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;文接&lt;a href=&#34;https://shenlvmeng.github.io/blog/2022/03/03/all-about-code/&#34;&gt;关于编码的一切 ——《代码大全》 下&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;软件质量&#34;&gt;&lt;a href=&#34;#软件质量&#34; class=&#34;headerlink&#34; title=&#34;软件质量&#34;&gt;&lt;/a&gt;软件质量&lt;/h2&gt;&lt;p&gt;在了解最基本的变量和语句组织后，这一部分围绕提高软件质量展开。&lt;/p&gt;
&lt;h3 id=&#34;概述&#34;&gt;&lt;a href=&#34;#概述&#34; class=&#34;headerlink&#34; title=&#34;概述&#34;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;软件的外在质量特性体现在：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;正确性&lt;/li&gt;
&lt;li&gt;可用性&lt;/li&gt;
&lt;li&gt;效率&lt;/li&gt;
&lt;li&gt;可靠性&lt;/li&gt;
&lt;li&gt;健壮性&lt;/li&gt;
&lt;li&gt;适应性&lt;/li&gt;
&lt;li&gt;完整性&lt;/li&gt;
&lt;li&gt;精确性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;内在质量特性体现在：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可维护性&lt;/li&gt;
&lt;li&gt;可扩展性&lt;/li&gt;
&lt;li&gt;可移植性&lt;/li&gt;
&lt;li&gt;可读性&lt;/li&gt;
&lt;li&gt;可测试性&lt;/li&gt;
&lt;li&gt;可理解性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而改善软件质量可以有很多技术：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确定目标&lt;/li&gt;
&lt;li&gt;测试策略&lt;/li&gt;
&lt;li&gt;非正式走查&lt;/li&gt;
&lt;li&gt;正式技术复查&lt;/li&gt;
&lt;li&gt;外部审查&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;开发过程中可以通过量化结果、制作原型、控制变更等手段提升质量。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不同的质量保障手段效率各不相同，多种缺陷检测办法结合、人工和计算机检测结合，效果会比单打独斗要好；然而没有任何一种错误检测办法可以解决全部问题&lt;/li&gt;
&lt;li&gt;越早引入软件的问题，修正代价越大，尽早开始代码质量保障工作&lt;/li&gt;
&lt;li&gt;需求或架构上的错误相比编码阶段会带来更广泛的影响&lt;/li&gt;
&lt;li&gt;改善质量可以降低开发成本&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;协同构建&#34;&gt;&lt;a href=&#34;#协同构建&#34; class=&#34;headerlink&#34; title=&#34;协同构建&#34;&gt;&lt;/a&gt;协同构建&lt;/h3&gt;&lt;p&gt;协同构建即在同行的帮助下完成代码构建。方式包括但不限于结对编程、正式检查、非正式技术复查、文档阅读等等。&lt;strong&gt;结对编程&lt;/strong&gt;和&lt;strong&gt;技术性复查&lt;/strong&gt;可以缩短开发周期，排查出更多错误，减少代码的维护时间。同时，同行间的协同构建也有助于快速提升公司开发者的开发水平。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;结对编程&lt;ul&gt;
&lt;li&gt;结对编程中，一名程序员敲代码，另外一名注意有没有出现错误，以及考虑策略性问题&lt;/li&gt;
&lt;li&gt;成功秘诀&lt;ul&gt;
&lt;li&gt;事先确定编程规范，避免琐碎争吵&lt;/li&gt;
&lt;li&gt;不编程的成员不能变成旁观者&lt;/li&gt;
&lt;li&gt;不需要在简单问题上使用结对编程&lt;/li&gt;
&lt;li&gt;灵活对结对成员轮换，让大家熟悉不同系统&lt;/li&gt;
&lt;li&gt;避免新手组队&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;正式检查&lt;ul&gt;
&lt;li&gt;一种特殊的复查，与会主持人负责组织事宜，按计划、概述、准备、与会人（非作者）阐述代码、详查报告、跟进等步骤推进&lt;/li&gt;
&lt;li&gt;针对代码而非作者&lt;/li&gt;
&lt;li&gt;最终由作者负责如何处理缺陷&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;走查&lt;ul&gt;
&lt;li&gt;走查是形式和流程都比较宽松的代码复查方式，时间较短，重点也在检查错误而非修正它们&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;代码阅读&lt;ul&gt;
&lt;li&gt;类似Code Review，关注点主要在代码本身，而非会议&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;公开演示：类似showcase&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;开发者测试&#34;&gt;&lt;a href=&#34;#开发者测试&#34; class=&#34;headerlink&#34; title=&#34;开发者测试&#34;&gt;&lt;/a&gt;开发者测试&lt;/h3&gt;&lt;p&gt;测试分单元测试、组件测试、集成测试、回归测试、系统测试，前两部分通常由开发者进行，后三部分由专门的测试人员进行。测试按是否了解测试对象内部工作原理也可以分为黑盒测试和白盒测试。最后要注意，&lt;strong&gt;测试 ≠ 调试&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;对于开发者而言，测试天生有些特别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;测试的目标是找出错误而非实现功能&lt;/li&gt;
&lt;li&gt;测试绝不可能彻底证明程序里没有错误&lt;/li&gt;
&lt;li&gt;测试无法改善软件质量，它本身只是一个指示器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;开发者测试在整个项目时间中大概占8% - 25%，在测试时有一些tips：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;写代码前先写测试用例，不会比后写多花功夫&lt;/li&gt;
&lt;li&gt;不止进行“干净测试”，也要考虑“肮脏测试”&lt;/li&gt;
&lt;li&gt;很容易对测试覆盖率过度乐观&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在现实世界中，要穷尽所有可能的输入是不可能的，&lt;strong&gt;测试不可能完全&lt;/strong&gt;，有些方法会起到作用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;strong&gt;路径数&lt;/strong&gt;计算计算用例的&lt;strong&gt;最少&lt;/strong&gt;数目，它可以保证所有代码的执行&lt;ul&gt;
&lt;li&gt;通过子程序时，开始记1&lt;/li&gt;
&lt;li&gt;遇到&lt;code&gt;if&lt;/code&gt;、&lt;code&gt;while&lt;/code&gt;、&lt;code&gt;repeat&lt;/code&gt;、&lt;code&gt;for&lt;/code&gt;、&lt;code&gt;and&lt;/code&gt;、&lt;code&gt;or&lt;/code&gt;或等价物时，+1&lt;/li&gt;
&lt;li&gt;遇到每一个&lt;code&gt;case&lt;/code&gt;语句，+1；没有缺省分支时，再+1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据流测试&lt;/strong&gt;可以覆盖到数据的变化情况&lt;ul&gt;
&lt;li&gt;数据有&lt;strong&gt;已定义&lt;/strong&gt;、&lt;strong&gt;已使用&lt;/strong&gt;、&lt;strong&gt;已销毁&lt;/strong&gt;状态&lt;/li&gt;
&lt;li&gt;子程序控制流有&lt;strong&gt;已进入&lt;/strong&gt;、&lt;strong&gt;已退出&lt;/strong&gt;状态&lt;/li&gt;
&lt;li&gt;测试所有的&lt;strong&gt;已定义&lt;/strong&gt;、&lt;strong&gt;已定义-已使用&lt;/strong&gt;组合，注意其他的组合顺序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一个好的测试用例可以覆盖可数据数据的一大部分&lt;/li&gt;
&lt;li&gt;用启发式方法去&lt;strong&gt;猜测错误&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;留意&lt;strong&gt;边界值&lt;/strong&gt;，如数组边界的off-by-one错误&lt;/li&gt;
&lt;li&gt;考察&lt;strong&gt;好数据&lt;/strong&gt;和&lt;strong&gt;坏数据&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;好数据：期望输入、最小正常值、最大正常值、旧数据兼容性&lt;/li&gt;
&lt;li&gt;坏数据：没有数据、过多数据、无效数据、长度错误、未初始化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用容易验证结果的测试数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于错误，也有一些先验的规律：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;符合八二法则、&lt;strong&gt;绝大多数错误通常和几个具有严重缺陷的子程序有关&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;大多数错误影响范围有限&lt;/li&gt;
&lt;li&gt;大多数构建错误来自编程人员的错误，多从自身想问题&lt;/li&gt;
&lt;li&gt;笔误是一个常见的问题根源&lt;/li&gt;
&lt;li&gt;错误理解需求也是常见原因&lt;/li&gt;
&lt;li&gt;大多数的错误都较易修正&lt;/li&gt;
&lt;li&gt;业界经验是，平均1000行代码发现1-25个错误，发布产品大概是1000行代码0.5个，&lt;/li&gt;
&lt;li&gt;同样留意，测试用例本身是否有误&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在当前的编程环境和工作条件下，容易找到很多测试框架，它们会包含脚手架、diff工具、测试数据生成器、覆盖率监测、日志记录、系统干扰器等。另外，自动化测试、测试问题复盘等对测试质量也有提升帮助。&lt;/p&gt;
&lt;h3 id=&#34;调试&#34;&gt;&lt;a href=&#34;#调试&#34; class=&#34;headerlink&#34; title=&#34;调试&#34;&gt;&lt;/a&gt;调试&lt;/h3&gt;&lt;p&gt;调试（debug）是寻找错误根本原因和纠正错误的过程。它和测试一样，本身不是提升代码质量的方法，而是诊断代码缺陷的手段。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调试の误区&lt;ul&gt;
&lt;li&gt;纯靠猜测找到问题所在&lt;/li&gt;
&lt;li&gt;不去花时间理解程序和问题&lt;/li&gt;
&lt;li&gt;暂时性的掩盖问题&lt;/li&gt;
&lt;li&gt;把问题推给硬件，而不思考是不是出在自己身上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;寻找缺陷的步骤&lt;ul&gt;
&lt;li&gt;让错误状态稳定下来 &amp;#x3D;&amp;gt; 稳定复现&lt;/li&gt;
&lt;li&gt;收集相关数据，构造错误原因假说&lt;/li&gt;
&lt;li&gt;通过测试或检查代码证实或证伪假说&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一个无法稳定重现的问题，可能和初始化或和时间有关系&lt;/li&gt;
&lt;li&gt;寻找缺陷的tips&lt;ul&gt;
&lt;li&gt;构建缺陷假说时，要能合理解释所有测试用例&lt;/li&gt;
&lt;li&gt;定位缺陷困难时，及时补充更多的测试用例复现问题，用&lt;strong&gt;多视图&lt;/strong&gt;的方式盲人摸象定位缺陷&lt;/li&gt;
&lt;li&gt;测试用例过于发散时，及时用用例否定一些假说&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;二分法&lt;/strong&gt;缩小嫌疑范围&lt;/li&gt;
&lt;li&gt;检查&lt;strong&gt;最近修改&lt;/strong&gt;或&lt;strong&gt;最近出过错&lt;/strong&gt;的代码&lt;/li&gt;
&lt;li&gt;小黄鸭调试法&lt;/li&gt;
&lt;li&gt;暂时休息一下&lt;/li&gt;
&lt;li&gt;蛮力调试&lt;ul&gt;
&lt;li&gt;抛弃有问题的代码，从头设计和编码&lt;/li&gt;
&lt;li&gt;抛弃整个程序，从头开始设计和编码&lt;/li&gt;
&lt;li&gt;不放过任何一个编译器错误&lt;/li&gt;
&lt;li&gt;手动遍历所有的循环&lt;/li&gt;
&lt;li&gt;更换编译环境或比那一起&lt;/li&gt;
&lt;li&gt;持续自动化测试&lt;/li&gt;
&lt;li&gt;显示代码中所有的打印日志信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;给启发式调试法一个deadline&lt;/li&gt;
&lt;li&gt;调试中避免心理惯性：人们总期望一个新现象类似他们见过的某种现象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修正缺陷&lt;ul&gt;
&lt;li&gt;修正问题前确保已经很好地理解了&lt;/li&gt;
&lt;li&gt;理解程序而不仅是问题&lt;/li&gt;
&lt;li&gt;验证对错误的分析或理解&lt;/li&gt;
&lt;li&gt;保留最初的源代码&lt;/li&gt;
&lt;li&gt;治本，而不要治标&lt;/li&gt;
&lt;li&gt;一次只改一个地方&lt;/li&gt;
&lt;li&gt;搜寻代码中还有没有类似的缺陷&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;调试工具&lt;ul&gt;
&lt;li&gt;源代码diff&lt;/li&gt;
&lt;li&gt;编译警告信息&lt;/li&gt;
&lt;li&gt;lint和代码自动修正&lt;/li&gt;
&lt;li&gt;性能剖测（profile）&lt;/li&gt;
&lt;li&gt;测试脚手架&lt;/li&gt;
&lt;li&gt;调试器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;重构&#34;&gt;&lt;a href=&#34;#重构&#34; class=&#34;headerlink&#34; title=&#34;重构&#34;&gt;&lt;/a&gt;重构&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;更多重构介绍可以参考这篇blog&lt;a href=&#34;https://shenlvmeng.github.io/blog/2020/08/17/refactoring-design-improvement/&#34;&gt;重构 —— 代码的实用性与艺术性&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;重构即在&lt;strong&gt;不改变软件外部行为的基础上，改变其内部结构&lt;/strong&gt;。即便是管理完善的项目，每个月都会发生需求变化，稳定不变的需求是个童话。&lt;/p&gt;
&lt;p&gt;代码出现以下“坏味道”（smell）时，代表需要重构了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代码重复&lt;/li&gt;
&lt;li&gt;子程序冗长&lt;/li&gt;
&lt;li&gt;嵌套过深&lt;/li&gt;
&lt;li&gt;内聚性差&lt;/li&gt;
&lt;li&gt;参数列表过长&lt;/li&gt;
&lt;li&gt;类和继承关系不合理&lt;/li&gt;
&lt;li&gt;基本数据类型过多&lt;/li&gt;
&lt;li&gt;“流浪数据”传递&lt;/li&gt;
&lt;li&gt;无所事事的类&lt;/li&gt;
&lt;li&gt;命名不当&lt;/li&gt;
&lt;li&gt;难理解的注释&lt;/li&gt;
&lt;li&gt;全局变量&lt;/li&gt;
&lt;li&gt;子程序需要前置或后置处理&lt;/li&gt;
&lt;li&gt;过早设计或过度设计&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;重构分级别有下面一些手段&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据级&lt;ul&gt;
&lt;li&gt;具名常量&lt;/li&gt;
&lt;li&gt;更可读的变量&lt;/li&gt;
&lt;li&gt;函数替代表达式&lt;/li&gt;
&lt;li&gt;中间变量&lt;/li&gt;
&lt;li&gt;减少重复使用变量&lt;/li&gt;
&lt;li&gt;类型码转成类或枚举类型&lt;/li&gt;
&lt;li&gt;类封装&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;语句级&lt;ul&gt;
&lt;li&gt;分解布尔表达式&lt;/li&gt;
&lt;li&gt;用可读名字的布尔函数替代布尔表达式&lt;/li&gt;
&lt;li&gt;合并条件语句中的重复代码片段&lt;/li&gt;
&lt;li&gt;&lt;code&gt;break&lt;/code&gt;或&lt;code&gt;return&lt;/code&gt;替代循环控制变量&lt;/li&gt;
&lt;li&gt;多态替换条件语句&lt;/li&gt;
&lt;li&gt;null对象替代空值检测&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;子程序&lt;ul&gt;
&lt;li&gt;内莲花&lt;/li&gt;
&lt;li&gt;提炼子程序&lt;/li&gt;
&lt;li&gt;转化为类&lt;/li&gt;
&lt;li&gt;增&amp;#x2F;删参数&lt;/li&gt;
&lt;li&gt;合并&amp;#x2F;拆分子程序&lt;/li&gt;
&lt;li&gt;读写操作分离&lt;/li&gt;
&lt;li&gt;传递成员&amp;#x2F;类&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;类实现&lt;ul&gt;
&lt;li&gt;值&amp;#x2F;引用对象转化&lt;/li&gt;
&lt;li&gt;成员函数&amp;#x2F;成员数据位置移动&lt;/li&gt;
&lt;li&gt;相似代码提炼到基类&lt;/li&gt;
&lt;li&gt;差异代码拆分到派生类&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;类接口&lt;ul&gt;
&lt;li&gt;类拆分&amp;#x2F;合并&lt;/li&gt;
&lt;li&gt;删除类&lt;/li&gt;
&lt;li&gt;去掉中间人&lt;/li&gt;
&lt;li&gt;继承替代委托&lt;/li&gt;
&lt;li&gt;委托替代继承&lt;/li&gt;
&lt;li&gt;引入外部成员函数&lt;/li&gt;
&lt;li&gt;引入扩展类&lt;/li&gt;
&lt;li&gt;封装不使用的成员函数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;系统级&lt;ul&gt;
&lt;li&gt;为无法控制的数据创建索引源&lt;/li&gt;
&lt;li&gt;工厂模式&lt;/li&gt;
&lt;li&gt;异常&amp;#x2F;错误处理代码选型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要想让重构不影响日常功能开发，需要考虑&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有一个代码版本管理工具&lt;/li&gt;
&lt;li&gt;重构步伐小一点&lt;/li&gt;
&lt;li&gt;同一时间只做一个重构&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;重新测试&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;增加测试用例&lt;/li&gt;
&lt;li&gt;检查代码更改&lt;/li&gt;
&lt;li&gt;根据重构风险选择重构方法&lt;/li&gt;
&lt;li&gt;不要把重构当成糟糕设计的挡箭牌&lt;/li&gt;
&lt;li&gt;避免用重构代替重写&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;重构可以在修改代码的时候进行，不论是增加修改子程序还是类，或者是修复缺陷。对于从未重构的糟糕代码，可以用一部分混乱的代码隔离复杂度，把理想规整的代码和混乱不堪的真实世界隔离开。&lt;/p&gt;
&lt;h3 id=&#34;代码调整策略&#34;&gt;&lt;a href=&#34;#代码调整策略&#34; class=&#34;headerlink&#34; title=&#34;代码调整策略&#34;&gt;&lt;/a&gt;代码调整策略&lt;/h3&gt;&lt;p&gt;代码调整指出于&lt;strong&gt;性能&lt;/strong&gt;考虑，对代码进行实现上的调整。本章主要讨论策略。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;动手前的考虑&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;性能≠代码速度&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;想清楚你确实在解决一个需要解决的问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;调整考量&lt;ul&gt;
&lt;li&gt;程序设计：设计架构时考虑整体性能，再为每个子系统、类设计要达到的资源占用目标&lt;/li&gt;
&lt;li&gt;和操作系统的交互&lt;/li&gt;
&lt;li&gt;代码编译&lt;/li&gt;
&lt;li&gt;硬件&lt;/li&gt;
&lt;li&gt;类和子程序设计&lt;/li&gt;
&lt;li&gt;代码调整&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;帕累托法则，又称八二法则，程序中20%的子程序耗费了80%的执行时间&lt;/li&gt;
&lt;li&gt;一些&lt;strong&gt;错误认知&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;减少代码行数就可以减少资源占用&lt;/li&gt;
&lt;li&gt;特定的写法会比其他的更快，代码也会更小（&lt;em&gt;要看编译环境&lt;/em&gt;）&lt;/li&gt;
&lt;li&gt;应当随时随地优化（&lt;em&gt;不成熟的优化不如不优化&lt;/em&gt;）&lt;/li&gt;
&lt;li&gt;运行速度和正确性同样重要&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;先提升代码可维护性，在程序完成且表现正确后，再去提升系统性能&lt;/li&gt;
&lt;li&gt;常见的低效率来源&lt;ul&gt;
&lt;li&gt;IO操作&lt;/li&gt;
&lt;li&gt;内存分页&lt;/li&gt;
&lt;li&gt;系统API调用&lt;/li&gt;
&lt;li&gt;脚本语言&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;性能测量：没有准确的性能测量就不要去做优化&lt;/li&gt;
&lt;li&gt;代码调整需要反复尝试，才能达到理想的性能提高&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;代码调整技术&#34;&gt;&lt;a href=&#34;#代码调整技术&#34; class=&#34;headerlink&#34; title=&#34;代码调整技术&#34;&gt;&lt;/a&gt;代码调整技术&lt;/h3&gt;&lt;p&gt;文接上章，本章讨论具体调整手段。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代码调整和重构相反，大多数情况下是以牺牲程序可读性为代价换取更高的性能&lt;/li&gt;
&lt;li&gt;调整手段&lt;ul&gt;
&lt;li&gt;逻辑&lt;ul&gt;
&lt;li&gt;知道答案后停止判断&lt;/li&gt;
&lt;li&gt;按照出现频率调整判断顺序，把容易为真的判断放在最前面&lt;/li&gt;
&lt;li&gt;表驱动法代替复杂表达式&lt;/li&gt;
&lt;li&gt;惰性求值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;循环&lt;ul&gt;
&lt;li&gt;把判断提出循环体&lt;/li&gt;
&lt;li&gt;展开小循环&lt;/li&gt;
&lt;li&gt;合并循环&lt;/li&gt;
&lt;li&gt;减少循环体内的操作&lt;/li&gt;
&lt;li&gt;用哨兵值提前结束循环&lt;/li&gt;
&lt;li&gt;把最忙的循环放在最内侧&lt;/li&gt;
&lt;li&gt;用低强度的计算代替高强度计算，如加法替代乘法，乘法代替幂运算&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数据&lt;ul&gt;
&lt;li&gt;使用整型而非浮点数&lt;/li&gt;
&lt;li&gt;减少数组维度&lt;/li&gt;
&lt;li&gt;使用辅助索引&lt;/li&gt;
&lt;li&gt;使用缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;表达式&lt;ul&gt;
&lt;li&gt;利用恒等式简化代码复杂度&lt;/li&gt;
&lt;li&gt;削弱计算强度&lt;/li&gt;
&lt;li&gt;编译期初始化&lt;/li&gt;
&lt;li&gt;小心系统函数，为了兼容最糟情况，系统函数会比较复杂&lt;/li&gt;
&lt;li&gt;事先算出结果&lt;/li&gt;
&lt;li&gt;删除公共表达式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;子程序&lt;ul&gt;
&lt;li&gt;子程序改为内联&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用低级语言重写&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;再次强调，&lt;strong&gt;没有性能优化测量就没有代码调整&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;系统考虑&#34;&gt;&lt;a href=&#34;#系统考虑&#34; class=&#34;headerlink&#34; title=&#34;系统考虑&#34;&gt;&lt;/a&gt;系统考虑&lt;/h2&gt;&lt;p&gt;这一部分站在系统的角度考虑构建过程中的程序规模、集成、工具等问题。&lt;/p&gt;
&lt;h3 id=&#34;程序规模带来的影响&#34;&gt;&lt;a href=&#34;#程序规模带来的影响&#34; class=&#34;headerlink&#34; title=&#34;程序规模带来的影响&#34;&gt;&lt;/a&gt;程序规模带来的影响&lt;/h3&gt;&lt;p&gt;软件规模的扩大可能会为你带来意料之外的大量问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果你习惯于开发小项目，那么你的第一个大型项目很可能会严重失控&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;沟通交流&lt;/strong&gt;：项目成员的扩大带来的交流路径不是加性的，是&lt;strong&gt;乘性&lt;/strong&gt;的&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;错误&lt;/strong&gt;：项目规模的扩大也会带来更高的缺陷密度&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;生产率&lt;/strong&gt;：大项目会带来更低的生产率&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;工作量&lt;/strong&gt;：软件构建的工作量和项目大小是线性关系，而其他活动的工作量则是非线性增加&lt;/li&gt;
&lt;li&gt;不同规模的代码从小到大可以称作程序、产品、系统、系统产品，没能意识到它们间的不同也是估算偏差的出现来源&lt;/li&gt;
&lt;li&gt;项目越正规，就越重视&lt;strong&gt;方法论&lt;/strong&gt;，不得不写的文档也会更多，撰写的文档也会更正规&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;构建管理&#34;&gt;&lt;a href=&#34;#构建管理&#34; class=&#34;headerlink&#34; title=&#34;构建管理&#34;&gt;&lt;/a&gt;构建管理&lt;/h3&gt;&lt;p&gt;构建管理是软件管理中的一部分。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;鼓励良好的编程实践&lt;ul&gt;
&lt;li&gt;逐行复查&lt;/li&gt;
&lt;li&gt;代码签名&lt;/li&gt;
&lt;li&gt;鼓励最佳实践&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;配置管理：系统化定义项目工件和处理流程&lt;ul&gt;
&lt;li&gt;需求和设计变更&lt;ul&gt;
&lt;li&gt;遵循系统化的变更手续&lt;/li&gt;
&lt;li&gt;成组变更&lt;/li&gt;
&lt;li&gt;评估变更成本&lt;/li&gt;
&lt;li&gt;坏味道：频繁大量变更&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;软件变更：版本控制软件&lt;/li&gt;
&lt;li&gt;机器配置变更：机器镜像&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;评估构建进度表&lt;ul&gt;
&lt;li&gt;评估项目规模和工作量是软件项目管理中最具挑战性的部分，平均水平的大型软件都要超时1年，超预算100%才能完成&lt;/li&gt;
&lt;li&gt;清楚说明软件需求&lt;/li&gt;
&lt;li&gt;使用不同方法评估再对比&lt;/li&gt;
&lt;li&gt;定期更新评估&lt;/li&gt;
&lt;li&gt;以下因素会影响软件开发进度，但不易被量化&lt;ul&gt;
&lt;li&gt;开发者的经验和能力&lt;/li&gt;
&lt;li&gt;团队的动力&lt;/li&gt;
&lt;li&gt;管理质量&lt;/li&gt;
&lt;li&gt;可重用的代码数目&lt;/li&gt;
&lt;li&gt;人员流动性&lt;/li&gt;
&lt;li&gt;需求变更&lt;/li&gt;
&lt;li&gt;文档量&lt;/li&gt;
&lt;li&gt;分级安全环境&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果进度落后了要怎么办&lt;ul&gt;
&lt;li&gt;扩充团队在&lt;strong&gt;项目任务不能分割并一一击破&lt;/strong&gt;时，只会增加项目交流复杂度，并加速项目延期&lt;/li&gt;
&lt;li&gt;缩减项目范围，有限保证核心功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;度量：对项目特征进行度量可以评估项目进度和风险，当然保证ddl比收集度量数据更重要&lt;/li&gt;
&lt;li&gt;把程序员当人看&lt;ul&gt;
&lt;li&gt;程序员1天大概有30%时间花费在“对项目没有直接好处”的非技术活动中&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不同程序员间的努力和能力差异很大&lt;/strong&gt;，不同团队在软件质量和生产率的差异上也很大，好的和坏的程序员都倾向于聚集在一起&lt;/li&gt;
&lt;li&gt;在代码风格的信仰问题上，使用“建议”或大多数人达成统一的指导规范&lt;/li&gt;
&lt;li&gt;优良的物理工作环境有助于提升程序员的生产率和生产质量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;管理你的管理者：向上管理&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;集成&#34;&gt;&lt;a href=&#34;#集成&#34; class=&#34;headerlink&#34; title=&#34;集成&#34;&gt;&lt;/a&gt;集成&lt;/h3&gt;&lt;p&gt;集成方式也会影响到集成的质量。从频率上分，有&lt;strong&gt;阶段式集成&lt;/strong&gt;和&lt;strong&gt;增量集成&lt;/strong&gt;，在阶段式集成中，分为单元开发和系统集成两个阶段。增量集成中，程序是一点一点写出来并一点点拼接起来的。对比阶段式集成，增量集成有下面一些好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;易于定位错误&lt;/li&gt;
&lt;li&gt;更早在项目中取得系统级结果&lt;/li&gt;
&lt;li&gt;对项目结果更好的监控&lt;/li&gt;
&lt;li&gt;能在更短的开发计划中建造出整个系统&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而增量集成有下面一些常见策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;自顶向下集成&lt;/strong&gt;：先集成系统设计，再集成具体实现；优点是能更早有整个系统的大局观，缺点是在前期会加入很多底层的mock代码，且将调试过程推迟到项目后期&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自底向上集成&lt;/strong&gt;：和自顶向下相反，优点是很容易定位错误，缺点是丧失全局的认识，系统设计的问题在后期修改成本较高&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;三明治集成&lt;/strong&gt;：先集成顶部的高层业务对象和底部的基础工具类，再集成中间层代码，整合了自顶向下和自底向上&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;风险导向的集成&lt;/strong&gt;：鉴别不同类的风险级别，先集成风险高的&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;功能导向的集成&lt;/strong&gt;：一次集成一组功能，它基本上不需要脚手架，且每次集成都能增强系统的功能性，且和面向对象设计比较好协同工作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;T型集成&lt;/strong&gt;：在集成高层对象后，先选中某个特定功能块，完成一次所有类的集成，这样可以作为MVP演练整个系统&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;结合&lt;strong&gt;冒烟测试&lt;/strong&gt;的“&lt;strong&gt;每日构建&lt;/strong&gt;”（daily build）是软件集成的一种最佳实践。它能让产品每天都有进步，且让项目保持一个固定的脉搏。做好daily build，有下面一些建议&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不放过失败的build，保证每次build都能通过冒烟测试&lt;/li&gt;
&lt;li&gt;每天进行冒烟测试&lt;/li&gt;
&lt;li&gt;冒烟测试需要和代码一样“与时俱进”&lt;/li&gt;
&lt;li&gt;让daily build和冒烟测试&lt;strong&gt;自动化&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;要求开发人员构建前进行冒烟测试&lt;/li&gt;
&lt;li&gt;将修订保持合适的合并节奏，不要太密，也不要太疏&lt;/li&gt;
&lt;li&gt;在早上发布build，给潜在问题留下修复时间&lt;/li&gt;
&lt;li&gt;顶住需求压力，保证daily build和冒烟测试&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在daily build的基础上，可以很轻易地做到1日多次的&lt;strong&gt;持续集成&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;编程工具&#34;&gt;&lt;a href=&#34;#编程工具&#34; class=&#34;headerlink&#34; title=&#34;编程工具&#34;&gt;&lt;/a&gt;编程工具&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;工欲善其事，必先利其器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;现代化的编程环境下，有很多可以采用的编程工具：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设计工具&lt;/li&gt;
&lt;li&gt;源代码工具&lt;ul&gt;
&lt;li&gt;IDE&lt;/li&gt;
&lt;li&gt;文本替换工具&lt;/li&gt;
&lt;li&gt;diff工具&lt;/li&gt;
&lt;li&gt;merge工具&lt;/li&gt;
&lt;li&gt;源代码美化器&lt;/li&gt;
&lt;li&gt;接口文档生成&lt;/li&gt;
&lt;li&gt;代码模板&amp;#x2F;代码生成&lt;/li&gt;
&lt;li&gt;命令行&lt;/li&gt;
&lt;li&gt;代码质量分析&lt;ul&gt;
&lt;li&gt;linter&lt;/li&gt;
&lt;li&gt;metrics报告&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;重构代码&lt;ul&gt;
&lt;li&gt;重构器&lt;/li&gt;
&lt;li&gt;代码翻译器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;版本控制工具&lt;/li&gt;
&lt;li&gt;数据字典&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可执行码工具&lt;ul&gt;
&lt;li&gt;目标码生成&lt;ul&gt;
&lt;li&gt;编译器、链接器&lt;/li&gt;
&lt;li&gt;build工具，如make、ant&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;程序库&amp;#x2F;第三方库&lt;/li&gt;
&lt;li&gt;代码生成向导&lt;/li&gt;
&lt;li&gt;安装指引&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;调试&lt;/li&gt;
&lt;li&gt;测试&lt;/li&gt;
&lt;li&gt;代码调整&lt;ul&gt;
&lt;li&gt;性能剖测&lt;/li&gt;
&lt;li&gt;汇编和反汇编&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在Unix这样的工具导向环境下就更容易孕育编程工具，如grep、diff、sort、make、tar、line、sed、awk、vi等。几乎所有的大型组织都有自己的内部工具和支持团队，不少比市面上的还要优秀。针对特定项目，有时候也会开发特定的项目工具，如航天、保险、医疗等。对于个人开发，也可以使用脚本这种自动执行重复性杂务的工具。&lt;/p&gt;
&lt;p&gt;最后要澄清一个事实，&lt;strong&gt;编程工具并不能消灭人在编程里的核心地位&lt;/strong&gt;，只是不断&lt;strong&gt;重塑&lt;/strong&gt;（reshape）编程的含义。连接到其他软硬件的复杂接口，规章制度、业务规则这些计算机编程之外的复杂之源还是要人来应对。而被用来填补真实世界和解决问题的计算机之间鸿沟的人，被称作程序员。&lt;/p&gt;
&lt;h2 id=&#34;软件工艺&#34;&gt;&lt;a href=&#34;#软件工艺&#34; class=&#34;headerlink&#34; title=&#34;软件工艺&#34;&gt;&lt;/a&gt;软件工艺&lt;/h2&gt;&lt;p&gt;编程是硬件与艺术的融合体，软件工艺是编程美学的一种体现。&lt;/p&gt;
&lt;h3 id=&#34;布局与风格&#34;&gt;&lt;a href=&#34;#布局与风格&#34; class=&#34;headerlink&#34; title=&#34;布局与风格&#34;&gt;&lt;/a&gt;布局与风格&lt;/h3&gt;&lt;p&gt;编排出色的代码会带来&lt;strong&gt;视觉&lt;/strong&gt;上和&lt;strong&gt;思维&lt;/strong&gt;上的愉悦。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基本原则&lt;ul&gt;
&lt;li&gt;好的布局可以凸显程序的逻辑结构，也更符合人类直觉&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;傻子都会写计算机理解的代码，而优秀程序员写的是人能看懂的代码&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;高手的机型并非天生优于新手，而是高手具备某种知识结构，这种结构有助于高手记住特定类型的信息；因此当信息符合这些结构时，就可以被轻易的理解&lt;/li&gt;
&lt;li&gt;布局非信仰，要保持头脑开放，接受已被证实更好的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;布局技术&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;空白&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;分组&lt;/li&gt;
&lt;li&gt;空行&lt;/li&gt;
&lt;li&gt;缩进&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;括号&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;布局风格：同一层级的语句缩进相同&lt;ul&gt;
&lt;li&gt;纯块结构&lt;/li&gt;
&lt;li&gt;模仿块结构&lt;/li&gt;
&lt;li&gt;花括号指定边界&lt;/li&gt;
&lt;li&gt;行尾布局（不推荐）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;控制结构布局&lt;ul&gt;
&lt;li&gt;段落间的空行&lt;/li&gt;
&lt;li&gt;复杂的表达式拆分条件到多行&lt;/li&gt;
&lt;li&gt;不用&lt;code&gt;goto&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;单行语句布局&lt;ul&gt;
&lt;li&gt;控制长度&lt;/li&gt;
&lt;li&gt;使用空格&lt;/li&gt;
&lt;li&gt;后续行缩进统一&lt;/li&gt;
&lt;li&gt;后续行结尾统一&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一行一条语句&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;减少复杂度&lt;/li&gt;
&lt;li&gt;读代码仅需自上而下&lt;/li&gt;
&lt;li&gt;不要在单行中多个操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一行一个声明&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注释风格&lt;ul&gt;
&lt;li&gt;缩进和代码一致&lt;/li&gt;
&lt;li&gt;用空行和代码隔开&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;子程序布局&lt;ul&gt;
&lt;li&gt;空行分段&lt;/li&gt;
&lt;li&gt;参数按标准缩进&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;类布局&lt;ul&gt;
&lt;li&gt;头部注释 -&amp;gt; 构造函数&amp;#x2F;析构函数 -&amp;gt; public子程序 -&amp;gt; protected子程序 -&amp;gt; private子程序和成员&lt;/li&gt;
&lt;li&gt;文件布局&lt;ul&gt;
&lt;li&gt;一个文件一个类&lt;/li&gt;
&lt;li&gt;文件命名和类有关&lt;/li&gt;
&lt;li&gt;在文件中清晰分隔各子程序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;自说明代码&#34;&gt;&lt;a href=&#34;#自说明代码&#34; class=&#34;headerlink&#34; title=&#34;自说明代码&#34;&gt;&lt;/a&gt;自说明代码&lt;/h3&gt;&lt;p&gt;本节专注于文档的特殊补充形式，即“注释”。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在代码中起主要作用的并非注释，而是&lt;strong&gt;好的编程风格&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;注释的哲学&lt;ul&gt;
&lt;li&gt;注释能提供更高层级的抽象&lt;/li&gt;
&lt;li&gt;重复注释根本没用&lt;/li&gt;
&lt;li&gt;注释写的不合适只会起反作用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注释类别：在代码完工后，只允许出现后三种&lt;ul&gt;
&lt;li&gt;重复代码（Bad case）&lt;/li&gt;
&lt;li&gt;解释代码：当代码过于复杂到需要解释时，最好是改进代码，而不是添加注释&lt;/li&gt;
&lt;li&gt;代码标记，如&lt;code&gt;TODO&lt;/code&gt;，&lt;code&gt;FIXME&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;概述代码&lt;/li&gt;
&lt;li&gt;意图说明&lt;/li&gt;
&lt;li&gt;传达代码以外的信息，如版权声明、保密要求&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;高效注释&lt;ul&gt;
&lt;li&gt;用伪代码法减少注释时间&lt;/li&gt;
&lt;li&gt;将注释如何到开发风格中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注释技术&lt;ul&gt;
&lt;li&gt;注释单行&lt;ul&gt;
&lt;li&gt;去掉无关注是&lt;/li&gt;
&lt;li&gt;减少行尾注释&lt;/li&gt;
&lt;li&gt;行尾注释只用于数据声明、维护标记、标记行尾等场景&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注释代码段&lt;ul&gt;
&lt;li&gt;应表达&lt;strong&gt;why&lt;/strong&gt;而非&lt;strong&gt;how&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;代码本身应尽力组做好说明&lt;/li&gt;
&lt;li&gt;注明非常规用法&lt;/li&gt;
&lt;li&gt;错误或语言环境独特点要加注释&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注释数据声明&lt;ul&gt;
&lt;li&gt;数值单位&lt;/li&gt;
&lt;li&gt;允许范围&lt;/li&gt;
&lt;li&gt;输入限制&lt;/li&gt;
&lt;li&gt;全局数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注释控制结构&lt;ul&gt;
&lt;li&gt;循环结束的行尾注释是代码太复杂的征兆&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注释子程序&lt;ul&gt;
&lt;li&gt;注释要靠近说明的代码&lt;/li&gt;
&lt;li&gt;用简短的话进行说明&lt;/li&gt;
&lt;li&gt;注释声明参数&lt;/li&gt;
&lt;li&gt;可以使用Javadoc这种工具&lt;/li&gt;
&lt;li&gt;说明子程序的全局作用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注释类、文件、程序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;个人性格&#34;&gt;&lt;a href=&#34;#个人性格&#34; class=&#34;headerlink&#34; title=&#34;个人性格&#34;&gt;&lt;/a&gt;个人性格&lt;/h3&gt;&lt;p&gt;软件工程是纯粹的脑力劳动。软件工程师研究工具和原材料的本质时，实际上是在研究人的智力、性格这种无形的东西。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编程工作本质上是项难以监督的工作，你也需要对自己负责&lt;/li&gt;
&lt;li&gt;聪明和谦虚&lt;/li&gt;
&lt;li&gt;求知欲&lt;ul&gt;
&lt;li&gt;形成自我意识&lt;/li&gt;
&lt;li&gt;实验&lt;/li&gt;
&lt;li&gt;学习成功项目&lt;/li&gt;
&lt;li&gt;阅读文档&lt;/li&gt;
&lt;li&gt;和同行交流&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不屈不挠的诚实感&lt;/li&gt;
&lt;li&gt;交流和合作：&lt;strong&gt;编程首先是与人交流，然后才是和计算机交流&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;创造力和纪律&lt;/li&gt;
&lt;li&gt;懒惰：避免“实在懒”，追求“开明懒”和“一劳永逸的懒”&lt;/li&gt;
&lt;li&gt;可能不那么明显的性格&lt;ul&gt;
&lt;li&gt;坚持：要时不时抬头开清方向&lt;/li&gt;
&lt;li&gt;经验：不同于其他行业，&lt;strong&gt;软件开发行业的经验比书本知识价值要小，基础知识变化很快&lt;/strong&gt;，不存在越老越吃香的情况。不持续学习跟上潮流，仅靠经验吃饭，会被逐渐淘汰。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;习惯&lt;ul&gt;
&lt;li&gt;好习惯很重要&lt;/li&gt;
&lt;li&gt;不要用“没有习惯”替代“坏习惯”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;软件工艺探讨的话题&#34;&gt;&lt;a href=&#34;#软件工艺探讨的话题&#34; class=&#34;headerlink&#34; title=&#34;软件工艺探讨的话题&#34;&gt;&lt;/a&gt;软件工艺探讨的话题&lt;/h3&gt;&lt;p&gt;《代码大全》全书都着重于软件构建的细节，本章从抽象的关注点出发，看看哪些方面会影响软件的工艺。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;软件开发的核心是致力于&lt;strong&gt;降低复杂度&lt;/strong&gt;，管理复杂度是软件的核心使命，之前各章节提过了很多具体办法。各种形式的抽象都是管理复杂度的强大工具。&lt;ul&gt;
&lt;li&gt;划分子系统&lt;/li&gt;
&lt;li&gt;仔细定义类接口&lt;/li&gt;
&lt;li&gt;保持接口抽象性&lt;/li&gt;
&lt;li&gt;避免全局变量&lt;/li&gt;
&lt;li&gt;避免深层次继承&lt;/li&gt;
&lt;li&gt;避免深度嵌套和循环&lt;/li&gt;
&lt;li&gt;不用&lt;code&gt;goto&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;子程序短小精悍&lt;/li&gt;
&lt;li&gt;使用清晰明了的变量名&lt;/li&gt;
&lt;li&gt;使用规范和约定减少理解负担&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;软件开发和其&lt;strong&gt;过程&lt;/strong&gt;密不可分，在多程序员参与的项目里，组织性的重要性超过了个人技能&lt;ul&gt;
&lt;li&gt;坏的过程只会损耗脑力，好的过程则可以开发脑力到极限&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;首先为人写程序，然后才是机器，强调代码可读性，便于与同行沟通&lt;/li&gt;
&lt;li&gt;深入一门语言去编程，不浮于表面&lt;ul&gt;
&lt;li&gt;杰出的程序员会考虑他们要干什么，然后才是怎么用手头的工具实现目标&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;借助&lt;strong&gt;规范&lt;/strong&gt;集中注意力&lt;/li&gt;
&lt;li&gt;基于问题域编程&lt;ul&gt;
&lt;li&gt;将程序划分为不同层级的抽象&lt;ul&gt;
&lt;li&gt;第0层：操作系统的操作和机器指令&lt;/li&gt;
&lt;li&gt;第1层：编程语言结构和工具&lt;/li&gt;
&lt;li&gt;第2层：底层实现结构，如算法和数据结构&lt;/li&gt;
&lt;li&gt;第3层：低层问题域，这一层已经有问题域相关的操作原语可以使用&lt;/li&gt;
&lt;li&gt;第4层：高层问题域，你的非技术用户某种程度也应该可以看懂你的代码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;编程是科学和艺术融合的一门工程学科&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;迭代&lt;/strong&gt;在软件开发中是很正常的现象。软件设计是一个逐步精化的过程。&lt;/li&gt;
&lt;li&gt;将软件和信仰分离开&lt;ul&gt;
&lt;li&gt;不要盲目跟风&lt;/li&gt;
&lt;li&gt;保持折中态度&lt;/li&gt;
&lt;li&gt;权衡各种技术，再做决定&lt;/li&gt;
&lt;li&gt;基于实验，保持开放心态&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;–END–&lt;/p&gt;
</content>
        <category term="编程" />
        <category term="范式" />
        <category term="设计" />
        <category term="艺术" />
        <category term="质量" />
        <updated>2022-08-25T14:37:19.000Z</updated>
    </entry>
    <entry>
        <id>http://shenlvmeng.github.com/blog/2022/03/03/all-about-code/</id>
        <title>关于编码的一切 ——《代码大全》 上</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2022/03/03/all-about-code/"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;拿到它的时候，它已印刷了13年之久；能在京东上找到，也是极大的幸运。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;《代码大全》是一部又大又全的工具书，它涵盖了关于编程各个环节的充分经验，可以作为日程编程工作的指导。将其他教我如何编程的书中的内容做了一个打包。数月研读下来，难免有所遗忘。这里将其中的精华尽量记录下来，也作为对全书内容的一个回顾。&lt;/p&gt;
&lt;h2 id=&#34;打好基础&#34;&gt;&lt;a href=&#34;#打好基础&#34; class=&#34;headerlink&#34; title=&#34;打好基础&#34;&gt;&lt;/a&gt;打好基础&lt;/h2&gt;&lt;p&gt;第1部分主要围绕构建为读者讲解什么是构建，和关于构建我们需要了解和准备的。也为后面展开具体编程细节和设计艺术打基础。&lt;/p&gt;
&lt;h3 id=&#34;走进软件构建&#34;&gt;&lt;a href=&#34;#走进软件构建&#34; class=&#34;headerlink&#34; title=&#34;走进软件构建&#34;&gt;&lt;/a&gt;走进软件构建&lt;/h3&gt;&lt;p&gt;构建是软件开发的核心，构建的质量对软件质量有实质影响。&lt;/p&gt;
&lt;h3 id=&#34;隐喻理解软件开发&#34;&gt;&lt;a href=&#34;#隐喻理解软件开发&#34; class=&#34;headerlink&#34; title=&#34;隐喻理解软件开发&#34;&gt;&lt;/a&gt;隐喻理解软件开发&lt;/h3&gt;&lt;p&gt;用隐喻可以帮助理解软件开发的过程。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个好的隐喻应该是简单的，忽略了不必要的细节，对概念进行内化和抽象，让人从更高层面思考问题，从而避免低层次错误&lt;/li&gt;
&lt;li&gt;隐喻更像&lt;strong&gt;启示&lt;/strong&gt;，而非&lt;em&gt;算法&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;对于编程来说，还是将问题概念化&lt;/li&gt;
&lt;li&gt;有一些常见的软件隐喻&lt;ul&gt;
&lt;li&gt;写作&amp;#x2F;耕作：这些隐喻不太合适&lt;/li&gt;
&lt;li&gt;养殖：增量、迭代、自适应、演进的成长概念&lt;/li&gt;
&lt;li&gt;建造：规划设计文档，使用现成组件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;组合各种隐喻，不要过度引申隐喻，带来误导&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;提前准备&#34;&gt;&lt;a href=&#34;#提前准备&#34; class=&#34;headerlink&#34; title=&#34;提前准备&#34;&gt;&lt;/a&gt;提前准备&lt;/h3&gt;&lt;p&gt;提前准备，降低风险。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前期准备的必要性&lt;ul&gt;
&lt;li&gt;降低风险&lt;/li&gt;
&lt;li&gt;通过逻辑、类比、数据说服项目经理&lt;ul&gt;
&lt;li&gt;开始大项目前需要制定计划&lt;/li&gt;
&lt;li&gt;程序员是食物链的最后一环，架构师吃掉需求，设计师吃掉架构，程序员消化设计&lt;/li&gt;
&lt;li&gt;发现错误的时间要尽可能接近引入错误的时间，可以尽量降低修复时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;判别你所在的软件领域&lt;ul&gt;
&lt;li&gt;在软件开发中，适用迭代式开发法比适用序列式开发法的情况多得多&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;先清楚定义问题&lt;/li&gt;
&lt;li&gt;再正确认清需求&lt;ul&gt;
&lt;li&gt;正式详尽地描述需求，是项目成功的关键&lt;ul&gt;
&lt;li&gt;面向目标、契约式编程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;稳定需求是可望而不可即的&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;开发过程会帮助客户更好地理解自己的需求，这也是需求变更的主要来源&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;应对需求变更&lt;ul&gt;
&lt;li&gt;核对当前需求的质量（&lt;em&gt;需要有一个需求质量的核对表&lt;/em&gt;），及时回退到需求设计环节&lt;/li&gt;
&lt;li&gt;确保每个人都知道变更的代价&lt;/li&gt;
&lt;li&gt;建立变更的控制流程&lt;/li&gt;
&lt;li&gt;要放弃么？&lt;/li&gt;
&lt;li&gt;考虑项目的商业价值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;考虑架构设计&lt;ul&gt;
&lt;li&gt;架构指整个系统的设计约束，不会细节到子系统或类的设计约束&lt;/li&gt;
&lt;li&gt;架构的组成部分&lt;ul&gt;
&lt;li&gt;程序组织&lt;/li&gt;
&lt;li&gt;主要的类和类的继承体系&lt;/li&gt;
&lt;li&gt;数据结构设计&lt;/li&gt;
&lt;li&gt;业务规则描述&lt;/li&gt;
&lt;li&gt;UI设计&lt;/li&gt;
&lt;li&gt;资源管理：数据库连接、线程、句柄&lt;/li&gt;
&lt;li&gt;安全&lt;/li&gt;
&lt;li&gt;性能&lt;/li&gt;
&lt;li&gt;可扩展性&lt;/li&gt;
&lt;li&gt;国际化&lt;/li&gt;
&lt;li&gt;错误处理：纠正还是检测、主动还是被动&lt;/li&gt;
&lt;li&gt;输入输出&lt;/li&gt;
&lt;li&gt;容错性&lt;/li&gt;
&lt;li&gt;过度工程：明确设立期望目标&lt;/li&gt;
&lt;li&gt;“买”还是“造”：如果架构选择自己做，那么一定要证明自己定制的组件在某方面胜过现有的&lt;/li&gt;
&lt;li&gt;变更策略：如何应对变更&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;架构的总体质量&lt;ul&gt;
&lt;li&gt;和嗦、所解决的问题和谐一致，看起来自然&lt;/li&gt;
&lt;li&gt;描述所有主要的决策动机&lt;/li&gt;
&lt;li&gt;优秀的架构很大程度和机器与编程语言无关&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;投入的时间一般在20%-30%&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;关键的构建决策&#34;&gt;&lt;a href=&#34;#关键的构建决策&#34; class=&#34;headerlink&#34; title=&#34;关键的构建决策&#34;&gt;&lt;/a&gt;关键的构建决策&lt;/h3&gt;&lt;p&gt;选择语言、技术、构建实践。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;高级语言表达力更强&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;你思考的能力取决于你是否知道可以表达该思想的词汇&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;提前讲好使用的&lt;strong&gt;编程约定&lt;/strong&gt;，去统一编程语言的细节&lt;/li&gt;
&lt;li&gt;找准在技术浪潮中的位置&lt;ul&gt;
&lt;li&gt;如果在浪潮后期，就可以持续使用稳定的功能；在浪潮前期，则需要花时间找到文档中没有说明的编程语言特性&lt;/li&gt;
&lt;li&gt;“深入一种语言去编程”，&lt;strong&gt;程序员现决定想表达的思想是什么，再决定如何使用特定语言的工具去表达这些思想&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;选择构建实践&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;创建高质量代码&#34;&gt;&lt;a href=&#34;#创建高质量代码&#34; class=&#34;headerlink&#34; title=&#34;创建高质量代码&#34;&gt;&lt;/a&gt;创建高质量代码&lt;/h2&gt;&lt;p&gt;这一部分主要讲解类和子程序的设计和编码。&lt;/p&gt;
&lt;h3 id=&#34;如何做设计&#34;&gt;&lt;a href=&#34;#如何做设计&#34; class=&#34;headerlink&#34; title=&#34;如何做设计&#34;&gt;&lt;/a&gt;如何做设计&lt;/h3&gt;&lt;p&gt;一些启发式准则和idea&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设计的挑战&lt;ul&gt;
&lt;li&gt;有的问题需要“解决”一边，才能明确定义它，然后再次解决&lt;/li&gt;
&lt;li&gt;设计成功应该是组织良好且清爽的，不过设计过程却并非如此&lt;/li&gt;
&lt;li&gt;设计需要取舍，受到限制&lt;/li&gt;
&lt;li&gt;设计需要启发式思维，但也是不断评估、讨论、调试实验中诞生的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;设计的关键概念&lt;ul&gt;
&lt;li&gt;管理复杂度&lt;ul&gt;
&lt;li&gt;软件开发的本质复杂性来自复杂无序的现实世界，精确完整地识别依赖关系和意外情况，设计完全正确而不是部分正确的方案&lt;/li&gt;
&lt;li&gt;软件需要管理复杂度，在组织程序的时候便于在一个时刻专注于一个特定的部分，另外不遗漏暂时忽视的部分&lt;/li&gt;
&lt;li&gt;应对复杂度：减少本质复杂度到最小、避免偶然复杂度的无谓增长&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;理想的设计特征&lt;ul&gt;
&lt;li&gt;最小复杂度&lt;/li&gt;
&lt;li&gt;易于维护&lt;/li&gt;
&lt;li&gt;松耦合&lt;/li&gt;
&lt;li&gt;可扩展、可重用&lt;/li&gt;
&lt;li&gt;高扇入（类被其他类大量使用）、低扇出（类少量使用其他类）&lt;/li&gt;
&lt;li&gt;可移植性&lt;/li&gt;
&lt;li&gt;精简性&lt;/li&gt;
&lt;li&gt;标准化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;设计的层次&lt;ul&gt;
&lt;li&gt;软件系统 &amp;gt; 子系统或包 &amp;gt; 类 &amp;gt; 子程序 &amp;gt; 子程序内&lt;/li&gt;
&lt;li&gt;常用子系统：业务规则、用户界面、数据库访问、OS抽象层&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;设计构造块：启发式方法&lt;ul&gt;
&lt;li&gt;寻找现实对象：想想系统要模仿什么&lt;ul&gt;
&lt;li&gt;辨识对象和其属性&lt;/li&gt;
&lt;li&gt;确定可以对对象做的操作&lt;/li&gt;
&lt;li&gt;确定对象能对其他对象进行的操作&lt;/li&gt;
&lt;li&gt;确定对象的可见范围&lt;/li&gt;
&lt;li&gt;定义对象接口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;形成一致的&lt;strong&gt;抽象&lt;/strong&gt;：让你关注某概念的时候忽略不必要的细节&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;封装&lt;/strong&gt;实现细节：封装帮你掩盖不需要你看到的复杂度&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;继承&lt;/strong&gt;能简化设计就继承&lt;/li&gt;
&lt;li&gt;隐藏秘密信息&lt;ul&gt;
&lt;li&gt;保证接口最小且完备&lt;/li&gt;
&lt;li&gt;隐藏复杂度和变化源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;找出容易改变的区域&lt;ul&gt;
&lt;li&gt;业务规则、硬件依赖、输入输出、非标准的预演特性、状态变量、糟糕或复杂的设计&lt;/li&gt;
&lt;li&gt;将容易变化的部分隔离开，让变化的影响范围和变化的可能性成反比&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;保持松散耦合&lt;ul&gt;
&lt;li&gt;耦合种类：简单数据参数、简单对象、对象参数、语义耦合（过多假设）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;了解常用的设计模式&lt;ul&gt;
&lt;li&gt;设计模式提供了现成的抽象来减少复杂度&lt;/li&gt;
&lt;li&gt;设计模式将抽象SOP化&lt;/li&gt;
&lt;li&gt;设计模式可以起到启发性作用&lt;/li&gt;
&lt;li&gt;设计模式将设计对话提高到更高层次来简化交流&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;其他启发式方法&lt;ul&gt;
&lt;li&gt;高内聚&lt;/li&gt;
&lt;li&gt;契约式设计&lt;/li&gt;
&lt;li&gt;TDD&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;创建中央控制点，集中管控&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;拿不准时，使用蛮力突破&lt;/li&gt;
&lt;li&gt;画一个图&lt;/li&gt;
&lt;li&gt;设计模块化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用启发式方法的原则&lt;ul&gt;
&lt;li&gt;先理解问题&lt;/li&gt;
&lt;li&gt;找出现有数据和未知量之间的联系&lt;/li&gt;
&lt;li&gt;寻找之前的类似问题，或者解决一些相关问题&lt;/li&gt;
&lt;li&gt;执行计划&lt;/li&gt;
&lt;li&gt;回顾解&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;设计实践&lt;ul&gt;
&lt;li&gt;迭代：第二个尝试往往会好于第一个&lt;/li&gt;
&lt;li&gt;分而治之，增量式改进&lt;/li&gt;
&lt;li&gt;自上而下设计和自下而上设计&lt;/li&gt;
&lt;li&gt;建立试验性原型：原型要足够简单可抛弃，又足以验证效果&lt;/li&gt;
&lt;li&gt;记录你的设计成果：wiki、邮件、UML图&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;设计类&#34;&gt;&lt;a href=&#34;#设计类&#34; class=&#34;headerlink&#34; title=&#34;设计类&#34;&gt;&lt;/a&gt;设计类&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;类是一组数据和子程序的聚合，有内聚的明确定义的职责&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;抽象数据类型（ADT）&lt;ul&gt;
&lt;li&gt;ADT可以让你像现实世界一样操作实体，而不必在底层实现上摆弄实体&lt;/li&gt;
&lt;li&gt;ADT的好处&lt;ul&gt;
&lt;li&gt;隐藏实现细节&lt;/li&gt;
&lt;li&gt;改动不需要影响整个程序&lt;/li&gt;
&lt;li&gt;接口语义更强&lt;/li&gt;
&lt;li&gt;更容易提高性能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在非面向对象环境，也可以使用ADT&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;良好的类接口&lt;ul&gt;
&lt;li&gt;好的抽象&lt;ul&gt;
&lt;li&gt;类接口应该有一致的抽象层次&lt;/li&gt;
&lt;li&gt;要理解类的抽象是什么&lt;/li&gt;
&lt;li&gt;考虑提供成对的服务，如打开&amp;#x2F;关闭、添加&amp;#x2F;删除&lt;/li&gt;
&lt;li&gt;尽可能让接口可编程，而不仅是表达语义&lt;/li&gt;
&lt;li&gt;谨防在修改时破坏接口抽象&lt;/li&gt;
&lt;li&gt;同时考虑抽象性和内聚性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;好的封装&lt;ul&gt;
&lt;li&gt;封装比抽象更强，它直接阻止你看到细节&lt;/li&gt;
&lt;li&gt;尽可能限制类和成员的可访问性&lt;/li&gt;
&lt;li&gt;不要公开暴露成员数据&lt;/li&gt;
&lt;li&gt;不要将实现细节暴露在接口上&lt;/li&gt;
&lt;li&gt;不要对类的使用者做任何假设&lt;/li&gt;
&lt;li&gt;让阅读代码比编写更方便，代码的阅读次数比编写多得多&lt;/li&gt;
&lt;li&gt;不要&lt;strong&gt;透过&lt;/strong&gt;接口来编程，仅仅看类的接口文档无法得知如何使用一个类的话，正确的做法不是拉出类的源代码，查看内部实现，而是联系类作者。对于类作者来讲，正确的做法不是面对面告诉答案，而是去修改类的接口文档&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;设计和实现&lt;ul&gt;
&lt;li&gt;通过&lt;strong&gt;包含&lt;/strong&gt;来实现“有一个”的关系&lt;ul&gt;
&lt;li&gt;警惕超过&lt;strong&gt;7&lt;/strong&gt;个成员的类&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通过&lt;strong&gt;继承&lt;/strong&gt;实现“是一个”的关系&lt;ul&gt;
&lt;li&gt;用public继承&lt;/li&gt;
&lt;li&gt;要么使用继承并详细说明，要么就不要使用它&lt;/li&gt;
&lt;li&gt;遵循Liskov替换原则，即对基类的子程序，在它的所有派生类上含义都应该是相同的，在调用时只用看基类无需考虑是哪一个派生类&lt;/li&gt;
&lt;li&gt;只继承需要继承的部分&lt;/li&gt;
&lt;li&gt;只有一个实例的类值得怀疑&lt;/li&gt;
&lt;li&gt;只有一个派生类的类也值得怀疑&lt;/li&gt;
&lt;li&gt;派生中覆盖了某个子程序，但是其中没做任何操作，也值得怀疑&lt;ul&gt;
&lt;li&gt;很可能修改了基类接口的语义，慢慢地从基类接口很难理解派生类上的行为&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;避免过深地继承：降低复杂度&lt;/li&gt;
&lt;li&gt;尽量使用&lt;strong&gt;多态&lt;/strong&gt;，避免类型检查&lt;/li&gt;
&lt;li&gt;适度使用继承&lt;ul&gt;
&lt;li&gt;多个类共享数据而非行为 &amp;#x3D;&amp;gt; 创建类包含的公用对象&lt;/li&gt;
&lt;li&gt;多个类共享行为而非数据 &amp;#x3D;&amp;gt; 都从基类派生，在基类中定义公用的子程序&lt;/li&gt;
&lt;li&gt;多个类既公用数据也公用行为 &amp;#x3D;&amp;gt; 都从基类派生，在基类中定义公用的子程序和数据&lt;/li&gt;
&lt;li&gt;通过基类控制接口 &amp;#x3D;&amp;gt; 继承&lt;/li&gt;
&lt;li&gt;自己控制接口 &amp;#x3D;&amp;gt; 包含&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;成员函数和数据成员&lt;ul&gt;
&lt;li&gt;减少子程序&lt;/li&gt;
&lt;li&gt;进制不必要的成员和运算符&lt;/li&gt;
&lt;li&gt;减少对其他类子程序的间接调用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;构造函数&lt;ul&gt;
&lt;li&gt;尽可能早构造函数中初始化所有数据成员&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用私有构造函数来实现单例数据&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;优先使用深拷贝，除非需要，才使用浅拷贝&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;创建类的原因&lt;ul&gt;
&lt;li&gt;为现实&amp;#x2F;抽象世界的对象建模&lt;/li&gt;
&lt;li&gt;降低&amp;#x2F;隔离复杂度&lt;/li&gt;
&lt;li&gt;隐藏实现细节&lt;/li&gt;
&lt;li&gt;限制变动的影响范围&lt;/li&gt;
&lt;li&gt;建立中心控制点&lt;/li&gt;
&lt;li&gt;将相关操作包装在一起&lt;/li&gt;
&lt;li&gt;避免的类：万能类、无关紧要类、动词命名类&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;超越类：包&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;设计子程序&#34;&gt;&lt;a href=&#34;#设计子程序&#34; class=&#34;headerlink&#34; title=&#34;设计子程序&#34;&gt;&lt;/a&gt;设计子程序&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;子程序是为了实现特定目的编写的方法或过程&lt;/li&gt;
&lt;li&gt;编写子程序的正当理由&lt;ul&gt;
&lt;li&gt;降低复杂度&lt;/li&gt;
&lt;li&gt;引入中间、易懂的抽象&lt;/li&gt;
&lt;li&gt;避免代码重复&lt;/li&gt;
&lt;li&gt;支持派生类覆盖&lt;/li&gt;
&lt;li&gt;隐藏指针操作&lt;/li&gt;
&lt;li&gt;改善性能&lt;/li&gt;
&lt;li&gt;增加可读性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;子程序上的设计&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;一个子程序只做一件事&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;考虑靠近纯函数或纯副作用函数&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;内聚性&lt;ul&gt;
&lt;li&gt;功能上的、顺序上的、通信上的&lt;/li&gt;
&lt;li&gt;避免临时的内聚性（只是需要同时执行才放在一起操作的子程序），如贫血的&lt;code&gt;startup()&lt;/code&gt;方法&lt;/li&gt;
&lt;li&gt;避免逻辑上的、巧合的内聚性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;起个好名字&lt;ul&gt;
&lt;li&gt;描述所做的事情，而非做事情的过程&lt;/li&gt;
&lt;li&gt;避免使用模糊的动词&lt;/li&gt;
&lt;li&gt;不要仅用数字区分子程序名&lt;/li&gt;
&lt;li&gt;函数名不要过长&lt;/li&gt;
&lt;li&gt;考虑描述返回值&lt;/li&gt;
&lt;li&gt;使用预期强烈的动词 + 宾语&lt;/li&gt;
&lt;li&gt;使用对仗词，如add&amp;#x2F;remove&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;为常用操作统一命名&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;子程序长度：最好少于100行，可以接受100 - 200行&lt;/li&gt;
&lt;li&gt;子程序入参&lt;ul&gt;
&lt;li&gt;按输入、修改、输出顺序排列参数&lt;/li&gt;
&lt;li&gt;如果子程序使用了相似的参数，考虑让他们的排列顺序一致&lt;/li&gt;
&lt;li&gt;删掉没有使用到的参数&lt;/li&gt;
&lt;li&gt;不要给入参重新赋值&lt;/li&gt;
&lt;li&gt;限制入参数（有的说3个，有的说7个）&lt;/li&gt;
&lt;li&gt;考虑给参数名增加前缀、后缀&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;入参和子程序需要在一个抽象层级下&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;使用具名参数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;宏子程序和内联子程序&lt;ul&gt;
&lt;li&gt;将宏表达式整个包含在括号内&lt;/li&gt;
&lt;li&gt;一般来讲，是不会用宏代替子程序的&lt;/li&gt;
&lt;li&gt;节制使用inline子程序，在确认有性能改进后再使用inline子程序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;防御式编程&#34;&gt;&lt;a href=&#34;#防御式编程&#34; class=&#34;headerlink&#34; title=&#34;防御式编程&#34;&gt;&lt;/a&gt;防御式编程&lt;/h3&gt;&lt;p&gt;防御式编程让错误更容易发现和修改，并减小破坏。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;断言&lt;ul&gt;
&lt;li&gt;主要用于开发和维护的阶段&lt;/li&gt;
&lt;li&gt;用错误处理代码处理预期中的状况，用断言处理绝不该出现的状况&lt;/li&gt;
&lt;li&gt;避免把需要执行的代码放在断言中&lt;/li&gt;
&lt;li&gt;对于高健壮性代码，应该先断言再处理错误&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;错误处理技术&lt;ul&gt;
&lt;li&gt;返回中立值，如空串、0&lt;/li&gt;
&lt;li&gt;换用下一个正确数据，如获取温度&lt;/li&gt;
&lt;li&gt;返回上一个正确数据，如屏幕重绘&lt;/li&gt;
&lt;li&gt;使用最接近的合法值&lt;/li&gt;
&lt;li&gt;打印警告信息到日志文件中&lt;/li&gt;
&lt;li&gt;返回错误码&lt;/li&gt;
&lt;li&gt;显示出错信息&lt;/li&gt;
&lt;li&gt;关闭程序&lt;/li&gt;
&lt;li&gt;平衡正确性和健壮性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;异常&lt;ul&gt;
&lt;li&gt;通知程序其他部分，发生了不可忽略的错误&lt;/li&gt;
&lt;li&gt;只在真正例外的情况下才抛出异常&lt;/li&gt;
&lt;li&gt;避免再构造函数或析构函数中抛出异常&lt;/li&gt;
&lt;li&gt;在恰当抽象层次抛出异常&lt;/li&gt;
&lt;li&gt;在异常信息中加上导致异常的所有信息&lt;/li&gt;
&lt;li&gt;避免空的&lt;code&gt;catch&lt;/code&gt;语句&lt;/li&gt;
&lt;li&gt;异常标准化 &amp;amp; 异常报告机制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;辅助调试的代码&lt;ul&gt;
&lt;li&gt;进攻式编程：让问题更早暴露&lt;/li&gt;
&lt;li&gt;方便地移除调试代码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;保留防御式代码的程度&lt;ul&gt;
&lt;li&gt;保留检查重要错误的代码&lt;/li&gt;
&lt;li&gt;去掉检查细微错误的代码&lt;/li&gt;
&lt;li&gt;保留让程序稳妥崩溃的代码&lt;/li&gt;
&lt;li&gt;记录错误信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;伪代码编写&#34;&gt;&lt;a href=&#34;#伪代码编写&#34; class=&#34;headerlink&#34; title=&#34;伪代码编写&#34;&gt;&lt;/a&gt;伪代码编写&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;创建一个类&lt;ul&gt;
&lt;li&gt;创建类的总体设计&lt;/li&gt;
&lt;li&gt;创建类中的子程序&lt;/li&gt;
&lt;li&gt;复审并测试&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;伪代码&lt;ul&gt;
&lt;li&gt;使用类似英语的用法描述准确操作&lt;/li&gt;
&lt;li&gt;避免使用特定编程语言的语法元素，防止陷入到代码本身的层级上设计&lt;/li&gt;
&lt;li&gt;在略高于代码的层次上进行设计&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通过伪代码创建子程序&lt;ul&gt;
&lt;li&gt;检查先决条件&lt;/li&gt;
&lt;li&gt;定义子程序要解决的问题&lt;/li&gt;
&lt;li&gt;决定如何测试&lt;/li&gt;
&lt;li&gt;在第三方库中搜寻可用功能&lt;/li&gt;
&lt;li&gt;考虑错误处理&lt;/li&gt;
&lt;li&gt;编写伪代码&lt;/li&gt;
&lt;li&gt;将伪代码转为高层次的注释&lt;/li&gt;
&lt;li&gt;在注释下填充代码&lt;/li&gt;
&lt;li&gt;检查代码是否需要进一步分解&lt;/li&gt;
&lt;li&gt;使用lint或编译器检查错误&lt;/li&gt;
&lt;li&gt;去掉冗余注释&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;变量&#34;&gt;&lt;a href=&#34;#变量&#34; class=&#34;headerlink&#34; title=&#34;变量&#34;&gt;&lt;/a&gt;变量&lt;/h2&gt;&lt;p&gt;这一部分深入到代码细节，围绕如何正确使用变量展开。&lt;/p&gt;
&lt;h3 id=&#34;一般事项&#34;&gt;&lt;a href=&#34;#一般事项&#34; class=&#34;headerlink&#34; title=&#34;一般事项&#34;&gt;&lt;/a&gt;一般事项&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;初始化的一些建议&lt;ul&gt;
&lt;li&gt;声明的时候初始化&lt;/li&gt;
&lt;li&gt;靠近变量使用的时候初始化&lt;/li&gt;
&lt;li&gt;考虑对常量使用&lt;code&gt;final&lt;/code&gt;或&lt;code&gt;const&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;注意累加器和计数器的重置&lt;/li&gt;
&lt;li&gt;用可执行代码初始化&lt;/li&gt;
&lt;li&gt;检查合法性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;作用域&lt;ul&gt;
&lt;li&gt;将变量引用点集中起来可以提高可读性，这样可以减少大脑缓存&lt;/li&gt;
&lt;li&gt;减少变量的“存活时间”（从第一条引用语句到最后一条）&lt;/li&gt;
&lt;li&gt;减少作用域的一些原则&lt;ul&gt;
&lt;li&gt;循环开始时初始化循环变量&lt;/li&gt;
&lt;li&gt;变量使用前再赋值&lt;/li&gt;
&lt;li&gt;对于变量先采用最严格的可见性，再逐渐放宽&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;持续性&lt;ul&gt;
&lt;li&gt;子程序内&amp;#x2F;手动回收前&amp;#x2F;程序运行时&amp;#x2F;持久存储&lt;/li&gt;
&lt;li&gt;为变量选择合适的持续性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;绑定时间&lt;ul&gt;
&lt;li&gt;编码时&amp;#x2F;编译时&amp;#x2F;加载时&amp;#x2F;实例化时&amp;#x2F;运行时&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;越晚绑定越有灵活&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;选择合适的灵活度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;和控制结构匹配的数据结构&lt;ul&gt;
&lt;li&gt;序列型数据 -&amp;gt; 顺序语句&lt;/li&gt;
&lt;li&gt;选择型数据 -&amp;gt; &lt;code&gt;if case&lt;/code&gt;语句&lt;/li&gt;
&lt;li&gt;迭代型数据 -&amp;gt; 循环语句&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;变量单一用途&lt;ul&gt;
&lt;li&gt;只用作一件事&lt;/li&gt;
&lt;li&gt;使用所有已声明变量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;取名&#34;&gt;&lt;a href=&#34;#取名&#34; class=&#34;headerlink&#34; title=&#34;取名&#34;&gt;&lt;/a&gt;取名&lt;/h3&gt;&lt;p&gt;取名是个学问。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;几个原则&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;信达雅&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;以问题为导向&lt;/strong&gt;，面向目的而不是手段&lt;/li&gt;
&lt;li&gt;适当的长度，小于20个字符，大于8个字符&lt;/li&gt;
&lt;li&gt;作用域越小，变量名越短；使用较少的变量或全局变量适用较长的名字&lt;/li&gt;
&lt;li&gt;使用限定词（如min、avg、max）和对仗词&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;特定类型的变量名&lt;ul&gt;
&lt;li&gt;循环下标：&lt;code&gt;i&lt;/code&gt;,&lt;code&gt;j&lt;/code&gt;,&lt;code&gt;k&lt;/code&gt;，在嵌套循环时建议使用表意的变量名&lt;/li&gt;
&lt;li&gt;状态变量：取个比&lt;code&gt;xxxflag&lt;/code&gt;更好的名字&lt;/li&gt;
&lt;li&gt;临时变量：避免用临时名字&lt;/li&gt;
&lt;li&gt;布尔变量：名字要蕴含真假的意义&lt;ul&gt;
&lt;li&gt;&lt;code&gt;done&lt;/code&gt;&amp;#x2F;&lt;code&gt;error&lt;/code&gt;&amp;#x2F;&lt;code&gt;found&lt;/code&gt;&amp;#x2F;&lt;code&gt;success&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不建议使用&lt;code&gt;is&lt;/code&gt;前缀&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;使用表示&lt;strong&gt;肯定&lt;/strong&gt;的名字，理解成本低&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;枚举变量：缺少组前缀的需要加上前缀&lt;/li&gt;
&lt;li&gt;常量：不使用magic number或magic string&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;组内需要确定一个命名规范&lt;/li&gt;
&lt;li&gt;标准前缀&lt;ul&gt;
&lt;li&gt;用户自定义类型缩写，UDT缩写&lt;/li&gt;
&lt;li&gt;正交化、便于检索&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如何缩写&lt;ul&gt;
&lt;li&gt;使用标准缩写&lt;/li&gt;
&lt;li&gt;去掉非前置元音&lt;/li&gt;
&lt;li&gt;去掉虚词，&lt;code&gt;and&lt;/code&gt;等&lt;/li&gt;
&lt;li&gt;去掉无用后缀&lt;/li&gt;
&lt;li&gt;使用每个单词的第一或前几个字母&lt;/li&gt;
&lt;li&gt;不提倡语音缩写&lt;/li&gt;
&lt;li&gt;缩写要能读出来&lt;/li&gt;
&lt;li&gt;避免容易看错或读错的字符组合&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;应该避免的名字&lt;ul&gt;
&lt;li&gt;令人误解&lt;/li&gt;
&lt;li&gt;具有不同含义但有相似名字&lt;/li&gt;
&lt;li&gt;发音相近&lt;/li&gt;
&lt;li&gt;出现数字，这是不好的征兆&lt;/li&gt;
&lt;li&gt;拼写错误&lt;/li&gt;
&lt;li&gt;仅靠大小写区分&lt;/li&gt;
&lt;li&gt;使用易混淆的字符，如&lt;code&gt;0&lt;/code&gt;和&lt;code&gt;o&lt;/code&gt;，&lt;code&gt;1&lt;/code&gt;和&lt;code&gt;l&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;代码阅读次数要远远多于编写次数&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;基本数据类型&#34;&gt;&lt;a href=&#34;#基本数据类型&#34; class=&#34;headerlink&#34; title=&#34;基本数据类型&#34;&gt;&lt;/a&gt;基本数据类型&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;数值&lt;ul&gt;
&lt;li&gt;避免magic number&lt;/li&gt;
&lt;li&gt;避免除0&lt;/li&gt;
&lt;li&gt;避免混合类型比较哦&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;整数&lt;ul&gt;
&lt;li&gt;检查整数除法&lt;/li&gt;
&lt;li&gt;检查整数溢出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;浮点数&lt;ul&gt;
&lt;li&gt;避免数据级相差巨大的数之间的加减&lt;/li&gt;
&lt;li&gt;避免相等比较&lt;/li&gt;
&lt;li&gt;避免舍入误差&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;字符串&lt;ul&gt;
&lt;li&gt;避免magic string&lt;/li&gt;
&lt;li&gt;考虑国际化&lt;/li&gt;
&lt;li&gt;unicode支持&lt;/li&gt;
&lt;li&gt;C语言的字符串&lt;ul&gt;
&lt;li&gt;注意字符串指针和字符数组的差异&lt;/li&gt;
&lt;li&gt;注意字符串长度声明为CONSTANT + 1&lt;/li&gt;
&lt;li&gt;用&lt;code&gt;null&lt;/code&gt;初始化避免无结束符&lt;/li&gt;
&lt;li&gt;建议使用字符数组&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;布尔变量&lt;ul&gt;
&lt;li&gt;使用布尔中间变量简化复杂判断&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;枚举类型&lt;ul&gt;
&lt;li&gt;带来类型提示和提升可读性&lt;/li&gt;
&lt;li&gt;简化修改&lt;/li&gt;
&lt;li&gt;作为布尔变量的可扩展性方案&lt;/li&gt;
&lt;li&gt;枚举类型的第一个元素留作非法制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;具名常量：“参数化”程序&lt;ul&gt;
&lt;li&gt;统一使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数组&lt;ul&gt;
&lt;li&gt;确认数组下标&lt;/li&gt;
&lt;li&gt;顺序访问元素，不建议随机访问&lt;/li&gt;
&lt;li&gt;数组边界点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自定义类型：&lt;code&gt;typedef&lt;/code&gt;作为类的轻量级方案&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;不常见的数据类型&#34;&gt;&lt;a href=&#34;#不常见的数据类型&#34; class=&#34;headerlink&#34; title=&#34;不常见的数据类型&#34;&gt;&lt;/a&gt;不常见的数据类型&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;结构体：数据组合，没有行为的类&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用前一问：可以用类么&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;简化数据块操作&lt;/li&gt;
&lt;li&gt;简化参数列表&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;指针：灵活但容易出错&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用前一问：有访问器子程序或防御式编程么&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;标识内存中&lt;strong&gt;某个位置&lt;/strong&gt;有&lt;strong&gt;某种内容&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;一般技巧&lt;ul&gt;
&lt;li&gt;同时声明和定义&lt;/li&gt;
&lt;li&gt;使用前检查&lt;/li&gt;
&lt;li&gt;使用前判断内存是否损毁&lt;/li&gt;
&lt;li&gt;在提高代码清晰度上，不要节约使用指针&lt;/li&gt;
&lt;li&gt;简化指针表达式&lt;/li&gt;
&lt;li&gt;正确删除链表中的指针&lt;/li&gt;
&lt;li&gt;删除或释放前设为空值&lt;/li&gt;
&lt;li&gt;删除前检查是否非法&lt;/li&gt;
&lt;li&gt;统一跟踪分配情况&lt;/li&gt;
&lt;li&gt;统一在子程序里，集中实现上述策略&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;C++指针&lt;ul&gt;
&lt;li&gt;理解指针和引用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;指针用于“按引用传递”，const引用用于“按值传递”&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;shared_ptr&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;C指针&lt;ul&gt;
&lt;li&gt;使用显式类型&lt;/li&gt;
&lt;li&gt;避免强制类型转换&lt;/li&gt;
&lt;li&gt;遵循参数传递的&lt;code&gt;*&lt;/code&gt;规则&lt;/li&gt;
&lt;li&gt;内存分配时使用&lt;code&gt;sizeof()&lt;/code&gt;确定变量大小&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;全局数据：风险较大&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用前一问：有更好的方法么&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;常见问题&lt;ul&gt;
&lt;li&gt;多线程重入问题&lt;/li&gt;
&lt;li&gt;阻碍代码重用&lt;/li&gt;
&lt;li&gt;破坏模块化和智力上的可管理性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用理由&lt;ul&gt;
&lt;li&gt;简化极常用的数据使用&lt;/li&gt;
&lt;li&gt;消除流浪数据（调用链中间的子程序不使用数据）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用访问器子程序取代全局数据&lt;ul&gt;
&lt;li&gt;在访问前锁定控制&lt;/li&gt;
&lt;li&gt;在访问器子程序里构建一个抽象层&lt;/li&gt;
&lt;li&gt;对数据的所有访问限制在一个抽象层&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;语句&#34;&gt;&lt;a href=&#34;#语句&#34; class=&#34;headerlink&#34; title=&#34;语句&#34;&gt;&lt;/a&gt;语句&lt;/h2&gt;&lt;p&gt;在了解了数据视角的变量元素后，这一部分围绕语句组织展开。&lt;/p&gt;
&lt;h3 id=&#34;直线型代码&#34;&gt;&lt;a href=&#34;#直线型代码&#34; class=&#34;headerlink&#34; title=&#34;直线型代码&#34;&gt;&lt;/a&gt;直线型代码&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;直线型代码即按先后顺序放置语句和语句块&lt;/li&gt;
&lt;li&gt;必须明确先后顺序的语句&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;想办法明确展示语句的依赖关系&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;组织代码&lt;/li&gt;
&lt;li&gt;使用子程序名&amp;#x2F;子程序参数凸显依赖&lt;/li&gt;
&lt;li&gt;使用注释&lt;/li&gt;
&lt;li&gt;通过断言或错误处理来检查&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;顺序无关的语句&lt;ul&gt;
&lt;li&gt;使代码易于从上向下阅读，避免跳来跳去&lt;/li&gt;
&lt;li&gt;将相关语句组织在一起&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;条件语句&#34;&gt;&lt;a href=&#34;#条件语句&#34; class=&#34;headerlink&#34; title=&#34;条件语句&#34;&gt;&lt;/a&gt;条件语句&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;if&lt;/code&gt;语句&lt;ul&gt;
&lt;li&gt;&lt;code&gt;if-then&lt;/code&gt;语句&lt;ul&gt;
&lt;li&gt;先写正常代码，再写不常见情况&lt;/li&gt;
&lt;li&gt;不要在&lt;code&gt;if&lt;/code&gt;后跟随空子句&lt;/li&gt;
&lt;li&gt;看看是不是不需要&lt;code&gt;else&lt;/code&gt;子句&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;if-then-else&lt;/code&gt;语句&lt;ul&gt;
&lt;li&gt;利用布尔函数简化复杂的检测&lt;/li&gt;
&lt;li&gt;把常见情况放在最前面&lt;/li&gt;
&lt;li&gt;检查是否考虑了所有情况&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;case&lt;/code&gt;语句&lt;ul&gt;
&lt;li&gt;选择最有效的排列顺序，如执行频率&lt;/li&gt;
&lt;li&gt;简化每种case下的操作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最好能搭配枚举类型一起使用&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;default&lt;/code&gt;子句检查默认情况或错误&lt;/li&gt;
&lt;li&gt;注意有些语言的&lt;code&gt;case&lt;/code&gt;会有fallthrough，需要加&lt;code&gt;break&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;循环语句&lt;ul&gt;
&lt;li&gt;分为计数循环、连续求值循环、无限循环、迭代器循环。分别适用&lt;code&gt;for&lt;/code&gt;、&lt;code&gt;while&lt;/code&gt;、&lt;code&gt;foreach&lt;/code&gt;语句&lt;/li&gt;
&lt;li&gt;循环控制&lt;ul&gt;
&lt;li&gt;应该把循环体看作黑盒子，外围程序只知道它的控制条件&lt;/li&gt;
&lt;li&gt;合理判断使用&lt;code&gt;for&lt;/code&gt;和&lt;code&gt;while&lt;/code&gt;的地方&lt;/li&gt;
&lt;li&gt;尽量避免空循环&lt;/li&gt;
&lt;li&gt;循环内务（包括索引增加）要么放在循环开始，要么放在循环最后&lt;/li&gt;
&lt;li&gt;让循环终止条件看起来明显&lt;/li&gt;
&lt;li&gt;不要为了终止循环改动&lt;code&gt;for&lt;/code&gt;循环的下标&lt;/li&gt;
&lt;li&gt;小心散布了很多&lt;code&gt;break&lt;/code&gt;的循环，小心谨慎使用&lt;code&gt;break&lt;/code&gt;和&lt;code&gt;continue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;检查循环端点是否会有off-by-one的问题&lt;/li&gt;
&lt;li&gt;在嵌套循环中使用有意义的变量名增强可读性&lt;/li&gt;
&lt;li&gt;循环要尽可能短，便于一目了然&lt;/li&gt;
&lt;li&gt;把嵌套限制在3层以内&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;不常见的控制结构&#34;&gt;&lt;a href=&#34;#不常见的控制结构&#34; class=&#34;headerlink&#34; title=&#34;不常见的控制结构&#34;&gt;&lt;/a&gt;不常见的控制结构&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;多处返回：指程序中途的return或exit&lt;ul&gt;
&lt;li&gt;只在能增强可读性时，使用中途的&lt;code&gt;return&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;用防卫子句提前退出，简化复杂的错误处理&lt;/li&gt;
&lt;li&gt;减少程序中的&lt;code&gt;return&lt;/code&gt;数目&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;递归：将复杂问题分而治之&lt;ul&gt;
&lt;li&gt;确认终止条件&lt;/li&gt;
&lt;li&gt;使用安全计数器防止出现无穷递归&lt;/li&gt;
&lt;li&gt;把递归限制在一个子程序里，避免循环调用&lt;/li&gt;
&lt;li&gt;留意栈空间&lt;/li&gt;
&lt;li&gt;可以用循环结构等价式的先考虑循环结构，如阶乘和斐波那契数列&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;goto&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;反对随意使用&lt;code&gt;goto&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;goto&lt;/code&gt;灵活度太高，不容易用好，在可以使用其他控制结构时，不使用&lt;code&gt;goto&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在错误处理中，可以用状态变量、&lt;code&gt;try finally&lt;/code&gt;语句实现跳出正常流&lt;/li&gt;
&lt;li&gt;如果在那1%的情况下需要使用&lt;code&gt;goto&lt;/code&gt;，注意以下几点&lt;ul&gt;
&lt;li&gt;尽量一个子程序只使用一个&lt;code&gt;goto&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;尽量向前跳转而非向后&lt;/li&gt;
&lt;li&gt;确保所有的goto标号都被执行到&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;确认&lt;code&gt;goto&lt;/code&gt;不会产生执行不到的代码&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;表驱动法&#34;&gt;&lt;a href=&#34;#表驱动法&#34; class=&#34;headerlink&#34; title=&#34;表驱动法&#34;&gt;&lt;/a&gt;表驱动法&lt;/h3&gt;&lt;p&gt;表驱动法是&lt;strong&gt;空间换时间&lt;/strong&gt;的一种编程模式，使用数据结构模拟逻辑结构，将大部分复杂度放到容易被理解的数据结构中，从而提升代码可读性。下面是一个代码范例。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (((&lt;span class=&#34;string&#34;&gt;&amp;#x27;a&amp;#x27;&lt;/span&gt; &amp;lt;= inputChar) &amp;amp;&amp;amp; (inputChar &amp;lt;= &lt;span class=&#34;string&#34;&gt;&amp;#x27;z&amp;#x27;&lt;/span&gt;)) ||&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ((&lt;span class=&#34;string&#34;&gt;&amp;#x27;A&amp;#x27;&lt;/span&gt; &amp;lt;= inputChar) &amp;amp;&amp;amp; (inputChar &amp;lt;= &lt;span class=&#34;string&#34;&gt;&amp;#x27;Z&amp;#x27;&lt;/span&gt;)))  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  charType = CharacterType.Letter;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ((inputChar == &lt;span class=&#34;string&#34;&gt;&amp;#x27; &amp;#x27;&lt;/span&gt;) || (inputChar == &lt;span class=&#34;string&#34;&gt;&amp;#x27;,&amp;#x27;&lt;/span&gt;) ||&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  (inputChar = &lt;span class=&#34;string&#34;&gt;&amp;#x27;.&amp;#x27;&lt;/span&gt;) || (inputChar == &lt;span class=&#34;string&#34;&gt;&amp;#x27;!&amp;#x27;&lt;/span&gt;) || (inputChar == &lt;span class=&#34;string&#34;&gt;&amp;#x27;(&amp;#x27;&lt;/span&gt;) ||&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  (inputChar = &lt;span class=&#34;string&#34;&gt;&amp;#x27;)&amp;#x27;&lt;/span&gt;) || (inputChar == &lt;span class=&#34;string&#34;&gt;&amp;#x27;:&amp;#x27;&lt;/span&gt;) || (inputChar == &lt;span class=&#34;string&#34;&gt;&amp;#x27;;&amp;#x27;&lt;/span&gt;) ||&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  (inputChar = &lt;span class=&#34;string&#34;&gt;&amp;#x27;?&amp;#x27;&lt;/span&gt;) || (inputChar == &lt;span class=&#34;string&#34;&gt;&amp;#x27;-&amp;#x27;&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  charType = CharacterType.Punctuation;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ((&lt;span class=&#34;string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt; &amp;lt;= inputChar) &amp;amp;&amp;amp; (inputChar &amp;lt;= &lt;span class=&#34;string&#34;&gt;&amp;#x27;9&amp;#x27;&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  charType = CharacterType.Digit;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;使用一个查询表建立每个字符和它的字符类型的关联后，代码可以简化为&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;charType = charTypeTable[inputChar];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;查表方法&lt;ul&gt;
&lt;li&gt;直接访问：如查询每月天数，或不同年龄对应的保险费率&lt;ul&gt;
&lt;li&gt;有的时候键值要预先处理后才能直接使用，如可能很多年龄对应相似的费率，这时最好先将年龄&lt;strong&gt;换算&lt;/strong&gt;到一个更好的key上&lt;/li&gt;
&lt;li&gt;进一步，我们可以把键值转换提取为独立的子程序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;索引访问表：和直接访问的区别在于，对于不易&lt;strong&gt;换算&lt;/strong&gt;到键值的情况，提供一个额外的索引表，先&lt;strong&gt;映射&lt;/strong&gt;到索引表再查到数据&lt;/li&gt;
&lt;li&gt;阶梯访问表：主要针对表中的记录是对&lt;strong&gt;数据范围&lt;/strong&gt;而非&lt;strong&gt;数据点&lt;/strong&gt;生效的情况，使用端点作为key&lt;ul&gt;
&lt;li&gt;留心端点带来的off-by-one情况&lt;/li&gt;
&lt;li&gt;可以使用二分查找代替顺序查找&lt;/li&gt;
&lt;li&gt;也可以使用索引访问技术&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;一般性问题&#34;&gt;&lt;a href=&#34;#一般性问题&#34; class=&#34;headerlink&#34; title=&#34;一般性问题&#34;&gt;&lt;/a&gt;一般性问题&lt;/h3&gt;&lt;h4 id=&#34;布尔表达式&#34;&gt;&lt;a href=&#34;#布尔表达式&#34; class=&#34;headerlink&#34; title=&#34;布尔表达式&#34;&gt;&lt;/a&gt;布尔表达式&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;true&lt;/code&gt;或&lt;code&gt;false&lt;/code&gt;作判断&lt;/li&gt;
&lt;li&gt;简化复杂的表达式&lt;ul&gt;
&lt;li&gt;使用中间变量或布尔函数&lt;/li&gt;
&lt;li&gt;使用决策表替代复杂的判断逻辑&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;编写&lt;strong&gt;肯定&lt;/strong&gt;的布尔表达式，会让布尔表达式更易理解&lt;/li&gt;
&lt;li&gt;用括号分割较长的布尔表达式&lt;/li&gt;
&lt;li&gt;注意短路求值或惰性求值的情况&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;按照数轴的顺序编写数值表达式&lt;/strong&gt;，类似&lt;code&gt;MIN_VALUE &amp;lt;= i and i &amp;lt;= MAX_VALUE&lt;/code&gt;，可读性好很多&lt;/li&gt;
&lt;li&gt;在C语言中最好把常量放在左边&lt;/li&gt;
&lt;li&gt;注意区分Java中&lt;code&gt;a==b&lt;/code&gt;和&lt;code&gt;a.equals(b)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;空语句&#34;&gt;&lt;a href=&#34;#空语句&#34; class=&#34;headerlink&#34; title=&#34;空语句&#34;&gt;&lt;/a&gt;空语句&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;小心使用&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;doNothing()&lt;/code&gt;函数或&lt;code&gt;noop()&lt;/code&gt;函数&lt;/li&gt;
&lt;li&gt;考虑能否换用非空的循环体&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;优化深层嵌套&#34;&gt;&lt;a href=&#34;#优化深层嵌套&#34; class=&#34;headerlink&#34; title=&#34;优化深层嵌套&#34;&gt;&lt;/a&gt;优化深层嵌套&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;优化重复的&lt;code&gt;if&lt;/code&gt;检查&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;break&lt;/code&gt;简化嵌套&lt;code&gt;if&lt;/code&gt;，如防卫子句&lt;/li&gt;
&lt;li&gt;转换成一组&lt;code&gt;if-then-else&lt;/code&gt;结构&lt;/li&gt;
&lt;li&gt;转换成&lt;code&gt;case&lt;/code&gt;语句&lt;/li&gt;
&lt;li&gt;将深度嵌套的语句抽离成子程序&lt;/li&gt;
&lt;li&gt;借助多态&lt;/li&gt;
&lt;li&gt;借助异常来跳出正常流&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;结构化编程&#34;&gt;&lt;a href=&#34;#结构化编程&#34; class=&#34;headerlink&#34; title=&#34;结构化编程&#34;&gt;&lt;/a&gt;结构化编程&lt;/h4&gt;&lt;p&gt;结构化编程的思路是仅使用&lt;strong&gt;顺序&lt;/strong&gt;、&lt;strong&gt;选择&lt;/strong&gt;、&lt;strong&gt;迭代&lt;/strong&gt;的思路描述程序流，避免使用&lt;code&gt;break&lt;/code&gt;，&lt;code&gt;continue&lt;/code&gt;，&lt;code&gt;return&lt;/code&gt;，&lt;code&gt;try-catch&lt;/code&gt;来打断。&lt;/p&gt;
&lt;h4 id=&#34;降低复杂度&#34;&gt;&lt;a href=&#34;#降低复杂度&#34; class=&#34;headerlink&#34; title=&#34;降低复杂度&#34;&gt;&lt;/a&gt;降低复杂度&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;程序复杂度的一个衡量标准是，为了理解程序，必须在同一时间记忆的智力实体数目&lt;/strong&gt;，即理解程序花费的精力&lt;/li&gt;
&lt;li&gt;控制流的复杂度和不可靠的代码以及频繁出现的错误息息相关&lt;/li&gt;
&lt;li&gt;可以通过计算子程序的“决策点”粗估子程序的复杂度&lt;ul&gt;
&lt;li&gt;从1开始，遇到&lt;code&gt;if&lt;/code&gt;，&lt;code&gt;while&lt;/code&gt;，&lt;code&gt;repeat&lt;/code&gt;，&lt;code&gt;for&lt;/code&gt;，&lt;code&gt;and&lt;/code&gt;，&lt;code&gt;or&lt;/code&gt;加一，为每一种&lt;code&gt;case&lt;/code&gt;加一&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="编程" />
        <category term="范式" />
        <category term="设计" />
        <updated>2022-03-03T15:09:50.000Z</updated>
    </entry>
    <entry>
        <id>http://shenlvmeng.github.com/blog/2021/12/22/2021-to-2022/</id>
        <title>2021回顾暨2022展望</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2021/12/22/2021-to-2022/"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;2018-2019: &lt;a href=&#34;https://shenlvmeng.github.io/blog/2019/01/03/2018-to-2019/&#34;&gt;https://shenlvmeng.github.io/blog/2019/01/03/2018-to-2019/&lt;/a&gt;&lt;br&gt;2019-2020: &lt;a href=&#34;https://shenlvmeng.github.io/blog/2020/01/04/2019-to-2020/&#34;&gt;https://shenlvmeng.github.io/blog/2020/01/04/2019-to-2020/&lt;/a&gt;&lt;br&gt;2020-2021: &lt;a href=&#34;https://shenlvmeng.github.io/blog/2021/01/05/2020-to-2021/&#34;&gt;https://shenlvmeng.github.io/blog/2021/01/05/2020-to-2021/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从19年初写下第一篇总结到现在，已过去近3年，每年写总结时，都会发现计划永远赶不上变化，惊喜总在发生，也总能体验这辈子从未经历过的一些事情。就像在超市购物时推着一辆磕磕巴巴的小车一样，正反馈的前进路线需要不断地人为纠正。最终走出一条弯弯曲曲却通向想去方向的路线。&lt;/p&gt;
&lt;p&gt;世事难料，2021年尤其是个例外。我目送了朋友的离开，见证了忠贞的新人携手相拥，告别了早该舍弃的人，与老朋友重逢，来到陌生却熟悉的新城市，拥抱了所爱也爱我的人，认识又立马和新朋友告别，开启看起来模糊却又无比清晰的未来道路。生活逐渐健康，生活更加明亮，生活逐渐充满期望。不过总有些不变的，譬如固定的长途骑行，以及在间歇性踌躇满志和间歇性混吃等死中间徘徊。&lt;/p&gt;
&lt;h2 id=&#34;2021回顾&#34;&gt;&lt;a href=&#34;#2021回顾&#34; class=&#34;headerlink&#34; title=&#34;2021回顾&#34;&gt;&lt;/a&gt;2021回顾&lt;/h2&gt;&lt;p&gt;比照去年目标，在内在上，看完了4本技术书籍中的2本，以及剩余10本小说中的8本：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://shenlvmeng.github.io/blog/2021/01/29/zen-of-unix/&#34;&gt;Unix编程艺术集萃&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://shenlvmeng.github.io/blog/2021/03/22/clean-architecture/&#34;&gt;《架构整洁之道》—— 软件设计的思考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;剩余的2本，devops读至一半，深感信息量之少，收获甚少，弃之。《代码大全》则由于过厚暂时搁置。不过，在某leader的启发下，对管理学产生了兴趣。从推荐的《领导梯队》和《赢》入手，接触到德鲁克的一些观念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://shenlvmeng.github.io/blog/2021/11/24/leadership-pipeline/&#34;&gt;《领导梯队》—— 领导力模型构建&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://shenlvmeng.github.io/blog/2021/12/07/winning-note/&#34;&gt;公司管理和自我修养 —— 《赢》读书笔记&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://shenlvmeng.github.io/blog/2021/12/16/effective-executive/&#34;&gt;卓有成效的管理者 —— 德鲁克笔记系列之一&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;经过这几本的洗礼，感受到管理学绝不仅仅是日常的事务性管理动作。而有一整套价值观和方法论，如依人办事等。看完之后大开眼界，颇有些屠龙之术的意思。这也许只是我屁股不在目标人群中吧。于是剩余的两本德鲁克及时叫停，回到追求实用的现实世界。在技术以外了解一些其他领域的知识，启示挺大。&lt;/p&gt;
&lt;p&gt;个人形象上，除了改成推平的毛寸&lt;del&gt;（以及发胖）&lt;/del&gt;之外，几乎没有任何变化。发胖这点，也不能完全赖我，和对象也有一定关系。早睡早起这点倒是因为和对象同住坚持得很好，这大概是今年最大的进步了。锻炼频率从来了上海之后有所下降，等到对象回到附近之后预期会好很多。整体看，发胖这点还是要重视的。&lt;/p&gt;
&lt;p&gt;社交上，来到上海后，除了老朋友外，倒是拾起了一些很久未联系的“新朋友”。情感上，很庆幸地，经过身边亲朋好友的轮番劝导和自己的冷静思考，让我及时从糟糕的关系中摆脱出来。谢天谢地，又让我遇到现在的她。说来奇妙又激动。2021年似乎在5月份和6月底开启了两次新篇章。之后整个下半年局面大为不同。经过艰难又忐忑的4个月异地，辛苦却又自然地合体。一切仿佛都是最佳的选择。&lt;/p&gt;
&lt;p&gt;生活上，业余时间基本都是和对象一同。不过俩人的兴趣爱好相仿，骑车和看电影都能一起，因此这两点并没放下。在今年5月份开启新篇章后，斥巨资换了现在的新公路车，大大提升了骑行体验，不得不说真能买到快乐。之前的公路车刚好可以给对象骑。尽管11月才结束异地，已经一同骑了快10次了。魔都的骑行路况尽管比不上帝都，气温相对帝都还是要温柔一些。照例，今年完成了&lt;a href=&#34;https://shenlvmeng.github.io/blog/2021/10/20/taihu-lark-riding/&#34;&gt;环太湖之旅&lt;/a&gt;，一路上经过苏州、无锡、宜兴、湖州、南浔，也算是满足了圣僧一路江南城市的愿望。清理完已有的洋酒库存后，小酌频率的确下降很多了，可惜对象酒量很差，平日只能看我表演。旅行上，在偶发疫情的情况下，和对象国庆去&lt;a href=&#34;https://shenlvmeng.github.io/blog/2021/10/22/tour-to-jinan-and-qingdao/&#34;&gt;济南青岛&lt;/a&gt;转了一圈，十月底被痛仰两放鸽子后，得到了宝贵的杭州一日游。搬到和对象同居之后，俩人分工，一人负责干净一人负责整洁，整个房间倒是窗明几净、井然有序。平日周末一同下厨或探店或社交，不亦乐乎。livehouse倒是计划了好几次，可惜疫情人算不如天算，至今未能看到。&lt;/p&gt;
&lt;p&gt;事业上，借助大方向的发展势头，年初得到了意料之外情理之中的提升机会。赶在行业腰斩个人选择导致的发展减缓前，获得此等良机，可以说很幸运了。而后随着来到魔都，第一次感受landing流程和新leader磨合，另外团队也有所扩张，十分难得。可惜由于公司政策调整，结合个人意愿选择，放弃了这个良机。去向了一个完全陌生的领域，极大提升通勤体验的同时，牺牲了先发优势。正如那位leader所说，“既然是去一项成熟的业务，最好提前降低下预期”，因此也做好了发挥空间有限，要重新建立信任的准备。有挑战才有意思嘛。也希望在来年能有所成果。结合管理学阅读还有某leader的1on1，在职业规划和发展路线上有了一些粗浅的想法。在和对象的交流下，了解到内卷业务的可怕，还有外企的香甜，不由得内心也心向往之。作为一项国际化业务，这里倒是也可以当做未来的跳板吧。何时才能成长到在外企大厂带人做事的程度呢？&lt;/p&gt;
&lt;p&gt;至于落脚城市，就这里吧，也挺好。下一阶段，就是房子、车子、票子的事情了。有了可以一同踏踏实实的人，也放心去想踏踏实实的事儿了。&lt;/p&gt;
&lt;h2 id=&#34;2021总结&#34;&gt;&lt;a href=&#34;#2021总结&#34; class=&#34;headerlink&#34; title=&#34;2021总结&#34;&gt;&lt;/a&gt;2021总结&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;仰望星空的同时，脚踏实地也很重要&lt;/li&gt;
&lt;li&gt;保持身体健康&lt;/li&gt;
&lt;li&gt;减肥要提上日程&lt;/li&gt;
&lt;li&gt;生活中总会发生不公平的事情，不过整体来看，它还是公平的&lt;/li&gt;
&lt;li&gt;少吃一口饿不死，多做一点累不死&lt;/li&gt;
&lt;li&gt;迈出第一步，事情就会慢慢发生，就像在山顶推一个石头&lt;/li&gt;
&lt;li&gt;事业上，成果导向，用人所长，因人成功&lt;/li&gt;
&lt;li&gt;工作中有些事情，功夫在诗外，人际关系也很重要&lt;/li&gt;
&lt;li&gt;要开始考虑一些更长远更现实的事情，比如买房、养老、医保，做一个合格的父亲&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2022展望&#34;&gt;&lt;a href=&#34;#2022展望&#34; class=&#34;headerlink&#34; title=&#34;2022展望&#34;&gt;&lt;/a&gt;2022展望&lt;/h2&gt;&lt;p&gt;好了，写计划和期望的时候总是心情舒畅。下面列出一些期望，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内在&lt;ul&gt;
&lt;li&gt;完成代码大全和至少一本专业书籍的阅读&lt;/li&gt;
&lt;li&gt;完成剩下所有小说阅读&lt;/li&gt;
&lt;li&gt;探索一个新的领域，形成积累&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;外在&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;控制体重回到80kg&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;坚持早睡早起早饭&lt;/li&gt;
&lt;li&gt;坚持一项骑行以外的运动，如游泳&lt;/li&gt;
&lt;li&gt;升级对象骑行体验&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;生活&lt;ul&gt;
&lt;li&gt;至少1次和对象的旅行&lt;/li&gt;
&lt;li&gt;至少1次户外长途骑行&lt;/li&gt;
&lt;li&gt;学习3种硬菜&lt;/li&gt;
&lt;li&gt;至少1次livehouse&lt;/li&gt;
&lt;li&gt;控制饮酒频率&lt;/li&gt;
&lt;li&gt;享受探店&lt;/li&gt;
&lt;li&gt;更好地融入魔都&lt;ul&gt;
&lt;li&gt;社保、户口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;社交&lt;ul&gt;
&lt;li&gt;和对象相互认识老朋友&lt;/li&gt;
&lt;li&gt;回一次家 &amp;amp; 去一次沈阳&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;事业&lt;ul&gt;
&lt;li&gt;做出一项成果&lt;/li&gt;
&lt;li&gt;能在所在业务下带小团队&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;凡是经历没经历过的事情，都是好事。预知后事如何，明年拭目以待。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Bye~&lt;/em&gt;&lt;/p&gt;
</content>
        <category term="总结" />
        <category term="2021" />
        <category term="2022" />
        <updated>2021-12-22T14:59:05.000Z</updated>
    </entry>
    <entry>
        <id>http://shenlvmeng.github.com/blog/2021/12/20/deep-link-note/</id>
        <title>deeplink技术分析</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2021/12/20/deep-link-note/"/>
        <content type="html">&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Deep_linking&#34;&gt;deep link&lt;/a&gt;是指可以从任何渠道，包括短信、应用内、网页中直接跳转到应用app内的特定页面的技术。它一定程度上打破了移动端app间“孤岛”的局面，实现了快捷的跳转。根据是否安装app，主要有下面两种行为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;已安装，唤起app并跳转到特定页面&lt;/li&gt;
&lt;li&gt;未安装，跳转到App Store或下载页面引导用户下载安装，在下载后的第一次打开自动跳转到特定深度页面，这种情况也叫&lt;strong&gt;deferred deep link&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://support.staffbase.com/hc/article_attachments/115003896431/deeplink_deeplink-browser-app.png&#34; alt=&#34;deep-link-info&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;场景&#34;&gt;&lt;a href=&#34;#场景&#34; class=&#34;headerlink&#34; title=&#34;场景&#34;&gt;&lt;/a&gt;场景&lt;/h2&gt;&lt;p&gt;deep link可以应用在很多常见的场景下，如&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;社交分享&lt;/li&gt;
&lt;li&gt;广告引流&lt;/li&gt;
&lt;li&gt;web和app互通&lt;/li&gt;
&lt;li&gt;裂变活动&lt;/li&gt;
&lt;li&gt;短信、邮件营销&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在web和app互通场景下，可以很方便地实现从外部回流页回到app内特定位置，如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;电商类app：分享H5跳转到特定商品页&lt;/li&gt;
&lt;li&gt;游戏类app：分享H5跳转到特定房间或任务&lt;/li&gt;
&lt;li&gt;直播类app：分享H5跳转到特定直播间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;deep link缩短了操作路径，减少了用户操作成本，从而降低用户流失率，帮助app拉新和留存。&lt;/p&gt;
&lt;h2 id=&#34;实现方式&#34;&gt;&lt;a href=&#34;#实现方式&#34; class=&#34;headerlink&#34; title=&#34;实现方式&#34;&gt;&lt;/a&gt;实现方式&lt;/h2&gt;&lt;p&gt;常见的实现方式有下面几种&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;URL scheme，iOS和Android下的通用方式，打开前会询问是否打开某app&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.chrome.com/docs/multidevice/android/intents/&#34;&gt;Chrome Intent&lt;/a&gt;，Chrome 25+无法通过URL scheme 唤起 App，必须使用Intent&lt;/li&gt;
&lt;li&gt;Universal Link，适用于iOS 9及更高版本，点击http&amp;#x2F;https即跳转，操作丝滑&lt;/li&gt;
&lt;li&gt;App Links，适用于Android 6及更高版本，点击http&amp;#x2F;https即跳转，操作丝滑&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了上面几种，还有&lt;a href=&#34;https://developer.apple.com/documentation/webkit/promoting_apps_with_smart_app_banners&#34;&gt;Smart App Banners&lt;/a&gt;、剪贴板等方案&lt;/p&gt;
&lt;h3 id=&#34;URL-scheme&#34;&gt;&lt;a href=&#34;#URL-scheme&#34; class=&#34;headerlink&#34; title=&#34;URL scheme&#34;&gt;&lt;/a&gt;URL scheme&lt;/h3&gt;&lt;p&gt;格式形如&lt;code&gt;[scheme:][//authority][path][?query][#fragment]&lt;/code&gt;，一般使用在iOS 9和Android 6之前。方法通用，但有以下问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本身没有规范，难以获知要跳转的path或query&lt;/li&gt;
&lt;li&gt;功能不全，app越复杂，scheme就越复杂&lt;/li&gt;
&lt;li&gt;会被拦截，包括浏览器或应用的webview，如微信&lt;/li&gt;
&lt;li&gt;打开app失败后，iOS会有错误弹窗，体验不好&lt;ul&gt;
&lt;li&gt;提示网页无效&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;URL scheme可能重复&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;常见Scheme URL&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;微信&lt;/th&gt;
&lt;th&gt;电商&lt;/th&gt;
&lt;th&gt;浏览器&lt;/th&gt;
&lt;th&gt;系统&lt;/th&gt;
&lt;th&gt;其他&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;weixin:&amp;#x2F;&amp;#x2F;dl&amp;#x2F;scan 扫一扫&lt;br /&gt;weixin:&amp;#x2F;&amp;#x2F;dl&amp;#x2F;moments 朋友圈&lt;br /&gt; weixin:&amp;#x2F;&amp;#x2F;dl&amp;#x2F;settings 设置&lt;/td&gt;
&lt;td&gt;淘宝：taobao:&amp;#x2F;&amp;#x2F;&lt;br /&gt;支付宝：alipay:&amp;#x2F;&amp;#x2F;&lt;br /&gt;美团：imeituan:&amp;#x2F;&amp;#x2F;&lt;/td&gt;
&lt;td&gt;Chrome：googlechrome:&amp;#x2F;&amp;#x2F;&lt;br /&gt;UC 浏览器：ucbrowser:&amp;#x2F;&amp;#x2F;&lt;/td&gt;
&lt;td&gt;邮箱：mailto:&amp;#x2F;&amp;#x2F;&lt;br /&gt;短信：message:&amp;#x2F;&amp;#x2F;&lt;br /&gt;App Store：itms-appss:&amp;#x2F;&amp;#x2F;  macappstores:&amp;#x2F;&amp;#x2F;&lt;/td&gt;
&lt;td&gt;飞书：lark:&amp;#x2F;&amp;#x2F;&lt;br /&gt;微博：sinaweibo:&amp;#x2F;&amp;#x2F;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;Chrome-Intent&#34;&gt;&lt;a href=&#34;#Chrome-Intent&#34; class=&#34;headerlink&#34; title=&#34;Chrome Intent&#34;&gt;&lt;/a&gt;Chrome Intent&lt;/h3&gt;&lt;p&gt;Chrome 25+无法通过iframe的src启动Android app。改为构造形如下面的intent锚点。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;intent:  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   HOST/URI-path // Optional host  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   #Intent;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      package=\[string\];  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      action=\[string\];  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      category=\[string\];  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      component=\[string\];  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      scheme=\[string\];  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   end;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在&lt;code&gt;end&lt;/code&gt;前添加&lt;code&gt;S.browser_fallback_url=[encoded_full_url]&lt;/code&gt;可以指定唤起失败的地址。一个构造好的intent形如：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;intent://path#Intent;scheme=xxx;package=com. xxx;S.browser_fallback_url=https://xxx;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Universal-Link&#34;&gt;&lt;a href=&#34;#Universal-Link&#34; class=&#34;headerlink&#34; title=&#34;Universal Link&#34;&gt;&lt;/a&gt;Universal Link&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/ios/universal-links/&#34;&gt;官方介绍&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Universal Link，即通用链接，是iOS 9推出的通过HTTPS链接来启动app的特性。既可以打开app，在没有安装时，则打开特定网页。对比URL Scheme优势在于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无缝切换，不弹窗确认&lt;/li&gt;
&lt;li&gt;兼容性好，未安装时直接打开网页&lt;/li&gt;
&lt;li&gt;使用通用的HTTP协议，不用担心scheme重复&lt;/li&gt;
&lt;li&gt;通过网站的配置文件和app关联，保证安全&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在网站下根目录或&lt;code&gt;.well-known&lt;/code&gt;路径下需要有&lt;code&gt;apple-app-association&lt;/code&gt;（无后缀名）JSON文件。例如，知乎的配置文件为&lt;a href=&#34;https://oia.zhihu.com/apple-app-site-association%E3%80%82%E5%9C%A8%E9%85%8D%E7%BD%AE%E6%97%B6%EF%BC%8C&#34;&gt;https://oia.zhihu.com/apple-app-site-association。在配置时，&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要保证有一个HTTPS的域名，最好和web网页域名区分开，保证web网页的正常访问&lt;/li&gt;
&lt;li&gt;在开发者中心 ，Identifiers下 AppIDs 找到自己的App ID，编辑打开Associated Domains服务&lt;/li&gt;
&lt;li&gt;打开工程配置中的 Associated Domains ，在其中的 Domains 中填入你想支持的域名，必须以&lt;code&gt;applinks:&lt;/code&gt;为前缀&lt;/li&gt;
&lt;li&gt;配置&lt;code&gt;apple-app-site-association&lt;/code&gt;文件，不带任何后缀，上传该文件到服务器的根目录或者&lt;code&gt;.well-known&lt;/code&gt;目录下&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://docs-assets.developer.apple.com/published/4cbbb0bb235bdd82277b0f8d294afab8/13300/supporting-associated-domains-1@2x.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;在网站下配置好Universal Link后，用户点击网站链接后，即会直接跳转到App，而不需要经过浏览器。当然，微信等app还是会拦截Universal Link的行为，需要在微信注册自己的应用id和Universal Link。&lt;/p&gt;
&lt;h3 id=&#34;App-Links&#34;&gt;&lt;a href=&#34;#App-Links&#34; class=&#34;headerlink&#34; title=&#34;App Links&#34;&gt;&lt;/a&gt;App Links&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.android.google.cn/studio/write/app-link-indexing&#34;&gt;官方介绍&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;App Links，类似Universal Link，是Android 6（Android M）及以上操作系统中适用的HTTPS路径链接。可以直接将用户带入到Android app内的特定页面中，实现上，网站配置文件名为&lt;code&gt;assetlink&lt;/code&gt;，只能放在&lt;code&gt;.well-known&lt;/code&gt;目录下。如&lt;a href=&#34;https://vt.tiktok.com/.well-known/assetlinks.json%E3%80%82%E4%B8%8D%E8%BF%87%EF%BC%8C%E5%9B%BD%E4%BA%A7%E7%9A%84%E5%AE%89%E5%8D%93%E7%89%88%E6%9C%AC%E4%BB%A5%E5%8F%8A%E5%BE%AE%E4%BF%A1%E7%AD%89app%E4%BE%9D%E6%97%A7%E4%BC%9A%E6%8B%A6%E6%88%AA%E3%80%82&#34;&gt;https://vt.tiktok.com/.well-known/assetlinks.json。不过，国产的安卓版本以及微信等app依旧会拦截。&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;其他&#34;&gt;&lt;a href=&#34;#其他&#34; class=&#34;headerlink&#34; title=&#34;其他&#34;&gt;&lt;/a&gt;其他&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Android webview本身支持唤醒第三方app，但如果设置了自定义WebViewClient则需要自己处理，具体是指在&lt;code&gt;shouldOverrideUrlLoading&lt;/code&gt;方法中决定如何处理&lt;/li&gt;
&lt;li&gt;Smart App Banners，在网页里增加一个&lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt;标签，可以在打开页面时，检测手机是否安装某个app，并且在页面顶部显示一个Banner显示App的基本信息，安装时显示打开，未安装时显示安装&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;相关产品或开源库&#34;&gt;&lt;a href=&#34;#相关产品或开源库&#34; class=&#34;headerlink&#34; title=&#34;相关产品或开源库&#34;&gt;&lt;/a&gt;相关产品或开源库&lt;/h2&gt;&lt;p&gt;结合点击行为、重定向行为、来源去向分析、落地页等，还可以做很多事情，市面上也有下面一些产品：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.mob.com/mobService/moblink&#34;&gt;MobLink&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedme.cc/link-page.html&#34;&gt;LinkedMe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.openinstall.io/deeplinking.html&#34;&gt;openinstall&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，也有一些开源库实现web跳转app&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/suanmei/callapp-lib&#34;&gt;https://github.com/suanmei/callapp-lib&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jawidx/web-launch-app&#34;&gt;https://github.com/jawidx/web-launch-app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/luojinghui/web-open-app&#34;&gt;https://github.com/luojinghui/web-open-app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;–END–&lt;/em&gt;&lt;/p&gt;
</content>
        <category term="引流" />
        <category term="universal-link" />
        <category term="app-link" />
        <updated>2021-12-20T14:48:09.000Z</updated>
    </entry>
    <entry>
        <id>http://shenlvmeng.github.com/blog/2021/12/16/effective-executive/</id>
        <title>卓有成效的管理者 —— 德鲁克笔记系列之一</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2021/12/16/effective-executive/"/>
        <content type="html">&lt;p&gt;与其说德鲁克是管理学鼻祖，他更像在研究社会、组织、企业存在的合理性与最佳实践。德鲁克认为人性是不完美的，那人设计出来的社会也不可能完美。他抵制极权专制，这里的极权不同集权，所追求的是全面彻底地操纵和控制人类的每一个成员。德鲁克视管理学为一种“博雅艺术”（liberal art）。它既不像人文文化，也不像科学文化。它关心人的价值成长和社会组织的影响，但又关心管理工作的应用的成果。这使得管理学不像世俗观点中的那样，&lt;strong&gt;是一个人或一个机构的成功学&lt;/strong&gt;。它只在让每个人在社会和社群中更健康，自由地选择并履行承担的责任，从而是人类社会和社区更健康，人们受到更少的伤害和痛苦。&lt;/p&gt;
&lt;p&gt;而这本书即从管理者的成效出发，探讨一个管理者如何能&lt;strong&gt;管理好自己&lt;/strong&gt;。毕竟让一个自身成效不高的管理者管好他下面的下属，几乎是不可能的事情。而卓有成效的管理者也逐渐成为社会中的关键资源。&lt;/p&gt;
&lt;h2 id=&#34;卓有成效可以学会&#34;&gt;&lt;a href=&#34;#卓有成效可以学会&#34; class=&#34;headerlink&#34; title=&#34;卓有成效可以学会&#34;&gt;&lt;/a&gt;卓有成效可以学会&lt;/h2&gt;&lt;p&gt;卓有成效&lt;strong&gt;重要且可以学会&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先端正思路，管理者为什么&lt;strong&gt;必须有效&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;有效即“做对的事情”&lt;/strong&gt;，而不是纯执行的“把事情做对”&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;当下知识工作者&lt;/strong&gt;逐步增多，他们产出的更多是抽象的知识、创意或信息，无法用传统衡量体力活动的方式衡量，因此需要自己管理自己，自觉做出贡献，追求工作效益&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;谁是管理者&lt;ul&gt;
&lt;li&gt;如果在组织内，一个知识工作者，能够凭借职位或知识，对组织负有贡献的责任，因而能对组织的经营能力或成果有实质性影响。那他就是一位管理者。&lt;/li&gt;
&lt;li&gt;衡量知识工作，主要应看结果而不是工作繁杂程度&lt;/li&gt;
&lt;li&gt;一般的经理人员工作性质和董事长、政府机构的行政领导是相同的，那就是计划、组织、整合、激励和考核&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;管理者的不利现状&lt;ul&gt;
&lt;li&gt;组织&lt;strong&gt;内&lt;/strong&gt;的管理者会面临下面一些压力&lt;ul&gt;
&lt;li&gt;时间往往属于别人，不属于自己，如经常有外部人员拜访&lt;/li&gt;
&lt;li&gt;往往被迫忙于“事务性工作”，除非他们敢于采取行动改变周围的一切&lt;ul&gt;
&lt;li&gt;管理者需要一套判断体系，去找到真正重要的事项&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;管理者的贡献&lt;strong&gt;能被其他人利用时，才算有效&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;组织是使个人才干能够增值的工具&lt;/strong&gt;，一个人的知识可以被组织吸收，作为其他知识工作者工作的资源&lt;/li&gt;
&lt;li&gt;贡献不能被有效利用时，有效性也会打折扣&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;管理者会受到组织的局限&lt;ul&gt;
&lt;li&gt;受到的信息会被组织过滤&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;组织需要为外部服务&lt;/strong&gt;，因此需要得到外部的信息&lt;/li&gt;
&lt;li&gt;组织是社会中的人为产物，和生物体类似的是，成长得越大，消耗的资源和复杂度就越大&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对外部信息的收集，人从现象中的抽象能力往往优于机器（类似深度学习）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;提高有效性，让工作达到令人满意的程度&lt;ul&gt;
&lt;li&gt;不要期望万能的天才来达到绩效，通才难求，学会善用专精于某一领域的人&lt;/li&gt;
&lt;li&gt;通过从各种有效的管理者归纳来看，他们各个方面都不完全一样，&lt;strong&gt;人人都具有做好该做事情的能力&lt;/strong&gt;，即有效性&lt;/li&gt;
&lt;li&gt;下面一些习惯是成为卓有成效管理者所必须的&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;善用时间&lt;/strong&gt;，知道时间都去哪儿了&lt;/li&gt;
&lt;li&gt;重视对外界的贡献，&lt;strong&gt;目标导向&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;善于利用长处&lt;/li&gt;
&lt;li&gt;集中精力到少数重要领域&lt;/li&gt;
&lt;li&gt;敢于、善于做决策&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;掌握自己的时间&#34;&gt;&lt;a href=&#34;#掌握自己的时间&#34; class=&#34;headerlink&#34; title=&#34;掌握自己的时间&#34;&gt;&lt;/a&gt;掌握自己的时间&lt;/h2&gt;&lt;p&gt;时间是最珍贵的资源，先摸清自己的时间分配，再统一管理和安排。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有资源里，时间不像资金、人力，是&lt;strong&gt;最稀有&lt;/strong&gt;，&lt;strong&gt;毫无可替代性&lt;/strong&gt;，&lt;strong&gt;所有工作必须消耗&lt;/strong&gt;的资源，而人往往不善于使用这种资源&lt;/li&gt;
&lt;li&gt;管理者面临的时间压力&lt;ul&gt;
&lt;li&gt;管理者作为知识工作者，他的大多数任务，都需要&lt;strong&gt;相当多的整块时间&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;管理者要与他人一同工作&lt;/strong&gt;，需要各种信息，需要讨论、需要指导他人，需要协调人际和工作关系，这些都是费时的&lt;/li&gt;
&lt;li&gt;只有在脑力上多费时，才能在体力上少费时&lt;/li&gt;
&lt;li&gt;如果时间短促，一个人就只能考虑他已经熟悉的事，做曾经做过的事，无法创新和变革&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;你诊断过你的时间么&lt;ul&gt;
&lt;li&gt;第一步是记录时间的耗用情况，一定要&lt;strong&gt;当即&lt;/strong&gt;记，事后回忆往往不准确，然后问下面一些问题&lt;/li&gt;
&lt;li&gt;“什么事情根本不必做”&lt;/li&gt;
&lt;li&gt;“哪些活动可以由别人代为参加”，学会授权&lt;/li&gt;
&lt;li&gt;“有浪费别人的时间么”，如过多的会议&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;消除浪费时间的活动&lt;ul&gt;
&lt;li&gt;找出可以通过制度或远见避免的时间浪费&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;一个平静无波的工厂，必然是管理上了轨道，因为所有危机都已预见，并变成了例行工作&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;人员过多会带来人际关系的时间浪费&lt;/li&gt;
&lt;li&gt;组织不健全，表现就是会议太多&lt;ul&gt;
&lt;li&gt;之所以要开会，是因为某种情况的所需的知识不能装在一个大脑里&lt;/li&gt;
&lt;li&gt;要开会，也要有计划&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;信息功能不健全，上下文不透明，或信息表达不当&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;统一安排可以自己支配的时间&lt;ul&gt;
&lt;li&gt;高级主管可以自由运用的时间，可能只有1&amp;#x2F;4，组织越大，维系组织运行而不是发挥组织价值的工作越多，从而不由自己掌控的时间越多&lt;/li&gt;
&lt;li&gt;可以给自己的时间划分最小单位，如90分钟，聚合碎片时间&lt;/li&gt;
&lt;li&gt;对时间的控制和管理不是一劳永逸的，要不断记录时间消耗并分析&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;我能贡献什么&#34;&gt;&lt;a href=&#34;#我能贡献什么&#34; class=&#34;headerlink&#34; title=&#34;我能贡献什么&#34;&gt;&lt;/a&gt;我能贡献什么&lt;/h2&gt;&lt;p&gt;关注产出，目标导向，可以帮助自己thinking out of the box。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重视贡献，注意对成果负责，才能看到整体的绩效&lt;ul&gt;
&lt;li&gt;只有这样，一个人才能考虑自己的技能、专长和整个组织以及组织目标的关系&lt;/li&gt;
&lt;li&gt;管理者如果不自问“我可以做出什么贡献”，在工作中就不会有远大的目标，而偏向执行的角色&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一般机构对成效的要求往往有下面三个方面&lt;ul&gt;
&lt;li&gt;直接成果&lt;/li&gt;
&lt;li&gt;梳理新的价值观或对价值观的重新确认&lt;/li&gt;
&lt;li&gt;培养和开发明天所需的人才&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;职位越高，对外所需的贡献就越大&lt;/li&gt;
&lt;li&gt;对于专业人员，必须使自己的“产品”——即他的只是可以为别人所用；同时，肩负贡献的责任，要求他知道应该了解别人的需要、别人的方向，别人的理解，从而使别人能够应用他的成果&lt;/li&gt;
&lt;li&gt;有效的人际关系有4项基本要求，而着眼贡献正可以满足&lt;ul&gt;
&lt;li&gt;以目标为导向，可以很方便对齐期望，有助于&lt;strong&gt;互相沟通&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;强调贡献有助于横向沟通，促成&lt;strong&gt;团队合作&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;个人发展&lt;/strong&gt;，一定程度上也要看是否重视贡献&lt;/li&gt;
&lt;li&gt;重视贡献的管理者必然能启发他人寻求自我发展，从而&lt;strong&gt;培养他人&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;重视贡献，才能使管理者的视线从“内部事务”转向“外部世界”&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;发挥他人长处&#34;&gt;&lt;a href=&#34;#发挥他人长处&#34; class=&#34;headerlink&#34; title=&#34;发挥他人长处&#34;&gt;&lt;/a&gt;发挥他人长处&lt;/h2&gt;&lt;p&gt;人无完人，有效的管理者可以使人发挥长处，减少短处带来的限制。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;世界上从来没有发生过下属的才干反而害了主管的事&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;人的精力有限，卓越通常只能表现在某一或者某几方面&lt;ul&gt;
&lt;li&gt;是用人来做事，不是用人来投自己所好，或投主管所好&lt;/li&gt;
&lt;li&gt;有效的管理者从来不问“我和他能合得来吗”，而是问“他能贡献什么”，从来不问“他不能做什么”，而是问“他能做什么”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;要坚持因事用人而不是因人设事&lt;/strong&gt;，这样才能减少组织变动，同时保证以任务为重心，而不是以人为重心&lt;ul&gt;
&lt;li&gt;只有极少数例外，譬如有特殊才干，从事非一般工作，取得杰出成就的人&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;能建立一流经营体制的管理者&lt;strong&gt;在公事上&lt;/strong&gt;，通常会和周围同事以及下属保持一定距离，避免个人好恶挑选人才&lt;/li&gt;
&lt;li&gt;如何做到发挥长处，同时避免因人设事的4个原则&lt;ul&gt;
&lt;li&gt;一个职位，如果先后多人担任都失败了，那肯定是常人无法胜任的职位，需要重新设计&lt;ul&gt;
&lt;li&gt;国际部副总裁的压力，需要由按产品类别调整组织，或是按市场的社会经济背景调整组织来合理规划&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;只有让“平凡人做出不平凡事”的组织，才是好组织&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;职位要求要严格，涵盖要广（想象空间大）&lt;ul&gt;
&lt;li&gt;从而保证下限高，人才又有能充分发挥的机会&lt;/li&gt;
&lt;li&gt;知识工作者的职位设计，还应该能够让人及早发现自己是否适合该职位&lt;/li&gt;
&lt;li&gt;与体力劳动者不同，&lt;strong&gt;知识工作者的贡献产出不仅和本身的知识技能有关，和组织的目标、价值观也有很大关系&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用人时，先考虑某人能做什么，而不是职位的要求是什么&lt;ul&gt;
&lt;li&gt;在考评、绩效制度上，更多从“某人能完成什么”的视角看问题&lt;ul&gt;
&lt;li&gt;“哪方面的工作他确实做得很好”&lt;/li&gt;
&lt;li&gt;“哪方面的工作还可以做得更好”&lt;/li&gt;
&lt;li&gt;“为了充分发挥长处，他还可以再学习什么知识”&lt;/li&gt;
&lt;li&gt;“如果我有了子女，愿意让子女在他的指导下工作吗，为什么？”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;正直的品格很关键&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;必须能容忍人的缺点&lt;ul&gt;
&lt;li&gt;结合具体任务来寻找别人的长处&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用人所长是有效管理者的必备素质，也是组织能否有效的关键&lt;/li&gt;
&lt;li&gt;卓有成效的管理者还会设法发挥&lt;strong&gt;上司的长处&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;不能唯命是从，需要协助上司发挥所长，也能给自己更大的空间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;也要了解自己的长处，寻找适合发挥自己长处的工作方式，做出自己的绩效&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;管理者的任务不是去改变人，而是在于运用每个人的才干&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;要事优先&#34;&gt;&lt;a href=&#34;#要事优先&#34; class=&#34;headerlink&#34; title=&#34;要事优先&#34;&gt;&lt;/a&gt;要事优先&lt;/h2&gt;&lt;p&gt;时间有限，做重要的事；而立足现在看未来才可看到真正重要的事情&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间总是不够，只有几种个人、组织的所有才干，才能获得成果&lt;/li&gt;
&lt;li&gt;一次只做好一件事，恰恰能加快工作速度&lt;ul&gt;
&lt;li&gt;我们往往会低估完成任务的时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;很多组织都容易错误地看待过去的成功和失败&lt;ul&gt;
&lt;li&gt;当下的很多计划和制度，是基于&lt;strong&gt;过去的经验&lt;/strong&gt;确定的，时间久了已不能产生成果&lt;/li&gt;
&lt;li&gt;及时重构，去肥增瘦；只有推陈才能出新&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对于新工作，应责成确能证明有能力的人来负责&lt;/li&gt;
&lt;li&gt;所谓压力，总是偏爱机构内部的事务，偏爱已经发生的事而忽视未来，偏爱危机忽视基于，偏向急功近利而忽视现实世界&lt;/li&gt;
&lt;li&gt;真正的难度不在决定做什么，而是&lt;strong&gt;什么可以缓一缓&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;被搁置一般等同于被取消，因为外部世界变化极快&lt;/li&gt;
&lt;li&gt;下面有一些可以确定事情优先顺序的原则&lt;ul&gt;
&lt;li&gt;将来 &amp;gt; 过去&lt;/li&gt;
&lt;li&gt;重视机会，不要只看到困难&lt;/li&gt;
&lt;li&gt;选择自己的方向不盲从&lt;/li&gt;
&lt;li&gt;目标要高，要有新意，不能只求安全和容易&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;化机会为成果，肯定比解决旧问题更有生产性。解决旧问题，不过是恢复昨天的平衡而已&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;决策的要素&#34;&gt;&lt;a href=&#34;#决策的要素&#34; class=&#34;headerlink&#34; title=&#34;决策的要素&#34;&gt;&lt;/a&gt;决策的要素&lt;/h2&gt;&lt;p&gt;管理者要做对组织绩效有效果的决策，决策是观念性、战略性的，不是细节的、解决问题的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一项决策如果不能付诸行动，就只能算作想法&lt;/li&gt;
&lt;li&gt;贝尔公司的费尔和通用汽车的斯隆，解决问题，都着眼于最高层次的观念性认识，所做的决策不是为了适应当时的临时需求，而是战略性考虑&lt;/li&gt;
&lt;li&gt;决策有下面一些要素&lt;ul&gt;
&lt;li&gt;判别问题性质&lt;ul&gt;
&lt;li&gt;一般遇到的问题可以分为四类&lt;ul&gt;
&lt;li&gt;表面现象之下的真正&lt;strong&gt;经常性问题&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;特殊情况下偶然发生的实质上&lt;strong&gt;经常性问题&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;真正偶发的特殊事件（“黑天鹅事件”）&lt;/li&gt;
&lt;li&gt;第一次出现的“经常事件”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对于经常性问题要有经常性的解决办法——一种规则、一种政策或一种原则&lt;/li&gt;
&lt;li&gt;判断问题性质并没那么简单，可能遇到一些常见错误&lt;ul&gt;
&lt;li&gt;把经常性问题视为一连串的偶发问题（“实用主义”）&lt;/li&gt;
&lt;li&gt;将真正的新问题视作旧病复发，从而采取错误的方法&lt;/li&gt;
&lt;li&gt;对根本性问题界定似是而非&lt;/li&gt;
&lt;li&gt;只看到问题局部，没看到全貌&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一个有经验的管理者总会先假定问题只是表面现象，从最高层次的观念方面寻求解决方法。他要找出真正问题，不满足表面现象，从更基本、更理性、更广泛的观念上谋求解决办法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;找到解决问题的限制条件或假设前提&lt;ul&gt;
&lt;li&gt;边界条件往往不容易找到，因为每个人的视角不同&lt;/li&gt;
&lt;li&gt;错误的边界条件，比没有更误事&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;边界条件清晰时，有助于决策人在情况变化时，更快用新决策取代旧决策&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖太多边界条件去决策是危险的&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;考虑问题的正确方案，&lt;strong&gt;之后再&lt;/strong&gt;考虑必要妥协或让步事项&lt;ul&gt;
&lt;li&gt;如果一开始就问“什么是能让人接受的决策”，那永远不会有结果&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;决策要&lt;strong&gt;兼顾执行措施&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;必须能准确无误地回答下列问题&lt;ul&gt;
&lt;li&gt;谁应该了解这项决策（object）&lt;/li&gt;
&lt;li&gt;应该采取什么行动（what）&lt;/li&gt;
&lt;li&gt;谁采取行动（subject）&lt;/li&gt;
&lt;li&gt;行动如何进行（how）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;重视反馈，验证决策的有效性&lt;ul&gt;
&lt;li&gt;决策是会过期的，需要建立反馈机制更新决策&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;有效的决策&#34;&gt;&lt;a href=&#34;#有效的决策&#34; class=&#34;headerlink&#34; title=&#34;有效的决策&#34;&gt;&lt;/a&gt;有效的决策&lt;/h2&gt;&lt;p&gt;一项决策若要保证有效，需要考虑各种方案，甚至包括反对意见。另外，电脑不能取代管理者做决策，反而会让更多人参与到决策中。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;决策不是从搜集事实开始，而是先有自己的看法和立场，再去搜集事实证明&lt;ul&gt;
&lt;li&gt;搜集事实本身就会预设立场，做不到客观&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;大胆猜测，小心求证&lt;/strong&gt;：假设和见解不必辩论，鼓励大家提出，但是必须经过深思，必须经得起验证&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如何&lt;strong&gt;衡量&lt;/strong&gt;决策，需要的时间和经历也极多&lt;ul&gt;
&lt;li&gt;使用反馈的制度&lt;/li&gt;
&lt;li&gt;只有有&lt;strong&gt;多项&lt;/strong&gt;方案，从中选择一项，才能称得上判断&lt;/li&gt;
&lt;li&gt;管理者一定要&lt;strong&gt;先有若干种不同的衡量方法，再从中选择最合适的一种&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;好的决策，应该以&lt;strong&gt;互相冲突的意见为基础&lt;/strong&gt;，从不同观点和判断中选择&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;反对意见&lt;/strong&gt;相当重要&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;唯有反对意见，才能保护决策者不至沦为组织的俘虏&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;反对意见不深，也可以作为决策的“另一方案”&lt;/li&gt;
&lt;li&gt;反对意见可以激发想象力和创造力&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;当然世上有蠢材和恶作剧的人，不过有效的管理者会假定，某人意见纵然错了，也是由于此人看到的现实不同，或者关注的问题不一样&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;是否真的需要一项决策&lt;ul&gt;
&lt;li&gt;满足下面两项原则即可&lt;ul&gt;
&lt;li&gt;利益远大于成本或风险就该做&lt;ul&gt;
&lt;li&gt;不要做鸡毛蒜皮的小事，也不要墨守成规&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;行动或不行动，切忌只做一半或折中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;决策前，想清楚规范、不同方案、得失也衡量了，采取什么行动也想好了。尚未想清楚前，不要冒冒失失地决策，但都想好了，也绝不会优柔寡断&lt;/li&gt;
&lt;li&gt;电脑只是工具，人类则不是逻辑的，而是具有感官的；电脑所做的决策是预先安排的，不能随机应变，都是基于&lt;strong&gt;硬性原则&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;每一位知识工作者有效决策能力的高低，决定了其工作能力的高低&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a href=&#34;#总结&#34; class=&#34;headerlink&#34; title=&#34;总结&#34;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;全书内容无非两点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;管理者的工作必须卓有成效&lt;/li&gt;
&lt;li&gt;卓有成效可以学会&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;做到卓有成效需要从几个方面努力：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;记录好时间的使用情况，分析时间记录，消除不必要浪费&lt;/li&gt;
&lt;li&gt;集中眼光在贡献上，从执行进入到观念，关注个人目标和组织目标的关联&lt;/li&gt;
&lt;li&gt;充分发挥人的长度，融合个人能力和组织成果&lt;/li&gt;
&lt;li&gt;做重要的事情&lt;/li&gt;
&lt;li&gt;有效的决策，合理的行动&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今天的组织需要的是&lt;strong&gt;平凡人做不平凡的事业&lt;/strong&gt;。组织取得好的成效，要靠组织中的人切实进行系统化、专门化的自我训练，成为有效的管理者。在如今，知识工作者为组织服务，除了物质上，在心理需求和个人价值上也需要从工作和职位上获得满足。因此，一定要使组织绩效和个人成就结合起来。管理者在卓有成效上的自我提高就是唯一解法。&lt;/p&gt;
</content>
        <category term="管理" />
        <category term="效率" />
        <category term="知识工作者" />
        <category term="卓有成效" />
        <updated>2021-12-16T15:06:27.000Z</updated>
    </entry>
    <entry>
        <id>http://shenlvmeng.github.com/blog/2021/12/07/winning-note/</id>
        <title>公司管理和自我修养 —— 《赢》读书笔记</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2021/12/07/winning-note/"/>
        <content type="html">&lt;p&gt;关于管理和商业化这个大话题，《赢》这本书从“术”的角度，结合自身几十年的成功经验，给出了自己的看法和建议。书中的视角不像&lt;a href=&#34;https://shenlvmeng.github.io/blog/2021/11/24/leadership-pipeline/&#34;&gt;《领导梯队》&lt;/a&gt;一样，切入到很实际的角度，很具象地描述和推广领导力模型。《赢》的视角要更为大和全面，在管理上更实用。同时，相对德鲁克的管理学著作对于组织、管理的系统探讨，《赢》又更实用和大杂烩一点，不仅介绍了公司的管理技巧，也讲解了公司竞争、个人发展相关的一些商业手段。整体值得一看，可以开拓自己的做事思路，文本精简而平易近人，很易读。&lt;/p&gt;
&lt;h2 id=&#34;原则篇&#34;&gt;&lt;a href=&#34;#原则篇&#34; class=&#34;headerlink&#34; title=&#34;原则篇&#34;&gt;&lt;/a&gt;原则篇&lt;/h2&gt;&lt;p&gt;韦尔奇从先从自己的经营方式中，总结出4个基本原则，作为后续实践的基础：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;使命和价值观&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;有效的使命需要有&lt;strong&gt;清晰&lt;/strong&gt;的方向，以赢的&lt;strong&gt;商业利益&lt;/strong&gt;为导向，又要让人充满&lt;strong&gt;雄心壮志&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;例：成为世界上最有竞争力的企业，即各个业务领域都在第一或第二的位置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;确定使命始终是企业高管的职责&lt;/li&gt;
&lt;li&gt;价值观体现在人的行动，是具体的、本质的、可以描述的&lt;ul&gt;
&lt;li&gt;让员工参与进来&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;具体的价值观念和行动纲领&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;反复实践修正&lt;/li&gt;
&lt;li&gt;配合奖惩&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使命和价值观需要融为一体，出现偏离时，通常是因为商业生活中出现了危机&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;坦诚&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;坦诚可以&lt;strong&gt;减少沟通负担、鼓励信息流动、减少沟通中的信息损耗或走样&lt;/strong&gt;；从而吸引更多人参与对话、提高效率、节约成本&lt;/li&gt;
&lt;li&gt;坦诚使人紧张，这是人们的世故带来的，&lt;/li&gt;
&lt;li&gt;鼓励坦诚是项艰难而费时的工作，&lt;ul&gt;
&lt;li&gt;要普及坦诚，需要不断激励、赞赏、谈论它，还需要自己带头，同时展示给别人看&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;考评&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;考评不过是&lt;strong&gt;资源配置&lt;/strong&gt;而已，将资源投放到回报最丰厚的地方，避免不必要的损失&lt;/li&gt;
&lt;li&gt;可以将员工分为最好的20%，中间的70%，最差的10%&lt;ul&gt;
&lt;li&gt;最好的20%：大加鼓励，基于物质和精神财富&lt;/li&gt;
&lt;li&gt;中间的70%：培训教育、积极反馈，分辨哪些人有提升潜力&lt;/li&gt;
&lt;li&gt;最差的10%：“不是人人都能成为优秀的棒球手”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;需要坦诚和清晰的流程来保证&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;清晰的期望值、目标和时间表&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在商业生活中，&lt;strong&gt;积极向上且外向&lt;/strong&gt;的人通常能做得更好，得到更多偏爱&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;发言权和尊严&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;人们都希望得到发言权和尊严&lt;/li&gt;
&lt;li&gt;“对于讨论会上的75%的建议，需要现场给出‘行’或‘不行’的回答；剩下的25%要在30天内回答”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;公司管理&#34;&gt;&lt;a href=&#34;#公司管理&#34; class=&#34;headerlink&#34; title=&#34;公司管理&#34;&gt;&lt;/a&gt;公司管理&lt;/h2&gt;&lt;p&gt;下面6章主要介绍公司管理的有效手段&lt;/p&gt;
&lt;h3 id=&#34;领导力&#34;&gt;&lt;a href=&#34;#领导力&#34; class=&#34;headerlink&#34; title=&#34;领导力&#34;&gt;&lt;/a&gt;领导力&lt;/h3&gt;&lt;p&gt;在你成为领导者之后，你的成功和他人的成长有关。有下面一些准则评估一个领导者的领导力：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;坚持不懈提升自己团队，珍惜每一次oneone的机会&lt;ul&gt;
&lt;li&gt;必须做好评估、提供指导、树立员工自信心&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;让员工心怀梦想，实践梦想&lt;ul&gt;
&lt;li&gt;保持和公司同步&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;深入员工中，传递积极活力&lt;ul&gt;
&lt;li&gt;一个团队的风格会受到领导的影响，积极的领导才能带出积极的团队&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;以坦诚、透明度提升自己的可信赖感&lt;ul&gt;
&lt;li&gt;坦诚、言出必行&lt;/li&gt;
&lt;li&gt;context, not control，激发潜能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有勇气作出决定&lt;/li&gt;
&lt;li&gt;用好奇心和怀疑精神监督业务，要习惯于提问题，不放过问题&lt;ul&gt;
&lt;li&gt;适当的challenge可以让员工更深入本质&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用于承担风险和学习&lt;ul&gt;
&lt;li&gt;对于比自己优秀的下属，要向他们学习&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;学会庆祝&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;招聘&#34;&gt;&lt;a href=&#34;#招聘&#34; class=&#34;headerlink&#34; title=&#34;招聘&#34;&gt;&lt;/a&gt;招聘&lt;/h3&gt;&lt;p&gt;招聘的员工可以怎么考察。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3项考验&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;正直&lt;/strong&gt;：说真话、授信、知错能改&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;智慧&lt;/strong&gt;：有求知欲和知识面&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;成熟&lt;/strong&gt;：能够控制情绪，尊重他人情感&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;4E1P人员招聘方法&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Energy&lt;/strong&gt;：积极向上的人热爱生活&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Energize&lt;/strong&gt;：能激励人，鼓舞自己的团队&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Edge&lt;/strong&gt;：需要能做出果断的决定&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Execute&lt;/strong&gt;：有执行力，能落实工作任务&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Passion&lt;/strong&gt;：有旺盛的生命力和激情&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;招聘高层人士的额外特征&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;真诚&lt;/strong&gt;：需要保持本色，没有伪装&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对变化来临的敏感性&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;爱才&lt;/strong&gt;：即希望周边人更优秀和聪明&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;强大的韧性&lt;/strong&gt;，不怕失败，能屈能伸&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;招聘管理职位时，至少需要有前两个E&lt;/li&gt;
&lt;li&gt;招聘人才时，要更看重&lt;strong&gt;长远的发展潜力&lt;/strong&gt;，努力寻找能和业务一同成长或者能到更高职位的人才&lt;ul&gt;
&lt;li&gt;在招聘员工时，不要提供他们职业生涯的“终极岗位”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;询问上一次的离职原因通常可以获取到绝大多数你想了解的信息&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;人员管理&#34;&gt;&lt;a href=&#34;#人员管理&#34; class=&#34;headerlink&#34; title=&#34;人员管理&#34;&gt;&lt;/a&gt;人员管理&lt;/h3&gt;&lt;p&gt;对于按上章标准招聘来的人才，可以有下面一些管理准则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重视人力资源管理，人力资源管理人员可以帮助经理人培养领导者&lt;ul&gt;
&lt;li&gt;人力资源管理应当与公司其他业务一样重要&lt;/li&gt;
&lt;li&gt;出色的人力资源经理，既是牧师又是父母，既能倾听，又能给与关爱和教育&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;采用一套严格、非官僚的业绩评价体系&lt;ul&gt;
&lt;li&gt;简洁明了的评价&lt;/li&gt;
&lt;li&gt;和行为相关联的标准&lt;/li&gt;
&lt;li&gt;每年一次到两次&lt;/li&gt;
&lt;li&gt;应当包含职业发展的内容&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有一个激励机制，包括物质上和精神上的&lt;ul&gt;
&lt;li&gt;和奖赏一样，培训也有同样的激励作用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;积极处理和&lt;strong&gt;工会&lt;/strong&gt;、&lt;strong&gt;明星员工&lt;/strong&gt;、&lt;strong&gt;边缘分子&lt;/strong&gt;、&lt;strong&gt;捣乱分子&lt;/strong&gt;的关系&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;工会&lt;/strong&gt;：正直和积极的态度，有原则&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;明星员工&lt;/strong&gt;：提前考虑可替代性&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;边缘人员&lt;/strong&gt;：拉回正轨或者及时辞退&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;捣乱分子&lt;/strong&gt;：限期改正或及时辞退&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不要忽视70%的大多数&lt;/li&gt;
&lt;li&gt;设计更扁平和更易懂的组织框架&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;解雇&#34;&gt;&lt;a href=&#34;#解雇&#34; class=&#34;headerlink&#34; title=&#34;解雇&#34;&gt;&lt;/a&gt;解雇&lt;/h3&gt;&lt;p&gt;既然有招聘，当然就有解雇。解雇分三类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;违法或者违反道德准则而遭解雇&lt;/li&gt;
&lt;li&gt;因为大环境或经济问题的裁员&lt;/li&gt;
&lt;li&gt;因为业绩不佳的解雇&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于第一种，不需要解释，当机立断即可。对于第二种，需要让员工提前知道公司的经营情况，从而有提前的心理准备。对于第三种，主要在于降低员工的羞耻感，给一个缓冲时间，尽量做到：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;留下缓冲时间&lt;/strong&gt;：给人心理准备&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;坦诚清晰&lt;/strong&gt;：减少误解，直说事实，无需粉饰&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;及时say goodbye&lt;/strong&gt;：拖得太久会影响团队的稳定性&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;改革&#34;&gt;&lt;a href=&#34;#改革&#34; class=&#34;headerlink&#34; title=&#34;改革&#34;&gt;&lt;/a&gt;改革&lt;/h3&gt;&lt;p&gt;公司要能适应外界变化和自身情况，积极调整自己，这即是改革。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果你认为需要改革，但是却不具备权威，那就提出自己的议案，你的建议如果没得到响应，那么要么接受现状要么离开&lt;/li&gt;
&lt;li&gt;设立清晰的目标和指标，不要为了改革而改革&lt;ul&gt;
&lt;li&gt;收集bad case&lt;/li&gt;
&lt;li&gt;远离空洞口号，立足实际的行动&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;招募和提拔支持者&lt;ul&gt;
&lt;li&gt;这类人通常以“卷王”的形式出现&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;清理反对者，尤其是在他们构成阻碍的时候&lt;/li&gt;
&lt;li&gt;抓住良机&lt;ul&gt;
&lt;li&gt;黑天鹅事件无时无刻都在发生&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;危机管理&#34;&gt;&lt;a href=&#34;#危机管理&#34; class=&#34;headerlink&#34; title=&#34;危机管理&#34;&gt;&lt;/a&gt;危机管理&lt;/h3&gt;&lt;p&gt;解决危机可能是每个管理者不愿面对，却又不得不面对的事情。下面是这一章中提到的一些tips：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;假设问题本身比表现出来的&lt;strong&gt;更糟糕&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;降低预期，饱和式补救&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;假设所有人最终都会知道事件真相&lt;ul&gt;
&lt;li&gt;要坦诚错误，但也不要将所有错误都包揽在身上，保证说得都是事实就行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;假设你和所在组织会被人用摸黑的态度描述出来&lt;ul&gt;
&lt;li&gt;在别人全面曝光之前，如果不能奋起反抗，为自己辩护，那就只能被别人埋葬了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;危机处理中，&lt;strong&gt;总要有人付出代价&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;危机后总有变革发生&lt;/li&gt;
&lt;li&gt;有人需要对发生的事故承担责任&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;假设你的组织将从危机中恢复，并变得更强大&lt;ul&gt;
&lt;li&gt;就像免疫系统一样&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;赢得竞争&#34;&gt;&lt;a href=&#34;#赢得竞争&#34; class=&#34;headerlink&#34; title=&#34;赢得竞争&#34;&gt;&lt;/a&gt;赢得竞争&lt;/h2&gt;&lt;p&gt;不同于上一部分，这一部分在管理以外，介绍赢得商业竞争的各方面&lt;/p&gt;
&lt;h3 id=&#34;战略&#34;&gt;&lt;a href=&#34;#战略&#34; class=&#34;headerlink&#34; title=&#34;战略&#34;&gt;&lt;/a&gt;战略&lt;/h3&gt;&lt;p&gt;全篇在阐述战略没有想象中复杂神秘。无非是摸清游戏规则，找到一个努力的方向，果断行动。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;找一个大方向，找到聪明、实用、可以获得竞争优势的办法&lt;ul&gt;
&lt;li&gt;如果大方向对头，又有一定宽度，则战略不需要经常变化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;把合适的人放在合适的位置&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;为不同类型的方向安排对应特质的人&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不断迭代探索最佳实践&lt;ul&gt;
&lt;li&gt;学习竞争对手或是优秀同行的成功经验&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;找到一个可以获得优势的大方向需要一些讨论和分析，可以从下面几个角度出发：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在什么场景下&lt;ul&gt;
&lt;li&gt;行业里有哪些竞争对手&lt;/li&gt;
&lt;li&gt;市场份额占有情况如何，我们的企业更擅长什么市场&lt;/li&gt;
&lt;li&gt;行业特征怎么样&lt;ul&gt;
&lt;li&gt;平民化？高附加值？&lt;/li&gt;
&lt;li&gt;长周期？短周期？&lt;/li&gt;
&lt;li&gt;在增长曲线的什么位置？&lt;/li&gt;
&lt;li&gt;决定利润率的因素是什么&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;竞争对手的优劣势在哪里&lt;ul&gt;
&lt;li&gt;产品&lt;/li&gt;
&lt;li&gt;研发&lt;/li&gt;
&lt;li&gt;销售&lt;/li&gt;
&lt;li&gt;组织文化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;客户有哪些，购买方式如何&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最近的竞争态势&lt;ul&gt;
&lt;li&gt;竞争对手过去一年的改变市场格局的举动&lt;/li&gt;
&lt;li&gt;有什么新产品、新技术或是新的销售渠道&lt;/li&gt;
&lt;li&gt;是否进入了新的玩家&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;我们的近况如何&lt;ul&gt;
&lt;li&gt;过去一年，我们企业对市场竞争格局的影响&lt;/li&gt;
&lt;li&gt;是否通过收购、引进新产品、挖角、引进新技术得到竞争优势&lt;/li&gt;
&lt;li&gt;是否失去某些竞争优势&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有哪些潜在风险&lt;ul&gt;
&lt;li&gt;对手有没有可能做出什么事情，将我们封杀出具&lt;/li&gt;
&lt;li&gt;对手有没有什么能改变游戏规则的举动&lt;/li&gt;
&lt;li&gt;公司会不会被收购&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有什么胜招&lt;ul&gt;
&lt;li&gt;我们能做什么——兼并、新产品、全球化&lt;/li&gt;
&lt;li&gt;如何保持用户粘性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;预算&#34;&gt;&lt;a href=&#34;#预算&#34; class=&#34;headerlink&#34; title=&#34;预算&#34;&gt;&lt;/a&gt;预算&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;不要把预算会变成辩论会或是形式化的会&lt;/li&gt;
&lt;li&gt;使用灵活的指标，不论是规划预算还是评估盈利结果，用更具建设性的方式讨论&lt;ul&gt;
&lt;li&gt;对个人和部门的奖励不是根据实际业绩与预算目标对比决定，而是通过实际业绩和此前的业绩结合竞争环境的对比决定，要考虑到现实的战略机会和困难因素&lt;/li&gt;
&lt;li&gt;这种改变的推进可能会遇到持续的阻力&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;有机的成长&#34;&gt;&lt;a href=&#34;#有机的成长&#34; class=&#34;headerlink&#34; title=&#34;有机的成长&#34;&gt;&lt;/a&gt;有机的成长&lt;/h3&gt;&lt;p&gt;公司内会通过孵化新产品或兼并收购来获得进一步增长。这一章先介绍新产品。对管理者来讲，有下面3个原则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;做大笔投入，把最优秀、最进取、最有活力的人放在领导岗位上&lt;ul&gt;
&lt;li&gt;不要把新业务当做边缘部门，安排平凡的人&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;大肆宣传新项目的潜力和重要性&lt;ul&gt;
&lt;li&gt;新项目报告层次至少应该提升2级，甚至到CEO的地步&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;给予自由度，允许犯错误，让新项目自己成熟起来&lt;ul&gt;
&lt;li&gt;适当自由度会给人主人翁意识和自豪感&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对新业务负责人来讲，要有&lt;strong&gt;创业者&lt;/strong&gt;的心态&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要做好资金不足、人手不够优秀的心理准备，竭力去争取！&lt;/li&gt;
&lt;li&gt;适当渲染&lt;/li&gt;
&lt;li&gt;用自我行动争取公司的自由度&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;新的项目需要高水平的人才、大规模的资源投入、大规模的宣传。&lt;/p&gt;
&lt;h3 id=&#34;企业并购&#34;&gt;&lt;a href=&#34;#企业并购&#34; class=&#34;headerlink&#34; title=&#34;企业并购&#34;&gt;&lt;/a&gt;企业并购&lt;/h3&gt;&lt;p&gt;上章是增长的一种方式——新项目，这章介绍了增长的另一种方式——并购。并购有下面一些注意事项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;“平等合并”很难发生&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;至少工业领域内，除了银行和咨询产业，很难发生&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不要过分关注经营策略的匹配而忽略了&lt;strong&gt;企业文化的融合&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;不要让被收购方过于影响自己的企业文化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不要在收购中让步太多&lt;/li&gt;
&lt;li&gt;整合行动节奏应该在90天内完成，不要拖泥带水&lt;ul&gt;
&lt;li&gt;公布清晰的合并程序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;克服“征服者综合征”，收购的目标之一是&lt;strong&gt;寻求更好更多的人才&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;合并最大的战略收益之一就是让收购方从丰富的人才库来组建队伍&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不要付出太高收购代价&lt;/li&gt;
&lt;li&gt;作为被收购方，不能拥抱变化的人就只能离开&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;六西格玛&#34;&gt;&lt;a href=&#34;#六西格玛&#34; class=&#34;headerlink&#34; title=&#34;六西格玛&#34;&gt;&lt;/a&gt;六西格玛&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://wiki.mbalib.com/wiki/%E5%85%AD%E8%A5%BF%E6%A0%BC%E7%8E%9B&#34;&gt;六西格玛&lt;/a&gt;是一种企业质量控制策略。它主要做两件事：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建立体系，减衡量质量波动&lt;/li&gt;
&lt;li&gt;减少质量波动&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;个人发展&#34;&gt;&lt;a href=&#34;#个人发展&#34; class=&#34;headerlink&#34; title=&#34;个人发展&#34;&gt;&lt;/a&gt;个人发展&lt;/h2&gt;&lt;p&gt;这一部分从个人角度出发，聊聊发展的思路。&lt;/p&gt;
&lt;h3 id=&#34;合适的工作&#34;&gt;&lt;a href=&#34;#合适的工作&#34; class=&#34;headerlink&#34; title=&#34;合适的工作&#34;&gt;&lt;/a&gt;合适的工作&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;寻找合适的工作需要时间、尝试和耐心&lt;/strong&gt;。下面有一些判断工作或好或坏的信号。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;人&lt;ul&gt;
&lt;li&gt;好信号：你喜欢那里的人，融入得很好，可以和他们很好地沟通，志趣相投&lt;/li&gt;
&lt;li&gt;坏信号：你感觉自己需要戴上面具，不会和他们交朋友&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;机会&lt;ul&gt;
&lt;li&gt;好信号：你能学到之前没有遇到的知识，获得人生或职业的进步空间&lt;/li&gt;
&lt;li&gt;坏信号：你似乎是办公室里最聪明的人，不需要能力提升&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;未来：从事的每种职业都是一种赌博，它可能会开拓你的发展空间或是缩小你的选择范围&lt;ul&gt;
&lt;li&gt;好信号：工作会给你能力背书；行业发展强劲或是新兴业务&lt;/li&gt;
&lt;li&gt;坏信号：该产业或公司已经过了巅峰期，不能给职业发展提供更多帮助&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;主导权&lt;ul&gt;
&lt;li&gt;好信号：你能自己cover这个工作，同时为自己工作&lt;/li&gt;
&lt;li&gt;坏信号：你出于外在原因，或被迫选择这份工作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;工作内容&lt;ul&gt;
&lt;li&gt;好信号：内容令人着迷，让你感到有趣，或是热爱&lt;/li&gt;
&lt;li&gt;坏信号：只是工作而已，不过是权宜之计&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同时要对薪水坦诚，尤其是职业生涯的前几年。另外：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于第一份工作的面试，如果没有明显的长处，要保持坦诚和坦白&lt;/li&gt;
&lt;li&gt;如果是当前陷入困境，被迫寻找下一份工作，要记住&lt;strong&gt;寻找更好的工作，最快捷的办法是在现在的岗位上干出业绩&lt;/strong&gt;，从而不会显得是能力不足从而寻找下家&lt;/li&gt;
&lt;li&gt;被辞退后，要能坦诚面对，承认错误，然后主动地走出来&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;晋升&#34;&gt;&lt;a href=&#34;#晋升&#34; class=&#34;headerlink&#34; title=&#34;晋升&#34;&gt;&lt;/a&gt;晋升&lt;/h3&gt;&lt;p&gt;可以说晋升是绝大多数人职业生涯中努力追求的，当然首先需要有&lt;strong&gt;渴望晋升的欲望&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;尽管有些晋升的机会纯粹来自于&lt;strong&gt;运气&lt;/strong&gt;，但在职业生涯中，运气起到的作用比你可以控制的因素要小&lt;/li&gt;
&lt;li&gt;晋升的基础主要有两点&lt;ul&gt;
&lt;li&gt;要：要交出动人的、&lt;strong&gt;远超预期的业绩&lt;/strong&gt;，同时机遇来临时，勇于&lt;strong&gt;扩展工作职责到预期范围外&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;eg. 超出预期的行动、新理念、新流程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不要：不要麻烦老板动用&lt;strong&gt;政治资本&lt;/strong&gt;帮助你（推一把就水到渠成的地步）&lt;ul&gt;
&lt;li&gt;eg. 不要当刺儿头，不要表露过强的职业欲望，要获得普遍认可&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;具体下来，用下面几点行动守则&lt;ul&gt;
&lt;li&gt;要处理好&lt;strong&gt;和下属的关系&lt;/strong&gt;，像对老板一样认真&lt;ul&gt;
&lt;li&gt;也要和下属保持距离，不要跨越边界&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在项目上&lt;strong&gt;早日做出成绩&lt;/strong&gt;，受到关注或普遍认可&lt;ul&gt;
&lt;li&gt;勇于承担大家关注的业务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;寻找和利用良师益友&lt;/li&gt;
&lt;li&gt;保持积极向上，不要自认为清高或华而不实&lt;/li&gt;
&lt;li&gt;不要惧怕挫折&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;糟糕的领导&#34;&gt;&lt;a href=&#34;#糟糕的领导&#34; class=&#34;headerlink&#34; title=&#34;糟糕的领导&#34;&gt;&lt;/a&gt;糟糕的领导&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;世界上总有乖僻古怪的人，有的或许就是能当上领导&lt;/li&gt;
&lt;li&gt;不能表现的像一名受害者&lt;/li&gt;
&lt;li&gt;领导一般对他们喜欢、尊重、需要的人表现并不差&lt;/li&gt;
&lt;li&gt;当价值观有问题但是绩效出色的人，公司不一定会很快开除&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;工作和生活平衡&#34;&gt;&lt;a href=&#34;#工作和生活平衡&#34; class=&#34;headerlink&#34; title=&#34;工作和生活平衡&#34;&gt;&lt;/a&gt;工作和生活平衡&lt;/h3&gt;&lt;p&gt;本章有些屁股决定脑袋的成分，很多观点本人并不认同。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;老板最关心的是竞争力，他只希望你的WLB（work life balance）不要影响工作&lt;ul&gt;
&lt;li&gt;老板的第一优先级是盈利&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有出色业绩，才可以有余地追求WLB&lt;ul&gt;
&lt;li&gt;既然参与了工作这个“游戏”，就要服从游戏规则&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;很多老板认为WLB是应该自己去解决的问题，不应该交给公司&lt;ul&gt;
&lt;li&gt;工作和生活总需要平衡和取舍，自己需要承担后果的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;其他&#34;&gt;&lt;a href=&#34;#其他&#34; class=&#34;headerlink&#34; title=&#34;其他&#34;&gt;&lt;/a&gt;其他&lt;/h2&gt;&lt;p&gt;其他的一些零星问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;竞争力的三要素&lt;ul&gt;
&lt;li&gt;成本、质量、服务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;考虑公司文化多元化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;–END–&lt;/em&gt;&lt;/p&gt;
</content>
        <category term="管理学" />
        <category term="公司" />
        <category term="个人发展" />
        <category term="战略" />
        <category term="晋升" />
        <updated>2021-12-07T14:27:07.000Z</updated>
    </entry>
    <entry>
        <id>http://shenlvmeng.github.com/blog/2021/11/24/leadership-pipeline/</id>
        <title>《领导梯队》—— 领导力模型构建</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2021/11/24/leadership-pipeline/"/>
        <content type="html">&lt;p&gt;对于很多从一线成长到管理岗位的员工来讲，管理工作和管理能力的阶段多少要靠自己领悟。可能从日常工作、文档培训中形成了管理工作懵懂认识，不成熟的归纳认知很可能会让你卡在某个阶段无法提升，又找不到办法。《领导梯队》这本书从基层开始分析管理路线上每一个阶段的做事思路，或许不能适应在所有场景下，但最起码能给人一种启示——什么才叫管理，以及想走管理路线的话，可以做些什么。当然，做事过犹不及，作为技术人员，理清管理思路后，别忘了你的本职工作。至少在前几个阶段，对你的技术能力是有要求的。&lt;/p&gt;
&lt;h2 id=&#34;序和导论&#34;&gt;&lt;a href=&#34;#序和导论&#34; class=&#34;headerlink&#34; title=&#34;序和导论&#34;&gt;&lt;/a&gt;序和导论&lt;/h2&gt;&lt;p&gt;在讨论领导梯队和领导力模型之前，我们要认清下面一些现状：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在快速发展的行业里（如互联网），是缺乏领导人才的&lt;/li&gt;
&lt;li&gt;一味地引入，忽视内部培养，无法建立完善而持久的领导梯队&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，公司需要一个领导力发展模型，模型从个人贡献者到CEO可以分为6个阶段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;个人贡献者到一线经理&lt;/li&gt;
&lt;li&gt;一线经理到部门总监&lt;/li&gt;
&lt;li&gt;部门总监到事业部副总经理&lt;/li&gt;
&lt;li&gt;事业部副总经理到事业部总经理&lt;/li&gt;
&lt;li&gt;事业部总经理到集团高管&lt;/li&gt;
&lt;li&gt;集团高管到CEO&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;角色负责的范围逐渐扩大，在&lt;strong&gt;工作技能&lt;/strong&gt;、&lt;strong&gt;时间管理&lt;/strong&gt;、&lt;strong&gt;工作理念&lt;/strong&gt;三方面的要求也各有侧重。&lt;/p&gt;
&lt;p&gt;最后，书中提到的领导力模型和阶段并非适用于所有场景，需要根据实际情况灵活调整。毕竟人是复杂的，管理也是。&lt;/p&gt;
&lt;h2 id=&#34;概述&#34;&gt;&lt;a href=&#34;#概述&#34; class=&#34;headerlink&#34; title=&#34;概述&#34;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;这里具体介绍了领导力发展的6个阶段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从管理自我到管理他人&lt;ul&gt;
&lt;li&gt;从专业化、职业化思路转变到&lt;strong&gt;通过他人完成任务&lt;/strong&gt;作为自己取得成功的关键&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;从管理他人到管理经理人员&lt;ul&gt;
&lt;li&gt;负责选拔人才成为一线经理&lt;/li&gt;
&lt;li&gt;帮助一线经理清除“依靠自己获得成功”的错误观念&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;从管理经理人员到管理职能部门&lt;ul&gt;
&lt;li&gt;战略眼光&lt;/li&gt;
&lt;li&gt;跨层级沟通&lt;/li&gt;
&lt;li&gt;和其他部门合作，基于工作需要帮自己部门争取资源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;从管理职能部门到事业部总经理&lt;ul&gt;
&lt;li&gt;清楚管理工作和市场结果的关系&lt;/li&gt;
&lt;li&gt;从盈利和长远发展出发&lt;/li&gt;
&lt;li&gt;兼顾长远和近期目标&lt;/li&gt;
&lt;li&gt;更多时间用来分析反思&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;从事业部总经理到集团高管&lt;ul&gt;
&lt;li&gt;资金调拨和人才配置&lt;/li&gt;
&lt;li&gt;培养事业部经理&lt;/li&gt;
&lt;li&gt;评估业务投资组合策略&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;从集团高管到CEO&lt;ul&gt;
&lt;li&gt;从管理技能转变到经营理念&lt;/li&gt;
&lt;li&gt;远大抱负、权衡取舍、外部视角&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在小公司里，可能不会有这么多领导力的层级。&lt;/p&gt;
&lt;h2 id=&#34;管理自我到管理他人&#34;&gt;&lt;a href=&#34;#管理自我到管理他人&#34; class=&#34;headerlink&#34; title=&#34;管理自我到管理他人&#34;&gt;&lt;/a&gt;管理自我到管理他人&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;关键词：团队努力、计划、沟通&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;随着个人贡献者能力的提升，一部分人会被提拔到职业生涯里第一个领导岗位上。在这个岗位上获得成功需要心态上的一大转变，即&lt;strong&gt;工作成功不再通过自己亲自做获得，而是通过下述和团队的努力获得&lt;/strong&gt;。在这个位置，经理身上需要承担一些管理动作，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;制定计划&lt;/li&gt;
&lt;li&gt;工作涉及&lt;/li&gt;
&lt;li&gt;人员选拔&lt;/li&gt;
&lt;li&gt;授权&lt;/li&gt;
&lt;li&gt;绩效监督、评估&lt;/li&gt;
&lt;li&gt;辅导和反馈收集&lt;/li&gt;
&lt;li&gt;沟通和氛围营造&lt;/li&gt;
&lt;li&gt;获取资源&lt;/li&gt;
&lt;li&gt;奖励和激励&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在时间管理上，需要划分出更多时间做：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;执行计划&lt;/li&gt;
&lt;li&gt;和下属沟通&lt;/li&gt;
&lt;li&gt;和兄弟部门、客户、供应商等沟通&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这一阶段可以采用下面一些手段帮助经理对齐领导力模型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;准备：提前对齐岗位期望&lt;/li&gt;
&lt;li&gt;监督：通过旁听、360评估、和同行比较等方法&lt;/li&gt;
&lt;li&gt;干预：oneone沟通，引导&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一线经理是未来领导者的摇篮，在选拔这类人才时，可以考察此人帮助别人成功的意愿以及是否可以从帮助别人获得满足。&lt;/p&gt;
&lt;h2 id=&#34;管理他人到管理经理&#34;&gt;&lt;a href=&#34;#管理他人到管理经理&#34; class=&#34;headerlink&#34; title=&#34;管理他人到管理经理&#34;&gt;&lt;/a&gt;管理他人到管理经理&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;关键词：授权、选培一线经理、部门协作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个过程通常代表着从一线经理到部门总监。工作上也主要围绕着一线经理展开，主要职责是整合工作、分配资源和培训管理者。要敢于&lt;strong&gt;授权&lt;/strong&gt;，同时建设授权后的问责系统，另外开始培养战略和文化的问题。作为一个部门总监，至少需要以下几个技能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选拔和培养有能力的一线经理&lt;ul&gt;
&lt;li&gt;建设性批评、就事论事&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;让一线经理对管理工作负责&lt;ul&gt;
&lt;li&gt;对齐期望，减少越俎代庖&lt;/li&gt;
&lt;li&gt;调整不合适的一线经理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在部门配置资源&lt;ul&gt;
&lt;li&gt;根据部门情况调配资源（薪水、项目等）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;协调下属部门和其他部门的管辖&lt;ul&gt;
&lt;li&gt;信息共享，鼓励团结协作&lt;/li&gt;
&lt;li&gt;context、not control&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中第一项能力最为重要，要善于授权，培养&lt;strong&gt;大局观&lt;/strong&gt;。寻找对管理工作有真正热情的人。在交流时，把一线经理当成一个团队而非一线员工。部门总监是第一个完全依靠管理技能而非从事专业技术工作的管理层级，要能够传递高层战略到基层员工，也要能将基层员工的执行能力反馈给战略制定者。&lt;/p&gt;
&lt;h2 id=&#34;管理经理到管理职能部门&#34;&gt;&lt;a href=&#34;#管理经理到管理职能部门&#34; class=&#34;headerlink&#34; title=&#34;管理经理到管理职能部门&#34;&gt;&lt;/a&gt;管理经理到管理职能部门&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;关键词：信息收集、全局观、战略思维、成熟度&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;职能主管这个层级会有多种信息来源，需要能够熟练地收集和理解信息，沟通上从交谈转为倾听，要能积极倾听开放思想。另外，职能主管需要认识到，他不再是职能部门的一员，而是该部门的领导者。他需要拥有&lt;strong&gt;战略性思维&lt;/strong&gt;，可以胸怀&lt;strong&gt;全局&lt;/strong&gt;把握整体，而不是依赖以往领域的经验做事：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;长期思维（3-5年）&lt;/li&gt;
&lt;li&gt;关注业界最新发展动态&lt;ul&gt;
&lt;li&gt;技术方面&lt;/li&gt;
&lt;li&gt;经营方面&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;全面了解商业模式和战略目标&lt;ul&gt;
&lt;li&gt;业务目标&lt;/li&gt;
&lt;li&gt;市场定位&lt;/li&gt;
&lt;li&gt;战略变动&lt;/li&gt;
&lt;li&gt;如何盈利&lt;/li&gt;
&lt;li&gt;团队优势&lt;/li&gt;
&lt;li&gt;所在部门可以做出的贡献&lt;/li&gt;
&lt;li&gt;其他部门的贡献&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;将职能部门的所有方面纳入战略考虑，这也要求了解之前不甚熟悉的其他职能领域&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个称职的事业部副总应该是&lt;strong&gt;成熟&lt;/strong&gt;的。这体现在：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;谦逊好学、坦诚清晰&lt;/li&gt;
&lt;li&gt;善于授权、相信他人&lt;/li&gt;
&lt;li&gt;乐于沟通，善于表达&lt;/li&gt;
&lt;li&gt;和兄弟职能部门保持合作而不是竞争，因为个人成功和进步只有在企业成功时才有可能实现&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;与之相反，可能会出现下面这些bad case：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无法从项目运作导向转变到战略导向&lt;/li&gt;
&lt;li&gt;不重视不熟悉或是不感兴趣的工作&lt;/li&gt;
&lt;li&gt;表现不成熟&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;管理职能部门到事业部总经理&#34;&gt;&lt;a href=&#34;#管理职能部门到事业部总经理&#34; class=&#34;headerlink&#34; title=&#34;管理职能部门到事业部总经理&#34;&gt;&lt;/a&gt;管理职能部门到事业部总经理&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;关键词：时间管理、工作透明、部门权衡、视野开阔&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;相对职能主管，事业部总经理工作的曝光度要高得多，他有很强的掌控权，也对成本和收入直接负责。副总经理需要制定业务战略和整合各部门工作。对比职能主管的部门策略思维，事业部总经理的&lt;strong&gt;业务战略&lt;/strong&gt;思维要求他拥有更广泛的视野，综合无数外部因素，考虑本行业甚至全球事务。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何实现业务增长&lt;/li&gt;
&lt;li&gt;如何提高盈利水平&lt;/li&gt;
&lt;li&gt;如何增强竞争优势&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个思维模式的转变是有难度的，也是必须完成的。&lt;/p&gt;
&lt;p&gt;事业部总经理需要处理错综复杂的各种问题，兼顾短期和长期目标。为了了解业务的方方面面，保证视野开阔，他还需要时间学习很多新知识。&lt;strong&gt;时间管理&lt;/strong&gt;成为一个难题。事业部总经理不能单单依靠个人能力获得成功，他需要把部门经理整合成高效团队，重视和平衡所有部门，并把具体工作授权给它们。事业部总经理的关注对比副总经理更为强烈，在项目、计划和人员管理上也有很大权限，这也让他的一举一动十分透明。做每一个决定前都要认真考虑。&lt;/p&gt;
&lt;p&gt;自我提升上，可以借助&lt;strong&gt;协同三角形&lt;/strong&gt;模型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;战略方向&lt;ul&gt;
&lt;li&gt;竞争优势：产品、市场、客户&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;人员能力&lt;ul&gt;
&lt;li&gt;经验&lt;/li&gt;
&lt;li&gt;技能&lt;/li&gt;
&lt;li&gt;思维模式&lt;/li&gt;
&lt;li&gt;视角&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;组织能力&lt;ul&gt;
&lt;li&gt;组织结构&lt;/li&gt;
&lt;li&gt;工作设计&lt;/li&gt;
&lt;li&gt;工作流程&lt;/li&gt;
&lt;li&gt;权力配置&lt;/li&gt;
&lt;li&gt;人员配置&lt;/li&gt;
&lt;li&gt;组织文化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以通过考虑一些问题来实现上面的思考方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们有合适的产品么&lt;/li&gt;
&lt;li&gt;我们的竞争优势能报纸么&lt;/li&gt;
&lt;li&gt;我们的客户细分市场何合适么&lt;/li&gt;
&lt;li&gt;员工是否有创新意识&lt;/li&gt;
&lt;li&gt;我们是否有客户导向的思维模式&lt;/li&gt;
&lt;li&gt;我们的产品研发部门是否有足够授权&lt;/li&gt;
&lt;li&gt;我们的各部门是否可以有效组织&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;事业部总经理到集团高管&#34;&gt;&lt;a href=&#34;#事业部总经理到集团高管&#34; class=&#34;headerlink&#34; title=&#34;事业部总经理到集团高管&#34;&gt;&lt;/a&gt;事业部总经理到集团高管&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;关键词：集团战略、新机会、选培事业部总经理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;晋升到集团高管后，脱离了具体某项业务。要学会&lt;strong&gt;从集团的角度&lt;/strong&gt;出发制定战略，辅导培训事业部总经理。具体体现在&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;和事业部领导班子保持交流，选拔和培养总经理&lt;/li&gt;
&lt;li&gt;评估各事业部的战略规划，批准它们的业务规划而不是亲自管理&lt;/li&gt;
&lt;li&gt;超越财务结果评价事业部总经理&lt;/li&gt;
&lt;li&gt;监督各业务部门奉行公司的价值观和各项政策&lt;/li&gt;
&lt;li&gt;在必要的时候使用兼并收购的方式补充业务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;集团高管还要能抽出时间发现行业里的潜在机会和新商机。&lt;/p&gt;
&lt;p&gt;一个合格的集团高管需要有下面的标准：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;业绩优异&lt;/li&gt;
&lt;li&gt;出色的战略能力&lt;/li&gt;
&lt;li&gt;有效的人才培养&lt;/li&gt;
&lt;li&gt;对客户满意充满激情&lt;/li&gt;
&lt;li&gt;敏锐的商业头脑&lt;/li&gt;
&lt;li&gt;愿意共享资源&lt;/li&gt;
&lt;li&gt;践行公司价值观&lt;/li&gt;
&lt;li&gt;关心公司成功&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;从集团高管到首席执行官&#34;&gt;&lt;a href=&#34;#从集团高管到首席执行官&#34; class=&#34;headerlink&#34; title=&#34;从集团高管到首席执行官&#34;&gt;&lt;/a&gt;从集团高管到首席执行官&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;关键词：可持续发展、执行力、组织能力培养、长期思想&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首席执行官受到各方的密切关注，不容出错。在领导力模型里面临下面一些挑战：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;平衡长短期利益，实现可持续发展&lt;/li&gt;
&lt;li&gt;设定公司发展的方向，承担风险，深思熟虑&lt;ul&gt;
&lt;li&gt;公司方向、行业变化、商业模式、竞争格局&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;培养组织能力，保证人才供给&lt;/li&gt;
&lt;li&gt;确保战略执行到位，对如何盈利有与生俱来的直觉&lt;ul&gt;
&lt;li&gt;我的表现如何&lt;/li&gt;
&lt;li&gt;我了解公司的情况么&lt;/li&gt;
&lt;li&gt;有向上反馈渠道么&lt;/li&gt;
&lt;li&gt;董事会履行自己授权么&lt;/li&gt;
&lt;li&gt;我的团队高效有活力么&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;处理好全球化和外部关系&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;培养首席执行官没有捷径，一个首席执行官需要经历领导力模型的大多数阶段，他的理想路径包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在核心业务部门的多个职位工作过&lt;/li&gt;
&lt;li&gt;有海外任职经历&lt;/li&gt;
&lt;li&gt;领导业务部门实现突破性增长&lt;/li&gt;
&lt;li&gt;领导新兴业务和振兴衰落业务&lt;/li&gt;
&lt;li&gt;主管过公司的人力资源&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;首席执行官的工作目标通常都需要&lt;strong&gt;较长的时间&lt;/strong&gt;才能逐步达成，工作理念上也要有所转变。&lt;/p&gt;
&lt;h2 id=&#34;诊断问题&#34;&gt;&lt;a href=&#34;#诊断问题&#34; class=&#34;headerlink&#34; title=&#34;诊断问题&#34;&gt;&lt;/a&gt;诊断问题&lt;/h2&gt;&lt;p&gt;在上面介绍完了整个领导力模型后，这里可以比照着整个模型，定期做整个组织的审视，很容易发现人员错误配置在某一层级的情况。通常因为在快速晋升的过程中，遗漏或仓促跳过了一些发展阶段，做事思路还没有转变。这会引起：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;虽然短期业务看着不错，对长期可持续发展却没有帮助&lt;/li&gt;
&lt;li&gt;越俎代庖和工作效率下降&lt;/li&gt;
&lt;li&gt;对员工职业发展不利&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在评估时，可以通过和个体以及个体的上下级沟通，判断在领导技能、时间管理、工作理念几方面是否和层级相匹配。&lt;/p&gt;
&lt;h2 id=&#34;改善业绩评估&#34;&gt;&lt;a href=&#34;#改善业绩评估&#34; class=&#34;headerlink&#34; title=&#34;改善业绩评估&#34;&gt;&lt;/a&gt;改善业绩评估&lt;/h2&gt;&lt;p&gt;在日常的绩效评估中，可以加入领导模型的能力评估。避免出现职责断裂或者重叠的情况。可以用圆圈标识一个员工的7项绩效内容期望。当达到&lt;strong&gt;全面绩效&lt;/strong&gt;时，可以考虑将他人名到一个新的领导岗位。每提升到一个新的领导层级，从会出现绩效缺口。在培训工作持续进行时后，培训对象会逐渐取得全面绩效。这个时候对其进行超常规能力的测试，如果结果表明候选人已做好准备，就可以继续升职。这个测试可以通过让同一层级的领导者组成团队，完成一项高度挑战性任务来实施。&lt;/p&gt;
&lt;h2 id=&#34;继任计划&#34;&gt;&lt;a href=&#34;#继任计划&#34; class=&#34;headerlink&#34; title=&#34;继任计划&#34;&gt;&lt;/a&gt;继任计划&lt;/h2&gt;&lt;p&gt;继任计划是指在各级领导梯队中培养高绩效人员，确保充足的人才储备。整体思路是关注&lt;strong&gt;绩效&lt;/strong&gt;和&lt;strong&gt;潜能&lt;/strong&gt;，适配公司的实际情况，定期审视领导梯队继任计划。&lt;/p&gt;
&lt;p&gt;潜能上分3档：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;转型潜能&lt;/strong&gt;：3-5年甚至更短时间可以从事下一层工作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;成长潜能&lt;/strong&gt;：不久可以从事同一层级的更重要工作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;熟练潜能&lt;/strong&gt;：可以更好完成当前层级的相同工作&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从潜能和绩效两个维度，可以划分出9类员工。针对不同方格内的员工，着重培养领导力和提升绩效。&lt;/p&gt;
&lt;p&gt;好的继任计划要求适用在所有业务和职能、贴合公司实际、可以公开讨论。&lt;/p&gt;
&lt;h2 id=&#34;梯队的潜在缺陷&#34;&gt;&lt;a href=&#34;#梯队的潜在缺陷&#34; class=&#34;headerlink&#34; title=&#34;梯队的潜在缺陷&#34;&gt;&lt;/a&gt;梯队的潜在缺陷&lt;/h2&gt;&lt;p&gt;领导梯队也有遇到问题的时候，通常可能来自下面这些情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选错人才&lt;ul&gt;
&lt;li&gt;在上一个层级做出成绩，不代表他的领导技能、时间管理、工作理念都已达到下一层级的要求&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;让表现不佳者在岗位停留太久&lt;ul&gt;
&lt;li&gt;判断一名管理者是否还依赖上一级的领导技能、时间管理、工作理念&lt;/li&gt;
&lt;li&gt;观察管理者直接下属的职业发展和业绩&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不善于倾听反馈&lt;ul&gt;
&lt;li&gt;开阔心胸&lt;/li&gt;
&lt;li&gt;选择性听取&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不善于定义工作&lt;ul&gt;
&lt;li&gt;明确责任边界&lt;/li&gt;
&lt;li&gt;对齐责任边界&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个组织能需要有一个领导力框架，它能给绩效评估标准，提供更多的讨论问题的角度。通常一个团队内缺乏坦诚也是缺陷即将出现的危险信号。&lt;/p&gt;
&lt;h2 id=&#34;职能主管发展路线&#34;&gt;&lt;a href=&#34;#职能主管发展路线&#34; class=&#34;headerlink&#34; title=&#34;职能主管发展路线&#34;&gt;&lt;/a&gt;职能主管发展路线&lt;/h2&gt;&lt;p&gt;除了上面提到的领导力模型之外，还有职能方向的支线，即从集团职能主管到企业职能主管。集团职能主管和事业部总经理很像，但又不太一样：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事业部总经理将智能战略纳入到整体业务计划中，但职能直观则将每一个事业部的职能战略纳入到集团整体的职能战略中&lt;/li&gt;
&lt;li&gt;两者都要有商业思维，职能主管也要从“我们能这么做么”转变到“我们这样做能赚钱么”&lt;/li&gt;
&lt;li&gt;职能主管通常同时向集团职能主管和事业部总经理负责，这需要他能灵活处理各种人群和利益关系，并且知道怎么妥协&lt;/li&gt;
&lt;li&gt;集团职能主管主要为集团高管提供咨询意见而不是产品和其他内容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作为集团职能主管，要避免出现下面的情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;给所有人承诺，却从不兑现&lt;ul&gt;
&lt;li&gt;集团职能主管要能够分解复杂关系，划清责任边界，获知业务优先级、自己优先级，最后做出果断的决定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;过度干涉职能部门经历的工作&lt;/li&gt;
&lt;li&gt;整天围着集团高管转&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;企业职能主管一般指CFO、CTO、COO、总法律顾问这些。他们的目的是将自己的职能和公司联系在一起，因此他们必须设定职能发展方向、学会服务整个公司而不仅是自己的职能、了解公司外部环境。要能满足下面一些要求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;商业竞争中如何发挥职能的支持获得竞争优势&lt;/li&gt;
&lt;li&gt;了解所在职能在业界的发展状况&lt;/li&gt;
&lt;li&gt;向集团高管提供所在职能领域或一般性领域的发展机会&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面是一些对于企业职能主管的发展建议：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;尽早获取专家对职能部门的建议&lt;/li&gt;
&lt;li&gt;和CEO和各层级关键领导对齐你的目标和计划&lt;/li&gt;
&lt;li&gt;定期和各层级部门交流&lt;/li&gt;
&lt;li&gt;学会管理时间&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;教练辅导&#34;&gt;&lt;a href=&#34;#教练辅导&#34; class=&#34;headerlink&#34; title=&#34;教练辅导&#34;&gt;&lt;/a&gt;教练辅导&lt;/h2&gt;&lt;p&gt;教练辅导即用一种富有激励的方式，将上面的领导力模型指引给员工或是管理者。可以通过一些问题确定此人的领导能力、时间管理和工作理念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;谈谈你的职业发展&lt;ul&gt;
&lt;li&gt;经历的每一个职务&lt;/li&gt;
&lt;li&gt;工作具体内容&lt;/li&gt;
&lt;li&gt;工作成就&lt;/li&gt;
&lt;li&gt;重大挑战&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;现在职位的工作&lt;ul&gt;
&lt;li&gt;面临的问题、挑战&lt;/li&gt;
&lt;li&gt;取得的成就&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;工作日程&lt;/li&gt;
&lt;li&gt;主要依靠的技能&lt;/li&gt;
&lt;li&gt;工作信念是什么&lt;/li&gt;
&lt;li&gt;职业抱负是什么&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有些时候，自己进行教练辅导会比聘用不专业的教练要更好。&lt;/p&gt;
&lt;h2 id=&#34;领导力模型惠及全员&#34;&gt;&lt;a href=&#34;#领导力模型惠及全员&#34; class=&#34;headerlink&#34; title=&#34;领导力模型惠及全员&#34;&gt;&lt;/a&gt;领导力模型惠及全员&lt;/h2&gt;&lt;p&gt;略&lt;/p&gt;
&lt;p&gt;&lt;em&gt;–END–&lt;/em&gt;&lt;/p&gt;
</content>
        <category term="读书笔记" />
        <category term="管理学" />
        <category term="领导力" />
        <category term="梯队" />
        <updated>2021-11-24T15:07:36.000Z</updated>
    </entry>
    <entry>
        <id>http://shenlvmeng.github.com/blog/2021/10/22/tour-to-jinan-and-qingdao/</id>
        <title>济南、青岛之行 —— 泉海之约</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2021/10/22/tour-to-jinan-and-qingdao/"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;流水账向絮叨文风，以纪念和嘉雯的第一次旅行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;序：出发！&#34;&gt;&lt;a href=&#34;#序：出发！&#34; class=&#34;headerlink&#34; title=&#34;序：出发！&#34;&gt;&lt;/a&gt;序：出发！&lt;/h2&gt;&lt;p&gt;国庆节的出游通常都要提前一个多月计划，不过这次出游计划却比较仓促。由于某人的身体原因，我们在节前数天才定下这趟我期待了好久的出游。这一方面倒是让我在选择目的地上省了心，有很多之前计划去的地方，要么是去不了，要么是回不来。最终剩下广州、济南+青岛、济南+天津几个选项。报给对象看后，确定了这次山东之行。&lt;/p&gt;
&lt;p&gt;既然定了地点，按我们的风格，三下五除二分工搞定了日程安排和机票住宿。对象继续赶工离谱需求，我回家当表哥伴郎。&lt;/p&gt;
&lt;h2 id=&#34;Day-1：小吃&#34;&gt;&lt;a href=&#34;#Day-1：小吃&#34; class=&#34;headerlink&#34; title=&#34;Day 1：小吃&#34;&gt;&lt;/a&gt;Day 1：小吃&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;宽厚里、泉城广场&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在表哥婚礼的第二天，我早8点从家里出发抵达遥墙机场，对象下午从上海出发抵达济南西站。本以为我会晚很多，没想到机场大巴一路绿灯甚是给力，我们干脆约在济南站见面。大巴到济南站时已近黄昏，“易立竞老师”还给我贴心地留了个麦麦脆汁鸡，啊这就是爱情。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/21/5yWQ9f.jpg&#34; alt=&#34;济南站&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/21/5yWnAI.jpg&#34; alt=&#34;易立竞老师&#34;&gt;&lt;/p&gt;
&lt;p&gt;废话不多说，我们打车回酒店修整后，出发前往宽厚里。这是济南远近闻名的小吃步行街。我们一路骑车过来，正是晚上的黄金时间，路上交通拥堵异常（后来发现白天也拥堵）。小吃街也是人声鼎沸，摩肩接踵，每个看起来像是网红店的都排着老长的队伍。我俩大致逛了逛，小吃也没太多新意，奶茶店里，沪上阿姨、蜜雪冰城、冰雪时代几家尤其多。根据大众点评的推荐，我们排了个奶奶的美食，脆皮肠还不错。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/21/5yWuNt.jpg&#34; alt=&#34;宽厚里&#34;&gt;&lt;/p&gt;
&lt;p&gt;也许是垃圾桶摆放不合理，街头的路面很脏，观感比较差。我们最终在一家鲁菜馆解决了晚饭。因为去得比较晚，经典的鲤鱼和大肠已经没了。剩下的菜里，鱼和虾都是酸甜口的，似乎鲁菜的口味都比较浓郁。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/21/5yWK4P.jpg&#34; alt=&#34;晚饭掠影&#34;&gt;&lt;/p&gt;
&lt;p&gt;饭后已近10点，我们从泉城广场打道回府，夜里的广场端详不出明细，都是踏上归途的人。和对象在鸟屋旁一番神来般的交流，观赏鸽子的同时，不巧不远处有夫妻吵架。没待多久，我俩也知趣溜走。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/21/5yWeHA.jpg&#34; alt=&#34;鸟屋&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Day-2：公园&#34;&gt;&lt;a href=&#34;#Day-2：公园&#34; class=&#34;headerlink&#34; title=&#34;Day 2：公园&#34;&gt;&lt;/a&gt;Day 2：公园&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;大明湖、曲水亭街、芙蓉街、解放阁、黑虎泉公园、趵突泉&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;尽管地铁没那么方便，但是济南的核心景点距离都很近，可以骑车方便来往，公园基本上都无需门票，相当良心还是要夸一下的。由于距离酒店较近，我们从大明湖开始逛，这里更像一个大型的市民公园，无需门票。好在公园也够大，人流也就稀释得没那么密集，在国庆节期间体验还不错。湖面开阔，有零星游船。四周矗立着不少高楼，应和着绿树青天，有陆家嘴、曼哈顿公园那味儿了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/21/5yWl38.jpg&#34; alt=&#34;大明湖-1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/21/5yW1gS.jpg&#34; alt=&#34;大明湖-2&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/21/5yW3jg.jpg&#34; alt=&#34;大明湖-3&#34;&gt;&lt;/p&gt;
&lt;p&gt;只可惜天色多云，要不风景只会更棒。兜圈下来路遇超然楼，考虑门票价格后，弃之继续前行。最后从南门出来，前往南边的百花洲街区。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/21/5yWJBj.jpg&#34; alt=&#34;大明湖碑&#34;&gt;&lt;/p&gt;
&lt;p&gt;从南门正对着的曲水亭街直走是大路，我们随便抄了条小道，迷迷糊糊摸到了临近的芙蓉街，很类似宽厚里，北京的南锣鼓巷，街边的美食和吆喝声让人头攒动的接到更加热闹。抵抗不住诱惑，我俩试了个豆腐和滕州菜煎饼，嗯……果然没太出彩。不过，在这么拥挤的环境下，路面卫生居然出奇得还行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/21/5yWGuQ.jpg&#34; alt=&#34;小巷&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/21/5yWYHs.jpg&#34; alt=&#34;豆腐&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/21/5yWNEn.jpg&#34; alt=&#34;滕州菜煎饼&#34;&gt;&lt;/p&gt;
&lt;p&gt;从芙蓉街绕回曲水亭街后，我俩继续骑车，抄了一些小道后，我们到达临近宽厚里的解放阁。这里也无需门票，拾阶而上，在阁顶能俯瞰内城东南角附近。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/21/5yWUNq.jpg&#34; alt=&#34;小巷-1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/21/5yWwCV.jpg&#34; alt=&#34;解放阁-1&#34;&gt;&lt;/p&gt;
&lt;p&gt;转瞬间，狂风大作，暴雨倾盆。幸好我俩带了伞。雨后的风光似乎被蒙上了一层灰，很是朦胧。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/21/5yWa40.jpg&#34; alt=&#34;解放阁-2&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/21/5yW03T.jpg&#34; alt=&#34;解放阁-3&#34;&gt;&lt;/p&gt;
&lt;p&gt;不远处，居然有一个露天泳池，在雨中似乎并没有受到积极性的打击。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/21/5yWBgU.jpg&#34; alt=&#34;露天泳池&#34;&gt;&lt;/p&gt;
&lt;p&gt;解放阁下便是黑虎泉公园，据说泉水来自地下水，可以直接饮用。同样是不要门票，这里人也不少。我们来到才发现，这里其实不只黑虎泉一个泉，有不少泉眼，涌出的水注入到城河。这水清冽无比，以至于里面连小鱼都没有，若不是有气泡不间断珍珠般涌出，水面似乎像静止了一样。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/21/5yWDvF.jpg&#34; alt=&#34;白石泉&#34;&gt;&lt;/p&gt;
&lt;p&gt;公园内水量最大当然也是最出名的莫过于黑虎泉。对于我俩这种从未见过泉水的人来说，可谓是大开眼界叹为观止。原来泉水还能涌出这么大的量，地下水这么多的么。泉边专门设有接水的地方，我尝了点，比矿泉水淡一些，又比白开水多一点味道。这里吸引了不少游客驻足。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/21/5yWyDJ.jpg&#34; alt=&#34;黑虎泉&#34;&gt;&lt;/p&gt;
&lt;p&gt;当然了，这里的两个题字也是妙极。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/21/5yW2U1.jpg&#34; alt=&#34;黑虎泉题字-1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/21/5yWgER.jpg&#34; alt=&#34;黑虎泉题字-2&#34;&gt;&lt;/p&gt;
&lt;p&gt;后续泉眼大同小异，人流不多，这里不再赘述。从公园出来正好又回到昨日的泉城广场，我俩又是一路骑车来到内城西南角的趵突泉，路上得以看到白天的泉城广场的模样。趵突泉需要40元门票，可以美团网上订票，可这并没有阻挡国庆节热情满满的游客。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/21/5yW6b9.jpg&#34; alt=&#34;趵突泉公园&#34;&gt;&lt;/p&gt;
&lt;p&gt;趵突泉公园并不止有趵突泉这一头牌，它也是一组泉眼。这一点和黑虎泉公园差不多。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/21/5yWR4x.jpg&#34; alt=&#34;漱玉泉&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/21/5yWfC6.jpg&#34; alt=&#34;卧牛泉&#34;&gt;&lt;/p&gt;
&lt;p&gt;经过黑虎泉的洗礼，在见到趵突泉之前，我很好奇它是什么模样，可以如此出名夺目。不过见到后，不禁感慨还是自己年轻了。三眼泉水，左右两股更大，中间一股略小，但整体水量充沛。在平静的湖面上激起湍流，水质清澈见底，真乃奇观。直令人挪不开脚步。我俩驻足了有近半个小时。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/21/5yWh8K.jpg&#34; alt=&#34;趵突泉&#34;&gt;&lt;/p&gt;
&lt;p&gt;泉水涌出的水汇聚后，流入到护城河中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/21/5yW4gO.jpg&#34; alt=&#34;泉水&#34;&gt;&lt;/p&gt;
&lt;p&gt;天色已晚，我俩骑车去了一家潮汕砂锅粥店，结束了一天密集的美景洗礼。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/21/5yW5vD.jpg&#34; alt=&#34;干炒牛河&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Day-3：⛰和🍺&#34;&gt;&lt;a href=&#34;#Day-3：⛰和🍺&#34; class=&#34;headerlink&#34; title=&#34;Day 3：⛰和🍺&#34;&gt;&lt;/a&gt;Day 3：⛰和🍺&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;千佛山、老谢野馄饨、小褚烧烤&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因为时间有限，这一天的旅程里，我们没有安排较远的山东博物馆和美术馆。决定在城南往事吃了午饭后去千佛山看看。午饭是正宗的鲁菜，我俩根据大众点评的推荐，里面下面这些：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;糖醋鲤鱼&lt;/li&gt;
&lt;li&gt;九转大肠&lt;/li&gt;
&lt;li&gt;油旋&lt;/li&gt;
&lt;li&gt;醋熘腰花&lt;/li&gt;
&lt;li&gt;水煎包&lt;/li&gt;
&lt;li&gt;老酸奶&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基本没有踩雷，口味都较浓郁，适合稍重口一点的人吃。鲤鱼是这家店的招牌菜，店员还会帮忙拆鱼。油旋很香，不过分量也不少。酸奶里不知放了什么，口感十分特别，介于酸奶和老酸奶之间，很爽口。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/22/5yoxx0.jpg&#34; alt=&#34;城南往事-1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/22/5yov2q.jpg&#34; alt=&#34;城南往事-2&#34;&gt;&lt;/p&gt;
&lt;p&gt;解决午饭后，自然又是骑行去千佛山。爬山的前半程较缓，让我对它的高度产生了一些误会。根据我的观察，山应该得名于里诸多的佛像。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/22/5yojGn.jpg&#34; alt=&#34;千佛山-1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/22/5yTSMV.jpg&#34; alt=&#34;千佛山-2&#34;&gt;&lt;/p&gt;
&lt;p&gt;在历山院的半山处，可以俯瞰城区景观。经过一个名不副实的历山飞瀑后，再爬一段陡路就可以来到山顶制高点，这里风势略大，但是视野极好。不仅能尽览城区，起伏的丘陵也是一览无余。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/22/5yoXPs.jpg&#34; alt=&#34;历山院&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/22/5yTprT.jpg&#34; alt=&#34;俯瞰-1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/22/5yT9qU.jpg&#34; alt=&#34;俯瞰-2&#34;&gt;&lt;/p&gt;
&lt;p&gt;天色不妙，我俩没在山顶待太久便下山打道回府，收拾行李准备前往青岛。在济南站，还吃到了满大街到处都有的超意兴，自助选餐，找到了大学打饭的感觉。顺便弥补了之前没有吃到把子肉的遗憾，不过，吃到第一口便发现，“不吃很遗憾，吃了更遗憾”。很油腻，我和对象俩人吃了一口不到。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/22/5yTPZF.jpg&#34; alt=&#34;超意兴&#34;&gt;&lt;/p&gt;
&lt;p&gt;经过2个小时的车程，我们在青岛站下车。此时已近10点，我俩直接坐地铁来到江西路旁的酒店修整。稍微调整过后，还是决定出门吃个夜宵。既然是夜宵，又是在青岛。那当然是烧烤+啤酒没跑了。先暂时把体重的事情放一边。在大众点评一番寻找，我做了这个旅程最后悔的决定，去老谢野馄饨吃烧烤。这家店在大众点评上颇为火爆，他家的野馄饨据说美味且实惠。从下车开始，看到店门口茫茫多的人，不妙的兆头已经萌发。但“来都来了”，我俩还是硬着头皮尝试进店点餐。店内更是混乱，柱子上贴着需要自己寻找座位的字样，顾客非常多。坐下来吃的是少数，更多是坐下来等上串的，还要不少站在桌边等吃完的。画面甚是壮观。由于服务效率太低，管理也不好，桌面和地面上残骸不少。再加上有不知如何点餐的新人（就譬如我们），场面一片混乱。我抬手看了下表，难以置信这是晚上11点。&lt;/p&gt;
&lt;p&gt;店里馄饨需要点，烤串需要自己挑选然后交给前台烤，啤酒也要自己打。店员很冷酷地告诉我们，目前烤串要等1个半小时，还好刚刚的糟糕情况给了我俩心理准备。一顿摸索，我俩来到了地下一层，这里稍微好点（可能因为有人不知如何下来），只是有不散的烟味。我们扫了码，和人拼桌，放弃了烤串，准备吃个馄饨就走。大概40分钟后，在主动抱怨下，终于吃上珍贵的12元馄饨。此时和我们拼桌，比我们还晚来的情侣已经吃完走人。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/22/5yTia4.jpg&#34; alt=&#34;老谢野馄饨&#34;&gt;&lt;/p&gt;
&lt;p&gt;馄饨汤的胡椒味很重，皮和馅儿很棒，很对我口味。不过对比漫长的等待和糟糕的服务质量，还是不值的。边吃，我们边寻找备选吃点喝点。结果发现巧合的是，这里距啤酒博物馆很近。最终在大多数已经关门的烤串店里，找到幸存的小褚烧烤。这家店离青岛啤酒厂的大门很近。我们要了一扎原浆。原浆未经过多的防腐手段，保质期比较短，因此也保留了更多发酵的菌群，朴实和清甜的口感未经修饰，是我喝过最棒的啤酒了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/22/5yTFIJ.jpg&#34; alt=&#34;青岛原浆&#34;&gt;&lt;/p&gt;
&lt;p&gt;兴许是老谢的对比，兴许是真饿了，烤串也比我在北京吃的更棒。也算是一天的慰藉。酒足饭饱已经是第二天，幸在很好打车，回到酒店，对象倒头就睡。我洗罢衣服也睡下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/22/5yTAi9.jpg&#34; alt=&#34;小褚烤串&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Day-4：海和丘陵&#34;&gt;&lt;a href=&#34;#Day-4：海和丘陵&#34; class=&#34;headerlink&#34; title=&#34;Day 4：海和丘陵&#34;&gt;&lt;/a&gt;Day 4：海和丘陵&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;开海海鲜、太平角、海水浴场、八大关、信号山、大学路鱼山路、小鱼山、五四广场、本家韩国菜&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;依旧是多云转阴的一天，我们甚至起得更晚了。出门时已近中午，我们干脆直奔五四广场的万象城。好在从江西路坐地铁去五四广场还比较方便。当初看酒店的时候，青岛因为旅游的属性，价格整体就要比济南高出一截。五四广场附近的就更离谱了。当然要是你财力雄厚，当然还是住在五四广场附近更加方便。&lt;/p&gt;
&lt;p&gt;到达万象城的时候正是饭点，好在这里不像北京吃饭那么卷，大国庆的排队的人也还能接受。我们在溜冰场和附近的小吃城逛了下就到了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/22/5yTVR1.jpg&#34; alt=&#34;万象城&#34;&gt;&lt;/p&gt;
&lt;p&gt;来青岛自然要吃海鲜，我和对象错过了最好的季节，但也还是有的吃的。我俩事先做了下功课，根据我们的喜好要了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;辣炒小鲍鱼&lt;/li&gt;
&lt;li&gt;辣炒蛤蜊&lt;/li&gt;
&lt;li&gt;海鲜水饺全家福&lt;/li&gt;
&lt;li&gt;锅烧碟鱼头&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这几个算是这家的招牌了，剩下还有海参拌饭，捶山茄啥的就无福消享了。不愧是当地人推荐的店，除了鱼头，其他几个我觉得都很棒，鲍鱼很入味，蛤蜊的性价比简直超神。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/22/5yTEGR.jpg&#34; alt=&#34;辣炒小鲍鱼&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/22/5yTmM6.jpg&#34; alt=&#34;辣炒蛤蜊&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/22/5yTZxx.jpg&#34; alt=&#34;水饺全家福&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/22/5yTuqO.jpg&#34; alt=&#34;锅烧碟鱼头&#34;&gt;&lt;/p&gt;
&lt;p&gt;饭后坐两站地铁来到太平角，就可以沿着海岸线感受青岛的魅力了。沿海的栈道非常长，能够走好几天。海景自然也是赏心悦目，只可惜天色一片苍白。若是暑假过来，肯定是另一番美景。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/22/5yTnsK.jpg&#34; alt=&#34;太平角&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/22/5yTMZD.jpg&#34; alt=&#34;海景&#34;&gt;&lt;/p&gt;
&lt;p&gt;在和对象切磋过（基本是碾压）打水漂技巧后，我们顺路看了下附近八大关街区，街区较小，但是恰似青岛的缩影，上下坡不断，充分展示出丘陵的地形。这可能也是青岛没有共享单车的一大原因吧（电单车也没有）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/22/5yT3id.jpg&#34; alt=&#34;八大关-1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/22/5yTQde.jpg&#34; alt=&#34;八大关-2&#34;&gt;&lt;/p&gt;
&lt;p&gt;回到第二海水浴场的路上，偶遇的喵和花挽救了对八大关的失望。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/22/5yTlIH.jpg&#34; alt=&#34;吸猫&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/22/5yT8JA.jpg&#34; alt=&#34;花-1&#34;&gt;&lt;/p&gt;
&lt;p&gt;来海边除了打水漂，免不了还有戏水环节。对象身先士卒冲了下去。11月的海水，似乎也并没有那么刺骨。我还趁机尝了下海水。啊呸，果然是咸的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/22/5yTGRI.jpg&#34; alt=&#34;戏水-1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/22/5yTJzt.jpg&#34; alt=&#34;戏水-2&#34;&gt;&lt;/p&gt;
&lt;p&gt;时间有限，我们继续向第一海水浴场和信号山走去。一路可以轻易看到海天一线的景观，实在是悦目极了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/22/5yTtQP.jpg&#34; alt=&#34;海景-1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/22/5yTNsf.jpg&#34; alt=&#34;海景-2&#34;&gt;&lt;/p&gt;
&lt;p&gt;目前不是夏天，我们简单穿过海水浴场，开始了爬坡的旅程。在青岛旅游似乎总少不了上上下下。去信号山的一路也是如此，还很神奇的路遇大学路鱼山路的网红墙，不过除了俩路牌，我实在想不到可以网红的点。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/22/5yTUL8.jpg&#34; alt=&#34;鱼山路&#34;&gt;&lt;/p&gt;
&lt;p&gt;信号山不大，也无需门票。山顶可以俯瞰红瓦黄墙，若再有蓝天晚霞那就太美了，很值得一来。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/22/5yTdeS.jpg&#34; alt=&#34;信号山-1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/22/5yTwdg.jpg&#34; alt=&#34;信号山-2&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/22/5yT0oQ.jpg&#34; alt=&#34;信号山-3&#34;&gt;&lt;/p&gt;
&lt;p&gt;没过多久，天色变暗，气温下来。我们放弃了后续安排，下了山，计划坐地铁去五四广场。路上还看见了神奇的红色光环，喝到了中药味的崂山可乐。在冰冻加持下，似乎也没有那么暗黑。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/22/561JyQ.jpg&#34; alt=&#34;光环&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/22/561Uwn.jpg&#34; alt=&#34;崂山可乐&#34;&gt;&lt;/p&gt;
&lt;p&gt;晚饭依旧是在万象城解决的。吃的韩餐，青岛的韩国人挺多，韩式料理比较正宗。这个本家韩国料理也是当地朋友推荐的。石锅拌饭和冷面都还不错。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/22/561aoq.jpg&#34; alt=&#34;本家&#34;&gt;&lt;/p&gt;
&lt;p&gt;饭后，五四广场是绝佳选择，这里是欣赏灯光秀最佳地点，诸多高楼的灯光拼凑出歌唱祖国的图样，红得耀眼。广场上，小商贩和城管玩着捉迷藏。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/22/561YLj.jpg&#34; alt=&#34;五四广场&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/22/561Nes.jpg&#34; alt=&#34;夜景-1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/10/22/K4vaoQyPkIhRJn3.jpg&#34; alt=&#34;夜景-2&#34;&gt;&lt;/p&gt;
&lt;p&gt;五四广场西边还有个音乐广场，里面有些或好或惨不忍睹的素人演唱。晚10点，我俩来到网吧结束了忙碌的一天。战斗很愉悦，她也是。&lt;/p&gt;
&lt;h2 id=&#34;Day-5：海其二&#34;&gt;&lt;a href=&#34;#Day-5：海其二&#34; class=&#34;headerlink&#34; title=&#34;Day 5：海其二&#34;&gt;&lt;/a&gt;Day 5：海其二&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;鲁迅公园、琴屿路、小青岛、栈桥、台东步行街、小褚烧烤&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;前一日行程受阻外加赖床，我们第二天果断放弃崂山，继续海边深度游。大概又是12点出门，我们这次的目的地是好美味馄饨店，尝试了这里的皮蛋、蛋黄馅儿馄饨以及微波烤串，还有某人从未吃过的火烧。馄饨和串的形式挺有意思，味道的话差强人意。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/10/22/JwojXgHZlPFfOzT.jpg&#34; alt=&#34;好美味馄饨&#34;&gt;&lt;/p&gt;
&lt;p&gt;青岛城市里没有共享单车，我俩只能耐心地走到地铁站，再做地铁到人民会堂。在鲁迅公园和琴屿路的交接处再次与海重逢。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/10/22/vWlUjdDBGCtZbR4.jpg&#34; alt=&#34;琴屿路&#34;&gt;&lt;/p&gt;
&lt;p&gt;涨潮速度比想象中快，我俩险些被困在礁石上，对象还湿了鞋。附近的店里，洞洞鞋倒是不少，我挑了双明黄色的，还有小熊(๑¯㉨¯๑)logo，挺好看。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/10/22/JTqh3CAinPKfoWL.jpg&#34; alt=&#34;涨潮&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/10/22/KU1kuvaMGeYn3x6.jpg&#34; alt=&#34;礁石&#34;&gt;&lt;/p&gt;
&lt;p&gt;天空阴云密布，海面也不平静。远处能看到搭载客人的游轮。琴屿路上，若是晴空万里，可能会更加好点看。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/10/22/2zJXQTIkUPH47sd.jpg&#34; alt=&#34;游轮&#34;&gt;&lt;/p&gt;
&lt;p&gt;沿着琴屿路走到尽头，可以到达小青岛景区，小青岛的确是个岛，的确很小，也的确很绿。就是下图的左侧部分。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/10/22/9Yax3ZjzA7h2suV.jpg&#34; alt=&#34;小青岛远眺&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们上岛时，天色已经不太作美。远远地，能看到我们的下个目的地——栈桥。同样的，阴天稍降低了些风景的美感。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/10/22/uPZj8JimdOUXVBS.jpg&#34; alt=&#34;小青岛-1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/10/22/kr8YRzGJvQjU39g.jpg&#34; alt=&#34;小青岛-2&#34;&gt;&lt;/p&gt;
&lt;p&gt;还未到栈桥雨就下了起来，因为下雨栈桥上人不算太多。远远地，能回望到小青岛。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/10/22/MvTLEFWPmwr1sRS.jpg&#34; alt=&#34;栈桥&#34;&gt;&lt;/p&gt;
&lt;p&gt;海边的旅程到栈桥就基本到了尾声，我们在M记稍作休整，乘地铁前往奥帆中心。从这里可以获得和五四广场不一样的观赏夜景的视角。高楼灯光秀似乎也更对齐了一点。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/10/22/FL1TDJQUpl3RWSO.jpg&#34; alt=&#34;奥帆中心-1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/10/22/5913zo6LMd7nxES.jpg&#34; alt=&#34;奥帆中心-2&#34;&gt;&lt;/p&gt;
&lt;p&gt;从奥帆中心离开，我们慕名前往台东步行街。也有幸目睹了十分下沉的万达广场，找到了本世纪初的感觉。这块步行街的氛围和价格都很亲民，就像回到了老家一样。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/10/22/BiYxcr67KmQNPFA.jpg&#34; alt=&#34;台东步行街&#34;&gt;&lt;/p&gt;
&lt;p&gt;今日的旅程又是以小褚烧烤作为结尾，虽没了第一天那么惊艳，但老板认出了我们是前天来过的，给了我们意外的优惠，还是很惊喜的。啤酒博物馆门外的啤酒街霓虹闪烁，也许这才有资格叫做灯红酒绿吧。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/10/22/AYZB9wWXuLS21Qq.jpg&#34; alt=&#34;啤酒街&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Day-6：尾声&#34;&gt;&lt;a href=&#34;#Day-6：尾声&#34; class=&#34;headerlink&#34; title=&#34;Day 6：尾声&#34;&gt;&lt;/a&gt;Day 6：尾声&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;失望的黄焖鸡&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由于距离和赖床的双重作用，我们放弃了啤酒博物馆的日程，用黄焖鸡来为第一次一起旅行画上句号。最终在大幅降温前一同离开了青岛。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/10/22/ZwePkDrnpNWj2xh.jpg&#34; alt=&#34;自拍&#34;&gt;&lt;/p&gt;
&lt;p&gt;之前听人说，“情侣两人一同长途旅行一次，如果不分手，那么他们一定是真爱”。因为在计划阶段的行事风格，以及旅行途中的生活观念、饮食习惯、兴趣爱好等都是未来同居生活的小型预演，可以直接看出两个人的磨合程度。回头看，一起旅行的这些天，我们克服了一些困难，放弃了一些计划，也遇到了一些惊喜。尽管之前，我俩号称合体的晴天娃娃，这趟旅程却都是阴天和多云。不过问题不大，至少心情是漂亮的。相信这会是一个不错的开始，期待下次一同骑车长途旅行。&lt;/p&gt;
</content>
        <category term="攻略" />
        <category term="随笔" />
        <category term="美食" />
        <category term="青岛" />
        <category term="济南" />
        <category term="山东" />
        <updated>2021-10-22T04:33:39.000Z</updated>
    </entry>
    <entry>
        <id>http://shenlvmeng.github.com/blog/2021/10/20/taihu-lark-riding/</id>
        <title>环太湖骑记</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2021/10/20/taihu-lark-riding/"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;经历就会有惊喜&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;序：启程&#34;&gt;&lt;a href=&#34;#序：启程&#34; class=&#34;headerlink&#34; title=&#34;序：启程&#34;&gt;&lt;/a&gt;序：启程&lt;/h2&gt;&lt;p&gt;自上次&lt;a href=&#34;https://shenlvmeng.github.io/blog/2020/10/06/tour-to-qinghai-lake/&#34;&gt;青海湖长途骑行&lt;/a&gt;，已经过去1年。这1年里发生了许多计划之外的事情，我优化了旧的喜德盛山地，拥有了新的闪电公路车，追求更佳的骑行体验。我减慢了更博文和读新书的频率，暂停了拉琴训练，腾出时间去追求人生的下一阶段，最后有惊无险最后遇到吕嘉雯，就像是老天对我一直以来坦诚相待的回报。扯远了，说回来，和&lt;a href=&#34;https://feichashao.com/travels/&#34;&gt;基友&lt;/a&gt;约定的一年一次长途骑行还是继续。我们在7、8月份的骑行中就约定好大致的骑行目的地（江南沿海）和时间（中秋节）。青海湖骑行之后，我们患上了补给不足恐惧症，基友最终选定太湖，也是考虑到环湖下来都是大城市带来的优越体验。事后证明，这种安排让这次骑行带上了更多旅行的感觉。&lt;/p&gt;
&lt;h2 id=&#34;Day-1-北京-gt-苏州&#34;&gt;&lt;a href=&#34;#Day-1-北京-gt-苏州&#34; class=&#34;headerlink&#34; title=&#34;Day 1 北京 -&amp;gt; 苏州&#34;&gt;&lt;/a&gt;Day 1 北京 -&amp;gt; 苏州&lt;/h2&gt;&lt;p&gt;这次出发的时间碰巧赶上双减政策，让骑行得以宽裕地进行。只可惜对象要回乡下老家没能参与。我们选在中秋前最后一个工作日的晚上，做卧铺去苏州。&lt;/p&gt;
&lt;p&gt;火车一大早到达苏州，我们住的酒店在&lt;strong&gt;观前街&lt;/strong&gt;地区，算是苏州一个传统的购物步行街。7点多的步行街还没有什么人烟。所谓观前街，在步行街的核心地带有一个玄妙观。我们放下行李，在观旁的M记吃了顿早饭，作为旅途的第一顿餐食。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BEa8K.jpg&#34; alt=&#34;观旁边的M记&#34;&gt;&lt;/p&gt;
&lt;p&gt;从观前街向东走过一个街区，可以到达&lt;strong&gt;平江路&lt;/strong&gt;。在没那么商业化的角落，还是能感受到江南水乡的秀气。小桥流水，白墙黛瓦，一叶扁舟，绿柳蓊郁。我们在街巷中随意穿梭，故意做两只无头苍蝇。还无意中捕捉到好几家之前在小红书上看到的网红店。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BEBKe.jpg&#34; alt=&#34;平江路-1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BEwvD.jpg&#34; alt=&#34;咖啡店&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们来的时间也很巧，上午的时候路上人还不多，气温也很适宜。可以很舒服地慢慢散步扯淡。不得不说，小河的水利治理还挺不错，很少见到垃圾，水质也挺不错。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BEdgO.jpg&#34; alt=&#34;平江路-2&#34;&gt;&lt;/p&gt;
&lt;p&gt;逛完城墙博物馆，我们兜了一圈又回到观前街，开启游客打卡模式，尝试了秃油黄面和三虾面，还有特色绿豆汤。面的口感还不错，很契合我喜欢吃细面的偏好。面口味偏淡，一碗100+，还不错但没到惊艳的地步。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BEUC6.jpg&#34; alt=&#34;秃油黄面&#34;&gt;&lt;/p&gt;
&lt;p&gt;绿豆汤着实让人耳目一新，新颖的薄荷味配合冰水的温度让人感觉像是在喝漱口水。整体味道就是糖水口。基友没能坚持喝完，不怪他。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BEDDH.jpg&#34; alt=&#34;绿豆汤&#34;&gt;&lt;/p&gt;
&lt;p&gt;在酒店稍作休整，我们继续启程，前往金鸡湖旁的国际博览园区。出地铁时，刚好赶上看夕阳的最佳时机。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BErbd.jpg&#34; alt=&#34;落日&#34;&gt;&lt;/p&gt;
&lt;p&gt;入夜后，这边商业区的风景要更为迷人。在诚品书店的屋顶，已近中秋的月亮分外亮眼。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BEyVA.jpg&#34; alt=&#34;诚品屋顶的月亮&#34;&gt;&lt;/p&gt;
&lt;p&gt;当然，之前就有所耳闻的&lt;strong&gt;东方之门&lt;/strong&gt;就更要打卡了，站在裤裆底下拍照的感觉还挺好玩。时间有限，&lt;strong&gt;山塘街&lt;/strong&gt;我们最终没有去，算是小小的一个遗憾。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BEc5t.jpg&#34; alt=&#34;东方之门&#34;&gt;&lt;/p&gt;
&lt;p&gt;回到酒店，时间大概是9点多，基友回了房间。我去附近一个网鱼网咖坐了会儿，居然发现以前还剩了30多元没用完，居然还有意外之财，真棒！&lt;/p&gt;
&lt;h2 id=&#34;Day-2-苏州-gt-无锡&#34;&gt;&lt;a href=&#34;#Day-2-苏州-gt-无锡&#34; class=&#34;headerlink&#34; title=&#34;Day 2 苏州 -&amp;gt; 无锡&#34;&gt;&lt;/a&gt;Day 2 苏州 -&amp;gt; 无锡&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;晒伤程度：0%&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;骑行的起点从湖边的一个国际青年旅社开始，一天100元，只有一种山地车可以选择，不提供驼包和车锁。可以肉眼看出的不专业。奈何太湖这边没找到其他像样的租车行，且湖边本来就离市区较远。我俩也没挑剔太多。付好500元押金，我们从环太湖大道出发。&lt;/p&gt;
&lt;p&gt;天色不是很好，初到湖边还是比较有新鲜感的，微风吹过，吹散了骑行身上的燥热，还挺舒服。没想到，这也是这几天唯一逃过晒伤的一次。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BE6UI.jpg&#34; alt=&#34;环太湖大道-1&#34;&gt;&lt;/p&gt;
&lt;p&gt;和青海湖边上的环湖东路不同，环太湖大道名不虚传，果然是十分贴近湖面，有些路段甚至直接修在湖面上。搭配着青山小河，景色妙绝。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BE2PP.jpg&#34; alt=&#34;环太湖大道-2&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BER8f.jpg&#34; alt=&#34;环太湖大道-3&#34;&gt;&lt;/p&gt;
&lt;p&gt;简单在太湖湿地公园旁的农家乐吃过午饭，继续出发前往太湖大道，一路依旧在湖边前进。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BEfxS.jpg&#34; alt=&#34;太湖-1&#34;&gt;&lt;/p&gt;
&lt;p&gt;快骑到无锡边界时，还能看到头顶的飞机。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BEW28.jpg&#34; alt=&#34;无锡的飞机&#34;&gt;&lt;/p&gt;
&lt;p&gt;经过一座跨河的桥，我们进入无锡市。远离了太湖，但是再次感受到令人安心的城市气息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BE5rQ.jpg&#34; alt=&#34;市界&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BE4Kg.jpg&#34; alt=&#34;夕阳路&#34;&gt;&lt;/p&gt;
&lt;p&gt;最终沿着具区路骑行20公里，我们歇脚在&lt;strong&gt;江南大学&lt;/strong&gt;旁的宜必思。简单地更换衣物后，正是晚饭时间，我们坐地铁进入城区，化身半日游的游客。在无夕小笼包店里简单地恰了心心念念的蟹粉小笼包和传说中的刀鱼馄饨后，我们来到小红书告诉我们最繁华的&lt;strong&gt;南长街&lt;/strong&gt;和&lt;strong&gt;南禅寺&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BEIbj.jpg&#34; alt=&#34;蟹粉小笼包 &amp;amp; 刀鱼馄饨&#34;&gt;&lt;/p&gt;
&lt;p&gt;类似的河，类似的巷，也许是因为门店的格调问题，或是路面修缮太过人工，我总觉得没有平江路来的那么自然和和谐。宽阔笔直的街道和河流，让它和之前在丽江大研古镇的旅行体验也有差距。当然热闹还是热闹的，也能勉强感受到江南小城的意味。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BETVs.jpg&#34; alt=&#34;南长街-1&#34;&gt;&lt;/p&gt;
&lt;p&gt;当然，中秋的月亮还是很不错的。在南禅寺大概逛了逛，我们打道回府，无锡的地铁线路相对比较简单，可以乘坐1号线直达。和苏州地铁一样，也许是人口不多，在中秋佳节的黄金时间，地铁里也能轻松找到位置，乘坐体验极佳，推荐地铁出行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BE7an.jpg&#34; alt=&#34;南长街-3&#34;&gt;&lt;/p&gt;
&lt;p&gt;回到酒店，烘干好的衣服也好了。对比去年的青海湖骑行，体验好了太多。我们简单收拾下，便带着疲惫睡下。&lt;/p&gt;
&lt;h2 id=&#34;Day-3-无锡-gt-宜兴&#34;&gt;&lt;a href=&#34;#Day-3-无锡-gt-宜兴&#34; class=&#34;headerlink&#34; title=&#34;Day 3 无锡 -&amp;gt; 宜兴&#34;&gt;&lt;/a&gt;Day 3 无锡 -&amp;gt; 宜兴&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;晒伤程度：80%&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第二日天气好了太多，令人心情愉悦，再加上前日的阴天，让我忘记了关键的防晒。为悲剧晒伤埋下了伏笔。我们从江南大学旁的缘溪道出发，沿着高浪西路上山水东路便开始了晒足一天的旅程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BEH5q.jpg&#34; alt=&#34;江南大学-1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BEqP0.jpg&#34; alt=&#34;江南大学-2&#34;&gt;&lt;/p&gt;
&lt;p&gt;路线擦过无锡城区西南边缘，一路湖水树林，路况不错，风景更棒，尤其在&lt;strong&gt;鼋头渚&lt;/strong&gt;附近。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BEO2T.jpg&#34; alt=&#34;鼋头渚&#34;&gt;&lt;/p&gt;
&lt;p&gt;在环湖路锦园路交叉口，沿锦园路骑行可以获得更好的骑行风景。贴着湖边，有一个华东疗养院，附近的有不少钓鱼的人，风景很棒。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BELGV.jpg&#34; alt=&#34;锦园路-1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BEXxU.jpg&#34; alt=&#34;锦园路-2&#34;&gt;&lt;/p&gt;
&lt;p&gt;回到环太湖大道，骑一小段可以看到十八湾地质公园，省道路况甚好，当然阳光也甚好，骑过十八湾公园，爬一个长坡来到拐角，有一个缓下坡，边放坡边欣赏湖景的体验太棒了！迎面的清风，路面弯曲的美感，湖面的一览无余，踩踏的双腿似乎都已感受到慰藉不再疲惫。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BEvMF.jpg&#34; alt=&#34;放坡-1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BExr4.jpg&#34; alt=&#34;放坡-2&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BEzqJ.jpg&#34; alt=&#34;放坡-3&#34;&gt;&lt;/p&gt;
&lt;p&gt;离开省道进入常州市后，可以选择从雪雅线或者雪马路回到环湖路上，一路穿村而过，最后再太滆村回到湖边。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BV9aR.jpg&#34; alt=&#34;雪马路&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BVpZ9.jpg&#34; alt=&#34;太滆村&#34;&gt;&lt;/p&gt;
&lt;p&gt;晴日下的波光粼粼让太湖看起来更有生气了一点。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BVCI1.jpg&#34; alt=&#34;波光粼粼的太湖&#34;&gt;&lt;/p&gt;
&lt;p&gt;回到渎边线后，一路平坦笔直，日光毒辣，工业区属实没什么风景好看，一路狂飙后，在宜浦路交叉口朝宜兴城区逼近。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BM5EF.jpg&#34; alt=&#34;渎边线&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BViPx.jpg&#34; alt=&#34;宜浦路&#34;&gt;&lt;/p&gt;
&lt;p&gt;经过范蠡大道交叉口，终于有种进入城区的熟悉感，没想到这是痛苦体验的开始，最后进城的几公里，地势上上下下，爬的坡比过往都还多。甚至于都没骑过平路。每当我以为，爬坡到此为止后。放坡结束又要开始下个煎熬。甚至于还有一个在上坡中间的红绿灯，把我虐够呛。一路折磨，最终来到龙背山——今日的终点。庆幸的是，今日宜必思的旁边又熟悉的沙县小吃，填补了我缺失的午餐。&lt;/p&gt;
&lt;p&gt;宜兴没有很多好逛的地方，我们在八佰伴解决了晚餐后，踱步到东浗市民广场算是作罢。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BMH3R.jpg&#34; alt=&#34;东浗市民广场&#34;&gt;&lt;/p&gt;
&lt;p&gt;结束一天的骑行后，通红的皮肤和洗澡时的刺痛，不时提醒我防晒的重要性。&lt;/p&gt;
&lt;h2 id=&#34;Day-4-宜兴-gt-湖州&#34;&gt;&lt;a href=&#34;#Day-4-宜兴-gt-湖州&#34; class=&#34;headerlink&#34; title=&#34;Day 4 宜兴 -&amp;gt; 湖州&#34;&gt;&lt;/a&gt;Day 4 宜兴 -&amp;gt; 湖州&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;晒伤程度：150%&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这天依旧是一个很棒的晴天，这次我开始考虑防晒的重要性。虽然我带了长袖，但是是黑色的且不透气，所以只能将就做好防晒就出发。今天的路线就更为简单，沿着浗滨大道来到G104国道，路过高铁站一路缓下坡，骑行体验甚好。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BMbg1.jpg&#34; alt=&#34;浗滨大道&#34;&gt;&lt;/p&gt;
&lt;p&gt;在快进入浙江省时，还捕捉到了1314里程碑。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BMOu6.jpg&#34; alt=&#34;1314&#34;&gt;&lt;/p&gt;
&lt;p&gt;快到省界前，是一个漂亮的爬坡，和很棒的湖景。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BMqjx.jpg&#34; alt=&#34;G104-1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BM7C9.jpg&#34; alt=&#34;G104-2&#34;&gt;&lt;/p&gt;
&lt;p&gt;省界的里程碑也很有意思。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BMXDK.jpg&#34; alt=&#34;省界&#34;&gt;&lt;/p&gt;
&lt;p&gt;在夹浦村岔路口，可以拐到滨湖大道上，让你一路湖景看到够，为了弥补前两天湖景的不足，我和基友不顾日头毒，毅然选择了这条路线。事实证明，我们的选择很正确。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BMjHO.jpg&#34; alt=&#34;滨湖大道-1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BQS4H.jpg&#34; alt=&#34;滨湖大道-2&#34;&gt;&lt;/p&gt;
&lt;p&gt;整条路骑到湖州太湖度假区约20公里，当然一路没有太多树荫，一成不变的湖景看久了，显得稍有些枯燥。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BMxED.jpg&#34; alt=&#34;滨湖大道-3&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BMzUe.jpg&#34; alt=&#34;滨湖大道-4&#34;&gt;&lt;/p&gt;
&lt;p&gt;所幸经过太湖旅游度假区后，几乎是一路下坡，骑行体验很棒，和昨日宜兴的进城之路形成了鲜明的对比。由于没有补充午餐，路上险些低血糖，幸好基友的月饼救了一命。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BQ9Cd.jpg&#34; alt=&#34;太湖度假区&#34;&gt;&lt;/p&gt;
&lt;p&gt;一顿跋涉后，最终在下午3点来到银泰城对面的康铂酒店。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BQC8A.jpg&#34; alt=&#34;银泰城&#34;&gt;&lt;/p&gt;
&lt;p&gt;在一顿海底捞弥补宜兴火锅被坑后，我们来&lt;strong&gt;衣裳街&lt;/strong&gt;逛了逛，不出所料，是湖州版的南锣鼓巷，果然也有湖南臭豆腐和轰炸大鱿鱼，也不知大鱿鱼犯了什么错，要去轰炸它。也许是工作日，又也许是湖州并不是旅游城市，步行街里的人并不多，贴着市河一侧还稍微有点意境。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BQPgI.jpg&#34; alt=&#34;衣裳街&#34;&gt;&lt;/p&gt;
&lt;p&gt;一日疲惫，我们走到兴尽，打车回府。&lt;/p&gt;
&lt;h2 id=&#34;Day-5-湖州-gt-南浔&#34;&gt;&lt;a href=&#34;#Day-5-湖州-gt-南浔&#34; class=&#34;headerlink&#34; title=&#34;Day 5 湖州 -&amp;gt; 南浔&#34;&gt;&lt;/a&gt;Day 5 湖州 -&amp;gt; 南浔&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;晒伤程度：180%&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;南浔是湖州的一个区，所以这一天的路程不算太遥远。姑且作为修整。沿着苕溪东路来到织里镇，可以拐到318国道上一路直行进入南浔。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BQivt.jpg&#34; alt=&#34;苕溪东路&#34;&gt;&lt;/p&gt;
&lt;p&gt;318国道从上海人民广场开始到西藏聂拉木县樟木镇中尼友谊桥。中间从成都到拉萨段也是很出名的骑行、徒步、自驾路线。这块里程碑表示距离上海市区只有136公里，比想象中居然近这么多。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BQkKP.jpg&#34; alt=&#34;G318-1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BQEb8.jpg&#34; alt=&#34;G318-2&#34;&gt;&lt;/p&gt;
&lt;p&gt;由于只有30+km，中午12点多我们就抵达酒店。在一家猪蹄店大快朵颐后，我们回酒店休息到日头没有那么强烈，继续一个游客的使命。我也换上长袖，为过度晒伤盖上一块遮羞布。南浔区&lt;strong&gt;南浔古镇&lt;/strong&gt;是较出名的景点，白日有乌镇的感觉，可惜我们来的时候已近饭点。古镇据说5点后不收门票，园内人数尚可，兴许是工作日的原因。南侧部分和平江路、南长街没什么太大的区别，北侧百间楼倒是有别样的韵味。在此处，河道渐宽，游客也比较少，还有一些原住民，有了江南水乡的感觉。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BQADf.jpg&#34; alt=&#34;南浔古镇-1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BQZVS.jpg&#34; alt=&#34;南浔古镇-2&#34;&gt;&lt;/p&gt;
&lt;p&gt;逛完古镇，在基友的期盼下，今天用海底捞画上句号。从海底捞打车会酒店，短短2公里，没想到滴滴也有人接单，看来还是在大城市呆习惯了。需要避免一些惯性思维。&lt;/p&gt;
&lt;h2 id=&#34;Day-6-南浔-gt-苏州-gt-上海&#34;&gt;&lt;a href=&#34;#Day-6-南浔-gt-苏州-gt-上海&#34; class=&#34;headerlink&#34; title=&#34;Day 6 南浔 -&amp;gt; 苏州 -&amp;gt; 上海&#34;&gt;&lt;/a&gt;Day 6 南浔 -&amp;gt; 苏州 -&amp;gt; 上海&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;晒伤程度：150%&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由于湖州那天在滨湖大道上，已经连着看了20公里的湖景，再加上晒伤严重，最后一天我和基友不约而同选择了没那么沿湖的路线。基友率先出发，出了南浔区没多久，很快由回到江苏省境内。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BQeUg.jpg&#34; alt=&#34;江苏界&#34;&gt;&lt;/p&gt;
&lt;p&gt;从318国道拐到258省道后，一路坦途。两侧既没有湖景，也没有树荫。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BQm5Q.jpg&#34; alt=&#34;258省道-1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BQM2n.jpg&#34; alt=&#34;258省道-2&#34;&gt;&lt;/p&gt;
&lt;p&gt;路过吴江大道后，我们又回到苏州，由于不确定省道能否左拐到东太湖路，我们从吴江区内绕路过湖，顺便做了补给。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BQuCj.jpg&#34; alt=&#34;江陵西路&#34;&gt;&lt;/p&gt;
&lt;p&gt;沿着东太湖路一路向西可以回到环太湖大道，我们并没有向南去东山镇做更多的探索。回到熟悉的环太湖大道，心里的石头也落下了地。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BQK8s.jpg&#34; alt=&#34;环太湖大道&#34;&gt;&lt;/p&gt;
&lt;p&gt;太湖大道上人并不多，我们还了车退了押金，也很轻松地叫了车进城。基友去宜家打卡，我去苏州站坐高铁去上海找对象。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/10/20/5BQQvq.jpg&#34; alt=&#34;三虾面&#34;&gt;&lt;/p&gt;
&lt;p&gt;这几天我们是幸运的，车和人都没出意外状态，除了身上显眼的晒伤。脖子上明显的色差让我的脑袋像是后来组装在我的身体上。这次骑行过后，基友更坚信了我是他的吉祥物，和我一起来骑车，总能避免下雨和疫情。骑行前做的应急预案也很幸运地都没有用上。对比去年青海湖的受苦，这次骑行的风格明显更养生一点，每天不止能磨练筋骨，愉悦眼球，还能在疲惫过后享受现代科技的便利，无脑进入游客模式。体验可以说不能更好了。&lt;/p&gt;
&lt;p&gt;在观前街分别前，我也祝福他十一环海南的旅途一路顺风。我们明年再见👋。&lt;/p&gt;
</content>
        <category term="江南" />
        <category term="苏州" />
        <category term="无锡" />
        <category term="宜兴" />
        <category term="湖州" />
        <category term="南浔" />
        <category term="游记" />
        <category term="随笔" />
        <updated>2021-10-20T14:30:30.000Z</updated>
    </entry>
    <entry>
        <id>http://shenlvmeng.github.com/blog/2021/09/10/trunk-based-development/</id>
        <title>Trunk Based Development（主干开发）介绍</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2021/09/10/trunk-based-development/"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;主干开发是相对&lt;a href=&#34;https://nvie.com/posts/a-successful-git-branching-model/&#34;&gt;GitFlow&lt;/a&gt;和&lt;a href=&#34;https://guides.github.com/introduction/flow/&#34;&gt;Github Flow&lt;/a&gt;更贴合CI&amp;#x2F;CD（持续集成&amp;#x2F;持续分发）的高效版本控制管理实践，也更贴合Devops团队。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;背景&#34;&gt;&lt;a href=&#34;#背景&#34; class=&#34;headerlink&#34; title=&#34;背景&#34;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;在软件开发的早年期间，GitFlow和GithubFlow被用来在软件开发中做版本控制管理。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GitFlow工作流中，分为主干分支（&lt;code&gt;master&lt;/code&gt;）、开发分支（&lt;code&gt;dev&lt;/code&gt;）、特性分支、分布分支、热修分支等，这些分支都是长期存在的，并在需求开发完成&amp;#x2F;bug修复完成&amp;#x2F;代码发布等特定时候执行代码的CR（Code Review）和合码工作。且在合并时，由仓库的核心成员或者管理员们把握代码质量。随着项目的扩大，冲突的几率提高，每次代码合码时候的工作量也大大提升，带来了额外的仓库维护成本。Github Flow便随着Github逐渐流行起来。&lt;br&gt;&lt;img src=&#34;https://nvie.com/img/git-model@2x.png&#34; alt=&#34;GitFlow&#34;&gt;&lt;/li&gt;
&lt;li&gt;Github Flow工作流中，只有一个主干分支（&lt;code&gt;master&lt;/code&gt;），一些特性分支以及发布时会用到的分布分支。开发者可以自由从主干分支签出特性分支开发、调试，并在需求完成后合入主干分支。一定程度上减少了长期存在分支的维护成本，但同样的，CR依然是项目管理者进行，特性分支合码时代码量依然有可能很大，团队内规范不好的话，也容易导致合码后主干分支不可发布。&lt;br&gt;&lt;img src=&#34;https://images.prismic.io/launchdarkly/bf307def-6bfc-4d27-ac8b-f4dd1a403935_TrunkBasedDev-01+%283%29.png?auto=compress,format&#34; alt=&#34;Merge Conflict&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;主干开发（Trunk Based Development）是一种更敏捷的git工作流，所有的开发者都可以合码到主干分支，结合CI&amp;#x2F;CD流程，有助于团队快速迭代。&lt;/p&gt;
&lt;h2 id=&#34;什么是主干开发&#34;&gt;&lt;a href=&#34;#什么是主干开发&#34; class=&#34;headerlink&#34; title=&#34;什么是主干开发&#34;&gt;&lt;/a&gt;什么是主干开发&lt;/h2&gt;&lt;p&gt;主干开发和CI&amp;#x2F;CD相互依赖相辅相成。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进行主干开发才能保证CI&amp;#x2F;CD，即每天充分多次的集成乃至发布&lt;/li&gt;
&lt;li&gt;CI&amp;#x2F;CD过程中的&lt;strong&gt;快速&lt;/strong&gt;自动化测试可以保证主干分支的可发布性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在主干开发中每位或者每小组开发者将自己的工作分成小份，然后以每天至少一次的形式从自己的分支合并到主干，由于每次合并代码量不大，CR时间以及CI时间都会缩短。一个典型的主干开发时间轴如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cloud.google.com/architecture/devops/images/devops-tech-trunk-based-development-typical-trunk-timeline.svg&#34; alt=&#34;主干开发时间轴&#34;&gt;&lt;/p&gt;
&lt;p&gt;在主干开发中，某些情况下需要从主干分支中选出最佳的bug修复合并到对应版本中，但如果每天发布多次，则根本不需要发布分支，可直接从主干中部署。这样做的最大优势在于减少开发线，频繁执行小批量合并，将代码保持最新。从而降低团队的合码成本。&lt;/p&gt;
&lt;h2 id=&#34;如何实现主干开发&#34;&gt;&lt;a href=&#34;#如何实现主干开发&#34; class=&#34;headerlink&#34; title=&#34;如何实现主干开发&#34;&gt;&lt;/a&gt;如何实现主干开发&lt;/h2&gt;&lt;p&gt;在进行主干开发时，开发者需要了解如何拆解工作为小份，同时，还需要让构建流程保持通过，如果CI失败，开发者需要立即停止当前工作修复问题，无法短期修复时，也要还原相应更改。通常来讲，主干开发有下面这样的特征：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;仓库里的活跃分支不超过3个&lt;/li&gt;
&lt;li&gt;分支的合码频率不少于每天1次，即分支的生存周期不超过1天&lt;/li&gt;
&lt;li&gt;没有代码冻结期或集成期&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在实践中，有下面一些tips：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;小commit，多合码&lt;/strong&gt;：将每次合码改动限制在少量的commit和较少的代码改动上，保证合码时轻松；主干分支应该有频繁的小批量改动合码&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最少1天1合码&lt;/strong&gt;：每天合并或关闭待合并分支，有效减少合码压力，提高增量发布敏捷度&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;同步Code Review&lt;/strong&gt;：主干分支的每次合码需要保证CR的及时响应，这可以借助一些代码分析工具的辅助&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;全面的自动化测试覆盖&lt;/strong&gt;：确保有全面的自动化单元测试套件，保证测试通过后再合并代码，这也是保证主干分支可发布的基础&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;构建快速&lt;/strong&gt;：降低CI成本，构建和测试需要在几分钟内完成&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同时也带来两个新概念&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;分支抽象&lt;/strong&gt;：在主干开发中，合码频率很高，有些大需求可能没有办法在1天内就完成合码，对于未完成的需求，可以在代码中先埋下未使用的新特性，等待需求完成后，再使用埋好的新功能。这种在源代码中提前埋下“代码分支”的方式成为抽象分支（Branch by abstraction）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://featureflags.io/&#34;&gt;&lt;strong&gt;特性开关&lt;/strong&gt;&lt;/a&gt;：在分支抽象的基础上，有些合并到主干的改动不一定想让所有用户都看见，可以在代码中预先埋入分支语句，再从配置中读取当前是否使用特性。这样可以实现功能灵活切换、实现ab-test等效果&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://images.prismic.io/launchdarkly/7ad744e0-5c46-4a2f-b08d-6013a95e89c5_TrunkBasedDev-02+%283%29.png?auto=compress,format&#34; alt=&#34;feature-flags&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;标准开发流&#34;&gt;&lt;a href=&#34;#标准开发流&#34; class=&#34;headerlink&#34; title=&#34;标准开发流&#34;&gt;&lt;/a&gt;标准开发流&lt;/h2&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;git checkout master &amp;amp;&amp;amp; git pull --prune&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;git checkout -b &amp;lt;feat/branch&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# coding&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;git push -u origin &amp;lt;feat/branch&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# after any updates&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;git push&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# or add --force if rebased during updates&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;git push -f&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ol&gt;
&lt;li&gt;更新本地master分支&lt;/li&gt;
&lt;li&gt;签出特性分支&lt;/li&gt;
&lt;li&gt;编码&lt;/li&gt;
&lt;li&gt;推送本地分支到远端&lt;/li&gt;
&lt;li&gt;提MR，如果MR后有更新，继续push，当rebase master遇到冲突时，推送需要增加&lt;code&gt;-f&lt;/code&gt;参数&lt;/li&gt;
&lt;li&gt;合码&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;注：因为主干开发每次合码量不大，建议使用&lt;code&gt;rebase&lt;/code&gt;解决冲突&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;主干开发的好处&#34;&gt;&lt;a href=&#34;#主干开发的好处&#34; class=&#34;headerlink&#34; title=&#34;主干开发的好处&#34;&gt;&lt;/a&gt;主干开发的好处&lt;/h2&gt;&lt;p&gt;主干开发的最大好处在于对CI的亲和度。可以想象开发者完成当日工作，当日合码，当日测试通过完成集成，达到可发布状态。很大程度减少了合码的痛苦。进而有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;持续CI&lt;/li&gt;
&lt;li&gt;持续CR&lt;/li&gt;
&lt;li&gt;持续CD&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a href=&#34;#总结&#34; class=&#34;headerlink&#34; title=&#34;总结&#34;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;非常适用于敏捷开发中，对于团队成员能力过关（要懂得怎样拆分需求）、测试有着良好建设的团队来讲，是种提效的好方式，值得一试。相反如果成员拆分不够良好、代码review不够及时，测试不够自动化和系统，则不适用主干开发。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;&lt;a href=&#34;#参考&#34; class=&#34;headerlink&#34; title=&#34;参考&#34;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.atlassian.com/continuous-delivery/continuous-integration/trunk-based-development&#34;&gt;Trunk-based development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.google.com/architecture/devops/devops-tech-trunk-based-development&#34;&gt;DevOps技术：主干开发&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://trunkbaseddevelopment.com/&#34;&gt;Trunk Based Development: Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://launchdarkly.com/blog/git-branching-strategies-vs-trunk-based-development/&#34;&gt;Git Branching Strategies vs. Trunk-Based Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://launchdarkly.com/blog/what-are-feature-flags/&#34;&gt;What Are Feature Flags?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="工作流" />
        <category term="主干开发" />
        <category term="GitFlow" />
        <category term="GithubFlow" />
        <updated>2021-09-10T02:44:08.000Z</updated>
    </entry>
    <entry>
        <id>http://shenlvmeng.github.com/blog/2021/03/22/clean-architecture/</id>
        <title>《架构整洁之道》—— 软件设计的思考</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2021/03/22/clean-architecture/"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;全文参考自马丁大叔的《架构整洁之道》，书中文笔清爽易懂，不过在后半段有点条理不清流于术而非道&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在编程领域，问题就像一个生命体一样，是在不断繁殖和进化的。它甚至经常不会人们预期中一般发展。作为一名出色的软件工程师或架构师，你需要有超出普通程序员的视角，考虑系统宏观的未来的发展。你的使命是，在这种恶劣的开发环境下，绘制一幅相对最优的图纸，用最少的时间、人力、金钱构建和维护一个随时可能融化在熵增热汤里的软件系统。和现实物理世界里的架构师类似，你需要了解编程世界里的一般规律，帮助你挑选武器（技术），修炼秘籍（方法论），在不同的江湖里（业务）打造不同的门派（软件系统）。&lt;/p&gt;
&lt;p&gt;开卷有益，祝你练武愉快~&lt;/p&gt;
&lt;h2 id=&#34;你要做什么&#34;&gt;&lt;a href=&#34;#你要做什么&#34; class=&#34;headerlink&#34; title=&#34;你要做什么&#34;&gt;&lt;/a&gt;你要做什么&lt;/h2&gt;&lt;p&gt;简而言之，架构师的终极目标就是&lt;strong&gt;用最少的人力成本来满足构建和维护软件系统的需求&lt;/strong&gt;。糟糕的架构设计会让软件在成功之前，就带来高昂的边际人力成本，即开发新需求的开支越来越大（因为程序员的时间都耗费在系统的修修补补上了）。然而，这种日益增长的边际人力成本现象并不少见。来源于类似龟兔赛跑中兔子的盲目自信，实际上，&lt;strong&gt;无论从短期还是长期看，胡乱编写代码的工作速度其实比循规蹈矩更慢&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;架构师存在的一个必要性就是，软件存在着两种价值维度：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;行为价值（现在时）&lt;/strong&gt;：即实现功能和弥补bug。这类价值是&lt;strong&gt;紧急却并不总是重要的&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;架构价值（将来时）&lt;/strong&gt;：即软件是否足够“软”（易于被修改），这类价值是&lt;strong&gt;重要却并不总是紧急的&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;很现实的一点是，在公司中，&lt;strong&gt;团队之间的抗争本来就是无穷无尽的&lt;/strong&gt;。你作为研发团队的一员，职责的一部分就是避免你的代码在抗争的风吹雨打下变成一坨没人爱的shit。&lt;/p&gt;
&lt;h2 id=&#34;编程范式&#34;&gt;&lt;a href=&#34;#编程范式&#34; class=&#34;headerlink&#34; title=&#34;编程范式&#34;&gt;&lt;/a&gt;编程范式&lt;/h2&gt;&lt;p&gt;没错，架构师们也有祖师爷。在1958到1968年期间，3大编程范式就已经陆续出现了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;结构化编程&lt;/strong&gt;，由Dijkstra在1968年提出，并发扬光大，&lt;strong&gt;它对程序控制权的直接转移（程序语句）进行了限制和规范&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;面向对象编程&lt;/strong&gt;，最早在1966年提出，Ole Johan Dahl和Kriste Nygaard注意到，函数调用堆栈可以被放到堆内存中，从而在函数返回后继续保留。&lt;strong&gt;它对程序控制权的间接转移（函数调用）进行了限制和规范&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;函数式编程&lt;/strong&gt;，启发自Alonzo Church于1936年发明的lambda演算，发扬于1958年的LISP语言。&lt;strong&gt;它对程序的赋值进行了限制和规范&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;值得思考是，三大范式做的都是&lt;strong&gt;限制和规范&lt;/strong&gt;，即告诉我们&lt;strong&gt;不能做什么&lt;/strong&gt;，而不是可以做什么。另外，多态带来的架构边界飞跃，函数式编程带来的数据访问限制，结构化编程带来的算法拆解为我们架构软件提供了强大武器。这也与软件架构的三个关注点所契合：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能性&lt;/strong&gt;，即完整的功能实现&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;组件独立性&lt;/strong&gt;，即合适的耦合度与细粒度&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据管理&lt;/strong&gt;，即良好的数据结构设计&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;结构化编程&#34;&gt;&lt;a href=&#34;#结构化编程&#34; class=&#34;headerlink&#34; title=&#34;结构化编程&#34;&gt;&lt;/a&gt;结构化编程&lt;/h3&gt;&lt;p&gt;Dijkstra在1950年代思考编程时，得出过一个结论：编程是一项&lt;strong&gt;难度很大&lt;/strong&gt;的活动。他倾向于把编程类比为数学推导过程，并发现&lt;code&gt;goto&lt;/code&gt;的&lt;strong&gt;某些使用&lt;/strong&gt;会导致&lt;strong&gt;模块无法被递归拆解成更小的单元&lt;/strong&gt;。然而，去掉这些使用的&lt;code&gt;goto&lt;/code&gt;可以被&lt;strong&gt;顺序结构、分支结构、循环结构这三种最小集&lt;/strong&gt;等价表示出来。从而，大问题可以被逐步拆解为小问题。&lt;/p&gt;
&lt;p&gt;不过，事情也并非这么理想，当程序复杂后，我们不可能像Dijkstra一样，用严格的数学推导形式化证明编程的正确性。相反，类似实验学科的&lt;strong&gt;无法被证伪即正确&lt;/strong&gt;，我们现今依旧使用着Dijkstra的结构化编程思路将大问题拆解为小问题。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有趣的是，“无法被证伪即正确”和Dijkstra的一个观点&lt;strong&gt;“测试只能展示bug的存在，并不能证明不存在bug”&lt;/strong&gt;不谋而合&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简而言之，去掉goto糟粕诞生的结构化编程中，最有价值的地方就是，它赋予我们创造&lt;strong&gt;可证伪程序单元&lt;/strong&gt;的能力，从而架构起大程序。在架构设计领域，&lt;strong&gt;功能性拆解仍然是最佳实践之一&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;什么？什么叫做可证伪？你应该写过单元测试吧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;面向对象编程&#34;&gt;&lt;a href=&#34;#面向对象编程&#34; class=&#34;headerlink&#34; title=&#34;面向对象编程&#34;&gt;&lt;/a&gt;面向对象编程&lt;/h3&gt;&lt;p&gt;什么是面向对象？有人说面向对象是“数据和函数的组合”，也有人说是“对真实世界的一种建模方式”。但这两种理解要么片面，要么虚无缥缈。为了总结这种范式，我们先从它的3大特征入手：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;封装&lt;/strong&gt;，即将一组关联数据和函数圈起来。然而这种特性，从C语言起就支持（struct + 头文件），很难说它是面向对象编程的必要条件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;继承&lt;/strong&gt;，即可以在某个作用域对外部定义的一组变量与函数进行覆盖。不过C语言也能模拟出这种能力，看起来也比较勉强。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多态&lt;/strong&gt;，即在同一接口描述下的不同具体实现形式，C语言起也做了支持（STDOUT），然而使用函数指针显式实现多态问题就在于指针的&lt;strong&gt;危险性&lt;/strong&gt;。而面向对象编程对这种程序间接控制权的转移做了约束。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;传统的函数调用树中，系统行为决定了自上而下的控制流，而控制流决定了&lt;strong&gt;源代码依赖&lt;/strong&gt;（代码实现）是自上而下的，比如在C中会使用&lt;code&gt;#include&lt;/code&gt;引入依赖。此时不论是代码实现还是代码执行都是自上而下的。然而在&lt;strong&gt;多态&lt;/strong&gt;的帮助下，底层函数需要依赖高层接口实现，作为高层函数的插件引入，从而将这种依赖关系和控制流反向，即&lt;strong&gt;依赖反转&lt;/strong&gt;。实际上，借助安全便利的多态实现，可以轻松将依赖关系反转。&lt;/p&gt;
&lt;p&gt;从而架构师可以&lt;strong&gt;完全控制&lt;/strong&gt;这种方式下，系统中所有的源代码依赖关系，进而随意更改源代码依赖关系。让每个组件都有&lt;strong&gt;独立部署&lt;/strong&gt;和&lt;strong&gt;独立开发&lt;/strong&gt;能力。好了，我们现在可以说明面向对象编程的含义了：&lt;/p&gt;
&lt;p&gt;面向对象编程就是以多态为手段来对源代码中的依赖关系进行控制的能力。这种能力让架构师可以构建&lt;strong&gt;插件式架构&lt;/strong&gt;，让高层&lt;strong&gt;策略性组件&lt;/strong&gt;和底层&lt;strong&gt;实现性组件&lt;/strong&gt;相分离。借助接口，底层实现性组件作为插件，可以独立于高层组件开发和部署。&lt;/p&gt;
&lt;h3 id=&#34;函数式编程&#34;&gt;&lt;a href=&#34;#函数式编程&#34; class=&#34;headerlink&#34; title=&#34;函数式编程&#34;&gt;&lt;/a&gt;函数式编程&lt;/h3&gt;&lt;p&gt;函数式编程依据的原理早在编程之前就已出现，相对前两种范式，函数式编程的风格可能相对陌生一点。在这类风格中，变量都是不可变的。从而让竞争问题、死锁问题、并发更新问题不复存在。一个架构良好的系统，需要将状态修改的部分和不需要修改的部分隔离开，然后用类似事务型内存的方式来保护可变量。另外，架构师应该着力于将大部分逻辑归于不可变组件中，可变组件的逻辑越少越好。&lt;/p&gt;
&lt;p&gt;书中还提到了只包含CR的事件溯源存储逻辑，即通过事务日志的方式保存当前状态。因为不存在更改和删除，从而不存在并发问题。也是一种很新颖的思路。&lt;/p&gt;
&lt;p&gt;回顾上面的三种编程范式，都在说什么&lt;strong&gt;不应该做&lt;/strong&gt;。也即编程好似在充满死路的熵增旷野中，只有沿着相对安全的几个大方向才可拨开迷雾。&lt;/p&gt;
&lt;h2 id=&#34;设计原则&#34;&gt;&lt;a href=&#34;#设计原则&#34; class=&#34;headerlink&#34; title=&#34;设计原则&#34;&gt;&lt;/a&gt;设计原则&lt;/h2&gt;&lt;p&gt;软件的中层需要具有良好的可读性、可扩展性。这里就不得不提到SOLID原则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SRP：&lt;strong&gt;单一职责原则&lt;/strong&gt;，每个模块有且只有一个需要被改变的理由&lt;/li&gt;
&lt;li&gt;OCP：&lt;strong&gt;开闭原则&lt;/strong&gt;，对扩展开放，对修改封闭&lt;/li&gt;
&lt;li&gt;LSP：&lt;strong&gt;里氏替换原则&lt;/strong&gt;，子类型应该能够无无缝替换类型使用&lt;/li&gt;
&lt;li&gt;ISP：&lt;strong&gt;接口隔离原则&lt;/strong&gt;，依赖的模块不要包含不需要的接口&lt;/li&gt;
&lt;li&gt;DIP：&lt;strong&gt;依赖反转原则&lt;/strong&gt;，高层策略性代码不要依赖底层实现性代码&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;SRP&#34;&gt;&lt;a href=&#34;#SRP&#34; class=&#34;headerlink&#34; title=&#34;SRP&#34;&gt;&lt;/a&gt;SRP&lt;/h3&gt;&lt;p&gt;任何一个软件模块（一组紧密相关的函数和数据结构）都应该只对一个行为者负责。实际上，代码和数据就是靠着和某一类行为者的相关性组合起来的。我们需要&lt;strong&gt;将服务不同行为者的代码进行切分&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;OCP&#34;&gt;&lt;a href=&#34;#OCP&#34; class=&#34;headerlink&#34; title=&#34;OCP&#34;&gt;&lt;/a&gt;OCP&lt;/h3&gt;&lt;p&gt;设计良好的软件应该易于扩展，同时抗拒修改。实现方式可以通过将系统划分为一系列组件，并且将依赖关系按层次组织，使得高阶组件不会因为低阶组件修改受到影响。&lt;/p&gt;
&lt;h3 id=&#34;LSP&#34;&gt;&lt;a href=&#34;#LSP&#34; class=&#34;headerlink&#34; title=&#34;LSP&#34;&gt;&lt;/a&gt;LSP&lt;/h3&gt;&lt;p&gt;里氏替换原则表示，子类型应该能够被当做父类型使用。它实际上表示了一种面向接口设计的设计原则。一旦违背了这种可替换性，就会不得不在系统架构中增加大量复杂的应对机制。&lt;/p&gt;
&lt;h3 id=&#34;ISP&#34;&gt;&lt;a href=&#34;#ISP&#34; class=&#34;headerlink&#34; title=&#34;ISP&#34;&gt;&lt;/a&gt;ISP&lt;/h3&gt;&lt;p&gt;ISP告诉我们任何软件设计如果依赖了不需要的东西，都是不好的迹象，很容易带来不必要的麻烦。&lt;/p&gt;
&lt;h3 id=&#34;DIP&#34;&gt;&lt;a href=&#34;#DIP&#34; class=&#34;headerlink&#34; title=&#34;DIP&#34;&gt;&lt;/a&gt;DIP&lt;/h3&gt;&lt;p&gt;DIP告诉我们，应该多引用抽象类型，而不是具体实现。因为软件是经常变动的，而抽象出共性的接口则是较少变化的。从而可以衍生出一些守则，譬如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应该多使用抽象接口，避免使用多变的实现类&lt;/li&gt;
&lt;li&gt;不要在实现类上创建衍生类&lt;/li&gt;
&lt;li&gt;不要覆盖具体实现的函数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不过当然了，还是得有人做实现的脏活累活的&lt;/p&gt;
&lt;h2 id=&#34;组件构建&#34;&gt;&lt;a href=&#34;#组件构建&#34; class=&#34;headerlink&#34; title=&#34;组件构建&#34;&gt;&lt;/a&gt;组件构建&lt;/h2&gt;&lt;h3 id=&#34;组件&#34;&gt;&lt;a href=&#34;#组件&#34; class=&#34;headerlink&#34; title=&#34;组件&#34;&gt;&lt;/a&gt;组件&lt;/h3&gt;&lt;p&gt;组件是构建软件的最小单元，同时也是源代码的集合。在早期会使用链接技术将程序和库函数链接起来，而后随着机器性能的增长，我们会在程序运行中插入动态链接文件，如今这种组件化插件式架构是最常见的软件构建形式。&lt;/p&gt;
&lt;h3 id=&#34;组件聚合&#34;&gt;&lt;a href=&#34;#组件聚合&#34; class=&#34;headerlink&#34; title=&#34;组件聚合&#34;&gt;&lt;/a&gt;组件聚合&lt;/h3&gt;&lt;p&gt;和类相似，组件也有一些原则指引我们的构建工作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;REP：复用&amp;#x2F;发布原则，即可以一起发布的最小粒度就是复用的最小粒度，也即按可以同时发布聚合&lt;/li&gt;
&lt;li&gt;CCP：共同闭包原则，即因为同一原因修改的放在一起，反之不要放在一起，也即按变更原因聚合&lt;/li&gt;
&lt;li&gt;CRP：共同复用原则，即会被一起复用的放在一起，反之不要放在一起，也即按减少无用耦合聚合&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这三大原则相互牵制，在项目的不同阶段，某一原则重要性也会不同；比如在项目早期CCP就会更重要，而后REP会比较重要。&lt;/p&gt;
&lt;h3 id=&#34;组合耦合&#34;&gt;&lt;a href=&#34;#组合耦合&#34; class=&#34;headerlink&#34; title=&#34;组合耦合&#34;&gt;&lt;/a&gt;组合耦合&lt;/h3&gt;&lt;p&gt;本节提出了一些可以定量衡量耦合健康度的指标，比较新颖。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无依赖环原则：依赖关系中不能有环，会不利于厘清依赖关系；可以通过&lt;strong&gt;依赖反转&lt;/strong&gt;或&lt;strong&gt;创建第三方依赖组件&lt;/strong&gt;解决。循环依赖关系务必持续监控。&lt;/li&gt;
&lt;li&gt;稳定依赖原则：依赖关系必须指向稳定的方向，简单点说就是让经常变更的组件依赖于不经常变更的组件。一个组件的位置稳定性可以通过入向和出向依赖算出，它要能和组件的实际稳定性匹配。&lt;/li&gt;
&lt;li&gt;稳定抽象原则：抽象化程度需要和稳定性程度一直，即经常变更的组件要容易变更，即更具体实现；反之，稳定的组件要不容易变更，即更抽象。结合上条看，依赖关系应该指向更抽象的方向。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用位置稳定性指标I和抽象程度A，可以绘制一个坐标系。在主序列上的是最健康的，相反的两块痛苦区和无用区则是不健康的表现。用偏离主序列线的距离可以大致衡量依赖关系的健康程度。结合发布版本的变化来看，还可以得到变化趋势。&lt;/p&gt;
&lt;h2 id=&#34;软件架构&#34;&gt;&lt;a href=&#34;#软件架构&#34; class=&#34;headerlink&#34; title=&#34;软件架构&#34;&gt;&lt;/a&gt;软件架构&lt;/h2&gt;&lt;p&gt;软件架构目的就是方便在工作中更好地对组件进行研发、部署、运行和维护。其中的策略就是&lt;strong&gt;保留尽可能多的可选项&lt;/strong&gt;。让系统最大化程序员的生产力，同时最小化系统运营成本：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开发：系统架构需要方便开发团队对它的开发，不同的团队结构应该采用不同的架构设计，比如团队的大小就会影响架构的选择&lt;/li&gt;
&lt;li&gt;部署：一键式部署&lt;/li&gt;
&lt;li&gt;运行：几乎任何运行问题都可以通过增加硬件来解决&lt;/li&gt;
&lt;li&gt;维护：减小新功能和系统缺陷占用的人力资源&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;保持可选项，忽略那些无关紧要的实现细节。任何软件系统都可以拆解成&lt;strong&gt;策略&lt;/strong&gt;（业务的宏观逻辑和流程）和&lt;strong&gt;细节&lt;/strong&gt;（具体操作行为）。而&lt;strong&gt;策略才是系统的真正价值所在&lt;/strong&gt;。细节是指那些和策略交互的东西，包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I&amp;#x2F;O设备&lt;/li&gt;
&lt;li&gt;数据库&lt;/li&gt;
&lt;li&gt;Web系统&lt;/li&gt;
&lt;li&gt;服务器&lt;/li&gt;
&lt;li&gt;框架&lt;/li&gt;
&lt;li&gt;交互协议&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在设计时，可以尽量拖延上面这些的设计，这样我们做出的决策才不会依赖各种很容易变化的信息。另一方面，也可以&lt;strong&gt;增加实现底层的可替换性&lt;/strong&gt;。举个具体例子：&lt;strong&gt;设备无关性&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;独立性&#34;&gt;&lt;a href=&#34;#独立性&#34; class=&#34;headerlink&#34; title=&#34;独立性&#34;&gt;&lt;/a&gt;独立性&lt;/h3&gt;&lt;p&gt;一个良好的架构应支持下面几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统用例：设计良好的架构需要能够&lt;strong&gt;看起来&lt;/strong&gt;就可以反映系统的设计意图，比如一个购物车应用架构应该看起来就该是用来实现购物车的&lt;/li&gt;
&lt;li&gt;系统运行：可以解耦出多个独立服务，然后通过某种网络协议通信，这种架构即微服务&lt;/li&gt;
&lt;li&gt;系统维护&lt;/li&gt;
&lt;li&gt;系统开发&lt;/li&gt;
&lt;li&gt;系统部署：理想的独立部署应该能够做到&lt;strong&gt;热更新&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要注意留意表面的重复和实际的重复，如果两段代码变更速率和缘由不同，那么就不算是真正的重复。&lt;/p&gt;
&lt;h3 id=&#34;划分边界&#34;&gt;&lt;a href=&#34;#划分边界&#34; class=&#34;headerlink&#34; title=&#34;划分边界&#34;&gt;&lt;/a&gt;划分边界&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;设计良好的系统架构不应该依赖细节，而应该尽可能推迟细节性的决策。通过划清边界，可以推迟和延后细节性的决策，从而节省大量时间，避免问题。&lt;/li&gt;
&lt;li&gt;边界线应该画在不相干的事情中间，譬如GUI和业务逻辑&lt;/li&gt;
&lt;li&gt;针对核心业务逻辑的插件式架构可以提高可维护性和可扩展性&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;边界剖析&#34;&gt;&lt;a href=&#34;#边界剖析&#34; class=&#34;headerlink&#34; title=&#34;边界剖析&#34;&gt;&lt;/a&gt;边界剖析&lt;/h3&gt;&lt;p&gt;简言之，应该尽可能从底层组件指向高层组件。&lt;/p&gt;
&lt;h3 id=&#34;策略和层次&#34;&gt;&lt;a href=&#34;#策略和层次&#34; class=&#34;headerlink&#34; title=&#34;策略和层次&#34;&gt;&lt;/a&gt;策略和层次&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;变更原因、时间和层次不同的策略应该属于不同的组件&lt;/li&gt;
&lt;li&gt;按距离系统输入、输出距离的远近，可以确定策略的层次&lt;/li&gt;
&lt;li&gt;源码间的依赖关系，应该主要和组件所在的层次挂钩&lt;/li&gt;
&lt;li&gt;低层组件应该以插件的方式依赖高层组件&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;业务逻辑&#34;&gt;&lt;a href=&#34;#业务逻辑&#34; class=&#34;headerlink&#34; title=&#34;业务逻辑&#34;&gt;&lt;/a&gt;业务逻辑&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;业务逻辑是程序中真正用于或者体现赚钱&amp;#x2F;省钱的逻辑与过程&lt;/strong&gt;。其中关键逻辑和关键数据紧密组合成为&lt;strong&gt;业务实体&lt;/strong&gt;。业务实体应该只有高层逻辑，没有具体实现。而&lt;strong&gt;用例&lt;/strong&gt;是业务实体在不同侧面的具体体现。通过用例可以规范用户和业务实体的交互方式。&lt;/p&gt;
&lt;h3 id=&#34;“尖叫”的软件架构&#34;&gt;&lt;a href=&#34;#“尖叫”的软件架构&#34; class=&#34;headerlink&#34; title=&#34;“尖叫”的软件架构&#34;&gt;&lt;/a&gt;“尖叫”的软件架构&lt;/h3&gt;&lt;p&gt;“尖叫”即所见即所得。软件架构本身就足以能够体现其用途。一个良好的架构设计应该围绕用例展开，推迟和延后框架的选择，不要过度拘泥于框架。&lt;strong&gt;框架只是一个可选项&lt;/strong&gt;，是一个工具，而不是一种信念，更不是一种架构。&lt;/p&gt;
&lt;h3 id=&#34;整洁架构&#34;&gt;&lt;a href=&#34;#整洁架构&#34; class=&#34;headerlink&#34; title=&#34;整洁架构&#34;&gt;&lt;/a&gt;整洁架构&lt;/h3&gt;&lt;p&gt;一些常见的系统架构通常具有以下特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;独立于框架&lt;/li&gt;
&lt;li&gt;可被测试&lt;/li&gt;
&lt;li&gt;独立于UI&lt;/li&gt;
&lt;li&gt;独立于数据库&lt;/li&gt;
&lt;li&gt;独立于外部接口&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Main组件&#34;&gt;&lt;a href=&#34;#Main组件&#34; class=&#34;headerlink&#34; title=&#34;Main组件&#34;&gt;&lt;/a&gt;Main组件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Main组件包含了系统中最细节化最底层的策略，它应该在做完脏活累活后，将程序的控制权交给最高抽象层的代码去执行&lt;/li&gt;
&lt;li&gt;针对不同系统可以配置不同的Main组件，即将Main组件视为应用程序的一个插件&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;服务：微观和宏观&#34;&gt;&lt;a href=&#34;#服务：微观和宏观&#34; class=&#34;headerlink&#34; title=&#34;服务：微观和宏观&#34;&gt;&lt;/a&gt;服务：微观和宏观&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;系统的架构边界事实上并不落在服务之间，而是&lt;strong&gt;穿透&lt;/strong&gt;所有服务，在服务内以组件形式存在&lt;/li&gt;
&lt;li&gt;服务可以提升系统的可扩展性和可开发性，不过服务却并不能代表整个系统的架构设计&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;整洁的嵌入式架构&#34;&gt;&lt;a href=&#34;#整洁的嵌入式架构&#34; class=&#34;headerlink&#34; title=&#34;整洁的嵌入式架构&#34;&gt;&lt;/a&gt;整洁的嵌入式架构&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;固件即对平台或硬件的强依赖代码，在固件和软件之间可以设置HAL（硬件抽象层），为它上层的软件提供服务，它可以帮助软件&lt;em&gt;脱离&lt;/em&gt;目标硬件平台来测试&lt;/li&gt;
&lt;li&gt;类似地，我们还可以引入OSAL（操作系统抽象层）来减少软件对操作系统的依赖&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;实现细节&#34;&gt;&lt;a href=&#34;#实现细节&#34; class=&#34;headerlink&#34; title=&#34;实现细节&#34;&gt;&lt;/a&gt;实现细节&lt;/h2&gt;&lt;p&gt;那么什么算是实现细节呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数据库&lt;/strong&gt;，数据的组织结构和模型都是系统架构的一部分，但是从磁盘中存储&amp;#x2F;读取数据的机制或手段则没那么重要，就比如数据库或静态文件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Web&lt;/strong&gt;，Web只是UI，只是一种I&amp;#x2F;O设备&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;应用框架&lt;/strong&gt;，框架被创造的目的是解决作者遇到的问题，它要求我们去阅读文档，按照作者的要求整合到我们的应用中，可以使用但是不要被框架绑定&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;案例：视频销售网站&#34;&gt;&lt;a href=&#34;#案例：视频销售网站&#34; class=&#34;headerlink&#34; title=&#34;案例：视频销售网站&#34;&gt;&lt;/a&gt;案例：视频销售网站&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;系统架构设计的第一步是识别系统中的各种角色和用例&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;–END–&lt;/em&gt;&lt;/p&gt;
</content>
        <category term="设计" />
        <category term="架构" />
        <category term="组件" />
        <updated>2021-03-22T15:47:20.000Z</updated>
    </entry>
    <entry>
        <id>http://shenlvmeng.github.com/blog/2021/01/29/zen-of-unix/</id>
        <title>Unix编程艺术集萃</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2021/01/29/zen-of-unix/"/>
        <content type="html">&lt;p&gt;这本书从Unix的设计理念等各方面讲起，内容充实有趣，尽管介绍细节的部分对于不太了解Unix的人呢来讲有些生涩，但在道的介绍上有不少可取之处。由于某人的出现，生活中多了新的追求，比想象中多用了一些时间看完了它。下面摘取一些其中精华的观点，力图尽量还原书中的本意。&lt;/p&gt;
&lt;h2 id=&#34;Context&#34;&gt;&lt;a href=&#34;#Context&#34; class=&#34;headerlink&#34; title=&#34;Context&#34;&gt;&lt;/a&gt;Context&lt;/h2&gt;&lt;h3 id=&#34;哲学&#34;&gt;&lt;a href=&#34;#哲学&#34; class=&#34;headerlink&#34; title=&#34;哲学&#34;&gt;&lt;/a&gt;哲学&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;每过18个月，就有一半的知识会过时&lt;/li&gt;
&lt;li&gt;X致力提供一套“机制，而不是策略”&lt;/li&gt;
&lt;li&gt;提供机制而不是方针的哲学让Unix长期保鲜&lt;/li&gt;
&lt;li&gt;Unix传统将重点放在尽力使各程序接口相对小巧、简洁、正交&lt;/li&gt;
&lt;li&gt;Unix管道发明人Doug McIlroy曾说过：&lt;ul&gt;
&lt;li&gt;让每个程序就做好一件事&lt;/li&gt;
&lt;li&gt;假定每个程序的输出都会成为另个程序的输入&lt;/li&gt;
&lt;li&gt;尽早将设计和编译的软件投入使用&lt;/li&gt;
&lt;li&gt;优先使用工具而不是拙劣的帮助来减轻编程任务的负担&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Rob Pike曾从不同的角度表述了Unix的哲学&lt;ul&gt;
&lt;li&gt;你无法断定程序会在什么地方好费时间，所以别急于找地方改代码，除非你已经证实那儿就是瓶颈所在&lt;/li&gt;
&lt;li&gt;没对代码估量最耗时的部分前，别去优化速度&lt;/li&gt;
&lt;li&gt;花哨的算法在n很小的时候通常很慢，而n一般很小&lt;/li&gt;
&lt;li&gt;花哨的算法比简单算法更容易出bug、更难实现&lt;/li&gt;
&lt;li&gt;编程的核心是数据结构，而不是算法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;书中对Unix的哲学，总结为下面这些点&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;模块原则&lt;/strong&gt;，使用简洁的接口拼接简单的部件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;清晰原则&lt;/strong&gt;，清晰胜于机巧，程序是写给人看的&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;组合原则&lt;/strong&gt;，设计时要考虑拼接组合&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分离原则&lt;/strong&gt;，策略和机制分离，接口和引擎分离&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;简洁原则&lt;/strong&gt;，设计要简洁，复杂度能低则低&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;吝啬原则&lt;/strong&gt;，除非没有办法，不要写大程序&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;透明性原则&lt;/strong&gt;，设计要有&lt;strong&gt;可见性&lt;/strong&gt;（如输入输出、打点上报），便于审查和调试&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;健壮原则&lt;/strong&gt;，健壮源于透明和简洁&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;表示原则&lt;/strong&gt;，把知识转移到数据中，保证逻辑的简朴而健壮&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;通俗原则&lt;/strong&gt;，即最少惊奇原则，接口设计避免标新立异，缓和学习曲线&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缄默原则&lt;/strong&gt;，设计良好的程序将用户的注意力视为有限的宝贵资源&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;补救原则&lt;/strong&gt;，出现异常时，马上退出并给出错误信息&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;经济原则&lt;/strong&gt;，宁花机器1分，不花程序员1秒&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;生成原则&lt;/strong&gt;，避免手工hack，编写程序去生成程序&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优化原则&lt;/strong&gt;，过早优化会妨碍全局优化，先制作原型，再精雕细琢；先可用，再优化&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多样原则&lt;/strong&gt;，不相信“不二法门”的断言&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;扩展原则&lt;/strong&gt;，未来总比预想来得要快&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unix哲学一言以蔽之，即KISS（Keep It Simple, Stupid!）&lt;/li&gt;
&lt;li&gt;善用他人写好的工具，尽可能将一切自动化&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;历史&#34;&gt;&lt;a href=&#34;#历史&#34; class=&#34;headerlink&#34; title=&#34;历史&#34;&gt;&lt;/a&gt;历史&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;计算机不应仅被视为一种逻辑设备而更应视为社群的立足点&lt;/li&gt;
&lt;li&gt;1985年IEEE支持的POSIX标准表述了BSD和SVR3（System V Release3）调用的交集&lt;/li&gt;
&lt;li&gt;1987年初，GNU C编译器第一版问世&lt;/li&gt;
&lt;li&gt;1995年，Linux找到自己的杀手级应用——开源的web服务器Apache&lt;/li&gt;
&lt;li&gt;过度依赖任何一种技术或者商业模式都是错误的&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Unix哲学和其他哲学的对比&#34;&gt;&lt;a href=&#34;#Unix哲学和其他哲学的对比&#34; class=&#34;headerlink&#34; title=&#34;Unix哲学和其他哲学的对比&#34;&gt;&lt;/a&gt;Unix哲学和其他哲学的对比&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;统一性理念：一切皆文件 &amp;amp; 管道概念&lt;/li&gt;
&lt;li&gt;多任务能力：抢先式多任务&lt;/li&gt;
&lt;li&gt;协作进程：低价的进程生成和简便的进程间通讯&lt;/li&gt;
&lt;li&gt;内部边界：程序员最清楚一切&lt;/li&gt;
&lt;li&gt;文件属性和记录结构：没有文件属性&lt;/li&gt;
&lt;li&gt;减少使用不透明的二进制文件格式&lt;/li&gt;
&lt;li&gt;首选CLI命令行界面&lt;/li&gt;
&lt;li&gt;Unix是程序员写给程序员的&lt;/li&gt;
&lt;li&gt;开发的门槛：轻松编程&lt;/li&gt;
&lt;li&gt;操作系统的比较&lt;ul&gt;
&lt;li&gt;MacOS：MacOS有一个自己的界面方针，非常详细地说明了应用程序GUI的表现形式和行为模式&lt;/li&gt;
&lt;li&gt;Windows NT：有注册表蠕变现象，不过支持了Cygwin，实现了Unix API的兼容&lt;/li&gt;
&lt;li&gt;MVS：一切皆批处理&lt;/li&gt;
&lt;li&gt;Linux：贴近终端用户的愿望使得Linux开发者比专有Unix更注重系统安装的平稳性和软件发布问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Design&#34;&gt;&lt;a href=&#34;#Design&#34; class=&#34;headerlink&#34; title=&#34;Design&#34;&gt;&lt;/a&gt;Design&lt;/h2&gt;&lt;h3 id=&#34;模块性&#34;&gt;&lt;a href=&#34;#模块性&#34; class=&#34;headerlink&#34; title=&#34;模块性&#34;&gt;&lt;/a&gt;模块性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;展开来说就是，要编写复杂软件又不至于一败涂地的唯一方法就是用定义清晰的接口把若干简单模块组合起来&lt;/li&gt;
&lt;li&gt;Unix程序员骨子里的传统是：更加笃信重视模块化、更注重正交性和紧凑性等问题&lt;/li&gt;
&lt;li&gt;封装良好的模块不会过多向外披露自身的细节&lt;/li&gt;
&lt;li&gt;缺陷个数随着模块的代码行数会先减小，随后按代码行数的平方上升&lt;/li&gt;
&lt;li&gt;紧凑性和正交性&lt;ul&gt;
&lt;li&gt;人类短期记忆能够容纳的不连续信息数就是7，加2或减2&lt;/li&gt;
&lt;li&gt;紧凑性：有经验的用户通常不需要操作手册，让人乐于使用，不会在想法和工作间格格不入；紧凑不等于薄弱；一个功能子集，能够满足专家用户80%以上的一般需求&lt;/li&gt;
&lt;li&gt;正交性：任何操作均无副作用，改变每个属性的方法有且仅有一个；重构代码就是改变代码的结构和组织，而不改变其外在行为&lt;/li&gt;
&lt;li&gt;任何一个知识点在系统内都应当有一个&lt;strong&gt;唯一&lt;/strong&gt;、明确、权威的表述（Single Point of Truth, SPOT）&lt;/li&gt;
&lt;li&gt;提高紧凑性的精妙但强大的办法就是围绕“解决一个定义明确的问题”的强核心算法组织设计，避免臆断和捏造。形式化往往能极其明晰地阐述一项任务，与形式法相对的是&lt;strong&gt;试探法&lt;/strong&gt;——凭经验法则得到的解决方案，这种思路的问题是回增生出大量特例和边界情况&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;“限制不仅提倡了经济性，而且某种程度上提倡了设计的优雅”。要达到这种简洁性，尽量不要去想一种语言或操作系统最多能做多少事情，而是尽量去想这种语言或操作系统最少能做的事情——不是带着假想行动&lt;/li&gt;
&lt;li&gt;设计有自顶向下和自底向上两种思路，前者通常先考虑主事件循环，再插入具体事件；后者通常先考虑封装具体任务，再按次序粘合在一起&lt;/li&gt;
&lt;li&gt;出于自我保护，程序员尽量双管齐下——一方面以自顶向下的应用逻辑表达抽象规范，另一方面以函数或库来手机底层的域原语（原子操作）&lt;/li&gt;
&lt;li&gt;实际代码往往是自顶向下和自底向上的综合产物。同一个项目经常同时兼有，这就导致了“胶合层”的出现&lt;/li&gt;
&lt;li&gt;胶合层是个挺讨厌的东西，必须尽可能薄，这一点极为重要。薄胶合层原则可以看做是分离原则的升华。策略（应用逻辑）应该与机制（原子操作集）清晰地分离和解耦。&lt;/li&gt;
&lt;li&gt;“完美之道，不在无可增加，而在无可删减”&lt;/li&gt;
&lt;li&gt;OO语言鼓励“具有厚重的胶合和复杂层次”的体系。当问题域真的很复杂、确实需要大量抽象时，这可能是好事，但如果编程员到头来用复杂的方法来做简单的事情——仅仅是为他们能够这样做，结果便适得其反&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;全局变量意味着代码不能重入&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;“就我个人而言，如果局部变量太多，我倾向于拆分子程序。另一个方法是看代码行是否存在（太多）缩进。我几乎从来不看代码长度。——Ken Thompson”&lt;/li&gt;
&lt;li&gt;如果通过电话向另一个程序员描述说不清楚，API可能就是太复杂，设计太糟糕了。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;文本化&#34;&gt;&lt;a href=&#34;#文本化&#34; class=&#34;headerlink&#34; title=&#34;文本化&#34;&gt;&lt;/a&gt;文本化&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;序列化有时被称为列集（marshaling），其反向操作（载入）过程称为散集（unmarshaling）&lt;/li&gt;
&lt;li&gt;互用性、透明性、可扩展性和经济性都是设计文本格式和应用协议需要考虑的问题&lt;/li&gt;
&lt;li&gt;设计一个文本协议往往可以微系统的未来省不少力气；使用二进制协议的唯一正当理由是：如果要处理&lt;strong&gt;大批量&lt;/strong&gt;的数据集，因而确实关注能否在介质上获得最大位密度，或是关心数据转化时的时间或指令开销。大图像和多媒体数据的格式有时可以算是前者的例子，对延时有严格要求的网络协议有则算作后者的例子&lt;/li&gt;
&lt;li&gt;文本格式的位密度未必一定比二进制格式低多少；设计紧凑二进制格式的思路往往不能够兼顾干净扩展的要求&lt;/li&gt;
&lt;li&gt;数据文件元格式是一套句法和词法约定，已经正式标准化或者通过实践得到充分确定&lt;ul&gt;
&lt;li&gt;DSV：冒号是默认的分隔符&lt;/li&gt;
&lt;li&gt;RFC 822：字段名不得包含空格，通常用横线代替，空格和tab作为当前逻辑行的延续&lt;/li&gt;
&lt;li&gt;XML：需要文档类型定义（如XHTML）和相关应用逻辑赋予其语义。通常可以语法检查就能发现形式问题或数据错误&lt;/li&gt;
&lt;li&gt;Unix文本文件约定&lt;ul&gt;
&lt;li&gt;如果可能，以新行符结束的每一行只存一个记录&lt;/li&gt;
&lt;li&gt;每行建议少于80字符&lt;/li&gt;
&lt;li&gt;用&lt;code&gt;#&lt;/code&gt;开始注释&lt;/li&gt;
&lt;li&gt;支持反斜线&lt;code&gt;\&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;用冒号或连续空白作为字段分隔符&lt;/li&gt;
&lt;li&gt;在节格式中，支持连续行&lt;/li&gt;
&lt;li&gt;要么包含一个版本号，要么将格式设计成相互独立的自描述字节块&lt;/li&gt;
&lt;li&gt;不要只压缩或者二进制编码文件的一部分&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;应用协议设计：如果应用协议是文本式的，那仅凭肉眼就能容易地分析，例：SMTP、POP3、IMAP&lt;/li&gt;
&lt;li&gt;应用协议元格式：应用协议元格式是为了简化网络间事务处理的序列化操作而发展出来的，因为网络带宽要比存储昂贵得多，所以需要重视事务处理的经济性&lt;/li&gt;
&lt;li&gt;目前还没有个制订较完善的元协议非常适合真正的P2P应用，不像客户端-服务器应用——HTTP在这一领域的游刃有余&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;透明性&#34;&gt;&lt;a href=&#34;#透明性&#34; class=&#34;headerlink&#34; title=&#34;透明性&#34;&gt;&lt;/a&gt;透明性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;如果软件系统包含的功是为了帮助人们对软件建立正确的“做什么、怎样做”的心理模型而设计，这个软件系统就是可显的&lt;/li&gt;
&lt;li&gt;用户喜欢UI中的透明性和可显性，是因为这意味着学习曲线比较平缓，而“最小立异原则”就是一个体现&lt;/li&gt;
&lt;li&gt;优雅是力量与简洁的结合。优雅的代码事半功倍；优雅的代码不仅正确，而且&lt;strong&gt;显然&lt;/strong&gt;正确；优雅的代码不仅将算法传达给计算机，同时也把简洁和信心传递给阅读代码的人&lt;/li&gt;
&lt;li&gt;编写透明、可显的系统而节省的精力，将来完全可能就是自己的财富&lt;/li&gt;
&lt;li&gt;用户的注意力是宝贵的，让Unix工具正常运行的最好策略是在大部分时间里沉默&lt;/li&gt;
&lt;li&gt;真正的聪明是找到方法，可以访问部分细节，但是又不让它们太显眼&lt;/li&gt;
&lt;li&gt;为透明性和可显性而设计&lt;ul&gt;
&lt;li&gt;不要在具体操作的代码上叠放太多的抽象层&lt;/li&gt;
&lt;li&gt;透明性和可显性同模块性一样，主要是设计的特性而不是代码的特性&lt;ul&gt;
&lt;li&gt;程序调用层级最大深度是多少？&lt;/li&gt;
&lt;li&gt;代码是否有强大而明显的不变性质&lt;/li&gt;
&lt;li&gt;API的各函数调用是否正交&lt;/li&gt;
&lt;li&gt;程序的数据结构或分类和它们代表的外部实体间，是否有一一映射关系&lt;/li&gt;
&lt;li&gt;有多少魔法数字&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;隐藏&lt;/strong&gt;细节和&lt;strong&gt;无法访问&lt;/strong&gt;细节有着重要区别&lt;/li&gt;
&lt;li&gt;透明的系统更容易实施恢复措施，首先就是更能抵抗bug的破坏&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unix程序员的品性：“宁愿抛弃、重建代码也不远修补蹩脚的代码”&lt;/li&gt;
&lt;li&gt;选择简单的算法&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;多路程序控制&#34;&gt;&lt;a href=&#34;#多路程序控制&#34; class=&#34;headerlink&#34; title=&#34;多路程序控制&#34;&gt;&lt;/a&gt;多路程序控制&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Unix最具特点的程序模块化技法就是将大型程序分解成多个合作进程&lt;/li&gt;
&lt;li&gt;Unix的设计风格强调用定义良好的进程间通信或共享文件来联通小型进程。因此，Unix操作系统提倡把程序分解成更简单的子进程，并专注考虑它们之间的接口&lt;ul&gt;
&lt;li&gt;降低进程生成的开销&lt;/li&gt;
&lt;li&gt;提供方法（shellout、IO重定向、管道、消息传递、套接字）简化进程通信&lt;/li&gt;
&lt;li&gt;提倡使用简单透明的文本数据格式来通信&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;真正的难题不在协议语法而是&lt;strong&gt;协议逻辑&lt;/strong&gt;——协议必须既有充分的表达能力又有防范死锁的能力&lt;/li&gt;
&lt;li&gt;Unix的IPC分类&lt;ul&gt;
&lt;li&gt;最简单的形式：调用另一个程序来完成任务；专门程序通常借由文件系统和父进程通信&lt;/li&gt;
&lt;li&gt;管道、重定向和过滤器：过滤器即从标准输入顺序读数据，然后向标准输出写数据；管道操作把程序的标准输出连接到另一个程序的标准输入&lt;/li&gt;
&lt;li&gt;包装器：包装器或者将调用程序专用化，或者为它创建新的接口&lt;/li&gt;
&lt;li&gt;从进程：子程序通过连接到标准输入和标准输出的管道，交互地和调用程序收发数据&lt;/li&gt;
&lt;li&gt;对等进程通信：需要对等的通道&lt;ul&gt;
&lt;li&gt;临时文件：最古老的的IPC技法，灵活但有风险&lt;/li&gt;
&lt;li&gt;信号：每个信号都对机收进程产生默认作用，进程可以声明&lt;strong&gt;信号处理程序&lt;/strong&gt;，让信号处理程序覆盖信号的默认行为&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SIGHUP&lt;/code&gt;，重新初始化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SIGTERM&lt;/code&gt;，温和的终止&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SIGKILL&lt;/code&gt;，立即杀死进程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;套接字：套接字类似文件描述符，创建时可以指定&lt;strong&gt;协议族&lt;/strong&gt;来告诉网络层如何解释套接字名称&lt;/li&gt;
&lt;li&gt;共享内存：共享内存通常依靠&lt;code&gt;mmap&lt;/code&gt;，把文件映射成可以被多个进程共享的内存&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;微型语言&#34;&gt;&lt;a href=&#34;#微型语言&#34; class=&#34;headerlink&#34; title=&#34;微型语言&#34;&gt;&lt;/a&gt;微型语言&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;程序员每百行代码出错率和所使用的编程语言在很大程度上无关&lt;/li&gt;
&lt;li&gt;有两个好方法和一个坏方法做好微型语言的设计&lt;ul&gt;
&lt;li&gt;预先认识到可以使用微型语言设计把变成问题的规格说明提升一个层次&lt;/li&gt;
&lt;li&gt;注意到规格说明文件格式越来越像微型语言——规格中蕴含着行为&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;错误&lt;/strong&gt;的方法是通过扩展变成微型语言&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;微型语言的范畴从声明性发展到命令性，从而逐渐具有通用性，当他们明确为完备图灵机时，它们就是解释器&lt;/li&gt;
&lt;li&gt;样例&lt;ul&gt;
&lt;li&gt;SNG，PNG的纯文本表达&lt;/li&gt;
&lt;li&gt;正则表达式&lt;/li&gt;
&lt;li&gt;Glade，描述GUI界面的XML文件&lt;/li&gt;
&lt;li&gt;m4，一套宏指令集，规定文本串扩展成其他文本串的方式&lt;/li&gt;
&lt;li&gt;XSLT，描述XML数据的变换&lt;/li&gt;
&lt;li&gt;awk，将文本输入变换成文本输出&lt;/li&gt;
&lt;li&gt;PostScript，向成像设备描述排班文本和图片的微型语言&lt;/li&gt;
&lt;li&gt;bc、dc，任意精度计算&lt;/li&gt;
&lt;li&gt;Emacs Lisp&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;设计微型语言&lt;ul&gt;
&lt;li&gt;控制复杂度，声明性微型语言应该具有一个明确、一直、类自然语言的语法被人类所阅读&lt;/li&gt;
&lt;li&gt;扩展和嵌入脚本语言，实现命令性语言&lt;/li&gt;
&lt;li&gt;编写自定义语法&lt;/li&gt;
&lt;li&gt;慎用宏&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;生成&#34;&gt;&lt;a href=&#34;#生成&#34; class=&#34;headerlink&#34; title=&#34;生成&#34;&gt;&lt;/a&gt;生成&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;人类其实更善于肉眼观察数据而不是推导控制流程&lt;/li&gt;
&lt;li&gt;数据比程序逻辑更易驾驭&lt;/li&gt;
&lt;li&gt;数据驱动编程：把代码和代码作用的数据结构分清楚，始终把问题层次往上推，尽量把程序逻辑转移到数据中&lt;/li&gt;
&lt;li&gt;专用代码的生成：尽可能少干活，让数据塑造代码，依靠工具，分离机制和策略&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;配置&#34;&gt;&lt;a href=&#34;#配置&#34; class=&#34;headerlink&#34; title=&#34;配置&#34;&gt;&lt;/a&gt;配置&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;无论何时想增加配置选项，最好考虑下下面的问题&lt;ul&gt;
&lt;li&gt;能省掉这个功能么&lt;/li&gt;
&lt;li&gt;能否有无伤大雅的方式改变程序常规行为&lt;/li&gt;
&lt;li&gt;选项是否过于花哨&lt;/li&gt;
&lt;li&gt;需不需要一个独立的额外程序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unix的程序配置信息一般在以下5个位置&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/etc&lt;/code&gt;下的运行控制文件&lt;/li&gt;
&lt;li&gt;系统设置的环境变量&lt;/li&gt;
&lt;li&gt;用户主目录下的运行控制文件（通常用&lt;code&gt;.&lt;/code&gt;开头）&lt;/li&gt;
&lt;li&gt;用户设置的环境变量&lt;/li&gt;
&lt;li&gt;启动程序命令行参数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可执行未见后面加&lt;code&gt;rc&lt;/code&gt;表示“运行控制”（命名来自CTSS的runcom命令脚本功能）&lt;/li&gt;
&lt;li&gt;一些最为常见的系统环境变量：&lt;code&gt;USER&lt;/code&gt;，&lt;code&gt;LOGNAME&lt;/code&gt;，&lt;code&gt;HOME&lt;/code&gt;，&lt;code&gt;LINES&lt;/code&gt;，&lt;code&gt;SHELL&lt;/code&gt;，&lt;code&gt;PATH&lt;/code&gt;等&lt;/li&gt;
&lt;li&gt;常见的从&lt;code&gt;-a&lt;/code&gt;到&lt;code&gt;-z&lt;/code&gt;的命令行选项的可能含义&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-a&lt;/code&gt;，所有、添加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-b&lt;/code&gt;，缓冲区、批处理&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-c&lt;/code&gt;，命令、检查&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-d&lt;/code&gt;，调试、删除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-D&lt;/code&gt;，定义&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-e&lt;/code&gt;，执行、编辑&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-f&lt;/code&gt;，文件、强制执行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-g&lt;/code&gt;，全局&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-h&lt;/code&gt;，头部、帮助&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-i&lt;/code&gt;，初始化、交互式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-k&lt;/code&gt;，保留、杀死&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-l&lt;/code&gt;，列表、登录、加载&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-m&lt;/code&gt;，消息、邮件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-n&lt;/code&gt;，数字、否&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-o&lt;/code&gt;，输出&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-p&lt;/code&gt;，端口&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-q&lt;/code&gt;，安静&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-r&lt;/code&gt;，递归&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-s&lt;/code&gt;，缄默，大小&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-t&lt;/code&gt;，标记&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-u&lt;/code&gt;，用户&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-v&lt;/code&gt;，冗长&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-V&lt;/code&gt;，版本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-w&lt;/code&gt;，宽度&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-y&lt;/code&gt;，是&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-z&lt;/code&gt;，启用压缩&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;接口设计&#34;&gt;&lt;a href=&#34;#接口设计&#34; class=&#34;headerlink&#34; title=&#34;接口设计&#34;&gt;&lt;/a&gt;接口设计&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;从最小立异原则出发，启动后程序通常从下列来源获得输入或命令&lt;ul&gt;
&lt;li&gt;程序标准输入端的数据和命令&lt;/li&gt;
&lt;li&gt;通过IPC的输入&lt;/li&gt;
&lt;li&gt;已知位置的文件和设备&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最小立异原则不应被理解为在设计中号召机械的保守主义，新颖性提高了用户与接口最初几次的交互成本，但是糟糕的设计永远使接口令人痛苦而多余&lt;/li&gt;
&lt;li&gt;“我们提倡以共生和委派策略来提高代码的复用并降低软件复杂度”&lt;/li&gt;
&lt;li&gt;最小立异原则目的就是为了减少用户在使用接口时必须学习的复杂过程&lt;/li&gt;
&lt;li&gt;Unix接口设计历史：CLI &amp;#x3D;&amp;gt; X&lt;/li&gt;
&lt;li&gt;接口的5种度量标准：&lt;strong&gt;简洁、表现力、易用、透明和脚本化能力&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;简洁：事务处理需要的时间和复杂度需要有上限&lt;/li&gt;
&lt;li&gt;表现力：接口可以触发广泛的行为&lt;/li&gt;
&lt;li&gt;易用性：接口要求用户记忆的东西较少&lt;/li&gt;
&lt;li&gt;透明度：用户使用接口时，几乎不用记忆什么问题、数据或者程序状态&lt;/li&gt;
&lt;li&gt;脚本能力：容易被其他程序使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CLI和可视化接口的对比&lt;ul&gt;
&lt;li&gt;CLI更具表达力、脚本化能力、简洁性，适用于举例：SQL&lt;/li&gt;
&lt;li&gt;可视化接口透明度、易用性较好，适用性举例：画图、网页浏览器&lt;/li&gt;
&lt;li&gt;随着用户越来越熟练，对CLI接口的抵触也越少&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unix接口设计模式&lt;ul&gt;
&lt;li&gt;过滤器：接受输入，转换成其他格式，再输出到标准输出端；宽进严出、不丢弃不需要的信息、不增加无用数据&lt;/li&gt;
&lt;li&gt;cantrip（没有输入输出）、源模式（无输入且输出在启动条件中控制）、接收器模式（接收输入但不发送东西到输出）、编译器模式（无标准输入输出，但会发送信息到标准错误端）&lt;/li&gt;
&lt;li&gt;ed模式（编辑器模式）&lt;/li&gt;
&lt;li&gt;roguelike模式（来自BSD的地牢探险游戏rogue，用字符阵列显示界面UI），如vi、emacs，没有鼠标参与，适合指法熟练的人&lt;/li&gt;
&lt;li&gt;引擎和接口分离，又或者模型和视图分离，了解MVC模式的人自然了解&lt;ul&gt;
&lt;li&gt;配置者、执行者&lt;/li&gt;
&lt;li&gt;假脱机、守护进程&lt;/li&gt;
&lt;li&gt;驱动、引擎&lt;/li&gt;
&lt;li&gt;客户端、服务端&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;基于语言的接口模式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;浏览器作为通用前端&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;如果程序没有什么有趣的或者惊奇的东西要说就应该闭嘴&lt;/strong&gt;（有点意思）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;优化&#34;&gt;&lt;a href=&#34;#优化&#34; class=&#34;headerlink&#34; title=&#34;优化&#34;&gt;&lt;/a&gt;优化&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Unix的经验告诉我们最主要的就是如何知道何时不去优化&lt;/li&gt;
&lt;li&gt;最强大的优化技术就是&lt;strong&gt;不去优化&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;先估量，后优化，直觉是糟糕的向导&lt;/li&gt;
&lt;li&gt;最有效的代码优化方法是保持代码短小简单&lt;/li&gt;
&lt;li&gt;核心数据结构必须留在最快的缓存&lt;/li&gt;
&lt;li&gt;吞吐量和延迟时间的权衡是普遍现象，例TCP、UDP&lt;/li&gt;
&lt;li&gt;对于减少延迟来说，阻塞或等待中间结果都是致命的&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;按需计算&lt;/strong&gt;出昂贵的结果，再&lt;strong&gt;缓存&lt;/strong&gt;起来之后使用，可以兼得&lt;strong&gt;低延迟&lt;/strong&gt;和&lt;strong&gt;高吞吐&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;复杂度&#34;&gt;&lt;a href=&#34;#复杂度&#34; class=&#34;headerlink&#34; title=&#34;复杂度&#34;&gt;&lt;/a&gt;复杂度&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;简单即美即雅即善，而复杂即丑即怪即恶&lt;/li&gt;
&lt;li&gt;程序员为了理解一个程序，会建立思维模型并调试之；程序的复杂度即模型建立和程序调试的困难程度&lt;/li&gt;
&lt;li&gt;Unix思想的一个主题就是&lt;strong&gt;工具小巧锐利，设计从零开始，接口简单一致&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;偶然复杂度&lt;/strong&gt;的产生是因为没有找到实现规定功能集合的最简方法，可以通过良好设计去除；&lt;strong&gt;选择复杂度&lt;/strong&gt;和期望的功能相关联，只能通过修改工程目标解决&lt;/li&gt;
&lt;li&gt;计算资源以及人类的思考，同财富一样，不是靠储藏而是靠消费来证明价值的&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;选择需要管理的上下文环境，并且按照边界所允许的最小化方式构建程序&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Implementation&#34;&gt;&lt;a href=&#34;#Implementation&#34; class=&#34;headerlink&#34; title=&#34;Implementation&#34;&gt;&lt;/a&gt;Implementation&lt;/h2&gt;&lt;h3 id=&#34;语言&#34;&gt;&lt;a href=&#34;#语言&#34; class=&#34;headerlink&#34; title=&#34;语言&#34;&gt;&lt;/a&gt;语言&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;C和C++以增加实现时间和（特别是）调试时间为代价来优化效率&lt;/li&gt;
&lt;li&gt;C的内存管理是复杂性和错误的渊薮&lt;/li&gt;
&lt;li&gt;C语言最佳之处是资源效率和接近机器语言，糟糕的地方是槟城简直是资源管理的炼狱&lt;/li&gt;
&lt;li&gt;C++试图满足所有人的所有要求&lt;/li&gt;
&lt;li&gt;Perl是增强版的shell，它为替代&lt;code&gt;awk&lt;/code&gt;而设计，适合大量使用正则表达式的地方&lt;/li&gt;
&lt;li&gt;Java的设计目标是“write once, run anywhere”，但它并没有实现这两个最初的设计目标&lt;/li&gt;
&lt;li&gt;Java对小项目是大材小用&lt;/li&gt;
&lt;li&gt;Emacs Lisp传统上只用于为Emacs编辑器编写本身的控制程序&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;重用&#34;&gt;&lt;a href=&#34;#重用&#34; class=&#34;headerlink&#34; title=&#34;重用&#34;&gt;&lt;/a&gt;重用&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;重新发明轮子之所以糟糕不仅因为浪费时间，还因为它浪费的时间往往是平方级&lt;/li&gt;
&lt;li&gt;避免重新发明轮子的有效方法就是借用别人的设计和实现，即重用代码&lt;/li&gt;
&lt;li&gt;文档并不能传达代码具现的所有细微差别之处&lt;/li&gt;
&lt;li&gt;开放源码和代码重用的关系，许多地方很像浪漫爱情和有性生殖的关系&lt;/li&gt;
&lt;li&gt;设计最好的实践需要情感的投入；软件开发者，同其他任何类型的工匠和技师一样；他们想要成为艺术家，这并不是什么私密。他们有艺术家的动力和需求，也拥有听众的欲望&lt;/li&gt;
&lt;li&gt;开放源码是从意识形态上解决这些所有问题的优先方法&lt;/li&gt;
&lt;li&gt;发布不够格软件的作者会承受许多的社会压力来修正或撤回代码（不一定）&lt;/li&gt;
&lt;li&gt;阅读代码是为未来而投资&lt;/li&gt;
&lt;li&gt;&lt;h2 id=&#34;许可证-许可证能够授权代码以某种形式使用，否则在版权法之下是禁止或者需要付费的-非商业使用的许可证并不等同于开源许可证&#34;&gt;&lt;a href=&#34;#许可证-许可证能够授权代码以某种形式使用，否则在版权法之下是禁止或者需要付费的-非商业使用的许可证并不等同于开源许可证&#34; class=&#34;headerlink&#34; title=&#34;许可证- 许可证能够授权代码以某种形式使用，否则在版权法之下是禁止或者需要付费的- 非商业使用的许可证并不等同于开源许可证&#34;&gt;&lt;/a&gt;许可证&lt;br&gt;- 许可证能够授权代码以某种形式使用，否则在版权法之下是禁止或者需要付费的&lt;br&gt;- 非商业使用的许可证并不等同于开源许可证&lt;/h2&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Community&#34;&gt;&lt;a href=&#34;#Community&#34; class=&#34;headerlink&#34; title=&#34;Community&#34;&gt;&lt;/a&gt;Community&lt;/h2&gt;&lt;h3 id=&#34;可移植性&#34;&gt;&lt;a href=&#34;#可移植性&#34; class=&#34;headerlink&#34; title=&#34;可移植性&#34;&gt;&lt;/a&gt;可移植性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;C语言基于早期Ken Thompson的B语言解析器，脱胎于BCPL（Basic Common Programming Language），因此这个C代表Common（通用）&lt;/li&gt;
&lt;li&gt;在IETF传统中，标准必须来自于一个可用原型实现的经验；不幸的是，这并不是标准通常发展的方式&lt;/li&gt;
&lt;li&gt;搞笑RFC大概是唯一能够立即成为RFC的提议，比如RFC 1149（IP数据报的信鸽传递），RFC 2324（超文本咖啡壶控制协议）&lt;/li&gt;
&lt;li&gt;对于具备提倡标准资格的RFC，其规格必须稳定，经过同行评审，并且已经吸引了互联网社区的极大兴趣&lt;/li&gt;
&lt;li&gt;IETF标准化过程有意提倡由实践而非理论驱动的标准化过程&lt;/li&gt;
&lt;li&gt;国际化的首要动作：&lt;strong&gt;分离信息库（配置）和代码&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;“暗含的意思就是，成为标准的最好方法就是发布一个高质量的开源实现” —— Henry Spencer&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;文档&#34;&gt;&lt;a href=&#34;#文档&#34; class=&#34;headerlink&#34; title=&#34;文档&#34;&gt;&lt;/a&gt;文档&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;“一切皆HTML，所有引用都是URL”&lt;/li&gt;
&lt;li&gt;绝大多数软件的文档都是由技术人员写给可能连最小公分母都不知道的普通大众的——渊博者写给无知者&lt;/li&gt;
&lt;li&gt;编写Unix文档的最佳实践&lt;ul&gt;
&lt;li&gt;数量多不会被认为是质量高&lt;/li&gt;
&lt;li&gt;信息密度适中，少用屏幕截图&lt;/li&gt;
&lt;li&gt;没人喜欢庞大的文档，考虑提供快速的摘要&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;开放源码&#34;&gt;&lt;a href=&#34;#开放源码&#34; class=&#34;headerlink&#34; title=&#34;开放源码&#34;&gt;&lt;/a&gt;开放源码&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;开源开发的规则&lt;ul&gt;
&lt;li&gt;源码公开&lt;/li&gt;
&lt;li&gt;尽早发布，经常发布&lt;/li&gt;
&lt;li&gt;给贡献以表扬&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;major.minor.patch&lt;/code&gt;，补丁号修正错误和次要功能；次版本号为兼容的新功能；主版本号为不兼容的更改&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;发布前对文档和README进行拼写检查&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;基于所需功能而不是平台来编写移植层（面向接口编程）&lt;ul&gt;
&lt;li&gt;“&lt;code&gt;#ifdef&lt;/code&gt;和&lt;code&gt;#if&lt;/code&gt;是最后一招，这通常是思路不当、产品过度差异化，无理由‘优化’或是无用垃圾聚集的先兆” —— Doug Mcllroy&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;选择一个编码规范（lint）&lt;/li&gt;
&lt;li&gt;常见的标准文件命名规范&lt;ul&gt;
&lt;li&gt;README&lt;/li&gt;
&lt;li&gt;INSTALL&lt;/li&gt;
&lt;li&gt;AUTHORS&lt;/li&gt;
&lt;li&gt;NEWS&lt;/li&gt;
&lt;li&gt;HISTORY&lt;/li&gt;
&lt;li&gt;CHANGES&lt;/li&gt;
&lt;li&gt;COPYING 项目许可证条款&lt;/li&gt;
&lt;li&gt;LICENSE&lt;/li&gt;
&lt;li&gt;FAQ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;以版本号来命名目录，考虑多版本在同一系统共存&lt;/li&gt;
&lt;li&gt;在设计讨论中更广泛的参与常常是件好事，但是如果列表相对开放，迟早就会有些用户在其上询问一些初级问题&lt;/li&gt;
&lt;li&gt;开源许可证&lt;ul&gt;
&lt;li&gt;MIT：授予无限权利的拷贝、使用、修改和对修改的再发布，只要在所有修改版本中保留版权和许可证条款&lt;/li&gt;
&lt;li&gt;BSD：授予无限权利的拷贝、使用、修改和对修改的再发布，只要在所有修改版本中保留版权和许可证条款；同时在广告和软件包相关文档中包含致谢&lt;/li&gt;
&lt;li&gt;Artistic：授予无限权利的拷贝、使用和本地修改的权利。允许在发行修改后的二进制版本，但是限制源码再发行&lt;/li&gt;
&lt;li&gt;GPL、Mozilla&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;未来&#34;&gt;&lt;a href=&#34;#未来&#34; class=&#34;headerlink&#34; title=&#34;未来&#34;&gt;&lt;/a&gt;未来&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;分离机制（配置）与策略（算法）成为一个明确准则&lt;/li&gt;
&lt;li&gt;Unix文件仅仅是个字节大袋子，而没有其他文件属性&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;开放源码将软件业转变为服务业&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;–END–&lt;/em&gt;&lt;/p&gt;
</content>
        <category term="设计模式" />
        <category term="Unix" />
        <updated>2021-01-29T13:45:15.000Z</updated>
    </entry>
    <entry>
        <id>http://shenlvmeng.github.com/blog/2021/01/05/2020-to-2021/</id>
        <title>2020回顾暨2021展望</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2021/01/05/2020-to-2021/"/>
        <content type="html">&lt;p&gt;2019年写下第一篇&lt;a href=&#34;https://shenlvmeng.github.io/blog/2019/01/03/2018-to-2019/&#34;&gt;总结&lt;/a&gt;的时候，也未曾想到，这会成为一种一年一度的仪式，甚至能吸引到听众。但既然开始了，最好也能坚持下去。&lt;/p&gt;
&lt;p&gt;如果说2019充满意外的话，2020只会是加大分量。不论是喜悦还是痛苦，2020留下的印记都格外得深一些。整体来看，由于遇到了一些预料之外的事情，在自我提升上向陌生方向多走了一些，不知是好是坏。&lt;/p&gt;
&lt;h2 id=&#34;2020回顾&#34;&gt;&lt;a href=&#34;#2020回顾&#34; class=&#34;headerlink&#34; title=&#34;2020回顾&#34;&gt;&lt;/a&gt;2020回顾&lt;/h2&gt;&lt;p&gt;内在素质上，阅读技术非技术方面的书籍完成5本，小说6本。基本完成任务。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://shenlvmeng.github.io/blog/2019/12/24/golang-learning/&#34;&gt;Go语言入门学习&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://shenlvmeng.github.io/blog/2020/05/31/pragmatic-thinking-and-learning/&#34;&gt;《程序员思维修炼》—— 思维方式和学习技巧&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://shenlvmeng.github.io/blog/2020/06/01/principles-of-macroeconomics/&#34;&gt;《经济学原理》 - 宏观经济学原理笔记&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://shenlvmeng.github.io/blog/2020/08/12/soft-skills-for-software-developer/&#34;&gt;《软技能 —— 代码外的生存指南》书摘&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://shenlvmeng.github.io/blog/2020/08/17/refactoring-design-improvement/&#34;&gt;重构 —— 代码的实用性与艺术性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;整体还是在东看看西看看的阶段，其中《程序员思维修炼》一书对思维方式的介绍补足了自己的知识体系中方法论的部分。《软技能》一书启发了在理财方面的一些认识。&lt;/p&gt;
&lt;p&gt;大多数的书还是看了又忘，忘了就再看看总结，然后再淡忘。这个过程中，留在知识体系里幸存的部分并不多。尤其是编程相关的书籍，还是需要靠实践做项目来巩固所看的内容。没错，说的就是《Go语言入门学习》。&lt;/p&gt;
&lt;p&gt;个人形象上，作息时间基本达到预期计划。但由于出现了新爱好（调酒），买衣服的计划被长期搁置。工装裤和卫衣还是去年那些，果然这两样买再多都不够。体重略有下降，回到80。算是基本完成目标。发型在推平后，又往偏分的方向留了起来，和此前的侧背区别不甚大。短发在身边朋友的反馈里居然还不错。&lt;/p&gt;
&lt;p&gt;社交上，丢失和主动放弃了一些朋友，大多是三观不合或者事业变动。在和朋友的沟通交往中，更偏向主动。不过长期如此，还挺累的。热情不用更热情了，倒是应该更加增大交友面。有试图发展亲密关系的朋友，在对象上有过努力，也同时认识到很多道理，此处略去。&lt;/p&gt;
&lt;p&gt;生活情趣上，在骑车、拉琴、看电影上仍旧投入较多业余时间，其中骑车的设备也一直还是那辆老旧的山地车。拉琴和看电影上也没有什么投入。同时，发展了喝酒和调鸡尾酒的爱好。在冰箱中屯了很多，对基酒和调酒也有了些认识。骑行上，因为圣僧的工作变动，离开了北京，一位年轻的同事成为了新的骑友。百里画廊未能成行，但是&lt;a href=&#34;https://shenlvmeng.github.io/blog/2020/10/06/tour-to-qinghai-lake/&#34;&gt;青海湖&lt;/a&gt;成功成行，也是一次难忘的经历。旅行上，疫情原因日本没去成，年末去了广州，吃了好吃的一本满足。拉琴上，一直也有练习，有能熟练演奏的曲目，不过都还需要看谱演奏。另外，也在公司内做过相关分享。新爱好上，看了第一次话剧，livehouse一直没遇到喜欢的乐队，未能成行。另外因为厨房卫生问题，在家做饭频率下降，反而提高了探店的频率。整体看，生活还蛮有趣味。&lt;/p&gt;
&lt;p&gt;工作事业上，发展尚可，背靠还不错的项目组，也遇到了很多挑战，有了带小方向的机会，在团队建设上也开始有了思考。不过进步速度在下半年有所减缓，注意力有些偏移。希望在下一年能调整过来。&lt;/p&gt;
&lt;h3 id=&#34;简单说几句&#34;&gt;&lt;a href=&#34;#简单说几句&#34; class=&#34;headerlink&#34; title=&#34;简单说几句&#34;&gt;&lt;/a&gt;简单说几句&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;积累太过理想化书面化，积累些现实点的东西，不是坏事&lt;/li&gt;
&lt;li&gt;穿衣上，裤长是最严重的问题&lt;/li&gt;
&lt;li&gt;要少喝酒，小酌小酌&lt;/li&gt;
&lt;li&gt;坚持作息和三餐，坚持骑行登山游泳轧马路&lt;/li&gt;
&lt;li&gt;要能清醒思考个人价值和现实价值&lt;/li&gt;
&lt;li&gt;一段长久的亲密关系应该是相互成就而不是相互束缚的&lt;/li&gt;
&lt;li&gt;爱合理分布在亲人、伴侣、朋友身上&lt;/li&gt;
&lt;li&gt;事业上决断力要提高，还要画饼能力，越大越好&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2021展望&#34;&gt;&lt;a href=&#34;#2021展望&#34; class=&#34;headerlink&#34; title=&#34;2021展望&#34;&gt;&lt;/a&gt;2021展望&lt;/h2&gt;&lt;p&gt;OK，又到了flag时间。吸取前两年的经验，目标不宜太明确，往往有意外惊喜。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;内在&lt;/strong&gt;：看完囤积的4本业务书籍和10本左右小说&lt;ul&gt;
&lt;li&gt;再寻找一项和前端覆盖率类似的技术点去探索突破&lt;/li&gt;
&lt;li&gt;能清醒地评估个人价值，先知己&lt;/li&gt;
&lt;li&gt;回顾过去几年积累，完善知识体系&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;外在&lt;/strong&gt;：尝试新风格，保持健康，坚持运动&lt;ul&gt;
&lt;li&gt;坚持吃早饭和早睡&lt;/li&gt;
&lt;li&gt;增加锻炼频率&lt;/li&gt;
&lt;li&gt;发型尝试&lt;/li&gt;
&lt;li&gt;基本款补齐（同去年）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;情感&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;平衡爱的收入和支出，更有自信&lt;/li&gt;
&lt;li&gt;能给一个人未来&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;生活&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;寻找一些提高生活幸福感的小东西或者经验&lt;/li&gt;
&lt;li&gt;保持室内干净卫生&lt;/li&gt;
&lt;li&gt;必要的旅行&lt;/li&gt;
&lt;li&gt;固定的户外长途骑行&lt;/li&gt;
&lt;li&gt;尝试新的菜式&lt;/li&gt;
&lt;li&gt;坚持拉琴、电影、探店&lt;/li&gt;
&lt;li&gt;至少一次livehouse&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事业&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;思考职业规划和发展路线&lt;/li&gt;
&lt;li&gt;考虑落脚城市、医疗、教育等现实因素&lt;/li&gt;
&lt;li&gt;也去考虑父母的未来生活质量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;就这么多吧，流水账短点为妙。诸位明年见~&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Bye~&lt;/em&gt;&lt;/p&gt;
</content>
        <category term="总结" />
        <category term="2020" />
        <category term="2021" />
        <updated>2021-01-05T15:32:20.000Z</updated>
    </entry>
    <entry>
        <id>http://shenlvmeng.github.com/blog/2020/10/06/tour-to-qinghai-lake/</id>
        <title>记青海湖骑行</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2020/10/06/tour-to-qinghai-lake/"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;随便写写。旅程中的大多数美好，事后回忆，原来都在造化中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;序：准备阶段&#34;&gt;&lt;a href=&#34;#序：准备阶段&#34; class=&#34;headerlink&#34; title=&#34;序：准备阶段&#34;&gt;&lt;/a&gt;序：准备阶段&lt;/h2&gt;&lt;p&gt;这次旅行本该在&lt;a href=&#34;https://shenlvmeng.github.io/blog/2019/09/16/tour-to-lijiang-and-dali/&#34;&gt;去年国庆&lt;/a&gt;成行，由于假期有限等种种原因delay到今年这个长假。又碰巧赶上疫情和中秋带来的额外假期，于是7、8月便早早和档期向来紧张的圣僧约好。圣僧和我本是隔壁宿舍关系，从3年多前的一次结伴骑行结缘，是我的长期骑友。他是个旅行达人（友链一波：&lt;a href=&#34;https://feichashao.com/travels/&#34;&gt;肥叉烧&lt;/a&gt;），身在外企，有钱有闲，经常出游，经验丰富。正巧这次碰上疫情，国外无处可去，和我定好日程后，三下五除二便把攻略搞定。和他一起出游真是省心。&lt;/p&gt;
&lt;h2 id=&#34;Day-1：银川&#34;&gt;&lt;a href=&#34;#Day-1：银川&#34; class=&#34;headerlink&#34; title=&#34;Day 1：银川&#34;&gt;&lt;/a&gt;Day 1：银川&lt;/h2&gt;&lt;p&gt;出于下面多个因素考虑（其实主要是第三项），我们第一天先出发去银川。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;假期时间充裕&lt;/li&gt;
&lt;li&gt;慢慢适应高海拔&lt;/li&gt;
&lt;li&gt;中转机票更便宜&lt;/li&gt;
&lt;li&gt;凭借圣僧的会员，中转免费送一晚住宿外加去市区的大巴券&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为这次是从大兴机场出发，还是8点半的飞机，早上5点就得起床。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/00ltL6.jpg&#34; alt=&#34;清晨的知春路口&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们在机场值机柜台碰面，托运完行李时间已经不早了，于是直接就安检进站。安检中还没收了我的修车工具（😢）。这也是这一路意外离开我的第一样东西。突然到我都没拍张照给它留个纪念。&lt;/p&gt;
&lt;p&gt;进站后，借助圣僧招行信用卡会员，一起在VIP休息厅吃了个早餐，条件还不错。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/00les0.jpg&#34; alt=&#34;VIP休息厅视角&#34;&gt;&lt;/p&gt;
&lt;p&gt;9月26号的银川天气不错，我们住宿的酒店——西港航空饭店距离银川河东机场非常近。酒店建筑整体很新，周围被各种绿化围绕，完全感觉不到在西北。另外房间很大，由于远离市区，环境也很安静。加上是中转免费送的，算是我们整个旅程中最满意的住宿体验了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/00lMoF.jpg&#34; alt=&#34;西港-1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/00lKdU.jpg&#34; alt=&#34;西港-2&#34;&gt;&lt;/p&gt;
&lt;p&gt;在房间里稍作休息，我们步行到机场坐大巴前往市区，大巴券25元一位，我们使用的中转服务的免费大巴券直接乘车。大约1小时车程，我们在终点站鼓楼下车便进入了市中心。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/00luZT.jpg&#34; alt=&#34;鼓楼&#34;&gt;&lt;/p&gt;
&lt;p&gt;稍微逛逛，我和圣僧很快就发现了多不胜数的&lt;strong&gt;蜜雪冰城&lt;/strong&gt;，几乎不见其他知名品牌，剩下的也都是没听过名字的小牌子。在竞争上，蜜雪冰城比上有其很能打的性价比，比下又有标准化保证。4元的柠檬水、5元的奶茶、2元的圆筒冰淇淋。天哪，这也太香了。蜜雪冰城也将成为我们后面旅程中的一大精神寄托，按下不表。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/00lmLV.jpg&#34; alt=&#34;蜜雪冰城&#34;&gt;&lt;/p&gt;
&lt;p&gt;作为回族自治区的省会，菜单中自然没有猪肉，取而代之的是各种&lt;strong&gt;羊肉&lt;/strong&gt;。从鼓楼步行街向西走过几个路口，我们惯例性在地在邮局寄了明信片。随后在旁边的迎宾楼吃了午饭，尝了下号称特色的手抓羊肉。这么一盘98元，没想象中好吃，吃了三分之一就有点腻了。最后打包给圣僧当了晚餐。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/00lli4.jpg&#34; alt=&#34;手抓羊肉&#34;&gt;&lt;/p&gt;
&lt;p&gt;吃饱喝足，下个目标是带些伴手礼。宁夏的&lt;strong&gt;枸杞&lt;/strong&gt;是比较出名的，其中以中卫的为最优。枸杞分红枸杞和黑枸杞，都没有明确的药用价值。但是日常保健还是有用的，号称能补气虚，很适合阳气虚弱的男性。黑枸杞据说劲儿更野一点。稍微做了下功课，我们在超市一人来了2斤，一斤75元。事后看，这个价格似乎有些上当，建议各位小买怡情即可。&lt;/p&gt;
&lt;p&gt;银川城区内的共享单车似乎都是电动车，不论是青桔还是小蓝，还是美团单车。在一天的观察下，只注意到凤毛麟角的人力单车。这到底是因为当地人自行车技术很烂还是电动车驾驶技术很普及？挺有意思。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/00l3W9.jpg&#34; alt=&#34;共享单车&#34;&gt;&lt;/p&gt;
&lt;p&gt;天色渐暗，在人民公园感受了城市氛围后，我们乘坐大巴回到西港航空饭店，为第二天前往西宁做准备。&lt;/p&gt;
&lt;h2 id=&#34;Day-2-西宁&#34;&gt;&lt;a href=&#34;#Day-2-西宁&#34; class=&#34;headerlink&#34; title=&#34;Day 2: 西宁&#34;&gt;&lt;/a&gt;Day 2: 西宁&lt;/h2&gt;&lt;p&gt;西宁相比银川更有省会的感觉。不同于银川的回族居多，西宁有着比较明显的藏族气息，藏民也很常见。高海拔的强烈紫外线下，大多数人都是黝红的脸。由于第二天要坐大巴前往西海镇，我们这一天住在汽车站旁边的如家，在市区中处于偏东郊的位置。不出意外，楼下又是一家蜜雪冰城。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/00l1JJ.jpg&#34; alt=&#34;酒店&#34;&gt;&lt;/p&gt;
&lt;p&gt;西宁城区内有湟水自西向东流过，我们下午先是打车到了河边的&lt;strong&gt;中心广场&lt;/strong&gt;，类似北京的元大都城垣遗址一样，不过明显更大且更有层次，湟水河宽度近似海河。在河边坐也好，走也好，感觉都是很不错的。下午3点，气温十余度，在河边的长椅上，一直都能看到飞机在高楼的天际线上划过。&lt;/p&gt;
&lt;p&gt;西宁海拔约2100左右，处于多个山脉中的河谷地区，适宜建设城市的面积不大，只有大概一个十字形状的区域。所以城区中的楼房都格外的高，且能看出一些地势起伏。整体感觉，似乎来到了小号版的重庆。和重庆一样，这里看不到共享单车。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/00l8zR.jpg&#34; alt=&#34;城市景观&#34;&gt;&lt;/p&gt;
&lt;p&gt;不过从一些城市的角落，还是能瞥见藏在深处的旧工业时代的厂房气息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/00lJQ1.jpg&#34; alt=&#34;旧厂房&#34;&gt;&lt;/p&gt;
&lt;p&gt;我比较偏好用随便走走四处看看的方式感受城市的风格。下午我们从中心广场绕过&lt;strong&gt;力盟商业区&lt;/strong&gt;，再穿过九龙城寨般的&lt;strong&gt;商业巷大世界&lt;/strong&gt;，从&lt;strong&gt;人民公园&lt;/strong&gt;门口向回走，最后又回到颇具人气的力盟步行街。不能免俗，吃了顿呷哺呷哺。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/00lYsx.jpg&#34; alt=&#34;呷哺呷哺&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Day-3-西海镇-种羊场&#34;&gt;&lt;a href=&#34;#Day-3-西海镇-种羊场&#34; class=&#34;headerlink&#34; title=&#34;Day 3: 西海镇 - 种羊场&#34;&gt;&lt;/a&gt;Day 3: 西海镇 - 种羊场&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;里程：48km&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;去西海镇的车票我们是提前一天买好的，25元。但因为游客不多，其实也可以当天早上买。从火车站背后上京藏高速，一路穿过湟中区、湟源县、海晏县就到达了最终骑行的出发点西海镇，全程约2小时。租车上，我们早已提前和当地租车师傅约好，6天行程，租车500元，外加解决住宿700元（对租车店老板安排的住宿不要抱太高期望）和押金500元（结束骑行后退还），一共1700元。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/003oq0.jpg&#34; alt=&#34;西宁到西海镇&#34;&gt;&lt;/p&gt;
&lt;p&gt;西海镇是海北藏族自治州的州首府，不过却意外的荒凉，街道两边政府部门倒是周正齐全，基础设施也是一应完善，可是就是人迹稀少，连车都没几辆。我们下车后已经10点，第一天尚有40多公里的路程要骑。我们调试好车辆，装好驮包，穿戴好装备，擦好防晒（这个十分重要），简单吃了个饭就出发了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/003Q29.jpg&#34; alt=&#34;出发合影&#34;&gt;&lt;/p&gt;
&lt;p&gt;沿着刚察路直走，穿过和G213国道的路口，就上了环湖东路。沿着环湖东路直走就可以达到第一天的目的地——湖东种羊场。路线也是相当简单。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/003KC4.jpg&#34; alt=&#34;路牌&#34;&gt;&lt;/p&gt;
&lt;p&gt;初见丘陵和草原，配合着壮观的云层，还是很有新鲜感的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/003n5F.jpg&#34; alt=&#34;草原1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/003mUU.jpg&#34; alt=&#34;草原2&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/003M8J.jpg&#34; alt=&#34;山丘1&#34;&gt;&lt;/p&gt;
&lt;p&gt;第一天的路并不像路书中那样全是平路，相反上下坡并不少。幸运的是，路边的景观稍微减缓了骑行的疲惫感。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/0033K1.jpg&#34; alt=&#34;上坡1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/003lvR.jpg&#34; alt=&#34;上坡2&#34;&gt;&lt;/p&gt;
&lt;p&gt;穿过和G213国道的分岔路口后，我们离湖越来越近了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/003YVK.jpg&#34; alt=&#34;996&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/003Gb6.jpg&#34; alt=&#34;路牌&#34;&gt;&lt;/p&gt;
&lt;p&gt;随着湖水越来越近，金银潭和沙岛上起伏的沙丘却是也越来越显眼。湖边的荒漠化土地是我预先没想到的，据说是气候原因导致。但从沿路看到的各种牛羊来推断，和过度放牧可能也有些关系。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/0038Dx.jpg&#34; alt=&#34;沙漠1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/003N5D.jpg&#34; alt=&#34;牦牛1&#34;&gt;&lt;/p&gt;
&lt;p&gt;穿过金银滩沙漠区，是一个大下坡，下坡后路两侧又逐渐恢复了植被和河流，看起来顺眼多了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/003aPe.jpg&#34; alt=&#34;大下坡&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/003tUO.jpg&#34; alt=&#34;绿地&#34;&gt;&lt;/p&gt;
&lt;p&gt;青海湖边地广人稀（整个青海除了西宁和海东应该都是地广人稀），除了风声，路两旁十分宁静，若是没有毒辣的紫外线，实在惬意极了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/003d8H.jpg&#34; alt=&#34;车1&#34;&gt;&lt;/p&gt;
&lt;p&gt;再往前骑数公里，终于到达种羊场。这并不是一个镇或县，顶多是围绕湖东种羊场的一个聚落。住宿环境自然十分感人。卫生糟糕，门窗都可以从外面打开。具老板所说，这里民风淳朴，姑且只能信了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/003w2d.jpg&#34; alt=&#34;种羊场住宿&#34;&gt;&lt;/p&gt;
&lt;p&gt;幸好有&lt;strong&gt;炕锅羊肉&lt;/strong&gt;和壮观的落日场景可以抚慰。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/003rrt.jpg&#34; alt=&#34;炕锅羊肉&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/0030xA.jpg&#34; alt=&#34;落日1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/003DKI.jpg&#34; alt=&#34;落日2&#34;&gt;&lt;/p&gt;
&lt;p&gt;青海湖周围海拔3200到3400，昼夜温差较大，太阳一落山，气温就比较冷了。种羊场也无甚可逛，我们直接倒头就睡，洗漱更衣直接放弃。只期待第二天住宿能好点。&lt;/p&gt;
&lt;h2 id=&#34;Day-4-种羊场-江西沟&#34;&gt;&lt;a href=&#34;#Day-4-种羊场-江西沟&#34; class=&#34;headerlink&#34; title=&#34;Day 4: 种羊场 - 江西沟&#34;&gt;&lt;/a&gt;Day 4: 种羊场 - 江西沟&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;里程：55km&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第二天一早我们吃了点买好的干粮，擦了防晒就直接出发。种羊场实在没什么好留恋。青海湖环湖的路都很直，两侧要么是无边的草原，要么是起伏的山丘，要么是看不到头的湖面。以至于路也看不到终点，似乎永远都骑不到头。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/003sqP.jpg&#34; alt=&#34;路1&#34;&gt;&lt;/p&gt;
&lt;p&gt;不过在骑行中，能察觉到远处的村庄、山岭、景观一点点靠近，还是蛮奇妙。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/0036Vf.jpg&#34; alt=&#34;路2&#34;&gt;&lt;/p&gt;
&lt;p&gt;路边是牧民们的牛羊，似乎和内地的品种并不相同。牦牛们都很沉默，羊们也是，我蹩脚地起个头，它们也只是懒懒地抬个头望向我，依旧沉默。马儿们有的自由吃草，被人看管的则用来招徕游客骑行创收。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/003WGQ.jpg&#34; alt=&#34;牛&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/003ca8.jpg&#34; alt=&#34;羊&#34;&gt;&lt;/p&gt;
&lt;p&gt;骑过错果，便告别了环湖东路S207，来到G109国道，相比环湖东路，国道上的车辆明显多了很多。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/003RPg.jpg&#34; alt=&#34;错果&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/003gIS.jpg&#34; alt=&#34;路牌2&#34;&gt;&lt;/p&gt;
&lt;p&gt;从环湖东路和G109的交叉口到二郎剑景区，靠湖一侧都有维护良好的辅路，路面起伏不大，还有成片的油菜花可以欣赏，油菜花都不高，游客在其中拍照能露出脑袋，从车上看颇有趣味。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/003f2j.jpg&#34; alt=&#34;油菜花&#34;&gt;&lt;/p&gt;
&lt;p&gt;路的另一侧是连绵的不知疲倦的山丘，它将一路陪伴我们告别G109国道。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/003hxs.jpg&#34; alt=&#34;山丘2&#34;&gt;&lt;/p&gt;
&lt;p&gt;临近二郎剑景区有可以直接接近湖面的地方。这是一路第一次能亲近湖水的机会。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/003Irq.jpg&#34; alt=&#34;青海湖&#34;&gt;&lt;/p&gt;
&lt;p&gt;在二郎剑边的中石油稍作休息，是一路枯燥的景观，16km后便到达终点江西沟。令人欣慰的是，住宿环境有了些微的改善。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/0035Mn.jpg&#34; alt=&#34;江西沟住宿&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Day-5-江西沟-黑马河-x2F-茶卡&#34;&gt;&lt;a href=&#34;#Day-5-江西沟-黑马河-x2F-茶卡&#34; class=&#34;headerlink&#34; title=&#34;Day 5: 江西沟 - 黑马河&amp;#x2F;茶卡&#34;&gt;&lt;/a&gt;Day 5: 江西沟 - 黑马河&amp;#x2F;茶卡&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;里程：48km&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这一天的里程虽然不长，却是环湖几天中，最疲惫的。原因是没有止境的逆风。一路上，景观和前一天无异，枯燥的山丘和草原，连湖面也不太能看见了。因为恼火的逆风，我甚至都没心情抬头看看路两旁的风景。&lt;/p&gt;
&lt;p&gt;也许是因为大风把碎云都卷走，天上的云倒是挺好看。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/00JeVP.jpg&#34; alt=&#34;云1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/00rb8I.jpg&#34; alt=&#34;云2&#34;&gt;&lt;/p&gt;
&lt;p&gt;我大约提前圣僧1个小时到达，考虑到高原和糟糕的风向，圣僧临时修改计划，将第二天的茶卡盐湖之旅提前，把本来一天到达刚察县的计划拆成石乃亥 - 刚察县。这一决定不仅让我们看到了茶卡盐湖上的落日，也极大提升了后两天的骑行体验。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/00Jn58.jpg&#34; alt=&#34;黑马河&#34;&gt;&lt;/p&gt;
&lt;p&gt;黑马河位于G109和&lt;strong&gt;环湖西路&lt;/strong&gt;S209的交叉口，前往茶卡、鸟岛，大西北自驾环线、环湖骑行都要经过这里。本来是发展不错的一个小镇。近些年考虑到环保因素，拆了大多数建筑，统一由政府管理建设，道路管道也大兴土木整修，目前看起来完全感受不到当地人所说当初的繁华。&lt;/p&gt;
&lt;p&gt;我们运气不错，碰巧民宿老板要前往茶卡办公事，在圣僧下午3点到达后，我们搭了个便车去往茶卡（来回两人300元）。走G109去茶卡镇要穿越橡皮山，最高海拔3800m，且单程80km。对于骑行来说不太现实。老板比较健谈，一路和我们介绍了青海湖的旅游发展以及周边地理人文，挺有意思。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/00JKPS.jpg&#34; alt=&#34;橡皮山1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/00JmUf.jpg&#34; alt=&#34;橡皮山2&#34;&gt;&lt;/p&gt;
&lt;p&gt;茶卡盐湖的风景十分看天气。晴天无风的天气下，才有天空之镜的感觉。我们去的那天虽然晴空万里，不过风力较大，差不多夕阳落山时，西风终于转弱，得以让我拍到下面的景象。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/00JVbt.jpg&#34; alt=&#34;夕阳3&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/00JM8g.jpg&#34; alt=&#34;夕阳4&#34;&gt;&lt;/p&gt;
&lt;p&gt;盐湖门票原价60，对青海、湖北、浙江籍游客免票。小火车单程50，车速和步行差不多，没有强需求可以不做。小火车沿着一条向湖区深处的路一直开到最里面，大约30分钟。路的西边湖水较浅，许多已蒸干出盐巴，还能看到湖盐厂的旧铁路和新厂址。许多游客穿着租赁的胶鞋在水面嬉戏。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/00JQ2Q.jpg&#34; alt=&#34;盐湖游客&#34;&gt;&lt;/p&gt;
&lt;p&gt;搭配雪一样的湖盐，有种北极村的感觉。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/00Jlvj.jpg&#34; alt=&#34;&amp;quot;北极村&amp;quot;&#34;&gt;&lt;/p&gt;
&lt;p&gt;坐车回到黑马河时已经晚上9点了，晚饭是&lt;strong&gt;牦牛肉串&lt;/strong&gt; + 牛肉面，巴适得很。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/00J3Ks.jpg&#34; alt=&#34;肉串加牛肉面&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Day-6-黑马河-石乃亥&#34;&gt;&lt;a href=&#34;#Day-6-黑马河-石乃亥&#34; class=&#34;headerlink&#34; title=&#34;Day 6: 黑马河 - 石乃亥&#34;&gt;&lt;/a&gt;Day 6: 黑马河 - 石乃亥&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;里程：39km&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;没有了恼人的逆风后，这一天好骑多了（再加上里程短，应该是环湖最轻松的一天）。骑出黑马河镇，就和G109国道告别，上了环湖西路，车辆明显稍多了，整体体验大大提升。经过一段笔直的路程，可以绕到离湖不远的地方，接下来的一路也都如此，还能时不时看到自驾游的游客在路边拍照。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/00J8rn.jpg&#34; alt=&#34;湖边&#34;&gt;&lt;/p&gt;
&lt;p&gt;等接近石乃亥后，我们便离湖越来越远。经过一个小上坡，便能远远看到石乃亥乡的轮廓了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/00rrE4.jpg&#34; alt=&#34;小上坡1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/00rcCR.jpg&#34; alt=&#34;小上坡2&#34;&gt;&lt;/p&gt;
&lt;p&gt;石乃亥不大，基础设施倒是挺完善。由于到得比较早，我们很轻松吃了个&lt;strong&gt;土火锅&lt;/strong&gt;作为午饭。土火锅里面有牦牛肉和各种素菜，价格145，还算划算。我们大快朵颐了快1个小时，最后也没吃完。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/00ry59.jpg&#34; alt=&#34;土火锅&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Day-7-石乃亥-刚察县&#34;&gt;&lt;a href=&#34;#Day-7-石乃亥-刚察县&#34; class=&#34;headerlink&#34; title=&#34;Day 7: 石乃亥 - 刚察县&#34;&gt;&lt;/a&gt;Day 7: 石乃亥 - 刚察县&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;里程：78km&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;骑出石乃亥约20公里，我们告别了海南共和县，来到海北刚察县境内。一如往常又是广袤的草原和起伏的山丘。骑过关闭的鸟岛，就来到了湖边的最后一段路。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/00rg81.jpg&#34; alt=&#34;湖羊&#34;&gt;&lt;/p&gt;
&lt;p&gt;站在环湖东路的末尾处回头望，能看到最后一片湖面的波光粼粼。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/00r2gx.jpg&#34; alt=&#34;波光粼粼&#34;&gt;&lt;/p&gt;
&lt;p&gt;从岔路口右拐上G315国道，会贴着青藏铁路走一段。之后越过新修的西和高速便进入县城内。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/00rRv6.jpg&#34; alt=&#34;岔道&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/00rhDO.jpg&#34; alt=&#34;铁路1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/00r4bD.jpg&#34; alt=&#34;铁路2&#34;&gt;&lt;/p&gt;
&lt;p&gt;刚察县虽然只是个县城，但是热闹程度和城市美化程度一点不亚于西海镇，甚至更甚。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/00rIVe.jpg&#34; alt=&#34;刚察县&#34;&gt;&lt;/p&gt;
&lt;p&gt;县城里的藏城电影院也在营业，虽然放映厅很小，还没有大学大教室大，但两人包场看《我和我的故乡》的体验还不错。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/00roUH.jpg&#34; alt=&#34;刚察电影院&#34;&gt;&lt;/p&gt;
&lt;p&gt;吃厌了羊肉，我们晚饭在一家成都冒菜馆解决了晚饭，能有吃菜自由的感觉真好。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/00rHPA.jpg&#34; alt=&#34;冒菜&#34;&gt;&lt;/p&gt;
&lt;p&gt;另外，刚察的旅游厕所做的是真不错，体验比北京的管理公厕都要好。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/00rT5d.jpg&#34; alt=&#34;刚厕&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Day-8：刚察县-西海镇&#34;&gt;&lt;a href=&#34;#Day-8：刚察县-西海镇&#34; class=&#34;headerlink&#34; title=&#34;Day 8：刚察县 - 西海镇&#34;&gt;&lt;/a&gt;Day 8：刚察县 - 西海镇&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;里程：90km&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最后一天离湖就很远了。出刚察县先是一个大上坡，接着几乎一路平路骑28km可以到达哈尔盖河边的哈尔盖镇。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/00rsUJ.jpg&#34; alt=&#34;刚察县上坡顶&#34;&gt;&lt;/p&gt;
&lt;p&gt;在哈尔盖中石化稍作休整，沿着315国道再骑20km到达甘子河乡，开始最后一个长坡，从海拔3200m来到3415m。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/00rN3q.jpg&#34; alt=&#34;哈尔盖车站路口&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/00rwuT.jpg&#34; alt=&#34;G315-170km&#34;&gt;&lt;/p&gt;
&lt;p&gt;从这个坡顶一个俯冲下来穿过西和高速，便从G315回到G213国道。这一段逆风很大，由于修路，大车也很多。它们开过的同时，尘土飞扬，恨不得把自行车都给吸进去。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/00ravV.jpg&#34; alt=&#34;G315下坡&#34;&gt;&lt;/p&gt;
&lt;p&gt;在一段艰辛的骑行后，我们来到修路的终点，也是整段路的最高海拔3445m，接着一路下坡，20km后在G213的拐弯处，西海镇已经越来越清晰。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/00rtCn.jpg&#34; alt=&#34;骑行结尾&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们最后还了车，又寄了明信片。在西海镇停留了最后一天。这里作为海北藏族自治州首府，各种政府部门和基础设施完备齐全。就是人迹稀少。偌大的跳广场舞的活动中心也没个人影。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/00rUg0.jpg&#34; alt=&#34;海北藏族自治州文化活动中心&#34;&gt;&lt;/p&gt;
&lt;p&gt;夜晚了，路边的住房都亮起灯，仿佛又回到当初两弹一星时期建立原子城的岁月。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/08/00rBbF.jpg&#34; alt=&#34;原子城夜景&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Day-9-x2F-10-西海镇-西宁-北京&#34;&gt;&lt;a href=&#34;#Day-9-x2F-10-西海镇-西宁-北京&#34; class=&#34;headerlink&#34; title=&#34;Day 9&amp;#x2F;10: 西海镇 - 西宁 - 北京&#34;&gt;&lt;/a&gt;Day 9&amp;#x2F;10: 西海镇 - 西宁 - 北京&lt;/h2&gt;&lt;p&gt;最后一天，我们回到西宁。重回城市的感觉真好，标准化和工业化给人太饱满的安全感了，躺在床上，回想起这为期6天的骑行，尽管风景很原生态很美好，但这也是以牺牲了工业化和标准化为代价的。除开住宿环境，缺少便捷的物流和交通，让沿途小镇的餐饮费物价居然比在西宁高。离开西宁前往西海镇前，我们恐怕没有预期到，以前毫不在意的蜜雪冰城和德克士居然成为了一种奢求和精神寄托。也许，人们都是图个新鲜，享受惯了工业化城市化带来的福利，居然也会想吃吃贫瘠和原生态的苦。&lt;/p&gt;
&lt;p&gt;经过此次“艰苦”的骑行，圣僧说他心心念念的川藏线骑行也要好好考虑考虑了，可能磨练人的不是骑行本身，反而是沿途令人生畏的住宿环境。我们脸上和腿上的晒伤需要时间痊愈。不知道，圣僧心理上的畏惧又需要多久痊愈。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;–END–&lt;/em&gt;&lt;/p&gt;
</content>
        <category term="攻略" />
        <category term="随笔" />
        <category term="西北" />
        <category term="银川" />
        <category term="西宁" />
        <category term="青海湖" />
        <category term="西海镇" />
        <category term="茶卡盐湖" />
        <updated>2020-10-06T12:02:17.000Z</updated>
    </entry>
    <entry>
        <id>http://shenlvmeng.github.com/blog/2020/08/17/refactoring-design-improvement/</id>
        <title>重构 —— 代码的实用性与艺术性</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2020/08/17/refactoring-design-improvement/"/>
        <content type="html">&lt;p&gt;MF的《重构》一书算是程序设计书籍的经典了。其中对于重构的认识和剖析深入浅出，提纲挈领。对于有一定编程经验的人来说更是如虎添翼的帮助。下面我尽量在不贬损原意的基础上，用自己的思路和语言进行适当的总结。&lt;/p&gt;
&lt;h2 id=&#34;序-amp-前言：重构的再认识&#34;&gt;&lt;a href=&#34;#序-amp-前言：重构的再认识&#34; class=&#34;headerlink&#34; title=&#34;序 &amp;amp; 前言：重构的再认识&#34;&gt;&lt;/a&gt;序 &amp;amp; 前言：重构的再认识&lt;/h2&gt;&lt;p&gt;开篇名义，还未进入正文，书从序和前言开始，便不自觉间流露着真知灼见：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重构是&lt;strong&gt;不改变软件可观察行为的前提下改善其内部结构&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;重构需要你维护一份“坏味道”和重构手段的对应&lt;/li&gt;
&lt;li&gt;设计前期使用模式通常会导致过度工程&lt;/li&gt;
&lt;li&gt;代码总将随着设计者的经验成长而进化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;样例：感受重构&#34;&gt;&lt;a href=&#34;#样例：感受重构&#34; class=&#34;headerlink&#34; title=&#34;样例：感受重构&#34;&gt;&lt;/a&gt;样例：感受重构&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;任何一个傻瓜都能写出计算机理解的代码。但唯有优秀的程序员才能写出人类能理解的代码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;代码被阅读和修改的次数远多于被编写的次数。尽管代码在机器中运行时，机器并不会嫌弃代码丑陋。但是代码总是要修改的，当我们打算修改系统时，就涉及到了人。人在乎这些。差劲的系统很难维护，如果很难找到修改点，程序员就可能犯错，从而引入bug。如果你发现你需要为程序增加特性，但是当前的代码结构让你不能方便达成目标时，先重构那个程序，再方便地添加特性。&lt;/p&gt;
&lt;p&gt;当然，重构前一定要确认，自己有没有一套&lt;strong&gt;可靠的测试机制&lt;/strong&gt;，因为你需要它来保证重构的基础要素：不修改已有功能。重构中，最好能以&lt;strong&gt;微小的步伐&lt;/strong&gt;前进（这样能及时回滚）。在本章样例的重构中，体现了下面一些“好味道”：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代码块越小，代码功能就越好管理&lt;/li&gt;
&lt;li&gt;好的代码应该能够清楚表达自己的功能，变量名也是代码清晰的关键&lt;/li&gt;
&lt;li&gt;用多态取代条件判断逻辑&lt;/li&gt;
&lt;li&gt;结构化风格相比过程化风格更易扩展也更好维护&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;原则&#34;&gt;&lt;a href=&#34;#原则&#34; class=&#34;headerlink&#34; title=&#34;原则&#34;&gt;&lt;/a&gt;原则&lt;/h2&gt;&lt;p&gt;本章介绍了重构的一些原则和基础性认识。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;何为重构：不改变软件可观察特性的前提下，通过修改内部结构，提高其可理解性。通常情况下和&lt;strong&gt;性能优化&lt;/strong&gt;相对应&lt;ul&gt;
&lt;li&gt;两顶帽子：添加新功能和重构应该属于两种截然不同的行为，它们应该分开交替进行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;重构的好处&lt;ul&gt;
&lt;li&gt;改进软件设计，整理代码让后续的修改更容易&lt;/li&gt;
&lt;li&gt;让软件更好理解，准确说出我想要的&lt;/li&gt;
&lt;li&gt;帮忙找到bug&lt;/li&gt;
&lt;li&gt;提高未来的编程速度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;何时重构&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;事不过三&lt;/strong&gt;，第一次只管去做，第二次产生反感但还是去做，第三次做类似的事情就去重构&lt;/li&gt;
&lt;li&gt;修改bug时重构&lt;/li&gt;
&lt;li&gt;review代码时重构&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;间接层和重构：中间层能够允许逻辑共享和意图的分开解释，同时隔离变化和解耦。&lt;ul&gt;
&lt;li&gt;提前设计好中间层不如先直接做再重构&lt;/li&gt;
&lt;li&gt;少数情况下，中间层只会带来冗余&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;重构的难题&lt;ul&gt;
&lt;li&gt;修改已有API：建议维护新旧两个接口，让用户做出反应后，再迁移。这期间，旧接口应该要调用新接口实现&lt;/li&gt;
&lt;li&gt;代码已经无法正常运行时，重写比重构更省事&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;重构和性能优化：大多数的性能优化集中在小部分代码上。先写出风格良好的代码，再使用性能工具实测数据，对瓶颈处单独优化性能。好的重构也会让性能优化更容易进行&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;坏味道&#34;&gt;&lt;a href=&#34;#坏味道&#34; class=&#34;headerlink&#34; title=&#34;坏味道&#34;&gt;&lt;/a&gt;坏味道&lt;/h2&gt;&lt;p&gt;在遇到下面一些“味道”时，可能你就需要重构了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重复代码&lt;/li&gt;
&lt;li&gt;函数过长，每当你需要用注释说明点什么时，可以把需要说明的东西写到一个独立函数中&lt;/li&gt;
&lt;li&gt;太长的类&lt;/li&gt;
&lt;li&gt;函数入参过多&lt;/li&gt;
&lt;li&gt;发散式变化：一个类因为多个原因发生不同的变化&lt;/li&gt;
&lt;li&gt;霰弹式变化：一个原因引起一个类的多个变化&lt;/li&gt;
&lt;li&gt;特性依恋：函数对某个类的兴趣高于自己所在的类&lt;/li&gt;
&lt;li&gt;数据泥团：喜欢聚合在一起的零散数据字段&lt;/li&gt;
&lt;li&gt;基础类型偏执：对于基础类型如字符串、整型不愿意使用简单类来封装&lt;/li&gt;
&lt;li&gt;swtich语句&lt;/li&gt;
&lt;li&gt;冗余类&lt;/li&gt;
&lt;li&gt;夸夸其谈未来性：过度为未来设计&lt;/li&gt;
&lt;li&gt;令人迷惑的暂时字段&lt;/li&gt;
&lt;li&gt;过度耦合的链式调用，如&lt;code&gt;a.b.c().d()&lt;/code&gt;，链上任意类做修改都会影响整个调用&lt;/li&gt;
&lt;li&gt;两个类的狎昵关系&lt;/li&gt;
&lt;li&gt;异曲同工的类&lt;/li&gt;
&lt;li&gt;幼稚的数据类：只有最简单的getter和setter&lt;/li&gt;
&lt;li&gt;子类拒绝继承超类的函数或数据&lt;/li&gt;
&lt;li&gt;过多的注释&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;测试体系：重构的保证&#34;&gt;&lt;a href=&#34;#测试体系：重构的保证&#34; class=&#34;headerlink&#34; title=&#34;测试体系：重构的保证&#34;&gt;&lt;/a&gt;测试体系：重构的保证&lt;/h2&gt;&lt;p&gt;前面已经提到数次，重构的前提是不对已经已有行为做改动，这需要测试的帮助。本章对建立测试给了一些简单的介绍。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编写测试代码最有用时机是编程之前&lt;/li&gt;
&lt;li&gt;编写一个测试case时，可以先让测试失败，再通过成功验证程序功能&lt;/li&gt;
&lt;li&gt;遇到bug时，先添加一个单元测试复现这个bug&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;测试不能保证程序没有bug&lt;/strong&gt;，编写测试样例也遵循82原则，当样例已经很多时，它带来的边际效果就没那么好了。应该更多考虑容易出错的&lt;strong&gt;边界条件&lt;/strong&gt;，积极思考如何“破坏代码”。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;重构列表&#34;&gt;&lt;a href=&#34;#重构列表&#34; class=&#34;headerlink&#34; title=&#34;重构列表&#34;&gt;&lt;/a&gt;重构列表&lt;/h2&gt;&lt;p&gt;下面分几大方向介绍具体的重构手段。每个手段会分场景、思路、动机、做法来展开。&lt;/p&gt;
&lt;h3 id=&#34;组织函数&#34;&gt;&lt;a href=&#34;#组织函数&#34; class=&#34;headerlink&#34; title=&#34;组织函数&#34;&gt;&lt;/a&gt;组织函数&lt;/h3&gt;&lt;p&gt;日常工作中，非常容易坏味道中的过长函数，下面的一些重构方式可以帮我们优化这一点。&lt;/p&gt;
&lt;h4 id=&#34;提炼函数&#34;&gt;&lt;a href=&#34;#提炼函数&#34; class=&#34;headerlink&#34; title=&#34;提炼函数&#34;&gt;&lt;/a&gt;提炼函数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：有一段相对独立的代码可以被组织并独立出来&lt;/li&gt;
&lt;li&gt;思路：将这段代码放到一个独立函数中，用&lt;strong&gt;函数名解释该函数的用途&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;动机：有时会遇到过长函数中有一段需要注释才能看明白的代码。将这样相对独立的逻辑拆分成表意的短小函数后，可以让高层函数读起来就像一系列注释。如果提炼可以提高代码清晰度，就算函数名比函数体长都无所谓&lt;/li&gt;
&lt;li&gt;做法：用&lt;strong&gt;做什么&lt;/strong&gt;而不是&lt;strong&gt;怎么做&lt;/strong&gt;来为函数命名（如果你想不出一个更有意义的名称，就别动了）。检查是否有临时变量，如果有读取，可以作为入参传递给函数；如果对临时变量甚至有再赋值，那可能还要让函数返回临时变量修改后的值&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;内联函数&#34;&gt;&lt;a href=&#34;#内联函数&#34; class=&#34;headerlink&#34; title=&#34;内联函数&#34;&gt;&lt;/a&gt;内联函数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：函数本体和名称一样清晰易懂&lt;/li&gt;
&lt;li&gt;思路：在函数调用点插入函数本体，然后移除函数&lt;/li&gt;
&lt;li&gt;动机：如果函数本体足够简单，且表意清晰，同时调用点有限，&lt;strong&gt;不具备多态性&lt;/strong&gt;。那么出于减少无用中间层的考虑，可以直接使用函数体&lt;/li&gt;
&lt;li&gt;做法：注意检查是否有多态性&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;内联临时变量&#34;&gt;&lt;a href=&#34;#内联临时变量&#34; class=&#34;headerlink&#34; title=&#34;内联临时变量&#34;&gt;&lt;/a&gt;内联临时变量&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：一个临时变量只被&lt;strong&gt;简单表达式&lt;/strong&gt;赋值一次，同时妨碍了其他重构手法&lt;/li&gt;
&lt;li&gt;思路：将对变量的引用动作，替换成给它赋值的表达式本身&lt;/li&gt;
&lt;li&gt;动机：过多的临时变量会妨碍你重构长函数&lt;/li&gt;
&lt;li&gt;做法：注意确保表达式&lt;strong&gt;没有副作用&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;以查询替代临时变量&#34;&gt;&lt;a href=&#34;#以查询替代临时变量&#34; class=&#34;headerlink&#34; title=&#34;以查询替代临时变量&#34;&gt;&lt;/a&gt;以查询替代临时变量&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：程序中有个临时变量保存了某个表达式的运算结果，同时被多处引用&lt;/li&gt;
&lt;li&gt;思路：将表达式提炼成独立函数，在独立变量的所有引用点替换成对新函数的调用&lt;/li&gt;
&lt;li&gt;动机：替换成函数后，整个类都可以获得这份信息，同时会减少对该变量的频繁引用带来的重构困难&lt;/li&gt;
&lt;li&gt;做法：寻找&lt;strong&gt;只被赋值一次&lt;/strong&gt;的临时变量，对于赋值多次的临时变量使用“分解临时变量”方法先重构，保证提炼出来的函数没有副作用。先不要担心性能问题，等到出现了优化也会比较简单&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;引入解释性变量&#34;&gt;&lt;a href=&#34;#引入解释性变量&#34; class=&#34;headerlink&#34; title=&#34;引入解释性变量&#34;&gt;&lt;/a&gt;引入解释性变量&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：有个复杂的表达式，表意不够清晰&lt;/li&gt;
&lt;li&gt;思路：将表达式的值放进一个临时变量，用变量名表意&lt;/li&gt;
&lt;li&gt;动机：表达式不如变量名更好阅读。如果临时变量在整个类都有意义，建议直接使用“提炼函数”方法&lt;/li&gt;
&lt;li&gt;做法：先判断是否使用“提炼函数”的做法&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;分解临时变量&#34;&gt;&lt;a href=&#34;#分解临时变量&#34; class=&#34;headerlink&#34; title=&#34;分解临时变量&#34;&gt;&lt;/a&gt;分解临时变量&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：某个临时变量被&lt;strong&gt;多次赋值&lt;/strong&gt;，且每次赋值意义不一样&lt;/li&gt;
&lt;li&gt;思路：针对每次不同意义的赋值使用不一样的临时变量&lt;/li&gt;
&lt;li&gt;动机：临时变量的多义性会增大理解成本&lt;/li&gt;
&lt;li&gt;做法：寻找被多次赋值且有多义性的变量，不同的意义使用新的不同临时变量&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;移除对函数入参的赋值&#34;&gt;&lt;a href=&#34;#移除对函数入参的赋值&#34; class=&#34;headerlink&#34; title=&#34;移除对函数入参的赋值&#34;&gt;&lt;/a&gt;移除对函数入参的赋值&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：对函数入参赋值&lt;/li&gt;
&lt;li&gt;思路：用新的临时变量取代入参&lt;/li&gt;
&lt;li&gt;动机：对入参赋值会混淆按值传递和按引用传递的传参方式&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;用函数对象取代函数&#34;&gt;&lt;a href=&#34;#用函数对象取代函数&#34; class=&#34;headerlink&#34; title=&#34;用函数对象取代函数&#34;&gt;&lt;/a&gt;用函数对象取代函数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：大型函数中代码过于复杂，无法使用“提炼函数”&lt;/li&gt;
&lt;li&gt;思路：直接将函数放在&lt;strong&gt;单独对象&lt;/strong&gt;中，将复杂的局部变量变成对象字段，从而可以轻松地在对象中分解这个大型函数到多个小型函数&lt;/li&gt;
&lt;li&gt;动机：略&lt;/li&gt;
&lt;li&gt;做法&lt;ol&gt;
&lt;li&gt;建立一个新类，用函数用途给这类命名&lt;/li&gt;
&lt;li&gt;在新类中创建final字段保存大型函数所在的对象，即“源对象”&lt;/li&gt;
&lt;li&gt;新类的构造函数使用原函数入参作为入参&lt;/li&gt;
&lt;li&gt;新类中建立&lt;code&gt;computed()&lt;/code&gt;函数&lt;/li&gt;
&lt;li&gt;赋值原代码到&lt;code&gt;computed()&lt;/code&gt;中&lt;/li&gt;
&lt;li&gt;在原函数位置，创建这个新类的一个对象，并调用这个对象的&lt;code&gt;computed()&lt;/code&gt;函数&lt;/li&gt;
&lt;li&gt;继续重构新类中的&lt;code&gt;computed()&lt;/code&gt;函数&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;替换算法&#34;&gt;&lt;a href=&#34;#替换算法&#34; class=&#34;headerlink&#34; title=&#34;替换算法&#34;&gt;&lt;/a&gt;替换算法&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：某个算法有更清晰的算法替代&lt;/li&gt;
&lt;li&gt;思路：直接更换函数本体&lt;/li&gt;
&lt;li&gt;动机：略&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;对象间的特性搬移&#34;&gt;&lt;a href=&#34;#对象间的特性搬移&#34; class=&#34;headerlink&#34; title=&#34;对象间的特性搬移&#34;&gt;&lt;/a&gt;对象间的特性搬移&lt;/h3&gt;&lt;p&gt;类应该承担清晰且明确的责任。不论是承担责任过多还是“不怎么负责任”，都需要进行重构。&lt;/p&gt;
&lt;h4 id=&#34;搬移函数&#34;&gt;&lt;a href=&#34;#搬移函数&#34; class=&#34;headerlink&#34; title=&#34;搬移函数&#34;&gt;&lt;/a&gt;搬移函数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：有函数和所在类以外的其他类反而有更多交流，如调用或被调用&lt;/li&gt;
&lt;li&gt;思路：在和函数交流更多的类中建立一个有类似行为的新函数，改造旧函数为新函数的委托函数，或者直接移除旧函数&lt;/li&gt;
&lt;li&gt;动机：略&lt;/li&gt;
&lt;li&gt;做法：&lt;ul&gt;
&lt;li&gt;检查和搬移函数关联的字段或函数，判断是否要一起搬移&lt;/li&gt;
&lt;li&gt;检查子类和超类有无其他声明，检查有无多态性&lt;/li&gt;
&lt;li&gt;如果目标函数需要太多源类特性，就需要进一步分解后再搬移&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;搬移字段&#34;&gt;&lt;a href=&#34;#搬移字段&#34; class=&#34;headerlink&#34; title=&#34;搬移字段&#34;&gt;&lt;/a&gt;搬移字段&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：某个字段和所在类以外的其他类有更多交流&lt;/li&gt;
&lt;li&gt;思路：在目标类新建字段，修改源字段的所有使用者，令它们使用新字段&lt;/li&gt;
&lt;li&gt;动机：略&lt;/li&gt;
&lt;li&gt;做法：如果字段的访问级别是&lt;code&gt;public&lt;/code&gt;，需要先用“封装字段”手段制造一个委托中间层&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;提炼类&#34;&gt;&lt;a href=&#34;#提炼类&#34; class=&#34;headerlink&#34; title=&#34;提炼类&#34;&gt;&lt;/a&gt;提炼类&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：某个类做了两个类的事情&lt;/li&gt;
&lt;li&gt;思路：建立新类，搬移函数和字段&lt;/li&gt;
&lt;li&gt;动机：一个类应该是清楚的抽象，即可以使用清晰的命名&lt;/li&gt;
&lt;li&gt;做法：拆分类，建立两个类之间的单向或双向连接，搬移底层函数，搬移高层函数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;内联化类&#34;&gt;&lt;a href=&#34;#内联化类&#34; class=&#34;headerlink&#34; title=&#34;内联化类&#34;&gt;&lt;/a&gt;内联化类&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：某个类没做什么事情&lt;/li&gt;
&lt;li&gt;思路：将这个类的特性搬移到其他类，然后移除原类&lt;/li&gt;
&lt;li&gt;动机：通常会由于此前的重构动作移走了这个类的责任&lt;/li&gt;
&lt;li&gt;做法：选择和这个类关系最近的类进行合并，可以先在目标类中使用委托，然后再通过搬移函数的方式完成重构&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;隐藏委托关系&#34;&gt;&lt;a href=&#34;#隐藏委托关系&#34; class=&#34;headerlink&#34; title=&#34;隐藏委托关系&#34;&gt;&lt;/a&gt;隐藏委托关系&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：使用者通过委托类来调用对象&lt;/li&gt;
&lt;li&gt;思路：在提供服务的类上直接建立使用者所需的所有函数，隐藏委托关系&lt;/li&gt;
&lt;li&gt;动机：隐藏调用关系可以减少实现细节暴露从而减少耦合&lt;/li&gt;
&lt;li&gt;做法：在发起请求的类中，直接实现功能的接口，移除使用者的委托代码&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;移除中间人&#34;&gt;&lt;a href=&#34;#移除中间人&#34; class=&#34;headerlink&#34; title=&#34;移除中间人&#34;&gt;&lt;/a&gt;移除中间人&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：类做了过多&lt;strong&gt;简单委托&lt;/strong&gt;的动作&lt;/li&gt;
&lt;li&gt;思路：让使用者直接调用受托类&lt;/li&gt;
&lt;li&gt;动机：当“隐藏委托关系”使用过多时，封装会很痛苦，这个时候不如直接让使用者通过链式调用用中间受托类实现功能&lt;/li&gt;
&lt;li&gt;做法：刚好是“隐藏委托关系”的反向过程&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;引入外加函数&#34;&gt;&lt;a href=&#34;#引入外加函数&#34; class=&#34;headerlink&#34; title=&#34;引入外加函数&#34;&gt;&lt;/a&gt;引入外加函数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：需要为提供服务的类新增函数，但是你无法修改这个类（通常是库代码）&lt;/li&gt;
&lt;li&gt;思路：在使用者类中建立一个函数，并用第一参数的方式传入服务类实例&lt;/li&gt;
&lt;li&gt;动机：尽管可以在不修改服务类代码的情况下，自行添加新函数，但还是建议当外加函数较多时，使用“引入本地扩展”的方式，或直接推动服务类升级&lt;/li&gt;
&lt;li&gt;做法：在客户类中建立函数，这个函数不调用客户类特性，只是转发请求到服务类&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;引入本地扩展&#34;&gt;&lt;a href=&#34;#引入本地扩展&#34; class=&#34;headerlink&#34; title=&#34;引入本地扩展&#34;&gt;&lt;/a&gt;引入本地扩展&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：需要为服务类添加一些额外函数，但你无法修改这个类&lt;/li&gt;
&lt;li&gt;思路：建立一个新类，使其包含这些额外函数，让这个扩展类成为源类的子类或包装类&lt;/li&gt;
&lt;li&gt;动机：子类工作量较少，但是必须在对象创建期接管创建过程；包装类只是单纯转发请求，没有这个限制，但是转发过程都需要自己实现&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;重新组织数据&#34;&gt;&lt;a href=&#34;#重新组织数据&#34; class=&#34;headerlink&#34; title=&#34;重新组织数据&#34;&gt;&lt;/a&gt;重新组织数据&lt;/h3&gt;&lt;h4 id=&#34;自封装字段&#34;&gt;&lt;a href=&#34;#自封装字段&#34; class=&#34;headerlink&#34; title=&#34;自封装字段&#34;&gt;&lt;/a&gt;自封装字段&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：直接访问一个字段的方式给你的重构带来了麻烦，或是引入了麻烦的耦合关系&lt;/li&gt;
&lt;li&gt;思路：用取值&amp;#x2F;设值函数替代直接访问字段&lt;/li&gt;
&lt;li&gt;动机：这种方式让字段更为灵活，但是根据奥卡姆剃刀法则，等需要的时候再用&lt;/li&gt;
&lt;li&gt;做法：有的字段可能需要一个初始化函数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;用对象取代数据值&#34;&gt;&lt;a href=&#34;#用对象取代数据值&#34; class=&#34;headerlink&#34; title=&#34;用对象取代数据值&#34;&gt;&lt;/a&gt;用对象取代数据值&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：数据项需要和行为合在一起使用才有价值&lt;/li&gt;
&lt;li&gt;思路：把简单的数据项封装成对象&lt;/li&gt;
&lt;li&gt;动机：开发初期的简单数据，可能在迭代后会加上特殊行为，如果不及时处理，就会出现特性依恋或重复代码&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;将值对象改为引用对象&#34;&gt;&lt;a href=&#34;#将值对象改为引用对象&#34; class=&#34;headerlink&#34; title=&#34;将值对象改为引用对象&#34;&gt;&lt;/a&gt;将值对象改为引用对象&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：从一个类会衍生出多个实例，实例间只是一个实体的多种状态&lt;/li&gt;
&lt;li&gt;思路：将值对象改为引用对象&lt;/li&gt;
&lt;li&gt;动机：值对象通过&lt;code&gt;equals()&lt;/code&gt;或&lt;code&gt;hashCode()&lt;/code&gt;判断，如日期；引用对象则直接可以用相等操作符&lt;code&gt;==&lt;/code&gt;判断，如顾客、账户等概念&lt;/li&gt;
&lt;li&gt;做法：你可能需要一个静态字段或提前创建好多个新对象作为访问点&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;将引用对象改为值对象&#34;&gt;&lt;a href=&#34;#将引用对象改为值对象&#34; class=&#34;headerlink&#34; title=&#34;将引用对象改为值对象&#34;&gt;&lt;/a&gt;将引用对象改为值对象&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：你的引用对象很小且&lt;strong&gt;不可变&lt;/strong&gt;，同时不易管理&lt;/li&gt;
&lt;li&gt;思路：将引用对象改为值对象&lt;/li&gt;
&lt;li&gt;动机：引用对象不好控制，值对象的&lt;strong&gt;不可变特性&lt;/strong&gt;在某些场景很好用。&lt;/li&gt;
&lt;li&gt;做法：&lt;strong&gt;只有不可变对象才能被重构&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;以对象取代数组&#34;&gt;&lt;a href=&#34;#以对象取代数组&#34; class=&#34;headerlink&#34; title=&#34;以对象取代数组&#34;&gt;&lt;/a&gt;以对象取代数组&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：有个数组，其中的元素类型不一，代表不同的东西&lt;/li&gt;
&lt;li&gt;思路：用对象替代数组，用字段表示不同意义的元素&lt;/li&gt;
&lt;li&gt;动机：数组的作用是&lt;strong&gt;以某种顺序存储一组相似对象&lt;/strong&gt;，不要让位置具有特殊意义&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;复制被监视数据&#34;&gt;&lt;a href=&#34;#复制被监视数据&#34; class=&#34;headerlink&#34; title=&#34;复制被监视数据&#34;&gt;&lt;/a&gt;复制被监视数据&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：有些领域数据被放在了GUI部分代码里&lt;/li&gt;
&lt;li&gt;思路：将数据复制到领域对象中，建立Observer模式，剥离UI和逻辑&lt;/li&gt;
&lt;li&gt;动机：分层良好的系统，用户界面和业务逻辑代码是分开的，这样也更好维护&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;将单向关联改成双向关联&#34;&gt;&lt;a href=&#34;#将单向关联改成双向关联&#34; class=&#34;headerlink&#34; title=&#34;将单向关联改成双向关联&#34;&gt;&lt;/a&gt;将单向关联改成双向关联&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：两个类都需要对方特性，但目前只有单向连接&lt;/li&gt;
&lt;li&gt;思路：增加一个反向指针，同时修改函数能够同时更新两条链接&lt;/li&gt;
&lt;li&gt;动机：略&lt;/li&gt;
&lt;li&gt;做法：注意删除过程移除指针的顺序&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;将双向关联改为单向关联&#34;&gt;&lt;a href=&#34;#将双向关联改为单向关联&#34; class=&#34;headerlink&#34; title=&#34;将双向关联改为单向关联&#34;&gt;&lt;/a&gt;将双向关联改为单向关联&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：两个类有双向关联，但是一个类已经不需要另一个类的特性&lt;/li&gt;
&lt;li&gt;思路：去除不必要连接&lt;/li&gt;
&lt;li&gt;动机：维护双向连接带来便利的同时，也会增加维护的复杂度&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;用常量取代魔法数&#34;&gt;&lt;a href=&#34;#用常量取代魔法数&#34; class=&#34;headerlink&#34; title=&#34;用常量取代魔法数&#34;&gt;&lt;/a&gt;用常量取代魔法数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：有个字面量数值，具有特殊含义，但是不能一眼看明白&lt;/li&gt;
&lt;li&gt;思路：创造一个常量，用命名说明字面数值的意义&lt;/li&gt;
&lt;li&gt;动机：魔法数是类型码时，要使用“以类取代类型码”&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;封装字段&#34;&gt;&lt;a href=&#34;#封装字段&#34; class=&#34;headerlink&#34; title=&#34;封装字段&#34;&gt;&lt;/a&gt;封装字段&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：类中有public字段&lt;/li&gt;
&lt;li&gt;思路：声明改为private，提供相应的访问函数&lt;/li&gt;
&lt;li&gt;动机：暴露public会降低函数的模块化程度，数据应该和行为集中在一起，不应被直接修改&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;封装集合&#34;&gt;&lt;a href=&#34;#封装集合&#34; class=&#34;headerlink&#34; title=&#34;封装集合&#34;&gt;&lt;/a&gt;封装集合&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：函数返回一个集合&lt;/li&gt;
&lt;li&gt;思路：返回集合的只读副本，并在类中提供添加&amp;#x2F;移除集合元素的函数&lt;/li&gt;
&lt;li&gt;动机：类似“封装字段”，返回的集合一样可能被修改&lt;/li&gt;
&lt;li&gt;做法：使用Collection，或返回一个副本&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;用数据类取代记录&#34;&gt;&lt;a href=&#34;#用数据类取代记录&#34; class=&#34;headerlink&#34; title=&#34;用数据类取代记录&#34;&gt;&lt;/a&gt;用数据类取代记录&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：面对传统编程中的记录结构&lt;/li&gt;
&lt;li&gt;思路：创建“哑”数据对象&lt;/li&gt;
&lt;li&gt;动机：要将记录型结构转成面向对象的程序中&lt;/li&gt;
&lt;li&gt;做法：创建private字段，创建读写函数并提供&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;以类取代类型码&#34;&gt;&lt;a href=&#34;#以类取代类型码&#34; class=&#34;headerlink&#34; title=&#34;以类取代类型码&#34;&gt;&lt;/a&gt;以类取代类型码&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：类中有个数值类型码，但是&lt;strong&gt;不影响类行为&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;思路：用新的类替换数值类型码&lt;/li&gt;
&lt;li&gt;动机：略&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;以子类取代类型码&#34;&gt;&lt;a href=&#34;#以子类取代类型码&#34; class=&#34;headerlink&#34; title=&#34;以子类取代类型码&#34;&gt;&lt;/a&gt;以子类取代类型码&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：类中有个&lt;strong&gt;不可变&lt;/strong&gt;数值类型码，同时&lt;strong&gt;影响类行为&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;思路：用宿主的子类替换类型码&lt;/li&gt;
&lt;li&gt;动机：可以用子类的多态性取代switch语句，不过，如果类型码会发生改变，或者宿主类已经有子类则不能用此方法&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;以状态-x2F-策略取代类型码&#34;&gt;&lt;a href=&#34;#以状态-x2F-策略取代类型码&#34; class=&#34;headerlink&#34; title=&#34;以状态&amp;#x2F;策略取代类型码&#34;&gt;&lt;/a&gt;以状态&amp;#x2F;策略取代类型码&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：类中有个数值类型码，会&lt;strong&gt;影响类行为&lt;/strong&gt;，同时不能通过继承来消除&lt;/li&gt;
&lt;li&gt;思路：以状态对象取代替换数值类型码&lt;/li&gt;
&lt;li&gt;动机：略&lt;/li&gt;
&lt;li&gt;做法：创建一个新的类，用类型码的用途为它命名，这就是一个状态对象。所有的新类继承自超类，返回不同的状态码&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;以字段取代字段&#34;&gt;&lt;a href=&#34;#以字段取代字段&#34; class=&#34;headerlink&#34; title=&#34;以字段取代字段&#34;&gt;&lt;/a&gt;以字段取代字段&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：子类的查边只在&lt;strong&gt;返回常量数据&lt;/strong&gt;的函数上&lt;/li&gt;
&lt;li&gt;思路：修改函数，让它们返回超类的新增字段，然后销毁子类&lt;/li&gt;
&lt;li&gt;动机：这样可以避免继承带来的额外复杂性&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;简化条件表达式&#34;&gt;&lt;a href=&#34;#简化条件表达式&#34; class=&#34;headerlink&#34; title=&#34;简化条件表达式&#34;&gt;&lt;/a&gt;简化条件表达式&lt;/h3&gt;&lt;p&gt;条件逻辑会增加理解的层级，处理不好时，很容易配合长代码造成理解困难。&lt;/p&gt;
&lt;h4 id=&#34;分解条件表达式&#34;&gt;&lt;a href=&#34;#分解条件表达式&#34; class=&#34;headerlink&#34; title=&#34;分解条件表达式&#34;&gt;&lt;/a&gt;分解条件表达式&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：有一个复杂的条件语句&lt;/li&gt;
&lt;li&gt;思路：为if、then、else语句段落提炼独立函数&lt;/li&gt;
&lt;li&gt;动机：条件逻辑通常会使代码更难阅读&lt;/li&gt;
&lt;li&gt;做法：使用表意的函数名说明条件语句意思&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;合并条件表达式&#34;&gt;&lt;a href=&#34;#合并条件表达式&#34; class=&#34;headerlink&#34; title=&#34;合并条件表达式&#34;&gt;&lt;/a&gt;合并条件表达式&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：有一系列的条件逻辑，都得到相同结果&lt;/li&gt;
&lt;li&gt;思路：合并成一个条件表达式，并将之提炼成一个独立函数&lt;/li&gt;
&lt;li&gt;动机：有时候这么做能把“做什么”的语句转换成“为什么”的含义，前提是这些检查并非彼此独立&lt;/li&gt;
&lt;li&gt;做法：注意确认条件语句都没有副作用，有些条件表达式甚至可以简化成三元表达式&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;合并重复的条件片段&#34;&gt;&lt;a href=&#34;#合并重复的条件片段&#34; class=&#34;headerlink&#34; title=&#34;合并重复的条件片段&#34;&gt;&lt;/a&gt;合并重复的条件片段&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：条件表达式的每个分支都有相同的一段代码&lt;/li&gt;
&lt;li&gt;思路：将代码提取到条件表达式之外&lt;/li&gt;
&lt;li&gt;动机：减少重复语句&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;移除控制标记&#34;&gt;&lt;a href=&#34;#移除控制标记&#34; class=&#34;headerlink&#34; title=&#34;移除控制标记&#34;&gt;&lt;/a&gt;移除控制标记&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：在一系列布尔表达式中，某变量具有控制标记的作用&lt;/li&gt;
&lt;li&gt;思路：用&lt;code&gt;break&lt;/code&gt;或&lt;code&gt;return&lt;/code&gt;替代&lt;/li&gt;
&lt;li&gt;动机：有时候为了可读性和可维护性，可以牺牲单一出口的做法&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;用“卫语句”替代嵌套条件表达式&#34;&gt;&lt;a href=&#34;#用“卫语句”替代嵌套条件表达式&#34; class=&#34;headerlink&#34; title=&#34;用“卫语句”替代嵌套条件表达式&#34;&gt;&lt;/a&gt;用“卫语句”替代嵌套条件表达式&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：嵌套的条件逻辑过多，难以看清正常执行路径&lt;/li&gt;
&lt;li&gt;思路：用“卫语句”枚举出所有特殊情况，减少嵌套层数&lt;/li&gt;
&lt;li&gt;动机：当特殊case多于正常case时，提前处理每种特殊情况，可以有效减少嵌套层数&lt;/li&gt;
&lt;li&gt;做法：注意“卫语句”要么就从函数返回，要么就抛出异常，反正要跳出当前执行流&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;用多态取代条件表达式&#34;&gt;&lt;a href=&#34;#用多态取代条件表达式&#34; class=&#34;headerlink&#34; title=&#34;用多态取代条件表达式&#34;&gt;&lt;/a&gt;用多态取代条件表达式&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：你手上有个条件表达式，根据对象类型不同选择不同行为&lt;/li&gt;
&lt;li&gt;思路：将条件表达式的每个分支放在子类的重载函数中，然后将父类的原始函数声明为抽象函数&lt;/li&gt;
&lt;li&gt;动机：面向对象程序中，更少出现switch语句也是得益于多态这个工具&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;引入Null对象&#34;&gt;&lt;a href=&#34;#引入Null对象&#34; class=&#34;headerlink&#34; title=&#34;引入Null对象&#34;&gt;&lt;/a&gt;引入Null对象&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：在很多地方检查对象是否为&lt;code&gt;null&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;思路：用一个特殊的Null对象取代&lt;code&gt;null&lt;/code&gt;值&lt;/li&gt;
&lt;li&gt;动机：空对象对外就像是特殊的空的对象（Go笑而不语），而不是什么都没有，有利于保证函数行为的一致性&lt;/li&gt;
&lt;li&gt;做法：空对象一定是单例的&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;引入断言&#34;&gt;&lt;a href=&#34;#引入断言&#34; class=&#34;headerlink&#34; title=&#34;引入断言&#34;&gt;&lt;/a&gt;引入断言&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：某段代码需要对程序状态做出假设&lt;/li&gt;
&lt;li&gt;思路：用断言表示这种假设&lt;/li&gt;
&lt;li&gt;动机：有些时候，只有某个条件为真，代码才能正常运行，这个时候用断言明确这些假设。&lt;/li&gt;
&lt;li&gt;做法：注意不要滥用断言，只用来检查“一定为真”的条件，而不要去检查“应该为真”的条件&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;优化函数调用&#34;&gt;&lt;a href=&#34;#优化函数调用&#34; class=&#34;headerlink&#34; title=&#34;优化函数调用&#34;&gt;&lt;/a&gt;优化函数调用&lt;/h3&gt;&lt;p&gt;我们在前面提到了函数体本身的优化，这一章我们主要介绍函数调用的优化&lt;/p&gt;
&lt;h4 id=&#34;函数改名&#34;&gt;&lt;a href=&#34;#函数改名&#34; class=&#34;headerlink&#34; title=&#34;函数改名&#34;&gt;&lt;/a&gt;函数改名&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：函数名没能说明函数用途&lt;/li&gt;
&lt;li&gt;思路：修改函数名&lt;/li&gt;
&lt;li&gt;动机：优化函数名，让它达到注释的效果，重新安排参数顺序，提高代码清晰度&lt;/li&gt;
&lt;li&gt;做法：对于旧函数，可以标注&lt;code&gt;deprecated&lt;/code&gt;，说明其不建议使用&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;添加参数&#34;&gt;&lt;a href=&#34;#添加参数&#34; class=&#34;headerlink&#34; title=&#34;添加参数&#34;&gt;&lt;/a&gt;添加参数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：函数需要从调用端得到更多信息&lt;/li&gt;
&lt;li&gt;思路：为函数添加新的对象参数&lt;/li&gt;
&lt;li&gt;动机：如果有其他重构的方法，只要可能，基本都比添加参数要好&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;移除参数&#34;&gt;&lt;a href=&#34;#移除参数&#34; class=&#34;headerlink&#34; title=&#34;移除参数&#34;&gt;&lt;/a&gt;移除参数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：函数本体不需要某个参数&lt;/li&gt;
&lt;li&gt;思路：去除该参数&lt;/li&gt;
&lt;li&gt;动机：暂时不要考虑未来是否能用到&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;分离查询和修改&#34;&gt;&lt;a href=&#34;#分离查询和修改&#34; class=&#34;headerlink&#34; title=&#34;分离查询和修改&#34;&gt;&lt;/a&gt;分离查询和修改&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：一个函数即返回对象状态，同时又有副作用&lt;/li&gt;
&lt;li&gt;思路：将查询和修改分离出两个参数&lt;/li&gt;
&lt;li&gt;动机：任何有返回值的函数，最好都不要有看得见的副作用&lt;/li&gt;
&lt;li&gt;做法：先分离查询，再分离修改&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;让函数携带参数&#34;&gt;&lt;a href=&#34;#让函数携带参数&#34; class=&#34;headerlink&#34; title=&#34;让函数携带参数&#34;&gt;&lt;/a&gt;让函数携带参数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：若干函数做了类似的操作，仅仅因为某些值表现不同&lt;/li&gt;
&lt;li&gt;思路：用一个单一函数表示，用参数来表示那些不同的值&lt;/li&gt;
&lt;li&gt;动机：减少重复代码&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;用明确函数取代参数&#34;&gt;&lt;a href=&#34;#用明确函数取代参数&#34; class=&#34;headerlink&#34; title=&#34;用明确函数取代参数&#34;&gt;&lt;/a&gt;用明确函数取代参数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：有一个函数，其中&lt;strong&gt;完全取决于参数&lt;/strong&gt;表现出不同行为&lt;/li&gt;
&lt;li&gt;思路：针对参数的不同值，建立一个独立函数&lt;/li&gt;
&lt;li&gt;动机：函数内大多以条件表达式检查这些参数值，并作出不同行为；有时也可以用多态实现&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;保持对象完整&#34;&gt;&lt;a href=&#34;#保持对象完整&#34; class=&#34;headerlink&#34; title=&#34;保持对象完整&#34;&gt;&lt;/a&gt;保持对象完整&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：你从对象中取了若干字段，将它们作为函数调用的一些参数&lt;/li&gt;
&lt;li&gt;思路：改为传递整个对象&lt;/li&gt;
&lt;li&gt;动机：如果传递整个对象会让你的依赖结构恶化，那么就不该用这个方法&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;用函数取代参数&#34;&gt;&lt;a href=&#34;#用函数取代参数&#34; class=&#34;headerlink&#34; title=&#34;用函数取代参数&#34;&gt;&lt;/a&gt;用函数取代参数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：对象调用某个函数，用其结果做参数传递给另一个函数，然而接受改参数的函数本身也能调用到前一个函数&lt;/li&gt;
&lt;li&gt;思路：让参数接受函数直接去调用前一个函数，然后去除该参数&lt;/li&gt;
&lt;li&gt;动机：&lt;strong&gt;如果函数有其他途径获得参数值，就不该通过参数获得&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;引入参数对象&#34;&gt;&lt;a href=&#34;#引入参数对象&#34; class=&#34;headerlink&#34; title=&#34;引入参数对象&#34;&gt;&lt;/a&gt;引入参数对象&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：某些函数入参总是在一起出现&lt;/li&gt;
&lt;li&gt;思路：直接用一个对象取代这些参数&lt;/li&gt;
&lt;li&gt;动机：略&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;移除设值函数&#34;&gt;&lt;a href=&#34;#移除设值函数&#34; class=&#34;headerlink&#34; title=&#34;移除设值函数&#34;&gt;&lt;/a&gt;移除设值函数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：类的某个字段在创建时设值，然后就不再改变&lt;/li&gt;
&lt;li&gt;思路：去掉字段的设值函数&lt;/li&gt;
&lt;li&gt;动机：提供设值字段就表示可能被改变&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;隐藏函数&#34;&gt;&lt;a href=&#34;#隐藏函数&#34; class=&#34;headerlink&#34; title=&#34;隐藏函数&#34;&gt;&lt;/a&gt;隐藏函数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：有函数从未被其他类用到&lt;/li&gt;
&lt;li&gt;思路：将函数改为private&lt;/li&gt;
&lt;li&gt;动机：减少无谓的API暴露&lt;/li&gt;
&lt;li&gt;做法：可以利用lint工具帮忙检查&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;用工厂函数替代构造函数&#34;&gt;&lt;a href=&#34;#用工厂函数替代构造函数&#34; class=&#34;headerlink&#34; title=&#34;用工厂函数替代构造函数&#34;&gt;&lt;/a&gt;用工厂函数替代构造函数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：希望创建对象时不仅做简单的构建动作&lt;/li&gt;
&lt;li&gt;思路：使用工厂函数&lt;/li&gt;
&lt;li&gt;动机：这个方法也可以用来通过类型码创建类对象&lt;/li&gt;
&lt;li&gt;做法：结合&lt;code&gt;Class.forName()&lt;/code&gt;可以不用写switch语句&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;封装向下转型&#34;&gt;&lt;a href=&#34;#封装向下转型&#34; class=&#34;headerlink&#34; title=&#34;封装向下转型&#34;&gt;&lt;/a&gt;封装向下转型&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：函数返回的对象需要由调用者向下转型&lt;/li&gt;
&lt;li&gt;思路：将向下转型放在函数中进行&lt;/li&gt;
&lt;li&gt;动机：略&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;用异常取代错误码&#34;&gt;&lt;a href=&#34;#用异常取代错误码&#34; class=&#34;headerlink&#34; title=&#34;用异常取代错误码&#34;&gt;&lt;/a&gt;用异常取代错误码&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：函数返回特性的代码表示错误情况&lt;/li&gt;
&lt;li&gt;思路：改用异常&lt;/li&gt;
&lt;li&gt;动机：异常能够区分出正常情况和异常处理&lt;/li&gt;
&lt;li&gt;做法：需要决定抛出受控异常或者非受控异常&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;用测试取代异常&#34;&gt;&lt;a href=&#34;#用测试取代异常&#34; class=&#34;headerlink&#34; title=&#34;用测试取代异常&#34;&gt;&lt;/a&gt;用测试取代异常&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：对于一个调用者可以预先检查的条件，抛出了异常&lt;/li&gt;
&lt;li&gt;思路：修改调用者，改在调用前进行检查&lt;/li&gt;
&lt;li&gt;动机：能够提前检查的情况，就不算是异常&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;处理继承关系&#34;&gt;&lt;a href=&#34;#处理继承关系&#34; class=&#34;headerlink&#34; title=&#34;处理继承关系&#34;&gt;&lt;/a&gt;处理继承关系&lt;/h3&gt;&lt;h4 id=&#34;字段上移&#34;&gt;&lt;a href=&#34;#字段上移&#34; class=&#34;headerlink&#34; title=&#34;字段上移&#34;&gt;&lt;/a&gt;字段上移&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：两个子类有相同字段&lt;/li&gt;
&lt;li&gt;思路：将字段移至超类&lt;/li&gt;
&lt;li&gt;动机：归纳重复特性&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;函数上移&#34;&gt;&lt;a href=&#34;#函数上移&#34; class=&#34;headerlink&#34; title=&#34;函数上移&#34;&gt;&lt;/a&gt;函数上移&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：两个子类有相同作用的函数&lt;/li&gt;
&lt;li&gt;思路：将函数移至超类&lt;/li&gt;
&lt;li&gt;动机：归纳重复特性。子类的函数覆写超类函数，但是做相同工作时，也要使用函数上移&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;构造函数上移&#34;&gt;&lt;a href=&#34;#构造函数上移&#34; class=&#34;headerlink&#34; title=&#34;构造函数上移&#34;&gt;&lt;/a&gt;构造函数上移&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：子类的构造函数几乎完全一致&lt;/li&gt;
&lt;li&gt;思路：在超类中新建构造函数，再在子类构造函数中调用它&lt;/li&gt;
&lt;li&gt;动机：如果重构过程过于复杂，可以考虑使用“用工厂函数替代构造函数”&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;函数下移&#34;&gt;&lt;a href=&#34;#函数下移&#34; class=&#34;headerlink&#34; title=&#34;函数下移&#34;&gt;&lt;/a&gt;函数下移&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：超类的某函数只和部分子类有关&lt;/li&gt;
&lt;li&gt;思路：将函数移到相关的子类中去&lt;/li&gt;
&lt;li&gt;动机：和“函数上移”恰恰相反&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;字段下移&#34;&gt;&lt;a href=&#34;#字段下移&#34; class=&#34;headerlink&#34; title=&#34;字段下移&#34;&gt;&lt;/a&gt;字段下移&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：超类的字段只被部分子类用到&lt;/li&gt;
&lt;li&gt;思路：将字段移到真正需要的子类中去&lt;/li&gt;
&lt;li&gt;动机：和“字段上移”恰恰相反&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;提炼子类&#34;&gt;&lt;a href=&#34;#提炼子类&#34; class=&#34;headerlink&#34; title=&#34;提炼子类&#34;&gt;&lt;/a&gt;提炼子类&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：类的特性只被部分实例对象用到&lt;/li&gt;
&lt;li&gt;思路：新建一个子类，将未被用到的特性转移到子类中&lt;/li&gt;
&lt;li&gt;动机：上述的差异行为有时也可能通过类型码区分，这个时候可以由“以子类取代类型码”或“以状态&amp;#x2F;策略取代类型码”方法来重构&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;提炼超类&#34;&gt;&lt;a href=&#34;#提炼超类&#34; class=&#34;headerlink&#34; title=&#34;提炼超类&#34;&gt;&lt;/a&gt;提炼超类&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：两个类有相似特性&lt;/li&gt;
&lt;li&gt;思路：为两个类建立超类，将相似特性移到超类中&lt;/li&gt;
&lt;li&gt;动机：两个类用相同方式做类似事情往往意味着重复代码&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;提炼接口&#34;&gt;&lt;a href=&#34;#提炼接口&#34; class=&#34;headerlink&#34; title=&#34;提炼接口&#34;&gt;&lt;/a&gt;提炼接口&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：若干客户端使用类中的同一子集，或者两个类有部分相同点&lt;/li&gt;
&lt;li&gt;思路：将相同的子集提炼到独立接口中&lt;/li&gt;
&lt;li&gt;动机：接口有助于系统的&lt;strong&gt;责任划分&lt;/strong&gt;和&lt;strong&gt;能力声明&lt;/strong&gt;（鸭子类型）。在单继承的语言中，接口扮演了组合功能代码的角色。尤其某个类在不同环境表现不同时，使用接口是个好主意&lt;/li&gt;
&lt;li&gt;做法：接口命名通常由&lt;code&gt;-able&lt;/code&gt;结尾&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;折叠继承关系&#34;&gt;&lt;a href=&#34;#折叠继承关系&#34; class=&#34;headerlink&#34; title=&#34;折叠继承关系&#34;&gt;&lt;/a&gt;折叠继承关系&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：超类和子类几乎无法区分&lt;/li&gt;
&lt;li&gt;思路：将它们合为一体&lt;/li&gt;
&lt;li&gt;动机：往往在过度设计时出现&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;构造模板函数&#34;&gt;&lt;a href=&#34;#构造模板函数&#34; class=&#34;headerlink&#34; title=&#34;构造模板函数&#34;&gt;&lt;/a&gt;构造模板函数&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：有一些子类，细节上有所区别，但是整个流程上操作类似&lt;/li&gt;
&lt;li&gt;思路：提炼出操作流程，上移至超类，将具体细节操作放在独立函数中，让它们有相同的签名，然后实现超类的抽象函数&lt;/li&gt;
&lt;li&gt;动机：这样抽离出来的流程函数也叫模板函数，模板上&lt;em&gt;插槽&lt;/em&gt;接口固定，然而提供插槽的模板函数是一致的&lt;/li&gt;
&lt;li&gt;做法：后续新增的类，只需实现超类抽象函数就可以完成扩展&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;用委托取代继承&#34;&gt;&lt;a href=&#34;#用委托取代继承&#34; class=&#34;headerlink&#34; title=&#34;用委托取代继承&#34;&gt;&lt;/a&gt;用委托取代继承&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：子类只使用超类接口的一部分，或者直接不需要继承来的数据&lt;/li&gt;
&lt;li&gt;思路：在子类中新建字段保存超类，然后调整子类函数，让它委托超类，然后去掉两者的继承关系&lt;/li&gt;
&lt;li&gt;动机：略&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;用继承取代委托&#34;&gt;&lt;a href=&#34;#用继承取代委托&#34; class=&#34;headerlink&#34; title=&#34;用继承取代委托&#34;&gt;&lt;/a&gt;用继承取代委托&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;场景：两个类的委托关系过多，且委托函数都很简单&lt;/li&gt;
&lt;li&gt;思路：让委托类继承受托类&lt;/li&gt;
&lt;li&gt;动机：如果你没有使用&lt;strong&gt;所有&lt;/strong&gt;受托类函数，那么就不要用这个重构方法，继续保持委托关系，使用其他重构方法；另外受托对象可变时，也要注意&lt;/li&gt;
&lt;li&gt;做法：略&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;大型重构&#34;&gt;&lt;a href=&#34;#大型重构&#34; class=&#34;headerlink&#34; title=&#34;大型重构&#34;&gt;&lt;/a&gt;大型重构&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Kent Beck和作者所写&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本章介绍了4个大型重构的思路，也是大型程序容易遇到的4个问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;梳理和分析继承体系：往往因为某个继承体系承担的两个甚至更多责任，有一个特征是，某一层级的所有类，子类都以相同形容词开始。可以通过委托的形式，对继承体系做正交化&lt;/li&gt;
&lt;li&gt;过程化设计转化为对象设计：往往出现在过程化风格传统语言中。可以将数据记录变为对象，拆分大块行为为小块，然后将行为转移到相关对象中。&lt;/li&gt;
&lt;li&gt;分离领域和UI：出现在有GUI的场景中。传统的MVC设计模式就是将领域逻辑分离出来，用接口的方式和UI部分代码对接&lt;/li&gt;
&lt;li&gt;提炼继承体系：有的类做了太多工作，里面经常有较多的条件表达式。对于这种，可以借助面向对象中的子类和多态或者策略模式实现&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;重构与现实&#34;&gt;&lt;a href=&#34;#重构与现实&#34; class=&#34;headerlink&#34; title=&#34;重构与现实&#34;&gt;&lt;/a&gt;重构与现实&lt;/h2&gt;&lt;p&gt;重构在某些角度和技术演进很像。技术的接纳过程类似一条钟形曲线。前段包括先行者和早期接受者，中部大量人群包括早期消费者和晚期消费者，最后则是行动迟缓者。不同人有不同的消费动机。先行者和早期接受者感兴趣的是&lt;strong&gt;新技术，“范式转移和突破性思想”的愿景&lt;/strong&gt;；早期和晚期消费者则关心&lt;strong&gt;成熟度、成本、支持程度，以及这种新思想&amp;#x2F;新产品是否被和他们相似的其他人成功使用&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;尾声&#34;&gt;&lt;a href=&#34;#尾声&#34; class=&#34;headerlink&#34; title=&#34;尾声&#34;&gt;&lt;/a&gt;尾声&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;重构工具能节省你的重构时间&lt;/li&gt;
&lt;li&gt;永远记住“两顶帽子”，重构时保持代码功能不变&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="重构" />
        <category term="设计模式" />
        <category term="代码质量" />
        <updated>2020-08-17T14:56:03.000Z</updated>
    </entry>
    <entry>
        <id>http://shenlvmeng.github.com/blog/2020/08/12/soft-skills-for-software-developer/</id>
        <title>《软技能 —— 代码外的生存指南》书摘</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2020/08/12/soft-skills-for-software-developer/"/>
        <content type="html">&lt;p&gt;关于编程相关的书籍已有太多太多，本书相比其他编码相关的技术书籍来说，从技术外的视角来介绍还是挺有意思的。编码无非是求生的一种方式，对于程序员来讲，把生活过好也绝不仅是把代码写好就OK的。书中所写基本是作者对其过去职业和人生经历的一个总结，以tips的形式给出，是“术”而非“道”。是的，本书的介绍思路大概是告诉你一些方法，对你的生活和工作有些帮助的方法，而非构建一个体系，一种思考方式。因此，对于那些三观和做事方法思路基本稳定的人来说，它没法撼动你根本的认识，只能做到具体某个方面的启示和改进。同时，读起来也是相对简单的。不客气地说，这本书应该是最近一年中读到的信息密度最低的书了。不过，其中理财和健身两章，尤其是第55章应该算是全书的精华，对我还是挺有帮助的。&lt;/p&gt;
&lt;p&gt;下面分章节，对其中的关键的idea进行摘录。&lt;/p&gt;
&lt;h2 id=&#34;职业&#34;&gt;&lt;a href=&#34;#职业&#34; class=&#34;headerlink&#34; title=&#34;职业&#34;&gt;&lt;/a&gt;职业&lt;/h2&gt;&lt;p&gt;可能由于作者大多数时间是自由职业者，这一部分介绍没有太多新意&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;工作是公司的，职业生涯是你自己的&lt;/li&gt;
&lt;li&gt;把自己当成公司去思考，你有什么可以卖，相比其他“产品”你的优势是什么&lt;/li&gt;
&lt;li&gt;作为程序员，你能提供的基础服务就是创建软件&lt;/li&gt;
&lt;li&gt;人际交往不能忽略&lt;/li&gt;
&lt;li&gt;通过面试最快捷的方式是让面试官对你产生好感，如果能提前接触就更好了（Really？）&lt;/li&gt;
&lt;li&gt;承担更多责任是脱颖而出的一种方式，同时保证自己被注意到&lt;/li&gt;
&lt;li&gt;成为自由职业者之后，一定不要忘了自我营销&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;自我营销&#34;&gt;&lt;a href=&#34;#自我营销&#34; class=&#34;headerlink&#34; title=&#34;自我营销&#34;&gt;&lt;/a&gt;自我营销&lt;/h2&gt;&lt;p&gt;作为自由职业者，作者在自我营销上有些自己的见解&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自我营销：打造自我品牌 + 多种媒介 + 持之以恒&lt;/li&gt;
&lt;li&gt;一个品牌需要包含：传达的信息（slogan） + 视觉符号（logo） + 一致性 + 曝光率，重点在建立一套预期&lt;/li&gt;
&lt;li&gt;不要忘了有效利用社交媒体，为自己积累粉丝&lt;/li&gt;
&lt;li&gt;学会演讲&lt;/li&gt;
&lt;li&gt;著书有时候不是为了赚钱，而是赢得名声&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;学习&#34;&gt;&lt;a href=&#34;#学习&#34; class=&#34;headerlink&#34; title=&#34;学习&#34;&gt;&lt;/a&gt;学习&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;学习知识最好能将知识用于实践&lt;/li&gt;
&lt;li&gt;十步学习法：了解全局、确定范围、定义目标、寻找资源、创建计划、筛选资源、开始学习、动手操作、全面掌握、乐为人师&lt;ul&gt;
&lt;li&gt;前6步能让你明确方向和目标，为正式学习做准备&lt;/li&gt;
&lt;li&gt;后面4步循环往复，快速迭代，乐为人师能强行提高你的理解程度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有时候导师也很重要&lt;/li&gt;
&lt;li&gt;遇到知识短板时，就是你成长的机会&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;注意力&#34;&gt;&lt;a href=&#34;#注意力&#34; class=&#34;headerlink&#34; title=&#34;注意力&#34;&gt;&lt;/a&gt;注意力&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;专注像是一种惯性，是逐渐达到的，不可能一次性达成&lt;/li&gt;
&lt;li&gt;番茄工作法：将时间拆分成30分钟的番茄钟（25分钟专心工作 +5分钟休息），通过番茄钟衡量工作量和自己的工作效率（实际工作中太容易被打乱节奏了，比较适合自由职业者）&lt;/li&gt;
&lt;li&gt;定额工作法：对于需要定期完成的任务，自我规定周期内需要达到的工作量，承诺然后完成。有时候可以借助大众的监督来坚持&lt;/li&gt;
&lt;li&gt;多任务并行通常会因为上下文切换影响工作效率，除非另一项任务不需要花费脑力&lt;/li&gt;
&lt;li&gt;电视是时间杀手&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;为了享受快乐有意识地去做，就不是浪费时间；为了逃避自己应该完成的任务去做，就是浪费时间&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;分解任务可以有效地减小解决问题的困难程度&lt;/li&gt;
&lt;li&gt;任何行动都比不行动要好（主要是行动可以获得反馈）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;理财&#34;&gt;&lt;a href=&#34;#理财&#34; class=&#34;headerlink&#34; title=&#34;理财&#34;&gt;&lt;/a&gt;理财&lt;/h2&gt;&lt;p&gt;本篇是全书相对最有信息量的一篇。其中第55章对于自己生涯的描述，甚至比其他所有篇章的介绍都要精华。其他章节可能有粉饰自己的成分，但是第55章“额外馈赠”足够真诚。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;资产是使用价值高于维护成本的东西，负债则相反。减少负债，增加资产&lt;/li&gt;
&lt;li&gt;自我营销越好，薪酬越好谈&lt;/li&gt;
&lt;li&gt;期权是指在未来某个时期前购买一定数量股票的选择权，购买的是期望。买方最大亏损有限，最大盈利无限，有权利没有义务；卖方相反。看涨期权和看跌期权作为买方都需要交期望差额的&lt;strong&gt;权利金&lt;/strong&gt;。到期日时（这是欧式期权的做法，美式期权可以在到期日前任意时间交易），买方可以选择或放弃行权，选择行权时，买方卖出股票，赚取高于权利金的差额；放弃行权时同时放弃权利金。&lt;/li&gt;
&lt;li&gt;房地产投资是低风险高负债的投资类型，一方面可以寻求房产出售的机会，另一方面可以通过租金获取稳定收入。当然在租赁房产时，建议选择负责任的物业托管。通过部分租金换取安心。&lt;/li&gt;
&lt;li&gt;想要提前退休，需要有资本积累，同时，这个资本还要让你获得足够生活的&lt;strong&gt;被动收入&lt;/strong&gt;。如果有提前退休打算，需要下面几点准备&lt;ul&gt;
&lt;li&gt;树立目标，即XX岁前退休&lt;/li&gt;
&lt;li&gt;意识到通胀的存在，他会吞噬你赶不上它速度的资产&lt;/li&gt;
&lt;li&gt;做有固定收益和被动收入的投资（最好还能赶上通胀）&lt;/li&gt;
&lt;li&gt;要想更早退休，自然要比常人花更多精力“开源”和“节流”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;真正获得财务成功的唯一方法就是用钱生钱&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一边欠债一边存钱是最愚蠢的做法&lt;/strong&gt;，因为债务利息永远高于存款利息。&lt;ul&gt;
&lt;li&gt;存钱之前先把房屋抵押贷款还清（这么做还是有些绝对，还要留些以备急用）&lt;/li&gt;
&lt;li&gt;能一次付清就一次付清，除非你能通过提前享受获得超过利息的收益&lt;/li&gt;
&lt;li&gt;确保先偿还利息最高的债务&lt;/li&gt;
&lt;li&gt;并非所有债务都是不好的，除非你能通过提前享受获得超过利息的收益（如住房贷款和学生贷款）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;退休即自由，即可以不以钱作为出发点行事，更形象地说，“从社会中赎回自己的生活”。&lt;/li&gt;
&lt;li&gt;买房办理贷款时注意贷款利率是否是固定的&lt;/li&gt;
&lt;li&gt;作者最初也是程序员的工作，之后逐渐贷款购置房产用于租赁，通过日常工作还款。之后几次创业都不太成功。但是房产累积越来越多。之后通过个人营销开始创办博客和培训教程，认识大佬后，培训教程逐渐受到欢迎。之后订下退休目标，随着房产带来的被动收入和在线培训（编程 + 健身 + 创业）被动收入逐渐稳定，作者成功上岸退休&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;健身&#34;&gt;&lt;a href=&#34;#健身&#34; class=&#34;headerlink&#34; title=&#34;健身&#34;&gt;&lt;/a&gt;健身&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;同时达到多个健身目标是很难实现的。很难在增肌同时减掉脂肪，同样地，很难在减脂同时增长肌肉&lt;/li&gt;
&lt;li&gt;减肥很简单：摄入的卡路里小于燃烧的卡路里。&lt;ul&gt;
&lt;li&gt;摄入卡路里通过食物计算，但是烹饪过程对热量也有很大影响&lt;/li&gt;
&lt;li&gt;燃烧的卡路里可以根据基础代谢率BMR结合训练消耗计算&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;增肌需要给肌肉压力，挑选动作的时候注意选择复合动作，如深蹲、硬拉、卧推、杠铃推举等等。注意保持足够的蛋白质摄入&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;腹肌不是靠增肌得到，而要通过减脂&lt;/strong&gt;。体脂率下降到特定水平自然能看到腹肌。可以通过高强度间歇式训练（HITT）来减脂&lt;/li&gt;
&lt;li&gt;跑步和站立式办公都是简单的燃脂方式&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;心灵&#34;&gt;&lt;a href=&#34;#心灵&#34; class=&#34;headerlink&#34; title=&#34;心灵&#34;&gt;&lt;/a&gt;心灵&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;积极思考不只是外表乐观，而且对健康有益，延年益寿&lt;/li&gt;
&lt;li&gt;做事方法的第一步是相信自己有改变的能力，改变不了现状，你至少能改变自己的心态。&lt;/li&gt;
&lt;li&gt;爱情不是追逐游戏，你追我逃。更健康的模式是行为上体现出自信，用自然随和且充满自信的态度和别人交往。“我自己感觉很好，我不需要你，但是我觉得你挺有意思的，所以我想更好地了解你”&lt;ul&gt;
&lt;li&gt;关键是你要真得能表现出足够的自信，你要对自己足够尊重&lt;/li&gt;
&lt;li&gt;做一个绝望的、缺乏自信的人，你会发现自己会真的孤立无援&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;那些拒绝最终都会把你带到一个想和你在一起的人那里&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;结束语-amp-附录&#34;&gt;&lt;a href=&#34;#结束语-amp-附录&#34; class=&#34;headerlink&#34; title=&#34;结束语 &amp;amp; 附录&#34;&gt;&lt;/a&gt;结束语 &amp;amp; 附录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;生活原本比你所厌恶的朝九晚五的工作丰富多彩得多&lt;/li&gt;
&lt;li&gt;空头是指，你事先“借”该股票的一些股份并卖出，这会产生空头头寸，最终你需要靠回购这只股票来填补你借入的空头头寸&lt;/li&gt;
&lt;li&gt;Ⅰ型糖尿病是指自身不能产生胰岛素，Ⅱ型糖尿病是指自身对胰岛素不够敏感&lt;/li&gt;
&lt;li&gt;吃垃圾食品不会对健康造成重大影响，但是摄入食品的总量却会影响健康。相比健康食品，垃圾食品带来更高热量的同时，只有较低的饱腹感。因此，达到标准热量所使用的垃圾食品可能会让你长期处于挨饿状态。&lt;/li&gt;
&lt;li&gt;水果和蔬菜都是健康食品，热量都不高；高蛋白食物的热量值通常也不怎么高。纤维带来饱腹感的同时有较低的热量&lt;ul&gt;
&lt;li&gt;总结来说，未经加工的食品就是最健康的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;–END–&lt;/em&gt;&lt;/p&gt;
</content>
        <category term="软技能" />
        <category term="理财" />
        <category term="健身" />
        <category term="自我营销" />
        <category term="学习" />
        <updated>2020-08-12T13:16:12.000Z</updated>
    </entry>
    <entry>
        <id>http://shenlvmeng.github.com/blog/2020/08/04/senior-schoolmates-sharing/</id>
        <title>师兄师姐分享会</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2020/08/04/senior-schoolmates-sharing/"/>
        <content type="html">&lt;p&gt;前一阵被邀请参与公司新任培训的师兄师姐分享环节，大体是和小组内的新入职校招同学分享工作中的积累和收获。分享内容没有要求，但是大家提的比较多的问题是入职后有没有什么成长的tips或者坑。我干脆提前做了些相关的准备，也一并在这里记录下来吧。&lt;/p&gt;
&lt;p&gt;我回忆了下过去2年多以来，在公司遇到的之前未曾预期的种种，大致可以总结为下面两点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;了解业务&lt;/li&gt;
&lt;li&gt;以人为本&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;先说了解业务吧。我们在日常工作中遇到的需求无非两类：&lt;strong&gt;业务需求&lt;/strong&gt;和&lt;strong&gt;技术需求&lt;/strong&gt;。这两类工作都要求对业务的了解。在业务需求中，首先了解业务才有可能完好地还原prd的需求，避免产生不符合预期的情况，避免被产品或QA打回。然后，我们每个人都不是需求实现的机器，了解业务能让你知道，你写的每一行代码都是有意义的，都是真真正正为人服务的，而不是机械地完成任务。同时，对业务的熟悉程度也能让你的视野上个台阶，从更高的角度考虑问题，看到更远的可能。实际上，服务端同学相对来说，由于要设计数据库表，实现底层的业务逻辑，需要对整个业务理解更深入，所以在大多数团队，leader也都是服务端同学担当。&lt;/p&gt;
&lt;p&gt;在技术需求中，同样离不开对业务的理解。可能有些刚入职的同学不会意识到：&lt;strong&gt;我们其实是工程师，而不是科学家&lt;/strong&gt;。我们需要把技术应用到实际工作中，而不是单纯地指出某个技术的可行性。&lt;strong&gt;失去业务土壤的技术需求是无法带来真正价值的&lt;/strong&gt;。业务需要需要能够从业务中挖掘，并在最后真正应用到业务中产生价值。举个反例，在我刚入职时实现过一个流程图工具，想法很单纯，用技术实现工具是个很酷的事。然而没有考虑过如何应用到业务中，最后半途而废。类似地，在入职1年多的时候，和同事开发了能够托管UI稿和prd稿的平台，但是我们无视了市面上已经有太多成熟好用的产品，最终也没能推动业务使用。一个比较好的技术需求应该怎么做呢：了解业务需要、使用技术赋能，然后保证实现落地。这三步中，使用技术赋能反而是最简单的一步。理解业务需要和推动业务使用是比想象中要困难的。&lt;/p&gt;
&lt;p&gt;第二点叫做以人为本。这也是刚加入工作时可能注意不到的一点，入职前你可能以为你每天很浪漫地和代码泡在一起，和机器打交道。真正工作一段时间后，你会发现，&lt;strong&gt;每天至少50%的时间是在和人打交道的&lt;/strong&gt;。人和机器是不一样的，机器是可靠的，可预期的，可以根据在学校里学习的知识推测的；而人是不可靠的，需要技巧，需要将心比心。这种不一样的思维方式会给可能过于理性的你带来麻烦。不然你会发现每天70%~80%的烦恼都是人而非机器带来的。&lt;/p&gt;
&lt;p&gt;说几个例子，展开聊一下。先说代码，&lt;strong&gt;代码是写给人看，写给人理解的，然后才是交给机器去执行&lt;/strong&gt;。看似你是在写代码，实际上你是通过代码在和未来的你或者接手你代码的人交流思路。所以代码的风格、可读性可能比你想象中要重要。一个糟糕的代码风格、可读性会让未来的你或者其他同事想要骂人，想要通过&lt;code&gt;git blame&lt;/code&gt;找到这一坨shi一样的代码究竟是哪一个如此没品味的人写出来的。相反，一个好的风格、可读性会让未来的你和你的同事接手代码时心情愉悦，如清风拂面。类似地，可扩展性和设计良好与否也能起到上面的效果。可扩展性强和设计良好的代码可以极高地提高修改代码的愉悦程度和生产效率。&lt;/p&gt;
&lt;p&gt;作为前端，界面的设计也一样重要。不要只是单纯地去实现PM或者UI的设计，可以站在终端用户的角度换位思考。如果是你遇到这种交互，它是否符合你的直觉，使用起来是否够简单，是否能达到目的。遇到有疑问的地方，随时可以找PM和UI讨论。&lt;/p&gt;
&lt;p&gt;当然，这里说以人为本也不要矫枉过正。各位在日常工作中，还是以做事为主，公司内也还是看大家工作成果如何，而不是人际关系搞的如何。这里只是提个醒，希望大家在踏实努力的同时，也不要忘记了“人”这个角色的重要性。&lt;/p&gt;
&lt;p&gt;总结上来看，就是上面这些，没别的了。各位既然来参加今天的培训，肯定也是从学校的环境刚进入工作环境没多久。上面这段分享听完之后，如果能对有些人有启示，能让大家意识到思维方式的不同，就达到我的目的了。&lt;/p&gt;
&lt;p&gt;谢谢！&lt;/p&gt;
</content>
        <category term="成长" />
        <category term="业务" />
        <updated>2020-08-04T14:56:10.000Z</updated>
    </entry>
    <entry>
        <id>http://shenlvmeng.github.com/blog/2020/06/29/http-2-for-frontend/</id>
        <title>面向前端的HTTP/2介绍</title>
        <link rel="alternate" href="http://shenlvmeng.github.com/blog/2020/06/29/http-2-for-frontend/"/>
        <content type="html">&lt;p&gt;正式版HTTP&amp;#x2F;2发布于2015年5月，距今已经快5年了，相比老一辈HTTP 1.1有了许多改进。在具体讨论这些改进前，我们先简单回顾下HTTP这一路以来的历程。&lt;/p&gt;
&lt;h2 id=&#34;历史回顾&#34;&gt;&lt;a href=&#34;#历史回顾&#34; class=&#34;headerlink&#34; title=&#34;历史回顾&#34;&gt;&lt;/a&gt;历史回顾&lt;/h2&gt;&lt;p&gt;HTTP在1991年发布了最初的HTTP0.9版本，主要用于学术交流，目的也只是用来在网络之间传递HTML超文本的内容。HTTP0.9基于TCP，只有一个GET请求类型，请求和文档响应都是ASCII字符流，响应数据类型只有HTML类型，在响应结束后立即断开连接。&lt;/p&gt;
&lt;p&gt;随着互联网发展，1994年底出现了拨号上网，网景推出浏览器后，WWW已经不仅局限于学术交流，浏览器中除了承载HTML以外，还包括了JavaScript、CSS、图片、音视频等资源。HTTP1.0在这个背景下于1996年推出（RFC1945），它支持了状态码、方法、头部的概念，响应内容不局限于超文本文件，编码类型也不仅限于ASCII。但是TCP连接在响应返回后依旧会断开连接。&lt;/p&gt;
&lt;p&gt;在浏览器等技术发展，HTTP请求更多也更复杂，HTTP1.0的已有问题暴露得越来越明显。TCP频繁建立连接的时延，缓存协商机制的不完整、大文件下载的支持等问题需要解决。于是HTTP1.1在1999年推出（RFC2616），这是个很庞大的协议，全文长达176页，在后续IETF对该规范进行更新时，则被拆分成了总页数更多的六个文档（即RFC7230协议族）。HTTP1.1包含了太多细节和可选的部分，包含不常用的功能和不合适的优化，因此几乎没有任何实现包含完整的协议功能。总的来看，HTTP1.1做了一些尝试：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TCP持久连接（keep-alive），即在一个TCP连接上发起HTTP请求&lt;/li&gt;
&lt;li&gt;支持范围请求（Accept-Ranges）&lt;/li&gt;
&lt;li&gt;更强大的缓存机制（协商缓存和强缓存，以及相关的头部）&lt;/li&gt;
&lt;li&gt;提出了HTTP pipeline，尝试改善串行HTTP请求引起的线头阻塞（Head-of-line blocking）问题&lt;/li&gt;
&lt;li&gt;更多的错误相关状态码&lt;/li&gt;
&lt;li&gt;Host头处理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;之后HTTP1.1便被一直使用至今，随着互联网页面请求资源的数量和体积增大，HTTP1.1中没能妥善解决的问题越来越明显。HTTPbis工作组在2007年夏天便着手于HTTP1.1标准的更新，并最终在2014年初形成上面提到的RFC7230系列协议族。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/SPDY&#34;&gt;SPDY&lt;/a&gt;（SPeeDY）是由Google牵头开发的开源协议，意图在TLS和HTTP中间插入中间层，解决HTTP协议的问题。大约在2012年提出，也被大多数主流浏览器支持。最终在2015年HTTP&amp;#x2F;2协议发布后，逐步放弃支持。实际上HTTP&amp;#x2F;2也是在SPDY&amp;#x2F;3草案的基础上形成的协议初稿。&lt;/p&gt;
&lt;h2 id=&#34;历史问题&#34;&gt;&lt;a href=&#34;#历史问题&#34; class=&#34;headerlink&#34; title=&#34;历史问题&#34;&gt;&lt;/a&gt;历史问题&lt;/h2&gt;&lt;h3 id=&#34;传输资源与延迟&#34;&gt;&lt;a href=&#34;#传输资源与延迟&#34; class=&#34;headerlink&#34; title=&#34;传输资源与延迟&#34;&gt;&lt;/a&gt;传输资源与延迟&lt;/h3&gt;&lt;p&gt;当今的互联网环境和20世纪末那会儿已经有了很大的不同，现在的Web页面更像一个应用的概念，而非一个简单的页面（SPA）。从HTTPArchive一个页面下请求的资源数已经上百，请求的资源体积也接近2M。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bagder/http2-explained/master/images/transfer-size-growth.png&#34; alt=&#34;http-transfer-size&#34;&gt;&lt;/p&gt;
&lt;p&gt;随着这些年网络硬件条件的迅猛发展，&lt;strong&gt;带宽&lt;/strong&gt;已经不再是影响人们体验的因素，而&lt;strong&gt;网络延迟&lt;/strong&gt;仍然没有太好的改善。高延迟的网络上（比如移动设备），即使拥有高连接速率，也很难获得优质快速的网络体验。页面从访问到打开的近70%时间都发生在网络上。&lt;/p&gt;
&lt;h3 id=&#34;请求-响应模型&#34;&gt;&lt;a href=&#34;#请求-响应模型&#34; class=&#34;headerlink&#34; title=&#34;请求-响应模型&#34;&gt;&lt;/a&gt;请求-响应模型&lt;/h3&gt;&lt;p&gt;HTTP1.1是无状态协议，需要以客户端请求开始，然后才能响应。一个TCP上同时只能有一个请求&amp;#x2F;响应。TCP协议的能力并没有被充分利用。在HTTP1.1启用keep-alive后，TCP连接重复建立的问题被解决。但是请求还是需要排队一个一个发送，TCP的RTT（round-trip time）还是比较可观。后续的HTTP1.1提出了&lt;strong&gt;HTTP管线化&lt;/strong&gt;（pipeline），即将多个HTTP请求合并成一个，一起发送，这样的确提高了服务器的资源利用率，但是也会带来线头阻塞（head-of-line blocking）问题，即一个比较耗时的请求会影响后续的所有请求。另外，它会给重试带来麻烦，需要网络中间节点的支持。所以这个特性并没有得到浏览器和服务器认可，实现也并不普及。目前大多数桌面浏览器也是默认关闭这个特性的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mdn.mozillademos.org/files/13727/HTTP1_x_Connections.png&#34; alt=&#34;http-pipeline&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;那些年，我们一起克服延迟的办法&#34;&gt;&lt;a href=&#34;#那些年，我们一起克服延迟的办法&#34; class=&#34;headerlink&#34; title=&#34;那些年，我们一起克服延迟的办法&#34;&gt;&lt;/a&gt;那些年，我们一起克服延迟的办法&lt;/h4&gt;&lt;p&gt;针对上面的困难，智慧的开发者们自然也是有了许多应对办法。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bagder/http2-explained/master/images/spriting.jpg&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;雪碧图：将小图片整合成一张大图。&lt;/li&gt;
&lt;li&gt;内联：将高优先级资源或小资源通过script标签或style标签或dataUrl的形式直接内嵌在页面里&lt;/li&gt;
&lt;li&gt;分片（sharding）与域名散列：将图片或者其他资源分发到不同主机。最初的HTTP1.1规范（RFC2616）提到一个客户端最多只能对同一主机建立两个TCP连接。后来，两个连接的限制被取消了（RFC7230），现在的浏览器一般允许每个域名主机建立6-8个连接。根据httparchive.org的记录显示，在Top30万个URL中平均使用40个TCP连接来显示页面&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bagder/http2-explained/master/images/expressen-sharding.jpg&#34; alt=&#34;http-sharding&#34;&gt;&lt;/p&gt;
&lt;p&gt;除此之外，为了减少请求数，前端会将代码合并并打包，这也是webpack这样的工具诞生的背景。&lt;/p&gt;
&lt;h3 id=&#34;冗长的头部&#34;&gt;&lt;a href=&#34;#冗长的头部&#34; class=&#34;headerlink&#34; title=&#34;冗长的头部&#34;&gt;&lt;/a&gt;冗长的头部&lt;/h3&gt;&lt;p&gt;HTTP1.1中1000+字节的头部都是常见的且体积较大的，如&lt;code&gt;Cookie&lt;/code&gt;。头部信息有许多多余信息。这也让许多大请求建立连接的过程变得很慢。&lt;/p&gt;
&lt;p&gt;总结来看，HTTP1.1遗留了下面几个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对TCP利用较差，同时只能有一个请求&amp;#x2F;响应&lt;ul&gt;
&lt;li&gt;目前应对方法：开多个TCP连接（分片），减少请求数（合并资源）；这些方法多少会遇到TCP慢启动、DNS开销等问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HTTP头部没有压缩，占用较大空间&lt;ul&gt;
&lt;li&gt;目前应对方法：减少请求数、使用cookie-less域名&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;固有的请求-响应模式，重要资源无法优先推送&lt;ul&gt;
&lt;li&gt;目前应对方法：内联资源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;HTTP&amp;#x2F;2对于上面这些问题自然是重拳出击。&lt;/p&gt;
&lt;h2 id=&#34;HTTP-x2F-2概述&#34;&gt;&lt;a href=&#34;#HTTP-x2F-2概述&#34; class=&#34;headerlink&#34; title=&#34;HTTP&amp;#x2F;2概述&#34;&gt;&lt;/a&gt;HTTP&amp;#x2F;2概述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;“HTTP&amp;#x2F;2 enables a more efficient use of network resources and a reduced perception of latency by introducing header field compression and allowing multiple concurrent exchanges on the same connection. It also introduces unsolicited push of representations from servers to clients.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;根据&lt;a href=&#34;https://httpwg.org/specs/rfc7540.html&#34;&gt;RFC7540&lt;/a&gt;的摘要，简明扼要地点出了HTTP&amp;#x2F;2带来的几个重要特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多路复用的二进制协议；一个TCP连接上不再只有1个请求&amp;#x2F;响应，同时采用二进制而非文本传输数据&lt;/li&gt;
&lt;li&gt;头部压缩；用二进制分帧配合专门设计的头部压缩算法（HPACK）大大减少头部体积，HPACK有专门的&lt;a href=&#34;https://httpwg.github.io/specs/rfc7541.html&#34;&gt;RFC7541&lt;/a&gt;来规范。&lt;/li&gt;
&lt;li&gt;服务器推送；在客户端发送请求前，主动将资源推送给客户端&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;整个HTTP&amp;#x2F;2实际上还是在HTTP的框架下的，对HTTP1.1也是完全兼容的，这意味着你可以像以前一样使用HTTP的API、方法、头部、状态码这些：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP&amp;#x2F;2必须维持HTTP的范式。它只是一个让客户端发送请求到服务器的基于TCP的协议&lt;/li&gt;
&lt;li&gt;不能改变&lt;code&gt;http://&lt;/code&gt;和&lt;code&gt;https://&lt;/code&gt;这样的URL，也不能对其添加新的结构。使用这类URL的网站太多了，没法指望他们全部改变。&lt;/li&gt;
&lt;li&gt;HTTP1.1的服务器和客户端依然会存在很久，所以必须提供HTTP1.1到HTTP&amp;#x2F;2服务器的代理&lt;/li&gt;
&lt;li&gt;不再使用小版本号。服务器和客户端都必须确定自己是否完整兼容http2或者彻底不兼容&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;协商&#34;&gt;&lt;a href=&#34;#协商&#34; class=&#34;headerlink&#34; title=&#34;协商&#34;&gt;&lt;/a&gt;协商&lt;/h3&gt;&lt;p&gt;SPDY依赖于TLS，不过从SPDY中诞生的HTTP&amp;#x2F;2却可以选择是否基于TLS。由此带来2种HTTP&amp;#x2F;2协商机制。对于普通的HTTP1.1，通过给服务器发送一个带升级头部的报文。如果服务器支持HTTP&amp;#x2F;2，它将以“101 Switching”作为回复的状态码，并从此开始在该连接上使用HTTP&amp;#x2F;2。这种连接方式也被称为&lt;strong&gt;h2c&lt;/strong&gt;（HTTP&amp;#x2F;2 cleartext），此时HTTP&amp;#x2F;2在TCP之上运行。出于安全性考虑。&lt;strong&gt;几乎所有的主流浏览器都不支持这种协商实现&lt;/strong&gt;（curl可以支持）。&lt;/p&gt;
&lt;p&gt;对于在TLS之上的https，Next Protocol Negotiation (NPN)是一个用来在TLS服务器上协商SPDY的协议。IETF将这个非正式标准进行规范化，从而演变成了ALPN（Application Layer Protocol Negotiation）。ALPN会伴随HTTP&amp;#x2F;2中的使用而推广，考虑到SPDY会使用NPN，而许多服务器又会同时提供SPDY以及HTTP&amp;#x2F;2，所以在这些服务器上同时支持ALPN以及NPN显然会成为最理所当然的选择。ALPN和NPN的主要区别在于，ALPN中由服务端最终决定通信协议，NPN中由客户端最终决定。&lt;/p&gt;
&lt;h2 id=&#34;HTTP-x2F-2特性&#34;&gt;&lt;a href=&#34;#HTTP-x2F-2特性&#34; class=&#34;headerlink&#34; title=&#34;HTTP&amp;#x2F;2特性&#34;&gt;&lt;/a&gt;HTTP&amp;#x2F;2特性&lt;/h2&gt;&lt;p&gt;在HTTP&amp;#x2F;2的介绍中提到，协议通过定义一个优化的基础连接的HTTP语义映射来解决HTTP1.1的问题。具体地，它允许在&lt;strong&gt;同一连接&lt;/strong&gt;上&lt;strong&gt;交错&lt;/strong&gt;地建立请求和响应消息，并使用&lt;strong&gt;高效率编码&lt;/strong&gt;的HTTP报头字段。它还允许&lt;strong&gt;请求的优先级&lt;/strong&gt;，让更多的重要的请求更快速的完成，进一步提升了性能。最终协议设计为对网络更友好，因为它相对HTTP&amp;#x2F;1.x减少了TCP连接。最后，这种封装也通过使用&lt;strong&gt;二进制消息帧&lt;/strong&gt;使信息处理更具扩展性。&lt;/p&gt;
&lt;p&gt;里面加粗的部分即HTTP&amp;#x2F;2带来的几个新特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单一TCP连接&lt;/li&gt;
&lt;li&gt;二进制分帧&lt;ul&gt;
&lt;li&gt;请求优先级&lt;/li&gt;
&lt;li&gt;服务端推送&lt;/li&gt;
&lt;li&gt;流量控制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多路复用&lt;/li&gt;
&lt;li&gt;头部压缩（HPACK）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;二进制分帧“层”&#34;&gt;&lt;a href=&#34;#二进制分帧“层”&#34; class=&#34;headerlink&#34; title=&#34;二进制分帧“层”&#34;&gt;&lt;/a&gt;二进制分帧“层”&lt;/h3&gt;&lt;p&gt;首先，HTTP&amp;#x2F;2是个二进制协议。它的请求和响应都是流的形式，它基本的协议单位是帧。每个帧都有不同的类型和用途。HTTP&amp;#x2F;2所有性能增强的核心也在于这个新的二进制分帧层，它定义了如何封装 HTTP 消息并在客户端与服务器之间传输。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://developers.google.com/web/fundamentals/performance/http2/images/binary_framing_layer01.svg&#34; alt=&#34;http2-framing-layer&#34;&gt;&lt;/p&gt;
&lt;p&gt;从图中能看到，在TLS之上，HTTP&amp;#x2F;2之下新增了一个二进制分帧层。这里所谓的“层”，指的是位于套接字接口与应用可见的高级HTTP API之间一个经过优化的新编码机制：HTTP的语义（包括各种动词、方法、标头）都不受影响，不同的是传输期间对它们的&lt;strong&gt;编码方式&lt;/strong&gt;变了。不同于HTTP1.x里面用换行符作为分隔，HTTP&amp;#x2F;2中将信息分割成帧，并进行二进制编码。整个分帧过程由客户端和服务端替我们完成。&lt;/p&gt;
&lt;h3 id=&#34;数据流和帧&#34;&gt;&lt;a href=&#34;#数据流和帧&#34; class=&#34;headerlink&#34; title=&#34;数据流和帧&#34;&gt;&lt;/a&gt;数据流和帧&lt;/h3&gt;&lt;p&gt;上面这种二进制分帧机制改变了客户端与服务器之间交换数据的方式，也带来了流的概念。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;流（Stream）：一个双向字节帧流穿过HTTP&amp;#x2F;2连接中的虚拟通道，可以承载一条或多条消息。&lt;/li&gt;
&lt;li&gt;消息：与逻辑请求或响应消息对应的完整的一系列帧。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;流的生存周期包含idle、reserved(local)、reserved(remote)、open、half closed(local)、half closed(remote)、closed多个阶段。状态间通过特定的帧类型流转。在不同状态下对应着不同的能力，对于&lt;a href=&#34;https://tools.ietf.org/html/rfc7540#section-5.1&#34;&gt;状态规范&lt;/a&gt;描述以外的操作请求都会给出协议错误（PROTOCOL_ERROR）。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;                         +--------+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                 send PP |        | recv PP&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                ,--------|  idle  |--------.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               /         |        |         \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;              v          +--------+          v&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       +----------+          |           +----------+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       |          |          | send H /  |          |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;,------| reserved |          | recv H    | reserved |------.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|      | (local)  |          |           | (remote) |      |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|      +----------+          v           +----------+      |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|          |             +--------+             |          |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|          |     recv ES |        | send ES     |          |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|   send H |     ,-------|  open  |-------.     | recv H   |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|          |    /        |        |        \    |          |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|          v   v         +--------+         v   v          |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|      +----------+          |           +----------+      |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|      |   half   |          |           |   half   |      |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|      |  closed  |          | send R /  |  closed  |      |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|      | (remote) |          | recv R    | (local)  |      |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|      +----------+          |           +----------+      |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|           |                |                 |           |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|           | send ES /      |       recv ES / |           |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|           | send R /       v        send R / |           |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|           | recv R     +--------+   recv R   |           |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;| send R /  `-----------&amp;gt;|        |&amp;lt;-----------&amp;#x27;  send R / |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;| recv R                 | closed |               recv R   |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;`-----------------------&amp;gt;|        |&amp;lt;----------------------&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                         +--------+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   send:   endpoint sends this frame&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   recv:   endpoint receives this frame&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   H:  HEADERS frame (with implied CONTINUATIONs)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   PP: PUSH_PROMISE frame (with implied CONTINUATIONs)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   ES: END_STREAM flag&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   R:  RST_STREAM frame&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;流和帧的关系是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有通信都在一个TCP连接上完成，这个连接可以承载任意数量的流&lt;/li&gt;
&lt;li&gt;每个流上面都有唯一标识符和&lt;em&gt;可选&lt;/em&gt;的优先级信息，里面会承载要传递的消息&lt;/li&gt;
&lt;li&gt;每条消息都是一条逻辑HTTP信息（如请求或相应），有完整的HTTP语义，其中可能有一个或多个帧&lt;/li&gt;
&lt;li&gt;帧是最小的通信单位，承载着特定类型的数据，例如HTTP 标头、消息负载等等。帧可以&lt;strong&gt;交错发送&lt;/strong&gt;，然后再根据帧头的数据流标识符进行组装&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://developers.google.com/web/fundamentals/performance/http2/images/streams_messages_frames01.svg&#34; alt=&#34;http2-frame&#34;&gt;&lt;/p&gt;
&lt;p&gt;所有的帧以8字节的报头开始并且跟着0到16383字节长度的主体。帧格式如下：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt; 0                   1                   2                   3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;| R |     Length (14)           |   Type (8)    |   Flags (8)   |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+-+-+-----------+---------------+-------------------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|R|                 Stream Identifier (31)                      |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+=+=============================================================+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|                   Frame Payload (0...)                      ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+---------------------------------------------------------------+&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;R：保留字段&lt;/li&gt;
&lt;li&gt;Length：14位无符号整数的帧主体长度&lt;/li&gt;
&lt;li&gt;Type：帧类型，它描述了剩余的帧报头和帧主体将如何被解释&lt;/li&gt;
&lt;li&gt;Flags：为帧类型保留的8位布尔类型字段，根据不同帧类型赋予不同语义&lt;/li&gt;
&lt;li&gt;Stream Identifier：31字节的流标识符(见StreamIdentifiers)。0是保留的，标明帧是与连接相关作为一个整体而不是一个单独的流。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;请求与响应复用&#34;&gt;&lt;a href=&#34;#请求与响应复用&#34; class=&#34;headerlink&#34; title=&#34;请求与响应复用&#34;&gt;&lt;/a&gt;请求与响应复用&lt;/h3&gt;&lt;p&gt;在HTTP1.1中，客户端要想发起多个并行请求以提升性能，则必须使用多个TCP连接，这种对TCP效率低下的利用，在HTTP&amp;#x2F;2中得到改善。二进制分帧层将HTTP消息分解为互不依赖的帧，然后交错发送，最后再在另一端把它们重新组装起来。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://developers.google.com/web/fundamentals/performance/http2/images/multiplexing01.svg&#34; alt=&#34;http2-reusing&#34;&gt;&lt;/p&gt;
&lt;p&gt;在上图中，流1和流3交错在同一个TCP连接上并行运行。这种机制带来了下面一些具体的提升：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请求之间交错且互不影响&lt;/li&gt;
&lt;li&gt;响应之间交错且互不影响&lt;/li&gt;
&lt;li&gt;可以使用一个连接并行发送多个请求和响应&lt;/li&gt;
&lt;li&gt;不必再为了优化HTTP1.1性能做雪碧图、分片等骚操作&lt;/li&gt;
&lt;li&gt;一定程度上解决了线头阻塞问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;流控制&#34;&gt;&lt;a href=&#34;#流控制&#34; class=&#34;headerlink&#34; title=&#34;流控制&#34;&gt;&lt;/a&gt;流控制&lt;/h3&gt;&lt;p&gt;HTTP&amp;#x2F;2的流控制类似TCP，但是更为精细和更靠近应用层。借助HTTP&amp;#x2F;2流控制，可以实现在用户暂停一个大型视频流后，减少或阻塞视频里带来的HTTP流量，又或者中间代理匹配上下游流量速率。HTTP&amp;#x2F;2流控制提出了一些规则，但&lt;strong&gt;并没有指出特定算法&lt;/strong&gt;，目标在于允许不需要协议改动的情况下改进流量控制算法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;流量控制是逐跳的，而不是头尾端点的&lt;/li&gt;
&lt;li&gt;流量控制是基于窗口更新帧的。接收端广播自己准备在流及整个连接过程中接收的字节大小。这是一个信用为基础的方案。&lt;/li&gt;
&lt;li&gt;流量控制是有方向性的，由接收端全权掌握。&lt;/li&gt;
&lt;li&gt;流量控制窗口初始值是65,535字节，不过接收方可以设置一个更大的值&lt;/li&gt;
&lt;li&gt;帧类型决定了是否适用流量控制规则。目前只有DATA帧受流量控制&lt;/li&gt;
&lt;li&gt;不能被禁用&lt;/li&gt;
&lt;li&gt;通过使用&lt;code&gt;WINDOW_UPDATE&lt;/code&gt;帧类型来实现&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;流优先级&#34;&gt;&lt;a href=&#34;#流优先级&#34; class=&#34;headerlink&#34; title=&#34;流优先级&#34;&gt;&lt;/a&gt;流优先级&lt;/h3&gt;&lt;p&gt;HTTP&amp;#x2F;2标准允许每个数据流都有一个关联的权重和依赖关系：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以向每个数据流分配一个介于1至256之间的整数。&lt;/li&gt;
&lt;li&gt;每个数据流与其他数据流之间可以存在显式依赖关系。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;优先级的目的是让客户端可以构建和传递“优先级树”，表明它倾向于如何接收响应。反过来，服务器可以使用此信息通过控制CPU、内存和其他资源的分配设定数据流处理的优先级。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://developers.google.com/web/fundamentals/performance/http2/images/stream_prioritization01.svg&#34; alt=&#34;http2-priority&#34;&gt;&lt;/p&gt;
&lt;p&gt;数据流依赖关系通过将另一个数据流的唯一标识符作为父项引用进行声明；如果忽略标识符，相应数据流将依赖于“根数据流”。分配时，会尽可能先向父数据流分配资源，然后再向其依赖项分配资源。共享相同父项的数据流按其权重比例分配资源。在上图中，数据流B获得的资源是数据流A所获资源的三分之一。&lt;/p&gt;
&lt;p&gt;新建流的终端可以在报头帧中包含优先级信息来对流标记优先级。对于已存在的流，优先级帧可以用来改变流优先级。&lt;/p&gt;
&lt;p&gt;更详细规范参考&lt;a href=&#34;https://tools.ietf.org/html/rfc7540#section-5.3&#34;&gt;RFC&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;帧类型&#34;&gt;&lt;a href=&#34;#帧类型&#34; class=&#34;headerlink&#34; title=&#34;帧类型&#34;&gt;&lt;/a&gt;帧类型&lt;/h3&gt;&lt;h4 id=&#34;DATA&#34;&gt;&lt;a href=&#34;#DATA&#34; class=&#34;headerlink&#34; title=&#34;DATA&#34;&gt;&lt;/a&gt;DATA&lt;/h4&gt;&lt;p&gt;数据帧，类型0x0，传递和流关联的任意变量值长度的字节数据。例如，一个或多个数据帧被用来携带HTTP请求或者响应的载体。数据帧定义了以下标记：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;END_STREAM (0x1) ：用来表示当前帧是确定的流发送的最后一帧。设置这个标记时流进入到一种半封闭状态或者关闭状态。&lt;/li&gt;
&lt;li&gt;END_SEGMENT (0x2) ：表示是当前端的最后一帧。代理端绝对不能跨越多个端的边界来合并帧，转发帧的时候代理端必须保持片段的边界。&lt;/li&gt;
&lt;li&gt;PADDED (0x8) ： 位4用来表示Pad Length字段是可见的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数据帧绝对需要与流相关联，且遵从流量控制。&lt;/p&gt;
&lt;h4 id=&#34;HEADERS&#34;&gt;&lt;a href=&#34;#HEADERS&#34; class=&#34;headerlink&#34; title=&#34;HEADERS&#34;&gt;&lt;/a&gt;HEADERS&lt;/h4&gt;&lt;p&gt;报头帧，类型0x1，用来打开一个流，并携带头部片段。能在流打开或者半封闭(远程)的状态下发送。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;+---------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|Pad Length? (8)|&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+-+-------------+-----------------------------------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|E|                 Stream Dependency? (31)                     |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+-+-------------+-----------------------------------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|  Weight? (8)  |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+-+-------------+-----------------------------------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|                   Header Block Fragment (*)                 ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+---------------------------------------------------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|                           Padding (*)                       ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+---------------------------------------------------------------+&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;它有以下标记：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;END_STREAM (0x1) ：用来标识这是发送端对确定的流发送的最后报头区块。设置这个标记将使流进入一种半封闭状态。后面伴随带有END_STREAM标记的延续帧的报头帧表示流的终止。延续帧不用来终止流。&lt;/li&gt;
&lt;li&gt;END_SEGMENT (0x2) ：表示这是当前端的最后一帧。中介端绝对不能跨片段来合并帧，且在转发帧的时候必须保持片段的边界。&lt;/li&gt;
&lt;li&gt;END_HEADERS (0x4) ：表示帧包含了整个的报头块，且后面没有延续帧。不带有END_HEADERS标记的报头帧在同个流上后面必须跟着延续帧。&lt;/li&gt;
&lt;li&gt;PADDED (0x8) ：表示Pad Length字段会呈现。&lt;/li&gt;
&lt;li&gt;PRIORITY (0x8) ：设置指示专用标记(E)，流依赖及权重字段将会呈现&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;PRIORITY&#34;&gt;&lt;a href=&#34;#PRIORITY&#34; class=&#34;headerlink&#34; title=&#34;PRIORITY&#34;&gt;&lt;/a&gt;PRIORITY&lt;/h4&gt;&lt;p&gt;优先级帧，类型0x2。明确了发送者建议的流的优先级，它可以在任意时间的流中发送。优先级帧不包含任何标记（flag）。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt; 0                   1                   2                   3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|E|                  Stream Dependency (31)                     |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+-+-------------+-----------------------------------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|   Weight (8)  |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+-+-------------+&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;RST-STREAM&#34;&gt;&lt;a href=&#34;#RST-STREAM&#34; class=&#34;headerlink&#34; title=&#34;RST_STREAM&#34;&gt;&lt;/a&gt;RST_STREAM&lt;/h4&gt;&lt;p&gt;类型0x3，允许流的立即终止。通常用来取消一个流，或表示有错误发生。绝不应该在idle状态下发出。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;0                   1                   2                   3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|                        Error Code (32)                        |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+---------------------------------------------------------------+&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;SETTINGS&#34;&gt;&lt;a href=&#34;#SETTINGS&#34; class=&#34;headerlink&#34; title=&#34;SETTINGS&#34;&gt;&lt;/a&gt;SETTINGS&lt;/h4&gt;&lt;p&gt;设置帧，类型0x4。包含影响如何与终端通信的设置参数，并且用来确认这些参数的接收。设置帧&lt;em&gt;必须&lt;/em&gt;由两个终端在连接开始的时候发送，并且&lt;em&gt;可以&lt;/em&gt;由各个终端在连接生存期的任意时间发送。&lt;/p&gt;
&lt;h4 id=&#34;PUSH-PROMISE&#34;&gt;&lt;a href=&#34;#PUSH-PROMISE&#34; class=&#34;headerlink&#34; title=&#34;PUSH_PROMISE&#34;&gt;&lt;/a&gt;PUSH_PROMISE&lt;/h4&gt;&lt;p&gt;推送承诺帧，类型0x5。用来在流发送者准备发送流之前告知对等端。包含了终端准备创建的长流的31位无符号标记以及提供附加上下文的报头的集合。通常在服务器中使用。推送承诺的接收端可以选择给推送承诺的发送端返回一个与被承诺的流标识符相关的RST_STREAM标记来拒绝接收承诺流。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;0                   1                   2                   3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;| [Pad High(8)] | [Pad Low (8)] |X|  Promised Stream ID (31)  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+---------------+---------------+-+-----------------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...    Promised Stream ID       | Header Block Fragment (*)   ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+-------------------------------+-------------------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|                   Header Block Fragment (*)                 ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+---------------------------------------------------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|                           Padding (*)                       ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+---------------------------------------------------------------+&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;PING&#34;&gt;&lt;a href=&#34;#PING&#34; class=&#34;headerlink&#34; title=&#34;PING&#34;&gt;&lt;/a&gt;PING&lt;/h4&gt;&lt;p&gt;类型0x6。从发送端测量最小的RTT时间的机制，同样也是一种检测连接是否可用的方法。PING帧可以被任何终端发送，且必须在载体中包含一个8字节长度的任意数据。&lt;/p&gt;
&lt;h4 id=&#34;GOAWAY&#34;&gt;&lt;a href=&#34;#GOAWAY&#34; class=&#34;headerlink&#34; title=&#34;GOAWAY&#34;&gt;&lt;/a&gt;GOAWAY&lt;/h4&gt;&lt;p&gt;超时帧，类型0x7。通知远端对等端不要在这个连接上建立新流。超时帧可以由客户端或者服务端发送。发送后，可以针对新的流创建一个新的连接。这个帧的目的是允许终端优雅的停止接收新的流，但仍可以继续完成之前已经建立的流的处理。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;0                   1                   2                   3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|X|                  Last-Stream-ID (31)                        |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+-+-------------------------------------------------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|                      Error Code (32)                          |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+---------------------------------------------------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|                  Additional Debug Data (*)                    |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+---------------------------------------------------------------+&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;32位的错误码中包含了关闭连接的原因。&lt;/p&gt;
&lt;h4 id=&#34;WINDOW-UPDATE&#34;&gt;&lt;a href=&#34;#WINDOW-UPDATE&#34; class=&#34;headerlink&#34; title=&#34;WINDOW_UPDATE&#34;&gt;&lt;/a&gt;WINDOW_UPDATE&lt;/h4&gt;&lt;p&gt;窗口更新帧，类型0x8。用来实现流控制。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;0                   1                   2                   3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|X|              Window Size Increment (31)                     |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+-+-------------------------------------------------------------+&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;CONTINUATION&#34;&gt;&lt;a href=&#34;#CONTINUATION&#34; class=&#34;headerlink&#34; title=&#34;CONTINUATION&#34;&gt;&lt;/a&gt;CONTINUATION&lt;/h4&gt;&lt;p&gt;延续帧，类型0x9，用来延续一个报头区块。在END_HEADERS标记前，可以在HEADERS帧、PUSH_PROMISE帧以及CONTINUATION帧后接续任意数量的CONTINUATION帧。它包含一个flag：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;END_HEADERS (0x4) : 设置指示这个帧的报头区块的终止&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;延续帧必须与流相关联。如果延续帧的相关流表示字段是0x0，终端必须响应一个类型为协议错误的连接错误。&lt;/p&gt;
&lt;h3 id=&#34;服务器推送&#34;&gt;&lt;a href=&#34;#服务器推送&#34; class=&#34;headerlink&#34; title=&#34;服务器推送&#34;&gt;&lt;/a&gt;服务器推送&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://developers.google.com/web/fundamentals/performance/http2/images/push01.svg&#34; alt=&#34;http2-server-push&#34;&gt;&lt;/p&gt;
&lt;p&gt;HTTP&amp;#x2F;2中的服务器推送打破了原来HTTP中的请求-响应语义（对原有语义也做了&lt;a href=&#34;https://tools.ietf.org/html/rfc7540#section-8.1&#34;&gt;改进&lt;/a&gt;），支持服务器可以对一个客户端请求发送多个响应。在原先的HTTP1.1中我们可能会将重要资源内联到网页中，减少网络延迟，这实际上等同于HTTP&amp;#x2F;2中的强制推送。在HTTP&amp;#x2F;2中的服务器推送还有下面一些功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;推送的资源能被客户端缓存（服务器也只能推送可被缓存的资源）&lt;/li&gt;
&lt;li&gt;在不同页面之间可以重用&lt;/li&gt;
&lt;li&gt;可以由服务器设定优先级&lt;/li&gt;
&lt;li&gt;可以被客户端拒绝&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;服务器推送数据流由PUSH_PROMISE帧发起，需要先于请求推送资源的响应数据传输。实现上的策略是先于父响应（即，DATA 帧）发送所有PUSH_PROMISE帧，其中包含所承诺资源的HTTP头部。客户端接收到PUSH_PROMISE帧后，它可以根据自身情况选择接受拒绝（通过RST_STREAM帧）数据流。（例如，如果资源已经位于缓存中）&lt;/p&gt;
&lt;p&gt;客户端完全掌控服务器推送的使用方式。客户端可以限制并行推送的数据流数量；调整初始的流控制窗口以控制在数据流首次打开时推送的数据量；或完全停用服务器推送。这些在HTTP&amp;#x2F;2连接开始时通过SETTINGS帧传输，可能随时更新。&lt;/p&gt;
&lt;h3 id=&#34;头部压缩&#34;&gt;&lt;a href=&#34;#头部压缩&#34; class=&#34;headerlink&#34; title=&#34;头部压缩&#34;&gt;&lt;/a&gt;头部压缩&lt;/h3&gt;&lt;p&gt;在HTTP1.1中，头部数据使用以纯文本的形式传输，所占空间较大，在使用HTTP Cookie后，更是会达到上千字节。为了减少此开销和提升性能，HTTP&amp;#x2F;2使用专门设计的&lt;a href=&#34;https://httpwg.github.io/specs/rfc7541.html&#34;&gt;HPACK&lt;/a&gt;压缩格式压缩请求和响应头部，这种格式通过静态霍夫曼编码对传输的头部字段进行编码。HPACK要求客户端和服务器同时维护和更新一个包含之前见过的标头字段的索引列表，利用之前传输值的索引列表，我们可以通过传输索引值的方式对重复值进行编码，索引值可用于有效查询和重构完整的头部键值对。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://developers.google.com/web/fundamentals/performance/http2/images/header_compression01.svg&#34; alt=&#34;hpack&#34;&gt;&lt;/p&gt;
&lt;p&gt;作为一种进一步优化方式，HPACK压缩上下文包含一个&lt;a href=&#34;https://httpwg.org/specs/rfc7541.html#static.table.definition&#34;&gt;静态表&lt;/a&gt;和一个动态表：静态表在规范中定义，并提供了一个所有连接都可能使用的常用HTTP头部字段列表；动态表最初为空，将根据在特定连接内交换的值进行更新。&lt;/p&gt;
&lt;p&gt;早期版本的HTTP&amp;#x2F;2和SPDY使用的&lt;a href=&#34;https://tools.ietf.org/html/rfc1951&#34;&gt;DEFLATE&lt;/a&gt;对头部进行压缩，但是在2012年夏天出现了&lt;a href=&#34;https://en.wikipedia.org/w/index.php?title=CRIME&amp;oldid=660948120&#34;&gt;CRIME&lt;/a&gt;这种安全攻击。因此，之后HTTP&amp;#x2F;2的头部压缩采用了专门设计的HPACK方案。在使用HPACK后，初次访问后的压缩率能达到70%~80%，甚至90%+。&lt;/p&gt;
&lt;h2 id=&#34;支持度与调试&#34;&gt;&lt;a href=&#34;#支持度与调试&#34; class=&#34;headerlink&#34; title=&#34;支持度与调试&#34;&gt;&lt;/a&gt;支持度与调试&lt;/h2&gt;&lt;p&gt;支持度上，&lt;a href=&#34;https://caniuse.com/#search=http%2F2&#34;&gt;主流浏览器&lt;/a&gt;和&lt;a href=&#34;https://github.com/http2/http2-spec/wiki/Implementations&#34;&gt;服务器程序&lt;/a&gt;都已支持。你也可以访问&lt;a href=&#34;https://http2.akamai.com/demo&#34;&gt;这个网址&lt;/a&gt;体验HTTP&amp;#x2F;2和HTTP1.1在load大量图片时的延迟对比。&lt;/p&gt;
&lt;p&gt;如果你想确认当前网页中的哪些请求是使用的HTTP&amp;#x2F;2，可以在chrome devTools下的network选项卡里查看“Protocol”列（未发现此列的可以在表头右键找到并勾选显示），其中HTTP&amp;#x2F;2将显示为h2。正如之前所说，支持HTTP&amp;#x2F;2的浏览器会和服务器使用特定协议协商，对于不支持HTTP&amp;#x2F;2的情况，会自动会退到HTTP1.1版本。&lt;/p&gt;
&lt;p&gt;尽管HTTP&amp;#x2F;2使用二进制传输数据，然而浏览器为我们掩盖了实现细节。如果想要深入查看甚至是调试二进制分帧层的功能，如何去debug呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Wireshark&lt;/li&gt;
&lt;li&gt;curl&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/bradfitz/http2/tree/master/h2i&#34;&gt;h2i&lt;/a&gt;，不过这个好像已经不维护了&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;TLS调优&#34;&gt;&lt;a href=&#34;#TLS调优&#34; class=&#34;headerlink&#34; title=&#34;TLS调优&#34;&gt;&lt;/a&gt;TLS调优&lt;/h2&gt;&lt;p&gt;目前各大浏览器只在&lt;code&gt;https://&lt;/code&gt;的基础上支持HTTP&amp;#x2F;2，即在TLS层之上的HTTP&amp;#x2F;2。多出的TLS的层也是会增加时延和成本的，具体涉及到的TLS握手、会话和加密套件协商过程还有优化空间，如减少证书层级、减少证书大小等。其余优化方向可以查看参考中一些文章介绍。&lt;/p&gt;
&lt;h2 id=&#34;之前的优化还应该继续用么&#34;&gt;&lt;a href=&#34;#之前的优化还应该继续用么&#34; class=&#34;headerlink&#34; title=&#34;之前的优化还应该继续用么&#34;&gt;&lt;/a&gt;之前的优化还应该继续用么&lt;/h2&gt;&lt;h3 id=&#34;继续保持的&#34;&gt;&lt;a href=&#34;#继续保持的&#34; class=&#34;headerlink&#34; title=&#34;继续保持的&#34;&gt;&lt;/a&gt;继续保持的&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;减少DNS查询&lt;ul&gt;
&lt;li&gt;减少域名&lt;/li&gt;
&lt;li&gt;启用预读：dns-prefetch&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用CDN&lt;/li&gt;
&lt;li&gt;避免重定向&lt;/li&gt;
&lt;li&gt;资源压缩&lt;ul&gt;
&lt;li&gt;代码压缩（JS、HTML、CSS）&lt;/li&gt;
&lt;li&gt;资源压缩（图片、字体、音频、视频）&lt;/li&gt;
&lt;li&gt;文本压缩（Gzip）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;不再需要的&#34;&gt;&lt;a href=&#34;#不再需要的&#34; class=&#34;headerlink&#34; title=&#34;不再需要的&#34;&gt;&lt;/a&gt;不再需要的&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;分片与域名散列：HTTP&amp;#x2F;2对于一个域名只使用一个TCP连接，分片反而会浪费资源，同时也会影响流控制、头部压缩的表现。&lt;/li&gt;
&lt;li&gt;资源打包合并：HTTP&amp;#x2F;2支持多路复用，资源合并会降低缓存利用率，且会让开发流程更复杂。（&lt;a href=&#34;https://github.com/pikapkg/snowpack&#34;&gt;snowpack&lt;/a&gt;了解一下）&lt;/li&gt;
&lt;li&gt;资源内联：可以由服务器推送解决这类需求，资源内联一方面无法缓存，另一方面会让页面代码更大&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;常见问题&#34;&gt;&lt;a href=&#34;#常见问题&#34; class=&#34;headerlink&#34; title=&#34;常见问题&#34;&gt;&lt;/a&gt;常见问题&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Q: 既然HTTP&amp;#x2F;2是在SPDY工作基础上设计的，那HTTP&amp;#x2F;2推出后，SPDY还使用吗&lt;/li&gt;
&lt;li&gt;A: Google公开声明了他们会在2016年移除Chrome里对SPDY和NPN的支持，并且极力推动服务器迁移至HTTP&amp;#x2F;2。2016年2月他们&lt;a href=&#34;https://blog.chromium.org/2016/02/transitioning-from-spdy-to-http2.html&#34;&gt;声明&lt;/a&gt;了SPDY和NPN会在Chrome 51之后被移除。&lt;/li&gt;
&lt;li&gt;Q: 这个协议是否只对大型网站有效&lt;/li&gt;
&lt;li&gt;A: 由于缺乏内容分发网络，小网站的网络延迟往往较高，而多路复用的能力可以极大的改善在高网络延迟下的体验。&lt;/li&gt;
&lt;li&gt;Q: 基于TLS让速度变得更慢&lt;/li&gt;
&lt;li&gt;A: 正如上一节提到的，TLS的握手确实增加了额外的开销，也有越来越多的方案提出来减少TLS往返的时间。TLS同时也会更多消耗CPU等资源，更多例子可见&lt;a href=&#34;https://istlsfastyet.com/&#34;&gt;istlsfastyet.com&lt;/a&gt;。不过一方面HTTP&amp;#x2F;2并不强制要求基于TLS，另一方面HTTP&amp;#x2F;2带来的性能提升使得即使基于TLS，通常也会比HTTP1.1更快&lt;/li&gt;
&lt;li&gt;Q: 为什么不使用文本传输&lt;/li&gt;
&lt;li&gt;A: 的确，如果可以直接读出协议内容，那么调试和追踪都会变得更为简单。但是二进制带来的灵活度更高，何况浏览器会自动帮你解析。&lt;/li&gt;
&lt;li&gt;Q: 看起来，HTTP1.1中的一些短板并没有改彻底&lt;/li&gt;
&lt;li&gt;A: 实际上，设计HTTP&amp;#x2F;2之初的目标就包括向前兼容HTTP&amp;#x2F;1.1的范式，来保证升级协议也不用重写底层的很多东西。老的HTTP功能，如协议头、状态码、可怕的Cookie，这些都保留了。性能优化更多通过增加了一个中间分帧层解决的。&lt;/li&gt;
&lt;li&gt;Q: 目前使用的广泛程度如何&lt;/li&gt;
&lt;li&gt;A: 在2015年年底大多数浏览器就已经支持HTTP&amp;#x2F;2，目前约96%的浏览器支持HTTP&amp;#x2F;2，同时约46%的网站支持HTTP&amp;#x2F;2。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;后续&#34;&gt;&lt;a href=&#34;#后续&#34; class=&#34;headerlink&#34; title=&#34;后续&#34;&gt;&lt;/a&gt;后续&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;官网在给出HTTP&amp;#x2F;2规范时，也曾预计要10年时间和HTTP1.1并存，在这个期间，Web优化的思路也可能会有调整&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.openssl.org/index.php/TLS1.3&#34;&gt;TLS1.3&lt;/a&gt;。2020年2月的&lt;a href=&#34;https://tools.ietf.org/html/rfc8740&#34;&gt;RFC8740&lt;/a&gt;中给出了基于TLS1.3的HTTP&amp;#x2F;2的实现建议。&lt;/li&gt;
&lt;li&gt;既然TCP容易遇到线头阻塞问题，那么能不用使用UDP呢？Google提出的&lt;a href=&#34;https://www.chromium.org/quic&#34;&gt;QUIC&lt;/a&gt;（Quick UDP Internet Connection）它在很大程度上继承了SPDY的衣钵。QUIC可以理解成TCP + TLS + HTTP&amp;#x2F;2替代实现。&lt;/li&gt;
&lt;li&gt;2018年10月，互联网工程任务组HTTP及QUIC工作小组正式将基于QUIC协议的HTTP（英语：HTTP over QUIC）重命名为&lt;a href=&#34;https://datatracker.ietf.org/doc/draft-ietf-quic-http/&#34;&gt;HTTP&amp;#x2F;3&lt;/a&gt;以为确立下一代规范做准备。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考&#34;&gt;&lt;a href=&#34;#参考&#34; class=&#34;headerlink&#34; title=&#34;参考&#34;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://imququ.com/post/http2-new-opportunities-and-challenges.html&#34;&gt;HTTP&amp;#x2F;2：新的机遇与挑战&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://imququ.com/post/http2-resource.html&#34;&gt;HTTP&amp;#x2F;2 资料汇总&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://http2.github.io/&#34;&gt;HTTP&amp;#x2F;2官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://httpwg.org/specs/rfc7540.html&#34;&gt;HTTP&amp;#x2F;2规范&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://httpwg.github.io/specs/rfc7541.html&#34;&gt;HPACK规范&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/web/fundamentals/performance/http2&#34;&gt;HTTP&amp;#x2F;2简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ye11ow.gitbooks.io/http2-explained/content/&#34;&gt;HTTP&amp;#x2F;2讲解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://imququ.com/post/header-compression-in-http2.html&#34;&gt;HTTP&amp;#x2F;2 头部压缩技术介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/fex-team/http2-spec/blob/master/HTTP2%E4%B8%AD%E8%8B%B1%E5%AF%B9%E7%85%A7%E7%89%88(06-29).md&#34;&gt;HTTP&amp;#x2F;2草案13中英对照&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.mnot.net/talks/h2fe/#8&#34;&gt;HTTP&amp;#x2F;2 for Front-End Developers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://velocityconf.com/devops-web-performance-2015/public/schedule/detail/42385&#34;&gt;HTTP&amp;#x2F;2 is here, let’s optimize!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://caniuse.com/#search=HTTP%2F2&#34;&gt;HTTP&amp;#x2F;2支持度&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/http2/http2-spec/wiki/Implementations&#34;&gt;HTTP&amp;#x2F;2实现列表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.chainnews.com/articles/401950499827.htm&#34;&gt;HTTP发展史梳理笔记&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://http2.akamai.com/demo&#34;&gt;HTTP&amp;#x2F;2 is the future of the Web | Akamai&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="HTTP" />
        <category term="HTTP/2" />
        <category term="SPDY" />
        <category term="QUIC" />
        <updated>2020-06-29T14:41:51.000Z</updated>
    </entry>
</feed>
